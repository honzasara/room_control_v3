
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 85 32 	jmp	0x650a	; 0x650a <__ctors_end>
       4:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
       8:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
       c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      10:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      14:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      18:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      1c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      20:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      24:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      28:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      2c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      30:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      34:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      38:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      3c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      40:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      44:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      48:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      4c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      50:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      54:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      58:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      5c:	0c 94 20 d5 	jmp	0x1aa40	; 0x1aa40 <__vector_23>
      60:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      64:	0c 94 ff d7 	jmp	0x1affe	; 0x1affe <__vector_25>
      68:	0c 94 35 d8 	jmp	0x1b06a	; 0x1b06a <__vector_26>
      6c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      70:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      74:	0c 94 e0 d4 	jmp	0x1a9c0	; 0x1a9c0 <__vector_29>
      78:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      7c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      80:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      84:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      88:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      8c:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      90:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      94:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      98:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      9c:	0c 94 2a cf 	jmp	0x19e54	; 0x19e54 <__vector_39>
      a0:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      a4:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      a8:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      ac:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      b0:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      b4:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      b8:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      bc:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      c0:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      c4:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>
      c8:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 b8 d7 	jmp	0x1af70	; 0x1af70 <HardwareSerial::write(unsigned char)>
      d0:	0c 94 91 b2 	jmp	0x16522	; 0x16522 <EthernetClient::operator==(EthernetClient const&)>
      d4:	0c 94 40 3a 	jmp	0x7480	; 0x7480 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
      d8:	0c 94 16 b3 	jmp	0x1662c	; 0x1662c <EthernetClient::available()>
      dc:	0c 94 6a b4 	jmp	0x168d4	; 0x168d4 <Print::flush()>
      e0:	0c 94 95 44 	jmp	0x892a	; 0x892a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
      e4:	0c 94 61 d6 	jmp	0x1acc2	; 0x1acc2 <turnOffPWM+0x78>
      e8:	0c 94 85 3a 	jmp	0x750a	; 0x750a <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
      ec:	0c 94 21 b3 	jmp	0x16642	; 0x16642 <EthernetClient::read()>
      f0:	0c 94 fe 33 	jmp	0x67fc	; 0x67fc <display_enable_show(unsigned int, unsigned int, unsigned char)>
      f4:	0c 94 aa 99 	jmp	0x13354	; 0x13354 <LCDWIKI_KBV::Get_Height() const>
      f8:	0c 94 67 b6 	jmp	0x16cce	; 0x16cce <EthernetUDP::endPacket()>
      fc:	0c 94 7d d6 	jmp	0x1acfa	; 0x1acfa <turnOffPWM+0xb0>
     100:	0c 94 65 ad 	jmp	0x15aca	; 0x15aca <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     104:	0c 94 39 d7 	jmp	0x1ae72	; 0x1ae72 <HardwareSerial::read()>
     108:	0c 94 01 b6 	jmp	0x16c02	; 0x16c02 <UDP::beginMulticast(IPAddress, unsigned int)>
     10c:	0c 94 3f b3 	jmp	0x1667e	; 0x1667e <EthernetClient::peek()>
     110:	0c 94 8d ad 	jmp	0x15b1a	; 0x15b1a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     114:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     118:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <menu_tds_save_offset(unsigned int, float, unsigned char)>
     11c:	0c 94 89 d6 	jmp	0x1ad12	; 0x1ad12 <turnOffPWM+0xc8>
     120:	0c 94 95 37 	jmp	0x6f2a	; 0x6f2a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     124:	0c 94 47 3a 	jmp	0x748e	; 0x748e <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     128:	0c 94 84 81 	jmp	0x10308	; 0x10308 <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 1c 8a 	jmp	0x11438	; 0x11438 <printf_via_mqtt(char, __file*)>
     130:	0c 94 45 34 	jmp	0x688a	; 0x688a <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     134:	0c 94 b0 4f 	jmp	0x9f60	; 0x9f60 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 fb a1 	jmp	0x143f6	; 0x143f6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     13c:	0c 94 d0 37 	jmp	0x6fa0	; 0x6fa0 <click_button_default_value(unsigned int, unsigned int, unsigned char)>
     140:	0c 94 9c b2 	jmp	0x16538	; 0x16538 <EthernetClient::connect(char const*, unsigned int)>
     144:	0c 94 2e af 	jmp	0x15e5c	; 0x15e5c <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     148:	0c 94 89 34 	jmp	0x6912	; 0x6912 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 7d d4 	jmp	0x1a8fa	; 0x1a8fa <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
     150:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     154:	0c 94 49 d6 	jmp	0x1ac92	; 0x1ac92 <turnOffPWM+0x48>
     158:	0c 94 e5 45 	jmp	0x8bca	; 0x8bca <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 de 3e 	jmp	0x7dbc	; 0x7dbc <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     160:	0c 94 57 36 	jmp	0x6cae	; 0x6cae <menu_tds_save_period(unsigned int, float, unsigned char)>
     164:	0c 94 38 b6 	jmp	0x16c70	; 0x16c70 <EthernetUDP::flush()>
     168:	0c 94 fc b3 	jmp	0x167f8	; 0x167f8 <EthernetClient::stop()>
     16c:	0c 94 a9 34 	jmp	0x6952	; 0x6952 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 1e b6 	jmp	0x16c3c	; 0x16c3c <EthernetUDP::available()>
     174:	0c 94 7a 44 	jmp	0x88f4	; 0x88f4 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     178:	0c 94 6a 36 	jmp	0x6cd4	; 0x6cd4 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     17c:	0c 94 89 b2 	jmp	0x16512	; 0x16512 <EthernetClient::operator bool()>
     180:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     184:	0c 94 03 b6 	jmp	0x16c06	; 0x16c06 <EthernetUDP::read(char*, unsigned int)>
     188:	0c 94 62 b3 	jmp	0x166c4	; 0x166c4 <EthernetClient::flush()>
     18c:	0c 94 8d 3b 	jmp	0x771a	; 0x771a <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 85 d6 	jmp	0x1ad0a	; 0x1ad0a <turnOffPWM+0xc0>
     194:	0c 94 fa b2 	jmp	0x165f4	; 0x165f4 <EthernetClient::write(unsigned char const*, unsigned int)>
     198:	0c 94 2b d7 	jmp	0x1ae56	; 0x1ae56 <HardwareSerial::peek()>
     19c:	0c 94 49 45 	jmp	0x8a92	; 0x8a92 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 14 3a 	jmp	0x7428	; 0x7428 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     1a4:	0c 94 c9 cc 	jmp	0x19992	; 0x19992 <TwoWire::read()>
     1a8:	0c 94 86 81 	jmp	0x1030c	; 0x1030c <serial_putc(char, __file*)>
     1ac:	0c 94 4a b6 	jmp	0x16c94	; 0x16c94 <EthernetUDP::stop()>
     1b0:	0c 94 3c b4 	jmp	0x16878	; 0x16878 <EthernetClient::connected()>
     1b4:	0c 94 af 34 	jmp	0x695e	; 0x695e <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     1b8:	0c 94 ec 3b 	jmp	0x77d8	; 0x77d8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 46 34 	jmp	0x688c	; 0x688c <a2d_complete(unsigned char, unsigned int)>
     1c0:	0c 94 99 ad 	jmp	0x15b32	; 0x15b32 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     1c4:	0c 94 96 34 	jmp	0x692c	; 0x692c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1c8:	0c 94 b9 3b 	jmp	0x7772	; 0x7772 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     1cc:	0c 94 4d d6 	jmp	0x1ac9a	; 0x1ac9a <turnOffPWM+0x50>
     1d0:	0c 94 8b 45 	jmp	0x8b16	; 0x8b16 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     1d4:	0c 94 79 ad 	jmp	0x15af2	; 0x15af2 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     1d8:	0c 94 5b d6 	jmp	0x1acb6	; 0x1acb6 <turnOffPWM+0x6c>
     1dc:	0c 94 a6 99 	jmp	0x1334c	; 0x1334c <LCDWIKI_KBV::Get_Width() const>
     1e0:	0c 94 81 d6 	jmp	0x1ad02	; 0x1ad02 <turnOffPWM+0xb8>
     1e4:	0c 94 21 6e 	jmp	0xdc42	; 0xdc42 <mqtt_callback(char*, unsigned char*, unsigned int)>
     1e8:	0c 94 03 95 	jmp	0x12a06	; 0x12a06 <_GLOBAL__sub_I_PID_Input>
     1ec:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1f0:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     1f4:	0c 94 7c 34 	jmp	0x68f8	; 0x68f8 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     1f8:	0c 94 d9 ae 	jmp	0x15db2	; 0x15db2 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     1fc:	0c 94 2a 34 	jmp	0x6854	; 0x6854 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 ec cc 	jmp	0x199d8	; 0x199d8 <TwoWire::onReceiveService(unsigned char*, int)>
     204:	0c 94 d9 b7 	jmp	0x16fb2	; 0x16fb2 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     208:	0c 94 a7 ad 	jmp	0x15b4e	; 0x15b4e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>
     20c:	0c 94 e4 b7 	jmp	0x16fc8	; 0x16fc8 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
     210:	0c 94 37 4f 	jmp	0x9e6e	; 0x9e6e <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     214:	0c 94 6c 34 	jmp	0x68d8	; 0x68d8 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     218:	0c 94 7b b7 	jmp	0x16ef6	; 0x16ef6 <EthernetUDP::beginPacket(char const*, unsigned int)>
     21c:	0c 94 66 b2 	jmp	0x164cc	; 0x164cc <Print::availableForWrite()>
     220:	0c 94 73 d6 	jmp	0x1ace6	; 0x1ace6 <turnOffPWM+0x9c>
     224:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     228:	0c 94 88 d6 	jmp	0x1ad10	; 0x1ad10 <turnOffPWM+0xc6>
     22c:	0c 94 52 ad 	jmp	0x15aa4	; 0x15aa4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     230:	0c 94 76 40 	jmp	0x80ec	; 0x80ec <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     234:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     238:	0c 94 51 cd 	jmp	0x19aa2	; 0x19aa2 <TwoWire::write(unsigned char const*, unsigned int)>
     23c:	0c 94 60 98 	jmp	0x130c0	; 0x130c0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     240:	0c 94 1b ce 	jmp	0x19c36	; 0x19c36 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     244:	0c 94 bb c6 	jmp	0x18d76	; 0x18d76 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     248:	0c 94 ff 3f 	jmp	0x7ffe	; 0x7ffe <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     24c:	0c 94 98 97 	jmp	0x12f30	; 0x12f30 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     250:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     254:	0c 94 81 b4 	jmp	0x16902	; 0x16902 <EthernetServer::begin()>
     258:	0c 94 96 d8 	jmp	0x1b12c	; 0x1b12c <IPAddress::printTo(Print&) const>
     25c:	0c 94 5c d7 	jmp	0x1aeb8	; 0x1aeb8 <serialEventRun()>
     260:	0c 94 16 cd 	jmp	0x19a2c	; 0x19a2c <TwoWire::onRequestService()>
     264:	0c 94 3b 3a 	jmp	0x7476	; 0x7476 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     268:	0c 94 69 b2 	jmp	0x164d2	; 0x164d2 <EthernetClient::operator!=(EthernetClient const&)>
     26c:	0c 94 10 3b 	jmp	0x7620	; 0x7620 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     270:	0c 94 e8 33 	jmp	0x67d0	; 0x67d0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     274:	0c 94 ef 4f 	jmp	0x9fde	; 0x9fde <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     278:	0c 94 56 3c 	jmp	0x78ac	; 0x78ac <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     27c:	0c 94 2d da 	jmp	0x1b45a	; 0x1b45a <__cxa_pure_virtual>
     280:	0c 94 a9 b6 	jmp	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
     284:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     288:	0c 94 20 34 	jmp	0x6840	; 0x6840 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 7f b6 	jmp	0x16cfe	; 0x16cfe <EthernetUDP::read()>
     290:	0c 94 69 d8 	jmp	0x1b0d2	; 0x1b0d2 <_GLOBAL__sub_I___vector_25>
     294:	0c 94 04 38 	jmp	0x7008	; 0x7008 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     298:	0c 94 65 d6 	jmp	0x1acca	; 0x1acca <turnOffPWM+0x80>
     29c:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     2a0:	0c 94 3c 34 	jmp	0x6878	; 0x6878 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 98 d7 	jmp	0x1af30	; 0x1af30 <HardwareSerial::flush()>
     2a8:	0c 94 1f d7 	jmp	0x1ae3e	; 0x1ae3e <HardwareSerial::available()>
     2ac:	0c 94 6b b6 	jmp	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
     2b0:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     2b4:	0c 94 58 ad 	jmp	0x15ab0	; 0x15ab0 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     2b8:	0c 94 43 d6 	jmp	0x1ac86	; 0x1ac86 <turnOffPWM+0x3c>
     2bc:	0c 94 00 34 	jmp	0x6800	; 0x6800 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     2c0:	0c 94 0a 3b 	jmp	0x7614	; 0x7614 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     2c4:	0c 94 43 46 	jmp	0x8c86	; 0x8c86 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 c8 b6 	jmp	0x16d90	; 0x16d90 <EthernetUDP::peek()>
     2cc:	0c 94 61 42 	jmp	0x84c2	; 0x84c2 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2d0:	0c 94 e0 b6 	jmp	0x16dc0	; 0x16dc0 <EthernetUDP::parsePacket()>
     2d4:	0c 94 7f 8a 	jmp	0x114fe	; 0x114fe <_GLOBAL__sub_I_mqtt_error>
     2d8:	0c 94 5d 78 	jmp	0xf0ba	; 0xf0ba <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     2dc:	0c 94 4e 44 	jmp	0x889c	; 0x889c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     2e0:	0c 94 4d d7 	jmp	0x1ae9a	; 0x1ae9a <HardwareSerial::availableForWrite()>
     2e4:	0c 94 73 ad 	jmp	0x15ae6	; 0x15ae6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
     2e8:	0c 94 87 34 	jmp	0x690e	; 0x690e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 22 b6 	jmp	0x16c44	; 0x16c44 <EthernetUDP::write(unsigned char)>
     2f0:	0c 94 97 b3 	jmp	0x1672e	; 0x1672e <EthernetClient::connect(IPAddress, unsigned int)>
     2f4:	0c 94 a3 34 	jmp	0x6946	; 0x6946 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 77 d6 	jmp	0x1acee	; 0x1acee <turnOffPWM+0xa4>
     2fc:	0c 94 1a b6 	jmp	0x16c34	; 0x16c34 <EthernetUDP::remotePort()>
     300:	0c 94 f6 b5 	jmp	0x16bec	; 0x16bec <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
     304:	0c 94 65 48 	jmp	0x90ca	; 0x90ca <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     308:	0c 94 6e 3c 	jmp	0x78dc	; 0x78dc <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     30c:	0c 94 6f d6 	jmp	0x1acde	; 0x1acde <turnOffPWM+0x94>
     310:	0c 94 57 d6 	jmp	0x1acae	; 0x1acae <turnOffPWM+0x64>
     314:	0c 94 3b b3 	jmp	0x16676	; 0x16676 <EthernetClient::read(unsigned char*, unsigned int)>
     318:	0c 94 fc 33 	jmp	0x67f8	; 0x67f8 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     31c:	0c 94 7f ad 	jmp	0x15afe	; 0x15afe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     320:	0c 94 ac ad 	jmp	0x15b58	; 0x15b58 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     324:	0c 94 03 d9 	jmp	0x1b206	; 0x1b206 <Print::write(unsigned char const*, unsigned int)>
     328:	0c 94 5f b6 	jmp	0x16cbe	; 0x16cbe <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     32c:	0c 94 dd 34 	jmp	0x69ba	; 0x69ba <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     330:	0c 94 6b b4 	jmp	0x168d6	; 0x168d6 <EthernetServer::write(unsigned char)>
     334:	0c 94 e7 36 	jmp	0x6dce	; 0x6dce <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     338:	0c 94 33 ad 	jmp	0x15a66	; 0x15a66 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     33c:	0c 94 ae 99 	jmp	0x1335c	; 0x1335c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     340:	0c 94 33 34 	jmp	0x6866	; 0x6866 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     344:	0c 94 11 47 	jmp	0x8e22	; 0x8e22 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     348:	0c 94 71 46 	jmp	0x8ce2	; 0x8ce2 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 e3 43 	jmp	0x87c6	; 0x87c6 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     350:	0c 94 87 35 	jmp	0x6b0e	; 0x6b0e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 d9 3c 	jmp	0x79b2	; 0x79b2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     358:	0c 94 2d 36 	jmp	0x6c5a	; 0x6c5a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     35c:	0c 94 c2 37 	jmp	0x6f84	; 0x6f84 <helper_display_set_brightness(unsigned int, float, unsigned char)>
     360:	0c 94 c2 cc 	jmp	0x19984	; 0x19984 <TwoWire::available()>
     364:	0c 94 1e 3a 	jmp	0x743c	; 0x743c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     368:	0c 94 eb cc 	jmp	0x199d6	; 0x199d6 <TwoWire::flush()>
     36c:	0c 94 27 34 	jmp	0x684e	; 0x684e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 da 9b 	jmp	0x137b4	; 0x137b4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     374:	0c 94 5f b4 	jmp	0x168be	; 0x168be <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     378:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     37c:	0c 94 3c bc 	jmp	0x17878	; 0x17878 <_GLOBAL__sub_I_w5500>
     380:	0c 94 51 d6 	jmp	0x1aca2	; 0x1aca2 <turnOffPWM+0x58>
     384:	0c 94 73 b2 	jmp	0x164e6	; 0x164e6 <EthernetClient::write(unsigned char)>
     388:	0c 94 4e 3b 	jmp	0x769c	; 0x769c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     38c:	0c 94 51 b2 	jmp	0x164a2	; 0x164a2 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     390:	0c 94 dc cc 	jmp	0x199b8	; 0x199b8 <TwoWire::peek()>
     394:	0c 94 31 b7 	jmp	0x16e62	; 0x16e62 <EthernetUDP::begin(unsigned int)>
     398:	0c 94 22 cd 	jmp	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
     39c:	0c 94 93 ad 	jmp	0x15b26	; 0x15b26 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     3a0:	0c 94 71 3f 	jmp	0x7ee2	; 0x7ee2 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3a4:	0c 94 90 8a 	jmp	0x11520	; 0x11520 <_GLOBAL__sub_I_scan_rf_net_enable>
     3a8:	0c 94 4e 98 	jmp	0x1309c	; 0x1309c <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     3ac:	0c 94 5f d8 	jmp	0x1b0be	; 0x1b0be <Serial0_available()>
     3b0:	0c 94 2e b5 	jmp	0x16a5c	; 0x16a5c <EthernetServer::write(unsigned char const*, unsigned int)>
     3b4:	0c 94 03 38 	jmp	0x7006	; 0x7006 <nullfce(unsigned int, unsigned int, unsigned char)>
     3b8:	0c 94 6d 68 	jmp	0xd0da	; 0xd0da <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3bc:	0c 94 69 d6 	jmp	0x1acd2	; 0x1acd2 <turnOffPWM+0x88>
     3c0:	0c 94 0a b6 	jmp	0x16c14	; 0x16c14 <EthernetUDP::remoteIP()>

000003c4 <__trampolines_end>:
__trampolines_end():
     3c4:	4e 41       	sbci	r20, 0x1E	; 30
     3c6:	4e 49       	Address 0x00000000000003c6 is out of bounds.
.word	0xffff	; ????

000003c7 <pstr_inity>:
     3c7:	49 4e 49 54 59                                      INITY

000003cc <pstr_inf>:
     3cc:	49 4e 46                                            INF

000003cf <pwr_m10>:
     3cf:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3df:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003e7 <pwr_p10>:
     3e7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3f7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     407:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     417:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     427:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     437:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     447:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     457:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     467:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     477:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     487:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     497:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     4a7:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     4b7:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     4c7:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     4d7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     4e7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4f7:	3d 27                                               ='

000004f9 <Menu_All>:
     4f9:	06 04 03 06 0b 5c c7 5a 22 01 96 00 aa 00 28 00     .....\.Z".....(.
     509:	02 05 03 38 08 fe 33 d1 5a 22 01 5a 00 aa 00 28     ...8..3.Z".Z...(
     519:	00 02 01 03 38 08 fe 33 d8 5a 22 01 1e 00 aa 00     ....8..3.Z".....
     529:	28 00 02 02 1e 3a 08 fe 33 00 00 00 00 00 00 00     (....:..3.......
	...
     5a9:	be 5a 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     .Z....R.<.......
     5b9:	83 37 95 37 0a fe 33 ba 5a 64 00 dc 00 52 00 3c     .7.7..3.Zd...R.<
     5c9:	00 03 00 f8 ff ff 01 83 37 95 37 0a fe 33 b6 5a     ........7.7..3.Z
     5d9:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 83 37     ....R.<........7
     5e9:	95 37 0a fe 33 b1 5a 18 01 dc 00 52 00 3c 00 03     .7..3.Z....R.<..
     5f9:	e0 ff ff ff 02 83 37 95 37 0a fe 33 ad 5a 72 01     ......7.7..3.Zr.
     609:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 83 37 95 37     ..R.<........7.7
     619:	0a fe 33 0a 00 82 00 00 6d 68 00 00 00 00 0c 03     ..3.....mh......
     629:	38 fe 33 12 59 18 01 22 01 00 ff 3f 00 00 00 00     8.3.Y.."...?....
     639:	0c 03 38 fe 33 12 59 0a 00 1e 00 00 71 3f 00 00     ..8.3.Y.....q?..
     649:	00 00 09 03 38 fe 33 12 59 00 00 00 00 00 00 00     ....8.3.Y.......
	...
     7b9:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     7c9:	40 01 01 ff ff 08 2a 34 33 34 3c 34 fc 33 9e 5a     @.....*434<4.3.Z
     7d9:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
     7e9:	33 4d 56 18 01 dc 00 be 00 1e 00 01 00 03 38 08     3MV...........8.
     7f9:	fe 33 62 56 18 01 b4 00 be 00 1e 00 01 00 03 38     .3bV...........8
     809:	08 fe 33 34 56 18 01 8c 00 be 00 1e 00 01 00 03     ..34V...........
     819:	38 08 fe 33 78 56 18 01 64 00 be 00 1e 00 01 00     8..3xV..d.......
     829:	03 38 08 fe 33 90 56 18 01 3c 00 be 00 1e 00 01     .8..3.V..<......
     839:	00 03 38 08 fe 33 a5 56 18 01 14 00 be 00 1e 00     ..8..3.V........
     849:	01 00 03 38 08 fe 33 b2 56 18 01 04 01 be 00 1e     ...8..3.V.......
     859:	00 01 00 03 38 08 fe 33 25 56 0a 00 aa 00 be 00     ....8..3%V......
     869:	28 00 01 00 84 81 08 fe 33 00 00 00 00 00 00 00     (.......3.......
	...
     8f5:	00 0a 00 28 00 00 61 42 c8 00 78 00 08 03 38 fe     ...(..aB..x...8.
     905:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
     a91:	00 00 00 09 00 01 00 00 00 00 00 10 00 00 00 00     ................
     aa1:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3
     ab1:	72 5a c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     rZ.Z......(....:
     ac1:	08 fe 33 5f 57 0a 00 28 00 be 00 28 00 02 00 10     ..3_W..(...(....
     ad1:	3b 08 fe 33 00 00 00 00 00 00 00 00 00 00 00 00     ;..3............
	...
     bcd:	00 00 00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03     ....."...?......
     bdd:	38 fe 33 12 59 9a 01 48 00 00 f9 34 28 00 7e 00     8.3.Y..H...4(.~.
     bed:	08 03 38 fe 33 12 59 dc 00 14 00 00 e8 34 f0 00     ..8.3.Y......4..
     bfd:	f0 00 08 03 38 fe 33 12 59 00 00 00 00 00 00 00     ....8.3.Y.......
	...
     c5d:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00 01     ..#...7..<<.....
     c6d:	6c 36 4e 3b 89 34 08 00 00 00 00 00 00 00 00 00     l6N;.4..........
	...
     c89:	00 00 2b 9a 01 1e 00 28 00 28 00 02 00 7c 34 08     ..+....(.(...|4.
     c99:	fe 33 2d 9a 01 c8 00 28 00 28 00 02 00 6c 34 08     .3-....(.(...l4.
     ca9:	fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
	...
     d6d:	00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0 01     ................
     d7d:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 8d 57     @......3.3.3.3.W
     d8d:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
     d9d:	33 57 59 0a 00 28 00 be 00 28 00 01 00 37 4f 08     3WY..(...(...7O.
     dad:	fe 33 0f 56 0a 00 64 00 be 00 28 00 01 00 03 38     .3.V..d...(....8
     dbd:	08 fe 33 01 56 0a 00 a0 00 be 00 28 00 01 00 b0     ..3.V......(....
     dcd:	4f 08 fe 33 ec 55 18 01 28 00 be 00 28 00 01 00     O..3.U..(...(...
     ddd:	03 38 08 fe 33 d5 55 18 01 64 00 be 00 28 00 01     .8..3.U..d...(..
     ded:	00 03 38 08 fe 33 00 00 00 00 00 00 00 00 00 00     ..8..3..........
	...
     ea9:	00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03 38 fe     ..."...?......8.
     eb9:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    1045:	00 00 00 06 00 01 00 00 00 00 00 99 00 00 00 00     ................
    1055:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3
    1065:	6d 59 c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     mY.Z......(....:
    1075:	08 fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00     ..3.............
	...
    1181:	00 00 00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03     ....."...?......
    1191:	38 fe 33 12 59 9a 01 48 00 02 f9 34 28 00 56 00     8.3.Y..H...4(.V.
    11a1:	08 03 38 fe 33 12 59 05 00 1e 00 00 e8 34 cc 01     ..8.3.Y......4..
    11b1:	b4 00 08 03 38 fe 33 12 59 00 00 00 00 00 00 00     ....8.3.Y.......
	...
    123d:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 7c 34 08     ..+....(.(...|4.
    124d:	fe 33 2d 9a 01 a0 00 28 00 28 00 02 02 6c 34 08     .3-....(.(...l4.
    125d:	fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
	...
    1301:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    1311:	ff 82 50 02 03 02 02 00 95 44 65 48 96 34 a3 34     ..P......DeH.4.4
    1321:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    1331:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 24 57     @......3.3.3.3$W
    1341:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
    1351:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
    15f9:	00 00 00 01 00 00 00 00 00 00 00 9a 00 00 00 00     ................
    1609:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3
	...
    2181:	4c 59 3d 59 1e 00 3c 00 64 00 28 00 02 00 65 3a     LY=Y..<.d.(...e:
    2191:	08 fe 33 3a 59 fa 00 3c 00 64 00 28 00 02 00 14     ..3:Y..<.d.(....
    21a1:	3a 08 fe 33 00 00 00 00 00 00 00 00 00 00 00 00     :..3............
	...
    229d:	00 00 00 14 00 23 00 00 56 3c 00 00 00 00 08 03     .....#..V<......
    22ad:	38 fe 33 12 59 00 00 00 00 00 00 00 00 00 00 00     8.3.Y...........
	...
    243d:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    244d:	8c 00 06 e0 ff 08 fc 33 fc 33 fc 33 fc 33 4c 59     .......3.3.3.3LY
    245d:	2c 59 0a 00 c8 00 82 00 28 00 02 00 47 3a 08 fe     ,Y......(...G:..
    246d:	33 33 59 96 00 c8 00 82 00 28 00 02 00 14 3a 08     33Y......(....:.
    247d:	fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
	...
    2579:	00 64 00 2d 00 00 f9 3d b4 00 28 00 08 03 38 fe     .d.-...=..(...8.
    2589:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    2635:	2b 3c 00 2d 00 28 00 28 00 02 00 d3 35 08 fe 33     +<.-.(.(....5..3
    2645:	2d 18 01 2d 00 28 00 28 00 02 00 87 35 08 fe 33     -..-.(.(....5..3
	...
    2715:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    2725:	cc 01 04 01 06 e0 ff 08 fc 33 fc 33 fc 33 fc 33     .........3.3.3.3
    2735:	41 59 2c 59 0a 00 c8 00 82 00 28 00 02 00 40 3a     AY,Y......(...@:
    2745:	08 fe 33 33 59 96 00 c8 00 82 00 28 00 02 00 14     ..33Y......(....
    2755:	3a 08 fe 33 22 59 2c 01 c8 00 82 00 28 00 02 00     :..3"Y,.....(...
    2765:	2d 36 08 fe 33 17 59 40 01 23 00 28 00 28 00 02     -6..3.Y@.#.(.(..
    2775:	00 27 34 08 fe 33 15 59 6d 01 23 00 28 00 28 00     .'4..3.Ym.#.(.(.
    2785:	02 01 27 34 08 fe 33 13 59 9a 01 23 00 28 00 28     ..'4..3.Y..#.(.(
    2795:	00 02 02 27 34 08 fe 33 00 00 00 00 00 00 00 00     ...'4..3........
	...
    2851:	00 00 00 0a 00 23 00 00 de 3e 2c 01 28 00 08 03     .....#...>,.(...
    2861:	38 fe 33 12 59 00 00 00 00 00 00 00 00 00 00 00     8.3.Y...........
	...
    298d:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    299d:	00 03 00 34 ec 3b 20 34 08 00 00 00 00 00 00 00     ...4.; 4........
	...
    29f1:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2a01:	04 01 06 e0 ff 08 fc 33 fc 33 fc 33 fc 33 4c 59     .......3.3.3.3LY
    2a11:	5c 57 fa 00 3c 00 64 00 28 00 02 00 14 3a 08 fe     \W..<.d.(....:..
    2a21:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
    2b2d:	00 14 00 23 00 00 56 3c 00 00 00 00 08 03 38 fe     ...#..V<......8.
    2b3d:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    2cc9:	00 00 00 01 00 01 00 00 00 00 00 68 32 00 32 00     ...........h2.2.
    2cd9:	7c 01 8c 00 06 e0 ff 08 fc 33 fc 33 fc 33 fc 33     |........3.3.3.3
	...
    329d:	48 5a c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     HZ.Z......(....:
    32ad:	08 fe 33 e9 59 18 01 be 00 be 00 28 00 02 00 3b     ..3.Y......(...;
    32bd:	3a 08 fe 33 da 59 18 01 8c 00 be 00 28 00 02 00     :..3.Y......(...
    32cd:	85 3a 08 fe 33 cb 59 18 01 5a 00 be 00 28 00 02     .:..3.Y..Z...(..
    32dd:	00 8d 3b 08 fe 33 bb 59 18 01 28 00 be 00 28 00     ..;..3.Y..(...(.
    32ed:	02 00 c3 3a 08 fe 33 00 00 00 00 00 00 00 00 00     ...:..3.........
	...
    33b9:	00 00 00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03     ....."...?......
    33c9:	38 fe 33 12 59 14 00 14 00 00 d9 3c 00 00 00 00     8.3.Y......<....
    33d9:	08 03 38 fe 33 12 59 14 00 14 00 00 6e 3c 00 00     ..8.3.Y.....n<..
    33e9:	00 00 0c 03 38 fe 33 12 59 00 00 00 00 00 00 00     ....8.3.Y.......
	...
    3559:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    3569:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 63 5a     @......3.3.3.3cZ
    3579:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
    3589:	33 e9 59 18 01 5a 00 be 00 28 00 02 00 49 45 08     3.Y..Z...(...IE.
    3599:	fe 33 cb 59 18 01 28 00 be 00 28 00 02 00 e3 43     .3.Y..(...(....C
    35a9:	08 fe 33 ab 59 18 01 8c 00 be 00 28 00 02 00 8b     ..3.Y......(....
    35b9:	45 08 fe 33 00 00 00 00 00 00 00 00 00 00 00 00     E..3............
	...
    3695:	00 14 00 14 00 00 11 47 00 00 00 00 0c 03 38 fe     .......G......8.
    36a5:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    3831:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    3841:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3
    3851:	63 5a c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     cZ.Z......(....:
    3861:	08 fe 33 f7 59 0a 00 28 00 be 00 28 00 01 00 e5     ..3.Y..(...(....
    3871:	45 08 fe 33 00 00 00 00 00 00 00 00 00 00 00 00     E..3............
	...
    396d:	00 00 00 dc 00 14 00 00 e8 34 f0 00 f0 00 08 03     .........4......
    397d:	38 fe 33 12 59 18 01 22 01 00 ff 3f 00 00 00 00     8.3.Y.."...?....
    398d:	0c 03 38 fe 33 12 59 9a 01 48 00 01 f9 34 28 00     ..8.3.Y..H...4(.
    399d:	7e 00 08 03 38 fe 33 12 59 00 00 00 00 00 00 00     ~...8.3.Y.......
	...
    39fd:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    3a0d:	4e 44 7a 44 87 34 08 00 00 00 00 00 00 00 00 00     NDzD.4..........
	...
    3a29:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 7c 34 08     ..+....(.(...|4.
    3a39:	fe 33 2d 9a 01 c8 00 28 00 28 00 02 01 6c 34 08     .3-....(.(...l4.
    3a49:	fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
	...
    3b0d:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3b1d:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 00 00     @......3.3.3.3..
	...
    43b9:	f7 57 c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     .W.Z......(....:
    43c9:	08 fe 33 9e 5a 0a 00 28 00 be 00 28 00 02 10 1e     ..3.Z..(...(....
    43d9:	3a 08 fe 33 90 5a 0a 00 64 00 be 00 28 00 02 00     :..3.Z..d...(...
    43e9:	03 38 08 fe 33 80 5a 18 01 a0 00 be 00 28 00 02     .8..3.Z......(..
    43f9:	00 d0 37 08 fe 33 8d 57 18 01 28 00 be 00 28 00     ..7..3.W..(...(.
    4409:	02 99 1e 3a 08 fe 33 82 57 18 01 64 00 be 00 28     ...:..3.W..d...(
    4419:	00 02 9c 1e 3a 08 fe 33 24 57 0a 00 a0 00 be 00     ....:..3$W......
    4429:	28 00 02 9a 1e 3a 08 fe 33 00 00 00 00 00 00 00     (....:..3.......
	...
    44d5:	00 00 00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03     ....."...?......
    44e5:	38 fe 33 12 59 00 00 00 00 00 00 00 00 00 00 00     8.3.Y...........
	...
    4675:	00 07 00 01 00 00 00 00 00 96 00 00 00 00 e0 01     ................
    4685:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 d8 5a     @......3.3.3.3.Z
    4695:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
    46a5:	33 ec 57 0a 00 28 00 be 00 28 00 02 96 1e 3a 08     3.W..(...(....:.
    46b5:	fe 33 9c 57 18 01 28 00 be 00 28 00 02 00 03 38     .3.W..(...(....8
    46c5:	08 fe 33 aa 57 0a 00 a0 00 be 00 28 00 02 98 1e     ..3.W......(....
    46d5:	3a 08 fe 33 cb 57 0a 00 64 00 be 00 28 00 02 97     :..3.W..d...(...
    46e5:	1e 3a 08 fe 33 00 00 00 00 00 00 00 00 00 00 00     .:..3...........
	...
    47b1:	00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03 38 fe     ..."...?......8.
    47c1:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    494d:	00 00 00 05 00 01 00 00 00 00 00 02 00 00 00 00     ................
    495d:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3
    496d:	d8 57 c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a     .W.Z......(....:
    497d:	08 fe 33 72 5a 0a 00 28 00 be 00 28 00 02 03 1e     ..3rZ..(...(....
    498d:	3a 08 fe 33 77 57 0a 00 64 00 be 00 28 00 02 06     :..3wW..d...(...
    499d:	1e 3a 08 fe 33 6d 57 0a 00 a0 00 be 00 28 00 02     .:..3mW......(..
    49ad:	00 03 38 08 fe 33 00 00 00 00 00 00 00 00 00 00     ..8..3..........
	...
    4a89:	00 00 00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03     ....."...?......
    4a99:	38 fe 33 12 59 00 00 00 00 00 00 00 00 00 00 00     8.3.Y...........
	...
    4c29:	00 04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01     ................
    4c39:	40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33 b7 57     @......3.3.3.3.W
    4c49:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
    4c59:	33 6d 59 0a 00 28 00 be 00 28 00 01 08 1e 3a 08     3mY..(...(....:.
    4c69:	fe 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
	...
    4d65:	00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03 38 fe     ..."...?......8.
    4d75:	33 12 59 00 00 00 00 00 00 00 00 00 00 00 00 00     3.Y.............
	...
    4df1:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    4e01:	00 01 e7 36 0a 3b 45 34 08 00 00 00 00 00 00 00     ...6.;E4........
	...
    4ee5:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    4ef5:	32 00 01 01 ff 01 1f 36 e4 34 45 34 04 38 08 02     2......6.4E4.8..
    4f05:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    4f15:	01 ff ff 08 fc 33 fc 33 fc 33 fc 33 b7 57 c2 5a     .....3.3.3.3.W.Z
    4f25:	0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe 33 00     ......(....:..3.
	...
    503d:	00 00 00 0e 01 28 00 00 f9 3d 8c 00 28 00 08 03     .....(...=..(...
    504d:	38 dd 34 12 59 00 00 00 00 00 00 00 00 00 00 00     8.4.Y...........
	...
    5085:	00 00 00 a4 55 0a 00 28 00 be 00 28 00 01 e0 07     ....U..(...(....
    5095:	ff ff 00 aa 37 a9 34 46 37 08 00 00 00 00 00 00     ....7.4F7.......
	...
    50f9:	00 00 2b 9a 01 28 00 28 00 28 00 02 00 d3 35 08     ..+..(.(.(....5.
    5109:	dd 34 2d e6 00 28 00 28 00 28 00 02 00 87 35 08     .4-..(.(.(....5.
    5119:	dd 34 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .4..............
	...
    51dd:	00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc 01     ................
    51ed:	18 01 06 e0 ff 08 fc 33 fc 33 fc 33 af 34 82 57     .......3.3.3.4.W
    51fd:	c2 5a 0a 00 dc 00 be 00 28 00 02 00 14 3a 08 fe     .Z......(....:..
    520d:	33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     3...............
	...
    5319:	00 18 01 22 01 00 ff 3f 00 00 00 00 0c 03 38 fe     ..."...?......8.
    5329:	33 12 59 0a 00 1e 00 00 76 40 00 00 00 00 08 03     3.Y.....v@......
    5339:	38 fe 33 12 59 00 00 00 00 00 00 00 00 00 00 00     8.3.Y...........
	...
    54b5:	00 00 00 01 00 02 00 00 00 00 00 9c 00 00 00 00     ................
    54c5:	e0 01 40 01 01 ff ff 08 fc 33 fc 33 fc 33 fc 33     ..@......3.3.3.3

000054d5 <new_text_mqtt_error>:
    54d5:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

000054e4 <new_text_mqtt_processed>:
    54e4:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    54f4:	68 3a 20 00                                         h: .

000054f8 <new_text_mqtt_receive>:
    54f8:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

00005509 <new_text_mqtt_send>:
    5509:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    5519:	20 00                                                .

0000551b <new_text_selfcheck_test>:
    551b:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

00005527 <new_text_internal_temp>:
    5527:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    5537:	20 00                                                .

00005539 <new_text_consume_ampere>:
    5539:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

00005548 <new_text_tritri_volt>:
    5548:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    5558:	2e 33 20 00                                         .3 .

0000555c <new_text_pet_volt>:
    555c:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    556c:	2e 30 20 00                                         .0 .

00005570 <new_text_input_volt>:
    5570:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

00005580 <new_text_jas_display_manual>:
    5580:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

00005591 <new_text_jas_display_automat>:
    5591:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    55a1:	6e 69 00                                            ni.

000055a4 <new_text_switch_brightness_automode>:
    55a4:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

000055b4 <new_text_err_connect_seznam>:
    55b4:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    55c4:	52 00                                               R.

000055c6 <new_text_ok_connect_seznam>:
    55c6:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

000055d5 <new_text_time_set_date_manualy>:
    55d5:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    55e5:	64 61 74 75 6d 75 00                                datumu.

000055ec <new_text_time_set_time_manualy>:
    55ec:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
    55fc:	63 61 73 75 00                                      casu.

00005601 <new_text_time_set_offset>:
    5601:	50 6f 73 75 6e 75 74 69 20 63 61 73 75 00           Posunuti casu.

0000560f <new_text_ntp_set_server>:
    560f:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
    561f:	72 76 65 72 75 00                                   rveru.

00005625 <new_text_set_network_test_connection>:
    5625:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

00005634 <new_text_set_network_name>:
    5634:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
    5644:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

0000564d <new_text_set_network_mac>:
    564d:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
    565d:	72 65 73 79 00                                      resy.

00005662 <new_text_set_network_dns>:
    5662:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
    5672:	72 76 65 72 75 00                                   rveru.

00005678 <new_text_set_network_gw>:
    5678:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
    5688:	69 20 62 72 61 6e 79 00                             i brany.

00005690 <new_text_set_network_mask>:
    5690:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
    56a0:	73 69 74 65 00                                      site.

000056a5 <new_text_set_network_ip>:
    56a5:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

000056b2 <new_text_set_network_dhcp>:
    56b2:	5a 20 44 48 43 50 20 73 65 72 76 65 72 75 00        Z DHCP serveru.

000056c1 <new_text_device_mac>:
    56c1:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

000056cc <new_text_device_dhcp>:
    56cc:	44 48 43 50 00                                      DHCP.

000056d1 <new_text_device_dns>:
    56d1:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

000056dc <new_text_device_gw>:
    56dc:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

000056ea <new_text_device_mask>:
    56ea:	49 50 20 6d 61 73 6b 61 00                          IP maska.

000056f3 <new_text_device_ip>:
    56f3:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

000056fd <new_text_device_nazev>:
    56fd:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

0000570c <new_text_jas_display>:
    570c:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    571c:	69 73 70 6c 61 79 65 00                             isplaye.

00005724 <new_text_nastaveni_mqtt_pripojeni>:
    5724:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

00005733 <new_text_error_ntp_time>:
    5733:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5743:	45 52 52 4f 52 00                                   ERROR.

00005749 <new_text_ok_ntp_time>:
    5749:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5759:	4f 4b 00                                            OK.

0000575c <new_text_ok>:
    575c:	4f 4b 00                                            OK.

0000575f <new_text_scan_onewire_bus>:
    575f:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

0000576d <new_nastaveni_nrf_input>:
    576d:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

00005777 <new_nastaveni_mqtt_topic>:
    5777:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

00005782 <new_text_o_zarizeni>:
    5782:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

0000578d <new_text_nastaveni_casu>:
    578d:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

0000579c <new_text_nastaveni_regulatoru>:
    579c:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

000057aa <new_text_nastaveni_zobrazeni>:
    57aa:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

000057b7 <new_text_nastaveni_zobrazeni_full>:
    57b7:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
    57c7:	65 6e 69 00                                         eni.

000057cb <new_text_nastaveni_periferie>:
    57cb:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

000057d8 <new_text_nastaveni_periferii_full>:
    57d8:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
    57e8:	72 69 69 00                                         rii.

000057ec <new_text_nastaveni_system>:
    57ec:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

000057f7 <new_text_nastaveni_system_full>:
    57f7:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
    5807:	75 00                                               u.

00005809 <seznam_server>:
    5809:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

00005817 <keyboad_number_char_special>:
    5817:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    5827:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00005831 <keyboad_number_char_lower>:
    5831:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    5841:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

0000584b <keyboad_number_char_upper>:
    584b:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    585b:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00005865 <termbig_subscribe>:
    5865:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    5875:	73 63 72 69 62 65 00                                scribe.

0000587c <thermctl_subscribe>:
    587c:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    588c:	62 73 63 72 69 62 65 00                             bscribe.

00005894 <lightctl_header_out>:
    5894:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000058a3 <termbig_header_out>:
    58a3:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000058b1 <termbig_header_in>:
    58b1:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000058be <thermctl_header_out>:
    58be:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

000058cd <thermctl_header_in>:
    58cd:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

000058db <global_time_offset>:
    58db:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    58eb:	6f 66 66 73 65 74 00                                offset.

000058f2 <global_time_ntp>:
    58f2:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00005902 <global_time_set>:
    5902:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00005912 <char_NULL>:
	...

00005913 <text_special_case>:
    5913:	40 00                                               @.

00005915 <text_lower_case>:
    5915:	61 00                                               a.

00005917 <text_upper_case>:
    5917:	41 00                                               A.

00005919 <text_ok>:
    5919:	4f 4b 00                                            OK.

0000591c <text_err>:
    591c:	45 72 72 6f 72 00                                   Error.

00005922 <text_delete_char>:
    5922:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

0000592c <text_ulozit>:
    592c:	55 6c 6f 7a 69 74 00                                Ulozit.

00005933 <text_zrusit>:
    5933:	5a 72 75 73 69 74 00                                Zrusit.

0000593a <text_no>:
    593a:	4e 65 00                                            Ne.

0000593d <text_yes>:
    593d:	41 6e 6f 00                                         Ano.

00005941 <text_klavesnice>:
    5941:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000594c <text_upozorneni>:
    594c:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00005957 <text_ntp_sync_time>:
    5957:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

00005968 <text_prog>:
    5968:	50 52 4f 47 00                                      PROG.

0000596d <text_select_default_temp>:
    596d:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    597d:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00005987 <text_last_update>:
    5987:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    5997:	7a 61 63 65 3a 00                                   zace:.

0000599d <text_online>:
    599d:	4f 6e 6c 69 6e 65 00                                Online.

000059a4 <text_nazev>:
    59a4:	4e 61 7a 65 76 3a 00                                Nazev:.

000059ab <nastaveni_rtds_subscribe>:
    59ab:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000059bb <nastaveni_tds_offset>:
    59bb:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000059cb <nastaveni_name_sensor>:
    59cb:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000059da <nastaveni_tds_period>:
    59da:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

000059e9 <nastaveni_delete_sensor>:
    59e9:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000059f7 <text_rtds_novy>:
    59f7:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    5a07:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00005a12 <text_not_used>:
    5a12:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00005a1f <text_rtds_prefix>:
    5a1f:	2f 00                                               /.

00005a21 <text_nastavit_tds>:
    5a21:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    5a31:	6c 6f 00                                            lo.

00005a34 <text_associovat_tds>:
    5a34:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    5a44:	64 6c 6f 00                                         dlo.

00005a48 <text_tds_sensors>:
    5a48:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    5a58:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

00005a63 <nastaveni_rtds>:
    5a63:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005a72 <nastaveni_onewire>:
    5a72:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005a80 <nastaveni_default>:
    5a80:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00005a90 <nastaveni_nrf>:
    5a90:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00005a9e <nastaveni_site>:
    5a9e:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00005aad <text_button_term_man>:
    5aad:	4d 41 4e 00                                         MAN.

00005ab1 <text_button_term_prog>:
    5ab1:	50 52 4f 47 00                                      PROG.

00005ab6 <text_button_term_min>:
    5ab6:	4d 49 4e 00                                         MIN.

00005aba <text_button_term_max>:
    5aba:	4d 41 58 00                                         MAX.

00005abe <text_button_term_off>:
    5abe:	4f 46 46 00                                         OFF.

00005ac2 <button_zpet>:
    5ac2:	5a 70 65 74 00                                      Zpet.

00005ac7 <regulator_text>:
    5ac7:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00005ad1 <funkce_text>:
    5ad1:	46 75 6e 6b 63 65 00                                Funkce.

00005ad8 <nastaveni_text>:
    5ad8:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00005ae2 <temp_offset_short>:
    5ae2:	6f 66 66 73 65 74 3a 00                             offset:.

00005aea <current_temp_short>:
    5aea:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00005af3 <current_temp>:
    5af3:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5b03:	3a 00                                               :.

00005b05 <current_time>:
    5b05:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005b12 <text_test_eeprom>:
    5b12:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005b22 <text_test_ram>:
    5b22:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00005b2f <text_bezny_start>:
    5b2f:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005b3b <text_vychozi_nastaveni>:
    5b3b:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    5b4b:	69 00                                               i.

00005b4d <text_rtc_cas>:
    5b4d:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    5b5d:	6e 79 00                                            ny.

00005b60 <text_ntp_cas>:
    5b60:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    5b70:	63 61 73 00                                         cas.

00005b74 <text_pid_regulator>:
    5b74:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00005b82 <text_nrf_rozhrani>:
    5b82:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00005b8f <text_rest_rozhrani>:
    5b8f:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5b9f:	69 00                                               i.

00005ba1 <text_mqtt_rozhrani>:
    5ba1:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00005baf <text_ethernet_rozhrani>:
    5baf:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    5bbf:	69 00                                               i.

00005bc1 <text_vnitrni_ochrany>:
    5bc1:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005bd1 <text_onewire_hledam>:
    5bd1:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00005bde <text_onewire_rozhrani>:
    5bde:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00005bed <text_nastaveni_systemu>:
    5bed:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5bfd:	75 00                                               u.

00005bff <text_touchscreen>:
    5bff:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005c0b <term_title>:
    5c0b:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    5c1b:	6f 72 20 76 33 00                                   or v3.

00005c21 <network_mqtt_key>:
    5c21:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005c32 <network_mqtt_user>:
    5c32:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5c42:	72 00                                               r.

00005c44 <network_mqtt_port>:
    5c44:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5c54:	74 00                                               t.

00005c56 <network_mqtt_host>:
    5c56:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5c66:	74 00                                               t.

00005c68 <network_ntp>:
    5c68:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00005c74 <network_dns>:
    5c74:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00005c80 <network_gw>:
    5c80:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005c8b <network_netmask>:
    5c8b:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00005c9b <network_mac>:
    5c9b:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00005ca7 <status_know_devices>:
    5ca7:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    5cb7:	63 65 73 00                                         ces.

00005cbb <network_name>:
    5cbb:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005cc8 <network_ip>:
    5cc8:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005cd3 <status_mqtt_process>:
    5cd3:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5ce3:	65 73 73 00                                         ess.

00005ce7 <status_mqtt_receive>:
    5ce7:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5cf7:	69 76 65 00                                         ive.

00005cfb <status_mqtt_error>:
    5cfb:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5d0b:	72 00                                               r.

00005d0d <status_mqtt_send>:
    5d0d:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005d1e <lcd_font>:
    5d1e:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5d2e:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5d3e:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5d4e:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5d5e:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5d6e:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5d7e:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5d8e:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5d9e:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5dae:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5dbe:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5dce:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5dde:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5dee:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5dfe:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5e0e:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5e1e:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5e2e:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5e3e:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5e4e:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5e5e:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5e6e:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5e7e:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5e8e:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5e9e:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5eae:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5ebe:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5ece:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5ede:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5eee:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5efe:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5f0e:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5f1e:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5f2e:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5f3e:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5f4e:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5f5e:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5f6e:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5f7e:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5f8e:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5f9e:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5fae:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5fbe:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5fce:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    5fde:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    5fee:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    5ffe:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    600e:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    601e:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    602e:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    603e:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    604e:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    605e:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    606e:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    607e:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    608e:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    609e:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    60ae:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    60be:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    60ce:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    60de:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    60ee:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    60fe:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    610e:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    611e:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    612e:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    613e:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    614e:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    615e:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    616e:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    617e:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    618e:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    619e:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    61ae:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    61be:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    61ce:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    61de:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    61ee:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    61fe:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    620e:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00006219 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    6219:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    6229:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    6239:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    6249:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    6259:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    6269:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    6279:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00006285 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    6285:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00006296 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    6296:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    62a6:	0d 0a 00                                            ...

000062a9 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    62a9:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

000062b8 <RF24::printDetails()::__c>:
    62b8:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    62c8:	0a 00                                               ..

000062ca <RF24::printDetails()::__c>:
    62ca:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000062d8 <RF24::printDetails()::__c>:
    62d8:	43 4f 4e 46 49 47 09 00                             CONFIG..

000062e0 <RF24::printDetails()::__c>:
    62e0:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

000062e9 <RF24::printDetails()::__c>:
    62e9:	52 46 5f 43 48 09 00                                RF_CH..

000062f0 <RF24::printDetails()::__c>:
    62f0:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

000062fa <RF24::printDetails()::__c>:
    62fa:	45 4e 5f 41 41 09 00                                EN_AA..

00006301 <RF24::printDetails()::__c>:
    6301:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

0000630c <RF24::printDetails()::__c>:
    630c:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00006315 <RF24::printDetails()::__c>:
    6315:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00006322 <RF24::printDetails()::__c>:
    6322:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000632f <rf24_pa_dbm_e_str_P>:
    632f:	4d 63 46 63 3e 63 37 63                             McFc>c7c

00006337 <rf24_pa_dbm_e_str_3>:
    6337:	50 41 5f 4d 41 58 00                                PA_MAX.

0000633e <rf24_pa_dbm_e_str_2>:
    633e:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00006346 <rf24_pa_dbm_e_str_1>:
    6346:	50 41 5f 4c 4f 57 00                                PA_LOW.

0000634d <rf24_pa_dbm_e_str_0>:
    634d:	50 41 5f 4d 49 4e 00                                PA_MIN.

00006354 <rf24_crclength_e_str_P>:
    6354:	69 63 62 63 5a 63                                   icbcZc

0000635a <rf24_crclength_e_str_2>:
    635a:	31 36 20 62 69 74 73 00                             16 bits.

00006362 <rf24_crclength_e_str_1>:
    6362:	38 20 62 69 74 73 00                                8 bits.

00006369 <rf24_crclength_e_str_0>:
    6369:	44 69 73 61 62 6c 65 64 00                          Disabled.

00006372 <rf24_model_e_str_P>:
    6372:	80 63 76 63                                         .cvc

00006376 <rf24_model_e_str_1>:
    6376:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

00006380 <rf24_model_e_str_0>:
    6380:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

00006389 <rf24_datarate_e_str_P>:
    6389:	9d 63 97 63 8f 63                                   .c.c.c

0000638f <rf24_datarate_e_str_2>:
    638f:	32 35 30 4b 42 50 53 00                             250KBPS.

00006397 <rf24_datarate_e_str_1>:
    6397:	32 4d 42 50 53 00                                   2MBPS.

0000639d <rf24_datarate_e_str_0>:
    639d:	31 4d 42 50 53 00                                   1MBPS.

000063a3 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63a3:	0d 0a 00                                            ...

000063a6 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63a6:	25 30 32 78 00                                      %02x.

000063ab <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63ab:	20 30 78 00                                          0x.

000063af <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    63af:	25 53 09 20 3d 00                                   %S. =.

000063b5 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63b5:	0d 0a 00                                            ...

000063b8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63b8:	20 30 78 25 30 32 78 00                              0x%02x.

000063c0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    63c0:	25 53 09 20 3d 00                                   %S. =.

000063c6 <RF24::print_status(unsigned char)::__c>:
    63c6:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    63d6:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    63e6:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    63f6:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    6406:	3d 25 78 0d 0a 00                                   =%x...

0000640c <daysInMonth>:
    640c:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00006418 <digital_pin_to_timer_PGM>:
    6418:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    644c:	00 03                                               ..

0000644e <digital_pin_to_bit_mask_PGM>:
    644e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    645e:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    646e:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    647e:	08 10 20 40 80 20                                   .. @. 

00006484 <digital_pin_to_port_PGM>:
    6484:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    6494:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    64a4:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    64b4:	06 06 06 06 06 07                                   ......

000064ba <port_to_input_PGM>:
    64ba:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

000064ca <port_to_output_PGM>:
    64ca:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

000064da <port_to_mode_PGM>:
    64da:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

000064ea <__ctors_start>:
__ctors_start():
    64ea:	5d 78       	andi	r21, 0x8D	; 141
    64ec:	7f 8a       	std	Y+23, r7	; 0x17
    64ee:	90 8a       	std	Z+16, r9	; 0x10
    64f0:	03 95       	inc	r16
    64f2:	d9 ae       	std	Y+57, r13	; 0x39
    64f4:	2e af       	std	Y+62, r18	; 0x3e
    64f6:	51 b2       	in	r5, 0x11	; 17
    64f8:	5f b4       	in	r5, 0x2f	; 47
    64fa:	f6 b5       	in	r31, 0x26	; 38
    64fc:	d9 b7       	in	r29, 0x39	; 57
    64fe:	e4 b7       	in	r30, 0x34	; 52
    6500:	3c bc       	out	0x2c, r3	; 44
    6502:	bb c6       	rjmp	.+3446   	; 0x727a <MenuHistoryGetMenu(unsigned char*)+0xbc>
    6504:	1b ce       	rjmp	.-970    	; 0x613c <lcd_font+0x41e>
    6506:	7d d4       	rcall	.+2298   	; 0x6e02 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
    6508:	69 d8       	rcall	.-3886   	; 0x55dc <new_text_time_set_date_manualy+0x7>

0000650a <__ctors_end>:
__dtors_end():
    650a:	11 24       	eor	r1, r1
    650c:	1f be       	out	0x3f, r1	; 63
    650e:	cf ef       	ldi	r28, 0xFF	; 255
    6510:	d1 e2       	ldi	r29, 0x21	; 33
    6512:	de bf       	out	0x3e, r29	; 62
    6514:	cd bf       	out	0x3d, r28	; 61
    6516:	00 e0       	ldi	r16, 0x00	; 0
    6518:	0c bf       	out	0x3c, r16	; 60

0000651a <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    651a:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    651c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    651e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    6520:	e0 e9       	ldi	r30, 0x90	; 144
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    6522:	f1 ed       	ldi	r31, 0xD1	; 209
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    6524:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    6526:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    6528:	02 c0       	rjmp	.+4      	; 0x652e <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    652a:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    652c:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    652e:	a6 35       	cpi	r26, 0x56	; 86
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    6530:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    6532:	d9 f7       	brne	.-10     	; 0x652a <__do_copy_data+0x10>

00006534 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    6534:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    6536:	a6 e5       	ldi	r26, 0x56	; 86
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    6538:	b9 e0       	ldi	r27, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    653a:	01 c0       	rjmp	.+2      	; 0x653e <.do_clear_bss_start>

0000653c <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    653c:	1d 92       	st	X+, r1

0000653e <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    653e:	a3 3e       	cpi	r26, 0xE3	; 227
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    6540:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    6542:	e1 f7       	brne	.-8      	; 0x653c <.do_clear_bss_loop>

00006544 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    6544:	12 e3       	ldi	r17, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    6546:	c5 e8       	ldi	r28, 0x85	; 133
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    6548:	d2 e3       	ldi	r29, 0x32	; 50
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    654a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    654c:	06 c0       	rjmp	.+12     	; 0x655a <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    654e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    6550:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    6552:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    6554:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    6556:	0e 94 06 dd 	call	0x1ba0c	; 0x1ba0c <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    655a:	c5 37       	cpi	r28, 0x75	; 117
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    655c:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    655e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    6560:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    6562:	a9 f7       	brne	.-22     	; 0x654e <__do_global_ctors+0xa>
    6564:	0e 94 30 da 	call	0x1b460	; 0x1b460 <main>
    6568:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <_exit>

0000656c <__bad_interrupt>:
__vector_38():
    656c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006570 <localtime>:
localtime():
    6570:	6f ec       	ldi	r22, 0xCF	; 207
    6572:	74 e1       	ldi	r23, 0x14	; 20
    6574:	0e 94 bf 32 	call	0x657e	; 0x657e <localtime_r>
    6578:	8f ec       	ldi	r24, 0xCF	; 207
    657a:	94 e1       	ldi	r25, 0x14	; 20
    657c:	08 95       	ret

0000657e <localtime_r>:
localtime_r():
    657e:	cf 92       	push	r12
    6580:	df 92       	push	r13
    6582:	ef 92       	push	r14
    6584:	ff 92       	push	r15
    6586:	0f 93       	push	r16
    6588:	1f 93       	push	r17
    658a:	cf 93       	push	r28
    658c:	df 93       	push	r29
    658e:	00 d0       	rcall	.+0      	; 0x6590 <localtime_r+0x12>
    6590:	1f 92       	push	r1
    6592:	cd b7       	in	r28, 0x3d	; 61
    6594:	de b7       	in	r29, 0x3e	; 62
    6596:	6c 01       	movw	r12, r24
    6598:	7b 01       	movw	r14, r22
    659a:	e0 91 e1 14 	lds	r30, 0x14E1	; 0x8014e1 <__dst_ptr>
    659e:	f0 91 e2 14 	lds	r31, 0x14E2	; 0x8014e2 <__dst_ptr+0x1>
    65a2:	0f ef       	ldi	r16, 0xFF	; 255
    65a4:	1f ef       	ldi	r17, 0xFF	; 255
    65a6:	30 97       	sbiw	r30, 0x00	; 0
    65a8:	21 f0       	breq	.+8      	; 0x65b2 <localtime_r+0x34>
    65aa:	6b ed       	ldi	r22, 0xDB	; 219
    65ac:	74 e1       	ldi	r23, 0x14	; 20
    65ae:	19 95       	eicall
    65b0:	8c 01       	movw	r16, r24
    65b2:	f6 01       	movw	r30, r12
    65b4:	80 81       	ld	r24, Z
    65b6:	91 81       	ldd	r25, Z+1	; 0x01
    65b8:	a2 81       	ldd	r26, Z+2	; 0x02
    65ba:	b3 81       	ldd	r27, Z+3	; 0x03
    65bc:	40 91 db 14 	lds	r20, 0x14DB	; 0x8014db <__utc_offset>
    65c0:	50 91 dc 14 	lds	r21, 0x14DC	; 0x8014dc <__utc_offset+0x1>
    65c4:	60 91 dd 14 	lds	r22, 0x14DD	; 0x8014dd <__utc_offset+0x2>
    65c8:	70 91 de 14 	lds	r23, 0x14DE	; 0x8014de <__utc_offset+0x3>
    65cc:	84 0f       	add	r24, r20
    65ce:	95 1f       	adc	r25, r21
    65d0:	a6 1f       	adc	r26, r22
    65d2:	b7 1f       	adc	r27, r23
    65d4:	10 16       	cp	r1, r16
    65d6:	11 06       	cpc	r1, r17
    65d8:	cc f0       	brlt	.+50     	; 0x660c <localtime_r+0x8e>
    65da:	89 83       	std	Y+1, r24	; 0x01
    65dc:	9a 83       	std	Y+2, r25	; 0x02
    65de:	ab 83       	std	Y+3, r26	; 0x03
    65e0:	bc 83       	std	Y+4, r27	; 0x04
    65e2:	b7 01       	movw	r22, r14
    65e4:	ce 01       	movw	r24, r28
    65e6:	01 96       	adiw	r24, 0x01	; 1
    65e8:	0e 94 10 33 	call	0x6620	; 0x6620 <gmtime_r>
    65ec:	f7 01       	movw	r30, r14
    65ee:	13 87       	std	Z+11, r17	; 0x0b
    65f0:	02 87       	std	Z+10, r16	; 0x0a
    65f2:	0f 90       	pop	r0
    65f4:	0f 90       	pop	r0
    65f6:	0f 90       	pop	r0
    65f8:	0f 90       	pop	r0
    65fa:	df 91       	pop	r29
    65fc:	cf 91       	pop	r28
    65fe:	1f 91       	pop	r17
    6600:	0f 91       	pop	r16
    6602:	ff 90       	pop	r15
    6604:	ef 90       	pop	r14
    6606:	df 90       	pop	r13
    6608:	cf 90       	pop	r12
    660a:	08 95       	ret
    660c:	a8 01       	movw	r20, r16
    660e:	01 2e       	mov	r0, r17
    6610:	00 0c       	add	r0, r0
    6612:	66 0b       	sbc	r22, r22
    6614:	77 0b       	sbc	r23, r23
    6616:	84 0f       	add	r24, r20
    6618:	95 1f       	adc	r25, r21
    661a:	a6 1f       	adc	r26, r22
    661c:	b7 1f       	adc	r27, r23
    661e:	dd cf       	rjmp	.-70     	; 0x65da <localtime_r+0x5c>

00006620 <gmtime_r>:
gmtime_r():
    6620:	cf 92       	push	r12
    6622:	df 92       	push	r13
    6624:	ef 92       	push	r14
    6626:	ff 92       	push	r15
    6628:	0f 93       	push	r16
    662a:	1f 93       	push	r17
    662c:	cf 93       	push	r28
    662e:	df 93       	push	r29
    6630:	00 d0       	rcall	.+0      	; 0x6632 <gmtime_r+0x12>
    6632:	00 d0       	rcall	.+0      	; 0x6634 <gmtime_r+0x14>
    6634:	1f 92       	push	r1
    6636:	1f 92       	push	r1
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	8b 01       	movw	r16, r22
    663e:	fc 01       	movw	r30, r24
    6640:	60 81       	ld	r22, Z
    6642:	71 81       	ldd	r23, Z+1	; 0x01
    6644:	82 81       	ldd	r24, Z+2	; 0x02
    6646:	93 81       	ldd	r25, Z+3	; 0x03
    6648:	20 e8       	ldi	r18, 0x80	; 128
    664a:	31 e5       	ldi	r19, 0x51	; 81
    664c:	41 e0       	ldi	r20, 0x01	; 1
    664e:	50 e0       	ldi	r21, 0x00	; 0
    6650:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
    6654:	69 01       	movw	r12, r18
    6656:	7a 01       	movw	r14, r20
    6658:	2c e3       	ldi	r18, 0x3C	; 60
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	40 e0       	ldi	r20, 0x00	; 0
    665e:	50 e0       	ldi	r21, 0x00	; 0
    6660:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
    6664:	29 83       	std	Y+1, r18	; 0x01
    6666:	3a 83       	std	Y+2, r19	; 0x02
    6668:	4b 83       	std	Y+3, r20	; 0x03
    666a:	5c 83       	std	Y+4, r21	; 0x04
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	9a 81       	ldd	r25, Y+2	; 0x02
    6670:	ab 81       	ldd	r26, Y+3	; 0x03
    6672:	bc 81       	ldd	r27, Y+4	; 0x04
    6674:	f8 01       	movw	r30, r16
    6676:	60 83       	st	Z, r22
    6678:	6c e3       	ldi	r22, 0x3C	; 60
    667a:	70 e0       	ldi	r23, 0x00	; 0
    667c:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    6680:	dc 01       	movw	r26, r24
    6682:	f8 01       	movw	r30, r16
    6684:	a1 83       	std	Z+1, r26	; 0x01
    6686:	62 83       	std	Z+2, r22	; 0x02
    6688:	c6 01       	movw	r24, r12
    668a:	06 96       	adiw	r24, 0x06	; 6
    668c:	67 e0       	ldi	r22, 0x07	; 7
    668e:	70 e0       	ldi	r23, 0x00	; 0
    6690:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
    6694:	84 83       	std	Z+4, r24	; 0x04
    6696:	2d ea       	ldi	r18, 0xAD	; 173
    6698:	3e e8       	ldi	r19, 0x8E	; 142
    669a:	40 e0       	ldi	r20, 0x00	; 0
    669c:	50 e0       	ldi	r21, 0x00	; 0
    669e:	c7 01       	movw	r24, r14
    66a0:	b6 01       	movw	r22, r12
    66a2:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
    66a6:	29 83       	std	Y+1, r18	; 0x01
    66a8:	3a 83       	std	Y+2, r19	; 0x02
    66aa:	6d 83       	std	Y+5, r22	; 0x05
    66ac:	7e 83       	std	Y+6, r23	; 0x06
    66ae:	8f 83       	std	Y+7, r24	; 0x07
    66b0:	98 87       	std	Y+8, r25	; 0x08
    66b2:	89 81       	ldd	r24, Y+1	; 0x01
    66b4:	9a 81       	ldd	r25, Y+2	; 0x02
    66b6:	24 e6       	ldi	r18, 0x64	; 100
    66b8:	28 9f       	mul	r18, r24
    66ba:	60 01       	movw	r12, r0
    66bc:	29 9f       	mul	r18, r25
    66be:	d0 0c       	add	r13, r0
    66c0:	11 24       	eor	r1, r1
    66c2:	6d 81       	ldd	r22, Y+5	; 0x05
    66c4:	7e 81       	ldd	r23, Y+6	; 0x06
    66c6:	8f 81       	ldd	r24, Y+7	; 0x07
    66c8:	98 85       	ldd	r25, Y+8	; 0x08
    66ca:	25 eb       	ldi	r18, 0xB5	; 181
    66cc:	35 e0       	ldi	r19, 0x05	; 5
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
    66d6:	29 83       	std	Y+1, r18	; 0x01
    66d8:	3a 83       	std	Y+2, r19	; 0x02
    66da:	6d 83       	std	Y+5, r22	; 0x05
    66dc:	7e 83       	std	Y+6, r23	; 0x06
    66de:	e9 80       	ldd	r14, Y+1	; 0x01
    66e0:	fa 80       	ldd	r15, Y+2	; 0x02
    66e2:	ee 0c       	add	r14, r14
    66e4:	ff 1c       	adc	r15, r15
    66e6:	ee 0c       	add	r14, r14
    66e8:	ff 1c       	adc	r15, r15
    66ea:	ec 0c       	add	r14, r12
    66ec:	fd 1c       	adc	r15, r13
    66ee:	8d 81       	ldd	r24, Y+5	; 0x05
    66f0:	9e 81       	ldd	r25, Y+6	; 0x06
    66f2:	f5 e6       	ldi	r31, 0x65	; 101
    66f4:	ef 16       	cp	r14, r31
    66f6:	f1 04       	cpc	r15, r1
    66f8:	08 f4       	brcc	.+2      	; 0x66fc <gmtime_r+0xdc>
    66fa:	3f c0       	rjmp	.+126    	; 0x677a <gmtime_r+0x15a>
    66fc:	01 96       	adiw	r24, 0x01	; 1
    66fe:	21 e0       	ldi	r18, 0x01	; 1
    6700:	30 e0       	ldi	r19, 0x00	; 0
    6702:	a9 01       	movw	r20, r18
    6704:	44 59       	subi	r20, 0x94	; 148
    6706:	5e 4f       	sbci	r21, 0xFE	; 254
    6708:	48 17       	cp	r20, r24
    670a:	59 07       	cpc	r21, r25
    670c:	60 f4       	brcc	.+24     	; 0x6726 <gmtime_r+0x106>
    670e:	6d e6       	ldi	r22, 0x6D	; 109
    6710:	71 e0       	ldi	r23, 0x01	; 1
    6712:	82 1b       	sub	r24, r18
    6714:	93 0b       	sbc	r25, r19
    6716:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    671a:	dc 01       	movw	r26, r24
    671c:	e6 0e       	add	r14, r22
    671e:	f7 1e       	adc	r15, r23
    6720:	cd 01       	movw	r24, r26
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	44 e6       	ldi	r20, 0x64	; 100
    6728:	e4 0e       	add	r14, r20
    672a:	f1 1c       	adc	r15, r1
    672c:	f8 01       	movw	r30, r16
    672e:	f7 82       	std	Z+7, r15	; 0x07
    6730:	e6 82       	std	Z+6, r14	; 0x06
    6732:	91 87       	std	Z+9, r25	; 0x09
    6734:	80 87       	std	Z+8, r24	; 0x08
    6736:	25 5c       	subi	r18, 0xC5	; 197
    6738:	3f 4f       	sbci	r19, 0xFF	; 255
    673a:	82 17       	cp	r24, r18
    673c:	93 07       	cpc	r25, r19
    673e:	38 f5       	brcc	.+78     	; 0x678e <gmtime_r+0x16e>
    6740:	6f e1       	ldi	r22, 0x1F	; 31
    6742:	70 e0       	ldi	r23, 0x00	; 0
    6744:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    6748:	dc 01       	movw	r26, r24
    674a:	f8 01       	movw	r30, r16
    674c:	65 83       	std	Z+5, r22	; 0x05
    674e:	a3 83       	std	Z+3, r26	; 0x03
    6750:	f8 01       	movw	r30, r16
    6752:	13 86       	std	Z+11, r1	; 0x0b
    6754:	12 86       	std	Z+10, r1	; 0x0a
    6756:	83 81       	ldd	r24, Z+3	; 0x03
    6758:	8f 5f       	subi	r24, 0xFF	; 255
    675a:	83 83       	std	Z+3, r24	; 0x03
    675c:	28 96       	adiw	r28, 0x08	; 8
    675e:	0f b6       	in	r0, 0x3f	; 63
    6760:	f8 94       	cli
    6762:	de bf       	out	0x3e, r29	; 62
    6764:	0f be       	out	0x3f, r0	; 63
    6766:	cd bf       	out	0x3d, r28	; 61
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	1f 91       	pop	r17
    676e:	0f 91       	pop	r16
    6770:	ff 90       	pop	r15
    6772:	ef 90       	pop	r14
    6774:	df 90       	pop	r13
    6776:	cf 90       	pop	r12
    6778:	08 95       	ret
    677a:	51 e0       	ldi	r21, 0x01	; 1
    677c:	40 e0       	ldi	r20, 0x00	; 0
    677e:	24 e6       	ldi	r18, 0x64	; 100
    6780:	e2 16       	cp	r14, r18
    6782:	f1 04       	cpc	r15, r1
    6784:	09 f4       	brne	.+2      	; 0x6788 <gmtime_r+0x168>
    6786:	50 e0       	ldi	r21, 0x00	; 0
    6788:	25 2f       	mov	r18, r21
    678a:	34 2f       	mov	r19, r20
    678c:	ba cf       	rjmp	.-140    	; 0x6702 <gmtime_r+0xe2>
    678e:	69 e9       	ldi	r22, 0x99	; 153
    6790:	70 e0       	ldi	r23, 0x00	; 0
    6792:	82 1b       	sub	r24, r18
    6794:	93 0b       	sbc	r25, r19
    6796:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    679a:	dc 01       	movw	r26, r24
    679c:	26 2f       	mov	r18, r22
    679e:	22 0f       	add	r18, r18
    67a0:	22 0f       	add	r18, r18
    67a2:	f2 2e       	mov	r15, r18
    67a4:	f6 0e       	add	r15, r22
    67a6:	6d e3       	ldi	r22, 0x3D	; 61
    67a8:	70 e0       	ldi	r23, 0x00	; 0
    67aa:	cd 01       	movw	r24, r26
    67ac:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    67b0:	dc 01       	movw	r26, r24
    67b2:	e6 2e       	mov	r14, r22
    67b4:	ee 0c       	add	r14, r14
    67b6:	6f e1       	ldi	r22, 0x1F	; 31
    67b8:	70 e0       	ldi	r23, 0x00	; 0
    67ba:	cd 01       	movw	r24, r26
    67bc:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    67c0:	dc 01       	movw	r26, r24
    67c2:	22 e0       	ldi	r18, 0x02	; 2
    67c4:	26 0f       	add	r18, r22
    67c6:	2f 0d       	add	r18, r15
    67c8:	2e 0d       	add	r18, r14
    67ca:	f8 01       	movw	r30, r16
    67cc:	25 83       	std	Z+5, r18	; 0x05
    67ce:	bf cf       	rjmp	.-130    	; 0x674e <gmtime_r+0x12e>

000067d0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_PROG)
    return 1;
  return 0;
}
    67d0:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    67d2:	86 81       	ldd	r24, Z+6	; 0x06
    67d4:	97 81       	ldd	r25, Z+7	; 0x07
    67d6:	68 0f       	add	r22, r24
    67d8:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    67da:	24 81       	ldd	r18, Z+4	; 0x04
    67dc:	35 81       	ldd	r19, Z+5	; 0x05
    67de:	26 17       	cp	r18, r22
    67e0:	37 07       	cpc	r19, r23
    67e2:	38 f0       	brcs	.+14     	; 0x67f2 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    67e4:	22 81       	ldd	r18, Z+2	; 0x02
    67e6:	33 81       	ldd	r19, Z+3	; 0x03
    67e8:	82 0f       	add	r24, r18
    67ea:	93 1f       	adc	r25, r19
    67ec:	77 83       	std	Z+7, r23	; 0x07
    67ee:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    67f0:	08 95       	ret
    67f2:	90 e0       	ldi	r25, 0x00	; 0
    67f4:	80 e0       	ldi	r24, 0x00	; 0
    67f6:	08 95       	ret

000067f8 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    67f8:	80 e0       	ldi	r24, 0x00	; 0
    67fa:	08 95       	ret

000067fc <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    67fc:	81 e0       	ldi	r24, 0x01	; 1
    67fe:	08 95       	ret

00006800 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    6800:	0f 93       	push	r16
    6802:	1f 93       	push	r17
    6804:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <dialog_set_string_keyboard_type>
    6808:	91 11       	cpse	r25, r1
    680a:	0c c0       	rjmp	.+24     	; 0x6824 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    680c:	e8 2f       	mov	r30, r24
    680e:	f0 e0       	ldi	r31, 0x00	; 0
    6810:	e5 5b       	subi	r30, 0xB5	; 181
    6812:	f7 4a       	sbci	r31, 0xA7	; 167
    6814:	e4 91       	lpm	r30, Z
    6816:	d9 01       	movw	r26, r18
    6818:	ec 93       	st	X, r30
    681a:	f8 01       	movw	r30, r16
    681c:	10 82       	st	Z, r1
    681e:	1f 91       	pop	r17
    6820:	0f 91       	pop	r16
    6822:	08 95       	ret
    6824:	91 30       	cpi	r25, 0x01	; 1
    6826:	29 f4       	brne	.+10     	; 0x6832 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    6828:	e8 2f       	mov	r30, r24
    682a:	f0 e0       	ldi	r31, 0x00	; 0
    682c:	ef 5c       	subi	r30, 0xCF	; 207
    682e:	f7 4a       	sbci	r31, 0xA7	; 167
    6830:	f1 cf       	rjmp	.-30     	; 0x6814 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    6832:	92 30       	cpi	r25, 0x02	; 2
    6834:	81 f7       	brne	.-32     	; 0x6816 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    6836:	e8 2f       	mov	r30, r24
    6838:	f0 e0       	ldi	r31, 0x00	; 0
    683a:	e9 5e       	subi	r30, 0xE9	; 233
    683c:	f7 4a       	sbci	r31, 0xA7	; 167
    683e:	ea cf       	rjmp	.-44     	; 0x6814 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

00006840 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    6840:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <dialog_set_string_keyboard_type>
    6844:	83 30       	cpi	r24, 0x03	; 3
    6846:	08 f0       	brcs	.+2      	; 0x684a <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    6848:	08 95       	ret
    684a:	8a e1       	ldi	r24, 0x1A	; 26
    684c:	08 95       	ret

0000684e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    684e:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <dialog_set_string_keyboard_type>
    6852:	08 95       	ret

00006854 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    6854:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <menu_redraw05s>
    6858:	81 30       	cpi	r24, 0x01	; 1
    685a:	19 f4       	brne	.+6      	; 0x6862 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
    685c:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <menu_redraw05s>
    6860:	08 95       	ret
    6862:	80 e0       	ldi	r24, 0x00	; 0
    6864:	08 95       	ret

00006866 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    6866:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <change_term_mode>
    686a:	81 30       	cpi	r24, 0x01	; 1
    686c:	19 f4       	brne	.+6      	; 0x6874 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    686e:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <change_term_mode>
    6872:	08 95       	ret
    6874:	80 e0       	ldi	r24, 0x00	; 0
    6876:	08 95       	ret

00006878 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    6878:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <menu_redraw10s>
    687c:	81 30       	cpi	r24, 0x01	; 1
    687e:	19 f4       	brne	.+6      	; 0x6886 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    6880:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <menu_redraw10s>
    6884:	08 95       	ret
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	08 95       	ret

0000688a <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
    688a:	08 95       	ret

0000688c <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    688c:	83 30       	cpi	r24, 0x03	; 3
    688e:	41 f4       	brne	.+16     	; 0x68a0 <a2d_complete(unsigned char, unsigned int)+0x14>
    6890:	70 93 c3 0a 	sts	0x0AC3, r23	; 0x800ac3 <proud+0x1>
    6894:	60 93 c2 0a 	sts	0x0AC2, r22	; 0x800ac2 <proud>
    6898:	81 e0       	ldi	r24, 0x01	; 1
    689a:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <a2d_run_now>
    689e:	08 95       	ret
    68a0:	86 30       	cpi	r24, 0x06	; 6
    68a2:	29 f4       	brne	.+10     	; 0x68ae <a2d_complete(unsigned char, unsigned int)+0x22>
    68a4:	70 93 c9 0a 	sts	0x0AC9, r23	; 0x800ac9 <tritri+0x1>
    68a8:	60 93 c8 0a 	sts	0x0AC8, r22	; 0x800ac8 <tritri>
    68ac:	f5 cf       	rjmp	.-22     	; 0x6898 <a2d_complete(unsigned char, unsigned int)+0xc>
    68ae:	85 30       	cpi	r24, 0x05	; 5
    68b0:	29 f4       	brne	.+10     	; 0x68bc <a2d_complete(unsigned char, unsigned int)+0x30>
    68b2:	70 93 c7 0a 	sts	0x0AC7, r23	; 0x800ac7 <petnula+0x1>
    68b6:	60 93 c6 0a 	sts	0x0AC6, r22	; 0x800ac6 <petnula>
    68ba:	ee cf       	rjmp	.-36     	; 0x6898 <a2d_complete(unsigned char, unsigned int)+0xc>
    68bc:	84 30       	cpi	r24, 0x04	; 4
    68be:	29 f4       	brne	.+10     	; 0x68ca <a2d_complete(unsigned char, unsigned int)+0x3e>
    68c0:	70 93 c5 0a 	sts	0x0AC5, r23	; 0x800ac5 <dvanact+0x1>
    68c4:	60 93 c4 0a 	sts	0x0AC4, r22	; 0x800ac4 <dvanact>
    68c8:	e7 cf       	rjmp	.-50     	; 0x6898 <a2d_complete(unsigned char, unsigned int)+0xc>
    68ca:	87 30       	cpi	r24, 0x07	; 7
    68cc:	29 f7       	brne	.-54     	; 0x6898 <a2d_complete(unsigned char, unsigned int)+0xc>
    68ce:	70 93 c1 0a 	sts	0x0AC1, r23	; 0x800ac1 <light_curr+0x1>
    68d2:	60 93 c0 0a 	sts	0x0AC0, r22	; 0x800ac0 <light_curr>
    68d6:	e0 cf       	rjmp	.-64     	; 0x6898 <a2d_complete(unsigned char, unsigned int)+0xc>

000068d8 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    68d8:	fc 01       	movw	r30, r24
    68da:	eb 56       	subi	r30, 0x6B	; 107
    68dc:	f5 4f       	sbci	r31, 0xF5	; 245
    68de:	90 81       	ld	r25, Z
    68e0:	20 91 94 0a 	lds	r18, 0x0A94	; 0x800a94 <menu_slider_data_max>
    68e4:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <menu_slider_data_max_element>
    68e8:	28 1b       	sub	r18, r24
    68ea:	33 0b       	sbc	r19, r19
    68ec:	92 17       	cp	r25, r18
    68ee:	13 06       	cpc	r1, r19
    68f0:	14 f4       	brge	.+4      	; 0x68f6 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
    68f2:	9f 5f       	subi	r25, 0xFF	; 255
    68f4:	90 83       	st	Z, r25
    68f6:	08 95       	ret

000068f8 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    68f8:	fc 01       	movw	r30, r24
    68fa:	eb 56       	subi	r30, 0x6B	; 107
    68fc:	f5 4f       	sbci	r31, 0xF5	; 245
    68fe:	90 81       	ld	r25, Z
    6900:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <menu_slider_data_min>
    6904:	89 17       	cp	r24, r25
    6906:	10 f4       	brcc	.+4      	; 0x690c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
    6908:	91 50       	subi	r25, 0x01	; 1
    690a:	90 83       	st	Z, r25
    690c:	08 95       	ret

0000690e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    690e:	8a e0       	ldi	r24, 0x0A	; 10
    6910:	08 95       	ret

00006912 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    6912:	eb e6       	ldi	r30, 0x6B	; 107
    6914:	f1 e1       	ldi	r31, 0x11	; 17
    6916:	80 e0       	ldi	r24, 0x00	; 0
    6918:	91 85       	ldd	r25, Z+9	; 0x09
    691a:	91 30       	cpi	r25, 0x01	; 1
    691c:	09 f4       	brne	.+2      	; 0x6920 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    691e:	8f 5f       	subi	r24, 0xFF	; 255
    6920:	3b 96       	adiw	r30, 0x0b	; 11
    6922:	91 e1       	ldi	r25, 0x11	; 17
    6924:	ed 3a       	cpi	r30, 0xAD	; 173
    6926:	f9 07       	cpc	r31, r25
    6928:	b9 f7       	brne	.-18     	; 0x6918 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    692a:	08 95       	ret

0000692c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    692c:	00 97       	sbiw	r24, 0x00	; 0
    692e:	31 f4       	brne	.+12     	; 0x693c <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    6930:	80 91 9a 0a 	lds	r24, 0x0A9A	; 0x800a9a <use_tds>
    6934:	90 91 9b 0a 	lds	r25, 0x0A9B	; 0x800a9b <use_rtds>
    6938:	89 0f       	add	r24, r25
    693a:	08 95       	ret
    693c:	01 97       	sbiw	r24, 0x01	; 1
    693e:	09 f0       	breq	.+2      	; 0x6942 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    6940:	08 95       	ret
    6942:	80 e1       	ldi	r24, 0x10	; 16
    6944:	08 95       	ret

00006946 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    6946:	81 e0       	ldi	r24, 0x01	; 1
    6948:	90 91 a9 0a 	lds	r25, 0x0AA9	; 0x800aa9 <default_show_temp>
    694c:	94 13       	cpse	r25, r20
    694e:	80 e0       	ldi	r24, 0x00	; 0
    6950:	08 95       	ret

00006952 <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    6952:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6956:	88 1f       	adc	r24, r24
    6958:	88 27       	eor	r24, r24
    695a:	88 1f       	adc	r24, r24
    695c:	08 95       	ret

0000695e <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
    695e:	cf 93       	push	r28
    6960:	df 93       	push	r29
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6962:	ca e3       	ldi	r28, 0x3A	; 58
    6964:	da e0       	ldi	r29, 0x0A	; 10
_Z34preload_display_setting_brightnessjjh():
    6966:	60 91 9e 0a 	lds	r22, 0x0A9E	; 0x800a9e <brigthness_display_values>
    696a:	70 e0       	ldi	r23, 0x00	; 0
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	80 e0       	ldi	r24, 0x00	; 0
    6970:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    6974:	68 83       	st	Y, r22
    6976:	79 83       	std	Y+1, r23	; 0x01
    6978:	8a 83       	std	Y+2, r24	; 0x02
    697a:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    697c:	80 e0       	ldi	r24, 0x00	; 0
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	a0 ea       	ldi	r26, 0xA0	; 160
    6982:	b0 e4       	ldi	r27, 0x40	; 64
    6984:	88 87       	std	Y+8, r24	; 0x08
    6986:	99 87       	std	Y+9, r25	; 0x09
    6988:	aa 87       	std	Y+10, r26	; 0x0a
    698a:	bb 87       	std	Y+11, r27	; 0x0b
    698c:	40 e0       	ldi	r20, 0x00	; 0
    698e:	50 e0       	ldi	r21, 0x00	; 0
    6990:	68 ec       	ldi	r22, 0xC8	; 200
    6992:	72 e4       	ldi	r23, 0x42	; 66
    6994:	4c 83       	std	Y+4, r20	; 0x04
    6996:	5d 83       	std	Y+5, r21	; 0x05
    6998:	6e 83       	std	Y+6, r22	; 0x06
    699a:	7f 83       	std	Y+7, r23	; 0x07
    699c:	8e 87       	std	Y+14, r24	; 0x0e
    699e:	9f 87       	std	Y+15, r25	; 0x0f
    69a0:	a8 8b       	std	Y+16, r26	; 0x10
    69a2:	b9 8b       	std	Y+17, r27	; 0x11
    69a4:	81 e0       	ldi	r24, 0x01	; 1
    69a6:	8d 87       	std	Y+13, r24	; 0x0d
    69a8:	1a 8a       	std	Y+18, r1	; 0x12
    69aa:	8c 87       	std	Y+12, r24	; 0x0c
    69ac:	82 ec       	ldi	r24, 0xC2	; 194
    69ae:	97 e3       	ldi	r25, 0x37	; 55
    69b0:	9c 8b       	std	Y+20, r25	; 0x14
    69b2:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
    69b4:	df 91       	pop	r29
    69b6:	cf 91       	pop	r28
    69b8:	08 95       	ret

000069ba <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
    69ba:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    69be:	80 95       	com	r24
_Z42display_enable_show_brightness_manual_modejjh():
    69c0:	88 1f       	adc	r24, r24
    69c2:	88 27       	eor	r24, r24
    69c4:	88 1f       	adc	r24, r24
    69c6:	08 95       	ret

000069c8 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
    69c8:	84 e9       	ldi	r24, 0x94	; 148
    69ca:	92 e0       	ldi	r25, 0x02	; 2
    69cc:	0c 94 b2 e1 	jmp	0x1c364	; 0x1c364 <puts>

000069d0 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
    69d0:	0f 93       	push	r16
    69d2:	1f 93       	push	r17
    69d4:	8b 01       	movw	r16, r22
    69d6:	02 0f       	add	r16, r18
    69d8:	13 1f       	adc	r17, r19
    69da:	9c 01       	movw	r18, r24
    69dc:	24 0f       	add	r18, r20
    69de:	35 1f       	adc	r19, r21
    69e0:	ab 01       	movw	r20, r22
    69e2:	bc 01       	movw	r22, r24
    69e4:	81 e2       	ldi	r24, 0x21	; 33
    69e6:	9c e0       	ldi	r25, 0x0C	; 12
    69e8:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    69ec:	1f 91       	pop	r17
    69ee:	0f 91       	pop	r16
    69f0:	08 95       	ret

000069f2 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
    69f2:	3f 92       	push	r3
    69f4:	4f 92       	push	r4
    69f6:	5f 92       	push	r5
    69f8:	6f 92       	push	r6
    69fa:	7f 92       	push	r7
    69fc:	8f 92       	push	r8
    69fe:	9f 92       	push	r9
    6a00:	af 92       	push	r10
    6a02:	bf 92       	push	r11
    6a04:	cf 92       	push	r12
    6a06:	df 92       	push	r13
    6a08:	ef 92       	push	r14
    6a0a:	ff 92       	push	r15
    6a0c:	0f 93       	push	r16
    6a0e:	1f 93       	push	r17
    6a10:	cf 93       	push	r28
    6a12:	df 93       	push	r29
    6a14:	3c 01       	movw	r6, r24
    6a16:	6b 01       	movw	r12, r22
    6a18:	ea 01       	movw	r28, r20
    6a1a:	29 01       	movw	r4, r18
    6a1c:	30 2e       	mov	r3, r16
    6a1e:	70 e0       	ldi	r23, 0x00	; 0
    6a20:	60 e0       	ldi	r22, 0x00	; 0
    6a22:	81 e2       	ldi	r24, 0x21	; 33
    6a24:	9c e0       	ldi	r25, 0x0C	; 12
    6a26:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6a2a:	f1 2c       	mov	r15, r1
    6a2c:	e1 2c       	mov	r14, r1
    6a2e:	46 01       	movw	r8, r12
    6a30:	84 0c       	add	r8, r4
    6a32:	95 1c       	adc	r9, r5
    6a34:	53 01       	movw	r10, r6
    6a36:	ac 0e       	add	r10, r28
    6a38:	bd 1e       	adc	r11, r29
    6a3a:	84 01       	movw	r16, r8
    6a3c:	0e 19       	sub	r16, r14
    6a3e:	1f 09       	sbc	r17, r15
    6a40:	95 01       	movw	r18, r10
    6a42:	2e 19       	sub	r18, r14
    6a44:	3f 09       	sbc	r19, r15
    6a46:	a7 01       	movw	r20, r14
    6a48:	4c 0d       	add	r20, r12
    6a4a:	5d 1d       	adc	r21, r13
    6a4c:	b7 01       	movw	r22, r14
    6a4e:	66 0d       	add	r22, r6
    6a50:	77 1d       	adc	r23, r7
    6a52:	81 e2       	ldi	r24, 0x21	; 33
    6a54:	9c e0       	ldi	r25, 0x0C	; 12
    6a56:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6a5a:	8f ef       	ldi	r24, 0xFF	; 255
    6a5c:	e8 1a       	sub	r14, r24
    6a5e:	f8 0a       	sbc	r15, r24
    6a60:	83 e0       	ldi	r24, 0x03	; 3
    6a62:	e8 16       	cp	r14, r24
    6a64:	f1 04       	cpc	r15, r1
    6a66:	49 f7       	brne	.-46     	; 0x6a3a <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x48>
    6a68:	6f ef       	ldi	r22, 0xFF	; 255
    6a6a:	7f ef       	ldi	r23, 0xFF	; 255
    6a6c:	81 e2       	ldi	r24, 0x21	; 33
    6a6e:	9c e0       	ldi	r25, 0x0C	; 12
    6a70:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6a74:	23 97       	sbiw	r28, 0x03	; 3
    6a76:	c6 0d       	add	r28, r6
    6a78:	d7 1d       	adc	r29, r7
    6a7a:	83 e0       	ldi	r24, 0x03	; 3
    6a7c:	68 0e       	add	r6, r24
    6a7e:	71 1c       	adc	r7, r1
    6a80:	82 01       	movw	r16, r4
    6a82:	03 50       	subi	r16, 0x03	; 3
    6a84:	11 09       	sbc	r17, r1
    6a86:	0c 0d       	add	r16, r12
    6a88:	1d 1d       	adc	r17, r13
    6a8a:	a6 01       	movw	r20, r12
    6a8c:	4d 5f       	subi	r20, 0xFD	; 253
    6a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a90:	9e 01       	movw	r18, r28
    6a92:	b3 01       	movw	r22, r6
    6a94:	81 e2       	ldi	r24, 0x21	; 33
    6a96:	9c e0       	ldi	r25, 0x0C	; 12
    6a98:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6a9c:	60 91 94 0a 	lds	r22, 0x0A94	; 0x800a94 <menu_slider_data_max>
    6aa0:	80 91 92 0a 	lds	r24, 0x0A92	; 0x800a92 <menu_slider_data_max_element>
    6aa4:	68 1b       	sub	r22, r24
    6aa6:	77 0b       	sbc	r23, r23
    6aa8:	6f 5f       	subi	r22, 0xFF	; 255
    6aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    6aac:	c2 01       	movw	r24, r4
    6aae:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
    6ab2:	e3 2d       	mov	r30, r3
    6ab4:	f0 e0       	ldi	r31, 0x00	; 0
    6ab6:	eb 56       	subi	r30, 0x6B	; 107
    6ab8:	f5 4f       	sbci	r31, 0xF5	; 245
    6aba:	f0 80       	ld	r15, Z
    6abc:	f6 9e       	mul	r15, r22
    6abe:	f0 2c       	mov	r15, r0
    6ac0:	11 24       	eor	r1, r1
    6ac2:	6a e9       	ldi	r22, 0x9A	; 154
    6ac4:	76 ed       	ldi	r23, 0xD6	; 214
    6ac6:	81 e2       	ldi	r24, 0x21	; 33
    6ac8:	9c e0       	ldi	r25, 0x0C	; 12
    6aca:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6ace:	cf 0c       	add	r12, r15
    6ad0:	d1 1c       	adc	r13, r1
    6ad2:	86 01       	movw	r16, r12
    6ad4:	06 5f       	subi	r16, 0xF6	; 246
    6ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ad8:	a6 01       	movw	r20, r12
    6ada:	4b 5f       	subi	r20, 0xFB	; 251
    6adc:	5f 4f       	sbci	r21, 0xFF	; 255
    6ade:	9e 01       	movw	r18, r28
    6ae0:	b3 01       	movw	r22, r6
    6ae2:	81 e2       	ldi	r24, 0x21	; 33
    6ae4:	9c e0       	ldi	r25, 0x0C	; 12
    6ae6:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6aea:	df 91       	pop	r29
    6aec:	cf 91       	pop	r28
    6aee:	1f 91       	pop	r17
    6af0:	0f 91       	pop	r16
    6af2:	ff 90       	pop	r15
    6af4:	ef 90       	pop	r14
    6af6:	df 90       	pop	r13
    6af8:	cf 90       	pop	r12
    6afa:	bf 90       	pop	r11
    6afc:	af 90       	pop	r10
    6afe:	9f 90       	pop	r9
    6b00:	8f 90       	pop	r8
    6b02:	7f 90       	pop	r7
    6b04:	6f 90       	pop	r6
    6b06:	5f 90       	pop	r5
    6b08:	4f 90       	pop	r4
    6b0a:	3f 90       	pop	r3
    6b0c:	08 95       	ret

00006b0e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    6b0e:	cf 92       	push	r12
    6b10:	df 92       	push	r13
    6b12:	ef 92       	push	r14
    6b14:	ff 92       	push	r15
    6b16:	0f 93       	push	r16
    6b18:	1f 93       	push	r17
    6b1a:	cf 93       	push	r28
    6b1c:	df 93       	push	r29
    6b1e:	25 e1       	ldi	r18, 0x15	; 21
    6b20:	28 9f       	mul	r18, r24
    6b22:	e0 01       	movw	r28, r0
    6b24:	29 9f       	mul	r18, r25
    6b26:	d0 0d       	add	r29, r0
    6b28:	11 24       	eor	r1, r1
    6b2a:	c6 5c       	subi	r28, 0xC6	; 198
    6b2c:	d5 4f       	sbci	r29, 0xF5	; 245
    6b2e:	2e 85       	ldd	r18, Y+14	; 0x0e
    6b30:	3f 85       	ldd	r19, Y+15	; 0x0f
    6b32:	48 89       	ldd	r20, Y+16	; 0x10
    6b34:	59 89       	ldd	r21, Y+17	; 0x11
    6b36:	68 81       	ld	r22, Y
    6b38:	79 81       	ldd	r23, Y+1	; 0x01
    6b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b3e:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
    6b42:	6b 01       	movw	r12, r22
    6b44:	7c 01       	movw	r14, r24
    6b46:	28 85       	ldd	r18, Y+8	; 0x08
    6b48:	39 85       	ldd	r19, Y+9	; 0x09
    6b4a:	4a 85       	ldd	r20, Y+10	; 0x0a
    6b4c:	5b 85       	ldd	r21, Y+11	; 0x0b
    6b4e:	0e 94 0f dc 	call	0x1b81e	; 0x1b81e <__gesf2>
    6b52:	87 fd       	sbrc	r24, 7
    6b54:	1f c0       	rjmp	.+62     	; 0x6b94 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6b56:	c8 82       	st	Y, r12
    6b58:	d9 82       	std	Y+1, r13	; 0x01
    6b5a:	ea 82       	std	Y+2, r14	; 0x02
    6b5c:	fb 82       	std	Y+3, r15	; 0x03
    6b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b60:	81 30       	cpi	r24, 0x01	; 1
    6b62:	c1 f4       	brne	.+48     	; 0x6b94 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6b64:	0b 89       	ldd	r16, Y+19	; 0x13
    6b66:	1c 89       	ldd	r17, Y+20	; 0x14
    6b68:	c7 01       	movw	r24, r14
    6b6a:	b6 01       	movw	r22, r12
    6b6c:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <float_to_int(float)>
    6b70:	48 81       	ld	r20, Y
    6b72:	59 81       	ldd	r21, Y+1	; 0x01
    6b74:	6a 81       	ldd	r22, Y+2	; 0x02
    6b76:	7b 81       	ldd	r23, Y+3	; 0x03
    6b78:	9a 89       	ldd	r25, Y+18	; 0x12
    6b7a:	28 2f       	mov	r18, r24
    6b7c:	89 2f       	mov	r24, r25
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	f8 01       	movw	r30, r16
    6b82:	df 91       	pop	r29
    6b84:	cf 91       	pop	r28
    6b86:	1f 91       	pop	r17
    6b88:	0f 91       	pop	r16
    6b8a:	ff 90       	pop	r15
    6b8c:	ef 90       	pop	r14
    6b8e:	df 90       	pop	r13
    6b90:	cf 90       	pop	r12
    6b92:	19 94       	eijmp
    6b94:	df 91       	pop	r29
    6b96:	cf 91       	pop	r28
    6b98:	1f 91       	pop	r17
    6b9a:	0f 91       	pop	r16
    6b9c:	ff 90       	pop	r15
    6b9e:	ef 90       	pop	r14
    6ba0:	df 90       	pop	r13
    6ba2:	cf 90       	pop	r12
    6ba4:	08 95       	ret

00006ba6 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    6ba6:	cf 92       	push	r12
    6ba8:	df 92       	push	r13
    6baa:	ef 92       	push	r14
    6bac:	ff 92       	push	r15
    6bae:	0f 93       	push	r16
    6bb0:	1f 93       	push	r17
    6bb2:	cf 93       	push	r28
    6bb4:	df 93       	push	r29
    6bb6:	25 e1       	ldi	r18, 0x15	; 21
    6bb8:	28 9f       	mul	r18, r24
    6bba:	e0 01       	movw	r28, r0
    6bbc:	29 9f       	mul	r18, r25
    6bbe:	d0 0d       	add	r29, r0
    6bc0:	11 24       	eor	r1, r1
    6bc2:	c6 5c       	subi	r28, 0xC6	; 198
    6bc4:	d5 4f       	sbci	r29, 0xF5	; 245
    6bc6:	2e 85       	ldd	r18, Y+14	; 0x0e
    6bc8:	3f 85       	ldd	r19, Y+15	; 0x0f
    6bca:	48 89       	ldd	r20, Y+16	; 0x10
    6bcc:	59 89       	ldd	r21, Y+17	; 0x11
    6bce:	68 81       	ld	r22, Y
    6bd0:	79 81       	ldd	r23, Y+1	; 0x01
    6bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    6bd6:	0e 94 44 da 	call	0x1b488	; 0x1b488 <__addsf3>
    6bda:	6b 01       	movw	r12, r22
    6bdc:	7c 01       	movw	r14, r24
    6bde:	2c 81       	ldd	r18, Y+4	; 0x04
    6be0:	3d 81       	ldd	r19, Y+5	; 0x05
    6be2:	4e 81       	ldd	r20, Y+6	; 0x06
    6be4:	5f 81       	ldd	r21, Y+7	; 0x07
    6be6:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
    6bea:	18 16       	cp	r1, r24
    6bec:	fc f0       	brlt	.+62     	; 0x6c2c <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6bee:	c8 82       	st	Y, r12
    6bf0:	d9 82       	std	Y+1, r13	; 0x01
    6bf2:	ea 82       	std	Y+2, r14	; 0x02
    6bf4:	fb 82       	std	Y+3, r15	; 0x03
    6bf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    6bf8:	81 30       	cpi	r24, 0x01	; 1
    6bfa:	c1 f4       	brne	.+48     	; 0x6c2c <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6bfc:	0b 89       	ldd	r16, Y+19	; 0x13
    6bfe:	1c 89       	ldd	r17, Y+20	; 0x14
    6c00:	c7 01       	movw	r24, r14
    6c02:	b6 01       	movw	r22, r12
    6c04:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <float_to_int(float)>
    6c08:	48 81       	ld	r20, Y
    6c0a:	59 81       	ldd	r21, Y+1	; 0x01
    6c0c:	6a 81       	ldd	r22, Y+2	; 0x02
    6c0e:	7b 81       	ldd	r23, Y+3	; 0x03
    6c10:	9a 89       	ldd	r25, Y+18	; 0x12
    6c12:	28 2f       	mov	r18, r24
    6c14:	89 2f       	mov	r24, r25
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	f8 01       	movw	r30, r16
    6c1a:	df 91       	pop	r29
    6c1c:	cf 91       	pop	r28
    6c1e:	1f 91       	pop	r17
    6c20:	0f 91       	pop	r16
    6c22:	ff 90       	pop	r15
    6c24:	ef 90       	pop	r14
    6c26:	df 90       	pop	r13
    6c28:	cf 90       	pop	r12
    6c2a:	19 94       	eijmp
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	ff 90       	pop	r15
    6c36:	ef 90       	pop	r14
    6c38:	df 90       	pop	r13
    6c3a:	cf 90       	pop	r12
    6c3c:	08 95       	ret

00006c3e <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
    6c3e:	0f 93       	push	r16
    6c40:	1f 93       	push	r17
    6c42:	c9 01       	movw	r24, r18
    6c44:	6d eb       	ldi	r22, 0xBD	; 189
    6c46:	72 e0       	ldi	r23, 0x02	; 2
    6c48:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    6c4c:	6a ed       	ldi	r22, 0xDA	; 218
    6c4e:	72 e0       	ldi	r23, 0x02	; 2
    6c50:	c8 01       	movw	r24, r16
    6c52:	1f 91       	pop	r17
    6c54:	0f 91       	pop	r16
    6c56:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <strcpy>

00006c5a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    6c5a:	89 ef       	ldi	r24, 0xF9	; 249
    6c5c:	99 e0       	ldi	r25, 0x09	; 9
    6c5e:	fc 01       	movw	r30, r24
    6c60:	01 90       	ld	r0, Z+
    6c62:	00 20       	and	r0, r0
    6c64:	e9 f7       	brne	.-6      	; 0x6c60 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    6c66:	cf 01       	movw	r24, r30
    6c68:	8a 5f       	subi	r24, 0xFA	; 250
    6c6a:	99 40       	sbci	r25, 0x09	; 9
    6c6c:	88 23       	and	r24, r24
    6c6e:	29 f0       	breq	.+10     	; 0x6c7a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    6c70:	99 27       	eor	r25, r25
    6c72:	fc 01       	movw	r30, r24
    6c74:	e8 50       	subi	r30, 0x08	; 8
    6c76:	f6 4f       	sbci	r31, 0xF6	; 246
    6c78:	10 82       	st	Z, r1
    6c7a:	08 95       	ret

00006c7c <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    6c7c:	cf 93       	push	r28
    6c7e:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    6c80:	95 e1       	ldi	r25, 0x15	; 21
    6c82:	89 9f       	mul	r24, r25
    6c84:	e0 01       	movw	r28, r0
    6c86:	11 24       	eor	r1, r1
    6c88:	c6 5c       	subi	r28, 0xC6	; 198
    6c8a:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_offsetjfh():
    6c8c:	20 e0       	ldi	r18, 0x00	; 0
    6c8e:	30 e0       	ldi	r19, 0x00	; 0
    6c90:	4a e7       	ldi	r20, 0x7A	; 122
    6c92:	54 e4       	ldi	r21, 0x44	; 68
    6c94:	68 81       	ld	r22, Y
    6c96:	79 81       	ldd	r23, Y+1	; 0x01
    6c98:	8a 81       	ldd	r24, Y+2	; 0x02
    6c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6c9c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
    6ca0:	0e 94 27 db 	call	0x1b64e	; 0x1b64e <__fixsfsi>
    6ca4:	8a 89       	ldd	r24, Y+18	; 0x12
    6ca6:	df 91       	pop	r29
    6ca8:	cf 91       	pop	r28
    6caa:	0c 94 d4 8b 	jmp	0x117a8	; 0x117a8 <tds_set_offset(unsigned char, int)>

00006cae <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    6cae:	cf 93       	push	r28
    6cb0:	df 93       	push	r29
_Z35display_function_get_variable_floath():
    6cb2:	95 e1       	ldi	r25, 0x15	; 21
    6cb4:	89 9f       	mul	r24, r25
    6cb6:	e0 01       	movw	r28, r0
    6cb8:	11 24       	eor	r1, r1
    6cba:	c6 5c       	subi	r28, 0xC6	; 198
    6cbc:	d5 4f       	sbci	r29, 0xF5	; 245
_Z20menu_tds_save_periodjfh():
    6cbe:	68 81       	ld	r22, Y
    6cc0:	79 81       	ldd	r23, Y+1	; 0x01
    6cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    6cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    6cc6:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
    6cca:	8a 89       	ldd	r24, Y+18	; 0x12
    6ccc:	df 91       	pop	r29
    6cce:	cf 91       	pop	r28
    6cd0:	0c 94 16 8c 	jmp	0x1182c	; 0x1182c <tds_set_period(unsigned char, unsigned char)>

00006cd4 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    6cd4:	0c 94 2b 8d 	jmp	0x11a56	; 0x11a56 <tds_associate(unsigned char)>

00006cd8 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    6cd8:	7f 92       	push	r7
    6cda:	8f 92       	push	r8
    6cdc:	9f 92       	push	r9
    6cde:	af 92       	push	r10
    6ce0:	bf 92       	push	r11
    6ce2:	cf 92       	push	r12
    6ce4:	df 92       	push	r13
    6ce6:	ef 92       	push	r14
    6ce8:	ff 92       	push	r15
    6cea:	0f 93       	push	r16
    6cec:	1f 93       	push	r17
    6cee:	cf 93       	push	r28
    6cf0:	df 93       	push	r29
    6cf2:	cd b7       	in	r28, 0x3d	; 61
    6cf4:	de b7       	in	r29, 0x3e	; 62
    6cf6:	6a 97       	sbiw	r28, 0x1a	; 26
    6cf8:	0f b6       	in	r0, 0x3f	; 63
    6cfa:	f8 94       	cli
    6cfc:	de bf       	out	0x3e, r29	; 62
    6cfe:	0f be       	out	0x3f, r0	; 63
    6d00:	cd bf       	out	0x3d, r28	; 61
    6d02:	98 2e       	mov	r9, r24
    6d04:	82 2e       	mov	r8, r18
    6d06:	73 2e       	mov	r7, r19
    6d08:	78 01       	movw	r14, r16
    6d0a:	62 e1       	ldi	r22, 0x12	; 18
    6d0c:	7a e5       	ldi	r23, 0x5A	; 90
    6d0e:	82 2f       	mov	r24, r18
    6d10:	93 2f       	mov	r25, r19
    6d12:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6d16:	6e e5       	ldi	r22, 0x5E	; 94
    6d18:	73 e0       	ldi	r23, 0x03	; 3
    6d1a:	c8 01       	movw	r24, r16
    6d1c:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    6d20:	4b e0       	ldi	r20, 0x0B	; 11
    6d22:	49 9d       	mul	r20, r9
    6d24:	c0 01       	movw	r24, r0
    6d26:	11 24       	eor	r1, r1
    6d28:	9c 01       	movw	r18, r24
    6d2a:	25 59       	subi	r18, 0x95	; 149
    6d2c:	3e 4e       	sbci	r19, 0xEE	; 238
    6d2e:	69 01       	movw	r12, r18
    6d30:	f9 01       	movw	r30, r18
    6d32:	81 85       	ldd	r24, Z+9	; 0x09
    6d34:	81 30       	cpi	r24, 0x01	; 1
    6d36:	89 f5       	brne	.+98     	; 0x6d9a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    6d38:	a9 01       	movw	r20, r18
    6d3a:	00 e1       	ldi	r16, 0x10	; 16
    6d3c:	28 e0       	ldi	r18, 0x08	; 8
    6d3e:	6a e3       	ldi	r22, 0x3A	; 58
    6d40:	ce 01       	movw	r24, r28
    6d42:	01 96       	adiw	r24, 0x01	; 1
    6d44:	5c 01       	movw	r10, r24
    6d46:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    6d4a:	bf 92       	push	r11
    6d4c:	af 92       	push	r10
    6d4e:	1f 92       	push	r1
    6d50:	9f 92       	push	r9
    6d52:	8e ed       	ldi	r24, 0xDE	; 222
    6d54:	92 e0       	ldi	r25, 0x02	; 2
    6d56:	9f 93       	push	r25
    6d58:	8f 93       	push	r24
    6d5a:	7f 92       	push	r7
    6d5c:	8f 92       	push	r8
    6d5e:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    6d62:	0f b6       	in	r0, 0x3f	; 63
    6d64:	f8 94       	cli
    6d66:	de bf       	out	0x3e, r29	; 62
    6d68:	0f be       	out	0x3f, r0	; 63
    6d6a:	cd bf       	out	0x3d, r28	; 61
    6d6c:	f6 01       	movw	r30, r12
    6d6e:	82 85       	ldd	r24, Z+10	; 0x0a
    6d70:	8f 3f       	cpi	r24, 0xFF	; 255
    6d72:	39 f1       	breq	.+78     	; 0x6dc2 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xea>
    6d74:	61 e2       	ldi	r22, 0x21	; 33
    6d76:	7a e5       	ldi	r23, 0x5A	; 90
    6d78:	c7 01       	movw	r24, r14
    6d7a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6d7e:	b5 01       	movw	r22, r10
    6d80:	f6 01       	movw	r30, r12
    6d82:	82 85       	ldd	r24, Z+10	; 0x0a
    6d84:	0e 94 86 8b 	call	0x1170c	; 0x1170c <tds_get_name(unsigned char, char*)>
    6d88:	64 e9       	ldi	r22, 0x94	; 148
    6d8a:	77 e0       	ldi	r23, 0x07	; 7
    6d8c:	c7 01       	movw	r24, r14
    6d8e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6d92:	b5 01       	movw	r22, r10
    6d94:	c7 01       	movw	r24, r14
    6d96:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6d9a:	6a 96       	adiw	r28, 0x1a	; 26
    6d9c:	0f b6       	in	r0, 0x3f	; 63
    6d9e:	f8 94       	cli
    6da0:	de bf       	out	0x3e, r29	; 62
    6da2:	0f be       	out	0x3f, r0	; 63
    6da4:	cd bf       	out	0x3d, r28	; 61
    6da6:	df 91       	pop	r29
    6da8:	cf 91       	pop	r28
    6daa:	1f 91       	pop	r17
    6dac:	0f 91       	pop	r16
    6dae:	ff 90       	pop	r15
    6db0:	ef 90       	pop	r14
    6db2:	df 90       	pop	r13
    6db4:	cf 90       	pop	r12
    6db6:	bf 90       	pop	r11
    6db8:	af 90       	pop	r10
    6dba:	9f 90       	pop	r9
    6dbc:	8f 90       	pop	r8
    6dbe:	7f 90       	pop	r7
    6dc0:	08 95       	ret
    6dc2:	64 e3       	ldi	r22, 0x34	; 52
    6dc4:	7a e5       	ldi	r23, 0x5A	; 90
    6dc6:	c7 01       	movw	r24, r14
    6dc8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6dcc:	e6 cf       	rjmp	.-52     	; 0x6d9a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>

00006dce <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6dce:	0f 93       	push	r16
    6dd0:	1f 93       	push	r17
    6dd2:	cf 93       	push	r28
    6dd4:	df 93       	push	r29
    6dd6:	00 d0       	rcall	.+0      	; 0x6dd8 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    6dd8:	00 d0       	rcall	.+0      	; 0x6dda <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    6dda:	1f 92       	push	r1
    6ddc:	1f 92       	push	r1
    6dde:	cd b7       	in	r28, 0x3d	; 61
    6de0:	de b7       	in	r29, 0x3e	; 62
    6de2:	c9 01       	movw	r24, r18
    6de4:	6c e0       	ldi	r22, 0x0C	; 12
    6de6:	77 e5       	ldi	r23, 0x57	; 87
    6de8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6dec:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6df0:	87 ff       	sbrs	r24, 7
    6df2:	1a c0       	rjmp	.+52     	; 0x6e28 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
    6df4:	61 e9       	ldi	r22, 0x91	; 145
    6df6:	75 e5       	ldi	r23, 0x55	; 85
    6df8:	c8 01       	movw	r24, r16
    6dfa:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6dfe:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <brigthness_display_auto_values>
    6e02:	86 95       	lsr	r24
itoa():
    6e04:	4a e0       	ldi	r20, 0x0A	; 10
    6e06:	be 01       	movw	r22, r28
    6e08:	6f 5f       	subi	r22, 0xFF	; 255
    6e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6e12:	be 01       	movw	r22, r28
    6e14:	6f 5f       	subi	r22, 0xFF	; 255
    6e16:	7f 4f       	sbci	r23, 0xFF	; 255
    6e18:	c8 01       	movw	r24, r16
    6e1a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6e1e:	65 ee       	ldi	r22, 0xE5	; 229
    6e20:	72 e0       	ldi	r23, 0x02	; 2
    6e22:	c8 01       	movw	r24, r16
    6e24:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6e28:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6e2c:	87 fd       	sbrc	r24, 7
    6e2e:	23 c0       	rjmp	.+70     	; 0x6e76 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
    6e30:	60 e8       	ldi	r22, 0x80	; 128
    6e32:	75 e5       	ldi	r23, 0x55	; 85
    6e34:	c8 01       	movw	r24, r16
    6e36:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6e3a:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <brigthness_display_values>
itoa():
    6e3e:	4a e0       	ldi	r20, 0x0A	; 10
    6e40:	be 01       	movw	r22, r28
    6e42:	6f 5f       	subi	r22, 0xFF	; 255
    6e44:	7f 4f       	sbci	r23, 0xFF	; 255
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
    6e4c:	be 01       	movw	r22, r28
    6e4e:	6f 5f       	subi	r22, 0xFF	; 255
    6e50:	7f 4f       	sbci	r23, 0xFF	; 255
    6e52:	c8 01       	movw	r24, r16
    6e54:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6e58:	65 ee       	ldi	r22, 0xE5	; 229
    6e5a:	72 e0       	ldi	r23, 0x02	; 2
    6e5c:	c8 01       	movw	r24, r16
    6e5e:	28 96       	adiw	r28, 0x08	; 8
    6e60:	0f b6       	in	r0, 0x3f	; 63
    6e62:	f8 94       	cli
    6e64:	de bf       	out	0x3e, r29	; 62
    6e66:	0f be       	out	0x3f, r0	; 63
    6e68:	cd bf       	out	0x3d, r28	; 61
    6e6a:	df 91       	pop	r29
    6e6c:	cf 91       	pop	r28
    6e6e:	1f 91       	pop	r17
    6e70:	0f 91       	pop	r16
    6e72:	0c 94 9e e0 	jmp	0x1c13c	; 0x1c13c <strcat>
    6e76:	28 96       	adiw	r28, 0x08	; 8
    6e78:	0f b6       	in	r0, 0x3f	; 63
    6e7a:	f8 94       	cli
    6e7c:	de bf       	out	0x3e, r29	; 62
    6e7e:	0f be       	out	0x3f, r0	; 63
    6e80:	cd bf       	out	0x3d, r28	; 61
    6e82:	df 91       	pop	r29
    6e84:	cf 91       	pop	r28
    6e86:	1f 91       	pop	r17
    6e88:	0f 91       	pop	r16
    6e8a:	08 95       	ret

00006e8c <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    6e8c:	0f 93       	push	r16
    6e8e:	1f 93       	push	r17
    6e90:	cf 93       	push	r28
    6e92:	df 93       	push	r29
    6e94:	00 d0       	rcall	.+0      	; 0x6e96 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    6e96:	00 d0       	rcall	.+0      	; 0x6e98 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    6e98:	1f 92       	push	r1
    6e9a:	1f 92       	push	r1
    6e9c:	cd b7       	in	r28, 0x3d	; 61
    6e9e:	de b7       	in	r29, 0x3e	; 62
    6ea0:	89 01       	movw	r16, r18
    6ea2:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6ea6:	87 ff       	sbrs	r24, 7
    6ea8:	1a c0       	rjmp	.+52     	; 0x6ede <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    6eaa:	61 e9       	ldi	r22, 0x91	; 145
    6eac:	75 e5       	ldi	r23, 0x55	; 85
    6eae:	c9 01       	movw	r24, r18
    6eb0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6eb4:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <brigthness_display_auto_values>
    6eb8:	86 95       	lsr	r24
itoa():
    6eba:	4a e0       	ldi	r20, 0x0A	; 10
    6ebc:	be 01       	movw	r22, r28
    6ebe:	6f 5f       	subi	r22, 0xFF	; 255
    6ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
    6ec8:	be 01       	movw	r22, r28
    6eca:	6f 5f       	subi	r22, 0xFF	; 255
    6ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ece:	c8 01       	movw	r24, r16
    6ed0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6ed4:	65 ee       	ldi	r22, 0xE5	; 229
    6ed6:	72 e0       	ldi	r23, 0x02	; 2
    6ed8:	c8 01       	movw	r24, r16
    6eda:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    6ede:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6ee2:	87 fd       	sbrc	r24, 7
    6ee4:	05 c0       	rjmp	.+10     	; 0x6ef0 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    6ee6:	60 e8       	ldi	r22, 0x80	; 128
    6ee8:	75 e5       	ldi	r23, 0x55	; 85
    6eea:	c8 01       	movw	r24, r16
    6eec:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    6ef0:	28 96       	adiw	r28, 0x08	; 8
    6ef2:	0f b6       	in	r0, 0x3f	; 63
    6ef4:	f8 94       	cli
    6ef6:	de bf       	out	0x3e, r29	; 62
    6ef8:	0f be       	out	0x3f, r0	; 63
    6efa:	cd bf       	out	0x3d, r28	; 61
    6efc:	df 91       	pop	r29
    6efe:	cf 91       	pop	r28
    6f00:	1f 91       	pop	r17
    6f02:	0f 91       	pop	r16
    6f04:	08 95       	ret

00006f06 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    6f06:	cf 93       	push	r28
    6f08:	c8 2f       	mov	r28, r24
    6f0a:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <default_ring>
    6f0e:	0e 94 83 90 	call	0x12106	; 0x12106 <thermostat_ring_get_active(unsigned char)>
    6f12:	8f 3f       	cpi	r24, 0xFF	; 255
    6f14:	41 f0       	breq	.+16     	; 0x6f26 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6f16:	6c 2f       	mov	r22, r28
    6f18:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <default_ring>
    6f1c:	0e 94 ef 90 	call	0x121de	; 0x121de <thermostat_ring_set_mode(unsigned char, unsigned char)>
    6f20:	81 e0       	ldi	r24, 0x01	; 1
    6f22:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <change_term_mode>
    6f26:	cf 91       	pop	r28
    6f28:	08 95       	ret

00006f2a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    6f2a:	cf 93       	push	r28
    6f2c:	c8 2f       	mov	r28, r24
    6f2e:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <default_ring>
    6f32:	0e 94 83 90 	call	0x12106	; 0x12106 <thermostat_ring_get_active(unsigned char)>
    6f36:	8f 3f       	cpi	r24, 0xFF	; 255
    6f38:	31 f0       	breq	.+12     	; 0x6f46 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1c>
    6f3a:	6c 2f       	mov	r22, r28
    6f3c:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <default_ring>
    6f40:	cf 91       	pop	r28
    6f42:	0c 94 f7 90 	jmp	0x121ee	; 0x121ee <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    6f46:	80 e0       	ldi	r24, 0x00	; 0
    6f48:	cf 91       	pop	r28
    6f4a:	08 95       	ret

00006f4c <EEPROMClass::read(int) [clone .isra.6]>:
_ZNK5EERefdeEv():
    6f4c:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <eeprom_read_byte>

00006f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>:
_ZN5EERefaSEh():
    6f50:	0c 94 b8 e8 	jmp	0x1d170	; 0x1d170 <eeprom_write_byte>

00006f54 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
    6f54:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6f58:	87 ff       	sbrs	r24, 7
    6f5a:	10 c0       	rjmp	.+32     	; 0x6f7c <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x28>
    6f5c:	8f 77       	andi	r24, 0x7F	; 127
    6f5e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <brigthness_display_mode>
    6f62:	60 91 9e 0a 	lds	r22, 0x0A9E	; 0x800a9e <brigthness_display_values>
    6f66:	66 0f       	add	r22, r22
    6f68:	8f ef       	ldi	r24, 0xFF	; 255
    6f6a:	9b e0       	ldi	r25, 0x0B	; 11
    6f6c:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    6f70:	60 91 9c 0a 	lds	r22, 0x0A9C	; 0x800a9c <brigthness_display_mode>
    6f74:	8f e5       	ldi	r24, 0x5F	; 95
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    6f7c:	80 68       	ori	r24, 0x80	; 128
    6f7e:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <brigthness_display_mode>
    6f82:	f6 cf       	rjmp	.-20     	; 0x6f70 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x1c>

00006f84 <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
    6f84:	20 93 9e 0a 	sts	0x0A9E, r18	; 0x800a9e <brigthness_display_values>
    6f88:	62 2f       	mov	r22, r18
    6f8a:	66 0f       	add	r22, r22
    6f8c:	8f ef       	ldi	r24, 0xFF	; 255
    6f8e:	9b e0       	ldi	r25, 0x0B	; 11
    6f90:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    6f94:	60 91 9e 0a 	lds	r22, 0x0A9E	; 0x800a9e <brigthness_display_values>
    6f98:	8e e5       	ldi	r24, 0x5E	; 94
    6f9a:	90 e0       	ldi	r25, 0x00	; 0
    6f9c:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

00006fa0 <click_button_default_value(unsigned int, unsigned int, unsigned char)>:
_Z26click_button_default_valuejjh():
    6fa0:	6f ef       	ldi	r22, 0xFF	; 255
    6fa2:	8a e5       	ldi	r24, 0x5A	; 90
    6fa4:	90 e0       	ldi	r25, 0x00	; 0
    6fa6:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    6faa:	e0 91 d8 09 	lds	r30, 0x09D8	; 0x8009d8 <resetFunc>
    6fae:	f0 91 d9 09 	lds	r31, 0x09D9	; 0x8009d9 <resetFunc+0x1>
    6fb2:	19 94       	eijmp

00006fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6fb4:	0f 93       	push	r16
    6fb6:	1f 93       	push	r17
    6fb8:	cf 93       	push	r28
    6fba:	df 93       	push	r29
    6fbc:	00 97       	sbiw	r24, 0x00	; 0
    6fbe:	01 f1       	breq	.+64     	; 0x7000 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x4c>
    6fc0:	8b 01       	movw	r16, r22
    6fc2:	fc 01       	movw	r30, r24
    6fc4:	c0 81       	ld	r28, Z
    6fc6:	d1 81       	ldd	r29, Z+1	; 0x01
    6fc8:	20 97       	sbiw	r28, 0x00	; 0
    6fca:	d1 f0       	breq	.+52     	; 0x7000 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x4c>
    6fcc:	6a 85       	ldd	r22, Y+10	; 0x0a
    6fce:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    6fd0:	01 15       	cp	r16, r1
    6fd2:	11 05       	cpc	r17, r1
    6fd4:	19 f0       	breq	.+6      	; 0x6fdc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x28>
    6fd6:	61 15       	cp	r22, r1
    6fd8:	71 05       	cpc	r23, r1
    6fda:	49 f4       	brne	.+18     	; 0x6fee <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x3a>
    6fdc:	06 17       	cp	r16, r22
    6fde:	17 07       	cpc	r17, r23
    6fe0:	59 f4       	brne	.+22     	; 0x6ff8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6fe2:	ce 01       	movw	r24, r28
    6fe4:	df 91       	pop	r29
    6fe6:	cf 91       	pop	r28
    6fe8:	1f 91       	pop	r17
    6fea:	0f 91       	pop	r16
    6fec:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    6fee:	c8 01       	movw	r24, r16
    6ff0:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    6ff4:	89 2b       	or	r24, r25
    6ff6:	a9 f3       	breq	.-22     	; 0x6fe2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6ff8:	0e 80       	ldd	r0, Y+6	; 0x06
    6ffa:	df 81       	ldd	r29, Y+7	; 0x07
    6ffc:	c0 2d       	mov	r28, r0
    6ffe:	e4 cf       	rjmp	.-56     	; 0x6fc8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x14>
    7000:	d0 e0       	ldi	r29, 0x00	; 0
    7002:	c0 e0       	ldi	r28, 0x00	; 0
    7004:	ee cf       	rjmp	.-36     	; 0x6fe2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x2e>

00007006 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    7006:	08 95       	ret

00007008 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
    7008:	81 e0       	ldi	r24, 0x01	; 1
    700a:	08 95       	ret

0000700c <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    700c:	0f 93       	push	r16
    700e:	1f 93       	push	r17
    7010:	cf 93       	push	r28
    7012:	df 93       	push	r29
    7014:	dc 01       	movw	r26, r24
    7016:	12 96       	adiw	r26, 0x02	; 2
    7018:	2d 91       	ld	r18, X+
    701a:	3c 91       	ld	r19, X
    701c:	23 2b       	or	r18, r19
    701e:	41 f4       	brne	.+16     	; 0x7030 <ArduinoJson::JsonArray::add()+0x24>
    7020:	60 e0       	ldi	r22, 0x00	; 0
    7022:	70 e0       	ldi	r23, 0x00	; 0
    7024:	cb 01       	movw	r24, r22
    7026:	df 91       	pop	r29
    7028:	cf 91       	pop	r28
    702a:	1f 91       	pop	r17
    702c:	0f 91       	pop	r16
    702e:	08 95       	ret
    7030:	8c 01       	movw	r16, r24
    7032:	ec 01       	movw	r28, r24
    7034:	88 81       	ld	r24, Y
    7036:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    7038:	dc 01       	movw	r26, r24
    703a:	ed 91       	ld	r30, X+
    703c:	fc 91       	ld	r31, X
    703e:	01 90       	ld	r0, Z+
    7040:	f0 81       	ld	r31, Z
    7042:	e0 2d       	mov	r30, r0
    7044:	6c e0       	ldi	r22, 0x0C	; 12
    7046:	70 e0       	ldi	r23, 0x00	; 0
    7048:	19 95       	eicall
    704a:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    704c:	89 2b       	or	r24, r25
    704e:	31 f1       	breq	.+76     	; 0x709c <ArduinoJson::JsonArray::add()+0x90>
    7050:	8c e0       	ldi	r24, 0x0C	; 12
    7052:	ef 01       	movw	r28, r30
    7054:	19 92       	st	Y+, r1
    7056:	8a 95       	dec	r24
    7058:	e9 f7       	brne	.-6      	; 0x7054 <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    705a:	11 82       	std	Z+1, r1	; 0x01
    705c:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    705e:	e8 01       	movw	r28, r16
    7060:	aa 81       	ldd	r26, Y+2	; 0x02
    7062:	bb 81       	ldd	r27, Y+3	; 0x03
    7064:	12 96       	adiw	r26, 0x02	; 2
    7066:	8d 91       	ld	r24, X+
    7068:	9c 91       	ld	r25, X
    706a:	13 97       	sbiw	r26, 0x03	; 3
    706c:	00 97       	sbiw	r24, 0x00	; 0
    706e:	91 f0       	breq	.+36     	; 0x7094 <ArduinoJson::JsonArray::add()+0x88>
    7070:	91 87       	std	Z+9, r25	; 0x09
    7072:	80 87       	std	Z+8, r24	; 0x08
    7074:	ec 01       	movw	r28, r24
    7076:	ff 83       	std	Y+7, r31	; 0x07
    7078:	ee 83       	std	Y+6, r30	; 0x06
    707a:	13 96       	adiw	r26, 0x03	; 3
    707c:	fc 93       	st	X, r31
    707e:	ee 93       	st	-X, r30
    7080:	12 97       	sbiw	r26, 0x02	; 2
    7082:	3e 2f       	mov	r19, r30
    7084:	2f 2f       	mov	r18, r31
    7086:	f8 01       	movw	r30, r16
    7088:	40 81       	ld	r20, Z
    708a:	51 81       	ldd	r21, Z+1	; 0x01
    708c:	ba 01       	movw	r22, r20
    708e:	83 2f       	mov	r24, r19
    7090:	92 2f       	mov	r25, r18
    7092:	c9 cf       	rjmp	.-110    	; 0x7026 <ArduinoJson::JsonArray::add()+0x1a>
    7094:	11 96       	adiw	r26, 0x01	; 1
    7096:	fc 93       	st	X, r31
    7098:	ee 93       	st	-X, r30
    709a:	ef cf       	rjmp	.-34     	; 0x707a <ArduinoJson::JsonArray::add()+0x6e>
    709c:	30 e0       	ldi	r19, 0x00	; 0
    709e:	20 e0       	ldi	r18, 0x00	; 0
    70a0:	50 e0       	ldi	r21, 0x00	; 0
    70a2:	40 e0       	ldi	r20, 0x00	; 0
    70a4:	f3 cf       	rjmp	.-26     	; 0x708c <ArduinoJson::JsonArray::add()+0x80>

000070a6 <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    70a6:	cf 93       	push	r28
    70a8:	df 93       	push	r29
    70aa:	ec 01       	movw	r28, r24
    70ac:	00 97       	sbiw	r24, 0x00	; 0
    70ae:	09 f4       	brne	.+2      	; 0x70b2 <ArduinoJson::Internals::isFloat(char const*)+0xc>
    70b0:	3f c0       	rjmp	.+126    	; 0x7130 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    70b2:	67 ee       	ldi	r22, 0xE7	; 231
    70b4:	72 e0       	ldi	r23, 0x02	; 2
    70b6:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    70ba:	89 2b       	or	r24, r25
    70bc:	e9 f1       	breq	.+122    	; 0x7138 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    70be:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    70c0:	8d 32       	cpi	r24, 0x2D	; 45
    70c2:	11 f0       	breq	.+4      	; 0x70c8 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    70c4:	8b 32       	cpi	r24, 0x2B	; 43
    70c6:	09 f4       	brne	.+2      	; 0x70ca <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    70c8:	21 96       	adiw	r28, 0x01	; 1
    70ca:	6b ee       	ldi	r22, 0xEB	; 235
    70cc:	72 e0       	ldi	r23, 0x02	; 2
    70ce:	ce 01       	movw	r24, r28
    70d0:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    70d4:	89 2b       	or	r24, r25
    70d6:	81 f1       	breq	.+96     	; 0x7138 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    70d8:	88 81       	ld	r24, Y
    70da:	88 23       	and	r24, r24
    70dc:	49 f1       	breq	.+82     	; 0x7130 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    70de:	fe 01       	movw	r30, r28
    70e0:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    70e2:	90 ed       	ldi	r25, 0xD0	; 208
    70e4:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    70e6:	9a 30       	cpi	r25, 0x0A	; 10
    70e8:	d0 f3       	brcs	.-12     	; 0x70de <ArduinoJson::Internals::isFloat(char const*)+0x38>
    70ea:	8e 32       	cpi	r24, 0x2E	; 46
    70ec:	41 f4       	brne	.+16     	; 0x70fe <ArduinoJson::Internals::isFloat(char const*)+0x58>
    70ee:	9e 01       	movw	r18, r28
    70f0:	f9 01       	movw	r30, r18
    70f2:	2f 5f       	subi	r18, 0xFF	; 255
    70f4:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    70f6:	80 81       	ld	r24, Z
    70f8:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    70fa:	8a 30       	cpi	r24, 0x0A	; 10
    70fc:	c8 f3       	brcs	.-14     	; 0x70f0 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    70fe:	80 81       	ld	r24, Z
    7100:	8f 7d       	andi	r24, 0xDF	; 223
    7102:	85 34       	cpi	r24, 0x45	; 69
    7104:	89 f4       	brne	.+34     	; 0x7128 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    7106:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    7108:	8d 32       	cpi	r24, 0x2D	; 45
    710a:	a1 f0       	breq	.+40     	; 0x7134 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    710c:	8b 32       	cpi	r24, 0x2B	; 43
    710e:	91 f0       	breq	.+36     	; 0x7134 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7110:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    7112:	80 81       	ld	r24, Z
    7114:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7116:	8a 30       	cpi	r24, 0x0A	; 10
    7118:	58 f4       	brcc	.+22     	; 0x7130 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    711a:	cf 01       	movw	r24, r30
    711c:	fc 01       	movw	r30, r24
    711e:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    7120:	20 81       	ld	r18, Z
    7122:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7124:	2a 30       	cpi	r18, 0x0A	; 10
    7126:	d0 f3       	brcs	.-12     	; 0x711c <ArduinoJson::Internals::isFloat(char const*)+0x76>
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	90 81       	ld	r25, Z
    712c:	99 23       	and	r25, r25
    712e:	29 f0       	breq	.+10     	; 0x713a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    7130:	80 e0       	ldi	r24, 0x00	; 0
    7132:	03 c0       	rjmp	.+6      	; 0x713a <ArduinoJson::Internals::isFloat(char const*)+0x94>
    7134:	32 96       	adiw	r30, 0x02	; 2
    7136:	ed cf       	rjmp	.-38     	; 0x7112 <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    7138:	81 e0       	ldi	r24, 0x01	; 1
    713a:	df 91       	pop	r29
    713c:	cf 91       	pop	r28
    713e:	08 95       	ret

00007140 <printf_begin()>:
_Z12printf_beginv():
    7140:	70 e0       	ldi	r23, 0x00	; 0
    7142:	60 e0       	ldi	r22, 0x00	; 0
    7144:	86 e8       	ldi	r24, 0x86	; 134
    7146:	91 e8       	ldi	r25, 0x81	; 129
    7148:	0c 94 40 e1 	jmp	0x1c280	; 0x1c280 <fdevopen>

0000714c <Temperature_LM75_Derived::readTemperatureC()>:
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    714c:	cf 93       	push	r28
    714e:	df 93       	push	r29
    7150:	ec 01       	movw	r28, r24
    7152:	eb 85       	ldd	r30, Y+11	; 0x0b
    7154:	fc 85       	ldd	r31, Y+12	; 0x0c
    7156:	04 80       	ldd	r0, Z+4	; 0x04
    7158:	f5 81       	ldd	r31, Z+5	; 0x05
    715a:	e0 2d       	mov	r30, r0
    715c:	60 81       	ld	r22, Z
    715e:	0e 94 79 cc 	call	0x198f2	; 0x198f2 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    7162:	bc 01       	movw	r22, r24
    7164:	99 0f       	add	r25, r25
    7166:	88 0b       	sbc	r24, r24
    7168:	99 0b       	sbc	r25, r25
    716a:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    716e:	2f 81       	ldd	r18, Y+7	; 0x07
    7170:	38 85       	ldd	r19, Y+8	; 0x08
    7172:	49 85       	ldd	r20, Y+9	; 0x09
    7174:	5a 85       	ldd	r21, Y+10	; 0x0a
    7176:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    717a:	df 91       	pop	r29
    717c:	cf 91       	pop	r28
    717e:	08 95       	ret

00007180 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    7180:	30 e0       	ldi	r19, 0x00	; 0
    7182:	20 e0       	ldi	r18, 0x00	; 0
    7184:	e1 e0       	ldi	r30, 0x01	; 1
    7186:	f0 e0       	ldi	r31, 0x00	; 0
    7188:	af 01       	movw	r20, r30
    718a:	02 2e       	mov	r0, r18
    718c:	01 c0       	rjmp	.+2      	; 0x7190 <enable_redraw(unsigned char, unsigned char)+0x10>
    718e:	44 0f       	add	r20, r20
    7190:	0a 94       	dec	r0
    7192:	ea f7       	brpl	.-6      	; 0x718e <enable_redraw(unsigned char, unsigned char)+0xe>
    7194:	98 2f       	mov	r25, r24
    7196:	94 23       	and	r25, r20
    7198:	11 f0       	breq	.+4      	; 0x719e <enable_redraw(unsigned char, unsigned char)+0x1e>
    719a:	46 23       	and	r20, r22
    719c:	39 f4       	brne	.+14     	; 0x71ac <enable_redraw(unsigned char, unsigned char)+0x2c>
    719e:	2f 5f       	subi	r18, 0xFF	; 255
    71a0:	3f 4f       	sbci	r19, 0xFF	; 255
    71a2:	28 30       	cpi	r18, 0x08	; 8
    71a4:	31 05       	cpc	r19, r1
    71a6:	81 f7       	brne	.-32     	; 0x7188 <enable_redraw(unsigned char, unsigned char)+0x8>
    71a8:	80 e0       	ldi	r24, 0x00	; 0
    71aa:	08 95       	ret
    71ac:	81 e0       	ldi	r24, 0x01	; 1
    71ae:	08 95       	ret

000071b0 <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    71b0:	e0 91 dc 09 	lds	r30, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    71b4:	f0 e0       	ldi	r31, 0x00	; 0
    71b6:	e9 51       	subi	r30, 0x19	; 25
    71b8:	f6 4f       	sbci	r31, 0xF6	; 246
    71ba:	10 82       	st	Z, r1
    71bc:	08 95       	ret

000071be <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    71be:	ff 92       	push	r15
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	dc 01       	movw	r26, r24
    71ca:	20 91 dc 09 	lds	r18, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    71ce:	30 e0       	ldi	r19, 0x00	; 0
    71d0:	80 e0       	ldi	r24, 0x00	; 0
    71d2:	69 ef       	ldi	r22, 0xF9	; 249
    71d4:	74 e0       	ldi	r23, 0x04	; 4
    71d6:	ca ed       	ldi	r28, 0xDA	; 218
    71d8:	d2 e0       	ldi	r29, 0x02	; 2
    71da:	89 01       	movw	r16, r18
    71dc:	09 51       	subi	r16, 0x19	; 25
    71de:	16 4f       	sbci	r17, 0xF6	; 246
    71e0:	fb 01       	movw	r30, r22
    71e2:	94 91       	lpm	r25, Z
    71e4:	89 17       	cp	r24, r25
    71e6:	e8 f4       	brcc	.+58     	; 0x7222 <MenuHistoryGetMenu(unsigned char*)+0x64>
    71e8:	8c 9f       	mul	r24, r28
    71ea:	a0 01       	movw	r20, r0
    71ec:	8d 9f       	mul	r24, r29
    71ee:	50 0d       	add	r21, r0
    71f0:	11 24       	eor	r1, r1
    71f2:	fa 01       	movw	r30, r20
    71f4:	ee 53       	subi	r30, 0x3E	; 62
    71f6:	f8 4f       	sbci	r31, 0xF8	; 248
    71f8:	f4 90       	lpm	r15, Z
    71fa:	f8 01       	movw	r30, r16
    71fc:	90 81       	ld	r25, Z
    71fe:	9f 11       	cpse	r25, r15
    7200:	0e c0       	rjmp	.+28     	; 0x721e <MenuHistoryGetMenu(unsigned char*)+0x60>
    7202:	43 50       	subi	r20, 0x03	; 3
    7204:	5b 4f       	sbci	r21, 0xFB	; 251
    7206:	23 52       	subi	r18, 0x23	; 35
    7208:	36 4f       	sbci	r19, 0xF6	; 246
    720a:	f9 01       	movw	r30, r18
    720c:	20 81       	ld	r18, Z
    720e:	2c 93       	st	X, r18
    7210:	ca 01       	movw	r24, r20
    7212:	df 91       	pop	r29
    7214:	cf 91       	pop	r28
    7216:	1f 91       	pop	r17
    7218:	0f 91       	pop	r16
    721a:	ff 90       	pop	r15
    721c:	08 95       	ret
    721e:	8f 5f       	subi	r24, 0xFF	; 255
    7220:	df cf       	rjmp	.-66     	; 0x71e0 <MenuHistoryGetMenu(unsigned char*)+0x22>
    7222:	80 e0       	ldi	r24, 0x00	; 0
    7224:	6a ef       	ldi	r22, 0xFA	; 250
    7226:	74 e0       	ldi	r23, 0x04	; 4
    7228:	ca ed       	ldi	r28, 0xDA	; 218
    722a:	d2 e0       	ldi	r29, 0x02	; 2
    722c:	89 01       	movw	r16, r18
    722e:	09 51       	subi	r16, 0x19	; 25
    7230:	16 4f       	sbci	r17, 0xF6	; 246
    7232:	fb 01       	movw	r30, r22
    7234:	94 91       	lpm	r25, Z
    7236:	89 17       	cp	r24, r25
    7238:	90 f4       	brcc	.+36     	; 0x725e <MenuHistoryGetMenu(unsigned char*)+0xa0>
    723a:	8c 9f       	mul	r24, r28
    723c:	a0 01       	movw	r20, r0
    723e:	8d 9f       	mul	r24, r29
    7240:	50 0d       	add	r21, r0
    7242:	11 24       	eor	r1, r1
    7244:	fa 01       	movw	r30, r20
    7246:	ea 5b       	subi	r30, 0xBA	; 186
    7248:	fb 4d       	sbci	r31, 0xDB	; 219
    724a:	f4 90       	lpm	r15, Z
    724c:	f8 01       	movw	r30, r16
    724e:	90 81       	ld	r25, Z
    7250:	9f 11       	cpse	r25, r15
    7252:	03 c0       	rjmp	.+6      	; 0x725a <MenuHistoryGetMenu(unsigned char*)+0x9c>
    7254:	4f 57       	subi	r20, 0x7F	; 127
    7256:	5e 4d       	sbci	r21, 0xDE	; 222
    7258:	d6 cf       	rjmp	.-84     	; 0x7206 <MenuHistoryGetMenu(unsigned char*)+0x48>
    725a:	8f 5f       	subi	r24, 0xFF	; 255
    725c:	ea cf       	rjmp	.-44     	; 0x7232 <MenuHistoryGetMenu(unsigned char*)+0x74>
    725e:	80 e0       	ldi	r24, 0x00	; 0
    7260:	6b ef       	ldi	r22, 0xFB	; 251
    7262:	74 e0       	ldi	r23, 0x04	; 4
    7264:	ca ed       	ldi	r28, 0xDA	; 218
    7266:	d2 e0       	ldi	r29, 0x02	; 2
    7268:	89 01       	movw	r16, r18
    726a:	09 51       	subi	r16, 0x19	; 25
    726c:	16 4f       	sbci	r17, 0xF6	; 246
    726e:	fb 01       	movw	r30, r22
    7270:	94 91       	lpm	r25, Z
    7272:	89 17       	cp	r24, r25
    7274:	90 f4       	brcc	.+36     	; 0x729a <MenuHistoryGetMenu(unsigned char*)+0xdc>
    7276:	8c 9f       	mul	r24, r28
    7278:	a0 01       	movw	r20, r0
    727a:	8d 9f       	mul	r24, r29
    727c:	50 0d       	add	r21, r0
    727e:	11 24       	eor	r1, r1
    7280:	fa 01       	movw	r30, r20
    7282:	ee 59       	subi	r30, 0x9E	; 158
    7284:	fa 4c       	sbci	r31, 0xCA	; 202
    7286:	f4 90       	lpm	r15, Z
    7288:	f8 01       	movw	r30, r16
    728a:	90 81       	ld	r25, Z
    728c:	9f 11       	cpse	r25, r15
    728e:	03 c0       	rjmp	.+6      	; 0x7296 <MenuHistoryGetMenu(unsigned char*)+0xd8>
    7290:	43 56       	subi	r20, 0x63	; 99
    7292:	5d 4c       	sbci	r21, 0xCD	; 205
    7294:	b8 cf       	rjmp	.-144    	; 0x7206 <MenuHistoryGetMenu(unsigned char*)+0x48>
    7296:	8f 5f       	subi	r24, 0xFF	; 255
    7298:	ea cf       	rjmp	.-44     	; 0x726e <MenuHistoryGetMenu(unsigned char*)+0xb0>
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	6c ef       	ldi	r22, 0xFC	; 252
    729e:	74 e0       	ldi	r23, 0x04	; 4
    72a0:	ca ed       	ldi	r28, 0xDA	; 218
    72a2:	d2 e0       	ldi	r29, 0x02	; 2
    72a4:	89 01       	movw	r16, r18
    72a6:	09 51       	subi	r16, 0x19	; 25
    72a8:	16 4f       	sbci	r17, 0xF6	; 246
    72aa:	fb 01       	movw	r30, r22
    72ac:	84 91       	lpm	r24, Z
    72ae:	98 17       	cp	r25, r24
    72b0:	08 f0       	brcs	.+2      	; 0x72b4 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    72b2:	ae cf       	rjmp	.-164    	; 0x7210 <MenuHistoryGetMenu(unsigned char*)+0x52>
    72b4:	9c 9f       	mul	r25, r28
    72b6:	a0 01       	movw	r20, r0
    72b8:	9d 9f       	mul	r25, r29
    72ba:	50 0d       	add	r21, r0
    72bc:	11 24       	eor	r1, r1
    72be:	fa 01       	movw	r30, r20
    72c0:	e2 58       	subi	r30, 0x82	; 130
    72c2:	f9 4b       	sbci	r31, 0xB9	; 185
    72c4:	f4 90       	lpm	r15, Z
    72c6:	f8 01       	movw	r30, r16
    72c8:	80 81       	ld	r24, Z
    72ca:	8f 11       	cpse	r24, r15
    72cc:	03 c0       	rjmp	.+6      	; 0x72d4 <MenuHistoryGetMenu(unsigned char*)+0x116>
    72ce:	47 54       	subi	r20, 0x47	; 71
    72d0:	5c 4b       	sbci	r21, 0xBC	; 188
    72d2:	99 cf       	rjmp	.-206    	; 0x7206 <MenuHistoryGetMenu(unsigned char*)+0x48>
    72d4:	9f 5f       	subi	r25, 0xFF	; 255
    72d6:	e9 cf       	rjmp	.-46     	; 0x72aa <MenuHistoryGetMenu(unsigned char*)+0xec>

000072d8 <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    72d8:	bc 01       	movw	r22, r24
    72da:	81 e2       	ldi	r24, 0x21	; 33
    72dc:	9c e0       	ldi	r25, 0x0C	; 12
    72de:	0c 94 7f 95 	jmp	0x12afe	; 0x12afe <LCDWIKI_GUI::Fill_Screen(unsigned int)>

000072e2 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    72e2:	2f 92       	push	r2
    72e4:	3f 92       	push	r3
    72e6:	4f 92       	push	r4
    72e8:	5f 92       	push	r5
    72ea:	6f 92       	push	r6
    72ec:	7f 92       	push	r7
    72ee:	8f 92       	push	r8
    72f0:	9f 92       	push	r9
    72f2:	af 92       	push	r10
    72f4:	bf 92       	push	r11
    72f6:	cf 92       	push	r12
    72f8:	df 92       	push	r13
    72fa:	ef 92       	push	r14
    72fc:	ff 92       	push	r15
    72fe:	0f 93       	push	r16
    7300:	1f 93       	push	r17
    7302:	cf 93       	push	r28
    7304:	df 93       	push	r29
    7306:	1f 92       	push	r1
    7308:	cd b7       	in	r28, 0x3d	; 61
    730a:	de b7       	in	r29, 0x3e	; 62
    730c:	ce 01       	movw	r24, r28
    730e:	01 96       	adiw	r24, 0x01	; 1
    7310:	0e 94 df 38 	call	0x71be	; 0x71be <MenuHistoryGetMenu(unsigned char*)>
    7314:	7c 01       	movw	r14, r24
    7316:	fc 01       	movw	r30, r24
    7318:	e2 53       	subi	r30, 0x32	; 50
    731a:	fd 4f       	sbci	r31, 0xFD	; 253
    731c:	b4 90       	lpm	r11, Z
    731e:	38 97       	sbiw	r30, 0x08	; 8
    7320:	85 90       	lpm	r8, Z+
    7322:	94 90       	lpm	r9, Z
    7324:	fc 01       	movw	r30, r24
    7326:	e8 53       	subi	r30, 0x38	; 56
    7328:	fd 4f       	sbci	r31, 0xFD	; 253
    732a:	c5 90       	lpm	r12, Z+
    732c:	d4 90       	lpm	r13, Z
    732e:	fc 01       	movw	r30, r24
    7330:	e6 53       	subi	r30, 0x36	; 54
    7332:	fd 4f       	sbci	r31, 0xFD	; 253
    7334:	65 90       	lpm	r6, Z+
    7336:	74 90       	lpm	r7, Z
    7338:	fc 01       	movw	r30, r24
    733a:	e4 53       	subi	r30, 0x34	; 52
    733c:	fd 4f       	sbci	r31, 0xFD	; 253
    733e:	45 90       	lpm	r4, Z+
    7340:	54 90       	lpm	r5, Z
    7342:	fc 01       	movw	r30, r24
    7344:	e1 53       	subi	r30, 0x31	; 49
    7346:	fd 4f       	sbci	r31, 0xFD	; 253
    7348:	25 90       	lpm	r2, Z+
    734a:	34 90       	lpm	r3, Z
    734c:	b0 fe       	sbrs	r11, 0
    734e:	03 c0       	rjmp	.+6      	; 0x7356 <MenuPrepareStyle()+0x74>
    7350:	c1 01       	movw	r24, r2
    7352:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <DisplayClean(unsigned int)>
    7356:	b1 fe       	sbrs	r11, 1
    7358:	11 c0       	rjmp	.+34     	; 0x737c <MenuPrepareStyle()+0x9a>
    735a:	b1 01       	movw	r22, r2
    735c:	81 e2       	ldi	r24, 0x21	; 33
    735e:	9c e0       	ldi	r25, 0x0C	; 12
    7360:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7364:	86 01       	movw	r16, r12
    7366:	04 0d       	add	r16, r4
    7368:	15 1d       	adc	r17, r5
    736a:	94 01       	movw	r18, r8
    736c:	26 0d       	add	r18, r6
    736e:	37 1d       	adc	r19, r7
    7370:	a6 01       	movw	r20, r12
    7372:	b4 01       	movw	r22, r8
    7374:	81 e2       	ldi	r24, 0x21	; 33
    7376:	9c e0       	ldi	r25, 0x0C	; 12
    7378:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    737c:	b2 fe       	sbrs	r11, 2
    737e:	30 c0       	rjmp	.+96     	; 0x73e0 <MenuPrepareStyle()+0xfe>
    7380:	70 e0       	ldi	r23, 0x00	; 0
    7382:	60 e0       	ldi	r22, 0x00	; 0
    7384:	81 e2       	ldi	r24, 0x21	; 33
    7386:	9c e0       	ldi	r25, 0x0C	; 12
    7388:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    738c:	b1 2c       	mov	r11, r1
    738e:	a1 2c       	mov	r10, r1
    7390:	4c 0c       	add	r4, r12
    7392:	5d 1c       	adc	r5, r13
    7394:	14 01       	movw	r2, r8
    7396:	26 0c       	add	r2, r6
    7398:	37 1c       	adc	r3, r7
    739a:	82 01       	movw	r16, r4
    739c:	0a 19       	sub	r16, r10
    739e:	1b 09       	sbc	r17, r11
    73a0:	91 01       	movw	r18, r2
    73a2:	2a 19       	sub	r18, r10
    73a4:	3b 09       	sbc	r19, r11
    73a6:	b4 01       	movw	r22, r8
    73a8:	6a 0d       	add	r22, r10
    73aa:	7b 1d       	adc	r23, r11
    73ac:	a6 01       	movw	r20, r12
    73ae:	81 e2       	ldi	r24, 0x21	; 33
    73b0:	9c e0       	ldi	r25, 0x0C	; 12
    73b2:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    73b6:	93 01       	movw	r18, r6
    73b8:	2a 19       	sub	r18, r10
    73ba:	3b 09       	sbc	r19, r11
    73bc:	a6 01       	movw	r20, r12
    73be:	49 5e       	subi	r20, 0xE9	; 233
    73c0:	5f 4f       	sbci	r21, 0xFF	; 255
    73c2:	b4 01       	movw	r22, r8
    73c4:	81 e2       	ldi	r24, 0x21	; 33
    73c6:	9c e0       	ldi	r25, 0x0C	; 12
    73c8:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    73cc:	8f ef       	ldi	r24, 0xFF	; 255
    73ce:	a8 1a       	sub	r10, r24
    73d0:	b8 0a       	sbc	r11, r24
    73d2:	ef ef       	ldi	r30, 0xFF	; 255
    73d4:	ce 1a       	sub	r12, r30
    73d6:	de 0a       	sbc	r13, r30
    73d8:	f4 e0       	ldi	r31, 0x04	; 4
    73da:	af 16       	cp	r10, r31
    73dc:	b1 04       	cpc	r11, r1
    73de:	e9 f6       	brne	.-70     	; 0x739a <MenuPrepareStyle()+0xb8>
    73e0:	f7 01       	movw	r30, r14
    73e2:	e8 52       	subi	r30, 0x28	; 40
    73e4:	fd 4f       	sbci	r31, 0xFD	; 253
    73e6:	25 91       	lpm	r18, Z+
    73e8:	34 91       	lpm	r19, Z
    73ea:	f7 01       	movw	r30, r14
    73ec:	eb 53       	subi	r30, 0x3B	; 59
    73ee:	fd 4f       	sbci	r31, 0xFD	; 253
    73f0:	e4 91       	lpm	r30, Z
    73f2:	40 e0       	ldi	r20, 0x00	; 0
    73f4:	70 e0       	ldi	r23, 0x00	; 0
    73f6:	60 e0       	ldi	r22, 0x00	; 0
    73f8:	8e 2f       	mov	r24, r30
    73fa:	90 e0       	ldi	r25, 0x00	; 0
    73fc:	f9 01       	movw	r30, r18
    73fe:	19 95       	eicall
    7400:	0f 90       	pop	r0
    7402:	df 91       	pop	r29
    7404:	cf 91       	pop	r28
    7406:	1f 91       	pop	r17
    7408:	0f 91       	pop	r16
    740a:	ff 90       	pop	r15
    740c:	ef 90       	pop	r14
    740e:	df 90       	pop	r13
    7410:	cf 90       	pop	r12
    7412:	bf 90       	pop	r11
    7414:	af 90       	pop	r10
    7416:	9f 90       	pop	r9
    7418:	8f 90       	pop	r8
    741a:	7f 90       	pop	r7
    741c:	6f 90       	pop	r6
    741e:	5f 90       	pop	r5
    7420:	4f 90       	pop	r4
    7422:	3f 90       	pop	r3
    7424:	2f 90       	pop	r2
    7426:	08 95       	ret

00007428 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    7428:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    742c:	88 23       	and	r24, r24
    742e:	29 f0       	breq	.+10     	; 0x743a <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    7430:	81 50       	subi	r24, 0x01	; 1
    7432:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <MenuHistoryIndex>
    7436:	0c 94 71 39 	jmp	0x72e2	; 0x72e2 <MenuPrepareStyle()>
    743a:	08 95       	ret

0000743c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    743c:	20 91 dc 09 	lds	r18, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    7440:	2a 30       	cpi	r18, 0x0A	; 10
    7442:	70 f4       	brcc	.+28     	; 0x7460 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    7444:	2f 5f       	subi	r18, 0xFF	; 255
    7446:	20 93 dc 09 	sts	0x09DC, r18	; 0x8009dc <MenuHistoryIndex>
    744a:	30 e0       	ldi	r19, 0x00	; 0
    744c:	f9 01       	movw	r30, r18
    744e:	e9 51       	subi	r30, 0x19	; 25
    7450:	f6 4f       	sbci	r31, 0xF6	; 246
    7452:	80 83       	st	Z, r24
    7454:	23 52       	subi	r18, 0x23	; 35
    7456:	36 4f       	sbci	r19, 0xF6	; 246
    7458:	f9 01       	movw	r30, r18
    745a:	60 83       	st	Z, r22
    745c:	0c 94 71 39 	jmp	0x72e2	; 0x72e2 <MenuPrepareStyle()>
    7460:	08 95       	ret

00007462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>:
_Z19MenuHistoryPrevMenujjh():
    7462:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    7466:	88 23       	and	r24, r24
    7468:	29 f0       	breq	.+10     	; 0x7474 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]+0x12>
    746a:	81 50       	subi	r24, 0x01	; 1
    746c:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <MenuHistoryIndex>
    7470:	0c 94 71 39 	jmp	0x72e2	; 0x72e2 <MenuPrepareStyle()>
    7474:	08 95       	ret

00007476 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    7476:	86 2f       	mov	r24, r22
    7478:	0e 94 e7 8c 	call	0x119ce	; 0x119ce <tds_set_clear_wrom_id(unsigned char)>
    747c:	0c 94 31 3a 	jmp	0x7462	; 0x7462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

00007480 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    7480:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <dialog_save_string_function>
    7484:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <dialog_save_string_function+0x1>
    7488:	19 95       	eicall
    748a:	0c 94 31 3a 	jmp	0x7462	; 0x7462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

0000748e <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    748e:	1f 93       	push	r17
    7490:	cf 93       	push	r28
    7492:	df 93       	push	r29
    7494:	ec 01       	movw	r28, r24
    7496:	14 2f       	mov	r17, r20
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	80 e0       	ldi	r24, 0x00	; 0
    749c:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    74a0:	ab 01       	movw	r20, r22
    74a2:	bc 01       	movw	r22, r24
    74a4:	85 e1       	ldi	r24, 0x15	; 21
    74a6:	8c 9f       	mul	r24, r28
    74a8:	f0 01       	movw	r30, r0
    74aa:	8d 9f       	mul	r24, r29
    74ac:	f0 0d       	add	r31, r0
    74ae:	11 24       	eor	r1, r1
    74b0:	e6 5c       	subi	r30, 0xC6	; 198
    74b2:	f5 4f       	sbci	r31, 0xF5	; 245
    74b4:	03 88       	ldd	r0, Z+19	; 0x13
    74b6:	f4 89       	ldd	r31, Z+20	; 0x14
    74b8:	e0 2d       	mov	r30, r0
    74ba:	21 2f       	mov	r18, r17
    74bc:	ce 01       	movw	r24, r28
    74be:	19 95       	eicall
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	0c 94 31 3a 	jmp	0x7462	; 0x7462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

000074ca <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    74ca:	80 91 39 0a 	lds	r24, 0x0A39	; 0x800a39 <dialog_yes_args1>
    74ce:	e0 91 da 09 	lds	r30, 0x09DA	; 0x8009da <dialog_yes_function>
    74d2:	f0 91 db 09 	lds	r31, 0x09DB	; 0x8009db <dialog_yes_function+0x1>
    74d6:	40 e0       	ldi	r20, 0x00	; 0
    74d8:	70 e0       	ldi	r23, 0x00	; 0
    74da:	60 e0       	ldi	r22, 0x00	; 0
    74dc:	90 e0       	ldi	r25, 0x00	; 0
    74de:	19 95       	eicall
    74e0:	0c 94 31 3a 	jmp	0x7462	; 0x7462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

000074e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>:
_Z19MenuHistoryNextMenujjh():
    74e4:	20 91 dc 09 	lds	r18, 0x09DC	; 0x8009dc <MenuHistoryIndex>
    74e8:	2a 30       	cpi	r18, 0x0A	; 10
    74ea:	70 f4       	brcc	.+28     	; 0x7508 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]+0x24>
    74ec:	2f 5f       	subi	r18, 0xFF	; 255
    74ee:	20 93 dc 09 	sts	0x09DC, r18	; 0x8009dc <MenuHistoryIndex>
    74f2:	30 e0       	ldi	r19, 0x00	; 0
    74f4:	f9 01       	movw	r30, r18
    74f6:	e9 51       	subi	r30, 0x19	; 25
    74f8:	f6 4f       	sbci	r31, 0xF6	; 246
    74fa:	80 83       	st	Z, r24
    74fc:	23 52       	subi	r18, 0x23	; 35
    74fe:	36 4f       	sbci	r19, 0xF6	; 246
    7500:	f9 01       	movw	r30, r18
    7502:	60 83       	st	Z, r22
    7504:	0c 94 71 39 	jmp	0x72e2	; 0x72e2 <MenuPrepareStyle()>
    7508:	08 95       	ret

0000750a <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    750a:	1f 93       	push	r17
    750c:	cf 93       	push	r28
    750e:	df 93       	push	r29
    7510:	c8 2f       	mov	r28, r24
    7512:	16 2f       	mov	r17, r22
    7514:	70 e0       	ldi	r23, 0x00	; 0
    7516:	60 e0       	ldi	r22, 0x00	; 0
    7518:	86 e6       	ldi	r24, 0x66	; 102
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    7520:	81 2f       	mov	r24, r17
    7522:	0e 94 3b 8c 	call	0x11876	; 0x11876 <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7526:	25 e1       	ldi	r18, 0x15	; 21
    7528:	c2 9f       	mul	r28, r18
    752a:	e0 01       	movw	r28, r0
    752c:	11 24       	eor	r1, r1
    752e:	c6 5c       	subi	r28, 0xC6	; 198
    7530:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_periodjjh():
    7532:	bc 01       	movw	r22, r24
    7534:	99 0f       	add	r25, r25
    7536:	88 0b       	sbc	r24, r24
    7538:	99 0b       	sbc	r25, r25
    753a:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    753e:	68 83       	st	Y, r22
    7540:	79 83       	std	Y+1, r23	; 0x01
    7542:	8a 83       	std	Y+2, r24	; 0x02
    7544:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7546:	80 e0       	ldi	r24, 0x00	; 0
    7548:	90 e0       	ldi	r25, 0x00	; 0
    754a:	a0 e8       	ldi	r26, 0x80	; 128
    754c:	bf e3       	ldi	r27, 0x3F	; 63
    754e:	88 87       	std	Y+8, r24	; 0x08
    7550:	99 87       	std	Y+9, r25	; 0x09
    7552:	aa 87       	std	Y+10, r26	; 0x0a
    7554:	bb 87       	std	Y+11, r27	; 0x0b
    7556:	40 e0       	ldi	r20, 0x00	; 0
    7558:	50 e0       	ldi	r21, 0x00	; 0
    755a:	6f e7       	ldi	r22, 0x7F	; 127
    755c:	73 e4       	ldi	r23, 0x43	; 67
    755e:	4c 83       	std	Y+4, r20	; 0x04
    7560:	5d 83       	std	Y+5, r21	; 0x05
    7562:	6e 83       	std	Y+6, r22	; 0x06
    7564:	7f 83       	std	Y+7, r23	; 0x07
    7566:	8e 87       	std	Y+14, r24	; 0x0e
    7568:	9f 87       	std	Y+15, r25	; 0x0f
    756a:	a8 8b       	std	Y+16, r26	; 0x10
    756c:	b9 8b       	std	Y+17, r27	; 0x11
    756e:	81 e0       	ldi	r24, 0x01	; 1
    7570:	8d 87       	std	Y+13, r24	; 0x0d
    7572:	1a 8b       	std	Y+18, r17	; 0x12
    7574:	1c 86       	std	Y+12, r1	; 0x0c
    7576:	87 e5       	ldi	r24, 0x57	; 87
    7578:	96 e3       	ldi	r25, 0x36	; 54
    757a:	9c 8b       	std	Y+20, r25	; 0x14
    757c:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    757e:	df 91       	pop	r29
    7580:	cf 91       	pop	r28
    7582:	1f 91       	pop	r17
    7584:	08 95       	ret

00007586 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    7586:	1f 93       	push	r17
    7588:	cf 93       	push	r28
    758a:	df 93       	push	r29
    758c:	c8 2f       	mov	r28, r24
    758e:	16 2f       	mov	r17, r22
    7590:	70 e0       	ldi	r23, 0x00	; 0
    7592:	60 e0       	ldi	r22, 0x00	; 0
    7594:	86 e6       	ldi	r24, 0x66	; 102
    7596:	90 e0       	ldi	r25, 0x00	; 0
    7598:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    759c:	81 2f       	mov	r24, r17
    759e:	0e 94 fc 8b 	call	0x117f8	; 0x117f8 <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    75a2:	25 e1       	ldi	r18, 0x15	; 21
    75a4:	c2 9f       	mul	r28, r18
    75a6:	e0 01       	movw	r28, r0
    75a8:	11 24       	eor	r1, r1
    75aa:	c6 5c       	subi	r28, 0xC6	; 198
    75ac:	d5 4f       	sbci	r29, 0xF5	; 245
_Z27display_menu_tds_set_offsetjjh():
    75ae:	bc 01       	movw	r22, r24
    75b0:	99 0f       	add	r25, r25
    75b2:	88 0b       	sbc	r24, r24
    75b4:	99 0b       	sbc	r25, r25
    75b6:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    75ba:	20 e0       	ldi	r18, 0x00	; 0
    75bc:	30 e0       	ldi	r19, 0x00	; 0
    75be:	4a e7       	ldi	r20, 0x7A	; 122
    75c0:	54 e4       	ldi	r21, 0x44	; 68
    75c2:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    75c6:	68 83       	st	Y, r22
    75c8:	79 83       	std	Y+1, r23	; 0x01
    75ca:	8a 83       	std	Y+2, r24	; 0x02
    75cc:	9b 83       	std	Y+3, r25	; 0x03
    75ce:	80 e0       	ldi	r24, 0x00	; 0
    75d0:	90 e0       	ldi	r25, 0x00	; 0
    75d2:	a0 e2       	ldi	r26, 0x20	; 32
    75d4:	b1 ec       	ldi	r27, 0xC1	; 193
    75d6:	88 87       	std	Y+8, r24	; 0x08
    75d8:	99 87       	std	Y+9, r25	; 0x09
    75da:	aa 87       	std	Y+10, r26	; 0x0a
    75dc:	bb 87       	std	Y+11, r27	; 0x0b
    75de:	80 e0       	ldi	r24, 0x00	; 0
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	a0 e2       	ldi	r26, 0x20	; 32
    75e4:	b1 e4       	ldi	r27, 0x41	; 65
    75e6:	8c 83       	std	Y+4, r24	; 0x04
    75e8:	9d 83       	std	Y+5, r25	; 0x05
    75ea:	ae 83       	std	Y+6, r26	; 0x06
    75ec:	bf 83       	std	Y+7, r27	; 0x07
    75ee:	8d ec       	ldi	r24, 0xCD	; 205
    75f0:	9c ec       	ldi	r25, 0xCC	; 204
    75f2:	ac ec       	ldi	r26, 0xCC	; 204
    75f4:	bd e3       	ldi	r27, 0x3D	; 61
    75f6:	8e 87       	std	Y+14, r24	; 0x0e
    75f8:	9f 87       	std	Y+15, r25	; 0x0f
    75fa:	a8 8b       	std	Y+16, r26	; 0x10
    75fc:	b9 8b       	std	Y+17, r27	; 0x11
    75fe:	1d 86       	std	Y+13, r1	; 0x0d
    7600:	1a 8b       	std	Y+18, r17	; 0x12
    7602:	1c 86       	std	Y+12, r1	; 0x0c
    7604:	8e e3       	ldi	r24, 0x3E	; 62
    7606:	96 e3       	ldi	r25, 0x36	; 54
    7608:	9c 8b       	std	Y+20, r25	; 0x14
    760a:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    760c:	df 91       	pop	r29
    760e:	cf 91       	pop	r28
    7610:	1f 91       	pop	r17
    7612:	08 95       	ret

00007614 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
    7614:	70 e0       	ldi	r23, 0x00	; 0
    7616:	60 e0       	ldi	r22, 0x00	; 0
    7618:	8b e9       	ldi	r24, 0x9B	; 155
    761a:	90 e0       	ldi	r25, 0x00	; 0
    761c:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>

00007620 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
    7620:	0f 93       	push	r16
    7622:	1f 93       	push	r17
    7624:	cf 93       	push	r28
    7626:	df 93       	push	r29
    7628:	cd b7       	in	r28, 0x3d	; 61
    762a:	de b7       	in	r29, 0x3e	; 62
    762c:	a0 97       	sbiw	r28, 0x20	; 32
    762e:	0f b6       	in	r0, 0x3f	; 63
    7630:	f8 94       	cli
    7632:	de bf       	out	0x3e, r29	; 62
    7634:	0f be       	out	0x3f, r0	; 63
    7636:	cd bf       	out	0x3d, r28	; 61
    7638:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <Global_HWwirenum>
    763c:	80 e0       	ldi	r24, 0x00	; 0
    763e:	0e 94 ac 8d 	call	0x11b58	; 0x11b58 <one_hw_search_device(unsigned char)>
    7642:	0e 94 66 8c 	call	0x118cc	; 0x118cc <tds_update_associate()>
    7646:	70 e0       	ldi	r23, 0x00	; 0
    7648:	60 e0       	ldi	r22, 0x00	; 0
    764a:	88 e6       	ldi	r24, 0x68	; 104
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    7652:	80 91 ad 11 	lds	r24, 0x11AD	; 0x8011ad <Global_HWwirenum>
    7656:	1f 92       	push	r1
    7658:	8f 93       	push	r24
    765a:	84 ef       	ldi	r24, 0xF4	; 244
    765c:	92 e0       	ldi	r25, 0x02	; 2
    765e:	9f 93       	push	r25
    7660:	8f 93       	push	r24
    7662:	8e 01       	movw	r16, r28
    7664:	0f 5f       	subi	r16, 0xFF	; 255
    7666:	1f 4f       	sbci	r17, 0xFF	; 255
    7668:	1f 93       	push	r17
    766a:	0f 93       	push	r16
    766c:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7670:	b8 01       	movw	r22, r16
    7672:	89 e1       	ldi	r24, 0x19	; 25
    7674:	9a e0       	ldi	r25, 0x0A	; 10
    7676:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    767a:	0f 90       	pop	r0
    767c:	0f 90       	pop	r0
    767e:	0f 90       	pop	r0
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	0f 90       	pop	r0
    7686:	a0 96       	adiw	r28, 0x20	; 32
    7688:	0f b6       	in	r0, 0x3f	; 63
    768a:	f8 94       	cli
    768c:	de bf       	out	0x3e, r29	; 62
    768e:	0f be       	out	0x3f, r0	; 63
    7690:	cd bf       	out	0x3d, r28	; 61
    7692:	df 91       	pop	r29
    7694:	cf 91       	pop	r28
    7696:	1f 91       	pop	r17
    7698:	0f 91       	pop	r16
    769a:	08 95       	ret

0000769c <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    769c:	cf 93       	push	r28
    769e:	8b e0       	ldi	r24, 0x0B	; 11
    76a0:	48 9f       	mul	r20, r24
    76a2:	f0 01       	movw	r30, r0
    76a4:	11 24       	eor	r1, r1
    76a6:	e5 59       	subi	r30, 0x95	; 149
    76a8:	fe 4e       	sbci	r31, 0xEE	; 238
    76aa:	62 85       	ldd	r22, Z+10	; 0x0a
    76ac:	6f 3f       	cpi	r22, 0xFF	; 255
    76ae:	b1 f4       	brne	.+44     	; 0x76dc <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    76b0:	c4 2f       	mov	r28, r20
    76b2:	70 e0       	ldi	r23, 0x00	; 0
    76b4:	60 e0       	ldi	r22, 0x00	; 0
    76b6:	84 e6       	ldi	r24, 0x64	; 100
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    76be:	8a e6       	ldi	r24, 0x6A	; 106
    76c0:	96 e3       	ldi	r25, 0x36	; 54
    76c2:	90 93 db 09 	sts	0x09DB, r25	; 0x8009db <dialog_yes_function+0x1>
    76c6:	80 93 da 09 	sts	0x09DA, r24	; 0x8009da <dialog_yes_function>
    76ca:	c0 93 39 0a 	sts	0x0A39, r28	; 0x800a39 <dialog_yes_args1>
    76ce:	64 e3       	ldi	r22, 0x34	; 52
    76d0:	7a e5       	ldi	r23, 0x5A	; 90
    76d2:	89 e1       	ldi	r24, 0x19	; 25
    76d4:	9a e0       	ldi	r25, 0x0A	; 10
    76d6:	cf 91       	pop	r28
    76d8:	0c 94 8a e0 	jmp	0x1c114	; 0x1c114 <strcpy_P>
    76dc:	70 e0       	ldi	r23, 0x00	; 0
    76de:	84 e0       	ldi	r24, 0x04	; 4
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	cf 91       	pop	r28
    76e4:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>

000076e8 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>:
_Z26display_element_set_stringPchhPFvjjhE():
    76e8:	0f 93       	push	r16
    76ea:	1f 93       	push	r17
    76ec:	cf 93       	push	r28
    76ee:	df 93       	push	r29
    76f0:	06 2f       	mov	r16, r22
    76f2:	14 2f       	mov	r17, r20
    76f4:	e9 01       	movw	r28, r18
    76f6:	bc 01       	movw	r22, r24
    76f8:	89 ef       	ldi	r24, 0xF9	; 249
    76fa:	99 e0       	ldi	r25, 0x09	; 9
    76fc:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    7700:	00 93 f8 09 	sts	0x09F8, r16	; 0x8009f8 <dialog_set_string_max_length>
    7704:	10 93 f7 09 	sts	0x09F7, r17	; 0x8009f7 <dialog_set_string_args>
    7708:	d0 93 f5 09 	sts	0x09F5, r29	; 0x8009f5 <dialog_save_string_function+0x1>
    770c:	c0 93 f4 09 	sts	0x09F4, r28	; 0x8009f4 <dialog_save_string_function>
    7710:	df 91       	pop	r29
    7712:	cf 91       	pop	r28
    7714:	1f 91       	pop	r17
    7716:	0f 91       	pop	r16
    7718:	08 95       	ret

0000771a <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    771a:	1f 93       	push	r17
    771c:	cf 93       	push	r28
    771e:	df 93       	push	r29
    7720:	00 d0       	rcall	.+0      	; 0x7722 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    7722:	00 d0       	rcall	.+0      	; 0x7724 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    7724:	00 d0       	rcall	.+0      	; 0x7726 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    7726:	1f 92       	push	r1
    7728:	cd b7       	in	r28, 0x3d	; 61
    772a:	de b7       	in	r29, 0x3e	; 62
    772c:	16 2f       	mov	r17, r22
    772e:	be 01       	movw	r22, r28
    7730:	6f 5f       	subi	r22, 0xFF	; 255
    7732:	7f 4f       	sbci	r23, 0xFF	; 255
    7734:	81 2f       	mov	r24, r17
    7736:	0e 94 86 8b 	call	0x1170c	; 0x1170c <tds_get_name(unsigned char, char*)>
    773a:	70 e0       	ldi	r23, 0x00	; 0
    773c:	60 e0       	ldi	r22, 0x00	; 0
    773e:	87 e6       	ldi	r24, 0x67	; 103
    7740:	90 e0       	ldi	r25, 0x00	; 0
    7742:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    7746:	29 eb       	ldi	r18, 0xB9	; 185
    7748:	3b e3       	ldi	r19, 0x3B	; 59
    774a:	41 2f       	mov	r20, r17
    774c:	68 e0       	ldi	r22, 0x08	; 8
    774e:	ce 01       	movw	r24, r28
    7750:	01 96       	adiw	r24, 0x01	; 1
    7752:	0e 94 74 3b 	call	0x76e8	; 0x76e8 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7756:	2a 96       	adiw	r28, 0x0a	; 10
    7758:	0f b6       	in	r0, 0x3f	; 63
    775a:	f8 94       	cli
    775c:	de bf       	out	0x3e, r29	; 62
    775e:	0f be       	out	0x3f, r0	; 63
    7760:	cd bf       	out	0x3d, r28	; 61
    7762:	df 91       	pop	r29
    7764:	cf 91       	pop	r28
    7766:	1f 91       	pop	r17
    7768:	08 95       	ret

0000776a <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    776a:	69 ef       	ldi	r22, 0xF9	; 249
    776c:	79 e0       	ldi	r23, 0x09	; 9
    776e:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <strcpy>

00007772 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    7772:	cf 93       	push	r28
    7774:	df 93       	push	r29
    7776:	00 d0       	rcall	.+0      	; 0x7778 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    7778:	00 d0       	rcall	.+0      	; 0x777a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    777a:	00 d0       	rcall	.+0      	; 0x777c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    777c:	1f 92       	push	r1
    777e:	cd b7       	in	r28, 0x3d	; 61
    7780:	de b7       	in	r29, 0x3e	; 62
    7782:	ce 01       	movw	r24, r28
    7784:	01 96       	adiw	r24, 0x01	; 1
    7786:	0e 94 b5 3b 	call	0x776a	; 0x776a <display_element_get_string(char*)>
    778a:	89 81       	ldd	r24, Y+1	; 0x01
    778c:	88 23       	and	r24, r24
    778e:	39 f0       	breq	.+14     	; 0x779e <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    7790:	be 01       	movw	r22, r28
    7792:	6f 5f       	subi	r22, 0xFF	; 255
    7794:	7f 4f       	sbci	r23, 0xFF	; 255
    7796:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <dialog_set_string_args>
    779a:	0e 94 a9 8b 	call	0x11752	; 0x11752 <tds_set_name(unsigned char, char*)>
    779e:	2a 96       	adiw	r28, 0x0a	; 10
    77a0:	0f b6       	in	r0, 0x3f	; 63
    77a2:	f8 94       	cli
    77a4:	de bf       	out	0x3e, r29	; 62
    77a6:	0f be       	out	0x3f, r0	; 63
    77a8:	cd bf       	out	0x3d, r28	; 61
    77aa:	df 91       	pop	r29
    77ac:	cf 91       	pop	r28
    77ae:	08 95       	ret

000077b0 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    77b0:	e9 ef       	ldi	r30, 0xF9	; 249
    77b2:	f9 e0       	ldi	r31, 0x09	; 9
    77b4:	01 90       	ld	r0, Z+
    77b6:	00 20       	and	r0, r0
    77b8:	e9 f7       	brne	.-6      	; 0x77b4 <display_element_set_string_add_char(char)+0x4>
    77ba:	ea 5f       	subi	r30, 0xFA	; 250
    77bc:	f9 40       	sbci	r31, 0x09	; 9
    77be:	ff 27       	eor	r31, r31
    77c0:	20 91 f8 09 	lds	r18, 0x09F8	; 0x8009f8 <dialog_set_string_max_length>
    77c4:	21 50       	subi	r18, 0x01	; 1
    77c6:	33 0b       	sbc	r19, r19
    77c8:	e2 17       	cp	r30, r18
    77ca:	f3 07       	cpc	r31, r19
    77cc:	24 f4       	brge	.+8      	; 0x77d6 <display_element_set_string_add_char(char)+0x26>
    77ce:	e7 50       	subi	r30, 0x07	; 7
    77d0:	f6 4f       	sbci	r31, 0xF6	; 246
    77d2:	80 83       	st	Z, r24
    77d4:	11 82       	std	Z+1, r1	; 0x01
    77d6:	08 95       	ret

000077d8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    77d8:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <dialog_set_string_keyboard_type>
    77dc:	91 11       	cpse	r25, r1
    77de:	07 c0       	rjmp	.+14     	; 0x77ee <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    77e0:	e4 2f       	mov	r30, r20
    77e2:	f0 e0       	ldi	r31, 0x00	; 0
    77e4:	e5 5b       	subi	r30, 0xB5	; 181
    77e6:	f7 4a       	sbci	r31, 0xA7	; 167
    77e8:	84 91       	lpm	r24, Z
    77ea:	0c 94 d8 3b 	jmp	0x77b0	; 0x77b0 <display_element_set_string_add_char(char)>
    77ee:	91 30       	cpi	r25, 0x01	; 1
    77f0:	29 f4       	brne	.+10     	; 0x77fc <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    77f2:	e4 2f       	mov	r30, r20
    77f4:	f0 e0       	ldi	r31, 0x00	; 0
    77f6:	ef 5c       	subi	r30, 0xCF	; 207
    77f8:	f7 4a       	sbci	r31, 0xA7	; 167
    77fa:	f6 cf       	rjmp	.-20     	; 0x77e8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    77fc:	92 30       	cpi	r25, 0x02	; 2
    77fe:	a9 f7       	brne	.-22     	; 0x77ea <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    7800:	e4 2f       	mov	r30, r20
    7802:	f0 e0       	ldi	r31, 0x00	; 0
    7804:	e9 5e       	subi	r30, 0xE9	; 233
    7806:	f7 4a       	sbci	r31, 0xA7	; 167
    7808:	ef cf       	rjmp	.-34     	; 0x77e8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

0000780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    780a:	6f 92       	push	r6
    780c:	7f 92       	push	r7
    780e:	8f 92       	push	r8
    7810:	9f 92       	push	r9
    7812:	af 92       	push	r10
    7814:	bf 92       	push	r11
    7816:	cf 92       	push	r12
    7818:	df 92       	push	r13
    781a:	ef 92       	push	r14
    781c:	ff 92       	push	r15
    781e:	0f 93       	push	r16
    7820:	1f 93       	push	r17
    7822:	cf 93       	push	r28
    7824:	df 93       	push	r29
    7826:	00 d0       	rcall	.+0      	; 0x7828 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    7828:	00 d0       	rcall	.+0      	; 0x782a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    782e:	3c 01       	movw	r6, r24
    7830:	5b 01       	movw	r10, r22
    7832:	4a 01       	movw	r8, r20
    7834:	d2 2e       	mov	r13, r18
    7836:	6c 2d       	mov	r22, r12
    7838:	81 e2       	ldi	r24, 0x21	; 33
    783a:	9c e0       	ldi	r25, 0x0C	; 12
    783c:	0e 94 06 96 	call	0x12c0c	; 0x12c0c <LCDWIKI_GUI::Set_Text_Mode(bool)>
    7840:	6d 2d       	mov	r22, r13
    7842:	81 e2       	ldi	r24, 0x21	; 33
    7844:	9c e0       	ldi	r25, 0x0C	; 12
    7846:	0e 94 03 96 	call	0x12c06	; 0x12c06 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    784a:	b8 01       	movw	r22, r16
    784c:	81 e2       	ldi	r24, 0x21	; 33
    784e:	9c e0       	ldi	r25, 0x0C	; 12
    7850:	0e 94 fb 95 	call	0x12bf6	; 0x12bf6 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    7854:	b7 01       	movw	r22, r14
    7856:	81 e2       	ldi	r24, 0x21	; 33
    7858:	9c e0       	ldi	r25, 0x0C	; 12
    785a:	0e 94 ff 95 	call	0x12bfe	; 0x12bfe <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    785e:	b3 01       	movw	r22, r6
    7860:	ce 01       	movw	r24, r28
    7862:	01 96       	adiw	r24, 0x01	; 1
    7864:	0e 94 18 da 	call	0x1b430	; 0x1b430 <String::String(char const*)>
    7868:	94 01       	movw	r18, r8
    786a:	a5 01       	movw	r20, r10
    786c:	be 01       	movw	r22, r28
    786e:	6f 5f       	subi	r22, 0xFF	; 255
    7870:	7f 4f       	sbci	r23, 0xFF	; 255
    7872:	81 e2       	ldi	r24, 0x21	; 33
    7874:	9c e0       	ldi	r25, 0x0C	; 12
    7876:	0e 94 8c 97 	call	0x12f18	; 0x12f18 <LCDWIKI_GUI::Print_String(String, int, int)>
    787a:	ce 01       	movw	r24, r28
    787c:	01 96       	adiw	r24, 0x01	; 1
    787e:	0e 94 a9 d9 	call	0x1b352	; 0x1b352 <String::~String()>
    7882:	26 96       	adiw	r28, 0x06	; 6
    7884:	0f b6       	in	r0, 0x3f	; 63
    7886:	f8 94       	cli
    7888:	de bf       	out	0x3e, r29	; 62
    788a:	0f be       	out	0x3f, r0	; 63
    788c:	cd bf       	out	0x3d, r28	; 61
    788e:	df 91       	pop	r29
    7890:	cf 91       	pop	r28
    7892:	1f 91       	pop	r17
    7894:	0f 91       	pop	r16
    7896:	ff 90       	pop	r15
    7898:	ef 90       	pop	r14
    789a:	df 90       	pop	r13
    789c:	cf 90       	pop	r12
    789e:	bf 90       	pop	r11
    78a0:	af 90       	pop	r10
    78a2:	9f 90       	pop	r9
    78a4:	8f 90       	pop	r8
    78a6:	7f 90       	pop	r7
    78a8:	6f 90       	pop	r6
    78aa:	08 95       	ret

000078ac <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
    78ac:	cf 92       	push	r12
    78ae:	ef 92       	push	r14
    78b0:	ff 92       	push	r15
    78b2:	0f 93       	push	r16
    78b4:	1f 93       	push	r17
    78b6:	ab 01       	movw	r20, r22
    78b8:	c1 2c       	mov	r12, r1
    78ba:	ee 24       	eor	r14, r14
    78bc:	ea 94       	dec	r14
    78be:	fe 2c       	mov	r15, r14
    78c0:	10 e0       	ldi	r17, 0x00	; 0
    78c2:	00 e0       	ldi	r16, 0x00	; 0
    78c4:	22 e0       	ldi	r18, 0x02	; 2
    78c6:	bc 01       	movw	r22, r24
    78c8:	89 e1       	ldi	r24, 0x19	; 25
    78ca:	9a e0       	ldi	r25, 0x0A	; 10
    78cc:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    78d0:	1f 91       	pop	r17
    78d2:	0f 91       	pop	r16
    78d4:	ff 90       	pop	r15
    78d6:	ef 90       	pop	r14
    78d8:	cf 90       	pop	r12
    78da:	08 95       	ret

000078dc <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
    78dc:	af 92       	push	r10
    78de:	bf 92       	push	r11
    78e0:	cf 92       	push	r12
    78e2:	df 92       	push	r13
    78e4:	ef 92       	push	r14
    78e6:	ff 92       	push	r15
    78e8:	0f 93       	push	r16
    78ea:	1f 93       	push	r17
    78ec:	cf 93       	push	r28
    78ee:	df 93       	push	r29
    78f0:	cd b7       	in	r28, 0x3d	; 61
    78f2:	de b7       	in	r29, 0x3e	; 62
    78f4:	ca 54       	subi	r28, 0x4A	; 74
    78f6:	d1 09       	sbc	r29, r1
    78f8:	0f b6       	in	r0, 0x3f	; 63
    78fa:	f8 94       	cli
    78fc:	de bf       	out	0x3e, r29	; 62
    78fe:	0f be       	out	0x3f, r0	; 63
    7900:	cd bf       	out	0x3d, r28	; 61
    7902:	6c 01       	movw	r12, r24
    7904:	5b 01       	movw	r10, r22
    7906:	be 01       	movw	r22, r28
    7908:	6b 5c       	subi	r22, 0xCB	; 203
    790a:	7f 4f       	sbci	r23, 0xFF	; 255
    790c:	8e 2d       	mov	r24, r14
    790e:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7912:	81 30       	cpi	r24, 0x01	; 1
    7914:	e1 f5       	brne	.+120    	; 0x798e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    7916:	8e e1       	ldi	r24, 0x1E	; 30
    7918:	e8 9e       	mul	r14, r24
    791a:	f0 01       	movw	r30, r0
    791c:	11 24       	eor	r1, r1
    791e:	e2 55       	subi	r30, 0x52	; 82
    7920:	fe 4e       	sbci	r31, 0xEE	; 238
    7922:	65 81       	ldd	r22, Z+5	; 0x05
    7924:	76 81       	ldd	r23, Z+6	; 0x06
    7926:	07 2e       	mov	r0, r23
    7928:	00 0c       	add	r0, r0
    792a:	88 0b       	sbc	r24, r24
    792c:	99 0b       	sbc	r25, r25
    792e:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	4a e7       	ldi	r20, 0x7A	; 122
    7938:	54 e4       	ldi	r21, 0x44	; 68
    793a:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    793e:	8e 01       	movw	r16, r28
    7940:	05 5e       	subi	r16, 0xE5	; 229
    7942:	1f 4f       	sbci	r17, 0xFF	; 255
    7944:	22 e0       	ldi	r18, 0x02	; 2
    7946:	44 e0       	ldi	r20, 0x04	; 4
    7948:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    794c:	69 e0       	ldi	r22, 0x09	; 9
    794e:	78 e0       	ldi	r23, 0x08	; 8
    7950:	c8 01       	movw	r24, r16
    7952:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    7956:	6a ee       	ldi	r22, 0xEA	; 234
    7958:	7a e5       	ldi	r23, 0x5A	; 90
    795a:	ce 01       	movw	r24, r28
    795c:	01 96       	adiw	r24, 0x01	; 1
    795e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7962:	b8 01       	movw	r22, r16
    7964:	ce 01       	movw	r24, r28
    7966:	01 96       	adiw	r24, 0x01	; 1
    7968:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    796c:	a5 01       	movw	r20, r10
    796e:	44 57       	subi	r20, 0x74	; 116
    7970:	5f 4f       	sbci	r21, 0xFF	; 255
    7972:	b6 01       	movw	r22, r12
    7974:	66 5f       	subi	r22, 0xF6	; 246
    7976:	7f 4f       	sbci	r23, 0xFF	; 255
    7978:	c1 2c       	mov	r12, r1
    797a:	ee 24       	eor	r14, r14
    797c:	ea 94       	dec	r14
    797e:	fe 2c       	mov	r15, r14
    7980:	10 e0       	ldi	r17, 0x00	; 0
    7982:	00 e0       	ldi	r16, 0x00	; 0
    7984:	22 e0       	ldi	r18, 0x02	; 2
    7986:	ce 01       	movw	r24, r28
    7988:	01 96       	adiw	r24, 0x01	; 1
    798a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    798e:	c6 5b       	subi	r28, 0xB6	; 182
    7990:	df 4f       	sbci	r29, 0xFF	; 255
    7992:	0f b6       	in	r0, 0x3f	; 63
    7994:	f8 94       	cli
    7996:	de bf       	out	0x3e, r29	; 62
    7998:	0f be       	out	0x3f, r0	; 63
    799a:	cd bf       	out	0x3d, r28	; 61
    799c:	df 91       	pop	r29
    799e:	cf 91       	pop	r28
    79a0:	1f 91       	pop	r17
    79a2:	0f 91       	pop	r16
    79a4:	ff 90       	pop	r15
    79a6:	ef 90       	pop	r14
    79a8:	df 90       	pop	r13
    79aa:	cf 90       	pop	r12
    79ac:	bf 90       	pop	r11
    79ae:	af 90       	pop	r10
    79b0:	08 95       	ret

000079b2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
    79b2:	2f 92       	push	r2
    79b4:	3f 92       	push	r3
    79b6:	4f 92       	push	r4
    79b8:	5f 92       	push	r5
    79ba:	6f 92       	push	r6
    79bc:	7f 92       	push	r7
    79be:	8f 92       	push	r8
    79c0:	9f 92       	push	r9
    79c2:	af 92       	push	r10
    79c4:	bf 92       	push	r11
    79c6:	cf 92       	push	r12
    79c8:	df 92       	push	r13
    79ca:	ef 92       	push	r14
    79cc:	ff 92       	push	r15
    79ce:	0f 93       	push	r16
    79d0:	1f 93       	push	r17
    79d2:	cf 93       	push	r28
    79d4:	df 93       	push	r29
    79d6:	cd b7       	in	r28, 0x3d	; 61
    79d8:	de b7       	in	r29, 0x3e	; 62
    79da:	ca 54       	subi	r28, 0x4A	; 74
    79dc:	d1 09       	sbc	r29, r1
    79de:	0f b6       	in	r0, 0x3f	; 63
    79e0:	f8 94       	cli
    79e2:	de bf       	out	0x3e, r29	; 62
    79e4:	0f be       	out	0x3f, r0	; 63
    79e6:	cd bf       	out	0x3d, r28	; 61
    79e8:	4c 01       	movw	r8, r24
    79ea:	2b 01       	movw	r4, r22
    79ec:	5a 01       	movw	r10, r20
    79ee:	89 01       	movw	r16, r18
    79f0:	de 2c       	mov	r13, r14
    79f2:	70 e0       	ldi	r23, 0x00	; 0
    79f4:	60 e0       	ldi	r22, 0x00	; 0
    79f6:	81 e2       	ldi	r24, 0x21	; 33
    79f8:	9c e0       	ldi	r25, 0x0C	; 12
    79fa:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    79fe:	04 0d       	add	r16, r4
    7a00:	15 1d       	adc	r17, r5
    7a02:	94 01       	movw	r18, r8
    7a04:	2a 0d       	add	r18, r10
    7a06:	3b 1d       	adc	r19, r11
    7a08:	a2 01       	movw	r20, r4
    7a0a:	b4 01       	movw	r22, r8
    7a0c:	81 e2       	ldi	r24, 0x21	; 33
    7a0e:	9c e0       	ldi	r25, 0x0C	; 12
    7a10:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7a14:	be 01       	movw	r22, r28
    7a16:	6b 5c       	subi	r22, 0xCB	; 203
    7a18:	7f 4f       	sbci	r23, 0xFF	; 255
    7a1a:	8e 2d       	mov	r24, r14
    7a1c:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7a20:	12 01       	movw	r2, r4
    7a22:	28 e2       	ldi	r18, 0x28	; 40
    7a24:	22 0e       	add	r2, r18
    7a26:	31 1c       	adc	r3, r1
    7a28:	9e 01       	movw	r18, r28
    7a2a:	25 5e       	subi	r18, 0xE5	; 229
    7a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2e:	59 01       	movw	r10, r18
    7a30:	81 30       	cpi	r24, 0x01	; 1
    7a32:	09 f0       	breq	.+2      	; 0x7a36 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x84>
    7a34:	ca c0       	rjmp	.+404    	; 0x7bca <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    7a36:	00 e1       	ldi	r16, 0x10	; 16
    7a38:	28 e0       	ldi	r18, 0x08	; 8
    7a3a:	ae 01       	movw	r20, r28
    7a3c:	4a 5c       	subi	r20, 0xCA	; 202
    7a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    7a40:	6a e3       	ldi	r22, 0x3A	; 58
    7a42:	ce 01       	movw	r24, r28
    7a44:	01 96       	adiw	r24, 0x01	; 1
    7a46:	3c 01       	movw	r6, r24
    7a48:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    7a4c:	7f 92       	push	r7
    7a4e:	6f 92       	push	r6
    7a50:	8e e0       	ldi	r24, 0x0E	; 14
    7a52:	93 e0       	ldi	r25, 0x03	; 3
    7a54:	9f 93       	push	r25
    7a56:	8f 93       	push	r24
    7a58:	bf 92       	push	r11
    7a5a:	af 92       	push	r10
    7a5c:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7a60:	9a e0       	ldi	r25, 0x0A	; 10
    7a62:	89 0e       	add	r8, r25
    7a64:	91 1c       	adc	r9, r1
    7a66:	a2 01       	movw	r20, r4
    7a68:	4b 5a       	subi	r20, 0xAB	; 171
    7a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    7a6c:	c1 2c       	mov	r12, r1
    7a6e:	ee 24       	eor	r14, r14
    7a70:	ea 94       	dec	r14
    7a72:	fe 2c       	mov	r15, r14
    7a74:	10 e0       	ldi	r17, 0x00	; 0
    7a76:	00 e0       	ldi	r16, 0x00	; 0
    7a78:	21 e0       	ldi	r18, 0x01	; 1
    7a7a:	b4 01       	movw	r22, r8
    7a7c:	c5 01       	movw	r24, r10
    7a7e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7a82:	64 ea       	ldi	r22, 0xA4	; 164
    7a84:	79 e5       	ldi	r23, 0x59	; 89
    7a86:	c3 01       	movw	r24, r6
    7a88:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7a8c:	85 e3       	ldi	r24, 0x35	; 53
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
    7a90:	8c 0f       	add	r24, r28
    7a92:	9d 1f       	adc	r25, r29
    7a94:	0c 96       	adiw	r24, 0x0c	; 12
    7a96:	9f 93       	push	r25
    7a98:	8f 93       	push	r24
    7a9a:	7f 92       	push	r7
    7a9c:	6f 92       	push	r6
    7a9e:	86 e1       	ldi	r24, 0x16	; 22
    7aa0:	93 e0       	ldi	r25, 0x03	; 3
    7aa2:	9f 93       	push	r25
    7aa4:	8f 93       	push	r24
    7aa6:	bf 92       	push	r11
    7aa8:	af 92       	push	r10
    7aaa:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7aae:	22 e0       	ldi	r18, 0x02	; 2
    7ab0:	a1 01       	movw	r20, r2
    7ab2:	b4 01       	movw	r22, r8
    7ab4:	c5 01       	movw	r24, r10
    7ab6:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7aba:	21 96       	adiw	r28, 0x01	; 1
    7abc:	6e ad       	ldd	r22, Y+62	; 0x3e
    7abe:	7f ad       	ldd	r23, Y+63	; 0x3f
    7ac0:	21 97       	sbiw	r28, 0x01	; 1
    7ac2:	07 2e       	mov	r0, r23
    7ac4:	00 0c       	add	r0, r0
    7ac6:	88 0b       	sbc	r24, r24
    7ac8:	99 0b       	sbc	r25, r25
    7aca:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    7ace:	20 e0       	ldi	r18, 0x00	; 0
    7ad0:	30 e0       	ldi	r19, 0x00	; 0
    7ad2:	4a e7       	ldi	r20, 0x7A	; 122
    7ad4:	54 e4       	ldi	r21, 0x44	; 68
    7ad6:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    7ada:	85 01       	movw	r16, r10
    7adc:	22 e0       	ldi	r18, 0x02	; 2
    7ade:	44 e0       	ldi	r20, 0x04	; 4
    7ae0:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    7ae4:	69 e0       	ldi	r22, 0x09	; 9
    7ae6:	78 e0       	ldi	r23, 0x08	; 8
    7ae8:	c5 01       	movw	r24, r10
    7aea:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    7aee:	62 ee       	ldi	r22, 0xE2	; 226
    7af0:	7a e5       	ldi	r23, 0x5A	; 90
    7af2:	c3 01       	movw	r24, r6
    7af4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7af8:	b5 01       	movw	r22, r10
    7afa:	c3 01       	movw	r24, r6
    7afc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    7b00:	a2 01       	movw	r20, r4
    7b02:	44 5c       	subi	r20, 0xC4	; 196
    7b04:	5f 4f       	sbci	r21, 0xFF	; 255
    7b06:	10 e0       	ldi	r17, 0x00	; 0
    7b08:	00 e0       	ldi	r16, 0x00	; 0
    7b0a:	22 e0       	ldi	r18, 0x02	; 2
    7b0c:	b4 01       	movw	r22, r8
    7b0e:	c3 01       	movw	r24, r6
    7b10:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b14:	6a ed       	ldi	r22, 0xDA	; 218
    7b16:	79 e5       	ldi	r23, 0x59	; 89
    7b18:	c3 01       	movw	r24, r6
    7b1a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7b1e:	2a 96       	adiw	r28, 0x0a	; 10
    7b20:	8f ad       	ldd	r24, Y+63	; 0x3f
    7b22:	2a 97       	sbiw	r28, 0x0a	; 10
    7b24:	1f 92       	push	r1
    7b26:	8f 93       	push	r24
    7b28:	7f 92       	push	r7
    7b2a:	6f 92       	push	r6
    7b2c:	8d e1       	ldi	r24, 0x1D	; 29
    7b2e:	93 e0       	ldi	r25, 0x03	; 3
    7b30:	9f 93       	push	r25
    7b32:	8f 93       	push	r24
    7b34:	bf 92       	push	r11
    7b36:	af 92       	push	r10
    7b38:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7b3c:	a2 01       	movw	r20, r4
    7b3e:	4c 59       	subi	r20, 0x9C	; 156
    7b40:	5f 4f       	sbci	r21, 0xFF	; 255
    7b42:	22 e0       	ldi	r18, 0x02	; 2
    7b44:	b4 01       	movw	r22, r8
    7b46:	c5 01       	movw	r24, r10
    7b48:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b4c:	6d e9       	ldi	r22, 0x9D	; 157
    7b4e:	79 e5       	ldi	r23, 0x59	; 89
    7b50:	c3 01       	movw	r24, r6
    7b52:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7b56:	2e e1       	ldi	r18, 0x1E	; 30
    7b58:	d2 9e       	mul	r13, r18
    7b5a:	f0 01       	movw	r30, r0
    7b5c:	11 24       	eor	r1, r1
    7b5e:	e2 55       	subi	r30, 0x52	; 82
    7b60:	fe 4e       	sbci	r31, 0xEE	; 238
    7b62:	83 8d       	ldd	r24, Z+27	; 0x1b
    7b64:	1f 92       	push	r1
    7b66:	8f 93       	push	r24
    7b68:	7f 92       	push	r7
    7b6a:	6f 92       	push	r6
    7b6c:	85 e2       	ldi	r24, 0x25	; 37
    7b6e:	93 e0       	ldi	r25, 0x03	; 3
    7b70:	9f 93       	push	r25
    7b72:	8f 93       	push	r24
    7b74:	bf 92       	push	r11
    7b76:	af 92       	push	r10
    7b78:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7b7c:	a2 01       	movw	r20, r4
    7b7e:	48 58       	subi	r20, 0x88	; 136
    7b80:	5f 4f       	sbci	r21, 0xFF	; 255
    7b82:	22 e0       	ldi	r18, 0x02	; 2
    7b84:	b4 01       	movw	r22, r8
    7b86:	c5 01       	movw	r24, r10
    7b88:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b8c:	0f b6       	in	r0, 0x3f	; 63
    7b8e:	f8 94       	cli
    7b90:	de bf       	out	0x3e, r29	; 62
    7b92:	0f be       	out	0x3f, r0	; 63
    7b94:	cd bf       	out	0x3d, r28	; 61
    7b96:	c6 5b       	subi	r28, 0xB6	; 182
    7b98:	df 4f       	sbci	r29, 0xFF	; 255
    7b9a:	0f b6       	in	r0, 0x3f	; 63
    7b9c:	f8 94       	cli
    7b9e:	de bf       	out	0x3e, r29	; 62
    7ba0:	0f be       	out	0x3f, r0	; 63
    7ba2:	cd bf       	out	0x3d, r28	; 61
    7ba4:	df 91       	pop	r29
    7ba6:	cf 91       	pop	r28
    7ba8:	1f 91       	pop	r17
    7baa:	0f 91       	pop	r16
    7bac:	ff 90       	pop	r15
    7bae:	ef 90       	pop	r14
    7bb0:	df 90       	pop	r13
    7bb2:	cf 90       	pop	r12
    7bb4:	bf 90       	pop	r11
    7bb6:	af 90       	pop	r10
    7bb8:	9f 90       	pop	r9
    7bba:	8f 90       	pop	r8
    7bbc:	7f 90       	pop	r7
    7bbe:	6f 90       	pop	r6
    7bc0:	5f 90       	pop	r5
    7bc2:	4f 90       	pop	r4
    7bc4:	3f 90       	pop	r3
    7bc6:	2f 90       	pop	r2
    7bc8:	08 95       	ret
    7bca:	6c e1       	ldi	r22, 0x1C	; 28
    7bcc:	79 e5       	ldi	r23, 0x59	; 89
    7bce:	c9 01       	movw	r24, r18
    7bd0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7bd4:	b4 01       	movw	r22, r8
    7bd6:	67 5e       	subi	r22, 0xE7	; 231
    7bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bda:	c1 2c       	mov	r12, r1
    7bdc:	ee 24       	eor	r14, r14
    7bde:	ea 94       	dec	r14
    7be0:	fe 2c       	mov	r15, r14
    7be2:	00 e0       	ldi	r16, 0x00	; 0
    7be4:	18 ef       	ldi	r17, 0xF8	; 248
    7be6:	24 e0       	ldi	r18, 0x04	; 4
    7be8:	a1 01       	movw	r20, r2
    7bea:	c5 01       	movw	r24, r10
    7bec:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7bf0:	d2 cf       	rjmp	.-92     	; 0x7b96 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1e4>

00007bf2 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
    7bf2:	2f 92       	push	r2
    7bf4:	3f 92       	push	r3
    7bf6:	4f 92       	push	r4
    7bf8:	5f 92       	push	r5
    7bfa:	6f 92       	push	r6
    7bfc:	7f 92       	push	r7
    7bfe:	8f 92       	push	r8
    7c00:	9f 92       	push	r9
    7c02:	af 92       	push	r10
    7c04:	bf 92       	push	r11
    7c06:	cf 92       	push	r12
    7c08:	df 92       	push	r13
    7c0a:	ef 92       	push	r14
    7c0c:	ff 92       	push	r15
    7c0e:	0f 93       	push	r16
    7c10:	1f 93       	push	r17
    7c12:	cf 93       	push	r28
    7c14:	df 93       	push	r29
    7c16:	cd b7       	in	r28, 0x3d	; 61
    7c18:	de b7       	in	r29, 0x3e	; 62
    7c1a:	2c 97       	sbiw	r28, 0x0c	; 12
    7c1c:	0f b6       	in	r0, 0x3f	; 63
    7c1e:	f8 94       	cli
    7c20:	de bf       	out	0x3e, r29	; 62
    7c22:	0f be       	out	0x3f, r0	; 63
    7c24:	cd bf       	out	0x3d, r28	; 61
    7c26:	5c 01       	movw	r10, r24
    7c28:	7b 01       	movw	r14, r22
    7c2a:	1a 01       	movw	r2, r20
    7c2c:	29 01       	movw	r4, r18
    7c2e:	0c 87       	std	Y+12, r16	; 0x0c
    7c30:	36 01       	movw	r6, r12
    7c32:	70 e0       	ldi	r23, 0x00	; 0
    7c34:	60 e0       	ldi	r22, 0x00	; 0
    7c36:	81 e2       	ldi	r24, 0x21	; 33
    7c38:	9c e0       	ldi	r25, 0x0C	; 12
    7c3a:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7c3e:	d1 2c       	mov	r13, r1
    7c40:	c1 2c       	mov	r12, r1
    7c42:	97 01       	movw	r18, r14
    7c44:	24 0d       	add	r18, r4
    7c46:	35 1d       	adc	r19, r5
    7c48:	3b 87       	std	Y+11, r19	; 0x0b
    7c4a:	2a 87       	std	Y+10, r18	; 0x0a
    7c4c:	45 01       	movw	r8, r10
    7c4e:	82 0c       	add	r8, r2
    7c50:	93 1c       	adc	r9, r3
    7c52:	0a 85       	ldd	r16, Y+10	; 0x0a
    7c54:	1b 85       	ldd	r17, Y+11	; 0x0b
    7c56:	0c 19       	sub	r16, r12
    7c58:	1d 09       	sbc	r17, r13
    7c5a:	94 01       	movw	r18, r8
    7c5c:	2c 19       	sub	r18, r12
    7c5e:	3d 09       	sbc	r19, r13
    7c60:	a6 01       	movw	r20, r12
    7c62:	4e 0d       	add	r20, r14
    7c64:	5f 1d       	adc	r21, r15
    7c66:	b6 01       	movw	r22, r12
    7c68:	6a 0d       	add	r22, r10
    7c6a:	7b 1d       	adc	r23, r11
    7c6c:	81 e2       	ldi	r24, 0x21	; 33
    7c6e:	9c e0       	ldi	r25, 0x0C	; 12
    7c70:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7c74:	3f ef       	ldi	r19, 0xFF	; 255
    7c76:	c3 1a       	sub	r12, r19
    7c78:	d3 0a       	sbc	r13, r19
    7c7a:	83 e0       	ldi	r24, 0x03	; 3
    7c7c:	c8 16       	cp	r12, r24
    7c7e:	d1 04       	cpc	r13, r1
    7c80:	41 f7       	brne	.-48     	; 0x7c52 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    7c82:	6f ef       	ldi	r22, 0xFF	; 255
    7c84:	7f ef       	ldi	r23, 0xFF	; 255
    7c86:	81 e2       	ldi	r24, 0x21	; 33
    7c88:	9c e0       	ldi	r25, 0x0C	; 12
    7c8a:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7c8e:	82 01       	movw	r16, r4
    7c90:	03 50       	subi	r16, 0x03	; 3
    7c92:	11 09       	sbc	r17, r1
    7c94:	0e 0d       	add	r16, r14
    7c96:	1f 1d       	adc	r17, r15
    7c98:	91 01       	movw	r18, r2
    7c9a:	23 50       	subi	r18, 0x03	; 3
    7c9c:	31 09       	sbc	r19, r1
    7c9e:	2a 0d       	add	r18, r10
    7ca0:	3b 1d       	adc	r19, r11
    7ca2:	a7 01       	movw	r20, r14
    7ca4:	4d 5f       	subi	r20, 0xFD	; 253
    7ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    7ca8:	b5 01       	movw	r22, r10
    7caa:	6d 5f       	subi	r22, 0xFD	; 253
    7cac:	7f 4f       	sbci	r23, 0xFF	; 255
    7cae:	81 e2       	ldi	r24, 0x21	; 33
    7cb0:	9c e0       	ldi	r25, 0x0C	; 12
    7cb2:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    7cb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    7cb8:	c9 2e       	mov	r12, r25
    7cba:	d1 2c       	mov	r13, r1
    7cbc:	25 e1       	ldi	r18, 0x15	; 21
    7cbe:	92 9f       	mul	r25, r18
    7cc0:	f0 01       	movw	r30, r0
    7cc2:	11 24       	eor	r1, r1
    7cc4:	e6 5c       	subi	r30, 0xC6	; 198
    7cc6:	f5 4f       	sbci	r31, 0xF5	; 245
    7cc8:	85 85       	ldd	r24, Z+13	; 0x0d
    7cca:	9e 01       	movw	r18, r28
    7ccc:	2f 5f       	subi	r18, 0xFF	; 255
    7cce:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd0:	49 01       	movw	r8, r18
    7cd2:	81 11       	cpse	r24, r1
    7cd4:	09 c0       	rjmp	.+18     	; 0x7ce8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf6>
    7cd6:	60 81       	ld	r22, Z
    7cd8:	71 81       	ldd	r23, Z+1	; 0x01
    7cda:	82 81       	ldd	r24, Z+2	; 0x02
    7cdc:	93 81       	ldd	r25, Z+3	; 0x03
    7cde:	89 01       	movw	r16, r18
    7ce0:	22 e0       	ldi	r18, 0x02	; 2
    7ce2:	44 e0       	ldi	r20, 0x04	; 4
    7ce4:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    7ce8:	85 e1       	ldi	r24, 0x15	; 21
    7cea:	8c 9d       	mul	r24, r12
    7cec:	f0 01       	movw	r30, r0
    7cee:	8d 9d       	mul	r24, r13
    7cf0:	f0 0d       	add	r31, r0
    7cf2:	11 24       	eor	r1, r1
    7cf4:	e6 5c       	subi	r30, 0xC6	; 198
    7cf6:	f5 4f       	sbci	r31, 0xF5	; 245
    7cf8:	85 85       	ldd	r24, Z+13	; 0x0d
    7cfa:	81 30       	cpi	r24, 0x01	; 1
    7cfc:	59 f4       	brne	.+22     	; 0x7d14 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    7cfe:	60 81       	ld	r22, Z
    7d00:	71 81       	ldd	r23, Z+1	; 0x01
    7d02:	82 81       	ldd	r24, Z+2	; 0x02
    7d04:	93 81       	ldd	r25, Z+3	; 0x03
    7d06:	0e 94 27 db 	call	0x1b64e	; 0x1b64e <__fixsfsi>
    7d0a:	cb 01       	movw	r24, r22
itoa():
    7d0c:	4a e0       	ldi	r20, 0x0A	; 10
    7d0e:	b4 01       	movw	r22, r8
    7d10:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhhPc():
    7d14:	70 e0       	ldi	r23, 0x00	; 0
    7d16:	60 e0       	ldi	r22, 0x00	; 0
    7d18:	81 e2       	ldi	r24, 0x21	; 33
    7d1a:	9c e0       	ldi	r25, 0x0C	; 12
    7d1c:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7d20:	f4 01       	movw	r30, r8
    7d22:	01 90       	ld	r0, Z+
    7d24:	00 20       	and	r0, r0
    7d26:	e9 f7       	brne	.-6      	; 0x7d22 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x130>
    7d28:	31 97       	sbiw	r30, 0x01	; 1
    7d2a:	e8 19       	sub	r30, r8
    7d2c:	f9 09       	sbc	r31, r9
    7d2e:	3c e0       	ldi	r19, 0x0C	; 12
    7d30:	43 1a       	sub	r4, r19
    7d32:	51 08       	sbc	r5, r1
    7d34:	56 94       	lsr	r5
    7d36:	47 94       	ror	r4
    7d38:	81 e0       	ldi	r24, 0x01	; 1
    7d3a:	e8 1a       	sub	r14, r24
    7d3c:	f1 08       	sbc	r15, r1
    7d3e:	4e 0c       	add	r4, r14
    7d40:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    7d42:	96 e0       	ldi	r25, 0x06	; 6
    7d44:	e9 9f       	mul	r30, r25
    7d46:	f0 01       	movw	r30, r0
    7d48:	11 24       	eor	r1, r1
    7d4a:	ee 0f       	add	r30, r30
    7d4c:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
    7d4e:	b1 01       	movw	r22, r2
    7d50:	6e 1b       	sub	r22, r30
    7d52:	7f 0b       	sbc	r23, r31
    7d54:	76 95       	lsr	r23
    7d56:	67 95       	ror	r22
    7d58:	6a 0d       	add	r22, r10
    7d5a:	7b 1d       	adc	r23, r11
    7d5c:	c1 2c       	mov	r12, r1
    7d5e:	ee 24       	eor	r14, r14
    7d60:	ea 94       	dec	r14
    7d62:	fe 2c       	mov	r15, r14
    7d64:	10 e0       	ldi	r17, 0x00	; 0
    7d66:	00 e0       	ldi	r16, 0x00	; 0
    7d68:	22 e0       	ldi	r18, 0x02	; 2
    7d6a:	a2 01       	movw	r20, r4
    7d6c:	c4 01       	movw	r24, r8
    7d6e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d72:	f3 01       	movw	r30, r6
    7d74:	80 81       	ld	r24, Z
    7d76:	88 23       	and	r24, r24
    7d78:	41 f0       	breq	.+16     	; 0x7d8a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    7d7a:	b5 01       	movw	r22, r10
    7d7c:	6b 5f       	subi	r22, 0xFB	; 251
    7d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d80:	22 e0       	ldi	r18, 0x02	; 2
    7d82:	a2 01       	movw	r20, r4
    7d84:	c3 01       	movw	r24, r6
    7d86:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d8a:	2c 96       	adiw	r28, 0x0c	; 12
    7d8c:	0f b6       	in	r0, 0x3f	; 63
    7d8e:	f8 94       	cli
    7d90:	de bf       	out	0x3e, r29	; 62
    7d92:	0f be       	out	0x3f, r0	; 63
    7d94:	cd bf       	out	0x3d, r28	; 61
    7d96:	df 91       	pop	r29
    7d98:	cf 91       	pop	r28
    7d9a:	1f 91       	pop	r17
    7d9c:	0f 91       	pop	r16
    7d9e:	ff 90       	pop	r15
    7da0:	ef 90       	pop	r14
    7da2:	df 90       	pop	r13
    7da4:	cf 90       	pop	r12
    7da6:	bf 90       	pop	r11
    7da8:	af 90       	pop	r10
    7daa:	9f 90       	pop	r9
    7dac:	8f 90       	pop	r8
    7dae:	7f 90       	pop	r7
    7db0:	6f 90       	pop	r6
    7db2:	5f 90       	pop	r5
    7db4:	4f 90       	pop	r4
    7db6:	3f 90       	pop	r3
    7db8:	2f 90       	pop	r2
    7dba:	08 95       	ret

00007dbc <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
    7dbc:	4f 92       	push	r4
    7dbe:	5f 92       	push	r5
    7dc0:	6f 92       	push	r6
    7dc2:	7f 92       	push	r7
    7dc4:	8f 92       	push	r8
    7dc6:	9f 92       	push	r9
    7dc8:	af 92       	push	r10
    7dca:	bf 92       	push	r11
    7dcc:	cf 92       	push	r12
    7dce:	df 92       	push	r13
    7dd0:	ef 92       	push	r14
    7dd2:	ff 92       	push	r15
    7dd4:	0f 93       	push	r16
    7dd6:	1f 93       	push	r17
    7dd8:	cf 93       	push	r28
    7dda:	df 93       	push	r29
    7ddc:	6c 01       	movw	r12, r24
    7dde:	eb 01       	movw	r28, r22
    7de0:	2a 01       	movw	r4, r20
    7de2:	39 01       	movw	r6, r18
    7de4:	70 e0       	ldi	r23, 0x00	; 0
    7de6:	60 e0       	ldi	r22, 0x00	; 0
    7de8:	81 e2       	ldi	r24, 0x21	; 33
    7dea:	9c e0       	ldi	r25, 0x0C	; 12
    7dec:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7df0:	f1 2c       	mov	r15, r1
    7df2:	e1 2c       	mov	r14, r1
    7df4:	4e 01       	movw	r8, r28
    7df6:	86 0c       	add	r8, r6
    7df8:	97 1c       	adc	r9, r7
    7dfa:	56 01       	movw	r10, r12
    7dfc:	a4 0c       	add	r10, r4
    7dfe:	b5 1c       	adc	r11, r5
    7e00:	84 01       	movw	r16, r8
    7e02:	0e 19       	sub	r16, r14
    7e04:	1f 09       	sbc	r17, r15
    7e06:	95 01       	movw	r18, r10
    7e08:	2e 19       	sub	r18, r14
    7e0a:	3f 09       	sbc	r19, r15
    7e0c:	a7 01       	movw	r20, r14
    7e0e:	4c 0f       	add	r20, r28
    7e10:	5d 1f       	adc	r21, r29
    7e12:	b7 01       	movw	r22, r14
    7e14:	6c 0d       	add	r22, r12
    7e16:	7d 1d       	adc	r23, r13
    7e18:	81 e2       	ldi	r24, 0x21	; 33
    7e1a:	9c e0       	ldi	r25, 0x0C	; 12
    7e1c:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7e20:	2f ef       	ldi	r18, 0xFF	; 255
    7e22:	e2 1a       	sub	r14, r18
    7e24:	f2 0a       	sbc	r15, r18
    7e26:	83 e0       	ldi	r24, 0x03	; 3
    7e28:	e8 16       	cp	r14, r24
    7e2a:	f1 04       	cpc	r15, r1
    7e2c:	49 f7       	brne	.-46     	; 0x7e00 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x44>
    7e2e:	6f ef       	ldi	r22, 0xFF	; 255
    7e30:	7f ef       	ldi	r23, 0xFF	; 255
    7e32:	81 e2       	ldi	r24, 0x21	; 33
    7e34:	9c e0       	ldi	r25, 0x0C	; 12
    7e36:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7e3a:	83 01       	movw	r16, r6
    7e3c:	03 50       	subi	r16, 0x03	; 3
    7e3e:	11 09       	sbc	r17, r1
    7e40:	0c 0f       	add	r16, r28
    7e42:	1d 1f       	adc	r17, r29
    7e44:	92 01       	movw	r18, r4
    7e46:	23 50       	subi	r18, 0x03	; 3
    7e48:	31 09       	sbc	r19, r1
    7e4a:	2c 0d       	add	r18, r12
    7e4c:	3d 1d       	adc	r19, r13
    7e4e:	ae 01       	movw	r20, r28
    7e50:	4d 5f       	subi	r20, 0xFD	; 253
    7e52:	5f 4f       	sbci	r21, 0xFF	; 255
    7e54:	b6 01       	movw	r22, r12
    7e56:	6d 5f       	subi	r22, 0xFD	; 253
    7e58:	7f 4f       	sbci	r23, 0xFF	; 255
    7e5a:	81 e2       	ldi	r24, 0x21	; 33
    7e5c:	9c e0       	ldi	r25, 0x0C	; 12
    7e5e:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    7e62:	70 e0       	ldi	r23, 0x00	; 0
    7e64:	60 e0       	ldi	r22, 0x00	; 0
    7e66:	81 e2       	ldi	r24, 0x21	; 33
    7e68:	9c e0       	ldi	r25, 0x0C	; 12
    7e6a:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7e6e:	89 ef       	ldi	r24, 0xF9	; 249
    7e70:	99 e0       	ldi	r25, 0x09	; 9
    7e72:	fc 01       	movw	r30, r24
    7e74:	01 90       	ld	r0, Z+
    7e76:	00 20       	and	r0, r0
    7e78:	e9 f7       	brne	.-6      	; 0x7e74 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb8>
    7e7a:	cf 01       	movw	r24, r30
    7e7c:	8a 5f       	subi	r24, 0xFA	; 250
    7e7e:	99 40       	sbci	r25, 0x09	; 9
    7e80:	a3 01       	movw	r20, r6
    7e82:	4c 50       	subi	r20, 0x0C	; 12
    7e84:	51 09       	sbc	r21, r1
    7e86:	56 95       	lsr	r21
    7e88:	47 95       	ror	r20
    7e8a:	21 97       	sbiw	r28, 0x01	; 1
    7e8c:	4c 0f       	add	r20, r28
    7e8e:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    7e90:	f6 e0       	ldi	r31, 0x06	; 6
    7e92:	8f 9f       	mul	r24, r31
    7e94:	c0 01       	movw	r24, r0
    7e96:	11 24       	eor	r1, r1
    7e98:	88 0f       	add	r24, r24
    7e9a:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
    7e9c:	b2 01       	movw	r22, r4
    7e9e:	68 1b       	sub	r22, r24
    7ea0:	79 0b       	sbc	r23, r25
    7ea2:	76 95       	lsr	r23
    7ea4:	67 95       	ror	r22
    7ea6:	6c 0d       	add	r22, r12
    7ea8:	7d 1d       	adc	r23, r13
    7eaa:	c1 2c       	mov	r12, r1
    7eac:	ee 24       	eor	r14, r14
    7eae:	ea 94       	dec	r14
    7eb0:	fe 2c       	mov	r15, r14
    7eb2:	10 e0       	ldi	r17, 0x00	; 0
    7eb4:	00 e0       	ldi	r16, 0x00	; 0
    7eb6:	22 e0       	ldi	r18, 0x02	; 2
    7eb8:	89 ef       	ldi	r24, 0xF9	; 249
    7eba:	99 e0       	ldi	r25, 0x09	; 9
    7ebc:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7ec0:	df 91       	pop	r29
    7ec2:	cf 91       	pop	r28
    7ec4:	1f 91       	pop	r17
    7ec6:	0f 91       	pop	r16
    7ec8:	ff 90       	pop	r15
    7eca:	ef 90       	pop	r14
    7ecc:	df 90       	pop	r13
    7ece:	cf 90       	pop	r12
    7ed0:	bf 90       	pop	r11
    7ed2:	af 90       	pop	r10
    7ed4:	9f 90       	pop	r9
    7ed6:	8f 90       	pop	r8
    7ed8:	7f 90       	pop	r7
    7eda:	6f 90       	pop	r6
    7edc:	5f 90       	pop	r5
    7ede:	4f 90       	pop	r4
    7ee0:	08 95       	ret

00007ee2 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
    7ee2:	6f 92       	push	r6
    7ee4:	7f 92       	push	r7
    7ee6:	8f 92       	push	r8
    7ee8:	9f 92       	push	r9
    7eea:	af 92       	push	r10
    7eec:	bf 92       	push	r11
    7eee:	cf 92       	push	r12
    7ef0:	ef 92       	push	r14
    7ef2:	ff 92       	push	r15
    7ef4:	0f 93       	push	r16
    7ef6:	1f 93       	push	r17
    7ef8:	cf 93       	push	r28
    7efa:	df 93       	push	r29
    7efc:	cd b7       	in	r28, 0x3d	; 61
    7efe:	de b7       	in	r29, 0x3e	; 62
    7f00:	68 97       	sbiw	r28, 0x18	; 24
    7f02:	0f b6       	in	r0, 0x3f	; 63
    7f04:	f8 94       	cli
    7f06:	de bf       	out	0x3e, r29	; 62
    7f08:	0f be       	out	0x3f, r0	; 63
    7f0a:	cd bf       	out	0x3d, r28	; 61
    7f0c:	4c 01       	movw	r8, r24
    7f0e:	3b 01       	movw	r6, r22
    7f10:	65 e0       	ldi	r22, 0x05	; 5
    7f12:	7b e5       	ldi	r23, 0x5B	; 91
    7f14:	ce 01       	movw	r24, r28
    7f16:	01 96       	adiw	r24, 0x01	; 1
    7f18:	5c 01       	movw	r10, r24
    7f1a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    7f1e:	a3 01       	movw	r20, r6
    7f20:	4b 5f       	subi	r20, 0xFB	; 251
    7f22:	5f 4f       	sbci	r21, 0xFF	; 255
    7f24:	b4 01       	movw	r22, r8
    7f26:	61 5b       	subi	r22, 0xB1	; 177
    7f28:	7f 4f       	sbci	r23, 0xFF	; 255
    7f2a:	c1 2c       	mov	r12, r1
    7f2c:	ee 24       	eor	r14, r14
    7f2e:	ea 94       	dec	r14
    7f30:	fe 2c       	mov	r15, r14
    7f32:	10 e0       	ldi	r17, 0x00	; 0
    7f34:	00 e0       	ldi	r16, 0x00	; 0
    7f36:	21 e0       	ldi	r18, 0x01	; 1
    7f38:	c5 01       	movw	r24, r10
    7f3a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_Z14selftest_get_0h():
    7f3e:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
    7f42:	80 fd       	sbrc	r24, 0
    7f44:	56 c0       	rjmp	.+172    	; 0x7ff2 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    7f46:	90 91 6b 10 	lds	r25, 0x106B	; 0x80106b <now+0x4>
    7f4a:	80 91 6a 10 	lds	r24, 0x106A	; 0x80106a <now+0x3>
    7f4e:	20 91 bb 0a 	lds	r18, 0x0ABB	; 0x800abb <uptime>
    7f52:	20 ff       	sbrs	r18, 0
    7f54:	47 c0       	rjmp	.+142    	; 0x7fe4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x102>
    7f56:	1f 92       	push	r1
    7f58:	9f 93       	push	r25
    7f5a:	1f 92       	push	r1
    7f5c:	8f 93       	push	r24
    7f5e:	8c e2       	ldi	r24, 0x2C	; 44
    7f60:	93 e0       	ldi	r25, 0x03	; 3
    7f62:	9f 93       	push	r25
    7f64:	8f 93       	push	r24
    7f66:	bf 92       	push	r11
    7f68:	af 92       	push	r10
    7f6a:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    7f6e:	0f b6       	in	r0, 0x3f	; 63
    7f70:	f8 94       	cli
    7f72:	de bf       	out	0x3e, r29	; 62
    7f74:	0f be       	out	0x3f, r0	; 63
    7f76:	cd bf       	out	0x3d, r28	; 61
    7f78:	70 e0       	ldi	r23, 0x00	; 0
    7f7a:	60 e0       	ldi	r22, 0x00	; 0
    7f7c:	81 e2       	ldi	r24, 0x21	; 33
    7f7e:	9c e0       	ldi	r25, 0x0C	; 12
    7f80:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7f84:	a3 01       	movw	r20, r6
    7f86:	4c 5e       	subi	r20, 0xEC	; 236
    7f88:	5f 4f       	sbci	r21, 0xFF	; 255
    7f8a:	b4 01       	movw	r22, r8
    7f8c:	6c 5f       	subi	r22, 0xFC	; 252
    7f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f90:	c1 2c       	mov	r12, r1
    7f92:	ee 24       	eor	r14, r14
    7f94:	ea 94       	dec	r14
    7f96:	fe 2c       	mov	r15, r14
    7f98:	10 e0       	ldi	r17, 0x00	; 0
    7f9a:	00 e0       	ldi	r16, 0x00	; 0
    7f9c:	28 e0       	ldi	r18, 0x08	; 8
    7f9e:	c5 01       	movw	r24, r10
    7fa0:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7fa4:	83 01       	movw	r16, r6
    7fa6:	0c 5a       	subi	r16, 0xAC	; 172
    7fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    7faa:	94 01       	movw	r18, r8
    7fac:	2c 50       	subi	r18, 0x0C	; 12
    7fae:	3f 4f       	sbci	r19, 0xFF	; 255
    7fb0:	a3 01       	movw	r20, r6
    7fb2:	b4 01       	movw	r22, r8
    7fb4:	81 e2       	ldi	r24, 0x21	; 33
    7fb6:	9c e0       	ldi	r25, 0x0C	; 12
    7fb8:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7fbc:	68 96       	adiw	r28, 0x18	; 24
    7fbe:	0f b6       	in	r0, 0x3f	; 63
    7fc0:	f8 94       	cli
    7fc2:	de bf       	out	0x3e, r29	; 62
    7fc4:	0f be       	out	0x3f, r0	; 63
    7fc6:	cd bf       	out	0x3d, r28	; 61
    7fc8:	df 91       	pop	r29
    7fca:	cf 91       	pop	r28
    7fcc:	1f 91       	pop	r17
    7fce:	0f 91       	pop	r16
    7fd0:	ff 90       	pop	r15
    7fd2:	ef 90       	pop	r14
    7fd4:	cf 90       	pop	r12
    7fd6:	bf 90       	pop	r11
    7fd8:	af 90       	pop	r10
    7fda:	9f 90       	pop	r9
    7fdc:	8f 90       	pop	r8
    7fde:	7f 90       	pop	r7
    7fe0:	6f 90       	pop	r6
    7fe2:	08 95       	ret
    7fe4:	1f 92       	push	r1
    7fe6:	9f 93       	push	r25
    7fe8:	1f 92       	push	r1
    7fea:	8f 93       	push	r24
    7fec:	86 e3       	ldi	r24, 0x36	; 54
    7fee:	93 e0       	ldi	r25, 0x03	; 3
    7ff0:	b8 cf       	rjmp	.-144    	; 0x7f62 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x80>
    7ff2:	60 e4       	ldi	r22, 0x40	; 64
    7ff4:	73 e0       	ldi	r23, 0x03	; 3
    7ff6:	c5 01       	movw	r24, r10
    7ff8:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    7ffc:	bd cf       	rjmp	.-134    	; 0x7f78 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>

00007ffe <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
    7ffe:	8f 92       	push	r8
    8000:	9f 92       	push	r9
    8002:	af 92       	push	r10
    8004:	bf 92       	push	r11
    8006:	cf 92       	push	r12
    8008:	ef 92       	push	r14
    800a:	ff 92       	push	r15
    800c:	0f 93       	push	r16
    800e:	1f 93       	push	r17
    8010:	cf 93       	push	r28
    8012:	df 93       	push	r29
    8014:	cd b7       	in	r28, 0x3d	; 61
    8016:	de b7       	in	r29, 0x3e	; 62
    8018:	60 97       	sbiw	r28, 0x10	; 16
    801a:	0f b6       	in	r0, 0x3f	; 63
    801c:	f8 94       	cli
    801e:	de bf       	out	0x3e, r29	; 62
    8020:	0f be       	out	0x3f, r0	; 63
    8022:	cd bf       	out	0x3d, r28	; 61
    8024:	4c 01       	movw	r8, r24
    8026:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    8028:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
    802c:	9e 01       	movw	r18, r28
    802e:	2f 5f       	subi	r18, 0xFF	; 255
    8030:	3f 4f       	sbci	r19, 0xFF	; 255
    8032:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjhhPc():
    8034:	80 fd       	sbrc	r24, 0
    8036:	54 c0       	rjmp	.+168    	; 0x80e0 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    8038:	80 91 67 10 	lds	r24, 0x1067	; 0x801067 <now>
    803c:	90 e0       	ldi	r25, 0x00	; 0
    803e:	80 53       	subi	r24, 0x30	; 48
    8040:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
    8042:	9f 93       	push	r25
    8044:	8f 93       	push	r24
    8046:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <now+0x1>
    804a:	1f 92       	push	r1
    804c:	8f 93       	push	r24
    804e:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <now+0x2>
    8052:	1f 92       	push	r1
    8054:	8f 93       	push	r24
    8056:	86 e4       	ldi	r24, 0x46	; 70
    8058:	93 e0       	ldi	r25, 0x03	; 3
    805a:	9f 93       	push	r25
    805c:	8f 93       	push	r24
    805e:	3f 93       	push	r19
    8060:	2f 93       	push	r18
    8062:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    8066:	0f b6       	in	r0, 0x3f	; 63
    8068:	f8 94       	cli
    806a:	de bf       	out	0x3e, r29	; 62
    806c:	0f be       	out	0x3f, r0	; 63
    806e:	cd bf       	out	0x3d, r28	; 61
    8070:	6f ef       	ldi	r22, 0xFF	; 255
    8072:	7f ef       	ldi	r23, 0xFF	; 255
    8074:	81 e2       	ldi	r24, 0x21	; 33
    8076:	9c e0       	ldi	r25, 0x0C	; 12
    8078:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    807c:	2e e8       	ldi	r18, 0x8E	; 142
    807e:	30 e0       	ldi	r19, 0x00	; 0
    8080:	a8 01       	movw	r20, r16
    8082:	b4 01       	movw	r22, r8
    8084:	81 e2       	ldi	r24, 0x21	; 33
    8086:	9c e0       	ldi	r25, 0x0C	; 12
    8088:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    808c:	a8 01       	movw	r20, r16
    808e:	4f 5f       	subi	r20, 0xFF	; 255
    8090:	5f 4f       	sbci	r21, 0xFF	; 255
    8092:	2e e8       	ldi	r18, 0x8E	; 142
    8094:	30 e0       	ldi	r19, 0x00	; 0
    8096:	b4 01       	movw	r22, r8
    8098:	81 e2       	ldi	r24, 0x21	; 33
    809a:	9c e0       	ldi	r25, 0x0C	; 12
    809c:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    80a0:	a8 01       	movw	r20, r16
    80a2:	4e 5f       	subi	r20, 0xFE	; 254
    80a4:	5f 4f       	sbci	r21, 0xFF	; 255
    80a6:	c1 2c       	mov	r12, r1
    80a8:	ee 24       	eor	r14, r14
    80aa:	ea 94       	dec	r14
    80ac:	fe 2c       	mov	r15, r14
    80ae:	10 e0       	ldi	r17, 0x00	; 0
    80b0:	00 e0       	ldi	r16, 0x00	; 0
    80b2:	23 e0       	ldi	r18, 0x03	; 3
    80b4:	b4 01       	movw	r22, r8
    80b6:	c5 01       	movw	r24, r10
    80b8:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    80bc:	60 96       	adiw	r28, 0x10	; 16
    80be:	0f b6       	in	r0, 0x3f	; 63
    80c0:	f8 94       	cli
    80c2:	de bf       	out	0x3e, r29	; 62
    80c4:	0f be       	out	0x3f, r0	; 63
    80c6:	cd bf       	out	0x3d, r28	; 61
    80c8:	df 91       	pop	r29
    80ca:	cf 91       	pop	r28
    80cc:	1f 91       	pop	r17
    80ce:	0f 91       	pop	r16
    80d0:	ff 90       	pop	r15
    80d2:	ef 90       	pop	r14
    80d4:	cf 90       	pop	r12
    80d6:	bf 90       	pop	r11
    80d8:	af 90       	pop	r10
    80da:	9f 90       	pop	r9
    80dc:	8f 90       	pop	r8
    80de:	08 95       	ret
    80e0:	65 e5       	ldi	r22, 0x55	; 85
    80e2:	73 e0       	ldi	r23, 0x03	; 3
    80e4:	c9 01       	movw	r24, r18
    80e6:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    80ea:	c2 cf       	rjmp	.-124    	; 0x8070 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>

000080ec <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjhhPc():
    80ec:	8f 92       	push	r8
    80ee:	9f 92       	push	r9
    80f0:	af 92       	push	r10
    80f2:	bf 92       	push	r11
    80f4:	cf 92       	push	r12
    80f6:	ef 92       	push	r14
    80f8:	ff 92       	push	r15
    80fa:	0f 93       	push	r16
    80fc:	1f 93       	push	r17
    80fe:	cf 93       	push	r28
    8100:	df 93       	push	r29
    8102:	cd b7       	in	r28, 0x3d	; 61
    8104:	de b7       	in	r29, 0x3e	; 62
    8106:	a8 97       	sbiw	r28, 0x28	; 40
    8108:	0f b6       	in	r0, 0x3f	; 63
    810a:	f8 94       	cli
    810c:	de bf       	out	0x3e, r29	; 62
    810e:	0f be       	out	0x3f, r0	; 63
    8110:	cd bf       	out	0x3d, r28	; 61
    8112:	5c 01       	movw	r10, r24
    8114:	4b 01       	movw	r8, r22
    8116:	60 e7       	ldi	r22, 0x70	; 112
    8118:	75 e5       	ldi	r23, 0x55	; 85
    811a:	ce 01       	movw	r24, r28
    811c:	01 96       	adiw	r24, 0x01	; 1
    811e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
_Z15prepocet_napetijh():
    8122:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <dvanact>
    8126:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <dvanact+0x1>
    812a:	29 e3       	ldi	r18, 0x39	; 57
    812c:	28 9f       	mul	r18, r24
    812e:	b0 01       	movw	r22, r0
    8130:	29 9f       	mul	r18, r25
    8132:	70 0d       	add	r23, r0
    8134:	11 24       	eor	r1, r1
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	80 e0       	ldi	r24, 0x00	; 0
    813a:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    813e:	20 e0       	ldi	r18, 0x00	; 0
    8140:	30 e0       	ldi	r19, 0x00	; 0
    8142:	4a e7       	ldi	r20, 0x7A	; 122
    8144:	54 e4       	ldi	r21, 0x44	; 68
    8146:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    814a:	8e 01       	movw	r16, r28
    814c:	0f 5d       	subi	r16, 0xDF	; 223
    814e:	1f 4f       	sbci	r17, 0xFF	; 255
    8150:	22 e0       	ldi	r18, 0x02	; 2
    8152:	44 e0       	ldi	r20, 0x04	; 4
    8154:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    8158:	b8 01       	movw	r22, r16
    815a:	ce 01       	movw	r24, r28
    815c:	01 96       	adiw	r24, 0x01	; 1
    815e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8162:	67 e1       	ldi	r22, 0x17	; 23
    8164:	75 e0       	ldi	r23, 0x05	; 5
    8166:	ce 01       	movw	r24, r28
    8168:	01 96       	adiw	r24, 0x01	; 1
    816a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    816e:	85 e0       	ldi	r24, 0x05	; 5
    8170:	a8 0e       	add	r10, r24
    8172:	b1 1c       	adc	r11, r1
    8174:	a4 01       	movw	r20, r8
    8176:	46 5f       	subi	r20, 0xF6	; 246
    8178:	5f 4f       	sbci	r21, 0xFF	; 255
    817a:	c1 2c       	mov	r12, r1
    817c:	ee 24       	eor	r14, r14
    817e:	ea 94       	dec	r14
    8180:	fe 2c       	mov	r15, r14
    8182:	10 e0       	ldi	r17, 0x00	; 0
    8184:	00 e0       	ldi	r16, 0x00	; 0
    8186:	21 e0       	ldi	r18, 0x01	; 1
    8188:	b5 01       	movw	r22, r10
    818a:	ce 01       	movw	r24, r28
    818c:	01 96       	adiw	r24, 0x01	; 1
    818e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8192:	6c e5       	ldi	r22, 0x5C	; 92
    8194:	75 e5       	ldi	r23, 0x55	; 85
    8196:	ce 01       	movw	r24, r28
    8198:	01 96       	adiw	r24, 0x01	; 1
    819a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    819e:	63 e3       	ldi	r22, 0x33	; 51
    81a0:	78 e0       	ldi	r23, 0x08	; 8
    81a2:	ce 01       	movw	r24, r28
    81a4:	01 96       	adiw	r24, 0x01	; 1
    81a6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
_Z15prepocet_napetijh():
    81aa:	60 91 c6 0a 	lds	r22, 0x0AC6	; 0x800ac6 <petnula>
    81ae:	70 91 c7 0a 	lds	r23, 0x0AC7	; 0x800ac7 <petnula+0x1>
    81b2:	93 e0       	ldi	r25, 0x03	; 3
    81b4:	66 0f       	add	r22, r22
    81b6:	77 1f       	adc	r23, r23
    81b8:	9a 95       	dec	r25
    81ba:	e1 f7       	brne	.-8      	; 0x81b4 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc8>
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	80 e0       	ldi	r24, 0x00	; 0
    81c0:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    81c4:	20 e0       	ldi	r18, 0x00	; 0
    81c6:	30 e0       	ldi	r19, 0x00	; 0
    81c8:	4a e7       	ldi	r20, 0x7A	; 122
    81ca:	54 e4       	ldi	r21, 0x44	; 68
    81cc:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    81d0:	8e 01       	movw	r16, r28
    81d2:	0f 5d       	subi	r16, 0xDF	; 223
    81d4:	1f 4f       	sbci	r17, 0xFF	; 255
    81d6:	22 e0       	ldi	r18, 0x02	; 2
    81d8:	44 e0       	ldi	r20, 0x04	; 4
    81da:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    81de:	b8 01       	movw	r22, r16
    81e0:	ce 01       	movw	r24, r28
    81e2:	01 96       	adiw	r24, 0x01	; 1
    81e4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    81e8:	67 e1       	ldi	r22, 0x17	; 23
    81ea:	75 e0       	ldi	r23, 0x05	; 5
    81ec:	ce 01       	movw	r24, r28
    81ee:	01 96       	adiw	r24, 0x01	; 1
    81f0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    81f4:	a4 01       	movw	r20, r8
    81f6:	47 5e       	subi	r20, 0xE7	; 231
    81f8:	5f 4f       	sbci	r21, 0xFF	; 255
    81fa:	10 e0       	ldi	r17, 0x00	; 0
    81fc:	00 e0       	ldi	r16, 0x00	; 0
    81fe:	21 e0       	ldi	r18, 0x01	; 1
    8200:	b5 01       	movw	r22, r10
    8202:	ce 01       	movw	r24, r28
    8204:	01 96       	adiw	r24, 0x01	; 1
    8206:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    820a:	68 e4       	ldi	r22, 0x48	; 72
    820c:	75 e5       	ldi	r23, 0x55	; 85
    820e:	ce 01       	movw	r24, r28
    8210:	01 96       	adiw	r24, 0x01	; 1
    8212:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
_Z15prepocet_napetijh():
    8216:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <tritri>
    821a:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <tritri+0x1>
    821e:	25 e0       	ldi	r18, 0x05	; 5
    8220:	28 9f       	mul	r18, r24
    8222:	b0 01       	movw	r22, r0
    8224:	29 9f       	mul	r18, r25
    8226:	70 0d       	add	r23, r0
    8228:	11 24       	eor	r1, r1
    822a:	90 e0       	ldi	r25, 0x00	; 0
    822c:	80 e0       	ldi	r24, 0x00	; 0
    822e:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    8232:	20 e0       	ldi	r18, 0x00	; 0
    8234:	30 e0       	ldi	r19, 0x00	; 0
    8236:	4a e7       	ldi	r20, 0x7A	; 122
    8238:	54 e4       	ldi	r21, 0x44	; 68
    823a:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
    823e:	8e 01       	movw	r16, r28
    8240:	0f 5d       	subi	r16, 0xDF	; 223
    8242:	1f 4f       	sbci	r17, 0xFF	; 255
    8244:	22 e0       	ldi	r18, 0x02	; 2
    8246:	44 e0       	ldi	r20, 0x04	; 4
    8248:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    824c:	b8 01       	movw	r22, r16
    824e:	ce 01       	movw	r24, r28
    8250:	01 96       	adiw	r24, 0x01	; 1
    8252:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8256:	67 e1       	ldi	r22, 0x17	; 23
    8258:	75 e0       	ldi	r23, 0x05	; 5
    825a:	ce 01       	movw	r24, r28
    825c:	01 96       	adiw	r24, 0x01	; 1
    825e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8262:	a4 01       	movw	r20, r8
    8264:	48 5d       	subi	r20, 0xD8	; 216
    8266:	5f 4f       	sbci	r21, 0xFF	; 255
    8268:	10 e0       	ldi	r17, 0x00	; 0
    826a:	00 e0       	ldi	r16, 0x00	; 0
    826c:	21 e0       	ldi	r18, 0x01	; 1
    826e:	b5 01       	movw	r22, r10
    8270:	ce 01       	movw	r24, r28
    8272:	01 96       	adiw	r24, 0x01	; 1
    8274:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8278:	69 e3       	ldi	r22, 0x39	; 57
    827a:	75 e5       	ldi	r23, 0x55	; 85
    827c:	ce 01       	movw	r24, r28
    827e:	01 96       	adiw	r24, 0x01	; 1
    8280:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
_Z15prepocet_prouduj():
    8284:	60 91 c2 0a 	lds	r22, 0x0AC2	; 0x800ac2 <proud>
    8288:	70 91 c3 0a 	lds	r23, 0x0AC3	; 0x800ac3 <proud+0x1>
    828c:	90 e0       	ldi	r25, 0x00	; 0
    828e:	80 e0       	ldi	r24, 0x00	; 0
    8290:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
_Z33display_element_show_about_devicejjjjhhPc():
    8294:	8e 01       	movw	r16, r28
    8296:	0f 5d       	subi	r16, 0xDF	; 223
    8298:	1f 4f       	sbci	r17, 0xFF	; 255
    829a:	22 e0       	ldi	r18, 0x02	; 2
    829c:	44 e0       	ldi	r20, 0x04	; 4
    829e:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    82a2:	b8 01       	movw	r22, r16
    82a4:	ce 01       	movw	r24, r28
    82a6:	01 96       	adiw	r24, 0x01	; 1
    82a8:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    82ac:	60 e6       	ldi	r22, 0x60	; 96
    82ae:	73 e0       	ldi	r23, 0x03	; 3
    82b0:	ce 01       	movw	r24, r28
    82b2:	01 96       	adiw	r24, 0x01	; 1
    82b4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    82b8:	a4 01       	movw	r20, r8
    82ba:	49 5c       	subi	r20, 0xC9	; 201
    82bc:	5f 4f       	sbci	r21, 0xFF	; 255
    82be:	10 e0       	ldi	r17, 0x00	; 0
    82c0:	00 e0       	ldi	r16, 0x00	; 0
    82c2:	21 e0       	ldi	r18, 0x01	; 1
    82c4:	b5 01       	movw	r22, r10
    82c6:	ce 01       	movw	r24, r28
    82c8:	01 96       	adiw	r24, 0x01	; 1
    82ca:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    82ce:	67 e2       	ldi	r22, 0x27	; 39
    82d0:	75 e5       	ldi	r23, 0x55	; 85
    82d2:	ce 01       	movw	r24, r28
    82d4:	01 96       	adiw	r24, 0x01	; 1
    82d6:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    82da:	60 91 8e 0a 	lds	r22, 0x0A8E	; 0x800a8e <internal_temp>
    82de:	70 91 8f 0a 	lds	r23, 0x0A8F	; 0x800a8f <internal_temp+0x1>
    82e2:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <internal_temp+0x2>
    82e6:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <internal_temp+0x3>
    82ea:	8e 01       	movw	r16, r28
    82ec:	0f 5d       	subi	r16, 0xDF	; 223
    82ee:	1f 4f       	sbci	r17, 0xFF	; 255
    82f0:	22 e0       	ldi	r18, 0x02	; 2
    82f2:	44 e0       	ldi	r20, 0x04	; 4
    82f4:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    82f8:	b8 01       	movw	r22, r16
    82fa:	ce 01       	movw	r24, r28
    82fc:	01 96       	adiw	r24, 0x01	; 1
    82fe:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8302:	69 e0       	ldi	r22, 0x09	; 9
    8304:	78 e0       	ldi	r23, 0x08	; 8
    8306:	ce 01       	movw	r24, r28
    8308:	01 96       	adiw	r24, 0x01	; 1
    830a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    830e:	a4 01       	movw	r20, r8
    8310:	4a 5b       	subi	r20, 0xBA	; 186
    8312:	5f 4f       	sbci	r21, 0xFF	; 255
    8314:	10 e0       	ldi	r17, 0x00	; 0
    8316:	00 e0       	ldi	r16, 0x00	; 0
    8318:	21 e0       	ldi	r18, 0x01	; 1
    831a:	b5 01       	movw	r22, r10
    831c:	ce 01       	movw	r24, r28
    831e:	01 96       	adiw	r24, 0x01	; 1
    8320:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8324:	6b e1       	ldi	r22, 0x1B	; 27
    8326:	75 e5       	ldi	r23, 0x55	; 85
    8328:	ce 01       	movw	r24, r28
    832a:	01 96       	adiw	r24, 0x01	; 1
    832c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8330:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
itoa():
    8334:	40 e1       	ldi	r20, 0x10	; 16
    8336:	be 01       	movw	r22, r28
    8338:	6f 5d       	subi	r22, 0xDF	; 223
    833a:	7f 4f       	sbci	r23, 0xFF	; 255
    833c:	90 e0       	ldi	r25, 0x00	; 0
    833e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8342:	be 01       	movw	r22, r28
    8344:	6f 5d       	subi	r22, 0xDF	; 223
    8346:	7f 4f       	sbci	r23, 0xFF	; 255
    8348:	ce 01       	movw	r24, r28
    834a:	01 96       	adiw	r24, 0x01	; 1
    834c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8350:	a4 01       	movw	r20, r8
    8352:	4b 5a       	subi	r20, 0xAB	; 171
    8354:	5f 4f       	sbci	r21, 0xFF	; 255
    8356:	21 e0       	ldi	r18, 0x01	; 1
    8358:	b5 01       	movw	r22, r10
    835a:	ce 01       	movw	r24, r28
    835c:	01 96       	adiw	r24, 0x01	; 1
    835e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8362:	69 e0       	ldi	r22, 0x09	; 9
    8364:	75 e5       	ldi	r23, 0x55	; 85
    8366:	ce 01       	movw	r24, r28
    8368:	01 96       	adiw	r24, 0x01	; 1
    836a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
    836e:	40 e1       	ldi	r20, 0x10	; 16
    8370:	be 01       	movw	r22, r28
    8372:	6f 5d       	subi	r22, 0xDF	; 223
    8374:	7f 4f       	sbci	r23, 0xFF	; 255
    8376:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <mqtt_send_message>
    837a:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <mqtt_send_message+0x1>
    837e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8382:	be 01       	movw	r22, r28
    8384:	6f 5d       	subi	r22, 0xDF	; 223
    8386:	7f 4f       	sbci	r23, 0xFF	; 255
    8388:	ce 01       	movw	r24, r28
    838a:	01 96       	adiw	r24, 0x01	; 1
    838c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8390:	a4 01       	movw	r20, r8
    8392:	4c 59       	subi	r20, 0x9C	; 156
    8394:	5f 4f       	sbci	r21, 0xFF	; 255
    8396:	21 e0       	ldi	r18, 0x01	; 1
    8398:	b5 01       	movw	r22, r10
    839a:	ce 01       	movw	r24, r28
    839c:	01 96       	adiw	r24, 0x01	; 1
    839e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    83a2:	68 ef       	ldi	r22, 0xF8	; 248
    83a4:	74 e5       	ldi	r23, 0x54	; 84
    83a6:	ce 01       	movw	r24, r28
    83a8:	01 96       	adiw	r24, 0x01	; 1
    83aa:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
    83ae:	40 e1       	ldi	r20, 0x10	; 16
    83b0:	be 01       	movw	r22, r28
    83b2:	6f 5d       	subi	r22, 0xDF	; 223
    83b4:	7f 4f       	sbci	r23, 0xFF	; 255
    83b6:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <mqtt_receive_message>
    83ba:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <mqtt_receive_message+0x1>
    83be:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    83c2:	be 01       	movw	r22, r28
    83c4:	6f 5d       	subi	r22, 0xDF	; 223
    83c6:	7f 4f       	sbci	r23, 0xFF	; 255
    83c8:	ce 01       	movw	r24, r28
    83ca:	01 96       	adiw	r24, 0x01	; 1
    83cc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    83d0:	a4 01       	movw	r20, r8
    83d2:	4d 58       	subi	r20, 0x8D	; 141
    83d4:	5f 4f       	sbci	r21, 0xFF	; 255
    83d6:	21 e0       	ldi	r18, 0x01	; 1
    83d8:	b5 01       	movw	r22, r10
    83da:	ce 01       	movw	r24, r28
    83dc:	01 96       	adiw	r24, 0x01	; 1
    83de:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    83e2:	64 ee       	ldi	r22, 0xE4	; 228
    83e4:	74 e5       	ldi	r23, 0x54	; 84
    83e6:	ce 01       	movw	r24, r28
    83e8:	01 96       	adiw	r24, 0x01	; 1
    83ea:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
    83ee:	40 e1       	ldi	r20, 0x10	; 16
    83f0:	be 01       	movw	r22, r28
    83f2:	6f 5d       	subi	r22, 0xDF	; 223
    83f4:	7f 4f       	sbci	r23, 0xFF	; 255
    83f6:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    83fa:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    83fe:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8402:	be 01       	movw	r22, r28
    8404:	6f 5d       	subi	r22, 0xDF	; 223
    8406:	7f 4f       	sbci	r23, 0xFF	; 255
    8408:	ce 01       	movw	r24, r28
    840a:	01 96       	adiw	r24, 0x01	; 1
    840c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8410:	a4 01       	movw	r20, r8
    8412:	4e 57       	subi	r20, 0x7E	; 126
    8414:	5f 4f       	sbci	r21, 0xFF	; 255
    8416:	21 e0       	ldi	r18, 0x01	; 1
    8418:	b5 01       	movw	r22, r10
    841a:	ce 01       	movw	r24, r28
    841c:	01 96       	adiw	r24, 0x01	; 1
    841e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8422:	65 ed       	ldi	r22, 0xD5	; 213
    8424:	74 e5       	ldi	r23, 0x54	; 84
    8426:	ce 01       	movw	r24, r28
    8428:	01 96       	adiw	r24, 0x01	; 1
    842a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
    842e:	40 e1       	ldi	r20, 0x10	; 16
    8430:	be 01       	movw	r22, r28
    8432:	6f 5d       	subi	r22, 0xDF	; 223
    8434:	7f 4f       	sbci	r23, 0xFF	; 255
    8436:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <mqtt_error>
    843a:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <mqtt_error+0x1>
    843e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
    8442:	be 01       	movw	r22, r28
    8444:	6f 5d       	subi	r22, 0xDF	; 223
    8446:	7f 4f       	sbci	r23, 0xFF	; 255
    8448:	ce 01       	movw	r24, r28
    844a:	01 96       	adiw	r24, 0x01	; 1
    844c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8450:	a4 01       	movw	r20, r8
    8452:	4f 56       	subi	r20, 0x6F	; 111
    8454:	5f 4f       	sbci	r21, 0xFF	; 255
    8456:	21 e0       	ldi	r18, 0x01	; 1
    8458:	b5 01       	movw	r22, r10
    845a:	ce 01       	movw	r24, r28
    845c:	01 96       	adiw	r24, 0x01	; 1
    845e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8462:	a8 96       	adiw	r28, 0x28	; 40
    8464:	0f b6       	in	r0, 0x3f	; 63
    8466:	f8 94       	cli
    8468:	de bf       	out	0x3e, r29	; 62
    846a:	0f be       	out	0x3f, r0	; 63
    846c:	cd bf       	out	0x3d, r28	; 61
    846e:	df 91       	pop	r29
    8470:	cf 91       	pop	r28
    8472:	1f 91       	pop	r17
    8474:	0f 91       	pop	r16
    8476:	ff 90       	pop	r15
    8478:	ef 90       	pop	r14
    847a:	cf 90       	pop	r12
    847c:	bf 90       	pop	r11
    847e:	af 90       	pop	r10
    8480:	9f 90       	pop	r9
    8482:	8f 90       	pop	r8
    8484:	08 95       	ret

00008486 <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
    8486:	fc 01       	movw	r30, r24
    8488:	85 81       	ldd	r24, Z+5	; 0x05
    848a:	1f 92       	push	r1
    848c:	8f 93       	push	r24
    848e:	84 81       	ldd	r24, Z+4	; 0x04
    8490:	1f 92       	push	r1
    8492:	8f 93       	push	r24
    8494:	83 81       	ldd	r24, Z+3	; 0x03
    8496:	1f 92       	push	r1
    8498:	8f 93       	push	r24
    849a:	82 81       	ldd	r24, Z+2	; 0x02
    849c:	1f 92       	push	r1
    849e:	8f 93       	push	r24
    84a0:	83 e6       	ldi	r24, 0x63	; 99
    84a2:	93 e0       	ldi	r25, 0x03	; 3
    84a4:	9f 93       	push	r25
    84a6:	8f 93       	push	r24
    84a8:	7f 93       	push	r23
    84aa:	6f 93       	push	r22
    84ac:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    84b0:	8d b7       	in	r24, 0x3d	; 61
    84b2:	9e b7       	in	r25, 0x3e	; 62
    84b4:	0c 96       	adiw	r24, 0x0c	; 12
    84b6:	0f b6       	in	r0, 0x3f	; 63
    84b8:	f8 94       	cli
    84ba:	9e bf       	out	0x3e, r25	; 62
    84bc:	0f be       	out	0x3f, r0	; 63
    84be:	8d bf       	out	0x3d, r24	; 61
    84c0:	08 95       	ret

000084c2 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjhhPc():
    84c2:	8f 92       	push	r8
    84c4:	9f 92       	push	r9
    84c6:	af 92       	push	r10
    84c8:	bf 92       	push	r11
    84ca:	cf 92       	push	r12
    84cc:	ef 92       	push	r14
    84ce:	ff 92       	push	r15
    84d0:	0f 93       	push	r16
    84d2:	1f 93       	push	r17
    84d4:	cf 93       	push	r28
    84d6:	df 93       	push	r29
    84d8:	cd b7       	in	r28, 0x3d	; 61
    84da:	de b7       	in	r29, 0x3e	; 62
    84dc:	ea 97       	sbiw	r28, 0x3a	; 58
    84de:	0f b6       	in	r0, 0x3f	; 63
    84e0:	f8 94       	cli
    84e2:	de bf       	out	0x3e, r29	; 62
    84e4:	0f be       	out	0x3f, r0	; 63
    84e6:	cd bf       	out	0x3d, r28	; 61
    84e8:	5c 01       	movw	r10, r24
    84ea:	4b 01       	movw	r8, r22
    84ec:	7a 01       	movw	r14, r20
    84ee:	89 01       	movw	r16, r18
    84f0:	70 e0       	ldi	r23, 0x00	; 0
    84f2:	60 e0       	ldi	r22, 0x00	; 0
    84f4:	81 e2       	ldi	r24, 0x21	; 33
    84f6:	9c e0       	ldi	r25, 0x0C	; 12
    84f8:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    84fc:	08 0d       	add	r16, r8
    84fe:	19 1d       	adc	r17, r9
    8500:	95 01       	movw	r18, r10
    8502:	2e 0d       	add	r18, r14
    8504:	3f 1d       	adc	r19, r15
    8506:	a4 01       	movw	r20, r8
    8508:	b5 01       	movw	r22, r10
    850a:	81 e2       	ldi	r24, 0x21	; 33
    850c:	9c e0       	ldi	r25, 0x0C	; 12
    850e:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8512:	61 ec       	ldi	r22, 0xC1	; 193
    8514:	76 e5       	ldi	r23, 0x56	; 86
    8516:	ce 01       	movw	r24, r28
    8518:	01 96       	adiw	r24, 0x01	; 1
    851a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    851e:	63 e3       	ldi	r22, 0x33	; 51
    8520:	78 e0       	ldi	r23, 0x08	; 8
    8522:	ce 01       	movw	r24, r28
    8524:	01 96       	adiw	r24, 0x01	; 1
    8526:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    852a:	00 e1       	ldi	r16, 0x10	; 16
    852c:	26 e0       	ldi	r18, 0x06	; 6
    852e:	48 e0       	ldi	r20, 0x08	; 8
    8530:	51 e1       	ldi	r21, 0x11	; 17
    8532:	6e e2       	ldi	r22, 0x2E	; 46
    8534:	ce 01       	movw	r24, r28
    8536:	85 96       	adiw	r24, 0x25	; 37
    8538:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    853c:	be 01       	movw	r22, r28
    853e:	6b 5d       	subi	r22, 0xDB	; 219
    8540:	7f 4f       	sbci	r23, 0xFF	; 255
    8542:	ce 01       	movw	r24, r28
    8544:	01 96       	adiw	r24, 0x01	; 1
    8546:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    854a:	85 e0       	ldi	r24, 0x05	; 5
    854c:	a8 0e       	add	r10, r24
    854e:	b1 1c       	adc	r11, r1
    8550:	a4 01       	movw	r20, r8
    8552:	46 5f       	subi	r20, 0xF6	; 246
    8554:	5f 4f       	sbci	r21, 0xFF	; 255
    8556:	c1 2c       	mov	r12, r1
    8558:	ee 24       	eor	r14, r14
    855a:	ea 94       	dec	r14
    855c:	fe 2c       	mov	r15, r14
    855e:	10 e0       	ldi	r17, 0x00	; 0
    8560:	00 e0       	ldi	r16, 0x00	; 0
    8562:	21 e0       	ldi	r18, 0x01	; 1
    8564:	b5 01       	movw	r22, r10
    8566:	ce 01       	movw	r24, r28
    8568:	01 96       	adiw	r24, 0x01	; 1
    856a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    856e:	6d ef       	ldi	r22, 0xFD	; 253
    8570:	76 e5       	ldi	r23, 0x56	; 86
    8572:	ce 01       	movw	r24, r28
    8574:	01 96       	adiw	r24, 0x01	; 1
    8576:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    857a:	63 e3       	ldi	r22, 0x33	; 51
    857c:	78 e0       	ldi	r23, 0x08	; 8
    857e:	ce 01       	movw	r24, r28
    8580:	01 96       	adiw	r24, 0x01	; 1
    8582:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8586:	6e e1       	ldi	r22, 0x1E	; 30
    8588:	71 e1       	ldi	r23, 0x11	; 17
    858a:	ce 01       	movw	r24, r28
    858c:	01 96       	adiw	r24, 0x01	; 1
    858e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8592:	a4 01       	movw	r20, r8
    8594:	47 5e       	subi	r20, 0xE7	; 231
    8596:	5f 4f       	sbci	r21, 0xFF	; 255
    8598:	21 e0       	ldi	r18, 0x01	; 1
    859a:	b5 01       	movw	r22, r10
    859c:	ce 01       	movw	r24, r28
    859e:	01 96       	adiw	r24, 0x01	; 1
    85a0:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    85a4:	6c ec       	ldi	r22, 0xCC	; 204
    85a6:	76 e5       	ldi	r23, 0x56	; 86
    85a8:	ce 01       	movw	r24, r28
    85aa:	01 96       	adiw	r24, 0x01	; 1
    85ac:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    85b0:	63 e3       	ldi	r22, 0x33	; 51
    85b2:	78 e0       	ldi	r23, 0x08	; 8
    85b4:	ce 01       	movw	r24, r28
    85b6:	01 96       	adiw	r24, 0x01	; 1
    85b8:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    85bc:	6f e6       	ldi	r22, 0x6F	; 111
    85be:	73 e0       	ldi	r23, 0x03	; 3
    85c0:	ce 01       	movw	r24, r28
    85c2:	01 96       	adiw	r24, 0x01	; 1
    85c4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    85c8:	a4 01       	movw	r20, r8
    85ca:	48 5d       	subi	r20, 0xD8	; 216
    85cc:	5f 4f       	sbci	r21, 0xFF	; 255
    85ce:	21 e0       	ldi	r18, 0x01	; 1
    85d0:	b5 01       	movw	r22, r10
    85d2:	ce 01       	movw	r24, r28
    85d4:	01 96       	adiw	r24, 0x01	; 1
    85d6:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    85da:	6e e0       	ldi	r22, 0x0E	; 14
    85dc:	71 e1       	ldi	r23, 0x11	; 17
    85de:	ce 01       	movw	r24, r28
    85e0:	c5 96       	adiw	r24, 0x35	; 53
    85e2:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    85e6:	be 01       	movw	r22, r28
    85e8:	6b 5d       	subi	r22, 0xDB	; 219
    85ea:	7f 4f       	sbci	r23, 0xFF	; 255
    85ec:	ce 01       	movw	r24, r28
    85ee:	c5 96       	adiw	r24, 0x35	; 53
    85f0:	0e 94 43 42 	call	0x8486	; 0x8486 <ip2CharArray(IPAddress, char*)>
    85f4:	63 ef       	ldi	r22, 0xF3	; 243
    85f6:	76 e5       	ldi	r23, 0x56	; 86
    85f8:	ce 01       	movw	r24, r28
    85fa:	01 96       	adiw	r24, 0x01	; 1
    85fc:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8600:	63 e3       	ldi	r22, 0x33	; 51
    8602:	78 e0       	ldi	r23, 0x08	; 8
    8604:	ce 01       	movw	r24, r28
    8606:	01 96       	adiw	r24, 0x01	; 1
    8608:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    860c:	be 01       	movw	r22, r28
    860e:	6b 5d       	subi	r22, 0xDB	; 219
    8610:	7f 4f       	sbci	r23, 0xFF	; 255
    8612:	ce 01       	movw	r24, r28
    8614:	01 96       	adiw	r24, 0x01	; 1
    8616:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    861a:	a4 01       	movw	r20, r8
    861c:	49 5c       	subi	r20, 0xC9	; 201
    861e:	5f 4f       	sbci	r21, 0xFF	; 255
    8620:	21 e0       	ldi	r18, 0x01	; 1
    8622:	b5 01       	movw	r22, r10
    8624:	ce 01       	movw	r24, r28
    8626:	01 96       	adiw	r24, 0x01	; 1
    8628:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    862c:	62 e1       	ldi	r22, 0x12	; 18
    862e:	71 e1       	ldi	r23, 0x11	; 17
    8630:	ce 01       	movw	r24, r28
    8632:	c5 96       	adiw	r24, 0x35	; 53
    8634:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    8638:	be 01       	movw	r22, r28
    863a:	6b 5d       	subi	r22, 0xDB	; 219
    863c:	7f 4f       	sbci	r23, 0xFF	; 255
    863e:	ce 01       	movw	r24, r28
    8640:	c5 96       	adiw	r24, 0x35	; 53
    8642:	0e 94 43 42 	call	0x8486	; 0x8486 <ip2CharArray(IPAddress, char*)>
    8646:	6a ee       	ldi	r22, 0xEA	; 234
    8648:	76 e5       	ldi	r23, 0x56	; 86
    864a:	ce 01       	movw	r24, r28
    864c:	01 96       	adiw	r24, 0x01	; 1
    864e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8652:	63 e3       	ldi	r22, 0x33	; 51
    8654:	78 e0       	ldi	r23, 0x08	; 8
    8656:	ce 01       	movw	r24, r28
    8658:	01 96       	adiw	r24, 0x01	; 1
    865a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    865e:	be 01       	movw	r22, r28
    8660:	6b 5d       	subi	r22, 0xDB	; 219
    8662:	7f 4f       	sbci	r23, 0xFF	; 255
    8664:	ce 01       	movw	r24, r28
    8666:	01 96       	adiw	r24, 0x01	; 1
    8668:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    866c:	a4 01       	movw	r20, r8
    866e:	4a 5b       	subi	r20, 0xBA	; 186
    8670:	5f 4f       	sbci	r21, 0xFF	; 255
    8672:	21 e0       	ldi	r18, 0x01	; 1
    8674:	b5 01       	movw	r22, r10
    8676:	ce 01       	movw	r24, r28
    8678:	01 96       	adiw	r24, 0x01	; 1
    867a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    867e:	6a e1       	ldi	r22, 0x1A	; 26
    8680:	71 e1       	ldi	r23, 0x11	; 17
    8682:	ce 01       	movw	r24, r28
    8684:	c5 96       	adiw	r24, 0x35	; 53
    8686:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    868a:	be 01       	movw	r22, r28
    868c:	6b 5d       	subi	r22, 0xDB	; 219
    868e:	7f 4f       	sbci	r23, 0xFF	; 255
    8690:	ce 01       	movw	r24, r28
    8692:	c5 96       	adiw	r24, 0x35	; 53
    8694:	0e 94 43 42 	call	0x8486	; 0x8486 <ip2CharArray(IPAddress, char*)>
    8698:	6c ed       	ldi	r22, 0xDC	; 220
    869a:	76 e5       	ldi	r23, 0x56	; 86
    869c:	ce 01       	movw	r24, r28
    869e:	01 96       	adiw	r24, 0x01	; 1
    86a0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    86a4:	63 e3       	ldi	r22, 0x33	; 51
    86a6:	78 e0       	ldi	r23, 0x08	; 8
    86a8:	ce 01       	movw	r24, r28
    86aa:	01 96       	adiw	r24, 0x01	; 1
    86ac:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    86b0:	be 01       	movw	r22, r28
    86b2:	6b 5d       	subi	r22, 0xDB	; 219
    86b4:	7f 4f       	sbci	r23, 0xFF	; 255
    86b6:	ce 01       	movw	r24, r28
    86b8:	01 96       	adiw	r24, 0x01	; 1
    86ba:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    86be:	a4 01       	movw	r20, r8
    86c0:	4b 5a       	subi	r20, 0xAB	; 171
    86c2:	5f 4f       	sbci	r21, 0xFF	; 255
    86c4:	21 e0       	ldi	r18, 0x01	; 1
    86c6:	b5 01       	movw	r22, r10
    86c8:	ce 01       	movw	r24, r28
    86ca:	01 96       	adiw	r24, 0x01	; 1
    86cc:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    86d0:	66 e1       	ldi	r22, 0x16	; 22
    86d2:	71 e1       	ldi	r23, 0x11	; 17
    86d4:	ce 01       	movw	r24, r28
    86d6:	c5 96       	adiw	r24, 0x35	; 53
    86d8:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    86dc:	be 01       	movw	r22, r28
    86de:	6b 5d       	subi	r22, 0xDB	; 219
    86e0:	7f 4f       	sbci	r23, 0xFF	; 255
    86e2:	ce 01       	movw	r24, r28
    86e4:	c5 96       	adiw	r24, 0x35	; 53
    86e6:	0e 94 43 42 	call	0x8486	; 0x8486 <ip2CharArray(IPAddress, char*)>
    86ea:	61 ed       	ldi	r22, 0xD1	; 209
    86ec:	76 e5       	ldi	r23, 0x56	; 86
    86ee:	ce 01       	movw	r24, r28
    86f0:	01 96       	adiw	r24, 0x01	; 1
    86f2:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    86f6:	63 e3       	ldi	r22, 0x33	; 51
    86f8:	78 e0       	ldi	r23, 0x08	; 8
    86fa:	ce 01       	movw	r24, r28
    86fc:	01 96       	adiw	r24, 0x01	; 1
    86fe:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8702:	be 01       	movw	r22, r28
    8704:	6b 5d       	subi	r22, 0xDB	; 219
    8706:	7f 4f       	sbci	r23, 0xFF	; 255
    8708:	ce 01       	movw	r24, r28
    870a:	01 96       	adiw	r24, 0x01	; 1
    870c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8710:	a4 01       	movw	r20, r8
    8712:	4c 59       	subi	r20, 0x9C	; 156
    8714:	5f 4f       	sbci	r21, 0xFF	; 255
    8716:	21 e0       	ldi	r18, 0x01	; 1
    8718:	b5 01       	movw	r22, r10
    871a:	ce 01       	movw	r24, r28
    871c:	01 96       	adiw	r24, 0x01	; 1
    871e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8722:	ea 96       	adiw	r28, 0x3a	; 58
    8724:	0f b6       	in	r0, 0x3f	; 63
    8726:	f8 94       	cli
    8728:	de bf       	out	0x3e, r29	; 62
    872a:	0f be       	out	0x3f, r0	; 63
    872c:	cd bf       	out	0x3d, r28	; 61
    872e:	df 91       	pop	r29
    8730:	cf 91       	pop	r28
    8732:	1f 91       	pop	r17
    8734:	0f 91       	pop	r16
    8736:	ff 90       	pop	r15
    8738:	ef 90       	pop	r14
    873a:	cf 90       	pop	r12
    873c:	bf 90       	pop	r11
    873e:	af 90       	pop	r10
    8740:	9f 90       	pop	r9
    8742:	8f 90       	pop	r8
    8744:	08 95       	ret

00008746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    8746:	af 92       	push	r10
    8748:	bf 92       	push	r11
    874a:	cf 92       	push	r12
    874c:	df 92       	push	r13
    874e:	ef 92       	push	r14
    8750:	ff 92       	push	r15
    8752:	0f 93       	push	r16
    8754:	1f 93       	push	r17
    8756:	cf 93       	push	r28
    8758:	df 93       	push	r29
    875a:	8a 30       	cpi	r24, 0x0A	; 10
    875c:	88 f5       	brcc	.+98     	; 0x87c0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    875e:	7b 01       	movw	r14, r22
    8760:	94 e1       	ldi	r25, 0x14	; 20
    8762:	89 9f       	mul	r24, r25
    8764:	e0 01       	movw	r28, r0
    8766:	11 24       	eor	r1, r1
    8768:	6e 01       	movw	r12, r28
    876a:	e6 e5       	ldi	r30, 0x56	; 86
    876c:	ce 1a       	sub	r12, r30
    876e:	ea ef       	ldi	r30, 0xFA	; 250
    8770:	de 0a       	sbc	r13, r30
    8772:	8a 01       	movw	r16, r20
    8774:	5e 01       	movw	r10, r28
    8776:	f4 e4       	ldi	r31, 0x44	; 68
    8778:	af 1a       	sub	r10, r31
    877a:	fa ef       	ldi	r31, 0xFA	; 250
    877c:	bf 0a       	sbc	r11, r31
    877e:	c6 01       	movw	r24, r12
    8780:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    8784:	f8 01       	movw	r30, r16
    8786:	81 93       	st	Z+, r24
    8788:	8f 01       	movw	r16, r30
    878a:	10 82       	st	Z, r1
    878c:	88 23       	and	r24, r24
    878e:	31 f0       	breq	.+12     	; 0x879c <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    8790:	ff ef       	ldi	r31, 0xFF	; 255
    8792:	cf 1a       	sub	r12, r31
    8794:	df 0a       	sbc	r13, r31
    8796:	ca 14       	cp	r12, r10
    8798:	db 04       	cpc	r13, r11
    879a:	89 f7       	brne	.-30     	; 0x877e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
    879c:	ce 01       	movw	r24, r28
    879e:	83 54       	subi	r24, 0x43	; 67
    87a0:	9a 4f       	sbci	r25, 0xFA	; 250
    87a2:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    87a6:	f7 01       	movw	r30, r14
    87a8:	80 83       	st	Z, r24
    87aa:	df 91       	pop	r29
    87ac:	cf 91       	pop	r28
    87ae:	1f 91       	pop	r17
    87b0:	0f 91       	pop	r16
    87b2:	ff 90       	pop	r15
    87b4:	ef 90       	pop	r14
    87b6:	df 90       	pop	r13
    87b8:	cf 90       	pop	r12
    87ba:	bf 90       	pop	r11
    87bc:	af 90       	pop	r10
    87be:	08 95       	ret
    87c0:	8f ef       	ldi	r24, 0xFF	; 255
    87c2:	fb 01       	movw	r30, r22
    87c4:	f1 cf       	rjmp	.-30     	; 0x87a8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

000087c6 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    87c6:	1f 93       	push	r17
    87c8:	cf 93       	push	r28
    87ca:	df 93       	push	r29
    87cc:	cd b7       	in	r28, 0x3d	; 61
    87ce:	de b7       	in	r29, 0x3e	; 62
    87d0:	63 97       	sbiw	r28, 0x13	; 19
    87d2:	0f b6       	in	r0, 0x3f	; 63
    87d4:	f8 94       	cli
    87d6:	de bf       	out	0x3e, r29	; 62
    87d8:	0f be       	out	0x3f, r0	; 63
    87da:	cd bf       	out	0x3d, r28	; 61
    87dc:	16 2f       	mov	r17, r22
    87de:	ae 01       	movw	r20, r28
    87e0:	4f 5f       	subi	r20, 0xFF	; 255
    87e2:	5f 4f       	sbci	r21, 0xFF	; 255
    87e4:	be 01       	movw	r22, r28
    87e6:	6d 5e       	subi	r22, 0xED	; 237
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	81 2f       	mov	r24, r17
    87ec:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    87f0:	70 e0       	ldi	r23, 0x00	; 0
    87f2:	60 e0       	ldi	r22, 0x00	; 0
    87f4:	87 e6       	ldi	r24, 0x67	; 103
    87f6:	90 e0       	ldi	r25, 0x00	; 0
    87f8:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    87fc:	21 e7       	ldi	r18, 0x71	; 113
    87fe:	36 e4       	ldi	r19, 0x46	; 70
    8800:	41 2f       	mov	r20, r17
    8802:	62 e1       	ldi	r22, 0x12	; 18
    8804:	ce 01       	movw	r24, r28
    8806:	01 96       	adiw	r24, 0x01	; 1
    8808:	0e 94 74 3b 	call	0x76e8	; 0x76e8 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    880c:	63 96       	adiw	r28, 0x13	; 19
    880e:	0f b6       	in	r0, 0x3f	; 63
    8810:	f8 94       	cli
    8812:	de bf       	out	0x3e, r29	; 62
    8814:	0f be       	out	0x3f, r0	; 63
    8816:	cd bf       	out	0x3d, r28	; 61
    8818:	df 91       	pop	r29
    881a:	cf 91       	pop	r28
    881c:	1f 91       	pop	r17
    881e:	08 95       	ret

00008820 <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    8820:	df 92       	push	r13
    8822:	ef 92       	push	r14
    8824:	ff 92       	push	r15
    8826:	0f 93       	push	r16
    8828:	1f 93       	push	r17
    882a:	cf 93       	push	r28
    882c:	df 93       	push	r29
    882e:	8a 30       	cpi	r24, 0x0A	; 10
    8830:	c0 f4       	brcc	.+48     	; 0x8862 <remote_tds_set_name(unsigned char, char*)+0x42>
    8832:	94 e1       	ldi	r25, 0x14	; 20
    8834:	89 9f       	mul	r24, r25
    8836:	e0 01       	movw	r28, r0
    8838:	11 24       	eor	r1, r1
    883a:	7b 01       	movw	r14, r22
    883c:	8e 01       	movw	r16, r28
    883e:	06 55       	subi	r16, 0x56	; 86
    8840:	1a 4f       	sbci	r17, 0xFA	; 250
    8842:	c4 54       	subi	r28, 0x44	; 68
    8844:	da 4f       	sbci	r29, 0xFA	; 250
    8846:	f7 01       	movw	r30, r14
    8848:	d1 90       	ld	r13, Z+
    884a:	7f 01       	movw	r14, r30
    884c:	6d 2d       	mov	r22, r13
    884e:	c8 01       	movw	r24, r16
    8850:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    8854:	dd 20       	and	r13, r13
    8856:	29 f0       	breq	.+10     	; 0x8862 <remote_tds_set_name(unsigned char, char*)+0x42>
    8858:	0f 5f       	subi	r16, 0xFF	; 255
    885a:	1f 4f       	sbci	r17, 0xFF	; 255
    885c:	0c 17       	cp	r16, r28
    885e:	1d 07       	cpc	r17, r29
    8860:	91 f7       	brne	.-28     	; 0x8846 <remote_tds_set_name(unsigned char, char*)+0x26>
    8862:	df 91       	pop	r29
    8864:	cf 91       	pop	r28
    8866:	1f 91       	pop	r17
    8868:	0f 91       	pop	r16
    886a:	ff 90       	pop	r15
    886c:	ef 90       	pop	r14
    886e:	df 90       	pop	r13
    8870:	08 95       	ret

00008872 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    8872:	cf 93       	push	r28
    8874:	df 93       	push	r29
    8876:	8a 30       	cpi	r24, 0x0A	; 10
    8878:	68 f4       	brcc	.+26     	; 0x8894 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    887a:	eb 01       	movw	r28, r22
    887c:	24 e1       	ldi	r18, 0x14	; 20
    887e:	82 9f       	mul	r24, r18
    8880:	c0 01       	movw	r24, r0
    8882:	11 24       	eor	r1, r1
    8884:	83 54       	subi	r24, 0x43	; 67
    8886:	9a 4f       	sbci	r25, 0xFA	; 250
    8888:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    888c:	88 83       	st	Y, r24
    888e:	df 91       	pop	r29
    8890:	cf 91       	pop	r28
    8892:	08 95       	ret
    8894:	8f ef       	ldi	r24, 0xFF	; 255
    8896:	fb 01       	movw	r30, r22
    8898:	80 83       	st	Z, r24
    889a:	f9 cf       	rjmp	.-14     	; 0x888e <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000889c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    889c:	cf 92       	push	r12
    889e:	df 92       	push	r13
    88a0:	ff 92       	push	r15
    88a2:	0f 93       	push	r16
    88a4:	1f 93       	push	r17
    88a6:	cf 93       	push	r28
    88a8:	df 93       	push	r29
    88aa:	1f 92       	push	r1
    88ac:	cd b7       	in	r28, 0x3d	; 61
    88ae:	de b7       	in	r29, 0x3e	; 62
    88b0:	f8 2e       	mov	r15, r24
    88b2:	69 01       	movw	r12, r18
    88b4:	62 e1       	ldi	r22, 0x12	; 18
    88b6:	7a e5       	ldi	r23, 0x5A	; 90
    88b8:	c9 01       	movw	r24, r18
    88ba:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    88be:	f8 01       	movw	r30, r16
    88c0:	10 82       	st	Z, r1
    88c2:	be 01       	movw	r22, r28
    88c4:	6f 5f       	subi	r22, 0xFF	; 255
    88c6:	7f 4f       	sbci	r23, 0xFF	; 255
    88c8:	8f 2d       	mov	r24, r15
    88ca:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    88ce:	89 81       	ldd	r24, Y+1	; 0x01
    88d0:	81 30       	cpi	r24, 0x01	; 1
    88d2:	39 f4       	brne	.+14     	; 0x88e2 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    88d4:	a6 01       	movw	r20, r12
    88d6:	be 01       	movw	r22, r28
    88d8:	6f 5f       	subi	r22, 0xFF	; 255
    88da:	7f 4f       	sbci	r23, 0xFF	; 255
    88dc:	8f 2d       	mov	r24, r15
    88de:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    88e2:	0f 90       	pop	r0
    88e4:	df 91       	pop	r29
    88e6:	cf 91       	pop	r28
    88e8:	1f 91       	pop	r17
    88ea:	0f 91       	pop	r16
    88ec:	ff 90       	pop	r15
    88ee:	df 90       	pop	r13
    88f0:	cf 90       	pop	r12
    88f2:	08 95       	ret

000088f4 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    88f4:	1f 93       	push	r17
    88f6:	cf 93       	push	r28
    88f8:	df 93       	push	r29
    88fa:	1f 92       	push	r1
    88fc:	cd b7       	in	r28, 0x3d	; 61
    88fe:	de b7       	in	r29, 0x3e	; 62
    8900:	14 2f       	mov	r17, r20
    8902:	be 01       	movw	r22, r28
    8904:	6f 5f       	subi	r22, 0xFF	; 255
    8906:	7f 4f       	sbci	r23, 0xFF	; 255
    8908:	84 2f       	mov	r24, r20
    890a:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    890e:	89 81       	ldd	r24, Y+1	; 0x01
    8910:	81 30       	cpi	r24, 0x01	; 1
    8912:	31 f4       	brne	.+12     	; 0x8920 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    8914:	61 2f       	mov	r22, r17
    8916:	70 e0       	ldi	r23, 0x00	; 0
    8918:	87 e0       	ldi	r24, 0x07	; 7
    891a:	90 e0       	ldi	r25, 0x00	; 0
    891c:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    8920:	0f 90       	pop	r0
    8922:	df 91       	pop	r29
    8924:	cf 91       	pop	r28
    8926:	1f 91       	pop	r17
    8928:	08 95       	ret

0000892a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    892a:	9f 92       	push	r9
    892c:	af 92       	push	r10
    892e:	bf 92       	push	r11
    8930:	cf 92       	push	r12
    8932:	df 92       	push	r13
    8934:	ef 92       	push	r14
    8936:	0f 93       	push	r16
    8938:	1f 93       	push	r17
    893a:	cf 93       	push	r28
    893c:	df 93       	push	r29
    893e:	cd b7       	in	r28, 0x3d	; 61
    8940:	de b7       	in	r29, 0x3e	; 62
    8942:	65 97       	sbiw	r28, 0x15	; 21
    8944:	0f b6       	in	r0, 0x3f	; 63
    8946:	f8 94       	cli
    8948:	de bf       	out	0x3e, r29	; 62
    894a:	0f be       	out	0x3f, r0	; 63
    894c:	cd bf       	out	0x3d, r28	; 61
    894e:	98 2e       	mov	r9, r24
    8950:	e4 2e       	mov	r14, r20
    8952:	69 01       	movw	r12, r18
    8954:	58 01       	movw	r10, r16
    8956:	6e eb       	ldi	r22, 0xBE	; 190
    8958:	75 e0       	ldi	r23, 0x05	; 5
    895a:	c9 01       	movw	r24, r18
    895c:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    8960:	6e eb       	ldi	r22, 0xBE	; 190
    8962:	75 e0       	ldi	r23, 0x05	; 5
    8964:	c8 01       	movw	r24, r16
    8966:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    896a:	00 e0       	ldi	r16, 0x00	; 0
    896c:	10 e0       	ldi	r17, 0x00	; 0
    896e:	80 2f       	mov	r24, r16
    8970:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <tds_used(unsigned char)>
    8974:	81 30       	cpi	r24, 0x01	; 1
    8976:	11 f4       	brne	.+4      	; 0x897c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    8978:	ee 20       	and	r14, r14
    897a:	19 f0       	breq	.+6      	; 0x8982 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    897c:	81 e0       	ldi	r24, 0x01	; 1
    897e:	e8 12       	cpse	r14, r24
    8980:	25 c0       	rjmp	.+74     	; 0x89cc <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa2>
    8982:	91 12       	cpse	r9, r17
    8984:	22 c0       	rjmp	.+68     	; 0x89ca <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa0>
    8986:	be 01       	movw	r22, r28
    8988:	6f 5f       	subi	r22, 0xFF	; 255
    898a:	7f 4f       	sbci	r23, 0xFF	; 255
    898c:	80 2f       	mov	r24, r16
    898e:	0e 94 86 8b 	call	0x1170c	; 0x1170c <tds_get_name(unsigned char, char*)>
    8992:	be 01       	movw	r22, r28
    8994:	6f 5f       	subi	r22, 0xFF	; 255
    8996:	7f 4f       	sbci	r23, 0xFF	; 255
    8998:	c5 01       	movw	r24, r10
    899a:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    899e:	62 e7       	ldi	r22, 0x72	; 114
    89a0:	7a e5       	ldi	r23, 0x5A	; 90
    89a2:	c6 01       	movw	r24, r12
    89a4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    89a8:	65 96       	adiw	r28, 0x15	; 21
    89aa:	0f b6       	in	r0, 0x3f	; 63
    89ac:	f8 94       	cli
    89ae:	de bf       	out	0x3e, r29	; 62
    89b0:	0f be       	out	0x3f, r0	; 63
    89b2:	cd bf       	out	0x3d, r28	; 61
    89b4:	df 91       	pop	r29
    89b6:	cf 91       	pop	r28
    89b8:	1f 91       	pop	r17
    89ba:	0f 91       	pop	r16
    89bc:	ef 90       	pop	r14
    89be:	df 90       	pop	r13
    89c0:	cf 90       	pop	r12
    89c2:	bf 90       	pop	r11
    89c4:	af 90       	pop	r10
    89c6:	9f 90       	pop	r9
    89c8:	08 95       	ret
    89ca:	1f 5f       	subi	r17, 0xFF	; 255
    89cc:	0f 5f       	subi	r16, 0xFF	; 255
    89ce:	06 30       	cpi	r16, 0x06	; 6
    89d0:	71 f6       	brne	.-100    	; 0x896e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    89d2:	00 e0       	ldi	r16, 0x00	; 0
    89d4:	be 01       	movw	r22, r28
    89d6:	6b 5e       	subi	r22, 0xEB	; 235
    89d8:	7f 4f       	sbci	r23, 0xFF	; 255
    89da:	80 2f       	mov	r24, r16
    89dc:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    89e0:	8d 89       	ldd	r24, Y+21	; 0x15
    89e2:	81 30       	cpi	r24, 0x01	; 1
    89e4:	11 f4       	brne	.+4      	; 0x89ea <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
    89e6:	ee 20       	and	r14, r14
    89e8:	19 f0       	breq	.+6      	; 0x89f0 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc6>
    89ea:	81 e0       	ldi	r24, 0x01	; 1
    89ec:	e8 12       	cpse	r14, r24
    89ee:	15 c0       	rjmp	.+42     	; 0x8a1a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    89f0:	91 12       	cpse	r9, r17
    89f2:	12 c0       	rjmp	.+36     	; 0x8a18 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xee>
    89f4:	ae 01       	movw	r20, r28
    89f6:	4f 5f       	subi	r20, 0xFF	; 255
    89f8:	5f 4f       	sbci	r21, 0xFF	; 255
    89fa:	be 01       	movw	r22, r28
    89fc:	6b 5e       	subi	r22, 0xEB	; 235
    89fe:	7f 4f       	sbci	r23, 0xFF	; 255
    8a00:	80 2f       	mov	r24, r16
    8a02:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8a06:	be 01       	movw	r22, r28
    8a08:	6f 5f       	subi	r22, 0xFF	; 255
    8a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a0c:	c5 01       	movw	r24, r10
    8a0e:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    8a12:	63 e6       	ldi	r22, 0x63	; 99
    8a14:	7a e5       	ldi	r23, 0x5A	; 90
    8a16:	c5 cf       	rjmp	.-118    	; 0x89a2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    8a18:	1f 5f       	subi	r17, 0xFF	; 255
    8a1a:	0f 5f       	subi	r16, 0xFF	; 255
    8a1c:	0a 30       	cpi	r16, 0x0A	; 10
    8a1e:	d1 f6       	brne	.-76     	; 0x89d4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xaa>
    8a20:	c3 cf       	rjmp	.-122    	; 0x89a8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7e>

00008a22 <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    8a22:	8a 30       	cpi	r24, 0x0A	; 10
    8a24:	40 f4       	brcc	.+16     	; 0x8a36 <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    8a26:	24 e1       	ldi	r18, 0x14	; 20
    8a28:	82 9f       	mul	r24, r18
    8a2a:	c0 01       	movw	r24, r0
    8a2c:	11 24       	eor	r1, r1
    8a2e:	83 54       	subi	r24, 0x43	; 67
    8a30:	9a 4f       	sbci	r25, 0xFA	; 250
    8a32:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    8a36:	08 95       	ret

00008a38 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    8a38:	cf 93       	push	r28
    8a3a:	df 93       	push	r29
    8a3c:	c8 2f       	mov	r28, r24
    8a3e:	d6 2f       	mov	r29, r22
    8a40:	ba 01       	movw	r22, r20
    8a42:	0e 94 10 44 	call	0x8820	; 0x8820 <remote_tds_set_name(unsigned char, char*)>
    8a46:	6d 2f       	mov	r22, r29
    8a48:	8c 2f       	mov	r24, r28
    8a4a:	df 91       	pop	r29
    8a4c:	cf 91       	pop	r28
    8a4e:	0c 94 11 45 	jmp	0x8a22	; 0x8a22 <remote_tds_set_active(unsigned char, unsigned char)>

00008a52 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    8a52:	cf 93       	push	r28
    8a54:	df 93       	push	r29
    8a56:	cd b7       	in	r28, 0x3d	; 61
    8a58:	de b7       	in	r29, 0x3e	; 62
    8a5a:	62 97       	sbiw	r28, 0x12	; 18
    8a5c:	0f b6       	in	r0, 0x3f	; 63
    8a5e:	f8 94       	cli
    8a60:	de bf       	out	0x3e, r29	; 62
    8a62:	0f be       	out	0x3f, r0	; 63
    8a64:	cd bf       	out	0x3d, r28	; 61
    8a66:	e1 e0       	ldi	r30, 0x01	; 1
    8a68:	f0 e0       	ldi	r31, 0x00	; 0
    8a6a:	ec 0f       	add	r30, r28
    8a6c:	fd 1f       	adc	r31, r29
    8a6e:	e8 0f       	add	r30, r24
    8a70:	f1 1d       	adc	r31, r1
    8a72:	10 82       	st	Z, r1
    8a74:	ae 01       	movw	r20, r28
    8a76:	4f 5f       	subi	r20, 0xFF	; 255
    8a78:	5f 4f       	sbci	r21, 0xFF	; 255
    8a7a:	60 e0       	ldi	r22, 0x00	; 0
    8a7c:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8a80:	62 96       	adiw	r28, 0x12	; 18
    8a82:	0f b6       	in	r0, 0x3f	; 63
    8a84:	f8 94       	cli
    8a86:	de bf       	out	0x3e, r29	; 62
    8a88:	0f be       	out	0x3f, r0	; 63
    8a8a:	cd bf       	out	0x3d, r28	; 61
    8a8c:	df 91       	pop	r29
    8a8e:	cf 91       	pop	r28
    8a90:	08 95       	ret

00008a92 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    8a92:	86 2f       	mov	r24, r22
    8a94:	0e 94 29 45 	call	0x8a52	; 0x8a52 <remote_tds_clear(unsigned char)>
    8a98:	0c 94 31 3a 	jmp	0x7462	; 0x7462 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

00008a9c <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    8a9c:	cf 93       	push	r28
    8a9e:	df 93       	push	r29
    8aa0:	cd b7       	in	r28, 0x3d	; 61
    8aa2:	de b7       	in	r29, 0x3e	; 62
    8aa4:	c1 58       	subi	r28, 0x81	; 129
    8aa6:	d1 09       	sbc	r29, r1
    8aa8:	0f b6       	in	r0, 0x3f	; 63
    8aaa:	f8 94       	cli
    8aac:	de bf       	out	0x3e, r29	; 62
    8aae:	0f be       	out	0x3f, r0	; 63
    8ab0:	cd bf       	out	0x3d, r28	; 61
    8ab2:	cf 57       	subi	r28, 0x7F	; 127
    8ab4:	df 4f       	sbci	r29, 0xFF	; 255
    8ab6:	18 82       	st	Y, r1
    8ab8:	c1 58       	subi	r28, 0x81	; 129
    8aba:	d0 40       	sbci	r29, 0x00	; 0
    8abc:	ae 01       	movw	r20, r28
    8abe:	4f 5b       	subi	r20, 0xBF	; 191
    8ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ac2:	be 01       	movw	r22, r28
    8ac4:	6f 57       	subi	r22, 0x7F	; 127
    8ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ac8:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8acc:	cf 57       	subi	r28, 0x7F	; 127
    8ace:	df 4f       	sbci	r29, 0xFF	; 255
    8ad0:	88 81       	ld	r24, Y
    8ad2:	c1 58       	subi	r28, 0x81	; 129
    8ad4:	d0 40       	sbci	r29, 0x00	; 0
    8ad6:	81 30       	cpi	r24, 0x01	; 1
    8ad8:	a1 f4       	brne	.+40     	; 0x8b02 <remote_tds_subscibe_topic(unsigned char)+0x66>
    8ada:	64 e7       	ldi	r22, 0x74	; 116
    8adc:	73 e0       	ldi	r23, 0x03	; 3
    8ade:	ce 01       	movw	r24, r28
    8ae0:	01 96       	adiw	r24, 0x01	; 1
    8ae2:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    8ae6:	be 01       	movw	r22, r28
    8ae8:	6f 5b       	subi	r22, 0xBF	; 191
    8aea:	7f 4f       	sbci	r23, 0xFF	; 255
    8aec:	ce 01       	movw	r24, r28
    8aee:	01 96       	adiw	r24, 0x01	; 1
    8af0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8af4:	be 01       	movw	r22, r28
    8af6:	6f 5f       	subi	r22, 0xFF	; 255
    8af8:	7f 4f       	sbci	r23, 0xFF	; 255
    8afa:	85 e1       	ldi	r24, 0x15	; 21
    8afc:	9e e0       	ldi	r25, 0x0E	; 14
    8afe:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    8b02:	cf 57       	subi	r28, 0x7F	; 127
    8b04:	df 4f       	sbci	r29, 0xFF	; 255
    8b06:	0f b6       	in	r0, 0x3f	; 63
    8b08:	f8 94       	cli
    8b0a:	de bf       	out	0x3e, r29	; 62
    8b0c:	0f be       	out	0x3f, r0	; 63
    8b0e:	cd bf       	out	0x3d, r28	; 61
    8b10:	df 91       	pop	r29
    8b12:	cf 91       	pop	r28
    8b14:	08 95       	ret

00008b16 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    8b16:	86 2f       	mov	r24, r22
    8b18:	0c 94 4e 45 	jmp	0x8a9c	; 0x8a9c <remote_tds_subscibe_topic(unsigned char)>

00008b1c <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    8b1c:	cf 93       	push	r28
    8b1e:	df 93       	push	r29
    8b20:	cd b7       	in	r28, 0x3d	; 61
    8b22:	de b7       	in	r29, 0x3e	; 62
    8b24:	c1 58       	subi	r28, 0x81	; 129
    8b26:	d1 09       	sbc	r29, r1
    8b28:	0f b6       	in	r0, 0x3f	; 63
    8b2a:	f8 94       	cli
    8b2c:	de bf       	out	0x3e, r29	; 62
    8b2e:	0f be       	out	0x3f, r0	; 63
    8b30:	cd bf       	out	0x3d, r28	; 61
    8b32:	cf 57       	subi	r28, 0x7F	; 127
    8b34:	df 4f       	sbci	r29, 0xFF	; 255
    8b36:	18 82       	st	Y, r1
    8b38:	c1 58       	subi	r28, 0x81	; 129
    8b3a:	d0 40       	sbci	r29, 0x00	; 0
    8b3c:	ae 01       	movw	r20, r28
    8b3e:	4f 5b       	subi	r20, 0xBF	; 191
    8b40:	5f 4f       	sbci	r21, 0xFF	; 255
    8b42:	be 01       	movw	r22, r28
    8b44:	6f 57       	subi	r22, 0x7F	; 127
    8b46:	7f 4f       	sbci	r23, 0xFF	; 255
    8b48:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8b4c:	cf 57       	subi	r28, 0x7F	; 127
    8b4e:	df 4f       	sbci	r29, 0xFF	; 255
    8b50:	88 81       	ld	r24, Y
    8b52:	c1 58       	subi	r28, 0x81	; 129
    8b54:	d0 40       	sbci	r29, 0x00	; 0
    8b56:	81 30       	cpi	r24, 0x01	; 1
    8b58:	a1 f4       	brne	.+40     	; 0x8b82 <remote_tds_unsubscibe_topic(unsigned char)+0x66>
    8b5a:	64 e7       	ldi	r22, 0x74	; 116
    8b5c:	73 e0       	ldi	r23, 0x03	; 3
    8b5e:	ce 01       	movw	r24, r28
    8b60:	01 96       	adiw	r24, 0x01	; 1
    8b62:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    8b66:	be 01       	movw	r22, r28
    8b68:	6f 5b       	subi	r22, 0xBF	; 191
    8b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b6c:	ce 01       	movw	r24, r28
    8b6e:	01 96       	adiw	r24, 0x01	; 1
    8b70:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8b74:	be 01       	movw	r22, r28
    8b76:	6f 5f       	subi	r22, 0xFF	; 255
    8b78:	7f 4f       	sbci	r23, 0xFF	; 255
    8b7a:	85 e1       	ldi	r24, 0x15	; 21
    8b7c:	9e e0       	ldi	r25, 0x0E	; 14
    8b7e:	0e 94 2c c6 	call	0x18c58	; 0x18c58 <PubSubClient::unsubscribe(char const*)>
    8b82:	cf 57       	subi	r28, 0x7F	; 127
    8b84:	df 4f       	sbci	r29, 0xFF	; 255
    8b86:	0f b6       	in	r0, 0x3f	; 63
    8b88:	f8 94       	cli
    8b8a:	de bf       	out	0x3e, r29	; 62
    8b8c:	0f be       	out	0x3f, r0	; 63
    8b8e:	cd bf       	out	0x3d, r28	; 61
    8b90:	df 91       	pop	r29
    8b92:	cf 91       	pop	r28
    8b94:	08 95       	ret

00008b96 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    8b96:	1f 93       	push	r17
    8b98:	cf 93       	push	r28
    8b9a:	df 93       	push	r29
    8b9c:	1f 92       	push	r1
    8b9e:	cd b7       	in	r28, 0x3d	; 61
    8ba0:	de b7       	in	r29, 0x3e	; 62
    8ba2:	10 e0       	ldi	r17, 0x00	; 0
    8ba4:	be 01       	movw	r22, r28
    8ba6:	6f 5f       	subi	r22, 0xFF	; 255
    8ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    8baa:	81 2f       	mov	r24, r17
    8bac:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    8bb0:	89 81       	ldd	r24, Y+1	; 0x01
    8bb2:	88 23       	and	r24, r24
    8bb4:	21 f0       	breq	.+8      	; 0x8bbe <remote_tds_find_free()+0x28>
    8bb6:	1f 5f       	subi	r17, 0xFF	; 255
    8bb8:	1a 30       	cpi	r17, 0x0A	; 10
    8bba:	a1 f7       	brne	.-24     	; 0x8ba4 <remote_tds_find_free()+0xe>
    8bbc:	1f ef       	ldi	r17, 0xFF	; 255
    8bbe:	81 2f       	mov	r24, r17
    8bc0:	0f 90       	pop	r0
    8bc2:	df 91       	pop	r29
    8bc4:	cf 91       	pop	r28
    8bc6:	1f 91       	pop	r17
    8bc8:	08 95       	ret

00008bca <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    8bca:	1f 93       	push	r17
    8bcc:	cf 93       	push	r28
    8bce:	df 93       	push	r29
    8bd0:	00 d0       	rcall	.+0      	; 0x8bd2 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    8bd2:	1f 92       	push	r1
    8bd4:	1f 92       	push	r1
    8bd6:	cd b7       	in	r28, 0x3d	; 61
    8bd8:	de b7       	in	r29, 0x3e	; 62
    8bda:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <remote_tds_find_free()>
    8bde:	18 2f       	mov	r17, r24
    8be0:	8f 3f       	cpi	r24, 0xFF	; 255
    8be2:	a1 f0       	breq	.+40     	; 0x8c0c <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x42>
    8be4:	6f e1       	ldi	r22, 0x1F	; 31
    8be6:	7a e5       	ldi	r23, 0x5A	; 90
    8be8:	ce 01       	movw	r24, r28
    8bea:	01 96       	adiw	r24, 0x01	; 1
    8bec:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8bf0:	70 e0       	ldi	r23, 0x00	; 0
    8bf2:	60 e0       	ldi	r22, 0x00	; 0
    8bf4:	87 e6       	ldi	r24, 0x67	; 103
    8bf6:	90 e0       	ldi	r25, 0x00	; 0
    8bf8:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    8bfc:	23 e4       	ldi	r18, 0x43	; 67
    8bfe:	36 e4       	ldi	r19, 0x46	; 70
    8c00:	41 2f       	mov	r20, r17
    8c02:	62 e1       	ldi	r22, 0x12	; 18
    8c04:	ce 01       	movw	r24, r28
    8c06:	01 96       	adiw	r24, 0x01	; 1
    8c08:	0e 94 74 3b 	call	0x76e8	; 0x76e8 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    8c0c:	0f 90       	pop	r0
    8c0e:	0f 90       	pop	r0
    8c10:	0f 90       	pop	r0
    8c12:	0f 90       	pop	r0
    8c14:	0f 90       	pop	r0
    8c16:	df 91       	pop	r29
    8c18:	cf 91       	pop	r28
    8c1a:	1f 91       	pop	r17
    8c1c:	08 95       	ret

00008c1e <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    8c1e:	ef 92       	push	r14
    8c20:	ff 92       	push	r15
    8c22:	0f 93       	push	r16
    8c24:	1f 93       	push	r17
    8c26:	cf 93       	push	r28
    8c28:	df 93       	push	r29
    8c2a:	cd b7       	in	r28, 0x3d	; 61
    8c2c:	de b7       	in	r29, 0x3e	; 62
    8c2e:	63 97       	sbiw	r28, 0x13	; 19
    8c30:	0f b6       	in	r0, 0x3f	; 63
    8c32:	f8 94       	cli
    8c34:	de bf       	out	0x3e, r29	; 62
    8c36:	0f be       	out	0x3f, r0	; 63
    8c38:	cd bf       	out	0x3d, r28	; 61
    8c3a:	7c 01       	movw	r14, r24
    8c3c:	10 e0       	ldi	r17, 0x00	; 0
    8c3e:	0f ef       	ldi	r16, 0xFF	; 255
    8c40:	ae 01       	movw	r20, r28
    8c42:	4f 5f       	subi	r20, 0xFF	; 255
    8c44:	5f 4f       	sbci	r21, 0xFF	; 255
    8c46:	be 01       	movw	r22, r28
    8c48:	6d 5e       	subi	r22, 0xED	; 237
    8c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c4c:	81 2f       	mov	r24, r17
    8c4e:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8c52:	be 01       	movw	r22, r28
    8c54:	6f 5f       	subi	r22, 0xFF	; 255
    8c56:	7f 4f       	sbci	r23, 0xFF	; 255
    8c58:	c7 01       	movw	r24, r14
    8c5a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    8c5e:	89 2b       	or	r24, r25
    8c60:	09 f4       	brne	.+2      	; 0x8c64 <remote_tds_name_exist(char*)+0x46>
    8c62:	01 2f       	mov	r16, r17
    8c64:	1f 5f       	subi	r17, 0xFF	; 255
    8c66:	1a 30       	cpi	r17, 0x0A	; 10
    8c68:	59 f7       	brne	.-42     	; 0x8c40 <remote_tds_name_exist(char*)+0x22>
    8c6a:	80 2f       	mov	r24, r16
    8c6c:	63 96       	adiw	r28, 0x13	; 19
    8c6e:	0f b6       	in	r0, 0x3f	; 63
    8c70:	f8 94       	cli
    8c72:	de bf       	out	0x3e, r29	; 62
    8c74:	0f be       	out	0x3f, r0	; 63
    8c76:	cd bf       	out	0x3d, r28	; 61
    8c78:	df 91       	pop	r29
    8c7a:	cf 91       	pop	r28
    8c7c:	1f 91       	pop	r17
    8c7e:	0f 91       	pop	r16
    8c80:	ff 90       	pop	r15
    8c82:	ef 90       	pop	r14
    8c84:	08 95       	ret

00008c86 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    8c86:	1f 93       	push	r17
    8c88:	cf 93       	push	r28
    8c8a:	df 93       	push	r29
    8c8c:	cd b7       	in	r28, 0x3d	; 61
    8c8e:	de b7       	in	r29, 0x3e	; 62
    8c90:	62 97       	sbiw	r28, 0x12	; 18
    8c92:	0f b6       	in	r0, 0x3f	; 63
    8c94:	f8 94       	cli
    8c96:	de bf       	out	0x3e, r29	; 62
    8c98:	0f be       	out	0x3f, r0	; 63
    8c9a:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8c9c:	10 91 f7 09 	lds	r17, 0x09F7	; 0x8009f7 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    8ca0:	ce 01       	movw	r24, r28
    8ca2:	01 96       	adiw	r24, 0x01	; 1
    8ca4:	0e 94 b5 3b 	call	0x776a	; 0x776a <display_element_get_string(char*)>
    8ca8:	89 81       	ldd	r24, Y+1	; 0x01
    8caa:	88 23       	and	r24, r24
    8cac:	81 f0       	breq	.+32     	; 0x8cce <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8cae:	ce 01       	movw	r24, r28
    8cb0:	01 96       	adiw	r24, 0x01	; 1
    8cb2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <remote_tds_name_exist(char*)>
    8cb6:	8f 3f       	cpi	r24, 0xFF	; 255
    8cb8:	51 f4       	brne	.+20     	; 0x8cce <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8cba:	ae 01       	movw	r20, r28
    8cbc:	4f 5f       	subi	r20, 0xFF	; 255
    8cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    8cc0:	61 e0       	ldi	r22, 0x01	; 1
    8cc2:	81 2f       	mov	r24, r17
    8cc4:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8cc8:	81 2f       	mov	r24, r17
    8cca:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <remote_tds_subscibe_topic(unsigned char)>
    8cce:	62 96       	adiw	r28, 0x12	; 18
    8cd0:	0f b6       	in	r0, 0x3f	; 63
    8cd2:	f8 94       	cli
    8cd4:	de bf       	out	0x3e, r29	; 62
    8cd6:	0f be       	out	0x3f, r0	; 63
    8cd8:	cd bf       	out	0x3d, r28	; 61
    8cda:	df 91       	pop	r29
    8cdc:	cf 91       	pop	r28
    8cde:	1f 91       	pop	r17
    8ce0:	08 95       	ret

00008ce2 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    8ce2:	1f 93       	push	r17
    8ce4:	cf 93       	push	r28
    8ce6:	df 93       	push	r29
    8ce8:	cd b7       	in	r28, 0x3d	; 61
    8cea:	de b7       	in	r29, 0x3e	; 62
    8cec:	62 97       	sbiw	r28, 0x12	; 18
    8cee:	0f b6       	in	r0, 0x3f	; 63
    8cf0:	f8 94       	cli
    8cf2:	de bf       	out	0x3e, r29	; 62
    8cf4:	0f be       	out	0x3f, r0	; 63
    8cf6:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8cf8:	10 91 f7 09 	lds	r17, 0x09F7	; 0x8009f7 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    8cfc:	ce 01       	movw	r24, r28
    8cfe:	01 96       	adiw	r24, 0x01	; 1
    8d00:	0e 94 b5 3b 	call	0x776a	; 0x776a <display_element_get_string(char*)>
    8d04:	89 81       	ldd	r24, Y+1	; 0x01
    8d06:	88 23       	and	r24, r24
    8d08:	61 f0       	breq	.+24     	; 0x8d22 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8d0a:	ce 01       	movw	r24, r28
    8d0c:	01 96       	adiw	r24, 0x01	; 1
    8d0e:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <remote_tds_name_exist(char*)>
    8d12:	8f 3f       	cpi	r24, 0xFF	; 255
    8d14:	31 f4       	brne	.+12     	; 0x8d22 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8d16:	be 01       	movw	r22, r28
    8d18:	6f 5f       	subi	r22, 0xFF	; 255
    8d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d1c:	81 2f       	mov	r24, r17
    8d1e:	0e 94 10 44 	call	0x8820	; 0x8820 <remote_tds_set_name(unsigned char, char*)>
    8d22:	62 96       	adiw	r28, 0x12	; 18
    8d24:	0f b6       	in	r0, 0x3f	; 63
    8d26:	f8 94       	cli
    8d28:	de bf       	out	0x3e, r29	; 62
    8d2a:	0f be       	out	0x3f, r0	; 63
    8d2c:	cd bf       	out	0x3d, r28	; 61
    8d2e:	df 91       	pop	r29
    8d30:	cf 91       	pop	r28
    8d32:	1f 91       	pop	r17
    8d34:	08 95       	ret

00008d36 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    8d36:	1f 93       	push	r17
    8d38:	cf 93       	push	r28
    8d3a:	df 93       	push	r29
    8d3c:	8a 30       	cpi	r24, 0x0A	; 10
    8d3e:	60 f5       	brcc	.+88     	; 0x8d98 <remote_tds_set_data(unsigned char, int)+0x62>
    8d40:	17 2f       	mov	r17, r23
    8d42:	26 2f       	mov	r18, r22
    8d44:	93 e0       	ldi	r25, 0x03	; 3
    8d46:	89 9f       	mul	r24, r25
    8d48:	e0 01       	movw	r28, r0
    8d4a:	11 24       	eor	r1, r1
    8d4c:	ae 01       	movw	r20, r28
    8d4e:	4c 59       	subi	r20, 0x9C	; 156
    8d50:	5f 4f       	sbci	r21, 0xFF	; 255
    8d52:	05 2e       	mov	r0, r21
    8d54:	00 0c       	add	r0, r0
    8d56:	66 0b       	sbc	r22, r22
    8d58:	77 0b       	sbc	r23, r23
    8d5a:	83 ee       	ldi	r24, 0xE3	; 227
    8d5c:	9a e0       	ldi	r25, 0x0A	; 10
    8d5e:	0e 94 b3 ac 	call	0x15966	; 0x15966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8d62:	ae 01       	movw	r20, r28
    8d64:	4b 59       	subi	r20, 0x9B	; 155
    8d66:	5f 4f       	sbci	r21, 0xFF	; 255
    8d68:	05 2e       	mov	r0, r21
    8d6a:	00 0c       	add	r0, r0
    8d6c:	66 0b       	sbc	r22, r22
    8d6e:	77 0b       	sbc	r23, r23
    8d70:	21 2f       	mov	r18, r17
    8d72:	83 ee       	ldi	r24, 0xE3	; 227
    8d74:	9a e0       	ldi	r25, 0x0A	; 10
    8d76:	0e 94 b3 ac 	call	0x15966	; 0x15966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8d7a:	ae 01       	movw	r20, r28
    8d7c:	4a 59       	subi	r20, 0x9A	; 154
    8d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d80:	05 2e       	mov	r0, r21
    8d82:	00 0c       	add	r0, r0
    8d84:	66 0b       	sbc	r22, r22
    8d86:	77 0b       	sbc	r23, r23
    8d88:	20 e0       	ldi	r18, 0x00	; 0
    8d8a:	83 ee       	ldi	r24, 0xE3	; 227
    8d8c:	9a e0       	ldi	r25, 0x0A	; 10
    8d8e:	df 91       	pop	r29
    8d90:	cf 91       	pop	r28
    8d92:	1f 91       	pop	r17
    8d94:	0c 94 b3 ac 	jmp	0x15966	; 0x15966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8d98:	df 91       	pop	r29
    8d9a:	cf 91       	pop	r28
    8d9c:	1f 91       	pop	r17
    8d9e:	08 95       	ret

00008da0 <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    8da0:	0f 93       	push	r16
    8da2:	1f 93       	push	r17
    8da4:	cf 93       	push	r28
    8da6:	df 93       	push	r29
    8da8:	8a 30       	cpi	r24, 0x0A	; 10
    8daa:	30 f5       	brcc	.+76     	; 0x8df8 <remote_tds_get_data(unsigned char)+0x58>
    8dac:	93 e0       	ldi	r25, 0x03	; 3
    8dae:	89 9f       	mul	r24, r25
    8db0:	80 01       	movw	r16, r0
    8db2:	11 24       	eor	r1, r1
    8db4:	a8 01       	movw	r20, r16
    8db6:	4b 59       	subi	r20, 0x9B	; 155
    8db8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dba:	05 2e       	mov	r0, r21
    8dbc:	00 0c       	add	r0, r0
    8dbe:	66 0b       	sbc	r22, r22
    8dc0:	77 0b       	sbc	r23, r23
    8dc2:	83 ee       	ldi	r24, 0xE3	; 227
    8dc4:	9a e0       	ldi	r25, 0x0A	; 10
    8dc6:	0e 94 8e ac 	call	0x1591c	; 0x1591c <SRAM_23LC::readByte(unsigned long)>
    8dca:	c8 2f       	mov	r28, r24
    8dcc:	d0 e0       	ldi	r29, 0x00	; 0
    8dce:	dc 2f       	mov	r29, r28
    8dd0:	cc 27       	eor	r28, r28
    8dd2:	a8 01       	movw	r20, r16
    8dd4:	4c 59       	subi	r20, 0x9C	; 156
    8dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    8dd8:	05 2e       	mov	r0, r21
    8dda:	00 0c       	add	r0, r0
    8ddc:	66 0b       	sbc	r22, r22
    8dde:	77 0b       	sbc	r23, r23
    8de0:	83 ee       	ldi	r24, 0xE3	; 227
    8de2:	9a e0       	ldi	r25, 0x0A	; 10
    8de4:	0e 94 8e ac 	call	0x1591c	; 0x1591c <SRAM_23LC::readByte(unsigned long)>
    8de8:	8c 0f       	add	r24, r28
    8dea:	9d 2f       	mov	r25, r29
    8dec:	91 1d       	adc	r25, r1
    8dee:	df 91       	pop	r29
    8df0:	cf 91       	pop	r28
    8df2:	1f 91       	pop	r17
    8df4:	0f 91       	pop	r16
    8df6:	08 95       	ret
    8df8:	90 e0       	ldi	r25, 0x00	; 0
    8dfa:	80 e0       	ldi	r24, 0x00	; 0
    8dfc:	f8 cf       	rjmp	.-16     	; 0x8dee <remote_tds_get_data(unsigned char)+0x4e>

00008dfe <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    8dfe:	8a 30       	cpi	r24, 0x0A	; 10
    8e00:	70 f4       	brcc	.+28     	; 0x8e1e <remote_tds_get_last_update(unsigned char)+0x20>
    8e02:	93 e0       	ldi	r25, 0x03	; 3
    8e04:	89 9f       	mul	r24, r25
    8e06:	a0 01       	movw	r20, r0
    8e08:	11 24       	eor	r1, r1
    8e0a:	4a 59       	subi	r20, 0x9A	; 154
    8e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    8e0e:	05 2e       	mov	r0, r21
    8e10:	00 0c       	add	r0, r0
    8e12:	66 0b       	sbc	r22, r22
    8e14:	77 0b       	sbc	r23, r23
    8e16:	83 ee       	ldi	r24, 0xE3	; 227
    8e18:	9a e0       	ldi	r25, 0x0A	; 10
    8e1a:	0c 94 8e ac 	jmp	0x1591c	; 0x1591c <SRAM_23LC::readByte(unsigned long)>
    8e1e:	8f ef       	ldi	r24, 0xFF	; 255
    8e20:	08 95       	ret

00008e22 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
    8e22:	3f 92       	push	r3
    8e24:	4f 92       	push	r4
    8e26:	5f 92       	push	r5
    8e28:	6f 92       	push	r6
    8e2a:	7f 92       	push	r7
    8e2c:	8f 92       	push	r8
    8e2e:	9f 92       	push	r9
    8e30:	af 92       	push	r10
    8e32:	bf 92       	push	r11
    8e34:	cf 92       	push	r12
    8e36:	df 92       	push	r13
    8e38:	ef 92       	push	r14
    8e3a:	ff 92       	push	r15
    8e3c:	0f 93       	push	r16
    8e3e:	1f 93       	push	r17
    8e40:	cf 93       	push	r28
    8e42:	df 93       	push	r29
    8e44:	cd b7       	in	r28, 0x3d	; 61
    8e46:	de b7       	in	r29, 0x3e	; 62
    8e48:	cd 54       	subi	r28, 0x4D	; 77
    8e4a:	d1 09       	sbc	r29, r1
    8e4c:	0f b6       	in	r0, 0x3f	; 63
    8e4e:	f8 94       	cli
    8e50:	de bf       	out	0x3e, r29	; 62
    8e52:	0f be       	out	0x3f, r0	; 63
    8e54:	cd bf       	out	0x3d, r28	; 61
    8e56:	3c 01       	movw	r6, r24
    8e58:	4b 01       	movw	r8, r22
    8e5a:	5a 01       	movw	r10, r20
    8e5c:	89 01       	movw	r16, r18
    8e5e:	de 2c       	mov	r13, r14
    8e60:	70 e0       	ldi	r23, 0x00	; 0
    8e62:	60 e0       	ldi	r22, 0x00	; 0
    8e64:	81 e2       	ldi	r24, 0x21	; 33
    8e66:	9c e0       	ldi	r25, 0x0C	; 12
    8e68:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8e6c:	08 0d       	add	r16, r8
    8e6e:	19 1d       	adc	r17, r9
    8e70:	93 01       	movw	r18, r6
    8e72:	2a 0d       	add	r18, r10
    8e74:	3b 1d       	adc	r19, r11
    8e76:	a4 01       	movw	r20, r8
    8e78:	b3 01       	movw	r22, r6
    8e7a:	81 e2       	ldi	r24, 0x21	; 33
    8e7c:	9c e0       	ldi	r25, 0x0C	; 12
    8e7e:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8e82:	ae 01       	movw	r20, r28
    8e84:	45 5c       	subi	r20, 0xC5	; 197
    8e86:	5f 4f       	sbci	r21, 0xFF	; 255
    8e88:	be 01       	movw	r22, r28
    8e8a:	63 5b       	subi	r22, 0xB3	; 179
    8e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e8e:	8e 2d       	mov	r24, r14
    8e90:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8e94:	2e 96       	adiw	r28, 0x0e	; 14
    8e96:	3f ac       	ldd	r3, Y+63	; 0x3f
    8e98:	2e 97       	sbiw	r28, 0x0e	; 14
    8e9a:	81 e0       	ldi	r24, 0x01	; 1
    8e9c:	38 12       	cpse	r3, r24
    8e9e:	a9 c0       	rjmp	.+338    	; 0x8ff2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d0>
    8ea0:	64 ea       	ldi	r22, 0xA4	; 164
    8ea2:	79 e5       	ldi	r23, 0x59	; 89
    8ea4:	ce 01       	movw	r24, r28
    8ea6:	01 96       	adiw	r24, 0x01	; 1
    8ea8:	5c 01       	movw	r10, r24
    8eaa:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8eae:	23 01       	movw	r4, r6
    8eb0:	95 e0       	ldi	r25, 0x05	; 5
    8eb2:	49 0e       	add	r4, r25
    8eb4:	51 1c       	adc	r5, r1
    8eb6:	c1 2c       	mov	r12, r1
    8eb8:	ee 24       	eor	r14, r14
    8eba:	ea 94       	dec	r14
    8ebc:	fe 2c       	mov	r15, r14
    8ebe:	10 e0       	ldi	r17, 0x00	; 0
    8ec0:	00 e0       	ldi	r16, 0x00	; 0
    8ec2:	22 e0       	ldi	r18, 0x02	; 2
    8ec4:	a4 01       	movw	r20, r8
    8ec6:	46 5f       	subi	r20, 0xF6	; 246
    8ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    8eca:	b2 01       	movw	r22, r4
    8ecc:	c5 01       	movw	r24, r10
    8ece:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8ed2:	be 01       	movw	r22, r28
    8ed4:	65 5c       	subi	r22, 0xC5	; 197
    8ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed8:	c5 01       	movw	r24, r10
    8eda:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    8ede:	b3 01       	movw	r22, r6
    8ee0:	6c 5e       	subi	r22, 0xEC	; 236
    8ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ee4:	22 e0       	ldi	r18, 0x02	; 2
    8ee6:	a4 01       	movw	r20, r8
    8ee8:	42 5e       	subi	r20, 0xE2	; 226
    8eea:	5f 4f       	sbci	r21, 0xFF	; 255
    8eec:	c5 01       	movw	r24, r10
    8eee:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8ef2:	8d 2d       	mov	r24, r13
    8ef4:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <remote_tds_get_data(unsigned char)>
    8ef8:	bc 01       	movw	r22, r24
    8efa:	99 0f       	add	r25, r25
    8efc:	88 0b       	sbc	r24, r24
    8efe:	99 0b       	sbc	r25, r25
    8f00:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    8f04:	20 e0       	ldi	r18, 0x00	; 0
    8f06:	30 e0       	ldi	r19, 0x00	; 0
    8f08:	4a e7       	ldi	r20, 0x7A	; 122
    8f0a:	54 e4       	ldi	r21, 0x44	; 68
    8f0c:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    8f10:	85 01       	movw	r16, r10
    8f12:	22 e0       	ldi	r18, 0x02	; 2
    8f14:	44 e0       	ldi	r20, 0x04	; 4
    8f16:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    8f1a:	69 e0       	ldi	r22, 0x09	; 9
    8f1c:	78 e0       	ldi	r23, 0x08	; 8
    8f1e:	c5 01       	movw	r24, r10
    8f20:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8f24:	3e 01       	movw	r6, r28
    8f26:	81 e2       	ldi	r24, 0x21	; 33
    8f28:	68 0e       	add	r6, r24
    8f2a:	71 1c       	adc	r7, r1
    8f2c:	6a ee       	ldi	r22, 0xEA	; 234
    8f2e:	7a e5       	ldi	r23, 0x5A	; 90
    8f30:	c3 01       	movw	r24, r6
    8f32:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8f36:	b5 01       	movw	r22, r10
    8f38:	c3 01       	movw	r24, r6
    8f3a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    8f3e:	10 e0       	ldi	r17, 0x00	; 0
    8f40:	00 e0       	ldi	r16, 0x00	; 0
    8f42:	22 e0       	ldi	r18, 0x02	; 2
    8f44:	a4 01       	movw	r20, r8
    8f46:	44 5c       	subi	r20, 0xC4	; 196
    8f48:	5f 4f       	sbci	r21, 0xFF	; 255
    8f4a:	b2 01       	movw	r22, r4
    8f4c:	c3 01       	movw	r24, r6
    8f4e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8f52:	8d 2d       	mov	r24, r13
    8f54:	0e 94 ff 46 	call	0x8dfe	; 0x8dfe <remote_tds_get_last_update(unsigned char)>
    8f58:	d8 2e       	mov	r13, r24
    8f5a:	67 e8       	ldi	r22, 0x87	; 135
    8f5c:	79 e5       	ldi	r23, 0x59	; 89
    8f5e:	c3 01       	movw	r24, r6
    8f60:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8f64:	1f 92       	push	r1
    8f66:	df 92       	push	r13
    8f68:	7f 92       	push	r7
    8f6a:	6f 92       	push	r6
    8f6c:	85 e2       	ldi	r24, 0x25	; 37
    8f6e:	93 e0       	ldi	r25, 0x03	; 3
    8f70:	9f 93       	push	r25
    8f72:	8f 93       	push	r24
    8f74:	bf 92       	push	r11
    8f76:	af 92       	push	r10
    8f78:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    8f7c:	21 e0       	ldi	r18, 0x01	; 1
    8f7e:	a4 01       	movw	r20, r8
    8f80:	40 5b       	subi	r20, 0xB0	; 176
    8f82:	5f 4f       	sbci	r21, 0xFF	; 255
    8f84:	b2 01       	movw	r22, r4
    8f86:	c5 01       	movw	r24, r10
    8f88:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8f8c:	0f b6       	in	r0, 0x3f	; 63
    8f8e:	f8 94       	cli
    8f90:	de bf       	out	0x3e, r29	; 62
    8f92:	0f be       	out	0x3f, r0	; 63
    8f94:	cd bf       	out	0x3d, r28	; 61
    8f96:	99 ef       	ldi	r25, 0xF9	; 249
    8f98:	9d 15       	cp	r25, r13
    8f9a:	08 f4       	brcc	.+2      	; 0x8f9e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x17c>
    8f9c:	43 c0       	rjmp	.+134    	; 0x9024 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x202>
    8f9e:	2e 96       	adiw	r28, 0x0e	; 14
    8fa0:	3f ae       	std	Y+63, r3	; 0x3f
    8fa2:	2e 97       	sbiw	r28, 0x0e	; 14
    8fa4:	6d e9       	ldi	r22, 0x9D	; 157
    8fa6:	79 e5       	ldi	r23, 0x59	; 89
    8fa8:	c3 01       	movw	r24, r6
    8faa:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    8fae:	2e 96       	adiw	r28, 0x0e	; 14
    8fb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    8fb2:	2e 97       	sbiw	r28, 0x0e	; 14
    8fb4:	1f 92       	push	r1
    8fb6:	8f 93       	push	r24
    8fb8:	7f 92       	push	r7
    8fba:	6f 92       	push	r6
    8fbc:	85 e2       	ldi	r24, 0x25	; 37
    8fbe:	93 e0       	ldi	r25, 0x03	; 3
    8fc0:	9f 93       	push	r25
    8fc2:	8f 93       	push	r24
    8fc4:	bf 92       	push	r11
    8fc6:	af 92       	push	r10
    8fc8:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    8fcc:	a4 01       	movw	r20, r8
    8fce:	4c 59       	subi	r20, 0x9C	; 156
    8fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    8fd2:	c1 2c       	mov	r12, r1
    8fd4:	ee 24       	eor	r14, r14
    8fd6:	ea 94       	dec	r14
    8fd8:	fe 2c       	mov	r15, r14
    8fda:	10 e0       	ldi	r17, 0x00	; 0
    8fdc:	00 e0       	ldi	r16, 0x00	; 0
    8fde:	22 e0       	ldi	r18, 0x02	; 2
    8fe0:	b2 01       	movw	r22, r4
    8fe2:	c5 01       	movw	r24, r10
    8fe4:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8fe8:	0f b6       	in	r0, 0x3f	; 63
    8fea:	f8 94       	cli
    8fec:	de bf       	out	0x3e, r29	; 62
    8fee:	0f be       	out	0x3f, r0	; 63
    8ff0:	cd bf       	out	0x3d, r28	; 61
    8ff2:	c3 5b       	subi	r28, 0xB3	; 179
    8ff4:	df 4f       	sbci	r29, 0xFF	; 255
    8ff6:	0f b6       	in	r0, 0x3f	; 63
    8ff8:	f8 94       	cli
    8ffa:	de bf       	out	0x3e, r29	; 62
    8ffc:	0f be       	out	0x3f, r0	; 63
    8ffe:	cd bf       	out	0x3d, r28	; 61
    9000:	df 91       	pop	r29
    9002:	cf 91       	pop	r28
    9004:	1f 91       	pop	r17
    9006:	0f 91       	pop	r16
    9008:	ff 90       	pop	r15
    900a:	ef 90       	pop	r14
    900c:	df 90       	pop	r13
    900e:	cf 90       	pop	r12
    9010:	bf 90       	pop	r11
    9012:	af 90       	pop	r10
    9014:	9f 90       	pop	r9
    9016:	8f 90       	pop	r8
    9018:	7f 90       	pop	r7
    901a:	6f 90       	pop	r6
    901c:	5f 90       	pop	r5
    901e:	4f 90       	pop	r4
    9020:	3f 90       	pop	r3
    9022:	08 95       	ret
    9024:	2e 96       	adiw	r28, 0x0e	; 14
    9026:	1f ae       	std	Y+63, r1	; 0x3f
    9028:	2e 97       	sbiw	r28, 0x0e	; 14
    902a:	bc cf       	rjmp	.-136    	; 0x8fa4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x182>

0000902c <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    902c:	cf 92       	push	r12
    902e:	df 92       	push	r13
    9030:	ef 92       	push	r14
    9032:	ff 92       	push	r15
    9034:	8a 30       	cpi	r24, 0x0A	; 10
    9036:	d8 f4       	brcc	.+54     	; 0x906e <remote_tds_inc_last_update(unsigned char)+0x42>
    9038:	93 e0       	ldi	r25, 0x03	; 3
    903a:	89 9f       	mul	r24, r25
    903c:	60 01       	movw	r12, r0
    903e:	11 24       	eor	r1, r1
    9040:	86 e6       	ldi	r24, 0x66	; 102
    9042:	c8 0e       	add	r12, r24
    9044:	d1 1c       	adc	r13, r1
    9046:	0d 2c       	mov	r0, r13
    9048:	00 0c       	add	r0, r0
    904a:	ee 08       	sbc	r14, r14
    904c:	ff 08       	sbc	r15, r15
    904e:	b7 01       	movw	r22, r14
    9050:	a6 01       	movw	r20, r12
    9052:	83 ee       	ldi	r24, 0xE3	; 227
    9054:	9a e0       	ldi	r25, 0x0A	; 10
    9056:	0e 94 8e ac 	call	0x1591c	; 0x1591c <SRAM_23LC::readByte(unsigned long)>
    905a:	8a 3f       	cpi	r24, 0xFA	; 250
    905c:	08 f4       	brcc	.+2      	; 0x9060 <remote_tds_inc_last_update(unsigned char)+0x34>
    905e:	8f 5f       	subi	r24, 0xFF	; 255
    9060:	28 2f       	mov	r18, r24
    9062:	b7 01       	movw	r22, r14
    9064:	a6 01       	movw	r20, r12
    9066:	83 ee       	ldi	r24, 0xE3	; 227
    9068:	9a e0       	ldi	r25, 0x0A	; 10
    906a:	0e 94 b3 ac 	call	0x15966	; 0x15966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    906e:	ff 90       	pop	r15
    9070:	ef 90       	pop	r14
    9072:	df 90       	pop	r13
    9074:	cf 90       	pop	r12
    9076:	08 95       	ret

00009078 <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    9078:	1f 93       	push	r17
    907a:	cf 93       	push	r28
    907c:	df 93       	push	r29
    907e:	1f 92       	push	r1
    9080:	cd b7       	in	r28, 0x3d	; 61
    9082:	de b7       	in	r29, 0x3e	; 62
    9084:	10 e0       	ldi	r17, 0x00	; 0
    9086:	be 01       	movw	r22, r28
    9088:	6f 5f       	subi	r22, 0xFF	; 255
    908a:	7f 4f       	sbci	r23, 0xFF	; 255
    908c:	81 2f       	mov	r24, r17
    908e:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    9092:	89 81       	ldd	r24, Y+1	; 0x01
    9094:	81 30       	cpi	r24, 0x01	; 1
    9096:	19 f4       	brne	.+6      	; 0x909e <remote_tds_update_last_update()+0x26>
    9098:	81 2f       	mov	r24, r17
    909a:	0e 94 16 48 	call	0x902c	; 0x902c <remote_tds_inc_last_update(unsigned char)>
    909e:	1f 5f       	subi	r17, 0xFF	; 255
    90a0:	1a 30       	cpi	r17, 0x0A	; 10
    90a2:	89 f7       	brne	.-30     	; 0x9086 <remote_tds_update_last_update()+0xe>
    90a4:	0f 90       	pop	r0
    90a6:	df 91       	pop	r29
    90a8:	cf 91       	pop	r28
    90aa:	1f 91       	pop	r17
    90ac:	08 95       	ret

000090ae <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    90ae:	68 2f       	mov	r22, r24
    90b0:	8c e5       	ldi	r24, 0x5C	; 92
    90b2:	90 e0       	ldi	r25, 0x00	; 0
    90b4:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

000090b8 <get_default_ring()>:
_Z16get_default_ringv():
    90b8:	8c e5       	ldi	r24, 0x5C	; 92
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	0c 94 a6 37 	jmp	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>

000090c0 <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    90c0:	68 2f       	mov	r22, r24
    90c2:	8d e5       	ldi	r24, 0x5D	; 93
    90c4:	90 e0       	ldi	r25, 0x00	; 0
    90c6:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

000090ca <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    90ca:	84 2f       	mov	r24, r20
    90cc:	40 93 a9 0a 	sts	0x0AA9, r20	; 0x800aa9 <default_show_temp>
    90d0:	0c 94 60 48 	jmp	0x90c0	; 0x90c0 <set_default_show_temp(unsigned char)>

000090d4 <get_default_show_temp()>:
_Z21get_default_show_tempv():
    90d4:	8d e5       	ldi	r24, 0x5D	; 93
    90d6:	90 e0       	ldi	r25, 0x00	; 0
    90d8:	0c 94 a6 37 	jmp	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>

000090dc <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    90dc:	1f 93       	push	r17
    90de:	cf 93       	push	r28
    90e0:	df 93       	push	r29
    90e2:	cd b7       	in	r28, 0x3d	; 61
    90e4:	de b7       	in	r29, 0x3e	; 62
    90e6:	66 97       	sbiw	r28, 0x16	; 22
    90e8:	0f b6       	in	r0, 0x3f	; 63
    90ea:	f8 94       	cli
    90ec:	de bf       	out	0x3e, r29	; 62
    90ee:	0f be       	out	0x3f, r0	; 63
    90f0:	cd bf       	out	0x3d, r28	; 61
    90f2:	10 e0       	ldi	r17, 0x00	; 0
    90f4:	be 01       	movw	r22, r28
    90f6:	6f 5f       	subi	r22, 0xFF	; 255
    90f8:	7f 4f       	sbci	r23, 0xFF	; 255
    90fa:	81 2f       	mov	r24, r17
    90fc:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    9100:	1f 5f       	subi	r17, 0xFF	; 255
    9102:	16 30       	cpi	r17, 0x06	; 6
    9104:	b9 f7       	brne	.-18     	; 0x90f4 <tds_extended_memory_store()+0x18>
    9106:	66 96       	adiw	r28, 0x16	; 22
    9108:	0f b6       	in	r0, 0x3f	; 63
    910a:	f8 94       	cli
    910c:	de bf       	out	0x3e, r29	; 62
    910e:	0f be       	out	0x3f, r0	; 63
    9110:	cd bf       	out	0x3d, r28	; 61
    9112:	df 91       	pop	r29
    9114:	cf 91       	pop	r28
    9116:	1f 91       	pop	r17
    9118:	08 95       	ret

0000911a <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    911a:	0f 93       	push	r16
    911c:	1f 93       	push	r17
    911e:	cf 93       	push	r28
    9120:	df 93       	push	r29
    9122:	cd b7       	in	r28, 0x3d	; 61
    9124:	de b7       	in	r29, 0x3e	; 62
    9126:	a4 97       	sbiw	r28, 0x24	; 36
    9128:	0f b6       	in	r0, 0x3f	; 63
    912a:	f8 94       	cli
    912c:	de bf       	out	0x3e, r29	; 62
    912e:	0f be       	out	0x3f, r0	; 63
    9130:	cd bf       	out	0x3d, r28	; 61
    9132:	85 e1       	ldi	r24, 0x15	; 21
    9134:	9e e0       	ldi	r25, 0x0E	; 14
    9136:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
    913a:	81 11       	cpse	r24, r1
    913c:	98 c0       	rjmp	.+304    	; 0x926e <mqtt_reconnect()+0x154>
    913e:	ce 01       	movw	r24, r28
    9140:	4b 96       	adiw	r24, 0x1b	; 27
    9142:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <device_get_name(char*)>
    9146:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    914a:	00 91 d0 0a 	lds	r16, 0x0AD0	; 0x800ad0 <lastmqttconnect>
    914e:	10 91 d1 0a 	lds	r17, 0x0AD1	; 0x800ad1 <lastmqttconnect+0x1>
    9152:	20 91 d2 0a 	lds	r18, 0x0AD2	; 0x800ad2 <lastmqttconnect+0x2>
    9156:	30 91 d3 0a 	lds	r19, 0x0AD3	; 0x800ad3 <lastmqttconnect+0x3>
    915a:	06 17       	cp	r16, r22
    915c:	17 07       	cpc	r17, r23
    915e:	28 07       	cpc	r18, r24
    9160:	39 07       	cpc	r19, r25
    9162:	0c f0       	brlt	.+2      	; 0x9166 <mqtt_reconnect()+0x4c>
    9164:	84 c0       	rjmp	.+264    	; 0x926e <mqtt_reconnect()+0x154>
    9166:	68 57       	subi	r22, 0x78	; 120
    9168:	7c 4e       	sbci	r23, 0xEC	; 236
    916a:	8f 4f       	sbci	r24, 0xFF	; 255
    916c:	9f 4f       	sbci	r25, 0xFF	; 255
    916e:	60 93 d0 0a 	sts	0x0AD0, r22	; 0x800ad0 <lastmqttconnect>
    9172:	70 93 d1 0a 	sts	0x0AD1, r23	; 0x800ad1 <lastmqttconnect+0x1>
    9176:	80 93 d2 0a 	sts	0x0AD2, r24	; 0x800ad2 <lastmqttconnect+0x2>
    917a:	90 93 d3 0a 	sts	0x0AD3, r25	; 0x800ad3 <lastmqttconnect+0x3>
    917e:	be 01       	movw	r22, r28
    9180:	65 5e       	subi	r22, 0xE5	; 229
    9182:	7f 4f       	sbci	r23, 0xFF	; 255
    9184:	85 e1       	ldi	r24, 0x15	; 21
    9186:	9e e0       	ldi	r25, 0x0E	; 14
    9188:	0e 94 c3 c3 	call	0x18786	; 0x18786 <PubSubClient::connect(char const*)>
    918c:	88 23       	and	r24, r24
    918e:	09 f4       	brne	.+2      	; 0x9192 <mqtt_reconnect()+0x78>
    9190:	6e c0       	rjmp	.+220    	; 0x926e <mqtt_reconnect()+0x154>
    9192:	6d ec       	ldi	r22, 0xCD	; 205
    9194:	78 e5       	ldi	r23, 0x58	; 88
    9196:	ce 01       	movw	r24, r28
    9198:	01 96       	adiw	r24, 0x01	; 1
    919a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    919e:	be 01       	movw	r22, r28
    91a0:	65 5e       	subi	r22, 0xE5	; 229
    91a2:	7f 4f       	sbci	r23, 0xFF	; 255
    91a4:	ce 01       	movw	r24, r28
    91a6:	01 96       	adiw	r24, 0x01	; 1
    91a8:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    91ac:	61 e8       	ldi	r22, 0x81	; 129
    91ae:	73 e0       	ldi	r23, 0x03	; 3
    91b0:	ce 01       	movw	r24, r28
    91b2:	01 96       	adiw	r24, 0x01	; 1
    91b4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    91b8:	be 01       	movw	r22, r28
    91ba:	6f 5f       	subi	r22, 0xFF	; 255
    91bc:	7f 4f       	sbci	r23, 0xFF	; 255
    91be:	85 e1       	ldi	r24, 0x15	; 21
    91c0:	9e e0       	ldi	r25, 0x0E	; 14
    91c2:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    91c6:	6d ec       	ldi	r22, 0xCD	; 205
    91c8:	78 e5       	ldi	r23, 0x58	; 88
    91ca:	ce 01       	movw	r24, r28
    91cc:	01 96       	adiw	r24, 0x01	; 1
    91ce:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    91d2:	6b e7       	ldi	r22, 0x7B	; 123
    91d4:	73 e0       	ldi	r23, 0x03	; 3
    91d6:	ce 01       	movw	r24, r28
    91d8:	01 96       	adiw	r24, 0x01	; 1
    91da:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    91de:	be 01       	movw	r22, r28
    91e0:	6f 5f       	subi	r22, 0xFF	; 255
    91e2:	7f 4f       	sbci	r23, 0xFF	; 255
    91e4:	85 e1       	ldi	r24, 0x15	; 21
    91e6:	9e e0       	ldi	r25, 0x0E	; 14
    91e8:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    91ec:	10 e0       	ldi	r17, 0x00	; 0
    91ee:	81 2f       	mov	r24, r17
    91f0:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <remote_tds_subscibe_topic(unsigned char)>
    91f4:	1f 5f       	subi	r17, 0xFF	; 255
    91f6:	1a 30       	cpi	r17, 0x0A	; 10
    91f8:	d1 f7       	brne	.-12     	; 0x91ee <mqtt_reconnect()+0xd4>
    91fa:	64 e9       	ldi	r22, 0x94	; 148
    91fc:	78 e5       	ldi	r23, 0x58	; 88
    91fe:	ce 01       	movw	r24, r28
    9200:	01 96       	adiw	r24, 0x01	; 1
    9202:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9206:	61 e8       	ldi	r22, 0x81	; 129
    9208:	73 e0       	ldi	r23, 0x03	; 3
    920a:	ce 01       	movw	r24, r28
    920c:	01 96       	adiw	r24, 0x01	; 1
    920e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9212:	be 01       	movw	r22, r28
    9214:	6f 5f       	subi	r22, 0xFF	; 255
    9216:	7f 4f       	sbci	r23, 0xFF	; 255
    9218:	85 e1       	ldi	r24, 0x15	; 21
    921a:	9e e0       	ldi	r25, 0x0E	; 14
    921c:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    9220:	6c e7       	ldi	r22, 0x7C	; 124
    9222:	78 e5       	ldi	r23, 0x58	; 88
    9224:	ce 01       	movw	r24, r28
    9226:	01 96       	adiw	r24, 0x01	; 1
    9228:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    922c:	be 01       	movw	r22, r28
    922e:	6f 5f       	subi	r22, 0xFF	; 255
    9230:	7f 4f       	sbci	r23, 0xFF	; 255
    9232:	85 e1       	ldi	r24, 0x15	; 21
    9234:	9e e0       	ldi	r25, 0x0E	; 14
    9236:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    923a:	65 e6       	ldi	r22, 0x65	; 101
    923c:	78 e5       	ldi	r23, 0x58	; 88
    923e:	ce 01       	movw	r24, r28
    9240:	01 96       	adiw	r24, 0x01	; 1
    9242:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9246:	be 01       	movw	r22, r28
    9248:	6f 5f       	subi	r22, 0xFF	; 255
    924a:	7f 4f       	sbci	r23, 0xFF	; 255
    924c:	85 e1       	ldi	r24, 0x15	; 21
    924e:	9e e0       	ldi	r25, 0x0E	; 14
    9250:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    9254:	63 ea       	ldi	r22, 0xA3	; 163
    9256:	78 e5       	ldi	r23, 0x58	; 88
    9258:	ce 01       	movw	r24, r28
    925a:	01 96       	adiw	r24, 0x01	; 1
    925c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9260:	be 01       	movw	r22, r28
    9262:	6f 5f       	subi	r22, 0xFF	; 255
    9264:	7f 4f       	sbci	r23, 0xFF	; 255
    9266:	85 e1       	ldi	r24, 0x15	; 21
    9268:	9e e0       	ldi	r25, 0x0E	; 14
    926a:	0e 94 29 c6 	call	0x18c52	; 0x18c52 <PubSubClient::subscribe(char const*)>
    926e:	85 e1       	ldi	r24, 0x15	; 21
    9270:	9e e0       	ldi	r25, 0x0E	; 14
    9272:	0e 94 b5 c6 	call	0x18d6a	; 0x18d6a <PubSubClient::state()>
    9276:	a4 96       	adiw	r28, 0x24	; 36
    9278:	0f b6       	in	r0, 0x3f	; 63
    927a:	f8 94       	cli
    927c:	de bf       	out	0x3e, r29	; 62
    927e:	0f be       	out	0x3f, r0	; 63
    9280:	cd bf       	out	0x3d, r28	; 61
    9282:	df 91       	pop	r29
    9284:	cf 91       	pop	r28
    9286:	1f 91       	pop	r17
    9288:	0f 91       	pop	r16
    928a:	08 95       	ret

0000928c <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    928c:	cf 92       	push	r12
    928e:	df 92       	push	r13
    9290:	ef 92       	push	r14
    9292:	ff 92       	push	r15
    9294:	0f 93       	push	r16
    9296:	1f 93       	push	r17
    9298:	cf 93       	push	r28
    929a:	df 93       	push	r29
    929c:	cd b7       	in	r28, 0x3d	; 61
    929e:	de b7       	in	r29, 0x3e	; 62
    92a0:	c0 54       	subi	r28, 0x40	; 64
    92a2:	d1 09       	sbc	r29, r1
    92a4:	0f b6       	in	r0, 0x3f	; 63
    92a6:	f8 94       	cli
    92a8:	de bf       	out	0x3e, r29	; 62
    92aa:	0f be       	out	0x3f, r0	; 63
    92ac:	cd bf       	out	0x3d, r28	; 61
    92ae:	80 91 ad 11 	lds	r24, 0x11AD	; 0x8011ad <Global_HWwirenum>
itoa():
    92b2:	4a e0       	ldi	r20, 0x0A	; 10
    92b4:	be 01       	movw	r22, r28
    92b6:	6f 5f       	subi	r22, 0xFF	; 255
    92b8:	7f 4f       	sbci	r23, 0xFF	; 255
    92ba:	90 e0       	ldi	r25, 0x00	; 0
    92bc:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    92c0:	ae 01       	movw	r20, r28
    92c2:	4f 5f       	subi	r20, 0xFF	; 255
    92c4:	5f 4f       	sbci	r21, 0xFF	; 255
    92c6:	64 e8       	ldi	r22, 0x84	; 132
    92c8:	73 e0       	ldi	r23, 0x03	; 3
    92ca:	85 e1       	ldi	r24, 0x15	; 21
    92cc:	9e e0       	ldi	r25, 0x0E	; 14
    92ce:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    92d2:	f1 2c       	mov	r15, r1
    92d4:	8b e0       	ldi	r24, 0x0B	; 11
    92d6:	e8 2e       	mov	r14, r24
    92d8:	80 91 ad 11 	lds	r24, 0x11AD	; 0x8011ad <Global_HWwirenum>
    92dc:	f8 16       	cp	r15, r24
    92de:	e8 f5       	brcc	.+122    	; 0x935a <send_mqtt_onewire()+0xce>
    92e0:	fe 9c       	mul	r15, r14
    92e2:	c0 01       	movw	r24, r0
    92e4:	11 24       	eor	r1, r1
    92e6:	9c 01       	movw	r18, r24
    92e8:	25 59       	subi	r18, 0x95	; 149
    92ea:	3e 4e       	sbci	r19, 0xEE	; 238
    92ec:	69 01       	movw	r12, r18
    92ee:	00 e1       	ldi	r16, 0x10	; 16
    92f0:	28 e0       	ldi	r18, 0x08	; 8
    92f2:	a6 01       	movw	r20, r12
    92f4:	6a e3       	ldi	r22, 0x3A	; 58
    92f6:	ce 01       	movw	r24, r28
    92f8:	01 96       	adiw	r24, 0x01	; 1
    92fa:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    92fe:	8e 01       	movw	r16, r28
    9300:	0f 5f       	subi	r16, 0xFF	; 255
    9302:	1f 4f       	sbci	r17, 0xFF	; 255
    9304:	20 e9       	ldi	r18, 0x90	; 144
    9306:	33 e0       	ldi	r19, 0x03	; 3
    9308:	4f 2d       	mov	r20, r15
    930a:	64 e9       	ldi	r22, 0x94	; 148
    930c:	73 e0       	ldi	r23, 0x03	; 3
    930e:	85 e1       	ldi	r24, 0x15	; 21
    9310:	9e e0       	ldi	r25, 0x0E	; 14
    9312:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9316:	f6 01       	movw	r30, r12
    9318:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    931a:	4a e0       	ldi	r20, 0x0A	; 10
    931c:	b8 01       	movw	r22, r16
    931e:	90 e0       	ldi	r25, 0x00	; 0
    9320:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    9324:	2a e9       	ldi	r18, 0x9A	; 154
    9326:	33 e0       	ldi	r19, 0x03	; 3
    9328:	4f 2d       	mov	r20, r15
    932a:	64 e9       	ldi	r22, 0x94	; 148
    932c:	73 e0       	ldi	r23, 0x03	; 3
    932e:	85 e1       	ldi	r24, 0x15	; 21
    9330:	9e e0       	ldi	r25, 0x0E	; 14
    9332:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9336:	f6 01       	movw	r30, r12
    9338:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    933a:	4a e0       	ldi	r20, 0x0A	; 10
    933c:	b8 01       	movw	r22, r16
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    9344:	23 ea       	ldi	r18, 0xA3	; 163
    9346:	33 e0       	ldi	r19, 0x03	; 3
    9348:	4f 2d       	mov	r20, r15
    934a:	64 e9       	ldi	r22, 0x94	; 148
    934c:	73 e0       	ldi	r23, 0x03	; 3
    934e:	85 e1       	ldi	r24, 0x15	; 21
    9350:	9e e0       	ldi	r25, 0x0E	; 14
    9352:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9356:	f3 94       	inc	r15
    9358:	bf cf       	rjmp	.-130    	; 0x92d8 <send_mqtt_onewire()+0x4c>
    935a:	c0 5c       	subi	r28, 0xC0	; 192
    935c:	df 4f       	sbci	r29, 0xFF	; 255
    935e:	0f b6       	in	r0, 0x3f	; 63
    9360:	f8 94       	cli
    9362:	de bf       	out	0x3e, r29	; 62
    9364:	0f be       	out	0x3f, r0	; 63
    9366:	cd bf       	out	0x3d, r28	; 61
    9368:	df 91       	pop	r29
    936a:	cf 91       	pop	r28
    936c:	1f 91       	pop	r17
    936e:	0f 91       	pop	r16
    9370:	ff 90       	pop	r15
    9372:	ef 90       	pop	r14
    9374:	df 90       	pop	r13
    9376:	cf 90       	pop	r12
    9378:	08 95       	ret

0000937a <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    937a:	2f 92       	push	r2
    937c:	3f 92       	push	r3
    937e:	4f 92       	push	r4
    9380:	5f 92       	push	r5
    9382:	6f 92       	push	r6
    9384:	7f 92       	push	r7
    9386:	8f 92       	push	r8
    9388:	9f 92       	push	r9
    938a:	af 92       	push	r10
    938c:	bf 92       	push	r11
    938e:	cf 92       	push	r12
    9390:	df 92       	push	r13
    9392:	ff 92       	push	r15
    9394:	0f 93       	push	r16
    9396:	1f 93       	push	r17
    9398:	cf 93       	push	r28
    939a:	df 93       	push	r29
    939c:	cd b7       	in	r28, 0x3d	; 61
    939e:	de b7       	in	r29, 0x3e	; 62
    93a0:	c6 55       	subi	r28, 0x56	; 86
    93a2:	d1 09       	sbc	r29, r1
    93a4:	0f b6       	in	r0, 0x3f	; 63
    93a6:	f8 94       	cli
    93a8:	de bf       	out	0x3e, r29	; 62
    93aa:	0f be       	out	0x3f, r0	; 63
    93ac:	cd bf       	out	0x3d, r28	; 61
    93ae:	3e ea       	ldi	r19, 0xAE	; 174
    93b0:	c3 2e       	mov	r12, r19
    93b2:	31 e1       	ldi	r19, 0x11	; 17
    93b4:	d3 2e       	mov	r13, r19
    93b6:	f1 2c       	mov	r15, r1
    93b8:	4a e0       	ldi	r20, 0x0A	; 10
    93ba:	a4 2e       	mov	r10, r20
    93bc:	b1 2c       	mov	r11, r1
    93be:	54 e6       	ldi	r21, 0x64	; 100
    93c0:	25 2e       	mov	r2, r21
    93c2:	31 2c       	mov	r3, r1
    93c4:	41 2c       	mov	r4, r1
    93c6:	51 2c       	mov	r5, r1
    93c8:	61 e4       	ldi	r22, 0x41	; 65
    93ca:	86 2e       	mov	r8, r22
    93cc:	91 2c       	mov	r9, r1
    93ce:	8c 0e       	add	r8, r28
    93d0:	9d 1e       	adc	r9, r29
    93d2:	8c e0       	ldi	r24, 0x0C	; 12
    93d4:	88 0e       	add	r8, r24
    93d6:	91 1c       	adc	r9, r1
    93d8:	71 e4       	ldi	r23, 0x41	; 65
    93da:	67 2e       	mov	r6, r23
    93dc:	71 2c       	mov	r7, r1
    93de:	6c 0e       	add	r6, r28
    93e0:	7d 1e       	adc	r7, r29
    93e2:	ef ef       	ldi	r30, 0xFF	; 255
    93e4:	6e 1a       	sub	r6, r30
    93e6:	7e 0a       	sbc	r7, r30
    93e8:	be 01       	movw	r22, r28
    93ea:	6f 5b       	subi	r22, 0xBF	; 191
    93ec:	7f 4f       	sbci	r23, 0xFF	; 255
    93ee:	8f 2d       	mov	r24, r15
    93f0:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    93f4:	81 30       	cpi	r24, 0x01	; 1
    93f6:	09 f0       	breq	.+2      	; 0x93fa <send_mqtt_tds()+0x80>
    93f8:	ba c0       	rjmp	.+372    	; 0x956e <send_mqtt_tds()+0x1f4>
    93fa:	22 96       	adiw	r28, 0x02	; 2
    93fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    93fe:	22 97       	sbiw	r28, 0x02	; 2
    9400:	81 30       	cpi	r24, 0x01	; 1
    9402:	09 f0       	breq	.+2      	; 0x9406 <send_mqtt_tds()+0x8c>
    9404:	b4 c0       	rjmp	.+360    	; 0x956e <send_mqtt_tds()+0x1f4>
    9406:	f6 01       	movw	r30, r12
    9408:	83 8d       	ldd	r24, Z+27	; 0x1b
    940a:	81 30       	cpi	r24, 0x01	; 1
    940c:	09 f0       	breq	.+2      	; 0x9410 <send_mqtt_tds()+0x96>
    940e:	af c0       	rjmp	.+350    	; 0x956e <send_mqtt_tds()+0x1f4>
    9410:	85 81       	ldd	r24, Z+5	; 0x05
    9412:	96 81       	ldd	r25, Z+6	; 0x06
    9414:	b5 01       	movw	r22, r10
    9416:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    941a:	cb 01       	movw	r24, r22
itoa():
    941c:	4a e0       	ldi	r20, 0x0A	; 10
    941e:	be 01       	movw	r22, r28
    9420:	6f 5f       	subi	r22, 0xFF	; 255
    9422:	7f 4f       	sbci	r23, 0xFF	; 255
    9424:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9428:	8e 01       	movw	r16, r28
    942a:	0f 5f       	subi	r16, 0xFF	; 255
    942c:	1f 4f       	sbci	r17, 0xFF	; 255
    942e:	2b ea       	ldi	r18, 0xAB	; 171
    9430:	33 e0       	ldi	r19, 0x03	; 3
    9432:	4f 2d       	mov	r20, r15
    9434:	65 e0       	ldi	r22, 0x05	; 5
    9436:	74 e0       	ldi	r23, 0x04	; 4
    9438:	85 e1       	ldi	r24, 0x15	; 21
    943a:	9e e0       	ldi	r25, 0x0E	; 14
    943c:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9440:	50 e0       	ldi	r21, 0x00	; 0
    9442:	40 e0       	ldi	r20, 0x00	; 0
    9444:	60 e0       	ldi	r22, 0x00	; 0
    9446:	70 e0       	ldi	r23, 0x00	; 0
    9448:	cb 01       	movw	r24, r22
    944a:	fa 01       	movw	r30, r20
    944c:	ee 0f       	add	r30, r30
    944e:	ff 1f       	adc	r31, r31
    9450:	ec 0d       	add	r30, r12
    9452:	fd 1d       	adc	r31, r13
    9454:	07 81       	ldd	r16, Z+7	; 0x07
    9456:	10 85       	ldd	r17, Z+8	; 0x08
    9458:	01 2e       	mov	r0, r17
    945a:	00 0c       	add	r0, r0
    945c:	22 0b       	sbc	r18, r18
    945e:	33 0b       	sbc	r19, r19
    9460:	60 0f       	add	r22, r16
    9462:	71 1f       	adc	r23, r17
    9464:	82 1f       	adc	r24, r18
    9466:	93 1f       	adc	r25, r19
    9468:	4f 5f       	subi	r20, 0xFF	; 255
    946a:	5f 4f       	sbci	r21, 0xFF	; 255
    946c:	4a 30       	cpi	r20, 0x0A	; 10
    946e:	51 05       	cpc	r21, r1
    9470:	61 f7       	brne	.-40     	; 0x944a <send_mqtt_tds()+0xd0>
    9472:	a2 01       	movw	r20, r4
    9474:	91 01       	movw	r18, r2
    9476:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
    947a:	c9 01       	movw	r24, r18
itoa():
    947c:	4a e0       	ldi	r20, 0x0A	; 10
    947e:	be 01       	movw	r22, r28
    9480:	6f 5f       	subi	r22, 0xFF	; 255
    9482:	7f 4f       	sbci	r23, 0xFF	; 255
    9484:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9488:	8e 01       	movw	r16, r28
    948a:	0f 5f       	subi	r16, 0xFF	; 255
    948c:	1f 4f       	sbci	r17, 0xFF	; 255
    948e:	20 eb       	ldi	r18, 0xB0	; 176
    9490:	33 e0       	ldi	r19, 0x03	; 3
    9492:	4f 2d       	mov	r20, r15
    9494:	65 e0       	ldi	r22, 0x05	; 5
    9496:	74 e0       	ldi	r23, 0x04	; 4
    9498:	85 e1       	ldi	r24, 0x15	; 21
    949a:	9e e0       	ldi	r25, 0x0E	; 14
    949c:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94a0:	b4 01       	movw	r22, r8
    94a2:	c8 01       	movw	r24, r16
    94a4:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    94a8:	29 eb       	ldi	r18, 0xB9	; 185
    94aa:	33 e0       	ldi	r19, 0x03	; 3
    94ac:	4f 2d       	mov	r20, r15
    94ae:	65 e0       	ldi	r22, 0x05	; 5
    94b0:	74 e0       	ldi	r23, 0x04	; 4
    94b2:	85 e1       	ldi	r24, 0x15	; 21
    94b4:	9e e0       	ldi	r25, 0x0E	; 14
    94b6:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    94ba:	4a e0       	ldi	r20, 0x0A	; 10
    94bc:	b8 01       	movw	r22, r16
    94be:	2d 96       	adiw	r28, 0x0d	; 13
    94c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    94c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    94c4:	2d 97       	sbiw	r28, 0x0d	; 13
    94c6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    94ca:	2c ee       	ldi	r18, 0xEC	; 236
    94cc:	34 e0       	ldi	r19, 0x04	; 4
    94ce:	4f 2d       	mov	r20, r15
    94d0:	65 e0       	ldi	r22, 0x05	; 5
    94d2:	74 e0       	ldi	r23, 0x04	; 4
    94d4:	85 e1       	ldi	r24, 0x15	; 21
    94d6:	9e e0       	ldi	r25, 0x0E	; 14
    94d8:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94dc:	f6 01       	movw	r30, r12
    94de:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    94e0:	4a e0       	ldi	r20, 0x0A	; 10
    94e2:	b8 01       	movw	r22, r16
    94e4:	90 e0       	ldi	r25, 0x00	; 0
    94e6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    94ea:	2e eb       	ldi	r18, 0xBE	; 190
    94ec:	33 e0       	ldi	r19, 0x03	; 3
    94ee:	4f 2d       	mov	r20, r15
    94f0:	65 e0       	ldi	r22, 0x05	; 5
    94f2:	74 e0       	ldi	r23, 0x04	; 4
    94f4:	85 e1       	ldi	r24, 0x15	; 21
    94f6:	9e e0       	ldi	r25, 0x0E	; 14
    94f8:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94fc:	19 82       	std	Y+1, r1	; 0x01
    94fe:	00 e1       	ldi	r16, 0x10	; 16
    9500:	28 e0       	ldi	r18, 0x08	; 8
    9502:	a3 01       	movw	r20, r6
    9504:	6a e3       	ldi	r22, 0x3A	; 58
    9506:	ce 01       	movw	r24, r28
    9508:	01 96       	adiw	r24, 0x01	; 1
    950a:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    950e:	8e 01       	movw	r16, r28
    9510:	0f 5f       	subi	r16, 0xFF	; 255
    9512:	1f 4f       	sbci	r17, 0xFF	; 255
    9514:	20 e9       	ldi	r18, 0x90	; 144
    9516:	33 e0       	ldi	r19, 0x03	; 3
    9518:	4f 2d       	mov	r20, r15
    951a:	65 e0       	ldi	r22, 0x05	; 5
    951c:	74 e0       	ldi	r23, 0x04	; 4
    951e:	85 e1       	ldi	r24, 0x15	; 21
    9520:	9e e0       	ldi	r25, 0x0E	; 14
    9522:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9526:	66 96       	adiw	r28, 0x16	; 22
    9528:	8f ad       	ldd	r24, Y+63	; 0x3f
    952a:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    952c:	4a e0       	ldi	r20, 0x0A	; 10
    952e:	b8 01       	movw	r22, r16
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9536:	25 ec       	ldi	r18, 0xC5	; 197
    9538:	33 e0       	ldi	r19, 0x03	; 3
    953a:	4f 2d       	mov	r20, r15
    953c:	65 e0       	ldi	r22, 0x05	; 5
    953e:	74 e0       	ldi	r23, 0x04	; 4
    9540:	85 e1       	ldi	r24, 0x15	; 21
    9542:	9e e0       	ldi	r25, 0x0E	; 14
    9544:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9548:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <uptime>
    954c:	f6 01       	movw	r30, r12
    954e:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    9550:	4a e0       	ldi	r20, 0x0A	; 10
    9552:	b8 01       	movw	r22, r16
    9554:	89 1b       	sub	r24, r25
    9556:	99 0b       	sbc	r25, r25
    9558:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    955c:	2c ec       	ldi	r18, 0xCC	; 204
    955e:	33 e0       	ldi	r19, 0x03	; 3
    9560:	4f 2d       	mov	r20, r15
    9562:	65 e0       	ldi	r22, 0x05	; 5
    9564:	74 e0       	ldi	r23, 0x04	; 4
    9566:	85 e1       	ldi	r24, 0x15	; 21
    9568:	9e e0       	ldi	r25, 0x0E	; 14
    956a:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    956e:	f3 94       	inc	r15
    9570:	fe e1       	ldi	r31, 0x1E	; 30
    9572:	cf 0e       	add	r12, r31
    9574:	d1 1c       	adc	r13, r1
    9576:	86 e0       	ldi	r24, 0x06	; 6
    9578:	f8 12       	cpse	r15, r24
    957a:	36 cf       	rjmp	.-404    	; 0x93e8 <send_mqtt_tds()+0x6e>
    957c:	ca 5a       	subi	r28, 0xAA	; 170
    957e:	df 4f       	sbci	r29, 0xFF	; 255
    9580:	0f b6       	in	r0, 0x3f	; 63
    9582:	f8 94       	cli
    9584:	de bf       	out	0x3e, r29	; 62
    9586:	0f be       	out	0x3f, r0	; 63
    9588:	cd bf       	out	0x3d, r28	; 61
    958a:	df 91       	pop	r29
    958c:	cf 91       	pop	r28
    958e:	1f 91       	pop	r17
    9590:	0f 91       	pop	r16
    9592:	ff 90       	pop	r15
    9594:	df 90       	pop	r13
    9596:	cf 90       	pop	r12
    9598:	bf 90       	pop	r11
    959a:	af 90       	pop	r10
    959c:	9f 90       	pop	r9
    959e:	8f 90       	pop	r8
    95a0:	7f 90       	pop	r7
    95a2:	6f 90       	pop	r6
    95a4:	5f 90       	pop	r5
    95a6:	4f 90       	pop	r4
    95a8:	3f 90       	pop	r3
    95aa:	2f 90       	pop	r2
    95ac:	08 95       	ret

000095ae <send_mqtt_program()>:
_Z17send_mqtt_programv():
    95ae:	af 92       	push	r10
    95b0:	bf 92       	push	r11
    95b2:	cf 92       	push	r12
    95b4:	df 92       	push	r13
    95b6:	ef 92       	push	r14
    95b8:	ff 92       	push	r15
    95ba:	0f 93       	push	r16
    95bc:	1f 93       	push	r17
    95be:	cf 93       	push	r28
    95c0:	df 93       	push	r29
    95c2:	cd b7       	in	r28, 0x3d	; 61
    95c4:	de b7       	in	r29, 0x3e	; 62
    95c6:	cb 54       	subi	r28, 0x4B	; 75
    95c8:	d1 09       	sbc	r29, r1
    95ca:	0f b6       	in	r0, 0x3f	; 63
    95cc:	f8 94       	cli
    95ce:	de bf       	out	0x3e, r29	; 62
    95d0:	0f be       	out	0x3f, r0	; 63
    95d2:	cd bf       	out	0x3d, r28	; 61
    95d4:	b1 2c       	mov	r11, r1
    95d6:	8b 2d       	mov	r24, r11
    95d8:	0e 94 92 92 	call	0x12524	; 0x12524 <thermostat_program_get_active(unsigned char)>
    95dc:	a8 2e       	mov	r10, r24
    95de:	8f ef       	ldi	r24, 0xFF	; 255
    95e0:	a8 16       	cp	r10, r24
    95e2:	09 f4       	brne	.+2      	; 0x95e6 <send_mqtt_program()+0x38>
    95e4:	e9 c0       	rjmp	.+466    	; 0x97b8 <send_mqtt_program()+0x20a>
    95e6:	be 01       	movw	r22, r28
    95e8:	6f 5f       	subi	r22, 0xFF	; 255
    95ea:	7f 4f       	sbci	r23, 0xFF	; 255
    95ec:	8b 2d       	mov	r24, r11
    95ee:	0e 94 46 92 	call	0x1248c	; 0x1248c <thermostat_program_get_name(unsigned char, char*)>
    95f2:	8e 01       	movw	r16, r28
    95f4:	0f 5f       	subi	r16, 0xFF	; 255
    95f6:	1f 4f       	sbci	r17, 0xFF	; 255
    95f8:	29 eb       	ldi	r18, 0xB9	; 185
    95fa:	33 e0       	ldi	r19, 0x03	; 3
    95fc:	4b 2d       	mov	r20, r11
    95fe:	65 ed       	ldi	r22, 0xD5	; 213
    9600:	73 e0       	ldi	r23, 0x03	; 3
    9602:	85 e1       	ldi	r24, 0x15	; 21
    9604:	9e e0       	ldi	r25, 0x0E	; 14
    9606:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    960a:	4a e0       	ldi	r20, 0x0A	; 10
    960c:	b8 01       	movw	r22, r16
    960e:	8a 2d       	mov	r24, r10
    9610:	90 e0       	ldi	r25, 0x00	; 0
    9612:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    9616:	2a ed       	ldi	r18, 0xDA	; 218
    9618:	33 e0       	ldi	r19, 0x03	; 3
    961a:	4b 2d       	mov	r20, r11
    961c:	65 ed       	ldi	r22, 0xD5	; 213
    961e:	73 e0       	ldi	r23, 0x03	; 3
    9620:	85 e1       	ldi	r24, 0x15	; 21
    9622:	9e e0       	ldi	r25, 0x0E	; 14
    9624:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9628:	a1 2c       	mov	r10, r1
    962a:	ce 01       	movw	r24, r28
    962c:	89 5b       	subi	r24, 0xB9	; 185
    962e:	9f 4f       	sbci	r25, 0xFF	; 255
    9630:	6c 01       	movw	r12, r24
    9632:	01 96       	adiw	r24, 0x01	; 1
    9634:	7c 01       	movw	r14, r24
    9636:	8e 01       	movw	r16, r28
    9638:	07 5b       	subi	r16, 0xB7	; 183
    963a:	1f 4f       	sbci	r17, 0xFF	; 255
    963c:	9e 01       	movw	r18, r28
    963e:	26 5b       	subi	r18, 0xB6	; 182
    9640:	3f 4f       	sbci	r19, 0xFF	; 255
    9642:	ae 01       	movw	r20, r28
    9644:	45 5b       	subi	r20, 0xB5	; 181
    9646:	5f 4f       	sbci	r21, 0xFF	; 255
    9648:	6a 2d       	mov	r22, r10
    964a:	8b 2d       	mov	r24, r11
    964c:	0e 94 a2 92 	call	0x12544	; 0x12544 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    9650:	28 96       	adiw	r28, 0x08	; 8
    9652:	8f ad       	ldd	r24, Y+63	; 0x3f
    9654:	28 97       	sbiw	r28, 0x08	; 8
    9656:	81 30       	cpi	r24, 0x01	; 1
    9658:	09 f0       	breq	.+2      	; 0x965c <send_mqtt_program()+0xae>
    965a:	aa c0       	rjmp	.+340    	; 0x97b0 <send_mqtt_program()+0x202>
    965c:	2c 96       	adiw	r28, 0x0c	; 12
    965e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9660:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    9662:	4a e0       	ldi	r20, 0x0A	; 10
    9664:	be 01       	movw	r22, r28
    9666:	6f 5b       	subi	r22, 0xBF	; 191
    9668:	7f 4f       	sbci	r23, 0xFF	; 255
    966a:	90 e0       	ldi	r25, 0x00	; 0
    966c:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    9670:	be 01       	movw	r22, r28
    9672:	6f 5b       	subi	r22, 0xBF	; 191
    9674:	7f 4f       	sbci	r23, 0xFF	; 255
    9676:	ce 01       	movw	r24, r28
    9678:	01 96       	adiw	r24, 0x01	; 1
    967a:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    967e:	61 ee       	ldi	r22, 0xE1	; 225
    9680:	73 e0       	ldi	r23, 0x03	; 3
    9682:	ce 01       	movw	r24, r28
    9684:	01 96       	adiw	r24, 0x01	; 1
    9686:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    968a:	2b 96       	adiw	r28, 0x0b	; 11
    968c:	8f ad       	ldd	r24, Y+63	; 0x3f
    968e:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    9690:	4a e0       	ldi	r20, 0x0A	; 10
    9692:	be 01       	movw	r22, r28
    9694:	6f 5b       	subi	r22, 0xBF	; 191
    9696:	7f 4f       	sbci	r23, 0xFF	; 255
    9698:	90 e0       	ldi	r25, 0x00	; 0
    969a:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    969e:	be 01       	movw	r22, r28
    96a0:	6f 5b       	subi	r22, 0xBF	; 191
    96a2:	7f 4f       	sbci	r23, 0xFF	; 255
    96a4:	ce 01       	movw	r24, r28
    96a6:	01 96       	adiw	r24, 0x01	; 1
    96a8:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    96ac:	61 ee       	ldi	r22, 0xE1	; 225
    96ae:	73 e0       	ldi	r23, 0x03	; 3
    96b0:	ce 01       	movw	r24, r28
    96b2:	01 96       	adiw	r24, 0x01	; 1
    96b4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    96b8:	2a 96       	adiw	r28, 0x0a	; 10
    96ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    96bc:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    96be:	4a e0       	ldi	r20, 0x0A	; 10
    96c0:	be 01       	movw	r22, r28
    96c2:	6f 5b       	subi	r22, 0xBF	; 191
    96c4:	7f 4f       	sbci	r23, 0xFF	; 255
    96c6:	90 e0       	ldi	r25, 0x00	; 0
    96c8:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    96cc:	be 01       	movw	r22, r28
    96ce:	6f 5b       	subi	r22, 0xBF	; 191
    96d0:	7f 4f       	sbci	r23, 0xFF	; 255
    96d2:	ce 01       	movw	r24, r28
    96d4:	01 96       	adiw	r24, 0x01	; 1
    96d6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    96da:	61 ee       	ldi	r22, 0xE1	; 225
    96dc:	73 e0       	ldi	r23, 0x03	; 3
    96de:	ce 01       	movw	r24, r28
    96e0:	01 96       	adiw	r24, 0x01	; 1
    96e2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    96e6:	29 96       	adiw	r28, 0x09	; 9
    96e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    96ea:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    96ec:	4a e0       	ldi	r20, 0x0A	; 10
    96ee:	be 01       	movw	r22, r28
    96f0:	6f 5b       	subi	r22, 0xBF	; 191
    96f2:	7f 4f       	sbci	r23, 0xFF	; 255
    96f4:	90 e0       	ldi	r25, 0x00	; 0
    96f6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    96fa:	be 01       	movw	r22, r28
    96fc:	6f 5b       	subi	r22, 0xBF	; 191
    96fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9700:	ce 01       	movw	r24, r28
    9702:	01 96       	adiw	r24, 0x01	; 1
    9704:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9708:	ce 01       	movw	r24, r28
    970a:	01 96       	adiw	r24, 0x01	; 1
    970c:	7c 01       	movw	r14, r24
    970e:	09 ed       	ldi	r16, 0xD9	; 217
    9710:	17 e0       	ldi	r17, 0x07	; 7
    9712:	2a 2d       	mov	r18, r10
    9714:	4b 2d       	mov	r20, r11
    9716:	63 ee       	ldi	r22, 0xE3	; 227
    9718:	73 e0       	ldi	r23, 0x03	; 3
    971a:	85 e1       	ldi	r24, 0x15	; 21
    971c:	9e e0       	ldi	r25, 0x0E	; 14
    971e:	0e 94 84 86 	call	0x10d08	; 0x10d08 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9722:	28 96       	adiw	r28, 0x08	; 8
    9724:	8f ad       	ldd	r24, Y+63	; 0x3f
    9726:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    9728:	4a e0       	ldi	r20, 0x0A	; 10
    972a:	be 01       	movw	r22, r28
    972c:	6f 5b       	subi	r22, 0xBF	; 191
    972e:	7f 4f       	sbci	r23, 0xFF	; 255
    9730:	90 e0       	ldi	r25, 0x00	; 0
    9732:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    9736:	be 01       	movw	r22, r28
    9738:	6f 5b       	subi	r22, 0xBF	; 191
    973a:	7f 4f       	sbci	r23, 0xFF	; 255
    973c:	c7 01       	movw	r24, r14
    973e:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9742:	0a ed       	ldi	r16, 0xDA	; 218
    9744:	13 e0       	ldi	r17, 0x03	; 3
    9746:	2a 2d       	mov	r18, r10
    9748:	4b 2d       	mov	r20, r11
    974a:	63 ee       	ldi	r22, 0xE3	; 227
    974c:	73 e0       	ldi	r23, 0x03	; 3
    974e:	85 e1       	ldi	r24, 0x15	; 21
    9750:	9e e0       	ldi	r25, 0x0E	; 14
    9752:	0e 94 84 86 	call	0x10d08	; 0x10d08 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9756:	6a 2d       	mov	r22, r10
    9758:	8b 2d       	mov	r24, r11
    975a:	0e 94 31 93 	call	0x12662	; 0x12662 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    975e:	4a e0       	ldi	r20, 0x0A	; 10
    9760:	be 01       	movw	r22, r28
    9762:	6f 5b       	subi	r22, 0xBF	; 191
    9764:	7f 4f       	sbci	r23, 0xFF	; 255
    9766:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    976a:	be 01       	movw	r22, r28
    976c:	6f 5b       	subi	r22, 0xBF	; 191
    976e:	7f 4f       	sbci	r23, 0xFF	; 255
    9770:	c7 01       	movw	r24, r14
    9772:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9776:	01 ef       	ldi	r16, 0xF1	; 241
    9778:	13 e0       	ldi	r17, 0x03	; 3
    977a:	2a 2d       	mov	r18, r10
    977c:	4b 2d       	mov	r20, r11
    977e:	63 ee       	ldi	r22, 0xE3	; 227
    9780:	73 e0       	ldi	r23, 0x03	; 3
    9782:	85 e1       	ldi	r24, 0x15	; 21
    9784:	9e e0       	ldi	r25, 0x0E	; 14
    9786:	0e 94 84 86 	call	0x10d08	; 0x10d08 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    978a:	6a 2d       	mov	r22, r10
    978c:	8b 2d       	mov	r24, r11
    978e:	0e 94 6f 93 	call	0x126de	; 0x126de <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    9792:	4a e0       	ldi	r20, 0x0A	; 10
    9794:	b7 01       	movw	r22, r14
    9796:	90 e0       	ldi	r25, 0x00	; 0
    9798:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z17send_mqtt_programv():
    979c:	0b ef       	ldi	r16, 0xFB	; 251
    979e:	13 e0       	ldi	r17, 0x03	; 3
    97a0:	2a 2d       	mov	r18, r10
    97a2:	4b 2d       	mov	r20, r11
    97a4:	63 ee       	ldi	r22, 0xE3	; 227
    97a6:	73 e0       	ldi	r23, 0x03	; 3
    97a8:	85 e1       	ldi	r24, 0x15	; 21
    97aa:	9e e0       	ldi	r25, 0x0E	; 14
    97ac:	0e 94 84 86 	call	0x10d08	; 0x10d08 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    97b0:	a3 94       	inc	r10
    97b2:	9b e0       	ldi	r25, 0x0B	; 11
    97b4:	a9 12       	cpse	r10, r25
    97b6:	39 cf       	rjmp	.-398    	; 0x962a <send_mqtt_program()+0x7c>
    97b8:	b3 94       	inc	r11
    97ba:	88 e0       	ldi	r24, 0x08	; 8
    97bc:	b8 12       	cpse	r11, r24
    97be:	0b cf       	rjmp	.-490    	; 0x95d6 <send_mqtt_program()+0x28>
    97c0:	c5 5b       	subi	r28, 0xB5	; 181
    97c2:	df 4f       	sbci	r29, 0xFF	; 255
    97c4:	0f b6       	in	r0, 0x3f	; 63
    97c6:	f8 94       	cli
    97c8:	de bf       	out	0x3e, r29	; 62
    97ca:	0f be       	out	0x3f, r0	; 63
    97cc:	cd bf       	out	0x3d, r28	; 61
    97ce:	df 91       	pop	r29
    97d0:	cf 91       	pop	r28
    97d2:	1f 91       	pop	r17
    97d4:	0f 91       	pop	r16
    97d6:	ff 90       	pop	r15
    97d8:	ef 90       	pop	r14
    97da:	df 90       	pop	r13
    97dc:	cf 90       	pop	r12
    97de:	bf 90       	pop	r11
    97e0:	af 90       	pop	r10
    97e2:	08 95       	ret

000097e4 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    97e4:	ff 92       	push	r15
    97e6:	0f 93       	push	r16
    97e8:	1f 93       	push	r17
    97ea:	cf 93       	push	r28
    97ec:	df 93       	push	r29
    97ee:	cd b7       	in	r28, 0x3d	; 61
    97f0:	de b7       	in	r29, 0x3e	; 62
    97f2:	a0 97       	sbiw	r28, 0x20	; 32
    97f4:	0f b6       	in	r0, 0x3f	; 63
    97f6:	f8 94       	cli
    97f8:	de bf       	out	0x3e, r29	; 62
    97fa:	0f be       	out	0x3f, r0	; 63
    97fc:	cd bf       	out	0x3d, r28	; 61
    97fe:	f8 2e       	mov	r15, r24
    9800:	0e 94 dd 8f 	call	0x11fba	; 0x11fba <thermostat_get_pid_p(unsigned char)>
    9804:	8e 01       	movw	r16, r28
    9806:	0f 5f       	subi	r16, 0xFF	; 255
    9808:	1f 4f       	sbci	r17, 0xFF	; 255
    980a:	22 e0       	ldi	r18, 0x02	; 2
    980c:	47 e0       	ldi	r20, 0x07	; 7
    980e:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9812:	24 ec       	ldi	r18, 0xC4	; 196
    9814:	37 e0       	ldi	r19, 0x07	; 7
    9816:	4f 2d       	mov	r20, r15
    9818:	60 e0       	ldi	r22, 0x00	; 0
    981a:	74 e0       	ldi	r23, 0x04	; 4
    981c:	85 e1       	ldi	r24, 0x15	; 21
    981e:	9e e0       	ldi	r25, 0x0E	; 14
    9820:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9824:	8f 2d       	mov	r24, r15
    9826:	0e 94 0c 90 	call	0x12018	; 0x12018 <thermostat_get_pid_i(unsigned char)>
    982a:	22 e0       	ldi	r18, 0x02	; 2
    982c:	47 e0       	ldi	r20, 0x07	; 7
    982e:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9832:	2b ec       	ldi	r18, 0xCB	; 203
    9834:	37 e0       	ldi	r19, 0x07	; 7
    9836:	4f 2d       	mov	r20, r15
    9838:	60 e0       	ldi	r22, 0x00	; 0
    983a:	74 e0       	ldi	r23, 0x04	; 4
    983c:	85 e1       	ldi	r24, 0x15	; 21
    983e:	9e e0       	ldi	r25, 0x0E	; 14
    9840:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9844:	8f 2d       	mov	r24, r15
    9846:	0e 94 17 90 	call	0x1202e	; 0x1202e <thermostat_get_pid_d(unsigned char)>
    984a:	22 e0       	ldi	r18, 0x02	; 2
    984c:	47 e0       	ldi	r20, 0x07	; 7
    984e:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9852:	22 ed       	ldi	r18, 0xD2	; 210
    9854:	37 e0       	ldi	r19, 0x07	; 7
    9856:	4f 2d       	mov	r20, r15
    9858:	60 e0       	ldi	r22, 0x00	; 0
    985a:	74 e0       	ldi	r23, 0x04	; 4
    985c:	85 e1       	ldi	r24, 0x15	; 21
    985e:	9e e0       	ldi	r25, 0x0E	; 14
    9860:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9864:	8f 2d       	mov	r24, r15
    9866:	0e 94 22 90 	call	0x12044	; 0x12044 <thermostat_get_pid_time(unsigned char)>
itoa():
    986a:	4a e0       	ldi	r20, 0x0A	; 10
    986c:	b8 01       	movw	r22, r16
    986e:	90 e0       	ldi	r25, 0x00	; 0
    9870:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    9874:	29 ed       	ldi	r18, 0xD9	; 217
    9876:	37 e0       	ldi	r19, 0x07	; 7
    9878:	4f 2d       	mov	r20, r15
    987a:	60 e0       	ldi	r22, 0x00	; 0
    987c:	74 e0       	ldi	r23, 0x04	; 4
    987e:	85 e1       	ldi	r24, 0x15	; 21
    9880:	9e e0       	ldi	r25, 0x0E	; 14
    9882:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9886:	a0 96       	adiw	r28, 0x20	; 32
    9888:	0f b6       	in	r0, 0x3f	; 63
    988a:	f8 94       	cli
    988c:	de bf       	out	0x3e, r29	; 62
    988e:	0f be       	out	0x3f, r0	; 63
    9890:	cd bf       	out	0x3d, r28	; 61
    9892:	df 91       	pop	r29
    9894:	cf 91       	pop	r28
    9896:	1f 91       	pop	r17
    9898:	0f 91       	pop	r16
    989a:	ff 90       	pop	r15
    989c:	08 95       	ret

0000989e <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    989e:	ff 92       	push	r15
    98a0:	0f 93       	push	r16
    98a2:	1f 93       	push	r17
    98a4:	cf 93       	push	r28
    98a6:	df 93       	push	r29
    98a8:	cd b7       	in	r28, 0x3d	; 61
    98aa:	de b7       	in	r29, 0x3e	; 62
    98ac:	63 97       	sbiw	r28, 0x13	; 19
    98ae:	0f b6       	in	r0, 0x3f	; 63
    98b0:	f8 94       	cli
    98b2:	de bf       	out	0x3e, r29	; 62
    98b4:	0f be       	out	0x3f, r0	; 63
    98b6:	cd bf       	out	0x3d, r28	; 61
    98b8:	1b 8a       	std	Y+19, r1	; 0x13
    98ba:	f1 2c       	mov	r15, r1
    98bc:	ae 01       	movw	r20, r28
    98be:	4f 5f       	subi	r20, 0xFF	; 255
    98c0:	5f 4f       	sbci	r21, 0xFF	; 255
    98c2:	be 01       	movw	r22, r28
    98c4:	6d 5e       	subi	r22, 0xED	; 237
    98c6:	7f 4f       	sbci	r23, 0xFF	; 255
    98c8:	8f 2d       	mov	r24, r15
    98ca:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    98ce:	8b 89       	ldd	r24, Y+19	; 0x13
    98d0:	81 30       	cpi	r24, 0x01	; 1
    98d2:	e1 f5       	brne	.+120    	; 0x994c <send_mqtt_remote_tds_status()+0xae>
    98d4:	8e 01       	movw	r16, r28
    98d6:	0f 5f       	subi	r16, 0xFF	; 255
    98d8:	1f 4f       	sbci	r17, 0xFF	; 255
    98da:	29 eb       	ldi	r18, 0xB9	; 185
    98dc:	33 e0       	ldi	r19, 0x03	; 3
    98de:	4f 2d       	mov	r20, r15
    98e0:	64 e0       	ldi	r22, 0x04	; 4
    98e2:	74 e0       	ldi	r23, 0x04	; 4
    98e4:	85 e1       	ldi	r24, 0x15	; 21
    98e6:	9e e0       	ldi	r25, 0x0E	; 14
    98e8:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    98ec:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    98ee:	4a e0       	ldi	r20, 0x0A	; 10
    98f0:	b8 01       	movw	r22, r16
    98f2:	90 e0       	ldi	r25, 0x00	; 0
    98f4:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    98f8:	2a ed       	ldi	r18, 0xDA	; 218
    98fa:	33 e0       	ldi	r19, 0x03	; 3
    98fc:	4f 2d       	mov	r20, r15
    98fe:	64 e0       	ldi	r22, 0x04	; 4
    9900:	74 e0       	ldi	r23, 0x04	; 4
    9902:	85 e1       	ldi	r24, 0x15	; 21
    9904:	9e e0       	ldi	r25, 0x0E	; 14
    9906:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    990a:	8f 2d       	mov	r24, r15
    990c:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <remote_tds_get_data(unsigned char)>
itoa():
    9910:	4a e0       	ldi	r20, 0x0A	; 10
    9912:	b8 01       	movw	r22, r16
    9914:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    9918:	2b ea       	ldi	r18, 0xAB	; 171
    991a:	33 e0       	ldi	r19, 0x03	; 3
    991c:	4f 2d       	mov	r20, r15
    991e:	64 e0       	ldi	r22, 0x04	; 4
    9920:	74 e0       	ldi	r23, 0x04	; 4
    9922:	85 e1       	ldi	r24, 0x15	; 21
    9924:	9e e0       	ldi	r25, 0x0E	; 14
    9926:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    992a:	8f 2d       	mov	r24, r15
    992c:	0e 94 ff 46 	call	0x8dfe	; 0x8dfe <remote_tds_get_last_update(unsigned char)>
itoa():
    9930:	4a e0       	ldi	r20, 0x0A	; 10
    9932:	b8 01       	movw	r22, r16
    9934:	90 e0       	ldi	r25, 0x00	; 0
    9936:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    993a:	29 e0       	ldi	r18, 0x09	; 9
    993c:	34 e0       	ldi	r19, 0x04	; 4
    993e:	4f 2d       	mov	r20, r15
    9940:	64 e0       	ldi	r22, 0x04	; 4
    9942:	74 e0       	ldi	r23, 0x04	; 4
    9944:	85 e1       	ldi	r24, 0x15	; 21
    9946:	9e e0       	ldi	r25, 0x0E	; 14
    9948:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    994c:	f3 94       	inc	r15
    994e:	8a e0       	ldi	r24, 0x0A	; 10
    9950:	f8 12       	cpse	r15, r24
    9952:	b4 cf       	rjmp	.-152    	; 0x98bc <send_mqtt_remote_tds_status()+0x1e>
    9954:	63 96       	adiw	r28, 0x13	; 19
    9956:	0f b6       	in	r0, 0x3f	; 63
    9958:	f8 94       	cli
    995a:	de bf       	out	0x3e, r29	; 62
    995c:	0f be       	out	0x3f, r0	; 63
    995e:	cd bf       	out	0x3d, r28	; 61
    9960:	df 91       	pop	r29
    9962:	cf 91       	pop	r28
    9964:	1f 91       	pop	r17
    9966:	0f 91       	pop	r16
    9968:	ff 90       	pop	r15
    996a:	08 95       	ret

0000996c <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    996c:	0f 93       	push	r16
    996e:	1f 93       	push	r17
    9970:	cf 93       	push	r28
    9972:	df 93       	push	r29
    9974:	cd b7       	in	r28, 0x3d	; 61
    9976:	de b7       	in	r29, 0x3e	; 62
    9978:	c8 58       	subi	r28, 0x88	; 136
    997a:	d1 09       	sbc	r29, r1
    997c:	0f b6       	in	r0, 0x3f	; 63
    997e:	f8 94       	cli
    9980:	de bf       	out	0x3e, r29	; 62
    9982:	0f be       	out	0x3f, r0	; 63
    9984:	cd bf       	out	0x3d, r28	; 61
    9986:	8f 3f       	cpi	r24, 0xFF	; 255
    9988:	c9 f1       	breq	.+114    	; 0x99fc <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    998a:	06 2f       	mov	r16, r22
    998c:	18 2f       	mov	r17, r24
    998e:	61 eb       	ldi	r22, 0xB1	; 177
    9990:	78 e5       	ldi	r23, 0x58	; 88
    9992:	ce 01       	movw	r24, r28
    9994:	8f 5b       	subi	r24, 0xBF	; 191
    9996:	9f 4f       	sbci	r25, 0xFF	; 255
    9998:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    999c:	65 e1       	ldi	r22, 0x15	; 21
    999e:	74 e0       	ldi	r23, 0x04	; 4
    99a0:	ce 01       	movw	r24, r28
    99a2:	8f 5b       	subi	r24, 0xBF	; 191
    99a4:	9f 4f       	sbci	r25, 0xFF	; 255
    99a6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
    99aa:	4a e0       	ldi	r20, 0x0A	; 10
    99ac:	be 01       	movw	r22, r28
    99ae:	6f 57       	subi	r22, 0x7F	; 127
    99b0:	7f 4f       	sbci	r23, 0xFF	; 255
    99b2:	81 2f       	mov	r24, r17
    99b4:	90 e0       	ldi	r25, 0x00	; 0
    99b6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    99ba:	be 01       	movw	r22, r28
    99bc:	6f 57       	subi	r22, 0x7F	; 127
    99be:	7f 4f       	sbci	r23, 0xFF	; 255
    99c0:	ce 01       	movw	r24, r28
    99c2:	8f 5b       	subi	r24, 0xBF	; 191
    99c4:	9f 4f       	sbci	r25, 0xFF	; 255
    99c6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    99ca:	63 e2       	ldi	r22, 0x23	; 35
    99cc:	74 e0       	ldi	r23, 0x04	; 4
    99ce:	ce 01       	movw	r24, r28
    99d0:	8f 5b       	subi	r24, 0xBF	; 191
    99d2:	9f 4f       	sbci	r25, 0xFF	; 255
    99d4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
    99d8:	4a e0       	ldi	r20, 0x0A	; 10
    99da:	be 01       	movw	r22, r28
    99dc:	6f 5f       	subi	r22, 0xFF	; 255
    99de:	7f 4f       	sbci	r23, 0xFF	; 255
    99e0:	80 2f       	mov	r24, r16
    99e2:	90 e0       	ldi	r25, 0x00	; 0
    99e4:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    99e8:	ae 01       	movw	r20, r28
    99ea:	4f 5f       	subi	r20, 0xFF	; 255
    99ec:	5f 4f       	sbci	r21, 0xFF	; 255
    99ee:	be 01       	movw	r22, r28
    99f0:	6f 5b       	subi	r22, 0xBF	; 191
    99f2:	7f 4f       	sbci	r23, 0xFF	; 255
    99f4:	85 e1       	ldi	r24, 0x15	; 21
    99f6:	9e e0       	ldi	r25, 0x0E	; 14
    99f8:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <PubSubClient::publish(char const*, char const*)>
    99fc:	c8 57       	subi	r28, 0x78	; 120
    99fe:	df 4f       	sbci	r29, 0xFF	; 255
    9a00:	0f b6       	in	r0, 0x3f	; 63
    9a02:	f8 94       	cli
    9a04:	de bf       	out	0x3e, r29	; 62
    9a06:	0f be       	out	0x3f, r0	; 63
    9a08:	cd bf       	out	0x3d, r28	; 61
    9a0a:	df 91       	pop	r29
    9a0c:	cf 91       	pop	r28
    9a0e:	1f 91       	pop	r17
    9a10:	0f 91       	pop	r16
    9a12:	08 95       	ret

00009a14 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    9a14:	ff 92       	push	r15
    9a16:	0f 93       	push	r16
    9a18:	1f 93       	push	r17
    9a1a:	cf 93       	push	r28
    9a1c:	df 93       	push	r29
    9a1e:	cd b7       	in	r28, 0x3d	; 61
    9a20:	de b7       	in	r29, 0x3e	; 62
    9a22:	c8 58       	subi	r28, 0x88	; 136
    9a24:	d1 09       	sbc	r29, r1
    9a26:	0f b6       	in	r0, 0x3f	; 63
    9a28:	f8 94       	cli
    9a2a:	de bf       	out	0x3e, r29	; 62
    9a2c:	0f be       	out	0x3f, r0	; 63
    9a2e:	cd bf       	out	0x3d, r28	; 61
    9a30:	8f 3f       	cpi	r24, 0xFF	; 255
    9a32:	09 f4       	brne	.+2      	; 0x9a36 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    9a34:	4f c0       	rjmp	.+158    	; 0x9ad4 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    9a36:	f4 2e       	mov	r15, r20
    9a38:	16 2f       	mov	r17, r22
    9a3a:	08 2f       	mov	r16, r24
    9a3c:	61 eb       	ldi	r22, 0xB1	; 177
    9a3e:	78 e5       	ldi	r23, 0x58	; 88
    9a40:	ce 01       	movw	r24, r28
    9a42:	8f 5b       	subi	r24, 0xBF	; 191
    9a44:	9f 4f       	sbci	r25, 0xFF	; 255
    9a46:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9a4a:	65 e1       	ldi	r22, 0x15	; 21
    9a4c:	74 e0       	ldi	r23, 0x04	; 4
    9a4e:	ce 01       	movw	r24, r28
    9a50:	8f 5b       	subi	r24, 0xBF	; 191
    9a52:	9f 4f       	sbci	r25, 0xFF	; 255
    9a54:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
    9a58:	4a e0       	ldi	r20, 0x0A	; 10
    9a5a:	be 01       	movw	r22, r28
    9a5c:	6f 57       	subi	r22, 0x7F	; 127
    9a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a60:	80 2f       	mov	r24, r16
    9a62:	90 e0       	ldi	r25, 0x00	; 0
    9a64:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9a68:	be 01       	movw	r22, r28
    9a6a:	6f 57       	subi	r22, 0x7F	; 127
    9a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a6e:	ce 01       	movw	r24, r28
    9a70:	8f 5b       	subi	r24, 0xBF	; 191
    9a72:	9f 4f       	sbci	r25, 0xFF	; 255
    9a74:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9a78:	6a e2       	ldi	r22, 0x2A	; 42
    9a7a:	74 e0       	ldi	r23, 0x04	; 4
    9a7c:	13 30       	cpi	r17, 0x03	; 3
    9a7e:	61 f0       	breq	.+24     	; 0x9a98 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9a80:	60 e3       	ldi	r22, 0x30	; 48
    9a82:	74 e0       	ldi	r23, 0x04	; 4
    9a84:	15 30       	cpi	r17, 0x05	; 5
    9a86:	41 f0       	breq	.+16     	; 0x9a98 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9a88:	66 e3       	ldi	r22, 0x36	; 54
    9a8a:	74 e0       	ldi	r23, 0x04	; 4
    9a8c:	16 30       	cpi	r17, 0x06	; 6
    9a8e:	21 f0       	breq	.+8      	; 0x9a98 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9a90:	1e 3f       	cpi	r17, 0xFE	; 254
    9a92:	39 f4       	brne	.+14     	; 0x9aa2 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    9a94:	6b e3       	ldi	r22, 0x3B	; 59
    9a96:	74 e0       	ldi	r23, 0x04	; 4
    9a98:	ce 01       	movw	r24, r28
    9a9a:	8f 5b       	subi	r24, 0xBF	; 191
    9a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    9a9e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9aa2:	60 e4       	ldi	r22, 0x40	; 64
    9aa4:	74 e0       	ldi	r23, 0x04	; 4
    9aa6:	ce 01       	movw	r24, r28
    9aa8:	8f 5b       	subi	r24, 0xBF	; 191
    9aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    9aac:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
    9ab0:	4a e0       	ldi	r20, 0x0A	; 10
    9ab2:	be 01       	movw	r22, r28
    9ab4:	6f 5f       	subi	r22, 0xFF	; 255
    9ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ab8:	8f 2d       	mov	r24, r15
    9aba:	90 e0       	ldi	r25, 0x00	; 0
    9abc:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9ac0:	ae 01       	movw	r20, r28
    9ac2:	4f 5f       	subi	r20, 0xFF	; 255
    9ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ac6:	be 01       	movw	r22, r28
    9ac8:	6f 5b       	subi	r22, 0xBF	; 191
    9aca:	7f 4f       	sbci	r23, 0xFF	; 255
    9acc:	85 e1       	ldi	r24, 0x15	; 21
    9ace:	9e e0       	ldi	r25, 0x0E	; 14
    9ad0:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <PubSubClient::publish(char const*, char const*)>
    9ad4:	c8 57       	subi	r28, 0x78	; 120
    9ad6:	df 4f       	sbci	r29, 0xFF	; 255
    9ad8:	0f b6       	in	r0, 0x3f	; 63
    9ada:	f8 94       	cli
    9adc:	de bf       	out	0x3e, r29	; 62
    9ade:	0f be       	out	0x3f, r0	; 63
    9ae0:	cd bf       	out	0x3d, r28	; 61
    9ae2:	df 91       	pop	r29
    9ae4:	cf 91       	pop	r28
    9ae6:	1f 91       	pop	r17
    9ae8:	0f 91       	pop	r16
    9aea:	ff 90       	pop	r15
    9aec:	08 95       	ret

00009aee <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    9aee:	21 e0       	ldi	r18, 0x01	; 1
    9af0:	30 e0       	ldi	r19, 0x00	; 0
    9af2:	01 c0       	rjmp	.+2      	; 0x9af6 <selftest_set_0(unsigned char)+0x8>
    9af4:	22 0f       	add	r18, r18
    9af6:	8a 95       	dec	r24
    9af8:	ea f7       	brpl	.-6      	; 0x9af4 <selftest_set_0(unsigned char)+0x6>
    9afa:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
    9afe:	82 2b       	or	r24, r18
    9b00:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <selftest_data>
    9b04:	08 95       	ret

00009b06 <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    9b06:	21 e0       	ldi	r18, 0x01	; 1
    9b08:	30 e0       	ldi	r19, 0x00	; 0
    9b0a:	01 c0       	rjmp	.+2      	; 0x9b0e <selftest_clear_0(unsigned char)+0x8>
    9b0c:	22 0f       	add	r18, r18
    9b0e:	8a 95       	dec	r24
    9b10:	ea f7       	brpl	.-6      	; 0x9b0c <selftest_clear_0(unsigned char)+0x6>
    9b12:	20 95       	com	r18
    9b14:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
    9b18:	28 23       	and	r18, r24
    9b1a:	20 93 ca 0a 	sts	0x0ACA, r18	; 0x800aca <selftest_data>
    9b1e:	08 95       	ret

00009b20 <selftest()>:
_Z8selftestv():
    9b20:	8e e6       	ldi	r24, 0x6E	; 110
    9b22:	90 e1       	ldi	r25, 0x10	; 16
    9b24:	0e 94 b5 cb 	call	0x1976a	; 0x1976a <RTC_DS1307::isrunning()>
    9b28:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <selftest_data>
    9b2c:	81 11       	cpse	r24, r1
    9b2e:	04 c0       	rjmp	.+8      	; 0x9b38 <selftest()+0x18>
    9b30:	91 60       	ori	r25, 0x01	; 1
    9b32:	90 93 ca 0a 	sts	0x0ACA, r25	; 0x800aca <selftest_data>
    9b36:	08 95       	ret
    9b38:	9e 7f       	andi	r25, 0xFE	; 254
    9b3a:	fb cf       	rjmp	.-10     	; 0x9b32 <selftest()+0x12>

00009b3c <time_get_offset()>:
_Z15time_get_offsetv():
    9b3c:	81 e0       	ldi	r24, 0x01	; 1
    9b3e:	90 e0       	ldi	r25, 0x00	; 0
    9b40:	0c 94 a6 37 	jmp	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>

00009b44 <send_device_status()>:
_Z18send_device_statusv():
    9b44:	ef 92       	push	r14
    9b46:	ff 92       	push	r15
    9b48:	0f 93       	push	r16
    9b4a:	1f 93       	push	r17
    9b4c:	cf 93       	push	r28
    9b4e:	df 93       	push	r29
    9b50:	cd b7       	in	r28, 0x3d	; 61
    9b52:	de b7       	in	r29, 0x3e	; 62
    9b54:	c0 58       	subi	r28, 0x80	; 128
    9b56:	d1 09       	sbc	r29, r1
    9b58:	0f b6       	in	r0, 0x3f	; 63
    9b5a:	f8 94       	cli
    9b5c:	de bf       	out	0x3e, r29	; 62
    9b5e:	0f be       	out	0x3f, r0	; 63
    9b60:	cd bf       	out	0x3d, r28	; 61
    9b62:	85 e1       	ldi	r24, 0x15	; 21
    9b64:	9e e0       	ldi	r25, 0x0E	; 14
    9b66:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
    9b6a:	88 23       	and	r24, r24
    9b6c:	09 f4       	brne	.+2      	; 0x9b70 <send_device_status()+0x2c>
    9b6e:	71 c1       	rjmp	.+738    	; 0x9e52 <send_device_status()+0x30e>
    9b70:	65 e4       	ldi	r22, 0x45	; 69
    9b72:	74 e0       	ldi	r23, 0x04	; 4
    9b74:	ce 01       	movw	r24, r28
    9b76:	8f 5b       	subi	r24, 0xBF	; 191
    9b78:	9f 4f       	sbci	r25, 0xFF	; 255
    9b7a:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9b7e:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <uptime+0x3>
    9b82:	8f 93       	push	r24
    9b84:	80 91 bd 0a 	lds	r24, 0x0ABD	; 0x800abd <uptime+0x2>
    9b88:	8f 93       	push	r24
    9b8a:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <uptime+0x1>
    9b8e:	8f 93       	push	r24
    9b90:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <uptime>
    9b94:	8f 93       	push	r24
    9b96:	83 e5       	ldi	r24, 0x53	; 83
    9b98:	94 e0       	ldi	r25, 0x04	; 4
    9b9a:	9f 93       	push	r25
    9b9c:	8f 93       	push	r24
    9b9e:	ce 01       	movw	r24, r28
    9ba0:	01 96       	adiw	r24, 0x01	; 1
    9ba2:	7c 01       	movw	r14, r24
    9ba4:	9f 93       	push	r25
    9ba6:	8f 93       	push	r24
    9ba8:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    9bac:	a7 01       	movw	r20, r14
    9bae:	be 01       	movw	r22, r28
    9bb0:	6f 5b       	subi	r22, 0xBF	; 191
    9bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    9bb4:	85 e1       	ldi	r24, 0x15	; 21
    9bb6:	9e e0       	ldi	r25, 0x0E	; 14
    9bb8:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9bbc:	67 e5       	ldi	r22, 0x57	; 87
    9bbe:	74 e0       	ldi	r23, 0x04	; 4
    9bc0:	ce 01       	movw	r24, r28
    9bc2:	8f 5b       	subi	r24, 0xBF	; 191
    9bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    9bc6:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9bca:	80 91 9e 0a 	lds	r24, 0x0A9E	; 0x800a9e <brigthness_display_values>
itoa():
    9bce:	4a e0       	ldi	r20, 0x0A	; 10
    9bd0:	b7 01       	movw	r22, r14
    9bd2:	90 e0       	ldi	r25, 0x00	; 0
    9bd4:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9bd8:	a7 01       	movw	r20, r14
    9bda:	be 01       	movw	r22, r28
    9bdc:	6f 5b       	subi	r22, 0xBF	; 191
    9bde:	7f 4f       	sbci	r23, 0xFF	; 255
    9be0:	85 e1       	ldi	r24, 0x15	; 21
    9be2:	9e e0       	ldi	r25, 0x0E	; 14
    9be4:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9be8:	69 e6       	ldi	r22, 0x69	; 105
    9bea:	74 e0       	ldi	r23, 0x04	; 4
    9bec:	ce 01       	movw	r24, r28
    9bee:	8f 5b       	subi	r24, 0xBF	; 191
    9bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf2:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
itoa():
    9bf6:	4a e0       	ldi	r20, 0x0A	; 10
    9bf8:	b7 01       	movw	r22, r14
    9bfa:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <light_curr>
    9bfe:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <light_curr+0x1>
    9c02:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9c06:	a7 01       	movw	r20, r14
    9c08:	be 01       	movw	r22, r28
    9c0a:	6f 5b       	subi	r22, 0xBF	; 191
    9c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    9c0e:	85 e1       	ldi	r24, 0x15	; 21
    9c10:	9e e0       	ldi	r25, 0x0E	; 14
    9c12:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9c16:	66 e7       	ldi	r22, 0x76	; 118
    9c18:	74 e0       	ldi	r23, 0x04	; 4
    9c1a:	ce 01       	movw	r24, r28
    9c1c:	8f 5b       	subi	r24, 0xBF	; 191
    9c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c20:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9c24:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <brigthness_display_auto_values>
itoa():
    9c28:	4a e0       	ldi	r20, 0x0A	; 10
    9c2a:	b7 01       	movw	r22, r14
    9c2c:	90 e0       	ldi	r25, 0x00	; 0
    9c2e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9c32:	a7 01       	movw	r20, r14
    9c34:	be 01       	movw	r22, r28
    9c36:	6f 5b       	subi	r22, 0xBF	; 191
    9c38:	7f 4f       	sbci	r23, 0xFF	; 255
    9c3a:	85 e1       	ldi	r24, 0x15	; 21
    9c3c:	9e e0       	ldi	r25, 0x0E	; 14
    9c3e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9c42:	6d e8       	ldi	r22, 0x8D	; 141
    9c44:	74 e0       	ldi	r23, 0x04	; 4
    9c46:	ce 01       	movw	r24, r28
    9c48:	8f 5b       	subi	r24, 0xBF	; 191
    9c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c4c:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
itoa():
    9c50:	4a e0       	ldi	r20, 0x0A	; 10
    9c52:	b7 01       	movw	r22, r14
    9c54:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <load_min>
    9c58:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <load_min+0x1>
    9c5c:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9c60:	a7 01       	movw	r20, r14
    9c62:	be 01       	movw	r22, r28
    9c64:	6f 5b       	subi	r22, 0xBF	; 191
    9c66:	7f 4f       	sbci	r23, 0xFF	; 255
    9c68:	85 e1       	ldi	r24, 0x15	; 21
    9c6a:	9e e0       	ldi	r25, 0x0E	; 14
    9c6c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9c70:	6d e9       	ldi	r22, 0x9D	; 157
    9c72:	74 e0       	ldi	r23, 0x04	; 4
    9c74:	ce 01       	movw	r24, r28
    9c76:	8f 5b       	subi	r24, 0xBF	; 191
    9c78:	9f 4f       	sbci	r25, 0xFF	; 255
    9c7a:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
itoa():
    9c7e:	4a e0       	ldi	r20, 0x0A	; 10
    9c80:	b7 01       	movw	r22, r14
    9c82:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <load_max>
    9c86:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <load_max+0x1>
    9c8a:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9c8e:	a7 01       	movw	r20, r14
    9c90:	be 01       	movw	r22, r28
    9c92:	6f 5b       	subi	r22, 0xBF	; 191
    9c94:	7f 4f       	sbci	r23, 0xFF	; 255
    9c96:	85 e1       	ldi	r24, 0x15	; 21
    9c98:	9e e0       	ldi	r25, 0x0E	; 14
    9c9a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9c9e:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <load_max>
    9ca2:	10 92 a2 0a 	sts	0x0AA2, r1	; 0x800aa2 <load_max+0x1>
    9ca6:	10 92 a3 0a 	sts	0x0AA3, r1	; 0x800aa3 <load_max+0x2>
    9caa:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <load_max+0x3>
    9cae:	8f ef       	ldi	r24, 0xFF	; 255
    9cb0:	9f ef       	ldi	r25, 0xFF	; 255
    9cb2:	dc 01       	movw	r26, r24
    9cb4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
    9cb8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
    9cbc:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
    9cc0:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
    9cc4:	6d ea       	ldi	r22, 0xAD	; 173
    9cc6:	74 e0       	ldi	r23, 0x04	; 4
    9cc8:	ce 01       	movw	r24, r28
    9cca:	8f 5b       	subi	r24, 0xBF	; 191
    9ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    9cce:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9cd2:	80 91 aa 0a 	lds	r24, 0x0AAA	; 0x800aaa <default_ring>
itoa():
    9cd6:	4a e0       	ldi	r20, 0x0A	; 10
    9cd8:	b7 01       	movw	r22, r14
    9cda:	90 e0       	ldi	r25, 0x00	; 0
    9cdc:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9ce0:	a7 01       	movw	r20, r14
    9ce2:	be 01       	movw	r22, r28
    9ce4:	6f 5b       	subi	r22, 0xBF	; 191
    9ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ce8:	85 e1       	ldi	r24, 0x15	; 21
    9cea:	9e e0       	ldi	r25, 0x0E	; 14
    9cec:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9cf0:	61 ec       	ldi	r22, 0xC1	; 193
    9cf2:	74 e0       	ldi	r23, 0x04	; 4
    9cf4:	ce 01       	movw	r24, r28
    9cf6:	8f 5b       	subi	r24, 0xBF	; 191
    9cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    9cfa:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9cfe:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
itoa():
    9d02:	4a e0       	ldi	r20, 0x0A	; 10
    9d04:	b7 01       	movw	r22, r14
    9d06:	90 e0       	ldi	r25, 0x00	; 0
    9d08:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9d0c:	a7 01       	movw	r20, r14
    9d0e:	be 01       	movw	r22, r28
    9d10:	6f 5b       	subi	r22, 0xBF	; 191
    9d12:	7f 4f       	sbci	r23, 0xFF	; 255
    9d14:	85 e1       	ldi	r24, 0x15	; 21
    9d16:	9e e0       	ldi	r25, 0x0E	; 14
    9d18:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9d1c:	61 ed       	ldi	r22, 0xD1	; 209
    9d1e:	74 e0       	ldi	r23, 0x04	; 4
    9d20:	ce 01       	movw	r24, r28
    9d22:	8f 5b       	subi	r24, 0xBF	; 191
    9d24:	9f 4f       	sbci	r25, 0xFF	; 255
    9d26:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    9d2a:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <use_rtds>
itoa():
    9d2e:	4a e0       	ldi	r20, 0x0A	; 10
    9d30:	b7 01       	movw	r22, r14
    9d32:	90 e0       	ldi	r25, 0x00	; 0
    9d34:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9d38:	a7 01       	movw	r20, r14
    9d3a:	be 01       	movw	r22, r28
    9d3c:	6f 5b       	subi	r22, 0xBF	; 191
    9d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d40:	85 e1       	ldi	r24, 0x15	; 21
    9d42:	9e e0       	ldi	r25, 0x0E	; 14
    9d44:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9d48:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <time_get_offset()>
itoa():
    9d4c:	4a e0       	ldi	r20, 0x0A	; 10
    9d4e:	b7 01       	movw	r22, r14
    9d50:	08 2e       	mov	r0, r24
    9d52:	00 0c       	add	r0, r0
    9d54:	99 0b       	sbc	r25, r25
    9d56:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z18send_device_statusv():
    9d5a:	a7 01       	movw	r20, r14
    9d5c:	63 ee       	ldi	r22, 0xE3	; 227
    9d5e:	74 e0       	ldi	r23, 0x04	; 4
    9d60:	85 e1       	ldi	r24, 0x15	; 21
    9d62:	9e e0       	ldi	r25, 0x0E	; 14
    9d64:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9d68:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <tritri>
    9d6c:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <tritri+0x1>
    9d70:	25 e0       	ldi	r18, 0x05	; 5
    9d72:	28 9f       	mul	r18, r24
    9d74:	b0 01       	movw	r22, r0
    9d76:	29 9f       	mul	r18, r25
    9d78:	70 0d       	add	r23, r0
    9d7a:	11 24       	eor	r1, r1
    9d7c:	90 e0       	ldi	r25, 0x00	; 0
    9d7e:	80 e0       	ldi	r24, 0x00	; 0
    9d80:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    9d84:	20 e0       	ldi	r18, 0x00	; 0
    9d86:	30 e0       	ldi	r19, 0x00	; 0
    9d88:	4a e7       	ldi	r20, 0x7A	; 122
    9d8a:	54 e4       	ldi	r21, 0x44	; 68
    9d8c:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z18send_device_statusv():
    9d90:	87 01       	movw	r16, r14
    9d92:	22 e0       	ldi	r18, 0x02	; 2
    9d94:	44 e0       	ldi	r20, 0x04	; 4
    9d96:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9d9a:	a7 01       	movw	r20, r14
    9d9c:	63 ef       	ldi	r22, 0xF3	; 243
    9d9e:	74 e0       	ldi	r23, 0x04	; 4
    9da0:	85 e1       	ldi	r24, 0x15	; 21
    9da2:	9e e0       	ldi	r25, 0x0E	; 14
    9da4:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9da8:	60 91 c6 0a 	lds	r22, 0x0AC6	; 0x800ac6 <petnula>
    9dac:	70 91 c7 0a 	lds	r23, 0x0AC7	; 0x800ac7 <petnula+0x1>
    9db0:	83 e0       	ldi	r24, 0x03	; 3
    9db2:	66 0f       	add	r22, r22
    9db4:	77 1f       	adc	r23, r23
    9db6:	8a 95       	dec	r24
    9db8:	e1 f7       	brne	.-8      	; 0x9db2 <send_device_status()+0x26e>
    9dba:	90 e0       	ldi	r25, 0x00	; 0
    9dbc:	80 e0       	ldi	r24, 0x00	; 0
    9dbe:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    9dc2:	20 e0       	ldi	r18, 0x00	; 0
    9dc4:	30 e0       	ldi	r19, 0x00	; 0
    9dc6:	4a e7       	ldi	r20, 0x7A	; 122
    9dc8:	54 e4       	ldi	r21, 0x44	; 68
    9dca:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z18send_device_statusv():
    9dce:	22 e0       	ldi	r18, 0x02	; 2
    9dd0:	44 e0       	ldi	r20, 0x04	; 4
    9dd2:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9dd6:	a7 01       	movw	r20, r14
    9dd8:	66 e0       	ldi	r22, 0x06	; 6
    9dda:	75 e0       	ldi	r23, 0x05	; 5
    9ddc:	85 e1       	ldi	r24, 0x15	; 21
    9dde:	9e e0       	ldi	r25, 0x0E	; 14
    9de0:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9de4:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <dvanact>
    9de8:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <dvanact+0x1>
    9dec:	29 e3       	ldi	r18, 0x39	; 57
    9dee:	28 9f       	mul	r18, r24
    9df0:	b0 01       	movw	r22, r0
    9df2:	29 9f       	mul	r18, r25
    9df4:	70 0d       	add	r23, r0
    9df6:	11 24       	eor	r1, r1
    9df8:	90 e0       	ldi	r25, 0x00	; 0
    9dfa:	80 e0       	ldi	r24, 0x00	; 0
    9dfc:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    9e00:	20 e0       	ldi	r18, 0x00	; 0
    9e02:	30 e0       	ldi	r19, 0x00	; 0
    9e04:	4a e7       	ldi	r20, 0x7A	; 122
    9e06:	54 e4       	ldi	r21, 0x44	; 68
    9e08:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
_Z18send_device_statusv():
    9e0c:	22 e0       	ldi	r18, 0x02	; 2
    9e0e:	44 e0       	ldi	r20, 0x04	; 4
    9e10:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9e14:	a7 01       	movw	r20, r14
    9e16:	69 e1       	ldi	r22, 0x19	; 25
    9e18:	75 e0       	ldi	r23, 0x05	; 5
    9e1a:	85 e1       	ldi	r24, 0x15	; 21
    9e1c:	9e e0       	ldi	r25, 0x0E	; 14
    9e1e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    9e22:	60 91 c2 0a 	lds	r22, 0x0AC2	; 0x800ac2 <proud>
    9e26:	70 91 c3 0a 	lds	r23, 0x0AC3	; 0x800ac3 <proud+0x1>
    9e2a:	90 e0       	ldi	r25, 0x00	; 0
    9e2c:	80 e0       	ldi	r24, 0x00	; 0
    9e2e:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
_Z18send_device_statusv():
    9e32:	22 e0       	ldi	r18, 0x02	; 2
    9e34:	44 e0       	ldi	r20, 0x04	; 4
    9e36:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    9e3a:	a7 01       	movw	r20, r14
    9e3c:	6c e2       	ldi	r22, 0x2C	; 44
    9e3e:	75 e0       	ldi	r23, 0x05	; 5
    9e40:	85 e1       	ldi	r24, 0x15	; 21
    9e42:	9e e0       	ldi	r25, 0x0E	; 14
    9e44:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9e48:	0f b6       	in	r0, 0x3f	; 63
    9e4a:	f8 94       	cli
    9e4c:	de bf       	out	0x3e, r29	; 62
    9e4e:	0f be       	out	0x3f, r0	; 63
    9e50:	cd bf       	out	0x3d, r28	; 61
    9e52:	c0 58       	subi	r28, 0x80	; 128
    9e54:	df 4f       	sbci	r29, 0xFF	; 255
    9e56:	0f b6       	in	r0, 0x3f	; 63
    9e58:	f8 94       	cli
    9e5a:	de bf       	out	0x3e, r29	; 62
    9e5c:	0f be       	out	0x3f, r0	; 63
    9e5e:	cd bf       	out	0x3d, r28	; 61
    9e60:	df 91       	pop	r29
    9e62:	cf 91       	pop	r28
    9e64:	1f 91       	pop	r17
    9e66:	0f 91       	pop	r16
    9e68:	ff 90       	pop	r15
    9e6a:	ef 90       	pop	r14
    9e6c:	08 95       	ret

00009e6e <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    9e6e:	0f 93       	push	r16
    9e70:	1f 93       	push	r17
    9e72:	cf 93       	push	r28
    9e74:	df 93       	push	r29
    9e76:	cd b7       	in	r28, 0x3d	; 61
    9e78:	de b7       	in	r29, 0x3e	; 62
    9e7a:	c4 55       	subi	r28, 0x54	; 84
    9e7c:	d1 09       	sbc	r29, r1
    9e7e:	0f b6       	in	r0, 0x3f	; 63
    9e80:	f8 94       	cli
    9e82:	de bf       	out	0x3e, r29	; 62
    9e84:	0f be       	out	0x3f, r0	; 63
    9e86:	cd bf       	out	0x3d, r28	; 61
    9e88:	62 e3       	ldi	r22, 0x32	; 50
    9e8a:	70 e1       	ldi	r23, 0x10	; 16
    9e8c:	ce 01       	movw	r24, r28
    9e8e:	01 96       	adiw	r24, 0x01	; 1
    9e90:	0e 94 80 d2 	call	0x1a500	; 0x1a500 <NTPClient::NTPClient(UDP&)>
    9e94:	40 e0       	ldi	r20, 0x00	; 0
    9e96:	50 e0       	ldi	r21, 0x00	; 0
    9e98:	ba 01       	movw	r22, r20
    9e9a:	ce 01       	movw	r24, r28
    9e9c:	88 5b       	subi	r24, 0xB8	; 184
    9e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    9ea0:	0e 94 a1 ca 	call	0x19542	; 0x19542 <DateTime::DateTime(unsigned long)>
    9ea4:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <time_get_offset()>
    9ea8:	9e 01       	movw	r18, r28
    9eaa:	28 5b       	subi	r18, 0xB8	; 184
    9eac:	3f 4f       	sbci	r19, 0xFF	; 255
    9eae:	48 2f       	mov	r20, r24
    9eb0:	6e e6       	ldi	r22, 0x6E	; 110
    9eb2:	70 e1       	ldi	r23, 0x10	; 16
    9eb4:	ce 01       	movw	r24, r28
    9eb6:	01 96       	adiw	r24, 0x01	; 1
    9eb8:	0e 94 5b 89 	call	0x112b6	; 0x112b6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
    9ebc:	81 30       	cpi	r24, 0x01	; 1
    9ebe:	09 f0       	breq	.+2      	; 0x9ec2 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x54>
    9ec0:	3f c0       	rjmp	.+126    	; 0x9f40 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xd2>
    9ec2:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <selftest_clear_0(unsigned char)>
    9ec6:	70 e0       	ldi	r23, 0x00	; 0
    9ec8:	60 e0       	ldi	r22, 0x00	; 0
    9eca:	88 e6       	ldi	r24, 0x68	; 104
    9ecc:	90 e0       	ldi	r25, 0x00	; 0
    9ece:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    9ed2:	2d 96       	adiw	r28, 0x0d	; 13
    9ed4:	8f ad       	ldd	r24, Y+63	; 0x3f
    9ed6:	2d 97       	sbiw	r28, 0x0d	; 13
    9ed8:	1f 92       	push	r1
    9eda:	8f 93       	push	r24
    9edc:	2c 96       	adiw	r28, 0x0c	; 12
    9ede:	8f ad       	ldd	r24, Y+63	; 0x3f
    9ee0:	2c 97       	sbiw	r28, 0x0c	; 12
    9ee2:	1f 92       	push	r1
    9ee4:	8f 93       	push	r24
    9ee6:	83 e4       	ldi	r24, 0x43	; 67
    9ee8:	95 e0       	ldi	r25, 0x05	; 5
    9eea:	9f 93       	push	r25
    9eec:	8f 93       	push	r24
    9eee:	8e 01       	movw	r16, r28
    9ef0:	01 5b       	subi	r16, 0xB1	; 177
    9ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    9ef4:	1f 93       	push	r17
    9ef6:	0f 93       	push	r16
    9ef8:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
    9efc:	69 e4       	ldi	r22, 0x49	; 73
    9efe:	77 e5       	ldi	r23, 0x57	; 87
    9f00:	89 e1       	ldi	r24, 0x19	; 25
    9f02:	9a e0       	ldi	r25, 0x0A	; 10
    9f04:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9f08:	64 e9       	ldi	r22, 0x94	; 148
    9f0a:	77 e0       	ldi	r23, 0x07	; 7
    9f0c:	89 e1       	ldi	r24, 0x19	; 25
    9f0e:	9a e0       	ldi	r25, 0x0A	; 10
    9f10:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9f14:	b8 01       	movw	r22, r16
    9f16:	89 e1       	ldi	r24, 0x19	; 25
    9f18:	9a e0       	ldi	r25, 0x0A	; 10
    9f1a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    9f1e:	0f b6       	in	r0, 0x3f	; 63
    9f20:	f8 94       	cli
    9f22:	de bf       	out	0x3e, r29	; 62
    9f24:	0f be       	out	0x3f, r0	; 63
    9f26:	cd bf       	out	0x3d, r28	; 61
    9f28:	cc 5a       	subi	r28, 0xAC	; 172
    9f2a:	df 4f       	sbci	r29, 0xFF	; 255
    9f2c:	0f b6       	in	r0, 0x3f	; 63
    9f2e:	f8 94       	cli
    9f30:	de bf       	out	0x3e, r29	; 62
    9f32:	0f be       	out	0x3f, r0	; 63
    9f34:	cd bf       	out	0x3d, r28	; 61
    9f36:	df 91       	pop	r29
    9f38:	cf 91       	pop	r28
    9f3a:	1f 91       	pop	r17
    9f3c:	0f 91       	pop	r16
    9f3e:	08 95       	ret
    9f40:	81 e0       	ldi	r24, 0x01	; 1
    9f42:	0e 94 77 4d 	call	0x9aee	; 0x9aee <selftest_set_0(unsigned char)>
    9f46:	70 e0       	ldi	r23, 0x00	; 0
    9f48:	60 e0       	ldi	r22, 0x00	; 0
    9f4a:	88 e6       	ldi	r24, 0x68	; 104
    9f4c:	90 e0       	ldi	r25, 0x00	; 0
    9f4e:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    9f52:	63 e3       	ldi	r22, 0x33	; 51
    9f54:	77 e5       	ldi	r23, 0x57	; 87
    9f56:	89 e1       	ldi	r24, 0x19	; 25
    9f58:	9a e0       	ldi	r25, 0x0A	; 10
    9f5a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    9f5e:	e4 cf       	rjmp	.-56     	; 0x9f28 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xba>

00009f60 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
    9f60:	cf 93       	push	r28
    9f62:	df 93       	push	r29
    9f64:	70 e0       	ldi	r23, 0x00	; 0
    9f66:	60 e0       	ldi	r22, 0x00	; 0
    9f68:	86 e6       	ldi	r24, 0x66	; 102
    9f6a:	90 e0       	ldi	r25, 0x00	; 0
    9f6c:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
    9f70:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <time_get_offset()>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    9f74:	ca e3       	ldi	r28, 0x3A	; 58
    9f76:	da e0       	ldi	r29, 0x0A	; 10
_Z28button_click_set_time_offsetjjh():
    9f78:	68 2f       	mov	r22, r24
    9f7a:	88 0f       	add	r24, r24
    9f7c:	77 0b       	sbc	r23, r23
    9f7e:	88 0b       	sbc	r24, r24
    9f80:	99 0b       	sbc	r25, r25
    9f82:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    9f86:	68 83       	st	Y, r22
    9f88:	79 83       	std	Y+1, r23	; 0x01
    9f8a:	8a 83       	std	Y+2, r24	; 0x02
    9f8c:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    9f8e:	80 e0       	ldi	r24, 0x00	; 0
    9f90:	90 e0       	ldi	r25, 0x00	; 0
    9f92:	a0 e4       	ldi	r26, 0x40	; 64
    9f94:	b1 ec       	ldi	r27, 0xC1	; 193
    9f96:	88 87       	std	Y+8, r24	; 0x08
    9f98:	99 87       	std	Y+9, r25	; 0x09
    9f9a:	aa 87       	std	Y+10, r26	; 0x0a
    9f9c:	bb 87       	std	Y+11, r27	; 0x0b
    9f9e:	80 e0       	ldi	r24, 0x00	; 0
    9fa0:	90 e0       	ldi	r25, 0x00	; 0
    9fa2:	a0 e4       	ldi	r26, 0x40	; 64
    9fa4:	b1 e4       	ldi	r27, 0x41	; 65
    9fa6:	8c 83       	std	Y+4, r24	; 0x04
    9fa8:	9d 83       	std	Y+5, r25	; 0x05
    9faa:	ae 83       	std	Y+6, r26	; 0x06
    9fac:	bf 83       	std	Y+7, r27	; 0x07
    9fae:	80 e0       	ldi	r24, 0x00	; 0
    9fb0:	90 e0       	ldi	r25, 0x00	; 0
    9fb2:	a0 e8       	ldi	r26, 0x80	; 128
    9fb4:	bf e3       	ldi	r27, 0x3F	; 63
    9fb6:	8e 87       	std	Y+14, r24	; 0x0e
    9fb8:	9f 87       	std	Y+15, r25	; 0x0f
    9fba:	a8 8b       	std	Y+16, r26	; 0x10
    9fbc:	b9 8b       	std	Y+17, r27	; 0x11
    9fbe:	81 e0       	ldi	r24, 0x01	; 1
    9fc0:	8d 87       	std	Y+13, r24	; 0x0d
    9fc2:	1a 8a       	std	Y+18, r1	; 0x12
    9fc4:	1c 86       	std	Y+12, r1	; 0x0c
    9fc6:	8f ee       	ldi	r24, 0xEF	; 239
    9fc8:	9f e4       	ldi	r25, 0x4F	; 79
    9fca:	9c 8b       	std	Y+20, r25	; 0x14
    9fcc:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
    9fce:	df 91       	pop	r29
    9fd0:	cf 91       	pop	r28
    9fd2:	08 95       	ret

00009fd4 <time_set_offset(signed char)>:
_Z15time_set_offseta():
    9fd4:	68 2f       	mov	r22, r24
    9fd6:	81 e0       	ldi	r24, 0x01	; 1
    9fd8:	90 e0       	ldi	r25, 0x00	; 0
    9fda:	0c 94 a8 37 	jmp	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>

00009fde <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z33display_function_get_variable_inth():
    9fde:	60 91 3a 0a 	lds	r22, 0x0A3A	; 0x800a3a <menu_dialog_variable>
    9fe2:	70 91 3b 0a 	lds	r23, 0x0A3B	; 0x800a3b <menu_dialog_variable+0x1>
    9fe6:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <menu_dialog_variable+0x2>
    9fea:	90 91 3d 0a 	lds	r25, 0x0A3D	; 0x800a3d <menu_dialog_variable+0x3>
    9fee:	0e 94 27 db 	call	0x1b64e	; 0x1b64e <__fixsfsi>
    9ff2:	86 2f       	mov	r24, r22
_Z27helper_set_menu_time_offsetjfh():
    9ff4:	0c 94 ea 4f 	jmp	0x9fd4	; 0x9fd4 <time_set_offset(signed char)>

00009ff8 <setup_io_pin()>:
_Z12setup_io_pinv():
    9ff8:	61 e0       	ldi	r22, 0x01	; 1
    9ffa:	86 e0       	ldi	r24, 0x06	; 6
    9ffc:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a000:	61 e0       	ldi	r22, 0x01	; 1
    a002:	8f e0       	ldi	r24, 0x0F	; 15
    a004:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a008:	61 e0       	ldi	r22, 0x01	; 1
    a00a:	88 e0       	ldi	r24, 0x08	; 8
    a00c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a010:	61 e0       	ldi	r22, 0x01	; 1
    a012:	8c e0       	ldi	r24, 0x0C	; 12
    a014:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a018:	61 e0       	ldi	r22, 0x01	; 1
    a01a:	86 e1       	ldi	r24, 0x16	; 22
    a01c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a020:	61 e0       	ldi	r22, 0x01	; 1
    a022:	87 e1       	ldi	r24, 0x17	; 23
    a024:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a028:	62 e0       	ldi	r22, 0x02	; 2
    a02a:	8e e0       	ldi	r24, 0x0E	; 14
    a02c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
    a030:	60 e0       	ldi	r22, 0x00	; 0
    a032:	8c e0       	ldi	r24, 0x0C	; 12
    a034:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
    a038:	68 ee       	ldi	r22, 0xE8	; 232
    a03a:	73 e0       	ldi	r23, 0x03	; 3
    a03c:	80 e0       	ldi	r24, 0x00	; 0
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
    a044:	61 e0       	ldi	r22, 0x01	; 1
    a046:	8c e0       	ldi	r24, 0x0C	; 12
    a048:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

0000a04c <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    a04c:	ef 92       	push	r14
    a04e:	ff 92       	push	r15
    a050:	0f 93       	push	r16
    a052:	1f 93       	push	r17
    a054:	cf 93       	push	r28
    a056:	8c 01       	movw	r16, r24
    a058:	6b e2       	ldi	r22, 0x2B	; 43
    a05a:	74 e0       	ldi	r23, 0x04	; 4
    a05c:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    a060:	7c 01       	movw	r14, r24
    a062:	69 e4       	ldi	r22, 0x49	; 73
    a064:	75 e0       	ldi	r23, 0x05	; 5
    a066:	c8 01       	movw	r24, r16
    a068:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    a06c:	c3 e0       	ldi	r28, 0x03	; 3
    a06e:	89 2b       	or	r24, r25
    a070:	21 f0       	breq	.+8      	; 0xa07a <convert_text_mode(char*)+0x2e>
    a072:	c1 e0       	ldi	r28, 0x01	; 1
    a074:	ef 28       	or	r14, r15
    a076:	09 f0       	breq	.+2      	; 0xa07a <convert_text_mode(char*)+0x2e>
    a078:	c0 e0       	ldi	r28, 0x00	; 0
    a07a:	60 e5       	ldi	r22, 0x50	; 80
    a07c:	75 e0       	ldi	r23, 0x05	; 5
    a07e:	c8 01       	movw	r24, r16
    a080:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    a084:	89 2b       	or	r24, r25
    a086:	09 f4       	brne	.+2      	; 0xa08a <convert_text_mode(char*)+0x3e>
    a088:	c2 e0       	ldi	r28, 0x02	; 2
    a08a:	61 e3       	ldi	r22, 0x31	; 49
    a08c:	74 e0       	ldi	r23, 0x04	; 4
    a08e:	c8 01       	movw	r24, r16
    a090:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    a094:	89 2b       	or	r24, r25
    a096:	09 f4       	brne	.+2      	; 0xa09a <convert_text_mode(char*)+0x4e>
    a098:	c4 e0       	ldi	r28, 0x04	; 4
    a09a:	65 e5       	ldi	r22, 0x55	; 85
    a09c:	75 e0       	ldi	r23, 0x05	; 5
    a09e:	c8 01       	movw	r24, r16
    a0a0:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    a0a4:	89 2b       	or	r24, r25
    a0a6:	09 f4       	brne	.+2      	; 0xa0aa <convert_text_mode(char*)+0x5e>
    a0a8:	c6 e0       	ldi	r28, 0x06	; 6
    a0aa:	8c 2f       	mov	r24, r28
    a0ac:	cf 91       	pop	r28
    a0ae:	1f 91       	pop	r17
    a0b0:	0f 91       	pop	r16
    a0b2:	ff 90       	pop	r15
    a0b4:	ef 90       	pop	r14
    a0b6:	08 95       	ret

0000a0b8 <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    a0b8:	28 2f       	mov	r18, r24
    a0ba:	cb 01       	movw	r24, r22
    a0bc:	6e e5       	ldi	r22, 0x5E	; 94
    a0be:	75 e0       	ldi	r23, 0x05	; 5
    a0c0:	22 23       	and	r18, r18
    a0c2:	21 f0       	breq	.+8      	; 0xa0cc <convert_mode_text(unsigned char, char*)+0x14>
    a0c4:	21 30       	cpi	r18, 0x01	; 1
    a0c6:	29 f4       	brne	.+10     	; 0xa0d2 <convert_mode_text(unsigned char, char*)+0x1a>
    a0c8:	6b e2       	ldi	r22, 0x2B	; 43
    a0ca:	74 e0       	ldi	r23, 0x04	; 4
    a0cc:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    a0d0:	08 95       	ret
    a0d2:	69 e4       	ldi	r22, 0x49	; 73
    a0d4:	75 e0       	ldi	r23, 0x05	; 5
    a0d6:	23 30       	cpi	r18, 0x03	; 3
    a0d8:	61 f0       	breq	.+24     	; 0xa0f2 <convert_mode_text(unsigned char, char*)+0x3a>
    a0da:	60 e5       	ldi	r22, 0x50	; 80
    a0dc:	75 e0       	ldi	r23, 0x05	; 5
    a0de:	22 30       	cpi	r18, 0x02	; 2
    a0e0:	41 f0       	breq	.+16     	; 0xa0f2 <convert_mode_text(unsigned char, char*)+0x3a>
    a0e2:	61 e3       	ldi	r22, 0x31	; 49
    a0e4:	74 e0       	ldi	r23, 0x04	; 4
    a0e6:	24 30       	cpi	r18, 0x04	; 4
    a0e8:	21 f0       	breq	.+8      	; 0xa0f2 <convert_mode_text(unsigned char, char*)+0x3a>
    a0ea:	26 30       	cpi	r18, 0x06	; 6
    a0ec:	21 f4       	brne	.+8      	; 0xa0f6 <convert_mode_text(unsigned char, char*)+0x3e>
    a0ee:	65 e5       	ldi	r22, 0x55	; 85
    a0f0:	75 e0       	ldi	r23, 0x05	; 5
    a0f2:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <strcpy>
    a0f6:	08 95       	ret

0000a0f8 <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    a0f8:	cf 92       	push	r12
    a0fa:	df 92       	push	r13
    a0fc:	ff 92       	push	r15
    a0fe:	0f 93       	push	r16
    a100:	1f 93       	push	r17
    a102:	cf 93       	push	r28
    a104:	df 93       	push	r29
    a106:	cd b7       	in	r28, 0x3d	; 61
    a108:	de b7       	in	r29, 0x3e	; 62
    a10a:	c0 54       	subi	r28, 0x40	; 64
    a10c:	d1 09       	sbc	r29, r1
    a10e:	0f b6       	in	r0, 0x3f	; 63
    a110:	f8 94       	cli
    a112:	de bf       	out	0x3e, r29	; 62
    a114:	0f be       	out	0x3f, r0	; 63
    a116:	cd bf       	out	0x3d, r28	; 61
    a118:	8b ec       	ldi	r24, 0xCB	; 203
    a11a:	c8 2e       	mov	r12, r24
    a11c:	8a e0       	ldi	r24, 0x0A	; 10
    a11e:	d8 2e       	mov	r13, r24
    a120:	f1 2c       	mov	r15, r1
    a122:	8f 2d       	mov	r24, r15
    a124:	0e 94 83 90 	call	0x12106	; 0x12106 <thermostat_ring_get_active(unsigned char)>
    a128:	8f 3f       	cpi	r24, 0xFF	; 255
    a12a:	09 f4       	brne	.+2      	; 0xa12e <send_mqtt_ring()+0x36>
    a12c:	b8 c0       	rjmp	.+368    	; 0xa29e <send_mqtt_ring()+0x1a6>
    a12e:	be 01       	movw	r22, r28
    a130:	6f 5f       	subi	r22, 0xFF	; 255
    a132:	7f 4f       	sbci	r23, 0xFF	; 255
    a134:	8f 2d       	mov	r24, r15
    a136:	0e 94 28 90 	call	0x12050	; 0x12050 <thermostat_ring_get_name(unsigned char, char*)>
    a13a:	8e 01       	movw	r16, r28
    a13c:	0f 5f       	subi	r16, 0xFF	; 255
    a13e:	1f 4f       	sbci	r17, 0xFF	; 255
    a140:	29 eb       	ldi	r18, 0xB9	; 185
    a142:	33 e0       	ldi	r19, 0x03	; 3
    a144:	4f 2d       	mov	r20, r15
    a146:	6c eb       	ldi	r22, 0xBC	; 188
    a148:	74 e0       	ldi	r23, 0x04	; 4
    a14a:	85 e1       	ldi	r24, 0x15	; 21
    a14c:	9e e0       	ldi	r25, 0x0E	; 14
    a14e:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a152:	8f 2d       	mov	r24, r15
    a154:	0e 94 83 90 	call	0x12106	; 0x12106 <thermostat_ring_get_active(unsigned char)>
itoa():
    a158:	4a e0       	ldi	r20, 0x0A	; 10
    a15a:	b8 01       	movw	r22, r16
    a15c:	90 e0       	ldi	r25, 0x00	; 0
    a15e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a162:	2a ed       	ldi	r18, 0xDA	; 218
    a164:	33 e0       	ldi	r19, 0x03	; 3
    a166:	4f 2d       	mov	r20, r15
    a168:	6c eb       	ldi	r22, 0xBC	; 188
    a16a:	74 e0       	ldi	r23, 0x04	; 4
    a16c:	85 e1       	ldi	r24, 0x15	; 21
    a16e:	9e e0       	ldi	r25, 0x0E	; 14
    a170:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a174:	8f 2d       	mov	r24, r15
    a176:	0e 94 93 90 	call	0x12126	; 0x12126 <thermostat_ring_get_program_id(unsigned char)>
itoa():
    a17a:	4a e0       	ldi	r20, 0x0A	; 10
    a17c:	b8 01       	movw	r22, r16
    a17e:	90 e0       	ldi	r25, 0x00	; 0
    a180:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a184:	22 e6       	ldi	r18, 0x62	; 98
    a186:	35 e0       	ldi	r19, 0x05	; 5
    a188:	4f 2d       	mov	r20, r15
    a18a:	6c eb       	ldi	r22, 0xBC	; 188
    a18c:	74 e0       	ldi	r23, 0x04	; 4
    a18e:	85 e1       	ldi	r24, 0x15	; 21
    a190:	9e e0       	ldi	r25, 0x0E	; 14
    a192:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a196:	8f 2d       	mov	r24, r15
    a198:	0e 94 a3 90 	call	0x12146	; 0x12146 <thermostat_ring_get_mezni(unsigned char)>
itoa():
    a19c:	4a e0       	ldi	r20, 0x0A	; 10
    a19e:	b8 01       	movw	r22, r16
    a1a0:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a1a4:	21 ef       	ldi	r18, 0xF1	; 241
    a1a6:	33 e0       	ldi	r19, 0x03	; 3
    a1a8:	4f 2d       	mov	r20, r15
    a1aa:	6c eb       	ldi	r22, 0xBC	; 188
    a1ac:	74 e0       	ldi	r23, 0x04	; 4
    a1ae:	85 e1       	ldi	r24, 0x15	; 21
    a1b0:	9e e0       	ldi	r25, 0x0E	; 14
    a1b2:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a1b6:	8f 2d       	mov	r24, r15
    a1b8:	0e 94 e7 90 	call	0x121ce	; 0x121ce <thermostat_ring_get_mode(unsigned char)>
itoa():
    a1bc:	4a e0       	ldi	r20, 0x0A	; 10
    a1be:	b8 01       	movw	r22, r16
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a1c6:	2f e6       	ldi	r18, 0x6F	; 111
    a1c8:	35 e0       	ldi	r19, 0x05	; 5
    a1ca:	4f 2d       	mov	r20, r15
    a1cc:	6c eb       	ldi	r22, 0xBC	; 188
    a1ce:	74 e0       	ldi	r23, 0x04	; 4
    a1d0:	85 e1       	ldi	r24, 0x15	; 21
    a1d2:	9e e0       	ldi	r25, 0x0E	; 14
    a1d4:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a1d8:	8f 2d       	mov	r24, r15
    a1da:	0e 94 e7 90 	call	0x121ce	; 0x121ce <thermostat_ring_get_mode(unsigned char)>
    a1de:	b8 01       	movw	r22, r16
    a1e0:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <convert_mode_text(unsigned char, char*)>
    a1e4:	2a e6       	ldi	r18, 0x6A	; 106
    a1e6:	35 e0       	ldi	r19, 0x05	; 5
    a1e8:	4f 2d       	mov	r20, r15
    a1ea:	6c eb       	ldi	r22, 0xBC	; 188
    a1ec:	74 e0       	ldi	r23, 0x04	; 4
    a1ee:	85 e1       	ldi	r24, 0x15	; 21
    a1f0:	9e e0       	ldi	r25, 0x0E	; 14
    a1f2:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a1f6:	8f 2d       	mov	r24, r15
    a1f8:	0e 94 29 8f 	call	0x11e52	; 0x11e52 <thermostat_ring_get_state(unsigned char)>
itoa():
    a1fc:	4a e0       	ldi	r20, 0x0A	; 10
    a1fe:	b8 01       	movw	r22, r16
    a200:	90 e0       	ldi	r25, 0x00	; 0
    a202:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a206:	24 e7       	ldi	r18, 0x74	; 116
    a208:	35 e0       	ldi	r19, 0x05	; 5
    a20a:	4f 2d       	mov	r20, r15
    a20c:	6c eb       	ldi	r22, 0xBC	; 188
    a20e:	74 e0       	ldi	r23, 0x04	; 4
    a210:	85 e1       	ldi	r24, 0x15	; 21
    a212:	9e e0       	ldi	r25, 0x0E	; 14
    a214:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a218:	8f 2d       	mov	r24, r15
    a21a:	0e 94 d7 90 	call	0x121ae	; 0x121ae <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    a21e:	4a e0       	ldi	r20, 0x0A	; 10
    a220:	b8 01       	movw	r22, r16
    a222:	90 e0       	ldi	r25, 0x00	; 0
    a224:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a228:	2b e7       	ldi	r18, 0x7B	; 123
    a22a:	35 e0       	ldi	r19, 0x05	; 5
    a22c:	4f 2d       	mov	r20, r15
    a22e:	6c eb       	ldi	r22, 0xBC	; 188
    a230:	74 e0       	ldi	r23, 0x04	; 4
    a232:	85 e1       	ldi	r24, 0x15	; 21
    a234:	9e e0       	ldi	r25, 0x0E	; 14
    a236:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a23a:	8f 2d       	mov	r24, r15
    a23c:	0e 94 73 90 	call	0x120e6	; 0x120e6 <thermostat_ring_get_output(unsigned char)>
itoa():
    a240:	4a e0       	ldi	r20, 0x0A	; 10
    a242:	b8 01       	movw	r22, r16
    a244:	90 e0       	ldi	r25, 0x00	; 0
    a246:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a24a:	21 e8       	ldi	r18, 0x81	; 129
    a24c:	35 e0       	ldi	r19, 0x05	; 5
    a24e:	4f 2d       	mov	r20, r15
    a250:	6c eb       	ldi	r22, 0xBC	; 188
    a252:	74 e0       	ldi	r23, 0x04	; 4
    a254:	85 e1       	ldi	r24, 0x15	; 21
    a256:	9e e0       	ldi	r25, 0x0E	; 14
    a258:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a25c:	8f 2d       	mov	r24, r15
    a25e:	0e 94 01 91 	call	0x12202	; 0x12202 <thermostat_ring_get_status_data(unsigned char)>
itoa():
    a262:	4a e0       	ldi	r20, 0x0A	; 10
    a264:	b8 01       	movw	r22, r16
    a266:	90 e0       	ldi	r25, 0x00	; 0
    a268:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a26c:	28 e8       	ldi	r18, 0x88	; 136
    a26e:	35 e0       	ldi	r19, 0x05	; 5
    a270:	4f 2d       	mov	r20, r15
    a272:	6c eb       	ldi	r22, 0xBC	; 188
    a274:	74 e0       	ldi	r23, 0x04	; 4
    a276:	85 e1       	ldi	r24, 0x15	; 21
    a278:	9e e0       	ldi	r25, 0x0E	; 14
    a27a:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a27e:	f6 01       	movw	r30, r12
    a280:	80 81       	ld	r24, Z
itoa():
    a282:	4a e0       	ldi	r20, 0x0A	; 10
    a284:	b8 01       	movw	r22, r16
    a286:	90 e0       	ldi	r25, 0x00	; 0
    a288:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    a28c:	25 e9       	ldi	r18, 0x95	; 149
    a28e:	35 e0       	ldi	r19, 0x05	; 5
    a290:	4f 2d       	mov	r20, r15
    a292:	6c eb       	ldi	r22, 0xBC	; 188
    a294:	74 e0       	ldi	r23, 0x04	; 4
    a296:	85 e1       	ldi	r24, 0x15	; 21
    a298:	9e e0       	ldi	r25, 0x0E	; 14
    a29a:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    a29e:	f3 94       	inc	r15
    a2a0:	ff ef       	ldi	r31, 0xFF	; 255
    a2a2:	cf 1a       	sub	r12, r31
    a2a4:	df 0a       	sbc	r13, r31
    a2a6:	85 e0       	ldi	r24, 0x05	; 5
    a2a8:	f8 12       	cpse	r15, r24
    a2aa:	3b cf       	rjmp	.-394    	; 0xa122 <send_mqtt_ring()+0x2a>
    a2ac:	c0 5c       	subi	r28, 0xC0	; 192
    a2ae:	df 4f       	sbci	r29, 0xFF	; 255
    a2b0:	0f b6       	in	r0, 0x3f	; 63
    a2b2:	f8 94       	cli
    a2b4:	de bf       	out	0x3e, r29	; 62
    a2b6:	0f be       	out	0x3f, r0	; 63
    a2b8:	cd bf       	out	0x3d, r28	; 61
    a2ba:	df 91       	pop	r29
    a2bc:	cf 91       	pop	r28
    a2be:	1f 91       	pop	r17
    a2c0:	0f 91       	pop	r16
    a2c2:	ff 90       	pop	r15
    a2c4:	df 90       	pop	r13
    a2c6:	cf 90       	pop	r12
    a2c8:	08 95       	ret

0000a2ca <thermostat()>:
_Z10thermostatv():
    a2ca:	af 92       	push	r10
    a2cc:	bf 92       	push	r11
    a2ce:	cf 92       	push	r12
    a2d0:	df 92       	push	r13
    a2d2:	ef 92       	push	r14
    a2d4:	ff 92       	push	r15
    a2d6:	0f 93       	push	r16
    a2d8:	1f 93       	push	r17
    a2da:	cf 93       	push	r28
    a2dc:	df 93       	push	r29
    a2de:	cd b7       	in	r28, 0x3d	; 61
    a2e0:	de b7       	in	r29, 0x3e	; 62
    a2e2:	69 97       	sbiw	r28, 0x19	; 25
    a2e4:	0f b6       	in	r0, 0x3f	; 63
    a2e6:	f8 94       	cli
    a2e8:	de bf       	out	0x3e, r29	; 62
    a2ea:	0f be       	out	0x3f, r0	; 63
    a2ec:	cd bf       	out	0x3d, r28	; 61
    a2ee:	18 8e       	std	Y+24, r1	; 0x18
    a2f0:	1f 8a       	std	Y+23, r1	; 0x17
    a2f2:	19 8e       	std	Y+25, r1	; 0x19
    a2f4:	10 e0       	ldi	r17, 0x00	; 0
    a2f6:	58 ec       	ldi	r21, 0xC8	; 200
    a2f8:	d5 2e       	mov	r13, r21
    a2fa:	6e e1       	ldi	r22, 0x1E	; 30
    a2fc:	b6 2e       	mov	r11, r22
    a2fe:	81 2f       	mov	r24, r17
    a300:	0e 94 d7 90 	call	0x121ae	; 0x121ae <thermostat_ring_get_asociate_tds(unsigned char)>
    a304:	e8 2e       	mov	r14, r24
    a306:	81 2f       	mov	r24, r17
    a308:	0e 94 e7 90 	call	0x121ce	; 0x121ce <thermostat_ring_get_mode(unsigned char)>
    a30c:	f8 2e       	mov	r15, r24
    a30e:	81 2f       	mov	r24, r17
    a310:	0e 94 73 90 	call	0x120e6	; 0x120e6 <thermostat_ring_get_output(unsigned char)>
    a314:	c8 2e       	mov	r12, r24
    a316:	81 2f       	mov	r24, r17
    a318:	0e 94 a3 90 	call	0x12146	; 0x12146 <thermostat_ring_get_mezni(unsigned char)>
    a31c:	98 8f       	std	Y+24, r25	; 0x18
    a31e:	8f 8b       	std	Y+23, r24	; 0x17
    a320:	82 e0       	ldi	r24, 0x02	; 2
    a322:	f8 12       	cpse	r15, r24
    a324:	9b c0       	rjmp	.+310    	; 0xa45c <thermostat()+0x192>
    a326:	81 2f       	mov	r24, r17
    a328:	0e 94 93 90 	call	0x12126	; 0x12126 <thermostat_ring_get_program_id(unsigned char)>
    a32c:	a8 2e       	mov	r10, r24
    a32e:	87 e6       	ldi	r24, 0x67	; 103
    a330:	90 e1       	ldi	r25, 0x10	; 16
    a332:	0e 94 32 cb 	call	0x19664	; 0x19664 <DateTime::dayOfTheWeek() const>
    a336:	08 2f       	mov	r16, r24
    a338:	20 91 6b 10 	lds	r18, 0x106B	; 0x80106b <now+0x4>
    a33c:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <now+0x3>
    a340:	be 01       	movw	r22, r28
    a342:	69 5e       	subi	r22, 0xE9	; 233
    a344:	7f 4f       	sbci	r23, 0xFF	; 255
    a346:	8a 2d       	mov	r24, r10
    a348:	0e 94 2f 94 	call	0x1285e	; 0x1285e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    a34c:	8e 3f       	cpi	r24, 0xFE	; 254
    a34e:	09 f4       	brne	.+2      	; 0xa352 <thermostat()+0x88>
    a350:	69 c0       	rjmp	.+210    	; 0xa424 <thermostat()+0x15a>
    a352:	08 f0       	brcs	.+2      	; 0xa356 <thermostat()+0x8c>
    a354:	5f c0       	rjmp	.+190    	; 0xa414 <thermostat()+0x14a>
    a356:	8d 3f       	cpi	r24, 0xFD	; 253
    a358:	09 f4       	brne	.+2      	; 0xa35c <thermostat()+0x92>
    a35a:	6e c0       	rjmp	.+220    	; 0xa438 <thermostat()+0x16e>
    a35c:	85 e0       	ldi	r24, 0x05	; 5
    a35e:	8e 15       	cp	r24, r14
    a360:	e8 f1       	brcs	.+122    	; 0xa3dc <thermostat()+0x112>
    a362:	be 01       	movw	r22, r28
    a364:	6f 5f       	subi	r22, 0xFF	; 255
    a366:	7f 4f       	sbci	r23, 0xFF	; 255
    a368:	8e 2d       	mov	r24, r14
    a36a:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    a36e:	81 30       	cpi	r24, 0x01	; 1
    a370:	a9 f5       	brne	.+106    	; 0xa3dc <thermostat()+0x112>
    a372:	89 81       	ldd	r24, Y+1	; 0x01
    a374:	81 30       	cpi	r24, 0x01	; 1
    a376:	09 f0       	breq	.+2      	; 0xa37a <thermostat()+0xb0>
    a378:	7e c0       	rjmp	.+252    	; 0xa476 <thermostat()+0x1ac>
    a37a:	be 9c       	mul	r11, r14
    a37c:	f0 01       	movw	r30, r0
    a37e:	11 24       	eor	r1, r1
    a380:	e2 55       	subi	r30, 0x52	; 82
    a382:	fe 4e       	sbci	r31, 0xEE	; 238
    a384:	83 8d       	ldd	r24, Z+27	; 0x1b
    a386:	81 30       	cpi	r24, 0x01	; 1
    a388:	09 f0       	breq	.+2      	; 0xa38c <thermostat()+0xc2>
    a38a:	75 c0       	rjmp	.+234    	; 0xa476 <thermostat()+0x1ac>
    a38c:	65 81       	ldd	r22, Z+5	; 0x05
    a38e:	76 81       	ldd	r23, Z+6	; 0x06
    a390:	07 2e       	mov	r0, r23
    a392:	00 0c       	add	r0, r0
    a394:	88 0b       	sbc	r24, r24
    a396:	99 0b       	sbc	r25, r25
    a398:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    a39c:	20 e0       	ldi	r18, 0x00	; 0
    a39e:	30 e0       	ldi	r19, 0x00	; 0
    a3a0:	48 ec       	ldi	r20, 0xC8	; 200
    a3a2:	52 e4       	ldi	r21, 0x42	; 66
    a3a4:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    a3a8:	ab 01       	movw	r20, r22
    a3aa:	bc 01       	movw	r22, r24
    a3ac:	81 2f       	mov	r24, r17
    a3ae:	0e 94 e8 8f 	call	0x11fd0	; 0x11fd0 <thermostat_pid_input(unsigned char, double)>
    a3b2:	6f 89       	ldd	r22, Y+23	; 0x17
    a3b4:	78 8d       	ldd	r23, Y+24	; 0x18
    a3b6:	07 2e       	mov	r0, r23
    a3b8:	00 0c       	add	r0, r0
    a3ba:	88 0b       	sbc	r24, r24
    a3bc:	99 0b       	sbc	r25, r25
    a3be:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    a3c2:	ab 01       	movw	r20, r22
    a3c4:	bc 01       	movw	r22, r24
    a3c6:	81 2f       	mov	r24, r17
    a3c8:	0e 94 f3 8f 	call	0x11fe6	; 0x11fe6 <thermostat_pid_setpoint(unsigned char, double)>
    a3cc:	81 2f       	mov	r24, r17
    a3ce:	0e 94 fe 8f 	call	0x11ffc	; 0x11ffc <thermostat_pid_output(unsigned char)>
    a3d2:	d8 2e       	mov	r13, r24
    a3d4:	68 2f       	mov	r22, r24
    a3d6:	81 2f       	mov	r24, r17
    a3d8:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a3dc:	0a ef       	ldi	r16, 0xFA	; 250
    a3de:	0e 0d       	add	r16, r14
    a3e0:	0a 30       	cpi	r16, 0x0A	; 10
    a3e2:	08 f0       	brcs	.+2      	; 0xa3e6 <thermostat()+0x11c>
    a3e4:	7f c0       	rjmp	.+254    	; 0xa4e4 <thermostat()+0x21a>
    a3e6:	be 01       	movw	r22, r28
    a3e8:	67 5e       	subi	r22, 0xE7	; 231
    a3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ec:	80 2f       	mov	r24, r16
    a3ee:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    a3f2:	89 8d       	ldd	r24, Y+25	; 0x19
    a3f4:	81 30       	cpi	r24, 0x01	; 1
    a3f6:	09 f4       	brne	.+2      	; 0xa3fa <thermostat()+0x130>
    a3f8:	46 c0       	rjmp	.+140    	; 0xa486 <thermostat()+0x1bc>
    a3fa:	60 e0       	ldi	r22, 0x00	; 0
    a3fc:	81 2f       	mov	r24, r17
    a3fe:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a402:	9e ef       	ldi	r25, 0xFE	; 254
    a404:	f9 2e       	mov	r15, r25
    a406:	d1 2c       	mov	r13, r1
    a408:	4d 2d       	mov	r20, r13
    a40a:	6f 2d       	mov	r22, r15
    a40c:	8c 2d       	mov	r24, r12
    a40e:	0e 94 0a 4d 	call	0x9a14	; 0x9a14 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    a412:	72 c0       	rjmp	.+228    	; 0xa4f8 <thermostat()+0x22e>
    a414:	60 e0       	ldi	r22, 0x00	; 0
    a416:	81 2f       	mov	r24, r17
    a418:	0e 94 2f 8f 	call	0x11e5e	; 0x11e5e <thermostat_ring_set_state(unsigned char, unsigned char)>
    a41c:	60 e0       	ldi	r22, 0x00	; 0
    a41e:	81 2f       	mov	r24, r17
    a420:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a424:	60 e0       	ldi	r22, 0x00	; 0
    a426:	81 2f       	mov	r24, r17
    a428:	0e 94 2f 8f 	call	0x11e5e	; 0x11e5e <thermostat_ring_set_state(unsigned char, unsigned char)>
    a42c:	60 e0       	ldi	r22, 0x00	; 0
    a42e:	81 2f       	mov	r24, r17
    a430:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a434:	f1 2c       	mov	r15, r1
    a436:	92 cf       	rjmp	.-220    	; 0xa35c <thermostat()+0x92>
    a438:	61 e0       	ldi	r22, 0x01	; 1
    a43a:	81 2f       	mov	r24, r17
    a43c:	0e 94 2f 8f 	call	0x11e5e	; 0x11e5e <thermostat_ring_set_state(unsigned char, unsigned char)>
    a440:	8a 2d       	mov	r24, r10
    a442:	0e 94 92 92 	call	0x12524	; 0x12524 <thermostat_program_get_active(unsigned char)>
    a446:	81 30       	cpi	r24, 0x01	; 1
    a448:	61 f0       	breq	.+24     	; 0xa462 <thermostat()+0x198>
    a44a:	82 30       	cpi	r24, 0x02	; 2
    a44c:	09 f0       	breq	.+2      	; 0xa450 <thermostat()+0x186>
    a44e:	87 c0       	rjmp	.+270    	; 0xa55e <thermostat()+0x294>
    a450:	81 2f       	mov	r24, r17
    a452:	0e 94 cd 8f 	call	0x11f9a	; 0x11f9a <thermostat_pid_setdirection_reverse(unsigned char)>
    a456:	45 e0       	ldi	r20, 0x05	; 5
    a458:	f4 2e       	mov	r15, r20
    a45a:	80 cf       	rjmp	.-256    	; 0xa35c <thermostat()+0x92>
    a45c:	83 e0       	ldi	r24, 0x03	; 3
    a45e:	f8 12       	cpse	r15, r24
    a460:	06 c0       	rjmp	.+12     	; 0xa46e <thermostat()+0x1a4>
    a462:	81 2f       	mov	r24, r17
    a464:	0e 94 bd 8f 	call	0x11f7a	; 0x11f7a <thermostat_pid_setdirection_direct(unsigned char)>
    a468:	33 e0       	ldi	r19, 0x03	; 3
    a46a:	f3 2e       	mov	r15, r19
    a46c:	77 cf       	rjmp	.-274    	; 0xa35c <thermostat()+0x92>
    a46e:	85 e0       	ldi	r24, 0x05	; 5
    a470:	f8 12       	cpse	r15, r24
    a472:	74 cf       	rjmp	.-280    	; 0xa35c <thermostat()+0x92>
    a474:	ed cf       	rjmp	.-38     	; 0xa450 <thermostat()+0x186>
    a476:	60 e0       	ldi	r22, 0x00	; 0
    a478:	81 2f       	mov	r24, r17
    a47a:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a47e:	d1 2c       	mov	r13, r1
    a480:	2e ef       	ldi	r18, 0xFE	; 254
    a482:	f2 2e       	mov	r15, r18
    a484:	ab cf       	rjmp	.-170    	; 0xa3dc <thermostat()+0x112>
    a486:	80 2f       	mov	r24, r16
    a488:	0e 94 ff 46 	call	0x8dfe	; 0x8dfe <remote_tds_get_last_update(unsigned char)>
    a48c:	84 3b       	cpi	r24, 0xB4	; 180
    a48e:	08 f0       	brcs	.+2      	; 0xa492 <thermostat()+0x1c8>
    a490:	b4 cf       	rjmp	.-152    	; 0xa3fa <thermostat()+0x130>
    a492:	80 2f       	mov	r24, r16
    a494:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <remote_tds_get_data(unsigned char)>
    a498:	bc 01       	movw	r22, r24
    a49a:	99 0f       	add	r25, r25
    a49c:	88 0b       	sbc	r24, r24
    a49e:	99 0b       	sbc	r25, r25
    a4a0:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    a4a4:	20 e0       	ldi	r18, 0x00	; 0
    a4a6:	30 e0       	ldi	r19, 0x00	; 0
    a4a8:	4a e7       	ldi	r20, 0x7A	; 122
    a4aa:	54 e4       	ldi	r21, 0x44	; 68
    a4ac:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    a4b0:	ab 01       	movw	r20, r22
    a4b2:	bc 01       	movw	r22, r24
    a4b4:	81 2f       	mov	r24, r17
    a4b6:	0e 94 e8 8f 	call	0x11fd0	; 0x11fd0 <thermostat_pid_input(unsigned char, double)>
    a4ba:	6f 89       	ldd	r22, Y+23	; 0x17
    a4bc:	78 8d       	ldd	r23, Y+24	; 0x18
    a4be:	07 2e       	mov	r0, r23
    a4c0:	00 0c       	add	r0, r0
    a4c2:	88 0b       	sbc	r24, r24
    a4c4:	99 0b       	sbc	r25, r25
    a4c6:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    a4ca:	ab 01       	movw	r20, r22
    a4cc:	bc 01       	movw	r22, r24
    a4ce:	81 2f       	mov	r24, r17
    a4d0:	0e 94 f3 8f 	call	0x11fe6	; 0x11fe6 <thermostat_pid_setpoint(unsigned char, double)>
    a4d4:	81 2f       	mov	r24, r17
    a4d6:	0e 94 fe 8f 	call	0x11ffc	; 0x11ffc <thermostat_pid_output(unsigned char)>
    a4da:	d8 2e       	mov	r13, r24
    a4dc:	68 2f       	mov	r22, r24
    a4de:	81 2f       	mov	r24, r17
    a4e0:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a4e4:	f1 10       	cpse	r15, r1
    a4e6:	1d c0       	rjmp	.+58     	; 0xa522 <thermostat()+0x258>
    a4e8:	6e ef       	ldi	r22, 0xFE	; 254
    a4ea:	8c 2d       	mov	r24, r12
    a4ec:	0e 94 b6 4c 	call	0x996c	; 0x996c <mqtt_publis_output(unsigned char, unsigned char)>
    a4f0:	60 e0       	ldi	r22, 0x00	; 0
    a4f2:	81 2f       	mov	r24, r17
    a4f4:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
    a4f8:	1f 5f       	subi	r17, 0xFF	; 255
    a4fa:	15 30       	cpi	r17, 0x05	; 5
    a4fc:	09 f0       	breq	.+2      	; 0xa500 <thermostat()+0x236>
    a4fe:	ff ce       	rjmp	.-514    	; 0xa2fe <thermostat()+0x34>
    a500:	69 96       	adiw	r28, 0x19	; 25
    a502:	0f b6       	in	r0, 0x3f	; 63
    a504:	f8 94       	cli
    a506:	de bf       	out	0x3e, r29	; 62
    a508:	0f be       	out	0x3f, r0	; 63
    a50a:	cd bf       	out	0x3d, r28	; 61
    a50c:	df 91       	pop	r29
    a50e:	cf 91       	pop	r28
    a510:	1f 91       	pop	r17
    a512:	0f 91       	pop	r16
    a514:	ff 90       	pop	r15
    a516:	ef 90       	pop	r14
    a518:	df 90       	pop	r13
    a51a:	cf 90       	pop	r12
    a51c:	bf 90       	pop	r11
    a51e:	af 90       	pop	r10
    a520:	08 95       	ret
    a522:	81 e0       	ldi	r24, 0x01	; 1
    a524:	6a e0       	ldi	r22, 0x0A	; 10
    a526:	f8 16       	cp	r15, r24
    a528:	21 f0       	breq	.+8      	; 0xa532 <thermostat()+0x268>
    a52a:	84 e0       	ldi	r24, 0x04	; 4
    a52c:	f8 12       	cpse	r15, r24
    a52e:	06 c0       	rjmp	.+12     	; 0xa53c <thermostat()+0x272>
    a530:	6b e0       	ldi	r22, 0x0B	; 11
    a532:	8c 2d       	mov	r24, r12
    a534:	0e 94 b6 4c 	call	0x996c	; 0x996c <mqtt_publis_output(unsigned char, unsigned char)>
    a538:	6f ef       	ldi	r22, 0xFF	; 255
    a53a:	db cf       	rjmp	.-74     	; 0xa4f2 <thermostat()+0x228>
    a53c:	83 e0       	ldi	r24, 0x03	; 3
    a53e:	f8 16       	cp	r15, r24
    a540:	09 f4       	brne	.+2      	; 0xa544 <thermostat()+0x27a>
    a542:	62 cf       	rjmp	.-316    	; 0xa408 <thermostat()+0x13e>
    a544:	85 e0       	ldi	r24, 0x05	; 5
    a546:	f8 16       	cp	r15, r24
    a548:	09 f4       	brne	.+2      	; 0xa54c <thermostat()+0x282>
    a54a:	5e cf       	rjmp	.-324    	; 0xa408 <thermostat()+0x13e>
    a54c:	86 e0       	ldi	r24, 0x06	; 6
    a54e:	f8 16       	cp	r15, r24
    a550:	09 f4       	brne	.+2      	; 0xa554 <thermostat()+0x28a>
    a552:	5a cf       	rjmp	.-332    	; 0xa408 <thermostat()+0x13e>
    a554:	8e ef       	ldi	r24, 0xFE	; 254
    a556:	f8 16       	cp	r15, r24
    a558:	09 f4       	brne	.+2      	; 0xa55c <thermostat()+0x292>
    a55a:	56 cf       	rjmp	.-340    	; 0xa408 <thermostat()+0x13e>
    a55c:	cd cf       	rjmp	.-102    	; 0xa4f8 <thermostat()+0x22e>
    a55e:	83 30       	cpi	r24, 0x03	; 3
    a560:	09 f0       	breq	.+2      	; 0xa564 <thermostat()+0x29a>
    a562:	fc ce       	rjmp	.-520    	; 0xa35c <thermostat()+0x92>
    a564:	86 e0       	ldi	r24, 0x06	; 6
    a566:	f8 2e       	mov	r15, r24
    a568:	f9 ce       	rjmp	.-526    	; 0xa35c <thermostat()+0x92>

0000a56a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    a56a:	cf 93       	push	r28
    a56c:	df 93       	push	r29
    a56e:	fc 01       	movw	r30, r24
    a570:	eb 01       	movw	r28, r22
    a572:	22 23       	and	r18, r18
    a574:	89 f1       	breq	.+98     	; 0xa5d8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a576:	88 81       	ld	r24, Y
    a578:	80 93 94 0a 	sts	0x0A94, r24	; 0x800a94 <menu_slider_data_max>
    a57c:	80 81       	ld	r24, Z
    a57e:	80 93 93 0a 	sts	0x0A93, r24	; 0x800a93 <menu_slider_data_min>
    a582:	20 93 92 0a 	sts	0x0A92, r18	; 0x800a92 <menu_slider_data_max_element>
    a586:	a4 2f       	mov	r26, r20
    a588:	b0 e0       	ldi	r27, 0x00	; 0
    a58a:	ab 56       	subi	r26, 0x6B	; 107
    a58c:	b5 4f       	sbci	r27, 0xF5	; 245
    a58e:	ac 91       	ld	r26, X
    a590:	a0 83       	st	Z, r26
    a592:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <menu_slider_data_max>
    a596:	48 2f       	mov	r20, r24
    a598:	50 e0       	ldi	r21, 0x00	; 0
    a59a:	a2 0f       	add	r26, r18
    a59c:	bb 27       	eor	r27, r27
    a59e:	bb 1f       	adc	r27, r27
    a5a0:	4a 17       	cp	r20, r26
    a5a2:	5b 07       	cpc	r21, r27
    a5a4:	5c f4       	brge	.+22     	; 0xa5bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a5a6:	90 91 93 0a 	lds	r25, 0x0A93	; 0x800a93 <menu_slider_data_min>
    a5aa:	49 1b       	sub	r20, r25
    a5ac:	51 09       	sbc	r21, r1
    a5ae:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <menu_slider_data_max_element>
    a5b2:	94 17       	cp	r25, r20
    a5b4:	15 06       	cpc	r1, r21
    a5b6:	14 f4       	brge	.+4      	; 0xa5bc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a5b8:	82 1b       	sub	r24, r18
    a5ba:	80 83       	st	Z, r24
    a5bc:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <menu_slider_data_max>
    a5c0:	90 81       	ld	r25, Z
    a5c2:	89 17       	cp	r24, r25
    a5c4:	08 f4       	brcc	.+2      	; 0xa5c8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    a5c6:	80 83       	st	Z, r24
    a5c8:	80 81       	ld	r24, Z
    a5ca:	82 0f       	add	r24, r18
    a5cc:	88 83       	st	Y, r24
    a5ce:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <menu_slider_data_max>
    a5d2:	28 17       	cp	r18, r24
    a5d4:	08 f0       	brcs	.+2      	; 0xa5d8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a5d6:	88 83       	st	Y, r24
    a5d8:	df 91       	pop	r29
    a5da:	cf 91       	pop	r28
    a5dc:	08 95       	ret

0000a5de <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    a5de:	2f 92       	push	r2
    a5e0:	3f 92       	push	r3
    a5e2:	4f 92       	push	r4
    a5e4:	5f 92       	push	r5
    a5e6:	6f 92       	push	r6
    a5e8:	7f 92       	push	r7
    a5ea:	8f 92       	push	r8
    a5ec:	9f 92       	push	r9
    a5ee:	af 92       	push	r10
    a5f0:	bf 92       	push	r11
    a5f2:	cf 92       	push	r12
    a5f4:	df 92       	push	r13
    a5f6:	ef 92       	push	r14
    a5f8:	ff 92       	push	r15
    a5fa:	0f 93       	push	r16
    a5fc:	1f 93       	push	r17
    a5fe:	cf 93       	push	r28
    a600:	df 93       	push	r29
    a602:	00 d0       	rcall	.+0      	; 0xa604 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    a604:	00 d0       	rcall	.+0      	; 0xa606 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    a606:	1f 92       	push	r1
    a608:	cd b7       	in	r28, 0x3d	; 61
    a60a:	de b7       	in	r29, 0x3e	; 62
    a60c:	1c 01       	movw	r2, r24
    a60e:	2b 01       	movw	r4, r22
    a610:	3a 01       	movw	r6, r20
    a612:	3a 83       	std	Y+2, r19	; 0x02
    a614:	29 83       	std	Y+1, r18	; 0x01
    a616:	0b 83       	std	Y+3, r16	; 0x03
    a618:	9e 2c       	mov	r9, r14
    a61a:	dd 82       	std	Y+5, r13	; 0x05
    a61c:	cc 82       	std	Y+4, r12	; 0x04
    a61e:	bf 82       	std	Y+7, r11	; 0x07
    a620:	ae 82       	std	Y+6, r10	; 0x06
    a622:	70 e0       	ldi	r23, 0x00	; 0
    a624:	60 e0       	ldi	r22, 0x00	; 0
    a626:	81 e2       	ldi	r24, 0x21	; 33
    a628:	9c e0       	ldi	r25, 0x0C	; 12
    a62a:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a62e:	f1 2c       	mov	r15, r1
    a630:	e1 2c       	mov	r14, r1
    a632:	a9 80       	ldd	r10, Y+1	; 0x01
    a634:	ba 80       	ldd	r11, Y+2	; 0x02
    a636:	a4 0c       	add	r10, r4
    a638:	b5 1c       	adc	r11, r5
    a63a:	61 01       	movw	r12, r2
    a63c:	c6 0c       	add	r12, r6
    a63e:	d7 1c       	adc	r13, r7
    a640:	85 01       	movw	r16, r10
    a642:	0e 19       	sub	r16, r14
    a644:	1f 09       	sbc	r17, r15
    a646:	96 01       	movw	r18, r12
    a648:	2e 19       	sub	r18, r14
    a64a:	3f 09       	sbc	r19, r15
    a64c:	a7 01       	movw	r20, r14
    a64e:	44 0d       	add	r20, r4
    a650:	55 1d       	adc	r21, r5
    a652:	b7 01       	movw	r22, r14
    a654:	62 0d       	add	r22, r2
    a656:	73 1d       	adc	r23, r3
    a658:	81 e2       	ldi	r24, 0x21	; 33
    a65a:	9c e0       	ldi	r25, 0x0C	; 12
    a65c:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a660:	2f ef       	ldi	r18, 0xFF	; 255
    a662:	e2 1a       	sub	r14, r18
    a664:	f2 0a       	sbc	r15, r18
    a666:	43 e0       	ldi	r20, 0x03	; 3
    a668:	e4 16       	cp	r14, r20
    a66a:	f1 04       	cpc	r15, r1
    a66c:	49 f7       	brne	.-46     	; 0xa640 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    a66e:	09 81       	ldd	r16, Y+1	; 0x01
    a670:	1a 81       	ldd	r17, Y+2	; 0x02
    a672:	03 50       	subi	r16, 0x03	; 3
    a674:	11 09       	sbc	r17, r1
    a676:	73 01       	movw	r14, r6
    a678:	53 e0       	ldi	r21, 0x03	; 3
    a67a:	e5 1a       	sub	r14, r21
    a67c:	f1 08       	sbc	r15, r1
    a67e:	81 e0       	ldi	r24, 0x01	; 1
    a680:	88 12       	cpse	r8, r24
    a682:	15 c0       	rjmp	.+42     	; 0xa6ae <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    a684:	6f ef       	ldi	r22, 0xFF	; 255
    a686:	7f ef       	ldi	r23, 0xFF	; 255
    a688:	81 e2       	ldi	r24, 0x21	; 33
    a68a:	9c e0       	ldi	r25, 0x0C	; 12
    a68c:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a690:	04 0d       	add	r16, r4
    a692:	15 1d       	adc	r17, r5
    a694:	91 01       	movw	r18, r2
    a696:	2e 0d       	add	r18, r14
    a698:	3f 1d       	adc	r19, r15
    a69a:	a2 01       	movw	r20, r4
    a69c:	4d 5f       	subi	r20, 0xFD	; 253
    a69e:	5f 4f       	sbci	r21, 0xFF	; 255
    a6a0:	b1 01       	movw	r22, r2
    a6a2:	6d 5f       	subi	r22, 0xFD	; 253
    a6a4:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a6:	81 e2       	ldi	r24, 0x21	; 33
    a6a8:	9c e0       	ldi	r25, 0x0C	; 12
    a6aa:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a6ae:	ec 81       	ldd	r30, Y+4	; 0x04
    a6b0:	fd 81       	ldd	r31, Y+5	; 0x05
    a6b2:	80 81       	ld	r24, Z
    a6b4:	60 e0       	ldi	r22, 0x00	; 0
    a6b6:	b1 2c       	mov	r11, r1
    a6b8:	a1 2c       	mov	r10, r1
    a6ba:	88 23       	and	r24, r24
    a6bc:	a1 f1       	breq	.+104    	; 0xa726 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    a6be:	01 90       	ld	r0, Z+
    a6c0:	00 20       	and	r0, r0
    a6c2:	e9 f7       	brne	.-6      	; 0xa6be <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    a6c4:	31 97       	sbiw	r30, 0x01	; 1
    a6c6:	4c 81       	ldd	r20, Y+4	; 0x04
    a6c8:	5d 81       	ldd	r21, Y+5	; 0x05
    a6ca:	e4 1b       	sub	r30, r20
    a6cc:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    a6ce:	8b 81       	ldd	r24, Y+3	; 0x03
    a6d0:	88 0f       	add	r24, r24
    a6d2:	5b 81       	ldd	r21, Y+3	; 0x03
    a6d4:	85 0f       	add	r24, r21
    a6d6:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a6d8:	a9 80       	ldd	r10, Y+1	; 0x01
    a6da:	ba 80       	ldd	r11, Y+2	; 0x02
    a6dc:	a8 1a       	sub	r10, r24
    a6de:	b1 08       	sbc	r11, r1
    a6e0:	b6 94       	lsr	r11
    a6e2:	a7 94       	ror	r10
    a6e4:	a2 01       	movw	r20, r4
    a6e6:	41 50       	subi	r20, 0x01	; 1
    a6e8:	51 09       	sbc	r21, r1
    a6ea:	4a 0d       	add	r20, r10
    a6ec:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a6ee:	86 e0       	ldi	r24, 0x06	; 6
    a6f0:	e8 9f       	mul	r30, r24
    a6f2:	f0 01       	movw	r30, r0
    a6f4:	11 24       	eor	r1, r1
    a6f6:	2b 81       	ldd	r18, Y+3	; 0x03
    a6f8:	2e 9f       	mul	r18, r30
    a6fa:	c0 01       	movw	r24, r0
    a6fc:	2f 9f       	mul	r18, r31
    a6fe:	90 0d       	add	r25, r0
    a700:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a702:	b3 01       	movw	r22, r6
    a704:	68 1b       	sub	r22, r24
    a706:	79 0b       	sbc	r23, r25
    a708:	76 95       	lsr	r23
    a70a:	67 95       	ror	r22
    a70c:	62 0d       	add	r22, r2
    a70e:	73 1d       	adc	r23, r3
    a710:	c1 2c       	mov	r12, r1
    a712:	ee 24       	eor	r14, r14
    a714:	ea 94       	dec	r14
    a716:	fe 2c       	mov	r15, r14
    a718:	10 e0       	ldi	r17, 0x00	; 0
    a71a:	00 e0       	ldi	r16, 0x00	; 0
    a71c:	8c 81       	ldd	r24, Y+4	; 0x04
    a71e:	9d 81       	ldd	r25, Y+5	; 0x05
    a720:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a724:	62 e0       	ldi	r22, 0x02	; 2
    a726:	ee 81       	ldd	r30, Y+6	; 0x06
    a728:	ff 81       	ldd	r31, Y+7	; 0x07
    a72a:	80 81       	ld	r24, Z
    a72c:	88 23       	and	r24, r24
    a72e:	d1 f1       	breq	.+116    	; 0xa7a4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    a730:	01 90       	ld	r0, Z+
    a732:	00 20       	and	r0, r0
    a734:	e9 f7       	brne	.-6      	; 0xa730 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    a736:	9f 01       	movw	r18, r30
    a738:	21 50       	subi	r18, 0x01	; 1
    a73a:	31 09       	sbc	r19, r1
    a73c:	4e 81       	ldd	r20, Y+6	; 0x06
    a73e:	5f 81       	ldd	r21, Y+7	; 0x07
    a740:	24 1b       	sub	r18, r20
    a742:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a744:	89 2d       	mov	r24, r9
    a746:	88 0f       	add	r24, r24
    a748:	89 0d       	add	r24, r9
    a74a:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a74c:	e9 81       	ldd	r30, Y+1	; 0x01
    a74e:	fa 81       	ldd	r31, Y+2	; 0x02
    a750:	e8 1b       	sub	r30, r24
    a752:	f1 09       	sbc	r31, r1
    a754:	cf 01       	movw	r24, r30
    a756:	6e 5f       	subi	r22, 0xFE	; 254
    a758:	70 e0       	ldi	r23, 0x00	; 0
    a75a:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
    a75e:	f1 e0       	ldi	r31, 0x01	; 1
    a760:	4f 1a       	sub	r4, r31
    a762:	51 08       	sbc	r5, r1
    a764:	a4 0c       	add	r10, r4
    a766:	b5 1c       	adc	r11, r5
    a768:	ab 01       	movw	r20, r22
    a76a:	4a 0d       	add	r20, r10
    a76c:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a76e:	86 e0       	ldi	r24, 0x06	; 6
    a770:	28 9f       	mul	r18, r24
    a772:	90 01       	movw	r18, r0
    a774:	11 24       	eor	r1, r1
    a776:	92 9e       	mul	r9, r18
    a778:	c0 01       	movw	r24, r0
    a77a:	93 9e       	mul	r9, r19
    a77c:	90 0d       	add	r25, r0
    a77e:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a780:	b3 01       	movw	r22, r6
    a782:	68 1b       	sub	r22, r24
    a784:	79 0b       	sbc	r23, r25
    a786:	76 95       	lsr	r23
    a788:	67 95       	ror	r22
    a78a:	62 0d       	add	r22, r2
    a78c:	73 1d       	adc	r23, r3
    a78e:	c1 2c       	mov	r12, r1
    a790:	ee 24       	eor	r14, r14
    a792:	ea 94       	dec	r14
    a794:	fe 2c       	mov	r15, r14
    a796:	10 e0       	ldi	r17, 0x00	; 0
    a798:	00 e0       	ldi	r16, 0x00	; 0
    a79a:	29 2d       	mov	r18, r9
    a79c:	8e 81       	ldd	r24, Y+6	; 0x06
    a79e:	9f 81       	ldd	r25, Y+7	; 0x07
    a7a0:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a7a4:	27 96       	adiw	r28, 0x07	; 7
    a7a6:	0f b6       	in	r0, 0x3f	; 63
    a7a8:	f8 94       	cli
    a7aa:	de bf       	out	0x3e, r29	; 62
    a7ac:	0f be       	out	0x3f, r0	; 63
    a7ae:	cd bf       	out	0x3d, r28	; 61
    a7b0:	df 91       	pop	r29
    a7b2:	cf 91       	pop	r28
    a7b4:	1f 91       	pop	r17
    a7b6:	0f 91       	pop	r16
    a7b8:	ff 90       	pop	r15
    a7ba:	ef 90       	pop	r14
    a7bc:	df 90       	pop	r13
    a7be:	cf 90       	pop	r12
    a7c0:	bf 90       	pop	r11
    a7c2:	af 90       	pop	r10
    a7c4:	9f 90       	pop	r9
    a7c6:	8f 90       	pop	r8
    a7c8:	7f 90       	pop	r7
    a7ca:	6f 90       	pop	r6
    a7cc:	5f 90       	pop	r5
    a7ce:	4f 90       	pop	r4
    a7d0:	3f 90       	pop	r3
    a7d2:	2f 90       	pop	r2
    a7d4:	08 95       	ret

0000a7d6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    a7d6:	2f 92       	push	r2
    a7d8:	3f 92       	push	r3
    a7da:	4f 92       	push	r4
    a7dc:	5f 92       	push	r5
    a7de:	6f 92       	push	r6
    a7e0:	7f 92       	push	r7
    a7e2:	8f 92       	push	r8
    a7e4:	9f 92       	push	r9
    a7e6:	af 92       	push	r10
    a7e8:	bf 92       	push	r11
    a7ea:	cf 92       	push	r12
    a7ec:	df 92       	push	r13
    a7ee:	ef 92       	push	r14
    a7f0:	ff 92       	push	r15
    a7f2:	0f 93       	push	r16
    a7f4:	1f 93       	push	r17
    a7f6:	cf 93       	push	r28
    a7f8:	df 93       	push	r29
    a7fa:	00 d0       	rcall	.+0      	; 0xa7fc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    a7fc:	1f 92       	push	r1
    a7fe:	1f 92       	push	r1
    a800:	cd b7       	in	r28, 0x3d	; 61
    a802:	de b7       	in	r29, 0x3e	; 62
    a804:	3c 01       	movw	r6, r24
    a806:	1b 01       	movw	r2, r22
    a808:	54 2e       	mov	r5, r20
    a80a:	42 2e       	mov	r4, r18
    a80c:	0b 83       	std	Y+3, r16	; 0x03
    a80e:	ec 82       	std	Y+4, r14	; 0x04
    a810:	88 20       	and	r8, r8
    a812:	41 f0       	breq	.+16     	; 0xa824 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a814:	41 e0       	ldi	r20, 0x01	; 1
    a816:	56 01       	movw	r10, r12
    a818:	84 16       	cp	r8, r20
    a81a:	21 f0       	breq	.+8      	; 0xa824 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a81c:	18 e1       	ldi	r17, 0x18	; 24
    a81e:	a1 2e       	mov	r10, r17
    a820:	06 ec       	ldi	r16, 0xC6	; 198
    a822:	b0 2e       	mov	r11, r16
    a824:	70 e0       	ldi	r23, 0x00	; 0
    a826:	60 e0       	ldi	r22, 0x00	; 0
    a828:	81 e2       	ldi	r24, 0x21	; 33
    a82a:	9c e0       	ldi	r25, 0x0C	; 12
    a82c:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a830:	f1 2c       	mov	r15, r1
    a832:	e1 2c       	mov	r14, r1
    a834:	84 2d       	mov	r24, r4
    a836:	90 e0       	ldi	r25, 0x00	; 0
    a838:	9a 83       	std	Y+2, r25	; 0x02
    a83a:	89 83       	std	Y+1, r24	; 0x01
    a83c:	85 2c       	mov	r8, r5
    a83e:	91 2c       	mov	r9, r1
    a840:	2c 01       	movw	r4, r24
    a842:	42 0c       	add	r4, r2
    a844:	53 1c       	adc	r5, r3
    a846:	64 01       	movw	r12, r8
    a848:	c6 0c       	add	r12, r6
    a84a:	d7 1c       	adc	r13, r7
    a84c:	82 01       	movw	r16, r4
    a84e:	0e 19       	sub	r16, r14
    a850:	1f 09       	sbc	r17, r15
    a852:	96 01       	movw	r18, r12
    a854:	2e 19       	sub	r18, r14
    a856:	3f 09       	sbc	r19, r15
    a858:	a1 01       	movw	r20, r2
    a85a:	4e 0d       	add	r20, r14
    a85c:	5f 1d       	adc	r21, r15
    a85e:	b3 01       	movw	r22, r6
    a860:	6e 0d       	add	r22, r14
    a862:	7f 1d       	adc	r23, r15
    a864:	81 e2       	ldi	r24, 0x21	; 33
    a866:	9c e0       	ldi	r25, 0x0C	; 12
    a868:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a86c:	9f ef       	ldi	r25, 0xFF	; 255
    a86e:	e9 1a       	sub	r14, r25
    a870:	f9 0a       	sbc	r15, r25
    a872:	e3 e0       	ldi	r30, 0x03	; 3
    a874:	ee 16       	cp	r14, r30
    a876:	f1 04       	cpc	r15, r1
    a878:	49 f7       	brne	.-46     	; 0xa84c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
    a87a:	b5 01       	movw	r22, r10
    a87c:	81 e2       	ldi	r24, 0x21	; 33
    a87e:	9c e0       	ldi	r25, 0x0C	; 12
    a880:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a884:	81 01       	movw	r16, r2
    a886:	03 50       	subi	r16, 0x03	; 3
    a888:	11 09       	sbc	r17, r1
    a88a:	49 81       	ldd	r20, Y+1	; 0x01
    a88c:	5a 81       	ldd	r21, Y+2	; 0x02
    a88e:	04 0f       	add	r16, r20
    a890:	15 1f       	adc	r17, r21
    a892:	93 01       	movw	r18, r6
    a894:	23 50       	subi	r18, 0x03	; 3
    a896:	31 09       	sbc	r19, r1
    a898:	28 0d       	add	r18, r8
    a89a:	39 1d       	adc	r19, r9
    a89c:	a1 01       	movw	r20, r2
    a89e:	4d 5f       	subi	r20, 0xFD	; 253
    a8a0:	5f 4f       	sbci	r21, 0xFF	; 255
    a8a2:	b3 01       	movw	r22, r6
    a8a4:	6d 5f       	subi	r22, 0xFD	; 253
    a8a6:	7f 4f       	sbci	r23, 0xFF	; 255
    a8a8:	81 e2       	ldi	r24, 0x21	; 33
    a8aa:	9c e0       	ldi	r25, 0x0C	; 12
    a8ac:	0e 94 23 95 	call	0x12a46	; 0x12a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a8b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a8b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a8b4:	80 81       	ld	r24, Z
    a8b6:	88 23       	and	r24, r24
    a8b8:	09 f4       	brne	.+2      	; 0xa8bc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    a8ba:	a4 c0       	rjmp	.+328    	; 0xaa04 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x22e>
    a8bc:	81 e0       	ldi	r24, 0x01	; 1
    a8be:	b2 e0       	ldi	r27, 0x02	; 2
    a8c0:	db 2e       	mov	r13, r27
    a8c2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a8c4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a8c6:	90 81       	ld	r25, Z
    a8c8:	99 23       	and	r25, r25
    a8ca:	09 f4       	brne	.+2      	; 0xa8ce <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf8>
    a8cc:	9e c0       	rjmp	.+316    	; 0xaa0a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x234>
    a8ce:	d3 94       	inc	r13
    a8d0:	d3 94       	inc	r13
    a8d2:	f1 e0       	ldi	r31, 0x01	; 1
    a8d4:	fd 83       	std	Y+5, r31	; 0x05
    a8d6:	51 2c       	mov	r5, r1
    a8d8:	41 2c       	mov	r4, r1
    a8da:	81 30       	cpi	r24, 0x01	; 1
    a8dc:	d1 f5       	brne	.+116    	; 0xa952 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x17c>
    a8de:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a8e0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a8e2:	01 90       	ld	r0, Z+
    a8e4:	00 20       	and	r0, r0
    a8e6:	e9 f7       	brne	.-6      	; 0xa8e2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10c>
    a8e8:	9f 01       	movw	r18, r30
    a8ea:	21 50       	subi	r18, 0x01	; 1
    a8ec:	31 09       	sbc	r19, r1
    a8ee:	4b 8d       	ldd	r20, Y+27	; 0x1b
    a8f0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    a8f2:	24 1b       	sub	r18, r20
    a8f4:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a8f6:	8b 81       	ldd	r24, Y+3	; 0x03
    a8f8:	88 0f       	add	r24, r24
    a8fa:	5b 81       	ldd	r21, Y+3	; 0x03
    a8fc:	85 0f       	add	r24, r21
    a8fe:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a900:	e9 81       	ldd	r30, Y+1	; 0x01
    a902:	fa 81       	ldd	r31, Y+2	; 0x02
    a904:	e8 1b       	sub	r30, r24
    a906:	f1 09       	sbc	r31, r1
    a908:	cf 01       	movw	r24, r30
    a90a:	6d 2d       	mov	r22, r13
    a90c:	70 e0       	ldi	r23, 0x00	; 0
    a90e:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    a912:	2b 01       	movw	r4, r22
    a914:	a1 01       	movw	r20, r2
    a916:	41 50       	subi	r20, 0x01	; 1
    a918:	51 09       	sbc	r21, r1
    a91a:	46 0f       	add	r20, r22
    a91c:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    a91e:	f6 e0       	ldi	r31, 0x06	; 6
    a920:	2f 9f       	mul	r18, r31
    a922:	90 01       	movw	r18, r0
    a924:	11 24       	eor	r1, r1
    a926:	6b 81       	ldd	r22, Y+3	; 0x03
    a928:	62 9f       	mul	r22, r18
    a92a:	c0 01       	movw	r24, r0
    a92c:	63 9f       	mul	r22, r19
    a92e:	90 0d       	add	r25, r0
    a930:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a932:	b4 01       	movw	r22, r8
    a934:	68 1b       	sub	r22, r24
    a936:	79 0b       	sbc	r23, r25
    a938:	76 95       	lsr	r23
    a93a:	67 95       	ror	r22
    a93c:	66 0d       	add	r22, r6
    a93e:	77 1d       	adc	r23, r7
    a940:	c1 2c       	mov	r12, r1
    a942:	75 01       	movw	r14, r10
    a944:	10 e0       	ldi	r17, 0x00	; 0
    a946:	00 e0       	ldi	r16, 0x00	; 0
    a948:	2b 81       	ldd	r18, Y+3	; 0x03
    a94a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a94c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a94e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a952:	8d 81       	ldd	r24, Y+5	; 0x05
    a954:	81 30       	cpi	r24, 0x01	; 1
    a956:	f1 f5       	brne	.+124    	; 0xa9d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
    a958:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a95a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a95c:	01 90       	ld	r0, Z+
    a95e:	00 20       	and	r0, r0
    a960:	e9 f7       	brne	.-6      	; 0xa95c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x186>
    a962:	9f 01       	movw	r18, r30
    a964:	21 50       	subi	r18, 0x01	; 1
    a966:	31 09       	sbc	r19, r1
    a968:	4d 8d       	ldd	r20, Y+29	; 0x1d
    a96a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    a96c:	24 1b       	sub	r18, r20
    a96e:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a970:	8c 81       	ldd	r24, Y+4	; 0x04
    a972:	88 0f       	add	r24, r24
    a974:	5c 81       	ldd	r21, Y+4	; 0x04
    a976:	85 0f       	add	r24, r21
    a978:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a97a:	e9 81       	ldd	r30, Y+1	; 0x01
    a97c:	fa 81       	ldd	r31, Y+2	; 0x02
    a97e:	e8 1b       	sub	r30, r24
    a980:	f1 09       	sbc	r31, r1
    a982:	cf 01       	movw	r24, r30
    a984:	88 0f       	add	r24, r24
    a986:	99 1f       	adc	r25, r25
    a988:	6d 2d       	mov	r22, r13
    a98a:	70 e0       	ldi	r23, 0x00	; 0
    a98c:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
    a990:	f1 e0       	ldi	r31, 0x01	; 1
    a992:	2f 1a       	sub	r2, r31
    a994:	31 08       	sbc	r3, r1
    a996:	26 0e       	add	r2, r22
    a998:	37 1e       	adc	r3, r23
    a99a:	a1 01       	movw	r20, r2
    a99c:	44 0d       	add	r20, r4
    a99e:	55 1d       	adc	r21, r5
_Z22show_string_size_widthhh():
    a9a0:	66 e0       	ldi	r22, 0x06	; 6
    a9a2:	26 9f       	mul	r18, r22
    a9a4:	90 01       	movw	r18, r0
    a9a6:	11 24       	eor	r1, r1
    a9a8:	ec 81       	ldd	r30, Y+4	; 0x04
    a9aa:	e2 9f       	mul	r30, r18
    a9ac:	c0 01       	movw	r24, r0
    a9ae:	e3 9f       	mul	r30, r19
    a9b0:	90 0d       	add	r25, r0
    a9b2:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a9b4:	b4 01       	movw	r22, r8
    a9b6:	68 1b       	sub	r22, r24
    a9b8:	79 0b       	sbc	r23, r25
    a9ba:	76 95       	lsr	r23
    a9bc:	67 95       	ror	r22
    a9be:	66 0d       	add	r22, r6
    a9c0:	77 1d       	adc	r23, r7
    a9c2:	c1 2c       	mov	r12, r1
    a9c4:	75 01       	movw	r14, r10
    a9c6:	10 e0       	ldi	r17, 0x00	; 0
    a9c8:	00 e0       	ldi	r16, 0x00	; 0
    a9ca:	2e 2f       	mov	r18, r30
    a9cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a9ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a9d0:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a9d4:	0f 90       	pop	r0
    a9d6:	0f 90       	pop	r0
    a9d8:	0f 90       	pop	r0
    a9da:	0f 90       	pop	r0
    a9dc:	0f 90       	pop	r0
    a9de:	df 91       	pop	r29
    a9e0:	cf 91       	pop	r28
    a9e2:	1f 91       	pop	r17
    a9e4:	0f 91       	pop	r16
    a9e6:	ff 90       	pop	r15
    a9e8:	ef 90       	pop	r14
    a9ea:	df 90       	pop	r13
    a9ec:	cf 90       	pop	r12
    a9ee:	bf 90       	pop	r11
    a9f0:	af 90       	pop	r10
    a9f2:	9f 90       	pop	r9
    a9f4:	8f 90       	pop	r8
    a9f6:	7f 90       	pop	r7
    a9f8:	6f 90       	pop	r6
    a9fa:	5f 90       	pop	r5
    a9fc:	4f 90       	pop	r4
    a9fe:	3f 90       	pop	r3
    aa00:	2f 90       	pop	r2
    aa02:	08 95       	ret
    aa04:	80 e0       	ldi	r24, 0x00	; 0
    aa06:	d1 2c       	mov	r13, r1
    aa08:	5c cf       	rjmp	.-328    	; 0xa8c2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    aa0a:	1d 82       	std	Y+5, r1	; 0x05
    aa0c:	64 cf       	rjmp	.-312    	; 0xa8d6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x100>

0000aa0e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    aa0e:	2f 92       	push	r2
    aa10:	3f 92       	push	r3
    aa12:	4f 92       	push	r4
    aa14:	5f 92       	push	r5
    aa16:	6f 92       	push	r6
    aa18:	7f 92       	push	r7
    aa1a:	8f 92       	push	r8
    aa1c:	9f 92       	push	r9
    aa1e:	af 92       	push	r10
    aa20:	bf 92       	push	r11
    aa22:	cf 92       	push	r12
    aa24:	df 92       	push	r13
    aa26:	ef 92       	push	r14
    aa28:	ff 92       	push	r15
    aa2a:	0f 93       	push	r16
    aa2c:	1f 93       	push	r17
    aa2e:	cf 93       	push	r28
    aa30:	df 93       	push	r29
    aa32:	00 d0       	rcall	.+0      	; 0xaa34 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    aa34:	1f 92       	push	r1
    aa36:	1f 92       	push	r1
    aa38:	cd b7       	in	r28, 0x3d	; 61
    aa3a:	de b7       	in	r29, 0x3e	; 62
    aa3c:	4c 01       	movw	r8, r24
    aa3e:	3b 01       	movw	r6, r22
    aa40:	44 2e       	mov	r4, r20
    aa42:	f2 2e       	mov	r15, r18
    aa44:	09 83       	std	Y+1, r16	; 0x01
    aa46:	db 82       	std	Y+3, r13	; 0x03
    aa48:	ca 82       	std	Y+2, r12	; 0x02
    aa4a:	15 01       	movw	r2, r10
    aa4c:	70 e0       	ldi	r23, 0x00	; 0
    aa4e:	60 e0       	ldi	r22, 0x00	; 0
    aa50:	81 e2       	ldi	r24, 0x21	; 33
    aa52:	9c e0       	ldi	r25, 0x0C	; 12
    aa54:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    aa58:	1d 82       	std	Y+5, r1	; 0x05
    aa5a:	1c 82       	std	Y+4, r1	; 0x04
    aa5c:	af 2c       	mov	r10, r15
    aa5e:	b1 2c       	mov	r11, r1
    aa60:	65 01       	movw	r12, r10
    aa62:	c6 0c       	add	r12, r6
    aa64:	d7 1c       	adc	r13, r7
    aa66:	51 2c       	mov	r5, r1
    aa68:	72 01       	movw	r14, r4
    aa6a:	e8 0c       	add	r14, r8
    aa6c:	f9 1c       	adc	r15, r9
    aa6e:	86 01       	movw	r16, r12
    aa70:	8c 81       	ldd	r24, Y+4	; 0x04
    aa72:	9d 81       	ldd	r25, Y+5	; 0x05
    aa74:	08 1b       	sub	r16, r24
    aa76:	19 0b       	sbc	r17, r25
    aa78:	97 01       	movw	r18, r14
    aa7a:	28 1b       	sub	r18, r24
    aa7c:	39 0b       	sbc	r19, r25
    aa7e:	ac 01       	movw	r20, r24
    aa80:	46 0d       	add	r20, r6
    aa82:	57 1d       	adc	r21, r7
    aa84:	bc 01       	movw	r22, r24
    aa86:	68 0d       	add	r22, r8
    aa88:	79 1d       	adc	r23, r9
    aa8a:	81 e2       	ldi	r24, 0x21	; 33
    aa8c:	9c e0       	ldi	r25, 0x0C	; 12
    aa8e:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    aa92:	8c 81       	ldd	r24, Y+4	; 0x04
    aa94:	9d 81       	ldd	r25, Y+5	; 0x05
    aa96:	01 96       	adiw	r24, 0x01	; 1
    aa98:	9d 83       	std	Y+5, r25	; 0x05
    aa9a:	8c 83       	std	Y+4, r24	; 0x04
    aa9c:	03 97       	sbiw	r24, 0x03	; 3
    aa9e:	39 f7       	brne	.-50     	; 0xaa6e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    aaa0:	ea 81       	ldd	r30, Y+2	; 0x02
    aaa2:	fb 81       	ldd	r31, Y+3	; 0x03
    aaa4:	01 90       	ld	r0, Z+
    aaa6:	00 20       	and	r0, r0
    aaa8:	e9 f7       	brne	.-6      	; 0xaaa4 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    aaaa:	31 97       	sbiw	r30, 0x01	; 1
    aaac:	8a 81       	ldd	r24, Y+2	; 0x02
    aaae:	9b 81       	ldd	r25, Y+3	; 0x03
    aab0:	e8 1b       	sub	r30, r24
    aab2:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    aab4:	89 81       	ldd	r24, Y+1	; 0x01
    aab6:	88 0f       	add	r24, r24
    aab8:	99 81       	ldd	r25, Y+1	; 0x01
    aaba:	89 0f       	add	r24, r25
    aabc:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    aabe:	a5 01       	movw	r20, r10
    aac0:	48 1b       	sub	r20, r24
    aac2:	51 09       	sbc	r21, r1
    aac4:	57 ff       	sbrs	r21, 7
    aac6:	02 c0       	rjmp	.+4      	; 0xaacc <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    aac8:	4d 5f       	subi	r20, 0xFD	; 253
    aaca:	5f 4f       	sbci	r21, 0xFF	; 255
    aacc:	55 95       	asr	r21
    aace:	47 95       	ror	r20
    aad0:	55 95       	asr	r21
    aad2:	47 95       	ror	r20
    aad4:	46 0d       	add	r20, r6
    aad6:	57 2d       	mov	r21, r7
    aad8:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    aada:	26 e0       	ldi	r18, 0x06	; 6
    aadc:	e2 9f       	mul	r30, r18
    aade:	f0 01       	movw	r30, r0
    aae0:	11 24       	eor	r1, r1
    aae2:	29 81       	ldd	r18, Y+1	; 0x01
    aae4:	2e 9f       	mul	r18, r30
    aae6:	c0 01       	movw	r24, r0
    aae8:	2f 9f       	mul	r18, r31
    aaea:	90 0d       	add	r25, r0
    aaec:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    aaee:	99 27       	eor	r25, r25
    aaf0:	b2 01       	movw	r22, r4
    aaf2:	68 1b       	sub	r22, r24
    aaf4:	79 0b       	sbc	r23, r25
    aaf6:	77 ff       	sbrs	r23, 7
    aaf8:	02 c0       	rjmp	.+4      	; 0xaafe <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    aafa:	6f 5f       	subi	r22, 0xFF	; 255
    aafc:	7f 4f       	sbci	r23, 0xFF	; 255
    aafe:	75 95       	asr	r23
    ab00:	67 95       	ror	r22
    ab02:	68 0d       	add	r22, r8
    ab04:	79 2d       	mov	r23, r9
    ab06:	71 1d       	adc	r23, r1
    ab08:	c1 2c       	mov	r12, r1
    ab0a:	ee 24       	eor	r14, r14
    ab0c:	ea 94       	dec	r14
    ab0e:	fe 2c       	mov	r15, r14
    ab10:	10 e0       	ldi	r17, 0x00	; 0
    ab12:	00 e0       	ldi	r16, 0x00	; 0
    ab14:	29 81       	ldd	r18, Y+1	; 0x01
    ab16:	8a 81       	ldd	r24, Y+2	; 0x02
    ab18:	9b 81       	ldd	r25, Y+3	; 0x03
    ab1a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ab1e:	f1 01       	movw	r30, r2
    ab20:	01 90       	ld	r0, Z+
    ab22:	00 20       	and	r0, r0
    ab24:	e9 f7       	brne	.-6      	; 0xab20 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    ab26:	31 97       	sbiw	r30, 0x01	; 1
    ab28:	e2 19       	sub	r30, r2
    ab2a:	f3 09       	sbc	r31, r3
    ab2c:	a5 01       	movw	r20, r10
    ab2e:	46 50       	subi	r20, 0x06	; 6
    ab30:	51 09       	sbc	r21, r1
    ab32:	57 ff       	sbrs	r21, 7
    ab34:	02 c0       	rjmp	.+4      	; 0xab3a <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    ab36:	4d 5f       	subi	r20, 0xFD	; 253
    ab38:	5f 4f       	sbci	r21, 0xFF	; 255
    ab3a:	55 95       	asr	r21
    ab3c:	47 95       	ror	r20
    ab3e:	55 95       	asr	r21
    ab40:	47 95       	ror	r20
    ab42:	55 27       	eor	r21, r21
    ab44:	ca 01       	movw	r24, r20
    ab46:	88 0f       	add	r24, r24
    ab48:	99 1f       	adc	r25, r25
    ab4a:	48 0f       	add	r20, r24
    ab4c:	59 1f       	adc	r21, r25
    ab4e:	46 0d       	add	r20, r6
    ab50:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    ab52:	86 e0       	ldi	r24, 0x06	; 6
    ab54:	e8 9f       	mul	r30, r24
    ab56:	f0 01       	movw	r30, r0
    ab58:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    ab5a:	ff 27       	eor	r31, r31
    ab5c:	b2 01       	movw	r22, r4
    ab5e:	6e 1b       	sub	r22, r30
    ab60:	7f 0b       	sbc	r23, r31
    ab62:	77 ff       	sbrs	r23, 7
    ab64:	02 c0       	rjmp	.+4      	; 0xab6a <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    ab66:	6f 5f       	subi	r22, 0xFF	; 255
    ab68:	7f 4f       	sbci	r23, 0xFF	; 255
    ab6a:	75 95       	asr	r23
    ab6c:	67 95       	ror	r22
    ab6e:	68 0d       	add	r22, r8
    ab70:	79 2d       	mov	r23, r9
    ab72:	71 1d       	adc	r23, r1
    ab74:	c1 2c       	mov	r12, r1
    ab76:	ee 24       	eor	r14, r14
    ab78:	ea 94       	dec	r14
    ab7a:	fe 2c       	mov	r15, r14
    ab7c:	10 e0       	ldi	r17, 0x00	; 0
    ab7e:	00 e0       	ldi	r16, 0x00	; 0
    ab80:	21 e0       	ldi	r18, 0x01	; 1
    ab82:	c1 01       	movw	r24, r2
    ab84:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ab88:	0f 90       	pop	r0
    ab8a:	0f 90       	pop	r0
    ab8c:	0f 90       	pop	r0
    ab8e:	0f 90       	pop	r0
    ab90:	0f 90       	pop	r0
    ab92:	df 91       	pop	r29
    ab94:	cf 91       	pop	r28
    ab96:	1f 91       	pop	r17
    ab98:	0f 91       	pop	r16
    ab9a:	ff 90       	pop	r15
    ab9c:	ef 90       	pop	r14
    ab9e:	df 90       	pop	r13
    aba0:	cf 90       	pop	r12
    aba2:	bf 90       	pop	r11
    aba4:	af 90       	pop	r10
    aba6:	9f 90       	pop	r9
    aba8:	8f 90       	pop	r8
    abaa:	7f 90       	pop	r7
    abac:	6f 90       	pop	r6
    abae:	5f 90       	pop	r5
    abb0:	4f 90       	pop	r4
    abb2:	3f 90       	pop	r3
    abb4:	2f 90       	pop	r2
    abb6:	08 95       	ret

0000abb8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    abb8:	2f 92       	push	r2
    abba:	3f 92       	push	r3
    abbc:	4f 92       	push	r4
    abbe:	5f 92       	push	r5
    abc0:	6f 92       	push	r6
    abc2:	7f 92       	push	r7
    abc4:	8f 92       	push	r8
    abc6:	9f 92       	push	r9
    abc8:	af 92       	push	r10
    abca:	bf 92       	push	r11
    abcc:	cf 92       	push	r12
    abce:	df 92       	push	r13
    abd0:	ef 92       	push	r14
    abd2:	ff 92       	push	r15
    abd4:	0f 93       	push	r16
    abd6:	1f 93       	push	r17
    abd8:	cf 93       	push	r28
    abda:	df 93       	push	r29
    abdc:	00 d0       	rcall	.+0      	; 0xabde <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    abde:	1f 92       	push	r1
    abe0:	1f 92       	push	r1
    abe2:	cd b7       	in	r28, 0x3d	; 61
    abe4:	de b7       	in	r29, 0x3e	; 62
    abe6:	6c 01       	movw	r12, r24
    abe8:	5b 01       	movw	r10, r22
    abea:	1a 01       	movw	r2, r20
    abec:	29 01       	movw	r4, r18
    abee:	90 2e       	mov	r9, r16
    abf0:	8e 2c       	mov	r8, r14
    abf2:	70 e0       	ldi	r23, 0x00	; 0
    abf4:	60 e0       	ldi	r22, 0x00	; 0
    abf6:	81 e2       	ldi	r24, 0x21	; 33
    abf8:	9c e0       	ldi	r25, 0x0C	; 12
    abfa:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    abfe:	f1 2c       	mov	r15, r1
    ac00:	e1 2c       	mov	r14, r1
    ac02:	35 01       	movw	r6, r10
    ac04:	64 0c       	add	r6, r4
    ac06:	75 1c       	adc	r7, r5
    ac08:	c6 01       	movw	r24, r12
    ac0a:	82 0d       	add	r24, r2
    ac0c:	93 1d       	adc	r25, r3
    ac0e:	9d 83       	std	Y+5, r25	; 0x05
    ac10:	8c 83       	std	Y+4, r24	; 0x04
    ac12:	83 01       	movw	r16, r6
    ac14:	0e 19       	sub	r16, r14
    ac16:	1f 09       	sbc	r17, r15
    ac18:	2c 81       	ldd	r18, Y+4	; 0x04
    ac1a:	3d 81       	ldd	r19, Y+5	; 0x05
    ac1c:	2e 19       	sub	r18, r14
    ac1e:	3f 09       	sbc	r19, r15
    ac20:	a5 01       	movw	r20, r10
    ac22:	4e 0d       	add	r20, r14
    ac24:	5f 1d       	adc	r21, r15
    ac26:	b6 01       	movw	r22, r12
    ac28:	6e 0d       	add	r22, r14
    ac2a:	7f 1d       	adc	r23, r15
    ac2c:	81 e2       	ldi	r24, 0x21	; 33
    ac2e:	9c e0       	ldi	r25, 0x0C	; 12
    ac30:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    ac34:	9f ef       	ldi	r25, 0xFF	; 255
    ac36:	e9 1a       	sub	r14, r25
    ac38:	f9 0a       	sbc	r15, r25
    ac3a:	23 e0       	ldi	r18, 0x03	; 3
    ac3c:	e2 16       	cp	r14, r18
    ac3e:	f1 04       	cpc	r15, r1
    ac40:	41 f7       	brne	.-48     	; 0xac12 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    ac42:	89 82       	std	Y+1, r8	; 0x01
    ac44:	1a 82       	std	Y+2, r1	; 0x02
    ac46:	ce 01       	movw	r24, r28
    ac48:	01 96       	adiw	r24, 0x01	; 1
    ac4a:	fc 01       	movw	r30, r24
    ac4c:	01 90       	ld	r0, Z+
    ac4e:	00 20       	and	r0, r0
    ac50:	e9 f7       	brne	.-6      	; 0xac4c <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    ac52:	31 97       	sbiw	r30, 0x01	; 1
    ac54:	e8 1b       	sub	r30, r24
    ac56:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    ac58:	29 2d       	mov	r18, r9
    ac5a:	22 0f       	add	r18, r18
    ac5c:	29 0d       	add	r18, r9
    ac5e:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    ac60:	a2 01       	movw	r20, r4
    ac62:	42 1b       	sub	r20, r18
    ac64:	51 09       	sbc	r21, r1
    ac66:	56 95       	lsr	r21
    ac68:	47 95       	ror	r20
    ac6a:	56 95       	lsr	r21
    ac6c:	47 95       	ror	r20
    ac6e:	4a 0d       	add	r20, r10
    ac70:	5b 2d       	mov	r21, r11
    ac72:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    ac74:	26 e0       	ldi	r18, 0x06	; 6
    ac76:	e2 9f       	mul	r30, r18
    ac78:	f0 01       	movw	r30, r0
    ac7a:	11 24       	eor	r1, r1
    ac7c:	9e 9e       	mul	r9, r30
    ac7e:	90 01       	movw	r18, r0
    ac80:	9f 9e       	mul	r9, r31
    ac82:	30 0d       	add	r19, r0
    ac84:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    ac86:	33 27       	eor	r19, r19
    ac88:	b1 01       	movw	r22, r2
    ac8a:	62 1b       	sub	r22, r18
    ac8c:	73 0b       	sbc	r23, r19
    ac8e:	76 95       	lsr	r23
    ac90:	67 95       	ror	r22
    ac92:	6c 0d       	add	r22, r12
    ac94:	7d 2d       	mov	r23, r13
    ac96:	71 1d       	adc	r23, r1
    ac98:	c1 2c       	mov	r12, r1
    ac9a:	ee 24       	eor	r14, r14
    ac9c:	ea 94       	dec	r14
    ac9e:	fe 2c       	mov	r15, r14
    aca0:	10 e0       	ldi	r17, 0x00	; 0
    aca2:	00 e0       	ldi	r16, 0x00	; 0
    aca4:	29 2d       	mov	r18, r9
    aca6:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    acaa:	0f 90       	pop	r0
    acac:	0f 90       	pop	r0
    acae:	0f 90       	pop	r0
    acb0:	0f 90       	pop	r0
    acb2:	0f 90       	pop	r0
    acb4:	df 91       	pop	r29
    acb6:	cf 91       	pop	r28
    acb8:	1f 91       	pop	r17
    acba:	0f 91       	pop	r16
    acbc:	ff 90       	pop	r15
    acbe:	ef 90       	pop	r14
    acc0:	df 90       	pop	r13
    acc2:	cf 90       	pop	r12
    acc4:	bf 90       	pop	r11
    acc6:	af 90       	pop	r10
    acc8:	9f 90       	pop	r9
    acca:	8f 90       	pop	r8
    accc:	7f 90       	pop	r7
    acce:	6f 90       	pop	r6
    acd0:	5f 90       	pop	r5
    acd2:	4f 90       	pop	r4
    acd4:	3f 90       	pop	r3
    acd6:	2f 90       	pop	r2
    acd8:	08 95       	ret

0000acda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    acda:	ef 92       	push	r14
    acdc:	ff 92       	push	r15
    acde:	0f 93       	push	r16
    ace0:	1f 93       	push	r17
_Z10is_pressediiiiii():
    ace2:	80 17       	cp	r24, r16
    ace4:	91 07       	cpc	r25, r17
    ace6:	74 f4       	brge	.+28     	; 0xad04 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    ace8:	84 0f       	add	r24, r20
    acea:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    acec:	08 17       	cp	r16, r24
    acee:	19 07       	cpc	r17, r25
    acf0:	4c f4       	brge	.+18     	; 0xad04 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    acf2:	6e 15       	cp	r22, r14
    acf4:	7f 05       	cpc	r23, r15
    acf6:	34 f4       	brge	.+12     	; 0xad04 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    acf8:	62 0f       	add	r22, r18
    acfa:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    acfc:	81 e0       	ldi	r24, 0x01	; 1
    acfe:	e6 16       	cp	r14, r22
    ad00:	f7 06       	cpc	r15, r23
    ad02:	0c f0       	brlt	.+2      	; 0xad06 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    ad04:	80 e0       	ldi	r24, 0x00	; 0
    ad06:	1f 91       	pop	r17
    ad08:	0f 91       	pop	r16
    ad0a:	ff 90       	pop	r15
    ad0c:	ef 90       	pop	r14
    ad0e:	08 95       	ret

0000ad10 <draw_menu(bool)>:
_Z9draw_menub():
    ad10:	2f 92       	push	r2
    ad12:	3f 92       	push	r3
    ad14:	4f 92       	push	r4
    ad16:	5f 92       	push	r5
    ad18:	6f 92       	push	r6
    ad1a:	7f 92       	push	r7
    ad1c:	8f 92       	push	r8
    ad1e:	9f 92       	push	r9
    ad20:	af 92       	push	r10
    ad22:	bf 92       	push	r11
    ad24:	cf 92       	push	r12
    ad26:	df 92       	push	r13
    ad28:	ef 92       	push	r14
    ad2a:	ff 92       	push	r15
    ad2c:	0f 93       	push	r16
    ad2e:	1f 93       	push	r17
    ad30:	cf 93       	push	r28
    ad32:	df 93       	push	r29
    ad34:	cd b7       	in	r28, 0x3d	; 61
    ad36:	de b7       	in	r29, 0x3e	; 62
    ad38:	c3 5e       	subi	r28, 0xE3	; 227
    ad3a:	d1 09       	sbc	r29, r1
    ad3c:	0f b6       	in	r0, 0x3f	; 63
    ad3e:	f8 94       	cli
    ad40:	de bf       	out	0x3e, r29	; 62
    ad42:	0f be       	out	0x3f, r0	; 63
    ad44:	cd bf       	out	0x3d, r28	; 61
    ad46:	f8 2e       	mov	r15, r24
    ad48:	ce 01       	movw	r24, r28
    ad4a:	8f 54       	subi	r24, 0x4F	; 79
    ad4c:	9f 4f       	sbci	r25, 0xFF	; 255
    ad4e:	0e 94 df 38 	call	0x71be	; 0x71be <MenuHistoryGetMenu(unsigned char*)>
    ad52:	3c 01       	movw	r6, r24
    ad54:	60 e0       	ldi	r22, 0x00	; 0
    ad56:	8f ef       	ldi	r24, 0xFF	; 255
    ad58:	9b e0       	ldi	r25, 0x0B	; 11
    ad5a:	0e 94 52 aa 	call	0x154a4	; 0x154a4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
    ad5e:	8f ef       	ldi	r24, 0xFF	; 255
    ad60:	9b e0       	ldi	r25, 0x0B	; 11
    ad62:	0e 94 25 ab 	call	0x1564a	; 0x1564a <LCDWIKI_TOUCH::TP_Get_State() const>
    ad66:	87 ff       	sbrs	r24, 7
    ad68:	98 c1       	rjmp	.+816    	; 0xb09a <draw_menu(bool)+0x38a>
    ad6a:	f1 10       	cpse	r15, r1
    ad6c:	96 c1       	rjmp	.+812    	; 0xb09a <draw_menu(bool)+0x38a>
    ad6e:	20 91 03 0c 	lds	r18, 0x0C03	; 0x800c03 <my_touch+0x4>
    ad72:	30 91 04 0c 	lds	r19, 0x0C04	; 0x800c04 <my_touch+0x5>
    ad76:	ce 53       	subi	r28, 0x3E	; 62
    ad78:	df 4f       	sbci	r29, 0xFF	; 255
    ad7a:	39 83       	std	Y+1, r19	; 0x01
    ad7c:	28 83       	st	Y, r18
    ad7e:	c2 5c       	subi	r28, 0xC2	; 194
    ad80:	d0 40       	sbci	r29, 0x00	; 0
    ad82:	40 91 05 0c 	lds	r20, 0x0C05	; 0x800c05 <my_touch+0x6>
    ad86:	50 91 06 0c 	lds	r21, 0x0C06	; 0x800c06 <my_touch+0x7>
    ad8a:	cc 53       	subi	r28, 0x3C	; 60
    ad8c:	df 4f       	sbci	r29, 0xFF	; 255
    ad8e:	59 83       	std	Y+1, r21	; 0x01
    ad90:	48 83       	st	Y, r20
    ad92:	c4 5c       	subi	r28, 0xC4	; 196
    ad94:	d0 40       	sbci	r29, 0x00	; 0
    ad96:	83 01       	movw	r16, r6
    ad98:	0a 53       	subi	r16, 0x3A	; 58
    ad9a:	1d 4f       	sbci	r17, 0xFD	; 253
    ad9c:	f8 01       	movw	r30, r16
    ad9e:	65 91       	lpm	r22, Z+
    ada0:	74 91       	lpm	r23, Z
    ada2:	ca 54       	subi	r28, 0x4A	; 74
    ada4:	df 4f       	sbci	r29, 0xFF	; 255
    ada6:	79 83       	std	Y+1, r23	; 0x01
    ada8:	68 83       	st	Y, r22
    adaa:	c6 5b       	subi	r28, 0xB6	; 182
    adac:	d0 40       	sbci	r29, 0x00	; 0
    adae:	63 01       	movw	r12, r6
    adb0:	78 e3       	ldi	r23, 0x38	; 56
    adb2:	c7 1a       	sub	r12, r23
    adb4:	7d ef       	ldi	r23, 0xFD	; 253
    adb6:	d7 0a       	sbc	r13, r23
    adb8:	f6 01       	movw	r30, r12
    adba:	85 91       	lpm	r24, Z+
    adbc:	94 91       	lpm	r25, Z
    adbe:	c8 54       	subi	r28, 0x48	; 72
    adc0:	df 4f       	sbci	r29, 0xFF	; 255
    adc2:	99 83       	std	Y+1, r25	; 0x01
    adc4:	88 83       	st	Y, r24
    adc6:	c8 5b       	subi	r28, 0xB8	; 184
    adc8:	d0 40       	sbci	r29, 0x00	; 0
    adca:	f3 01       	movw	r30, r6
    adcc:	ee 52       	subi	r30, 0x2E	; 46
    adce:	fd 4f       	sbci	r31, 0xFD	; 253
    add0:	25 91       	lpm	r18, Z+
    add2:	34 91       	lpm	r19, Z
    add4:	53 01       	movw	r10, r6
    add6:	9b e3       	ldi	r25, 0x3B	; 59
    add8:	a9 1a       	sub	r10, r25
    adda:	9d ef       	ldi	r25, 0xFD	; 253
    addc:	b9 0a       	sbc	r11, r25
    adde:	f5 01       	movw	r30, r10
    ade0:	84 91       	lpm	r24, Z
    ade2:	cf 54       	subi	r28, 0x4F	; 79
    ade4:	df 4f       	sbci	r29, 0xFF	; 255
    ade6:	68 81       	ld	r22, Y
    ade8:	c1 5b       	subi	r28, 0xB1	; 177
    adea:	d0 40       	sbci	r29, 0x00	; 0
    adec:	70 e0       	ldi	r23, 0x00	; 0
    adee:	4f ef       	ldi	r20, 0xFF	; 255
    adf0:	90 e0       	ldi	r25, 0x00	; 0
    adf2:	f9 01       	movw	r30, r18
    adf4:	19 95       	eicall
    adf6:	91 2c       	mov	r9, r1
    adf8:	88 23       	and	r24, r24
    adfa:	11 f0       	breq	.+4      	; 0xae00 <draw_menu(bool)+0xf0>
    adfc:	99 24       	eor	r9, r9
    adfe:	93 94       	inc	r9
    ae00:	f3 01       	movw	r30, r6
    ae02:	ec 52       	subi	r30, 0x2C	; 44
    ae04:	fd 4f       	sbci	r31, 0xFD	; 253
    ae06:	25 91       	lpm	r18, Z+
    ae08:	34 91       	lpm	r19, Z
    ae0a:	f5 01       	movw	r30, r10
    ae0c:	84 91       	lpm	r24, Z
    ae0e:	cf 54       	subi	r28, 0x4F	; 79
    ae10:	df 4f       	sbci	r29, 0xFF	; 255
    ae12:	68 81       	ld	r22, Y
    ae14:	c1 5b       	subi	r28, 0xB1	; 177
    ae16:	d0 40       	sbci	r29, 0x00	; 0
    ae18:	70 e0       	ldi	r23, 0x00	; 0
    ae1a:	4f ef       	ldi	r20, 0xFF	; 255
    ae1c:	90 e0       	ldi	r25, 0x00	; 0
    ae1e:	f9 01       	movw	r30, r18
    ae20:	19 95       	eicall
    ae22:	81 11       	cpse	r24, r1
    ae24:	47 c1       	rjmp	.+654    	; 0xb0b4 <draw_menu(bool)+0x3a4>
    ae26:	e8 94       	clt
    ae28:	91 f8       	bld	r9, 1
    ae2a:	f3 01       	movw	r30, r6
    ae2c:	ea 52       	subi	r30, 0x2A	; 42
    ae2e:	fd 4f       	sbci	r31, 0xFD	; 253
    ae30:	25 91       	lpm	r18, Z+
    ae32:	34 91       	lpm	r19, Z
    ae34:	f5 01       	movw	r30, r10
    ae36:	84 91       	lpm	r24, Z
    ae38:	cf 54       	subi	r28, 0x4F	; 79
    ae3a:	df 4f       	sbci	r29, 0xFF	; 255
    ae3c:	68 81       	ld	r22, Y
    ae3e:	c1 5b       	subi	r28, 0xB1	; 177
    ae40:	d0 40       	sbci	r29, 0x00	; 0
    ae42:	70 e0       	ldi	r23, 0x00	; 0
    ae44:	4f ef       	ldi	r20, 0xFF	; 255
    ae46:	90 e0       	ldi	r25, 0x00	; 0
    ae48:	f9 01       	movw	r30, r18
    ae4a:	19 95       	eicall
    ae4c:	81 11       	cpse	r24, r1
    ae4e:	35 c1       	rjmp	.+618    	; 0xb0ba <draw_menu(bool)+0x3aa>
    ae50:	89 2d       	mov	r24, r9
    ae52:	8b 7f       	andi	r24, 0xFB	; 251
    ae54:	f1 10       	cpse	r15, r1
    ae56:	34 c1       	rjmp	.+616    	; 0xb0c0 <draw_menu(bool)+0x3b0>
    ae58:	87 7f       	andi	r24, 0xF7	; 247
    ae5a:	cd 52       	subi	r28, 0x2D	; 45
    ae5c:	df 4f       	sbci	r29, 0xFF	; 255
    ae5e:	88 83       	st	Y, r24
    ae60:	c3 5d       	subi	r28, 0xD3	; 211
    ae62:	d0 40       	sbci	r29, 0x00	; 0
    ae64:	f3 01       	movw	r30, r6
    ae66:	ef 52       	subi	r30, 0x2F	; 47
    ae68:	fd 4f       	sbci	r31, 0xFD	; 253
    ae6a:	84 91       	lpm	r24, Z
    ae6c:	cd 52       	subi	r28, 0x2D	; 45
    ae6e:	df 4f       	sbci	r29, 0xFF	; 255
    ae70:	68 81       	ld	r22, Y
    ae72:	c3 5d       	subi	r28, 0xD3	; 211
    ae74:	d0 40       	sbci	r29, 0x00	; 0
    ae76:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    ae7a:	88 23       	and	r24, r24
    ae7c:	e1 f0       	breq	.+56     	; 0xaeb6 <draw_menu(bool)+0x1a6>
    ae7e:	f3 01       	movw	r30, r6
    ae80:	65 91       	lpm	r22, Z+
    ae82:	74 91       	lpm	r23, Z
    ae84:	ce 01       	movw	r24, r28
    ae86:	01 96       	adiw	r24, 0x01	; 1
    ae88:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    ae8c:	f6 01       	movw	r30, r12
    ae8e:	45 91       	lpm	r20, Z+
    ae90:	54 91       	lpm	r21, Z
    ae92:	f8 01       	movw	r30, r16
    ae94:	65 91       	lpm	r22, Z+
    ae96:	74 91       	lpm	r23, Z
    ae98:	4b 5f       	subi	r20, 0xFB	; 251
    ae9a:	5f 4f       	sbci	r21, 0xFF	; 255
    ae9c:	6b 5f       	subi	r22, 0xFB	; 251
    ae9e:	7f 4f       	sbci	r23, 0xFF	; 255
    aea0:	c1 2c       	mov	r12, r1
    aea2:	ee 24       	eor	r14, r14
    aea4:	ea 94       	dec	r14
    aea6:	fe 2c       	mov	r15, r14
    aea8:	10 e0       	ldi	r17, 0x00	; 0
    aeaa:	00 e0       	ldi	r16, 0x00	; 0
    aeac:	22 e0       	ldi	r18, 0x02	; 2
    aeae:	ce 01       	movw	r24, r28
    aeb0:	01 96       	adiw	r24, 0x01	; 1
    aeb2:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    aeb6:	91 2c       	mov	r9, r1
    aeb8:	c6 53       	subi	r28, 0x36	; 54
    aeba:	df 4f       	sbci	r29, 0xFF	; 255
    aebc:	18 82       	st	Y, r1
    aebe:	ca 5c       	subi	r28, 0xCA	; 202
    aec0:	d0 40       	sbci	r29, 0x00	; 0
    aec2:	93 01       	movw	r18, r6
    aec4:	23 54       	subi	r18, 0x43	; 67
    aec6:	3d 4f       	sbci	r19, 0xFD	; 253
    aec8:	c6 54       	subi	r28, 0x46	; 70
    aeca:	df 4f       	sbci	r29, 0xFF	; 255
    aecc:	39 83       	std	Y+1, r19	; 0x01
    aece:	28 83       	st	Y, r18
    aed0:	ca 5b       	subi	r28, 0xBA	; 186
    aed2:	d0 40       	sbci	r29, 0x00	; 0
    aed4:	c6 54       	subi	r28, 0x46	; 70
    aed6:	df 4f       	sbci	r29, 0xFF	; 255
    aed8:	e8 81       	ld	r30, Y
    aeda:	f9 81       	ldd	r31, Y+1	; 0x01
    aedc:	ca 5b       	subi	r28, 0xBA	; 186
    aede:	d0 40       	sbci	r29, 0x00	; 0
    aee0:	84 91       	lpm	r24, Z
    aee2:	98 16       	cp	r9, r24
    aee4:	08 f0       	brcs	.+2      	; 0xaee8 <draw_menu(bool)+0x1d8>
    aee6:	ee c0       	rjmp	.+476    	; 0xb0c4 <draw_menu(bool)+0x3b4>
    aee8:	89 2d       	mov	r24, r9
    aeea:	90 e0       	ldi	r25, 0x00	; 0
    aeec:	01 96       	adiw	r24, 0x01	; 1
    aeee:	f1 e1       	ldi	r31, 0x11	; 17
    aef0:	f8 9f       	mul	r31, r24
    aef2:	20 01       	movw	r4, r0
    aef4:	f9 9f       	mul	r31, r25
    aef6:	50 0c       	add	r5, r0
    aef8:	11 24       	eor	r1, r1
    aefa:	f3 01       	movw	r30, r6
    aefc:	e4 0d       	add	r30, r4
    aefe:	f5 1d       	adc	r31, r5
    af00:	25 91       	lpm	r18, Z+
    af02:	34 91       	lpm	r19, Z
    af04:	12 01       	movw	r2, r4
    af06:	44 e0       	ldi	r20, 0x04	; 4
    af08:	24 1a       	sub	r2, r20
    af0a:	31 08       	sbc	r3, r1
    af0c:	26 0c       	add	r2, r6
    af0e:	37 1c       	adc	r3, r7
    af10:	f1 01       	movw	r30, r2
    af12:	84 91       	lpm	r24, Z
    af14:	cf 54       	subi	r28, 0x4F	; 79
    af16:	df 4f       	sbci	r29, 0xFF	; 255
    af18:	68 81       	ld	r22, Y
    af1a:	c1 5b       	subi	r28, 0xB1	; 177
    af1c:	d0 40       	sbci	r29, 0x00	; 0
    af1e:	70 e0       	ldi	r23, 0x00	; 0
    af20:	49 2d       	mov	r20, r9
    af22:	90 e0       	ldi	r25, 0x00	; 0
    af24:	f9 01       	movw	r30, r18
    af26:	19 95       	eicall
    af28:	88 23       	and	r24, r24
    af2a:	09 f4       	brne	.+2      	; 0xaf2e <draw_menu(bool)+0x21e>
    af2c:	b4 c0       	rjmp	.+360    	; 0xb096 <draw_menu(bool)+0x386>
    af2e:	f2 01       	movw	r30, r4
    af30:	31 97       	sbiw	r30, 0x01	; 1
    af32:	e6 0d       	add	r30, r6
    af34:	f7 1d       	adc	r31, r7
    af36:	84 91       	lpm	r24, Z
    af38:	cd 52       	subi	r28, 0x2D	; 45
    af3a:	df 4f       	sbci	r29, 0xFF	; 255
    af3c:	68 81       	ld	r22, Y
    af3e:	c3 5d       	subi	r28, 0xD3	; 211
    af40:	d0 40       	sbci	r29, 0x00	; 0
    af42:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    af46:	88 23       	and	r24, r24
    af48:	09 f4       	brne	.+2      	; 0xaf4c <draw_menu(bool)+0x23c>
    af4a:	43 c0       	rjmp	.+134    	; 0xafd2 <draw_menu(bool)+0x2c2>
    af4c:	f2 01       	movw	r30, r4
    af4e:	3f 97       	sbiw	r30, 0x0f	; 15
    af50:	e6 0d       	add	r30, r6
    af52:	f7 1d       	adc	r31, r7
    af54:	65 91       	lpm	r22, Z+
    af56:	74 91       	lpm	r23, Z
    af58:	ce 01       	movw	r24, r28
    af5a:	8f 57       	subi	r24, 0x7F	; 127
    af5c:	9f 4f       	sbci	r25, 0xFF	; 255
    af5e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    af62:	19 82       	std	Y+1, r1	; 0x01
    af64:	f2 01       	movw	r30, r4
    af66:	35 97       	sbiw	r30, 0x05	; 5
    af68:	e6 0d       	add	r30, r6
    af6a:	f7 1d       	adc	r31, r7
    af6c:	e4 90       	lpm	r14, Z
    af6e:	04 91       	lpm	r16, Z
    af70:	f2 01       	movw	r30, r4
    af72:	37 97       	sbiw	r30, 0x07	; 7
    af74:	e6 0d       	add	r30, r6
    af76:	f7 1d       	adc	r31, r7
    af78:	25 91       	lpm	r18, Z+
    af7a:	34 91       	lpm	r19, Z
    af7c:	f2 01       	movw	r30, r4
    af7e:	39 97       	sbiw	r30, 0x09	; 9
    af80:	e6 0d       	add	r30, r6
    af82:	f7 1d       	adc	r31, r7
    af84:	45 91       	lpm	r20, Z+
    af86:	54 91       	lpm	r21, Z
    af88:	f2 01       	movw	r30, r4
    af8a:	3b 97       	sbiw	r30, 0x0b	; 11
    af8c:	e6 0d       	add	r30, r6
    af8e:	f7 1d       	adc	r31, r7
    af90:	65 91       	lpm	r22, Z+
    af92:	74 91       	lpm	r23, Z
    af94:	f2 01       	movw	r30, r4
    af96:	3d 97       	sbiw	r30, 0x0d	; 13
    af98:	e6 0d       	add	r30, r6
    af9a:	f7 1d       	adc	r31, r7
    af9c:	85 91       	lpm	r24, Z+
    af9e:	94 91       	lpm	r25, Z
    afa0:	c8 54       	subi	r28, 0x48	; 72
    afa2:	df 4f       	sbci	r29, 0xFF	; 255
    afa4:	e8 81       	ld	r30, Y
    afa6:	f9 81       	ldd	r31, Y+1	; 0x01
    afa8:	c8 5b       	subi	r28, 0xB8	; 184
    afaa:	d0 40       	sbci	r29, 0x00	; 0
    afac:	6e 0f       	add	r22, r30
    afae:	7f 1f       	adc	r23, r31
    afb0:	81 2c       	mov	r8, r1
    afb2:	fe 01       	movw	r30, r28
    afb4:	31 96       	adiw	r30, 0x01	; 1
    afb6:	5f 01       	movw	r10, r30
    afb8:	e0 58       	subi	r30, 0x80	; 128
    afba:	ff 4f       	sbci	r31, 0xFF	; 255
    afbc:	6f 01       	movw	r12, r30
    afbe:	ca 54       	subi	r28, 0x4A	; 74
    afc0:	df 4f       	sbci	r29, 0xFF	; 255
    afc2:	e8 81       	ld	r30, Y
    afc4:	f9 81       	ldd	r31, Y+1	; 0x01
    afc6:	c6 5b       	subi	r28, 0xB6	; 182
    afc8:	d0 40       	sbci	r29, 0x00	; 0
    afca:	8e 0f       	add	r24, r30
    afcc:	9f 1f       	adc	r25, r31
    afce:	0e 94 ef 52 	call	0xa5de	; 0xa5de <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    afd2:	ce 53       	subi	r28, 0x3E	; 62
    afd4:	df 4f       	sbci	r29, 0xFF	; 255
    afd6:	28 81       	ld	r18, Y
    afd8:	39 81       	ldd	r19, Y+1	; 0x01
    afda:	c2 5c       	subi	r28, 0xC2	; 194
    afdc:	d0 40       	sbci	r29, 0x00	; 0
    afde:	23 2b       	or	r18, r19
    afe0:	09 f4       	brne	.+2      	; 0xafe4 <draw_menu(bool)+0x2d4>
    afe2:	59 c0       	rjmp	.+178    	; 0xb096 <draw_menu(bool)+0x386>
    afe4:	cc 53       	subi	r28, 0x3C	; 60
    afe6:	df 4f       	sbci	r29, 0xFF	; 255
    afe8:	48 81       	ld	r20, Y
    afea:	59 81       	ldd	r21, Y+1	; 0x01
    afec:	c4 5c       	subi	r28, 0xC4	; 196
    afee:	d0 40       	sbci	r29, 0x00	; 0
    aff0:	45 2b       	or	r20, r21
    aff2:	09 f4       	brne	.+2      	; 0xaff6 <draw_menu(bool)+0x2e6>
    aff4:	50 c0       	rjmp	.+160    	; 0xb096 <draw_menu(bool)+0x386>
    aff6:	f2 01       	movw	r30, r4
    aff8:	37 97       	sbiw	r30, 0x07	; 7
    affa:	e6 0d       	add	r30, r6
    affc:	f7 1d       	adc	r31, r7
    affe:	25 91       	lpm	r18, Z+
    b000:	34 91       	lpm	r19, Z
    b002:	f2 01       	movw	r30, r4
    b004:	39 97       	sbiw	r30, 0x09	; 9
    b006:	e6 0d       	add	r30, r6
    b008:	f7 1d       	adc	r31, r7
    b00a:	45 91       	lpm	r20, Z+
    b00c:	54 91       	lpm	r21, Z
    b00e:	f2 01       	movw	r30, r4
    b010:	3b 97       	sbiw	r30, 0x0b	; 11
    b012:	e6 0d       	add	r30, r6
    b014:	f7 1d       	adc	r31, r7
    b016:	65 91       	lpm	r22, Z+
    b018:	74 91       	lpm	r23, Z
    b01a:	f2 01       	movw	r30, r4
    b01c:	3d 97       	sbiw	r30, 0x0d	; 13
    b01e:	e6 0d       	add	r30, r6
    b020:	f7 1d       	adc	r31, r7
    b022:	85 91       	lpm	r24, Z+
    b024:	94 91       	lpm	r25, Z
    b026:	c8 54       	subi	r28, 0x48	; 72
    b028:	df 4f       	sbci	r29, 0xFF	; 255
    b02a:	e8 81       	ld	r30, Y
    b02c:	f9 81       	ldd	r31, Y+1	; 0x01
    b02e:	c8 5b       	subi	r28, 0xB8	; 184
    b030:	d0 40       	sbci	r29, 0x00	; 0
    b032:	6e 0f       	add	r22, r30
    b034:	7f 1f       	adc	r23, r31
    b036:	cc 53       	subi	r28, 0x3C	; 60
    b038:	df 4f       	sbci	r29, 0xFF	; 255
    b03a:	e8 80       	ld	r14, Y
    b03c:	f9 80       	ldd	r15, Y+1	; 0x01
    b03e:	c4 5c       	subi	r28, 0xC4	; 196
    b040:	d0 40       	sbci	r29, 0x00	; 0
    b042:	ce 53       	subi	r28, 0x3E	; 62
    b044:	df 4f       	sbci	r29, 0xFF	; 255
    b046:	08 81       	ld	r16, Y
    b048:	19 81       	ldd	r17, Y+1	; 0x01
    b04a:	c2 5c       	subi	r28, 0xC2	; 194
    b04c:	d0 40       	sbci	r29, 0x00	; 0
    b04e:	ca 54       	subi	r28, 0x4A	; 74
    b050:	df 4f       	sbci	r29, 0xFF	; 255
    b052:	e8 81       	ld	r30, Y
    b054:	f9 81       	ldd	r31, Y+1	; 0x01
    b056:	c6 5b       	subi	r28, 0xB6	; 182
    b058:	d0 40       	sbci	r29, 0x00	; 0
    b05a:	8e 0f       	add	r24, r30
    b05c:	9f 1f       	adc	r25, r31
    b05e:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b062:	18 2f       	mov	r17, r24
    b064:	88 23       	and	r24, r24
    b066:	b9 f0       	breq	.+46     	; 0xb096 <draw_menu(bool)+0x386>
    b068:	f2 01       	movw	r30, r4
    b06a:	33 97       	sbiw	r30, 0x03	; 3
    b06c:	e6 0d       	add	r30, r6
    b06e:	f7 1d       	adc	r31, r7
    b070:	25 91       	lpm	r18, Z+
    b072:	34 91       	lpm	r19, Z
    b074:	f1 01       	movw	r30, r2
    b076:	84 91       	lpm	r24, Z
    b078:	cf 54       	subi	r28, 0x4F	; 79
    b07a:	df 4f       	sbci	r29, 0xFF	; 255
    b07c:	68 81       	ld	r22, Y
    b07e:	c1 5b       	subi	r28, 0xB1	; 177
    b080:	d0 40       	sbci	r29, 0x00	; 0
    b082:	70 e0       	ldi	r23, 0x00	; 0
    b084:	49 2d       	mov	r20, r9
    b086:	90 e0       	ldi	r25, 0x00	; 0
    b088:	f9 01       	movw	r30, r18
    b08a:	19 95       	eicall
    b08c:	c6 53       	subi	r28, 0x36	; 54
    b08e:	df 4f       	sbci	r29, 0xFF	; 255
    b090:	18 83       	st	Y, r17
    b092:	ca 5c       	subi	r28, 0xCA	; 202
    b094:	d0 40       	sbci	r29, 0x00	; 0
    b096:	93 94       	inc	r9
    b098:	1d cf       	rjmp	.-454    	; 0xaed4 <draw_menu(bool)+0x1c4>
    b09a:	cc 53       	subi	r28, 0x3C	; 60
    b09c:	df 4f       	sbci	r29, 0xFF	; 255
    b09e:	19 82       	std	Y+1, r1	; 0x01
    b0a0:	18 82       	st	Y, r1
    b0a2:	c4 5c       	subi	r28, 0xC4	; 196
    b0a4:	d0 40       	sbci	r29, 0x00	; 0
    b0a6:	ce 53       	subi	r28, 0x3E	; 62
    b0a8:	df 4f       	sbci	r29, 0xFF	; 255
    b0aa:	19 82       	std	Y+1, r1	; 0x01
    b0ac:	18 82       	st	Y, r1
    b0ae:	c2 5c       	subi	r28, 0xC2	; 194
    b0b0:	d0 40       	sbci	r29, 0x00	; 0
    b0b2:	71 ce       	rjmp	.-798    	; 0xad96 <draw_menu(bool)+0x86>
    b0b4:	68 94       	set
    b0b6:	91 f8       	bld	r9, 1
    b0b8:	b8 ce       	rjmp	.-656    	; 0xae2a <draw_menu(bool)+0x11a>
    b0ba:	89 2d       	mov	r24, r9
    b0bc:	84 60       	ori	r24, 0x04	; 4
    b0be:	ca ce       	rjmp	.-620    	; 0xae54 <draw_menu(bool)+0x144>
    b0c0:	88 60       	ori	r24, 0x08	; 8
    b0c2:	cb ce       	rjmp	.-618    	; 0xae5a <draw_menu(bool)+0x14a>
    b0c4:	c6 53       	subi	r28, 0x36	; 54
    b0c6:	df 4f       	sbci	r29, 0xFF	; 255
    b0c8:	f8 81       	ld	r31, Y
    b0ca:	ca 5c       	subi	r28, 0xCA	; 202
    b0cc:	d0 40       	sbci	r29, 0x00	; 0
    b0ce:	f1 11       	cpse	r31, r1
    b0d0:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <draw_menu(bool)+0x2210>
    b0d4:	91 2c       	mov	r9, r1
    b0d6:	93 01       	movw	r18, r6
    b0d8:	22 54       	subi	r18, 0x42	; 66
    b0da:	3d 4f       	sbci	r19, 0xFD	; 253
    b0dc:	c0 54       	subi	r28, 0x40	; 64
    b0de:	df 4f       	sbci	r29, 0xFF	; 255
    b0e0:	39 83       	std	Y+1, r19	; 0x01
    b0e2:	28 83       	st	Y, r18
    b0e4:	c0 5c       	subi	r28, 0xC0	; 192
    b0e6:	d0 40       	sbci	r29, 0x00	; 0
    b0e8:	1e 01       	movw	r2, r28
    b0ea:	31 e8       	ldi	r19, 0x81	; 129
    b0ec:	23 0e       	add	r2, r19
    b0ee:	31 1c       	adc	r3, r1
    b0f0:	c0 54       	subi	r28, 0x40	; 64
    b0f2:	df 4f       	sbci	r29, 0xFF	; 255
    b0f4:	e8 81       	ld	r30, Y
    b0f6:	f9 81       	ldd	r31, Y+1	; 0x01
    b0f8:	c0 5c       	subi	r28, 0xC0	; 192
    b0fa:	d0 40       	sbci	r29, 0x00	; 0
    b0fc:	84 91       	lpm	r24, Z
    b0fe:	98 16       	cp	r9, r24
    b100:	08 f0       	brcs	.+2      	; 0xb104 <draw_menu(bool)+0x3f4>
    b102:	1c c1       	rjmp	.+568    	; 0xb33c <draw_menu(bool)+0x62c>
    b104:	f7 e1       	ldi	r31, 0x17	; 23
    b106:	9f 9e       	mul	r9, r31
    b108:	20 01       	movw	r4, r0
    b10a:	11 24       	eor	r1, r1
    b10c:	f2 01       	movw	r30, r4
    b10e:	ef 53       	subi	r30, 0x3F	; 63
    b110:	ff 4f       	sbci	r31, 0xFF	; 255
    b112:	e6 0d       	add	r30, r6
    b114:	f7 1d       	adc	r31, r7
    b116:	25 91       	lpm	r18, Z+
    b118:	34 91       	lpm	r19, Z
    b11a:	c2 01       	movw	r24, r4
    b11c:	85 54       	subi	r24, 0x45	; 69
    b11e:	9f 4f       	sbci	r25, 0xFF	; 255
    b120:	a3 01       	movw	r20, r6
    b122:	48 0f       	add	r20, r24
    b124:	59 1f       	adc	r21, r25
    b126:	c6 54       	subi	r28, 0x46	; 70
    b128:	df 4f       	sbci	r29, 0xFF	; 255
    b12a:	59 83       	std	Y+1, r21	; 0x01
    b12c:	48 83       	st	Y, r20
    b12e:	ca 5b       	subi	r28, 0xBA	; 186
    b130:	d0 40       	sbci	r29, 0x00	; 0
    b132:	fa 01       	movw	r30, r20
    b134:	84 91       	lpm	r24, Z
    b136:	cf 54       	subi	r28, 0x4F	; 79
    b138:	df 4f       	sbci	r29, 0xFF	; 255
    b13a:	68 81       	ld	r22, Y
    b13c:	c1 5b       	subi	r28, 0xB1	; 177
    b13e:	d0 40       	sbci	r29, 0x00	; 0
    b140:	70 e0       	ldi	r23, 0x00	; 0
    b142:	49 2d       	mov	r20, r9
    b144:	90 e0       	ldi	r25, 0x00	; 0
    b146:	f9 01       	movw	r30, r18
    b148:	19 95       	eicall
    b14a:	88 23       	and	r24, r24
    b14c:	09 f4       	brne	.+2      	; 0xb150 <draw_menu(bool)+0x440>
    b14e:	f4 c0       	rjmp	.+488    	; 0xb338 <draw_menu(bool)+0x628>
    b150:	f2 01       	movw	r30, r4
    b152:	e0 54       	subi	r30, 0x40	; 64
    b154:	ff 4f       	sbci	r31, 0xFF	; 255
    b156:	e6 0d       	add	r30, r6
    b158:	f7 1d       	adc	r31, r7
    b15a:	84 91       	lpm	r24, Z
    b15c:	cd 52       	subi	r28, 0x2D	; 45
    b15e:	df 4f       	sbci	r29, 0xFF	; 255
    b160:	68 81       	ld	r22, Y
    b162:	c3 5d       	subi	r28, 0xD3	; 211
    b164:	d0 40       	sbci	r29, 0x00	; 0
    b166:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    b16a:	88 23       	and	r24, r24
    b16c:	09 f4       	brne	.+2      	; 0xb170 <draw_menu(bool)+0x460>
    b16e:	78 c0       	rjmp	.+240    	; 0xb260 <draw_menu(bool)+0x550>
    b170:	f2 01       	movw	r30, r4
    b172:	e4 55       	subi	r30, 0x54	; 84
    b174:	ff 4f       	sbci	r31, 0xFF	; 255
    b176:	e6 0d       	add	r30, r6
    b178:	f7 1d       	adc	r31, r7
    b17a:	65 91       	lpm	r22, Z+
    b17c:	74 91       	lpm	r23, Z
    b17e:	c1 01       	movw	r24, r2
    b180:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    b184:	f2 01       	movw	r30, r4
    b186:	e2 54       	subi	r30, 0x42	; 66
    b188:	ff 4f       	sbci	r31, 0xFF	; 255
    b18a:	e6 0d       	add	r30, r6
    b18c:	f7 1d       	adc	r31, r7
    b18e:	25 91       	lpm	r18, Z+
    b190:	34 91       	lpm	r19, Z
    b192:	c6 54       	subi	r28, 0x46	; 70
    b194:	df 4f       	sbci	r29, 0xFF	; 255
    b196:	e8 81       	ld	r30, Y
    b198:	f9 81       	ldd	r31, Y+1	; 0x01
    b19a:	ca 5b       	subi	r28, 0xBA	; 186
    b19c:	d0 40       	sbci	r29, 0x00	; 0
    b19e:	84 91       	lpm	r24, Z
    b1a0:	cf 54       	subi	r28, 0x4F	; 79
    b1a2:	df 4f       	sbci	r29, 0xFF	; 255
    b1a4:	68 81       	ld	r22, Y
    b1a6:	c1 5b       	subi	r28, 0xB1	; 177
    b1a8:	d0 40       	sbci	r29, 0x00	; 0
    b1aa:	70 e0       	ldi	r23, 0x00	; 0
    b1ac:	49 2d       	mov	r20, r9
    b1ae:	90 e0       	ldi	r25, 0x00	; 0
    b1b0:	f9 01       	movw	r30, r18
    b1b2:	19 95       	eicall
    b1b4:	19 82       	std	Y+1, r1	; 0x01
    b1b6:	f2 01       	movw	r30, r4
    b1b8:	e7 54       	subi	r30, 0x47	; 71
    b1ba:	ff 4f       	sbci	r31, 0xFF	; 255
    b1bc:	e6 0d       	add	r30, r6
    b1be:	f7 1d       	adc	r31, r7
    b1c0:	a5 90       	lpm	r10, Z+
    b1c2:	b4 90       	lpm	r11, Z
    b1c4:	f2 01       	movw	r30, r4
    b1c6:	e9 54       	subi	r30, 0x49	; 73
    b1c8:	ff 4f       	sbci	r31, 0xFF	; 255
    b1ca:	e6 0d       	add	r30, r6
    b1cc:	f7 1d       	adc	r31, r7
    b1ce:	c5 90       	lpm	r12, Z+
    b1d0:	d4 90       	lpm	r13, Z
    b1d2:	82 01       	movw	r16, r4
    b1d4:	0a 54       	subi	r16, 0x4A	; 74
    b1d6:	1f 4f       	sbci	r17, 0xFF	; 255
    b1d8:	06 0d       	add	r16, r6
    b1da:	17 1d       	adc	r17, r7
    b1dc:	f8 01       	movw	r30, r16
    b1de:	04 91       	lpm	r16, Z
    b1e0:	f2 01       	movw	r30, r4
    b1e2:	ec 54       	subi	r30, 0x4C	; 76
    b1e4:	ff 4f       	sbci	r31, 0xFF	; 255
    b1e6:	e6 0d       	add	r30, r6
    b1e8:	f7 1d       	adc	r31, r7
    b1ea:	25 91       	lpm	r18, Z+
    b1ec:	34 91       	lpm	r19, Z
    b1ee:	f2 01       	movw	r30, r4
    b1f0:	ee 54       	subi	r30, 0x4E	; 78
    b1f2:	ff 4f       	sbci	r31, 0xFF	; 255
    b1f4:	e6 0d       	add	r30, r6
    b1f6:	f7 1d       	adc	r31, r7
    b1f8:	45 91       	lpm	r20, Z+
    b1fa:	54 91       	lpm	r21, Z
    b1fc:	f2 01       	movw	r30, r4
    b1fe:	e0 55       	subi	r30, 0x50	; 80
    b200:	ff 4f       	sbci	r31, 0xFF	; 255
    b202:	e6 0d       	add	r30, r6
    b204:	f7 1d       	adc	r31, r7
    b206:	65 91       	lpm	r22, Z+
    b208:	74 91       	lpm	r23, Z
    b20a:	f2 01       	movw	r30, r4
    b20c:	e2 55       	subi	r30, 0x52	; 82
    b20e:	ff 4f       	sbci	r31, 0xFF	; 255
    b210:	e6 0d       	add	r30, r6
    b212:	f7 1d       	adc	r31, r7
    b214:	a5 91       	lpm	r26, Z+
    b216:	b4 91       	lpm	r27, Z
    b218:	88 24       	eor	r8, r8
    b21a:	83 94       	inc	r8
    b21c:	81 11       	cpse	r24, r1
    b21e:	01 c0       	rjmp	.+2      	; 0xb222 <draw_menu(bool)+0x512>
    b220:	81 2c       	mov	r8, r1
    b222:	c8 54       	subi	r28, 0x48	; 72
    b224:	df 4f       	sbci	r29, 0xFF	; 255
    b226:	88 81       	ld	r24, Y
    b228:	99 81       	ldd	r25, Y+1	; 0x01
    b22a:	c8 5b       	subi	r28, 0xB8	; 184
    b22c:	d0 40       	sbci	r29, 0x00	; 0
    b22e:	68 0f       	add	r22, r24
    b230:	79 1f       	adc	r23, r25
    b232:	e1 e0       	ldi	r30, 0x01	; 1
    b234:	f0 e0       	ldi	r31, 0x00	; 0
    b236:	ec 0f       	add	r30, r28
    b238:	fd 1f       	adc	r31, r29
    b23a:	ff 93       	push	r31
    b23c:	ef 93       	push	r30
    b23e:	3f 92       	push	r3
    b240:	2f 92       	push	r2
    b242:	e1 2c       	mov	r14, r1
    b244:	ca 54       	subi	r28, 0x4A	; 74
    b246:	df 4f       	sbci	r29, 0xFF	; 255
    b248:	88 81       	ld	r24, Y
    b24a:	99 81       	ldd	r25, Y+1	; 0x01
    b24c:	c6 5b       	subi	r28, 0xB6	; 182
    b24e:	d0 40       	sbci	r29, 0x00	; 0
    b250:	8a 0f       	add	r24, r26
    b252:	9b 1f       	adc	r25, r27
    b254:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    b258:	0f 90       	pop	r0
    b25a:	0f 90       	pop	r0
    b25c:	0f 90       	pop	r0
    b25e:	0f 90       	pop	r0
    b260:	ce 53       	subi	r28, 0x3E	; 62
    b262:	df 4f       	sbci	r29, 0xFF	; 255
    b264:	28 81       	ld	r18, Y
    b266:	39 81       	ldd	r19, Y+1	; 0x01
    b268:	c2 5c       	subi	r28, 0xC2	; 194
    b26a:	d0 40       	sbci	r29, 0x00	; 0
    b26c:	23 2b       	or	r18, r19
    b26e:	09 f4       	brne	.+2      	; 0xb272 <draw_menu(bool)+0x562>
    b270:	63 c0       	rjmp	.+198    	; 0xb338 <draw_menu(bool)+0x628>
    b272:	cc 53       	subi	r28, 0x3C	; 60
    b274:	df 4f       	sbci	r29, 0xFF	; 255
    b276:	48 81       	ld	r20, Y
    b278:	59 81       	ldd	r21, Y+1	; 0x01
    b27a:	c4 5c       	subi	r28, 0xC4	; 196
    b27c:	d0 40       	sbci	r29, 0x00	; 0
    b27e:	45 2b       	or	r20, r21
    b280:	09 f4       	brne	.+2      	; 0xb284 <draw_menu(bool)+0x574>
    b282:	5a c0       	rjmp	.+180    	; 0xb338 <draw_menu(bool)+0x628>
    b284:	f2 01       	movw	r30, r4
    b286:	ec 54       	subi	r30, 0x4C	; 76
    b288:	ff 4f       	sbci	r31, 0xFF	; 255
    b28a:	e6 0d       	add	r30, r6
    b28c:	f7 1d       	adc	r31, r7
    b28e:	25 91       	lpm	r18, Z+
    b290:	34 91       	lpm	r19, Z
    b292:	f2 01       	movw	r30, r4
    b294:	ee 54       	subi	r30, 0x4E	; 78
    b296:	ff 4f       	sbci	r31, 0xFF	; 255
    b298:	e6 0d       	add	r30, r6
    b29a:	f7 1d       	adc	r31, r7
    b29c:	45 91       	lpm	r20, Z+
    b29e:	54 91       	lpm	r21, Z
    b2a0:	f2 01       	movw	r30, r4
    b2a2:	e0 55       	subi	r30, 0x50	; 80
    b2a4:	ff 4f       	sbci	r31, 0xFF	; 255
    b2a6:	e6 0d       	add	r30, r6
    b2a8:	f7 1d       	adc	r31, r7
    b2aa:	65 91       	lpm	r22, Z+
    b2ac:	74 91       	lpm	r23, Z
    b2ae:	f2 01       	movw	r30, r4
    b2b0:	e2 55       	subi	r30, 0x52	; 82
    b2b2:	ff 4f       	sbci	r31, 0xFF	; 255
    b2b4:	e6 0d       	add	r30, r6
    b2b6:	f7 1d       	adc	r31, r7
    b2b8:	85 91       	lpm	r24, Z+
    b2ba:	94 91       	lpm	r25, Z
    b2bc:	c8 54       	subi	r28, 0x48	; 72
    b2be:	df 4f       	sbci	r29, 0xFF	; 255
    b2c0:	e8 81       	ld	r30, Y
    b2c2:	f9 81       	ldd	r31, Y+1	; 0x01
    b2c4:	c8 5b       	subi	r28, 0xB8	; 184
    b2c6:	d0 40       	sbci	r29, 0x00	; 0
    b2c8:	6e 0f       	add	r22, r30
    b2ca:	7f 1f       	adc	r23, r31
    b2cc:	cc 53       	subi	r28, 0x3C	; 60
    b2ce:	df 4f       	sbci	r29, 0xFF	; 255
    b2d0:	e8 80       	ld	r14, Y
    b2d2:	f9 80       	ldd	r15, Y+1	; 0x01
    b2d4:	c4 5c       	subi	r28, 0xC4	; 196
    b2d6:	d0 40       	sbci	r29, 0x00	; 0
    b2d8:	ce 53       	subi	r28, 0x3E	; 62
    b2da:	df 4f       	sbci	r29, 0xFF	; 255
    b2dc:	08 81       	ld	r16, Y
    b2de:	19 81       	ldd	r17, Y+1	; 0x01
    b2e0:	c2 5c       	subi	r28, 0xC2	; 194
    b2e2:	d0 40       	sbci	r29, 0x00	; 0
    b2e4:	ca 54       	subi	r28, 0x4A	; 74
    b2e6:	df 4f       	sbci	r29, 0xFF	; 255
    b2e8:	e8 81       	ld	r30, Y
    b2ea:	f9 81       	ldd	r31, Y+1	; 0x01
    b2ec:	c6 5b       	subi	r28, 0xB6	; 182
    b2ee:	d0 40       	sbci	r29, 0x00	; 0
    b2f0:	8e 0f       	add	r24, r30
    b2f2:	9f 1f       	adc	r25, r31
    b2f4:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b2f8:	18 2f       	mov	r17, r24
    b2fa:	88 23       	and	r24, r24
    b2fc:	e9 f0       	breq	.+58     	; 0xb338 <draw_menu(bool)+0x628>
    b2fe:	f2 01       	movw	r30, r4
    b300:	e4 54       	subi	r30, 0x44	; 68
    b302:	ff 4f       	sbci	r31, 0xFF	; 255
    b304:	e6 0d       	add	r30, r6
    b306:	f7 1d       	adc	r31, r7
    b308:	25 91       	lpm	r18, Z+
    b30a:	34 91       	lpm	r19, Z
    b30c:	c6 54       	subi	r28, 0x46	; 70
    b30e:	df 4f       	sbci	r29, 0xFF	; 255
    b310:	e8 81       	ld	r30, Y
    b312:	f9 81       	ldd	r31, Y+1	; 0x01
    b314:	ca 5b       	subi	r28, 0xBA	; 186
    b316:	d0 40       	sbci	r29, 0x00	; 0
    b318:	84 91       	lpm	r24, Z
    b31a:	cf 54       	subi	r28, 0x4F	; 79
    b31c:	df 4f       	sbci	r29, 0xFF	; 255
    b31e:	68 81       	ld	r22, Y
    b320:	c1 5b       	subi	r28, 0xB1	; 177
    b322:	d0 40       	sbci	r29, 0x00	; 0
    b324:	70 e0       	ldi	r23, 0x00	; 0
    b326:	49 2d       	mov	r20, r9
    b328:	90 e0       	ldi	r25, 0x00	; 0
    b32a:	f9 01       	movw	r30, r18
    b32c:	19 95       	eicall
    b32e:	c6 53       	subi	r28, 0x36	; 54
    b330:	df 4f       	sbci	r29, 0xFF	; 255
    b332:	18 83       	st	Y, r17
    b334:	ca 5c       	subi	r28, 0xCA	; 202
    b336:	d0 40       	sbci	r29, 0x00	; 0
    b338:	93 94       	inc	r9
    b33a:	da ce       	rjmp	.-588    	; 0xb0f0 <draw_menu(bool)+0x3e0>
    b33c:	c6 53       	subi	r28, 0x36	; 54
    b33e:	df 4f       	sbci	r29, 0xFF	; 255
    b340:	f8 81       	ld	r31, Y
    b342:	ca 5c       	subi	r28, 0xCA	; 202
    b344:	d0 40       	sbci	r29, 0x00	; 0
    b346:	f1 11       	cpse	r31, r1
    b348:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <draw_menu(bool)+0x2210>
    b34c:	91 2c       	mov	r9, r1
    b34e:	23 01       	movw	r4, r6
    b350:	21 e4       	ldi	r18, 0x41	; 65
    b352:	42 1a       	sub	r4, r18
    b354:	2d ef       	ldi	r18, 0xFD	; 253
    b356:	52 0a       	sbc	r5, r18
    b358:	92 e1       	ldi	r25, 0x12	; 18
    b35a:	89 2e       	mov	r8, r25
    b35c:	f2 01       	movw	r30, r4
    b35e:	84 91       	lpm	r24, Z
    b360:	98 16       	cp	r9, r24
    b362:	08 f0       	brcs	.+2      	; 0xb366 <draw_menu(bool)+0x656>
    b364:	cc c0       	rjmp	.+408    	; 0xb4fe <draw_menu(bool)+0x7ee>
    b366:	98 9c       	mul	r9, r8
    b368:	50 01       	movw	r10, r0
    b36a:	11 24       	eor	r1, r1
    b36c:	f5 01       	movw	r30, r10
    b36e:	e3 5d       	subi	r30, 0xD3	; 211
    b370:	fe 4f       	sbci	r31, 0xFE	; 254
    b372:	e6 0d       	add	r30, r6
    b374:	f7 1d       	adc	r31, r7
    b376:	25 91       	lpm	r18, Z+
    b378:	34 91       	lpm	r19, Z
    b37a:	85 01       	movw	r16, r10
    b37c:	0d 5d       	subi	r16, 0xDD	; 221
    b37e:	1e 4f       	sbci	r17, 0xFE	; 254
    b380:	06 0d       	add	r16, r6
    b382:	17 1d       	adc	r17, r7
    b384:	f8 01       	movw	r30, r16
    b386:	84 91       	lpm	r24, Z
    b388:	cf 54       	subi	r28, 0x4F	; 79
    b38a:	df 4f       	sbci	r29, 0xFF	; 255
    b38c:	68 81       	ld	r22, Y
    b38e:	c1 5b       	subi	r28, 0xB1	; 177
    b390:	d0 40       	sbci	r29, 0x00	; 0
    b392:	70 e0       	ldi	r23, 0x00	; 0
    b394:	49 2d       	mov	r20, r9
    b396:	90 e0       	ldi	r25, 0x00	; 0
    b398:	f9 01       	movw	r30, r18
    b39a:	19 95       	eicall
    b39c:	88 23       	and	r24, r24
    b39e:	09 f4       	brne	.+2      	; 0xb3a2 <draw_menu(bool)+0x692>
    b3a0:	ac c0       	rjmp	.+344    	; 0xb4fa <draw_menu(bool)+0x7ea>
    b3a2:	f5 01       	movw	r30, r10
    b3a4:	e6 5d       	subi	r30, 0xD6	; 214
    b3a6:	fe 4f       	sbci	r31, 0xFE	; 254
    b3a8:	e6 0d       	add	r30, r6
    b3aa:	f7 1d       	adc	r31, r7
    b3ac:	84 91       	lpm	r24, Z
    b3ae:	cd 52       	subi	r28, 0x2D	; 45
    b3b0:	df 4f       	sbci	r29, 0xFF	; 255
    b3b2:	68 81       	ld	r22, Y
    b3b4:	c3 5d       	subi	r28, 0xD3	; 211
    b3b6:	d0 40       	sbci	r29, 0x00	; 0
    b3b8:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    b3bc:	88 23       	and	r24, r24
    b3be:	09 f4       	brne	.+2      	; 0xb3c2 <draw_menu(bool)+0x6b2>
    b3c0:	4a c0       	rjmp	.+148    	; 0xb456 <draw_menu(bool)+0x746>
    b3c2:	f5 01       	movw	r30, r10
    b3c4:	e1 5d       	subi	r30, 0xD1	; 209
    b3c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b3c8:	e6 0d       	add	r30, r6
    b3ca:	f7 1d       	adc	r31, r7
    b3cc:	65 91       	lpm	r22, Z+
    b3ce:	74 91       	lpm	r23, Z
    b3d0:	ce 01       	movw	r24, r28
    b3d2:	01 96       	adiw	r24, 0x01	; 1
    b3d4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    b3d8:	f5 01       	movw	r30, r10
    b3da:	ec 5d       	subi	r30, 0xDC	; 220
    b3dc:	fe 4f       	sbci	r31, 0xFE	; 254
    b3de:	e6 0d       	add	r30, r6
    b3e0:	f7 1d       	adc	r31, r7
    b3e2:	a5 91       	lpm	r26, Z+
    b3e4:	b4 91       	lpm	r27, Z
    b3e6:	f8 01       	movw	r30, r16
    b3e8:	04 91       	lpm	r16, Z
    b3ea:	f5 01       	movw	r30, r10
    b3ec:	e8 5d       	subi	r30, 0xD8	; 216
    b3ee:	fe 4f       	sbci	r31, 0xFE	; 254
    b3f0:	e6 0d       	add	r30, r6
    b3f2:	f7 1d       	adc	r31, r7
    b3f4:	25 91       	lpm	r18, Z+
    b3f6:	34 91       	lpm	r19, Z
    b3f8:	f5 01       	movw	r30, r10
    b3fa:	ea 5d       	subi	r30, 0xDA	; 218
    b3fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b3fe:	e6 0d       	add	r30, r6
    b400:	f7 1d       	adc	r31, r7
    b402:	45 91       	lpm	r20, Z+
    b404:	54 91       	lpm	r21, Z
    b406:	f5 01       	movw	r30, r10
    b408:	ef 5d       	subi	r30, 0xDF	; 223
    b40a:	fe 4f       	sbci	r31, 0xFE	; 254
    b40c:	e6 0d       	add	r30, r6
    b40e:	f7 1d       	adc	r31, r7
    b410:	65 91       	lpm	r22, Z+
    b412:	74 91       	lpm	r23, Z
    b414:	f5 01       	movw	r30, r10
    b416:	e1 5e       	subi	r30, 0xE1	; 225
    b418:	fe 4f       	sbci	r31, 0xFE	; 254
    b41a:	e6 0d       	add	r30, r6
    b41c:	f7 1d       	adc	r31, r7
    b41e:	85 91       	lpm	r24, Z+
    b420:	94 91       	lpm	r25, Z
    b422:	c8 54       	subi	r28, 0x48	; 72
    b424:	df 4f       	sbci	r29, 0xFF	; 255
    b426:	e8 81       	ld	r30, Y
    b428:	f9 81       	ldd	r31, Y+1	; 0x01
    b42a:	c8 5b       	subi	r28, 0xB8	; 184
    b42c:	d0 40       	sbci	r29, 0x00	; 0
    b42e:	6e 0f       	add	r22, r30
    b430:	7f 1f       	adc	r23, r31
    b432:	fe 01       	movw	r30, r28
    b434:	31 96       	adiw	r30, 0x01	; 1
    b436:	6f 01       	movw	r12, r30
    b438:	cf 54       	subi	r28, 0x4F	; 79
    b43a:	df 4f       	sbci	r29, 0xFF	; 255
    b43c:	e8 80       	ld	r14, Y
    b43e:	c1 5b       	subi	r28, 0xB1	; 177
    b440:	d0 40       	sbci	r29, 0x00	; 0
    b442:	ca 54       	subi	r28, 0x4A	; 74
    b444:	df 4f       	sbci	r29, 0xFF	; 255
    b446:	e8 81       	ld	r30, Y
    b448:	f9 81       	ldd	r31, Y+1	; 0x01
    b44a:	c6 5b       	subi	r28, 0xB6	; 182
    b44c:	d0 40       	sbci	r29, 0x00	; 0
    b44e:	8e 0f       	add	r24, r30
    b450:	9f 1f       	adc	r25, r31
    b452:	fd 01       	movw	r30, r26
    b454:	19 95       	eicall
    b456:	ce 53       	subi	r28, 0x3E	; 62
    b458:	df 4f       	sbci	r29, 0xFF	; 255
    b45a:	28 81       	ld	r18, Y
    b45c:	39 81       	ldd	r19, Y+1	; 0x01
    b45e:	c2 5c       	subi	r28, 0xC2	; 194
    b460:	d0 40       	sbci	r29, 0x00	; 0
    b462:	23 2b       	or	r18, r19
    b464:	09 f4       	brne	.+2      	; 0xb468 <draw_menu(bool)+0x758>
    b466:	49 c0       	rjmp	.+146    	; 0xb4fa <draw_menu(bool)+0x7ea>
    b468:	cc 53       	subi	r28, 0x3C	; 60
    b46a:	df 4f       	sbci	r29, 0xFF	; 255
    b46c:	48 81       	ld	r20, Y
    b46e:	59 81       	ldd	r21, Y+1	; 0x01
    b470:	c4 5c       	subi	r28, 0xC4	; 196
    b472:	d0 40       	sbci	r29, 0x00	; 0
    b474:	45 2b       	or	r20, r21
    b476:	09 f4       	brne	.+2      	; 0xb47a <draw_menu(bool)+0x76a>
    b478:	40 c0       	rjmp	.+128    	; 0xb4fa <draw_menu(bool)+0x7ea>
    b47a:	f5 01       	movw	r30, r10
    b47c:	e8 5d       	subi	r30, 0xD8	; 216
    b47e:	fe 4f       	sbci	r31, 0xFE	; 254
    b480:	e6 0d       	add	r30, r6
    b482:	f7 1d       	adc	r31, r7
    b484:	25 91       	lpm	r18, Z+
    b486:	34 91       	lpm	r19, Z
    b488:	f5 01       	movw	r30, r10
    b48a:	ea 5d       	subi	r30, 0xDA	; 218
    b48c:	fe 4f       	sbci	r31, 0xFE	; 254
    b48e:	e6 0d       	add	r30, r6
    b490:	f7 1d       	adc	r31, r7
    b492:	45 91       	lpm	r20, Z+
    b494:	54 91       	lpm	r21, Z
    b496:	f5 01       	movw	r30, r10
    b498:	ef 5d       	subi	r30, 0xDF	; 223
    b49a:	fe 4f       	sbci	r31, 0xFE	; 254
    b49c:	e6 0d       	add	r30, r6
    b49e:	f7 1d       	adc	r31, r7
    b4a0:	65 91       	lpm	r22, Z+
    b4a2:	74 91       	lpm	r23, Z
    b4a4:	f5 01       	movw	r30, r10
    b4a6:	e1 5e       	subi	r30, 0xE1	; 225
    b4a8:	fe 4f       	sbci	r31, 0xFE	; 254
    b4aa:	e6 0d       	add	r30, r6
    b4ac:	f7 1d       	adc	r31, r7
    b4ae:	85 91       	lpm	r24, Z+
    b4b0:	94 91       	lpm	r25, Z
    b4b2:	c8 54       	subi	r28, 0x48	; 72
    b4b4:	df 4f       	sbci	r29, 0xFF	; 255
    b4b6:	e8 81       	ld	r30, Y
    b4b8:	f9 81       	ldd	r31, Y+1	; 0x01
    b4ba:	c8 5b       	subi	r28, 0xB8	; 184
    b4bc:	d0 40       	sbci	r29, 0x00	; 0
    b4be:	6e 0f       	add	r22, r30
    b4c0:	7f 1f       	adc	r23, r31
    b4c2:	cc 53       	subi	r28, 0x3C	; 60
    b4c4:	df 4f       	sbci	r29, 0xFF	; 255
    b4c6:	e8 80       	ld	r14, Y
    b4c8:	f9 80       	ldd	r15, Y+1	; 0x01
    b4ca:	c4 5c       	subi	r28, 0xC4	; 196
    b4cc:	d0 40       	sbci	r29, 0x00	; 0
    b4ce:	ce 53       	subi	r28, 0x3E	; 62
    b4d0:	df 4f       	sbci	r29, 0xFF	; 255
    b4d2:	08 81       	ld	r16, Y
    b4d4:	19 81       	ldd	r17, Y+1	; 0x01
    b4d6:	c2 5c       	subi	r28, 0xC2	; 194
    b4d8:	d0 40       	sbci	r29, 0x00	; 0
    b4da:	ca 54       	subi	r28, 0x4A	; 74
    b4dc:	df 4f       	sbci	r29, 0xFF	; 255
    b4de:	e8 81       	ld	r30, Y
    b4e0:	f9 81       	ldd	r31, Y+1	; 0x01
    b4e2:	c6 5b       	subi	r28, 0xB6	; 182
    b4e4:	d0 40       	sbci	r29, 0x00	; 0
    b4e6:	8e 0f       	add	r24, r30
    b4e8:	9f 1f       	adc	r25, r31
    b4ea:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b4ee:	88 23       	and	r24, r24
    b4f0:	21 f0       	breq	.+8      	; 0xb4fa <draw_menu(bool)+0x7ea>
    b4f2:	83 ea       	ldi	r24, 0xA3	; 163
    b4f4:	95 e0       	ldi	r25, 0x05	; 5
    b4f6:	0e 94 b2 e1 	call	0x1c364	; 0x1c364 <puts>
    b4fa:	93 94       	inc	r9
    b4fc:	2f cf       	rjmp	.-418    	; 0xb35c <draw_menu(bool)+0x64c>
    b4fe:	51 2c       	mov	r5, r1
    b500:	13 01       	movw	r2, r6
    b502:	f0 e4       	ldi	r31, 0x40	; 64
    b504:	2f 1a       	sub	r2, r31
    b506:	fd ef       	ldi	r31, 0xFD	; 253
    b508:	3f 0a       	sbc	r3, r31
    b50a:	87 e1       	ldi	r24, 0x17	; 23
    b50c:	48 2e       	mov	r4, r24
    b50e:	f1 01       	movw	r30, r2
    b510:	84 91       	lpm	r24, Z
    b512:	58 16       	cp	r5, r24
    b514:	08 f0       	brcs	.+2      	; 0xb518 <draw_menu(bool)+0x808>
    b516:	01 c1       	rjmp	.+514    	; 0xb71a <draw_menu(bool)+0xa0a>
    b518:	54 9c       	mul	r5, r4
    b51a:	40 01       	movw	r8, r0
    b51c:	11 24       	eor	r1, r1
    b51e:	f4 01       	movw	r30, r8
    b520:	e3 58       	subi	r30, 0x83	; 131
    b522:	fe 4f       	sbci	r31, 0xFE	; 254
    b524:	e6 0d       	add	r30, r6
    b526:	f7 1d       	adc	r31, r7
    b528:	84 91       	lpm	r24, Z
    b52a:	cd 52       	subi	r28, 0x2D	; 45
    b52c:	df 4f       	sbci	r29, 0xFF	; 255
    b52e:	68 81       	ld	r22, Y
    b530:	c3 5d       	subi	r28, 0xD3	; 211
    b532:	d0 40       	sbci	r29, 0x00	; 0
    b534:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    b538:	88 23       	and	r24, r24
    b53a:	09 f4       	brne	.+2      	; 0xb53e <draw_menu(bool)+0x82e>
    b53c:	81 c0       	rjmp	.+258    	; 0xb640 <draw_menu(bool)+0x930>
    b53e:	f4 01       	movw	r30, r8
    b540:	e9 59       	subi	r30, 0x99	; 153
    b542:	fe 4f       	sbci	r31, 0xFE	; 254
    b544:	e6 0d       	add	r30, r6
    b546:	f7 1d       	adc	r31, r7
    b548:	65 91       	lpm	r22, Z+
    b54a:	74 91       	lpm	r23, Z
    b54c:	ce 01       	movw	r24, r28
    b54e:	8f 57       	subi	r24, 0x7F	; 127
    b550:	9f 4f       	sbci	r25, 0xFF	; 255
    b552:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    b556:	f4 01       	movw	r30, r8
    b558:	e7 58       	subi	r30, 0x87	; 135
    b55a:	fe 4f       	sbci	r31, 0xFE	; 254
    b55c:	e6 0d       	add	r30, r6
    b55e:	f7 1d       	adc	r31, r7
    b560:	25 91       	lpm	r18, Z+
    b562:	34 91       	lpm	r19, Z
    b564:	f4 01       	movw	r30, r8
    b566:	e5 58       	subi	r30, 0x85	; 133
    b568:	fe 4f       	sbci	r31, 0xFE	; 254
    b56a:	e6 0d       	add	r30, r6
    b56c:	f7 1d       	adc	r31, r7
    b56e:	c5 90       	lpm	r12, Z+
    b570:	d4 90       	lpm	r13, Z
    b572:	84 01       	movw	r16, r8
    b574:	0a 58       	subi	r16, 0x8A	; 138
    b576:	1e 4f       	sbci	r17, 0xFE	; 254
    b578:	06 0d       	add	r16, r6
    b57a:	17 1d       	adc	r17, r7
    b57c:	f8 01       	movw	r30, r16
    b57e:	84 91       	lpm	r24, Z
    b580:	cf 54       	subi	r28, 0x4F	; 79
    b582:	df 4f       	sbci	r29, 0xFF	; 255
    b584:	68 81       	ld	r22, Y
    b586:	c1 5b       	subi	r28, 0xB1	; 177
    b588:	d0 40       	sbci	r29, 0x00	; 0
    b58a:	70 e0       	ldi	r23, 0x00	; 0
    b58c:	45 2d       	mov	r20, r5
    b58e:	90 e0       	ldi	r25, 0x00	; 0
    b590:	f9 01       	movw	r30, r18
    b592:	19 95       	eicall
    b594:	f8 2e       	mov	r15, r24
    b596:	cf 55       	subi	r28, 0x5F	; 95
    b598:	df 4f       	sbci	r29, 0xFF	; 255
    b59a:	18 82       	st	Y, r1
    b59c:	c1 5a       	subi	r28, 0xA1	; 161
    b59e:	d0 40       	sbci	r29, 0x00	; 0
    b5a0:	f8 01       	movw	r30, r16
    b5a2:	44 91       	lpm	r20, Z
    b5a4:	84 91       	lpm	r24, Z
    b5a6:	8e 01       	movw	r16, r28
    b5a8:	0f 55       	subi	r16, 0x5F	; 95
    b5aa:	1f 4f       	sbci	r17, 0xFF	; 255
    b5ac:	9e 01       	movw	r18, r28
    b5ae:	2f 5f       	subi	r18, 0xFF	; 255
    b5b0:	3f 4f       	sbci	r19, 0xFF	; 255
    b5b2:	cf 54       	subi	r28, 0x4F	; 79
    b5b4:	df 4f       	sbci	r29, 0xFF	; 255
    b5b6:	68 81       	ld	r22, Y
    b5b8:	c1 5b       	subi	r28, 0xB1	; 177
    b5ba:	d0 40       	sbci	r29, 0x00	; 0
    b5bc:	f6 01       	movw	r30, r12
    b5be:	19 95       	eicall
    b5c0:	f4 01       	movw	r30, r8
    b5c2:	ef 58       	subi	r30, 0x8F	; 143
    b5c4:	fe 4f       	sbci	r31, 0xFE	; 254
    b5c6:	e6 0d       	add	r30, r6
    b5c8:	f7 1d       	adc	r31, r7
    b5ca:	05 91       	lpm	r16, Z+
    b5cc:	14 91       	lpm	r17, Z
    b5ce:	f4 01       	movw	r30, r8
    b5d0:	e1 59       	subi	r30, 0x91	; 145
    b5d2:	fe 4f       	sbci	r31, 0xFE	; 254
    b5d4:	e6 0d       	add	r30, r6
    b5d6:	f7 1d       	adc	r31, r7
    b5d8:	25 91       	lpm	r18, Z+
    b5da:	34 91       	lpm	r19, Z
    b5dc:	f4 01       	movw	r30, r8
    b5de:	e3 59       	subi	r30, 0x93	; 147
    b5e0:	fe 4f       	sbci	r31, 0xFE	; 254
    b5e2:	e6 0d       	add	r30, r6
    b5e4:	f7 1d       	adc	r31, r7
    b5e6:	45 91       	lpm	r20, Z+
    b5e8:	54 91       	lpm	r21, Z
    b5ea:	f4 01       	movw	r30, r8
    b5ec:	e5 59       	subi	r30, 0x95	; 149
    b5ee:	fe 4f       	sbci	r31, 0xFE	; 254
    b5f0:	e6 0d       	add	r30, r6
    b5f2:	f7 1d       	adc	r31, r7
    b5f4:	65 91       	lpm	r22, Z+
    b5f6:	74 91       	lpm	r23, Z
    b5f8:	f4 01       	movw	r30, r8
    b5fa:	e7 59       	subi	r30, 0x97	; 151
    b5fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b5fe:	e6 0d       	add	r30, r6
    b600:	f7 1d       	adc	r31, r7
    b602:	85 91       	lpm	r24, Z+
    b604:	94 91       	lpm	r25, Z
    b606:	ee 24       	eor	r14, r14
    b608:	e3 94       	inc	r14
    b60a:	f1 10       	cpse	r15, r1
    b60c:	01 c0       	rjmp	.+2      	; 0xb610 <draw_menu(bool)+0x900>
    b60e:	e1 2c       	mov	r14, r1
    b610:	c8 54       	subi	r28, 0x48	; 72
    b612:	df 4f       	sbci	r29, 0xFF	; 255
    b614:	e8 81       	ld	r30, Y
    b616:	f9 81       	ldd	r31, Y+1	; 0x01
    b618:	c8 5b       	subi	r28, 0xB8	; 184
    b61a:	d0 40       	sbci	r29, 0x00	; 0
    b61c:	6e 0f       	add	r22, r30
    b61e:	7f 1f       	adc	r23, r31
    b620:	fe 01       	movw	r30, r28
    b622:	31 96       	adiw	r30, 0x01	; 1
    b624:	5f 01       	movw	r10, r30
    b626:	e0 58       	subi	r30, 0x80	; 128
    b628:	ff 4f       	sbci	r31, 0xFF	; 255
    b62a:	6f 01       	movw	r12, r30
    b62c:	ca 54       	subi	r28, 0x4A	; 74
    b62e:	df 4f       	sbci	r29, 0xFF	; 255
    b630:	e8 81       	ld	r30, Y
    b632:	f9 81       	ldd	r31, Y+1	; 0x01
    b634:	c6 5b       	subi	r28, 0xB6	; 182
    b636:	d0 40       	sbci	r29, 0x00	; 0
    b638:	8e 0f       	add	r24, r30
    b63a:	9f 1f       	adc	r25, r31
    b63c:	0e 94 07 55 	call	0xaa0e	; 0xaa0e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    b640:	ce 53       	subi	r28, 0x3E	; 62
    b642:	df 4f       	sbci	r29, 0xFF	; 255
    b644:	28 81       	ld	r18, Y
    b646:	39 81       	ldd	r19, Y+1	; 0x01
    b648:	c2 5c       	subi	r28, 0xC2	; 194
    b64a:	d0 40       	sbci	r29, 0x00	; 0
    b64c:	23 2b       	or	r18, r19
    b64e:	09 f4       	brne	.+2      	; 0xb652 <draw_menu(bool)+0x942>
    b650:	62 c0       	rjmp	.+196    	; 0xb716 <draw_menu(bool)+0xa06>
    b652:	cc 53       	subi	r28, 0x3C	; 60
    b654:	df 4f       	sbci	r29, 0xFF	; 255
    b656:	48 81       	ld	r20, Y
    b658:	59 81       	ldd	r21, Y+1	; 0x01
    b65a:	c4 5c       	subi	r28, 0xC4	; 196
    b65c:	d0 40       	sbci	r29, 0x00	; 0
    b65e:	45 2b       	or	r20, r21
    b660:	09 f4       	brne	.+2      	; 0xb664 <draw_menu(bool)+0x954>
    b662:	59 c0       	rjmp	.+178    	; 0xb716 <draw_menu(bool)+0xa06>
    b664:	f4 01       	movw	r30, r8
    b666:	e1 59       	subi	r30, 0x91	; 145
    b668:	fe 4f       	sbci	r31, 0xFE	; 254
    b66a:	e6 0d       	add	r30, r6
    b66c:	f7 1d       	adc	r31, r7
    b66e:	25 91       	lpm	r18, Z+
    b670:	34 91       	lpm	r19, Z
    b672:	f4 01       	movw	r30, r8
    b674:	e3 59       	subi	r30, 0x93	; 147
    b676:	fe 4f       	sbci	r31, 0xFE	; 254
    b678:	e6 0d       	add	r30, r6
    b67a:	f7 1d       	adc	r31, r7
    b67c:	45 91       	lpm	r20, Z+
    b67e:	54 91       	lpm	r21, Z
    b680:	f4 01       	movw	r30, r8
    b682:	e5 59       	subi	r30, 0x95	; 149
    b684:	fe 4f       	sbci	r31, 0xFE	; 254
    b686:	e6 0d       	add	r30, r6
    b688:	f7 1d       	adc	r31, r7
    b68a:	65 91       	lpm	r22, Z+
    b68c:	74 91       	lpm	r23, Z
    b68e:	f4 01       	movw	r30, r8
    b690:	e7 59       	subi	r30, 0x97	; 151
    b692:	fe 4f       	sbci	r31, 0xFE	; 254
    b694:	e6 0d       	add	r30, r6
    b696:	f7 1d       	adc	r31, r7
    b698:	85 91       	lpm	r24, Z+
    b69a:	94 91       	lpm	r25, Z
    b69c:	c8 54       	subi	r28, 0x48	; 72
    b69e:	df 4f       	sbci	r29, 0xFF	; 255
    b6a0:	e8 81       	ld	r30, Y
    b6a2:	f9 81       	ldd	r31, Y+1	; 0x01
    b6a4:	c8 5b       	subi	r28, 0xB8	; 184
    b6a6:	d0 40       	sbci	r29, 0x00	; 0
    b6a8:	6e 0f       	add	r22, r30
    b6aa:	7f 1f       	adc	r23, r31
    b6ac:	cc 53       	subi	r28, 0x3C	; 60
    b6ae:	df 4f       	sbci	r29, 0xFF	; 255
    b6b0:	e8 80       	ld	r14, Y
    b6b2:	f9 80       	ldd	r15, Y+1	; 0x01
    b6b4:	c4 5c       	subi	r28, 0xC4	; 196
    b6b6:	d0 40       	sbci	r29, 0x00	; 0
    b6b8:	ce 53       	subi	r28, 0x3E	; 62
    b6ba:	df 4f       	sbci	r29, 0xFF	; 255
    b6bc:	08 81       	ld	r16, Y
    b6be:	19 81       	ldd	r17, Y+1	; 0x01
    b6c0:	c2 5c       	subi	r28, 0xC2	; 194
    b6c2:	d0 40       	sbci	r29, 0x00	; 0
    b6c4:	ca 54       	subi	r28, 0x4A	; 74
    b6c6:	df 4f       	sbci	r29, 0xFF	; 255
    b6c8:	e8 81       	ld	r30, Y
    b6ca:	f9 81       	ldd	r31, Y+1	; 0x01
    b6cc:	c6 5b       	subi	r28, 0xB6	; 182
    b6ce:	d0 40       	sbci	r29, 0x00	; 0
    b6d0:	8e 0f       	add	r24, r30
    b6d2:	9f 1f       	adc	r25, r31
    b6d4:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b6d8:	18 2f       	mov	r17, r24
    b6da:	88 23       	and	r24, r24
    b6dc:	e1 f0       	breq	.+56     	; 0xb716 <draw_menu(bool)+0xa06>
    b6de:	f4 01       	movw	r30, r8
    b6e0:	e9 58       	subi	r30, 0x89	; 137
    b6e2:	fe 4f       	sbci	r31, 0xFE	; 254
    b6e4:	e6 0d       	add	r30, r6
    b6e6:	f7 1d       	adc	r31, r7
    b6e8:	25 91       	lpm	r18, Z+
    b6ea:	34 91       	lpm	r19, Z
    b6ec:	f4 01       	movw	r30, r8
    b6ee:	ea 58       	subi	r30, 0x8A	; 138
    b6f0:	fe 4f       	sbci	r31, 0xFE	; 254
    b6f2:	e6 0d       	add	r30, r6
    b6f4:	f7 1d       	adc	r31, r7
    b6f6:	84 91       	lpm	r24, Z
    b6f8:	cf 54       	subi	r28, 0x4F	; 79
    b6fa:	df 4f       	sbci	r29, 0xFF	; 255
    b6fc:	68 81       	ld	r22, Y
    b6fe:	c1 5b       	subi	r28, 0xB1	; 177
    b700:	d0 40       	sbci	r29, 0x00	; 0
    b702:	70 e0       	ldi	r23, 0x00	; 0
    b704:	45 2d       	mov	r20, r5
    b706:	90 e0       	ldi	r25, 0x00	; 0
    b708:	f9 01       	movw	r30, r18
    b70a:	19 95       	eicall
    b70c:	c6 53       	subi	r28, 0x36	; 54
    b70e:	df 4f       	sbci	r29, 0xFF	; 255
    b710:	18 83       	st	Y, r17
    b712:	ca 5c       	subi	r28, 0xCA	; 202
    b714:	d0 40       	sbci	r29, 0x00	; 0
    b716:	53 94       	inc	r5
    b718:	fa ce       	rjmp	.-524    	; 0xb50e <draw_menu(bool)+0x7fe>
    b71a:	c6 53       	subi	r28, 0x36	; 54
    b71c:	df 4f       	sbci	r29, 0xFF	; 255
    b71e:	f8 81       	ld	r31, Y
    b720:	ca 5c       	subi	r28, 0xCA	; 202
    b722:	d0 40       	sbci	r29, 0x00	; 0
    b724:	f1 11       	cpse	r31, r1
    b726:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <draw_menu(bool)+0x2210>
    b72a:	51 2c       	mov	r5, r1
    b72c:	43 01       	movw	r8, r6
    b72e:	2e e3       	ldi	r18, 0x3E	; 62
    b730:	82 1a       	sub	r8, r18
    b732:	2d ef       	ldi	r18, 0xFD	; 253
    b734:	92 0a       	sbc	r9, r18
    b736:	f4 01       	movw	r30, r8
    b738:	84 91       	lpm	r24, Z
    b73a:	58 16       	cp	r5, r24
    b73c:	08 f0       	brcs	.+2      	; 0xb740 <draw_menu(bool)+0xa30>
    b73e:	d6 c0       	rjmp	.+428    	; 0xb8ec <draw_menu(bool)+0xbdc>
    b740:	f0 e1       	ldi	r31, 0x10	; 16
    b742:	5f 9e       	mul	r5, r31
    b744:	60 01       	movw	r12, r0
    b746:	11 24       	eor	r1, r1
    b748:	f6 01       	movw	r30, r12
    b74a:	e8 51       	subi	r30, 0x18	; 24
    b74c:	fe 4f       	sbci	r31, 0xFE	; 254
    b74e:	e6 0d       	add	r30, r6
    b750:	f7 1d       	adc	r31, r7
    b752:	25 91       	lpm	r18, Z+
    b754:	34 91       	lpm	r19, Z
    b756:	56 01       	movw	r10, r12
    b758:	4c e1       	ldi	r20, 0x1C	; 28
    b75a:	a4 1a       	sub	r10, r20
    b75c:	4e ef       	ldi	r20, 0xFE	; 254
    b75e:	b4 0a       	sbc	r11, r20
    b760:	a6 0c       	add	r10, r6
    b762:	b7 1c       	adc	r11, r7
    b764:	f5 01       	movw	r30, r10
    b766:	84 91       	lpm	r24, Z
    b768:	cf 54       	subi	r28, 0x4F	; 79
    b76a:	df 4f       	sbci	r29, 0xFF	; 255
    b76c:	68 81       	ld	r22, Y
    b76e:	c1 5b       	subi	r28, 0xB1	; 177
    b770:	d0 40       	sbci	r29, 0x00	; 0
    b772:	70 e0       	ldi	r23, 0x00	; 0
    b774:	45 2d       	mov	r20, r5
    b776:	90 e0       	ldi	r25, 0x00	; 0
    b778:	f9 01       	movw	r30, r18
    b77a:	19 95       	eicall
    b77c:	88 23       	and	r24, r24
    b77e:	09 f4       	brne	.+2      	; 0xb782 <draw_menu(bool)+0xa72>
    b780:	b3 c0       	rjmp	.+358    	; 0xb8e8 <draw_menu(bool)+0xbd8>
    b782:	f6 01       	movw	r30, r12
    b784:	e9 51       	subi	r30, 0x19	; 25
    b786:	fe 4f       	sbci	r31, 0xFE	; 254
    b788:	e6 0d       	add	r30, r6
    b78a:	f7 1d       	adc	r31, r7
    b78c:	84 91       	lpm	r24, Z
    b78e:	cd 52       	subi	r28, 0x2D	; 45
    b790:	df 4f       	sbci	r29, 0xFF	; 255
    b792:	68 81       	ld	r22, Y
    b794:	c3 5d       	subi	r28, 0xD3	; 211
    b796:	d0 40       	sbci	r29, 0x00	; 0
    b798:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    b79c:	88 23       	and	r24, r24
    b79e:	09 f4       	brne	.+2      	; 0xb7a2 <draw_menu(bool)+0xa92>
    b7a0:	3c c0       	rjmp	.+120    	; 0xb81a <draw_menu(bool)+0xb0a>
    b7a2:	f6 01       	movw	r30, r12
    b7a4:	e6 52       	subi	r30, 0x26	; 38
    b7a6:	fe 4f       	sbci	r31, 0xFE	; 254
    b7a8:	e6 0d       	add	r30, r6
    b7aa:	f7 1d       	adc	r31, r7
    b7ac:	e5 90       	lpm	r14, Z+
    b7ae:	f4 90       	lpm	r15, Z
    b7b0:	f6 01       	movw	r30, r12
    b7b2:	ed 51       	subi	r30, 0x1D	; 29
    b7b4:	fe 4f       	sbci	r31, 0xFE	; 254
    b7b6:	e6 0d       	add	r30, r6
    b7b8:	f7 1d       	adc	r31, r7
    b7ba:	05 91       	lpm	r16, Z+
    b7bc:	14 91       	lpm	r17, Z
    b7be:	f6 01       	movw	r30, r12
    b7c0:	ef 51       	subi	r30, 0x1F	; 31
    b7c2:	fe 4f       	sbci	r31, 0xFE	; 254
    b7c4:	e6 0d       	add	r30, r6
    b7c6:	f7 1d       	adc	r31, r7
    b7c8:	25 91       	lpm	r18, Z+
    b7ca:	34 91       	lpm	r19, Z
    b7cc:	f6 01       	movw	r30, r12
    b7ce:	e1 52       	subi	r30, 0x21	; 33
    b7d0:	fe 4f       	sbci	r31, 0xFE	; 254
    b7d2:	e6 0d       	add	r30, r6
    b7d4:	f7 1d       	adc	r31, r7
    b7d6:	45 91       	lpm	r20, Z+
    b7d8:	54 91       	lpm	r21, Z
    b7da:	f6 01       	movw	r30, r12
    b7dc:	e3 52       	subi	r30, 0x23	; 35
    b7de:	fe 4f       	sbci	r31, 0xFE	; 254
    b7e0:	e6 0d       	add	r30, r6
    b7e2:	f7 1d       	adc	r31, r7
    b7e4:	65 91       	lpm	r22, Z+
    b7e6:	74 91       	lpm	r23, Z
    b7e8:	f6 01       	movw	r30, r12
    b7ea:	e5 52       	subi	r30, 0x25	; 37
    b7ec:	fe 4f       	sbci	r31, 0xFE	; 254
    b7ee:	e6 0d       	add	r30, r6
    b7f0:	f7 1d       	adc	r31, r7
    b7f2:	85 91       	lpm	r24, Z+
    b7f4:	94 91       	lpm	r25, Z
    b7f6:	c8 54       	subi	r28, 0x48	; 72
    b7f8:	df 4f       	sbci	r29, 0xFF	; 255
    b7fa:	e8 81       	ld	r30, Y
    b7fc:	f9 81       	ldd	r31, Y+1	; 0x01
    b7fe:	c8 5b       	subi	r28, 0xB8	; 184
    b800:	d0 40       	sbci	r29, 0x00	; 0
    b802:	6e 0f       	add	r22, r30
    b804:	7f 1f       	adc	r23, r31
    b806:	ca 54       	subi	r28, 0x4A	; 74
    b808:	df 4f       	sbci	r29, 0xFF	; 255
    b80a:	e8 81       	ld	r30, Y
    b80c:	f9 81       	ldd	r31, Y+1	; 0x01
    b80e:	c6 5b       	subi	r28, 0xB6	; 182
    b810:	d0 40       	sbci	r29, 0x00	; 0
    b812:	8e 0f       	add	r24, r30
    b814:	9f 1f       	adc	r25, r31
    b816:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    b81a:	ce 53       	subi	r28, 0x3E	; 62
    b81c:	df 4f       	sbci	r29, 0xFF	; 255
    b81e:	28 81       	ld	r18, Y
    b820:	39 81       	ldd	r19, Y+1	; 0x01
    b822:	c2 5c       	subi	r28, 0xC2	; 194
    b824:	d0 40       	sbci	r29, 0x00	; 0
    b826:	23 2b       	or	r18, r19
    b828:	09 f4       	brne	.+2      	; 0xb82c <draw_menu(bool)+0xb1c>
    b82a:	5e c0       	rjmp	.+188    	; 0xb8e8 <draw_menu(bool)+0xbd8>
    b82c:	cc 53       	subi	r28, 0x3C	; 60
    b82e:	df 4f       	sbci	r29, 0xFF	; 255
    b830:	48 81       	ld	r20, Y
    b832:	59 81       	ldd	r21, Y+1	; 0x01
    b834:	c4 5c       	subi	r28, 0xC4	; 196
    b836:	d0 40       	sbci	r29, 0x00	; 0
    b838:	45 2b       	or	r20, r21
    b83a:	09 f4       	brne	.+2      	; 0xb83e <draw_menu(bool)+0xb2e>
    b83c:	55 c0       	rjmp	.+170    	; 0xb8e8 <draw_menu(bool)+0xbd8>
    b83e:	f6 01       	movw	r30, r12
    b840:	ef 51       	subi	r30, 0x1F	; 31
    b842:	fe 4f       	sbci	r31, 0xFE	; 254
    b844:	e6 0d       	add	r30, r6
    b846:	f7 1d       	adc	r31, r7
    b848:	25 91       	lpm	r18, Z+
    b84a:	34 91       	lpm	r19, Z
    b84c:	f6 01       	movw	r30, r12
    b84e:	e1 52       	subi	r30, 0x21	; 33
    b850:	fe 4f       	sbci	r31, 0xFE	; 254
    b852:	e6 0d       	add	r30, r6
    b854:	f7 1d       	adc	r31, r7
    b856:	45 91       	lpm	r20, Z+
    b858:	54 91       	lpm	r21, Z
    b85a:	f6 01       	movw	r30, r12
    b85c:	e3 52       	subi	r30, 0x23	; 35
    b85e:	fe 4f       	sbci	r31, 0xFE	; 254
    b860:	e6 0d       	add	r30, r6
    b862:	f7 1d       	adc	r31, r7
    b864:	65 91       	lpm	r22, Z+
    b866:	74 91       	lpm	r23, Z
    b868:	f6 01       	movw	r30, r12
    b86a:	e5 52       	subi	r30, 0x25	; 37
    b86c:	fe 4f       	sbci	r31, 0xFE	; 254
    b86e:	e6 0d       	add	r30, r6
    b870:	f7 1d       	adc	r31, r7
    b872:	85 91       	lpm	r24, Z+
    b874:	94 91       	lpm	r25, Z
    b876:	c8 54       	subi	r28, 0x48	; 72
    b878:	df 4f       	sbci	r29, 0xFF	; 255
    b87a:	e8 81       	ld	r30, Y
    b87c:	f9 81       	ldd	r31, Y+1	; 0x01
    b87e:	c8 5b       	subi	r28, 0xB8	; 184
    b880:	d0 40       	sbci	r29, 0x00	; 0
    b882:	6e 0f       	add	r22, r30
    b884:	7f 1f       	adc	r23, r31
    b886:	cc 53       	subi	r28, 0x3C	; 60
    b888:	df 4f       	sbci	r29, 0xFF	; 255
    b88a:	e8 80       	ld	r14, Y
    b88c:	f9 80       	ldd	r15, Y+1	; 0x01
    b88e:	c4 5c       	subi	r28, 0xC4	; 196
    b890:	d0 40       	sbci	r29, 0x00	; 0
    b892:	ce 53       	subi	r28, 0x3E	; 62
    b894:	df 4f       	sbci	r29, 0xFF	; 255
    b896:	08 81       	ld	r16, Y
    b898:	19 81       	ldd	r17, Y+1	; 0x01
    b89a:	c2 5c       	subi	r28, 0xC2	; 194
    b89c:	d0 40       	sbci	r29, 0x00	; 0
    b89e:	ca 54       	subi	r28, 0x4A	; 74
    b8a0:	df 4f       	sbci	r29, 0xFF	; 255
    b8a2:	e8 81       	ld	r30, Y
    b8a4:	f9 81       	ldd	r31, Y+1	; 0x01
    b8a6:	c6 5b       	subi	r28, 0xB6	; 182
    b8a8:	d0 40       	sbci	r29, 0x00	; 0
    b8aa:	8e 0f       	add	r24, r30
    b8ac:	9f 1f       	adc	r25, r31
    b8ae:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b8b2:	18 2f       	mov	r17, r24
    b8b4:	88 23       	and	r24, r24
    b8b6:	c1 f0       	breq	.+48     	; 0xb8e8 <draw_menu(bool)+0xbd8>
    b8b8:	f6 01       	movw	r30, r12
    b8ba:	eb 51       	subi	r30, 0x1B	; 27
    b8bc:	fe 4f       	sbci	r31, 0xFE	; 254
    b8be:	e6 0d       	add	r30, r6
    b8c0:	f7 1d       	adc	r31, r7
    b8c2:	25 91       	lpm	r18, Z+
    b8c4:	34 91       	lpm	r19, Z
    b8c6:	f5 01       	movw	r30, r10
    b8c8:	84 91       	lpm	r24, Z
    b8ca:	cf 54       	subi	r28, 0x4F	; 79
    b8cc:	df 4f       	sbci	r29, 0xFF	; 255
    b8ce:	68 81       	ld	r22, Y
    b8d0:	c1 5b       	subi	r28, 0xB1	; 177
    b8d2:	d0 40       	sbci	r29, 0x00	; 0
    b8d4:	70 e0       	ldi	r23, 0x00	; 0
    b8d6:	45 2d       	mov	r20, r5
    b8d8:	90 e0       	ldi	r25, 0x00	; 0
    b8da:	f9 01       	movw	r30, r18
    b8dc:	19 95       	eicall
    b8de:	c6 53       	subi	r28, 0x36	; 54
    b8e0:	df 4f       	sbci	r29, 0xFF	; 255
    b8e2:	18 83       	st	Y, r17
    b8e4:	ca 5c       	subi	r28, 0xCA	; 202
    b8e6:	d0 40       	sbci	r29, 0x00	; 0
    b8e8:	53 94       	inc	r5
    b8ea:	25 cf       	rjmp	.-438    	; 0xb736 <draw_menu(bool)+0xa26>
    b8ec:	c6 53       	subi	r28, 0x36	; 54
    b8ee:	df 4f       	sbci	r29, 0xFF	; 255
    b8f0:	f8 81       	ld	r31, Y
    b8f2:	ca 5c       	subi	r28, 0xCA	; 202
    b8f4:	d0 40       	sbci	r29, 0x00	; 0
    b8f6:	f1 11       	cpse	r31, r1
    b8f8:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <draw_menu(bool)+0x2210>
    b8fc:	51 2c       	mov	r5, r1
    b8fe:	93 01       	movw	r18, r6
    b900:	2d 53       	subi	r18, 0x3D	; 61
    b902:	3d 4f       	sbci	r19, 0xFD	; 253
    b904:	cc 52       	subi	r28, 0x2C	; 44
    b906:	df 4f       	sbci	r29, 0xFF	; 255
    b908:	39 83       	std	Y+1, r19	; 0x01
    b90a:	28 83       	st	Y, r18
    b90c:	c4 5d       	subi	r28, 0xD4	; 212
    b90e:	d0 40       	sbci	r29, 0x00	; 0
    b910:	cc 52       	subi	r28, 0x2C	; 44
    b912:	df 4f       	sbci	r29, 0xFF	; 255
    b914:	e8 81       	ld	r30, Y
    b916:	f9 81       	ldd	r31, Y+1	; 0x01
    b918:	c4 5d       	subi	r28, 0xD4	; 212
    b91a:	d0 40       	sbci	r29, 0x00	; 0
    b91c:	84 91       	lpm	r24, Z
    b91e:	58 16       	cp	r5, r24
    b920:	08 f0       	brcs	.+2      	; 0xb924 <draw_menu(bool)+0xc14>
    b922:	60 c3       	rjmp	.+1728   	; 0xbfe4 <draw_menu(bool)+0x12d4>
    b924:	f7 e1       	ldi	r31, 0x17	; 23
    b926:	5f 9e       	mul	r5, r31
    b928:	60 01       	movw	r12, r0
    b92a:	11 24       	eor	r1, r1
    b92c:	f6 01       	movw	r30, r12
    b92e:	e0 59       	subi	r30, 0x90	; 144
    b930:	fd 4f       	sbci	r31, 0xFD	; 253
    b932:	e6 0d       	add	r30, r6
    b934:	f7 1d       	adc	r31, r7
    b936:	84 91       	lpm	r24, Z
    b938:	cd 52       	subi	r28, 0x2D	; 45
    b93a:	df 4f       	sbci	r29, 0xFF	; 255
    b93c:	68 81       	ld	r22, Y
    b93e:	c3 5d       	subi	r28, 0xD3	; 211
    b940:	d0 40       	sbci	r29, 0x00	; 0
    b942:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    b946:	88 23       	and	r24, r24
    b948:	09 f4       	brne	.+2      	; 0xb94c <draw_menu(bool)+0xc3c>
    b94a:	98 c1       	rjmp	.+816    	; 0xbc7c <draw_menu(bool)+0xf6c>
    b94c:	ce 54       	subi	r28, 0x4E	; 78
    b94e:	df 4f       	sbci	r29, 0xFF	; 255
    b950:	18 82       	st	Y, r1
    b952:	c2 5b       	subi	r28, 0xB2	; 178
    b954:	d0 40       	sbci	r29, 0x00	; 0
    b956:	f6 01       	movw	r30, r12
    b958:	e2 59       	subi	r30, 0x92	; 146
    b95a:	fd 4f       	sbci	r31, 0xFD	; 253
    b95c:	e6 0d       	add	r30, r6
    b95e:	f7 1d       	adc	r31, r7
    b960:	25 91       	lpm	r18, Z+
    b962:	34 91       	lpm	r19, Z
    b964:	c6 01       	movw	r24, r12
    b966:	87 59       	subi	r24, 0x97	; 151
    b968:	9d 4f       	sbci	r25, 0xFD	; 253
    b96a:	a3 01       	movw	r20, r6
    b96c:	48 0f       	add	r20, r24
    b96e:	59 1f       	adc	r21, r25
    b970:	c6 54       	subi	r28, 0x46	; 70
    b972:	df 4f       	sbci	r29, 0xFF	; 255
    b974:	59 83       	std	Y+1, r21	; 0x01
    b976:	48 83       	st	Y, r20
    b978:	ca 5b       	subi	r28, 0xBA	; 186
    b97a:	d0 40       	sbci	r29, 0x00	; 0
    b97c:	fa 01       	movw	r30, r20
    b97e:	84 91       	lpm	r24, Z
    b980:	cf 54       	subi	r28, 0x4F	; 79
    b982:	df 4f       	sbci	r29, 0xFF	; 255
    b984:	68 81       	ld	r22, Y
    b986:	c1 5b       	subi	r28, 0xB1	; 177
    b988:	d0 40       	sbci	r29, 0x00	; 0
    b98a:	70 e0       	ldi	r23, 0x00	; 0
    b98c:	40 e0       	ldi	r20, 0x00	; 0
    b98e:	90 e0       	ldi	r25, 0x00	; 0
    b990:	f9 01       	movw	r30, r18
    b992:	19 95       	eicall
    b994:	cd 54       	subi	r28, 0x4D	; 77
    b996:	df 4f       	sbci	r29, 0xFF	; 255
    b998:	88 83       	st	Y, r24
    b99a:	c3 5b       	subi	r28, 0xB3	; 179
    b99c:	d0 40       	sbci	r29, 0x00	; 0
    b99e:	f6 01       	movw	r30, r12
    b9a0:	e6 59       	subi	r30, 0x96	; 150
    b9a2:	fd 4f       	sbci	r31, 0xFD	; 253
    b9a4:	e6 0d       	add	r30, r6
    b9a6:	f7 1d       	adc	r31, r7
    b9a8:	25 91       	lpm	r18, Z+
    b9aa:	34 91       	lpm	r19, Z
    b9ac:	cf 52       	subi	r28, 0x2F	; 47
    b9ae:	df 4f       	sbci	r29, 0xFF	; 255
    b9b0:	39 83       	std	Y+1, r19	; 0x01
    b9b2:	28 83       	st	Y, r18
    b9b4:	c1 5d       	subi	r28, 0xD1	; 209
    b9b6:	d0 40       	sbci	r29, 0x00	; 0
    b9b8:	46 01       	movw	r8, r12
    b9ba:	36 ea       	ldi	r19, 0xA6	; 166
    b9bc:	83 1a       	sub	r8, r19
    b9be:	3d ef       	ldi	r19, 0xFD	; 253
    b9c0:	93 0a       	sbc	r9, r19
    b9c2:	86 0c       	add	r8, r6
    b9c4:	97 1c       	adc	r9, r7
    b9c6:	56 01       	movw	r10, r12
    b9c8:	44 ea       	ldi	r20, 0xA4	; 164
    b9ca:	a4 1a       	sub	r10, r20
    b9cc:	4d ef       	ldi	r20, 0xFD	; 253
    b9ce:	b4 0a       	sbc	r11, r20
    b9d0:	a6 0c       	add	r10, r6
    b9d2:	b7 1c       	adc	r11, r7
    b9d4:	16 01       	movw	r2, r12
    b9d6:	5b e9       	ldi	r21, 0x9B	; 155
    b9d8:	25 1a       	sub	r2, r21
    b9da:	5d ef       	ldi	r21, 0xFD	; 253
    b9dc:	35 0a       	sbc	r3, r21
    b9de:	26 0c       	add	r2, r6
    b9e0:	37 1c       	adc	r3, r7
    b9e2:	c6 01       	movw	r24, r12
    b9e4:	8c 59       	subi	r24, 0x9C	; 156
    b9e6:	9d 4f       	sbci	r25, 0xFD	; 253
    b9e8:	b3 01       	movw	r22, r6
    b9ea:	68 0f       	add	r22, r24
    b9ec:	79 1f       	adc	r23, r25
    b9ee:	c0 54       	subi	r28, 0x40	; 64
    b9f0:	df 4f       	sbci	r29, 0xFF	; 255
    b9f2:	79 83       	std	Y+1, r23	; 0x01
    b9f4:	68 83       	st	Y, r22
    b9f6:	c0 5c       	subi	r28, 0xC0	; 192
    b9f8:	d0 40       	sbci	r29, 0x00	; 0
    b9fa:	01 97       	sbiw	r24, 0x01	; 1
    b9fc:	f3 01       	movw	r30, r6
    b9fe:	e8 0f       	add	r30, r24
    ba00:	f9 1f       	adc	r31, r25
    ba02:	ca 53       	subi	r28, 0x3A	; 58
    ba04:	df 4f       	sbci	r29, 0xFF	; 255
    ba06:	f9 83       	std	Y+1, r31	; 0x01
    ba08:	e8 83       	st	Y, r30
    ba0a:	c6 5c       	subi	r28, 0xC6	; 198
    ba0c:	d0 40       	sbci	r29, 0x00	; 0
    ba0e:	03 96       	adiw	r24, 0x03	; 3
    ba10:	93 01       	movw	r18, r6
    ba12:	28 0f       	add	r18, r24
    ba14:	39 1f       	adc	r19, r25
    ba16:	c8 53       	subi	r28, 0x38	; 56
    ba18:	df 4f       	sbci	r29, 0xFF	; 255
    ba1a:	39 83       	std	Y+1, r19	; 0x01
    ba1c:	28 83       	st	Y, r18
    ba1e:	c8 5c       	subi	r28, 0xC8	; 200
    ba20:	d0 40       	sbci	r29, 0x00	; 0
    ba22:	04 97       	sbiw	r24, 0x04	; 4
    ba24:	a3 01       	movw	r20, r6
    ba26:	48 0f       	add	r20, r24
    ba28:	59 1f       	adc	r21, r25
    ba2a:	c5 53       	subi	r28, 0x35	; 53
    ba2c:	df 4f       	sbci	r29, 0xFF	; 255
    ba2e:	59 83       	std	Y+1, r21	; 0x01
    ba30:	48 83       	st	Y, r20
    ba32:	cb 5c       	subi	r28, 0xCB	; 203
    ba34:	d0 40       	sbci	r29, 0x00	; 0
    ba36:	02 97       	sbiw	r24, 0x02	; 2
    ba38:	b3 01       	movw	r22, r6
    ba3a:	68 0f       	add	r22, r24
    ba3c:	79 1f       	adc	r23, r25
    ba3e:	c3 53       	subi	r28, 0x33	; 51
    ba40:	df 4f       	sbci	r29, 0xFF	; 255
    ba42:	79 83       	std	Y+1, r23	; 0x01
    ba44:	68 83       	st	Y, r22
    ba46:	cd 5c       	subi	r28, 0xCD	; 205
    ba48:	d0 40       	sbci	r29, 0x00	; 0
    ba4a:	02 97       	sbiw	r24, 0x02	; 2
    ba4c:	f3 01       	movw	r30, r6
    ba4e:	e8 0f       	add	r30, r24
    ba50:	f9 1f       	adc	r31, r25
    ba52:	c1 53       	subi	r28, 0x31	; 49
    ba54:	df 4f       	sbci	r29, 0xFF	; 255
    ba56:	f9 83       	std	Y+1, r31	; 0x01
    ba58:	e8 83       	st	Y, r30
    ba5a:	cf 5c       	subi	r28, 0xCF	; 207
    ba5c:	d0 40       	sbci	r29, 0x00	; 0
    ba5e:	f1 2c       	mov	r15, r1
    ba60:	41 2c       	mov	r4, r1
    ba62:	ce 54       	subi	r28, 0x4E	; 78
    ba64:	df 4f       	sbci	r29, 0xFF	; 255
    ba66:	88 81       	ld	r24, Y
    ba68:	c2 5b       	subi	r28, 0xB2	; 178
    ba6a:	d0 40       	sbci	r29, 0x00	; 0
    ba6c:	cd 54       	subi	r28, 0x4D	; 77
    ba6e:	df 4f       	sbci	r29, 0xFF	; 255
    ba70:	98 81       	ld	r25, Y
    ba72:	c3 5b       	subi	r28, 0xB3	; 179
    ba74:	d0 40       	sbci	r29, 0x00	; 0
    ba76:	89 17       	cp	r24, r25
    ba78:	08 f0       	brcs	.+2      	; 0xba7c <draw_menu(bool)+0xd6c>
    ba7a:	00 c1       	rjmp	.+512    	; 0xbc7c <draw_menu(bool)+0xf6c>
    ba7c:	f4 01       	movw	r30, r8
    ba7e:	45 91       	lpm	r20, Z+
    ba80:	54 91       	lpm	r21, Z
    ba82:	f5 01       	movw	r30, r10
    ba84:	25 91       	lpm	r18, Z+
    ba86:	34 91       	lpm	r19, Z
    ba88:	f1 01       	movw	r30, r2
    ba8a:	94 91       	lpm	r25, Z
    ba8c:	99 23       	and	r25, r25
    ba8e:	09 f4       	brne	.+2      	; 0xba92 <draw_menu(bool)+0xd82>
    ba90:	b7 c0       	rjmp	.+366    	; 0xbc00 <draw_menu(bool)+0xef0>
    ba92:	c8 54       	subi	r28, 0x48	; 72
    ba94:	df 4f       	sbci	r29, 0xFF	; 255
    ba96:	68 81       	ld	r22, Y
    ba98:	79 81       	ldd	r23, Y+1	; 0x01
    ba9a:	c8 5b       	subi	r28, 0xB8	; 184
    ba9c:	d0 40       	sbci	r29, 0x00	; 0
    ba9e:	62 0f       	add	r22, r18
    baa0:	73 1f       	adc	r23, r19
    baa2:	c2 54       	subi	r28, 0x42	; 66
    baa4:	df 4f       	sbci	r29, 0xFF	; 255
    baa6:	79 83       	std	Y+1, r23	; 0x01
    baa8:	68 83       	st	Y, r22
    baaa:	ce 5b       	subi	r28, 0xBE	; 190
    baac:	d0 40       	sbci	r29, 0x00	; 0
    baae:	f1 01       	movw	r30, r2
    bab0:	94 91       	lpm	r25, Z
    bab2:	91 30       	cpi	r25, 0x01	; 1
    bab4:	09 f4       	brne	.+2      	; 0xbab8 <draw_menu(bool)+0xda8>
    bab6:	c3 c0       	rjmp	.+390    	; 0xbc3e <draw_menu(bool)+0xf2e>
    bab8:	ca 54       	subi	r28, 0x4A	; 74
    baba:	df 4f       	sbci	r29, 0xFF	; 255
    babc:	28 81       	ld	r18, Y
    babe:	39 81       	ldd	r19, Y+1	; 0x01
    bac0:	c6 5b       	subi	r28, 0xB6	; 182
    bac2:	d0 40       	sbci	r29, 0x00	; 0
    bac4:	24 0f       	add	r18, r20
    bac6:	35 1f       	adc	r19, r21
    bac8:	c4 54       	subi	r28, 0x44	; 68
    baca:	df 4f       	sbci	r29, 0xFF	; 255
    bacc:	39 83       	std	Y+1, r19	; 0x01
    bace:	28 83       	st	Y, r18
    bad0:	cc 5b       	subi	r28, 0xBC	; 188
    bad2:	d0 40       	sbci	r29, 0x00	; 0
    bad4:	f1 01       	movw	r30, r2
    bad6:	94 91       	lpm	r25, Z
    bad8:	92 30       	cpi	r25, 0x02	; 2
    bada:	09 f0       	breq	.+2      	; 0xbade <draw_menu(bool)+0xdce>
    badc:	46 c0       	rjmp	.+140    	; 0xbb6a <draw_menu(bool)+0xe5a>
    bade:	f4 01       	movw	r30, r8
    bae0:	25 91       	lpm	r18, Z+
    bae2:	34 91       	lpm	r19, Z
    bae4:	ca 53       	subi	r28, 0x3A	; 58
    bae6:	df 4f       	sbci	r29, 0xFF	; 255
    bae8:	e8 81       	ld	r30, Y
    baea:	f9 81       	ldd	r31, Y+1	; 0x01
    baec:	c6 5c       	subi	r28, 0xC6	; 198
    baee:	d0 40       	sbci	r29, 0x00	; 0
    baf0:	94 91       	lpm	r25, Z
    baf2:	ca 54       	subi	r28, 0x4A	; 74
    baf4:	df 4f       	sbci	r29, 0xFF	; 255
    baf6:	48 81       	ld	r20, Y
    baf8:	59 81       	ldd	r21, Y+1	; 0x01
    bafa:	c6 5b       	subi	r28, 0xB6	; 182
    bafc:	d0 40       	sbci	r29, 0x00	; 0
    bafe:	24 0f       	add	r18, r20
    bb00:	35 1f       	adc	r19, r21
    bb02:	b9 01       	movw	r22, r18
    bb04:	94 9d       	mul	r25, r4
    bb06:	60 0d       	add	r22, r0
    bb08:	71 1d       	adc	r23, r1
    bb0a:	11 24       	eor	r1, r1
    bb0c:	c4 54       	subi	r28, 0x44	; 68
    bb0e:	df 4f       	sbci	r29, 0xFF	; 255
    bb10:	79 83       	std	Y+1, r23	; 0x01
    bb12:	68 83       	st	Y, r22
    bb14:	cc 5b       	subi	r28, 0xBC	; 188
    bb16:	d0 40       	sbci	r29, 0x00	; 0
    bb18:	f5 01       	movw	r30, r10
    bb1a:	25 91       	lpm	r18, Z+
    bb1c:	34 91       	lpm	r19, Z
    bb1e:	c0 54       	subi	r28, 0x40	; 64
    bb20:	df 4f       	sbci	r29, 0xFF	; 255
    bb22:	e8 81       	ld	r30, Y
    bb24:	f9 81       	ldd	r31, Y+1	; 0x01
    bb26:	c0 5c       	subi	r28, 0xC0	; 192
    bb28:	d0 40       	sbci	r29, 0x00	; 0
    bb2a:	94 91       	lpm	r25, Z
    bb2c:	c8 54       	subi	r28, 0x48	; 72
    bb2e:	df 4f       	sbci	r29, 0xFF	; 255
    bb30:	48 81       	ld	r20, Y
    bb32:	59 81       	ldd	r21, Y+1	; 0x01
    bb34:	c8 5b       	subi	r28, 0xB8	; 184
    bb36:	d0 40       	sbci	r29, 0x00	; 0
    bb38:	24 0f       	add	r18, r20
    bb3a:	35 1f       	adc	r19, r21
    bb3c:	b9 01       	movw	r22, r18
    bb3e:	9f 9d       	mul	r25, r15
    bb40:	60 0d       	add	r22, r0
    bb42:	71 1d       	adc	r23, r1
    bb44:	11 24       	eor	r1, r1
    bb46:	c2 54       	subi	r28, 0x42	; 66
    bb48:	df 4f       	sbci	r29, 0xFF	; 255
    bb4a:	79 83       	std	Y+1, r23	; 0x01
    bb4c:	68 83       	st	Y, r22
    bb4e:	ce 5b       	subi	r28, 0xBE	; 190
    bb50:	d0 40       	sbci	r29, 0x00	; 0
    bb52:	43 94       	inc	r4
    bb54:	c8 53       	subi	r28, 0x38	; 56
    bb56:	df 4f       	sbci	r29, 0xFF	; 255
    bb58:	e8 81       	ld	r30, Y
    bb5a:	f9 81       	ldd	r31, Y+1	; 0x01
    bb5c:	c8 5c       	subi	r28, 0xC8	; 200
    bb5e:	d0 40       	sbci	r29, 0x00	; 0
    bb60:	94 91       	lpm	r25, Z
    bb62:	49 16       	cp	r4, r25
    bb64:	10 f0       	brcs	.+4      	; 0xbb6a <draw_menu(bool)+0xe5a>
    bb66:	f3 94       	inc	r15
    bb68:	41 2c       	mov	r4, r1
    bb6a:	c6 54       	subi	r28, 0x46	; 70
    bb6c:	df 4f       	sbci	r29, 0xFF	; 255
    bb6e:	e8 81       	ld	r30, Y
    bb70:	f9 81       	ldd	r31, Y+1	; 0x01
    bb72:	ca 5b       	subi	r28, 0xBA	; 186
    bb74:	d0 40       	sbci	r29, 0x00	; 0
    bb76:	44 91       	lpm	r20, Z
    bb78:	8e 01       	movw	r16, r28
    bb7a:	0f 57       	subi	r16, 0x7F	; 127
    bb7c:	1f 4f       	sbci	r17, 0xFF	; 255
    bb7e:	9e 01       	movw	r18, r28
    bb80:	2f 5f       	subi	r18, 0xFF	; 255
    bb82:	3f 4f       	sbci	r19, 0xFF	; 255
    bb84:	cf 54       	subi	r28, 0x4F	; 79
    bb86:	df 4f       	sbci	r29, 0xFF	; 255
    bb88:	68 81       	ld	r22, Y
    bb8a:	c1 5b       	subi	r28, 0xB1	; 177
    bb8c:	d0 40       	sbci	r29, 0x00	; 0
    bb8e:	cf 52       	subi	r28, 0x2F	; 47
    bb90:	df 4f       	sbci	r29, 0xFF	; 255
    bb92:	e8 81       	ld	r30, Y
    bb94:	f9 81       	ldd	r31, Y+1	; 0x01
    bb96:	c1 5d       	subi	r28, 0xD1	; 209
    bb98:	d0 40       	sbci	r29, 0x00	; 0
    bb9a:	19 95       	eicall
    bb9c:	c5 53       	subi	r28, 0x35	; 53
    bb9e:	df 4f       	sbci	r29, 0xFF	; 255
    bba0:	e8 81       	ld	r30, Y
    bba2:	f9 81       	ldd	r31, Y+1	; 0x01
    bba4:	cb 5c       	subi	r28, 0xCB	; 203
    bba6:	d0 40       	sbci	r29, 0x00	; 0
    bba8:	04 91       	lpm	r16, Z
    bbaa:	c3 53       	subi	r28, 0x33	; 51
    bbac:	df 4f       	sbci	r29, 0xFF	; 255
    bbae:	e8 81       	ld	r30, Y
    bbb0:	f9 81       	ldd	r31, Y+1	; 0x01
    bbb2:	cd 5c       	subi	r28, 0xCD	; 205
    bbb4:	d0 40       	sbci	r29, 0x00	; 0
    bbb6:	25 91       	lpm	r18, Z+
    bbb8:	34 91       	lpm	r19, Z
    bbba:	c1 53       	subi	r28, 0x31	; 49
    bbbc:	df 4f       	sbci	r29, 0xFF	; 255
    bbbe:	e8 81       	ld	r30, Y
    bbc0:	f9 81       	ldd	r31, Y+1	; 0x01
    bbc2:	cf 5c       	subi	r28, 0xCF	; 207
    bbc4:	d0 40       	sbci	r29, 0x00	; 0
    bbc6:	45 91       	lpm	r20, Z+
    bbc8:	54 91       	lpm	r21, Z
    bbca:	e9 80       	ldd	r14, Y+1	; 0x01
    bbcc:	c2 54       	subi	r28, 0x42	; 66
    bbce:	df 4f       	sbci	r29, 0xFF	; 255
    bbd0:	68 81       	ld	r22, Y
    bbd2:	79 81       	ldd	r23, Y+1	; 0x01
    bbd4:	ce 5b       	subi	r28, 0xBE	; 190
    bbd6:	d0 40       	sbci	r29, 0x00	; 0
    bbd8:	c4 54       	subi	r28, 0x44	; 68
    bbda:	df 4f       	sbci	r29, 0xFF	; 255
    bbdc:	88 81       	ld	r24, Y
    bbde:	99 81       	ldd	r25, Y+1	; 0x01
    bbe0:	cc 5b       	subi	r28, 0xBC	; 188
    bbe2:	d0 40       	sbci	r29, 0x00	; 0
    bbe4:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    bbe8:	ce 54       	subi	r28, 0x4E	; 78
    bbea:	df 4f       	sbci	r29, 0xFF	; 255
    bbec:	88 81       	ld	r24, Y
    bbee:	c2 5b       	subi	r28, 0xB2	; 178
    bbf0:	d0 40       	sbci	r29, 0x00	; 0
    bbf2:	8f 5f       	subi	r24, 0xFF	; 255
    bbf4:	ce 54       	subi	r28, 0x4E	; 78
    bbf6:	df 4f       	sbci	r29, 0xFF	; 255
    bbf8:	88 83       	st	Y, r24
    bbfa:	c2 5b       	subi	r28, 0xB2	; 178
    bbfc:	d0 40       	sbci	r29, 0x00	; 0
    bbfe:	31 cf       	rjmp	.-414    	; 0xba62 <draw_menu(bool)+0xd52>
    bc00:	f5 01       	movw	r30, r10
    bc02:	25 91       	lpm	r18, Z+
    bc04:	34 91       	lpm	r19, Z
    bc06:	c0 54       	subi	r28, 0x40	; 64
    bc08:	df 4f       	sbci	r29, 0xFF	; 255
    bc0a:	e8 81       	ld	r30, Y
    bc0c:	f9 81       	ldd	r31, Y+1	; 0x01
    bc0e:	c0 5c       	subi	r28, 0xC0	; 192
    bc10:	d0 40       	sbci	r29, 0x00	; 0
    bc12:	94 91       	lpm	r25, Z
    bc14:	c8 54       	subi	r28, 0x48	; 72
    bc16:	df 4f       	sbci	r29, 0xFF	; 255
    bc18:	68 81       	ld	r22, Y
    bc1a:	79 81       	ldd	r23, Y+1	; 0x01
    bc1c:	c8 5b       	subi	r28, 0xB8	; 184
    bc1e:	d0 40       	sbci	r29, 0x00	; 0
    bc20:	26 0f       	add	r18, r22
    bc22:	37 1f       	adc	r19, r23
    bc24:	f9 01       	movw	r30, r18
    bc26:	94 9d       	mul	r25, r4
    bc28:	e0 0d       	add	r30, r0
    bc2a:	f1 1d       	adc	r31, r1
    bc2c:	11 24       	eor	r1, r1
    bc2e:	c2 54       	subi	r28, 0x42	; 66
    bc30:	df 4f       	sbci	r29, 0xFF	; 255
    bc32:	f9 83       	std	Y+1, r31	; 0x01
    bc34:	e8 83       	st	Y, r30
    bc36:	ce 5b       	subi	r28, 0xBE	; 190
    bc38:	d0 40       	sbci	r29, 0x00	; 0
    bc3a:	43 94       	inc	r4
    bc3c:	38 cf       	rjmp	.-400    	; 0xbaae <draw_menu(bool)+0xd9e>
    bc3e:	f4 01       	movw	r30, r8
    bc40:	25 91       	lpm	r18, Z+
    bc42:	34 91       	lpm	r19, Z
    bc44:	ca 53       	subi	r28, 0x3A	; 58
    bc46:	df 4f       	sbci	r29, 0xFF	; 255
    bc48:	e8 81       	ld	r30, Y
    bc4a:	f9 81       	ldd	r31, Y+1	; 0x01
    bc4c:	c6 5c       	subi	r28, 0xC6	; 198
    bc4e:	d0 40       	sbci	r29, 0x00	; 0
    bc50:	94 91       	lpm	r25, Z
    bc52:	ca 54       	subi	r28, 0x4A	; 74
    bc54:	df 4f       	sbci	r29, 0xFF	; 255
    bc56:	48 81       	ld	r20, Y
    bc58:	59 81       	ldd	r21, Y+1	; 0x01
    bc5a:	c6 5b       	subi	r28, 0xB6	; 182
    bc5c:	d0 40       	sbci	r29, 0x00	; 0
    bc5e:	24 0f       	add	r18, r20
    bc60:	35 1f       	adc	r19, r21
    bc62:	b9 01       	movw	r22, r18
    bc64:	94 9d       	mul	r25, r4
    bc66:	60 0d       	add	r22, r0
    bc68:	71 1d       	adc	r23, r1
    bc6a:	11 24       	eor	r1, r1
    bc6c:	c4 54       	subi	r28, 0x44	; 68
    bc6e:	df 4f       	sbci	r29, 0xFF	; 255
    bc70:	79 83       	std	Y+1, r23	; 0x01
    bc72:	68 83       	st	Y, r22
    bc74:	cc 5b       	subi	r28, 0xBC	; 188
    bc76:	d0 40       	sbci	r29, 0x00	; 0
    bc78:	43 94       	inc	r4
    bc7a:	2c cf       	rjmp	.-424    	; 0xbad4 <draw_menu(bool)+0xdc4>
    bc7c:	ce 53       	subi	r28, 0x3E	; 62
    bc7e:	df 4f       	sbci	r29, 0xFF	; 255
    bc80:	28 81       	ld	r18, Y
    bc82:	39 81       	ldd	r19, Y+1	; 0x01
    bc84:	c2 5c       	subi	r28, 0xC2	; 194
    bc86:	d0 40       	sbci	r29, 0x00	; 0
    bc88:	23 2b       	or	r18, r19
    bc8a:	09 f4       	brne	.+2      	; 0xbc8e <draw_menu(bool)+0xf7e>
    bc8c:	69 c1       	rjmp	.+722    	; 0xbf60 <draw_menu(bool)+0x1250>
    bc8e:	cc 53       	subi	r28, 0x3C	; 60
    bc90:	df 4f       	sbci	r29, 0xFF	; 255
    bc92:	48 81       	ld	r20, Y
    bc94:	59 81       	ldd	r21, Y+1	; 0x01
    bc96:	c4 5c       	subi	r28, 0xC4	; 196
    bc98:	d0 40       	sbci	r29, 0x00	; 0
    bc9a:	45 2b       	or	r20, r21
    bc9c:	09 f4       	brne	.+2      	; 0xbca0 <draw_menu(bool)+0xf90>
    bc9e:	60 c1       	rjmp	.+704    	; 0xbf60 <draw_menu(bool)+0x1250>
    bca0:	ce 54       	subi	r28, 0x4E	; 78
    bca2:	df 4f       	sbci	r29, 0xFF	; 255
    bca4:	18 82       	st	Y, r1
    bca6:	c2 5b       	subi	r28, 0xB2	; 178
    bca8:	d0 40       	sbci	r29, 0x00	; 0
    bcaa:	f6 01       	movw	r30, r12
    bcac:	e2 59       	subi	r30, 0x92	; 146
    bcae:	fd 4f       	sbci	r31, 0xFD	; 253
    bcb0:	e6 0d       	add	r30, r6
    bcb2:	f7 1d       	adc	r31, r7
    bcb4:	25 91       	lpm	r18, Z+
    bcb6:	34 91       	lpm	r19, Z
    bcb8:	c6 01       	movw	r24, r12
    bcba:	87 59       	subi	r24, 0x97	; 151
    bcbc:	9d 4f       	sbci	r25, 0xFD	; 253
    bcbe:	b3 01       	movw	r22, r6
    bcc0:	68 0f       	add	r22, r24
    bcc2:	79 1f       	adc	r23, r25
    bcc4:	ca 53       	subi	r28, 0x3A	; 58
    bcc6:	df 4f       	sbci	r29, 0xFF	; 255
    bcc8:	79 83       	std	Y+1, r23	; 0x01
    bcca:	68 83       	st	Y, r22
    bccc:	c6 5c       	subi	r28, 0xC6	; 198
    bcce:	d0 40       	sbci	r29, 0x00	; 0
    bcd0:	fb 01       	movw	r30, r22
    bcd2:	84 91       	lpm	r24, Z
    bcd4:	cf 54       	subi	r28, 0x4F	; 79
    bcd6:	df 4f       	sbci	r29, 0xFF	; 255
    bcd8:	68 81       	ld	r22, Y
    bcda:	c1 5b       	subi	r28, 0xB1	; 177
    bcdc:	d0 40       	sbci	r29, 0x00	; 0
    bcde:	70 e0       	ldi	r23, 0x00	; 0
    bce0:	40 e0       	ldi	r20, 0x00	; 0
    bce2:	90 e0       	ldi	r25, 0x00	; 0
    bce4:	f9 01       	movw	r30, r18
    bce6:	19 95       	eicall
    bce8:	c0 54       	subi	r28, 0x40	; 64
    bcea:	df 4f       	sbci	r29, 0xFF	; 255
    bcec:	88 83       	st	Y, r24
    bcee:	c0 5c       	subi	r28, 0xC0	; 192
    bcf0:	d0 40       	sbci	r29, 0x00	; 0
    bcf2:	cd 54       	subi	r28, 0x4D	; 77
    bcf4:	df 4f       	sbci	r29, 0xFF	; 255
    bcf6:	88 83       	st	Y, r24
    bcf8:	c3 5b       	subi	r28, 0xB3	; 179
    bcfa:	d0 40       	sbci	r29, 0x00	; 0
    bcfc:	ce 54       	subi	r28, 0x4E	; 78
    bcfe:	df 4f       	sbci	r29, 0xFF	; 255
    bd00:	a8 80       	ld	r10, Y
    bd02:	c2 5b       	subi	r28, 0xB2	; 178
    bd04:	d0 40       	sbci	r29, 0x00	; 0
    bd06:	16 01       	movw	r2, r12
    bd08:	f6 ea       	ldi	r31, 0xA6	; 166
    bd0a:	2f 1a       	sub	r2, r31
    bd0c:	fd ef       	ldi	r31, 0xFD	; 253
    bd0e:	3f 0a       	sbc	r3, r31
    bd10:	26 0c       	add	r2, r6
    bd12:	37 1c       	adc	r3, r7
    bd14:	46 01       	movw	r8, r12
    bd16:	24 ea       	ldi	r18, 0xA4	; 164
    bd18:	82 1a       	sub	r8, r18
    bd1a:	2d ef       	ldi	r18, 0xFD	; 253
    bd1c:	92 0a       	sbc	r9, r18
    bd1e:	86 0c       	add	r8, r6
    bd20:	97 1c       	adc	r9, r7
    bd22:	c6 01       	movw	r24, r12
    bd24:	8b 59       	subi	r24, 0x9B	; 155
    bd26:	9d 4f       	sbci	r25, 0xFD	; 253
    bd28:	a3 01       	movw	r20, r6
    bd2a:	48 0f       	add	r20, r24
    bd2c:	59 1f       	adc	r21, r25
    bd2e:	c6 54       	subi	r28, 0x46	; 70
    bd30:	df 4f       	sbci	r29, 0xFF	; 255
    bd32:	59 83       	std	Y+1, r21	; 0x01
    bd34:	48 83       	st	Y, r20
    bd36:	ca 5b       	subi	r28, 0xBA	; 186
    bd38:	d0 40       	sbci	r29, 0x00	; 0
    bd3a:	01 97       	sbiw	r24, 0x01	; 1
    bd3c:	b3 01       	movw	r22, r6
    bd3e:	68 0f       	add	r22, r24
    bd40:	79 1f       	adc	r23, r25
    bd42:	c8 53       	subi	r28, 0x38	; 56
    bd44:	df 4f       	sbci	r29, 0xFF	; 255
    bd46:	79 83       	std	Y+1, r23	; 0x01
    bd48:	68 83       	st	Y, r22
    bd4a:	c8 5c       	subi	r28, 0xC8	; 200
    bd4c:	d0 40       	sbci	r29, 0x00	; 0
    bd4e:	01 97       	sbiw	r24, 0x01	; 1
    bd50:	f3 01       	movw	r30, r6
    bd52:	e8 0f       	add	r30, r24
    bd54:	f9 1f       	adc	r31, r25
    bd56:	c5 53       	subi	r28, 0x35	; 53
    bd58:	df 4f       	sbci	r29, 0xFF	; 255
    bd5a:	f9 83       	std	Y+1, r31	; 0x01
    bd5c:	e8 83       	st	Y, r30
    bd5e:	cb 5c       	subi	r28, 0xCB	; 203
    bd60:	d0 40       	sbci	r29, 0x00	; 0
    bd62:	03 96       	adiw	r24, 0x03	; 3
    bd64:	93 01       	movw	r18, r6
    bd66:	28 0f       	add	r18, r24
    bd68:	39 1f       	adc	r19, r25
    bd6a:	c3 53       	subi	r28, 0x33	; 51
    bd6c:	df 4f       	sbci	r29, 0xFF	; 255
    bd6e:	39 83       	std	Y+1, r19	; 0x01
    bd70:	28 83       	st	Y, r18
    bd72:	cd 5c       	subi	r28, 0xCD	; 205
    bd74:	d0 40       	sbci	r29, 0x00	; 0
    bd76:	06 97       	sbiw	r24, 0x06	; 6
    bd78:	a3 01       	movw	r20, r6
    bd7a:	48 0f       	add	r20, r24
    bd7c:	59 1f       	adc	r21, r25
    bd7e:	c1 53       	subi	r28, 0x31	; 49
    bd80:	df 4f       	sbci	r29, 0xFF	; 255
    bd82:	59 83       	std	Y+1, r21	; 0x01
    bd84:	48 83       	st	Y, r20
    bd86:	cf 5c       	subi	r28, 0xCF	; 207
    bd88:	d0 40       	sbci	r29, 0x00	; 0
    bd8a:	02 97       	sbiw	r24, 0x02	; 2
    bd8c:	b3 01       	movw	r22, r6
    bd8e:	68 0f       	add	r22, r24
    bd90:	79 1f       	adc	r23, r25
    bd92:	cf 52       	subi	r28, 0x2F	; 47
    bd94:	df 4f       	sbci	r29, 0xFF	; 255
    bd96:	79 83       	std	Y+1, r23	; 0x01
    bd98:	68 83       	st	Y, r22
    bd9a:	c1 5d       	subi	r28, 0xD1	; 209
    bd9c:	d0 40       	sbci	r29, 0x00	; 0
    bd9e:	41 2c       	mov	r4, r1
    bda0:	b1 2c       	mov	r11, r1
    bda2:	c0 54       	subi	r28, 0x40	; 64
    bda4:	df 4f       	sbci	r29, 0xFF	; 255
    bda6:	78 81       	ld	r23, Y
    bda8:	c0 5c       	subi	r28, 0xC0	; 192
    bdaa:	d0 40       	sbci	r29, 0x00	; 0
    bdac:	a7 16       	cp	r10, r23
    bdae:	08 f0       	brcs	.+2      	; 0xbdb2 <draw_menu(bool)+0x10a2>
    bdb0:	d7 c0       	rjmp	.+430    	; 0xbf60 <draw_menu(bool)+0x1250>
    bdb2:	f1 01       	movw	r30, r2
    bdb4:	25 91       	lpm	r18, Z+
    bdb6:	34 91       	lpm	r19, Z
    bdb8:	f4 01       	movw	r30, r8
    bdba:	85 91       	lpm	r24, Z+
    bdbc:	94 91       	lpm	r25, Z
    bdbe:	c6 54       	subi	r28, 0x46	; 70
    bdc0:	df 4f       	sbci	r29, 0xFF	; 255
    bdc2:	e8 81       	ld	r30, Y
    bdc4:	f9 81       	ldd	r31, Y+1	; 0x01
    bdc6:	ca 5b       	subi	r28, 0xBA	; 186
    bdc8:	d0 40       	sbci	r29, 0x00	; 0
    bdca:	44 91       	lpm	r20, Z
    bdcc:	44 23       	and	r20, r20
    bdce:	09 f4       	brne	.+2      	; 0xbdd2 <draw_menu(bool)+0x10c2>
    bdd0:	cb c0       	rjmp	.+406    	; 0xbf68 <draw_menu(bool)+0x1258>
    bdd2:	c8 54       	subi	r28, 0x48	; 72
    bdd4:	df 4f       	sbci	r29, 0xFF	; 255
    bdd6:	48 81       	ld	r20, Y
    bdd8:	59 81       	ldd	r21, Y+1	; 0x01
    bdda:	c8 5b       	subi	r28, 0xB8	; 184
    bddc:	d0 40       	sbci	r29, 0x00	; 0
    bdde:	48 0f       	add	r20, r24
    bde0:	59 1f       	adc	r21, r25
    bde2:	c2 54       	subi	r28, 0x42	; 66
    bde4:	df 4f       	sbci	r29, 0xFF	; 255
    bde6:	59 83       	std	Y+1, r21	; 0x01
    bde8:	48 83       	st	Y, r20
    bdea:	ce 5b       	subi	r28, 0xBE	; 190
    bdec:	d0 40       	sbci	r29, 0x00	; 0
    bdee:	c6 54       	subi	r28, 0x46	; 70
    bdf0:	df 4f       	sbci	r29, 0xFF	; 255
    bdf2:	e8 81       	ld	r30, Y
    bdf4:	f9 81       	ldd	r31, Y+1	; 0x01
    bdf6:	ca 5b       	subi	r28, 0xBA	; 186
    bdf8:	d0 40       	sbci	r29, 0x00	; 0
    bdfa:	84 91       	lpm	r24, Z
    bdfc:	81 30       	cpi	r24, 0x01	; 1
    bdfe:	09 f4       	brne	.+2      	; 0xbe02 <draw_menu(bool)+0x10f2>
    be00:	d2 c0       	rjmp	.+420    	; 0xbfa6 <draw_menu(bool)+0x1296>
    be02:	ca 54       	subi	r28, 0x4A	; 74
    be04:	df 4f       	sbci	r29, 0xFF	; 255
    be06:	48 81       	ld	r20, Y
    be08:	59 81       	ldd	r21, Y+1	; 0x01
    be0a:	c6 5b       	subi	r28, 0xB6	; 182
    be0c:	d0 40       	sbci	r29, 0x00	; 0
    be0e:	42 0f       	add	r20, r18
    be10:	53 1f       	adc	r21, r19
    be12:	c4 54       	subi	r28, 0x44	; 68
    be14:	df 4f       	sbci	r29, 0xFF	; 255
    be16:	59 83       	std	Y+1, r21	; 0x01
    be18:	48 83       	st	Y, r20
    be1a:	cc 5b       	subi	r28, 0xBC	; 188
    be1c:	d0 40       	sbci	r29, 0x00	; 0
    be1e:	c6 54       	subi	r28, 0x46	; 70
    be20:	df 4f       	sbci	r29, 0xFF	; 255
    be22:	e8 81       	ld	r30, Y
    be24:	f9 81       	ldd	r31, Y+1	; 0x01
    be26:	ca 5b       	subi	r28, 0xBA	; 186
    be28:	d0 40       	sbci	r29, 0x00	; 0
    be2a:	84 91       	lpm	r24, Z
    be2c:	82 30       	cpi	r24, 0x02	; 2
    be2e:	09 f0       	breq	.+2      	; 0xbe32 <draw_menu(bool)+0x1122>
    be30:	46 c0       	rjmp	.+140    	; 0xbebe <draw_menu(bool)+0x11ae>
    be32:	f1 01       	movw	r30, r2
    be34:	85 91       	lpm	r24, Z+
    be36:	94 91       	lpm	r25, Z
    be38:	c5 53       	subi	r28, 0x35	; 53
    be3a:	df 4f       	sbci	r29, 0xFF	; 255
    be3c:	e8 81       	ld	r30, Y
    be3e:	f9 81       	ldd	r31, Y+1	; 0x01
    be40:	cb 5c       	subi	r28, 0xCB	; 203
    be42:	d0 40       	sbci	r29, 0x00	; 0
    be44:	24 91       	lpm	r18, Z
    be46:	ca 54       	subi	r28, 0x4A	; 74
    be48:	df 4f       	sbci	r29, 0xFF	; 255
    be4a:	48 81       	ld	r20, Y
    be4c:	59 81       	ldd	r21, Y+1	; 0x01
    be4e:	c6 5b       	subi	r28, 0xB6	; 182
    be50:	d0 40       	sbci	r29, 0x00	; 0
    be52:	84 0f       	add	r24, r20
    be54:	95 1f       	adc	r25, r21
    be56:	bc 01       	movw	r22, r24
    be58:	2b 9d       	mul	r18, r11
    be5a:	60 0d       	add	r22, r0
    be5c:	71 1d       	adc	r23, r1
    be5e:	11 24       	eor	r1, r1
    be60:	c4 54       	subi	r28, 0x44	; 68
    be62:	df 4f       	sbci	r29, 0xFF	; 255
    be64:	79 83       	std	Y+1, r23	; 0x01
    be66:	68 83       	st	Y, r22
    be68:	cc 5b       	subi	r28, 0xBC	; 188
    be6a:	d0 40       	sbci	r29, 0x00	; 0
    be6c:	f4 01       	movw	r30, r8
    be6e:	85 91       	lpm	r24, Z+
    be70:	94 91       	lpm	r25, Z
    be72:	c8 53       	subi	r28, 0x38	; 56
    be74:	df 4f       	sbci	r29, 0xFF	; 255
    be76:	e8 81       	ld	r30, Y
    be78:	f9 81       	ldd	r31, Y+1	; 0x01
    be7a:	c8 5c       	subi	r28, 0xC8	; 200
    be7c:	d0 40       	sbci	r29, 0x00	; 0
    be7e:	24 91       	lpm	r18, Z
    be80:	c8 54       	subi	r28, 0x48	; 72
    be82:	df 4f       	sbci	r29, 0xFF	; 255
    be84:	48 81       	ld	r20, Y
    be86:	59 81       	ldd	r21, Y+1	; 0x01
    be88:	c8 5b       	subi	r28, 0xB8	; 184
    be8a:	d0 40       	sbci	r29, 0x00	; 0
    be8c:	84 0f       	add	r24, r20
    be8e:	95 1f       	adc	r25, r21
    be90:	bc 01       	movw	r22, r24
    be92:	24 9d       	mul	r18, r4
    be94:	60 0d       	add	r22, r0
    be96:	71 1d       	adc	r23, r1
    be98:	11 24       	eor	r1, r1
    be9a:	c2 54       	subi	r28, 0x42	; 66
    be9c:	df 4f       	sbci	r29, 0xFF	; 255
    be9e:	79 83       	std	Y+1, r23	; 0x01
    bea0:	68 83       	st	Y, r22
    bea2:	ce 5b       	subi	r28, 0xBE	; 190
    bea4:	d0 40       	sbci	r29, 0x00	; 0
    bea6:	b3 94       	inc	r11
    bea8:	c3 53       	subi	r28, 0x33	; 51
    beaa:	df 4f       	sbci	r29, 0xFF	; 255
    beac:	e8 81       	ld	r30, Y
    beae:	f9 81       	ldd	r31, Y+1	; 0x01
    beb0:	cd 5c       	subi	r28, 0xCD	; 205
    beb2:	d0 40       	sbci	r29, 0x00	; 0
    beb4:	84 91       	lpm	r24, Z
    beb6:	b8 16       	cp	r11, r24
    beb8:	10 f0       	brcs	.+4      	; 0xbebe <draw_menu(bool)+0x11ae>
    beba:	43 94       	inc	r4
    bebc:	b1 2c       	mov	r11, r1
    bebe:	c1 53       	subi	r28, 0x31	; 49
    bec0:	df 4f       	sbci	r29, 0xFF	; 255
    bec2:	e8 81       	ld	r30, Y
    bec4:	f9 81       	ldd	r31, Y+1	; 0x01
    bec6:	cf 5c       	subi	r28, 0xCF	; 207
    bec8:	d0 40       	sbci	r29, 0x00	; 0
    beca:	25 91       	lpm	r18, Z+
    becc:	34 91       	lpm	r19, Z
    bece:	cf 52       	subi	r28, 0x2F	; 47
    bed0:	df 4f       	sbci	r29, 0xFF	; 255
    bed2:	e8 81       	ld	r30, Y
    bed4:	f9 81       	ldd	r31, Y+1	; 0x01
    bed6:	c1 5d       	subi	r28, 0xD1	; 209
    bed8:	d0 40       	sbci	r29, 0x00	; 0
    beda:	45 91       	lpm	r20, Z+
    bedc:	54 91       	lpm	r21, Z
    bede:	cc 53       	subi	r28, 0x3C	; 60
    bee0:	df 4f       	sbci	r29, 0xFF	; 255
    bee2:	e8 80       	ld	r14, Y
    bee4:	f9 80       	ldd	r15, Y+1	; 0x01
    bee6:	c4 5c       	subi	r28, 0xC4	; 196
    bee8:	d0 40       	sbci	r29, 0x00	; 0
    beea:	ce 53       	subi	r28, 0x3E	; 62
    beec:	df 4f       	sbci	r29, 0xFF	; 255
    beee:	08 81       	ld	r16, Y
    bef0:	19 81       	ldd	r17, Y+1	; 0x01
    bef2:	c2 5c       	subi	r28, 0xC2	; 194
    bef4:	d0 40       	sbci	r29, 0x00	; 0
    bef6:	c2 54       	subi	r28, 0x42	; 66
    bef8:	df 4f       	sbci	r29, 0xFF	; 255
    befa:	68 81       	ld	r22, Y
    befc:	79 81       	ldd	r23, Y+1	; 0x01
    befe:	ce 5b       	subi	r28, 0xBE	; 190
    bf00:	d0 40       	sbci	r29, 0x00	; 0
    bf02:	c4 54       	subi	r28, 0x44	; 68
    bf04:	df 4f       	sbci	r29, 0xFF	; 255
    bf06:	88 81       	ld	r24, Y
    bf08:	99 81       	ldd	r25, Y+1	; 0x01
    bf0a:	cc 5b       	subi	r28, 0xBC	; 188
    bf0c:	d0 40       	sbci	r29, 0x00	; 0
    bf0e:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    bf12:	18 2f       	mov	r17, r24
    bf14:	81 e0       	ldi	r24, 0x01	; 1
    bf16:	8a 0d       	add	r24, r10
    bf18:	11 23       	and	r17, r17
    bf1a:	21 f1       	breq	.+72     	; 0xbf64 <draw_menu(bool)+0x1254>
    bf1c:	ce 54       	subi	r28, 0x4E	; 78
    bf1e:	df 4f       	sbci	r29, 0xFF	; 255
    bf20:	a8 82       	st	Y, r10
    bf22:	c2 5b       	subi	r28, 0xB2	; 178
    bf24:	d0 40       	sbci	r29, 0x00	; 0
    bf26:	f6 01       	movw	r30, r12
    bf28:	e4 59       	subi	r30, 0x94	; 148
    bf2a:	fd 4f       	sbci	r31, 0xFD	; 253
    bf2c:	e6 0d       	add	r30, r6
    bf2e:	f7 1d       	adc	r31, r7
    bf30:	25 91       	lpm	r18, Z+
    bf32:	34 91       	lpm	r19, Z
    bf34:	ca 53       	subi	r28, 0x3A	; 58
    bf36:	df 4f       	sbci	r29, 0xFF	; 255
    bf38:	e8 81       	ld	r30, Y
    bf3a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf3c:	c6 5c       	subi	r28, 0xC6	; 198
    bf3e:	d0 40       	sbci	r29, 0x00	; 0
    bf40:	84 91       	lpm	r24, Z
    bf42:	cf 54       	subi	r28, 0x4F	; 79
    bf44:	df 4f       	sbci	r29, 0xFF	; 255
    bf46:	68 81       	ld	r22, Y
    bf48:	c1 5b       	subi	r28, 0xB1	; 177
    bf4a:	d0 40       	sbci	r29, 0x00	; 0
    bf4c:	70 e0       	ldi	r23, 0x00	; 0
    bf4e:	4a 2d       	mov	r20, r10
    bf50:	90 e0       	ldi	r25, 0x00	; 0
    bf52:	f9 01       	movw	r30, r18
    bf54:	19 95       	eicall
    bf56:	c6 53       	subi	r28, 0x36	; 54
    bf58:	df 4f       	sbci	r29, 0xFF	; 255
    bf5a:	18 83       	st	Y, r17
    bf5c:	ca 5c       	subi	r28, 0xCA	; 202
    bf5e:	d0 40       	sbci	r29, 0x00	; 0
    bf60:	53 94       	inc	r5
    bf62:	d6 cc       	rjmp	.-1620   	; 0xb910 <draw_menu(bool)+0xc00>
    bf64:	a8 2e       	mov	r10, r24
    bf66:	1d cf       	rjmp	.-454    	; 0xbda2 <draw_menu(bool)+0x1092>
    bf68:	f4 01       	movw	r30, r8
    bf6a:	85 91       	lpm	r24, Z+
    bf6c:	94 91       	lpm	r25, Z
    bf6e:	c8 53       	subi	r28, 0x38	; 56
    bf70:	df 4f       	sbci	r29, 0xFF	; 255
    bf72:	e8 81       	ld	r30, Y
    bf74:	f9 81       	ldd	r31, Y+1	; 0x01
    bf76:	c8 5c       	subi	r28, 0xC8	; 200
    bf78:	d0 40       	sbci	r29, 0x00	; 0
    bf7a:	44 91       	lpm	r20, Z
    bf7c:	c8 54       	subi	r28, 0x48	; 72
    bf7e:	df 4f       	sbci	r29, 0xFF	; 255
    bf80:	68 81       	ld	r22, Y
    bf82:	79 81       	ldd	r23, Y+1	; 0x01
    bf84:	c8 5b       	subi	r28, 0xB8	; 184
    bf86:	d0 40       	sbci	r29, 0x00	; 0
    bf88:	86 0f       	add	r24, r22
    bf8a:	97 1f       	adc	r25, r23
    bf8c:	fc 01       	movw	r30, r24
    bf8e:	4b 9d       	mul	r20, r11
    bf90:	e0 0d       	add	r30, r0
    bf92:	f1 1d       	adc	r31, r1
    bf94:	11 24       	eor	r1, r1
    bf96:	c2 54       	subi	r28, 0x42	; 66
    bf98:	df 4f       	sbci	r29, 0xFF	; 255
    bf9a:	f9 83       	std	Y+1, r31	; 0x01
    bf9c:	e8 83       	st	Y, r30
    bf9e:	ce 5b       	subi	r28, 0xBE	; 190
    bfa0:	d0 40       	sbci	r29, 0x00	; 0
    bfa2:	b3 94       	inc	r11
    bfa4:	24 cf       	rjmp	.-440    	; 0xbdee <draw_menu(bool)+0x10de>
    bfa6:	f1 01       	movw	r30, r2
    bfa8:	85 91       	lpm	r24, Z+
    bfaa:	94 91       	lpm	r25, Z
    bfac:	c5 53       	subi	r28, 0x35	; 53
    bfae:	df 4f       	sbci	r29, 0xFF	; 255
    bfb0:	e8 81       	ld	r30, Y
    bfb2:	f9 81       	ldd	r31, Y+1	; 0x01
    bfb4:	cb 5c       	subi	r28, 0xCB	; 203
    bfb6:	d0 40       	sbci	r29, 0x00	; 0
    bfb8:	24 91       	lpm	r18, Z
    bfba:	ca 54       	subi	r28, 0x4A	; 74
    bfbc:	df 4f       	sbci	r29, 0xFF	; 255
    bfbe:	48 81       	ld	r20, Y
    bfc0:	59 81       	ldd	r21, Y+1	; 0x01
    bfc2:	c6 5b       	subi	r28, 0xB6	; 182
    bfc4:	d0 40       	sbci	r29, 0x00	; 0
    bfc6:	84 0f       	add	r24, r20
    bfc8:	95 1f       	adc	r25, r21
    bfca:	bc 01       	movw	r22, r24
    bfcc:	2b 9d       	mul	r18, r11
    bfce:	60 0d       	add	r22, r0
    bfd0:	71 1d       	adc	r23, r1
    bfd2:	11 24       	eor	r1, r1
    bfd4:	c4 54       	subi	r28, 0x44	; 68
    bfd6:	df 4f       	sbci	r29, 0xFF	; 255
    bfd8:	79 83       	std	Y+1, r23	; 0x01
    bfda:	68 83       	st	Y, r22
    bfdc:	cc 5b       	subi	r28, 0xBC	; 188
    bfde:	d0 40       	sbci	r29, 0x00	; 0
    bfe0:	b3 94       	inc	r11
    bfe2:	1d cf       	rjmp	.-454    	; 0xbe1e <draw_menu(bool)+0x110e>
    bfe4:	c6 53       	subi	r28, 0x36	; 54
    bfe6:	df 4f       	sbci	r29, 0xFF	; 255
    bfe8:	f8 81       	ld	r31, Y
    bfea:	ca 5c       	subi	r28, 0xCA	; 202
    bfec:	d0 40       	sbci	r29, 0x00	; 0
    bfee:	f1 11       	cpse	r31, r1
    bff0:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <draw_menu(bool)+0x2210>
    bff4:	91 2c       	mov	r9, r1
    bff6:	93 01       	movw	r18, r6
    bff8:	2f 53       	subi	r18, 0x3F	; 63
    bffa:	3d 4f       	sbci	r19, 0xFD	; 253
    bffc:	cc 52       	subi	r28, 0x2C	; 44
    bffe:	df 4f       	sbci	r29, 0xFF	; 255
    c000:	39 83       	std	Y+1, r19	; 0x01
    c002:	28 83       	st	Y, r18
    c004:	c4 5d       	subi	r28, 0xD4	; 212
    c006:	d0 40       	sbci	r29, 0x00	; 0
    c008:	cc 52       	subi	r28, 0x2C	; 44
    c00a:	df 4f       	sbci	r29, 0xFF	; 255
    c00c:	e8 81       	ld	r30, Y
    c00e:	f9 81       	ldd	r31, Y+1	; 0x01
    c010:	c4 5d       	subi	r28, 0xD4	; 212
    c012:	d0 40       	sbci	r29, 0x00	; 0
    c014:	84 91       	lpm	r24, Z
    c016:	98 16       	cp	r9, r24
    c018:	08 f0       	brcs	.+2      	; 0xc01c <draw_menu(bool)+0x130c>
    c01a:	1a c3       	rjmp	.+1588   	; 0xc650 <draw_menu(bool)+0x1940>
    c01c:	f7 e1       	ldi	r31, 0x17	; 23
    c01e:	9f 9e       	mul	r9, r31
    c020:	20 01       	movw	r4, r0
    c022:	11 24       	eor	r1, r1
    c024:	f2 01       	movw	r30, r4
    c026:	ee 53       	subi	r30, 0x3E	; 62
    c028:	fe 4f       	sbci	r31, 0xFE	; 254
    c02a:	e6 0d       	add	r30, r6
    c02c:	f7 1d       	adc	r31, r7
    c02e:	84 91       	lpm	r24, Z
    c030:	cd 52       	subi	r28, 0x2D	; 45
    c032:	df 4f       	sbci	r29, 0xFF	; 255
    c034:	68 81       	ld	r22, Y
    c036:	c3 5d       	subi	r28, 0xD3	; 211
    c038:	d0 40       	sbci	r29, 0x00	; 0
    c03a:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    c03e:	88 23       	and	r24, r24
    c040:	09 f4       	brne	.+2      	; 0xc044 <draw_menu(bool)+0x1334>
    c042:	83 c1       	rjmp	.+774    	; 0xc34a <draw_menu(bool)+0x163a>
    c044:	ce 54       	subi	r28, 0x4E	; 78
    c046:	df 4f       	sbci	r29, 0xFF	; 255
    c048:	18 82       	st	Y, r1
    c04a:	c2 5b       	subi	r28, 0xB2	; 178
    c04c:	d0 40       	sbci	r29, 0x00	; 0
    c04e:	f2 01       	movw	r30, r4
    c050:	e0 54       	subi	r30, 0x40	; 64
    c052:	fe 4f       	sbci	r31, 0xFE	; 254
    c054:	e6 0d       	add	r30, r6
    c056:	f7 1d       	adc	r31, r7
    c058:	25 91       	lpm	r18, Z+
    c05a:	34 91       	lpm	r19, Z
    c05c:	c2 01       	movw	r24, r4
    c05e:	85 54       	subi	r24, 0x45	; 69
    c060:	9e 4f       	sbci	r25, 0xFE	; 254
    c062:	a3 01       	movw	r20, r6
    c064:	48 0f       	add	r20, r24
    c066:	59 1f       	adc	r21, r25
    c068:	c6 54       	subi	r28, 0x46	; 70
    c06a:	df 4f       	sbci	r29, 0xFF	; 255
    c06c:	59 83       	std	Y+1, r21	; 0x01
    c06e:	48 83       	st	Y, r20
    c070:	ca 5b       	subi	r28, 0xBA	; 186
    c072:	d0 40       	sbci	r29, 0x00	; 0
    c074:	fa 01       	movw	r30, r20
    c076:	84 91       	lpm	r24, Z
    c078:	cf 54       	subi	r28, 0x4F	; 79
    c07a:	df 4f       	sbci	r29, 0xFF	; 255
    c07c:	68 81       	ld	r22, Y
    c07e:	c1 5b       	subi	r28, 0xB1	; 177
    c080:	d0 40       	sbci	r29, 0x00	; 0
    c082:	70 e0       	ldi	r23, 0x00	; 0
    c084:	40 e0       	ldi	r20, 0x00	; 0
    c086:	90 e0       	ldi	r25, 0x00	; 0
    c088:	f9 01       	movw	r30, r18
    c08a:	19 95       	eicall
    c08c:	cd 54       	subi	r28, 0x4D	; 77
    c08e:	df 4f       	sbci	r29, 0xFF	; 255
    c090:	88 83       	st	Y, r24
    c092:	c3 5b       	subi	r28, 0xB3	; 179
    c094:	d0 40       	sbci	r29, 0x00	; 0
    c096:	f2 01       	movw	r30, r4
    c098:	e4 54       	subi	r30, 0x44	; 68
    c09a:	fe 4f       	sbci	r31, 0xFE	; 254
    c09c:	e6 0d       	add	r30, r6
    c09e:	f7 1d       	adc	r31, r7
    c0a0:	25 91       	lpm	r18, Z+
    c0a2:	34 91       	lpm	r19, Z
    c0a4:	ca 52       	subi	r28, 0x2A	; 42
    c0a6:	df 4f       	sbci	r29, 0xFF	; 255
    c0a8:	39 83       	std	Y+1, r19	; 0x01
    c0aa:	28 83       	st	Y, r18
    c0ac:	c6 5d       	subi	r28, 0xD6	; 214
    c0ae:	d0 40       	sbci	r29, 0x00	; 0
    c0b0:	f2 01       	movw	r30, r4
    c0b2:	e6 54       	subi	r30, 0x46	; 70
    c0b4:	fe 4f       	sbci	r31, 0xFE	; 254
    c0b6:	e6 0d       	add	r30, r6
    c0b8:	f7 1d       	adc	r31, r7
    c0ba:	44 91       	lpm	r20, Z
    c0bc:	4f 3f       	cpi	r20, 0xFF	; 255
    c0be:	b9 f0       	breq	.+46     	; 0xc0ee <draw_menu(bool)+0x13de>
    c0c0:	f2 01       	movw	r30, r4
    c0c2:	e8 54       	subi	r30, 0x48	; 72
    c0c4:	fe 4f       	sbci	r31, 0xFE	; 254
    c0c6:	e6 0d       	add	r30, r6
    c0c8:	f7 1d       	adc	r31, r7
    c0ca:	24 91       	lpm	r18, Z
    c0cc:	f2 01       	movw	r30, r4
    c0ce:	e7 54       	subi	r30, 0x47	; 71
    c0d0:	fe 4f       	sbci	r31, 0xFE	; 254
    c0d2:	e6 0d       	add	r30, r6
    c0d4:	f7 1d       	adc	r31, r7
    c0d6:	e4 91       	lpm	r30, Z
    c0d8:	2e 9f       	mul	r18, r30
    c0da:	20 2d       	mov	r18, r0
    c0dc:	11 24       	eor	r1, r1
    c0de:	be 01       	movw	r22, r28
    c0e0:	6d 54       	subi	r22, 0x4D	; 77
    c0e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0e4:	ce 01       	movw	r24, r28
    c0e6:	8e 54       	subi	r24, 0x4E	; 78
    c0e8:	9f 4f       	sbci	r25, 0xFF	; 255
    c0ea:	0e 94 b5 52 	call	0xa56a	; 0xa56a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c0ee:	12 01       	movw	r2, r4
    c0f0:	34 e5       	ldi	r19, 0x54	; 84
    c0f2:	23 1a       	sub	r2, r19
    c0f4:	3e ef       	ldi	r19, 0xFE	; 254
    c0f6:	33 0a       	sbc	r3, r19
    c0f8:	26 0c       	add	r2, r6
    c0fa:	37 1c       	adc	r3, r7
    c0fc:	c2 01       	movw	r24, r4
    c0fe:	82 55       	subi	r24, 0x52	; 82
    c100:	9e 4f       	sbci	r25, 0xFE	; 254
    c102:	a3 01       	movw	r20, r6
    c104:	48 0f       	add	r20, r24
    c106:	59 1f       	adc	r21, r25
    c108:	c0 54       	subi	r28, 0x40	; 64
    c10a:	df 4f       	sbci	r29, 0xFF	; 255
    c10c:	59 83       	std	Y+1, r21	; 0x01
    c10e:	48 83       	st	Y, r20
    c110:	c0 5c       	subi	r28, 0xC0	; 192
    c112:	d0 40       	sbci	r29, 0x00	; 0
    c114:	09 96       	adiw	r24, 0x09	; 9
    c116:	b3 01       	movw	r22, r6
    c118:	68 0f       	add	r22, r24
    c11a:	79 1f       	adc	r23, r25
    c11c:	ca 53       	subi	r28, 0x3A	; 58
    c11e:	df 4f       	sbci	r29, 0xFF	; 255
    c120:	79 83       	std	Y+1, r23	; 0x01
    c122:	68 83       	st	Y, r22
    c124:	c6 5c       	subi	r28, 0xC6	; 198
    c126:	d0 40       	sbci	r29, 0x00	; 0
    c128:	01 97       	sbiw	r24, 0x01	; 1
    c12a:	f3 01       	movw	r30, r6
    c12c:	e8 0f       	add	r30, r24
    c12e:	f9 1f       	adc	r31, r25
    c130:	c5 53       	subi	r28, 0x35	; 53
    c132:	df 4f       	sbci	r29, 0xFF	; 255
    c134:	f9 83       	std	Y+1, r31	; 0x01
    c136:	e8 83       	st	Y, r30
    c138:	cb 5c       	subi	r28, 0xCB	; 203
    c13a:	d0 40       	sbci	r29, 0x00	; 0
    c13c:	01 97       	sbiw	r24, 0x01	; 1
    c13e:	93 01       	movw	r18, r6
    c140:	28 0f       	add	r18, r24
    c142:	39 1f       	adc	r19, r25
    c144:	c3 53       	subi	r28, 0x33	; 51
    c146:	df 4f       	sbci	r29, 0xFF	; 255
    c148:	39 83       	std	Y+1, r19	; 0x01
    c14a:	28 83       	st	Y, r18
    c14c:	cd 5c       	subi	r28, 0xCD	; 205
    c14e:	d0 40       	sbci	r29, 0x00	; 0
    c150:	01 97       	sbiw	r24, 0x01	; 1
    c152:	a3 01       	movw	r20, r6
    c154:	48 0f       	add	r20, r24
    c156:	59 1f       	adc	r21, r25
    c158:	c8 53       	subi	r28, 0x38	; 56
    c15a:	df 4f       	sbci	r29, 0xFF	; 255
    c15c:	59 83       	std	Y+1, r21	; 0x01
    c15e:	48 83       	st	Y, r20
    c160:	c8 5c       	subi	r28, 0xC8	; 200
    c162:	d0 40       	sbci	r29, 0x00	; 0
    c164:	02 97       	sbiw	r24, 0x02	; 2
    c166:	b3 01       	movw	r22, r6
    c168:	68 0f       	add	r22, r24
    c16a:	79 1f       	adc	r23, r25
    c16c:	c1 53       	subi	r28, 0x31	; 49
    c16e:	df 4f       	sbci	r29, 0xFF	; 255
    c170:	79 83       	std	Y+1, r23	; 0x01
    c172:	68 83       	st	Y, r22
    c174:	cf 5c       	subi	r28, 0xCF	; 207
    c176:	d0 40       	sbci	r29, 0x00	; 0
    c178:	02 97       	sbiw	r24, 0x02	; 2
    c17a:	f3 01       	movw	r30, r6
    c17c:	e8 0f       	add	r30, r24
    c17e:	f9 1f       	adc	r31, r25
    c180:	cf 52       	subi	r28, 0x2F	; 47
    c182:	df 4f       	sbci	r29, 0xFF	; 255
    c184:	f9 83       	std	Y+1, r31	; 0x01
    c186:	e8 83       	st	Y, r30
    c188:	c1 5d       	subi	r28, 0xD1	; 209
    c18a:	d0 40       	sbci	r29, 0x00	; 0
    c18c:	f1 2c       	mov	r15, r1
    c18e:	ce 54       	subi	r28, 0x4E	; 78
    c190:	df 4f       	sbci	r29, 0xFF	; 255
    c192:	88 81       	ld	r24, Y
    c194:	c2 5b       	subi	r28, 0xB2	; 178
    c196:	d0 40       	sbci	r29, 0x00	; 0
    c198:	cd 54       	subi	r28, 0x4D	; 77
    c19a:	df 4f       	sbci	r29, 0xFF	; 255
    c19c:	98 81       	ld	r25, Y
    c19e:	c3 5b       	subi	r28, 0xB3	; 179
    c1a0:	d0 40       	sbci	r29, 0x00	; 0
    c1a2:	89 17       	cp	r24, r25
    c1a4:	08 f0       	brcs	.+2      	; 0xc1a8 <draw_menu(bool)+0x1498>
    c1a6:	d1 c0       	rjmp	.+418    	; 0xc34a <draw_menu(bool)+0x163a>
    c1a8:	f1 01       	movw	r30, r2
    c1aa:	45 91       	lpm	r20, Z+
    c1ac:	54 91       	lpm	r21, Z
    c1ae:	c0 54       	subi	r28, 0x40	; 64
    c1b0:	df 4f       	sbci	r29, 0xFF	; 255
    c1b2:	e8 81       	ld	r30, Y
    c1b4:	f9 81       	ldd	r31, Y+1	; 0x01
    c1b6:	c0 5c       	subi	r28, 0xC0	; 192
    c1b8:	d0 40       	sbci	r29, 0x00	; 0
    c1ba:	25 91       	lpm	r18, Z+
    c1bc:	34 91       	lpm	r19, Z
    c1be:	ca 53       	subi	r28, 0x3A	; 58
    c1c0:	df 4f       	sbci	r29, 0xFF	; 255
    c1c2:	e8 81       	ld	r30, Y
    c1c4:	f9 81       	ldd	r31, Y+1	; 0x01
    c1c6:	c6 5c       	subi	r28, 0xC6	; 198
    c1c8:	d0 40       	sbci	r29, 0x00	; 0
    c1ca:	94 91       	lpm	r25, Z
    c1cc:	99 23       	and	r25, r25
    c1ce:	09 f4       	brne	.+2      	; 0xc1d2 <draw_menu(bool)+0x14c2>
    c1d0:	7b c0       	rjmp	.+246    	; 0xc2c8 <draw_menu(bool)+0x15b8>
    c1d2:	c8 54       	subi	r28, 0x48	; 72
    c1d4:	df 4f       	sbci	r29, 0xFF	; 255
    c1d6:	68 81       	ld	r22, Y
    c1d8:	79 81       	ldd	r23, Y+1	; 0x01
    c1da:	c8 5b       	subi	r28, 0xB8	; 184
    c1dc:	d0 40       	sbci	r29, 0x00	; 0
    c1de:	62 0f       	add	r22, r18
    c1e0:	73 1f       	adc	r23, r19
    c1e2:	c2 54       	subi	r28, 0x42	; 66
    c1e4:	df 4f       	sbci	r29, 0xFF	; 255
    c1e6:	79 83       	std	Y+1, r23	; 0x01
    c1e8:	68 83       	st	Y, r22
    c1ea:	ce 5b       	subi	r28, 0xBE	; 190
    c1ec:	d0 40       	sbci	r29, 0x00	; 0
    c1ee:	ca 53       	subi	r28, 0x3A	; 58
    c1f0:	df 4f       	sbci	r29, 0xFF	; 255
    c1f2:	e8 81       	ld	r30, Y
    c1f4:	f9 81       	ldd	r31, Y+1	; 0x01
    c1f6:	c6 5c       	subi	r28, 0xC6	; 198
    c1f8:	d0 40       	sbci	r29, 0x00	; 0
    c1fa:	94 91       	lpm	r25, Z
    c1fc:	91 30       	cpi	r25, 0x01	; 1
    c1fe:	09 f4       	brne	.+2      	; 0xc202 <draw_menu(bool)+0x14f2>
    c200:	86 c0       	rjmp	.+268    	; 0xc30e <draw_menu(bool)+0x15fe>
    c202:	ca 54       	subi	r28, 0x4A	; 74
    c204:	df 4f       	sbci	r29, 0xFF	; 255
    c206:	28 81       	ld	r18, Y
    c208:	39 81       	ldd	r19, Y+1	; 0x01
    c20a:	c6 5b       	subi	r28, 0xB6	; 182
    c20c:	d0 40       	sbci	r29, 0x00	; 0
    c20e:	24 0f       	add	r18, r20
    c210:	35 1f       	adc	r19, r21
    c212:	c4 54       	subi	r28, 0x44	; 68
    c214:	df 4f       	sbci	r29, 0xFF	; 255
    c216:	39 83       	std	Y+1, r19	; 0x01
    c218:	28 83       	st	Y, r18
    c21a:	cc 5b       	subi	r28, 0xBC	; 188
    c21c:	d0 40       	sbci	r29, 0x00	; 0
    c21e:	c6 54       	subi	r28, 0x46	; 70
    c220:	df 4f       	sbci	r29, 0xFF	; 255
    c222:	e8 81       	ld	r30, Y
    c224:	f9 81       	ldd	r31, Y+1	; 0x01
    c226:	ca 5b       	subi	r28, 0xBA	; 186
    c228:	d0 40       	sbci	r29, 0x00	; 0
    c22a:	44 91       	lpm	r20, Z
    c22c:	8e 01       	movw	r16, r28
    c22e:	0f 57       	subi	r16, 0x7F	; 127
    c230:	1f 4f       	sbci	r17, 0xFF	; 255
    c232:	9e 01       	movw	r18, r28
    c234:	2f 5f       	subi	r18, 0xFF	; 255
    c236:	3f 4f       	sbci	r19, 0xFF	; 255
    c238:	cf 54       	subi	r28, 0x4F	; 79
    c23a:	df 4f       	sbci	r29, 0xFF	; 255
    c23c:	68 81       	ld	r22, Y
    c23e:	c1 5b       	subi	r28, 0xB1	; 177
    c240:	d0 40       	sbci	r29, 0x00	; 0
    c242:	ca 52       	subi	r28, 0x2A	; 42
    c244:	df 4f       	sbci	r29, 0xFF	; 255
    c246:	e8 81       	ld	r30, Y
    c248:	f9 81       	ldd	r31, Y+1	; 0x01
    c24a:	c6 5d       	subi	r28, 0xD6	; 214
    c24c:	d0 40       	sbci	r29, 0x00	; 0
    c24e:	19 95       	eicall
    c250:	c8 53       	subi	r28, 0x38	; 56
    c252:	df 4f       	sbci	r29, 0xFF	; 255
    c254:	e8 81       	ld	r30, Y
    c256:	f9 81       	ldd	r31, Y+1	; 0x01
    c258:	c8 5c       	subi	r28, 0xC8	; 200
    c25a:	d0 40       	sbci	r29, 0x00	; 0
    c25c:	e4 90       	lpm	r14, Z
    c25e:	04 91       	lpm	r16, Z
    c260:	c1 53       	subi	r28, 0x31	; 49
    c262:	df 4f       	sbci	r29, 0xFF	; 255
    c264:	e8 81       	ld	r30, Y
    c266:	f9 81       	ldd	r31, Y+1	; 0x01
    c268:	cf 5c       	subi	r28, 0xCF	; 207
    c26a:	d0 40       	sbci	r29, 0x00	; 0
    c26c:	25 91       	lpm	r18, Z+
    c26e:	34 91       	lpm	r19, Z
    c270:	cf 52       	subi	r28, 0x2F	; 47
    c272:	df 4f       	sbci	r29, 0xFF	; 255
    c274:	e8 81       	ld	r30, Y
    c276:	f9 81       	ldd	r31, Y+1	; 0x01
    c278:	c1 5d       	subi	r28, 0xD1	; 209
    c27a:	d0 40       	sbci	r29, 0x00	; 0
    c27c:	45 91       	lpm	r20, Z+
    c27e:	54 91       	lpm	r21, Z
    c280:	88 24       	eor	r8, r8
    c282:	83 94       	inc	r8
    c284:	be 01       	movw	r22, r28
    c286:	6f 57       	subi	r22, 0x7F	; 127
    c288:	7f 4f       	sbci	r23, 0xFF	; 255
    c28a:	5b 01       	movw	r10, r22
    c28c:	ce 01       	movw	r24, r28
    c28e:	01 96       	adiw	r24, 0x01	; 1
    c290:	6c 01       	movw	r12, r24
    c292:	c2 54       	subi	r28, 0x42	; 66
    c294:	df 4f       	sbci	r29, 0xFF	; 255
    c296:	68 81       	ld	r22, Y
    c298:	79 81       	ldd	r23, Y+1	; 0x01
    c29a:	ce 5b       	subi	r28, 0xBE	; 190
    c29c:	d0 40       	sbci	r29, 0x00	; 0
    c29e:	c4 54       	subi	r28, 0x44	; 68
    c2a0:	df 4f       	sbci	r29, 0xFF	; 255
    c2a2:	88 81       	ld	r24, Y
    c2a4:	99 81       	ldd	r25, Y+1	; 0x01
    c2a6:	cc 5b       	subi	r28, 0xBC	; 188
    c2a8:	d0 40       	sbci	r29, 0x00	; 0
    c2aa:	0e 94 ef 52 	call	0xa5de	; 0xa5de <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    c2ae:	f3 94       	inc	r15
    c2b0:	ce 54       	subi	r28, 0x4E	; 78
    c2b2:	df 4f       	sbci	r29, 0xFF	; 255
    c2b4:	88 81       	ld	r24, Y
    c2b6:	c2 5b       	subi	r28, 0xB2	; 178
    c2b8:	d0 40       	sbci	r29, 0x00	; 0
    c2ba:	8f 5f       	subi	r24, 0xFF	; 255
    c2bc:	ce 54       	subi	r28, 0x4E	; 78
    c2be:	df 4f       	sbci	r29, 0xFF	; 255
    c2c0:	88 83       	st	Y, r24
    c2c2:	c2 5b       	subi	r28, 0xB2	; 178
    c2c4:	d0 40       	sbci	r29, 0x00	; 0
    c2c6:	63 cf       	rjmp	.-314    	; 0xc18e <draw_menu(bool)+0x147e>
    c2c8:	c0 54       	subi	r28, 0x40	; 64
    c2ca:	df 4f       	sbci	r29, 0xFF	; 255
    c2cc:	e8 81       	ld	r30, Y
    c2ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c2d0:	c0 5c       	subi	r28, 0xC0	; 192
    c2d2:	d0 40       	sbci	r29, 0x00	; 0
    c2d4:	25 91       	lpm	r18, Z+
    c2d6:	34 91       	lpm	r19, Z
    c2d8:	c5 53       	subi	r28, 0x35	; 53
    c2da:	df 4f       	sbci	r29, 0xFF	; 255
    c2dc:	e8 81       	ld	r30, Y
    c2de:	f9 81       	ldd	r31, Y+1	; 0x01
    c2e0:	cb 5c       	subi	r28, 0xCB	; 203
    c2e2:	d0 40       	sbci	r29, 0x00	; 0
    c2e4:	94 91       	lpm	r25, Z
    c2e6:	c8 54       	subi	r28, 0x48	; 72
    c2e8:	df 4f       	sbci	r29, 0xFF	; 255
    c2ea:	68 81       	ld	r22, Y
    c2ec:	79 81       	ldd	r23, Y+1	; 0x01
    c2ee:	c8 5b       	subi	r28, 0xB8	; 184
    c2f0:	d0 40       	sbci	r29, 0x00	; 0
    c2f2:	26 0f       	add	r18, r22
    c2f4:	37 1f       	adc	r19, r23
    c2f6:	f9 01       	movw	r30, r18
    c2f8:	9f 9d       	mul	r25, r15
    c2fa:	e0 0d       	add	r30, r0
    c2fc:	f1 1d       	adc	r31, r1
    c2fe:	11 24       	eor	r1, r1
    c300:	c2 54       	subi	r28, 0x42	; 66
    c302:	df 4f       	sbci	r29, 0xFF	; 255
    c304:	f9 83       	std	Y+1, r31	; 0x01
    c306:	e8 83       	st	Y, r30
    c308:	ce 5b       	subi	r28, 0xBE	; 190
    c30a:	d0 40       	sbci	r29, 0x00	; 0
    c30c:	70 cf       	rjmp	.-288    	; 0xc1ee <draw_menu(bool)+0x14de>
    c30e:	f1 01       	movw	r30, r2
    c310:	25 91       	lpm	r18, Z+
    c312:	34 91       	lpm	r19, Z
    c314:	c3 53       	subi	r28, 0x33	; 51
    c316:	df 4f       	sbci	r29, 0xFF	; 255
    c318:	e8 81       	ld	r30, Y
    c31a:	f9 81       	ldd	r31, Y+1	; 0x01
    c31c:	cd 5c       	subi	r28, 0xCD	; 205
    c31e:	d0 40       	sbci	r29, 0x00	; 0
    c320:	94 91       	lpm	r25, Z
    c322:	ca 54       	subi	r28, 0x4A	; 74
    c324:	df 4f       	sbci	r29, 0xFF	; 255
    c326:	48 81       	ld	r20, Y
    c328:	59 81       	ldd	r21, Y+1	; 0x01
    c32a:	c6 5b       	subi	r28, 0xB6	; 182
    c32c:	d0 40       	sbci	r29, 0x00	; 0
    c32e:	24 0f       	add	r18, r20
    c330:	35 1f       	adc	r19, r21
    c332:	b9 01       	movw	r22, r18
    c334:	9f 9d       	mul	r25, r15
    c336:	60 0d       	add	r22, r0
    c338:	71 1d       	adc	r23, r1
    c33a:	11 24       	eor	r1, r1
    c33c:	c4 54       	subi	r28, 0x44	; 68
    c33e:	df 4f       	sbci	r29, 0xFF	; 255
    c340:	79 83       	std	Y+1, r23	; 0x01
    c342:	68 83       	st	Y, r22
    c344:	cc 5b       	subi	r28, 0xBC	; 188
    c346:	d0 40       	sbci	r29, 0x00	; 0
    c348:	6a cf       	rjmp	.-300    	; 0xc21e <draw_menu(bool)+0x150e>
    c34a:	ce 53       	subi	r28, 0x3E	; 62
    c34c:	df 4f       	sbci	r29, 0xFF	; 255
    c34e:	e8 81       	ld	r30, Y
    c350:	f9 81       	ldd	r31, Y+1	; 0x01
    c352:	c2 5c       	subi	r28, 0xC2	; 194
    c354:	d0 40       	sbci	r29, 0x00	; 0
    c356:	ef 2b       	or	r30, r31
    c358:	09 f4       	brne	.+2      	; 0xc35c <draw_menu(bool)+0x164c>
    c35a:	57 c1       	rjmp	.+686    	; 0xc60a <draw_menu(bool)+0x18fa>
    c35c:	cc 53       	subi	r28, 0x3C	; 60
    c35e:	df 4f       	sbci	r29, 0xFF	; 255
    c360:	28 81       	ld	r18, Y
    c362:	39 81       	ldd	r19, Y+1	; 0x01
    c364:	c4 5c       	subi	r28, 0xC4	; 196
    c366:	d0 40       	sbci	r29, 0x00	; 0
    c368:	23 2b       	or	r18, r19
    c36a:	09 f4       	brne	.+2      	; 0xc36e <draw_menu(bool)+0x165e>
    c36c:	4e c1       	rjmp	.+668    	; 0xc60a <draw_menu(bool)+0x18fa>
    c36e:	ce 54       	subi	r28, 0x4E	; 78
    c370:	df 4f       	sbci	r29, 0xFF	; 255
    c372:	18 82       	st	Y, r1
    c374:	c2 5b       	subi	r28, 0xB2	; 178
    c376:	d0 40       	sbci	r29, 0x00	; 0
    c378:	f2 01       	movw	r30, r4
    c37a:	e0 54       	subi	r30, 0x40	; 64
    c37c:	fe 4f       	sbci	r31, 0xFE	; 254
    c37e:	e6 0d       	add	r30, r6
    c380:	f7 1d       	adc	r31, r7
    c382:	25 91       	lpm	r18, Z+
    c384:	34 91       	lpm	r19, Z
    c386:	c2 01       	movw	r24, r4
    c388:	85 54       	subi	r24, 0x45	; 69
    c38a:	9e 4f       	sbci	r25, 0xFE	; 254
    c38c:	a3 01       	movw	r20, r6
    c38e:	48 0f       	add	r20, r24
    c390:	59 1f       	adc	r21, r25
    c392:	c6 54       	subi	r28, 0x46	; 70
    c394:	df 4f       	sbci	r29, 0xFF	; 255
    c396:	59 83       	std	Y+1, r21	; 0x01
    c398:	48 83       	st	Y, r20
    c39a:	ca 5b       	subi	r28, 0xBA	; 186
    c39c:	d0 40       	sbci	r29, 0x00	; 0
    c39e:	fa 01       	movw	r30, r20
    c3a0:	84 91       	lpm	r24, Z
    c3a2:	cf 54       	subi	r28, 0x4F	; 79
    c3a4:	df 4f       	sbci	r29, 0xFF	; 255
    c3a6:	68 81       	ld	r22, Y
    c3a8:	c1 5b       	subi	r28, 0xB1	; 177
    c3aa:	d0 40       	sbci	r29, 0x00	; 0
    c3ac:	70 e0       	ldi	r23, 0x00	; 0
    c3ae:	40 e0       	ldi	r20, 0x00	; 0
    c3b0:	90 e0       	ldi	r25, 0x00	; 0
    c3b2:	f9 01       	movw	r30, r18
    c3b4:	19 95       	eicall
    c3b6:	cd 54       	subi	r28, 0x4D	; 77
    c3b8:	df 4f       	sbci	r29, 0xFF	; 255
    c3ba:	88 83       	st	Y, r24
    c3bc:	c3 5b       	subi	r28, 0xB3	; 179
    c3be:	d0 40       	sbci	r29, 0x00	; 0
    c3c0:	f2 01       	movw	r30, r4
    c3c2:	e6 54       	subi	r30, 0x46	; 70
    c3c4:	fe 4f       	sbci	r31, 0xFE	; 254
    c3c6:	e6 0d       	add	r30, r6
    c3c8:	f7 1d       	adc	r31, r7
    c3ca:	44 91       	lpm	r20, Z
    c3cc:	4f 3f       	cpi	r20, 0xFF	; 255
    c3ce:	b9 f0       	breq	.+46     	; 0xc3fe <draw_menu(bool)+0x16ee>
    c3d0:	f2 01       	movw	r30, r4
    c3d2:	e8 54       	subi	r30, 0x48	; 72
    c3d4:	fe 4f       	sbci	r31, 0xFE	; 254
    c3d6:	e6 0d       	add	r30, r6
    c3d8:	f7 1d       	adc	r31, r7
    c3da:	24 91       	lpm	r18, Z
    c3dc:	f2 01       	movw	r30, r4
    c3de:	e7 54       	subi	r30, 0x47	; 71
    c3e0:	fe 4f       	sbci	r31, 0xFE	; 254
    c3e2:	e6 0d       	add	r30, r6
    c3e4:	f7 1d       	adc	r31, r7
    c3e6:	e4 91       	lpm	r30, Z
    c3e8:	2e 9f       	mul	r18, r30
    c3ea:	20 2d       	mov	r18, r0
    c3ec:	11 24       	eor	r1, r1
    c3ee:	be 01       	movw	r22, r28
    c3f0:	6d 54       	subi	r22, 0x4D	; 77
    c3f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3f4:	ce 01       	movw	r24, r28
    c3f6:	8e 54       	subi	r24, 0x4E	; 78
    c3f8:	9f 4f       	sbci	r25, 0xFF	; 255
    c3fa:	0e 94 b5 52 	call	0xa56a	; 0xa56a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c3fe:	ce 54       	subi	r28, 0x4E	; 78
    c400:	df 4f       	sbci	r29, 0xFF	; 255
    c402:	f8 81       	ld	r31, Y
    c404:	c2 5b       	subi	r28, 0xB2	; 178
    c406:	d0 40       	sbci	r29, 0x00	; 0
    c408:	cf 52       	subi	r28, 0x2F	; 47
    c40a:	df 4f       	sbci	r29, 0xFF	; 255
    c40c:	f8 83       	st	Y, r31
    c40e:	c1 5d       	subi	r28, 0xD1	; 209
    c410:	d0 40       	sbci	r29, 0x00	; 0
    c412:	cd 54       	subi	r28, 0x4D	; 77
    c414:	df 4f       	sbci	r29, 0xFF	; 255
    c416:	28 81       	ld	r18, Y
    c418:	c3 5b       	subi	r28, 0xB3	; 179
    c41a:	d0 40       	sbci	r29, 0x00	; 0
    c41c:	ca 53       	subi	r28, 0x3A	; 58
    c41e:	df 4f       	sbci	r29, 0xFF	; 255
    c420:	28 83       	st	Y, r18
    c422:	c6 5c       	subi	r28, 0xC6	; 198
    c424:	d0 40       	sbci	r29, 0x00	; 0
    c426:	62 01       	movw	r12, r4
    c428:	34 e5       	ldi	r19, 0x54	; 84
    c42a:	c3 1a       	sub	r12, r19
    c42c:	3e ef       	ldi	r19, 0xFE	; 254
    c42e:	d3 0a       	sbc	r13, r19
    c430:	c6 0c       	add	r12, r6
    c432:	d7 1c       	adc	r13, r7
    c434:	12 01       	movw	r2, r4
    c436:	42 e5       	ldi	r20, 0x52	; 82
    c438:	24 1a       	sub	r2, r20
    c43a:	4e ef       	ldi	r20, 0xFE	; 254
    c43c:	34 0a       	sbc	r3, r20
    c43e:	26 0c       	add	r2, r6
    c440:	37 1c       	adc	r3, r7
    c442:	c2 01       	movw	r24, r4
    c444:	89 54       	subi	r24, 0x49	; 73
    c446:	9e 4f       	sbci	r25, 0xFE	; 254
    c448:	b3 01       	movw	r22, r6
    c44a:	68 0f       	add	r22, r24
    c44c:	79 1f       	adc	r23, r25
    c44e:	c0 54       	subi	r28, 0x40	; 64
    c450:	df 4f       	sbci	r29, 0xFF	; 255
    c452:	79 83       	std	Y+1, r23	; 0x01
    c454:	68 83       	st	Y, r22
    c456:	c0 5c       	subi	r28, 0xC0	; 192
    c458:	d0 40       	sbci	r29, 0x00	; 0
    c45a:	01 97       	sbiw	r24, 0x01	; 1
    c45c:	f3 01       	movw	r30, r6
    c45e:	e8 0f       	add	r30, r24
    c460:	f9 1f       	adc	r31, r25
    c462:	c8 53       	subi	r28, 0x38	; 56
    c464:	df 4f       	sbci	r29, 0xFF	; 255
    c466:	f9 83       	std	Y+1, r31	; 0x01
    c468:	e8 83       	st	Y, r30
    c46a:	c8 5c       	subi	r28, 0xC8	; 200
    c46c:	d0 40       	sbci	r29, 0x00	; 0
    c46e:	01 97       	sbiw	r24, 0x01	; 1
    c470:	93 01       	movw	r18, r6
    c472:	28 0f       	add	r18, r24
    c474:	39 1f       	adc	r19, r25
    c476:	c5 53       	subi	r28, 0x35	; 53
    c478:	df 4f       	sbci	r29, 0xFF	; 255
    c47a:	39 83       	std	Y+1, r19	; 0x01
    c47c:	28 83       	st	Y, r18
    c47e:	cb 5c       	subi	r28, 0xCB	; 203
    c480:	d0 40       	sbci	r29, 0x00	; 0
    c482:	03 97       	sbiw	r24, 0x03	; 3
    c484:	a3 01       	movw	r20, r6
    c486:	48 0f       	add	r20, r24
    c488:	59 1f       	adc	r21, r25
    c48a:	c3 53       	subi	r28, 0x33	; 51
    c48c:	df 4f       	sbci	r29, 0xFF	; 255
    c48e:	59 83       	std	Y+1, r21	; 0x01
    c490:	48 83       	st	Y, r20
    c492:	cd 5c       	subi	r28, 0xCD	; 205
    c494:	d0 40       	sbci	r29, 0x00	; 0
    c496:	02 97       	sbiw	r24, 0x02	; 2
    c498:	b3 01       	movw	r22, r6
    c49a:	68 0f       	add	r22, r24
    c49c:	79 1f       	adc	r23, r25
    c49e:	c1 53       	subi	r28, 0x31	; 49
    c4a0:	df 4f       	sbci	r29, 0xFF	; 255
    c4a2:	79 83       	std	Y+1, r23	; 0x01
    c4a4:	68 83       	st	Y, r22
    c4a6:	cf 5c       	subi	r28, 0xCF	; 207
    c4a8:	d0 40       	sbci	r29, 0x00	; 0
    c4aa:	b1 2c       	mov	r11, r1
    c4ac:	a1 2c       	mov	r10, r1
    c4ae:	cf 52       	subi	r28, 0x2F	; 47
    c4b0:	df 4f       	sbci	r29, 0xFF	; 255
    c4b2:	88 80       	ld	r8, Y
    c4b4:	c1 5d       	subi	r28, 0xD1	; 209
    c4b6:	d0 40       	sbci	r29, 0x00	; 0
    c4b8:	8a 0c       	add	r8, r10
    c4ba:	ca 53       	subi	r28, 0x3A	; 58
    c4bc:	df 4f       	sbci	r29, 0xFF	; 255
    c4be:	78 81       	ld	r23, Y
    c4c0:	c6 5c       	subi	r28, 0xC6	; 198
    c4c2:	d0 40       	sbci	r29, 0x00	; 0
    c4c4:	87 16       	cp	r8, r23
    c4c6:	08 f0       	brcs	.+2      	; 0xc4ca <draw_menu(bool)+0x17ba>
    c4c8:	a0 c0       	rjmp	.+320    	; 0xc60a <draw_menu(bool)+0x18fa>
    c4ca:	f6 01       	movw	r30, r12
    c4cc:	25 91       	lpm	r18, Z+
    c4ce:	34 91       	lpm	r19, Z
    c4d0:	f1 01       	movw	r30, r2
    c4d2:	85 91       	lpm	r24, Z+
    c4d4:	94 91       	lpm	r25, Z
    c4d6:	c0 54       	subi	r28, 0x40	; 64
    c4d8:	df 4f       	sbci	r29, 0xFF	; 255
    c4da:	e8 81       	ld	r30, Y
    c4dc:	f9 81       	ldd	r31, Y+1	; 0x01
    c4de:	c0 5c       	subi	r28, 0xC0	; 192
    c4e0:	d0 40       	sbci	r29, 0x00	; 0
    c4e2:	44 91       	lpm	r20, Z
    c4e4:	44 23       	and	r20, r20
    c4e6:	09 f4       	brne	.+2      	; 0xc4ea <draw_menu(bool)+0x17da>
    c4e8:	92 c0       	rjmp	.+292    	; 0xc60e <draw_menu(bool)+0x18fe>
    c4ea:	c8 54       	subi	r28, 0x48	; 72
    c4ec:	df 4f       	sbci	r29, 0xFF	; 255
    c4ee:	48 81       	ld	r20, Y
    c4f0:	59 81       	ldd	r21, Y+1	; 0x01
    c4f2:	c8 5b       	subi	r28, 0xB8	; 184
    c4f4:	d0 40       	sbci	r29, 0x00	; 0
    c4f6:	48 0f       	add	r20, r24
    c4f8:	59 1f       	adc	r21, r25
    c4fa:	c2 54       	subi	r28, 0x42	; 66
    c4fc:	df 4f       	sbci	r29, 0xFF	; 255
    c4fe:	59 83       	std	Y+1, r21	; 0x01
    c500:	48 83       	st	Y, r20
    c502:	ce 5b       	subi	r28, 0xBE	; 190
    c504:	d0 40       	sbci	r29, 0x00	; 0
    c506:	c0 54       	subi	r28, 0x40	; 64
    c508:	df 4f       	sbci	r29, 0xFF	; 255
    c50a:	e8 81       	ld	r30, Y
    c50c:	f9 81       	ldd	r31, Y+1	; 0x01
    c50e:	c0 5c       	subi	r28, 0xC0	; 192
    c510:	d0 40       	sbci	r29, 0x00	; 0
    c512:	84 91       	lpm	r24, Z
    c514:	ca 54       	subi	r28, 0x4A	; 74
    c516:	df 4f       	sbci	r29, 0xFF	; 255
    c518:	48 81       	ld	r20, Y
    c51a:	59 81       	ldd	r21, Y+1	; 0x01
    c51c:	c6 5b       	subi	r28, 0xB6	; 182
    c51e:	d0 40       	sbci	r29, 0x00	; 0
    c520:	81 30       	cpi	r24, 0x01	; 1
    c522:	c1 f4       	brne	.+48     	; 0xc554 <draw_menu(bool)+0x1844>
    c524:	f6 01       	movw	r30, r12
    c526:	85 91       	lpm	r24, Z+
    c528:	94 91       	lpm	r25, Z
    c52a:	c5 53       	subi	r28, 0x35	; 53
    c52c:	df 4f       	sbci	r29, 0xFF	; 255
    c52e:	e8 81       	ld	r30, Y
    c530:	f9 81       	ldd	r31, Y+1	; 0x01
    c532:	cb 5c       	subi	r28, 0xCB	; 203
    c534:	d0 40       	sbci	r29, 0x00	; 0
    c536:	44 91       	lpm	r20, Z
    c538:	ca 54       	subi	r28, 0x4A	; 74
    c53a:	df 4f       	sbci	r29, 0xFF	; 255
    c53c:	28 81       	ld	r18, Y
    c53e:	39 81       	ldd	r19, Y+1	; 0x01
    c540:	c6 5b       	subi	r28, 0xB6	; 182
    c542:	d0 40       	sbci	r29, 0x00	; 0
    c544:	82 0f       	add	r24, r18
    c546:	93 1f       	adc	r25, r19
    c548:	4a 9d       	mul	r20, r10
    c54a:	90 01       	movw	r18, r0
    c54c:	4b 9d       	mul	r20, r11
    c54e:	30 0d       	add	r19, r0
    c550:	11 24       	eor	r1, r1
    c552:	ac 01       	movw	r20, r24
    c554:	42 0f       	add	r20, r18
    c556:	53 1f       	adc	r21, r19
    c558:	c4 54       	subi	r28, 0x44	; 68
    c55a:	df 4f       	sbci	r29, 0xFF	; 255
    c55c:	59 83       	std	Y+1, r21	; 0x01
    c55e:	48 83       	st	Y, r20
    c560:	cc 5b       	subi	r28, 0xBC	; 188
    c562:	d0 40       	sbci	r29, 0x00	; 0
    c564:	c3 53       	subi	r28, 0x33	; 51
    c566:	df 4f       	sbci	r29, 0xFF	; 255
    c568:	e8 81       	ld	r30, Y
    c56a:	f9 81       	ldd	r31, Y+1	; 0x01
    c56c:	cd 5c       	subi	r28, 0xCD	; 205
    c56e:	d0 40       	sbci	r29, 0x00	; 0
    c570:	25 91       	lpm	r18, Z+
    c572:	34 91       	lpm	r19, Z
    c574:	c1 53       	subi	r28, 0x31	; 49
    c576:	df 4f       	sbci	r29, 0xFF	; 255
    c578:	e8 81       	ld	r30, Y
    c57a:	f9 81       	ldd	r31, Y+1	; 0x01
    c57c:	cf 5c       	subi	r28, 0xCF	; 207
    c57e:	d0 40       	sbci	r29, 0x00	; 0
    c580:	45 91       	lpm	r20, Z+
    c582:	54 91       	lpm	r21, Z
    c584:	cc 53       	subi	r28, 0x3C	; 60
    c586:	df 4f       	sbci	r29, 0xFF	; 255
    c588:	e8 80       	ld	r14, Y
    c58a:	f9 80       	ldd	r15, Y+1	; 0x01
    c58c:	c4 5c       	subi	r28, 0xC4	; 196
    c58e:	d0 40       	sbci	r29, 0x00	; 0
    c590:	ce 53       	subi	r28, 0x3E	; 62
    c592:	df 4f       	sbci	r29, 0xFF	; 255
    c594:	08 81       	ld	r16, Y
    c596:	19 81       	ldd	r17, Y+1	; 0x01
    c598:	c2 5c       	subi	r28, 0xC2	; 194
    c59a:	d0 40       	sbci	r29, 0x00	; 0
    c59c:	c2 54       	subi	r28, 0x42	; 66
    c59e:	df 4f       	sbci	r29, 0xFF	; 255
    c5a0:	68 81       	ld	r22, Y
    c5a2:	79 81       	ldd	r23, Y+1	; 0x01
    c5a4:	ce 5b       	subi	r28, 0xBE	; 190
    c5a6:	d0 40       	sbci	r29, 0x00	; 0
    c5a8:	c4 54       	subi	r28, 0x44	; 68
    c5aa:	df 4f       	sbci	r29, 0xFF	; 255
    c5ac:	88 81       	ld	r24, Y
    c5ae:	99 81       	ldd	r25, Y+1	; 0x01
    c5b0:	cc 5b       	subi	r28, 0xBC	; 188
    c5b2:	d0 40       	sbci	r29, 0x00	; 0
    c5b4:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c5b8:	18 2f       	mov	r17, r24
    c5ba:	5f ef       	ldi	r21, 0xFF	; 255
    c5bc:	a5 1a       	sub	r10, r21
    c5be:	b5 0a       	sbc	r11, r21
    c5c0:	88 23       	and	r24, r24
    c5c2:	09 f4       	brne	.+2      	; 0xc5c6 <draw_menu(bool)+0x18b6>
    c5c4:	74 cf       	rjmp	.-280    	; 0xc4ae <draw_menu(bool)+0x179e>
    c5c6:	ce 54       	subi	r28, 0x4E	; 78
    c5c8:	df 4f       	sbci	r29, 0xFF	; 255
    c5ca:	88 82       	st	Y, r8
    c5cc:	c2 5b       	subi	r28, 0xB2	; 178
    c5ce:	d0 40       	sbci	r29, 0x00	; 0
    c5d0:	f2 01       	movw	r30, r4
    c5d2:	e2 54       	subi	r30, 0x42	; 66
    c5d4:	fe 4f       	sbci	r31, 0xFE	; 254
    c5d6:	e6 0d       	add	r30, r6
    c5d8:	f7 1d       	adc	r31, r7
    c5da:	25 91       	lpm	r18, Z+
    c5dc:	34 91       	lpm	r19, Z
    c5de:	c6 54       	subi	r28, 0x46	; 70
    c5e0:	df 4f       	sbci	r29, 0xFF	; 255
    c5e2:	e8 81       	ld	r30, Y
    c5e4:	f9 81       	ldd	r31, Y+1	; 0x01
    c5e6:	ca 5b       	subi	r28, 0xBA	; 186
    c5e8:	d0 40       	sbci	r29, 0x00	; 0
    c5ea:	84 91       	lpm	r24, Z
    c5ec:	cf 54       	subi	r28, 0x4F	; 79
    c5ee:	df 4f       	sbci	r29, 0xFF	; 255
    c5f0:	68 81       	ld	r22, Y
    c5f2:	c1 5b       	subi	r28, 0xB1	; 177
    c5f4:	d0 40       	sbci	r29, 0x00	; 0
    c5f6:	70 e0       	ldi	r23, 0x00	; 0
    c5f8:	48 2d       	mov	r20, r8
    c5fa:	90 e0       	ldi	r25, 0x00	; 0
    c5fc:	f9 01       	movw	r30, r18
    c5fe:	19 95       	eicall
    c600:	c6 53       	subi	r28, 0x36	; 54
    c602:	df 4f       	sbci	r29, 0xFF	; 255
    c604:	18 83       	st	Y, r17
    c606:	ca 5c       	subi	r28, 0xCA	; 202
    c608:	d0 40       	sbci	r29, 0x00	; 0
    c60a:	93 94       	inc	r9
    c60c:	fd cc       	rjmp	.-1542   	; 0xc008 <draw_menu(bool)+0x12f8>
    c60e:	f1 01       	movw	r30, r2
    c610:	85 91       	lpm	r24, Z+
    c612:	94 91       	lpm	r25, Z
    c614:	c8 53       	subi	r28, 0x38	; 56
    c616:	df 4f       	sbci	r29, 0xFF	; 255
    c618:	e8 81       	ld	r30, Y
    c61a:	f9 81       	ldd	r31, Y+1	; 0x01
    c61c:	c8 5c       	subi	r28, 0xC8	; 200
    c61e:	d0 40       	sbci	r29, 0x00	; 0
    c620:	64 91       	lpm	r22, Z
    c622:	c8 54       	subi	r28, 0x48	; 72
    c624:	df 4f       	sbci	r29, 0xFF	; 255
    c626:	48 81       	ld	r20, Y
    c628:	59 81       	ldd	r21, Y+1	; 0x01
    c62a:	c8 5b       	subi	r28, 0xB8	; 184
    c62c:	d0 40       	sbci	r29, 0x00	; 0
    c62e:	84 0f       	add	r24, r20
    c630:	95 1f       	adc	r25, r21
    c632:	6a 9d       	mul	r22, r10
    c634:	a0 01       	movw	r20, r0
    c636:	6b 9d       	mul	r22, r11
    c638:	50 0d       	add	r21, r0
    c63a:	11 24       	eor	r1, r1
    c63c:	bc 01       	movw	r22, r24
    c63e:	64 0f       	add	r22, r20
    c640:	75 1f       	adc	r23, r21
    c642:	c2 54       	subi	r28, 0x42	; 66
    c644:	df 4f       	sbci	r29, 0xFF	; 255
    c646:	79 83       	std	Y+1, r23	; 0x01
    c648:	68 83       	st	Y, r22
    c64a:	ce 5b       	subi	r28, 0xBE	; 190
    c64c:	d0 40       	sbci	r29, 0x00	; 0
    c64e:	5b cf       	rjmp	.-330    	; 0xc506 <draw_menu(bool)+0x17f6>
    c650:	c6 53       	subi	r28, 0x36	; 54
    c652:	df 4f       	sbci	r29, 0xFF	; 255
    c654:	f8 81       	ld	r31, Y
    c656:	ca 5c       	subi	r28, 0xCA	; 202
    c658:	d0 40       	sbci	r29, 0x00	; 0
    c65a:	f1 11       	cpse	r31, r1
    c65c:	61 c4       	rjmp	.+2242   	; 0xcf20 <draw_menu(bool)+0x2210>
    c65e:	21 2c       	mov	r2, r1
    c660:	93 01       	movw	r18, r6
    c662:	2c 53       	subi	r18, 0x3C	; 60
    c664:	3d 4f       	sbci	r19, 0xFD	; 253
    c666:	c0 52       	subi	r28, 0x20	; 32
    c668:	df 4f       	sbci	r29, 0xFF	; 255
    c66a:	39 83       	std	Y+1, r19	; 0x01
    c66c:	28 83       	st	Y, r18
    c66e:	c0 5e       	subi	r28, 0xE0	; 224
    c670:	d0 40       	sbci	r29, 0x00	; 0
    c672:	ae 01       	movw	r20, r28
    c674:	4f 57       	subi	r20, 0x7F	; 127
    c676:	5f 4f       	sbci	r21, 0xFF	; 255
    c678:	cc 54       	subi	r28, 0x4C	; 76
    c67a:	df 4f       	sbci	r29, 0xFF	; 255
    c67c:	59 83       	std	Y+1, r21	; 0x01
    c67e:	48 83       	st	Y, r20
    c680:	c4 5b       	subi	r28, 0xB4	; 180
    c682:	d0 40       	sbci	r29, 0x00	; 0
    c684:	c0 52       	subi	r28, 0x20	; 32
    c686:	df 4f       	sbci	r29, 0xFF	; 255
    c688:	e8 81       	ld	r30, Y
    c68a:	f9 81       	ldd	r31, Y+1	; 0x01
    c68c:	c0 5e       	subi	r28, 0xE0	; 224
    c68e:	d0 40       	sbci	r29, 0x00	; 0
    c690:	84 91       	lpm	r24, Z
    c692:	28 16       	cp	r2, r24
    c694:	08 f0       	brcs	.+2      	; 0xc698 <draw_menu(bool)+0x1988>
    c696:	4a c4       	rjmp	.+2196   	; 0xcf2c <draw_menu(bool)+0x221c>
    c698:	fe e1       	ldi	r31, 0x1E	; 30
    c69a:	2f 9e       	mul	r2, r31
    c69c:	20 01       	movw	r4, r0
    c69e:	11 24       	eor	r1, r1
    c6a0:	f2 01       	movw	r30, r4
    c6a2:	e4 54       	subi	r30, 0x44	; 68
    c6a4:	fd 4f       	sbci	r31, 0xFD	; 253
    c6a6:	e6 0d       	add	r30, r6
    c6a8:	f7 1d       	adc	r31, r7
    c6aa:	84 91       	lpm	r24, Z
    c6ac:	cd 52       	subi	r28, 0x2D	; 45
    c6ae:	df 4f       	sbci	r29, 0xFF	; 255
    c6b0:	68 81       	ld	r22, Y
    c6b2:	c3 5d       	subi	r28, 0xD3	; 211
    c6b4:	d0 40       	sbci	r29, 0x00	; 0
    c6b6:	0e 94 c0 38 	call	0x7180	; 0x7180 <enable_redraw(unsigned char, unsigned char)>
    c6ba:	88 23       	and	r24, r24
    c6bc:	09 f4       	brne	.+2      	; 0xc6c0 <draw_menu(bool)+0x19b0>
    c6be:	5e c2       	rjmp	.+1212   	; 0xcb7c <draw_menu(bool)+0x1e6c>
    c6c0:	ce 54       	subi	r28, 0x4E	; 78
    c6c2:	df 4f       	sbci	r29, 0xFF	; 255
    c6c4:	18 82       	st	Y, r1
    c6c6:	c2 5b       	subi	r28, 0xB2	; 178
    c6c8:	d0 40       	sbci	r29, 0x00	; 0
    c6ca:	f2 01       	movw	r30, r4
    c6cc:	e8 54       	subi	r30, 0x48	; 72
    c6ce:	fd 4f       	sbci	r31, 0xFD	; 253
    c6d0:	e6 0d       	add	r30, r6
    c6d2:	f7 1d       	adc	r31, r7
    c6d4:	25 91       	lpm	r18, Z+
    c6d6:	34 91       	lpm	r19, Z
    c6d8:	c2 01       	movw	r24, r4
    c6da:	8d 54       	subi	r24, 0x4D	; 77
    c6dc:	9d 4f       	sbci	r25, 0xFD	; 253
    c6de:	a3 01       	movw	r20, r6
    c6e0:	48 0f       	add	r20, r24
    c6e2:	59 1f       	adc	r21, r25
    c6e4:	c6 54       	subi	r28, 0x46	; 70
    c6e6:	df 4f       	sbci	r29, 0xFF	; 255
    c6e8:	59 83       	std	Y+1, r21	; 0x01
    c6ea:	48 83       	st	Y, r20
    c6ec:	ca 5b       	subi	r28, 0xBA	; 186
    c6ee:	d0 40       	sbci	r29, 0x00	; 0
    c6f0:	fa 01       	movw	r30, r20
    c6f2:	84 91       	lpm	r24, Z
    c6f4:	cf 54       	subi	r28, 0x4F	; 79
    c6f6:	df 4f       	sbci	r29, 0xFF	; 255
    c6f8:	68 81       	ld	r22, Y
    c6fa:	c1 5b       	subi	r28, 0xB1	; 177
    c6fc:	d0 40       	sbci	r29, 0x00	; 0
    c6fe:	70 e0       	ldi	r23, 0x00	; 0
    c700:	40 e0       	ldi	r20, 0x00	; 0
    c702:	90 e0       	ldi	r25, 0x00	; 0
    c704:	f9 01       	movw	r30, r18
    c706:	19 95       	eicall
    c708:	cd 54       	subi	r28, 0x4D	; 77
    c70a:	df 4f       	sbci	r29, 0xFF	; 255
    c70c:	88 83       	st	Y, r24
    c70e:	c3 5b       	subi	r28, 0xB3	; 179
    c710:	d0 40       	sbci	r29, 0x00	; 0
    c712:	f2 01       	movw	r30, r4
    c714:	ec 54       	subi	r30, 0x4C	; 76
    c716:	fd 4f       	sbci	r31, 0xFD	; 253
    c718:	e6 0d       	add	r30, r6
    c71a:	f7 1d       	adc	r31, r7
    c71c:	25 91       	lpm	r18, Z+
    c71e:	34 91       	lpm	r19, Z
    c720:	ce 51       	subi	r28, 0x1E	; 30
    c722:	df 4f       	sbci	r29, 0xFF	; 255
    c724:	39 83       	std	Y+1, r19	; 0x01
    c726:	28 83       	st	Y, r18
    c728:	c2 5e       	subi	r28, 0xE2	; 226
    c72a:	d0 40       	sbci	r29, 0x00	; 0
    c72c:	f2 01       	movw	r30, r4
    c72e:	ee 54       	subi	r30, 0x4E	; 78
    c730:	fd 4f       	sbci	r31, 0xFD	; 253
    c732:	e6 0d       	add	r30, r6
    c734:	f7 1d       	adc	r31, r7
    c736:	44 91       	lpm	r20, Z
    c738:	c2 01       	movw	r24, r4
    c73a:	80 55       	subi	r24, 0x50	; 80
    c73c:	9d 4f       	sbci	r25, 0xFD	; 253
    c73e:	b3 01       	movw	r22, r6
    c740:	68 0f       	add	r22, r24
    c742:	79 1f       	adc	r23, r25
    c744:	c1 53       	subi	r28, 0x31	; 49
    c746:	df 4f       	sbci	r29, 0xFF	; 255
    c748:	79 83       	std	Y+1, r23	; 0x01
    c74a:	68 83       	st	Y, r22
    c74c:	cf 5c       	subi	r28, 0xCF	; 207
    c74e:	d0 40       	sbci	r29, 0x00	; 0
    c750:	4f 3f       	cpi	r20, 0xFF	; 255
    c752:	99 f0       	breq	.+38     	; 0xc77a <draw_menu(bool)+0x1a6a>
    c754:	fb 01       	movw	r30, r22
    c756:	24 91       	lpm	r18, Z
    c758:	f2 01       	movw	r30, r4
    c75a:	ef 54       	subi	r30, 0x4F	; 79
    c75c:	fd 4f       	sbci	r31, 0xFD	; 253
    c75e:	e6 0d       	add	r30, r6
    c760:	f7 1d       	adc	r31, r7
    c762:	e4 91       	lpm	r30, Z
    c764:	2e 9f       	mul	r18, r30
    c766:	20 2d       	mov	r18, r0
    c768:	11 24       	eor	r1, r1
    c76a:	be 01       	movw	r22, r28
    c76c:	6d 54       	subi	r22, 0x4D	; 77
    c76e:	7f 4f       	sbci	r23, 0xFF	; 255
    c770:	ce 01       	movw	r24, r28
    c772:	8e 54       	subi	r24, 0x4E	; 78
    c774:	9f 4f       	sbci	r25, 0xFF	; 255
    c776:	0e 94 b5 52 	call	0xa56a	; 0xa56a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c77a:	c2 01       	movw	r24, r4
    c77c:	81 55       	subi	r24, 0x51	; 81
    c77e:	9d 4f       	sbci	r25, 0xFD	; 253
    c780:	93 01       	movw	r18, r6
    c782:	28 0f       	add	r18, r24
    c784:	39 1f       	adc	r19, r25
    c786:	c0 54       	subi	r28, 0x40	; 64
    c788:	df 4f       	sbci	r29, 0xFF	; 255
    c78a:	39 83       	std	Y+1, r19	; 0x01
    c78c:	28 83       	st	Y, r18
    c78e:	c0 5c       	subi	r28, 0xC0	; 192
    c790:	d0 40       	sbci	r29, 0x00	; 0
    c792:	40 97       	sbiw	r24, 0x10	; 16
    c794:	a3 01       	movw	r20, r6
    c796:	48 0f       	add	r20, r24
    c798:	59 1f       	adc	r21, r25
    c79a:	ca 53       	subi	r28, 0x3A	; 58
    c79c:	df 4f       	sbci	r29, 0xFF	; 255
    c79e:	59 83       	std	Y+1, r21	; 0x01
    c7a0:	48 83       	st	Y, r20
    c7a2:	c6 5c       	subi	r28, 0xC6	; 198
    c7a4:	d0 40       	sbci	r29, 0x00	; 0
    c7a6:	02 96       	adiw	r24, 0x02	; 2
    c7a8:	b3 01       	movw	r22, r6
    c7aa:	68 0f       	add	r22, r24
    c7ac:	79 1f       	adc	r23, r25
    c7ae:	c8 53       	subi	r28, 0x38	; 56
    c7b0:	df 4f       	sbci	r29, 0xFF	; 255
    c7b2:	79 83       	std	Y+1, r23	; 0x01
    c7b4:	68 83       	st	Y, r22
    c7b6:	c8 5c       	subi	r28, 0xC8	; 200
    c7b8:	d0 40       	sbci	r29, 0x00	; 0
    c7ba:	0d 96       	adiw	r24, 0x0d	; 13
    c7bc:	f3 01       	movw	r30, r6
    c7be:	e8 0f       	add	r30, r24
    c7c0:	f9 1f       	adc	r31, r25
    c7c2:	c5 53       	subi	r28, 0x35	; 53
    c7c4:	df 4f       	sbci	r29, 0xFF	; 255
    c7c6:	f9 83       	std	Y+1, r31	; 0x01
    c7c8:	e8 83       	st	Y, r30
    c7ca:	cb 5c       	subi	r28, 0xCB	; 203
    c7cc:	d0 40       	sbci	r29, 0x00	; 0
    c7ce:	01 97       	sbiw	r24, 0x01	; 1
    c7d0:	93 01       	movw	r18, r6
    c7d2:	28 0f       	add	r18, r24
    c7d4:	39 1f       	adc	r19, r25
    c7d6:	c3 53       	subi	r28, 0x33	; 51
    c7d8:	df 4f       	sbci	r29, 0xFF	; 255
    c7da:	39 83       	std	Y+1, r19	; 0x01
    c7dc:	28 83       	st	Y, r18
    c7de:	cd 5c       	subi	r28, 0xCD	; 205
    c7e0:	d0 40       	sbci	r29, 0x00	; 0
    c7e2:	0d 96       	adiw	r24, 0x0d	; 13
    c7e4:	a3 01       	movw	r20, r6
    c7e6:	48 0f       	add	r20, r24
    c7e8:	59 1f       	adc	r21, r25
    c7ea:	cf 52       	subi	r28, 0x2F	; 47
    c7ec:	df 4f       	sbci	r29, 0xFF	; 255
    c7ee:	59 83       	std	Y+1, r21	; 0x01
    c7f0:	48 83       	st	Y, r20
    c7f2:	c1 5d       	subi	r28, 0xD1	; 209
    c7f4:	d0 40       	sbci	r29, 0x00	; 0
    c7f6:	0f 97       	sbiw	r24, 0x0f	; 15
    c7f8:	b3 01       	movw	r22, r6
    c7fa:	68 0f       	add	r22, r24
    c7fc:	79 1f       	adc	r23, r25
    c7fe:	cc 52       	subi	r28, 0x2C	; 44
    c800:	df 4f       	sbci	r29, 0xFF	; 255
    c802:	79 83       	std	Y+1, r23	; 0x01
    c804:	68 83       	st	Y, r22
    c806:	c4 5d       	subi	r28, 0xD4	; 212
    c808:	d0 40       	sbci	r29, 0x00	; 0
    c80a:	02 97       	sbiw	r24, 0x02	; 2
    c80c:	f3 01       	movw	r30, r6
    c80e:	e8 0f       	add	r30, r24
    c810:	f9 1f       	adc	r31, r25
    c812:	ca 52       	subi	r28, 0x2A	; 42
    c814:	df 4f       	sbci	r29, 0xFF	; 255
    c816:	f9 83       	std	Y+1, r31	; 0x01
    c818:	e8 83       	st	Y, r30
    c81a:	c6 5d       	subi	r28, 0xD6	; 214
    c81c:	d0 40       	sbci	r29, 0x00	; 0
    c81e:	01 97       	sbiw	r24, 0x01	; 1
    c820:	93 01       	movw	r18, r6
    c822:	28 0f       	add	r18, r24
    c824:	39 1f       	adc	r19, r25
    c826:	c8 52       	subi	r28, 0x28	; 40
    c828:	df 4f       	sbci	r29, 0xFF	; 255
    c82a:	39 83       	std	Y+1, r19	; 0x01
    c82c:	28 83       	st	Y, r18
    c82e:	c8 5d       	subi	r28, 0xD8	; 216
    c830:	d0 40       	sbci	r29, 0x00	; 0
    c832:	01 97       	sbiw	r24, 0x01	; 1
    c834:	a3 01       	movw	r20, r6
    c836:	48 0f       	add	r20, r24
    c838:	59 1f       	adc	r21, r25
    c83a:	c6 52       	subi	r28, 0x26	; 38
    c83c:	df 4f       	sbci	r29, 0xFF	; 255
    c83e:	59 83       	std	Y+1, r21	; 0x01
    c840:	48 83       	st	Y, r20
    c842:	ca 5d       	subi	r28, 0xDA	; 218
    c844:	d0 40       	sbci	r29, 0x00	; 0
    c846:	02 97       	sbiw	r24, 0x02	; 2
    c848:	b3 01       	movw	r22, r6
    c84a:	68 0f       	add	r22, r24
    c84c:	79 1f       	adc	r23, r25
    c84e:	c4 52       	subi	r28, 0x24	; 36
    c850:	df 4f       	sbci	r29, 0xFF	; 255
    c852:	79 83       	std	Y+1, r23	; 0x01
    c854:	68 83       	st	Y, r22
    c856:	cc 5d       	subi	r28, 0xDC	; 220
    c858:	d0 40       	sbci	r29, 0x00	; 0
    c85a:	02 97       	sbiw	r24, 0x02	; 2
    c85c:	f3 01       	movw	r30, r6
    c85e:	e8 0f       	add	r30, r24
    c860:	f9 1f       	adc	r31, r25
    c862:	c2 52       	subi	r28, 0x22	; 34
    c864:	df 4f       	sbci	r29, 0xFF	; 255
    c866:	f9 83       	std	Y+1, r31	; 0x01
    c868:	e8 83       	st	Y, r30
    c86a:	ce 5d       	subi	r28, 0xDE	; 222
    c86c:	d0 40       	sbci	r29, 0x00	; 0
    c86e:	31 2c       	mov	r3, r1
    c870:	91 2c       	mov	r9, r1
    c872:	ce 54       	subi	r28, 0x4E	; 78
    c874:	df 4f       	sbci	r29, 0xFF	; 255
    c876:	88 81       	ld	r24, Y
    c878:	c2 5b       	subi	r28, 0xB2	; 178
    c87a:	d0 40       	sbci	r29, 0x00	; 0
    c87c:	cd 54       	subi	r28, 0x4D	; 77
    c87e:	df 4f       	sbci	r29, 0xFF	; 255
    c880:	98 81       	ld	r25, Y
    c882:	c3 5b       	subi	r28, 0xB3	; 179
    c884:	d0 40       	sbci	r29, 0x00	; 0
    c886:	89 17       	cp	r24, r25
    c888:	08 f0       	brcs	.+2      	; 0xc88c <draw_menu(bool)+0x1b7c>
    c88a:	78 c1       	rjmp	.+752    	; 0xcb7c <draw_menu(bool)+0x1e6c>
    c88c:	c0 54       	subi	r28, 0x40	; 64
    c88e:	df 4f       	sbci	r29, 0xFF	; 255
    c890:	e8 81       	ld	r30, Y
    c892:	f9 81       	ldd	r31, Y+1	; 0x01
    c894:	c0 5c       	subi	r28, 0xC0	; 192
    c896:	d0 40       	sbci	r29, 0x00	; 0
    c898:	94 91       	lpm	r25, Z
    c89a:	91 11       	cpse	r25, r1
    c89c:	39 c0       	rjmp	.+114    	; 0xc910 <draw_menu(bool)+0x1c00>
    c89e:	ca 53       	subi	r28, 0x3A	; 58
    c8a0:	df 4f       	sbci	r29, 0xFF	; 255
    c8a2:	e8 81       	ld	r30, Y
    c8a4:	f9 81       	ldd	r31, Y+1	; 0x01
    c8a6:	c6 5c       	subi	r28, 0xC6	; 198
    c8a8:	d0 40       	sbci	r29, 0x00	; 0
    c8aa:	25 91       	lpm	r18, Z+
    c8ac:	34 91       	lpm	r19, Z
    c8ae:	ca 54       	subi	r28, 0x4A	; 74
    c8b0:	df 4f       	sbci	r29, 0xFF	; 255
    c8b2:	48 81       	ld	r20, Y
    c8b4:	59 81       	ldd	r21, Y+1	; 0x01
    c8b6:	c6 5b       	subi	r28, 0xB6	; 182
    c8b8:	d0 40       	sbci	r29, 0x00	; 0
    c8ba:	42 0f       	add	r20, r18
    c8bc:	53 1f       	adc	r21, r19
    c8be:	c4 54       	subi	r28, 0x44	; 68
    c8c0:	df 4f       	sbci	r29, 0xFF	; 255
    c8c2:	59 83       	std	Y+1, r21	; 0x01
    c8c4:	48 83       	st	Y, r20
    c8c6:	cc 5b       	subi	r28, 0xBC	; 188
    c8c8:	d0 40       	sbci	r29, 0x00	; 0
    c8ca:	c8 53       	subi	r28, 0x38	; 56
    c8cc:	df 4f       	sbci	r29, 0xFF	; 255
    c8ce:	e8 81       	ld	r30, Y
    c8d0:	f9 81       	ldd	r31, Y+1	; 0x01
    c8d2:	c8 5c       	subi	r28, 0xC8	; 200
    c8d4:	d0 40       	sbci	r29, 0x00	; 0
    c8d6:	25 91       	lpm	r18, Z+
    c8d8:	34 91       	lpm	r19, Z
    c8da:	c5 53       	subi	r28, 0x35	; 53
    c8dc:	df 4f       	sbci	r29, 0xFF	; 255
    c8de:	e8 81       	ld	r30, Y
    c8e0:	f9 81       	ldd	r31, Y+1	; 0x01
    c8e2:	cb 5c       	subi	r28, 0xCB	; 203
    c8e4:	d0 40       	sbci	r29, 0x00	; 0
    c8e6:	94 91       	lpm	r25, Z
    c8e8:	c8 54       	subi	r28, 0x48	; 72
    c8ea:	df 4f       	sbci	r29, 0xFF	; 255
    c8ec:	48 81       	ld	r20, Y
    c8ee:	59 81       	ldd	r21, Y+1	; 0x01
    c8f0:	c8 5b       	subi	r28, 0xB8	; 184
    c8f2:	d0 40       	sbci	r29, 0x00	; 0
    c8f4:	24 0f       	add	r18, r20
    c8f6:	35 1f       	adc	r19, r21
    c8f8:	b9 01       	movw	r22, r18
    c8fa:	99 9d       	mul	r25, r9
    c8fc:	60 0d       	add	r22, r0
    c8fe:	71 1d       	adc	r23, r1
    c900:	11 24       	eor	r1, r1
    c902:	c2 54       	subi	r28, 0x42	; 66
    c904:	df 4f       	sbci	r29, 0xFF	; 255
    c906:	79 83       	std	Y+1, r23	; 0x01
    c908:	68 83       	st	Y, r22
    c90a:	ce 5b       	subi	r28, 0xBE	; 190
    c90c:	d0 40       	sbci	r29, 0x00	; 0
    c90e:	93 94       	inc	r9
    c910:	c0 54       	subi	r28, 0x40	; 64
    c912:	df 4f       	sbci	r29, 0xFF	; 255
    c914:	e8 81       	ld	r30, Y
    c916:	f9 81       	ldd	r31, Y+1	; 0x01
    c918:	c0 5c       	subi	r28, 0xC0	; 192
    c91a:	d0 40       	sbci	r29, 0x00	; 0
    c91c:	94 91       	lpm	r25, Z
    c91e:	91 30       	cpi	r25, 0x01	; 1
    c920:	09 f0       	breq	.+2      	; 0xc924 <draw_menu(bool)+0x1c14>
    c922:	39 c0       	rjmp	.+114    	; 0xc996 <draw_menu(bool)+0x1c86>
    c924:	c8 53       	subi	r28, 0x38	; 56
    c926:	df 4f       	sbci	r29, 0xFF	; 255
    c928:	e8 81       	ld	r30, Y
    c92a:	f9 81       	ldd	r31, Y+1	; 0x01
    c92c:	c8 5c       	subi	r28, 0xC8	; 200
    c92e:	d0 40       	sbci	r29, 0x00	; 0
    c930:	25 91       	lpm	r18, Z+
    c932:	34 91       	lpm	r19, Z
    c934:	c8 54       	subi	r28, 0x48	; 72
    c936:	df 4f       	sbci	r29, 0xFF	; 255
    c938:	48 81       	ld	r20, Y
    c93a:	59 81       	ldd	r21, Y+1	; 0x01
    c93c:	c8 5b       	subi	r28, 0xB8	; 184
    c93e:	d0 40       	sbci	r29, 0x00	; 0
    c940:	42 0f       	add	r20, r18
    c942:	53 1f       	adc	r21, r19
    c944:	c2 54       	subi	r28, 0x42	; 66
    c946:	df 4f       	sbci	r29, 0xFF	; 255
    c948:	59 83       	std	Y+1, r21	; 0x01
    c94a:	48 83       	st	Y, r20
    c94c:	ce 5b       	subi	r28, 0xBE	; 190
    c94e:	d0 40       	sbci	r29, 0x00	; 0
    c950:	ca 53       	subi	r28, 0x3A	; 58
    c952:	df 4f       	sbci	r29, 0xFF	; 255
    c954:	e8 81       	ld	r30, Y
    c956:	f9 81       	ldd	r31, Y+1	; 0x01
    c958:	c6 5c       	subi	r28, 0xC6	; 198
    c95a:	d0 40       	sbci	r29, 0x00	; 0
    c95c:	25 91       	lpm	r18, Z+
    c95e:	34 91       	lpm	r19, Z
    c960:	c3 53       	subi	r28, 0x33	; 51
    c962:	df 4f       	sbci	r29, 0xFF	; 255
    c964:	e8 81       	ld	r30, Y
    c966:	f9 81       	ldd	r31, Y+1	; 0x01
    c968:	cd 5c       	subi	r28, 0xCD	; 205
    c96a:	d0 40       	sbci	r29, 0x00	; 0
    c96c:	94 91       	lpm	r25, Z
    c96e:	ca 54       	subi	r28, 0x4A	; 74
    c970:	df 4f       	sbci	r29, 0xFF	; 255
    c972:	48 81       	ld	r20, Y
    c974:	59 81       	ldd	r21, Y+1	; 0x01
    c976:	c6 5b       	subi	r28, 0xB6	; 182
    c978:	d0 40       	sbci	r29, 0x00	; 0
    c97a:	24 0f       	add	r18, r20
    c97c:	35 1f       	adc	r19, r21
    c97e:	b9 01       	movw	r22, r18
    c980:	99 9d       	mul	r25, r9
    c982:	60 0d       	add	r22, r0
    c984:	71 1d       	adc	r23, r1
    c986:	11 24       	eor	r1, r1
    c988:	c4 54       	subi	r28, 0x44	; 68
    c98a:	df 4f       	sbci	r29, 0xFF	; 255
    c98c:	79 83       	std	Y+1, r23	; 0x01
    c98e:	68 83       	st	Y, r22
    c990:	cc 5b       	subi	r28, 0xBC	; 188
    c992:	d0 40       	sbci	r29, 0x00	; 0
    c994:	93 94       	inc	r9
    c996:	c0 54       	subi	r28, 0x40	; 64
    c998:	df 4f       	sbci	r29, 0xFF	; 255
    c99a:	e8 81       	ld	r30, Y
    c99c:	f9 81       	ldd	r31, Y+1	; 0x01
    c99e:	c0 5c       	subi	r28, 0xC0	; 192
    c9a0:	d0 40       	sbci	r29, 0x00	; 0
    c9a2:	94 91       	lpm	r25, Z
    c9a4:	92 30       	cpi	r25, 0x02	; 2
    c9a6:	09 f0       	breq	.+2      	; 0xc9aa <draw_menu(bool)+0x1c9a>
    c9a8:	50 c0       	rjmp	.+160    	; 0xca4a <draw_menu(bool)+0x1d3a>
    c9aa:	ca 53       	subi	r28, 0x3A	; 58
    c9ac:	df 4f       	sbci	r29, 0xFF	; 255
    c9ae:	e8 81       	ld	r30, Y
    c9b0:	f9 81       	ldd	r31, Y+1	; 0x01
    c9b2:	c6 5c       	subi	r28, 0xC6	; 198
    c9b4:	d0 40       	sbci	r29, 0x00	; 0
    c9b6:	25 91       	lpm	r18, Z+
    c9b8:	34 91       	lpm	r19, Z
    c9ba:	c3 53       	subi	r28, 0x33	; 51
    c9bc:	df 4f       	sbci	r29, 0xFF	; 255
    c9be:	e8 81       	ld	r30, Y
    c9c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c9c2:	cd 5c       	subi	r28, 0xCD	; 205
    c9c4:	d0 40       	sbci	r29, 0x00	; 0
    c9c6:	94 91       	lpm	r25, Z
    c9c8:	ca 54       	subi	r28, 0x4A	; 74
    c9ca:	df 4f       	sbci	r29, 0xFF	; 255
    c9cc:	48 81       	ld	r20, Y
    c9ce:	59 81       	ldd	r21, Y+1	; 0x01
    c9d0:	c6 5b       	subi	r28, 0xB6	; 182
    c9d2:	d0 40       	sbci	r29, 0x00	; 0
    c9d4:	24 0f       	add	r18, r20
    c9d6:	35 1f       	adc	r19, r21
    c9d8:	b9 01       	movw	r22, r18
    c9da:	99 9d       	mul	r25, r9
    c9dc:	60 0d       	add	r22, r0
    c9de:	71 1d       	adc	r23, r1
    c9e0:	11 24       	eor	r1, r1
    c9e2:	c4 54       	subi	r28, 0x44	; 68
    c9e4:	df 4f       	sbci	r29, 0xFF	; 255
    c9e6:	79 83       	std	Y+1, r23	; 0x01
    c9e8:	68 83       	st	Y, r22
    c9ea:	cc 5b       	subi	r28, 0xBC	; 188
    c9ec:	d0 40       	sbci	r29, 0x00	; 0
    c9ee:	c8 53       	subi	r28, 0x38	; 56
    c9f0:	df 4f       	sbci	r29, 0xFF	; 255
    c9f2:	e8 81       	ld	r30, Y
    c9f4:	f9 81       	ldd	r31, Y+1	; 0x01
    c9f6:	c8 5c       	subi	r28, 0xC8	; 200
    c9f8:	d0 40       	sbci	r29, 0x00	; 0
    c9fa:	25 91       	lpm	r18, Z+
    c9fc:	34 91       	lpm	r19, Z
    c9fe:	c5 53       	subi	r28, 0x35	; 53
    ca00:	df 4f       	sbci	r29, 0xFF	; 255
    ca02:	e8 81       	ld	r30, Y
    ca04:	f9 81       	ldd	r31, Y+1	; 0x01
    ca06:	cb 5c       	subi	r28, 0xCB	; 203
    ca08:	d0 40       	sbci	r29, 0x00	; 0
    ca0a:	94 91       	lpm	r25, Z
    ca0c:	c8 54       	subi	r28, 0x48	; 72
    ca0e:	df 4f       	sbci	r29, 0xFF	; 255
    ca10:	48 81       	ld	r20, Y
    ca12:	59 81       	ldd	r21, Y+1	; 0x01
    ca14:	c8 5b       	subi	r28, 0xB8	; 184
    ca16:	d0 40       	sbci	r29, 0x00	; 0
    ca18:	24 0f       	add	r18, r20
    ca1a:	35 1f       	adc	r19, r21
    ca1c:	b9 01       	movw	r22, r18
    ca1e:	93 9d       	mul	r25, r3
    ca20:	60 0d       	add	r22, r0
    ca22:	71 1d       	adc	r23, r1
    ca24:	11 24       	eor	r1, r1
    ca26:	c2 54       	subi	r28, 0x42	; 66
    ca28:	df 4f       	sbci	r29, 0xFF	; 255
    ca2a:	79 83       	std	Y+1, r23	; 0x01
    ca2c:	68 83       	st	Y, r22
    ca2e:	ce 5b       	subi	r28, 0xBE	; 190
    ca30:	d0 40       	sbci	r29, 0x00	; 0
    ca32:	93 94       	inc	r9
    ca34:	c1 53       	subi	r28, 0x31	; 49
    ca36:	df 4f       	sbci	r29, 0xFF	; 255
    ca38:	e8 81       	ld	r30, Y
    ca3a:	f9 81       	ldd	r31, Y+1	; 0x01
    ca3c:	cf 5c       	subi	r28, 0xCF	; 207
    ca3e:	d0 40       	sbci	r29, 0x00	; 0
    ca40:	94 91       	lpm	r25, Z
    ca42:	99 16       	cp	r9, r25
    ca44:	10 f0       	brcs	.+4      	; 0xca4a <draw_menu(bool)+0x1d3a>
    ca46:	33 94       	inc	r3
    ca48:	91 2c       	mov	r9, r1
    ca4a:	c6 54       	subi	r28, 0x46	; 70
    ca4c:	df 4f       	sbci	r29, 0xFF	; 255
    ca4e:	e8 81       	ld	r30, Y
    ca50:	f9 81       	ldd	r31, Y+1	; 0x01
    ca52:	ca 5b       	subi	r28, 0xBA	; 186
    ca54:	d0 40       	sbci	r29, 0x00	; 0
    ca56:	44 91       	lpm	r20, Z
    ca58:	8e 01       	movw	r16, r28
    ca5a:	0f 57       	subi	r16, 0x7F	; 127
    ca5c:	1f 4f       	sbci	r17, 0xFF	; 255
    ca5e:	9e 01       	movw	r18, r28
    ca60:	2f 5f       	subi	r18, 0xFF	; 255
    ca62:	3f 4f       	sbci	r19, 0xFF	; 255
    ca64:	cf 54       	subi	r28, 0x4F	; 79
    ca66:	df 4f       	sbci	r29, 0xFF	; 255
    ca68:	68 81       	ld	r22, Y
    ca6a:	c1 5b       	subi	r28, 0xB1	; 177
    ca6c:	d0 40       	sbci	r29, 0x00	; 0
    ca6e:	ce 51       	subi	r28, 0x1E	; 30
    ca70:	df 4f       	sbci	r29, 0xFF	; 255
    ca72:	e8 81       	ld	r30, Y
    ca74:	f9 81       	ldd	r31, Y+1	; 0x01
    ca76:	c2 5e       	subi	r28, 0xE2	; 226
    ca78:	d0 40       	sbci	r29, 0x00	; 0
    ca7a:	19 95       	eicall
    ca7c:	cf 52       	subi	r28, 0x2F	; 47
    ca7e:	df 4f       	sbci	r29, 0xFF	; 255
    ca80:	e8 81       	ld	r30, Y
    ca82:	f9 81       	ldd	r31, Y+1	; 0x01
    ca84:	c1 5d       	subi	r28, 0xD1	; 209
    ca86:	d0 40       	sbci	r29, 0x00	; 0
    ca88:	25 91       	lpm	r18, Z+
    ca8a:	34 91       	lpm	r19, Z
    ca8c:	c6 54       	subi	r28, 0x46	; 70
    ca8e:	df 4f       	sbci	r29, 0xFF	; 255
    ca90:	e8 81       	ld	r30, Y
    ca92:	f9 81       	ldd	r31, Y+1	; 0x01
    ca94:	ca 5b       	subi	r28, 0xBA	; 186
    ca96:	d0 40       	sbci	r29, 0x00	; 0
    ca98:	84 91       	lpm	r24, Z
    ca9a:	cf 54       	subi	r28, 0x4F	; 79
    ca9c:	df 4f       	sbci	r29, 0xFF	; 255
    ca9e:	68 81       	ld	r22, Y
    caa0:	c1 5b       	subi	r28, 0xB1	; 177
    caa2:	d0 40       	sbci	r29, 0x00	; 0
    caa4:	70 e0       	ldi	r23, 0x00	; 0
    caa6:	ce 54       	subi	r28, 0x4E	; 78
    caa8:	df 4f       	sbci	r29, 0xFF	; 255
    caaa:	48 81       	ld	r20, Y
    caac:	c2 5b       	subi	r28, 0xB2	; 178
    caae:	d0 40       	sbci	r29, 0x00	; 0
    cab0:	90 e0       	ldi	r25, 0x00	; 0
    cab2:	f9 01       	movw	r30, r18
    cab4:	19 95       	eicall
    cab6:	cc 52       	subi	r28, 0x2C	; 44
    cab8:	df 4f       	sbci	r29, 0xFF	; 255
    caba:	e8 81       	ld	r30, Y
    cabc:	f9 81       	ldd	r31, Y+1	; 0x01
    cabe:	c4 5d       	subi	r28, 0xD4	; 212
    cac0:	d0 40       	sbci	r29, 0x00	; 0
    cac2:	a5 90       	lpm	r10, Z+
    cac4:	b4 90       	lpm	r11, Z
    cac6:	ca 52       	subi	r28, 0x2A	; 42
    cac8:	df 4f       	sbci	r29, 0xFF	; 255
    caca:	e8 81       	ld	r30, Y
    cacc:	f9 81       	ldd	r31, Y+1	; 0x01
    cace:	c6 5d       	subi	r28, 0xD6	; 214
    cad0:	d0 40       	sbci	r29, 0x00	; 0
    cad2:	c5 90       	lpm	r12, Z+
    cad4:	d4 90       	lpm	r13, Z
    cad6:	c8 52       	subi	r28, 0x28	; 40
    cad8:	df 4f       	sbci	r29, 0xFF	; 255
    cada:	e8 81       	ld	r30, Y
    cadc:	f9 81       	ldd	r31, Y+1	; 0x01
    cade:	c8 5d       	subi	r28, 0xD8	; 216
    cae0:	d0 40       	sbci	r29, 0x00	; 0
    cae2:	e4 90       	lpm	r14, Z
    cae4:	c6 52       	subi	r28, 0x26	; 38
    cae6:	df 4f       	sbci	r29, 0xFF	; 255
    cae8:	e8 81       	ld	r30, Y
    caea:	f9 81       	ldd	r31, Y+1	; 0x01
    caec:	ca 5d       	subi	r28, 0xDA	; 218
    caee:	d0 40       	sbci	r29, 0x00	; 0
    caf0:	04 91       	lpm	r16, Z
    caf2:	c4 52       	subi	r28, 0x24	; 36
    caf4:	df 4f       	sbci	r29, 0xFF	; 255
    caf6:	e8 81       	ld	r30, Y
    caf8:	f9 81       	ldd	r31, Y+1	; 0x01
    cafa:	cc 5d       	subi	r28, 0xDC	; 220
    cafc:	d0 40       	sbci	r29, 0x00	; 0
    cafe:	25 91       	lpm	r18, Z+
    cb00:	34 91       	lpm	r19, Z
    cb02:	c2 52       	subi	r28, 0x22	; 34
    cb04:	df 4f       	sbci	r29, 0xFF	; 255
    cb06:	e8 81       	ld	r30, Y
    cb08:	f9 81       	ldd	r31, Y+1	; 0x01
    cb0a:	ce 5d       	subi	r28, 0xDE	; 222
    cb0c:	d0 40       	sbci	r29, 0x00	; 0
    cb0e:	45 91       	lpm	r20, Z+
    cb10:	54 91       	lpm	r21, Z
    cb12:	88 24       	eor	r8, r8
    cb14:	83 94       	inc	r8
    cb16:	81 11       	cpse	r24, r1
    cb18:	01 c0       	rjmp	.+2      	; 0xcb1c <draw_menu(bool)+0x1e0c>
    cb1a:	81 2c       	mov	r8, r1
    cb1c:	cb 54       	subi	r28, 0x4B	; 75
    cb1e:	df 4f       	sbci	r29, 0xFF	; 255
    cb20:	f8 81       	ld	r31, Y
    cb22:	c5 5b       	subi	r28, 0xB5	; 181
    cb24:	d0 40       	sbci	r29, 0x00	; 0
    cb26:	ff 93       	push	r31
    cb28:	cc 54       	subi	r28, 0x4C	; 76
    cb2a:	df 4f       	sbci	r29, 0xFF	; 255
    cb2c:	68 81       	ld	r22, Y
    cb2e:	c4 5b       	subi	r28, 0xB4	; 180
    cb30:	d0 40       	sbci	r29, 0x00	; 0
    cb32:	6f 93       	push	r22
    cb34:	81 e0       	ldi	r24, 0x01	; 1
    cb36:	90 e0       	ldi	r25, 0x00	; 0
    cb38:	8c 0f       	add	r24, r28
    cb3a:	9d 1f       	adc	r25, r29
    cb3c:	9f 93       	push	r25
    cb3e:	8f 93       	push	r24
    cb40:	c2 54       	subi	r28, 0x42	; 66
    cb42:	df 4f       	sbci	r29, 0xFF	; 255
    cb44:	68 81       	ld	r22, Y
    cb46:	79 81       	ldd	r23, Y+1	; 0x01
    cb48:	ce 5b       	subi	r28, 0xBE	; 190
    cb4a:	d0 40       	sbci	r29, 0x00	; 0
    cb4c:	c4 54       	subi	r28, 0x44	; 68
    cb4e:	df 4f       	sbci	r29, 0xFF	; 255
    cb50:	88 81       	ld	r24, Y
    cb52:	99 81       	ldd	r25, Y+1	; 0x01
    cb54:	cc 5b       	subi	r28, 0xBC	; 188
    cb56:	d0 40       	sbci	r29, 0x00	; 0
    cb58:	0e 94 eb 53 	call	0xa7d6	; 0xa7d6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    cb5c:	ce 54       	subi	r28, 0x4E	; 78
    cb5e:	df 4f       	sbci	r29, 0xFF	; 255
    cb60:	88 81       	ld	r24, Y
    cb62:	c2 5b       	subi	r28, 0xB2	; 178
    cb64:	d0 40       	sbci	r29, 0x00	; 0
    cb66:	8f 5f       	subi	r24, 0xFF	; 255
    cb68:	ce 54       	subi	r28, 0x4E	; 78
    cb6a:	df 4f       	sbci	r29, 0xFF	; 255
    cb6c:	88 83       	st	Y, r24
    cb6e:	c2 5b       	subi	r28, 0xB2	; 178
    cb70:	d0 40       	sbci	r29, 0x00	; 0
    cb72:	0f 90       	pop	r0
    cb74:	0f 90       	pop	r0
    cb76:	0f 90       	pop	r0
    cb78:	0f 90       	pop	r0
    cb7a:	7b ce       	rjmp	.-778    	; 0xc872 <draw_menu(bool)+0x1b62>
    cb7c:	ce 53       	subi	r28, 0x3E	; 62
    cb7e:	df 4f       	sbci	r29, 0xFF	; 255
    cb80:	e8 81       	ld	r30, Y
    cb82:	f9 81       	ldd	r31, Y+1	; 0x01
    cb84:	c2 5c       	subi	r28, 0xC2	; 194
    cb86:	d0 40       	sbci	r29, 0x00	; 0
    cb88:	ef 2b       	or	r30, r31
    cb8a:	09 f4       	brne	.+2      	; 0xcb8e <draw_menu(bool)+0x1e7e>
    cb8c:	c5 c1       	rjmp	.+906    	; 0xcf18 <draw_menu(bool)+0x2208>
    cb8e:	cc 53       	subi	r28, 0x3C	; 60
    cb90:	df 4f       	sbci	r29, 0xFF	; 255
    cb92:	28 81       	ld	r18, Y
    cb94:	39 81       	ldd	r19, Y+1	; 0x01
    cb96:	c4 5c       	subi	r28, 0xC4	; 196
    cb98:	d0 40       	sbci	r29, 0x00	; 0
    cb9a:	23 2b       	or	r18, r19
    cb9c:	09 f4       	brne	.+2      	; 0xcba0 <draw_menu(bool)+0x1e90>
    cb9e:	bc c1       	rjmp	.+888    	; 0xcf18 <draw_menu(bool)+0x2208>
    cba0:	ce 54       	subi	r28, 0x4E	; 78
    cba2:	df 4f       	sbci	r29, 0xFF	; 255
    cba4:	18 82       	st	Y, r1
    cba6:	c2 5b       	subi	r28, 0xB2	; 178
    cba8:	d0 40       	sbci	r29, 0x00	; 0
    cbaa:	f2 01       	movw	r30, r4
    cbac:	e8 54       	subi	r30, 0x48	; 72
    cbae:	fd 4f       	sbci	r31, 0xFD	; 253
    cbb0:	e6 0d       	add	r30, r6
    cbb2:	f7 1d       	adc	r31, r7
    cbb4:	25 91       	lpm	r18, Z+
    cbb6:	34 91       	lpm	r19, Z
    cbb8:	c2 01       	movw	r24, r4
    cbba:	8d 54       	subi	r24, 0x4D	; 77
    cbbc:	9d 4f       	sbci	r25, 0xFD	; 253
    cbbe:	a3 01       	movw	r20, r6
    cbc0:	48 0f       	add	r20, r24
    cbc2:	59 1f       	adc	r21, r25
    cbc4:	c0 54       	subi	r28, 0x40	; 64
    cbc6:	df 4f       	sbci	r29, 0xFF	; 255
    cbc8:	59 83       	std	Y+1, r21	; 0x01
    cbca:	48 83       	st	Y, r20
    cbcc:	c0 5c       	subi	r28, 0xC0	; 192
    cbce:	d0 40       	sbci	r29, 0x00	; 0
    cbd0:	fa 01       	movw	r30, r20
    cbd2:	84 91       	lpm	r24, Z
    cbd4:	cf 54       	subi	r28, 0x4F	; 79
    cbd6:	df 4f       	sbci	r29, 0xFF	; 255
    cbd8:	68 81       	ld	r22, Y
    cbda:	c1 5b       	subi	r28, 0xB1	; 177
    cbdc:	d0 40       	sbci	r29, 0x00	; 0
    cbde:	70 e0       	ldi	r23, 0x00	; 0
    cbe0:	40 e0       	ldi	r20, 0x00	; 0
    cbe2:	90 e0       	ldi	r25, 0x00	; 0
    cbe4:	f9 01       	movw	r30, r18
    cbe6:	19 95       	eicall
    cbe8:	cd 54       	subi	r28, 0x4D	; 77
    cbea:	df 4f       	sbci	r29, 0xFF	; 255
    cbec:	88 83       	st	Y, r24
    cbee:	c3 5b       	subi	r28, 0xB3	; 179
    cbf0:	d0 40       	sbci	r29, 0x00	; 0
    cbf2:	f2 01       	movw	r30, r4
    cbf4:	ee 54       	subi	r30, 0x4E	; 78
    cbf6:	fd 4f       	sbci	r31, 0xFD	; 253
    cbf8:	e6 0d       	add	r30, r6
    cbfa:	f7 1d       	adc	r31, r7
    cbfc:	44 91       	lpm	r20, Z
    cbfe:	c2 01       	movw	r24, r4
    cc00:	80 55       	subi	r24, 0x50	; 80
    cc02:	9d 4f       	sbci	r25, 0xFD	; 253
    cc04:	93 01       	movw	r18, r6
    cc06:	28 0f       	add	r18, r24
    cc08:	39 1f       	adc	r19, r25
    cc0a:	c5 53       	subi	r28, 0x35	; 53
    cc0c:	df 4f       	sbci	r29, 0xFF	; 255
    cc0e:	39 83       	std	Y+1, r19	; 0x01
    cc10:	28 83       	st	Y, r18
    cc12:	cb 5c       	subi	r28, 0xCB	; 203
    cc14:	d0 40       	sbci	r29, 0x00	; 0
    cc16:	4f 3f       	cpi	r20, 0xFF	; 255
    cc18:	99 f0       	breq	.+38     	; 0xcc40 <draw_menu(bool)+0x1f30>
    cc1a:	f9 01       	movw	r30, r18
    cc1c:	24 91       	lpm	r18, Z
    cc1e:	f2 01       	movw	r30, r4
    cc20:	ef 54       	subi	r30, 0x4F	; 79
    cc22:	fd 4f       	sbci	r31, 0xFD	; 253
    cc24:	e6 0d       	add	r30, r6
    cc26:	f7 1d       	adc	r31, r7
    cc28:	e4 91       	lpm	r30, Z
    cc2a:	2e 9f       	mul	r18, r30
    cc2c:	20 2d       	mov	r18, r0
    cc2e:	11 24       	eor	r1, r1
    cc30:	be 01       	movw	r22, r28
    cc32:	6d 54       	subi	r22, 0x4D	; 77
    cc34:	7f 4f       	sbci	r23, 0xFF	; 255
    cc36:	ce 01       	movw	r24, r28
    cc38:	8e 54       	subi	r24, 0x4E	; 78
    cc3a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc3c:	0e 94 b5 52 	call	0xa56a	; 0xa56a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    cc40:	ce 54       	subi	r28, 0x4E	; 78
    cc42:	df 4f       	sbci	r29, 0xFF	; 255
    cc44:	88 80       	ld	r8, Y
    cc46:	c2 5b       	subi	r28, 0xB2	; 178
    cc48:	d0 40       	sbci	r29, 0x00	; 0
    cc4a:	cd 54       	subi	r28, 0x4D	; 77
    cc4c:	df 4f       	sbci	r29, 0xFF	; 255
    cc4e:	f8 81       	ld	r31, Y
    cc50:	c3 5b       	subi	r28, 0xB3	; 179
    cc52:	d0 40       	sbci	r29, 0x00	; 0
    cc54:	c3 53       	subi	r28, 0x33	; 51
    cc56:	df 4f       	sbci	r29, 0xFF	; 255
    cc58:	f8 83       	st	Y, r31
    cc5a:	cd 5c       	subi	r28, 0xCD	; 205
    cc5c:	d0 40       	sbci	r29, 0x00	; 0
    cc5e:	c2 01       	movw	r24, r4
    cc60:	81 55       	subi	r24, 0x51	; 81
    cc62:	9d 4f       	sbci	r25, 0xFD	; 253
    cc64:	93 01       	movw	r18, r6
    cc66:	28 0f       	add	r18, r24
    cc68:	39 1f       	adc	r19, r25
    cc6a:	c6 54       	subi	r28, 0x46	; 70
    cc6c:	df 4f       	sbci	r29, 0xFF	; 255
    cc6e:	39 83       	std	Y+1, r19	; 0x01
    cc70:	28 83       	st	Y, r18
    cc72:	ca 5b       	subi	r28, 0xBA	; 186
    cc74:	d0 40       	sbci	r29, 0x00	; 0
    cc76:	62 01       	movw	r12, r4
    cc78:	31 e6       	ldi	r19, 0x61	; 97
    cc7a:	c3 1a       	sub	r12, r19
    cc7c:	3d ef       	ldi	r19, 0xFD	; 253
    cc7e:	d3 0a       	sbc	r13, r19
    cc80:	c6 0c       	add	r12, r6
    cc82:	d7 1c       	adc	r13, r7
    cc84:	52 01       	movw	r10, r4
    cc86:	4f e5       	ldi	r20, 0x5F	; 95
    cc88:	a4 1a       	sub	r10, r20
    cc8a:	4d ef       	ldi	r20, 0xFD	; 253
    cc8c:	b4 0a       	sbc	r11, r20
    cc8e:	a6 0c       	add	r10, r6
    cc90:	b7 1c       	adc	r11, r7
    cc92:	01 97       	sbiw	r24, 0x01	; 1
    cc94:	b3 01       	movw	r22, r6
    cc96:	68 0f       	add	r22, r24
    cc98:	79 1f       	adc	r23, r25
    cc9a:	ca 53       	subi	r28, 0x3A	; 58
    cc9c:	df 4f       	sbci	r29, 0xFF	; 255
    cc9e:	79 83       	std	Y+1, r23	; 0x01
    cca0:	68 83       	st	Y, r22
    cca2:	c6 5c       	subi	r28, 0xC6	; 198
    cca4:	d0 40       	sbci	r29, 0x00	; 0
    cca6:	01 97       	sbiw	r24, 0x01	; 1
    cca8:	f3 01       	movw	r30, r6
    ccaa:	e8 0f       	add	r30, r24
    ccac:	f9 1f       	adc	r31, r25
    ccae:	c8 53       	subi	r28, 0x38	; 56
    ccb0:	df 4f       	sbci	r29, 0xFF	; 255
    ccb2:	f9 83       	std	Y+1, r31	; 0x01
    ccb4:	e8 83       	st	Y, r30
    ccb6:	c8 5c       	subi	r28, 0xC8	; 200
    ccb8:	d0 40       	sbci	r29, 0x00	; 0
    ccba:	08 97       	sbiw	r24, 0x08	; 8
    ccbc:	93 01       	movw	r18, r6
    ccbe:	28 0f       	add	r18, r24
    ccc0:	39 1f       	adc	r19, r25
    ccc2:	c1 53       	subi	r28, 0x31	; 49
    ccc4:	df 4f       	sbci	r29, 0xFF	; 255
    ccc6:	39 83       	std	Y+1, r19	; 0x01
    ccc8:	28 83       	st	Y, r18
    ccca:	cf 5c       	subi	r28, 0xCF	; 207
    cccc:	d0 40       	sbci	r29, 0x00	; 0
    ccce:	02 97       	sbiw	r24, 0x02	; 2
    ccd0:	a3 01       	movw	r20, r6
    ccd2:	48 0f       	add	r20, r24
    ccd4:	59 1f       	adc	r21, r25
    ccd6:	cf 52       	subi	r28, 0x2F	; 47
    ccd8:	df 4f       	sbci	r29, 0xFF	; 255
    ccda:	59 83       	std	Y+1, r21	; 0x01
    ccdc:	48 83       	st	Y, r20
    ccde:	c1 5d       	subi	r28, 0xD1	; 209
    cce0:	d0 40       	sbci	r29, 0x00	; 0
    cce2:	31 2c       	mov	r3, r1
    cce4:	91 2c       	mov	r9, r1
    cce6:	c3 53       	subi	r28, 0x33	; 51
    cce8:	df 4f       	sbci	r29, 0xFF	; 255
    ccea:	58 81       	ld	r21, Y
    ccec:	cd 5c       	subi	r28, 0xCD	; 205
    ccee:	d0 40       	sbci	r29, 0x00	; 0
    ccf0:	85 16       	cp	r8, r21
    ccf2:	08 f0       	brcs	.+2      	; 0xccf6 <draw_menu(bool)+0x1fe6>
    ccf4:	11 c1       	rjmp	.+546    	; 0xcf18 <draw_menu(bool)+0x2208>
    ccf6:	c6 54       	subi	r28, 0x46	; 70
    ccf8:	df 4f       	sbci	r29, 0xFF	; 255
    ccfa:	e8 81       	ld	r30, Y
    ccfc:	f9 81       	ldd	r31, Y+1	; 0x01
    ccfe:	ca 5b       	subi	r28, 0xBA	; 186
    cd00:	d0 40       	sbci	r29, 0x00	; 0
    cd02:	84 91       	lpm	r24, Z
    cd04:	81 11       	cpse	r24, r1
    cd06:	2f c0       	rjmp	.+94     	; 0xcd66 <draw_menu(bool)+0x2056>
    cd08:	f6 01       	movw	r30, r12
    cd0a:	85 91       	lpm	r24, Z+
    cd0c:	94 91       	lpm	r25, Z
    cd0e:	ca 54       	subi	r28, 0x4A	; 74
    cd10:	df 4f       	sbci	r29, 0xFF	; 255
    cd12:	28 81       	ld	r18, Y
    cd14:	39 81       	ldd	r19, Y+1	; 0x01
    cd16:	c6 5b       	subi	r28, 0xB6	; 182
    cd18:	d0 40       	sbci	r29, 0x00	; 0
    cd1a:	28 0f       	add	r18, r24
    cd1c:	39 1f       	adc	r19, r25
    cd1e:	c4 54       	subi	r28, 0x44	; 68
    cd20:	df 4f       	sbci	r29, 0xFF	; 255
    cd22:	39 83       	std	Y+1, r19	; 0x01
    cd24:	28 83       	st	Y, r18
    cd26:	cc 5b       	subi	r28, 0xBC	; 188
    cd28:	d0 40       	sbci	r29, 0x00	; 0
    cd2a:	f5 01       	movw	r30, r10
    cd2c:	85 91       	lpm	r24, Z+
    cd2e:	94 91       	lpm	r25, Z
    cd30:	ca 53       	subi	r28, 0x3A	; 58
    cd32:	df 4f       	sbci	r29, 0xFF	; 255
    cd34:	e8 81       	ld	r30, Y
    cd36:	f9 81       	ldd	r31, Y+1	; 0x01
    cd38:	c6 5c       	subi	r28, 0xC6	; 198
    cd3a:	d0 40       	sbci	r29, 0x00	; 0
    cd3c:	24 91       	lpm	r18, Z
    cd3e:	c8 54       	subi	r28, 0x48	; 72
    cd40:	df 4f       	sbci	r29, 0xFF	; 255
    cd42:	48 81       	ld	r20, Y
    cd44:	59 81       	ldd	r21, Y+1	; 0x01
    cd46:	c8 5b       	subi	r28, 0xB8	; 184
    cd48:	d0 40       	sbci	r29, 0x00	; 0
    cd4a:	84 0f       	add	r24, r20
    cd4c:	95 1f       	adc	r25, r21
    cd4e:	bc 01       	movw	r22, r24
    cd50:	29 9d       	mul	r18, r9
    cd52:	60 0d       	add	r22, r0
    cd54:	71 1d       	adc	r23, r1
    cd56:	11 24       	eor	r1, r1
    cd58:	c2 54       	subi	r28, 0x42	; 66
    cd5a:	df 4f       	sbci	r29, 0xFF	; 255
    cd5c:	79 83       	std	Y+1, r23	; 0x01
    cd5e:	68 83       	st	Y, r22
    cd60:	ce 5b       	subi	r28, 0xBE	; 190
    cd62:	d0 40       	sbci	r29, 0x00	; 0
    cd64:	93 94       	inc	r9
    cd66:	c6 54       	subi	r28, 0x46	; 70
    cd68:	df 4f       	sbci	r29, 0xFF	; 255
    cd6a:	e8 81       	ld	r30, Y
    cd6c:	f9 81       	ldd	r31, Y+1	; 0x01
    cd6e:	ca 5b       	subi	r28, 0xBA	; 186
    cd70:	d0 40       	sbci	r29, 0x00	; 0
    cd72:	84 91       	lpm	r24, Z
    cd74:	81 30       	cpi	r24, 0x01	; 1
    cd76:	79 f5       	brne	.+94     	; 0xcdd6 <draw_menu(bool)+0x20c6>
    cd78:	f5 01       	movw	r30, r10
    cd7a:	85 91       	lpm	r24, Z+
    cd7c:	94 91       	lpm	r25, Z
    cd7e:	c8 54       	subi	r28, 0x48	; 72
    cd80:	df 4f       	sbci	r29, 0xFF	; 255
    cd82:	28 81       	ld	r18, Y
    cd84:	39 81       	ldd	r19, Y+1	; 0x01
    cd86:	c8 5b       	subi	r28, 0xB8	; 184
    cd88:	d0 40       	sbci	r29, 0x00	; 0
    cd8a:	28 0f       	add	r18, r24
    cd8c:	39 1f       	adc	r19, r25
    cd8e:	c2 54       	subi	r28, 0x42	; 66
    cd90:	df 4f       	sbci	r29, 0xFF	; 255
    cd92:	39 83       	std	Y+1, r19	; 0x01
    cd94:	28 83       	st	Y, r18
    cd96:	ce 5b       	subi	r28, 0xBE	; 190
    cd98:	d0 40       	sbci	r29, 0x00	; 0
    cd9a:	f6 01       	movw	r30, r12
    cd9c:	85 91       	lpm	r24, Z+
    cd9e:	94 91       	lpm	r25, Z
    cda0:	c8 53       	subi	r28, 0x38	; 56
    cda2:	df 4f       	sbci	r29, 0xFF	; 255
    cda4:	e8 81       	ld	r30, Y
    cda6:	f9 81       	ldd	r31, Y+1	; 0x01
    cda8:	c8 5c       	subi	r28, 0xC8	; 200
    cdaa:	d0 40       	sbci	r29, 0x00	; 0
    cdac:	24 91       	lpm	r18, Z
    cdae:	ca 54       	subi	r28, 0x4A	; 74
    cdb0:	df 4f       	sbci	r29, 0xFF	; 255
    cdb2:	48 81       	ld	r20, Y
    cdb4:	59 81       	ldd	r21, Y+1	; 0x01
    cdb6:	c6 5b       	subi	r28, 0xB6	; 182
    cdb8:	d0 40       	sbci	r29, 0x00	; 0
    cdba:	84 0f       	add	r24, r20
    cdbc:	95 1f       	adc	r25, r21
    cdbe:	bc 01       	movw	r22, r24
    cdc0:	29 9d       	mul	r18, r9
    cdc2:	60 0d       	add	r22, r0
    cdc4:	71 1d       	adc	r23, r1
    cdc6:	11 24       	eor	r1, r1
    cdc8:	c4 54       	subi	r28, 0x44	; 68
    cdca:	df 4f       	sbci	r29, 0xFF	; 255
    cdcc:	79 83       	std	Y+1, r23	; 0x01
    cdce:	68 83       	st	Y, r22
    cdd0:	cc 5b       	subi	r28, 0xBC	; 188
    cdd2:	d0 40       	sbci	r29, 0x00	; 0
    cdd4:	93 94       	inc	r9
    cdd6:	c6 54       	subi	r28, 0x46	; 70
    cdd8:	df 4f       	sbci	r29, 0xFF	; 255
    cdda:	e8 81       	ld	r30, Y
    cddc:	f9 81       	ldd	r31, Y+1	; 0x01
    cdde:	ca 5b       	subi	r28, 0xBA	; 186
    cde0:	d0 40       	sbci	r29, 0x00	; 0
    cde2:	84 91       	lpm	r24, Z
    cde4:	82 30       	cpi	r24, 0x02	; 2
    cde6:	09 f0       	breq	.+2      	; 0xcdea <draw_menu(bool)+0x20da>
    cde8:	46 c0       	rjmp	.+140    	; 0xce76 <draw_menu(bool)+0x2166>
    cdea:	f6 01       	movw	r30, r12
    cdec:	85 91       	lpm	r24, Z+
    cdee:	94 91       	lpm	r25, Z
    cdf0:	c8 53       	subi	r28, 0x38	; 56
    cdf2:	df 4f       	sbci	r29, 0xFF	; 255
    cdf4:	e8 81       	ld	r30, Y
    cdf6:	f9 81       	ldd	r31, Y+1	; 0x01
    cdf8:	c8 5c       	subi	r28, 0xC8	; 200
    cdfa:	d0 40       	sbci	r29, 0x00	; 0
    cdfc:	24 91       	lpm	r18, Z
    cdfe:	ca 54       	subi	r28, 0x4A	; 74
    ce00:	df 4f       	sbci	r29, 0xFF	; 255
    ce02:	48 81       	ld	r20, Y
    ce04:	59 81       	ldd	r21, Y+1	; 0x01
    ce06:	c6 5b       	subi	r28, 0xB6	; 182
    ce08:	d0 40       	sbci	r29, 0x00	; 0
    ce0a:	84 0f       	add	r24, r20
    ce0c:	95 1f       	adc	r25, r21
    ce0e:	bc 01       	movw	r22, r24
    ce10:	29 9d       	mul	r18, r9
    ce12:	60 0d       	add	r22, r0
    ce14:	71 1d       	adc	r23, r1
    ce16:	11 24       	eor	r1, r1
    ce18:	c4 54       	subi	r28, 0x44	; 68
    ce1a:	df 4f       	sbci	r29, 0xFF	; 255
    ce1c:	79 83       	std	Y+1, r23	; 0x01
    ce1e:	68 83       	st	Y, r22
    ce20:	cc 5b       	subi	r28, 0xBC	; 188
    ce22:	d0 40       	sbci	r29, 0x00	; 0
    ce24:	f5 01       	movw	r30, r10
    ce26:	85 91       	lpm	r24, Z+
    ce28:	94 91       	lpm	r25, Z
    ce2a:	ca 53       	subi	r28, 0x3A	; 58
    ce2c:	df 4f       	sbci	r29, 0xFF	; 255
    ce2e:	e8 81       	ld	r30, Y
    ce30:	f9 81       	ldd	r31, Y+1	; 0x01
    ce32:	c6 5c       	subi	r28, 0xC6	; 198
    ce34:	d0 40       	sbci	r29, 0x00	; 0
    ce36:	24 91       	lpm	r18, Z
    ce38:	c8 54       	subi	r28, 0x48	; 72
    ce3a:	df 4f       	sbci	r29, 0xFF	; 255
    ce3c:	48 81       	ld	r20, Y
    ce3e:	59 81       	ldd	r21, Y+1	; 0x01
    ce40:	c8 5b       	subi	r28, 0xB8	; 184
    ce42:	d0 40       	sbci	r29, 0x00	; 0
    ce44:	84 0f       	add	r24, r20
    ce46:	95 1f       	adc	r25, r21
    ce48:	bc 01       	movw	r22, r24
    ce4a:	23 9d       	mul	r18, r3
    ce4c:	60 0d       	add	r22, r0
    ce4e:	71 1d       	adc	r23, r1
    ce50:	11 24       	eor	r1, r1
    ce52:	c2 54       	subi	r28, 0x42	; 66
    ce54:	df 4f       	sbci	r29, 0xFF	; 255
    ce56:	79 83       	std	Y+1, r23	; 0x01
    ce58:	68 83       	st	Y, r22
    ce5a:	ce 5b       	subi	r28, 0xBE	; 190
    ce5c:	d0 40       	sbci	r29, 0x00	; 0
    ce5e:	93 94       	inc	r9
    ce60:	c5 53       	subi	r28, 0x35	; 53
    ce62:	df 4f       	sbci	r29, 0xFF	; 255
    ce64:	e8 81       	ld	r30, Y
    ce66:	f9 81       	ldd	r31, Y+1	; 0x01
    ce68:	cb 5c       	subi	r28, 0xCB	; 203
    ce6a:	d0 40       	sbci	r29, 0x00	; 0
    ce6c:	84 91       	lpm	r24, Z
    ce6e:	98 16       	cp	r9, r24
    ce70:	10 f0       	brcs	.+4      	; 0xce76 <draw_menu(bool)+0x2166>
    ce72:	33 94       	inc	r3
    ce74:	91 2c       	mov	r9, r1
    ce76:	c1 53       	subi	r28, 0x31	; 49
    ce78:	df 4f       	sbci	r29, 0xFF	; 255
    ce7a:	e8 81       	ld	r30, Y
    ce7c:	f9 81       	ldd	r31, Y+1	; 0x01
    ce7e:	cf 5c       	subi	r28, 0xCF	; 207
    ce80:	d0 40       	sbci	r29, 0x00	; 0
    ce82:	25 91       	lpm	r18, Z+
    ce84:	34 91       	lpm	r19, Z
    ce86:	cf 52       	subi	r28, 0x2F	; 47
    ce88:	df 4f       	sbci	r29, 0xFF	; 255
    ce8a:	e8 81       	ld	r30, Y
    ce8c:	f9 81       	ldd	r31, Y+1	; 0x01
    ce8e:	c1 5d       	subi	r28, 0xD1	; 209
    ce90:	d0 40       	sbci	r29, 0x00	; 0
    ce92:	45 91       	lpm	r20, Z+
    ce94:	54 91       	lpm	r21, Z
    ce96:	cc 53       	subi	r28, 0x3C	; 60
    ce98:	df 4f       	sbci	r29, 0xFF	; 255
    ce9a:	e8 80       	ld	r14, Y
    ce9c:	f9 80       	ldd	r15, Y+1	; 0x01
    ce9e:	c4 5c       	subi	r28, 0xC4	; 196
    cea0:	d0 40       	sbci	r29, 0x00	; 0
    cea2:	ce 53       	subi	r28, 0x3E	; 62
    cea4:	df 4f       	sbci	r29, 0xFF	; 255
    cea6:	08 81       	ld	r16, Y
    cea8:	19 81       	ldd	r17, Y+1	; 0x01
    ceaa:	c2 5c       	subi	r28, 0xC2	; 194
    ceac:	d0 40       	sbci	r29, 0x00	; 0
    ceae:	c2 54       	subi	r28, 0x42	; 66
    ceb0:	df 4f       	sbci	r29, 0xFF	; 255
    ceb2:	68 81       	ld	r22, Y
    ceb4:	79 81       	ldd	r23, Y+1	; 0x01
    ceb6:	ce 5b       	subi	r28, 0xBE	; 190
    ceb8:	d0 40       	sbci	r29, 0x00	; 0
    ceba:	c4 54       	subi	r28, 0x44	; 68
    cebc:	df 4f       	sbci	r29, 0xFF	; 255
    cebe:	88 81       	ld	r24, Y
    cec0:	99 81       	ldd	r25, Y+1	; 0x01
    cec2:	cc 5b       	subi	r28, 0xBC	; 188
    cec4:	d0 40       	sbci	r29, 0x00	; 0
    cec6:	0e 94 6d 56 	call	0xacda	; 0xacda <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    ceca:	18 2f       	mov	r17, r24
    cecc:	81 e0       	ldi	r24, 0x01	; 1
    cece:	88 0d       	add	r24, r8
    ced0:	11 23       	and	r17, r17
    ced2:	21 f1       	breq	.+72     	; 0xcf1c <draw_menu(bool)+0x220c>
    ced4:	ce 54       	subi	r28, 0x4E	; 78
    ced6:	df 4f       	sbci	r29, 0xFF	; 255
    ced8:	88 82       	st	Y, r8
    ceda:	c2 5b       	subi	r28, 0xB2	; 178
    cedc:	d0 40       	sbci	r29, 0x00	; 0
    cede:	f2 01       	movw	r30, r4
    cee0:	ea 54       	subi	r30, 0x4A	; 74
    cee2:	fd 4f       	sbci	r31, 0xFD	; 253
    cee4:	e6 0d       	add	r30, r6
    cee6:	f7 1d       	adc	r31, r7
    cee8:	25 91       	lpm	r18, Z+
    ceea:	34 91       	lpm	r19, Z
    ceec:	c0 54       	subi	r28, 0x40	; 64
    ceee:	df 4f       	sbci	r29, 0xFF	; 255
    cef0:	e8 81       	ld	r30, Y
    cef2:	f9 81       	ldd	r31, Y+1	; 0x01
    cef4:	c0 5c       	subi	r28, 0xC0	; 192
    cef6:	d0 40       	sbci	r29, 0x00	; 0
    cef8:	84 91       	lpm	r24, Z
    cefa:	cf 54       	subi	r28, 0x4F	; 79
    cefc:	df 4f       	sbci	r29, 0xFF	; 255
    cefe:	68 81       	ld	r22, Y
    cf00:	c1 5b       	subi	r28, 0xB1	; 177
    cf02:	d0 40       	sbci	r29, 0x00	; 0
    cf04:	70 e0       	ldi	r23, 0x00	; 0
    cf06:	48 2d       	mov	r20, r8
    cf08:	90 e0       	ldi	r25, 0x00	; 0
    cf0a:	f9 01       	movw	r30, r18
    cf0c:	19 95       	eicall
    cf0e:	c6 53       	subi	r28, 0x36	; 54
    cf10:	df 4f       	sbci	r29, 0xFF	; 255
    cf12:	18 83       	st	Y, r17
    cf14:	ca 5c       	subi	r28, 0xCA	; 202
    cf16:	d0 40       	sbci	r29, 0x00	; 0
    cf18:	23 94       	inc	r2
    cf1a:	b4 cb       	rjmp	.-2200   	; 0xc684 <draw_menu(bool)+0x1974>
    cf1c:	88 2e       	mov	r8, r24
    cf1e:	e3 ce       	rjmp	.-570    	; 0xcce6 <draw_menu(bool)+0x1fd6>
    cf20:	f1 e0       	ldi	r31, 0x01	; 1
    cf22:	c6 53       	subi	r28, 0x36	; 54
    cf24:	df 4f       	sbci	r29, 0xFF	; 255
    cf26:	f8 83       	st	Y, r31
    cf28:	ca 5c       	subi	r28, 0xCA	; 202
    cf2a:	d0 40       	sbci	r29, 0x00	; 0
    cf2c:	c6 53       	subi	r28, 0x36	; 54
    cf2e:	df 4f       	sbci	r29, 0xFF	; 255
    cf30:	88 81       	ld	r24, Y
    cf32:	ca 5c       	subi	r28, 0xCA	; 202
    cf34:	d0 40       	sbci	r29, 0x00	; 0
    cf36:	cd 51       	subi	r28, 0x1D	; 29
    cf38:	df 4f       	sbci	r29, 0xFF	; 255
    cf3a:	0f b6       	in	r0, 0x3f	; 63
    cf3c:	f8 94       	cli
    cf3e:	de bf       	out	0x3e, r29	; 62
    cf40:	0f be       	out	0x3f, r0	; 63
    cf42:	cd bf       	out	0x3d, r28	; 61
    cf44:	df 91       	pop	r29
    cf46:	cf 91       	pop	r28
    cf48:	1f 91       	pop	r17
    cf4a:	0f 91       	pop	r16
    cf4c:	ff 90       	pop	r15
    cf4e:	ef 90       	pop	r14
    cf50:	df 90       	pop	r13
    cf52:	cf 90       	pop	r12
    cf54:	bf 90       	pop	r11
    cf56:	af 90       	pop	r10
    cf58:	9f 90       	pop	r9
    cf5a:	8f 90       	pop	r8
    cf5c:	7f 90       	pop	r7
    cf5e:	6f 90       	pop	r6
    cf60:	5f 90       	pop	r5
    cf62:	4f 90       	pop	r4
    cf64:	3f 90       	pop	r3
    cf66:	2f 90       	pop	r2
    cf68:	08 95       	ret

0000cf6a <count_use_rtds()>:
_Z14count_use_rtdsv():
    cf6a:	0f 93       	push	r16
    cf6c:	1f 93       	push	r17
    cf6e:	cf 93       	push	r28
    cf70:	df 93       	push	r29
    cf72:	1f 92       	push	r1
    cf74:	cd b7       	in	r28, 0x3d	; 61
    cf76:	de b7       	in	r29, 0x3e	; 62
    cf78:	19 82       	std	Y+1, r1	; 0x01
    cf7a:	10 e0       	ldi	r17, 0x00	; 0
    cf7c:	00 e0       	ldi	r16, 0x00	; 0
    cf7e:	be 01       	movw	r22, r28
    cf80:	6f 5f       	subi	r22, 0xFF	; 255
    cf82:	7f 4f       	sbci	r23, 0xFF	; 255
    cf84:	81 2f       	mov	r24, r17
    cf86:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    cf8a:	89 81       	ldd	r24, Y+1	; 0x01
    cf8c:	81 30       	cpi	r24, 0x01	; 1
    cf8e:	09 f4       	brne	.+2      	; 0xcf92 <count_use_rtds()+0x28>
    cf90:	0f 5f       	subi	r16, 0xFF	; 255
    cf92:	1f 5f       	subi	r17, 0xFF	; 255
    cf94:	1a 30       	cpi	r17, 0x0A	; 10
    cf96:	99 f7       	brne	.-26     	; 0xcf7e <count_use_rtds()+0x14>
    cf98:	80 2f       	mov	r24, r16
    cf9a:	0f 90       	pop	r0
    cf9c:	df 91       	pop	r29
    cf9e:	cf 91       	pop	r28
    cfa0:	1f 91       	pop	r17
    cfa2:	0f 91       	pop	r16
    cfa4:	08 95       	ret

0000cfa6 <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
    cfa6:	8f 92       	push	r8
    cfa8:	9f 92       	push	r9
    cfaa:	af 92       	push	r10
    cfac:	bf 92       	push	r11
    cfae:	cf 92       	push	r12
    cfb0:	df 92       	push	r13
    cfb2:	ef 92       	push	r14
    cfb4:	ff 92       	push	r15
    cfb6:	0f 93       	push	r16
    cfb8:	1f 93       	push	r17
    cfba:	cf 93       	push	r28
    cfbc:	df 93       	push	r29
    cfbe:	cd b7       	in	r28, 0x3d	; 61
    cfc0:	de b7       	in	r29, 0x3e	; 62
    cfc2:	67 97       	sbiw	r28, 0x17	; 23
    cfc4:	0f b6       	in	r0, 0x3f	; 63
    cfc6:	f8 94       	cli
    cfc8:	de bf       	out	0x3e, r29	; 62
    cfca:	0f be       	out	0x3f, r0	; 63
    cfcc:	cd bf       	out	0x3d, r28	; 61
    cfce:	e8 2e       	mov	r14, r24
    cfd0:	5b 01       	movw	r10, r22
    cfd2:	4a 01       	movw	r8, r20
    cfd4:	6c e1       	ldi	r22, 0x1C	; 28
    cfd6:	79 e5       	ldi	r23, 0x59	; 89
    cfd8:	c5 01       	movw	r24, r10
    cfda:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    cfde:	f4 01       	movw	r30, r8
    cfe0:	10 82       	st	Z, r1
    cfe2:	11 82       	std	Z+1, r1	; 0x01
    cfe4:	12 82       	std	Z+2, r1	; 0x02
    cfe6:	13 82       	std	Z+3, r1	; 0x03
    cfe8:	d1 2c       	mov	r13, r1
    cfea:	c1 2c       	mov	r12, r1
    cfec:	00 e0       	ldi	r16, 0x00	; 0
    cfee:	1e e1       	ldi	r17, 0x1E	; 30
    cff0:	be 01       	movw	r22, r28
    cff2:	6f 5f       	subi	r22, 0xFF	; 255
    cff4:	7f 4f       	sbci	r23, 0xFF	; 255
    cff6:	8c 2d       	mov	r24, r12
    cff8:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    cffc:	81 30       	cpi	r24, 0x01	; 1
    cffe:	f1 f5       	brne	.+124    	; 0xd07c <get_global_temp(unsigned char, char*, float*)+0xd6>
    d000:	89 81       	ldd	r24, Y+1	; 0x01
    d002:	81 30       	cpi	r24, 0x01	; 1
    d004:	d9 f5       	brne	.+118    	; 0xd07c <get_global_temp(unsigned char, char*, float*)+0xd6>
    d006:	e0 12       	cpse	r14, r16
    d008:	38 c0       	rjmp	.+112    	; 0xd07a <get_global_temp(unsigned char, char*, float*)+0xd4>
    d00a:	be 01       	movw	r22, r28
    d00c:	63 5f       	subi	r22, 0xF3	; 243
    d00e:	7f 4f       	sbci	r23, 0xFF	; 255
    d010:	c5 01       	movw	r24, r10
    d012:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
    d016:	1c 9d       	mul	r17, r12
    d018:	f0 01       	movw	r30, r0
    d01a:	1d 9d       	mul	r17, r13
    d01c:	f0 0d       	add	r31, r0
    d01e:	11 24       	eor	r1, r1
    d020:	e2 55       	subi	r30, 0x52	; 82
    d022:	fe 4e       	sbci	r31, 0xEE	; 238
    d024:	f3 8c       	ldd	r15, Z+27	; 0x1b
    d026:	81 e0       	ldi	r24, 0x01	; 1
    d028:	f8 12       	cpse	r15, r24
    d02a:	27 c0       	rjmp	.+78     	; 0xd07a <get_global_temp(unsigned char, char*, float*)+0xd4>
    d02c:	65 81       	ldd	r22, Z+5	; 0x05
    d02e:	76 81       	ldd	r23, Z+6	; 0x06
    d030:	07 2e       	mov	r0, r23
    d032:	00 0c       	add	r0, r0
    d034:	88 0b       	sbc	r24, r24
    d036:	99 0b       	sbc	r25, r25
    d038:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    d03c:	20 e0       	ldi	r18, 0x00	; 0
    d03e:	30 e0       	ldi	r19, 0x00	; 0
    d040:	4a e7       	ldi	r20, 0x7A	; 122
    d042:	54 e4       	ldi	r21, 0x44	; 68
    d044:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    d048:	f4 01       	movw	r30, r8
    d04a:	60 83       	st	Z, r22
    d04c:	71 83       	std	Z+1, r23	; 0x01
    d04e:	82 83       	std	Z+2, r24	; 0x02
    d050:	93 83       	std	Z+3, r25	; 0x03
    d052:	8f 2d       	mov	r24, r15
    d054:	67 96       	adiw	r28, 0x17	; 23
    d056:	0f b6       	in	r0, 0x3f	; 63
    d058:	f8 94       	cli
    d05a:	de bf       	out	0x3e, r29	; 62
    d05c:	0f be       	out	0x3f, r0	; 63
    d05e:	cd bf       	out	0x3d, r28	; 61
    d060:	df 91       	pop	r29
    d062:	cf 91       	pop	r28
    d064:	1f 91       	pop	r17
    d066:	0f 91       	pop	r16
    d068:	ff 90       	pop	r15
    d06a:	ef 90       	pop	r14
    d06c:	df 90       	pop	r13
    d06e:	cf 90       	pop	r12
    d070:	bf 90       	pop	r11
    d072:	af 90       	pop	r10
    d074:	9f 90       	pop	r9
    d076:	8f 90       	pop	r8
    d078:	08 95       	ret
    d07a:	0f 5f       	subi	r16, 0xFF	; 255
    d07c:	ff ef       	ldi	r31, 0xFF	; 255
    d07e:	cf 1a       	sub	r12, r31
    d080:	df 0a       	sbc	r13, r31
    d082:	86 e0       	ldi	r24, 0x06	; 6
    d084:	c8 16       	cp	r12, r24
    d086:	d1 04       	cpc	r13, r1
    d088:	09 f0       	breq	.+2      	; 0xd08c <get_global_temp(unsigned char, char*, float*)+0xe6>
    d08a:	b2 cf       	rjmp	.-156    	; 0xcff0 <get_global_temp(unsigned char, char*, float*)+0x4a>
    d08c:	10 e0       	ldi	r17, 0x00	; 0
    d08e:	be 01       	movw	r22, r28
    d090:	69 5e       	subi	r22, 0xE9	; 233
    d092:	7f 4f       	sbci	r23, 0xFF	; 255
    d094:	81 2f       	mov	r24, r17
    d096:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
    d09a:	ff 88       	ldd	r15, Y+23	; 0x17
    d09c:	e1 e0       	ldi	r30, 0x01	; 1
    d09e:	fe 12       	cpse	r15, r30
    d0a0:	17 c0       	rjmp	.+46     	; 0xd0d0 <get_global_temp(unsigned char, char*, float*)+0x12a>
    d0a2:	e0 12       	cpse	r14, r16
    d0a4:	14 c0       	rjmp	.+40     	; 0xd0ce <get_global_temp(unsigned char, char*, float*)+0x128>
    d0a6:	a5 01       	movw	r20, r10
    d0a8:	be 01       	movw	r22, r28
    d0aa:	69 5e       	subi	r22, 0xE9	; 233
    d0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    d0ae:	81 2f       	mov	r24, r17
    d0b0:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    d0b4:	81 2f       	mov	r24, r17
    d0b6:	0e 94 ff 46 	call	0x8dfe	; 0x8dfe <remote_tds_get_last_update(unsigned char)>
    d0ba:	8a 3f       	cpi	r24, 0xFA	; 250
    d0bc:	40 f4       	brcc	.+16     	; 0xd0ce <get_global_temp(unsigned char, char*, float*)+0x128>
    d0be:	81 2f       	mov	r24, r17
    d0c0:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <remote_tds_get_data(unsigned char)>
    d0c4:	bc 01       	movw	r22, r24
    d0c6:	99 0f       	add	r25, r25
    d0c8:	88 0b       	sbc	r24, r24
    d0ca:	99 0b       	sbc	r25, r25
    d0cc:	b5 cf       	rjmp	.-150    	; 0xd038 <get_global_temp(unsigned char, char*, float*)+0x92>
    d0ce:	0f 5f       	subi	r16, 0xFF	; 255
    d0d0:	1f 5f       	subi	r17, 0xFF	; 255
    d0d2:	1a 30       	cpi	r17, 0x0A	; 10
    d0d4:	e1 f6       	brne	.-72     	; 0xd08e <get_global_temp(unsigned char, char*, float*)+0xe8>
    d0d6:	f1 2c       	mov	r15, r1
    d0d8:	bc cf       	rjmp	.-136    	; 0xd052 <get_global_temp(unsigned char, char*, float*)+0xac>

0000d0da <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
    d0da:	2f 92       	push	r2
    d0dc:	3f 92       	push	r3
    d0de:	4f 92       	push	r4
    d0e0:	5f 92       	push	r5
    d0e2:	6f 92       	push	r6
    d0e4:	7f 92       	push	r7
    d0e6:	8f 92       	push	r8
    d0e8:	9f 92       	push	r9
    d0ea:	af 92       	push	r10
    d0ec:	bf 92       	push	r11
    d0ee:	cf 92       	push	r12
    d0f0:	df 92       	push	r13
    d0f2:	ef 92       	push	r14
    d0f4:	ff 92       	push	r15
    d0f6:	0f 93       	push	r16
    d0f8:	1f 93       	push	r17
    d0fa:	cf 93       	push	r28
    d0fc:	df 93       	push	r29
    d0fe:	cd b7       	in	r28, 0x3d	; 61
    d100:	de b7       	in	r29, 0x3e	; 62
    d102:	e8 97       	sbiw	r28, 0x38	; 56
    d104:	0f b6       	in	r0, 0x3f	; 63
    d106:	f8 94       	cli
    d108:	de bf       	out	0x3e, r29	; 62
    d10a:	0f be       	out	0x3f, r0	; 63
    d10c:	cd bf       	out	0x3d, r28	; 61
    d10e:	4c 01       	movw	r8, r24
    d110:	3b 01       	movw	r6, r22
    d112:	63 ef       	ldi	r22, 0xF3	; 243
    d114:	7a e5       	ldi	r23, 0x5A	; 90
    d116:	ce 01       	movw	r24, r28
    d118:	01 96       	adiw	r24, 0x01	; 1
    d11a:	5c 01       	movw	r10, r24
    d11c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    d120:	ae 01       	movw	r20, r28
    d122:	4b 5c       	subi	r20, 0xCB	; 203
    d124:	5f 4f       	sbci	r21, 0xFF	; 255
    d126:	be 01       	movw	r22, r28
    d128:	6f 5d       	subi	r22, 0xDF	; 223
    d12a:	7f 4f       	sbci	r23, 0xFF	; 255
    d12c:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <default_show_temp>
    d130:	0e 94 d3 67 	call	0xcfa6	; 0xcfa6 <get_global_temp(unsigned char, char*, float*)>
    d134:	d8 2e       	mov	r13, r24
    d136:	be 01       	movw	r22, r28
    d138:	6f 5d       	subi	r22, 0xDF	; 223
    d13a:	7f 4f       	sbci	r23, 0xFF	; 255
    d13c:	c5 01       	movw	r24, r10
    d13e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    d142:	a3 01       	movw	r20, r6
    d144:	4b 5f       	subi	r20, 0xFB	; 251
    d146:	5f 4f       	sbci	r21, 0xFF	; 255
    d148:	b4 01       	movw	r22, r8
    d14a:	6b 5f       	subi	r22, 0xFB	; 251
    d14c:	7f 4f       	sbci	r23, 0xFF	; 255
    d14e:	c1 2c       	mov	r12, r1
    d150:	ee 24       	eor	r14, r14
    d152:	ea 94       	dec	r14
    d154:	fe 2c       	mov	r15, r14
    d156:	10 e0       	ldi	r17, 0x00	; 0
    d158:	00 e0       	ldi	r16, 0x00	; 0
    d15a:	21 e0       	ldi	r18, 0x01	; 1
    d15c:	c5 01       	movw	r24, r10
    d15e:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d162:	23 01       	movw	r4, r6
    d164:	94 e1       	ldi	r25, 0x14	; 20
    d166:	49 0e       	add	r4, r25
    d168:	51 1c       	adc	r5, r1
    d16a:	14 01       	movw	r2, r8
    d16c:	84 e0       	ldi	r24, 0x04	; 4
    d16e:	28 0e       	add	r2, r24
    d170:	31 1c       	adc	r3, r1
    d172:	91 e0       	ldi	r25, 0x01	; 1
    d174:	d9 12       	cpse	r13, r25
    d176:	4e c0       	rjmp	.+156    	; 0xd214 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13a>
    d178:	6d a9       	ldd	r22, Y+53	; 0x35
    d17a:	7e a9       	ldd	r23, Y+54	; 0x36
    d17c:	8f a9       	ldd	r24, Y+55	; 0x37
    d17e:	98 ad       	ldd	r25, Y+56	; 0x38
    d180:	85 01       	movw	r16, r10
    d182:	21 e0       	ldi	r18, 0x01	; 1
    d184:	44 e0       	ldi	r20, 0x04	; 4
    d186:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
    d18a:	f5 01       	movw	r30, r10
    d18c:	01 90       	ld	r0, Z+
    d18e:	00 20       	and	r0, r0
    d190:	e9 f7       	brne	.-6      	; 0xd18c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    d192:	31 97       	sbiw	r30, 0x01	; 1
    d194:	ea 19       	sub	r30, r10
    d196:	fb 09       	sbc	r31, r11
    d198:	35 97       	sbiw	r30, 0x05	; 5
    d19a:	28 f4       	brcc	.+10     	; 0xd1a6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xcc>
    d19c:	69 e0       	ldi	r22, 0x09	; 9
    d19e:	78 e0       	ldi	r23, 0x08	; 8
    d1a0:	c5 01       	movw	r24, r10
    d1a2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
    d1a6:	c1 2c       	mov	r12, r1
    d1a8:	ee 24       	eor	r14, r14
    d1aa:	ea 94       	dec	r14
    d1ac:	fe 2c       	mov	r15, r14
    d1ae:	10 e0       	ldi	r17, 0x00	; 0
    d1b0:	00 e0       	ldi	r16, 0x00	; 0
    d1b2:	28 e0       	ldi	r18, 0x08	; 8
    d1b4:	a2 01       	movw	r20, r4
    d1b6:	b1 01       	movw	r22, r2
    d1b8:	c5 01       	movw	r24, r10
    d1ba:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d1be:	70 e0       	ldi	r23, 0x00	; 0
    d1c0:	60 e0       	ldi	r22, 0x00	; 0
    d1c2:	81 e2       	ldi	r24, 0x21	; 33
    d1c4:	9c e0       	ldi	r25, 0x0C	; 12
    d1c6:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    d1ca:	83 01       	movw	r16, r6
    d1cc:	0c 5a       	subi	r16, 0xAC	; 172
    d1ce:	1f 4f       	sbci	r17, 0xFF	; 255
    d1d0:	94 01       	movw	r18, r8
    d1d2:	2c 50       	subi	r18, 0x0C	; 12
    d1d4:	3f 4f       	sbci	r19, 0xFF	; 255
    d1d6:	a3 01       	movw	r20, r6
    d1d8:	b4 01       	movw	r22, r8
    d1da:	81 e2       	ldi	r24, 0x21	; 33
    d1dc:	9c e0       	ldi	r25, 0x0C	; 12
    d1de:	0e 94 aa 95 	call	0x12b54	; 0x12b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    d1e2:	e8 96       	adiw	r28, 0x38	; 56
    d1e4:	0f b6       	in	r0, 0x3f	; 63
    d1e6:	f8 94       	cli
    d1e8:	de bf       	out	0x3e, r29	; 62
    d1ea:	0f be       	out	0x3f, r0	; 63
    d1ec:	cd bf       	out	0x3d, r28	; 61
    d1ee:	df 91       	pop	r29
    d1f0:	cf 91       	pop	r28
    d1f2:	1f 91       	pop	r17
    d1f4:	0f 91       	pop	r16
    d1f6:	ff 90       	pop	r15
    d1f8:	ef 90       	pop	r14
    d1fa:	df 90       	pop	r13
    d1fc:	cf 90       	pop	r12
    d1fe:	bf 90       	pop	r11
    d200:	af 90       	pop	r10
    d202:	9f 90       	pop	r9
    d204:	8f 90       	pop	r8
    d206:	7f 90       	pop	r7
    d208:	6f 90       	pop	r6
    d20a:	5f 90       	pop	r5
    d20c:	4f 90       	pop	r4
    d20e:	3f 90       	pop	r3
    d210:	2f 90       	pop	r2
    d212:	08 95       	ret
    d214:	6c e1       	ldi	r22, 0x1C	; 28
    d216:	79 e5       	ldi	r23, 0x59	; 89
    d218:	c5 01       	movw	r24, r10
    d21a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
    d21e:	c1 2c       	mov	r12, r1
    d220:	ee 24       	eor	r14, r14
    d222:	ea 94       	dec	r14
    d224:	fe 2c       	mov	r15, r14
    d226:	00 e0       	ldi	r16, 0x00	; 0
    d228:	18 ef       	ldi	r17, 0xF8	; 248
    d22a:	c3 cf       	rjmp	.-122    	; 0xd1b2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd8>

0000d22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    d22c:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    d22e:	80 85       	ldd	r24, Z+8	; 0x08
    d230:	81 11       	cpse	r24, r1
    d232:	0a c0       	rjmp	.+20     	; 0xd248 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    d234:	a2 81       	ldd	r26, Z+2	; 0x02
    d236:	b3 81       	ldd	r27, Z+3	; 0x03
    d238:	cd 01       	movw	r24, r26
    d23a:	01 96       	adiw	r24, 0x01	; 1
    d23c:	93 83       	std	Z+3, r25	; 0x03
    d23e:	82 83       	std	Z+2, r24	; 0x02
    d240:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    d242:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    d244:	81 e0       	ldi	r24, 0x01	; 1
    d246:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    d248:	87 81       	ldd	r24, Z+7	; 0x07
    d24a:	08 95       	ret

0000d24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    d24c:	1f 93       	push	r17
    d24e:	cf 93       	push	r28
    d250:	df 93       	push	r29
    d252:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    d254:	ce 01       	movw	r24, r28
    d256:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d25a:	8b 30       	cpi	r24, 0x0B	; 11
    d25c:	3c f4       	brge	.+14     	; 0xd26c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    d25e:	89 30       	cpi	r24, 0x09	; 9
    d260:	5c f4       	brge	.+22     	; 0xd278 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d262:	88 23       	and	r24, r24
    d264:	e9 f0       	breq	.+58     	; 0xd2a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    d266:	90 e0       	ldi	r25, 0x00	; 0
    d268:	80 e0       	ldi	r24, 0x00	; 0
    d26a:	1c c0       	rjmp	.+56     	; 0xd2a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    d26c:	80 32       	cpi	r24, 0x20	; 32
    d26e:	21 f0       	breq	.+8      	; 0xd278 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d270:	8f 32       	cpi	r24, 0x2F	; 47
    d272:	21 f0       	breq	.+8      	; 0xd27c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    d274:	8d 30       	cpi	r24, 0x0D	; 13
    d276:	b9 f7       	brne	.-18     	; 0xd266 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d278:	18 86       	std	Y+8, r1	; 0x08
    d27a:	ec cf       	rjmp	.-40     	; 0xd254 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    d27c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    d27e:	ce 01       	movw	r24, r28
    d280:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d284:	8a 32       	cpi	r24, 0x2A	; 42
    d286:	29 f0       	breq	.+10     	; 0xd292 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    d288:	8f 32       	cpi	r24, 0x2F	; 47
    d28a:	d1 f0       	breq	.+52     	; 0xd2c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    d28c:	82 e0       	ldi	r24, 0x02	; 2
    d28e:	90 e0       	ldi	r25, 0x00	; 0
    d290:	09 c0       	rjmp	.+18     	; 0xd2a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d292:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    d294:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    d296:	ce 01       	movw	r24, r28
    d298:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    d29c:	81 11       	cpse	r24, r1
    d29e:	06 c0       	rjmp	.+12     	; 0xd2ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    d2a0:	81 e0       	ldi	r24, 0x01	; 1
    d2a2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    d2a4:	df 91       	pop	r29
    d2a6:	cf 91       	pop	r28
    d2a8:	1f 91       	pop	r17
    d2aa:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    d2ac:	8f 32       	cpi	r24, 0x2F	; 47
    d2ae:	11 f4       	brne	.+4      	; 0xd2b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
    d2b0:	11 11       	cpse	r17, r1
    d2b2:	e2 cf       	rjmp	.-60     	; 0xd278 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    d2b4:	11 e0       	ldi	r17, 0x01	; 1
    d2b6:	8a 32       	cpi	r24, 0x2A	; 42
    d2b8:	09 f0       	breq	.+2      	; 0xd2bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    d2ba:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d2bc:	18 86       	std	Y+8, r1	; 0x08
    d2be:	eb cf       	rjmp	.-42     	; 0xd296 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    d2c0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    d2c2:	ce 01       	movw	r24, r28
    d2c4:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    d2c8:	88 23       	and	r24, r24
    d2ca:	51 f3       	breq	.-44     	; 0xd2a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    d2cc:	8a 30       	cpi	r24, 0x0A	; 10
    d2ce:	c1 f7       	brne	.-16     	; 0xd2c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    d2d0:	c1 cf       	rjmp	.-126    	; 0xd254 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000d2d2 <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
    d2d2:	ff 92       	push	r15
    d2d4:	0f 93       	push	r16
    d2d6:	1f 93       	push	r17
    d2d8:	cf 93       	push	r28
    d2da:	df 93       	push	r29
    d2dc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
    d2de:	89 2b       	or	r24, r25
    d2e0:	09 f4       	brne	.+2      	; 0xd2e4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
    d2e2:	8b c0       	rjmp	.+278    	; 0xd3fa <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
    d2e4:	88 81       	ld	r24, Y
    d2e6:	8b 32       	cpi	r24, 0x2B	; 43
    d2e8:	91 f1       	breq	.+100    	; 0xd34e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
    d2ea:	8d 32       	cpi	r24, 0x2D	; 45
    d2ec:	89 f5       	brne	.+98     	; 0xd350 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    d2ee:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    d2f0:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    d2f2:	88 81       	ld	r24, Y
    d2f4:	84 37       	cpi	r24, 0x74	; 116
    d2f6:	09 f4       	brne	.+2      	; 0xd2fa <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
    d2f8:	db c0       	rjmp	.+438    	; 0xd4b0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
    d2fa:	8f 7d       	andi	r24, 0xDF	; 223
    d2fc:	8e 34       	cpi	r24, 0x4E	; 78
    d2fe:	09 f4       	brne	.+2      	; 0xd302 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
    d300:	dc c0       	rjmp	.+440    	; 0xd4ba <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
    d302:	89 34       	cpi	r24, 0x49	; 73
    d304:	09 f4       	brne	.+2      	; 0xd308 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
    d306:	84 c0       	rjmp	.+264    	; 0xd410 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    d308:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    d30a:	20 e0       	ldi	r18, 0x00	; 0
    d30c:	30 e0       	ldi	r19, 0x00	; 0
    d30e:	a9 01       	movw	r20, r18
    d310:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d312:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    d314:	80 ed       	ldi	r24, 0xD0	; 208
    d316:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    d318:	8a 30       	cpi	r24, 0x0A	; 10
    d31a:	f0 f4       	brcc	.+60     	; 0xd358 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    d31c:	2c 3c       	cpi	r18, 0xCC	; 204
    d31e:	8c ec       	ldi	r24, 0xCC	; 204
    d320:	38 07       	cpc	r19, r24
    d322:	8c e0       	ldi	r24, 0x0C	; 12
    d324:	48 07       	cpc	r20, r24
    d326:	51 05       	cpc	r21, r1
    d328:	ac f4       	brge	.+42     	; 0xd354 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    d32a:	aa e0       	ldi	r26, 0x0A	; 10
    d32c:	b0 e0       	ldi	r27, 0x00	; 0
    d32e:	0e 94 1d dd 	call	0x1ba3a	; 0x1ba3a <__muluhisi3>
    d332:	20 2f       	mov	r18, r16
    d334:	00 0f       	add	r16, r16
    d336:	33 0b       	sbc	r19, r19
    d338:	20 53       	subi	r18, 0x30	; 48
    d33a:	31 09       	sbc	r19, r1
    d33c:	03 2e       	mov	r0, r19
    d33e:	00 0c       	add	r0, r0
    d340:	44 0b       	sbc	r20, r20
    d342:	55 0b       	sbc	r21, r21
    d344:	26 0f       	add	r18, r22
    d346:	37 1f       	adc	r19, r23
    d348:	48 1f       	adc	r20, r24
    d34a:	59 1f       	adc	r21, r25
    d34c:	e1 cf       	rjmp	.-62     	; 0xd310 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d34e:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    d350:	10 e0       	ldi	r17, 0x00	; 0
    d352:	cf cf       	rjmp	.-98     	; 0xd2f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    d354:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d356:	dc cf       	rjmp	.-72     	; 0xd310 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
    d358:	0e 32       	cpi	r16, 0x2E	; 46
    d35a:	11 f5       	brne	.+68     	; 0xd3a0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    d35c:	ef 01       	movw	r28, r30
    d35e:	21 96       	adiw	r28, 0x01	; 1
    d360:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    d362:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d364:	80 ed       	ldi	r24, 0xD0	; 208
    d366:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    d368:	8a 30       	cpi	r24, 0x0A	; 10
    d36a:	d0 f4       	brcc	.+52     	; 0xd3a0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    d36c:	2c 3c       	cpi	r18, 0xCC	; 204
    d36e:	8c ec       	ldi	r24, 0xCC	; 204
    d370:	38 07       	cpc	r19, r24
    d372:	8c e0       	ldi	r24, 0x0C	; 12
    d374:	48 07       	cpc	r20, r24
    d376:	51 05       	cpc	r21, r1
    d378:	9c f7       	brge	.-26     	; 0xd360 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    d37a:	aa e0       	ldi	r26, 0x0A	; 10
    d37c:	b0 e0       	ldi	r27, 0x00	; 0
    d37e:	0e 94 1d dd 	call	0x1ba3a	; 0x1ba3a <__muluhisi3>
    d382:	20 2f       	mov	r18, r16
    d384:	00 0f       	add	r16, r16
    d386:	33 0b       	sbc	r19, r19
    d388:	20 53       	subi	r18, 0x30	; 48
    d38a:	31 09       	sbc	r19, r1
    d38c:	03 2e       	mov	r0, r19
    d38e:	00 0c       	add	r0, r0
    d390:	44 0b       	sbc	r20, r20
    d392:	55 0b       	sbc	r21, r21
    d394:	26 0f       	add	r18, r22
    d396:	37 1f       	adc	r19, r23
    d398:	48 1f       	adc	r20, r24
    d39a:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    d39c:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
    d39e:	e0 cf       	rjmp	.-64     	; 0xd360 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    d3a0:	80 81       	ld	r24, Z
    d3a2:	8f 7d       	andi	r24, 0xDF	; 223
    d3a4:	cf 2d       	mov	r28, r15
    d3a6:	ff 0c       	add	r15, r15
    d3a8:	dd 0b       	sbc	r29, r29
    d3aa:	85 34       	cpi	r24, 0x45	; 69
    d3ac:	09 f0       	breq	.+2      	; 0xd3b0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
    d3ae:	65 c0       	rjmp	.+202    	; 0xd47a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    d3b0:	81 81       	ldd	r24, Z+1	; 0x01
    d3b2:	8d 32       	cpi	r24, 0x2D	; 45
    d3b4:	31 f5       	brne	.+76     	; 0xd402 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    d3b6:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    d3b8:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    d3ba:	90 e0       	ldi	r25, 0x00	; 0
    d3bc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    d3be:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    d3c0:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d3c2:	a0 ed       	ldi	r26, 0xD0	; 208
    d3c4:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    d3c6:	aa 30       	cpi	r26, 0x0A	; 10
    d3c8:	70 f5       	brcc	.+92     	; 0xd426 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    d3ca:	08 9f       	mul	r16, r24
    d3cc:	d0 01       	movw	r26, r0
    d3ce:	09 9f       	mul	r16, r25
    d3d0:	b0 0d       	add	r27, r0
    d3d2:	11 24       	eor	r1, r1
    d3d4:	86 2f       	mov	r24, r22
    d3d6:	66 0f       	add	r22, r22
    d3d8:	99 0b       	sbc	r25, r25
    d3da:	c0 97       	sbiw	r24, 0x30	; 48
    d3dc:	8a 0f       	add	r24, r26
    d3de:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    d3e0:	dc 01       	movw	r26, r24
    d3e2:	ac 0f       	add	r26, r28
    d3e4:	bd 1f       	adc	r27, r29
    d3e6:	97 97       	sbiw	r26, 0x27	; 39
    d3e8:	5c f3       	brlt	.-42     	; 0xd3c0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    d3ea:	77 23       	and	r23, r23
    d3ec:	89 f0       	breq	.+34     	; 0xd410 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    d3ee:	60 e0       	ldi	r22, 0x00	; 0
    d3f0:	70 e0       	ldi	r23, 0x00	; 0
    d3f2:	80 e0       	ldi	r24, 0x00	; 0
    d3f4:	90 e8       	ldi	r25, 0x80	; 128
    d3f6:	11 11       	cpse	r17, r1
    d3f8:	3a c0       	rjmp	.+116    	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
    d3fa:	60 e0       	ldi	r22, 0x00	; 0
    d3fc:	70 e0       	ldi	r23, 0x00	; 0
    d3fe:	cb 01       	movw	r24, r22
    d400:	36 c0       	rjmp	.+108    	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    d402:	8b 32       	cpi	r24, 0x2B	; 43
    d404:	19 f0       	breq	.+6      	; 0xd40c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    d406:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    d408:	70 e0       	ldi	r23, 0x00	; 0
    d40a:	d7 cf       	rjmp	.-82     	; 0xd3ba <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    d40c:	32 96       	adiw	r30, 0x02	; 2
    d40e:	fc cf       	rjmp	.-8      	; 0xd408 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    d410:	60 e0       	ldi	r22, 0x00	; 0
    d412:	70 e0       	ldi	r23, 0x00	; 0
    d414:	80 e8       	ldi	r24, 0x80	; 128
    d416:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    d418:	11 11       	cpse	r17, r1
    d41a:	29 c0       	rjmp	.+82     	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    d41c:	60 e0       	ldi	r22, 0x00	; 0
    d41e:	70 e0       	ldi	r23, 0x00	; 0
    d420:	80 e8       	ldi	r24, 0x80	; 128
    d422:	9f e7       	ldi	r25, 0x7F	; 127
    d424:	24 c0       	rjmp	.+72     	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    d426:	77 23       	and	r23, r23
    d428:	19 f0       	breq	.+6      	; 0xd430 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
    d42a:	91 95       	neg	r25
    d42c:	81 95       	neg	r24
    d42e:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    d430:	c8 0f       	add	r28, r24
    d432:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    d434:	ca 01       	movw	r24, r20
    d436:	b9 01       	movw	r22, r18
    d438:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    d43c:	1c 16       	cp	r1, r28
    d43e:	1d 06       	cpc	r1, r29
    d440:	fc f4       	brge	.+62     	; 0xd480 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    d442:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    d444:	c0 ff       	sbrs	r28, 0
    d446:	0c c0       	rjmp	.+24     	; 0xd460 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    d448:	24 e0       	ldi	r18, 0x04	; 4
    d44a:	02 9f       	mul	r16, r18
    d44c:	f0 01       	movw	r30, r0
    d44e:	11 24       	eor	r1, r1
    d450:	e2 5e       	subi	r30, 0xE2	; 226
    d452:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    d454:	20 81       	ld	r18, Z
    d456:	31 81       	ldd	r19, Z+1	; 0x01
    d458:	42 81       	ldd	r20, Z+2	; 0x02
    d45a:	53 81       	ldd	r21, Z+3	; 0x03
    d45c:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    d460:	d5 95       	asr	r29
    d462:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    d464:	0f 5f       	subi	r16, 0xFF	; 255
    d466:	20 97       	sbiw	r28, 0x00	; 0
    d468:	69 f7       	brne	.-38     	; 0xd444 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    d46a:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
    d46c:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
    d46e:	df 91       	pop	r29
    d470:	cf 91       	pop	r28
    d472:	1f 91       	pop	r17
    d474:	0f 91       	pop	r16
    d476:	ff 90       	pop	r15
    d478:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    d47a:	90 e0       	ldi	r25, 0x00	; 0
    d47c:	80 e0       	ldi	r24, 0x00	; 0
    d47e:	d8 cf       	rjmp	.-80     	; 0xd430 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    d480:	d1 95       	neg	r29
    d482:	c1 95       	neg	r28
    d484:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    d486:	00 e0       	ldi	r16, 0x00	; 0
    d488:	20 97       	sbiw	r28, 0x00	; 0
    d48a:	79 f3       	breq	.-34     	; 0xd46a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    d48c:	c0 ff       	sbrs	r28, 0
    d48e:	0c c0       	rjmp	.+24     	; 0xd4a8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    d490:	24 e0       	ldi	r18, 0x04	; 4
    d492:	02 9f       	mul	r16, r18
    d494:	f0 01       	movw	r30, r0
    d496:	11 24       	eor	r1, r1
    d498:	ea 5f       	subi	r30, 0xFA	; 250
    d49a:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    d49c:	20 81       	ld	r18, Z
    d49e:	31 81       	ldd	r19, Z+1	; 0x01
    d4a0:	42 81       	ldd	r20, Z+2	; 0x02
    d4a2:	53 81       	ldd	r21, Z+3	; 0x03
    d4a4:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    d4a8:	d5 95       	asr	r29
    d4aa:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    d4ac:	0f 5f       	subi	r16, 0xFF	; 255
    d4ae:	ec cf       	rjmp	.-40     	; 0xd488 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    d4b0:	60 e0       	ldi	r22, 0x00	; 0
    d4b2:	70 e0       	ldi	r23, 0x00	; 0
    d4b4:	80 e8       	ldi	r24, 0x80	; 128
    d4b6:	9f e3       	ldi	r25, 0x3F	; 63
    d4b8:	da cf       	rjmp	.-76     	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    d4ba:	60 e0       	ldi	r22, 0x00	; 0
    d4bc:	70 e0       	ldi	r23, 0x00	; 0
    d4be:	80 ec       	ldi	r24, 0xC0	; 192
    d4c0:	9f e7       	ldi	r25, 0x7F	; 127
    d4c2:	d5 cf       	rjmp	.-86     	; 0xd46e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

0000d4c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    d4c4:	df 92       	push	r13
    d4c6:	ef 92       	push	r14
    d4c8:	ff 92       	push	r15
    d4ca:	0f 93       	push	r16
    d4cc:	1f 93       	push	r17
    d4ce:	cf 93       	push	r28
    d4d0:	df 93       	push	r29
    d4d2:	ec 01       	movw	r28, r24
    d4d4:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    d4d6:	0c 81       	ldd	r16, Y+4	; 0x04
    d4d8:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    d4da:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d4de:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d4e0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    d4e2:	ce 01       	movw	r24, r28
    d4e4:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d4e8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    d4ea:	d8 16       	cp	r13, r24
    d4ec:	89 f1       	breq	.+98     	; 0xd550 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    d4ee:	81 11       	cpse	r24, r1
    d4f0:	0a c0       	rjmp	.+20     	; 0xd506 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    d4f2:	81 e0       	ldi	r24, 0x01	; 1
    d4f4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    d4f6:	df 91       	pop	r29
    d4f8:	cf 91       	pop	r28
    d4fa:	1f 91       	pop	r17
    d4fc:	0f 91       	pop	r16
    d4fe:	ff 90       	pop	r15
    d500:	ef 90       	pop	r14
    d502:	df 90       	pop	r13
    d504:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    d506:	8c 35       	cpi	r24, 0x5C	; 92
    d508:	d1 f4       	brne	.+52     	; 0xd53e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    d50a:	ce 01       	movw	r24, r28
    d50c:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    d510:	88 23       	and	r24, r24
    d512:	79 f3       	breq	.-34     	; 0xd4f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    d514:	85 37       	cpi	r24, 0x75	; 117
    d516:	19 f4       	brne	.+6      	; 0xd51e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    d518:	84 e0       	ldi	r24, 0x04	; 4
    d51a:	90 e0       	ldi	r25, 0x00	; 0
    d51c:	ec cf       	rjmp	.-40     	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    d51e:	e4 eb       	ldi	r30, 0xB4	; 180
    d520:	f5 e0       	ldi	r31, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    d522:	90 81       	ld	r25, Z
    d524:	99 23       	and	r25, r25
    d526:	51 f0       	breq	.+20     	; 0xd53c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    d528:	89 13       	cpse	r24, r25
    d52a:	06 c0       	rjmp	.+12     	; 0xd538 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    d52c:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    d52e:	81 11       	cpse	r24, r1
    d530:	05 c0       	rjmp	.+10     	; 0xd53c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    d532:	82 e0       	ldi	r24, 0x02	; 2
    d534:	90 e0       	ldi	r25, 0x00	; 0
    d536:	df cf       	rjmp	.-66     	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    d538:	32 96       	adiw	r30, 0x02	; 2
    d53a:	f3 cf       	rjmp	.-26     	; 0xd522 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d53c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    d53e:	ec 81       	ldd	r30, Y+4	; 0x04
    d540:	fd 81       	ldd	r31, Y+5	; 0x05
    d542:	9f 01       	movw	r18, r30
    d544:	2f 5f       	subi	r18, 0xFF	; 255
    d546:	3f 4f       	sbci	r19, 0xFF	; 255
    d548:	3d 83       	std	Y+5, r19	; 0x05
    d54a:	2c 83       	std	Y+4, r18	; 0x04
    d54c:	80 83       	st	Z, r24
    d54e:	c9 cf       	rjmp	.-110    	; 0xd4e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    d550:	ec 81       	ldd	r30, Y+4	; 0x04
    d552:	fd 81       	ldd	r31, Y+5	; 0x05
    d554:	cf 01       	movw	r24, r30
    d556:	01 96       	adiw	r24, 0x01	; 1
    d558:	9d 83       	std	Y+5, r25	; 0x05
    d55a:	8c 83       	std	Y+4, r24	; 0x04
    d55c:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    d55e:	f7 01       	movw	r30, r14
    d560:	11 83       	std	Z+1, r17	; 0x01
    d562:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    d564:	83 e0       	ldi	r24, 0x03	; 3
    d566:	90 e0       	ldi	r25, 0x00	; 0
    d568:	01 2b       	or	r16, r17
    d56a:	29 f2       	breq	.-118    	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    d56c:	90 e0       	ldi	r25, 0x00	; 0
    d56e:	80 e0       	ldi	r24, 0x00	; 0
    d570:	c2 cf       	rjmp	.-124    	; 0xd4f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000d572 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    d572:	80 33       	cpi	r24, 0x30	; 48
    d574:	9c f0       	brlt	.+38     	; 0xd59c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    d576:	8a 33       	cpi	r24, 0x3A	; 58
    d578:	24 f0       	brlt	.+8      	; 0xd582 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    d57a:	8f 35       	cpi	r24, 0x5F	; 95
    d57c:	24 f0       	brlt	.+8      	; 0xd586 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    d57e:	8b 37       	cpi	r24, 0x7B	; 123
    d580:	24 f4       	brge	.+8      	; 0xd58a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    d582:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    d584:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    d586:	81 34       	cpi	r24, 0x41	; 65
    d588:	4c f0       	brlt	.+18     	; 0xd59c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    d58a:	8b 35       	cpi	r24, 0x5B	; 91
    d58c:	d4 f3       	brlt	.-12     	; 0xd582 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    d58e:	93 ed       	ldi	r25, 0xD3	; 211
    d590:	98 0f       	add	r25, r24
    d592:	81 e0       	ldi	r24, 0x01	; 1
    d594:	92 30       	cpi	r25, 0x02	; 2
    d596:	b0 f3       	brcs	.-20     	; 0xd584 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    d598:	80 e0       	ldi	r24, 0x00	; 0
    d59a:	08 95       	ret
    d59c:	8b 32       	cpi	r24, 0x2B	; 43
    d59e:	b9 f7       	brne	.-18     	; 0xd58e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    d5a0:	f0 cf       	rjmp	.-32     	; 0xd582 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000d5a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    d5a2:	8f 92       	push	r8
    d5a4:	9f 92       	push	r9
    d5a6:	af 92       	push	r10
    d5a8:	bf 92       	push	r11
    d5aa:	cf 92       	push	r12
    d5ac:	df 92       	push	r13
    d5ae:	ef 92       	push	r14
    d5b0:	ff 92       	push	r15
    d5b2:	0f 93       	push	r16
    d5b4:	1f 93       	push	r17
    d5b6:	cf 93       	push	r28
    d5b8:	df 93       	push	r29
    d5ba:	cd b7       	in	r28, 0x3d	; 61
    d5bc:	de b7       	in	r29, 0x3e	; 62
    d5be:	c0 54       	subi	r28, 0x40	; 64
    d5c0:	d1 09       	sbc	r29, r1
    d5c2:	0f b6       	in	r0, 0x3f	; 63
    d5c4:	f8 94       	cli
    d5c6:	de bf       	out	0x3e, r29	; 62
    d5c8:	0f be       	out	0x3f, r0	; 63
    d5ca:	cd bf       	out	0x3d, r28	; 61
    d5cc:	5c 01       	movw	r10, r24
    d5ce:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    d5d0:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d5d4:	c8 2e       	mov	r12, r24
    d5d6:	ce 01       	movw	r24, r28
    d5d8:	01 96       	adiw	r24, 0x01	; 1
    d5da:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    d5dc:	d1 2c       	mov	r13, r1
    d5de:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    d5e0:	8c 2d       	mov	r24, r12
    d5e2:	0e 94 b9 6a 	call	0xd572	; 0xd572 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    d5e6:	88 23       	and	r24, r24
    d5e8:	71 f0       	breq	.+28     	; 0xd606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
    d5ea:	9f e3       	ldi	r25, 0x3F	; 63
    d5ec:	d9 16       	cp	r13, r25
    d5ee:	59 f0       	breq	.+22     	; 0xd606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d5f0:	f5 01       	movw	r30, r10
    d5f2:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    d5f4:	d3 94       	inc	r13
    d5f6:	f4 01       	movw	r30, r8
    d5f8:	c1 92       	st	Z+, r12
    d5fa:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    d5fc:	c5 01       	movw	r24, r10
    d5fe:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d602:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    d604:	ed cf       	rjmp	.-38     	; 0xd5e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    d606:	f7 01       	movw	r30, r14
    d608:	ed 0d       	add	r30, r13
    d60a:	f1 1d       	adc	r31, r1
    d60c:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    d60e:	89 81       	ldd	r24, Y+1	; 0x01
    d610:	88 23       	and	r24, r24
    d612:	09 f4       	brne	.+2      	; 0xd616 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
    d614:	56 c0       	rjmp	.+172    	; 0xd6c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    d616:	8d 32       	cpi	r24, 0x2D	; 45
    d618:	19 f0       	breq	.+6      	; 0xd620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
    d61a:	f7 01       	movw	r30, r14
    d61c:	8b 32       	cpi	r24, 0x2B	; 43
    d61e:	11 f4       	brne	.+4      	; 0xd624 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    d620:	fe 01       	movw	r30, r28
    d622:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
    d624:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    d626:	20 ed       	ldi	r18, 0xD0	; 208
    d628:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    d62a:	2a 30       	cpi	r18, 0x0A	; 10
    d62c:	d8 f3       	brcs	.-10     	; 0xd624 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    d62e:	91 11       	cpse	r25, r1
    d630:	48 c0       	rjmp	.+144    	; 0xd6c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    d632:	84 37       	cpi	r24, 0x74	; 116
    d634:	09 f4       	brne	.+2      	; 0xd638 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
    d636:	a4 c0       	rjmp	.+328    	; 0xd780 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    d638:	8b 32       	cpi	r24, 0x2B	; 43
    d63a:	51 f0       	breq	.+20     	; 0xd650 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d63c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    d63e:	8d 32       	cpi	r24, 0x2D	; 45
    d640:	61 f4       	brne	.+24     	; 0xd65a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
    d642:	dd 24       	eor	r13, r13
    d644:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
    d646:	7e 01       	movw	r14, r28
    d648:	82 e0       	ldi	r24, 0x02	; 2
    d64a:	e8 0e       	add	r14, r24
    d64c:	f1 1c       	adc	r15, r1
    d64e:	05 c0       	rjmp	.+10     	; 0xd65a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d650:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d652:	7e 01       	movw	r14, r28
    d654:	f2 e0       	ldi	r31, 0x02	; 2
    d656:	ef 0e       	add	r14, r31
    d658:	f1 1c       	adc	r15, r1
    d65a:	f7 01       	movw	r30, r14
    d65c:	20 e0       	ldi	r18, 0x00	; 0
    d65e:	30 e0       	ldi	r19, 0x00	; 0
    d660:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
    d662:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d664:	80 ed       	ldi	r24, 0xD0	; 208
    d666:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    d668:	8a 30       	cpi	r24, 0x0A	; 10
    d66a:	90 f4       	brcc	.+36     	; 0xd690 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    d66c:	aa e0       	ldi	r26, 0x0A	; 10
    d66e:	b0 e0       	ldi	r27, 0x00	; 0
    d670:	0e 94 1d dd 	call	0x1ba3a	; 0x1ba3a <__muluhisi3>
    d674:	2f 2d       	mov	r18, r15
    d676:	ff 0c       	add	r15, r15
    d678:	33 0b       	sbc	r19, r19
    d67a:	20 53       	subi	r18, 0x30	; 48
    d67c:	31 09       	sbc	r19, r1
    d67e:	03 2e       	mov	r0, r19
    d680:	00 0c       	add	r0, r0
    d682:	44 0b       	sbc	r20, r20
    d684:	55 0b       	sbc	r21, r21
    d686:	26 0f       	add	r18, r22
    d688:	37 1f       	adc	r19, r23
    d68a:	48 1f       	adc	r20, r24
    d68c:	59 1f       	adc	r21, r25
    d68e:	e9 cf       	rjmp	.-46     	; 0xd662 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d690:	dd 20       	and	r13, r13
    d692:	09 f4       	brne	.+2      	; 0xd696 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
    d694:	79 c0       	rjmp	.+242    	; 0xd788 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    d696:	01 15       	cp	r16, r1
    d698:	11 05       	cpc	r17, r1
    d69a:	81 f0       	breq	.+32     	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    d69c:	87 e0       	ldi	r24, 0x07	; 7
    d69e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    d6a0:	21 15       	cp	r18, r1
    d6a2:	31 05       	cpc	r19, r1
    d6a4:	41 05       	cpc	r20, r1
    d6a6:	51 05       	cpc	r21, r1
    d6a8:	11 f4       	brne	.+4      	; 0xd6ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    d6aa:	86 e0       	ldi	r24, 0x06	; 6
    d6ac:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    d6ae:	f8 01       	movw	r30, r16
    d6b0:	91 83       	std	Z+1, r25	; 0x01
    d6b2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    d6b4:	22 83       	std	Z+2, r18	; 0x02
    d6b6:	33 83       	std	Z+3, r19	; 0x03
    d6b8:	44 83       	std	Z+4, r20	; 0x04
    d6ba:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    d6bc:	90 e0       	ldi	r25, 0x00	; 0
    d6be:	80 e0       	ldi	r24, 0x00	; 0
    d6c0:	4b c0       	rjmp	.+150    	; 0xd758 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    d6c2:	c7 01       	movw	r24, r14
    d6c4:	0e 94 53 38 	call	0x70a6	; 0x70a6 <ArduinoJson::Internals::isFloat(char const*)>
    d6c8:	88 23       	and	r24, r24
    d6ca:	81 f0       	breq	.+32     	; 0xd6ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
    d6cc:	c7 01       	movw	r24, r14
    d6ce:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    d6d2:	01 15       	cp	r16, r1
    d6d4:	11 05       	cpc	r17, r1
    d6d6:	91 f3       	breq	.-28     	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    d6d8:	2a e0       	ldi	r18, 0x0A	; 10
    d6da:	30 e0       	ldi	r19, 0x00	; 0
    d6dc:	f8 01       	movw	r30, r16
    d6de:	31 83       	std	Z+1, r19	; 0x01
    d6e0:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    d6e2:	62 83       	std	Z+2, r22	; 0x02
    d6e4:	73 83       	std	Z+3, r23	; 0x03
    d6e6:	84 83       	std	Z+4, r24	; 0x04
    d6e8:	95 83       	std	Z+5, r25	; 0x05
    d6ea:	e8 cf       	rjmp	.-48     	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
    d6ec:	6f eb       	ldi	r22, 0xBF	; 191
    d6ee:	75 e0       	ldi	r23, 0x05	; 5
    d6f0:	c7 01       	movw	r24, r14
    d6f2:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    d6f6:	89 2b       	or	r24, r25
    d6f8:	89 f4       	brne	.+34     	; 0xd71c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    d6fa:	01 15       	cp	r16, r1
    d6fc:	11 05       	cpc	r17, r1
    d6fe:	f1 f2       	breq	.-68     	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    d700:	85 e0       	ldi	r24, 0x05	; 5
    d702:	90 e0       	ldi	r25, 0x00	; 0
    d704:	f8 01       	movw	r30, r16
    d706:	91 83       	std	Z+1, r25	; 0x01
    d708:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    d70a:	81 e0       	ldi	r24, 0x01	; 1
    d70c:	90 e0       	ldi	r25, 0x00	; 0
    d70e:	a0 e0       	ldi	r26, 0x00	; 0
    d710:	b0 e0       	ldi	r27, 0x00	; 0
    d712:	82 83       	std	Z+2, r24	; 0x02
    d714:	93 83       	std	Z+3, r25	; 0x03
    d716:	a4 83       	std	Z+4, r26	; 0x04
    d718:	b5 83       	std	Z+5, r27	; 0x05
    d71a:	d0 cf       	rjmp	.-96     	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    d71c:	64 ec       	ldi	r22, 0xC4	; 196
    d71e:	75 e0       	ldi	r23, 0x05	; 5
    d720:	c7 01       	movw	r24, r14
    d722:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    d726:	89 2b       	or	r24, r25
    d728:	69 f4       	brne	.+26     	; 0xd744 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    d72a:	01 15       	cp	r16, r1
    d72c:	11 05       	cpc	r17, r1
    d72e:	31 f2       	breq	.-116    	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    d730:	85 e0       	ldi	r24, 0x05	; 5
    d732:	90 e0       	ldi	r25, 0x00	; 0
    d734:	f8 01       	movw	r30, r16
    d736:	91 83       	std	Z+1, r25	; 0x01
    d738:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    d73a:	12 82       	std	Z+2, r1	; 0x02
    d73c:	13 82       	std	Z+3, r1	; 0x03
    d73e:	14 82       	std	Z+4, r1	; 0x04
    d740:	15 82       	std	Z+5, r1	; 0x05
    d742:	bc cf       	rjmp	.-136    	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    d744:	6a ec       	ldi	r22, 0xCA	; 202
    d746:	75 e0       	ldi	r23, 0x05	; 5
    d748:	c7 01       	movw	r24, r14
    d74a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    d74e:	89 2b       	or	r24, r25
    d750:	09 f4       	brne	.+2      	; 0xd754 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
    d752:	b4 cf       	rjmp	.-152    	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    d754:	82 e0       	ldi	r24, 0x02	; 2
    d756:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
    d758:	c0 5c       	subi	r28, 0xC0	; 192
    d75a:	df 4f       	sbci	r29, 0xFF	; 255
    d75c:	0f b6       	in	r0, 0x3f	; 63
    d75e:	f8 94       	cli
    d760:	de bf       	out	0x3e, r29	; 62
    d762:	0f be       	out	0x3f, r0	; 63
    d764:	cd bf       	out	0x3d, r28	; 61
    d766:	df 91       	pop	r29
    d768:	cf 91       	pop	r28
    d76a:	1f 91       	pop	r17
    d76c:	0f 91       	pop	r16
    d76e:	ff 90       	pop	r15
    d770:	ef 90       	pop	r14
    d772:	df 90       	pop	r13
    d774:	cf 90       	pop	r12
    d776:	bf 90       	pop	r11
    d778:	af 90       	pop	r10
    d77a:	9f 90       	pop	r9
    d77c:	8f 90       	pop	r8
    d77e:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    d780:	21 e0       	ldi	r18, 0x01	; 1
    d782:	30 e0       	ldi	r19, 0x00	; 0
    d784:	40 e0       	ldi	r20, 0x00	; 0
    d786:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    d788:	01 15       	cp	r16, r1
    d78a:	11 05       	cpc	r17, r1
    d78c:	09 f0       	breq	.+2      	; 0xd790 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
    d78e:	8d cf       	rjmp	.-230    	; 0xd6aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
    d790:	95 cf       	rjmp	.-214    	; 0xd6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

0000d792 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    d792:	cf 92       	push	r12
    d794:	df 92       	push	r13
    d796:	ef 92       	push	r14
    d798:	ff 92       	push	r15
    d79a:	1f 93       	push	r17
    d79c:	cf 93       	push	r28
    d79e:	df 93       	push	r29
    d7a0:	ec 01       	movw	r28, r24
    d7a2:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
    d7a4:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    d7a8:	87 32       	cpi	r24, 0x27	; 39
    d7aa:	a1 f0       	breq	.+40     	; 0xd7d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
    d7ac:	82 32       	cpi	r24, 0x22	; 34
    d7ae:	91 f0       	breq	.+36     	; 0xd7d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    d7b0:	ec 80       	ldd	r14, Y+4	; 0x04
    d7b2:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    d7b4:	ce 01       	movw	r24, r28
    d7b6:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d7ba:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    d7bc:	81 11       	cpse	r24, r1
    d7be:	15 c0       	rjmp	.+42     	; 0xd7ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
    d7c0:	81 e0       	ldi	r24, 0x01	; 1
    d7c2:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
    d7c4:	df 91       	pop	r29
    d7c6:	cf 91       	pop	r28
    d7c8:	1f 91       	pop	r17
    d7ca:	ff 90       	pop	r15
    d7cc:	ef 90       	pop	r14
    d7ce:	df 90       	pop	r13
    d7d0:	cf 90       	pop	r12
    d7d2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    d7d4:	b6 01       	movw	r22, r12
    d7d6:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
    d7d8:	df 91       	pop	r29
    d7da:	cf 91       	pop	r28
    d7dc:	1f 91       	pop	r17
    d7de:	ff 90       	pop	r15
    d7e0:	ef 90       	pop	r14
    d7e2:	df 90       	pop	r13
    d7e4:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    d7e6:	0c 94 62 6a 	jmp	0xd4c4	; 0xd4c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    d7ea:	0e 94 b9 6a 	call	0xd572	; 0xd572 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    d7ee:	88 23       	and	r24, r24
    d7f0:	09 f1       	breq	.+66     	; 0xd834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d7f2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    d7f4:	ec 81       	ldd	r30, Y+4	; 0x04
    d7f6:	fd 81       	ldd	r31, Y+5	; 0x05
    d7f8:	cf 01       	movw	r24, r30
    d7fa:	01 96       	adiw	r24, 0x01	; 1
    d7fc:	9d 83       	std	Y+5, r25	; 0x05
    d7fe:	8c 83       	std	Y+4, r24	; 0x04
    d800:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    d802:	ce 01       	movw	r24, r28
    d804:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d808:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    d80a:	0e 94 b9 6a 	call	0xd572	; 0xd572 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    d80e:	81 11       	cpse	r24, r1
    d810:	f0 cf       	rjmp	.-32     	; 0xd7f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    d812:	ec 81       	ldd	r30, Y+4	; 0x04
    d814:	fd 81       	ldd	r31, Y+5	; 0x05
    d816:	cf 01       	movw	r24, r30
    d818:	01 96       	adiw	r24, 0x01	; 1
    d81a:	9d 83       	std	Y+5, r25	; 0x05
    d81c:	8c 83       	std	Y+4, r24	; 0x04
    d81e:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    d820:	f6 01       	movw	r30, r12
    d822:	f1 82       	std	Z+1, r15	; 0x01
    d824:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
    d826:	90 e0       	ldi	r25, 0x00	; 0
    d828:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    d82a:	ef 28       	or	r14, r15
    d82c:	59 f6       	brne	.-106    	; 0xd7c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
    d82e:	83 e0       	ldi	r24, 0x03	; 3
    d830:	90 e0       	ldi	r25, 0x00	; 0
    d832:	c8 cf       	rjmp	.-112    	; 0xd7c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    d834:	82 e0       	ldi	r24, 0x02	; 2
    d836:	90 e0       	ldi	r25, 0x00	; 0
    d838:	c5 cf       	rjmp	.-118    	; 0xd7c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

0000d83a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    d83a:	3f 92       	push	r3
    d83c:	4f 92       	push	r4
    d83e:	5f 92       	push	r5
    d840:	6f 92       	push	r6
    d842:	7f 92       	push	r7
    d844:	8f 92       	push	r8
    d846:	9f 92       	push	r9
    d848:	af 92       	push	r10
    d84a:	bf 92       	push	r11
    d84c:	cf 92       	push	r12
    d84e:	df 92       	push	r13
    d850:	ef 92       	push	r14
    d852:	ff 92       	push	r15
    d854:	0f 93       	push	r16
    d856:	1f 93       	push	r17
    d858:	cf 93       	push	r28
    d85a:	df 93       	push	r29
    d85c:	1f 92       	push	r1
    d85e:	1f 92       	push	r1
    d860:	cd b7       	in	r28, 0x3d	; 61
    d862:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    d864:	dc 01       	movw	r26, r24
    d866:	16 96       	adiw	r26, 0x06	; 6
    d868:	2c 91       	ld	r18, X
    d86a:	16 97       	sbiw	r26, 0x06	; 6
    d86c:	21 11       	cpse	r18, r1
    d86e:	16 c0       	rjmp	.+44     	; 0xd89c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
    d870:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    d872:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
    d874:	0f 90       	pop	r0
    d876:	0f 90       	pop	r0
    d878:	df 91       	pop	r29
    d87a:	cf 91       	pop	r28
    d87c:	1f 91       	pop	r17
    d87e:	0f 91       	pop	r16
    d880:	ff 90       	pop	r15
    d882:	ef 90       	pop	r14
    d884:	df 90       	pop	r13
    d886:	cf 90       	pop	r12
    d888:	bf 90       	pop	r11
    d88a:	af 90       	pop	r10
    d88c:	9f 90       	pop	r9
    d88e:	8f 90       	pop	r8
    d890:	7f 90       	pop	r7
    d892:	6f 90       	pop	r6
    d894:	5f 90       	pop	r5
    d896:	4f 90       	pop	r4
    d898:	3f 90       	pop	r3
    d89a:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    d89c:	6b 01       	movw	r12, r22
    d89e:	61 15       	cp	r22, r1
    d8a0:	71 05       	cpc	r23, r1
    d8a2:	11 f4       	brne	.+4      	; 0xd8a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    d8a4:	83 e0       	ldi	r24, 0x03	; 3
    d8a6:	e5 cf       	rjmp	.-54     	; 0xd872 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
    d8a8:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    d8aa:	89 e0       	ldi	r24, 0x09	; 9
    d8ac:	90 e0       	ldi	r25, 0x00	; 0
    d8ae:	fb 01       	movw	r30, r22
    d8b0:	91 83       	std	Z+1, r25	; 0x01
    d8b2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    d8b4:	13 82       	std	Z+3, r1	; 0x03
    d8b6:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    d8b8:	15 82       	std	Z+5, r1	; 0x05
    d8ba:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    d8bc:	4b 01       	movw	r8, r22
    d8be:	f2 e0       	ldi	r31, 0x02	; 2
    d8c0:	8f 0e       	add	r8, r31
    d8c2:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    d8c4:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    d8c6:	cd 01       	movw	r24, r26
    d8c8:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d8cc:	8b 37       	cpi	r24, 0x7B	; 123
    d8ce:	11 f0       	breq	.+4      	; 0xd8d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
    d8d0:	82 e0       	ldi	r24, 0x02	; 2
    d8d2:	cf cf       	rjmp	.-98     	; 0xd872 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d8d4:	d8 01       	movw	r26, r16
    d8d6:	18 96       	adiw	r26, 0x08	; 8
    d8d8:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    d8da:	c8 01       	movw	r24, r16
    d8dc:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    d8e0:	00 97       	sbiw	r24, 0x00	; 0
    d8e2:	41 f6       	brne	.-112    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    d8e4:	c8 01       	movw	r24, r16
    d8e6:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d8ea:	8d 37       	cpi	r24, 0x7D	; 125
    d8ec:	09 f4       	brne	.+2      	; 0xd8f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
    d8ee:	4b c0       	rjmp	.+150    	; 0xd986 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    d8f0:	8c e0       	ldi	r24, 0x0C	; 12
    d8f2:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
    d8f4:	be 01       	movw	r22, r28
    d8f6:	6f 5f       	subi	r22, 0xFF	; 255
    d8f8:	7f 4f       	sbci	r23, 0xFF	; 255
    d8fa:	c8 01       	movw	r24, r16
    d8fc:	0e 94 c9 6b 	call	0xd792	; 0xd792 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
    d900:	00 97       	sbiw	r24, 0x00	; 0
    d902:	09 f0       	breq	.+2      	; 0xd906 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
    d904:	b7 cf       	rjmp	.-146    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    d906:	c8 01       	movw	r24, r16
    d908:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    d90c:	00 97       	sbiw	r24, 0x00	; 0
    d90e:	09 f0       	breq	.+2      	; 0xd912 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
    d910:	b1 cf       	rjmp	.-158    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    d912:	c8 01       	movw	r24, r16
    d914:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d918:	8a 33       	cpi	r24, 0x3A	; 58
    d91a:	d1 f6       	brne	.-76     	; 0xd8d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d91c:	d8 01       	movw	r26, r16
    d91e:	18 96       	adiw	r26, 0x08	; 8
    d920:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    d922:	a9 80       	ldd	r10, Y+1	; 0x01
    d924:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    d926:	a1 14       	cp	r10, r1
    d928:	b1 04       	cpc	r11, r1
    d92a:	89 f5       	brne	.+98     	; 0xd98e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
    d92c:	90 e0       	ldi	r25, 0x00	; 0
    d92e:	80 e0       	ldi	r24, 0x00	; 0
    d930:	30 e0       	ldi	r19, 0x00	; 0
    d932:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    d934:	43 2e       	mov	r4, r19
    d936:	52 2e       	mov	r5, r18
    d938:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    d93a:	89 2b       	or	r24, r25
    d93c:	09 f4       	brne	.+2      	; 0xd940 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
    d93e:	b2 cf       	rjmp	.-156    	; 0xd8a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    d940:	d8 01       	movw	r26, r16
    d942:	16 96       	adiw	r26, 0x06	; 6
    d944:	8c 91       	ld	r24, X
    d946:	16 97       	sbiw	r26, 0x06	; 6
    d948:	81 50       	subi	r24, 0x01	; 1
    d94a:	16 96       	adiw	r26, 0x06	; 6
    d94c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    d94e:	b3 01       	movw	r22, r6
    d950:	a2 01       	movw	r20, r4
    d952:	c8 01       	movw	r24, r16
    d954:	0e 94 11 6d 	call	0xda22	; 0xda22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    d958:	f8 01       	movw	r30, r16
    d95a:	26 81       	ldd	r18, Z+6	; 0x06
    d95c:	2f 5f       	subi	r18, 0xFF	; 255
    d95e:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    d960:	00 97       	sbiw	r24, 0x00	; 0
    d962:	09 f0       	breq	.+2      	; 0xd966 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
    d964:	87 cf       	rjmp	.-242    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    d966:	c8 01       	movw	r24, r16
    d968:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    d96c:	00 97       	sbiw	r24, 0x00	; 0
    d96e:	09 f0       	breq	.+2      	; 0xd972 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
    d970:	81 cf       	rjmp	.-254    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    d972:	c8 01       	movw	r24, r16
    d974:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d978:	8d 37       	cpi	r24, 0x7D	; 125
    d97a:	09 f0       	breq	.+2      	; 0xd97e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
    d97c:	43 c0       	rjmp	.+134    	; 0xda04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d97e:	d8 01       	movw	r26, r16
    d980:	18 96       	adiw	r26, 0x08	; 8
    d982:	1c 92       	st	X, r1
    d984:	02 c0       	rjmp	.+4      	; 0xd98a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
    d986:	f8 01       	movw	r30, r16
    d988:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
    d98a:	80 e0       	ldi	r24, 0x00	; 0
    d98c:	72 cf       	rjmp	.-284    	; 0xd872 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    d98e:	b5 01       	movw	r22, r10
    d990:	c4 01       	movw	r24, r8
    d992:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    d996:	00 97       	sbiw	r24, 0x00	; 0
    d998:	49 f5       	brne	.+82     	; 0xd9ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    d99a:	d7 01       	movw	r26, r14
    d99c:	ed 91       	ld	r30, X+
    d99e:	fc 91       	ld	r31, X
    d9a0:	01 90       	ld	r0, Z+
    d9a2:	f0 81       	ld	r31, Z
    d9a4:	e0 2d       	mov	r30, r0
    d9a6:	6c e0       	ldi	r22, 0x0C	; 12
    d9a8:	70 e0       	ldi	r23, 0x00	; 0
    d9aa:	c7 01       	movw	r24, r14
    d9ac:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    d9ae:	00 97       	sbiw	r24, 0x00	; 0
    d9b0:	09 f4       	brne	.+2      	; 0xd9b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
    d9b2:	bc cf       	rjmp	.-136    	; 0xd92c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
    d9b4:	fc 01       	movw	r30, r24
    d9b6:	23 2d       	mov	r18, r3
    d9b8:	11 92       	st	Z+, r1
    d9ba:	2a 95       	dec	r18
    d9bc:	e9 f7       	brne	.-6      	; 0xd9b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    d9be:	dc 01       	movw	r26, r24
    d9c0:	1d 92       	st	X+, r1
    d9c2:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    d9c4:	d6 01       	movw	r26, r12
    d9c6:	14 96       	adiw	r26, 0x04	; 4
    d9c8:	ed 91       	ld	r30, X+
    d9ca:	fc 91       	ld	r31, X
    d9cc:	15 97       	sbiw	r26, 0x05	; 5
    d9ce:	30 97       	sbiw	r30, 0x00	; 0
    d9d0:	81 f0       	breq	.+32     	; 0xd9f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    d9d2:	dc 01       	movw	r26, r24
    d9d4:	19 96       	adiw	r26, 0x09	; 9
    d9d6:	fc 93       	st	X, r31
    d9d8:	ee 93       	st	-X, r30
    d9da:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    d9dc:	97 83       	std	Z+7, r25	; 0x07
    d9de:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    d9e0:	f6 01       	movw	r30, r12
    d9e2:	95 83       	std	Z+5, r25	; 0x05
    d9e4:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    d9e6:	fc 01       	movw	r30, r24
    d9e8:	b3 86       	std	Z+11, r11	; 0x0b
    d9ea:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
    d9ec:	3e 2d       	mov	r19, r14
    d9ee:	2f 2d       	mov	r18, r15
    d9f0:	a1 cf       	rjmp	.-190    	; 0xd934 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    d9f2:	13 96       	adiw	r26, 0x03	; 3
    d9f4:	9c 93       	st	X, r25
    d9f6:	8e 93       	st	-X, r24
    d9f8:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    d9fa:	15 96       	adiw	r26, 0x05	; 5
    d9fc:	9c 93       	st	X, r25
    d9fe:	8e 93       	st	-X, r24
    da00:	14 97       	sbiw	r26, 0x04	; 4
    da02:	f1 cf       	rjmp	.-30     	; 0xd9e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    da04:	c8 01       	movw	r24, r16
    da06:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    da0a:	8c 32       	cpi	r24, 0x2C	; 44
    da0c:	09 f0       	breq	.+2      	; 0xda10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
    da0e:	60 cf       	rjmp	.-320    	; 0xd8d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    da10:	f8 01       	movw	r30, r16
    da12:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    da14:	c8 01       	movw	r24, r16
    da16:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    da1a:	00 97       	sbiw	r24, 0x00	; 0
    da1c:	09 f4       	brne	.+2      	; 0xda20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
    da1e:	6a cf       	rjmp	.-300    	; 0xd8f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
    da20:	29 cf       	rjmp	.-430    	; 0xd874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

0000da22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    da22:	8f 92       	push	r8
    da24:	9f 92       	push	r9
    da26:	af 92       	push	r10
    da28:	bf 92       	push	r11
    da2a:	ef 92       	push	r14
    da2c:	ff 92       	push	r15
    da2e:	0f 93       	push	r16
    da30:	1f 93       	push	r17
    da32:	cf 93       	push	r28
    da34:	df 93       	push	r29
    da36:	1f 92       	push	r1
    da38:	1f 92       	push	r1
    da3a:	cd b7       	in	r28, 0x3d	; 61
    da3c:	de b7       	in	r29, 0x3e	; 62
    da3e:	8c 01       	movw	r16, r24
    da40:	4a 01       	movw	r8, r20
    da42:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    da44:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    da48:	00 97       	sbiw	r24, 0x00	; 0
    da4a:	e1 f4       	brne	.+56     	; 0xda84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    da4c:	c8 01       	movw	r24, r16
    da4e:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    da52:	8b 35       	cpi	r24, 0x5B	; 91
    da54:	91 f0       	breq	.+36     	; 0xda7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
    da56:	8b 37       	cpi	r24, 0x7B	; 123
    da58:	11 f1       	breq	.+68     	; 0xda9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
    da5a:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    da5c:	c8 01       	movw	r24, r16
    da5e:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    da62:	87 32       	cpi	r24, 0x27	; 39
    da64:	11 f1       	breq	.+68     	; 0xdaaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    da66:	82 32       	cpi	r24, 0x22	; 34
    da68:	01 f1       	breq	.+64     	; 0xdaaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
    da6a:	b5 01       	movw	r22, r10
    da6c:	a4 01       	movw	r20, r8
    da6e:	c8 01       	movw	r24, r16
    da70:	0e 94 d1 6a 	call	0xd5a2	; 0xd5a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
    da74:	9c 01       	movw	r18, r24
    da76:	c9 01       	movw	r24, r18
    da78:	05 c0       	rjmp	.+10     	; 0xda84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
    da7a:	b5 01       	movw	r22, r10
    da7c:	a4 01       	movw	r20, r8
    da7e:	c8 01       	movw	r24, r16
    da80:	0e 94 6d 6d 	call	0xdada	; 0xdada <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    da84:	0f 90       	pop	r0
    da86:	0f 90       	pop	r0
    da88:	df 91       	pop	r29
    da8a:	cf 91       	pop	r28
    da8c:	1f 91       	pop	r17
    da8e:	0f 91       	pop	r16
    da90:	ff 90       	pop	r15
    da92:	ef 90       	pop	r14
    da94:	bf 90       	pop	r11
    da96:	af 90       	pop	r10
    da98:	9f 90       	pop	r9
    da9a:	8f 90       	pop	r8
    da9c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
    da9e:	b5 01       	movw	r22, r10
    daa0:	a4 01       	movw	r20, r8
    daa2:	c8 01       	movw	r24, r16
    daa4:	0e 94 1d 6c 	call	0xd83a	; 0xd83a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
    daa8:	ed cf       	rjmp	.-38     	; 0xda84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    daaa:	be 01       	movw	r22, r28
    daac:	6f 5f       	subi	r22, 0xFF	; 255
    daae:	7f 4f       	sbci	r23, 0xFF	; 255
    dab0:	c8 01       	movw	r24, r16
    dab2:	0e 94 62 6a 	call	0xd4c4	; 0xd4c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    dab6:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    dab8:	89 2b       	or	r24, r25
    daba:	e9 f6       	brne	.-70     	; 0xda76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    dabc:	e1 14       	cp	r14, r1
    dabe:	f1 04       	cpc	r15, r1
    dac0:	49 f0       	breq	.+18     	; 0xdad4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    dac2:	89 81       	ldd	r24, Y+1	; 0x01
    dac4:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    dac6:	23 e0       	ldi	r18, 0x03	; 3
    dac8:	30 e0       	ldi	r19, 0x00	; 0
    daca:	f7 01       	movw	r30, r14
    dacc:	31 83       	std	Z+1, r19	; 0x01
    dace:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    dad0:	93 83       	std	Z+3, r25	; 0x03
    dad2:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
    dad4:	30 e0       	ldi	r19, 0x00	; 0
    dad6:	20 e0       	ldi	r18, 0x00	; 0
    dad8:	ce cf       	rjmp	.-100    	; 0xda76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

0000dada <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    dada:	0f 93       	push	r16
    dadc:	1f 93       	push	r17
    dade:	cf 93       	push	r28
    dae0:	df 93       	push	r29
    dae2:	00 d0       	rcall	.+0      	; 0xdae4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
    dae4:	1f 92       	push	r1
    dae6:	cd b7       	in	r28, 0x3d	; 61
    dae8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    daea:	fc 01       	movw	r30, r24
    daec:	26 81       	ldd	r18, Z+6	; 0x06
    daee:	21 11       	cpse	r18, r1
    daf0:	0b c0       	rjmp	.+22     	; 0xdb08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
    daf2:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    daf4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
    daf6:	0f 90       	pop	r0
    daf8:	0f 90       	pop	r0
    dafa:	0f 90       	pop	r0
    dafc:	0f 90       	pop	r0
    dafe:	df 91       	pop	r29
    db00:	cf 91       	pop	r28
    db02:	1f 91       	pop	r17
    db04:	0f 91       	pop	r16
    db06:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    db08:	fb 01       	movw	r30, r22
    db0a:	30 97       	sbiw	r30, 0x00	; 0
    db0c:	99 f0       	breq	.+38     	; 0xdb34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    db0e:	28 e0       	ldi	r18, 0x08	; 8
    db10:	30 e0       	ldi	r19, 0x00	; 0
    db12:	31 83       	std	Z+1, r19	; 0x01
    db14:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    db16:	13 82       	std	Z+3, r1	; 0x03
    db18:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    db1a:	15 82       	std	Z+5, r1	; 0x05
    db1c:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
    db1e:	9b 01       	movw	r18, r22
    db20:	2e 5f       	subi	r18, 0xFE	; 254
    db22:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
    db24:	5a 83       	std	Y+2, r21	; 0x02
    db26:	49 83       	std	Y+1, r20	; 0x01
    db28:	3c 83       	std	Y+4, r19	; 0x04
    db2a:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
    db2c:	23 2b       	or	r18, r19
    db2e:	39 f4       	brne	.+14     	; 0xdb3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    db30:	83 e0       	ldi	r24, 0x03	; 3
    db32:	e0 cf       	rjmp	.-64     	; 0xdaf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
    db34:	30 e0       	ldi	r19, 0x00	; 0
    db36:	20 e0       	ldi	r18, 0x00	; 0
    db38:	50 e0       	ldi	r21, 0x00	; 0
    db3a:	40 e0       	ldi	r20, 0x00	; 0
    db3c:	f3 cf       	rjmp	.-26     	; 0xdb24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
    db3e:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    db40:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db44:	8b 35       	cpi	r24, 0x5B	; 91
    db46:	11 f0       	breq	.+4      	; 0xdb4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    db48:	82 e0       	ldi	r24, 0x02	; 2
    db4a:	d4 cf       	rjmp	.-88     	; 0xdaf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db4c:	f8 01       	movw	r30, r16
    db4e:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    db50:	c8 01       	movw	r24, r16
    db52:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    db56:	00 97       	sbiw	r24, 0x00	; 0
    db58:	71 f6       	brne	.-100    	; 0xdaf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    db5a:	c8 01       	movw	r24, r16
    db5c:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db60:	8d 35       	cpi	r24, 0x5D	; 93
    db62:	21 f4       	brne	.+8      	; 0xdb6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db64:	f8 01       	movw	r30, r16
    db66:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
    db68:	80 e0       	ldi	r24, 0x00	; 0
    db6a:	c4 cf       	rjmp	.-120    	; 0xdaf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
    db6c:	ce 01       	movw	r24, r28
    db6e:	01 96       	adiw	r24, 0x01	; 1
    db70:	0e 94 06 38 	call	0x700c	; 0x700c <ArduinoJson::JsonArray::add()>
    db74:	ab 01       	movw	r20, r22
    db76:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
    db78:	89 2b       	or	r24, r25
    db7a:	d1 f2       	breq	.-76     	; 0xdb30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    db7c:	f8 01       	movw	r30, r16
    db7e:	86 81       	ldd	r24, Z+6	; 0x06
    db80:	81 50       	subi	r24, 0x01	; 1
    db82:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    db84:	c8 01       	movw	r24, r16
    db86:	0e 94 11 6d 	call	0xda22	; 0xda22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    db8a:	f8 01       	movw	r30, r16
    db8c:	26 81       	ldd	r18, Z+6	; 0x06
    db8e:	2f 5f       	subi	r18, 0xFF	; 255
    db90:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    db92:	00 97       	sbiw	r24, 0x00	; 0
    db94:	09 f0       	breq	.+2      	; 0xdb98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
    db96:	af cf       	rjmp	.-162    	; 0xdaf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    db98:	c8 01       	movw	r24, r16
    db9a:	0e 94 26 69 	call	0xd24c	; 0xd24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    db9e:	00 97       	sbiw	r24, 0x00	; 0
    dba0:	09 f0       	breq	.+2      	; 0xdba4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
    dba2:	a9 cf       	rjmp	.-174    	; 0xdaf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    dba4:	c8 01       	movw	r24, r16
    dba6:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dbaa:	8d 35       	cpi	r24, 0x5D	; 93
    dbac:	d9 f2       	breq	.-74     	; 0xdb64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
    dbae:	c8 01       	movw	r24, r16
    dbb0:	0e 94 16 69 	call	0xd22c	; 0xd22c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dbb4:	8c 32       	cpi	r24, 0x2C	; 44
    dbb6:	41 f6       	brne	.-112    	; 0xdb48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dbb8:	f8 01       	movw	r30, r16
    dbba:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
    dbbc:	d7 cf       	rjmp	.-82     	; 0xdb6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

0000dbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    dbbe:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    dbc0:	80 81       	ld	r24, Z
    dbc2:	91 81       	ldd	r25, Z+1	; 0x01
    dbc4:	87 30       	cpi	r24, 0x07	; 7
    dbc6:	91 05       	cpc	r25, r1
    dbc8:	38 f4       	brcc	.+14     	; 0xdbd8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    dbca:	85 30       	cpi	r24, 0x05	; 5
    dbcc:	91 05       	cpc	r25, r1
    dbce:	88 f4       	brcc	.+34     	; 0xdbf2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    dbd0:	03 97       	sbiw	r24, 0x03	; 3
    dbd2:	a0 f4       	brcc	.+40     	; 0xdbfc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    dbd4:	80 e0       	ldi	r24, 0x00	; 0
    dbd6:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    dbd8:	87 30       	cpi	r24, 0x07	; 7
    dbda:	91 05       	cpc	r25, r1
    dbdc:	61 f0       	breq	.+24     	; 0xdbf6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    dbde:	0a 97       	sbiw	r24, 0x0a	; 10
    dbe0:	c9 f7       	brne	.-14     	; 0xdbd4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    dbe2:	62 81       	ldd	r22, Z+2	; 0x02
    dbe4:	73 81       	ldd	r23, Z+3	; 0x03
    dbe6:	84 81       	ldd	r24, Z+4	; 0x04
    dbe8:	95 81       	ldd	r25, Z+5	; 0x05
    dbea:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
    dbee:	86 2f       	mov	r24, r22
    dbf0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    dbf2:	82 81       	ldd	r24, Z+2	; 0x02
    dbf4:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    dbf6:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    dbf8:	81 95       	neg	r24
    dbfa:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    dbfc:	02 80       	ldd	r0, Z+2	; 0x02
    dbfe:	f3 81       	ldd	r31, Z+3	; 0x03
    dc00:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    dc02:	30 97       	sbiw	r30, 0x00	; 0
    dc04:	39 f3       	breq	.-50     	; 0xdbd4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    dc06:	80 81       	ld	r24, Z
    dc08:	84 37       	cpi	r24, 0x74	; 116
    dc0a:	c9 f0       	breq	.+50     	; 0xdc3e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    dc0c:	8b 32       	cpi	r24, 0x2B	; 43
    dc0e:	89 f0       	breq	.+34     	; 0xdc32 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    dc10:	8d 32       	cpi	r24, 0x2D	; 45
    dc12:	81 f4       	brne	.+32     	; 0xdc34 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    dc14:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    dc16:	91 e0       	ldi	r25, 0x01	; 1
    dc18:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    dc1a:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    dc1c:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    dc1e:	30 ed       	ldi	r19, 0xD0	; 208
    dc20:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    dc22:	3a 30       	cpi	r19, 0x0A	; 10
    dc24:	48 f4       	brcc	.+18     	; 0xdc38 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    dc26:	82 9f       	mul	r24, r18
    dc28:	60 0d       	add	r22, r0
    dc2a:	11 24       	eor	r1, r1
    dc2c:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    dc2e:	80 53       	subi	r24, 0x30	; 48
    dc30:	f5 cf       	rjmp	.-22     	; 0xdc1c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    dc32:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    dc34:	90 e0       	ldi	r25, 0x00	; 0
    dc36:	f0 cf       	rjmp	.-32     	; 0xdc18 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    dc38:	91 11       	cpse	r25, r1
    dc3a:	de cf       	rjmp	.-68     	; 0xdbf8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    dc3c:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    dc3e:	81 e0       	ldi	r24, 0x01	; 1
    dc40:	fd cf       	rjmp	.-6      	; 0xdc3c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000dc42 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    dc42:	2f 92       	push	r2
    dc44:	3f 92       	push	r3
    dc46:	4f 92       	push	r4
    dc48:	5f 92       	push	r5
    dc4a:	6f 92       	push	r6
    dc4c:	7f 92       	push	r7
    dc4e:	8f 92       	push	r8
    dc50:	9f 92       	push	r9
    dc52:	af 92       	push	r10
    dc54:	bf 92       	push	r11
    dc56:	cf 92       	push	r12
    dc58:	df 92       	push	r13
    dc5a:	ef 92       	push	r14
    dc5c:	ff 92       	push	r15
    dc5e:	0f 93       	push	r16
    dc60:	1f 93       	push	r17
    dc62:	cf 93       	push	r28
    dc64:	df 93       	push	r29
    dc66:	cd b7       	in	r28, 0x3d	; 61
    dc68:	de b7       	in	r29, 0x3e	; 62
    dc6a:	cf 5c       	subi	r28, 0xCF	; 207
    dc6c:	d1 09       	sbc	r29, r1
    dc6e:	0f b6       	in	r0, 0x3f	; 63
    dc70:	f8 94       	cli
    dc72:	de bf       	out	0x3e, r29	; 62
    dc74:	0f be       	out	0x3f, r0	; 63
    dc76:	cd bf       	out	0x3d, r28	; 61
    dc78:	4c 01       	movw	r8, r24
    dc7a:	8b 01       	movw	r16, r22
    dc7c:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2258
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
    dc7e:	62 e3       	ldi	r22, 0x32	; 50
    dc80:	70 e1       	ldi	r23, 0x10	; 16
    dc82:	ce 01       	movw	r24, r28
    dc84:	01 96       	adiw	r24, 0x01	; 1
    dc86:	0e 94 80 d2 	call	0x1a500	; 0x1a500 <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  DateTime ted;
    dc8a:	40 e0       	ldi	r20, 0x00	; 0
    dc8c:	50 e0       	ldi	r21, 0x00	; 0
    dc8e:	ba 01       	movw	r22, r20
    dc90:	ce 01       	movw	r24, r28
    dc92:	88 53       	subi	r24, 0x38	; 56
    dc94:	9f 4f       	sbci	r25, 0xFF	; 255
    dc96:	0e 94 a1 ca 	call	0x19542	; 0x19542 <DateTime::DateTime(unsigned long)>
    dc9a:	e8 e5       	ldi	r30, 0x58	; 88
    dc9c:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    dc9e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260 (discriminator 2)
    dca0:	11 92       	st	Z+, r1
    dca2:	8f 5f       	subi	r24, 0xFF	; 255
    dca4:	80 38       	cpi	r24, 0x80	; 128
    dca6:	e1 f7       	brne	.-8      	; 0xdca0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    dca8:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <mqtt_receive_message>
    dcac:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <mqtt_receive_message+0x1>
    dcb0:	01 96       	adiw	r24, 0x01	; 1
    dcb2:	90 93 03 11 	sts	0x1103, r25	; 0x801103 <mqtt_receive_message+0x1>
    dcb6:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
  strncpy(my_payload, (char*) payload, length);
    dcba:	a7 01       	movw	r20, r14
    dcbc:	b8 01       	movw	r22, r16
    dcbe:	88 e5       	ldi	r24, 0x58	; 88
    dcc0:	99 e0       	ldi	r25, 0x09	; 9
    dcc2:	0e 94 d2 e0 	call	0x1c1a4	; 0x1c1a4 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    dcc6:	5e 01       	movw	r10, r28
    dcc8:	88 e4       	ldi	r24, 0x48	; 72
    dcca:	a8 0e       	add	r10, r24
    dccc:	b1 1c       	adc	r11, r1
    dcce:	65 e6       	ldi	r22, 0x65	; 101
    dcd0:	78 e5       	ldi	r23, 0x58	; 88
    dcd2:	c5 01       	movw	r24, r10
    dcd4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
  if (strcmp(str1, topic) == 0)
    dcd8:	b4 01       	movw	r22, r8
    dcda:	c5 01       	movw	r24, r10
    dcdc:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    dce0:	89 2b       	or	r24, r25
    dce2:	71 f4       	brne	.+28     	; 0xdd00 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    dce4:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    dce8:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    dcec:	01 96       	adiw	r24, 0x01	; 1
    dcee:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    dcf2:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    dcf6:	62 e0       	ldi	r22, 0x02	; 2
    dcf8:	88 e5       	ldi	r24, 0x58	; 88
    dcfa:	99 e0       	ldi	r25, 0x09	; 9
    dcfc:	0e 94 5a 89 	call	0x112b4	; 0x112b4 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
  }
  strcpy_P(str1, thermctl_subscribe);
    dd00:	6c e7       	ldi	r22, 0x7C	; 124
    dd02:	78 e5       	ldi	r23, 0x58	; 88
    dd04:	c5 01       	movw	r24, r10
    dd06:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
  if (strcmp(str1, topic) == 0)
    dd0a:	b4 01       	movw	r22, r8
    dd0c:	c5 01       	movw	r24, r10
    dd0e:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    dd12:	89 2b       	or	r24, r25
    dd14:	71 f4       	brne	.+28     	; 0xdd32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
  {
    mqtt_process_message++;
    dd16:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    dd1a:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    dd1e:	01 96       	adiw	r24, 0x01	; 1
    dd20:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    dd24:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    dd28:	61 e0       	ldi	r22, 0x01	; 1
    dd2a:	88 e5       	ldi	r24, 0x58	; 88
    dd2c:	99 e0       	ldi	r25, 0x09	; 9
    dd2e:	0e 94 5a 89 	call	0x112b4	; 0x112b4 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    dd32:	6d ec       	ldi	r22, 0xCD	; 205
    dd34:	78 e5       	ldi	r23, 0x58	; 88
    dd36:	c5 01       	movw	r24, r10
    dd38:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
  strcat_P(str1, global_time_set);
    dd3c:	62 e0       	ldi	r22, 0x02	; 2
    dd3e:	79 e5       	ldi	r23, 0x59	; 89
    dd40:	c5 01       	movw	r24, r10
    dd42:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  if (strcmp(str1, topic) == 0)
    dd46:	b4 01       	movw	r22, r8
    dd48:	c5 01       	movw	r24, r10
    dd4a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    dd4e:	89 2b       	or	r24, r25
    dd50:	09 f0       	breq	.+2      	; 0xdd54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x112>
    dd52:	bc c0       	rjmp	.+376    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  {
    mqtt_process_message++;
    dd54:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    dd58:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    dd5c:	01 96       	adiw	r24, 0x01	; 1
    dd5e:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    dd62:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    dd66:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    dd6a:	81 ef       	ldi	r24, 0xF1	; 241
    dd6c:	9a e0       	ldi	r25, 0x0A	; 10
    dd6e:	c8 57       	subi	r28, 0x78	; 120
    dd70:	df 4f       	sbci	r29, 0xFF	; 255
    dd72:	99 83       	std	Y+1, r25	; 0x01
    dd74:	88 83       	st	Y, r24
    dd76:	c8 58       	subi	r28, 0x88	; 136
    dd78:	d0 40       	sbci	r29, 0x00	; 0
    dd7a:	88 e5       	ldi	r24, 0x58	; 88
    dd7c:	99 e0       	ldi	r25, 0x09	; 9
    dd7e:	c6 57       	subi	r28, 0x76	; 118
    dd80:	df 4f       	sbci	r29, 0xFF	; 255
    dd82:	99 83       	std	Y+1, r25	; 0x01
    dd84:	88 83       	st	Y, r24
    dd86:	ca 58       	subi	r28, 0x8A	; 138
    dd88:	d0 40       	sbci	r29, 0x00	; 0
    dd8a:	c4 57       	subi	r28, 0x74	; 116
    dd8c:	df 4f       	sbci	r29, 0xFF	; 255
    dd8e:	99 83       	std	Y+1, r25	; 0x01
    dd90:	88 83       	st	Y, r24
    dd92:	cc 58       	subi	r28, 0x8C	; 140
    dd94:	d0 40       	sbci	r29, 0x00	; 0
    dd96:	c2 57       	subi	r28, 0x72	; 114
    dd98:	df 4f       	sbci	r29, 0xFF	; 255
    dd9a:	28 83       	st	Y, r18
    dd9c:	ce 58       	subi	r28, 0x8E	; 142
    dd9e:	d0 40       	sbci	r29, 0x00	; 0
    dda0:	c0 57       	subi	r28, 0x70	; 112
    dda2:	df 4f       	sbci	r29, 0xFF	; 255
    dda4:	18 82       	st	Y, r1
    dda6:	c0 59       	subi	r28, 0x90	; 144
    dda8:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    ddaa:	10 92 f8 0a 	sts	0x0AF8, r1	; 0x800af8 <doc+0x8>
    ddae:	10 92 f7 0a 	sts	0x0AF7, r1	; 0x800af7 <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    ddb2:	10 92 fa 0b 	sts	0x0BFA, r1	; 0x800bfa <doc+0x10a>
    ddb6:	10 92 f9 0b 	sts	0x0BF9, r1	; 0x800bf9 <doc+0x109>
    ddba:	41 ef       	ldi	r20, 0xF1	; 241
    ddbc:	5a e0       	ldi	r21, 0x0A	; 10
    ddbe:	69 ef       	ldi	r22, 0xF9	; 249
    ddc0:	7b e0       	ldi	r23, 0x0B	; 11
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    ddc2:	ce 01       	movw	r24, r28
    ddc4:	88 57       	subi	r24, 0x78	; 120
    ddc6:	9f 4f       	sbci	r25, 0xFF	; 255
    ddc8:	0e 94 11 6d 	call	0xda22	; 0xda22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    ddcc:	80 91 f9 0b 	lds	r24, 0x0BF9	; 0x800bf9 <doc+0x109>
    ddd0:	90 91 fa 0b 	lds	r25, 0x0BFA	; 0x800bfa <doc+0x10a>
    ddd4:	71 2c       	mov	r7, r1
    ddd6:	61 2c       	mov	r6, r1
    ddd8:	09 97       	sbiw	r24, 0x09	; 9
    ddda:	21 f4       	brne	.+8      	; 0xdde4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2>
    dddc:	8b ef       	ldi	r24, 0xFB	; 251
    ddde:	68 2e       	mov	r6, r24
    dde0:	8b e0       	ldi	r24, 0x0B	; 11
    dde2:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    dde4:	6f ec       	ldi	r22, 0xCF	; 207
    dde6:	75 e0       	ldi	r23, 0x05	; 5
    dde8:	c3 01       	movw	r24, r6
    ddea:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    ddee:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    ddf0:	89 2b       	or	r24, r25
    ddf2:	09 f4       	brne	.+2      	; 0xddf6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4>
    ddf4:	6b c0       	rjmp	.+214    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ddf6:	64 ed       	ldi	r22, 0xD4	; 212
    ddf8:	75 e0       	ldi	r23, 0x05	; 5
    ddfa:	c3 01       	movw	r24, r6
    ddfc:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    de00:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    de02:	89 2b       	or	r24, r25
    de04:	09 f4       	brne	.+2      	; 0xde08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c6>
    de06:	62 c0       	rjmp	.+196    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    de08:	6a ed       	ldi	r22, 0xDA	; 218
    de0a:	75 e0       	ldi	r23, 0x05	; 5
    de0c:	c3 01       	movw	r24, r6
    de0e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    de12:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    de14:	89 2b       	or	r24, r25
    de16:	09 f4       	brne	.+2      	; 0xde1a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d8>
    de18:	59 c0       	rjmp	.+178    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    de1a:	6f ed       	ldi	r22, 0xDF	; 223
    de1c:	75 e0       	ldi	r23, 0x05	; 5
    de1e:	c3 01       	movw	r24, r6
    de20:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    de24:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    de26:	89 2b       	or	r24, r25
    de28:	09 f4       	brne	.+2      	; 0xde2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
    de2a:	50 c0       	rjmp	.+160    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    de2c:	66 ee       	ldi	r22, 0xE6	; 230
    de2e:	75 e0       	ldi	r23, 0x05	; 5
    de30:	c3 01       	movw	r24, r6
    de32:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    de36:	00 97       	sbiw	r24, 0x00	; 0
    de38:	09 f4       	brne	.+2      	; 0xde3c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1fa>
    de3a:	48 c0       	rjmp	.+144    	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0x28a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    de3c:	0e 94 df 6d 	call	0xdbbe	; 0xdbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    de40:	c8 2e       	mov	r12, r24
    de42:	c8 01       	movw	r24, r16
    de44:	0e 94 df 6d 	call	0xdbbe	; 0xdbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    de48:	d8 2e       	mov	r13, r24
    de4a:	c1 01       	movw	r24, r2
    de4c:	0e 94 df 6d 	call	0xdbbe	; 0xdbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    de50:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    de52:	6d ee       	ldi	r22, 0xED	; 237
    de54:	75 e0       	ldi	r23, 0x05	; 5
    de56:	c3 01       	movw	r24, r6
    de58:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    de5c:	10 e0       	ldi	r17, 0x00	; 0
    de5e:	00 97       	sbiw	r24, 0x00	; 0
    de60:	19 f0       	breq	.+6      	; 0xde68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x226>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    de62:	0e 94 df 6d 	call	0xdbbe	; 0xdbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    de66:	18 2f       	mov	r17, r24
    de68:	c7 01       	movw	r24, r14
    de6a:	0e 94 df 6d 	call	0xdbbe	; 0xdbbe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    de6e:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    de70:	d2 01       	movw	r26, r4
    de72:	8d 91       	ld	r24, X+
    de74:	9c 91       	ld	r25, X
    de76:	11 97       	sbiw	r26, 0x01	; 1
    de78:	87 30       	cpi	r24, 0x07	; 7
    de7a:	91 05       	cpc	r25, r1
    de7c:	48 f4       	brcc	.+18     	; 0xde90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x24e>
    de7e:	85 30       	cpi	r24, 0x05	; 5
    de80:	91 05       	cpc	r25, r1
    de82:	a0 f4       	brcc	.+40     	; 0xdeac <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
    de84:	03 97       	sbiw	r24, 0x03	; 3
    de86:	08 f0       	brcs	.+2      	; 0xde8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
    de88:	ea c0       	rjmp	.+468    	; 0xe05e <mqtt_callback(char*, unsigned char*, unsigned int)+0x41c>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    de8a:	70 e0       	ldi	r23, 0x00	; 0
    de8c:	60 e0       	ldi	r22, 0x00	; 0
    de8e:	11 c0       	rjmp	.+34     	; 0xdeb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    de90:	87 30       	cpi	r24, 0x07	; 7
    de92:	91 05       	cpc	r25, r1
    de94:	09 f4       	brne	.+2      	; 0xde98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x256>
    de96:	dc c0       	rjmp	.+440    	; 0xe050 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40e>
    de98:	0a 97       	sbiw	r24, 0x0a	; 10
    de9a:	b9 f7       	brne	.-18     	; 0xde8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    de9c:	f2 01       	movw	r30, r4
    de9e:	62 81       	ldd	r22, Z+2	; 0x02
    dea0:	73 81       	ldd	r23, Z+3	; 0x03
    dea2:	84 81       	ldd	r24, Z+4	; 0x04
    dea4:	95 81       	ldd	r25, Z+5	; 0x05
    dea6:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
    deaa:	03 c0       	rjmp	.+6      	; 0xdeb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    deac:	f2 01       	movw	r30, r4
    deae:	62 81       	ldd	r22, Z+2	; 0x02
    deb0:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    deb2:	ed 2c       	mov	r14, r13
    deb4:	21 2f       	mov	r18, r17
    deb6:	4f 2d       	mov	r20, r15
    deb8:	ce 01       	movw	r24, r28
    deba:	88 57       	subi	r24, 0x78	; 120
    debc:	9f 4f       	sbci	r25, 0xFF	; 255
    debe:	0e 94 1e cb 	call	0x1963c	; 0x1963c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    dec2:	ce 01       	movw	r24, r28
    dec4:	88 57       	subi	r24, 0x78	; 120
    dec6:	9f 4f       	sbci	r25, 0xFF	; 255
    dec8:	0e 94 45 cb 	call	0x1968a	; 0x1968a <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    decc:	6d ec       	ldi	r22, 0xCD	; 205
    dece:	78 e5       	ldi	r23, 0x58	; 88
    ded0:	c5 01       	movw	r24, r10
    ded2:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
  strcat_P(str1, global_time_ntp);
    ded6:	62 ef       	ldi	r22, 0xF2	; 242
    ded8:	78 e5       	ldi	r23, 0x58	; 88
    deda:	c5 01       	movw	r24, r10
    dedc:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  if (strcmp(str1, topic) == 0)
    dee0:	b4 01       	movw	r22, r8
    dee2:	c5 01       	movw	r24, r10
    dee4:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    dee8:	89 2b       	or	r24, r25
    deea:	d1 f4       	brne	.+52     	; 0xdf20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  {
    mqtt_process_message++;
    deec:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    def0:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    def4:	01 96       	adiw	r24, 0x01	; 1
    def6:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    defa:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    defe:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <time_get_offset()>
    df02:	9e 01       	movw	r18, r28
    df04:	28 53       	subi	r18, 0x38	; 56
    df06:	3f 4f       	sbci	r19, 0xFF	; 255
    df08:	48 2f       	mov	r20, r24
    df0a:	6e e6       	ldi	r22, 0x6E	; 110
    df0c:	70 e1       	ldi	r23, 0x10	; 16
    df0e:	ce 01       	movw	r24, r28
    df10:	01 96       	adiw	r24, 0x01	; 1
    df12:	0e 94 5b 89 	call	0x112b6	; 0x112b6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>
    df16:	81 30       	cpi	r24, 0x01	; 1
    df18:	09 f0       	breq	.+2      	; 0xdf1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x2da>
    df1a:	ce c0       	rjmp	.+412    	; 0xe0b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
      selftest_clear_0(SELFTEST_ERR_NTP);
    df1c:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    df20:	6d ec       	ldi	r22, 0xCD	; 205
    df22:	78 e5       	ldi	r23, 0x58	; 88
    df24:	c5 01       	movw	r24, r10
    df26:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
  strcat_P(str1, global_time_offset);
    df2a:	6b ed       	ldi	r22, 0xDB	; 219
    df2c:	78 e5       	ldi	r23, 0x58	; 88
    df2e:	c5 01       	movw	r24, r10
    df30:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  if (strcmp(str1, topic) == 0)
    df34:	b4 01       	movw	r22, r8
    df36:	c5 01       	movw	r24, r10
    df38:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    df3c:	89 2b       	or	r24, r25
    df3e:	79 f4       	brne	.+30     	; 0xdf5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x31c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  {
    mqtt_process_message++;
    df40:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    df44:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    df48:	01 96       	adiw	r24, 0x01	; 1
    df4a:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    df4e:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
    time_set_offset(atoi(my_payload));
    df52:	88 e5       	ldi	r24, 0x58	; 88
    df54:	99 e0       	ldi	r25, 0x09	; 9
    df56:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    df5a:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    df5e:	6d ec       	ldi	r22, 0xCD	; 205
    df60:	78 e5       	ldi	r23, 0x58	; 88
    df62:	c5 01       	movw	r24, r10
    df64:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  strcat(str1, device.nazev);
    df68:	6e e1       	ldi	r22, 0x1E	; 30
    df6a:	71 e1       	ldi	r23, 0x11	; 17
    df6c:	c5 01       	movw	r24, r10
    df6e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  strcat(str1, "/tds/associate");
    df72:	61 ef       	ldi	r22, 0xF1	; 241
    df74:	75 e0       	ldi	r23, 0x05	; 5
    df76:	c5 01       	movw	r24, r10
    df78:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  if (strcmp(str1, topic) == 0)
    df7c:	b4 01       	movw	r22, r8
    df7e:	c5 01       	movw	r24, r10
    df80:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    df84:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    df86:	89 2b       	or	r24, r25
    df88:	c1 f4       	brne	.+48     	; 0xdfba <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  {
    mqtt_process_message++;
    df8a:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    df8e:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    df92:	01 96       	adiw	r24, 0x01	; 1
    df94:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    df98:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    id = atoi(my_payload);
    df9c:	88 e5       	ldi	r24, 0x58	; 88
    df9e:	99 e0       	ldi	r25, 0x09	; 9
    dfa0:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    dfa4:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
    if (tds_associate(id) == 255)
    dfa6:	0e 94 2b 8d 	call	0x11a56	; 0x11a56 <tds_associate(unsigned char)>
    dfaa:	8f 3f       	cpi	r24, 0xFF	; 255
    dfac:	31 f4       	brne	.+12     	; 0xdfba <mqtt_callback(char*, unsigned char*, unsigned int)+0x378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320
      log_error(&mqtt_client, "tds/associate full or bad id");
    dfae:	60 e0       	ldi	r22, 0x00	; 0
    dfb0:	76 e0       	ldi	r23, 0x06	; 6
    dfb2:	85 e1       	ldi	r24, 0x15	; 21
    dfb4:	9e e0       	ldi	r25, 0x0E	; 14
    dfb6:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    dfba:	6d ec       	ldi	r22, 0xCD	; 205
    dfbc:	78 e5       	ldi	r23, 0x58	; 88
    dfbe:	c5 01       	movw	r24, r10
    dfc0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  strcat(str1, device.nazev);
    dfc4:	6e e1       	ldi	r22, 0x1E	; 30
    dfc6:	71 e1       	ldi	r23, 0x11	; 17
    dfc8:	c5 01       	movw	r24, r10
    dfca:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  strcat(str1, "/tds/set/");
    dfce:	6d e1       	ldi	r22, 0x1D	; 29
    dfd0:	76 e0       	ldi	r23, 0x06	; 6
    dfd2:	c5 01       	movw	r24, r10
    dfd4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dfd8:	f5 01       	movw	r30, r10
    dfda:	01 90       	ld	r0, Z+
    dfdc:	00 20       	and	r0, r0
    dfde:	e9 f7       	brne	.-6      	; 0xdfda <mqtt_callback(char*, unsigned char*, unsigned int)+0x398>
    dfe0:	31 97       	sbiw	r30, 0x01	; 1
    dfe2:	af 01       	movw	r20, r30
    dfe4:	4a 19       	sub	r20, r10
    dfe6:	5b 09       	sbc	r21, r11
    dfe8:	b4 01       	movw	r22, r8
    dfea:	c5 01       	movw	r24, r10
    dfec:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    dff0:	89 2b       	or	r24, r25
    dff2:	09 f0       	breq	.+2      	; 0xdff6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b4>
    dff4:	b6 c0       	rjmp	.+364    	; 0xe162 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
  {
    mqtt_process_message++;
    dff6:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    dffa:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    dffe:	01 96       	adiw	r24, 0x01	; 1
    e000:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e004:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e008:	f5 01       	movw	r30, r10
    e00a:	01 90       	ld	r0, Z+
    e00c:	00 20       	and	r0, r0
    e00e:	e9 f7       	brne	.-6      	; 0xe00a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c8>
    e010:	31 97       	sbiw	r30, 0x01	; 1
    e012:	ea 19       	sub	r30, r10
    e014:	fb 09       	sbc	r31, r11
    e016:	9e 2f       	mov	r25, r30
    e018:	4e 2f       	mov	r20, r30
    e01a:	84 2f       	mov	r24, r20
    e01c:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333 (discriminator 3)
    e01e:	24 2f       	mov	r18, r20
    e020:	30 e0       	ldi	r19, 0x00	; 0
    e022:	d4 01       	movw	r26, r8
    e024:	0d 90       	ld	r0, X+
    e026:	00 20       	and	r0, r0
    e028:	e9 f7       	brne	.-6      	; 0xe024 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e2>
    e02a:	11 97       	sbiw	r26, 0x01	; 1
    e02c:	a8 19       	sub	r26, r8
    e02e:	b9 09       	sbc	r27, r9
    e030:	2a 17       	cp	r18, r26
    e032:	3b 07       	cpc	r19, r27
    e034:	08 f0       	brcs	.+2      	; 0xe038 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f6>
    e036:	44 c0       	rjmp	.+136    	; 0xe0c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e038:	d5 01       	movw	r26, r10
    e03a:	a8 0f       	add	r26, r24
    e03c:	b1 1d       	adc	r27, r1
    e03e:	28 0d       	add	r18, r8
    e040:	39 1d       	adc	r19, r9
    e042:	f9 01       	movw	r30, r18
    e044:	80 81       	ld	r24, Z
    e046:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336 (discriminator 2)
      str1[cnt + 1] = 0;
    e048:	11 96       	adiw	r26, 0x01	; 1
    e04a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e04c:	4f 5f       	subi	r20, 0xFF	; 255
    e04e:	e5 cf       	rjmp	.-54     	; 0xe01a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3d8>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    e050:	12 96       	adiw	r26, 0x02	; 2
    e052:	6d 91       	ld	r22, X+
    e054:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e056:	71 95       	neg	r23
    e058:	61 95       	neg	r22
    e05a:	71 09       	sbc	r23, r1
    e05c:	2a cf       	rjmp	.-428    	; 0xdeb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    e05e:	12 96       	adiw	r26, 0x02	; 2
    e060:	ed 91       	ld	r30, X+
    e062:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e064:	30 97       	sbiw	r30, 0x00	; 0
    e066:	09 f4       	brne	.+2      	; 0xe06a <mqtt_callback(char*, unsigned char*, unsigned int)+0x428>
    e068:	10 cf       	rjmp	.-480    	; 0xde8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x248>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    e06a:	80 81       	ld	r24, Z
    e06c:	61 e0       	ldi	r22, 0x01	; 1
    e06e:	70 e0       	ldi	r23, 0x00	; 0
    e070:	84 37       	cpi	r24, 0x74	; 116
    e072:	09 f4       	brne	.+2      	; 0xe076 <mqtt_callback(char*, unsigned char*, unsigned int)+0x434>
    e074:	1e cf       	rjmp	.-452    	; 0xdeb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e076:	8b 32       	cpi	r24, 0x2B	; 43
    e078:	c9 f0       	breq	.+50     	; 0xe0ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
    e07a:	8d 32       	cpi	r24, 0x2D	; 45
    e07c:	c1 f4       	brne	.+48     	; 0xe0ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x46c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    e07e:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    e080:	81 e0       	ldi	r24, 0x01	; 1
    e082:	70 e0       	ldi	r23, 0x00	; 0
    e084:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    e086:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    e088:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e08a:	20 ed       	ldi	r18, 0xD0	; 208
    e08c:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e08e:	2a 30       	cpi	r18, 0x0A	; 10
    e090:	80 f4       	brcc	.+32     	; 0xe0b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x470>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e092:	46 9f       	mul	r20, r22
    e094:	90 01       	movw	r18, r0
    e096:	47 9f       	mul	r20, r23
    e098:	30 0d       	add	r19, r0
    e09a:	11 24       	eor	r1, r1
    e09c:	b9 01       	movw	r22, r18
    e09e:	60 53       	subi	r22, 0x30	; 48
    e0a0:	71 09       	sbc	r23, r1
    e0a2:	69 0f       	add	r22, r25
    e0a4:	71 1d       	adc	r23, r1
    e0a6:	97 fd       	sbrc	r25, 7
    e0a8:	7a 95       	dec	r23
    e0aa:	ee cf       	rjmp	.-36     	; 0xe088 <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e0ac:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e0ae:	80 e0       	ldi	r24, 0x00	; 0
    e0b0:	e8 cf       	rjmp	.-48     	; 0xe082 <mqtt_callback(char*, unsigned char*, unsigned int)+0x440>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e0b2:	81 11       	cpse	r24, r1
    e0b4:	d0 cf       	rjmp	.-96     	; 0xe056 <mqtt_callback(char*, unsigned char*, unsigned int)+0x414>
    e0b6:	fd ce       	rjmp	.-518    	; 0xdeb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x270>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    e0b8:	81 e0       	ldi	r24, 0x01	; 1
    e0ba:	0e 94 77 4d 	call	0x9aee	; 0x9aee <selftest_set_0(unsigned char)>
    e0be:	30 cf       	rjmp	.-416    	; 0xdf20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2340
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e0c0:	69 e7       	ldi	r22, 0x79	; 121
    e0c2:	73 e0       	ldi	r23, 0x03	; 3
    e0c4:	c5 01       	movw	r24, r10
    e0c6:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e0ca:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e0cc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
    pch = strtok (str1, "/");
    while (pch != NULL)
    e0ce:	e1 14       	cp	r14, r1
    e0d0:	f1 04       	cpc	r15, r1
    e0d2:	09 f4       	brne	.+2      	; 0xe0d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
    e0d4:	46 c0       	rjmp	.+140    	; 0xe162 <mqtt_callback(char*, unsigned char*, unsigned int)+0x520>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
    {
      if (cnt == 0) id = atoi(pch);
    e0d6:	01 11       	cpse	r16, r1
    e0d8:	0d c0       	rjmp	.+26     	; 0xe0f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343 (discriminator 1)
    e0da:	c7 01       	movw	r24, r14
    e0dc:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e0e0:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
    e0e2:	86 30       	cpi	r24, 0x06	; 6
    e0e4:	a8 f1       	brcs	.+106    	; 0xe150 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    e0e6:	6e e5       	ldi	r22, 0x5E	; 94
    e0e8:	76 e0       	ldi	r23, 0x06	; 6
    e0ea:	85 e1       	ldi	r24, 0x15	; 21
    e0ec:	9e e0       	ldi	r25, 0x0E	; 14
    e0ee:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e0f2:	2e c0       	rjmp	.+92     	; 0xe150 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    e0f4:	16 30       	cpi	r17, 0x06	; 6
    e0f6:	b8 f7       	brcc	.-18     	; 0xe0e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    e0f8:	01 30       	cpi	r16, 0x01	; 1
    e0fa:	51 f5       	brne	.+84     	; 0xe150 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346 (discriminator 1)
    e0fc:	69 eb       	ldi	r22, 0xB9	; 185
    e0fe:	73 e0       	ldi	r23, 0x03	; 3
    e100:	c7 01       	movw	r24, r14
    e102:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e106:	89 2b       	or	r24, r25
    e108:	29 f4       	brne	.+10     	; 0xe114 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346 (discriminator 2)
    e10a:	68 e5       	ldi	r22, 0x58	; 88
    e10c:	79 e0       	ldi	r23, 0x09	; 9
    e10e:	81 2f       	mov	r24, r17
    e110:	0e 94 a9 8b 	call	0x11752	; 0x11752 <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    e114:	6c ee       	ldi	r22, 0xEC	; 236
    e116:	74 e0       	ldi	r23, 0x04	; 4
    e118:	c7 01       	movw	r24, r14
    e11a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e11e:	89 2b       	or	r24, r25
    e120:	41 f4       	brne	.+16     	; 0xe132 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347 (discriminator 2)
    e122:	88 e5       	ldi	r24, 0x58	; 88
    e124:	99 e0       	ldi	r25, 0x09	; 9
    e126:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e12a:	bc 01       	movw	r22, r24
    e12c:	81 2f       	mov	r24, r17
    e12e:	0e 94 d4 8b 	call	0x117a8	; 0x117a8 <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    e132:	65 ec       	ldi	r22, 0xC5	; 197
    e134:	73 e0       	ldi	r23, 0x03	; 3
    e136:	c7 01       	movw	r24, r14
    e138:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e13c:	89 2b       	or	r24, r25
    e13e:	41 f4       	brne	.+16     	; 0xe150 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348 (discriminator 2)
    e140:	88 e5       	ldi	r24, 0x58	; 88
    e142:	99 e0       	ldi	r25, 0x09	; 9
    e144:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e148:	68 2f       	mov	r22, r24
    e14a:	81 2f       	mov	r24, r17
    e14c:	0e 94 16 8c 	call	0x1182c	; 0x1182c <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    e150:	69 e7       	ldi	r22, 0x79	; 121
    e152:	73 e0       	ldi	r23, 0x03	; 3
    e154:	90 e0       	ldi	r25, 0x00	; 0
    e156:	80 e0       	ldi	r24, 0x00	; 0
    e158:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e15c:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
      cnt++;
    e15e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e160:	b6 cf       	rjmp	.-148    	; 0xe0ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x48c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    e162:	6d ec       	ldi	r22, 0xCD	; 205
    e164:	78 e5       	ldi	r23, 0x58	; 88
    e166:	c5 01       	movw	r24, r10
    e168:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
  strcat(str1, device.nazev);
    e16c:	6e e1       	ldi	r22, 0x1E	; 30
    e16e:	71 e1       	ldi	r23, 0x11	; 17
    e170:	c5 01       	movw	r24, r10
    e172:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
  strcat(str1, "/tds/clear");
    e176:	67 e2       	ldi	r22, 0x27	; 39
    e178:	76 e0       	ldi	r23, 0x06	; 6
    e17a:	c5 01       	movw	r24, r10
    e17c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e180:	f5 01       	movw	r30, r10
    e182:	01 90       	ld	r0, Z+
    e184:	00 20       	and	r0, r0
    e186:	e9 f7       	brne	.-6      	; 0xe182 <mqtt_callback(char*, unsigned char*, unsigned int)+0x540>
    e188:	31 97       	sbiw	r30, 0x01	; 1
    e18a:	af 01       	movw	r20, r30
    e18c:	4a 19       	sub	r20, r10
    e18e:	5b 09       	sbc	r21, r11
    e190:	b4 01       	movw	r22, r8
    e192:	c5 01       	movw	r24, r10
    e194:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e198:	89 2b       	or	r24, r25
    e19a:	99 f4       	brne	.+38     	; 0xe1c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
  {
    mqtt_process_message++;
    e19c:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e1a0:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e1a4:	01 96       	adiw	r24, 0x01	; 1
    e1a6:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e1aa:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2366
    id = atoi(my_payload);
    e1ae:	88 e5       	ldi	r24, 0x58	; 88
    e1b0:	99 e0       	ldi	r25, 0x09	; 9
    e1b2:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e1b6:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
    if (id < HW_ONEWIRE_MAXROMS)
    e1b8:	86 30       	cpi	r24, 0x06	; 6
    e1ba:	08 f0       	brcs	.+2      	; 0xe1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x57c>
    e1bc:	83 c0       	rjmp	.+262    	; 0xe2c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x682>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
      tds_set_clear(id);
    e1be:	0e 94 b0 8c 	call	0x11960	; 0x11960 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    e1c2:	6d ec       	ldi	r22, 0xCD	; 205
    e1c4:	78 e5       	ldi	r23, 0x58	; 88
    e1c6:	c5 01       	movw	r24, r10
    e1c8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
  strcat(str1, device.nazev);
    e1cc:	6e e1       	ldi	r22, 0x1E	; 30
    e1ce:	71 e1       	ldi	r23, 0x11	; 17
    e1d0:	c5 01       	movw	r24, r10
    e1d2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  strcat(str1, "/rtds/register");
    e1d6:	63 e4       	ldi	r22, 0x43	; 67
    e1d8:	76 e0       	ldi	r23, 0x06	; 6
    e1da:	c5 01       	movw	r24, r10
    e1dc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e1e0:	f5 01       	movw	r30, r10
    e1e2:	01 90       	ld	r0, Z+
    e1e4:	00 20       	and	r0, r0
    e1e6:	e9 f7       	brne	.-6      	; 0xe1e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5a0>
    e1e8:	31 97       	sbiw	r30, 0x01	; 1
    e1ea:	af 01       	movw	r20, r30
    e1ec:	4a 19       	sub	r20, r10
    e1ee:	5b 09       	sbc	r21, r11
    e1f0:	b4 01       	movw	r22, r8
    e1f2:	c5 01       	movw	r24, r10
    e1f4:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e1f8:	89 2b       	or	r24, r25
    e1fa:	d1 f4       	brne	.+52     	; 0xe230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
  {
    mqtt_process_message++;
    e1fc:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e200:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e204:	01 96       	adiw	r24, 0x01	; 1
    e206:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e20a:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    if (remote_tds_name_exist(my_payload) == 255)
    e20e:	88 e5       	ldi	r24, 0x58	; 88
    e210:	99 e0       	ldi	r25, 0x09	; 9
    e212:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <remote_tds_name_exist(char*)>
    e216:	8f 3f       	cpi	r24, 0xFF	; 255
    e218:	59 f4       	brne	.+22     	; 0xe230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    {
      id = remote_tds_find_free();
    e21a:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <remote_tds_find_free()>
    e21e:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      remote_tds_set_complete(id, 1, my_payload);
    e220:	48 e5       	ldi	r20, 0x58	; 88
    e222:	59 e0       	ldi	r21, 0x09	; 9
    e224:	61 e0       	ldi	r22, 0x01	; 1
    e226:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
      remote_tds_subscibe_topic(id);
    e22a:	81 2f       	mov	r24, r17
    e22c:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    e230:	6d ec       	ldi	r22, 0xCD	; 205
    e232:	78 e5       	ldi	r23, 0x58	; 88
    e234:	c5 01       	movw	r24, r10
    e236:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2394
  strcat(str1, device.nazev);
    e23a:	6e e1       	ldi	r22, 0x1E	; 30
    e23c:	71 e1       	ldi	r23, 0x11	; 17
    e23e:	c5 01       	movw	r24, r10
    e240:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
  strcat(str1, "/rtds/set/");
    e244:	62 e5       	ldi	r22, 0x52	; 82
    e246:	76 e0       	ldi	r23, 0x06	; 6
    e248:	c5 01       	movw	r24, r10
    e24a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e24e:	f5 01       	movw	r30, r10
    e250:	01 90       	ld	r0, Z+
    e252:	00 20       	and	r0, r0
    e254:	e9 f7       	brne	.-6      	; 0xe250 <mqtt_callback(char*, unsigned char*, unsigned int)+0x60e>
    e256:	31 97       	sbiw	r30, 0x01	; 1
    e258:	af 01       	movw	r20, r30
    e25a:	4a 19       	sub	r20, r10
    e25c:	5b 09       	sbc	r21, r11
    e25e:	b4 01       	movw	r22, r8
    e260:	c5 01       	movw	r24, r10
    e262:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e266:	89 2b       	or	r24, r25
    e268:	09 f0       	breq	.+2      	; 0xe26c <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
    e26a:	6e c0       	rjmp	.+220    	; 0xe348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
  {
    mqtt_process_message++;
    e26c:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e270:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e274:	01 96       	adiw	r24, 0x01	; 1
    e276:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e27a:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e27e:	f5 01       	movw	r30, r10
    e280:	01 90       	ld	r0, Z+
    e282:	00 20       	and	r0, r0
    e284:	e9 f7       	brne	.-6      	; 0xe280 <mqtt_callback(char*, unsigned char*, unsigned int)+0x63e>
    e286:	31 97       	sbiw	r30, 0x01	; 1
    e288:	ea 19       	sub	r30, r10
    e28a:	fb 09       	sbc	r31, r11
    e28c:	9e 2f       	mov	r25, r30
    e28e:	4e 2f       	mov	r20, r30
    e290:	84 2f       	mov	r24, r20
    e292:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400 (discriminator 3)
    e294:	24 2f       	mov	r18, r20
    e296:	30 e0       	ldi	r19, 0x00	; 0
    e298:	d4 01       	movw	r26, r8
    e29a:	0d 90       	ld	r0, X+
    e29c:	00 20       	and	r0, r0
    e29e:	e9 f7       	brne	.-6      	; 0xe29a <mqtt_callback(char*, unsigned char*, unsigned int)+0x658>
    e2a0:	11 97       	sbiw	r26, 0x01	; 1
    e2a2:	a8 19       	sub	r26, r8
    e2a4:	b9 09       	sbc	r27, r9
    e2a6:	2a 17       	cp	r18, r26
    e2a8:	3b 07       	cpc	r19, r27
    e2aa:	98 f4       	brcc	.+38     	; 0xe2d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x690>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e2ac:	d5 01       	movw	r26, r10
    e2ae:	a8 0f       	add	r26, r24
    e2b0:	b1 1d       	adc	r27, r1
    e2b2:	28 0d       	add	r18, r8
    e2b4:	39 1d       	adc	r19, r9
    e2b6:	f9 01       	movw	r30, r18
    e2b8:	80 81       	ld	r24, Z
    e2ba:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403 (discriminator 2)
      str1[cnt + 1] = 0;
    e2bc:	11 96       	adiw	r26, 0x01	; 1
    e2be:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400 (discriminator 2)
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e2c0:	4f 5f       	subi	r20, 0xFF	; 255
    e2c2:	e6 cf       	rjmp	.-52     	; 0xe290 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    e2c4:	62 e3       	ldi	r22, 0x32	; 50
    e2c6:	76 e0       	ldi	r23, 0x06	; 6
    e2c8:	85 e1       	ldi	r24, 0x15	; 21
    e2ca:	9e e0       	ldi	r25, 0x0E	; 14
    e2cc:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e2d0:	78 cf       	rjmp	.-272    	; 0xe1c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x580>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2407
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e2d2:	69 e7       	ldi	r22, 0x79	; 121
    e2d4:	73 e0       	ldi	r23, 0x03	; 3
    e2d6:	c5 01       	movw	r24, r10
    e2d8:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e2dc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
    pch = strtok (str1, "/");
    while (pch != NULL)
    e2de:	00 97       	sbiw	r24, 0x00	; 0
    e2e0:	99 f1       	breq	.+102    	; 0xe348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
    {
      if (cnt == 0) id = atoi(pch);
    e2e2:	01 11       	cpse	r16, r1
    e2e4:	0b c0       	rjmp	.+22     	; 0xe2fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410 (discriminator 1)
    e2e6:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e2ea:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    e2ec:	69 e7       	ldi	r22, 0x79	; 121
    e2ee:	73 e0       	ldi	r23, 0x03	; 3
    e2f0:	90 e0       	ldi	r25, 0x00	; 0
    e2f2:	80 e0       	ldi	r24, 0x00	; 0
    e2f4:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
      cnt++;
    e2f8:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e2fa:	f1 cf       	rjmp	.-30     	; 0xe2de <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    e2fc:	01 30       	cpi	r16, 0x01	; 1
    e2fe:	b1 f7       	brne	.-20     	; 0xe2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411 (discriminator 1)
    e300:	69 eb       	ldi	r22, 0xB9	; 185
    e302:	73 e0       	ldi	r23, 0x03	; 3
    e304:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e308:	89 2b       	or	r24, r25
    e30a:	81 f7       	brne	.-32     	; 0xe2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
      {
        remote_tds_get_active(id, &active);
    e30c:	be 01       	movw	r22, r28
    e30e:	61 53       	subi	r22, 0x31	; 49
    e310:	7f 4f       	sbci	r23, 0xFF	; 255
    e312:	81 2f       	mov	r24, r17
    e314:	0e 94 39 44 	call	0x8872	; 0x8872 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
        if (active == 0)
    e318:	c1 53       	subi	r28, 0x31	; 49
    e31a:	df 4f       	sbci	r29, 0xFF	; 255
    e31c:	88 81       	ld	r24, Y
    e31e:	cf 5c       	subi	r28, 0xCF	; 207
    e320:	d0 40       	sbci	r29, 0x00	; 0
    e322:	81 11       	cpse	r24, r1
    e324:	0a c0       	rjmp	.+20     	; 0xe33a <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
        {
          remote_tds_set_complete(id, 1, my_payload);
    e326:	48 e5       	ldi	r20, 0x58	; 88
    e328:	59 e0       	ldi	r21, 0x09	; 9
    e32a:	61 e0       	ldi	r22, 0x01	; 1
    e32c:	81 2f       	mov	r24, r17
    e32e:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
          remote_tds_subscibe_topic(id);
    e332:	81 2f       	mov	r24, r17
    e334:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <remote_tds_subscibe_topic(unsigned char)>
    e338:	d9 cf       	rjmp	.-78     	; 0xe2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    e33a:	6d e5       	ldi	r22, 0x5D	; 93
    e33c:	76 e0       	ldi	r23, 0x06	; 6
    e33e:	85 e1       	ldi	r24, 0x15	; 21
    e340:	9e e0       	ldi	r25, 0x0E	; 14
    e342:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e346:	d2 cf       	rjmp	.-92     	; 0xe2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x6aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    e348:	6d ec       	ldi	r22, 0xCD	; 205
    e34a:	78 e5       	ldi	r23, 0x58	; 88
    e34c:	c5 01       	movw	r24, r10
    e34e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2432
  strcat(str1, device.nazev);
    e352:	6e e1       	ldi	r22, 0x1E	; 30
    e354:	71 e1       	ldi	r23, 0x11	; 17
    e356:	c5 01       	movw	r24, r10
    e358:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
  strcat(str1, "/rtds/clear");
    e35c:	6d e6       	ldi	r22, 0x6D	; 109
    e35e:	76 e0       	ldi	r23, 0x06	; 6
    e360:	c5 01       	movw	r24, r10
    e362:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e366:	f5 01       	movw	r30, r10
    e368:	01 90       	ld	r0, Z+
    e36a:	00 20       	and	r0, r0
    e36c:	e9 f7       	brne	.-6      	; 0xe368 <mqtt_callback(char*, unsigned char*, unsigned int)+0x726>
    e36e:	31 97       	sbiw	r30, 0x01	; 1
    e370:	af 01       	movw	r20, r30
    e372:	4a 19       	sub	r20, r10
    e374:	5b 09       	sbc	r21, r11
    e376:	b4 01       	movw	r22, r8
    e378:	c5 01       	movw	r24, r10
    e37a:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e37e:	89 2b       	or	r24, r25
    e380:	99 f4       	brne	.+38     	; 0xe3a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  {
    mqtt_process_message++;
    e382:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e386:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e38a:	01 96       	adiw	r24, 0x01	; 1
    e38c:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e390:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
    id = atoi(my_payload);
    e394:	88 e5       	ldi	r24, 0x58	; 88
    e396:	99 e0       	ldi	r25, 0x09	; 9
    e398:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e39c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
    remote_tds_unsubscibe_topic(id);
    e39e:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    e3a2:	81 2f       	mov	r24, r17
    e3a4:	0e 94 29 45 	call	0x8a52	; 0x8a52 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    e3a8:	6d ec       	ldi	r22, 0xCD	; 205
    e3aa:	78 e5       	ldi	r23, 0x58	; 88
    e3ac:	c5 01       	movw	r24, r10
    e3ae:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  strcat(str1, device.nazev);
    e3b2:	6e e1       	ldi	r22, 0x1E	; 30
    e3b4:	71 e1       	ldi	r23, 0x11	; 17
    e3b6:	c5 01       	movw	r24, r10
    e3b8:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  strcat(str1, "/rtds/get");
    e3bc:	69 e7       	ldi	r22, 0x79	; 121
    e3be:	76 e0       	ldi	r23, 0x06	; 6
    e3c0:	c5 01       	movw	r24, r10
    e3c2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e3c6:	f5 01       	movw	r30, r10
    e3c8:	01 90       	ld	r0, Z+
    e3ca:	00 20       	and	r0, r0
    e3cc:	e9 f7       	brne	.-6      	; 0xe3c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x786>
    e3ce:	31 97       	sbiw	r30, 0x01	; 1
    e3d0:	af 01       	movw	r20, r30
    e3d2:	4a 19       	sub	r20, r10
    e3d4:	5b 09       	sbc	r21, r11
    e3d6:	b4 01       	movw	r22, r8
    e3d8:	c5 01       	movw	r24, r10
    e3da:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e3de:	89 2b       	or	r24, r25
    e3e0:	11 f4       	brne	.+4      	; 0xe3e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
  {
    send_mqtt_remote_tds_status();
    e3e2:	0e 94 4f 4c 	call	0x989e	; 0x989e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    e3e6:	64 e7       	ldi	r22, 0x74	; 116
    e3e8:	73 e0       	ldi	r23, 0x03	; 3
    e3ea:	c5 01       	movw	r24, r10
    e3ec:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e3f0:	f5 01       	movw	r30, r10
    e3f2:	01 90       	ld	r0, Z+
    e3f4:	00 20       	and	r0, r0
    e3f6:	e9 f7       	brne	.-6      	; 0xe3f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b0>
    e3f8:	31 97       	sbiw	r30, 0x01	; 1
    e3fa:	af 01       	movw	r20, r30
    e3fc:	4a 19       	sub	r20, r10
    e3fe:	5b 09       	sbc	r21, r11
    e400:	b4 01       	movw	r22, r8
    e402:	c5 01       	movw	r24, r10
    e404:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e408:	89 2b       	or	r24, r25
    e40a:	09 f0       	breq	.+2      	; 0xe40e <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
    e40c:	55 c0       	rjmp	.+170    	; 0xe4b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x876>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456
  {
    mqtt_process_message++;
    e40e:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e412:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e416:	01 96       	adiw	r24, 0x01	; 1
    e418:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e41c:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e420:	f5 01       	movw	r30, r10
    e422:	01 90       	ld	r0, Z+
    e424:	00 20       	and	r0, r0
    e426:	e9 f7       	brne	.-6      	; 0xe422 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e0>
    e428:	31 97       	sbiw	r30, 0x01	; 1
    e42a:	ea 19       	sub	r30, r10
    e42c:	fb 09       	sbc	r31, r11
    e42e:	9e 2f       	mov	r25, r30
    e430:	4e 2f       	mov	r20, r30
    e432:	84 2f       	mov	r24, r20
    e434:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458 (discriminator 3)
    e436:	24 2f       	mov	r18, r20
    e438:	30 e0       	ldi	r19, 0x00	; 0
    e43a:	d4 01       	movw	r26, r8
    e43c:	0d 90       	ld	r0, X+
    e43e:	00 20       	and	r0, r0
    e440:	e9 f7       	brne	.-6      	; 0xe43c <mqtt_callback(char*, unsigned char*, unsigned int)+0x7fa>
    e442:	11 97       	sbiw	r26, 0x01	; 1
    e444:	a8 19       	sub	r26, r8
    e446:	b9 09       	sbc	r27, r9
    e448:	2a 17       	cp	r18, r26
    e44a:	3b 07       	cpc	r19, r27
    e44c:	60 f4       	brcc	.+24     	; 0xe466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x824>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e44e:	d5 01       	movw	r26, r10
    e450:	a8 0f       	add	r26, r24
    e452:	b1 1d       	adc	r27, r1
    e454:	28 0d       	add	r18, r8
    e456:	39 1d       	adc	r19, r9
    e458:	f9 01       	movw	r30, r18
    e45a:	80 81       	ld	r24, Z
    e45c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2461 (discriminator 2)
      str1[cnt + 1] = 0;
    e45e:	11 96       	adiw	r26, 0x01	; 1
    e460:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458 (discriminator 2)
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e462:	4f 5f       	subi	r20, 0xFF	; 255
    e464:	e6 cf       	rjmp	.-52     	; 0xe432 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e466:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
    {
      uint8_t active = 0;
    e468:	c8 57       	subi	r28, 0x78	; 120
    e46a:	df 4f       	sbci	r29, 0xFF	; 255
    e46c:	18 82       	st	Y, r1
    e46e:	c8 58       	subi	r28, 0x88	; 136
    e470:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
      remote_tds_get_complete(idx, &active, tmp1);
    e472:	ae 01       	movw	r20, r28
    e474:	48 55       	subi	r20, 0x58	; 88
    e476:	5f 4f       	sbci	r21, 0xFF	; 255
    e478:	be 01       	movw	r22, r28
    e47a:	68 57       	subi	r22, 0x78	; 120
    e47c:	7f 4f       	sbci	r23, 0xFF	; 255
    e47e:	80 2f       	mov	r24, r16
    e480:	0e 94 a3 43 	call	0x8746	; 0x8746 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
      if (active == 1 && strcmp(tmp1, str1) == 0)
    e484:	c8 57       	subi	r28, 0x78	; 120
    e486:	df 4f       	sbci	r29, 0xFF	; 255
    e488:	88 81       	ld	r24, Y
    e48a:	c8 58       	subi	r28, 0x88	; 136
    e48c:	d0 40       	sbci	r29, 0x00	; 0
    e48e:	81 30       	cpi	r24, 0x01	; 1
    e490:	81 f4       	brne	.+32     	; 0xe4b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x870>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468 (discriminator 1)
    e492:	b5 01       	movw	r22, r10
    e494:	ce 01       	movw	r24, r28
    e496:	88 55       	subi	r24, 0x58	; 88
    e498:	9f 4f       	sbci	r25, 0xFF	; 255
    e49a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e49e:	89 2b       	or	r24, r25
    e4a0:	41 f4       	brne	.+16     	; 0xe4b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x870>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
      {
        remote_tds_set_data(idx, atoi(my_payload));
    e4a2:	88 e5       	ldi	r24, 0x58	; 88
    e4a4:	99 e0       	ldi	r25, 0x09	; 9
    e4a6:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e4aa:	bc 01       	movw	r22, r24
    e4ac:	80 2f       	mov	r24, r16
    e4ae:	0e 94 9b 46 	call	0x8d36	; 0x8d36 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464 (discriminator 2)
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e4b2:	0f 5f       	subi	r16, 0xFF	; 255
    e4b4:	0a 30       	cpi	r16, 0x0A	; 10
    e4b6:	c1 f6       	brne	.-80     	; 0xe468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x826>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    e4b8:	63 e8       	ldi	r22, 0x83	; 131
    e4ba:	76 e0       	ldi	r23, 0x06	; 6
    e4bc:	c5 01       	movw	r24, r10
    e4be:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    e4c2:	6d ec       	ldi	r22, 0xCD	; 205
    e4c4:	78 e5       	ldi	r23, 0x58	; 88
    e4c6:	c5 01       	movw	r24, r10
    e4c8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
  strcat(str1, device.nazev);
    e4cc:	6e e1       	ldi	r22, 0x1E	; 30
    e4ce:	71 e1       	ldi	r23, 0x11	; 17
    e4d0:	c5 01       	movw	r24, r10
    e4d2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
  strcat(str1, "/prog/set/");
    e4d6:	6e e8       	ldi	r22, 0x8E	; 142
    e4d8:	76 e0       	ldi	r23, 0x06	; 6
    e4da:	c5 01       	movw	r24, r10
    e4dc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e4e0:	f5 01       	movw	r30, r10
    e4e2:	01 90       	ld	r0, Z+
    e4e4:	00 20       	and	r0, r0
    e4e6:	e9 f7       	brne	.-6      	; 0xe4e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a0>
    e4e8:	31 97       	sbiw	r30, 0x01	; 1
    e4ea:	af 01       	movw	r20, r30
    e4ec:	4a 19       	sub	r20, r10
    e4ee:	5b 09       	sbc	r21, r11
    e4f0:	b4 01       	movw	r22, r8
    e4f2:	c5 01       	movw	r24, r10
    e4f4:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e4f8:	89 2b       	or	r24, r25
    e4fa:	09 f0       	breq	.+2      	; 0xe4fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x8bc>
    e4fc:	45 c0       	rjmp	.+138    	; 0xe588 <mqtt_callback(char*, unsigned char*, unsigned int)+0x946>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  {
    mqtt_process_message++;
    e4fe:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e502:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e506:	01 96       	adiw	r24, 0x01	; 1
    e508:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e50c:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e510:	f5 01       	movw	r30, r10
    e512:	01 90       	ld	r0, Z+
    e514:	00 20       	and	r0, r0
    e516:	e9 f7       	brne	.-6      	; 0xe512 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
    e518:	31 97       	sbiw	r30, 0x01	; 1
    e51a:	ea 19       	sub	r30, r10
    e51c:	fb 09       	sbc	r31, r11
    e51e:	9e 2f       	mov	r25, r30
    e520:	4e 2f       	mov	r20, r30
    e522:	84 2f       	mov	r24, r20
    e524:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496 (discriminator 3)
    e526:	24 2f       	mov	r18, r20
    e528:	30 e0       	ldi	r19, 0x00	; 0
    e52a:	d4 01       	movw	r26, r8
    e52c:	0d 90       	ld	r0, X+
    e52e:	00 20       	and	r0, r0
    e530:	e9 f7       	brne	.-6      	; 0xe52c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ea>
    e532:	11 97       	sbiw	r26, 0x01	; 1
    e534:	a8 19       	sub	r26, r8
    e536:	b9 09       	sbc	r27, r9
    e538:	2a 17       	cp	r18, r26
    e53a:	3b 07       	cpc	r19, r27
    e53c:	60 f4       	brcc	.+24     	; 0xe556 <mqtt_callback(char*, unsigned char*, unsigned int)+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e53e:	d5 01       	movw	r26, r10
    e540:	a8 0f       	add	r26, r24
    e542:	b1 1d       	adc	r27, r1
    e544:	28 0d       	add	r18, r8
    e546:	39 1d       	adc	r19, r9
    e548:	f9 01       	movw	r30, r18
    e54a:	80 81       	ld	r24, Z
    e54c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499 (discriminator 2)
      str1[cnt + 1] = 0;
    e54e:	11 96       	adiw	r26, 0x01	; 1
    e550:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e552:	4f 5f       	subi	r20, 0xFF	; 255
    e554:	e6 cf       	rjmp	.-52     	; 0xe522 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e556:	69 e7       	ldi	r22, 0x79	; 121
    e558:	73 e0       	ldi	r23, 0x03	; 3
    e55a:	c5 01       	movw	r24, r10
    e55c:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e560:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e562:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
    pch = strtok (str1, "/");
    while (pch != NULL)
    e564:	e1 14       	cp	r14, r1
    e566:	f1 04       	cpc	r15, r1
    e568:	79 f0       	breq	.+30     	; 0xe588 <mqtt_callback(char*, unsigned char*, unsigned int)+0x946>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
    {
      if (cnt == 0) id = atoi(pch);
    e56a:	01 11       	cpse	r16, r1
    e56c:	bc c0       	rjmp	.+376    	; 0xe6e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506 (discriminator 1)
    e56e:	c7 01       	movw	r24, r14
    e570:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e574:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
    e576:	88 30       	cpi	r24, 0x08	; 8
    e578:	08 f4       	brcc	.+2      	; 0xe57c <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
    e57a:	d5 c0       	rjmp	.+426    	; 0xe726 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    e57c:	69 e9       	ldi	r22, 0x99	; 153
    e57e:	76 e0       	ldi	r23, 0x06	; 6
    e580:	85 e1       	ldi	r24, 0x15	; 21
    e582:	9e e0       	ldi	r25, 0x0E	; 14
    e584:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    e588:	6d ec       	ldi	r22, 0xCD	; 205
    e58a:	78 e5       	ldi	r23, 0x58	; 88
    e58c:	c5 01       	movw	r24, r10
    e58e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
  strcat(str1, device.nazev);
    e592:	6e e1       	ldi	r22, 0x1E	; 30
    e594:	71 e1       	ldi	r23, 0x11	; 17
    e596:	c5 01       	movw	r24, r10
    e598:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
  strcat(str1, "/prog/clear");
    e59c:	69 ea       	ldi	r22, 0xA9	; 169
    e59e:	76 e0       	ldi	r23, 0x06	; 6
    e5a0:	c5 01       	movw	r24, r10
    e5a2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e5a6:	f5 01       	movw	r30, r10
    e5a8:	01 90       	ld	r0, Z+
    e5aa:	00 20       	and	r0, r0
    e5ac:	e9 f7       	brne	.-6      	; 0xe5a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x966>
    e5ae:	31 97       	sbiw	r30, 0x01	; 1
    e5b0:	af 01       	movw	r20, r30
    e5b2:	4a 19       	sub	r20, r10
    e5b4:	5b 09       	sbc	r21, r11
    e5b6:	b4 01       	movw	r22, r8
    e5b8:	c5 01       	movw	r24, r10
    e5ba:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e5be:	89 2b       	or	r24, r25
    e5c0:	09 f0       	breq	.+2      	; 0xe5c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x982>
    e5c2:	47 c0       	rjmp	.+142    	; 0xe652 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
  {
    mqtt_process_message++;
    e5c4:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e5c8:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e5cc:	01 96       	adiw	r24, 0x01	; 1
    e5ce:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e5d2:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
    id = atoi(my_payload);
    e5d6:	88 e5       	ldi	r24, 0x58	; 88
    e5d8:	99 e0       	ldi	r25, 0x09	; 9
    e5da:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e5de:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
    if (id < AVAILABLE_PROGRAM)
    e5e0:	88 30       	cpi	r24, 0x08	; 8
    e5e2:	08 f0       	brcs	.+2      	; 0xe5e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9a4>
    e5e4:	a9 c0       	rjmp	.+338    	; 0xe738 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
    {
      strcpy_P(tmp2, text_prog);
    e5e6:	68 e6       	ldi	r22, 0x68	; 104
    e5e8:	79 e5       	ldi	r23, 0x59	; 89
    e5ea:	ce 01       	movw	r24, r28
    e5ec:	88 57       	subi	r24, 0x78	; 120
    e5ee:	9f 4f       	sbci	r25, 0xFF	; 255
    e5f0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
      thermostat_program_set_name(id, tmp2);
    e5f4:	be 01       	movw	r22, r28
    e5f6:	68 57       	subi	r22, 0x78	; 120
    e5f8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5fa:	81 2f       	mov	r24, r17
    e5fc:	0e 94 6a 92 	call	0x124d4	; 0x124d4 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
      thermostat_program_set_active(id, PROG_FREE);
    e600:	6f ef       	ldi	r22, 0xFF	; 255
    e602:	81 2f       	mov	r24, r17
    e604:	0e 94 9a 92 	call	0x12534	; 0x12534 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    e608:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    e60a:	c1 2c       	mov	r12, r1
    e60c:	e1 2c       	mov	r14, r1
    e60e:	00 e0       	ldi	r16, 0x00	; 0
    e610:	20 e0       	ldi	r18, 0x00	; 0
    e612:	40 e0       	ldi	r20, 0x00	; 0
    e614:	6f 2d       	mov	r22, r15
    e616:	81 2f       	mov	r24, r17
    e618:	0e 94 f5 92 	call	0x125ea	; 0x125ea <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2537 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
    e61c:	4c ed       	ldi	r20, 0xDC	; 220
    e61e:	50 e0       	ldi	r21, 0x00	; 0
    e620:	6f 2d       	mov	r22, r15
    e622:	81 2f       	mov	r24, r17
    e624:	0e 94 53 93 	call	0x126a6	; 0x126a6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
    e628:	40 e0       	ldi	r20, 0x00	; 0
    e62a:	6f 2d       	mov	r22, r15
    e62c:	81 2f       	mov	r24, r17
    e62e:	0e 94 7c 93 	call	0x126f8	; 0x126f8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    e632:	f3 94       	inc	r15
    e634:	fb e0       	ldi	r31, 0x0B	; 11
    e636:	ff 12       	cpse	r15, r31
    e638:	e8 cf       	rjmp	.-48     	; 0xe60a <mqtt_callback(char*, unsigned char*, unsigned int)+0x9c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    e63a:	80 2f       	mov	r24, r16
    e63c:	0e 94 93 90 	call	0x12126	; 0x12126 <thermostat_ring_get_program_id(unsigned char)>
    e640:	81 13       	cpse	r24, r17
    e642:	04 c0       	rjmp	.+8      	; 0xe64c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    e644:	6f ef       	ldi	r22, 0xFF	; 255
    e646:	80 2f       	mov	r24, r16
    e648:	0e 94 9b 90 	call	0x12136	; 0x12136 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    e64c:	0f 5f       	subi	r16, 0xFF	; 255
    e64e:	05 30       	cpi	r16, 0x05	; 5
    e650:	a1 f7       	brne	.-24     	; 0xe63a <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    e652:	6d ec       	ldi	r22, 0xCD	; 205
    e654:	78 e5       	ldi	r23, 0x58	; 88
    e656:	c5 01       	movw	r24, r10
    e658:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2555
  strcat(str1, device.nazev);
    e65c:	6e e1       	ldi	r22, 0x1E	; 30
    e65e:	71 e1       	ldi	r23, 0x11	; 17
    e660:	c5 01       	movw	r24, r10
    e662:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
  strcat(str1, "/prog_interval/set/");
    e666:	67 ec       	ldi	r22, 0xC7	; 199
    e668:	76 e0       	ldi	r23, 0x06	; 6
    e66a:	c5 01       	movw	r24, r10
    e66c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e670:	f5 01       	movw	r30, r10
    e672:	01 90       	ld	r0, Z+
    e674:	00 20       	and	r0, r0
    e676:	e9 f7       	brne	.-6      	; 0xe672 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa30>
    e678:	31 97       	sbiw	r30, 0x01	; 1
    e67a:	af 01       	movw	r20, r30
    e67c:	4a 19       	sub	r20, r10
    e67e:	5b 09       	sbc	r21, r11
    e680:	b4 01       	movw	r22, r8
    e682:	c5 01       	movw	r24, r10
    e684:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e688:	89 2b       	or	r24, r25
    e68a:	09 f0       	breq	.+2      	; 0xe68e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4c>
    e68c:	bb c0       	rjmp	.+374    	; 0xe804 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
  {
    mqtt_process_message++;
    e68e:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e692:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e696:	01 96       	adiw	r24, 0x01	; 1
    e698:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e69c:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6a0:	f5 01       	movw	r30, r10
    e6a2:	01 90       	ld	r0, Z+
    e6a4:	00 20       	and	r0, r0
    e6a6:	e9 f7       	brne	.-6      	; 0xe6a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa60>
    e6a8:	31 97       	sbiw	r30, 0x01	; 1
    e6aa:	ea 19       	sub	r30, r10
    e6ac:	fb 09       	sbc	r31, r11
    e6ae:	9e 2f       	mov	r25, r30
    e6b0:	4e 2f       	mov	r20, r30
    e6b2:	84 2f       	mov	r24, r20
    e6b4:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561 (discriminator 3)
    e6b6:	24 2f       	mov	r18, r20
    e6b8:	30 e0       	ldi	r19, 0x00	; 0
    e6ba:	d4 01       	movw	r26, r8
    e6bc:	0d 90       	ld	r0, X+
    e6be:	00 20       	and	r0, r0
    e6c0:	e9 f7       	brne	.-6      	; 0xe6bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xa7a>
    e6c2:	11 97       	sbiw	r26, 0x01	; 1
    e6c4:	a8 19       	sub	r26, r8
    e6c6:	b9 09       	sbc	r27, r9
    e6c8:	2a 17       	cp	r18, r26
    e6ca:	3b 07       	cpc	r19, r27
    e6cc:	e0 f5       	brcc	.+120    	; 0xe746 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e6ce:	d5 01       	movw	r26, r10
    e6d0:	a8 0f       	add	r26, r24
    e6d2:	b1 1d       	adc	r27, r1
    e6d4:	28 0d       	add	r18, r8
    e6d6:	39 1d       	adc	r19, r9
    e6d8:	f9 01       	movw	r30, r18
    e6da:	80 81       	ld	r24, Z
    e6dc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564 (discriminator 2)
      str1[cnt + 1] = 0;
    e6de:	11 96       	adiw	r26, 0x01	; 1
    e6e0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6e2:	4f 5f       	subi	r20, 0xFF	; 255
    e6e4:	e6 cf       	rjmp	.-52     	; 0xe6b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    e6e6:	18 30       	cpi	r17, 0x08	; 8
    e6e8:	08 f0       	brcs	.+2      	; 0xe6ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xaaa>
    e6ea:	48 cf       	rjmp	.-368    	; 0xe57c <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    e6ec:	01 30       	cpi	r16, 0x01	; 1
    e6ee:	d9 f4       	brne	.+54     	; 0xe726 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509 (discriminator 1)
    e6f0:	69 eb       	ldi	r22, 0xB9	; 185
    e6f2:	73 e0       	ldi	r23, 0x03	; 3
    e6f4:	c7 01       	movw	r24, r14
    e6f6:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e6fa:	89 2b       	or	r24, r25
    e6fc:	29 f4       	brne	.+10     	; 0xe708 <mqtt_callback(char*, unsigned char*, unsigned int)+0xac6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509 (discriminator 2)
    e6fe:	68 e5       	ldi	r22, 0x58	; 88
    e700:	79 e0       	ldi	r23, 0x09	; 9
    e702:	81 2f       	mov	r24, r17
    e704:	0e 94 6a 92 	call	0x124d4	; 0x124d4 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    e708:	6a ed       	ldi	r22, 0xDA	; 218
    e70a:	73 e0       	ldi	r23, 0x03	; 3
    e70c:	c7 01       	movw	r24, r14
    e70e:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e712:	89 2b       	or	r24, r25
    e714:	41 f4       	brne	.+16     	; 0xe726 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510 (discriminator 2)
    e716:	88 e5       	ldi	r24, 0x58	; 88
    e718:	99 e0       	ldi	r25, 0x09	; 9
    e71a:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e71e:	68 2f       	mov	r22, r24
    e720:	81 2f       	mov	r24, r17
    e722:	0e 94 9a 92 	call	0x12534	; 0x12534 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    e726:	69 e7       	ldi	r22, 0x79	; 121
    e728:	73 e0       	ldi	r23, 0x03	; 3
    e72a:	90 e0       	ldi	r25, 0x00	; 0
    e72c:	80 e0       	ldi	r24, 0x00	; 0
    e72e:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e732:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
      cnt++;
    e734:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e736:	16 cf       	rjmp	.-468    	; 0xe564 <mqtt_callback(char*, unsigned char*, unsigned int)+0x922>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    e738:	65 eb       	ldi	r22, 0xB5	; 181
    e73a:	76 e0       	ldi	r23, 0x06	; 6
    e73c:	85 e1       	ldi	r24, 0x15	; 21
    e73e:	9e e0       	ldi	r25, 0x0E	; 14
    e740:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e744:	86 cf       	rjmp	.-244    	; 0xe652 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e746:	69 e7       	ldi	r22, 0x79	; 121
    e748:	73 e0       	ldi	r23, 0x03	; 3
    e74a:	c5 01       	movw	r24, r10
    e74c:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e750:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    e752:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e754:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
    pch = strtok (str1, "/");
    while (pch != NULL)
    e756:	e1 14       	cp	r14, r1
    e758:	f1 04       	cpc	r15, r1
    e75a:	09 f4       	brne	.+2      	; 0xe75e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1c>
    e75c:	53 c0       	rjmp	.+166    	; 0xe804 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
    {
      if (cnt == 0) id = atoi(pch);
    e75e:	01 11       	cpse	r16, r1
    e760:	43 c0       	rjmp	.+134    	; 0xe7e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571 (discriminator 1)
    e762:	c7 01       	movw	r24, r14
    e764:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e768:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    e76a:	18 30       	cpi	r17, 0x08	; 8
    e76c:	08 f0       	brcs	.+2      	; 0xe770 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb2e>
    e76e:	44 c0       	rjmp	.+136    	; 0xe7f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573 (discriminator 1)
    e770:	fa e0       	ldi	r31, 0x0A	; 10
    e772:	fd 15       	cp	r31, r13
    e774:	08 f4       	brcc	.+2      	; 0xe778 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb36>
    e776:	40 c0       	rjmp	.+128    	; 0xe7f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    e778:	02 30       	cpi	r16, 0x02	; 2
    e77a:	69 f5       	brne	.+90     	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575 (discriminator 1)
    e77c:	6a ed       	ldi	r22, 0xDA	; 218
    e77e:	73 e0       	ldi	r23, 0x03	; 3
    e780:	c7 01       	movw	r24, r14
    e782:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e786:	89 2b       	or	r24, r25
    e788:	49 f4       	brne	.+18     	; 0xe79c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575 (discriminator 2)
    e78a:	88 e5       	ldi	r24, 0x58	; 88
    e78c:	99 e0       	ldi	r25, 0x09	; 9
    e78e:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e792:	48 2f       	mov	r20, r24
    e794:	6d 2d       	mov	r22, r13
    e796:	81 2f       	mov	r24, r17
    e798:	0e 94 ee 93 	call	0x127dc	; 0x127dc <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    e79c:	61 ef       	ldi	r22, 0xF1	; 241
    e79e:	73 e0       	ldi	r23, 0x03	; 3
    e7a0:	c7 01       	movw	r24, r14
    e7a2:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e7a6:	89 2b       	or	r24, r25
    e7a8:	49 f4       	brne	.+18     	; 0xe7bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576 (discriminator 2)
    e7aa:	88 e5       	ldi	r24, 0x58	; 88
    e7ac:	99 e0       	ldi	r25, 0x09	; 9
    e7ae:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e7b2:	ac 01       	movw	r20, r24
    e7b4:	6d 2d       	mov	r22, r13
    e7b6:	81 2f       	mov	r24, r17
    e7b8:	0e 94 53 93 	call	0x126a6	; 0x126a6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    e7bc:	69 ed       	ldi	r22, 0xD9	; 217
    e7be:	77 e0       	ldi	r23, 0x07	; 7
    e7c0:	c7 01       	movw	r24, r14
    e7c2:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e7c6:	89 2b       	or	r24, r25
    e7c8:	31 f4       	brne	.+12     	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577 (discriminator 2)
    e7ca:	48 e5       	ldi	r20, 0x58	; 88
    e7cc:	59 e0       	ldi	r21, 0x09	; 9
    e7ce:	6d 2d       	mov	r22, r13
    e7d0:	81 2f       	mov	r24, r17
    e7d2:	0e 94 8a 93 	call	0x12714	; 0x12714 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    e7d6:	69 e7       	ldi	r22, 0x79	; 121
    e7d8:	73 e0       	ldi	r23, 0x03	; 3
    e7da:	90 e0       	ldi	r25, 0x00	; 0
    e7dc:	80 e0       	ldi	r24, 0x00	; 0
    e7de:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e7e2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
      cnt++;
    e7e4:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e7e6:	b7 cf       	rjmp	.-146    	; 0xe756 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2572
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    e7e8:	01 30       	cpi	r16, 0x01	; 1
    e7ea:	09 f0       	breq	.+2      	; 0xe7ee <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
    e7ec:	be cf       	rjmp	.-132    	; 0xe76a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2572 (discriminator 1)
    e7ee:	c7 01       	movw	r24, r14
    e7f0:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e7f4:	d8 2e       	mov	r13, r24
    e7f6:	b9 cf       	rjmp	.-142    	; 0xe76a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    e7f8:	6b ed       	ldi	r22, 0xDB	; 219
    e7fa:	76 e0       	ldi	r23, 0x06	; 6
    e7fc:	85 e1       	ldi	r24, 0x15	; 21
    e7fe:	9e e0       	ldi	r25, 0x0E	; 14
    e800:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    e804:	6d ec       	ldi	r22, 0xCD	; 205
    e806:	78 e5       	ldi	r23, 0x58	; 88
    e808:	c5 01       	movw	r24, r10
    e80a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
  strcat(str1, device.nazev);
    e80e:	6e e1       	ldi	r22, 0x1E	; 30
    e810:	71 e1       	ldi	r23, 0x11	; 17
    e812:	c5 01       	movw	r24, r10
    e814:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
  strcat(str1, "/ring/default");
    e818:	64 ef       	ldi	r22, 0xF4	; 244
    e81a:	76 e0       	ldi	r23, 0x06	; 6
    e81c:	c5 01       	movw	r24, r10
    e81e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
  if (strcmp(str1, topic) == 0)
    e822:	b4 01       	movw	r22, r8
    e824:	c5 01       	movw	r24, r10
    e826:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e82a:	89 2b       	or	r24, r25
    e82c:	89 f4       	brne	.+34     	; 0xe850 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
  {
    mqtt_process_message++;
    e82e:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    e832:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    e836:	01 96       	adiw	r24, 0x01	; 1
    e838:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    e83c:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
    default_ring = atoi(my_payload);
    e840:	88 e5       	ldi	r24, 0x58	; 88
    e842:	99 e0       	ldi	r25, 0x09	; 9
    e844:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e848:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
    set_default_ring(default_ring);
    e84c:	0e 94 57 48 	call	0x90ae	; 0x90ae <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    e850:	6d ec       	ldi	r22, 0xCD	; 205
    e852:	78 e5       	ldi	r23, 0x58	; 88
    e854:	c5 01       	movw	r24, r10
    e856:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
  strcat(str1, device.nazev);
    e85a:	6e e1       	ldi	r22, 0x1E	; 30
    e85c:	71 e1       	ldi	r23, 0x11	; 17
    e85e:	c5 01       	movw	r24, r10
    e860:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
  strcat(str1, "/ring/get/");
    e864:	62 e0       	ldi	r22, 0x02	; 2
    e866:	77 e0       	ldi	r23, 0x07	; 7
    e868:	c5 01       	movw	r24, r10
    e86a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e86e:	f5 01       	movw	r30, r10
    e870:	01 90       	ld	r0, Z+
    e872:	00 20       	and	r0, r0
    e874:	e9 f7       	brne	.-6      	; 0xe870 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc2e>
    e876:	31 97       	sbiw	r30, 0x01	; 1
    e878:	7f 01       	movw	r14, r30
    e87a:	ea 18       	sub	r14, r10
    e87c:	fb 08       	sbc	r15, r11
    e87e:	a7 01       	movw	r20, r14
    e880:	b4 01       	movw	r22, r8
    e882:	c5 01       	movw	r24, r10
    e884:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e888:	89 2b       	or	r24, r25
    e88a:	09 f0       	breq	.+2      	; 0xe88e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc4c>
    e88c:	47 c0       	rjmp	.+142    	; 0xe91c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e88e:	9e 2d       	mov	r25, r14
    e890:	8e 2d       	mov	r24, r14
    e892:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607 (discriminator 3)
    e894:	2e 2d       	mov	r18, r14
    e896:	30 e0       	ldi	r19, 0x00	; 0
    e898:	f4 01       	movw	r30, r8
    e89a:	01 90       	ld	r0, Z+
    e89c:	00 20       	and	r0, r0
    e89e:	e9 f7       	brne	.-6      	; 0xe89a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
    e8a0:	31 97       	sbiw	r30, 0x01	; 1
    e8a2:	e8 19       	sub	r30, r8
    e8a4:	f9 09       	sbc	r31, r9
    e8a6:	2e 17       	cp	r18, r30
    e8a8:	3f 07       	cpc	r19, r31
    e8aa:	58 f4       	brcc	.+22     	; 0xe8c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e8ac:	f5 01       	movw	r30, r10
    e8ae:	e8 0f       	add	r30, r24
    e8b0:	f1 1d       	adc	r31, r1
    e8b2:	28 0d       	add	r18, r8
    e8b4:	39 1d       	adc	r19, r9
    e8b6:	d9 01       	movw	r26, r18
    e8b8:	8c 91       	ld	r24, X
    e8ba:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2610 (discriminator 2)
      str1[cnt + 1] = 0;
    e8bc:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e8be:	e3 94       	inc	r14
    e8c0:	e7 cf       	rjmp	.-50     	; 0xe890 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e8c2:	69 e7       	ldi	r22, 0x79	; 121
    e8c4:	73 e0       	ldi	r23, 0x03	; 3
    e8c6:	c5 01       	movw	r24, r10
    e8c8:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2613
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e8cc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
    pch = strtok (str1, "/");
    while (pch != NULL)
    e8ce:	00 97       	sbiw	r24, 0x00	; 0
    e8d0:	29 f1       	breq	.+74     	; 0xe91c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    {
      if (cnt == 0) id = atoi(my_payload);
    e8d2:	01 11       	cpse	r16, r1
    e8d4:	0e c0       	rjmp	.+28     	; 0xe8f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617 (discriminator 1)
    e8d6:	88 e5       	ldi	r24, 0x58	; 88
    e8d8:	99 e0       	ldi	r25, 0x09	; 9
    e8da:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e8de:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    e8e0:	85 30       	cpi	r24, 0x05	; 5
    e8e2:	a0 f0       	brcs	.+40     	; 0xe90c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    e8e4:	6d e0       	ldi	r22, 0x0D	; 13
    e8e6:	77 e0       	ldi	r23, 0x07	; 7
    e8e8:	85 e1       	ldi	r24, 0x15	; 21
    e8ea:	9e e0       	ldi	r25, 0x0E	; 14
    e8ec:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e8f0:	0d c0       	rjmp	.+26     	; 0xe90c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    e8f2:	15 30       	cpi	r17, 0x05	; 5
    e8f4:	b8 f7       	brcc	.-18     	; 0xe8e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xca2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    e8f6:	01 30       	cpi	r16, 0x01	; 1
    e8f8:	49 f4       	brne	.+18     	; 0xe90c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620 (discriminator 1)
    e8fa:	60 e0       	ldi	r22, 0x00	; 0
    e8fc:	74 e0       	ldi	r23, 0x04	; 4
    e8fe:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e902:	89 2b       	or	r24, r25
    e904:	19 f4       	brne	.+6      	; 0xe90c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620 (discriminator 2)
    e906:	81 2f       	mov	r24, r17
    e908:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    e90c:	69 e7       	ldi	r22, 0x79	; 121
    e90e:	73 e0       	ldi	r23, 0x03	; 3
    e910:	90 e0       	ldi	r25, 0x00	; 0
    e912:	80 e0       	ldi	r24, 0x00	; 0
    e914:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
      cnt++;
    e918:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e91a:	d9 cf       	rjmp	.-78     	; 0xe8ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    e91c:	6d ec       	ldi	r22, 0xCD	; 205
    e91e:	78 e5       	ldi	r23, 0x58	; 88
    e920:	c5 01       	movw	r24, r10
    e922:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
  strcat(str1, device.nazev);
    e926:	6e e1       	ldi	r22, 0x1E	; 30
    e928:	71 e1       	ldi	r23, 0x11	; 17
    e92a:	c5 01       	movw	r24, r10
    e92c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
  strcat(str1, "/ring/set/");
    e930:	6d e1       	ldi	r22, 0x1D	; 29
    e932:	77 e0       	ldi	r23, 0x07	; 7
    e934:	c5 01       	movw	r24, r10
    e936:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e93a:	f5 01       	movw	r30, r10
    e93c:	01 90       	ld	r0, Z+
    e93e:	00 20       	and	r0, r0
    e940:	e9 f7       	brne	.-6      	; 0xe93c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcfa>
    e942:	31 97       	sbiw	r30, 0x01	; 1
    e944:	7f 01       	movw	r14, r30
    e946:	ea 18       	sub	r14, r10
    e948:	fb 08       	sbc	r15, r11
    e94a:	a7 01       	movw	r20, r14
    e94c:	b4 01       	movw	r22, r8
    e94e:	c5 01       	movw	r24, r10
    e950:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    e954:	89 2b       	or	r24, r25
    e956:	09 f0       	breq	.+2      	; 0xe95a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd18>
    e958:	4a c1       	rjmp	.+660    	; 0xebee <mqtt_callback(char*, unsigned char*, unsigned int)+0xfac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e95a:	9e 2d       	mov	r25, r14
    e95c:	8e 2d       	mov	r24, r14
    e95e:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652 (discriminator 3)
    e960:	2e 2d       	mov	r18, r14
    e962:	30 e0       	ldi	r19, 0x00	; 0
    e964:	f4 01       	movw	r30, r8
    e966:	01 90       	ld	r0, Z+
    e968:	00 20       	and	r0, r0
    e96a:	e9 f7       	brne	.-6      	; 0xe966 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd24>
    e96c:	31 97       	sbiw	r30, 0x01	; 1
    e96e:	e8 19       	sub	r30, r8
    e970:	f9 09       	sbc	r31, r9
    e972:	2e 17       	cp	r18, r30
    e974:	3f 07       	cpc	r19, r31
    e976:	58 f4       	brcc	.+22     	; 0xe98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e978:	f5 01       	movw	r30, r10
    e97a:	e8 0f       	add	r30, r24
    e97c:	f1 1d       	adc	r31, r1
    e97e:	28 0d       	add	r18, r8
    e980:	39 1d       	adc	r19, r9
    e982:	d9 01       	movw	r26, r18
    e984:	8c 91       	ld	r24, X
    e986:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655 (discriminator 2)
      str1[cnt + 1] = 0;
    e988:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e98a:	e3 94       	inc	r14
    e98c:	e7 cf       	rjmp	.-50     	; 0xe95c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e98e:	69 e7       	ldi	r22, 0x79	; 121
    e990:	73 e0       	ldi	r23, 0x03	; 3
    e992:	c5 01       	movw	r24, r10
    e994:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    e998:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e99a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
    pch = strtok (str1, "/");
    while (pch != NULL)
    e99c:	e1 14       	cp	r14, r1
    e99e:	f1 04       	cpc	r15, r1
    e9a0:	09 f4       	brne	.+2      	; 0xe9a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    e9a2:	25 c1       	rjmp	.+586    	; 0xebee <mqtt_callback(char*, unsigned char*, unsigned int)+0xfac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
    {
      if (cnt == 0) id = atoi(pch);
    e9a4:	01 11       	cpse	r16, r1
    e9a6:	0e c0       	rjmp	.+28     	; 0xe9c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662 (discriminator 1)
    e9a8:	c7 01       	movw	r24, r14
    e9aa:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e9ae:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    e9b0:	85 30       	cpi	r24, 0x05	; 5
    e9b2:	08 f4       	brcc	.+2      	; 0xe9b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd74>
    e9b4:	13 c1       	rjmp	.+550    	; 0xebdc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    e9b6:	6d e0       	ldi	r22, 0x0D	; 13
    e9b8:	77 e0       	ldi	r23, 0x07	; 7
    e9ba:	85 e1       	ldi	r24, 0x15	; 21
    e9bc:	9e e0       	ldi	r25, 0x0E	; 14
    e9be:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    e9c2:	0c c1       	rjmp	.+536    	; 0xebdc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    e9c4:	15 30       	cpi	r17, 0x05	; 5
    e9c6:	b8 f7       	brcc	.-18     	; 0xe9b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    e9c8:	01 30       	cpi	r16, 0x01	; 1
    e9ca:	09 f0       	breq	.+2      	; 0xe9ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8c>
    e9cc:	07 c1       	rjmp	.+526    	; 0xebdc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665 (discriminator 1)
    e9ce:	69 eb       	ldi	r22, 0xB9	; 185
    e9d0:	73 e0       	ldi	r23, 0x03	; 3
    e9d2:	c7 01       	movw	r24, r14
    e9d4:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e9d8:	89 2b       	or	r24, r25
    e9da:	29 f4       	brne	.+10     	; 0xe9e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xda4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665 (discriminator 2)
    e9dc:	68 e5       	ldi	r22, 0x58	; 88
    e9de:	79 e0       	ldi	r23, 0x09	; 9
    e9e0:	81 2f       	mov	r24, r17
    e9e2:	0e 94 4c 90 	call	0x12098	; 0x12098 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    e9e6:	62 e6       	ldi	r22, 0x62	; 98
    e9e8:	75 e0       	ldi	r23, 0x05	; 5
    e9ea:	c7 01       	movw	r24, r14
    e9ec:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    e9f0:	89 2b       	or	r24, r25
    e9f2:	59 f4       	brne	.+22     	; 0xea0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xdc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    e9f4:	88 e5       	ldi	r24, 0x58	; 88
    e9f6:	99 e0       	ldi	r25, 0x09	; 9
    e9f8:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    e9fc:	88 30       	cpi	r24, 0x08	; 8
    e9fe:	91 05       	cpc	r25, r1
    ea00:	24 f4       	brge	.+8      	; 0xea0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xdc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
            thermostat_ring_set_program_id(id, atoi(my_payload));
    ea02:	68 2f       	mov	r22, r24
    ea04:	81 2f       	mov	r24, r17
    ea06:	0e 94 9b 90 	call	0x12136	; 0x12136 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    ea0a:	64 eb       	ldi	r22, 0xB4	; 180
    ea0c:	77 e0       	ldi	r23, 0x07	; 7
    ea0e:	c7 01       	movw	r24, r14
    ea10:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ea14:	89 2b       	or	r24, r25
    ea16:	79 f4       	brne	.+30     	; 0xea36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669 (discriminator 2)
    ea18:	88 e5       	ldi	r24, 0x58	; 88
    ea1a:	99 e0       	ldi	r25, 0x09	; 9
    ea1c:	0e 94 54 e0 	call	0x1c0a8	; 0x1c0a8 <atof>
    ea20:	20 e0       	ldi	r18, 0x00	; 0
    ea22:	30 e0       	ldi	r19, 0x00	; 0
    ea24:	40 e2       	ldi	r20, 0x20	; 32
    ea26:	51 e4       	ldi	r21, 0x41	; 65
    ea28:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
    ea2c:	0e 94 27 db 	call	0x1b64e	; 0x1b64e <__fixsfsi>
    ea30:	81 2f       	mov	r24, r17
    ea32:	0e 94 c0 90 	call	0x12180	; 0x12180 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    ea36:	61 ef       	ldi	r22, 0xF1	; 241
    ea38:	73 e0       	ldi	r23, 0x03	; 3
    ea3a:	c7 01       	movw	r24, r14
    ea3c:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ea40:	89 2b       	or	r24, r25
    ea42:	41 f4       	brne	.+16     	; 0xea54 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670 (discriminator 2)
    ea44:	88 e5       	ldi	r24, 0x58	; 88
    ea46:	99 e0       	ldi	r25, 0x09	; 9
    ea48:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    ea4c:	bc 01       	movw	r22, r24
    ea4e:	81 2f       	mov	r24, r17
    ea50:	0e 94 c0 90 	call	0x12180	; 0x12180 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    ea54:	6a e6       	ldi	r22, 0x6A	; 106
    ea56:	75 e0       	ldi	r23, 0x05	; 5
    ea58:	c7 01       	movw	r24, r14
    ea5a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ea5e:	89 2b       	or	r24, r25
    ea60:	29 f5       	brne	.+74     	; 0xeaac <mqtt_callback(char*, unsigned char*, unsigned int)+0xe6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
        {
          active = convert_text_mode(my_payload);
    ea62:	88 e5       	ldi	r24, 0x58	; 88
    ea64:	99 e0       	ldi	r25, 0x09	; 9
    ea66:	0e 94 26 50 	call	0xa04c	; 0xa04c <convert_text_mode(char*)>
    ea6a:	c1 53       	subi	r28, 0x31	; 49
    ea6c:	df 4f       	sbci	r29, 0xFF	; 255
    ea6e:	88 83       	st	Y, r24
    ea70:	cf 5c       	subi	r28, 0xCF	; 207
    ea72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
          thermostat_ring_set_mode(id, active);
    ea74:	68 2f       	mov	r22, r24
    ea76:	81 2f       	mov	r24, r17
    ea78:	0e 94 ef 90 	call	0x121de	; 0x121de <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
          if (active == TERM_MODE_MAN_HEAT)
    ea7c:	c1 53       	subi	r28, 0x31	; 49
    ea7e:	df 4f       	sbci	r29, 0xFF	; 255
    ea80:	88 81       	ld	r24, Y
    ea82:	cf 5c       	subi	r28, 0xCF	; 207
    ea84:	d0 40       	sbci	r29, 0x00	; 0
    ea86:	83 30       	cpi	r24, 0x03	; 3
    ea88:	29 f4       	brne	.+10     	; 0xea94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    ea8a:	40 e0       	ldi	r20, 0x00	; 0
    ea8c:	60 e0       	ldi	r22, 0x00	; 0
    ea8e:	81 2f       	mov	r24, r17
    ea90:	0e 94 11 91 	call	0x12222	; 0x12222 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
          if (active == TERM_MODE_MAN_COOL)
    ea94:	c1 53       	subi	r28, 0x31	; 49
    ea96:	df 4f       	sbci	r29, 0xFF	; 255
    ea98:	88 81       	ld	r24, Y
    ea9a:	cf 5c       	subi	r28, 0xCF	; 207
    ea9c:	d0 40       	sbci	r29, 0x00	; 0
    ea9e:	85 30       	cpi	r24, 0x05	; 5
    eaa0:	29 f4       	brne	.+10     	; 0xeaac <mqtt_callback(char*, unsigned char*, unsigned int)+0xe6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    eaa2:	41 e0       	ldi	r20, 0x01	; 1
    eaa4:	60 e0       	ldi	r22, 0x00	; 0
    eaa6:	81 2f       	mov	r24, r17
    eaa8:	0e 94 11 91 	call	0x12222	; 0x12222 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    eaac:	6f e6       	ldi	r22, 0x6F	; 111
    eaae:	75 e0       	ldi	r23, 0x05	; 5
    eab0:	c7 01       	movw	r24, r14
    eab2:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eab6:	89 2b       	or	r24, r25
    eab8:	29 f5       	brne	.+74     	; 0xeb04 <mqtt_callback(char*, unsigned char*, unsigned int)+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
        {
          active = atoi(my_payload);
    eaba:	88 e5       	ldi	r24, 0x58	; 88
    eabc:	99 e0       	ldi	r25, 0x09	; 9
    eabe:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    eac2:	c1 53       	subi	r28, 0x31	; 49
    eac4:	df 4f       	sbci	r29, 0xFF	; 255
    eac6:	88 83       	st	Y, r24
    eac8:	cf 5c       	subi	r28, 0xCF	; 207
    eaca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
          thermostat_ring_set_mode(id, active);
    eacc:	68 2f       	mov	r22, r24
    eace:	81 2f       	mov	r24, r17
    ead0:	0e 94 ef 90 	call	0x121de	; 0x121de <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
          if (active == TERM_MODE_MAN_HEAT)
    ead4:	c1 53       	subi	r28, 0x31	; 49
    ead6:	df 4f       	sbci	r29, 0xFF	; 255
    ead8:	88 81       	ld	r24, Y
    eada:	cf 5c       	subi	r28, 0xCF	; 207
    eadc:	d0 40       	sbci	r29, 0x00	; 0
    eade:	83 30       	cpi	r24, 0x03	; 3
    eae0:	29 f4       	brne	.+10     	; 0xeaec <mqtt_callback(char*, unsigned char*, unsigned int)+0xeaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    eae2:	40 e0       	ldi	r20, 0x00	; 0
    eae4:	60 e0       	ldi	r22, 0x00	; 0
    eae6:	81 2f       	mov	r24, r17
    eae8:	0e 94 11 91 	call	0x12222	; 0x12222 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
          if (active == TERM_MODE_MAN_COOL)
    eaec:	c1 53       	subi	r28, 0x31	; 49
    eaee:	df 4f       	sbci	r29, 0xFF	; 255
    eaf0:	88 81       	ld	r24, Y
    eaf2:	cf 5c       	subi	r28, 0xCF	; 207
    eaf4:	d0 40       	sbci	r29, 0x00	; 0
    eaf6:	85 30       	cpi	r24, 0x05	; 5
    eaf8:	29 f4       	brne	.+10     	; 0xeb04 <mqtt_callback(char*, unsigned char*, unsigned int)+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    eafa:	41 e0       	ldi	r20, 0x01	; 1
    eafc:	60 e0       	ldi	r22, 0x00	; 0
    eafe:	81 2f       	mov	r24, r17
    eb00:	0e 94 11 91 	call	0x12222	; 0x12222 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    eb04:	6b e7       	ldi	r22, 0x7B	; 123
    eb06:	75 e0       	ldi	r23, 0x05	; 5
    eb08:	c7 01       	movw	r24, r14
    eb0a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eb0e:	89 2b       	or	r24, r25
    eb10:	41 f4       	brne	.+16     	; 0xeb22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xee0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689 (discriminator 2)
    eb12:	88 e5       	ldi	r24, 0x58	; 88
    eb14:	99 e0       	ldi	r25, 0x09	; 9
    eb16:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    eb1a:	68 2f       	mov	r22, r24
    eb1c:	81 2f       	mov	r24, r17
    eb1e:	0e 94 df 90 	call	0x121be	; 0x121be <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    eb22:	6a ed       	ldi	r22, 0xDA	; 218
    eb24:	73 e0       	ldi	r23, 0x03	; 3
    eb26:	c7 01       	movw	r24, r14
    eb28:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eb2c:	89 2b       	or	r24, r25
    eb2e:	41 f4       	brne	.+16     	; 0xeb40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xefe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691 (discriminator 2)
    eb30:	88 e5       	ldi	r24, 0x58	; 88
    eb32:	99 e0       	ldi	r25, 0x09	; 9
    eb34:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    eb38:	68 2f       	mov	r22, r24
    eb3a:	81 2f       	mov	r24, r17
    eb3c:	0e 94 8b 90 	call	0x12116	; 0x12116 <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    eb40:	61 e8       	ldi	r22, 0x81	; 129
    eb42:	75 e0       	ldi	r23, 0x05	; 5
    eb44:	c7 01       	movw	r24, r14
    eb46:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eb4a:	89 2b       	or	r24, r25
    eb4c:	41 f4       	brne	.+16     	; 0xeb5e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692 (discriminator 2)
    eb4e:	88 e5       	ldi	r24, 0x58	; 88
    eb50:	99 e0       	ldi	r25, 0x09	; 9
    eb52:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    eb56:	68 2f       	mov	r22, r24
    eb58:	81 2f       	mov	r24, r17
    eb5a:	0e 94 7b 90 	call	0x120f6	; 0x120f6 <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    eb5e:	60 ec       	ldi	r22, 0xC0	; 192
    eb60:	77 e0       	ldi	r23, 0x07	; 7
    eb62:	c7 01       	movw	r24, r14
    eb64:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eb68:	89 2b       	or	r24, r25
    eb6a:	49 f4       	brne	.+18     	; 0xeb7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693 (discriminator 2)
    eb6c:	88 e5       	ldi	r24, 0x58	; 88
    eb6e:	99 e0       	ldi	r25, 0x09	; 9
    eb70:	0e 94 54 e0 	call	0x1c0a8	; 0x1c0a8 <atof>
    eb74:	ab 01       	movw	r20, r22
    eb76:	bc 01       	movw	r22, r24
    eb78:	81 2f       	mov	r24, r17
    eb7a:	0e 94 00 92 	call	0x12400	; 0x12400 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    eb7e:	67 ec       	ldi	r22, 0xC7	; 199
    eb80:	77 e0       	ldi	r23, 0x07	; 7
    eb82:	c7 01       	movw	r24, r14
    eb84:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eb88:	89 2b       	or	r24, r25
    eb8a:	49 f4       	brne	.+18     	; 0xeb9e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694 (discriminator 2)
    eb8c:	88 e5       	ldi	r24, 0x58	; 88
    eb8e:	99 e0       	ldi	r25, 0x09	; 9
    eb90:	0e 94 54 e0 	call	0x1c0a8	; 0x1c0a8 <atof>
    eb94:	ab 01       	movw	r20, r22
    eb96:	bc 01       	movw	r22, r24
    eb98:	81 2f       	mov	r24, r17
    eb9a:	0e 94 13 92 	call	0x12426	; 0x12426 <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    eb9e:	6e ec       	ldi	r22, 0xCE	; 206
    eba0:	77 e0       	ldi	r23, 0x07	; 7
    eba2:	c7 01       	movw	r24, r14
    eba4:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eba8:	89 2b       	or	r24, r25
    ebaa:	49 f4       	brne	.+18     	; 0xebbe <mqtt_callback(char*, unsigned char*, unsigned int)+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695 (discriminator 2)
    ebac:	88 e5       	ldi	r24, 0x58	; 88
    ebae:	99 e0       	ldi	r25, 0x09	; 9
    ebb0:	0e 94 54 e0 	call	0x1c0a8	; 0x1c0a8 <atof>
    ebb4:	ab 01       	movw	r20, r22
    ebb6:	bc 01       	movw	r22, r24
    ebb8:	81 2f       	mov	r24, r17
    ebba:	0e 94 26 92 	call	0x1244c	; 0x1244c <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    ebbe:	65 ed       	ldi	r22, 0xD5	; 213
    ebc0:	77 e0       	ldi	r23, 0x07	; 7
    ebc2:	c7 01       	movw	r24, r14
    ebc4:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ebc8:	89 2b       	or	r24, r25
    ebca:	41 f4       	brne	.+16     	; 0xebdc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696 (discriminator 2)
    ebcc:	88 e5       	ldi	r24, 0x58	; 88
    ebce:	99 e0       	ldi	r25, 0x09	; 9
    ebd0:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    ebd4:	68 2f       	mov	r22, r24
    ebd6:	81 2f       	mov	r24, r17
    ebd8:	0e 94 39 92 	call	0x12472	; 0x12472 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    ebdc:	69 e7       	ldi	r22, 0x79	; 121
    ebde:	73 e0       	ldi	r23, 0x03	; 3
    ebe0:	90 e0       	ldi	r25, 0x00	; 0
    ebe2:	80 e0       	ldi	r24, 0x00	; 0
    ebe4:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    ebe8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
      cnt++;
    ebea:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ebec:	d7 ce       	rjmp	.-594    	; 0xe99c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    ebee:	6d ec       	ldi	r22, 0xCD	; 205
    ebf0:	78 e5       	ldi	r23, 0x58	; 88
    ebf2:	c5 01       	movw	r24, r10
    ebf4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
  strcat(str1, device.nazev);
    ebf8:	6e e1       	ldi	r22, 0x1E	; 30
    ebfa:	71 e1       	ldi	r23, 0x11	; 17
    ebfc:	c5 01       	movw	r24, r10
    ebfe:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  strcat(str1, "/ring/clear");
    ec02:	68 e2       	ldi	r22, 0x28	; 40
    ec04:	77 e0       	ldi	r23, 0x07	; 7
    ec06:	c5 01       	movw	r24, r10
    ec08:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ec0c:	f5 01       	movw	r30, r10
    ec0e:	01 90       	ld	r0, Z+
    ec10:	00 20       	and	r0, r0
    ec12:	e9 f7       	brne	.-6      	; 0xec0e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfcc>
    ec14:	31 97       	sbiw	r30, 0x01	; 1
    ec16:	af 01       	movw	r20, r30
    ec18:	4a 19       	sub	r20, r10
    ec1a:	5b 09       	sbc	r21, r11
    ec1c:	b4 01       	movw	r22, r8
    ec1e:	c5 01       	movw	r24, r10
    ec20:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    ec24:	89 2b       	or	r24, r25
    ec26:	99 f4       	brne	.+38     	; 0xec4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x100c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  {
    mqtt_process_message++;
    ec28:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    ec2c:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    ec30:	01 96       	adiw	r24, 0x01	; 1
    ec32:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    ec36:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
    id = atoi(my_payload);
    ec3a:	88 e5       	ldi	r24, 0x58	; 88
    ec3c:	99 e0       	ldi	r25, 0x09	; 9
    ec3e:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    ec42:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
    if (id < MAX_THERMOSTAT)
    ec44:	85 30       	cpi	r24, 0x05	; 5
    ec46:	08 f0       	brcs	.+2      	; 0xec4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1008>
    ec48:	76 c0       	rjmp	.+236    	; 0xed36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
    {
      thermostat_ring_clear(id);
    ec4a:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    ec4e:	6d ec       	ldi	r22, 0xCD	; 205
    ec50:	78 e5       	ldi	r23, 0x58	; 88
    ec52:	c5 01       	movw	r24, r10
    ec54:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
  strcat(str1, device.nazev);
    ec58:	6e e1       	ldi	r22, 0x1E	; 30
    ec5a:	71 e1       	ldi	r23, 0x11	; 17
    ec5c:	c5 01       	movw	r24, r10
    ec5e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
  strcat(str1, "/network/get/config");
    ec62:	66 e4       	ldi	r22, 0x46	; 70
    ec64:	77 e0       	ldi	r23, 0x07	; 7
    ec66:	c5 01       	movw	r24, r10
    ec68:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ec6c:	f5 01       	movw	r30, r10
    ec6e:	01 90       	ld	r0, Z+
    ec70:	00 20       	and	r0, r0
    ec72:	e9 f7       	brne	.-6      	; 0xec6e <mqtt_callback(char*, unsigned char*, unsigned int)+0x102c>
    ec74:	31 97       	sbiw	r30, 0x01	; 1
    ec76:	af 01       	movw	r20, r30
    ec78:	4a 19       	sub	r20, r10
    ec7a:	5b 09       	sbc	r21, r11
    ec7c:	b4 01       	movw	r22, r8
    ec7e:	c5 01       	movw	r24, r10
    ec80:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    ec84:	89 2b       	or	r24, r25
    ec86:	69 f4       	brne	.+26     	; 0xeca2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1060>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  {
    mqtt_process_message++;
    ec88:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    ec8c:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    ec90:	01 96       	adiw	r24, 0x01	; 1
    ec92:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    ec96:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
    send_network_config(&mqtt_client);
    ec9a:	85 e1       	ldi	r24, 0x15	; 21
    ec9c:	9e e0       	ldi	r25, 0x0E	; 14
    ec9e:	0e 94 87 87 	call	0x10f0e	; 0x10f0e <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    eca2:	6d ec       	ldi	r22, 0xCD	; 205
    eca4:	78 e5       	ldi	r23, 0x58	; 88
    eca6:	c5 01       	movw	r24, r10
    eca8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
  strcat(str1, device.nazev);
    ecac:	6e e1       	ldi	r22, 0x1E	; 30
    ecae:	71 e1       	ldi	r23, 0x11	; 17
    ecb0:	c5 01       	movw	r24, r10
    ecb2:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
  strcat(str1, "/network/set/");
    ecb6:	6a e5       	ldi	r22, 0x5A	; 90
    ecb8:	77 e0       	ldi	r23, 0x07	; 7
    ecba:	c5 01       	movw	r24, r10
    ecbc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ecc0:	f5 01       	movw	r30, r10
    ecc2:	01 90       	ld	r0, Z+
    ecc4:	00 20       	and	r0, r0
    ecc6:	e9 f7       	brne	.-6      	; 0xecc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1080>
    ecc8:	31 97       	sbiw	r30, 0x01	; 1
    ecca:	af 01       	movw	r20, r30
    eccc:	4a 19       	sub	r20, r10
    ecce:	5b 09       	sbc	r21, r11
    ecd0:	b4 01       	movw	r22, r8
    ecd2:	c5 01       	movw	r24, r10
    ecd4:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    ecd8:	89 2b       	or	r24, r25
    ecda:	09 f0       	breq	.+2      	; 0xecde <mqtt_callback(char*, unsigned char*, unsigned int)+0x109c>
    ecdc:	44 c0       	rjmp	.+136    	; 0xed66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1124>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
  {
    mqtt_process_message++;
    ecde:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    ece2:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    ece6:	01 96       	adiw	r24, 0x01	; 1
    ece8:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    ecec:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ecf0:	f5 01       	movw	r30, r10
    ecf2:	01 90       	ld	r0, Z+
    ecf4:	00 20       	and	r0, r0
    ecf6:	e9 f7       	brne	.-6      	; 0xecf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b0>
    ecf8:	31 97       	sbiw	r30, 0x01	; 1
    ecfa:	ea 19       	sub	r30, r10
    ecfc:	fb 09       	sbc	r31, r11
    ecfe:	9e 2f       	mov	r25, r30
    ed00:	4e 2f       	mov	r20, r30
    ed02:	84 2f       	mov	r24, r20
    ed04:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755 (discriminator 3)
    ed06:	24 2f       	mov	r18, r20
    ed08:	30 e0       	ldi	r19, 0x00	; 0
    ed0a:	d4 01       	movw	r26, r8
    ed0c:	0d 90       	ld	r0, X+
    ed0e:	00 20       	and	r0, r0
    ed10:	e9 f7       	brne	.-6      	; 0xed0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ca>
    ed12:	11 97       	sbiw	r26, 0x01	; 1
    ed14:	a8 19       	sub	r26, r8
    ed16:	b9 09       	sbc	r27, r9
    ed18:	2a 17       	cp	r18, r26
    ed1a:	3b 07       	cpc	r19, r27
    ed1c:	98 f4       	brcc	.+38     	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1102>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ed1e:	d5 01       	movw	r26, r10
    ed20:	a8 0f       	add	r26, r24
    ed22:	b1 1d       	adc	r27, r1
    ed24:	28 0d       	add	r18, r8
    ed26:	39 1d       	adc	r19, r9
    ed28:	f9 01       	movw	r30, r18
    ed2a:	80 81       	ld	r24, Z
    ed2c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758 (discriminator 2)
      str1[cnt + 1] = 0;
    ed2e:	11 96       	adiw	r26, 0x01	; 1
    ed30:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ed32:	4f 5f       	subi	r20, 0xFF	; 255
    ed34:	e6 cf       	rjmp	.-52     	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    ed36:	64 e3       	ldi	r22, 0x34	; 52
    ed38:	77 e0       	ldi	r23, 0x07	; 7
    ed3a:	85 e1       	ldi	r24, 0x15	; 21
    ed3c:	9e e0       	ldi	r25, 0x0E	; 14
    ed3e:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
    ed42:	85 cf       	rjmp	.-246    	; 0xec4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x100c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    ed44:	68 e5       	ldi	r22, 0x58	; 88
    ed46:	79 e0       	ldi	r23, 0x09	; 9
    ed48:	c5 01       	movw	r24, r10
    ed4a:	0e 94 23 85 	call	0x10a46	; 0x10a46 <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2762
    if (cnt == 1)
    ed4e:	81 30       	cpi	r24, 0x01	; 1
    ed50:	41 f4       	brne	.+16     	; 0xed62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1120>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
    {
      save_setup_network();
    ed52:	0e 94 43 84 	call	0x10886	; 0x10886 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    ed56:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
    ed5a:	80 68       	ori	r24, 0x80	; 128
    ed5c:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <selftest_data>
    ed60:	02 c0       	rjmp	.+4      	; 0xed66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1124>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    ed62:	82 30       	cpi	r24, 0x02	; 2
    ed64:	c1 f3       	breq	.-16     	; 0xed56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1114>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    ed66:	6d ec       	ldi	r22, 0xCD	; 205
    ed68:	78 e5       	ldi	r23, 0x58	; 88
    ed6a:	c5 01       	movw	r24, r10
    ed6c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  strcat(str1, device.nazev);
    ed70:	6e e1       	ldi	r22, 0x1E	; 30
    ed72:	71 e1       	ldi	r23, 0x11	; 17
    ed74:	c5 01       	movw	r24, r10
    ed76:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  strcat(str1, "/light/set/");
    ed7a:	68 e6       	ldi	r22, 0x68	; 104
    ed7c:	77 e0       	ldi	r23, 0x07	; 7
    ed7e:	c5 01       	movw	r24, r10
    ed80:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ed84:	f5 01       	movw	r30, r10
    ed86:	01 90       	ld	r0, Z+
    ed88:	00 20       	and	r0, r0
    ed8a:	e9 f7       	brne	.-6      	; 0xed86 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1144>
    ed8c:	31 97       	sbiw	r30, 0x01	; 1
    ed8e:	af 01       	movw	r20, r30
    ed90:	4a 19       	sub	r20, r10
    ed92:	5b 09       	sbc	r21, r11
    ed94:	b4 01       	movw	r22, r8
    ed96:	c5 01       	movw	r24, r10
    ed98:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    ed9c:	89 2b       	or	r24, r25
    ed9e:	09 f0       	breq	.+2      	; 0xeda2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1160>
    eda0:	41 c0       	rjmp	.+130    	; 0xee24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  {
    mqtt_process_message++;
    eda2:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    eda6:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    edaa:	01 96       	adiw	r24, 0x01	; 1
    edac:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    edb0:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    edb4:	f5 01       	movw	r30, r10
    edb6:	01 90       	ld	r0, Z+
    edb8:	00 20       	and	r0, r0
    edba:	e9 f7       	brne	.-6      	; 0xedb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1174>
    edbc:	31 97       	sbiw	r30, 0x01	; 1
    edbe:	ea 19       	sub	r30, r10
    edc0:	fb 09       	sbc	r31, r11
    edc2:	9e 2f       	mov	r25, r30
    edc4:	4e 2f       	mov	r20, r30
    edc6:	84 2f       	mov	r24, r20
    edc8:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782 (discriminator 3)
    edca:	24 2f       	mov	r18, r20
    edcc:	30 e0       	ldi	r19, 0x00	; 0
    edce:	d4 01       	movw	r26, r8
    edd0:	0d 90       	ld	r0, X+
    edd2:	00 20       	and	r0, r0
    edd4:	e9 f7       	brne	.-6      	; 0xedd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118e>
    edd6:	11 97       	sbiw	r26, 0x01	; 1
    edd8:	a8 19       	sub	r26, r8
    edda:	b9 09       	sbc	r27, r9
    eddc:	2a 17       	cp	r18, r26
    edde:	3b 07       	cpc	r19, r27
    ede0:	60 f4       	brcc	.+24     	; 0xedfa <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ede2:	d5 01       	movw	r26, r10
    ede4:	a8 0f       	add	r26, r24
    ede6:	b1 1d       	adc	r27, r1
    ede8:	28 0d       	add	r18, r8
    edea:	39 1d       	adc	r19, r9
    edec:	f9 01       	movw	r30, r18
    edee:	80 81       	ld	r24, Z
    edf0:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785 (discriminator 2)
      str1[cnt + 1] = 0;
    edf2:	11 96       	adiw	r26, 0x01	; 1
    edf4:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    edf6:	4f 5f       	subi	r20, 0xFF	; 255
    edf8:	e6 cf       	rjmp	.-52     	; 0xedc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1184>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    edfa:	69 e7       	ldi	r22, 0x79	; 121
    edfc:	73 e0       	ldi	r23, 0x03	; 3
    edfe:	c5 01       	movw	r24, r10
    ee00:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ee04:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
    pch = strtok (str1, "/");
    while (pch != NULL)
    ee06:	00 97       	sbiw	r24, 0x00	; 0
    ee08:	69 f0       	breq	.+26     	; 0xee24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
    {
      if (cnt == 0) id = atoi(pch);
    ee0a:	01 11       	cpse	r16, r1
    ee0c:	03 c0       	rjmp	.+6      	; 0xee14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792 (discriminator 1)
    ee0e:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    ee12:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    ee14:	69 e7       	ldi	r22, 0x79	; 121
    ee16:	73 e0       	ldi	r23, 0x03	; 3
    ee18:	90 e0       	ldi	r25, 0x00	; 0
    ee1a:	80 e0       	ldi	r24, 0x00	; 0
    ee1c:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
      cnt++;
    ee20:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ee22:	f1 cf       	rjmp	.-30     	; 0xee06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    ee24:	63 ea       	ldi	r22, 0xA3	; 163
    ee26:	78 e5       	ldi	r23, 0x58	; 88
    ee28:	c5 01       	movw	r24, r10
    ee2a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
  strcat(str1, "output/");
    ee2e:	6b e1       	ldi	r22, 0x1B	; 27
    ee30:	74 e0       	ldi	r23, 0x04	; 4
    ee32:	c5 01       	movw	r24, r10
    ee34:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ee38:	f5 01       	movw	r30, r10
    ee3a:	01 90       	ld	r0, Z+
    ee3c:	00 20       	and	r0, r0
    ee3e:	e9 f7       	brne	.-6      	; 0xee3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f8>
    ee40:	31 97       	sbiw	r30, 0x01	; 1
    ee42:	af 01       	movw	r20, r30
    ee44:	4a 19       	sub	r20, r10
    ee46:	5b 09       	sbc	r21, r11
    ee48:	b4 01       	movw	r22, r8
    ee4a:	c5 01       	movw	r24, r10
    ee4c:	0e 94 c4 e0 	call	0x1c188	; 0x1c188 <strncmp>
    ee50:	89 2b       	or	r24, r25
    ee52:	09 f0       	breq	.+2      	; 0xee56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1214>
    ee54:	6d c0       	rjmp	.+218    	; 0xef30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
  {
    mqtt_process_message++;
    ee56:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    ee5a:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    ee5e:	01 96       	adiw	r24, 0x01	; 1
    ee60:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    ee64:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ee68:	f5 01       	movw	r30, r10
    ee6a:	01 90       	ld	r0, Z+
    ee6c:	00 20       	and	r0, r0
    ee6e:	e9 f7       	brne	.-6      	; 0xee6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1228>
    ee70:	31 97       	sbiw	r30, 0x01	; 1
    ee72:	ea 19       	sub	r30, r10
    ee74:	fb 09       	sbc	r31, r11
    ee76:	9e 2f       	mov	r25, r30
    ee78:	4e 2f       	mov	r20, r30
    ee7a:	84 2f       	mov	r24, r20
    ee7c:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807 (discriminator 3)
    ee7e:	24 2f       	mov	r18, r20
    ee80:	30 e0       	ldi	r19, 0x00	; 0
    ee82:	d4 01       	movw	r26, r8
    ee84:	0d 90       	ld	r0, X+
    ee86:	00 20       	and	r0, r0
    ee88:	e9 f7       	brne	.-6      	; 0xee84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
    ee8a:	11 97       	sbiw	r26, 0x01	; 1
    ee8c:	a8 19       	sub	r26, r8
    ee8e:	b9 09       	sbc	r27, r9
    ee90:	2a 17       	cp	r18, r26
    ee92:	3b 07       	cpc	r19, r27
    ee94:	60 f4       	brcc	.+24     	; 0xeeae <mqtt_callback(char*, unsigned char*, unsigned int)+0x126c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ee96:	d5 01       	movw	r26, r10
    ee98:	a8 0f       	add	r26, r24
    ee9a:	b1 1d       	adc	r27, r1
    ee9c:	28 0d       	add	r18, r8
    ee9e:	39 1d       	adc	r19, r9
    eea0:	f9 01       	movw	r30, r18
    eea2:	80 81       	ld	r24, Z
    eea4:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810 (discriminator 2)
      str1[cnt + 1] = 0;
    eea6:	11 96       	adiw	r26, 0x01	; 1
    eea8:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eeaa:	4f 5f       	subi	r20, 0xFF	; 255
    eeac:	e6 cf       	rjmp	.-52     	; 0xee7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1238>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2814
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    eeae:	69 e7       	ldi	r22, 0x79	; 121
    eeb0:	73 e0       	ldi	r23, 0x03	; 3
    eeb2:	c5 01       	movw	r24, r10
    eeb4:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    eeb8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    eeba:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    pch = strtok (str1, "/");
    while (pch != NULL)
    eebc:	e1 14       	cp	r14, r1
    eebe:	f1 04       	cpc	r15, r1
    eec0:	b9 f1       	breq	.+110    	; 0xef30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    {
      if (cnt == 0) id = atoi(pch);
    eec2:	01 11       	cpse	r16, r1
    eec4:	0d c0       	rjmp	.+26     	; 0xeee0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x129e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817 (discriminator 1)
    eec6:	c7 01       	movw	r24, r14
    eec8:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    eecc:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    eece:	69 e7       	ldi	r22, 0x79	; 121
    eed0:	73 e0       	ldi	r23, 0x03	; 3
    eed2:	90 e0       	ldi	r25, 0x00	; 0
    eed4:	80 e0       	ldi	r24, 0x00	; 0
    eed6:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
    eeda:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
      cnt++;
    eedc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    eede:	ee cf       	rjmp	.-36     	; 0xeebc <mqtt_callback(char*, unsigned char*, unsigned int)+0x127a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    eee0:	01 30       	cpi	r16, 0x01	; 1
    eee2:	a9 f7       	brne	.-22     	; 0xeece <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    eee4:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
          if (thermostat_ring_get_output(idx) == id)
    eee6:	8d 2d       	mov	r24, r13
    eee8:	0e 94 73 90 	call	0x120e6	; 0x120e6 <thermostat_ring_get_output(unsigned char)>
    eeec:	c8 2e       	mov	r12, r24
    eeee:	81 13       	cpse	r24, r17
    eef0:	1a c0       	rjmp	.+52     	; 0xef26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    eef2:	61 e4       	ldi	r22, 0x41	; 65
    eef4:	74 e0       	ldi	r23, 0x04	; 4
    eef6:	c7 01       	movw	r24, r14
    eef8:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eefc:	89 2b       	or	r24, r25
    eefe:	29 f0       	breq	.+10     	; 0xef0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x12c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823 (discriminator 1)
    ef00:	e1 2f       	mov	r30, r17
    ef02:	f0 e0       	ldi	r31, 0x00	; 0
    ef04:	e5 53       	subi	r30, 0x35	; 53
    ef06:	f5 4f       	sbci	r31, 0xF5	; 245
    ef08:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    ef0a:	64 e2       	ldi	r22, 0x24	; 36
    ef0c:	74 e0       	ldi	r23, 0x04	; 4
    ef0e:	c7 01       	movw	r24, r14
    ef10:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ef14:	89 2b       	or	r24, r25
    ef16:	29 f0       	breq	.+10     	; 0xef22 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824 (discriminator 1)
    ef18:	e1 2f       	mov	r30, r17
    ef1a:	f0 e0       	ldi	r31, 0x00	; 0
    ef1c:	e5 53       	subi	r30, 0x35	; 53
    ef1e:	f5 4f       	sbci	r31, 0xF5	; 245
    ef20:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    ef22:	1c 2d       	mov	r17, r12
    ef24:	d4 cf       	rjmp	.-88     	; 0xeece <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    ef26:	d3 94       	inc	r13
    ef28:	f5 e0       	ldi	r31, 0x05	; 5
    ef2a:	df 12       	cpse	r13, r31
    ef2c:	dc cf       	rjmp	.-72     	; 0xeee6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12a4>
    ef2e:	cf cf       	rjmp	.-98     	; 0xeece <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
    ef30:	6d ec       	ldi	r22, 0xCD	; 205
    ef32:	78 e5       	ldi	r23, 0x58	; 88
    ef34:	c5 01       	movw	r24, r10
    ef36:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
  strcat(str1, device.nazev);
    ef3a:	6e e1       	ldi	r22, 0x1E	; 30
    ef3c:	71 e1       	ldi	r23, 0x11	; 17
    ef3e:	c5 01       	movw	r24, r10
    ef40:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
  strcat(str1, "/brightness");
    ef44:	64 e7       	ldi	r22, 0x74	; 116
    ef46:	77 e0       	ldi	r23, 0x07	; 7
    ef48:	c5 01       	movw	r24, r10
    ef4a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
  if (strcmp(str1, topic) == 0)
    ef4e:	b4 01       	movw	r22, r8
    ef50:	c5 01       	movw	r24, r10
    ef52:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    ef56:	89 2b       	or	r24, r25
    ef58:	91 f4       	brne	.+36     	; 0xef7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x133c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
  {
    mqtt_process_message++;
    ef5a:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    ef5e:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    ef62:	01 96       	adiw	r24, 0x01	; 1
    ef64:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    ef68:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
    my_touch.TP_SetBacklight(atoi(my_payload));
    ef6c:	88 e5       	ldi	r24, 0x58	; 88
    ef6e:	99 e0       	ldi	r25, 0x09	; 9
    ef70:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    ef74:	68 2f       	mov	r22, r24
    ef76:	8f ef       	ldi	r24, 0xFF	; 255
    ef78:	9b e0       	ldi	r25, 0x0B	; 11
    ef7a:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    ef7e:	6d ec       	ldi	r22, 0xCD	; 205
    ef80:	78 e5       	ldi	r23, 0x58	; 88
    ef82:	c5 01       	movw	r24, r10
    ef84:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
  strcat(str1, device.nazev);
    ef88:	6e e1       	ldi	r22, 0x1E	; 30
    ef8a:	71 e1       	ldi	r23, 0x11	; 17
    ef8c:	c5 01       	movw	r24, r10
    ef8e:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
  strcat(str1, "/reload");
    ef92:	60 e8       	ldi	r22, 0x80	; 128
    ef94:	77 e0       	ldi	r23, 0x07	; 7
    ef96:	c5 01       	movw	r24, r10
    ef98:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
  if (strcmp(str1, topic) == 0)
    ef9c:	b4 01       	movw	r22, r8
    ef9e:	c5 01       	movw	r24, r10
    efa0:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    efa4:	89 2b       	or	r24, r25
    efa6:	a1 f4       	brne	.+40     	; 0xefd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x138e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
  {
    mqtt_process_message++;
    efa8:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    efac:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    efb0:	01 96       	adiw	r24, 0x01	; 1
    efb2:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    efb6:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    log_error(&mqtt_client, "reload ..... ");
    efba:	68 e8       	ldi	r22, 0x88	; 136
    efbc:	77 e0       	ldi	r23, 0x07	; 7
    efbe:	85 e1       	ldi	r24, 0x15	; 21
    efc0:	9e e0       	ldi	r25, 0x0E	; 14
    efc2:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
    resetFunc();
    efc6:	e0 91 d8 09 	lds	r30, 0x09D8	; 0x8009d8 <resetFunc>
    efca:	f0 91 d9 09 	lds	r31, 0x09D9	; 0x8009d9 <resetFunc+0x1>
    efce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2855
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    efd0:	6d ec       	ldi	r22, 0xCD	; 205
    efd2:	78 e5       	ldi	r23, 0x58	; 88
    efd4:	c5 01       	movw	r24, r10
    efd6:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
  strcat(str1, device.nazev);
    efda:	6e e1       	ldi	r22, 0x1E	; 30
    efdc:	71 e1       	ldi	r23, 0x11	; 17
    efde:	c5 01       	movw	r24, r10
    efe0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
  strcat(str1, "/bootloader");
    efe4:	66 e9       	ldi	r22, 0x96	; 150
    efe6:	77 e0       	ldi	r23, 0x07	; 7
    efe8:	c5 01       	movw	r24, r10
    efea:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2858
  if (strcmp(str1, topic) == 0)
    efee:	b4 01       	movw	r22, r8
    eff0:	c5 01       	movw	r24, r10
    eff2:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    eff6:	89 2b       	or	r24, r25
    eff8:	f9 f4       	brne	.+62     	; 0xf038 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2860
  {
    mqtt_process_message++;
    effa:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    effe:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    f002:	01 96       	adiw	r24, 0x01	; 1
    f004:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    f008:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2861
    log_error(&mqtt_client, "bootloader ..... ");
    f00c:	62 ea       	ldi	r22, 0xA2	; 162
    f00e:	77 e0       	ldi	r23, 0x07	; 7
    f010:	85 e1       	ldi	r24, 0x15	; 21
    f012:	9e e0       	ldi	r25, 0x0E	; 14
    f014:	0e 94 53 8a 	call	0x114a6	; 0x114a6 <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2862
    EEPROM.write(bootloader_tag, 255);
    f018:	6f ef       	ldi	r22, 0xFF	; 255
    f01a:	90 e0       	ldi	r25, 0x00	; 0
    f01c:	80 e0       	ldi	r24, 0x00	; 0
    f01e:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    f022:	88 e1       	ldi	r24, 0x18	; 24
    f024:	9e e0       	ldi	r25, 0x0E	; 14
    f026:	0f b6       	in	r0, 0x3f	; 63
    f028:	f8 94       	cli
    f02a:	a8 95       	wdr
    f02c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f030:	0f be       	out	0x3f, r0	; 63
    f032:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f036:	ff cf       	rjmp	.-2      	; 0xf036 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f4>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    f038:	6d ec       	ldi	r22, 0xCD	; 205
    f03a:	78 e5       	ldi	r23, 0x58	; 88
    f03c:	c5 01       	movw	r24, r10
    f03e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2869
  strcat(str1, device.nazev);
    f042:	6e e1       	ldi	r22, 0x1E	; 30
    f044:	71 e1       	ldi	r23, 0x11	; 17
    f046:	c5 01       	movw	r24, r10
    f048:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
  strcat(str1, "/default");
    f04c:	69 ef       	ldi	r22, 0xF9	; 249
    f04e:	76 e0       	ldi	r23, 0x06	; 6
    f050:	c5 01       	movw	r24, r10
    f052:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
  if (strcmp(str1, topic) == 0)
    f056:	b4 01       	movw	r22, r8
    f058:	c5 01       	movw	r24, r10
    f05a:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
    f05e:	89 2b       	or	r24, r25
    f060:	91 f4       	brne	.+36     	; 0xf086 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1444>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
  {
    mqtt_process_message++;
    f062:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
    f066:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
    f06a:	01 96       	adiw	r24, 0x01	; 1
    f06c:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <mqtt_process_message+0x1>
    f070:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    f074:	88 e5       	ldi	r24, 0x58	; 88
    f076:	99 e0       	ldi	r25, 0x09	; 9
    f078:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
    f07c:	68 2f       	mov	r22, r24
    f07e:	8a e5       	ldi	r24, 0x5A	; 90
    f080:	90 e0       	ldi	r25, 0x00	; 0
    f082:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
  }

}
    f086:	c1 53       	subi	r28, 0x31	; 49
    f088:	df 4f       	sbci	r29, 0xFF	; 255
    f08a:	0f b6       	in	r0, 0x3f	; 63
    f08c:	f8 94       	cli
    f08e:	de bf       	out	0x3e, r29	; 62
    f090:	0f be       	out	0x3f, r0	; 63
    f092:	cd bf       	out	0x3d, r28	; 61
    f094:	df 91       	pop	r29
    f096:	cf 91       	pop	r28
    f098:	1f 91       	pop	r17
    f09a:	0f 91       	pop	r16
    f09c:	ff 90       	pop	r15
    f09e:	ef 90       	pop	r14
    f0a0:	df 90       	pop	r13
    f0a2:	cf 90       	pop	r12
    f0a4:	bf 90       	pop	r11
    f0a6:	af 90       	pop	r10
    f0a8:	9f 90       	pop	r9
    f0aa:	8f 90       	pop	r8
    f0ac:	7f 90       	pop	r7
    f0ae:	6f 90       	pop	r6
    f0b0:	5f 90       	pop	r5
    f0b2:	4f 90       	pop	r4
    f0b4:	3f 90       	pop	r3
    f0b6:	2f 90       	pop	r2
    f0b8:	08 95       	ret

0000f0ba <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  strcpy_P(str1, new_text_mqtt_error);
  itoa(mqtt_error, str2, 16);
  strcat(str1, str2);
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
  
}
    f0ba:	cf 92       	push	r12
    f0bc:	ef 92       	push	r14
    f0be:	0f 93       	push	r16
    f0c0:	cf 93       	push	r28
    f0c2:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    f0c4:	00 e0       	ldi	r16, 0x00	; 0
    f0c6:	20 e0       	ldi	r18, 0x00	; 0
    f0c8:	40 e0       	ldi	r20, 0x00	; 0
    f0ca:	60 e0       	ldi	r22, 0x00	; 0
    f0cc:	86 e7       	ldi	r24, 0x76	; 118
    f0ce:	90 e1       	ldi	r25, 0x10	; 16
    f0d0:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:48
#include "RTDSMenu.h"
#include "MenuSettingsTime.h"

#include "MenuNastaveniMqtt.h"

SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
    f0d4:	29 e1       	ldi	r18, 0x19	; 25
    f0d6:	4a e1       	ldi	r20, 0x1A	; 26
    f0d8:	68 e1       	ldi	r22, 0x18	; 24
    f0da:	8f e6       	ldi	r24, 0x6F	; 111
    f0dc:	90 e1       	ldi	r25, 0x10	; 16
    f0de:	0e 94 28 ab 	call	0x15650	; 0x15650 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:52


RTC_DS1307 rtc;
DateTime now;
    f0e2:	40 e0       	ldi	r20, 0x00	; 0
    f0e4:	50 e0       	ldi	r21, 0x00	; 0
    f0e6:	ba 01       	movw	r22, r20
    f0e8:	87 e6       	ldi	r24, 0x67	; 103
    f0ea:	90 e1       	ldi	r25, 0x10	; 16
    f0ec:	0e 94 a1 ca 	call	0x19542	; 0x19542 <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:55


EthernetClient ethClient;
    f0f0:	8a e5       	ldi	r24, 0x5A	; 90
    f0f2:	90 e1       	ldi	r25, 0x10	; 16
    f0f4:	0e 94 66 b3 	call	0x166cc	; 0x166cc <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:56
EthernetClient ethClient1;
    f0f8:	8d e4       	ldi	r24, 0x4D	; 77
    f0fa:	90 e1       	ldi	r25, 0x10	; 16
    f0fc:	0e 94 66 b3 	call	0x166cc	; 0x166cc <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:57
EthernetUDP udpClient;
    f100:	82 e3       	ldi	r24, 0x32	; 50
    f102:	90 e1       	ldi	r25, 0x10	; 16
    f104:	0e 94 66 b7 	call	0x16ecc	; 0x16ecc <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:58
PubSubClient mqtt_client(ethClient);
    f108:	6a e5       	ldi	r22, 0x5A	; 90
    f10a:	70 e1       	ldi	r23, 0x10	; 16
    f10c:	85 e1       	ldi	r24, 0x15	; 21
    f10e:	9e e0       	ldi	r25, 0x0E	; 14
    f110:	0e 94 4a c0 	call	0x18094	; 0x18094 <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:59
EthernetServer http_server(80);
    f114:	60 e5       	ldi	r22, 0x50	; 80
    f116:	70 e0       	ldi	r23, 0x00	; 0
    f118:	8f e0       	ldi	r24, 0x0F	; 15
    f11a:	9e e0       	ldi	r25, 0x0E	; 14
    f11c:	0e 94 c5 b4 	call	0x1698a	; 0x1698a <EthernetServer::EthernetServer(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:62


RF24 radio(NRF_CE, NRF_CS);
    f120:	42 e0       	ldi	r20, 0x02	; 2
    f122:	50 e0       	ldi	r21, 0x00	; 0
    f124:	63 e0       	ldi	r22, 0x03	; 3
    f126:	70 e0       	ldi	r23, 0x00	; 0
    f128:	87 ef       	ldi	r24, 0xF7	; 247
    f12a:	9d e0       	ldi	r25, 0x0D	; 13
    f12c:	0e 94 5f c8 	call	0x190be	; 0x190be <RF24::RF24(unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:63
RF24Network network(radio);
    f130:	67 ef       	ldi	r22, 0xF7	; 247
    f132:	7d e0       	ldi	r23, 0x0D	; 13
    f134:	85 e8       	ldi	r24, 0x85	; 133
    f136:	9c e0       	ldi	r25, 0x0C	; 12
    f138:	0e 94 4e ca 	call	0x1949c	; 0x1949c <RF24Network::RF24Network(RF24&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:64
RF24Mesh mesh(radio, network);
    f13c:	45 e8       	ldi	r20, 0x85	; 133
    f13e:	5c e0       	ldi	r21, 0x0C	; 12
    f140:	67 ef       	ldi	r22, 0xF7	; 247
    f142:	7d e0       	ldi	r23, 0x0D	; 13
    f144:	8d e6       	ldi	r24, 0x6D	; 109
    f146:	9c e0       	ldi	r25, 0x0C	; 12
    f148:	0e 94 68 ca 	call	0x194d0	; 0x194d0 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
    f14c:	c0 e6       	ldi	r28, 0x60	; 96
    f14e:	dc e0       	ldi	r29, 0x0C	; 12
    f150:	8a e4       	ldi	r24, 0x4A	; 74
    f152:	93 e1       	ldi	r25, 0x13	; 19
    f154:	99 83       	std	Y+1, r25	; 0x01
    f156:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
    f158:	88 e4       	ldi	r24, 0x48	; 72
    f15a:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
    f15c:	e0 e8       	ldi	r30, 0x80	; 128
    f15e:	f2 e0       	ldi	r31, 0x02	; 2
    f160:	fc 87       	std	Y+12, r31	; 0x0c
    f162:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
    f164:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
    f166:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
    f168:	80 81       	ld	r24, Z
    f16a:	89 1b       	sub	r24, r25
    f16c:	99 0b       	sbc	r25, r25
    f16e:	61 e0       	ldi	r22, 0x01	; 1
    f170:	70 e0       	ldi	r23, 0x00	; 0
    f172:	9b 01       	movw	r18, r22
    f174:	02 c0       	rjmp	.+4      	; 0xf17a <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xc0>
    f176:	22 0f       	add	r18, r18
    f178:	33 1f       	adc	r19, r19
    f17a:	8a 95       	dec	r24
    f17c:	e2 f7       	brpl	.-8      	; 0xf176 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xbc>
    f17e:	c9 01       	movw	r24, r18
    f180:	91 95       	neg	r25
    f182:	81 95       	neg	r24
    f184:	91 09       	sbc	r25, r1
    f186:	9d 83       	std	Y+5, r25	; 0x05
    f188:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
    f18a:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
    f18c:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
    f18e:	02 c0       	rjmp	.+4      	; 0xf194 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xda>
    f190:	66 0f       	add	r22, r22
    f192:	77 1f       	adc	r23, r23
    f194:	8a 95       	dec	r24
    f196:	e2 f7       	brpl	.-8      	; 0xf190 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xd6>
    f198:	07 2e       	mov	r0, r23
    f19a:	00 0c       	add	r0, r0
    f19c:	88 0b       	sbc	r24, r24
    f19e:	99 0b       	sbc	r25, r25
    f1a0:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
    f1a4:	9b 01       	movw	r18, r22
    f1a6:	ac 01       	movw	r20, r24
    f1a8:	60 e0       	ldi	r22, 0x00	; 0
    f1aa:	70 e0       	ldi	r23, 0x00	; 0
    f1ac:	80 e8       	ldi	r24, 0x80	; 128
    f1ae:	9f e3       	ldi	r25, 0x3F	; 63
    f1b0:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
    f1b4:	6f 83       	std	Y+7, r22	; 0x07
    f1b6:	78 87       	std	Y+8, r23	; 0x08
    f1b8:	89 87       	std	Y+9, r24	; 0x09
    f1ba:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:69

Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
    f1bc:	82 e2       	ldi	r24, 0x22	; 34
    f1be:	c8 2e       	mov	r12, r24
    f1c0:	90 e2       	ldi	r25, 0x20	; 32
    f1c2:	e9 2e       	mov	r14, r25
    f1c4:	04 e2       	ldi	r16, 0x24	; 36
    f1c6:	23 e2       	ldi	r18, 0x23	; 35
    f1c8:	41 e2       	ldi	r20, 0x21	; 33
    f1ca:	6a e0       	ldi	r22, 0x0A	; 10
    f1cc:	70 e0       	ldi	r23, 0x00	; 0
    f1ce:	81 e2       	ldi	r24, 0x21	; 33
    f1d0:	9c e0       	ldi	r25, 0x0C	; 12
    f1d2:	0e 94 3a 9a 	call	0x13474	; 0x13474 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:70
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd
    f1d6:	2f e1       	ldi	r18, 0x1F	; 31
    f1d8:	c2 2e       	mov	r12, r18
    f1da:	37 e0       	ldi	r19, 0x07	; 7
    f1dc:	e3 2e       	mov	r14, r19
    f1de:	0e e1       	ldi	r16, 0x1E	; 30
    f1e0:	2d e1       	ldi	r18, 0x1D	; 29
    f1e2:	4b e1       	ldi	r20, 0x1B	; 27
    f1e4:	6c e1       	ldi	r22, 0x1C	; 28
    f1e6:	8f ef       	ldi	r24, 0xFF	; 255
    f1e8:	9b e0       	ldi	r25, 0x0B	; 11
    f1ea:	0e 94 77 a7 	call	0x14eee	; 0x14eee <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
    f1ee:	e0 ef       	ldi	r30, 0xF0	; 240
    f1f0:	fa e0       	ldi	r31, 0x0A	; 10
    f1f2:	8a e0       	ldi	r24, 0x0A	; 10
    f1f4:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
    f1f6:	89 ef       	ldi	r24, 0xF9	; 249
    f1f8:	9a e0       	ldi	r25, 0x0A	; 10
    f1fa:	94 83       	std	Z+4, r25	; 0x04
    f1fc:	83 83       	std	Z+3, r24	; 0x03
    f1fe:	80 e0       	ldi	r24, 0x00	; 0
    f200:	91 e0       	ldi	r25, 0x01	; 1
    f202:	96 83       	std	Z+6, r25	; 0x06
    f204:	85 83       	std	Z+5, r24	; 0x05
    f206:	10 86       	std	Z+8, r1	; 0x08
    f208:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
    f20a:	8f e3       	ldi	r24, 0x3F	; 63
    f20c:	98 e0       	ldi	r25, 0x08	; 8
    f20e:	92 83       	std	Z+2, r25	; 0x02
    f210:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    f212:	10 92 fa 0b 	sts	0x0BFA, r1	; 0x800bfa <doc+0x10a>
    f216:	10 92 f9 0b 	sts	0x0BF9, r1	; 0x800bf9 <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:74

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
    f21a:	21 e0       	ldi	r18, 0x01	; 1
    f21c:	30 e0       	ldi	r19, 0x00	; 0
    f21e:	46 e1       	ldi	r20, 0x16	; 22
    f220:	6f e6       	ldi	r22, 0x6F	; 111
    f222:	70 e1       	ldi	r23, 0x10	; 16
    f224:	83 ee       	ldi	r24, 0xE3	; 227
    f226:	9a e0       	ldi	r25, 0x0A	; 10
    f228:	0e 94 e5 ab 	call	0x157ca	; 0x157ca <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:75
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f22c:	30 e0       	ldi	r19, 0x00	; 0
    f22e:	20 e0       	ldi	r18, 0x00	; 0
    f230:	47 e1       	ldi	r20, 0x17	; 23
    f232:	6f e6       	ldi	r22, 0x6F	; 111
    f234:	70 e1       	ldi	r23, 0x10	; 16
    f236:	84 ed       	ldi	r24, 0xD4	; 212
    f238:	9a e0       	ldi	r25, 0x0A	; 10
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  strcpy_P(str1, new_text_mqtt_error);
  itoa(mqtt_error, str2, 16);
  strcat(str1, str2);
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
  
}
    f23a:	df 91       	pop	r29
    f23c:	cf 91       	pop	r28
    f23e:	0f 91       	pop	r16
    f240:	ef 90       	pop	r14
    f242:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:75
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f244:	0c 94 16 ad 	jmp	0x15a2c	; 0x15a2c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

0000f248 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    f248:	2f 92       	push	r2
    f24a:	3f 92       	push	r3
    f24c:	4f 92       	push	r4
    f24e:	5f 92       	push	r5
    f250:	6f 92       	push	r6
    f252:	7f 92       	push	r7
    f254:	8f 92       	push	r8
    f256:	9f 92       	push	r9
    f258:	af 92       	push	r10
    f25a:	bf 92       	push	r11
    f25c:	cf 92       	push	r12
    f25e:	df 92       	push	r13
    f260:	ef 92       	push	r14
    f262:	ff 92       	push	r15
    f264:	0f 93       	push	r16
    f266:	1f 93       	push	r17
    f268:	cf 93       	push	r28
    f26a:	df 93       	push	r29
    f26c:	cd b7       	in	r28, 0x3d	; 61
    f26e:	de b7       	in	r29, 0x3e	; 62
    f270:	c2 53       	subi	r28, 0x32	; 50
    f272:	d1 40       	sbci	r29, 0x01	; 1
    f274:	0f b6       	in	r0, 0x3f	; 63
    f276:	f8 94       	cli
    f278:	de bf       	out	0x3e, r29	; 62
    f27a:	0f be       	out	0x3f, r0	; 63
    f27c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
  char s_dvanact[8];
  char s_current[8];
  struct_DDS18s20 tds;
  long milis;

  NTPClient timeClient(udpClient);
    f27e:	62 e3       	ldi	r22, 0x32	; 50
    f280:	70 e1       	ldi	r23, 0x10	; 16
    f282:	ce 01       	movw	r24, r28
    f284:	01 96       	adiw	r24, 0x01	; 1
    f286:	0e 94 80 d2 	call	0x1a500	; 0x1a500 <NTPClient::NTPClient(UDP&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605

  setup_io_pin();
    f28a:	0e 94 fc 4f 	call	0x9ff8	; 0x9ff8 <setup_io_pin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607

  interrupts();             // enable all interrupts
    f28e:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608
  SPI.begin();
    f290:	0e 94 e0 ac 	call	0x159c0	; 0x159c0 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
  Wire.begin();
    f294:	8a e4       	ldi	r24, 0x4A	; 74
    f296:	93 e1       	ldi	r25, 0x13	; 19
    f298:	0e 94 7e cd 	call	0x19afc	; 0x19afc <TwoWire::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
  rtc.begin();
    f29c:	8e e6       	ldi	r24, 0x6E	; 110
    f29e:	90 e1       	ldi	r25, 0x10	; 16
    f2a0:	0e 94 3f cb 	call	0x1967e	; 0x1967e <RTC_DS1307::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612

  mqtt_set_public_mqtt_client(&mqtt_client);
    f2a4:	85 e1       	ldi	r24, 0x15	; 21
    f2a6:	9e e0       	ldi	r25, 0x0E	; 14
    f2a8:	0e 94 7a 8a 	call	0x114f4	; 0x114f4 <mqtt_set_public_mqtt_client(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
  fdevopen( &printf_via_mqtt, 0);
    f2ac:	70 e0       	ldi	r23, 0x00	; 0
    f2ae:	60 e0       	ldi	r22, 0x00	; 0
    f2b0:	8c e1       	ldi	r24, 0x1C	; 28
    f2b2:	9a e8       	ldi	r25, 0x8A	; 138
    f2b4:	0e 94 40 e1 	call	0x1c280	; 0x1c280 <fdevopen>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
  printf_begin();
    f2b8:	0e 94 a0 38 	call	0x7140	; 0x7140 <printf_begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616

  swSPI.begin();
    f2bc:	8f e6       	ldi	r24, 0x6F	; 111
    f2be:	90 e1       	ldi	r25, 0x10	; 16
    f2c0:	0e 94 35 ab 	call	0x1566a	; 0x1566a <SoftSPIB::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618

  MenuHistoryInit();
    f2c4:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <MenuHistoryInit()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620

  my_lcd.Init_LCD();
    f2c8:	81 e2       	ldi	r24, 0x21	; 33
    f2ca:	9c e0       	ldi	r25, 0x0C	; 12
    f2cc:	0e 94 50 a7 	call	0x14ea0	; 0x14ea0 <LCDWIKI_KBV::Init_LCD()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3621
  my_lcd.Set_Rotation(3);
    f2d0:	63 e0       	ldi	r22, 0x03	; 3
    f2d2:	81 e2       	ldi	r24, 0x21	; 33
    f2d4:	9c e0       	ldi	r25, 0x0C	; 12
    f2d6:	0e 94 ba a4 	call	0x14974	; 0x14974 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622
  my_lcd.Fill_Screen(WHITE);
    f2da:	6f ef       	ldi	r22, 0xFF	; 255
    f2dc:	7f ef       	ldi	r23, 0xFF	; 255
    f2de:	81 e2       	ldi	r24, 0x21	; 33
    f2e0:	9c e0       	ldi	r25, 0x0C	; 12
    f2e2:	0e 94 7f 95 	call	0x12afe	; 0x12afe <LCDWIKI_GUI::Fill_Screen(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
  my_lcd.Set_Draw_color(BLUE);
    f2e6:	6f e1       	ldi	r22, 0x1F	; 31
    f2e8:	70 e0       	ldi	r23, 0x00	; 0
    f2ea:	81 e2       	ldi	r24, 0x21	; 33
    f2ec:	9c e0       	ldi	r25, 0x0C	; 12
    f2ee:	0e 94 1f 95 	call	0x12a3e	; 0x12a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
  strcpy_P(str1, term_title);
    f2f2:	6b e0       	ldi	r22, 0x0B	; 11
    f2f4:	7c e5       	ldi	r23, 0x5C	; 92
    f2f6:	ce 01       	movw	r24, r28
    f2f8:	88 57       	subi	r24, 0x78	; 120
    f2fa:	9f 4f       	sbci	r25, 0xFF	; 255
    f2fc:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3625
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    f300:	c1 2c       	mov	r12, r1
    f302:	ee 24       	eor	r14, r14
    f304:	ea 94       	dec	r14
    f306:	fe 2c       	mov	r15, r14
    f308:	0f e1       	ldi	r16, 0x1F	; 31
    f30a:	10 e0       	ldi	r17, 0x00	; 0
    f30c:	22 e0       	ldi	r18, 0x02	; 2
    f30e:	4a e0       	ldi	r20, 0x0A	; 10
    f310:	50 e0       	ldi	r21, 0x00	; 0
    f312:	6e e1       	ldi	r22, 0x1E	; 30
    f314:	70 e0       	ldi	r23, 0x00	; 0
    f316:	ce 01       	movw	r24, r28
    f318:	88 57       	subi	r24, 0x78	; 120
    f31a:	9f 4f       	sbci	r25, 0xFF	; 255
    f31c:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f320:	1e e1       	ldi	r17, 0x1E	; 30
    f322:	61 2e       	mov	r6, r17
    f324:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f326:	c0 5d       	subi	r28, 0xD0	; 208
    f328:	de 4f       	sbci	r29, 0xFE	; 254
    f32a:	18 82       	st	Y, r1
    f32c:	c0 53       	subi	r28, 0x30	; 48
    f32e:	d1 40       	sbci	r29, 0x01	; 1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    f330:	5e 01       	movw	r10, r28
    f332:	28 e4       	ldi	r18, 0x48	; 72
    f334:	a2 0e       	add	r10, r18
    f336:	b1 1c       	adc	r11, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    f338:	68 ec       	ldi	r22, 0xC8	; 200
    f33a:	70 e0       	ldi	r23, 0x00	; 0
    f33c:	6c 0f       	add	r22, r28
    f33e:	7d 1f       	adc	r23, r29
    f340:	64 5f       	subi	r22, 0xF4	; 244
    f342:	7f 4f       	sbci	r23, 0xFF	; 255
    f344:	cf 5c       	subi	r28, 0xCF	; 207
    f346:	de 4f       	sbci	r29, 0xFE	; 254
    f348:	79 83       	std	Y+1, r23	; 0x01
    f34a:	68 83       	st	Y, r22
    f34c:	c1 53       	subi	r28, 0x31	; 49
    f34e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
    if (init == 1)
    {
      strcpy_P(str1, text_vnitrni_ochrany);
      strcat(str1, ":2");
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f350:	4e 01       	movw	r8, r28
    f352:	7c ef       	ldi	r23, 0xFC	; 252
    f354:	87 0e       	add	r8, r23
    f356:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f358:	ce 01       	movw	r24, r28
    f35a:	8c 5e       	subi	r24, 0xEC	; 236
    f35c:	9e 4f       	sbci	r25, 0xFE	; 254
    f35e:	c2 5d       	subi	r28, 0xD2	; 210
    f360:	de 4f       	sbci	r29, 0xFE	; 254
    f362:	99 83       	std	Y+1, r25	; 0x01
    f364:	88 83       	st	Y, r24
    f366:	ce 52       	subi	r28, 0x2E	; 46
    f368:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f36a:	1e 01       	movw	r2, r28
    f36c:	94 ef       	ldi	r25, 0xF4	; 244
    f36e:	29 1a       	sub	r2, r25
    f370:	9e ef       	ldi	r25, 0xFE	; 254
    f372:	39 0a       	sbc	r3, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f374:	2e 01       	movw	r4, r28
    f376:	2c ef       	ldi	r18, 0xFC	; 252
    f378:	42 1a       	sub	r4, r18
    f37a:	2e ef       	ldi	r18, 0xFE	; 254
    f37c:	52 0a       	sbc	r5, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    f37e:	c1 2c       	mov	r12, r1
    f380:	ee 24       	eor	r14, r14
    f382:	ea 94       	dec	r14
    f384:	fe 2c       	mov	r15, r14
    f386:	00 e0       	ldi	r16, 0x00	; 0
    f388:	18 ef       	ldi	r17, 0xF8	; 248
    f38a:	21 e0       	ldi	r18, 0x01	; 1
    f38c:	4e e1       	ldi	r20, 0x1E	; 30
    f38e:	50 e0       	ldi	r21, 0x00	; 0
    f390:	b3 01       	movw	r22, r6
    f392:	8e ed       	ldi	r24, 0xDE	; 222
    f394:	97 e0       	ldi	r25, 0x07	; 7
    f396:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    f39a:	c0 5d       	subi	r28, 0xD0	; 208
    f39c:	de 4f       	sbci	r29, 0xFE	; 254
    f39e:	68 81       	ld	r22, Y
    f3a0:	c0 53       	subi	r28, 0x30	; 48
    f3a2:	d1 40       	sbci	r29, 0x01	; 1
    f3a4:	61 11       	cpse	r22, r1
    f3a6:	6d c1       	rjmp	.+730    	; 0xf682 <setup+0x43a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f3a8:	61 ec       	ldi	r22, 0xC1	; 193
    f3aa:	7b e5       	ldi	r23, 0x5B	; 91
    f3ac:	ce 01       	movw	r24, r28
    f3ae:	88 57       	subi	r24, 0x78	; 120
    f3b0:	9f 4f       	sbci	r25, 0xFF	; 255
    f3b2:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
      strcat(str1, ":1");
    f3b6:	60 ee       	ldi	r22, 0xE0	; 224
    f3b8:	77 e0       	ldi	r23, 0x07	; 7
    f3ba:	ce 01       	movw	r24, r28
    f3bc:	88 57       	subi	r24, 0x78	; 120
    f3be:	9f 4f       	sbci	r25, 0xFF	; 255
    f3c0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f3c4:	00 ee       	ldi	r16, 0xE0	; 224
    f3c6:	17 e0       	ldi	r17, 0x07	; 7
    f3c8:	21 e0       	ldi	r18, 0x01	; 1
    f3ca:	42 e3       	ldi	r20, 0x32	; 50
    f3cc:	50 e0       	ldi	r21, 0x00	; 0
    f3ce:	6e e1       	ldi	r22, 0x1E	; 30
    f3d0:	70 e0       	ldi	r23, 0x00	; 0
    f3d2:	ce 01       	movw	r24, r28
    f3d4:	88 57       	subi	r24, 0x78	; 120
    f3d6:	9f 4f       	sbci	r25, 0xFF	; 255
    f3d8:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637

      tritri = 0;
    f3dc:	10 92 c9 0a 	sts	0x0AC9, r1	; 0x800ac9 <tritri+0x1>
    f3e0:	10 92 c8 0a 	sts	0x0AC8, r1	; 0x800ac8 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
      petnula = 0;
    f3e4:	10 92 c7 0a 	sts	0x0AC7, r1	; 0x800ac7 <petnula+0x1>
    f3e8:	10 92 c6 0a 	sts	0x0AC6, r1	; 0x800ac6 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639
      dvanact = 0;
    f3ec:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <dvanact+0x1>
    f3f0:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
      dvanact = 0;
      light_curr = 0;
    f3f4:	10 92 c1 0a 	sts	0x0AC1, r1	; 0x800ac1 <light_curr+0x1>
    f3f8:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <light_curr>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
    f3fc:	43 e0       	ldi	r20, 0x03	; 3
    f3fe:	66 e0       	ldi	r22, 0x06	; 6
    f400:	88 ef       	ldi	r24, 0xF8	; 248
    f402:	0e 94 8d d4 	call	0x1a91a	; 0x1a91a <init_a2d(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
      a2d_handler(a2d_complete);
    f406:	86 e4       	ldi	r24, 0x46	; 70
    f408:	94 e3       	ldi	r25, 0x34	; 52
    f40a:	0e 94 88 d4 	call	0x1a910	; 0x1a910 <a2d_handler(void (*)(unsigned char, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    f40e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
      a2d_start_first(A_PROUD);
    f412:	83 e0       	ldi	r24, 0x03	; 3
    f414:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3649
      milis = millis();
    f418:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f41c:	6b 01       	movw	r12, r22
    f41e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      while (a2d_run_now == 0 && millis() - milis < 10);
    f420:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <a2d_run_now>
    f424:	81 11       	cpse	r24, r1
    f426:	0b c0       	rjmp	.+22     	; 0xf43e <setup+0x1f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650 (discriminator 1)
    f428:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f42c:	6c 19       	sub	r22, r12
    f42e:	7d 09       	sbc	r23, r13
    f430:	8e 09       	sbc	r24, r14
    f432:	9f 09       	sbc	r25, r15
    f434:	6a 30       	cpi	r22, 0x0A	; 10
    f436:	71 05       	cpc	r23, r1
    f438:	81 05       	cpc	r24, r1
    f43a:	91 05       	cpc	r25, r1
    f43c:	88 f3       	brcs	.-30     	; 0xf420 <setup+0x1d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
      /// regulator 3.3V
      a2d_run_now = 0;
    f43e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
      a2d_start_first(A_TRIV);
    f442:	86 e0       	ldi	r24, 0x06	; 6
    f444:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
      milis = millis();
    f448:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f44c:	6b 01       	movw	r12, r22
    f44e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
      while (a2d_run_now == 0 && millis() - milis < 10);
    f450:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <a2d_run_now>
    f454:	81 11       	cpse	r24, r1
    f456:	0b c0       	rjmp	.+22     	; 0xf46e <setup+0x226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655 (discriminator 1)
    f458:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f45c:	6c 19       	sub	r22, r12
    f45e:	7d 09       	sbc	r23, r13
    f460:	8e 09       	sbc	r24, r14
    f462:	9f 09       	sbc	r25, r15
    f464:	6a 30       	cpi	r22, 0x0A	; 10
    f466:	71 05       	cpc	r23, r1
    f468:	81 05       	cpc	r24, r1
    f46a:	91 05       	cpc	r25, r1
    f46c:	88 f3       	brcs	.-30     	; 0xf450 <setup+0x208>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      /// regulator 5.0V
      a2d_run_now = 0;
    f46e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
      a2d_start_first(A_PETV);
    f472:	85 e0       	ldi	r24, 0x05	; 5
    f474:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      milis = millis();
    f478:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f47c:	6b 01       	movw	r12, r22
    f47e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
      while (a2d_run_now == 0 && millis() - milis < 10);
    f480:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <a2d_run_now>
    f484:	81 11       	cpse	r24, r1
    f486:	0b c0       	rjmp	.+22     	; 0xf49e <setup+0x256>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660 (discriminator 1)
    f488:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f48c:	6c 19       	sub	r22, r12
    f48e:	7d 09       	sbc	r23, r13
    f490:	8e 09       	sbc	r24, r14
    f492:	9f 09       	sbc	r25, r15
    f494:	6a 30       	cpi	r22, 0x0A	; 10
    f496:	71 05       	cpc	r23, r1
    f498:	81 05       	cpc	r24, r1
    f49a:	91 05       	cpc	r25, r1
    f49c:	88 f3       	brcs	.-30     	; 0xf480 <setup+0x238>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      /// vstupni napeti 12V
      a2d_run_now = 0;
    f49e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
      a2d_start_first(A_DVANACTV);
    f4a2:	84 e0       	ldi	r24, 0x04	; 4
    f4a4:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      milis = millis();
    f4a8:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f4ac:	6b 01       	movw	r12, r22
    f4ae:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
      while (a2d_run_now == 0 && millis() - milis < 10);
    f4b0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <a2d_run_now>
    f4b4:	81 11       	cpse	r24, r1
    f4b6:	0b c0       	rjmp	.+22     	; 0xf4ce <setup+0x286>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665 (discriminator 1)
    f4b8:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f4bc:	6c 19       	sub	r22, r12
    f4be:	7d 09       	sbc	r23, r13
    f4c0:	8e 09       	sbc	r24, r14
    f4c2:	9f 09       	sbc	r25, r15
    f4c4:	6a 30       	cpi	r22, 0x0A	; 10
    f4c6:	71 05       	cpc	r23, r1
    f4c8:	81 05       	cpc	r24, r1
    f4ca:	91 05       	cpc	r25, r1
    f4cc:	88 f3       	brcs	.-30     	; 0xf4b0 <setup+0x268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    f4ce:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      a2d_start_first(A_LIGHT);
    f4d2:	87 e0       	ldi	r24, 0x07	; 7
    f4d4:	0e 94 aa d4 	call	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      milis = millis();
    f4d8:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f4dc:	6b 01       	movw	r12, r22
    f4de:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
      while (a2d_run_now == 0 && millis() - milis < 10);
    f4e0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <a2d_run_now>
    f4e4:	81 11       	cpse	r24, r1
    f4e6:	0b c0       	rjmp	.+22     	; 0xf4fe <setup+0x2b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670 (discriminator 1)
    f4e8:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
    f4ec:	6c 19       	sub	r22, r12
    f4ee:	7d 09       	sbc	r23, r13
    f4f0:	8e 09       	sbc	r24, r14
    f4f2:	9f 09       	sbc	r25, r15
    f4f4:	6a 30       	cpi	r22, 0x0A	; 10
    f4f6:	71 05       	cpc	r23, r1
    f4f8:	81 05       	cpc	r24, r1
    f4fa:	91 05       	cpc	r25, r1
    f4fc:	88 f3       	brcs	.-30     	; 0xf4e0 <setup+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    f4fe:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f502:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <tritri>
    f506:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <tritri+0x1>
    f50a:	25 e0       	ldi	r18, 0x05	; 5
    f50c:	28 9f       	mul	r18, r24
    f50e:	b0 01       	movw	r22, r0
    f510:	29 9f       	mul	r18, r25
    f512:	70 0d       	add	r23, r0
    f514:	11 24       	eor	r1, r1
    f516:	90 e0       	ldi	r25, 0x00	; 0
    f518:	80 e0       	ldi	r24, 0x00	; 0
    f51a:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    f51e:	20 e0       	ldi	r18, 0x00	; 0
    f520:	30 e0       	ldi	r19, 0x00	; 0
    f522:	4a e7       	ldi	r20, 0x7A	; 122
    f524:	54 e4       	ldi	r21, 0x44	; 68
    f526:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f52a:	8e 01       	movw	r16, r28
    f52c:	0c 5e       	subi	r16, 0xEC	; 236
    f52e:	1e 4f       	sbci	r17, 0xFE	; 254
    f530:	22 e0       	ldi	r18, 0x02	; 2
    f532:	44 e0       	ldi	r20, 0x04	; 4
    f534:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f538:	60 91 c6 0a 	lds	r22, 0x0AC6	; 0x800ac6 <petnula>
    f53c:	70 91 c7 0a 	lds	r23, 0x0AC7	; 0x800ac7 <petnula+0x1>
    f540:	e3 e0       	ldi	r30, 0x03	; 3
    f542:	66 0f       	add	r22, r22
    f544:	77 1f       	adc	r23, r23
    f546:	ea 95       	dec	r30
    f548:	e1 f7       	brne	.-8      	; 0xf542 <setup+0x2fa>
    f54a:	90 e0       	ldi	r25, 0x00	; 0
    f54c:	80 e0       	ldi	r24, 0x00	; 0
    f54e:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    f552:	20 e0       	ldi	r18, 0x00	; 0
    f554:	30 e0       	ldi	r19, 0x00	; 0
    f556:	4a e7       	ldi	r20, 0x7A	; 122
    f558:	54 e4       	ldi	r21, 0x44	; 68
    f55a:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f55e:	81 01       	movw	r16, r2
    f560:	22 e0       	ldi	r18, 0x02	; 2
    f562:	44 e0       	ldi	r20, 0x04	; 4
    f564:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
_Z15prepocet_napetijh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f568:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <dvanact>
    f56c:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <dvanact+0x1>
    f570:	29 e3       	ldi	r18, 0x39	; 57
    f572:	28 9f       	mul	r18, r24
    f574:	b0 01       	movw	r22, r0
    f576:	29 9f       	mul	r18, r25
    f578:	70 0d       	add	r23, r0
    f57a:	11 24       	eor	r1, r1
    f57c:	90 e0       	ldi	r25, 0x00	; 0
    f57e:	80 e0       	ldi	r24, 0x00	; 0
    f580:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
    f584:	20 e0       	ldi	r18, 0x00	; 0
    f586:	30 e0       	ldi	r19, 0x00	; 0
    f588:	4a e7       	ldi	r20, 0x7A	; 122
    f58a:	54 e4       	ldi	r21, 0x44	; 68
    f58c:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f590:	82 01       	movw	r16, r4
    f592:	22 e0       	ldi	r18, 0x02	; 2
    f594:	44 e0       	ldi	r20, 0x04	; 4
    f596:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
_Z15prepocet_prouduj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3356
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    f59a:	60 91 c2 0a 	lds	r22, 0x0AC2	; 0x800ac2 <proud>
    f59e:	70 91 c3 0a 	lds	r23, 0x0AC3	; 0x800ac3 <proud+0x1>
    f5a2:	90 e0       	ldi	r25, 0x00	; 0
    f5a4:	80 e0       	ldi	r24, 0x00	; 0
    f5a6:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f5aa:	84 01       	movw	r16, r8
    f5ac:	22 e0       	ldi	r18, 0x02	; 2
    f5ae:	44 e0       	ldi	r20, 0x04	; 4
    f5b0:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    f5b4:	9f 92       	push	r9
    f5b6:	8f 92       	push	r8
    f5b8:	5f 92       	push	r5
    f5ba:	4f 92       	push	r4
    f5bc:	3f 92       	push	r3
    f5be:	2f 92       	push	r2
    f5c0:	c1 5d       	subi	r28, 0xD1	; 209
    f5c2:	de 4f       	sbci	r29, 0xFE	; 254
    f5c4:	78 81       	ld	r23, Y
    f5c6:	cf 52       	subi	r28, 0x2F	; 47
    f5c8:	d1 40       	sbci	r29, 0x01	; 1
    f5ca:	7f 93       	push	r23
    f5cc:	c2 5d       	subi	r28, 0xD2	; 210
    f5ce:	de 4f       	sbci	r29, 0xFE	; 254
    f5d0:	88 81       	ld	r24, Y
    f5d2:	ce 52       	subi	r28, 0x2E	; 46
    f5d4:	d1 40       	sbci	r29, 0x01	; 1
    f5d6:	8f 93       	push	r24
    f5d8:	83 ee       	ldi	r24, 0xE3	; 227
    f5da:	97 e0       	ldi	r25, 0x07	; 7
    f5dc:	9f 93       	push	r25
    f5de:	8f 93       	push	r24
    f5e0:	bf 92       	push	r11
    f5e2:	af 92       	push	r10
    f5e4:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f5e8:	c1 2c       	mov	r12, r1
    f5ea:	ee 24       	eor	r14, r14
    f5ec:	ea 94       	dec	r14
    f5ee:	fe 2c       	mov	r15, r14
    f5f0:	00 ee       	ldi	r16, 0xE0	; 224
    f5f2:	17 e0       	ldi	r17, 0x07	; 7
    f5f4:	21 e0       	ldi	r18, 0x01	; 1
    f5f6:	42 e3       	ldi	r20, 0x32	; 50
    f5f8:	50 e0       	ldi	r21, 0x00	; 0
    f5fa:	60 ea       	ldi	r22, 0xA0	; 160
    f5fc:	70 e0       	ldi	r23, 0x00	; 0
    f5fe:	c5 01       	movw	r24, r10
    f600:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f604:	0f b6       	in	r0, 0x3f	; 63
    f606:	f8 94       	cli
    f608:	de bf       	out	0x3e, r29	; 62
    f60a:	0f be       	out	0x3f, r0	; 63
    f60c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3990
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    f60e:	c0 5d       	subi	r28, 0xD0	; 208
    f610:	de 4f       	sbci	r29, 0xFE	; 254
    f612:	88 81       	ld	r24, Y
    f614:	c0 53       	subi	r28, 0x30	; 48
    f616:	d1 40       	sbci	r29, 0x01	; 1
    f618:	8e 30       	cpi	r24, 0x0E	; 14
    f61a:	09 f0       	breq	.+2      	; 0xf61e <setup+0x3d6>
    f61c:	d2 c4       	rjmp	.+2468   	; 0xffc2 <__DATA_REGION_LENGTH__+0x1c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
    {
      strcpy_P(str1, text_ntp_cas);
    f61e:	60 e6       	ldi	r22, 0x60	; 96
    f620:	7b e5       	ldi	r23, 0x5B	; 91
    f622:	ce 01       	movw	r24, r28
    f624:	88 57       	subi	r24, 0x78	; 120
    f626:	9f 4f       	sbci	r25, 0xFF	; 255
    f628:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f62c:	c1 2c       	mov	r12, r1
    f62e:	ee 24       	eor	r14, r14
    f630:	ea 94       	dec	r14
    f632:	fe 2c       	mov	r15, r14
    f634:	00 ee       	ldi	r16, 0xE0	; 224
    f636:	17 e0       	ldi	r17, 0x07	; 7
    f638:	21 e0       	ldi	r18, 0x01	; 1
    f63a:	4e eb       	ldi	r20, 0xBE	; 190
    f63c:	50 e0       	ldi	r21, 0x00	; 0
    f63e:	6e e1       	ldi	r22, 0x1E	; 30
    f640:	70 e0       	ldi	r23, 0x00	; 0
    f642:	ce 01       	movw	r24, r28
    f644:	88 57       	subi	r24, 0x78	; 120
    f646:	9f 4f       	sbci	r25, 0xFF	; 255
    f648:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
      if (ntp_check(&timeClient) == 0)
    f64c:	ce 01       	movw	r24, r28
    f64e:	01 96       	adiw	r24, 0x01	; 1
    f650:	0e 94 d9 89 	call	0x113b2	; 0x113b2 <ntp_check(NTPClient*)>
    f654:	81 11       	cpse	r24, r1
    f656:	9c c4       	rjmp	.+2360   	; 0xff90 <__DATA_REGION_LENGTH__+0x190>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
      {
        strcpy_P(str1, text_err);
    f658:	6c e1       	ldi	r22, 0x1C	; 28
    f65a:	79 e5       	ldi	r23, 0x59	; 89
    f65c:	ce 01       	movw	r24, r28
    f65e:	88 57       	subi	r24, 0x78	; 120
    f660:	9f 4f       	sbci	r25, 0xFF	; 255
    f662:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f666:	00 e0       	ldi	r16, 0x00	; 0
    f668:	18 ef       	ldi	r17, 0xF8	; 248
    f66a:	21 e0       	ldi	r18, 0x01	; 1
    f66c:	4e eb       	ldi	r20, 0xBE	; 190
    f66e:	50 e0       	ldi	r21, 0x00	; 0
    f670:	60 ea       	ldi	r22, 0xA0	; 160
    f672:	70 e0       	ldi	r23, 0x00	; 0
    f674:	ce 01       	movw	r24, r28
    f676:	88 57       	subi	r24, 0x78	; 120
    f678:	9f 4f       	sbci	r25, 0xFF	; 255
    f67a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3998
        selftest_set_0(SELFTEST_ERR_NTP);
    f67e:	81 e0       	ldi	r24, 0x01	; 1
    f680:	68 c3       	rjmp	.+1744   	; 0xfd52 <setup+0xb0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    f682:	c0 5d       	subi	r28, 0xD0	; 208
    f684:	de 4f       	sbci	r29, 0xFE	; 254
    f686:	78 81       	ld	r23, Y
    f688:	c0 53       	subi	r28, 0x30	; 48
    f68a:	d1 40       	sbci	r29, 0x01	; 1
    f68c:	71 30       	cpi	r23, 0x01	; 1
    f68e:	09 f0       	breq	.+2      	; 0xf692 <setup+0x44a>
    f690:	42 c0       	rjmp	.+132    	; 0xf716 <setup+0x4ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f692:	61 ec       	ldi	r22, 0xC1	; 193
    f694:	7b e5       	ldi	r23, 0x5B	; 91
    f696:	ce 01       	movw	r24, r28
    f698:	88 57       	subi	r24, 0x78	; 120
    f69a:	9f 4f       	sbci	r25, 0xFF	; 255
    f69c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      strcat(str1, ":2");
    f6a0:	61 e0       	ldi	r22, 0x01	; 1
    f6a2:	78 e0       	ldi	r23, 0x08	; 8
    f6a4:	ce 01       	movw	r24, r28
    f6a6:	88 57       	subi	r24, 0x78	; 120
    f6a8:	9f 4f       	sbci	r25, 0xFF	; 255
    f6aa:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f6ae:	c1 2c       	mov	r12, r1
    f6b0:	ee 24       	eor	r14, r14
    f6b2:	ea 94       	dec	r14
    f6b4:	fe 2c       	mov	r15, r14
    f6b6:	00 ee       	ldi	r16, 0xE0	; 224
    f6b8:	17 e0       	ldi	r17, 0x07	; 7
    f6ba:	21 e0       	ldi	r18, 0x01	; 1
    f6bc:	4c e3       	ldi	r20, 0x3C	; 60
    f6be:	50 e0       	ldi	r21, 0x00	; 0
    f6c0:	6e e1       	ldi	r22, 0x1E	; 30
    f6c2:	70 e0       	ldi	r23, 0x00	; 0
    f6c4:	ce 01       	movw	r24, r28
    f6c6:	88 57       	subi	r24, 0x78	; 120
    f6c8:	9f 4f       	sbci	r25, 0xFF	; 255
    f6ca:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f6ce:	80 e6       	ldi	r24, 0x60	; 96
    f6d0:	9c e0       	ldi	r25, 0x0C	; 12
    f6d2:	0e 94 a6 38 	call	0x714c	; 0x714c <Temperature_LM75_Derived::readTemperatureC()>
    f6d6:	84 01       	movw	r16, r8
    f6d8:	22 e0       	ldi	r18, 0x02	; 2
    f6da:	44 e0       	ldi	r20, 0x04	; 4
    f6dc:	0e 94 28 dd 	call	0x1ba50	; 0x1ba50 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
      sprintf(str2, "iT=%sC", s_current);
    f6e0:	9f 92       	push	r9
    f6e2:	8f 92       	push	r8
    f6e4:	84 e0       	ldi	r24, 0x04	; 4
    f6e6:	98 e0       	ldi	r25, 0x08	; 8
    f6e8:	9f 93       	push	r25
    f6ea:	8f 93       	push	r24
    f6ec:	bf 92       	push	r11
    f6ee:	af 92       	push	r10
    f6f0:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f6f4:	00 ee       	ldi	r16, 0xE0	; 224
    f6f6:	17 e0       	ldi	r17, 0x07	; 7
    f6f8:	21 e0       	ldi	r18, 0x01	; 1
    f6fa:	4c e3       	ldi	r20, 0x3C	; 60
    f6fc:	50 e0       	ldi	r21, 0x00	; 0
    f6fe:	60 ea       	ldi	r22, 0xA0	; 160
    f700:	70 e0       	ldi	r23, 0x00	; 0
    f702:	c5 01       	movw	r24, r10
    f704:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    f708:	0f 90       	pop	r0
    f70a:	0f 90       	pop	r0
    f70c:	0f 90       	pop	r0
    f70e:	0f 90       	pop	r0
    f710:	0f 90       	pop	r0
    f712:	0f 90       	pop	r0
    f714:	7c cf       	rjmp	.-264    	; 0xf60e <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    f716:	c0 5d       	subi	r28, 0xD0	; 208
    f718:	de 4f       	sbci	r29, 0xFE	; 254
    f71a:	88 81       	ld	r24, Y
    f71c:	c0 53       	subi	r28, 0x30	; 48
    f71e:	d1 40       	sbci	r29, 0x01	; 1
    f720:	82 30       	cpi	r24, 0x02	; 2
    f722:	09 f0       	breq	.+2      	; 0xf726 <setup+0x4de>
    f724:	77 c1       	rjmp	.+750    	; 0xfa14 <setup+0x7cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
    {
      if (EEPROM.read(set_default_values) == 255)
    f726:	8a e5       	ldi	r24, 0x5A	; 90
    f728:	90 e0       	ldi	r25, 0x00	; 0
    f72a:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    f72e:	8f 3f       	cpi	r24, 0xFF	; 255
    f730:	09 f0       	breq	.+2      	; 0xf734 <setup+0x4ec>
    f732:	5d c1       	rjmp	.+698    	; 0xf9ee <setup+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
      {
        EEPROM.write(set_default_values, 0);
    f734:	60 e0       	ldi	r22, 0x00	; 0
    f736:	8a e5       	ldi	r24, 0x5A	; 90
    f738:	90 e0       	ldi	r25, 0x00	; 0
    f73a:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
        strcpy_P(str1, text_vychozi_nastaveni);
    f73e:	6b e3       	ldi	r22, 0x3B	; 59
    f740:	7b e5       	ldi	r23, 0x5B	; 91
    f742:	ce 01       	movw	r24, r28
    f744:	88 57       	subi	r24, 0x78	; 120
    f746:	9f 4f       	sbci	r25, 0xFF	; 255
    f748:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    f74c:	c1 2c       	mov	r12, r1
    f74e:	ee 24       	eor	r14, r14
    f750:	ea 94       	dec	r14
    f752:	fe 2c       	mov	r15, r14
    f754:	00 e0       	ldi	r16, 0x00	; 0
    f756:	18 ef       	ldi	r17, 0xF8	; 248
    f758:	21 e0       	ldi	r18, 0x01	; 1
    f75a:	46 e4       	ldi	r20, 0x46	; 70
    f75c:	50 e0       	ldi	r21, 0x00	; 0
    f75e:	6e e1       	ldi	r22, 0x1E	; 30
    f760:	70 e0       	ldi	r23, 0x00	; 0
    f762:	ce 01       	movw	r24, r28
    f764:	88 57       	subi	r24, 0x78	; 120
    f766:	9f 4f       	sbci	r25, 0xFF	; 255
    f768:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702

        set_default_show_temp(255);
    f76c:	8f ef       	ldi	r24, 0xFF	; 255
    f76e:	0e 94 60 48 	call	0x90c0	; 0x90c0 <set_default_show_temp(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    f772:	80 e0       	ldi	r24, 0x00	; 0
    f774:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
    f778:	81 e0       	ldi	r24, 0x01	; 1
    f77a:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
    f77e:	82 e0       	ldi	r24, 0x02	; 2
    f780:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
    f784:	83 e0       	ldi	r24, 0x03	; 3
    f786:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
    f78a:	84 e0       	ldi	r24, 0x04	; 4
    f78c:	0e 94 bc 94 	call	0x12978	; 0x12978 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f790:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709 (discriminator 2)
        {
          strcpy(tmp1, "");
    f792:	6e eb       	ldi	r22, 0xBE	; 190
    f794:	75 e0       	ldi	r23, 0x05	; 5
    f796:	ce 01       	movw	r24, r28
    f798:	82 52       	subi	r24, 0x22	; 34
    f79a:	9f 4f       	sbci	r25, 0xFF	; 255
    f79c:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710 (discriminator 2)
          remote_tds_clear(idx);
    f7a0:	81 2f       	mov	r24, r17
    f7a2:	0e 94 29 45 	call	0x8a52	; 0x8a52 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707 (discriminator 2)
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f7a6:	1f 5f       	subi	r17, 0xFF	; 255
    f7a8:	1a 30       	cpi	r17, 0x0A	; 10
    f7aa:	99 f7       	brne	.-26     	; 0xf792 <setup+0x54a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f7ac:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
        {
          strcpy_P(str2, text_prog);
    f7ae:	68 e6       	ldi	r22, 0x68	; 104
    f7b0:	79 e5       	ldi	r23, 0x59	; 89
    f7b2:	c5 01       	movw	r24, r10
    f7b4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
          thermostat_program_set_name(idx, str2);
    f7b8:	b5 01       	movw	r22, r10
    f7ba:	81 2f       	mov	r24, r17
    f7bc:	0e 94 6a 92 	call	0x124d4	; 0x124d4 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
          thermostat_program_set_active(idx, PROG_FREE);
    f7c0:	6f ef       	ldi	r22, 0xFF	; 255
    f7c2:	81 2f       	mov	r24, r17
    f7c4:	0e 94 9a 92 	call	0x12534	; 0x12534 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f7c8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720 (discriminator 2)
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    f7ca:	c1 2c       	mov	r12, r1
    f7cc:	e1 2c       	mov	r14, r1
    f7ce:	00 e0       	ldi	r16, 0x00	; 0
    f7d0:	20 e0       	ldi	r18, 0x00	; 0
    f7d2:	40 e0       	ldi	r20, 0x00	; 0
    f7d4:	6f 2d       	mov	r22, r15
    f7d6:	81 2f       	mov	r24, r17
    f7d8:	0e 94 f5 92 	call	0x125ea	; 0x125ea <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721 (discriminator 2)
            thermostat_program_set_threshold(idx, interval_id, 220);
    f7dc:	4c ed       	ldi	r20, 0xDC	; 220
    f7de:	50 e0       	ldi	r21, 0x00	; 0
    f7e0:	6f 2d       	mov	r22, r15
    f7e2:	81 2f       	mov	r24, r17
    f7e4:	0e 94 53 93 	call	0x126a6	; 0x126a6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722 (discriminator 2)
            thermostat_program_set_week(idx, interval_id, 0);
    f7e8:	40 e0       	ldi	r20, 0x00	; 0
    f7ea:	6f 2d       	mov	r22, r15
    f7ec:	81 2f       	mov	r24, r17
    f7ee:	0e 94 7c 93 	call	0x126f8	; 0x126f8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718 (discriminator 2)
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f7f2:	f3 94       	inc	r15
    f7f4:	9b e0       	ldi	r25, 0x0B	; 11
    f7f6:	f9 12       	cpse	r15, r25
    f7f8:	e8 cf       	rjmp	.-48     	; 0xf7ca <setup+0x582>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713 (discriminator 2)
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f7fa:	1f 5f       	subi	r17, 0xFF	; 255
    f7fc:	18 30       	cpi	r17, 0x08	; 8
    f7fe:	b9 f6       	brne	.-82     	; 0xf7ae <setup+0x566>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    f800:	5a e0       	ldi	r21, 0x0A	; 10
    f802:	f5 2e       	mov	r15, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    f804:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    f806:	be 01       	movw	r22, r28
    f808:	68 53       	subi	r22, 0x38	; 56
    f80a:	7f 4f       	sbci	r23, 0xFF	; 255
    f80c:	80 2f       	mov	r24, r16
    f80e:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
          strcpy(tds.name, "FREE");
    f812:	6b e0       	ldi	r22, 0x0B	; 11
    f814:	78 e0       	ldi	r23, 0x08	; 8
    f816:	cf 5c       	subi	r28, 0xCF	; 207
    f818:	de 4f       	sbci	r29, 0xFE	; 254
    f81a:	88 81       	ld	r24, Y
    f81c:	99 81       	ldd	r25, Y+1	; 0x01
    f81e:	c1 53       	subi	r28, 0x31	; 49
    f820:	d1 40       	sbci	r29, 0x01	; 1
    f822:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
          tds.used = 0;
    f826:	c8 53       	subi	r28, 0x38	; 56
    f828:	df 4f       	sbci	r29, 0xFF	; 255
    f82a:	18 82       	st	Y, r1
    f82c:	c8 5c       	subi	r28, 0xC8	; 200
    f82e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
          tds.offset = 0;
    f830:	ce 52       	subi	r28, 0x2E	; 46
    f832:	df 4f       	sbci	r29, 0xFF	; 255
    f834:	19 82       	std	Y+1, r1	; 0x01
    f836:	18 82       	st	Y, r1
    f838:	c2 5d       	subi	r28, 0xD2	; 210
    f83a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3732
          tds.assigned_ds2482 = 0;
    f83c:	cf 52       	subi	r28, 0x2F	; 47
    f83e:	df 4f       	sbci	r29, 0xFF	; 255
    f840:	18 82       	st	Y, r1
    f842:	c1 5d       	subi	r28, 0xD1	; 209
    f844:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
          tds.period = 10;
    f846:	c4 52       	subi	r28, 0x24	; 36
    f848:	df 4f       	sbci	r29, 0xFF	; 255
    f84a:	f8 82       	st	Y, r15
    f84c:	cc 5d       	subi	r28, 0xDC	; 220
    f84e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    f850:	c7 53       	subi	r28, 0x37	; 55
    f852:	df 4f       	sbci	r29, 0xFF	; 255
    f854:	18 83       	st	Y, r17
    f856:	c9 5c       	subi	r28, 0xC9	; 201
    f858:	d0 40       	sbci	r29, 0x00	; 0
    f85a:	c6 53       	subi	r28, 0x36	; 54
    f85c:	df 4f       	sbci	r29, 0xFF	; 255
    f85e:	18 83       	st	Y, r17
    f860:	ca 5c       	subi	r28, 0xCA	; 202
    f862:	d0 40       	sbci	r29, 0x00	; 0
    f864:	c5 53       	subi	r28, 0x35	; 53
    f866:	df 4f       	sbci	r29, 0xFF	; 255
    f868:	18 83       	st	Y, r17
    f86a:	cb 5c       	subi	r28, 0xCB	; 203
    f86c:	d0 40       	sbci	r29, 0x00	; 0
    f86e:	c4 53       	subi	r28, 0x34	; 52
    f870:	df 4f       	sbci	r29, 0xFF	; 255
    f872:	18 83       	st	Y, r17
    f874:	cc 5c       	subi	r28, 0xCC	; 204
    f876:	d0 40       	sbci	r29, 0x00	; 0
    f878:	c3 53       	subi	r28, 0x33	; 51
    f87a:	df 4f       	sbci	r29, 0xFF	; 255
    f87c:	18 83       	st	Y, r17
    f87e:	cd 5c       	subi	r28, 0xCD	; 205
    f880:	d0 40       	sbci	r29, 0x00	; 0
    f882:	c2 53       	subi	r28, 0x32	; 50
    f884:	df 4f       	sbci	r29, 0xFF	; 255
    f886:	18 83       	st	Y, r17
    f888:	ce 5c       	subi	r28, 0xCE	; 206
    f88a:	d0 40       	sbci	r29, 0x00	; 0
    f88c:	c1 53       	subi	r28, 0x31	; 49
    f88e:	df 4f       	sbci	r29, 0xFF	; 255
    f890:	18 83       	st	Y, r17
    f892:	cf 5c       	subi	r28, 0xCF	; 207
    f894:	d0 40       	sbci	r29, 0x00	; 0
    f896:	c0 53       	subi	r28, 0x30	; 48
    f898:	df 4f       	sbci	r29, 0xFF	; 255
    f89a:	18 83       	st	Y, r17
    f89c:	c0 5d       	subi	r28, 0xD0	; 208
    f89e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
          set_tds18s20(idx, &tds);
    f8a0:	be 01       	movw	r22, r28
    f8a2:	68 53       	subi	r22, 0x38	; 56
    f8a4:	7f 4f       	sbci	r23, 0xFF	; 255
    f8a6:	80 2f       	mov	r24, r16
    f8a8:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    f8ac:	0f 5f       	subi	r16, 0xFF	; 255
    f8ae:	06 30       	cpi	r16, 0x06	; 6
    f8b0:	09 f0       	breq	.+2      	; 0xf8b4 <setup+0x66c>
    f8b2:	a9 cf       	rjmp	.-174    	; 0xf806 <setup+0x5be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    f8b4:	c1 2c       	mov	r12, r1
    f8b6:	ae e0       	ldi	r26, 0x0E	; 14
    f8b8:	ea 2e       	mov	r14, r26
    f8ba:	01 e1       	ldi	r16, 0x11	; 17
    f8bc:	2e e0       	ldi	r18, 0x0E	; 14
    f8be:	4c e0       	ldi	r20, 0x0C	; 12
    f8c0:	64 ee       	ldi	r22, 0xE4	; 228
    f8c2:	77 e0       	ldi	r23, 0x07	; 7
    f8c4:	ce 01       	movw	r24, r28
    f8c6:	8e 50       	subi	r24, 0x0E	; 14
    f8c8:	9f 4f       	sbci	r25, 0xFF	; 255
    f8ca:	0e 94 1e cb 	call	0x1963c	; 0x1963c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    f8ce:	ce 01       	movw	r24, r28
    f8d0:	8e 50       	subi	r24, 0x0E	; 14
    f8d2:	9f 4f       	sbci	r25, 0xFF	; 255
    f8d4:	0e 94 45 cb 	call	0x1968a	; 0x1968a <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
        time_set_offset(1);
    f8d8:	81 e0       	ldi	r24, 0x01	; 1
    f8da:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <time_set_offset(signed char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    f8de:	82 e0       	ldi	r24, 0x02	; 2
    f8e0:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <device>
    f8e4:	91 e0       	ldi	r25, 0x01	; 1
    f8e6:	90 93 09 11 	sts	0x1109, r25	; 0x801109 <device+0x1>
    f8ea:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <device+0x2>
    f8ee:	20 91 c4 0a 	lds	r18, 0x0AC4	; 0x800ac4 <dvanact>
    f8f2:	30 91 c5 0a 	lds	r19, 0x0AC5	; 0x800ac5 <dvanact+0x1>
    f8f6:	36 95       	lsr	r19
    f8f8:	27 95       	ror	r18
    f8fa:	20 93 0b 11 	sts	0x110B, r18	; 0x80110b <device+0x3>
    f8fe:	20 91 c0 0a 	lds	r18, 0x0AC0	; 0x800ac0 <light_curr>
    f902:	30 91 c1 0a 	lds	r19, 0x0AC1	; 0x800ac1 <light_curr+0x1>
    f906:	36 95       	lsr	r19
    f908:	27 95       	ror	r18
    f90a:	20 93 0c 11 	sts	0x110C, r18	; 0x80110c <device+0x4>
    f90e:	20 91 c2 0a 	lds	r18, 0x0AC2	; 0x800ac2 <proud>
    f912:	30 91 c3 0a 	lds	r19, 0x0AC3	; 0x800ac3 <proud+0x1>
    f916:	36 95       	lsr	r19
    f918:	27 95       	ror	r18
    f91a:	20 93 0d 11 	sts	0x110D, r18	; 0x80110d <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
    f91e:	30 ec       	ldi	r19, 0xC0	; 192
    f920:	30 93 0e 11 	sts	0x110E, r19	; 0x80110e <device+0x6>
    f924:	28 ea       	ldi	r18, 0xA8	; 168
    f926:	20 93 0f 11 	sts	0x110F, r18	; 0x80110f <device+0x7>
    f92a:	80 93 10 11 	sts	0x1110, r24	; 0x801110 <device+0x8>
    f92e:	4f e6       	ldi	r20, 0x6F	; 111
    f930:	40 93 11 11 	sts	0x1111, r20	; 0x801111 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    f934:	10 93 12 11 	sts	0x1112, r17	; 0x801112 <device+0xa>
    f938:	10 93 13 11 	sts	0x1113, r17	; 0x801113 <device+0xb>
    f93c:	10 93 14 11 	sts	0x1114, r17	; 0x801114 <device+0xc>
    f940:	10 92 15 11 	sts	0x1115, r1	; 0x801115 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    f944:	30 93 1a 11 	sts	0x111A, r19	; 0x80111a <device+0x12>
    f948:	20 93 1b 11 	sts	0x111B, r18	; 0x80111b <device+0x13>
    f94c:	80 93 1c 11 	sts	0x111C, r24	; 0x80111c <device+0x14>
    f950:	90 93 1d 11 	sts	0x111D, r25	; 0x80111d <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    f954:	30 93 16 11 	sts	0x1116, r19	; 0x801116 <device+0xe>
    f958:	20 93 17 11 	sts	0x1117, r18	; 0x801117 <device+0xf>
    f95c:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <device+0x10>
    f960:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    f964:	30 93 28 11 	sts	0x1128, r19	; 0x801128 <device+0x20>
    f968:	20 93 29 11 	sts	0x1129, r18	; 0x801129 <device+0x21>
    f96c:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <device+0x22>
    f970:	90 93 2b 11 	sts	0x112B, r25	; 0x80112b <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    f974:	30 93 56 11 	sts	0x1156, r19	; 0x801156 <device+0x4e>
    f978:	20 93 57 11 	sts	0x1157, r18	; 0x801157 <device+0x4f>
    f97c:	80 93 58 11 	sts	0x1158, r24	; 0x801158 <device+0x50>
    f980:	90 93 59 11 	sts	0x1159, r25	; 0x801159 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
        device.mqtt_port = 1883;
    f984:	8b e5       	ldi	r24, 0x5B	; 91
    f986:	97 e0       	ldi	r25, 0x07	; 7
    f988:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <device+0x25>
    f98c:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
        strcpy(device.mqtt_user, "saric");
    f990:	60 e1       	ldi	r22, 0x10	; 16
    f992:	78 e0       	ldi	r23, 0x08	; 8
    f994:	8e e2       	ldi	r24, 0x2E	; 46
    f996:	91 e1       	ldi	r25, 0x11	; 17
    f998:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
        strcpy(device.mqtt_key, "no");
    f99c:	66 e1       	ldi	r22, 0x16	; 22
    f99e:	78 e0       	ldi	r23, 0x08	; 8
    f9a0:	82 e4       	ldi	r24, 0x42	; 66
    f9a2:	91 e1       	ldi	r25, 0x11	; 17
    f9a4:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
        save_setup_network();
    f9a8:	0e 94 43 84 	call	0x10886	; 0x10886 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
        strcpy(str1, "TERM D2");
    f9ac:	69 e1       	ldi	r22, 0x19	; 25
    f9ae:	78 e0       	ldi	r23, 0x08	; 8
    f9b0:	ce 01       	movw	r24, r28
    f9b2:	88 57       	subi	r24, 0x78	; 120
    f9b4:	9f 4f       	sbci	r25, 0xFF	; 255
    f9b6:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
        device_set_name(str1);
    f9ba:	ce 01       	movw	r24, r28
    f9bc:	88 57       	subi	r24, 0x78	; 120
    f9be:	9f 4f       	sbci	r25, 0xFF	; 255
    f9c0:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
        char hostname[10];
        device_get_name(hostname);
    f9c4:	ce 01       	movw	r24, r28
    f9c6:	8e 50       	subi	r24, 0x0E	; 14
    f9c8:	9f 4f       	sbci	r25, 0xFF	; 255
    f9ca:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
        default_ring = NO_DEFAULT_RING;
    f9ce:	10 93 aa 0a 	sts	0x0AAA, r17	; 0x800aaa <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
        set_default_ring(default_ring);
    f9d2:	8f ef       	ldi	r24, 0xFF	; 255
    f9d4:	0e 94 57 48 	call	0x90ae	; 0x90ae <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
        EEPROM.write(my_brightness_values, 50);
    f9d8:	62 e3       	ldi	r22, 0x32	; 50
    f9da:	8e e5       	ldi	r24, 0x5E	; 94
    f9dc:	90 e0       	ldi	r25, 0x00	; 0
    f9de:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
        EEPROM.write(my_brightness_mode, 0);
    f9e2:	60 e0       	ldi	r22, 0x00	; 0
    f9e4:	8f e5       	ldi	r24, 0x5F	; 95
    f9e6:	90 e0       	ldi	r25, 0x00	; 0
    f9e8:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <EEPROMClass::write(int, unsigned char) [clone .isra.7]>
    f9ec:	10 ce       	rjmp	.-992    	; 0xf60e <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3764
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    f9ee:	6f e2       	ldi	r22, 0x2F	; 47
    f9f0:	7b e5       	ldi	r23, 0x5B	; 91
    f9f2:	ce 01       	movw	r24, r28
    f9f4:	88 57       	subi	r24, 0x78	; 120
    f9f6:	9f 4f       	sbci	r25, 0xFF	; 255
    f9f8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f9fc:	c1 2c       	mov	r12, r1
    f9fe:	ee 24       	eor	r14, r14
    fa00:	ea 94       	dec	r14
    fa02:	fe 2c       	mov	r15, r14
    fa04:	00 ee       	ldi	r16, 0xE0	; 224
    fa06:	17 e0       	ldi	r17, 0x07	; 7
    fa08:	21 e0       	ldi	r18, 0x01	; 1
    fa0a:	46 e4       	ldi	r20, 0x46	; 70
    fa0c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fa0e:	6e e1       	ldi	r22, 0x1E	; 30
    fa10:	70 e0       	ldi	r23, 0x00	; 0
    fa12:	47 c0       	rjmp	.+142    	; 0xfaa2 <setup+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    fa14:	c0 5d       	subi	r28, 0xD0	; 208
    fa16:	de 4f       	sbci	r29, 0xFE	; 254
    fa18:	28 81       	ld	r18, Y
    fa1a:	c0 53       	subi	r28, 0x30	; 48
    fa1c:	d1 40       	sbci	r29, 0x01	; 1
    fa1e:	23 30       	cpi	r18, 0x03	; 3
    fa20:	09 f0       	breq	.+2      	; 0xfa24 <setup+0x7dc>
    fa22:	5b c0       	rjmp	.+182    	; 0xfada <setup+0x892>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
    {
      SRAM.begin();
    fa24:	83 ee       	ldi	r24, 0xE3	; 227
    fa26:	9a e0       	ldi	r25, 0x0A	; 10
    fa28:	0e 94 6e ac 	call	0x158dc	; 0x158dc <SRAM_23LC::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
      SRAM.writeByte(0, 0xAB);
    fa2c:	2b ea       	ldi	r18, 0xAB	; 171
    fa2e:	40 e0       	ldi	r20, 0x00	; 0
    fa30:	50 e0       	ldi	r21, 0x00	; 0
    fa32:	ba 01       	movw	r22, r20
    fa34:	83 ee       	ldi	r24, 0xE3	; 227
    fa36:	9a e0       	ldi	r25, 0x0A	; 10
    fa38:	0e 94 b3 ac 	call	0x15966	; 0x15966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
      if (SRAM.readByte(0) == 0xAB)
    fa3c:	40 e0       	ldi	r20, 0x00	; 0
    fa3e:	50 e0       	ldi	r21, 0x00	; 0
    fa40:	ba 01       	movw	r22, r20
    fa42:	83 ee       	ldi	r24, 0xE3	; 227
    fa44:	9a e0       	ldi	r25, 0x0A	; 10
    fa46:	0e 94 8e ac 	call	0x1591c	; 0x1591c <SRAM_23LC::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
      {
        strcpy_P(str1, text_test_ram);
    fa4a:	62 e2       	ldi	r22, 0x22	; 34
    fa4c:	7b e5       	ldi	r23, 0x5B	; 91
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    fa4e:	8b 3a       	cpi	r24, 0xAB	; 171
    fa50:	71 f5       	brne	.+92     	; 0xfaae <setup+0x866>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
      {
        strcpy_P(str1, text_test_ram);
    fa52:	ce 01       	movw	r24, r28
    fa54:	88 57       	subi	r24, 0x78	; 120
    fa56:	9f 4f       	sbci	r25, 0xFF	; 255
    fa58:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
        strcat(str1, " init ...");
    fa5c:	61 e2       	ldi	r22, 0x21	; 33
    fa5e:	78 e0       	ldi	r23, 0x08	; 8
    fa60:	ce 01       	movw	r24, r28
    fa62:	88 57       	subi	r24, 0x78	; 120
    fa64:	9f 4f       	sbci	r25, 0xFF	; 255
    fa66:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fa6a:	c1 2c       	mov	r12, r1
    fa6c:	ee 24       	eor	r14, r14
    fa6e:	ea 94       	dec	r14
    fa70:	fe 2c       	mov	r15, r14
    fa72:	00 ee       	ldi	r16, 0xE0	; 224
    fa74:	17 e0       	ldi	r17, 0x07	; 7
    fa76:	21 e0       	ldi	r18, 0x01	; 1
    fa78:	40 e5       	ldi	r20, 0x50	; 80
    fa7a:	50 e0       	ldi	r21, 0x00	; 0
    fa7c:	6e e1       	ldi	r22, 0x1E	; 30
    fa7e:	70 e0       	ldi	r23, 0x00	; 0
    fa80:	ce 01       	movw	r24, r28
    fa82:	88 57       	subi	r24, 0x78	; 120
    fa84:	9f 4f       	sbci	r25, 0xFF	; 255
    fa86:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    fa8a:	69 e1       	ldi	r22, 0x19	; 25
    fa8c:	79 e5       	ldi	r23, 0x59	; 89
    fa8e:	ce 01       	movw	r24, r28
    fa90:	88 57       	subi	r24, 0x78	; 120
    fa92:	9f 4f       	sbci	r25, 0xFF	; 255
    fa94:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fa98:	21 e0       	ldi	r18, 0x01	; 1
    fa9a:	40 e5       	ldi	r20, 0x50	; 80
    fa9c:	50 e0       	ldi	r21, 0x00	; 0
    fa9e:	62 ed       	ldi	r22, 0xD2	; 210
    faa0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    faa2:	ce 01       	movw	r24, r28
    faa4:	88 57       	subi	r24, 0x78	; 120
    faa6:	9f 4f       	sbci	r25, 0xFF	; 255
    faa8:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    faac:	b0 cd       	rjmp	.-1184   	; 0xf60e <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    faae:	ce 01       	movw	r24, r28
    fab0:	88 57       	subi	r24, 0x78	; 120
    fab2:	9f 4f       	sbci	r25, 0xFF	; 255
    fab4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
        strcat_P(str1, text_err);
    fab8:	6c e1       	ldi	r22, 0x1C	; 28
    faba:	79 e5       	ldi	r23, 0x59	; 89
    fabc:	ce 01       	movw	r24, r28
    fabe:	88 57       	subi	r24, 0x78	; 120
    fac0:	9f 4f       	sbci	r25, 0xFF	; 255
    fac2:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fac6:	c1 2c       	mov	r12, r1
    fac8:	ee 24       	eor	r14, r14
    faca:	ea 94       	dec	r14
    facc:	fe 2c       	mov	r15, r14
    face:	00 e0       	ldi	r16, 0x00	; 0
    fad0:	18 ef       	ldi	r17, 0xF8	; 248
    fad2:	21 e0       	ldi	r18, 0x01	; 1
    fad4:	40 e5       	ldi	r20, 0x50	; 80
    fad6:	50 e0       	ldi	r21, 0x00	; 0
    fad8:	9a cf       	rjmp	.-204    	; 0xfa0e <setup+0x7c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
      }
    }

    //// init EEPROMKY
    if (init == 4)
    fada:	c0 5d       	subi	r28, 0xD0	; 208
    fadc:	de 4f       	sbci	r29, 0xFE	; 254
    fade:	68 81       	ld	r22, Y
    fae0:	c0 53       	subi	r28, 0x30	; 48
    fae2:	d1 40       	sbci	r29, 0x01	; 1
    fae4:	64 30       	cpi	r22, 0x04	; 4
    fae6:	09 f0       	breq	.+2      	; 0xfaea <setup+0x8a2>
    fae8:	bd c2       	rjmp	.+1402   	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
    {
      SROM.begin();
    faea:	84 ed       	ldi	r24, 0xD4	; 212
    faec:	9a e0       	ldi	r25, 0x0A	; 10
    faee:	0e 94 b2 ad 	call	0x15b64	; 0x15b64 <EEPROM_CAT25::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
      SROM.writeByte(0, 0xBA);
    faf2:	2a eb       	ldi	r18, 0xBA	; 186
    faf4:	40 e0       	ldi	r20, 0x00	; 0
    faf6:	50 e0       	ldi	r21, 0x00	; 0
    faf8:	ba 01       	movw	r22, r20
    fafa:	84 ed       	ldi	r24, 0xD4	; 212
    fafc:	9a e0       	ldi	r25, 0x0A	; 10
    fafe:	0e 94 9f ae 	call	0x15d3e	; 0x15d3e <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
      if (SROM.readByte(0) == 0xBA)
    fb02:	40 e0       	ldi	r20, 0x00	; 0
    fb04:	50 e0       	ldi	r21, 0x00	; 0
    fb06:	ba 01       	movw	r22, r20
    fb08:	84 ed       	ldi	r24, 0xD4	; 212
    fb0a:	9a e0       	ldi	r25, 0x0A	; 10
    fb0c:	0e 94 6b ae 	call	0x15cd6	; 0x15cd6 <EEPROM_CAT25::readByte(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810

      {
        strcpy_P(str1, text_test_eeprom);
    fb10:	62 e1       	ldi	r22, 0x12	; 18
    fb12:	7b e5       	ldi	r23, 0x5B	; 91
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
    //// init EEPROMKY
    if (init == 4)
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    fb14:	8a 3b       	cpi	r24, 0xBA	; 186
    fb16:	e9 f4       	brne	.+58     	; 0xfb52 <setup+0x90a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810

      {
        strcpy_P(str1, text_test_eeprom);
    fb18:	ce 01       	movw	r24, r28
    fb1a:	88 57       	subi	r24, 0x78	; 120
    fb1c:	9f 4f       	sbci	r25, 0xFF	; 255
    fb1e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
        strcat_P(str1, text_ok);
    fb22:	69 e1       	ldi	r22, 0x19	; 25
    fb24:	79 e5       	ldi	r23, 0x59	; 89
    fb26:	ce 01       	movw	r24, r28
    fb28:	88 57       	subi	r24, 0x78	; 120
    fb2a:	9f 4f       	sbci	r25, 0xFF	; 255
    fb2c:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fb30:	c1 2c       	mov	r12, r1
    fb32:	ee 24       	eor	r14, r14
    fb34:	ea 94       	dec	r14
    fb36:	fe 2c       	mov	r15, r14
    fb38:	00 ee       	ldi	r16, 0xE0	; 224
    fb3a:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fb3c:	21 e0       	ldi	r18, 0x01	; 1
    fb3e:	4a e5       	ldi	r20, 0x5A	; 90
    fb40:	50 e0       	ldi	r21, 0x00	; 0
    fb42:	6e e1       	ldi	r22, 0x1E	; 30
    fb44:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fb46:	ce 01       	movw	r24, r28
    fb48:	88 57       	subi	r24, 0x78	; 120
    fb4a:	9f 4f       	sbci	r25, 0xFF	; 255
    fb4c:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    fb50:	4d c0       	rjmp	.+154    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3816
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    fb52:	ce 01       	movw	r24, r28
    fb54:	88 57       	subi	r24, 0x78	; 120
    fb56:	9f 4f       	sbci	r25, 0xFF	; 255
    fb58:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817
        strcat_P(str1, text_err);
    fb5c:	6c e1       	ldi	r22, 0x1C	; 28
    fb5e:	79 e5       	ldi	r23, 0x59	; 89
    fb60:	ce 01       	movw	r24, r28
    fb62:	88 57       	subi	r24, 0x78	; 120
    fb64:	9f 4f       	sbci	r25, 0xFF	; 255
    fb66:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fb6a:	c1 2c       	mov	r12, r1
    fb6c:	ee 24       	eor	r14, r14
    fb6e:	ea 94       	dec	r14
    fb70:	fe 2c       	mov	r15, r14
    fb72:	00 e0       	ldi	r16, 0x00	; 0
    fb74:	18 ef       	ldi	r17, 0xF8	; 248
    fb76:	e2 cf       	rjmp	.-60     	; 0xfb3c <setup+0x8f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    fb78:	6d ee       	ldi	r22, 0xED	; 237
    fb7a:	7b e5       	ldi	r23, 0x5B	; 91
    fb7c:	ce 01       	movw	r24, r28
    fb7e:	88 57       	subi	r24, 0x78	; 120
    fb80:	9f 4f       	sbci	r25, 0xFF	; 255
    fb82:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fb86:	c1 2c       	mov	r12, r1
    fb88:	ee 24       	eor	r14, r14
    fb8a:	ea 94       	dec	r14
    fb8c:	fe 2c       	mov	r15, r14
    fb8e:	00 ee       	ldi	r16, 0xE0	; 224
    fb90:	17 e0       	ldi	r17, 0x07	; 7
    fb92:	21 e0       	ldi	r18, 0x01	; 1
    fb94:	44 e6       	ldi	r20, 0x64	; 100
    fb96:	50 e0       	ldi	r21, 0x00	; 0
    fb98:	6e e1       	ldi	r22, 0x1E	; 30
    fb9a:	70 e0       	ldi	r23, 0x00	; 0
    fb9c:	ce 01       	movw	r24, r28
    fb9e:	88 57       	subi	r24, 0x78	; 120
    fba0:	9f 4f       	sbci	r25, 0xFF	; 255
    fba2:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828
      /// nactu nastaveni site
      load_setup_network();
    fba6:	0e 94 9c 83 	call	0x10738	; 0x10738 <load_setup_network()>
    fbaa:	4e ea       	ldi	r20, 0xAE	; 174
    fbac:	51 e1       	ldi	r21, 0x11	; 17
    fbae:	26 e0       	ldi	r18, 0x06	; 6
    fbb0:	90 e0       	ldi	r25, 0x00	; 0
    fbb2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832 (discriminator 2)
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    fbb4:	fc 01       	movw	r30, r24
    fbb6:	ee 0f       	add	r30, r30
    fbb8:	ff 1f       	adc	r31, r31
    fbba:	e4 0f       	add	r30, r20
    fbbc:	f5 1f       	adc	r31, r21
    fbbe:	60 e2       	ldi	r22, 0x20	; 32
    fbc0:	7e e4       	ldi	r23, 0x4E	; 78
    fbc2:	70 87       	std	Z+8, r23	; 0x08
    fbc4:	67 83       	std	Z+7, r22	; 0x07
    fbc6:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831 (discriminator 2)
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    fbc8:	8a 30       	cpi	r24, 0x0A	; 10
    fbca:	91 05       	cpc	r25, r1
    fbcc:	99 f7       	brne	.-26     	; 0xfbb4 <setup+0x96c>
    fbce:	21 50       	subi	r18, 0x01	; 1
    fbd0:	42 5e       	subi	r20, 0xE2	; 226
    fbd2:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830 (discriminator 2)
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    fbd4:	21 11       	cpse	r18, r1
    fbd6:	ec cf       	rjmp	.-40     	; 0xfbb0 <setup+0x968>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3835
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    fbd8:	10 92 cb 0a 	sts	0x0ACB, r1	; 0x800acb <last_output_update>
    fbdc:	10 92 cc 0a 	sts	0x0ACC, r1	; 0x800acc <last_output_update+0x1>
    fbe0:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <last_output_update+0x2>
    fbe4:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <last_output_update+0x3>
    fbe8:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627 (discriminator 2)
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    fbec:	c0 5d       	subi	r28, 0xD0	; 208
    fbee:	de 4f       	sbci	r29, 0xFE	; 254
    fbf0:	28 81       	ld	r18, Y
    fbf2:	c0 53       	subi	r28, 0x30	; 48
    fbf4:	d1 40       	sbci	r29, 0x01	; 1
    fbf6:	2f 5f       	subi	r18, 0xFF	; 255
    fbf8:	c0 5d       	subi	r28, 0xD0	; 208
    fbfa:	de 4f       	sbci	r29, 0xFE	; 254
    fbfc:	28 83       	st	Y, r18
    fbfe:	c0 53       	subi	r28, 0x30	; 48
    fc00:	d1 40       	sbci	r29, 0x01	; 1
    fc02:	6f e0       	ldi	r22, 0x0F	; 15
    fc04:	66 0e       	add	r6, r22
    fc06:	71 1c       	adc	r7, r1
    fc08:	20 31       	cpi	r18, 0x10	; 16
    fc0a:	09 f0       	breq	.+2      	; 0xfc0e <setup+0x9c6>
    fc0c:	b8 cb       	rjmp	.-2192   	; 0xf37e <setup+0x136>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    fc0e:	64 ef       	ldi	r22, 0xF4	; 244
    fc10:	71 e0       	ldi	r23, 0x01	; 1
    fc12:	80 e0       	ldi	r24, 0x00	; 0
    fc14:	90 e0       	ldi	r25, 0x00	; 0
    fc16:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4029
  MenuPrepareStyle();
    fc1a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4030
  draw_menu(true);
    fc1e:	81 e0       	ldi	r24, 0x01	; 1
    fc20:	0e 94 88 56 	call	0xad10	; 0xad10 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
  a2d_run_now = 1;
    fc24:	81 e0       	ldi	r24, 0x01	; 1
    fc26:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033

}
    fc2a:	ce 5c       	subi	r28, 0xCE	; 206
    fc2c:	de 4f       	sbci	r29, 0xFE	; 254
    fc2e:	0f b6       	in	r0, 0x3f	; 63
    fc30:	f8 94       	cli
    fc32:	de bf       	out	0x3e, r29	; 62
    fc34:	0f be       	out	0x3f, r0	; 63
    fc36:	cd bf       	out	0x3d, r28	; 61
    fc38:	df 91       	pop	r29
    fc3a:	cf 91       	pop	r28
    fc3c:	1f 91       	pop	r17
    fc3e:	0f 91       	pop	r16
    fc40:	ff 90       	pop	r15
    fc42:	ef 90       	pop	r14
    fc44:	df 90       	pop	r13
    fc46:	cf 90       	pop	r12
    fc48:	bf 90       	pop	r11
    fc4a:	af 90       	pop	r10
    fc4c:	9f 90       	pop	r9
    fc4e:	8f 90       	pop	r8
    fc50:	7f 90       	pop	r7
    fc52:	6f 90       	pop	r6
    fc54:	5f 90       	pop	r5
    fc56:	4f 90       	pop	r4
    fc58:	3f 90       	pop	r3
    fc5a:	2f 90       	pop	r2
    fc5c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    fc5e:	6f ef       	ldi	r22, 0xFF	; 255
    fc60:	7b e5       	ldi	r23, 0x5B	; 91
    fc62:	ce 01       	movw	r24, r28
    fc64:	88 57       	subi	r24, 0x78	; 120
    fc66:	9f 4f       	sbci	r25, 0xFF	; 255
    fc68:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fc6c:	c1 2c       	mov	r12, r1
    fc6e:	ee 24       	eor	r14, r14
    fc70:	ea 94       	dec	r14
    fc72:	fe 2c       	mov	r15, r14
    fc74:	00 ee       	ldi	r16, 0xE0	; 224
    fc76:	17 e0       	ldi	r17, 0x07	; 7
    fc78:	21 e0       	ldi	r18, 0x01	; 1
    fc7a:	4e e6       	ldi	r20, 0x6E	; 110
    fc7c:	50 e0       	ldi	r21, 0x00	; 0
    fc7e:	6e e1       	ldi	r22, 0x1E	; 30
    fc80:	70 e0       	ldi	r23, 0x00	; 0
    fc82:	ce 01       	movw	r24, r28
    fc84:	88 57       	subi	r24, 0x78	; 120
    fc86:	9f 4f       	sbci	r25, 0xFF	; 255
    fc88:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    fc8c:	81 e2       	ldi	r24, 0x21	; 33
    fc8e:	9c e0       	ldi	r25, 0x0C	; 12
    fc90:	0e 94 91 97 	call	0x12f22	; 0x12f22 <LCDWIKI_GUI::Get_Display_Height() const>
    fc94:	8c 01       	movw	r16, r24
    fc96:	81 e2       	ldi	r24, 0x21	; 33
    fc98:	9c e0       	ldi	r25, 0x0C	; 12
    fc9a:	0e 94 30 97 	call	0x12e60	; 0x12e60 <LCDWIKI_GUI::Get_Display_Width() const>
    fc9e:	7c 01       	movw	r14, r24
    fca0:	81 e2       	ldi	r24, 0x21	; 33
    fca2:	9c e0       	ldi	r25, 0x0C	; 12
    fca4:	0e 94 3a a6 	call	0x14c74	; 0x14c74 <LCDWIKI_KBV::Get_Rotation() const>
    fca8:	98 01       	movw	r18, r16
    fcaa:	a7 01       	movw	r20, r14
    fcac:	68 2f       	mov	r22, r24
    fcae:	8f ef       	ldi	r24, 0xFF	; 255
    fcb0:	9b e0       	ldi	r25, 0x0B	; 11
    fcb2:	0e 94 bc a8 	call	0x15178	; 0x15178 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
      my_touch.TP_Set_Rotation(3);
    fcb6:	63 e0       	ldi	r22, 0x03	; 3
    fcb8:	8f ef       	ldi	r24, 0xFF	; 255
    fcba:	9b e0       	ldi	r25, 0x0B	; 11
    fcbc:	0e 94 22 ab 	call	0x15644	; 0x15644 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
    fcc0:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3847 (discriminator 2)
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
    fcc2:	60 e0       	ldi	r22, 0x00	; 0
    fcc4:	88 e0       	ldi	r24, 0x08	; 8
    fcc6:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848 (discriminator 2)
        my_touch.TP_SetBacklight(i * 11);
    fcca:	61 2f       	mov	r22, r17
    fccc:	8f ef       	ldi	r24, 0xFF	; 255
    fcce:	9b e0       	ldi	r25, 0x0B	; 11
    fcd0:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849 (discriminator 2)
        delay(100);
    fcd4:	64 e6       	ldi	r22, 0x64	; 100
    fcd6:	70 e0       	ldi	r23, 0x00	; 0
    fcd8:	80 e0       	ldi	r24, 0x00	; 0
    fcda:	90 e0       	ldi	r25, 0x00	; 0
    fcdc:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850 (discriminator 2)
        digitalWrite(LED, HIGH);
    fce0:	61 e0       	ldi	r22, 0x01	; 1
    fce2:	88 e0       	ldi	r24, 0x08	; 8
    fce4:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851 (discriminator 2)
        delay(100);
    fce8:	64 e6       	ldi	r22, 0x64	; 100
    fcea:	70 e0       	ldi	r23, 0x00	; 0
    fcec:	80 e0       	ldi	r24, 0x00	; 0
    fcee:	90 e0       	ldi	r25, 0x00	; 0
    fcf0:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
    fcf4:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845 (discriminator 2)
    {
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      for (uint8_t i = 1; i < 8; i++)
    fcf6:	18 35       	cpi	r17, 0x58	; 88
    fcf8:	21 f7       	brne	.-56     	; 0xfcc2 <setup+0xa7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      brigthness_display_values = EEPROM.read(my_brightness_values);
    fcfa:	8e e5       	ldi	r24, 0x5E	; 94
    fcfc:	90 e0       	ldi	r25, 0x00	; 0
    fcfe:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    fd02:	18 2f       	mov	r17, r24
    fd04:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3854
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
    fd08:	8f e5       	ldi	r24, 0x5F	; 95
    fd0a:	90 e0       	ldi	r25, 0x00	; 0
    fd0c:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <EEPROMClass::read(int) [clone .isra.6]>
    fd10:	80 93 9c 0a 	sts	0x0A9C, r24	; 0x800a9c <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    fd14:	61 2f       	mov	r22, r17
    fd16:	66 0f       	add	r22, r22
    fd18:	8f ef       	ldi	r24, 0xFF	; 255
    fd1a:	9b e0       	ldi	r25, 0x0B	; 11
    fd1c:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    fd20:	65 cf       	rjmp	.-310    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    fd22:	6c e1       	ldi	r22, 0x1C	; 28
    fd24:	79 e5       	ldi	r23, 0x59	; 89
    fd26:	ce 01       	movw	r24, r28
    fd28:	88 57       	subi	r24, 0x78	; 120
    fd2a:	9f 4f       	sbci	r25, 0xFF	; 255
    fd2c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd30:	c1 2c       	mov	r12, r1
    fd32:	ee 24       	eor	r14, r14
    fd34:	ea 94       	dec	r14
    fd36:	fe 2c       	mov	r15, r14
    fd38:	00 e0       	ldi	r16, 0x00	; 0
    fd3a:	18 ef       	ldi	r17, 0xF8	; 248
    fd3c:	21 e0       	ldi	r18, 0x01	; 1
    fd3e:	48 e7       	ldi	r20, 0x78	; 120
    fd40:	50 e0       	ldi	r21, 0x00	; 0
    fd42:	60 ea       	ldi	r22, 0xA0	; 160
    fd44:	70 e0       	ldi	r23, 0x00	; 0
    fd46:	ce 01       	movw	r24, r28
    fd48:	88 57       	subi	r24, 0x78	; 120
    fd4a:	9f 4f       	sbci	r25, 0xFF	; 255
    fd4c:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
    fd50:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
    fd52:	0e 94 77 4d 	call	0x9aee	; 0x9aee <selftest_set_0(unsigned char)>
    fd56:	4a cf       	rjmp	.-364    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3887
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    fd58:	c0 5d       	subi	r28, 0xD0	; 208
    fd5a:	de 4f       	sbci	r29, 0xFE	; 254
    fd5c:	88 81       	ld	r24, Y
    fd5e:	c0 53       	subi	r28, 0x30	; 48
    fd60:	d1 40       	sbci	r29, 0x01	; 1
    fd62:	88 30       	cpi	r24, 0x08	; 8
    fd64:	c1 f5       	brne	.+112    	; 0xfdd6 <setup+0xb8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3889
    {
      strcpy_P(str1, text_onewire_hledam);
    fd66:	61 ed       	ldi	r22, 0xD1	; 209
    fd68:	7b e5       	ldi	r23, 0x5B	; 91
    fd6a:	ce 01       	movw	r24, r28
    fd6c:	88 57       	subi	r24, 0x78	; 120
    fd6e:	9f 4f       	sbci	r25, 0xFF	; 255
    fd70:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3890
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fd74:	c1 2c       	mov	r12, r1
    fd76:	ee 24       	eor	r14, r14
    fd78:	ea 94       	dec	r14
    fd7a:	fe 2c       	mov	r15, r14
    fd7c:	00 ee       	ldi	r16, 0xE0	; 224
    fd7e:	17 e0       	ldi	r17, 0x07	; 7
    fd80:	21 e0       	ldi	r18, 0x01	; 1
    fd82:	42 e8       	ldi	r20, 0x82	; 130
    fd84:	50 e0       	ldi	r21, 0x00	; 0
    fd86:	6e e1       	ldi	r22, 0x1E	; 30
    fd88:	70 e0       	ldi	r23, 0x00	; 0
    fd8a:	ce 01       	movw	r24, r28
    fd8c:	88 57       	subi	r24, 0x78	; 120
    fd8e:	9f 4f       	sbci	r25, 0xFF	; 255
    fd90:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3891
      Global_HWwirenum = 0;
    fd94:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
      one_hw_search_device(0);
    fd98:	80 e0       	ldi	r24, 0x00	; 0
    fd9a:	0e 94 ac 8d 	call	0x11b58	; 0x11b58 <one_hw_search_device(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3893
      tds_update_associate();
    fd9e:	0e 94 66 8c 	call	0x118cc	; 0x118cc <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
      strcpy (str1, "Nalezeno: ");
    fda2:	6b e2       	ldi	r22, 0x2B	; 43
    fda4:	78 e0       	ldi	r23, 0x08	; 8
    fda6:	ce 01       	movw	r24, r28
    fda8:	88 57       	subi	r24, 0x78	; 120
    fdaa:	9f 4f       	sbci	r25, 0xFF	; 255
    fdac:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3895
      itoa(Global_HWwirenum, str2, 10);
    fdb0:	80 91 ad 11 	lds	r24, 0x11AD	; 0x8011ad <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    fdb4:	4a e0       	ldi	r20, 0x0A	; 10
    fdb6:	b5 01       	movw	r22, r10
    fdb8:	90 e0       	ldi	r25, 0x00	; 0
    fdba:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
      strcat(str1, str2);
    fdbe:	b5 01       	movw	r22, r10
    fdc0:	ce 01       	movw	r24, r28
    fdc2:	88 57       	subi	r24, 0x78	; 120
    fdc4:	9f 4f       	sbci	r25, 0xFF	; 255
    fdc6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fdca:	21 e0       	ldi	r18, 0x01	; 1
    fdcc:	42 e8       	ldi	r20, 0x82	; 130
    fdce:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fdd0:	60 ea       	ldi	r22, 0xA0	; 160
    fdd2:	70 e0       	ldi	r23, 0x00	; 0
    fdd4:	b8 ce       	rjmp	.-656    	; 0xfb46 <setup+0x8fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    fdd6:	c0 5d       	subi	r28, 0xD0	; 208
    fdd8:	de 4f       	sbci	r29, 0xFE	; 254
    fdda:	98 81       	ld	r25, Y
    fddc:	c0 53       	subi	r28, 0x30	; 48
    fdde:	d1 40       	sbci	r29, 0x01	; 1
    fde0:	99 30       	cpi	r25, 0x09	; 9
    fde2:	09 f0       	breq	.+2      	; 0xfde6 <setup+0xb9e>
    fde4:	9b c1       	rjmp	.+822    	; 0x1011c <__EEPROM_REGION_LENGTH__+0x11c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3903
    {
      digitalWrite(ETH_RST, HIGH);
    fde6:	61 e0       	ldi	r22, 0x01	; 1
    fde8:	86 e0       	ldi	r24, 0x06	; 6
    fdea:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3904
      delay(10);
    fdee:	6a e0       	ldi	r22, 0x0A	; 10
    fdf0:	70 e0       	ldi	r23, 0x00	; 0
    fdf2:	80 e0       	ldi	r24, 0x00	; 0
    fdf4:	90 e0       	ldi	r25, 0x00	; 0
    fdf6:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3905
      digitalWrite(ETH_RST, LOW);
    fdfa:	60 e0       	ldi	r22, 0x00	; 0
    fdfc:	86 e0       	ldi	r24, 0x06	; 6
    fdfe:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
      delay(10);
    fe02:	6a e0       	ldi	r22, 0x0A	; 10
    fe04:	70 e0       	ldi	r23, 0x00	; 0
    fe06:	80 e0       	ldi	r24, 0x00	; 0
    fe08:	90 e0       	ldi	r25, 0x00	; 0
    fe0a:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3907
      digitalWrite(ETH_RST, HIGH);
    fe0e:	61 e0       	ldi	r22, 0x01	; 1
    fe10:	86 e0       	ldi	r24, 0x06	; 6
    fe12:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
      delay(100);
    fe16:	64 e6       	ldi	r22, 0x64	; 100
    fe18:	70 e0       	ldi	r23, 0x00	; 0
    fe1a:	80 e0       	ldi	r24, 0x00	; 0
    fe1c:	90 e0       	ldi	r25, 0x00	; 0
    fe1e:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    fe22:	8f e0       	ldi	r24, 0x0F	; 15
    fe24:	80 93 0f 13 	sts	0x130F, r24	; 0x80130f <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    fe28:	62 e1       	ldi	r22, 0x12	; 18
    fe2a:	71 e1       	ldi	r23, 0x11	; 17
    fe2c:	ce 01       	movw	r24, r28
    fe2e:	8e 50       	subi	r24, 0x0E	; 14
    fe30:	9f 4f       	sbci	r25, 0xFF	; 255
    fe32:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    fe36:	6a e1       	ldi	r22, 0x1A	; 26
    fe38:	71 e1       	ldi	r23, 0x11	; 17
    fe3a:	ce 01       	movw	r24, r28
    fe3c:	84 5e       	subi	r24, 0xE4	; 228
    fe3e:	9e 4f       	sbci	r25, 0xFE	; 254
    fe40:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    fe44:	66 e1       	ldi	r22, 0x16	; 22
    fe46:	71 e1       	ldi	r23, 0x11	; 17
    fe48:	ce 01       	movw	r24, r28
    fe4a:	8e 5d       	subi	r24, 0xDE	; 222
    fe4c:	9e 4f       	sbci	r25, 0xFE	; 254
    fe4e:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    fe52:	6e e0       	ldi	r22, 0x0E	; 14
    fe54:	71 e1       	ldi	r23, 0x11	; 17
    fe56:	ce 01       	movw	r24, r28
    fe58:	88 5d       	subi	r24, 0xD8	; 216
    fe5a:	9e 4f       	sbci	r25, 0xFE	; 254
    fe5c:	0e 94 ee d8 	call	0x1b1dc	; 0x1b1dc <IPAddress::IPAddress(unsigned char const*)>
    fe60:	be 01       	movw	r22, r28
    fe62:	6e 50       	subi	r22, 0x0E	; 14
    fe64:	7f 4f       	sbci	r23, 0xFF	; 255
    fe66:	7b 01       	movw	r14, r22
    fe68:	8e 01       	movw	r16, r28
    fe6a:	04 5e       	subi	r16, 0xE4	; 228
    fe6c:	1e 4f       	sbci	r17, 0xFE	; 254
    fe6e:	9e 01       	movw	r18, r28
    fe70:	2e 5d       	subi	r18, 0xDE	; 222
    fe72:	3e 4f       	sbci	r19, 0xFE	; 254
    fe74:	ae 01       	movw	r20, r28
    fe76:	48 5d       	subi	r20, 0xD8	; 216
    fe78:	5e 4f       	sbci	r21, 0xFE	; 254
    fe7a:	68 e0       	ldi	r22, 0x08	; 8
    fe7c:	71 e1       	ldi	r23, 0x11	; 17
    fe7e:	83 e0       	ldi	r24, 0x03	; 3
    fe80:	93 e1       	ldi	r25, 0x13	; 19
    fe82:	0e 94 06 b2 	call	0x1640c	; 0x1640c <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
_ZN10W5500Class8writeRCREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
    fe86:	42 e0       	ldi	r20, 0x02	; 2
    fe88:	64 e0       	ldi	r22, 0x04	; 4
    fe8a:	8b e1       	ldi	r24, 0x1B	; 27
    fe8c:	90 e0       	ldi	r25, 0x00	; 0
    fe8e:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
_ZN10W5500Class8writeRTREj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
    fe92:	42 e0       	ldi	r20, 0x02	; 2
    fe94:	64 e0       	ldi	r22, 0x04	; 4
    fe96:	89 e1       	ldi	r24, 0x19	; 25
    fe98:	90 e0       	ldi	r25, 0x00	; 0
    fe9a:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
    fe9e:	48 e5       	ldi	r20, 0x58	; 88
    fea0:	64 e0       	ldi	r22, 0x04	; 4
    fea2:	8a e1       	ldi	r24, 0x1A	; 26
    fea4:	90 e0       	ldi	r25, 0x00	; 0
    fea6:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
    feaa:	6f ea       	ldi	r22, 0xAF	; 175
    feac:	7b e5       	ldi	r23, 0x5B	; 91
    feae:	ce 01       	movw	r24, r28
    feb0:	88 57       	subi	r24, 0x78	; 120
    feb2:	9f 4f       	sbci	r25, 0xFF	; 255
    feb4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3914
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    feb8:	c1 2c       	mov	r12, r1
    feba:	ee 24       	eor	r14, r14
    febc:	ea 94       	dec	r14
    febe:	fe 2c       	mov	r15, r14
    fec0:	00 ee       	ldi	r16, 0xE0	; 224
    fec2:	17 e0       	ldi	r17, 0x07	; 7
    fec4:	21 e0       	ldi	r18, 0x01	; 1
    fec6:	4c e8       	ldi	r20, 0x8C	; 140
    fec8:	50 e0       	ldi	r21, 0x00	; 0
    feca:	6e e1       	ldi	r22, 0x1E	; 30
    fecc:	70 e0       	ldi	r23, 0x00	; 0
    fece:	ce 01       	movw	r24, r28
    fed0:	88 57       	subi	r24, 0x78	; 120
    fed2:	9f 4f       	sbci	r25, 0xFF	; 255
    fed4:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
      delay(100);
    fed8:	64 e6       	ldi	r22, 0x64	; 100
    feda:	70 e0       	ldi	r23, 0x00	; 0
    fedc:	80 e0       	ldi	r24, 0x00	; 0
    fede:	90 e0       	ldi	r25, 0x00	; 0
    fee0:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
      http_server.begin();
    fee4:	8f e0       	ldi	r24, 0x0F	; 15
    fee6:	9e e0       	ldi	r25, 0x0E	; 14
    fee8:	0e 94 81 b4 	call	0x16902	; 0x16902 <EthernetServer::begin()>
    feec:	7f ce       	rjmp	.-770    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
    feee:	85 e0       	ldi	r24, 0x05	; 5
    fef0:	0e 94 77 4d 	call	0x9aee	; 0x9aee <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
      while ((millis() - milis) < 3000 )
    fef4:	4a c1       	rjmp	.+660    	; 0x1018a <__EEPROM_REGION_LENGTH__+0x18a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    fef6:	69 e1       	ldi	r22, 0x19	; 25
    fef8:	79 e5       	ldi	r23, 0x59	; 89
    fefa:	ce 01       	movw	r24, r28
    fefc:	88 57       	subi	r24, 0x78	; 120
    fefe:	9f 4f       	sbci	r25, 0xFF	; 255
    ff00:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ff04:	c1 2c       	mov	r12, r1
    ff06:	ee 24       	eor	r14, r14
    ff08:	ea 94       	dec	r14
    ff0a:	fe 2c       	mov	r15, r14
    ff0c:	00 ee       	ldi	r16, 0xE0	; 224
    ff0e:	17 e0       	ldi	r17, 0x07	; 7
    ff10:	73 c1       	rjmp	.+742    	; 0x101f8 <__EEPROM_REGION_LENGTH__+0x1f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    ff12:	c0 5d       	subi	r28, 0xD0	; 208
    ff14:	de 4f       	sbci	r29, 0xFE	; 254
    ff16:	68 81       	ld	r22, Y
    ff18:	c0 53       	subi	r28, 0x30	; 48
    ff1a:	d1 40       	sbci	r29, 0x01	; 1
    ff1c:	6b 30       	cpi	r22, 0x0B	; 11
    ff1e:	89 f4       	brne	.+34     	; 0xff42 <__DATA_REGION_LENGTH__+0x142>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3958
    {
      strcpy_P(str1, text_rest_rozhrani);
    ff20:	6f e8       	ldi	r22, 0x8F	; 143
    ff22:	7b e5       	ldi	r23, 0x5B	; 91
    ff24:	ce 01       	movw	r24, r28
    ff26:	88 57       	subi	r24, 0x78	; 120
    ff28:	9f 4f       	sbci	r25, 0xFF	; 255
    ff2a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ff2e:	c1 2c       	mov	r12, r1
    ff30:	ee 24       	eor	r14, r14
    ff32:	ea 94       	dec	r14
    ff34:	fe 2c       	mov	r15, r14
    ff36:	00 ee       	ldi	r16, 0xE0	; 224
    ff38:	17 e0       	ldi	r17, 0x07	; 7
    ff3a:	21 e0       	ldi	r18, 0x01	; 1
    ff3c:	40 ea       	ldi	r20, 0xA0	; 160
    ff3e:	50 e0       	ldi	r21, 0x00	; 0
    ff40:	00 ce       	rjmp	.-1024   	; 0xfb42 <setup+0x8fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
    }
    ///
    /// inicializace nrf
    if (init == 12)
    ff42:	c0 5d       	subi	r28, 0xD0	; 208
    ff44:	de 4f       	sbci	r29, 0xFE	; 254
    ff46:	78 81       	ld	r23, Y
    ff48:	c0 53       	subi	r28, 0x30	; 48
    ff4a:	d1 40       	sbci	r29, 0x01	; 1
    ff4c:	7c 30       	cpi	r23, 0x0C	; 12
    ff4e:	09 f0       	breq	.+2      	; 0xff52 <__DATA_REGION_LENGTH__+0x152>
    ff50:	57 c1       	rjmp	.+686    	; 0x10200 <__EEPROM_REGION_LENGTH__+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
    {
      strcpy_P(str1, text_nrf_rozhrani);
    ff52:	62 e8       	ldi	r22, 0x82	; 130
    ff54:	7b e5       	ldi	r23, 0x5B	; 91
    ff56:	ce 01       	movw	r24, r28
    ff58:	88 57       	subi	r24, 0x78	; 120
    ff5a:	9f 4f       	sbci	r25, 0xFF	; 255
    ff5c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ff60:	c1 2c       	mov	r12, r1
    ff62:	ee 24       	eor	r14, r14
    ff64:	ea 94       	dec	r14
    ff66:	fe 2c       	mov	r15, r14
    ff68:	00 ee       	ldi	r16, 0xE0	; 224
    ff6a:	17 e0       	ldi	r17, 0x07	; 7
    ff6c:	21 e0       	ldi	r18, 0x01	; 1
    ff6e:	4a ea       	ldi	r20, 0xAA	; 170
    ff70:	50 e0       	ldi	r21, 0x00	; 0
    ff72:	6e e1       	ldi	r22, 0x1E	; 30
    ff74:	70 e0       	ldi	r23, 0x00	; 0
    ff76:	ce 01       	movw	r24, r28
    ff78:	88 57       	subi	r24, 0x78	; 120
    ff7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ff7c:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
      scan_rf_net_enable = 2;
    ff80:	82 e0       	ldi	r24, 0x02	; 2
    ff82:	80 93 62 11 	sts	0x1162, r24	; 0x801162 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3968
      radio.begin();
    ff86:	87 ef       	ldi	r24, 0xF7	; 247
    ff88:	9d e0       	ldi	r25, 0x0D	; 13
    ff8a:	0e 94 fe c8 	call	0x191fc	; 0x191fc <RF24::begin()>
    ff8e:	2e ce       	rjmp	.-932    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    ff90:	69 e1       	ldi	r22, 0x19	; 25
    ff92:	79 e5       	ldi	r23, 0x59	; 89
    ff94:	ce 01       	movw	r24, r28
    ff96:	88 57       	subi	r24, 0x78	; 120
    ff98:	9f 4f       	sbci	r25, 0xFF	; 255
    ff9a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ff9e:	c1 2c       	mov	r12, r1
    ffa0:	ee 24       	eor	r14, r14
    ffa2:	ea 94       	dec	r14
    ffa4:	fe 2c       	mov	r15, r14
    ffa6:	00 ee       	ldi	r16, 0xE0	; 224
    ffa8:	17 e0       	ldi	r17, 0x07	; 7
    ffaa:	21 e0       	ldi	r18, 0x01	; 1
    ffac:	4e eb       	ldi	r20, 0xBE	; 190
    ffae:	50 e0       	ldi	r21, 0x00	; 0
    ffb0:	60 ea       	ldi	r22, 0xA0	; 160
    ffb2:	70 e0       	ldi	r23, 0x00	; 0
    ffb4:	ce 01       	movw	r24, r28
    ffb6:	88 57       	subi	r24, 0x78	; 120
    ffb8:	9f 4f       	sbci	r25, 0xFF	; 255
    ffba:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
        selftest_clear_0(SELFTEST_ERR_NTP);
    ffbe:	81 e0       	ldi	r24, 0x01	; 1
    ffc0:	aa c0       	rjmp	.+340    	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    ffc2:	c0 5d       	subi	r28, 0xD0	; 208
    ffc4:	de 4f       	sbci	r29, 0xFE	; 254
    ffc6:	98 81       	ld	r25, Y
    ffc8:	c0 53       	subi	r28, 0x30	; 48
    ffca:	d1 40       	sbci	r29, 0x01	; 1
    ffcc:	9f 30       	cpi	r25, 0x0F	; 15
    ffce:	09 f0       	breq	.+2      	; 0xffd2 <__DATA_REGION_LENGTH__+0x1d2>
    ffd0:	0d ce       	rjmp	.-998    	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
    {
      strcpy_P(str1, text_rtc_cas);
    ffd2:	6d e4       	ldi	r22, 0x4D	; 77
    ffd4:	7b e5       	ldi	r23, 0x5B	; 91
    ffd6:	ce 01       	movw	r24, r28
    ffd8:	88 57       	subi	r24, 0x78	; 120
    ffda:	9f 4f       	sbci	r25, 0xFF	; 255
    ffdc:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ffe0:	c1 2c       	mov	r12, r1
    ffe2:	ee 24       	eor	r14, r14
    ffe4:	ea 94       	dec	r14
    ffe6:	fe 2c       	mov	r15, r14
    ffe8:	00 ee       	ldi	r16, 0xE0	; 224
    ffea:	17 e0       	ldi	r17, 0x07	; 7
    ffec:	21 e0       	ldi	r18, 0x01	; 1
    ffee:	48 ec       	ldi	r20, 0xC8	; 200
    fff0:	50 e0       	ldi	r21, 0x00	; 0
    fff2:	6e e1       	ldi	r22, 0x1E	; 30
    fff4:	70 e0       	ldi	r23, 0x00	; 0
    fff6:	ce 01       	movw	r24, r28
    fff8:	88 57       	subi	r24, 0x78	; 120
    fffa:	9f 4f       	sbci	r25, 0xFF	; 255
    fffc:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
      if (rtc.isrunning())
   10000:	8e e6       	ldi	r24, 0x6E	; 110
   10002:	90 e1       	ldi	r25, 0x10	; 16
   10004:	0e 94 b5 cb 	call	0x1976a	; 0x1976a <RTC_DS1307::isrunning()>
   10008:	88 23       	and	r24, r24
   1000a:	99 f0       	breq	.+38     	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4015
      {
        strcpy_P(str1, text_ok);
   1000c:	69 e1       	ldi	r22, 0x19	; 25
   1000e:	79 e5       	ldi	r23, 0x59	; 89
   10010:	ce 01       	movw	r24, r28
   10012:	88 57       	subi	r24, 0x78	; 120
   10014:	9f 4f       	sbci	r25, 0xFF	; 255
   10016:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4016
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1001a:	21 e0       	ldi	r18, 0x01	; 1
   1001c:	48 ec       	ldi	r20, 0xC8	; 200
   1001e:	50 e0       	ldi	r21, 0x00	; 0
   10020:	60 ea       	ldi	r22, 0xA0	; 160
   10022:	70 e0       	ldi	r23, 0x00	; 0
   10024:	ce 01       	movw	r24, r28
   10026:	88 57       	subi	r24, 0x78	; 120
   10028:	9f 4f       	sbci	r25, 0xFF	; 255
   1002a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
        selftest_clear_0(SELFTEST_ERR_RTC);
   1002e:	80 e0       	ldi	r24, 0x00	; 0
   10030:	72 c0       	rjmp	.+228    	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
      }
      else
      {
        strcpy_P(str1, text_err);
   10032:	6c e1       	ldi	r22, 0x1C	; 28
   10034:	79 e5       	ldi	r23, 0x59	; 89
   10036:	ce 01       	movw	r24, r28
   10038:	88 57       	subi	r24, 0x78	; 120
   1003a:	9f 4f       	sbci	r25, 0xFF	; 255
   1003c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   10040:	c1 2c       	mov	r12, r1
   10042:	ee 24       	eor	r14, r14
   10044:	ea 94       	dec	r14
   10046:	fe 2c       	mov	r15, r14
   10048:	00 e0       	ldi	r16, 0x00	; 0
   1004a:	18 ef       	ldi	r17, 0xF8	; 248
   1004c:	21 e0       	ldi	r18, 0x01	; 1
   1004e:	48 ec       	ldi	r20, 0xC8	; 200
   10050:	50 e0       	ldi	r21, 0x00	; 0
   10052:	60 ea       	ldi	r22, 0xA0	; 160
   10054:	70 e0       	ldi	r23, 0x00	; 0
   10056:	ce 01       	movw	r24, r28
   10058:	88 57       	subi	r24, 0x78	; 120
   1005a:	9f 4f       	sbci	r25, 0xFF	; 255
   1005c:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
        selftest_set_0(SELFTEST_ERR_RTC);
   10060:	80 e0       	ldi	r24, 0x00	; 0
   10062:	77 ce       	rjmp	.-786    	; 0xfd52 <setup+0xb0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
   10064:	c0 5d       	subi	r28, 0xD0	; 208
   10066:	de 4f       	sbci	r29, 0xFE	; 254
   10068:	78 81       	ld	r23, Y
   1006a:	c0 53       	subi	r28, 0x30	; 48
   1006c:	d1 40       	sbci	r29, 0x01	; 1
   1006e:	75 30       	cpi	r23, 0x05	; 5
   10070:	09 f4       	brne	.+2      	; 0x10074 <__EEPROM_REGION_LENGTH__+0x74>
   10072:	82 cd       	rjmp	.-1276   	; 0xfb78 <setup+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   10074:	76 30       	cpi	r23, 0x06	; 6
   10076:	09 f4       	brne	.+2      	; 0x1007a <__EEPROM_REGION_LENGTH__+0x7a>
   10078:	f2 cd       	rjmp	.-1052   	; 0xfc5e <setup+0xa16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   1007a:	77 30       	cpi	r23, 0x07	; 7
   1007c:	09 f0       	breq	.+2      	; 0x10080 <__EEPROM_REGION_LENGTH__+0x80>
   1007e:	6c ce       	rjmp	.-808    	; 0xfd58 <setup+0xb10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
    {
      strcpy_P(str1, text_onewire_rozhrani);
   10080:	6e ed       	ldi	r22, 0xDE	; 222
   10082:	7b e5       	ldi	r23, 0x5B	; 91
   10084:	ce 01       	movw	r24, r28
   10086:	88 57       	subi	r24, 0x78	; 120
   10088:	9f 4f       	sbci	r25, 0xFF	; 255
   1008a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3862
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1008e:	c1 2c       	mov	r12, r1
   10090:	ee 24       	eor	r14, r14
   10092:	ea 94       	dec	r14
   10094:	fe 2c       	mov	r15, r14
   10096:	00 ee       	ldi	r16, 0xE0	; 224
   10098:	17 e0       	ldi	r17, 0x07	; 7
   1009a:	21 e0       	ldi	r18, 0x01	; 1
   1009c:	48 e7       	ldi	r20, 0x78	; 120
   1009e:	50 e0       	ldi	r21, 0x00	; 0
   100a0:	6e e1       	ldi	r22, 0x1E	; 30
   100a2:	70 e0       	ldi	r23, 0x00	; 0
   100a4:	ce 01       	movw	r24, r28
   100a6:	88 57       	subi	r24, 0x78	; 120
   100a8:	9f 4f       	sbci	r25, 0xFF	; 255
   100aa:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
      ds2482_address[0].i2c_addr = 0b0011000;
   100ae:	88 e1       	ldi	r24, 0x18	; 24
   100b0:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
      ds2482_address[0].HWwirenum = 0;
   100b4:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <ds2482_address+0x1>
   100b8:	ee ea       	ldi	r30, 0xAE	; 174
   100ba:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868 (discriminator 2)
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   100bc:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869 (discriminator 2)
        status_tds18s20[idx].period_now = 0;
   100be:	14 8e       	std	Z+28, r1	; 0x1c
   100c0:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866 (discriminator 2)
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   100c2:	72 e1       	ldi	r23, 0x12	; 18
   100c4:	e2 36       	cpi	r30, 0x62	; 98
   100c6:	f7 07       	cpc	r31, r23
   100c8:	c9 f7       	brne	.-14     	; 0x100bc <__EEPROM_REGION_LENGTH__+0xbc>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   100ca:	4a e0       	ldi	r20, 0x0A	; 10
   100cc:	be 01       	movw	r22, r28
   100ce:	62 52       	subi	r22, 0x22	; 34
   100d0:	7f 4f       	sbci	r23, 0xFF	; 255
   100d2:	88 e1       	ldi	r24, 0x18	; 24
   100d4:	90 e0       	ldi	r25, 0x00	; 0
   100d6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   100da:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <ds2482_address>
   100de:	0e 94 0b d1 	call	0x1a216	; 0x1a216 <ds2482reset(unsigned char)>
   100e2:	81 11       	cpse	r24, r1
   100e4:	1e ce       	rjmp	.-964    	; 0xfd22 <setup+0xada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
      {
        strcpy_P(str1, text_ok);
   100e6:	69 e1       	ldi	r22, 0x19	; 25
   100e8:	79 e5       	ldi	r23, 0x59	; 89
   100ea:	ce 01       	movw	r24, r28
   100ec:	88 57       	subi	r24, 0x78	; 120
   100ee:	9f 4f       	sbci	r25, 0xFF	; 255
   100f0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   100f4:	c1 2c       	mov	r12, r1
   100f6:	ee 24       	eor	r14, r14
   100f8:	ea 94       	dec	r14
   100fa:	fe 2c       	mov	r15, r14
   100fc:	00 ee       	ldi	r16, 0xE0	; 224
   100fe:	17 e0       	ldi	r17, 0x07	; 7
   10100:	21 e0       	ldi	r18, 0x01	; 1
   10102:	48 e7       	ldi	r20, 0x78	; 120
   10104:	50 e0       	ldi	r21, 0x00	; 0
   10106:	60 ea       	ldi	r22, 0xA0	; 160
   10108:	70 e0       	ldi	r23, 0x00	; 0
   1010a:	ce 01       	movw	r24, r28
   1010c:	88 57       	subi	r24, 0x78	; 120
   1010e:	9f 4f       	sbci	r25, 0xFF	; 255
   10110:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
   10114:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      if (rtc.isrunning())
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
   10116:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <selftest_clear_0(unsigned char)>
   1011a:	68 cd       	rjmp	.-1328   	; 0xfbec <setup+0x9a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   1011c:	c0 5d       	subi	r28, 0xD0	; 208
   1011e:	de 4f       	sbci	r29, 0xFE	; 254
   10120:	88 81       	ld	r24, Y
   10122:	c0 53       	subi	r28, 0x30	; 48
   10124:	d1 40       	sbci	r29, 0x01	; 1
   10126:	8a 30       	cpi	r24, 0x0A	; 10
   10128:	09 f0       	breq	.+2      	; 0x1012c <__EEPROM_REGION_LENGTH__+0x12c>
   1012a:	f3 ce       	rjmp	.-538    	; 0xff12 <__DATA_REGION_LENGTH__+0x112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   1012c:	61 ea       	ldi	r22, 0xA1	; 161
   1012e:	7b e5       	ldi	r23, 0x5B	; 91
   10130:	ce 01       	movw	r24, r28
   10132:	88 57       	subi	r24, 0x78	; 120
   10134:	9f 4f       	sbci	r25, 0xFF	; 255
   10136:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1013a:	c1 2c       	mov	r12, r1
   1013c:	ee 24       	eor	r14, r14
   1013e:	ea 94       	dec	r14
   10140:	fe 2c       	mov	r15, r14
   10142:	00 ee       	ldi	r16, 0xE0	; 224
   10144:	17 e0       	ldi	r17, 0x07	; 7
   10146:	21 e0       	ldi	r18, 0x01	; 1
   10148:	46 e9       	ldi	r20, 0x96	; 150
   1014a:	50 e0       	ldi	r21, 0x00	; 0
   1014c:	6e e1       	ldi	r22, 0x1E	; 30
   1014e:	70 e0       	ldi	r23, 0x00	; 0
   10150:	ce 01       	movw	r24, r28
   10152:	88 57       	subi	r24, 0x78	; 120
   10154:	9f 4f       	sbci	r25, 0xFF	; 255
   10156:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3925

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   1015a:	40 91 2c 11 	lds	r20, 0x112C	; 0x80112c <device+0x24>
   1015e:	50 91 2d 11 	lds	r21, 0x112D	; 0x80112d <device+0x25>
   10162:	68 e2       	ldi	r22, 0x28	; 40
   10164:	71 e1       	ldi	r23, 0x11	; 17
   10166:	85 e1       	ldi	r24, 0x15	; 21
   10168:	9e e0       	ldi	r25, 0x0E	; 14
   1016a:	0e 94 75 c6 	call	0x18cea	; 0x18cea <PubSubClient::setServer(unsigned char*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3926
      mqtt_client.setCallback(mqtt_callback);
   1016e:	61 e2       	ldi	r22, 0x21	; 33
   10170:	7e e6       	ldi	r23, 0x6E	; 110
   10172:	85 e1       	ldi	r24, 0x15	; 21
   10174:	9e e0       	ldi	r25, 0x0E	; 14
   10176:	0e 94 af c6 	call	0x18d5e	; 0x18d5e <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3927
      send_mqtt_set_header(thermctl_header_out);
   1017a:	8e eb       	ldi	r24, 0xBE	; 190
   1017c:	98 e5       	ldi	r25, 0x58	; 88
   1017e:	0e 94 f5 85 	call	0x10bea	; 0x10bea <send_mqtt_set_header(char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3928
      milis = millis();
   10182:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   10186:	6b 01       	movw	r12, r22
   10188:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929
      while ((millis() - milis) < 3000 )
   1018a:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1018e:	6c 19       	sub	r22, r12
   10190:	7d 09       	sbc	r23, r13
   10192:	8e 09       	sbc	r24, r14
   10194:	9f 09       	sbc	r25, r15
   10196:	68 3b       	cpi	r22, 0xB8	; 184
   10198:	7b 40       	sbci	r23, 0x0B	; 11
   1019a:	81 05       	cpc	r24, r1
   1019c:	91 05       	cpc	r25, r1
   1019e:	98 f4       	brcc	.+38     	; 0x101c6 <__EEPROM_REGION_LENGTH__+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
      {
        lastmqttconnect = 0;
   101a0:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <lastmqttconnect>
   101a4:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <lastmqttconnect+0x1>
   101a8:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <lastmqttconnect+0x2>
   101ac:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3932
        mqtt_client.loop();
   101b0:	85 e1       	ldi	r24, 0x15	; 21
   101b2:	9e e0       	ldi	r25, 0x0E	; 14
   101b4:	0e 94 dc c3 	call	0x187b8	; 0x187b8 <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3933
        if (mqtt_reconnect() == 0)
   101b8:	0e 94 8d 48 	call	0x911a	; 0x911a <mqtt_reconnect()>
   101bc:	81 11       	cpse	r24, r1
   101be:	97 ce       	rjmp	.-722    	; 0xfeee <__DATA_REGION_LENGTH__+0xee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
   101c0:	85 e0       	ldi	r24, 0x05	; 5
   101c2:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   101c6:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <lastmqttconnect>
   101ca:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <lastmqttconnect+0x1>
   101ce:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <lastmqttconnect+0x2>
   101d2:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <lastmqttconnect+0x3>
_Z14selftest_get_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   101d6:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   101da:	85 ff       	sbrs	r24, 5
   101dc:	8c ce       	rjmp	.-744    	; 0xfef6 <__DATA_REGION_LENGTH__+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
      {
        strcpy_P(str1, text_err);
   101de:	6c e1       	ldi	r22, 0x1C	; 28
   101e0:	79 e5       	ldi	r23, 0x59	; 89
   101e2:	ce 01       	movw	r24, r28
   101e4:	88 57       	subi	r24, 0x78	; 120
   101e6:	9f 4f       	sbci	r25, 0xFF	; 255
   101e8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   101ec:	c1 2c       	mov	r12, r1
   101ee:	ee 24       	eor	r14, r14
   101f0:	ea 94       	dec	r14
   101f2:	fe 2c       	mov	r15, r14
   101f4:	00 e0       	ldi	r16, 0x00	; 0
   101f6:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   101f8:	21 e0       	ldi	r18, 0x01	; 1
   101fa:	46 e9       	ldi	r20, 0x96	; 150
   101fc:	50 e0       	ldi	r21, 0x00	; 0
   101fe:	e8 cd       	rjmp	.-1072   	; 0xfdd0 <setup+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3972
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   10200:	c0 5d       	subi	r28, 0xD0	; 208
   10202:	de 4f       	sbci	r29, 0xFE	; 254
   10204:	98 81       	ld	r25, Y
   10206:	c0 53       	subi	r28, 0x30	; 48
   10208:	d1 40       	sbci	r29, 0x01	; 1
   1020a:	9d 30       	cpi	r25, 0x0D	; 13
   1020c:	09 f0       	breq	.+2      	; 0x10210 <__EEPROM_REGION_LENGTH__+0x210>
   1020e:	ff c9       	rjmp	.-3074   	; 0xf60e <setup+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
    {
      strcpy_P(str1, text_pid_regulator);
   10210:	64 e7       	ldi	r22, 0x74	; 116
   10212:	7b e5       	ldi	r23, 0x5B	; 91
   10214:	ce 01       	movw	r24, r28
   10216:	88 57       	subi	r24, 0x78	; 120
   10218:	9f 4f       	sbci	r25, 0xFF	; 255
   1021a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1021e:	c1 2c       	mov	r12, r1
   10220:	ee 24       	eor	r14, r14
   10222:	ea 94       	dec	r14
   10224:	fe 2c       	mov	r15, r14
   10226:	00 ee       	ldi	r16, 0xE0	; 224
   10228:	17 e0       	ldi	r17, 0x07	; 7
   1022a:	21 e0       	ldi	r18, 0x01	; 1
   1022c:	44 eb       	ldi	r20, 0xB4	; 180
   1022e:	50 e0       	ldi	r21, 0x00	; 0
   10230:	6e e1       	ldi	r22, 0x1E	; 30
   10232:	70 e0       	ldi	r23, 0x00	; 0
   10234:	ce 01       	movw	r24, r28
   10236:	88 57       	subi	r24, 0x78	; 120
   10238:	9f 4f       	sbci	r25, 0xFF	; 255
   1023a:	0e 94 05 3c 	call	0x780a	; 0x780a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
      thermostat_init_pid();
   1023e:	0e 94 3b 8f 	call	0x11e76	; 0x11e76 <thermostat_init_pid()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10242:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980 (discriminator 2)
      {
        thermostat_ring_set_state(idx, 0);
   10244:	60 e0       	ldi	r22, 0x00	; 0
   10246:	81 2f       	mov	r24, r17
   10248:	0e 94 2f 8f 	call	0x11e5e	; 0x11e5e <thermostat_ring_set_state(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981 (discriminator 2)
        thermostat_ring_set_power(idx, 0);
   1024c:	60 e0       	ldi	r22, 0x00	; 0
   1024e:	81 2f       	mov	r24, r17
   10250:	0e 94 35 8f 	call	0x11e6a	; 0x11e6a <thermostat_ring_set_power(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982 (discriminator 2)
        thermostat_ring_get_pid_eeprom(idx);
   10254:	81 2f       	mov	r24, r17
   10256:	0e 94 77 91 	call	0x122ee	; 0x122ee <thermostat_ring_get_pid_eeprom(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983 (discriminator 2)
        thermostat_ring_update_pid_parameters(idx);
   1025a:	81 2f       	mov	r24, r17
   1025c:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978 (discriminator 2)
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10260:	1f 5f       	subi	r17, 0xFF	; 255
   10262:	15 30       	cpi	r17, 0x05	; 5
   10264:	79 f7       	brne	.-34     	; 0x10244 <__EEPROM_REGION_LENGTH__+0x244>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   10266:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <get_default_ring()>
   1026a:	80 93 aa 0a 	sts	0x0AAA, r24	; 0x800aaa <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3986
      default_show_temp = get_default_show_temp();
   1026e:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <get_default_show_temp()>
   10272:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <default_show_temp>
   10276:	ba cc       	rjmp	.-1676   	; 0xfbec <setup+0x9a4>

00010278 <check_connectivity_connection()>:
_Z29check_connectivity_connectionv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
   return
      1 - OK
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
   10278:	1f 93       	push	r17
   1027a:	cf 93       	push	r28
   1027c:	df 93       	push	r29
   1027e:	cd b7       	in	r28, 0x3d	; 61
   10280:	de b7       	in	r29, 0x3e	; 62
   10282:	60 97       	sbiw	r28, 0x10	; 16
   10284:	0f b6       	in	r0, 0x3f	; 63
   10286:	f8 94       	cli
   10288:	de bf       	out	0x3e, r29	; 62
   1028a:	0f be       	out	0x3f, r0	; 63
   1028c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5666
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
   1028e:	69 e0       	ldi	r22, 0x09	; 9
   10290:	78 e5       	ldi	r23, 0x58	; 88
   10292:	ce 01       	movw	r24, r28
   10294:	01 96       	adiw	r24, 0x01	; 1
   10296:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5667
  if (!ethClient1.connected())
   1029a:	8d e4       	ldi	r24, 0x4D	; 77
   1029c:	90 e1       	ldi	r25, 0x10	; 16
   1029e:	0e 94 3c b4 	call	0x16878	; 0x16878 <EthernetClient::connected()>
   102a2:	18 2f       	mov	r17, r24
   102a4:	81 11       	cpse	r24, r1
   102a6:	2e c0       	rjmp	.+92     	; 0x10304 <check_connectivity_connection()+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  {
    if (ethClient1.connect(server, 80))
   102a8:	40 e5       	ldi	r20, 0x50	; 80
   102aa:	50 e0       	ldi	r21, 0x00	; 0
   102ac:	be 01       	movw	r22, r28
   102ae:	6f 5f       	subi	r22, 0xFF	; 255
   102b0:	7f 4f       	sbci	r23, 0xFF	; 255
   102b2:	8d e4       	ldi	r24, 0x4D	; 77
   102b4:	90 e1       	ldi	r25, 0x10	; 16
   102b6:	0e 94 9c b2 	call	0x16538	; 0x16538 <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5671
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   102ba:	70 e0       	ldi	r23, 0x00	; 0
   102bc:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
   102be:	89 2b       	or	r24, r25
   102c0:	b1 f0       	breq	.+44     	; 0x102ee <check_connectivity_connection()+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5671
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   102c2:	88 e6       	ldi	r24, 0x68	; 104
   102c4:	90 e0       	ldi	r25, 0x00	; 0
   102c6:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5672
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
   102ca:	66 ec       	ldi	r22, 0xC6	; 198
   102cc:	75 e5       	ldi	r23, 0x55	; 85
   102ce:	89 e1       	ldi	r24, 0x19	; 25
   102d0:	9a e0       	ldi	r25, 0x0A	; 10
   102d2:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   102d6:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5683
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
}
   102d8:	81 2f       	mov	r24, r17
   102da:	60 96       	adiw	r28, 0x10	; 16
   102dc:	0f b6       	in	r0, 0x3f	; 63
   102de:	f8 94       	cli
   102e0:	de bf       	out	0x3e, r29	; 62
   102e2:	0f be       	out	0x3f, r0	; 63
   102e4:	cd bf       	out	0x3d, r28	; 61
   102e6:	df 91       	pop	r29
   102e8:	cf 91       	pop	r28
   102ea:	1f 91       	pop	r17
   102ec:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5677
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   102ee:	88 e6       	ldi	r24, 0x68	; 104
   102f0:	90 e0       	ldi	r25, 0x00	; 0
   102f2:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.52]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5678
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   102f6:	64 eb       	ldi	r22, 0xB4	; 180
   102f8:	75 e5       	ldi	r23, 0x55	; 85
   102fa:	89 e1       	ldi	r24, 0x19	; 25
   102fc:	9a e0       	ldi	r25, 0x0A	; 10
   102fe:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10302:	ea cf       	rjmp	.-44     	; 0x102d8 <check_connectivity_connection()+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5665
      0 - ERR
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
   10304:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
      ret = 0;
    }
  }
  return ret;
   10306:	e8 cf       	rjmp	.-48     	; 0x102d8 <check_connectivity_connection()+0x60>

00010308 <button_set_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z42button_set_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5652
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_set_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
   10308:	0c 94 3c 81 	jmp	0x10278	; 0x10278 <check_connectivity_connection()>

0001030c <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
   1030c:	cf 93       	push	r28
   1030e:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   10310:	68 2f       	mov	r22, r24
   10312:	88 e2       	ldi	r24, 0x28	; 40
   10314:	94 e1       	ldi	r25, 0x14	; 20
   10316:	0e 94 b8 d7 	call	0x1af70	; 0x1af70 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
   1031a:	8c 2f       	mov	r24, r28
   1031c:	cc 0f       	add	r28, r28
   1031e:	99 0b       	sbc	r25, r25
   10320:	cf 91       	pop	r28
   10322:	08 95       	ret

00010324 <loop>:
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040


/************************************************************************************/
/////////////////////////////////////////////////////////////////////////////////////
/// Hlavni programova smycka ///
void loop() {
   10324:	8f 92       	push	r8
   10326:	9f 92       	push	r9
   10328:	af 92       	push	r10
   1032a:	bf 92       	push	r11
   1032c:	cf 92       	push	r12
   1032e:	df 92       	push	r13
   10330:	ef 92       	push	r14
   10332:	ff 92       	push	r15
   10334:	0f 93       	push	r16
   10336:	1f 93       	push	r17
   10338:	cf 93       	push	r28
   1033a:	df 93       	push	r29
   1033c:	cd b7       	in	r28, 0x3d	; 61
   1033e:	de b7       	in	r29, 0x3e	; 62
   10340:	64 97       	sbiw	r28, 0x14	; 20
   10342:	0f b6       	in	r0, 0x3f	; 63
   10344:	f8 94       	cli
   10346:	de bf       	out	0x3e, r29	; 62
   10348:	0f be       	out	0x3f, r0	; 63
   1034a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
  char str1[16];
  unsigned long load_now;
  long mil;


  load_now = millis();
   1034c:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   10350:	6b 01       	movw	r12, r22
   10352:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4048
  if (mqtt_reconnect() == 0)
   10354:	0e 94 8d 48 	call	0x911a	; 0x911a <mqtt_reconnect()>
   10358:	81 11       	cpse	r24, r1
   1035a:	28 c0       	rjmp	.+80     	; 0x103ac <loop+0x88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049
    selftest_clear_0(SELFTEST_MQTT_LINK);
   1035c:	85 e0       	ldi	r24, 0x05	; 5
   1035e:	0e 94 83 4d 	call	0x9b06	; 0x9b06 <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   10362:	85 e1       	ldi	r24, 0x15	; 21
   10364:	9e e0       	ldi	r25, 0x0E	; 14
   10366:	0e 94 dc c3 	call	0x187b8	; 0x187b8 <PubSubClient::loop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4056


  if (ethClient1.connected())
   1036a:	8d e4       	ldi	r24, 0x4D	; 77
   1036c:	90 e1       	ldi	r25, 0x10	; 16
   1036e:	0e 94 3c b4 	call	0x16878	; 0x16878 <EthernetClient::connected()>
   10372:	88 23       	and	r24, r24
   10374:	21 f0       	breq	.+8      	; 0x1037e <loop+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
    ethClient1.stop();
   10376:	8d e4       	ldi	r24, 0x4D	; 77
   10378:	90 e1       	ldi	r25, 0x10	; 16
   1037a:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <EthernetClient::stop()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4059

  EthernetClient http_client = http_server.available();
   1037e:	6f e0       	ldi	r22, 0x0F	; 15
   10380:	7e e0       	ldi	r23, 0x0E	; 14
   10382:	ce 01       	movw	r24, r28
   10384:	01 96       	adiw	r24, 0x01	; 1
   10386:	0e 94 85 b5 	call	0x16b0a	; 0x16b0a <EthernetServer::available()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4060
  if (http_client.connected())
   1038a:	ce 01       	movw	r24, r28
   1038c:	01 96       	adiw	r24, 0x01	; 1
   1038e:	0e 94 3c b4 	call	0x16878	; 0x16878 <EthernetClient::connected()>
   10392:	88 23       	and	r24, r24
   10394:	b9 f0       	breq	.+46     	; 0x103c4 <loop+0xa0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4062
  {
    while (http_client.available())
   10396:	ce 01       	movw	r24, r28
   10398:	01 96       	adiw	r24, 0x01	; 1
   1039a:	0e 94 16 b3 	call	0x1662c	; 0x1662c <EthernetClient::available()>
   1039e:	89 2b       	or	r24, r25
   103a0:	49 f0       	breq	.+18     	; 0x103b4 <loop+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4063
      http_client.read();
   103a2:	ce 01       	movw	r24, r28
   103a4:	01 96       	adiw	r24, 0x01	; 1
   103a6:	0e 94 21 b3 	call	0x16642	; 0x16642 <EthernetClient::read()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4062
    ethClient1.stop();

  EthernetClient http_client = http_server.available();
  if (http_client.connected())
  {
    while (http_client.available())
   103aa:	f5 cf       	rjmp	.-22     	; 0x10396 <loop+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   103ac:	85 e0       	ldi	r24, 0x05	; 5
   103ae:	0e 94 77 4d 	call	0x9aee	; 0x9aee <selftest_set_0(unsigned char)>
   103b2:	d7 cf       	rjmp	.-82     	; 0x10362 <loop+0x3e>
_ZN5Print5writeEPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   103b4:	44 e0       	ldi	r20, 0x04	; 4
   103b6:	50 e0       	ldi	r21, 0x00	; 0
   103b8:	66 e3       	ldi	r22, 0x36	; 54
   103ba:	78 e0       	ldi	r23, 0x08	; 8
   103bc:	ce 01       	movw	r24, r28
   103be:	01 96       	adiw	r24, 0x01	; 1
   103c0:	0e 94 fa b2 	call	0x165f4	; 0x165f4 <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4068
      http_client.read();
    http_client.write("ahoj");
  }


  if (draw_menu(false) == true)
   103c4:	80 e0       	ldi	r24, 0x00	; 0
   103c6:	0e 94 88 56 	call	0xad10	; 0xad10 <draw_menu(bool)>
   103ca:	88 23       	and	r24, r24
   103cc:	19 f0       	breq	.+6      	; 0x103d4 <loop+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4069
    draw_menu(true);
   103ce:	81 e0       	ldi	r24, 0x01	; 1
   103d0:	0e 94 88 56 	call	0xad10	; 0xad10 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4073



  if (scan_rf_net_enable == 2)
   103d4:	80 91 62 11 	lds	r24, 0x1162	; 0x801162 <scan_rf_net_enable>
   103d8:	82 30       	cpi	r24, 0x02	; 2
   103da:	31 f4       	brne	.+12     	; 0x103e8 <loop+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075
  {
    scan_rf_net_enable = 0;
   103dc:	10 92 62 11 	sts	0x1162, r1	; 0x801162 <scan_rf_net_enable>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4076
    radio.printDetails();
   103e0:	87 ef       	ldi	r24, 0xF7	; 247
   103e2:	9d e0       	ldi	r25, 0x0D	; 13
   103e4:	0e 94 ad c9 	call	0x1935a	; 0x1935a <RF24::printDetails()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   103e8:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   103ec:	00 91 ab 0a 	lds	r16, 0x0AAB	; 0x800aab <milis_10s>
   103f0:	10 91 ac 0a 	lds	r17, 0x0AAC	; 0x800aac <milis_10s+0x1>
   103f4:	20 91 ad 0a 	lds	r18, 0x0AAD	; 0x800aad <milis_10s+0x2>
   103f8:	30 91 ae 0a 	lds	r19, 0x0AAE	; 0x800aae <milis_10s+0x3>
   103fc:	ab 01       	movw	r20, r22
   103fe:	bc 01       	movw	r22, r24
   10400:	40 1b       	sub	r20, r16
   10402:	51 0b       	sbc	r21, r17
   10404:	62 0b       	sbc	r22, r18
   10406:	73 0b       	sbc	r23, r19
   10408:	40 31       	cpi	r20, 0x10	; 16
   1040a:	57 42       	sbci	r21, 0x27	; 39
   1040c:	61 05       	cpc	r22, r1
   1040e:	71 05       	cpc	r23, r1
   10410:	08 f4       	brcc	.+2      	; 0x10414 <loop+0xf0>
   10412:	7a c0       	rjmp	.+244    	; 0x10508 <loop+0x1e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4084
  {
    milis_10s += 10000;
   10414:	d9 01       	movw	r26, r18
   10416:	c8 01       	movw	r24, r16
   10418:	80 5f       	subi	r24, 0xF0	; 240
   1041a:	98 4d       	sbci	r25, 0xD8	; 216
   1041c:	af 4f       	sbci	r26, 0xFF	; 255
   1041e:	bf 4f       	sbci	r27, 0xFF	; 255
   10420:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <milis_10s>
   10424:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <milis_10s+0x1>
   10428:	a0 93 ad 0a 	sts	0x0AAD, r26	; 0x800aad <milis_10s+0x2>
   1042c:	b0 93 ae 0a 	sts	0x0AAE, r27	; 0x800aae <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4085
    menu_redraw10s = 1;
   10430:	81 e0       	ldi	r24, 0x01	; 1
   10432:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <menu_redraw10s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4087
    //device_get_name(str1);
    send_mqtt_onewire();
   10436:	0e 94 46 49 	call	0x928c	; 0x928c <send_mqtt_onewire()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
    send_mqtt_status(&mqtt_client);
   1043a:	85 e1       	ldi	r24, 0x15	; 21
   1043c:	9e e0       	ldi	r25, 0x0E	; 14
   1043e:	0e 94 8e 88 	call	0x1111c	; 0x1111c <send_mqtt_status(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4089
    send_device_status();
   10442:	0e 94 a2 4d 	call	0x9b44	; 0x9b44 <send_device_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4090
    send_mqtt_ring();
   10446:	0e 94 7c 50 	call	0xa0f8	; 0xa0f8 <send_mqtt_ring()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4091
    send_mqtt_tds();
   1044a:	0e 94 bd 49 	call	0x937a	; 0x937a <send_mqtt_tds()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4092
    send_mqtt_program();
   1044e:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <send_mqtt_program()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4093
    thermostat();
   10452:	0e 94 65 51 	call	0xa2ca	; 0xa2ca <thermostat()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10456:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4095
      if (thermostat_ring_get_active(idx) != RING_FREE)
   10458:	81 2f       	mov	r24, r17
   1045a:	0e 94 83 90 	call	0x12106	; 0x12106 <thermostat_ring_get_active(unsigned char)>
   1045e:	8f 3f       	cpi	r24, 0xFF	; 255
   10460:	19 f0       	breq	.+6      	; 0x10468 <loop+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096
        mqtt_send_pid_variable(idx);
   10462:	81 2f       	mov	r24, r17
   10464:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094 (discriminator 2)
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10468:	1f 5f       	subi	r17, 0xFF	; 255
   1046a:	15 30       	cpi	r17, 0x05	; 5
   1046c:	a9 f7       	brne	.-22     	; 0x10458 <loop+0x134>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   1046e:	0e 94 4f 4c 	call	0x989e	; 0x989e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4103
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   10472:	80 e6       	ldi	r24, 0x60	; 96
   10474:	9c e0       	ldi	r25, 0x0C	; 12
   10476:	0e 94 a6 38 	call	0x714c	; 0x714c <Temperature_LM75_Derived::readTemperatureC()>
   1047a:	60 93 8e 0a 	sts	0x0A8E, r22	; 0x800a8e <internal_temp>
   1047e:	70 93 8f 0a 	sts	0x0A8F, r23	; 0x800a8f <internal_temp+0x1>
   10482:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <internal_temp+0x2>
   10486:	90 93 91 0a 	sts	0x0A91, r25	; 0x800a91 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   1048a:	80 91 9c 0a 	lds	r24, 0x0A9C	; 0x800a9c <brigthness_display_mode>
   1048e:	87 ff       	sbrs	r24, 7
   10490:	3b c0       	rjmp	.+118    	; 0x10508 <loop+0x1e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   10492:	00 91 9f 0a 	lds	r16, 0x0A9F	; 0x800a9f <light_max>
   10496:	10 91 a0 0a 	lds	r17, 0x0AA0	; 0x800aa0 <light_max+0x1>
   1049a:	60 91 c0 0a 	lds	r22, 0x0AC0	; 0x800ac0 <light_curr>
   1049e:	70 91 c1 0a 	lds	r23, 0x0AC1	; 0x800ac1 <light_curr+0x1>
   104a2:	60 1b       	sub	r22, r16
   104a4:	71 0b       	sbc	r23, r17
   104a6:	90 e0       	ldi	r25, 0x00	; 0
   104a8:	80 e0       	ldi	r24, 0x00	; 0
   104aa:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
   104ae:	4b 01       	movw	r8, r22
   104b0:	5c 01       	movw	r10, r24
   104b2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <light_min>
   104b6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <light_min+0x1>
   104ba:	08 1b       	sub	r16, r24
   104bc:	19 0b       	sbc	r17, r25
   104be:	b8 01       	movw	r22, r16
   104c0:	90 e0       	ldi	r25, 0x00	; 0
   104c2:	80 e0       	ldi	r24, 0x00	; 0
   104c4:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
   104c8:	9b 01       	movw	r18, r22
   104ca:	ac 01       	movw	r20, r24
   104cc:	c5 01       	movw	r24, r10
   104ce:	b4 01       	movw	r22, r8
   104d0:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
   104d4:	20 e0       	ldi	r18, 0x00	; 0
   104d6:	30 e0       	ldi	r19, 0x00	; 0
   104d8:	48 e4       	ldi	r20, 0x48	; 72
   104da:	53 e4       	ldi	r21, 0x43	; 67
   104dc:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
   104e0:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4108
      if (brigthness_display_auto_values > 200)
   104e4:	69 3c       	cpi	r22, 0xC9	; 201
   104e6:	08 f0       	brcs	.+2      	; 0x104ea <loop+0x1c6>
   104e8:	1f c1       	rjmp	.+574    	; 0x10728 <loop+0x404>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   104ea:	60 93 9d 0a 	sts	0x0A9D, r22	; 0x800a9d <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4110
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   104ee:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <brigthness_display_auto_values>
   104f2:	85 30       	cpi	r24, 0x05	; 5
   104f4:	18 f4       	brcc	.+6      	; 0x104fc <loop+0x1d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4111
        brigthness_display_auto_values = 5;
   104f6:	85 e0       	ldi	r24, 0x05	; 5
   104f8:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   104fc:	60 91 9d 0a 	lds	r22, 0x0A9D	; 0x800a9d <brigthness_display_auto_values>
   10500:	8f ef       	ldi	r24, 0xFF	; 255
   10502:	9b e0       	ldi	r25, 0x0B	; 11
   10504:	0e 94 8b a8 	call	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4117
    }

  }

  if ((millis() - milis_1s) >= 1000)
   10508:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1050c:	00 91 af 0a 	lds	r16, 0x0AAF	; 0x800aaf <milis_1s>
   10510:	10 91 b0 0a 	lds	r17, 0x0AB0	; 0x800ab0 <milis_1s+0x1>
   10514:	20 91 b1 0a 	lds	r18, 0x0AB1	; 0x800ab1 <milis_1s+0x2>
   10518:	30 91 b2 0a 	lds	r19, 0x0AB2	; 0x800ab2 <milis_1s+0x3>
   1051c:	ab 01       	movw	r20, r22
   1051e:	bc 01       	movw	r22, r24
   10520:	40 1b       	sub	r20, r16
   10522:	51 0b       	sbc	r21, r17
   10524:	62 0b       	sbc	r22, r18
   10526:	73 0b       	sbc	r23, r19
   10528:	48 3e       	cpi	r20, 0xE8	; 232
   1052a:	53 40       	sbci	r21, 0x03	; 3
   1052c:	61 05       	cpc	r22, r1
   1052e:	71 05       	cpc	r23, r1
   10530:	38 f1       	brcs	.+78     	; 0x10580 <loop+0x25c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
  {
    milis_1s += 1000;
   10532:	d9 01       	movw	r26, r18
   10534:	c8 01       	movw	r24, r16
   10536:	88 51       	subi	r24, 0x18	; 24
   10538:	9c 4f       	sbci	r25, 0xFC	; 252
   1053a:	af 4f       	sbci	r26, 0xFF	; 255
   1053c:	bf 4f       	sbci	r27, 0xFF	; 255
   1053e:	80 93 af 0a 	sts	0x0AAF, r24	; 0x800aaf <milis_1s>
   10542:	90 93 b0 0a 	sts	0x0AB0, r25	; 0x800ab0 <milis_1s+0x1>
   10546:	a0 93 b1 0a 	sts	0x0AB1, r26	; 0x800ab1 <milis_1s+0x2>
   1054a:	b0 93 b2 0a 	sts	0x0AB2, r27	; 0x800ab2 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120
    uptime++;
   1054e:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <uptime>
   10552:	90 91 bc 0a 	lds	r25, 0x0ABC	; 0x800abc <uptime+0x1>
   10556:	a0 91 bd 0a 	lds	r26, 0x0ABD	; 0x800abd <uptime+0x2>
   1055a:	b0 91 be 0a 	lds	r27, 0x0ABE	; 0x800abe <uptime+0x3>
   1055e:	01 96       	adiw	r24, 0x01	; 1
   10560:	a1 1d       	adc	r26, r1
   10562:	b1 1d       	adc	r27, r1
   10564:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <uptime>
   10568:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <uptime+0x1>
   1056c:	a0 93 bd 0a 	sts	0x0ABD, r26	; 0x800abd <uptime+0x2>
   10570:	b0 93 be 0a 	sts	0x0ABE, r27	; 0x800abe <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
    mereni_hwwire(uptime);
   10574:	0e 94 0d 8e 	call	0x11c1a	; 0x11c1a <mereni_hwwire(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
    tds_extended_memory_store();
   10578:	0e 94 6e 48 	call	0x90dc	; 0x90dc <tds_extended_memory_store()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
    remote_tds_update_last_update();
   1057c:	0e 94 3c 48 	call	0x9078	; 0x9078 <remote_tds_update_last_update()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4127
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   10580:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   10584:	00 91 b3 0a 	lds	r16, 0x0AB3	; 0x800ab3 <milis_05s>
   10588:	10 91 b4 0a 	lds	r17, 0x0AB4	; 0x800ab4 <milis_05s+0x1>
   1058c:	20 91 b5 0a 	lds	r18, 0x0AB5	; 0x800ab5 <milis_05s+0x2>
   10590:	30 91 b6 0a 	lds	r19, 0x0AB6	; 0x800ab6 <milis_05s+0x3>
   10594:	ab 01       	movw	r20, r22
   10596:	bc 01       	movw	r22, r24
   10598:	40 1b       	sub	r20, r16
   1059a:	51 0b       	sbc	r21, r17
   1059c:	62 0b       	sbc	r22, r18
   1059e:	73 0b       	sbc	r23, r19
   105a0:	44 3f       	cpi	r20, 0xF4	; 244
   105a2:	51 40       	sbci	r21, 0x01	; 1
   105a4:	61 05       	cpc	r22, r1
   105a6:	71 05       	cpc	r23, r1
   105a8:	40 f1       	brcs	.+80     	; 0x105fa <loop+0x2d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4129
  {
    milis_05s += 500;
   105aa:	d9 01       	movw	r26, r18
   105ac:	c8 01       	movw	r24, r16
   105ae:	8c 50       	subi	r24, 0x0C	; 12
   105b0:	9e 4f       	sbci	r25, 0xFE	; 254
   105b2:	af 4f       	sbci	r26, 0xFF	; 255
   105b4:	bf 4f       	sbci	r27, 0xFF	; 255
   105b6:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <milis_05s>
   105ba:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <milis_05s+0x1>
   105be:	a0 93 b5 0a 	sts	0x0AB5, r26	; 0x800ab5 <milis_05s+0x2>
   105c2:	b0 93 b6 0a 	sts	0x0AB6, r27	; 0x800ab6 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4130
    now = rtc.now();
   105c6:	ce 01       	movw	r24, r28
   105c8:	0e 96       	adiw	r24, 0x0e	; 14
   105ca:	0e 94 d5 cb 	call	0x197aa	; 0x197aa <RTC_DS1307::now()>
   105ce:	87 e0       	ldi	r24, 0x07	; 7
   105d0:	fe 01       	movw	r30, r28
   105d2:	3e 96       	adiw	r30, 0x0e	; 14
   105d4:	a7 e6       	ldi	r26, 0x67	; 103
   105d6:	b0 e1       	ldi	r27, 0x10	; 16
   105d8:	01 90       	ld	r0, Z+
   105da:	0d 92       	st	X+, r0
   105dc:	8a 95       	dec	r24
   105de:	e1 f7       	brne	.-8      	; 0x105d8 <loop+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4131
    selftest();
   105e0:	0e 94 90 4d 	call	0x9b20	; 0x9b20 <selftest()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132
    menu_redraw05s = 1;
   105e4:	81 e0       	ldi	r24, 0x01	; 1
   105e6:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <menu_redraw05s>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4134

    use_rtds = count_use_rtds();
   105ea:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <count_use_rtds()>
   105ee:	80 93 9b 0a 	sts	0x0A9B, r24	; 0x800a9b <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4135
    use_tds = count_use_tds();
   105f2:	0e 94 9f 8a 	call	0x1153e	; 0x1153e <count_use_tds()>
   105f6:	80 93 9a 0a 	sts	0x0A9A, r24	; 0x800a9a <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4141
  }



  /// kazdych 50ms
  if ((millis() - milis_005s) >= 50 )
   105fa:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   105fe:	00 91 b7 0a 	lds	r16, 0x0AB7	; 0x800ab7 <milis_005s>
   10602:	10 91 b8 0a 	lds	r17, 0x0AB8	; 0x800ab8 <milis_005s+0x1>
   10606:	20 91 b9 0a 	lds	r18, 0x0AB9	; 0x800ab9 <milis_005s+0x2>
   1060a:	30 91 ba 0a 	lds	r19, 0x0ABA	; 0x800aba <milis_005s+0x3>
   1060e:	ab 01       	movw	r20, r22
   10610:	bc 01       	movw	r22, r24
   10612:	40 1b       	sub	r20, r16
   10614:	51 0b       	sbc	r21, r17
   10616:	62 0b       	sbc	r22, r18
   10618:	73 0b       	sbc	r23, r19
   1061a:	42 33       	cpi	r20, 0x32	; 50
   1061c:	51 05       	cpc	r21, r1
   1061e:	61 05       	cpc	r22, r1
   10620:	71 05       	cpc	r23, r1
   10622:	d8 f0       	brcs	.+54     	; 0x1065a <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
  {
    milis_005s += 50;
   10624:	d9 01       	movw	r26, r18
   10626:	c8 01       	movw	r24, r16
   10628:	c2 96       	adiw	r24, 0x32	; 50
   1062a:	a1 1d       	adc	r26, r1
   1062c:	b1 1d       	adc	r27, r1
   1062e:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <milis_005s>
   10632:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <milis_005s+0x1>
   10636:	a0 93 b9 0a 	sts	0x0AB9, r26	; 0x800ab9 <milis_005s+0x2>
   1063a:	b0 93 ba 0a 	sts	0x0ABA, r27	; 0x800aba <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4146

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1063e:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <a2d_run_now>
   10642:	11 30       	cpi	r17, 0x01	; 1
   10644:	51 f4       	brne	.+20     	; 0x1065a <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4148
    {
      a2d_start_process();
   10646:	0e 94 bd d4 	call	0x1a97a	; 0x1a97a <a2d_start_process()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4149
      a2d_run_now = 0;
   1064a:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
      if (a2d_done() == 0) a2d_run_now = 1;
   1064e:	0e 94 dd d4 	call	0x1a9ba	; 0x1a9ba <a2d_done()>
   10652:	81 11       	cpse	r24, r1
   10654:	02 c0       	rjmp	.+4      	; 0x1065a <loop+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150 (discriminator 1)
   10656:	10 93 bf 0a 	sts	0x0ABF, r17	; 0x800abf <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
    }
  }

  load = millis() - load_now;
   1065a:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1065e:	dc 01       	movw	r26, r24
   10660:	cb 01       	movw	r24, r22
   10662:	8c 19       	sub	r24, r12
   10664:	9d 09       	sbc	r25, r13
   10666:	ae 09       	sbc	r26, r14
   10668:	bf 09       	sbc	r27, r15
   1066a:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <load>
   1066e:	90 93 a6 0a 	sts	0x0AA6, r25	; 0x800aa6 <load+0x1>
   10672:	a0 93 a7 0a 	sts	0x0AA7, r26	; 0x800aa7 <load+0x2>
   10676:	b0 93 a8 0a 	sts	0x0AA8, r27	; 0x800aa8 <load+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
  if (load < load_min) load_min = load;
   1067a:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <load_min>
   1067e:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <load_min+0x1>
   10682:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <load_min+0x2>
   10686:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <load_min+0x3>
   1068a:	80 17       	cp	r24, r16
   1068c:	91 07       	cpc	r25, r17
   1068e:	a2 07       	cpc	r26, r18
   10690:	b3 07       	cpc	r27, r19
   10692:	44 f4       	brge	.+16     	; 0x106a4 <loop+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155 (discriminator 1)
   10694:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <load_min>
   10698:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <load_min+0x1>
   1069c:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <load_min+0x2>
   106a0:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
  if (load > load_max) load_max = load;
   106a4:	00 91 a1 0a 	lds	r16, 0x0AA1	; 0x800aa1 <load_max>
   106a8:	10 91 a2 0a 	lds	r17, 0x0AA2	; 0x800aa2 <load_max+0x1>
   106ac:	20 91 a3 0a 	lds	r18, 0x0AA3	; 0x800aa3 <load_max+0x2>
   106b0:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <load_max+0x3>
   106b4:	08 17       	cp	r16, r24
   106b6:	19 07       	cpc	r17, r25
   106b8:	2a 07       	cpc	r18, r26
   106ba:	3b 07       	cpc	r19, r27
   106bc:	44 f4       	brge	.+16     	; 0x106ce <loop+0x3aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156 (discriminator 1)
   106be:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <load_max>
   106c2:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <load_max+0x1>
   106c6:	a0 93 a3 0a 	sts	0x0AA3, r26	; 0x800aa3 <load_max+0x2>
   106ca:	b0 93 a4 0a 	sts	0x0AA4, r27	; 0x800aa4 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   106ce:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <light_curr>
   106d2:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <light_curr+0x1>
   106d6:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <light_min>
   106da:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <light_min+0x1>
   106de:	82 17       	cp	r24, r18
   106e0:	93 07       	cpc	r25, r19
   106e2:	20 f4       	brcc	.+8      	; 0x106ec <loop+0x3c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159 (discriminator 1)
   106e4:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <light_min+0x1>
   106e8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4160
  if (light_curr > light_max) light_max = light_curr;
   106ec:	20 91 9f 0a 	lds	r18, 0x0A9F	; 0x800a9f <light_max>
   106f0:	30 91 a0 0a 	lds	r19, 0x0AA0	; 0x800aa0 <light_max+0x1>
   106f4:	28 17       	cp	r18, r24
   106f6:	39 07       	cpc	r19, r25
   106f8:	20 f4       	brcc	.+8      	; 0x10702 <loop+0x3de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4160 (discriminator 1)
   106fa:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <light_max+0x1>
   106fe:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <light_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
}
   10702:	64 96       	adiw	r28, 0x14	; 20
   10704:	0f b6       	in	r0, 0x3f	; 63
   10706:	f8 94       	cli
   10708:	de bf       	out	0x3e, r29	; 62
   1070a:	0f be       	out	0x3f, r0	; 63
   1070c:	cd bf       	out	0x3d, r28	; 61
   1070e:	df 91       	pop	r29
   10710:	cf 91       	pop	r28
   10712:	1f 91       	pop	r17
   10714:	0f 91       	pop	r16
   10716:	ff 90       	pop	r15
   10718:	ef 90       	pop	r14
   1071a:	df 90       	pop	r13
   1071c:	cf 90       	pop	r12
   1071e:	bf 90       	pop	r11
   10720:	af 90       	pop	r10
   10722:	9f 90       	pop	r9
   10724:	8f 90       	pop	r8
   10726:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   10728:	88 ec       	ldi	r24, 0xC8	; 200
   1072a:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <brigthness_display_auto_values>
   1072e:	df ce       	rjmp	.-578    	; 0x104ee <loop+0x1ca>

00010730 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
   10730:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <eeprom_read_byte>

00010734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   10734:	0c 94 b8 e8 	jmp	0x1d170	; 0x1d170 <eeprom_write_byte>

00010738 <load_setup_network()>:
_Z18load_setup_networkv():
   10738:	ef 92       	push	r14
   1073a:	ff 92       	push	r15
   1073c:	0f 93       	push	r16
   1073e:	1f 93       	push	r17
   10740:	cf 93       	push	r28
   10742:	df 93       	push	r29
   10744:	08 e0       	ldi	r16, 0x08	; 8
   10746:	11 e1       	ldi	r17, 0x11	; 17
   10748:	ce e6       	ldi	r28, 0x6E	; 110
   1074a:	d0 e0       	ldi	r29, 0x00	; 0
   1074c:	ce 01       	movw	r24, r28
   1074e:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   10752:	f8 01       	movw	r30, r16
   10754:	81 93       	st	Z+, r24
   10756:	8f 01       	movw	r16, r30
   10758:	21 96       	adiw	r28, 0x01	; 1
   1075a:	c4 37       	cpi	r28, 0x74	; 116
   1075c:	d1 05       	cpc	r29, r1
   1075e:	b1 f7       	brne	.-20     	; 0x1074c <load_setup_network()+0x14>
   10760:	0e e0       	ldi	r16, 0x0E	; 14
   10762:	11 e1       	ldi	r17, 0x11	; 17
   10764:	ce 01       	movw	r24, r28
   10766:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   1076a:	f8 01       	movw	r30, r16
   1076c:	81 93       	st	Z+, r24
   1076e:	8f 01       	movw	r16, r30
   10770:	21 96       	adiw	r28, 0x01	; 1
   10772:	c8 37       	cpi	r28, 0x78	; 120
   10774:	d1 05       	cpc	r29, r1
   10776:	b1 f7       	brne	.-20     	; 0x10764 <load_setup_network()+0x2c>
   10778:	02 e1       	ldi	r16, 0x12	; 18
   1077a:	11 e1       	ldi	r17, 0x11	; 17
   1077c:	ce 01       	movw	r24, r28
   1077e:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   10782:	f8 01       	movw	r30, r16
   10784:	81 93       	st	Z+, r24
   10786:	8f 01       	movw	r16, r30
   10788:	21 96       	adiw	r28, 0x01	; 1
   1078a:	cc 37       	cpi	r28, 0x7C	; 124
   1078c:	d1 05       	cpc	r29, r1
   1078e:	b1 f7       	brne	.-20     	; 0x1077c <load_setup_network()+0x44>
   10790:	4a e1       	ldi	r20, 0x1A	; 26
   10792:	e4 2e       	mov	r14, r20
   10794:	41 e1       	ldi	r20, 0x11	; 17
   10796:	f4 2e       	mov	r15, r20
   10798:	00 e8       	ldi	r16, 0x80	; 128
   1079a:	10 e0       	ldi	r17, 0x00	; 0
   1079c:	c8 01       	movw	r24, r16
   1079e:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   107a2:	f7 01       	movw	r30, r14
   107a4:	81 93       	st	Z+, r24
   107a6:	7f 01       	movw	r14, r30
   107a8:	0f 5f       	subi	r16, 0xFF	; 255
   107aa:	1f 4f       	sbci	r17, 0xFF	; 255
   107ac:	04 38       	cpi	r16, 0x84	; 132
   107ae:	11 05       	cpc	r17, r1
   107b0:	a9 f7       	brne	.-22     	; 0x1079c <load_setup_network()+0x64>
   107b2:	36 e1       	ldi	r19, 0x16	; 22
   107b4:	e3 2e       	mov	r14, r19
   107b6:	31 e1       	ldi	r19, 0x11	; 17
   107b8:	f3 2e       	mov	r15, r19
   107ba:	ce 01       	movw	r24, r28
   107bc:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   107c0:	f7 01       	movw	r30, r14
   107c2:	81 93       	st	Z+, r24
   107c4:	7f 01       	movw	r14, r30
   107c6:	21 96       	adiw	r28, 0x01	; 1
   107c8:	c0 38       	cpi	r28, 0x80	; 128
   107ca:	d1 05       	cpc	r29, r1
   107cc:	b1 f7       	brne	.-20     	; 0x107ba <load_setup_network()+0x82>
   107ce:	2e e1       	ldi	r18, 0x1E	; 30
   107d0:	e2 2e       	mov	r14, r18
   107d2:	21 e1       	ldi	r18, 0x11	; 17
   107d4:	f2 2e       	mov	r15, r18
   107d6:	c4 e6       	ldi	r28, 0x64	; 100
   107d8:	d0 e0       	ldi	r29, 0x00	; 0
   107da:	ce 01       	movw	r24, r28
   107dc:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   107e0:	f7 01       	movw	r30, r14
   107e2:	81 93       	st	Z+, r24
   107e4:	7f 01       	movw	r14, r30
   107e6:	21 96       	adiw	r28, 0x01	; 1
   107e8:	cd 36       	cpi	r28, 0x6D	; 109
   107ea:	d1 05       	cpc	r29, r1
   107ec:	b1 f7       	brne	.-20     	; 0x107da <load_setup_network()+0xa2>
   107ee:	c8 e2       	ldi	r28, 0x28	; 40
   107f0:	d1 e1       	ldi	r29, 0x11	; 17
   107f2:	c8 01       	movw	r24, r16
   107f4:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   107f8:	89 93       	st	Y+, r24
   107fa:	0f 5f       	subi	r16, 0xFF	; 255
   107fc:	1f 4f       	sbci	r17, 0xFF	; 255
   107fe:	08 38       	cpi	r16, 0x88	; 136
   10800:	11 05       	cpc	r17, r1
   10802:	b9 f7       	brne	.-18     	; 0x107f2 <load_setup_network()+0xba>
   10804:	88 e8       	ldi	r24, 0x88	; 136
   10806:	90 e0       	ldi	r25, 0x00	; 0
   10808:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   1080c:	c8 2f       	mov	r28, r24
   1080e:	89 e8       	ldi	r24, 0x89	; 137
   10810:	90 e0       	ldi	r25, 0x00	; 0
   10812:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   10816:	2c 2f       	mov	r18, r28
   10818:	30 e0       	ldi	r19, 0x00	; 0
   1081a:	32 2f       	mov	r19, r18
   1081c:	22 27       	eor	r18, r18
   1081e:	82 0f       	add	r24, r18
   10820:	93 2f       	mov	r25, r19
   10822:	91 1d       	adc	r25, r1
   10824:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <device+0x25>
   10828:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <device+0x24>
   1082c:	0e e2       	ldi	r16, 0x2E	; 46
   1082e:	11 e1       	ldi	r17, 0x11	; 17
   10830:	ca e8       	ldi	r28, 0x8A	; 138
   10832:	d0 e0       	ldi	r29, 0x00	; 0
   10834:	ce 01       	movw	r24, r28
   10836:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   1083a:	f8 01       	movw	r30, r16
   1083c:	81 93       	st	Z+, r24
   1083e:	8f 01       	movw	r16, r30
   10840:	21 96       	adiw	r28, 0x01	; 1
   10842:	ce 39       	cpi	r28, 0x9E	; 158
   10844:	d1 05       	cpc	r29, r1
   10846:	b1 f7       	brne	.-20     	; 0x10834 <load_setup_network()+0xfc>
   10848:	02 e4       	ldi	r16, 0x42	; 66
   1084a:	11 e1       	ldi	r17, 0x11	; 17
   1084c:	ce 01       	movw	r24, r28
   1084e:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   10852:	f8 01       	movw	r30, r16
   10854:	81 93       	st	Z+, r24
   10856:	8f 01       	movw	r16, r30
   10858:	21 96       	adiw	r28, 0x01	; 1
   1085a:	c2 3b       	cpi	r28, 0xB2	; 178
   1085c:	d1 05       	cpc	r29, r1
   1085e:	b1 f7       	brne	.-20     	; 0x1084c <load_setup_network()+0x114>
   10860:	06 e5       	ldi	r16, 0x56	; 86
   10862:	11 e1       	ldi	r17, 0x11	; 17
   10864:	ce 01       	movw	r24, r28
   10866:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   1086a:	f8 01       	movw	r30, r16
   1086c:	81 93       	st	Z+, r24
   1086e:	8f 01       	movw	r16, r30
   10870:	21 96       	adiw	r28, 0x01	; 1
   10872:	c6 3b       	cpi	r28, 0xB6	; 182
   10874:	d1 05       	cpc	r29, r1
   10876:	b1 f7       	brne	.-20     	; 0x10864 <load_setup_network()+0x12c>
   10878:	df 91       	pop	r29
   1087a:	cf 91       	pop	r28
   1087c:	1f 91       	pop	r17
   1087e:	0f 91       	pop	r16
   10880:	ff 90       	pop	r15
   10882:	ef 90       	pop	r14
   10884:	08 95       	ret

00010886 <save_setup_network()>:
_Z18save_setup_networkv():
   10886:	ef 92       	push	r14
   10888:	ff 92       	push	r15
   1088a:	0f 93       	push	r16
   1088c:	1f 93       	push	r17
   1088e:	cf 93       	push	r28
   10890:	df 93       	push	r29
   10892:	08 e0       	ldi	r16, 0x08	; 8
   10894:	11 e1       	ldi	r17, 0x11	; 17
   10896:	ce e6       	ldi	r28, 0x6E	; 110
   10898:	d0 e0       	ldi	r29, 0x00	; 0
   1089a:	f8 01       	movw	r30, r16
   1089c:	61 91       	ld	r22, Z+
   1089e:	8f 01       	movw	r16, r30
   108a0:	ce 01       	movw	r24, r28
   108a2:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   108a6:	21 96       	adiw	r28, 0x01	; 1
   108a8:	c4 37       	cpi	r28, 0x74	; 116
   108aa:	d1 05       	cpc	r29, r1
   108ac:	b1 f7       	brne	.-20     	; 0x1089a <save_setup_network()+0x14>
   108ae:	0e e0       	ldi	r16, 0x0E	; 14
   108b0:	11 e1       	ldi	r17, 0x11	; 17
   108b2:	f8 01       	movw	r30, r16
   108b4:	61 91       	ld	r22, Z+
   108b6:	8f 01       	movw	r16, r30
   108b8:	ce 01       	movw	r24, r28
   108ba:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   108be:	21 96       	adiw	r28, 0x01	; 1
   108c0:	c8 37       	cpi	r28, 0x78	; 120
   108c2:	d1 05       	cpc	r29, r1
   108c4:	b1 f7       	brne	.-20     	; 0x108b2 <save_setup_network()+0x2c>
   108c6:	02 e1       	ldi	r16, 0x12	; 18
   108c8:	11 e1       	ldi	r17, 0x11	; 17
   108ca:	f8 01       	movw	r30, r16
   108cc:	61 91       	ld	r22, Z+
   108ce:	8f 01       	movw	r16, r30
   108d0:	ce 01       	movw	r24, r28
   108d2:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   108d6:	21 96       	adiw	r28, 0x01	; 1
   108d8:	cc 37       	cpi	r28, 0x7C	; 124
   108da:	d1 05       	cpc	r29, r1
   108dc:	b1 f7       	brne	.-20     	; 0x108ca <save_setup_network()+0x44>
   108de:	2a e1       	ldi	r18, 0x1A	; 26
   108e0:	e2 2e       	mov	r14, r18
   108e2:	21 e1       	ldi	r18, 0x11	; 17
   108e4:	f2 2e       	mov	r15, r18
   108e6:	00 e8       	ldi	r16, 0x80	; 128
   108e8:	10 e0       	ldi	r17, 0x00	; 0
   108ea:	f7 01       	movw	r30, r14
   108ec:	61 91       	ld	r22, Z+
   108ee:	7f 01       	movw	r14, r30
   108f0:	c8 01       	movw	r24, r16
   108f2:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   108f6:	0f 5f       	subi	r16, 0xFF	; 255
   108f8:	1f 4f       	sbci	r17, 0xFF	; 255
   108fa:	04 38       	cpi	r16, 0x84	; 132
   108fc:	11 05       	cpc	r17, r1
   108fe:	a9 f7       	brne	.-22     	; 0x108ea <save_setup_network()+0x64>
   10900:	96 e1       	ldi	r25, 0x16	; 22
   10902:	e9 2e       	mov	r14, r25
   10904:	91 e1       	ldi	r25, 0x11	; 17
   10906:	f9 2e       	mov	r15, r25
   10908:	f7 01       	movw	r30, r14
   1090a:	61 91       	ld	r22, Z+
   1090c:	7f 01       	movw	r14, r30
   1090e:	ce 01       	movw	r24, r28
   10910:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10914:	21 96       	adiw	r28, 0x01	; 1
   10916:	c0 38       	cpi	r28, 0x80	; 128
   10918:	d1 05       	cpc	r29, r1
   1091a:	b1 f7       	brne	.-20     	; 0x10908 <save_setup_network()+0x82>
   1091c:	8e e1       	ldi	r24, 0x1E	; 30
   1091e:	e8 2e       	mov	r14, r24
   10920:	81 e1       	ldi	r24, 0x11	; 17
   10922:	f8 2e       	mov	r15, r24
   10924:	c4 e6       	ldi	r28, 0x64	; 100
   10926:	d0 e0       	ldi	r29, 0x00	; 0
   10928:	f7 01       	movw	r30, r14
   1092a:	61 91       	ld	r22, Z+
   1092c:	7f 01       	movw	r14, r30
   1092e:	ce 01       	movw	r24, r28
   10930:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10934:	21 96       	adiw	r28, 0x01	; 1
   10936:	cd 36       	cpi	r28, 0x6D	; 109
   10938:	d1 05       	cpc	r29, r1
   1093a:	b1 f7       	brne	.-20     	; 0x10928 <save_setup_network()+0xa2>
   1093c:	c8 e2       	ldi	r28, 0x28	; 40
   1093e:	d1 e1       	ldi	r29, 0x11	; 17
   10940:	69 91       	ld	r22, Y+
   10942:	c8 01       	movw	r24, r16
   10944:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10948:	0f 5f       	subi	r16, 0xFF	; 255
   1094a:	1f 4f       	sbci	r17, 0xFF	; 255
   1094c:	08 38       	cpi	r16, 0x88	; 136
   1094e:	11 05       	cpc	r17, r1
   10950:	b9 f7       	brne	.-18     	; 0x10940 <save_setup_network()+0xba>
   10952:	60 91 2d 11 	lds	r22, 0x112D	; 0x80112d <device+0x25>
   10956:	88 e8       	ldi	r24, 0x88	; 136
   10958:	90 e0       	ldi	r25, 0x00	; 0
   1095a:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1095e:	60 91 2c 11 	lds	r22, 0x112C	; 0x80112c <device+0x24>
   10962:	89 e8       	ldi	r24, 0x89	; 137
   10964:	90 e0       	ldi	r25, 0x00	; 0
   10966:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1096a:	0e e2       	ldi	r16, 0x2E	; 46
   1096c:	11 e1       	ldi	r17, 0x11	; 17
   1096e:	ca e8       	ldi	r28, 0x8A	; 138
   10970:	d0 e0       	ldi	r29, 0x00	; 0
   10972:	f8 01       	movw	r30, r16
   10974:	61 91       	ld	r22, Z+
   10976:	8f 01       	movw	r16, r30
   10978:	ce 01       	movw	r24, r28
   1097a:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1097e:	21 96       	adiw	r28, 0x01	; 1
   10980:	ce 39       	cpi	r28, 0x9E	; 158
   10982:	d1 05       	cpc	r29, r1
   10984:	b1 f7       	brne	.-20     	; 0x10972 <save_setup_network()+0xec>
   10986:	02 e4       	ldi	r16, 0x42	; 66
   10988:	11 e1       	ldi	r17, 0x11	; 17
   1098a:	f8 01       	movw	r30, r16
   1098c:	61 91       	ld	r22, Z+
   1098e:	8f 01       	movw	r16, r30
   10990:	ce 01       	movw	r24, r28
   10992:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10996:	21 96       	adiw	r28, 0x01	; 1
   10998:	c2 3b       	cpi	r28, 0xB2	; 178
   1099a:	d1 05       	cpc	r29, r1
   1099c:	b1 f7       	brne	.-20     	; 0x1098a <save_setup_network()+0x104>
   1099e:	06 e5       	ldi	r16, 0x56	; 86
   109a0:	11 e1       	ldi	r17, 0x11	; 17
   109a2:	f8 01       	movw	r30, r16
   109a4:	61 91       	ld	r22, Z+
   109a6:	8f 01       	movw	r16, r30
   109a8:	ce 01       	movw	r24, r28
   109aa:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   109ae:	21 96       	adiw	r28, 0x01	; 1
   109b0:	c6 3b       	cpi	r28, 0xB6	; 182
   109b2:	d1 05       	cpc	r29, r1
   109b4:	b1 f7       	brne	.-20     	; 0x109a2 <save_setup_network()+0x11c>
   109b6:	df 91       	pop	r29
   109b8:	cf 91       	pop	r28
   109ba:	1f 91       	pop	r17
   109bc:	0f 91       	pop	r16
   109be:	ff 90       	pop	r15
   109c0:	ef 90       	pop	r14
   109c2:	08 95       	ret

000109c4 <device_get_name(char*)>:
_Z15device_get_namePc():
   109c4:	0f 93       	push	r16
   109c6:	1f 93       	push	r17
   109c8:	cf 93       	push	r28
   109ca:	df 93       	push	r29
   109cc:	8c 01       	movw	r16, r24
   109ce:	c4 e6       	ldi	r28, 0x64	; 100
   109d0:	d0 e0       	ldi	r29, 0x00	; 0
   109d2:	ce 01       	movw	r24, r28
   109d4:	0e 94 98 83 	call	0x10730	; 0x10730 <EEPROMClass::read(int) [clone .isra.0]>
   109d8:	f8 01       	movw	r30, r16
   109da:	81 93       	st	Z+, r24
   109dc:	8f 01       	movw	r16, r30
   109de:	10 82       	st	Z, r1
   109e0:	88 23       	and	r24, r24
   109e2:	21 f0       	breq	.+8      	; 0x109ec <device_get_name(char*)+0x28>
   109e4:	21 96       	adiw	r28, 0x01	; 1
   109e6:	cd 36       	cpi	r28, 0x6D	; 109
   109e8:	d1 05       	cpc	r29, r1
   109ea:	99 f7       	brne	.-26     	; 0x109d2 <device_get_name(char*)+0xe>
   109ec:	df 91       	pop	r29
   109ee:	cf 91       	pop	r28
   109f0:	1f 91       	pop	r17
   109f2:	0f 91       	pop	r16
   109f4:	08 95       	ret

000109f6 <device_set_name(char*)>:
_Z15device_set_namePc():
   109f6:	ff 92       	push	r15
   109f8:	0f 93       	push	r16
   109fa:	1f 93       	push	r17
   109fc:	cf 93       	push	r28
   109fe:	df 93       	push	r29
   10a00:	8c 01       	movw	r16, r24
   10a02:	d0 e0       	ldi	r29, 0x00	; 0
   10a04:	c0 e0       	ldi	r28, 0x00	; 0
   10a06:	f8 01       	movw	r30, r16
   10a08:	f1 90       	ld	r15, Z+
   10a0a:	8f 01       	movw	r16, r30
   10a0c:	6f 2d       	mov	r22, r15
   10a0e:	ce 01       	movw	r24, r28
   10a10:	8c 59       	subi	r24, 0x9C	; 156
   10a12:	9f 4f       	sbci	r25, 0xFF	; 255
   10a14:	0e 94 9a 83 	call	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10a18:	f1 10       	cpse	r15, r1
   10a1a:	0b c0       	rjmp	.+22     	; 0x10a32 <device_set_name(char*)+0x3c>
   10a1c:	60 e0       	ldi	r22, 0x00	; 0
   10a1e:	ce 01       	movw	r24, r28
   10a20:	8b 59       	subi	r24, 0x9B	; 155
   10a22:	9f 4f       	sbci	r25, 0xFF	; 255
   10a24:	df 91       	pop	r29
   10a26:	cf 91       	pop	r28
   10a28:	1f 91       	pop	r17
   10a2a:	0f 91       	pop	r16
   10a2c:	ff 90       	pop	r15
   10a2e:	0c 94 9a 83 	jmp	0x10734	; 0x10734 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10a32:	21 96       	adiw	r28, 0x01	; 1
   10a34:	c9 30       	cpi	r28, 0x09	; 9
   10a36:	d1 05       	cpc	r29, r1
   10a38:	31 f7       	brne	.-52     	; 0x10a06 <device_set_name(char*)+0x10>
   10a3a:	df 91       	pop	r29
   10a3c:	cf 91       	pop	r28
   10a3e:	1f 91       	pop	r17
   10a40:	0f 91       	pop	r16
   10a42:	ff 90       	pop	r15
   10a44:	08 95       	ret

00010a46 <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
   10a46:	ef 92       	push	r14
   10a48:	ff 92       	push	r15
   10a4a:	0f 93       	push	r16
   10a4c:	1f 93       	push	r17
   10a4e:	cf 93       	push	r28
   10a50:	df 93       	push	r29
   10a52:	7b 01       	movw	r14, r22
   10a54:	69 e7       	ldi	r22, 0x79	; 121
   10a56:	73 e0       	ldi	r23, 0x03	; 3
   10a58:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
   10a5c:	ec 01       	movw	r28, r24
   10a5e:	10 e0       	ldi	r17, 0x00	; 0
   10a60:	20 97       	sbiw	r28, 0x00	; 0
   10a62:	09 f4       	brne	.+2      	; 0x10a66 <setting_network(char*, char*)+0x20>
   10a64:	ba c0       	rjmp	.+372    	; 0x10bda <setting_network(char*, char*)+0x194>
   10a66:	61 e4       	ldi	r22, 0x41	; 65
   10a68:	78 e0       	ldi	r23, 0x08	; 8
   10a6a:	ce 01       	movw	r24, r28
   10a6c:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10a70:	89 2b       	or	r24, r25
   10a72:	59 f4       	brne	.+22     	; 0x10a8a <setting_network(char*, char*)+0x44>
   10a74:	0a e0       	ldi	r16, 0x0A	; 10
   10a76:	10 e0       	ldi	r17, 0x00	; 0
   10a78:	26 e0       	ldi	r18, 0x06	; 6
   10a7a:	30 e0       	ldi	r19, 0x00	; 0
   10a7c:	48 e0       	ldi	r20, 0x08	; 8
   10a7e:	51 e1       	ldi	r21, 0x11	; 17
   10a80:	6a e3       	ldi	r22, 0x3A	; 58
   10a82:	c7 01       	movw	r24, r14
   10a84:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10a88:	11 e0       	ldi	r17, 0x01	; 1
   10a8a:	65 e4       	ldi	r22, 0x45	; 69
   10a8c:	78 e0       	ldi	r23, 0x08	; 8
   10a8e:	ce 01       	movw	r24, r28
   10a90:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10a94:	89 2b       	or	r24, r25
   10a96:	59 f4       	brne	.+22     	; 0x10aae <setting_network(char*, char*)+0x68>
   10a98:	0a e0       	ldi	r16, 0x0A	; 10
   10a9a:	10 e0       	ldi	r17, 0x00	; 0
   10a9c:	24 e0       	ldi	r18, 0x04	; 4
   10a9e:	30 e0       	ldi	r19, 0x00	; 0
   10aa0:	4e e0       	ldi	r20, 0x0E	; 14
   10aa2:	51 e1       	ldi	r21, 0x11	; 17
   10aa4:	6e e2       	ldi	r22, 0x2E	; 46
   10aa6:	c7 01       	movw	r24, r14
   10aa8:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10aac:	11 e0       	ldi	r17, 0x01	; 1
   10aae:	68 e4       	ldi	r22, 0x48	; 72
   10ab0:	78 e0       	ldi	r23, 0x08	; 8
   10ab2:	ce 01       	movw	r24, r28
   10ab4:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10ab8:	89 2b       	or	r24, r25
   10aba:	59 f4       	brne	.+22     	; 0x10ad2 <setting_network(char*, char*)+0x8c>
   10abc:	0a e0       	ldi	r16, 0x0A	; 10
   10abe:	10 e0       	ldi	r17, 0x00	; 0
   10ac0:	24 e0       	ldi	r18, 0x04	; 4
   10ac2:	30 e0       	ldi	r19, 0x00	; 0
   10ac4:	42 e1       	ldi	r20, 0x12	; 18
   10ac6:	51 e1       	ldi	r21, 0x11	; 17
   10ac8:	6e e2       	ldi	r22, 0x2E	; 46
   10aca:	c7 01       	movw	r24, r14
   10acc:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10ad0:	11 e0       	ldi	r17, 0x01	; 1
   10ad2:	60 e5       	ldi	r22, 0x50	; 80
   10ad4:	78 e0       	ldi	r23, 0x08	; 8
   10ad6:	ce 01       	movw	r24, r28
   10ad8:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10adc:	89 2b       	or	r24, r25
   10ade:	59 f4       	brne	.+22     	; 0x10af6 <setting_network(char*, char*)+0xb0>
   10ae0:	0a e0       	ldi	r16, 0x0A	; 10
   10ae2:	10 e0       	ldi	r17, 0x00	; 0
   10ae4:	24 e0       	ldi	r18, 0x04	; 4
   10ae6:	30 e0       	ldi	r19, 0x00	; 0
   10ae8:	4a e1       	ldi	r20, 0x1A	; 26
   10aea:	51 e1       	ldi	r21, 0x11	; 17
   10aec:	6e e2       	ldi	r22, 0x2E	; 46
   10aee:	c7 01       	movw	r24, r14
   10af0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10af4:	11 e0       	ldi	r17, 0x01	; 1
   10af6:	63 e5       	ldi	r22, 0x53	; 83
   10af8:	78 e0       	ldi	r23, 0x08	; 8
   10afa:	ce 01       	movw	r24, r28
   10afc:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10b00:	89 2b       	or	r24, r25
   10b02:	59 f4       	brne	.+22     	; 0x10b1a <setting_network(char*, char*)+0xd4>
   10b04:	0a e0       	ldi	r16, 0x0A	; 10
   10b06:	10 e0       	ldi	r17, 0x00	; 0
   10b08:	24 e0       	ldi	r18, 0x04	; 4
   10b0a:	30 e0       	ldi	r19, 0x00	; 0
   10b0c:	46 e1       	ldi	r20, 0x16	; 22
   10b0e:	51 e1       	ldi	r21, 0x11	; 17
   10b10:	6e e2       	ldi	r22, 0x2E	; 46
   10b12:	c7 01       	movw	r24, r14
   10b14:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10b18:	11 e0       	ldi	r17, 0x01	; 1
   10b1a:	67 e5       	ldi	r22, 0x57	; 87
   10b1c:	78 e0       	ldi	r23, 0x08	; 8
   10b1e:	ce 01       	movw	r24, r28
   10b20:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10b24:	89 2b       	or	r24, r25
   10b26:	59 f4       	brne	.+22     	; 0x10b3e <setting_network(char*, char*)+0xf8>
   10b28:	0a e0       	ldi	r16, 0x0A	; 10
   10b2a:	10 e0       	ldi	r17, 0x00	; 0
   10b2c:	24 e0       	ldi	r18, 0x04	; 4
   10b2e:	30 e0       	ldi	r19, 0x00	; 0
   10b30:	46 e5       	ldi	r20, 0x56	; 86
   10b32:	51 e1       	ldi	r21, 0x11	; 17
   10b34:	6e e2       	ldi	r22, 0x2E	; 46
   10b36:	c7 01       	movw	r24, r14
   10b38:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10b3c:	11 e0       	ldi	r17, 0x01	; 1
   10b3e:	6b e5       	ldi	r22, 0x5B	; 91
   10b40:	78 e0       	ldi	r23, 0x08	; 8
   10b42:	ce 01       	movw	r24, r28
   10b44:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10b48:	89 2b       	or	r24, r25
   10b4a:	59 f4       	brne	.+22     	; 0x10b62 <setting_network(char*, char*)+0x11c>
   10b4c:	0a e0       	ldi	r16, 0x0A	; 10
   10b4e:	10 e0       	ldi	r17, 0x00	; 0
   10b50:	24 e0       	ldi	r18, 0x04	; 4
   10b52:	30 e0       	ldi	r19, 0x00	; 0
   10b54:	48 e2       	ldi	r20, 0x28	; 40
   10b56:	51 e1       	ldi	r21, 0x11	; 17
   10b58:	6e e2       	ldi	r22, 0x2E	; 46
   10b5a:	c7 01       	movw	r24, r14
   10b5c:	0e 94 a9 bc 	call	0x17952	; 0x17952 <parseBytes(char const*, char, unsigned char*, int, int)>
   10b60:	11 e0       	ldi	r17, 0x01	; 1
   10b62:	65 e6       	ldi	r22, 0x65	; 101
   10b64:	78 e0       	ldi	r23, 0x08	; 8
   10b66:	ce 01       	movw	r24, r28
   10b68:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10b6c:	89 2b       	or	r24, r25
   10b6e:	41 f4       	brne	.+16     	; 0x10b80 <setting_network(char*, char*)+0x13a>
   10b70:	c7 01       	movw	r24, r14
   10b72:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   10b76:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <device+0x25>
   10b7a:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <device+0x24>
   10b7e:	11 e0       	ldi	r17, 0x01	; 1
   10b80:	6f e6       	ldi	r22, 0x6F	; 111
   10b82:	78 e0       	ldi	r23, 0x08	; 8
   10b84:	ce 01       	movw	r24, r28
   10b86:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10b8a:	89 2b       	or	r24, r25
   10b8c:	31 f4       	brne	.+12     	; 0x10b9a <setting_network(char*, char*)+0x154>
   10b8e:	b7 01       	movw	r22, r14
   10b90:	8e e2       	ldi	r24, 0x2E	; 46
   10b92:	91 e1       	ldi	r25, 0x11	; 17
   10b94:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   10b98:	11 e0       	ldi	r17, 0x01	; 1
   10b9a:	69 e7       	ldi	r22, 0x79	; 121
   10b9c:	78 e0       	ldi	r23, 0x08	; 8
   10b9e:	ce 01       	movw	r24, r28
   10ba0:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10ba4:	89 2b       	or	r24, r25
   10ba6:	31 f4       	brne	.+12     	; 0x10bb4 <setting_network(char*, char*)+0x16e>
   10ba8:	b7 01       	movw	r22, r14
   10baa:	82 e4       	ldi	r24, 0x42	; 66
   10bac:	91 e1       	ldi	r25, 0x11	; 17
   10bae:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   10bb2:	11 e0       	ldi	r17, 0x01	; 1
   10bb4:	69 eb       	ldi	r22, 0xB9	; 185
   10bb6:	73 e0       	ldi	r23, 0x03	; 3
   10bb8:	ce 01       	movw	r24, r28
   10bba:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <strcmp>
   10bbe:	89 2b       	or	r24, r25
   10bc0:	21 f4       	brne	.+8      	; 0x10bca <setting_network(char*, char*)+0x184>
   10bc2:	c7 01       	movw	r24, r14
   10bc4:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <device_set_name(char*)>
   10bc8:	12 e0       	ldi	r17, 0x02	; 2
   10bca:	69 e7       	ldi	r22, 0x79	; 121
   10bcc:	73 e0       	ldi	r23, 0x03	; 3
   10bce:	90 e0       	ldi	r25, 0x00	; 0
   10bd0:	80 e0       	ldi	r24, 0x00	; 0
   10bd2:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
   10bd6:	ec 01       	movw	r28, r24
   10bd8:	43 cf       	rjmp	.-378    	; 0x10a60 <setting_network(char*, char*)+0x1a>
   10bda:	81 2f       	mov	r24, r17
   10bdc:	df 91       	pop	r29
   10bde:	cf 91       	pop	r28
   10be0:	1f 91       	pop	r17
   10be2:	0f 91       	pop	r16
   10be4:	ff 90       	pop	r15
   10be6:	ef 90       	pop	r14
   10be8:	08 95       	ret

00010bea <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
   10bea:	90 93 05 11 	sts	0x1105, r25	; 0x801105 <header_out+0x1>
   10bee:	80 93 04 11 	sts	0x1104, r24	; 0x801104 <header_out>
   10bf2:	08 95       	ret

00010bf4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10bf4:	9f 92       	push	r9
   10bf6:	af 92       	push	r10
   10bf8:	bf 92       	push	r11
   10bfa:	cf 92       	push	r12
   10bfc:	df 92       	push	r13
   10bfe:	ef 92       	push	r14
   10c00:	ff 92       	push	r15
   10c02:	0f 93       	push	r16
   10c04:	1f 93       	push	r17
   10c06:	cf 93       	push	r28
   10c08:	df 93       	push	r29
   10c0a:	cd b7       	in	r28, 0x3d	; 61
   10c0c:	de b7       	in	r29, 0x3e	; 62
   10c0e:	c6 55       	subi	r28, 0x56	; 86
   10c10:	d1 09       	sbc	r29, r1
   10c12:	0f b6       	in	r0, 0x3f	; 63
   10c14:	f8 94       	cli
   10c16:	de bf       	out	0x3e, r29	; 62
   10c18:	0f be       	out	0x3f, r0	; 63
   10c1a:	cd bf       	out	0x3d, r28	; 61
   10c1c:	7c 01       	movw	r14, r24
   10c1e:	5b 01       	movw	r10, r22
   10c20:	94 2e       	mov	r9, r20
   10c22:	69 01       	movw	r12, r18
   10c24:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   10c28:	88 23       	and	r24, r24
   10c2a:	09 f4       	brne	.+2      	; 0x10c2e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
   10c2c:	51 c0       	rjmp	.+162    	; 0x10cd0 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xdc>
   10c2e:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <mqtt_send_message>
   10c32:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <mqtt_send_message+0x1>
   10c36:	01 96       	adiw	r24, 0x01	; 1
   10c38:	90 93 07 11 	sts	0x1107, r25	; 0x801107 <mqtt_send_message+0x1>
   10c3c:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <mqtt_send_message>
   10c40:	ce 01       	movw	r24, r28
   10c42:	83 5b       	subi	r24, 0xB3	; 179
   10c44:	9f 4f       	sbci	r25, 0xFF	; 255
   10c46:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <device_get_name(char*)>
   10c4a:	60 91 04 11 	lds	r22, 0x1104	; 0x801104 <header_out>
   10c4e:	70 91 05 11 	lds	r23, 0x1105	; 0x801105 <header_out+0x1>
   10c52:	ce 01       	movw	r24, r28
   10c54:	01 96       	adiw	r24, 0x01	; 1
   10c56:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10c5a:	be 01       	movw	r22, r28
   10c5c:	63 5b       	subi	r22, 0xB3	; 179
   10c5e:	7f 4f       	sbci	r23, 0xFF	; 255
   10c60:	ce 01       	movw	r24, r28
   10c62:	01 96       	adiw	r24, 0x01	; 1
   10c64:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10c68:	69 e7       	ldi	r22, 0x79	; 121
   10c6a:	73 e0       	ldi	r23, 0x03	; 3
   10c6c:	ce 01       	movw	r24, r28
   10c6e:	01 96       	adiw	r24, 0x01	; 1
   10c70:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10c74:	b5 01       	movw	r22, r10
   10c76:	ce 01       	movw	r24, r28
   10c78:	01 96       	adiw	r24, 0x01	; 1
   10c7a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10c7e:	69 e7       	ldi	r22, 0x79	; 121
   10c80:	73 e0       	ldi	r23, 0x03	; 3
   10c82:	ce 01       	movw	r24, r28
   10c84:	01 96       	adiw	r24, 0x01	; 1
   10c86:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
   10c8a:	4a e0       	ldi	r20, 0x0A	; 10
   10c8c:	be 01       	movw	r22, r28
   10c8e:	6f 5b       	subi	r22, 0xBF	; 191
   10c90:	7f 4f       	sbci	r23, 0xFF	; 255
   10c92:	89 2d       	mov	r24, r9
   10c94:	90 e0       	ldi	r25, 0x00	; 0
   10c96:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10c9a:	be 01       	movw	r22, r28
   10c9c:	6f 5b       	subi	r22, 0xBF	; 191
   10c9e:	7f 4f       	sbci	r23, 0xFF	; 255
   10ca0:	ce 01       	movw	r24, r28
   10ca2:	01 96       	adiw	r24, 0x01	; 1
   10ca4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10ca8:	69 e7       	ldi	r22, 0x79	; 121
   10caa:	73 e0       	ldi	r23, 0x03	; 3
   10cac:	ce 01       	movw	r24, r28
   10cae:	01 96       	adiw	r24, 0x01	; 1
   10cb0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10cb4:	b6 01       	movw	r22, r12
   10cb6:	ce 01       	movw	r24, r28
   10cb8:	01 96       	adiw	r24, 0x01	; 1
   10cba:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10cbe:	a8 01       	movw	r20, r16
   10cc0:	be 01       	movw	r22, r28
   10cc2:	6f 5f       	subi	r22, 0xFF	; 255
   10cc4:	7f 4f       	sbci	r23, 0xFF	; 255
   10cc6:	c7 01       	movw	r24, r14
   10cc8:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <PubSubClient::publish(char const*, char const*)>
   10ccc:	81 11       	cpse	r24, r1
   10cce:	09 c0       	rjmp	.+18     	; 0x10ce2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xee>
   10cd0:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <mqtt_error>
   10cd4:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <mqtt_error+0x1>
   10cd8:	01 96       	adiw	r24, 0x01	; 1
   10cda:	90 93 5b 11 	sts	0x115B, r25	; 0x80115b <mqtt_error+0x1>
   10cde:	80 93 5a 11 	sts	0x115A, r24	; 0x80115a <mqtt_error>
   10ce2:	ca 5a       	subi	r28, 0xAA	; 170
   10ce4:	df 4f       	sbci	r29, 0xFF	; 255
   10ce6:	0f b6       	in	r0, 0x3f	; 63
   10ce8:	f8 94       	cli
   10cea:	de bf       	out	0x3e, r29	; 62
   10cec:	0f be       	out	0x3f, r0	; 63
   10cee:	cd bf       	out	0x3d, r28	; 61
   10cf0:	df 91       	pop	r29
   10cf2:	cf 91       	pop	r28
   10cf4:	1f 91       	pop	r17
   10cf6:	0f 91       	pop	r16
   10cf8:	ff 90       	pop	r15
   10cfa:	ef 90       	pop	r14
   10cfc:	df 90       	pop	r13
   10cfe:	cf 90       	pop	r12
   10d00:	bf 90       	pop	r11
   10d02:	af 90       	pop	r10
   10d04:	9f 90       	pop	r9
   10d06:	08 95       	ret

00010d08 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10d08:	8f 92       	push	r8
   10d0a:	9f 92       	push	r9
   10d0c:	af 92       	push	r10
   10d0e:	bf 92       	push	r11
   10d10:	cf 92       	push	r12
   10d12:	df 92       	push	r13
   10d14:	ef 92       	push	r14
   10d16:	ff 92       	push	r15
   10d18:	0f 93       	push	r16
   10d1a:	1f 93       	push	r17
   10d1c:	cf 93       	push	r28
   10d1e:	df 93       	push	r29
   10d20:	cd b7       	in	r28, 0x3d	; 61
   10d22:	de b7       	in	r29, 0x3e	; 62
   10d24:	c6 55       	subi	r28, 0x56	; 86
   10d26:	d1 09       	sbc	r29, r1
   10d28:	0f b6       	in	r0, 0x3f	; 63
   10d2a:	f8 94       	cli
   10d2c:	de bf       	out	0x3e, r29	; 62
   10d2e:	0f be       	out	0x3f, r0	; 63
   10d30:	cd bf       	out	0x3d, r28	; 61
   10d32:	6c 01       	movw	r12, r24
   10d34:	5b 01       	movw	r10, r22
   10d36:	84 2e       	mov	r8, r20
   10d38:	92 2e       	mov	r9, r18
   10d3a:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   10d3e:	88 23       	and	r24, r24
   10d40:	09 f4       	brne	.+2      	; 0x10d44 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
   10d42:	66 c0       	rjmp	.+204    	; 0x10e10 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x108>
   10d44:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <mqtt_send_message>
   10d48:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <mqtt_send_message+0x1>
   10d4c:	01 96       	adiw	r24, 0x01	; 1
   10d4e:	90 93 07 11 	sts	0x1107, r25	; 0x801107 <mqtt_send_message+0x1>
   10d52:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <mqtt_send_message>
   10d56:	ce 01       	movw	r24, r28
   10d58:	83 5b       	subi	r24, 0xB3	; 179
   10d5a:	9f 4f       	sbci	r25, 0xFF	; 255
   10d5c:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <device_get_name(char*)>
   10d60:	60 91 04 11 	lds	r22, 0x1104	; 0x801104 <header_out>
   10d64:	70 91 05 11 	lds	r23, 0x1105	; 0x801105 <header_out+0x1>
   10d68:	ce 01       	movw	r24, r28
   10d6a:	01 96       	adiw	r24, 0x01	; 1
   10d6c:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10d70:	be 01       	movw	r22, r28
   10d72:	63 5b       	subi	r22, 0xB3	; 179
   10d74:	7f 4f       	sbci	r23, 0xFF	; 255
   10d76:	ce 01       	movw	r24, r28
   10d78:	01 96       	adiw	r24, 0x01	; 1
   10d7a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10d7e:	69 e7       	ldi	r22, 0x79	; 121
   10d80:	73 e0       	ldi	r23, 0x03	; 3
   10d82:	ce 01       	movw	r24, r28
   10d84:	01 96       	adiw	r24, 0x01	; 1
   10d86:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10d8a:	b5 01       	movw	r22, r10
   10d8c:	ce 01       	movw	r24, r28
   10d8e:	01 96       	adiw	r24, 0x01	; 1
   10d90:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10d94:	69 e7       	ldi	r22, 0x79	; 121
   10d96:	73 e0       	ldi	r23, 0x03	; 3
   10d98:	ce 01       	movw	r24, r28
   10d9a:	01 96       	adiw	r24, 0x01	; 1
   10d9c:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
   10da0:	4a e0       	ldi	r20, 0x0A	; 10
   10da2:	be 01       	movw	r22, r28
   10da4:	6f 5b       	subi	r22, 0xBF	; 191
   10da6:	7f 4f       	sbci	r23, 0xFF	; 255
   10da8:	88 2d       	mov	r24, r8
   10daa:	90 e0       	ldi	r25, 0x00	; 0
   10dac:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10db0:	be 01       	movw	r22, r28
   10db2:	6f 5b       	subi	r22, 0xBF	; 191
   10db4:	7f 4f       	sbci	r23, 0xFF	; 255
   10db6:	ce 01       	movw	r24, r28
   10db8:	01 96       	adiw	r24, 0x01	; 1
   10dba:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10dbe:	69 e7       	ldi	r22, 0x79	; 121
   10dc0:	73 e0       	ldi	r23, 0x03	; 3
   10dc2:	ce 01       	movw	r24, r28
   10dc4:	01 96       	adiw	r24, 0x01	; 1
   10dc6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
itoa():
   10dca:	4a e0       	ldi	r20, 0x0A	; 10
   10dcc:	be 01       	movw	r22, r28
   10dce:	6f 5b       	subi	r22, 0xBF	; 191
   10dd0:	7f 4f       	sbci	r23, 0xFF	; 255
   10dd2:	89 2d       	mov	r24, r9
   10dd4:	90 e0       	ldi	r25, 0x00	; 0
   10dd6:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10dda:	be 01       	movw	r22, r28
   10ddc:	6f 5b       	subi	r22, 0xBF	; 191
   10dde:	7f 4f       	sbci	r23, 0xFF	; 255
   10de0:	ce 01       	movw	r24, r28
   10de2:	01 96       	adiw	r24, 0x01	; 1
   10de4:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10de8:	69 e7       	ldi	r22, 0x79	; 121
   10dea:	73 e0       	ldi	r23, 0x03	; 3
   10dec:	ce 01       	movw	r24, r28
   10dee:	01 96       	adiw	r24, 0x01	; 1
   10df0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10df4:	b8 01       	movw	r22, r16
   10df6:	ce 01       	movw	r24, r28
   10df8:	01 96       	adiw	r24, 0x01	; 1
   10dfa:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10dfe:	a7 01       	movw	r20, r14
   10e00:	be 01       	movw	r22, r28
   10e02:	6f 5f       	subi	r22, 0xFF	; 255
   10e04:	7f 4f       	sbci	r23, 0xFF	; 255
   10e06:	c6 01       	movw	r24, r12
   10e08:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <PubSubClient::publish(char const*, char const*)>
   10e0c:	81 11       	cpse	r24, r1
   10e0e:	09 c0       	rjmp	.+18     	; 0x10e22 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x11a>
   10e10:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <mqtt_error>
   10e14:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <mqtt_error+0x1>
   10e18:	01 96       	adiw	r24, 0x01	; 1
   10e1a:	90 93 5b 11 	sts	0x115B, r25	; 0x80115b <mqtt_error+0x1>
   10e1e:	80 93 5a 11 	sts	0x115A, r24	; 0x80115a <mqtt_error>
   10e22:	ca 5a       	subi	r28, 0xAA	; 170
   10e24:	df 4f       	sbci	r29, 0xFF	; 255
   10e26:	0f b6       	in	r0, 0x3f	; 63
   10e28:	f8 94       	cli
   10e2a:	de bf       	out	0x3e, r29	; 62
   10e2c:	0f be       	out	0x3f, r0	; 63
   10e2e:	cd bf       	out	0x3d, r28	; 61
   10e30:	df 91       	pop	r29
   10e32:	cf 91       	pop	r28
   10e34:	1f 91       	pop	r17
   10e36:	0f 91       	pop	r16
   10e38:	ff 90       	pop	r15
   10e3a:	ef 90       	pop	r14
   10e3c:	df 90       	pop	r13
   10e3e:	cf 90       	pop	r12
   10e40:	bf 90       	pop	r11
   10e42:	af 90       	pop	r10
   10e44:	9f 90       	pop	r9
   10e46:	8f 90       	pop	r8
   10e48:	08 95       	ret

00010e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
   10e4a:	cf 92       	push	r12
   10e4c:	df 92       	push	r13
   10e4e:	ef 92       	push	r14
   10e50:	ff 92       	push	r15
   10e52:	0f 93       	push	r16
   10e54:	1f 93       	push	r17
   10e56:	cf 93       	push	r28
   10e58:	df 93       	push	r29
   10e5a:	cd b7       	in	r28, 0x3d	; 61
   10e5c:	de b7       	in	r29, 0x3e	; 62
   10e5e:	ca 54       	subi	r28, 0x4A	; 74
   10e60:	d1 09       	sbc	r29, r1
   10e62:	0f b6       	in	r0, 0x3f	; 63
   10e64:	f8 94       	cli
   10e66:	de bf       	out	0x3e, r29	; 62
   10e68:	0f be       	out	0x3f, r0	; 63
   10e6a:	cd bf       	out	0x3d, r28	; 61
   10e6c:	8c 01       	movw	r16, r24
   10e6e:	6b 01       	movw	r12, r22
   10e70:	7a 01       	movw	r14, r20
   10e72:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   10e76:	88 23       	and	r24, r24
   10e78:	89 f1       	breq	.+98     	; 0x10edc <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
   10e7a:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <mqtt_send_message>
   10e7e:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <mqtt_send_message+0x1>
   10e82:	01 96       	adiw	r24, 0x01	; 1
   10e84:	90 93 07 11 	sts	0x1107, r25	; 0x801107 <mqtt_send_message+0x1>
   10e88:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <mqtt_send_message>
   10e8c:	ce 01       	movw	r24, r28
   10e8e:	8f 5b       	subi	r24, 0xBF	; 191
   10e90:	9f 4f       	sbci	r25, 0xFF	; 255
   10e92:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <device_get_name(char*)>
   10e96:	60 91 04 11 	lds	r22, 0x1104	; 0x801104 <header_out>
   10e9a:	70 91 05 11 	lds	r23, 0x1105	; 0x801105 <header_out+0x1>
   10e9e:	ce 01       	movw	r24, r28
   10ea0:	01 96       	adiw	r24, 0x01	; 1
   10ea2:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10ea6:	be 01       	movw	r22, r28
   10ea8:	6f 5b       	subi	r22, 0xBF	; 191
   10eaa:	7f 4f       	sbci	r23, 0xFF	; 255
   10eac:	ce 01       	movw	r24, r28
   10eae:	01 96       	adiw	r24, 0x01	; 1
   10eb0:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10eb4:	69 e7       	ldi	r22, 0x79	; 121
   10eb6:	73 e0       	ldi	r23, 0x03	; 3
   10eb8:	ce 01       	movw	r24, r28
   10eba:	01 96       	adiw	r24, 0x01	; 1
   10ebc:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10ec0:	b6 01       	movw	r22, r12
   10ec2:	ce 01       	movw	r24, r28
   10ec4:	01 96       	adiw	r24, 0x01	; 1
   10ec6:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   10eca:	a7 01       	movw	r20, r14
   10ecc:	be 01       	movw	r22, r28
   10ece:	6f 5f       	subi	r22, 0xFF	; 255
   10ed0:	7f 4f       	sbci	r23, 0xFF	; 255
   10ed2:	c8 01       	movw	r24, r16
   10ed4:	0e 94 c7 c5 	call	0x18b8e	; 0x18b8e <PubSubClient::publish(char const*, char const*)>
   10ed8:	81 11       	cpse	r24, r1
   10eda:	09 c0       	rjmp	.+18     	; 0x10eee <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
   10edc:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <mqtt_error>
   10ee0:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <mqtt_error+0x1>
   10ee4:	01 96       	adiw	r24, 0x01	; 1
   10ee6:	90 93 5b 11 	sts	0x115B, r25	; 0x80115b <mqtt_error+0x1>
   10eea:	80 93 5a 11 	sts	0x115A, r24	; 0x80115a <mqtt_error>
   10eee:	c6 5b       	subi	r28, 0xB6	; 182
   10ef0:	df 4f       	sbci	r29, 0xFF	; 255
   10ef2:	0f b6       	in	r0, 0x3f	; 63
   10ef4:	f8 94       	cli
   10ef6:	de bf       	out	0x3e, r29	; 62
   10ef8:	0f be       	out	0x3f, r0	; 63
   10efa:	cd bf       	out	0x3d, r28	; 61
   10efc:	df 91       	pop	r29
   10efe:	cf 91       	pop	r28
   10f00:	1f 91       	pop	r17
   10f02:	0f 91       	pop	r16
   10f04:	ff 90       	pop	r15
   10f06:	ef 90       	pop	r14
   10f08:	df 90       	pop	r13
   10f0a:	cf 90       	pop	r12
   10f0c:	08 95       	ret

00010f0e <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   10f0e:	ef 92       	push	r14
   10f10:	ff 92       	push	r15
   10f12:	0f 93       	push	r16
   10f14:	cf 93       	push	r28
   10f16:	df 93       	push	r29
   10f18:	cd b7       	in	r28, 0x3d	; 61
   10f1a:	de b7       	in	r29, 0x3e	; 62
   10f1c:	e4 97       	sbiw	r28, 0x34	; 52
   10f1e:	0f b6       	in	r0, 0x3f	; 63
   10f20:	f8 94       	cli
   10f22:	de bf       	out	0x3e, r29	; 62
   10f24:	0f be       	out	0x3f, r0	; 63
   10f26:	cd bf       	out	0x3d, r28	; 61
   10f28:	7c 01       	movw	r14, r24
   10f2a:	19 a2       	std	Y+33, r1	; 0x21
   10f2c:	00 e1       	ldi	r16, 0x10	; 16
   10f2e:	26 e0       	ldi	r18, 0x06	; 6
   10f30:	48 e0       	ldi	r20, 0x08	; 8
   10f32:	51 e1       	ldi	r21, 0x11	; 17
   10f34:	6a e3       	ldi	r22, 0x3A	; 58
   10f36:	ce 01       	movw	r24, r28
   10f38:	81 96       	adiw	r24, 0x21	; 33
   10f3a:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10f3e:	6b e9       	ldi	r22, 0x9B	; 155
   10f40:	7c e5       	ldi	r23, 0x5C	; 92
   10f42:	ce 01       	movw	r24, r28
   10f44:	01 96       	adiw	r24, 0x01	; 1
   10f46:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10f4a:	ae 01       	movw	r20, r28
   10f4c:	4f 5d       	subi	r20, 0xDF	; 223
   10f4e:	5f 4f       	sbci	r21, 0xFF	; 255
   10f50:	be 01       	movw	r22, r28
   10f52:	6f 5f       	subi	r22, 0xFF	; 255
   10f54:	7f 4f       	sbci	r23, 0xFF	; 255
   10f56:	c7 01       	movw	r24, r14
   10f58:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10f5c:	19 a2       	std	Y+33, r1	; 0x21
   10f5e:	0a e0       	ldi	r16, 0x0A	; 10
   10f60:	24 e0       	ldi	r18, 0x04	; 4
   10f62:	4e e0       	ldi	r20, 0x0E	; 14
   10f64:	51 e1       	ldi	r21, 0x11	; 17
   10f66:	6e e2       	ldi	r22, 0x2E	; 46
   10f68:	ce 01       	movw	r24, r28
   10f6a:	81 96       	adiw	r24, 0x21	; 33
   10f6c:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10f70:	68 ec       	ldi	r22, 0xC8	; 200
   10f72:	7c e5       	ldi	r23, 0x5C	; 92
   10f74:	ce 01       	movw	r24, r28
   10f76:	01 96       	adiw	r24, 0x01	; 1
   10f78:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10f7c:	ae 01       	movw	r20, r28
   10f7e:	4f 5d       	subi	r20, 0xDF	; 223
   10f80:	5f 4f       	sbci	r21, 0xFF	; 255
   10f82:	be 01       	movw	r22, r28
   10f84:	6f 5f       	subi	r22, 0xFF	; 255
   10f86:	7f 4f       	sbci	r23, 0xFF	; 255
   10f88:	c7 01       	movw	r24, r14
   10f8a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10f8e:	19 a2       	std	Y+33, r1	; 0x21
   10f90:	24 e0       	ldi	r18, 0x04	; 4
   10f92:	42 e1       	ldi	r20, 0x12	; 18
   10f94:	51 e1       	ldi	r21, 0x11	; 17
   10f96:	6e e2       	ldi	r22, 0x2E	; 46
   10f98:	ce 01       	movw	r24, r28
   10f9a:	81 96       	adiw	r24, 0x21	; 33
   10f9c:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10fa0:	6b e8       	ldi	r22, 0x8B	; 139
   10fa2:	7c e5       	ldi	r23, 0x5C	; 92
   10fa4:	ce 01       	movw	r24, r28
   10fa6:	01 96       	adiw	r24, 0x01	; 1
   10fa8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10fac:	ae 01       	movw	r20, r28
   10fae:	4f 5d       	subi	r20, 0xDF	; 223
   10fb0:	5f 4f       	sbci	r21, 0xFF	; 255
   10fb2:	be 01       	movw	r22, r28
   10fb4:	6f 5f       	subi	r22, 0xFF	; 255
   10fb6:	7f 4f       	sbci	r23, 0xFF	; 255
   10fb8:	c7 01       	movw	r24, r14
   10fba:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10fbe:	19 a2       	std	Y+33, r1	; 0x21
   10fc0:	24 e0       	ldi	r18, 0x04	; 4
   10fc2:	4a e1       	ldi	r20, 0x1A	; 26
   10fc4:	51 e1       	ldi	r21, 0x11	; 17
   10fc6:	6e e2       	ldi	r22, 0x2E	; 46
   10fc8:	ce 01       	movw	r24, r28
   10fca:	81 96       	adiw	r24, 0x21	; 33
   10fcc:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10fd0:	60 e8       	ldi	r22, 0x80	; 128
   10fd2:	7c e5       	ldi	r23, 0x5C	; 92
   10fd4:	ce 01       	movw	r24, r28
   10fd6:	01 96       	adiw	r24, 0x01	; 1
   10fd8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   10fdc:	ae 01       	movw	r20, r28
   10fde:	4f 5d       	subi	r20, 0xDF	; 223
   10fe0:	5f 4f       	sbci	r21, 0xFF	; 255
   10fe2:	be 01       	movw	r22, r28
   10fe4:	6f 5f       	subi	r22, 0xFF	; 255
   10fe6:	7f 4f       	sbci	r23, 0xFF	; 255
   10fe8:	c7 01       	movw	r24, r14
   10fea:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10fee:	19 a2       	std	Y+33, r1	; 0x21
   10ff0:	24 e0       	ldi	r18, 0x04	; 4
   10ff2:	46 e1       	ldi	r20, 0x16	; 22
   10ff4:	51 e1       	ldi	r21, 0x11	; 17
   10ff6:	6e e2       	ldi	r22, 0x2E	; 46
   10ff8:	ce 01       	movw	r24, r28
   10ffa:	81 96       	adiw	r24, 0x21	; 33
   10ffc:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11000:	64 e7       	ldi	r22, 0x74	; 116
   11002:	7c e5       	ldi	r23, 0x5C	; 92
   11004:	ce 01       	movw	r24, r28
   11006:	01 96       	adiw	r24, 0x01	; 1
   11008:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1100c:	ae 01       	movw	r20, r28
   1100e:	4f 5d       	subi	r20, 0xDF	; 223
   11010:	5f 4f       	sbci	r21, 0xFF	; 255
   11012:	be 01       	movw	r22, r28
   11014:	6f 5f       	subi	r22, 0xFF	; 255
   11016:	7f 4f       	sbci	r23, 0xFF	; 255
   11018:	c7 01       	movw	r24, r14
   1101a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1101e:	19 a2       	std	Y+33, r1	; 0x21
   11020:	24 e0       	ldi	r18, 0x04	; 4
   11022:	46 e5       	ldi	r20, 0x56	; 86
   11024:	51 e1       	ldi	r21, 0x11	; 17
   11026:	6e e2       	ldi	r22, 0x2E	; 46
   11028:	ce 01       	movw	r24, r28
   1102a:	81 96       	adiw	r24, 0x21	; 33
   1102c:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11030:	68 e6       	ldi	r22, 0x68	; 104
   11032:	7c e5       	ldi	r23, 0x5C	; 92
   11034:	ce 01       	movw	r24, r28
   11036:	01 96       	adiw	r24, 0x01	; 1
   11038:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1103c:	ae 01       	movw	r20, r28
   1103e:	4f 5d       	subi	r20, 0xDF	; 223
   11040:	5f 4f       	sbci	r21, 0xFF	; 255
   11042:	be 01       	movw	r22, r28
   11044:	6f 5f       	subi	r22, 0xFF	; 255
   11046:	7f 4f       	sbci	r23, 0xFF	; 255
   11048:	c7 01       	movw	r24, r14
   1104a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1104e:	19 a2       	std	Y+33, r1	; 0x21
   11050:	24 e0       	ldi	r18, 0x04	; 4
   11052:	48 e2       	ldi	r20, 0x28	; 40
   11054:	51 e1       	ldi	r21, 0x11	; 17
   11056:	6e e2       	ldi	r22, 0x2E	; 46
   11058:	ce 01       	movw	r24, r28
   1105a:	81 96       	adiw	r24, 0x21	; 33
   1105c:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11060:	66 e5       	ldi	r22, 0x56	; 86
   11062:	7c e5       	ldi	r23, 0x5C	; 92
   11064:	ce 01       	movw	r24, r28
   11066:	01 96       	adiw	r24, 0x01	; 1
   11068:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1106c:	ae 01       	movw	r20, r28
   1106e:	4f 5d       	subi	r20, 0xDF	; 223
   11070:	5f 4f       	sbci	r21, 0xFF	; 255
   11072:	be 01       	movw	r22, r28
   11074:	6f 5f       	subi	r22, 0xFF	; 255
   11076:	7f 4f       	sbci	r23, 0xFF	; 255
   11078:	c7 01       	movw	r24, r14
   1107a:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   1107e:	4a e0       	ldi	r20, 0x0A	; 10
   11080:	be 01       	movw	r22, r28
   11082:	6f 5d       	subi	r22, 0xDF	; 223
   11084:	7f 4f       	sbci	r23, 0xFF	; 255
   11086:	80 91 2c 11 	lds	r24, 0x112C	; 0x80112c <device+0x24>
   1108a:	90 91 2d 11 	lds	r25, 0x112D	; 0x80112d <device+0x25>
   1108e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   11092:	64 e4       	ldi	r22, 0x44	; 68
   11094:	7c e5       	ldi	r23, 0x5C	; 92
   11096:	ce 01       	movw	r24, r28
   11098:	01 96       	adiw	r24, 0x01	; 1
   1109a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1109e:	ae 01       	movw	r20, r28
   110a0:	4f 5d       	subi	r20, 0xDF	; 223
   110a2:	5f 4f       	sbci	r21, 0xFF	; 255
   110a4:	be 01       	movw	r22, r28
   110a6:	6f 5f       	subi	r22, 0xFF	; 255
   110a8:	7f 4f       	sbci	r23, 0xFF	; 255
   110aa:	c7 01       	movw	r24, r14
   110ac:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   110b0:	62 e3       	ldi	r22, 0x32	; 50
   110b2:	7c e5       	ldi	r23, 0x5C	; 92
   110b4:	ce 01       	movw	r24, r28
   110b6:	01 96       	adiw	r24, 0x01	; 1
   110b8:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   110bc:	4e e2       	ldi	r20, 0x2E	; 46
   110be:	51 e1       	ldi	r21, 0x11	; 17
   110c0:	be 01       	movw	r22, r28
   110c2:	6f 5f       	subi	r22, 0xFF	; 255
   110c4:	7f 4f       	sbci	r23, 0xFF	; 255
   110c6:	c7 01       	movw	r24, r14
   110c8:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   110cc:	61 e2       	ldi	r22, 0x21	; 33
   110ce:	7c e5       	ldi	r23, 0x5C	; 92
   110d0:	ce 01       	movw	r24, r28
   110d2:	01 96       	adiw	r24, 0x01	; 1
   110d4:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   110d8:	42 e4       	ldi	r20, 0x42	; 66
   110da:	51 e1       	ldi	r21, 0x11	; 17
   110dc:	be 01       	movw	r22, r28
   110de:	6f 5f       	subi	r22, 0xFF	; 255
   110e0:	7f 4f       	sbci	r23, 0xFF	; 255
   110e2:	c7 01       	movw	r24, r14
   110e4:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   110e8:	6b eb       	ldi	r22, 0xBB	; 187
   110ea:	7c e5       	ldi	r23, 0x5C	; 92
   110ec:	ce 01       	movw	r24, r28
   110ee:	01 96       	adiw	r24, 0x01	; 1
   110f0:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   110f4:	4e e1       	ldi	r20, 0x1E	; 30
   110f6:	51 e1       	ldi	r21, 0x11	; 17
   110f8:	be 01       	movw	r22, r28
   110fa:	6f 5f       	subi	r22, 0xFF	; 255
   110fc:	7f 4f       	sbci	r23, 0xFF	; 255
   110fe:	c7 01       	movw	r24, r14
   11100:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11104:	e4 96       	adiw	r28, 0x34	; 52
   11106:	0f b6       	in	r0, 0x3f	; 63
   11108:	f8 94       	cli
   1110a:	de bf       	out	0x3e, r29	; 62
   1110c:	0f be       	out	0x3f, r0	; 63
   1110e:	cd bf       	out	0x3d, r28	; 61
   11110:	df 91       	pop	r29
   11112:	cf 91       	pop	r28
   11114:	0f 91       	pop	r16
   11116:	ff 90       	pop	r15
   11118:	ef 90       	pop	r14
   1111a:	08 95       	ret

0001111c <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   1111c:	ef 92       	push	r14
   1111e:	ff 92       	push	r15
   11120:	0f 93       	push	r16
   11122:	cf 93       	push	r28
   11124:	df 93       	push	r29
   11126:	cd b7       	in	r28, 0x3d	; 61
   11128:	de b7       	in	r29, 0x3e	; 62
   1112a:	c0 58       	subi	r28, 0x80	; 128
   1112c:	d1 09       	sbc	r29, r1
   1112e:	0f b6       	in	r0, 0x3f	; 63
   11130:	f8 94       	cli
   11132:	de bf       	out	0x3e, r29	; 62
   11134:	0f be       	out	0x3f, r0	; 63
   11136:	cd bf       	out	0x3d, r28	; 61
   11138:	7c 01       	movw	r14, r24
   1113a:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   1113e:	88 23       	and	r24, r24
   11140:	09 f4       	brne	.+2      	; 0x11144 <send_mqtt_status(PubSubClient*)+0x28>
   11142:	a7 c0       	rjmp	.+334    	; 0x11292 <send_mqtt_status(PubSubClient*)+0x176>
   11144:	6d e0       	ldi	r22, 0x0D	; 13
   11146:	7d e5       	ldi	r23, 0x5D	; 93
   11148:	ce 01       	movw	r24, r28
   1114a:	8f 5b       	subi	r24, 0xBF	; 191
   1114c:	9f 4f       	sbci	r25, 0xFF	; 255
   1114e:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
   11152:	4a e0       	ldi	r20, 0x0A	; 10
   11154:	be 01       	movw	r22, r28
   11156:	6f 5f       	subi	r22, 0xFF	; 255
   11158:	7f 4f       	sbci	r23, 0xFF	; 255
   1115a:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <mqtt_send_message>
   1115e:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <mqtt_send_message+0x1>
   11162:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   11166:	10 92 07 11 	sts	0x1107, r1	; 0x801107 <mqtt_send_message+0x1>
   1116a:	10 92 06 11 	sts	0x1106, r1	; 0x801106 <mqtt_send_message>
   1116e:	ae 01       	movw	r20, r28
   11170:	4f 5f       	subi	r20, 0xFF	; 255
   11172:	5f 4f       	sbci	r21, 0xFF	; 255
   11174:	be 01       	movw	r22, r28
   11176:	6f 5b       	subi	r22, 0xBF	; 191
   11178:	7f 4f       	sbci	r23, 0xFF	; 255
   1117a:	c7 01       	movw	r24, r14
   1117c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11180:	6b ef       	ldi	r22, 0xFB	; 251
   11182:	7c e5       	ldi	r23, 0x5C	; 92
   11184:	ce 01       	movw	r24, r28
   11186:	8f 5b       	subi	r24, 0xBF	; 191
   11188:	9f 4f       	sbci	r25, 0xFF	; 255
   1118a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
   1118e:	4a e0       	ldi	r20, 0x0A	; 10
   11190:	be 01       	movw	r22, r28
   11192:	6f 5f       	subi	r22, 0xFF	; 255
   11194:	7f 4f       	sbci	r23, 0xFF	; 255
   11196:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <mqtt_error>
   1119a:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <mqtt_error+0x1>
   1119e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   111a2:	ae 01       	movw	r20, r28
   111a4:	4f 5f       	subi	r20, 0xFF	; 255
   111a6:	5f 4f       	sbci	r21, 0xFF	; 255
   111a8:	be 01       	movw	r22, r28
   111aa:	6f 5b       	subi	r22, 0xBF	; 191
   111ac:	7f 4f       	sbci	r23, 0xFF	; 255
   111ae:	c7 01       	movw	r24, r14
   111b0:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   111b4:	67 ee       	ldi	r22, 0xE7	; 231
   111b6:	7c e5       	ldi	r23, 0x5C	; 92
   111b8:	ce 01       	movw	r24, r28
   111ba:	8f 5b       	subi	r24, 0xBF	; 191
   111bc:	9f 4f       	sbci	r25, 0xFF	; 255
   111be:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
   111c2:	4a e0       	ldi	r20, 0x0A	; 10
   111c4:	be 01       	movw	r22, r28
   111c6:	6f 5f       	subi	r22, 0xFF	; 255
   111c8:	7f 4f       	sbci	r23, 0xFF	; 255
   111ca:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <mqtt_receive_message>
   111ce:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <mqtt_receive_message+0x1>
   111d2:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   111d6:	10 92 03 11 	sts	0x1103, r1	; 0x801103 <mqtt_receive_message+0x1>
   111da:	10 92 02 11 	sts	0x1102, r1	; 0x801102 <mqtt_receive_message>
   111de:	ae 01       	movw	r20, r28
   111e0:	4f 5f       	subi	r20, 0xFF	; 255
   111e2:	5f 4f       	sbci	r21, 0xFF	; 255
   111e4:	be 01       	movw	r22, r28
   111e6:	6f 5b       	subi	r22, 0xBF	; 191
   111e8:	7f 4f       	sbci	r23, 0xFF	; 255
   111ea:	c7 01       	movw	r24, r14
   111ec:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   111f0:	63 ed       	ldi	r22, 0xD3	; 211
   111f2:	7c e5       	ldi	r23, 0x5C	; 92
   111f4:	ce 01       	movw	r24, r28
   111f6:	8f 5b       	subi	r24, 0xBF	; 191
   111f8:	9f 4f       	sbci	r25, 0xFF	; 255
   111fa:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
itoa():
   111fe:	4a e0       	ldi	r20, 0x0A	; 10
   11200:	be 01       	movw	r22, r28
   11202:	6f 5f       	subi	r22, 0xFF	; 255
   11204:	7f 4f       	sbci	r23, 0xFF	; 255
   11206:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <mqtt_process_message>
   1120a:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <mqtt_process_message+0x1>
   1120e:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   11212:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <mqtt_process_message+0x1>
   11216:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <mqtt_process_message>
   1121a:	ae 01       	movw	r20, r28
   1121c:	4f 5f       	subi	r20, 0xFF	; 255
   1121e:	5f 4f       	sbci	r21, 0xFF	; 255
   11220:	be 01       	movw	r22, r28
   11222:	6f 5b       	subi	r22, 0xBF	; 191
   11224:	7f 4f       	sbci	r23, 0xFF	; 255
   11226:	c7 01       	movw	r24, r14
   11228:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1122c:	19 82       	std	Y+1, r1	; 0x01
   1122e:	0a e0       	ldi	r16, 0x0A	; 10
   11230:	24 e0       	ldi	r18, 0x04	; 4
   11232:	4e e0       	ldi	r20, 0x0E	; 14
   11234:	51 e1       	ldi	r21, 0x11	; 17
   11236:	6e e2       	ldi	r22, 0x2E	; 46
   11238:	ce 01       	movw	r24, r28
   1123a:	01 96       	adiw	r24, 0x01	; 1
   1123c:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   11240:	68 ec       	ldi	r22, 0xC8	; 200
   11242:	7c e5       	ldi	r23, 0x5C	; 92
   11244:	ce 01       	movw	r24, r28
   11246:	8f 5b       	subi	r24, 0xBF	; 191
   11248:	9f 4f       	sbci	r25, 0xFF	; 255
   1124a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1124e:	ae 01       	movw	r20, r28
   11250:	4f 5f       	subi	r20, 0xFF	; 255
   11252:	5f 4f       	sbci	r21, 0xFF	; 255
   11254:	be 01       	movw	r22, r28
   11256:	6f 5b       	subi	r22, 0xBF	; 191
   11258:	7f 4f       	sbci	r23, 0xFF	; 255
   1125a:	c7 01       	movw	r24, r14
   1125c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11260:	67 ea       	ldi	r22, 0xA7	; 167
   11262:	7c e5       	ldi	r23, 0x5C	; 92
   11264:	ce 01       	movw	r24, r28
   11266:	8f 5b       	subi	r24, 0xBF	; 191
   11268:	9f 4f       	sbci	r25, 0xFF	; 255
   1126a:	0e 94 8a e0 	call	0x1c114	; 0x1c114 <strcpy_P>
   1126e:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <count_know_mqtt>
itoa():
   11272:	4a e0       	ldi	r20, 0x0A	; 10
   11274:	be 01       	movw	r22, r28
   11276:	6f 5f       	subi	r22, 0xFF	; 255
   11278:	7f 4f       	sbci	r23, 0xFF	; 255
   1127a:	90 e0       	ldi	r25, 0x00	; 0
   1127c:	0e 94 13 e1 	call	0x1c226	; 0x1c226 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   11280:	ae 01       	movw	r20, r28
   11282:	4f 5f       	subi	r20, 0xFF	; 255
   11284:	5f 4f       	sbci	r21, 0xFF	; 255
   11286:	be 01       	movw	r22, r28
   11288:	6f 5b       	subi	r22, 0xBF	; 191
   1128a:	7f 4f       	sbci	r23, 0xFF	; 255
   1128c:	c7 01       	movw	r24, r14
   1128e:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11292:	10 92 5b 11 	sts	0x115B, r1	; 0x80115b <mqtt_error+0x1>
   11296:	10 92 5a 11 	sts	0x115A, r1	; 0x80115a <mqtt_error>
   1129a:	c0 58       	subi	r28, 0x80	; 128
   1129c:	df 4f       	sbci	r29, 0xFF	; 255
   1129e:	0f b6       	in	r0, 0x3f	; 63
   112a0:	f8 94       	cli
   112a2:	de bf       	out	0x3e, r29	; 62
   112a4:	0f be       	out	0x3f, r0	; 63
   112a6:	cd bf       	out	0x3d, r28	; 61
   112a8:	df 91       	pop	r29
   112aa:	cf 91       	pop	r28
   112ac:	0f 91       	pop	r16
   112ae:	ff 90       	pop	r15
   112b0:	ef 90       	pop	r14
   112b2:	08 95       	ret

000112b4 <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   112b4:	08 95       	ret

000112b6 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime():
   112b6:	8f 92       	push	r8
   112b8:	9f 92       	push	r9
   112ba:	af 92       	push	r10
   112bc:	bf 92       	push	r11
   112be:	cf 92       	push	r12
   112c0:	ef 92       	push	r14
   112c2:	ff 92       	push	r15
   112c4:	0f 93       	push	r16
   112c6:	1f 93       	push	r17
   112c8:	cf 93       	push	r28
   112ca:	df 93       	push	r29
   112cc:	cd b7       	in	r28, 0x3d	; 61
   112ce:	de b7       	in	r29, 0x3e	; 62
   112d0:	6b 97       	sbiw	r28, 0x1b	; 27
   112d2:	0f b6       	in	r0, 0x3f	; 63
   112d4:	f8 94       	cli
   112d6:	de bf       	out	0x3e, r29	; 62
   112d8:	0f be       	out	0x3f, r0	; 63
   112da:	cd bf       	out	0x3d, r28	; 61
   112dc:	5c 01       	movw	r10, r24
   112de:	14 2f       	mov	r17, r20
   112e0:	49 01       	movw	r8, r18
   112e2:	19 82       	std	Y+1, r1	; 0x01
   112e4:	0a e0       	ldi	r16, 0x0A	; 10
   112e6:	24 e0       	ldi	r18, 0x04	; 4
   112e8:	46 e5       	ldi	r20, 0x56	; 86
   112ea:	51 e1       	ldi	r21, 0x11	; 17
   112ec:	6e e2       	ldi	r22, 0x2E	; 46
   112ee:	ce 01       	movw	r24, r28
   112f0:	01 96       	adiw	r24, 0x01	; 1
   112f2:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   112f6:	c5 01       	movw	r24, r10
   112f8:	0e 94 b4 d2 	call	0x1a568	; 0x1a568 <NTPClient::begin()>
   112fc:	80 e1       	ldi	r24, 0x10	; 16
   112fe:	9e e0       	ldi	r25, 0x0E	; 14
   11300:	18 9f       	mul	r17, r24
   11302:	b0 01       	movw	r22, r0
   11304:	19 9f       	mul	r17, r25
   11306:	70 0d       	add	r23, r0
   11308:	11 24       	eor	r1, r1
   1130a:	c5 01       	movw	r24, r10
   1130c:	0e 94 7b d3 	call	0x1a6f6	; 0x1a6f6 <NTPClient::setTimeOffset(int)>
   11310:	be 01       	movw	r22, r28
   11312:	6f 5f       	subi	r22, 0xFF	; 255
   11314:	7f 4f       	sbci	r23, 0xFF	; 255
   11316:	c5 01       	movw	r24, r10
   11318:	0e 94 8b d3 	call	0x1a716	; 0x1a716 <NTPClient::setPoolServerName(char const*)>
   1131c:	c5 01       	movw	r24, r10
   1131e:	0e 94 42 d4 	call	0x1a884	; 0x1a884 <NTPClient::update()>
   11322:	10 e0       	ldi	r17, 0x00	; 0
   11324:	88 23       	and	r24, r24
   11326:	79 f1       	breq	.+94     	; 0x11386 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xd0>
   11328:	c5 01       	movw	r24, r10
   1132a:	0e 94 61 d3 	call	0x1a6c2	; 0x1a6c2 <NTPClient::getSeconds() const>
   1132e:	c8 2e       	mov	r12, r24
   11330:	c5 01       	movw	r24, r10
   11332:	0e 94 51 d3 	call	0x1a6a2	; 0x1a6a2 <NTPClient::getMinutes() const>
   11336:	e8 2e       	mov	r14, r24
   11338:	c5 01       	movw	r24, r10
   1133a:	0e 94 41 d3 	call	0x1a682	; 0x1a682 <NTPClient::getHours() const>
   1133e:	08 2f       	mov	r16, r24
   11340:	c5 01       	movw	r24, r10
   11342:	0e 94 25 d3 	call	0x1a64a	; 0x1a64a <NTPClient::getDate() const>
   11346:	f8 2e       	mov	r15, r24
   11348:	c5 01       	movw	r24, r10
   1134a:	0e 94 08 d3 	call	0x1a610	; 0x1a610 <NTPClient::getMonth() const>
   1134e:	18 2f       	mov	r17, r24
   11350:	c5 01       	movw	r24, r10
   11352:	0e 94 ec d2 	call	0x1a5d8	; 0x1a5d8 <NTPClient::getYear() const>
   11356:	2f 2d       	mov	r18, r15
   11358:	41 2f       	mov	r20, r17
   1135a:	bc 01       	movw	r22, r24
   1135c:	ce 01       	movw	r24, r28
   1135e:	45 96       	adiw	r24, 0x15	; 21
   11360:	0e 94 1e cb 	call	0x1963c	; 0x1963c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   11364:	ce 01       	movw	r24, r28
   11366:	45 96       	adiw	r24, 0x15	; 21
   11368:	0e 94 45 cb 	call	0x1968a	; 0x1968a <RTC_DS1307::adjust(DateTime const&)>
   1136c:	ce 01       	movw	r24, r28
   1136e:	45 96       	adiw	r24, 0x15	; 21
   11370:	0e 94 d5 cb 	call	0x197aa	; 0x197aa <RTC_DS1307::now()>
   11374:	87 e0       	ldi	r24, 0x07	; 7
   11376:	fe 01       	movw	r30, r28
   11378:	75 96       	adiw	r30, 0x15	; 21
   1137a:	d4 01       	movw	r26, r8
   1137c:	01 90       	ld	r0, Z+
   1137e:	0d 92       	st	X+, r0
   11380:	8a 95       	dec	r24
   11382:	e1 f7       	brne	.-8      	; 0x1137c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*)+0xc6>
   11384:	11 e0       	ldi	r17, 0x01	; 1
   11386:	c5 01       	movw	r24, r10
   11388:	0e 94 6b d3 	call	0x1a6d6	; 0x1a6d6 <NTPClient::end()>
   1138c:	81 2f       	mov	r24, r17
   1138e:	6b 96       	adiw	r28, 0x1b	; 27
   11390:	0f b6       	in	r0, 0x3f	; 63
   11392:	f8 94       	cli
   11394:	de bf       	out	0x3e, r29	; 62
   11396:	0f be       	out	0x3f, r0	; 63
   11398:	cd bf       	out	0x3d, r28	; 61
   1139a:	df 91       	pop	r29
   1139c:	cf 91       	pop	r28
   1139e:	1f 91       	pop	r17
   113a0:	0f 91       	pop	r16
   113a2:	ff 90       	pop	r15
   113a4:	ef 90       	pop	r14
   113a6:	cf 90       	pop	r12
   113a8:	bf 90       	pop	r11
   113aa:	af 90       	pop	r10
   113ac:	9f 90       	pop	r9
   113ae:	8f 90       	pop	r8
   113b0:	08 95       	ret

000113b2 <ntp_check(NTPClient*)>:
_Z9ntp_checkP9NTPClient():
   113b2:	ef 92       	push	r14
   113b4:	ff 92       	push	r15
   113b6:	0f 93       	push	r16
   113b8:	1f 93       	push	r17
   113ba:	cf 93       	push	r28
   113bc:	df 93       	push	r29
   113be:	cd b7       	in	r28, 0x3d	; 61
   113c0:	de b7       	in	r29, 0x3e	; 62
   113c2:	64 97       	sbiw	r28, 0x14	; 20
   113c4:	0f b6       	in	r0, 0x3f	; 63
   113c6:	f8 94       	cli
   113c8:	de bf       	out	0x3e, r29	; 62
   113ca:	0f be       	out	0x3f, r0	; 63
   113cc:	cd bf       	out	0x3d, r28	; 61
   113ce:	7c 01       	movw	r14, r24
   113d0:	19 82       	std	Y+1, r1	; 0x01
   113d2:	0a e0       	ldi	r16, 0x0A	; 10
   113d4:	24 e0       	ldi	r18, 0x04	; 4
   113d6:	46 e5       	ldi	r20, 0x56	; 86
   113d8:	51 e1       	ldi	r21, 0x11	; 17
   113da:	6e e2       	ldi	r22, 0x2E	; 46
   113dc:	ce 01       	movw	r24, r28
   113de:	01 96       	adiw	r24, 0x01	; 1
   113e0:	0e 94 e5 bc 	call	0x179ca	; 0x179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   113e4:	c7 01       	movw	r24, r14
   113e6:	0e 94 b4 d2 	call	0x1a568	; 0x1a568 <NTPClient::begin()>
   113ea:	60 e1       	ldi	r22, 0x10	; 16
   113ec:	7e e0       	ldi	r23, 0x0E	; 14
   113ee:	c7 01       	movw	r24, r14
   113f0:	0e 94 7b d3 	call	0x1a6f6	; 0x1a6f6 <NTPClient::setTimeOffset(int)>
   113f4:	be 01       	movw	r22, r28
   113f6:	6f 5f       	subi	r22, 0xFF	; 255
   113f8:	7f 4f       	sbci	r23, 0xFF	; 255
   113fa:	c7 01       	movw	r24, r14
   113fc:	0e 94 8b d3 	call	0x1a716	; 0x1a716 <NTPClient::setPoolServerName(char const*)>
   11400:	41 e0       	ldi	r20, 0x01	; 1
   11402:	50 e0       	ldi	r21, 0x00	; 0
   11404:	60 e0       	ldi	r22, 0x00	; 0
   11406:	70 e0       	ldi	r23, 0x00	; 0
   11408:	c7 01       	movw	r24, r14
   1140a:	0e 94 85 d3 	call	0x1a70a	; 0x1a70a <NTPClient::setUpdateInterval(unsigned long)>
   1140e:	c7 01       	movw	r24, r14
   11410:	0e 94 42 d4 	call	0x1a884	; 0x1a884 <NTPClient::update()>
   11414:	18 2f       	mov	r17, r24
   11416:	c7 01       	movw	r24, r14
   11418:	0e 94 6b d3 	call	0x1a6d6	; 0x1a6d6 <NTPClient::end()>
   1141c:	81 2f       	mov	r24, r17
   1141e:	64 96       	adiw	r28, 0x14	; 20
   11420:	0f b6       	in	r0, 0x3f	; 63
   11422:	f8 94       	cli
   11424:	de bf       	out	0x3e, r29	; 62
   11426:	0f be       	out	0x3f, r0	; 63
   11428:	cd bf       	out	0x3d, r28	; 61
   1142a:	df 91       	pop	r29
   1142c:	cf 91       	pop	r28
   1142e:	1f 91       	pop	r17
   11430:	0f 91       	pop	r16
   11432:	ff 90       	pop	r15
   11434:	ef 90       	pop	r14
   11436:	08 95       	ret

00011438 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   11438:	cf 93       	push	r28
   1143a:	df 93       	push	r29
   1143c:	cd b7       	in	r28, 0x3d	; 61
   1143e:	de b7       	in	r29, 0x3e	; 62
   11440:	60 97       	sbiw	r28, 0x10	; 16
   11442:	0f b6       	in	r0, 0x3f	; 63
   11444:	f8 94       	cli
   11446:	de bf       	out	0x3e, r29	; 62
   11448:	0f be       	out	0x3f, r0	; 63
   1144a:	cd bf       	out	0x3d, r28	; 61
   1144c:	90 91 fe 10 	lds	r25, 0x10FE	; 0x8010fe <mqtt_log_cnt>
   11450:	e9 2f       	mov	r30, r25
   11452:	f0 e0       	ldi	r31, 0x00	; 0
   11454:	e2 58       	subi	r30, 0x82	; 130
   11456:	ff 4e       	sbci	r31, 0xEF	; 239
   11458:	80 83       	st	Z, r24
   1145a:	11 82       	std	Z+1, r1	; 0x01
   1145c:	9f 5f       	subi	r25, 0xFF	; 255
   1145e:	90 93 fe 10 	sts	0x10FE, r25	; 0x8010fe <mqtt_log_cnt>
   11462:	97 fd       	sbrc	r25, 7
   11464:	04 c0       	rjmp	.+8      	; 0x1146e <printf_via_mqtt(char, __file*)+0x36>
   11466:	8a 30       	cpi	r24, 0x0A	; 10
   11468:	11 f0       	breq	.+4      	; 0x1146e <printf_via_mqtt(char, __file*)+0x36>
   1146a:	81 11       	cpse	r24, r1
   1146c:	13 c0       	rjmp	.+38     	; 0x11494 <printf_via_mqtt(char, __file*)+0x5c>
   1146e:	63 e8       	ldi	r22, 0x83	; 131
   11470:	78 e0       	ldi	r23, 0x08	; 8
   11472:	ce 01       	movw	r24, r28
   11474:	01 96       	adiw	r24, 0x01	; 1
   11476:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   1147a:	4e e7       	ldi	r20, 0x7E	; 126
   1147c:	50 e1       	ldi	r21, 0x10	; 16
   1147e:	be 01       	movw	r22, r28
   11480:	6f 5f       	subi	r22, 0xFF	; 255
   11482:	7f 4f       	sbci	r23, 0xFF	; 255
   11484:	80 91 7c 10 	lds	r24, 0x107C	; 0x80107c <pub_mqtt_client>
   11488:	90 91 7d 10 	lds	r25, 0x107D	; 0x80107d <pub_mqtt_client+0x1>
   1148c:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   11490:	10 92 fe 10 	sts	0x10FE, r1	; 0x8010fe <mqtt_log_cnt>
   11494:	60 96       	adiw	r28, 0x10	; 16
   11496:	0f b6       	in	r0, 0x3f	; 63
   11498:	f8 94       	cli
   1149a:	de bf       	out	0x3e, r29	; 62
   1149c:	0f be       	out	0x3f, r0	; 63
   1149e:	cd bf       	out	0x3d, r28	; 61
   114a0:	df 91       	pop	r29
   114a2:	cf 91       	pop	r28
   114a4:	08 95       	ret

000114a6 <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   114a6:	ef 92       	push	r14
   114a8:	ff 92       	push	r15
   114aa:	0f 93       	push	r16
   114ac:	1f 93       	push	r17
   114ae:	cf 93       	push	r28
   114b0:	df 93       	push	r29
   114b2:	00 d0       	rcall	.+0      	; 0x114b4 <log_error(PubSubClient*, char*)+0xe>
   114b4:	00 d0       	rcall	.+0      	; 0x114b6 <log_error(PubSubClient*, char*)+0x10>
   114b6:	00 d0       	rcall	.+0      	; 0x114b8 <log_error(PubSubClient*, char*)+0x12>
   114b8:	cd b7       	in	r28, 0x3d	; 61
   114ba:	de b7       	in	r29, 0x3e	; 62
   114bc:	8c 01       	movw	r16, r24
   114be:	7b 01       	movw	r14, r22
   114c0:	6e e8       	ldi	r22, 0x8E	; 142
   114c2:	78 e0       	ldi	r23, 0x08	; 8
   114c4:	ce 01       	movw	r24, r28
   114c6:	01 96       	adiw	r24, 0x01	; 1
   114c8:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   114cc:	a7 01       	movw	r20, r14
   114ce:	be 01       	movw	r22, r28
   114d0:	6f 5f       	subi	r22, 0xFF	; 255
   114d2:	7f 4f       	sbci	r23, 0xFF	; 255
   114d4:	c8 01       	movw	r24, r16
   114d6:	0e 94 25 87 	call	0x10e4a	; 0x10e4a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   114da:	29 96       	adiw	r28, 0x09	; 9
   114dc:	0f b6       	in	r0, 0x3f	; 63
   114de:	f8 94       	cli
   114e0:	de bf       	out	0x3e, r29	; 62
   114e2:	0f be       	out	0x3f, r0	; 63
   114e4:	cd bf       	out	0x3d, r28	; 61
   114e6:	df 91       	pop	r29
   114e8:	cf 91       	pop	r28
   114ea:	1f 91       	pop	r17
   114ec:	0f 91       	pop	r16
   114ee:	ff 90       	pop	r15
   114f0:	ef 90       	pop	r14
   114f2:	08 95       	ret

000114f4 <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   114f4:	90 93 7d 10 	sts	0x107D, r25	; 0x80107d <pub_mqtt_client+0x1>
   114f8:	80 93 7c 10 	sts	0x107C, r24	; 0x80107c <pub_mqtt_client>
   114fc:	08 95       	ret

000114fe <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   114fe:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   11500:	00 e0       	ldi	r16, 0x00	; 0
   11502:	20 e0       	ldi	r18, 0x00	; 0
   11504:	40 e0       	ldi	r20, 0x00	; 0
   11506:	60 e0       	ldi	r22, 0x00	; 0
   11508:	8c e5       	ldi	r24, 0x5C	; 92
   1150a:	91 e1       	ldi	r25, 0x11	; 17
   1150c:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   11510:	8b e5       	ldi	r24, 0x5B	; 91
   11512:	97 e0       	ldi	r25, 0x07	; 7
   11514:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <device+0x25>
   11518:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
   1151c:	0f 91       	pop	r16
   1151e:	08 95       	ret

00011520 <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
      strcat(payload, tmp1);
      strcat(payload, " ");
    }
    send_mqtt_general_payload(mqtt_client, topic, payload);
  }
}
   11520:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   11522:	00 e0       	ldi	r16, 0x00	; 0
   11524:	20 e0       	ldi	r18, 0x00	; 0
   11526:	40 e0       	ldi	r20, 0x00	; 0
   11528:	60 e0       	ldi	r22, 0x00	; 0
   1152a:	83 e6       	ldi	r24, 0x63	; 99
   1152c:	91 e1       	ldi	r25, 0x11	; 17
   1152e:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
   11532:	0f 91       	pop	r16
   11534:	08 95       	ret

00011536 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   11536:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <eeprom_read_byte>

0001153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   1153a:	0c 94 b8 e8 	jmp	0x1d170	; 0x1d170 <eeprom_write_byte>

0001153e <count_use_tds()>:
_Z13count_use_tdsv():
   1153e:	1f 93       	push	r17
   11540:	cf 93       	push	r28
   11542:	df 93       	push	r29
   11544:	c8 ec       	ldi	r28, 0xC8	; 200
   11546:	d0 e0       	ldi	r29, 0x00	; 0
   11548:	10 e0       	ldi	r17, 0x00	; 0
   1154a:	ce 01       	movw	r24, r28
   1154c:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   11550:	81 30       	cpi	r24, 0x01	; 1
   11552:	09 f4       	brne	.+2      	; 0x11556 <count_use_tds()+0x18>
   11554:	1f 5f       	subi	r17, 0xFF	; 255
   11556:	66 96       	adiw	r28, 0x16	; 22
   11558:	cc 34       	cpi	r28, 0x4C	; 76
   1155a:	81 e0       	ldi	r24, 0x01	; 1
   1155c:	d8 07       	cpc	r29, r24
   1155e:	a9 f7       	brne	.-22     	; 0x1154a <count_use_tds()+0xc>
   11560:	81 2f       	mov	r24, r17
   11562:	df 91       	pop	r29
   11564:	cf 91       	pop	r28
   11566:	1f 91       	pop	r17
   11568:	08 95       	ret

0001156a <tds_used(unsigned char)>:
_Z8tds_usedh():
   1156a:	86 30       	cpi	r24, 0x06	; 6
   1156c:	40 f4       	brcc	.+16     	; 0x1157e <tds_used(unsigned char)+0x14>
   1156e:	26 e1       	ldi	r18, 0x16	; 22
   11570:	82 9f       	mul	r24, r18
   11572:	c0 01       	movw	r24, r0
   11574:	11 24       	eor	r1, r1
   11576:	88 53       	subi	r24, 0x38	; 56
   11578:	9f 4f       	sbci	r25, 0xFF	; 255
   1157a:	0c 94 9b 8a 	jmp	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   1157e:	08 95       	ret

00011580 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   11580:	af 92       	push	r10
   11582:	bf 92       	push	r11
   11584:	cf 92       	push	r12
   11586:	df 92       	push	r13
   11588:	ef 92       	push	r14
   1158a:	ff 92       	push	r15
   1158c:	0f 93       	push	r16
   1158e:	1f 93       	push	r17
   11590:	cf 93       	push	r28
   11592:	df 93       	push	r29
   11594:	86 30       	cpi	r24, 0x06	; 6
   11596:	08 f0       	brcs	.+2      	; 0x1159a <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   11598:	56 c0       	rjmp	.+172    	; 0x11646 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   1159a:	8b 01       	movw	r16, r22
   1159c:	96 e1       	ldi	r25, 0x16	; 22
   1159e:	89 9f       	mul	r24, r25
   115a0:	e0 01       	movw	r28, r0
   115a2:	11 24       	eor	r1, r1
   115a4:	ce 01       	movw	r24, r28
   115a6:	88 53       	subi	r24, 0x38	; 56
   115a8:	9f 4f       	sbci	r25, 0xFF	; 255
   115aa:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   115ae:	f8 01       	movw	r30, r16
   115b0:	81 93       	st	Z+, r24
   115b2:	6f 01       	movw	r12, r30
   115b4:	7e 01       	movw	r14, r28
   115b6:	f9 ec       	ldi	r31, 0xC9	; 201
   115b8:	ef 0e       	add	r14, r31
   115ba:	f1 1c       	adc	r15, r1
   115bc:	5e 01       	movw	r10, r28
   115be:	81 ed       	ldi	r24, 0xD1	; 209
   115c0:	a8 0e       	add	r10, r24
   115c2:	b1 1c       	adc	r11, r1
   115c4:	c7 01       	movw	r24, r14
   115c6:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   115ca:	f6 01       	movw	r30, r12
   115cc:	81 93       	st	Z+, r24
   115ce:	6f 01       	movw	r12, r30
   115d0:	c7 01       	movw	r24, r14
   115d2:	0b 96       	adiw	r24, 0x0b	; 11
   115d4:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   115d8:	f6 01       	movw	r30, r12
   115da:	82 87       	std	Z+10, r24	; 0x0a
   115dc:	ff ef       	ldi	r31, 0xFF	; 255
   115de:	ef 1a       	sub	r14, r31
   115e0:	ff 0a       	sbc	r15, r31
   115e2:	ea 14       	cp	r14, r10
   115e4:	fb 04       	cpc	r15, r11
   115e6:	71 f7       	brne	.-36     	; 0x115c4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   115e8:	f8 01       	movw	r30, r16
   115ea:	13 8a       	std	Z+19, r1	; 0x13
   115ec:	c7 01       	movw	r24, r14
   115ee:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   115f2:	f8 01       	movw	r30, r16
   115f4:	81 87       	std	Z+9, r24	; 0x09
   115f6:	ce 01       	movw	r24, r28
   115f8:	8e 52       	subi	r24, 0x2E	; 46
   115fa:	9f 4f       	sbci	r25, 0xFF	; 255
   115fc:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   11600:	f8 2e       	mov	r15, r24
   11602:	ce 01       	movw	r24, r28
   11604:	8d 52       	subi	r24, 0x2D	; 45
   11606:	9f 4f       	sbci	r25, 0xFF	; 255
   11608:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   1160c:	2f 2d       	mov	r18, r15
   1160e:	30 e0       	ldi	r19, 0x00	; 0
   11610:	32 2f       	mov	r19, r18
   11612:	22 27       	eor	r18, r18
   11614:	82 0f       	add	r24, r18
   11616:	93 2f       	mov	r25, r19
   11618:	91 1d       	adc	r25, r1
   1161a:	f8 01       	movw	r30, r16
   1161c:	93 87       	std	Z+11, r25	; 0x0b
   1161e:	82 87       	std	Z+10, r24	; 0x0a
   11620:	ce 01       	movw	r24, r28
   11622:	84 52       	subi	r24, 0x24	; 36
   11624:	9f 4f       	sbci	r25, 0xFF	; 255
   11626:	0e 94 9b 8a 	call	0x11536	; 0x11536 <EEPROMClass::read(int) [clone .isra.0]>
   1162a:	f8 01       	movw	r30, r16
   1162c:	84 8b       	std	Z+20, r24	; 0x14
   1162e:	81 e0       	ldi	r24, 0x01	; 1
   11630:	df 91       	pop	r29
   11632:	cf 91       	pop	r28
   11634:	1f 91       	pop	r17
   11636:	0f 91       	pop	r16
   11638:	ff 90       	pop	r15
   1163a:	ef 90       	pop	r14
   1163c:	df 90       	pop	r13
   1163e:	cf 90       	pop	r12
   11640:	bf 90       	pop	r11
   11642:	af 90       	pop	r10
   11644:	08 95       	ret
   11646:	80 e0       	ldi	r24, 0x00	; 0
   11648:	f3 cf       	rjmp	.-26     	; 0x11630 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0001164a <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   1164a:	af 92       	push	r10
   1164c:	bf 92       	push	r11
   1164e:	cf 92       	push	r12
   11650:	df 92       	push	r13
   11652:	ef 92       	push	r14
   11654:	ff 92       	push	r15
   11656:	0f 93       	push	r16
   11658:	1f 93       	push	r17
   1165a:	cf 93       	push	r28
   1165c:	df 93       	push	r29
   1165e:	86 30       	cpi	r24, 0x06	; 6
   11660:	08 f0       	brcs	.+2      	; 0x11664 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   11662:	49 c0       	rjmp	.+146    	; 0x116f6 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   11664:	6b 01       	movw	r12, r22
   11666:	96 e1       	ldi	r25, 0x16	; 22
   11668:	89 9f       	mul	r24, r25
   1166a:	e0 01       	movw	r28, r0
   1166c:	11 24       	eor	r1, r1
   1166e:	f6 01       	movw	r30, r12
   11670:	61 91       	ld	r22, Z+
   11672:	7f 01       	movw	r14, r30
   11674:	ce 01       	movw	r24, r28
   11676:	88 53       	subi	r24, 0x38	; 56
   11678:	9f 4f       	sbci	r25, 0xFF	; 255
   1167a:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1167e:	8e 01       	movw	r16, r28
   11680:	07 53       	subi	r16, 0x37	; 55
   11682:	1f 4f       	sbci	r17, 0xFF	; 255
   11684:	5e 01       	movw	r10, r28
   11686:	f1 ed       	ldi	r31, 0xD1	; 209
   11688:	af 0e       	add	r10, r31
   1168a:	b1 1c       	adc	r11, r1
   1168c:	f7 01       	movw	r30, r14
   1168e:	61 91       	ld	r22, Z+
   11690:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   11692:	c8 01       	movw	r24, r16
   11694:	0e 94 b8 e8 	call	0x1d170	; 0x1d170 <eeprom_write_byte>
   11698:	f7 01       	movw	r30, r14
   1169a:	62 85       	ldd	r22, Z+10	; 0x0a
   1169c:	c8 01       	movw	r24, r16
   1169e:	0b 96       	adiw	r24, 0x0b	; 11
   116a0:	0e 94 b8 e8 	call	0x1d170	; 0x1d170 <eeprom_write_byte>
   116a4:	0f 5f       	subi	r16, 0xFF	; 255
   116a6:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   116a8:	0a 15       	cp	r16, r10
   116aa:	1b 05       	cpc	r17, r11
   116ac:	79 f7       	brne	.-34     	; 0x1168c <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   116ae:	f6 01       	movw	r30, r12
   116b0:	61 85       	ldd	r22, Z+9	; 0x09
   116b2:	c8 01       	movw	r24, r16
   116b4:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   116b8:	f6 01       	movw	r30, r12
   116ba:	63 85       	ldd	r22, Z+11	; 0x0b
   116bc:	ce 01       	movw	r24, r28
   116be:	8e 52       	subi	r24, 0x2E	; 46
   116c0:	9f 4f       	sbci	r25, 0xFF	; 255
   116c2:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   116c6:	f6 01       	movw	r30, r12
   116c8:	62 85       	ldd	r22, Z+10	; 0x0a
   116ca:	ce 01       	movw	r24, r28
   116cc:	8d 52       	subi	r24, 0x2D	; 45
   116ce:	9f 4f       	sbci	r25, 0xFF	; 255
   116d0:	0e 94 9d 8a 	call	0x1153a	; 0x1153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   116d4:	f6 01       	movw	r30, r12
   116d6:	64 89       	ldd	r22, Z+20	; 0x14
   116d8:	ce 01       	movw	r24, r28
   116da:	84 52       	subi	r24, 0x24	; 36
   116dc:	9f 4f       	sbci	r25, 0xFF	; 255
   116de:	df 91       	pop	r29
   116e0:	cf 91       	pop	r28
   116e2:	1f 91       	pop	r17
   116e4:	0f 91       	pop	r16
   116e6:	ff 90       	pop	r15
   116e8:	ef 90       	pop	r14
   116ea:	df 90       	pop	r13
   116ec:	cf 90       	pop	r12
   116ee:	bf 90       	pop	r11
   116f0:	af 90       	pop	r10
   116f2:	0c 94 9d 8a 	jmp	0x1153a	; 0x1153a <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   116f6:	df 91       	pop	r29
   116f8:	cf 91       	pop	r28
   116fa:	1f 91       	pop	r17
   116fc:	0f 91       	pop	r16
   116fe:	ff 90       	pop	r15
   11700:	ef 90       	pop	r14
   11702:	df 90       	pop	r13
   11704:	cf 90       	pop	r12
   11706:	bf 90       	pop	r11
   11708:	af 90       	pop	r10
   1170a:	08 95       	ret

0001170c <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   1170c:	0f 93       	push	r16
   1170e:	1f 93       	push	r17
   11710:	cf 93       	push	r28
   11712:	df 93       	push	r29
   11714:	cd b7       	in	r28, 0x3d	; 61
   11716:	de b7       	in	r29, 0x3e	; 62
   11718:	66 97       	sbiw	r28, 0x16	; 22
   1171a:	0f b6       	in	r0, 0x3f	; 63
   1171c:	f8 94       	cli
   1171e:	de bf       	out	0x3e, r29	; 62
   11720:	0f be       	out	0x3f, r0	; 63
   11722:	cd bf       	out	0x3d, r28	; 61
   11724:	8b 01       	movw	r16, r22
   11726:	be 01       	movw	r22, r28
   11728:	6f 5f       	subi	r22, 0xFF	; 255
   1172a:	7f 4f       	sbci	r23, 0xFF	; 255
   1172c:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11730:	be 01       	movw	r22, r28
   11732:	63 5f       	subi	r22, 0xF3	; 243
   11734:	7f 4f       	sbci	r23, 0xFF	; 255
   11736:	c8 01       	movw	r24, r16
   11738:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   1173c:	66 96       	adiw	r28, 0x16	; 22
   1173e:	0f b6       	in	r0, 0x3f	; 63
   11740:	f8 94       	cli
   11742:	de bf       	out	0x3e, r29	; 62
   11744:	0f be       	out	0x3f, r0	; 63
   11746:	cd bf       	out	0x3d, r28	; 61
   11748:	df 91       	pop	r29
   1174a:	cf 91       	pop	r28
   1174c:	1f 91       	pop	r17
   1174e:	0f 91       	pop	r16
   11750:	08 95       	ret

00011752 <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   11752:	ef 92       	push	r14
   11754:	ff 92       	push	r15
   11756:	1f 93       	push	r17
   11758:	cf 93       	push	r28
   1175a:	df 93       	push	r29
   1175c:	cd b7       	in	r28, 0x3d	; 61
   1175e:	de b7       	in	r29, 0x3e	; 62
   11760:	66 97       	sbiw	r28, 0x16	; 22
   11762:	0f b6       	in	r0, 0x3f	; 63
   11764:	f8 94       	cli
   11766:	de bf       	out	0x3e, r29	; 62
   11768:	0f be       	out	0x3f, r0	; 63
   1176a:	cd bf       	out	0x3d, r28	; 61
   1176c:	18 2f       	mov	r17, r24
   1176e:	7b 01       	movw	r14, r22
   11770:	be 01       	movw	r22, r28
   11772:	6f 5f       	subi	r22, 0xFF	; 255
   11774:	7f 4f       	sbci	r23, 0xFF	; 255
   11776:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1177a:	b7 01       	movw	r22, r14
   1177c:	ce 01       	movw	r24, r28
   1177e:	0d 96       	adiw	r24, 0x0d	; 13
   11780:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   11784:	be 01       	movw	r22, r28
   11786:	6f 5f       	subi	r22, 0xFF	; 255
   11788:	7f 4f       	sbci	r23, 0xFF	; 255
   1178a:	81 2f       	mov	r24, r17
   1178c:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11790:	66 96       	adiw	r28, 0x16	; 22
   11792:	0f b6       	in	r0, 0x3f	; 63
   11794:	f8 94       	cli
   11796:	de bf       	out	0x3e, r29	; 62
   11798:	0f be       	out	0x3f, r0	; 63
   1179a:	cd bf       	out	0x3d, r28	; 61
   1179c:	df 91       	pop	r29
   1179e:	cf 91       	pop	r28
   117a0:	1f 91       	pop	r17
   117a2:	ff 90       	pop	r15
   117a4:	ef 90       	pop	r14
   117a6:	08 95       	ret

000117a8 <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   117a8:	ef 92       	push	r14
   117aa:	ff 92       	push	r15
   117ac:	1f 93       	push	r17
   117ae:	cf 93       	push	r28
   117b0:	df 93       	push	r29
   117b2:	cd b7       	in	r28, 0x3d	; 61
   117b4:	de b7       	in	r29, 0x3e	; 62
   117b6:	66 97       	sbiw	r28, 0x16	; 22
   117b8:	0f b6       	in	r0, 0x3f	; 63
   117ba:	f8 94       	cli
   117bc:	de bf       	out	0x3e, r29	; 62
   117be:	0f be       	out	0x3f, r0	; 63
   117c0:	cd bf       	out	0x3d, r28	; 61
   117c2:	18 2f       	mov	r17, r24
   117c4:	7b 01       	movw	r14, r22
   117c6:	be 01       	movw	r22, r28
   117c8:	6f 5f       	subi	r22, 0xFF	; 255
   117ca:	7f 4f       	sbci	r23, 0xFF	; 255
   117cc:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   117d0:	fc 86       	std	Y+12, r15	; 0x0c
   117d2:	eb 86       	std	Y+11, r14	; 0x0b
   117d4:	be 01       	movw	r22, r28
   117d6:	6f 5f       	subi	r22, 0xFF	; 255
   117d8:	7f 4f       	sbci	r23, 0xFF	; 255
   117da:	81 2f       	mov	r24, r17
   117dc:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   117e0:	66 96       	adiw	r28, 0x16	; 22
   117e2:	0f b6       	in	r0, 0x3f	; 63
   117e4:	f8 94       	cli
   117e6:	de bf       	out	0x3e, r29	; 62
   117e8:	0f be       	out	0x3f, r0	; 63
   117ea:	cd bf       	out	0x3d, r28	; 61
   117ec:	df 91       	pop	r29
   117ee:	cf 91       	pop	r28
   117f0:	1f 91       	pop	r17
   117f2:	ff 90       	pop	r15
   117f4:	ef 90       	pop	r14
   117f6:	08 95       	ret

000117f8 <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   117f8:	cf 93       	push	r28
   117fa:	df 93       	push	r29
   117fc:	cd b7       	in	r28, 0x3d	; 61
   117fe:	de b7       	in	r29, 0x3e	; 62
   11800:	66 97       	sbiw	r28, 0x16	; 22
   11802:	0f b6       	in	r0, 0x3f	; 63
   11804:	f8 94       	cli
   11806:	de bf       	out	0x3e, r29	; 62
   11808:	0f be       	out	0x3f, r0	; 63
   1180a:	cd bf       	out	0x3d, r28	; 61
   1180c:	be 01       	movw	r22, r28
   1180e:	6f 5f       	subi	r22, 0xFF	; 255
   11810:	7f 4f       	sbci	r23, 0xFF	; 255
   11812:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11816:	8b 85       	ldd	r24, Y+11	; 0x0b
   11818:	9c 85       	ldd	r25, Y+12	; 0x0c
   1181a:	66 96       	adiw	r28, 0x16	; 22
   1181c:	0f b6       	in	r0, 0x3f	; 63
   1181e:	f8 94       	cli
   11820:	de bf       	out	0x3e, r29	; 62
   11822:	0f be       	out	0x3f, r0	; 63
   11824:	cd bf       	out	0x3d, r28	; 61
   11826:	df 91       	pop	r29
   11828:	cf 91       	pop	r28
   1182a:	08 95       	ret

0001182c <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   1182c:	0f 93       	push	r16
   1182e:	1f 93       	push	r17
   11830:	cf 93       	push	r28
   11832:	df 93       	push	r29
   11834:	cd b7       	in	r28, 0x3d	; 61
   11836:	de b7       	in	r29, 0x3e	; 62
   11838:	66 97       	sbiw	r28, 0x16	; 22
   1183a:	0f b6       	in	r0, 0x3f	; 63
   1183c:	f8 94       	cli
   1183e:	de bf       	out	0x3e, r29	; 62
   11840:	0f be       	out	0x3f, r0	; 63
   11842:	cd bf       	out	0x3d, r28	; 61
   11844:	18 2f       	mov	r17, r24
   11846:	06 2f       	mov	r16, r22
   11848:	be 01       	movw	r22, r28
   1184a:	6f 5f       	subi	r22, 0xFF	; 255
   1184c:	7f 4f       	sbci	r23, 0xFF	; 255
   1184e:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11852:	0d 8b       	std	Y+21, r16	; 0x15
   11854:	be 01       	movw	r22, r28
   11856:	6f 5f       	subi	r22, 0xFF	; 255
   11858:	7f 4f       	sbci	r23, 0xFF	; 255
   1185a:	81 2f       	mov	r24, r17
   1185c:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11860:	66 96       	adiw	r28, 0x16	; 22
   11862:	0f b6       	in	r0, 0x3f	; 63
   11864:	f8 94       	cli
   11866:	de bf       	out	0x3e, r29	; 62
   11868:	0f be       	out	0x3f, r0	; 63
   1186a:	cd bf       	out	0x3d, r28	; 61
   1186c:	df 91       	pop	r29
   1186e:	cf 91       	pop	r28
   11870:	1f 91       	pop	r17
   11872:	0f 91       	pop	r16
   11874:	08 95       	ret

00011876 <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   11876:	cf 93       	push	r28
   11878:	df 93       	push	r29
   1187a:	cd b7       	in	r28, 0x3d	; 61
   1187c:	de b7       	in	r29, 0x3e	; 62
   1187e:	66 97       	sbiw	r28, 0x16	; 22
   11880:	0f b6       	in	r0, 0x3f	; 63
   11882:	f8 94       	cli
   11884:	de bf       	out	0x3e, r29	; 62
   11886:	0f be       	out	0x3f, r0	; 63
   11888:	cd bf       	out	0x3d, r28	; 61
   1188a:	be 01       	movw	r22, r28
   1188c:	6f 5f       	subi	r22, 0xFF	; 255
   1188e:	7f 4f       	sbci	r23, 0xFF	; 255
   11890:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11894:	8d 89       	ldd	r24, Y+21	; 0x15
   11896:	90 e0       	ldi	r25, 0x00	; 0
   11898:	66 96       	adiw	r28, 0x16	; 22
   1189a:	0f b6       	in	r0, 0x3f	; 63
   1189c:	f8 94       	cli
   1189e:	de bf       	out	0x3e, r29	; 62
   118a0:	0f be       	out	0x3f, r0	; 63
   118a2:	cd bf       	out	0x3d, r28	; 61
   118a4:	df 91       	pop	r29
   118a6:	cf 91       	pop	r28
   118a8:	08 95       	ret

000118aa <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   118aa:	fb 01       	movw	r30, r22
   118ac:	9c 01       	movw	r18, r24
   118ae:	28 5f       	subi	r18, 0xF8	; 248
   118b0:	3f 4f       	sbci	r19, 0xFF	; 255
   118b2:	dc 01       	movw	r26, r24
   118b4:	5d 91       	ld	r21, X+
   118b6:	cd 01       	movw	r24, r26
   118b8:	41 91       	ld	r20, Z+
   118ba:	54 13       	cpse	r21, r20
   118bc:	05 c0       	rjmp	.+10     	; 0x118c8 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   118be:	a2 17       	cp	r26, r18
   118c0:	b3 07       	cpc	r27, r19
   118c2:	b9 f7       	brne	.-18     	; 0x118b2 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   118c4:	81 e0       	ldi	r24, 0x01	; 1
   118c6:	08 95       	ret
   118c8:	80 e0       	ldi	r24, 0x00	; 0
   118ca:	08 95       	ret

000118cc <tds_update_associate()>:
_Z20tds_update_associatev():
   118cc:	ef 92       	push	r14
   118ce:	ff 92       	push	r15
   118d0:	0f 93       	push	r16
   118d2:	1f 93       	push	r17
   118d4:	cf 93       	push	r28
   118d6:	df 93       	push	r29
   118d8:	cd b7       	in	r28, 0x3d	; 61
   118da:	de b7       	in	r29, 0x3e	; 62
   118dc:	6e 97       	sbiw	r28, 0x1e	; 30
   118de:	0f b6       	in	r0, 0x3f	; 63
   118e0:	f8 94       	cli
   118e2:	de bf       	out	0x3e, r29	; 62
   118e4:	0f be       	out	0x3f, r0	; 63
   118e6:	cd bf       	out	0x3d, r28	; 61
   118e8:	1f 8a       	std	Y+23, r1	; 0x17
   118ea:	18 8e       	std	Y+24, r1	; 0x18
   118ec:	19 8e       	std	Y+25, r1	; 0x19
   118ee:	1a 8e       	std	Y+26, r1	; 0x1a
   118f0:	1b 8e       	std	Y+27, r1	; 0x1b
   118f2:	1c 8e       	std	Y+28, r1	; 0x1c
   118f4:	1d 8e       	std	Y+29, r1	; 0x1d
   118f6:	1e 8e       	std	Y+30, r1	; 0x1e
   118f8:	0b e6       	ldi	r16, 0x6B	; 107
   118fa:	11 e1       	ldi	r17, 0x11	; 17
   118fc:	ee 24       	eor	r14, r14
   118fe:	ea 94       	dec	r14
   11900:	f8 01       	movw	r30, r16
   11902:	e2 86       	std	Z+10, r14	; 0x0a
   11904:	b8 01       	movw	r22, r16
   11906:	ce 01       	movw	r24, r28
   11908:	47 96       	adiw	r24, 0x17	; 23
   1190a:	0e 94 55 8c 	call	0x118aa	; 0x118aa <tds_compare_rom(unsigned char*, unsigned char*)>
   1190e:	81 11       	cpse	r24, r1
   11910:	14 c0       	rjmp	.+40     	; 0x1193a <tds_update_associate()+0x6e>
   11912:	f1 2c       	mov	r15, r1
   11914:	be 01       	movw	r22, r28
   11916:	6f 5f       	subi	r22, 0xFF	; 255
   11918:	7f 4f       	sbci	r23, 0xFF	; 255
   1191a:	8f 2d       	mov	r24, r15
   1191c:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11920:	b8 01       	movw	r22, r16
   11922:	ce 01       	movw	r24, r28
   11924:	02 96       	adiw	r24, 0x02	; 2
   11926:	0e 94 55 8c 	call	0x118aa	; 0x118aa <tds_compare_rom(unsigned char*, unsigned char*)>
   1192a:	88 23       	and	r24, r24
   1192c:	11 f0       	breq	.+4      	; 0x11932 <tds_update_associate()+0x66>
   1192e:	f8 01       	movw	r30, r16
   11930:	f2 86       	std	Z+10, r15	; 0x0a
   11932:	f3 94       	inc	r15
   11934:	f6 e0       	ldi	r31, 0x06	; 6
   11936:	ff 12       	cpse	r15, r31
   11938:	ed cf       	rjmp	.-38     	; 0x11914 <tds_update_associate()+0x48>
   1193a:	05 5f       	subi	r16, 0xF5	; 245
   1193c:	1f 4f       	sbci	r17, 0xFF	; 255
   1193e:	81 e1       	ldi	r24, 0x11	; 17
   11940:	0d 3a       	cpi	r16, 0xAD	; 173
   11942:	18 07       	cpc	r17, r24
   11944:	e9 f6       	brne	.-70     	; 0x11900 <tds_update_associate()+0x34>
   11946:	6e 96       	adiw	r28, 0x1e	; 30
   11948:	0f b6       	in	r0, 0x3f	; 63
   1194a:	f8 94       	cli
   1194c:	de bf       	out	0x3e, r29	; 62
   1194e:	0f be       	out	0x3f, r0	; 63
   11950:	cd bf       	out	0x3d, r28	; 61
   11952:	df 91       	pop	r29
   11954:	cf 91       	pop	r28
   11956:	1f 91       	pop	r17
   11958:	0f 91       	pop	r16
   1195a:	ff 90       	pop	r15
   1195c:	ef 90       	pop	r14
   1195e:	08 95       	ret

00011960 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   11960:	1f 93       	push	r17
   11962:	cf 93       	push	r28
   11964:	df 93       	push	r29
   11966:	cd b7       	in	r28, 0x3d	; 61
   11968:	de b7       	in	r29, 0x3e	; 62
   1196a:	66 97       	sbiw	r28, 0x16	; 22
   1196c:	0f b6       	in	r0, 0x3f	; 63
   1196e:	f8 94       	cli
   11970:	de bf       	out	0x3e, r29	; 62
   11972:	0f be       	out	0x3f, r0	; 63
   11974:	cd bf       	out	0x3d, r28	; 61
   11976:	18 2f       	mov	r17, r24
   11978:	be 01       	movw	r22, r28
   1197a:	6f 5f       	subi	r22, 0xFF	; 255
   1197c:	7f 4f       	sbci	r23, 0xFF	; 255
   1197e:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11982:	19 82       	std	Y+1, r1	; 0x01
   11984:	6b e0       	ldi	r22, 0x0B	; 11
   11986:	78 e0       	ldi	r23, 0x08	; 8
   11988:	ce 01       	movw	r24, r28
   1198a:	0d 96       	adiw	r24, 0x0d	; 13
   1198c:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
   11990:	1c 86       	std	Y+12, r1	; 0x0c
   11992:	1b 86       	std	Y+11, r1	; 0x0b
   11994:	8a e0       	ldi	r24, 0x0A	; 10
   11996:	8d 8b       	std	Y+21, r24	; 0x15
   11998:	1a 82       	std	Y+2, r1	; 0x02
   1199a:	1b 82       	std	Y+3, r1	; 0x03
   1199c:	1c 82       	std	Y+4, r1	; 0x04
   1199e:	1d 82       	std	Y+5, r1	; 0x05
   119a0:	1e 82       	std	Y+6, r1	; 0x06
   119a2:	1f 82       	std	Y+7, r1	; 0x07
   119a4:	18 86       	std	Y+8, r1	; 0x08
   119a6:	19 86       	std	Y+9, r1	; 0x09
   119a8:	1a 86       	std	Y+10, r1	; 0x0a
   119aa:	be 01       	movw	r22, r28
   119ac:	6f 5f       	subi	r22, 0xFF	; 255
   119ae:	7f 4f       	sbci	r23, 0xFF	; 255
   119b0:	81 2f       	mov	r24, r17
   119b2:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   119b6:	0e 94 66 8c 	call	0x118cc	; 0x118cc <tds_update_associate()>
   119ba:	66 96       	adiw	r28, 0x16	; 22
   119bc:	0f b6       	in	r0, 0x3f	; 63
   119be:	f8 94       	cli
   119c0:	de bf       	out	0x3e, r29	; 62
   119c2:	0f be       	out	0x3f, r0	; 63
   119c4:	cd bf       	out	0x3d, r28	; 61
   119c6:	df 91       	pop	r29
   119c8:	cf 91       	pop	r28
   119ca:	1f 91       	pop	r17
   119cc:	08 95       	ret

000119ce <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   119ce:	9b e0       	ldi	r25, 0x0B	; 11
   119d0:	89 9f       	mul	r24, r25
   119d2:	f0 01       	movw	r30, r0
   119d4:	11 24       	eor	r1, r1
   119d6:	e5 59       	subi	r30, 0x95	; 149
   119d8:	fe 4e       	sbci	r31, 0xEE	; 238
   119da:	82 85       	ldd	r24, Z+10	; 0x0a
   119dc:	0c 94 b0 8c 	jmp	0x11960	; 0x11960 <tds_set_clear(unsigned char)>

000119e0 <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   119e0:	ff 92       	push	r15
   119e2:	0f 93       	push	r16
   119e4:	1f 93       	push	r17
   119e6:	cf 93       	push	r28
   119e8:	df 93       	push	r29
   119ea:	cd b7       	in	r28, 0x3d	; 61
   119ec:	de b7       	in	r29, 0x3e	; 62
   119ee:	66 97       	sbiw	r28, 0x16	; 22
   119f0:	0f b6       	in	r0, 0x3f	; 63
   119f2:	f8 94       	cli
   119f4:	de bf       	out	0x3e, r29	; 62
   119f6:	0f be       	out	0x3f, r0	; 63
   119f8:	cd bf       	out	0x3d, r28	; 61
   119fa:	90 91 ad 11 	lds	r25, 0x11AD	; 0x8011ad <Global_HWwirenum>
   119fe:	89 17       	cp	r24, r25
   11a00:	38 f5       	brcc	.+78     	; 0x11a50 <tds_check_associate(unsigned char)+0x70>
   11a02:	9b e0       	ldi	r25, 0x0B	; 11
   11a04:	89 9f       	mul	r24, r25
   11a06:	80 01       	movw	r16, r0
   11a08:	11 24       	eor	r1, r1
   11a0a:	05 59       	subi	r16, 0x95	; 149
   11a0c:	1e 4e       	sbci	r17, 0xEE	; 238
   11a0e:	f1 2c       	mov	r15, r1
   11a10:	be 01       	movw	r22, r28
   11a12:	6f 5f       	subi	r22, 0xFF	; 255
   11a14:	7f 4f       	sbci	r23, 0xFF	; 255
   11a16:	8f 2d       	mov	r24, r15
   11a18:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11a1c:	b8 01       	movw	r22, r16
   11a1e:	ce 01       	movw	r24, r28
   11a20:	02 96       	adiw	r24, 0x02	; 2
   11a22:	0e 94 55 8c 	call	0x118aa	; 0x118aa <tds_compare_rom(unsigned char*, unsigned char*)>
   11a26:	81 11       	cpse	r24, r1
   11a28:	06 c0       	rjmp	.+12     	; 0x11a36 <tds_check_associate(unsigned char)+0x56>
   11a2a:	f3 94       	inc	r15
   11a2c:	86 e0       	ldi	r24, 0x06	; 6
   11a2e:	f8 12       	cpse	r15, r24
   11a30:	ef cf       	rjmp	.-34     	; 0x11a10 <tds_check_associate(unsigned char)+0x30>
   11a32:	ff 24       	eor	r15, r15
   11a34:	fa 94       	dec	r15
   11a36:	8f 2d       	mov	r24, r15
   11a38:	66 96       	adiw	r28, 0x16	; 22
   11a3a:	0f b6       	in	r0, 0x3f	; 63
   11a3c:	f8 94       	cli
   11a3e:	de bf       	out	0x3e, r29	; 62
   11a40:	0f be       	out	0x3f, r0	; 63
   11a42:	cd bf       	out	0x3d, r28	; 61
   11a44:	df 91       	pop	r29
   11a46:	cf 91       	pop	r28
   11a48:	1f 91       	pop	r17
   11a4a:	0f 91       	pop	r16
   11a4c:	ff 90       	pop	r15
   11a4e:	08 95       	ret
   11a50:	8e ef       	ldi	r24, 0xFE	; 254
   11a52:	f8 2e       	mov	r15, r24
   11a54:	f0 cf       	rjmp	.-32     	; 0x11a36 <tds_check_associate(unsigned char)+0x56>

00011a56 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   11a56:	df 92       	push	r13
   11a58:	ef 92       	push	r14
   11a5a:	ff 92       	push	r15
   11a5c:	0f 93       	push	r16
   11a5e:	1f 93       	push	r17
   11a60:	cf 93       	push	r28
   11a62:	df 93       	push	r29
   11a64:	cd b7       	in	r28, 0x3d	; 61
   11a66:	de b7       	in	r29, 0x3e	; 62
   11a68:	66 97       	sbiw	r28, 0x16	; 22
   11a6a:	0f b6       	in	r0, 0x3f	; 63
   11a6c:	f8 94       	cli
   11a6e:	de bf       	out	0x3e, r29	; 62
   11a70:	0f be       	out	0x3f, r0	; 63
   11a72:	cd bf       	out	0x3d, r28	; 61
   11a74:	08 2f       	mov	r16, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   11a76:	0e 94 f0 8c 	call	0x119e0	; 0x119e0 <tds_check_associate(unsigned char)>
   11a7a:	8f 3f       	cpi	r24, 0xFF	; 255
   11a7c:	09 f0       	breq	.+2      	; 0x11a80 <tds_associate(unsigned char)+0x2a>
   11a7e:	6a c0       	rjmp	.+212    	; 0x11b54 <tds_associate(unsigned char)+0xfe>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11a80:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   11a82:	eb e0       	ldi	r30, 0x0B	; 11
   11a84:	de 2e       	mov	r13, r30
   11a86:	d0 9e       	mul	r13, r16
   11a88:	c0 01       	movw	r24, r0
   11a8a:	11 24       	eor	r1, r1
   11a8c:	9c 01       	movw	r18, r24
   11a8e:	2c 58       	subi	r18, 0x8C	; 140
   11a90:	3e 4e       	sbci	r19, 0xEE	; 238
   11a92:	79 01       	movw	r14, r18
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   11a94:	be 01       	movw	r22, r28
   11a96:	6f 5f       	subi	r22, 0xFF	; 255
   11a98:	7f 4f       	sbci	r23, 0xFF	; 255
   11a9a:	81 2f       	mov	r24, r17
   11a9c:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   11aa0:	89 81       	ldd	r24, Y+1	; 0x01
   11aa2:	81 11       	cpse	r24, r1
   11aa4:	53 c0       	rjmp	.+166    	; 0x11b4c <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210 (discriminator 1)
   11aa6:	f7 01       	movw	r30, r14
   11aa8:	80 81       	ld	r24, Z
   11aaa:	81 30       	cpi	r24, 0x01	; 1
   11aac:	09 f0       	breq	.+2      	; 0x11ab0 <tds_associate(unsigned char)+0x5a>
   11aae:	4e c0       	rjmp	.+156    	; 0x11b4c <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   11ab0:	89 83       	std	Y+1, r24	; 0x01
   11ab2:	de 01       	movw	r26, r28
   11ab4:	12 96       	adiw	r26, 0x02	; 2
   11ab6:	0d 9d       	mul	r16, r13
   11ab8:	c0 01       	movw	r24, r0
   11aba:	11 24       	eor	r1, r1
   11abc:	30 e0       	ldi	r19, 0x00	; 0
   11abe:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   11ac0:	f9 01       	movw	r30, r18
   11ac2:	e8 0f       	add	r30, r24
   11ac4:	f9 1f       	adc	r31, r25
   11ac6:	e5 59       	subi	r30, 0x95	; 149
   11ac8:	fe 4e       	sbci	r31, 0xEE	; 238
   11aca:	40 81       	ld	r20, Z
   11acc:	4d 93       	st	X+, r20
   11ace:	2f 5f       	subi	r18, 0xFF	; 255
   11ad0:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   11ad2:	28 30       	cpi	r18, 0x08	; 8
   11ad4:	31 05       	cpc	r19, r1
   11ad6:	a1 f7       	brne	.-24     	; 0x11ac0 <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
   11ad8:	2b e0       	ldi	r18, 0x0B	; 11
   11ada:	12 9f       	mul	r17, r18
   11adc:	f0 01       	movw	r30, r0
   11ade:	11 24       	eor	r1, r1
   11ae0:	e5 59       	subi	r30, 0x95	; 149
   11ae2:	fe 4e       	sbci	r31, 0xEE	; 238
   11ae4:	e0 85       	ldd	r30, Z+8	; 0x08
   11ae6:	f0 e0       	ldi	r31, 0x00	; 0
   11ae8:	ee 0f       	add	r30, r30
   11aea:	ff 1f       	adc	r31, r31
   11aec:	e7 59       	subi	r30, 0x97	; 151
   11aee:	fe 4e       	sbci	r31, 0xEE	; 238
   11af0:	80 81       	ld	r24, Z
   11af2:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   11af4:	be 01       	movw	r22, r28
   11af6:	6f 5f       	subi	r22, 0xFF	; 255
   11af8:	7f 4f       	sbci	r23, 0xFF	; 255
   11afa:	81 2f       	mov	r24, r17
   11afc:	0e 94 25 8b 	call	0x1164a	; 0x1164a <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11b00:	3e e1       	ldi	r19, 0x1E	; 30
   11b02:	13 9f       	mul	r17, r19
   11b04:	a0 01       	movw	r20, r0
   11b06:	11 24       	eor	r1, r1
   11b08:	90 e0       	ldi	r25, 0x00	; 0
   11b0a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   11b0c:	20 e2       	ldi	r18, 0x20	; 32
   11b0e:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218 (discriminator 2)
   11b10:	fc 01       	movw	r30, r24
   11b12:	ee 0f       	add	r30, r30
   11b14:	ff 1f       	adc	r31, r31
   11b16:	e4 0f       	add	r30, r20
   11b18:	f5 1f       	adc	r31, r21
   11b1a:	e2 55       	subi	r30, 0x52	; 82
   11b1c:	fe 4e       	sbci	r31, 0xEE	; 238
   11b1e:	30 87       	std	Z+8, r19	; 0x08
   11b20:	27 83       	std	Z+7, r18	; 0x07
   11b22:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   11b24:	8a 30       	cpi	r24, 0x0A	; 10
   11b26:	91 05       	cpc	r25, r1
   11b28:	99 f7       	brne	.-26     	; 0x11b10 <tds_associate(unsigned char)+0xba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   11b2a:	0e 94 66 8c 	call	0x118cc	; 0x118cc <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
   11b2e:	81 2f       	mov	r24, r17
   11b30:	66 96       	adiw	r28, 0x16	; 22
   11b32:	0f b6       	in	r0, 0x3f	; 63
   11b34:	f8 94       	cli
   11b36:	de bf       	out	0x3e, r29	; 62
   11b38:	0f be       	out	0x3f, r0	; 63
   11b3a:	cd bf       	out	0x3d, r28	; 61
   11b3c:	df 91       	pop	r29
   11b3e:	cf 91       	pop	r28
   11b40:	1f 91       	pop	r17
   11b42:	0f 91       	pop	r16
   11b44:	ff 90       	pop	r15
   11b46:	ef 90       	pop	r14
   11b48:	df 90       	pop	r13
   11b4a:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11b4c:	1f 5f       	subi	r17, 0xFF	; 255
   11b4e:	16 30       	cpi	r17, 0x06	; 6
   11b50:	09 f0       	breq	.+2      	; 0x11b54 <tds_associate(unsigned char)+0xfe>
   11b52:	a0 cf       	rjmp	.-192    	; 0x11a94 <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   11b54:	1f ef       	ldi	r17, 0xFF	; 255
   11b56:	e9 cf       	rjmp	.-46     	; 0x11b2a <tds_associate(unsigned char)+0xd4>

00011b58 <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   11b58:	df 92       	push	r13
   11b5a:	ef 92       	push	r14
   11b5c:	ff 92       	push	r15
   11b5e:	0f 93       	push	r16
   11b60:	1f 93       	push	r17
   11b62:	cf 93       	push	r28
   11b64:	df 93       	push	r29
   11b66:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   11b68:	c8 2f       	mov	r28, r24
   11b6a:	d0 e0       	ldi	r29, 0x00	; 0
   11b6c:	cc 0f       	add	r28, r28
   11b6e:	dd 1f       	adc	r29, r29
   11b70:	c7 59       	subi	r28, 0x97	; 151
   11b72:	de 4e       	sbci	r29, 0xEE	; 238
   11b74:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   11b76:	88 81       	ld	r24, Y
   11b78:	0e 94 51 d1 	call	0x1a2a2	; 0x1a2a2 <ds2482init(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   11b7c:	88 81       	ld	r24, Y
   11b7e:	0e 94 0b d1 	call	0x1a216	; 0x1a216 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   11b82:	88 81       	ld	r24, Y
   11b84:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   11b88:	62 e6       	ldi	r22, 0x62	; 98
   11b8a:	72 e1       	ldi	r23, 0x12	; 18
   11b8c:	88 81       	ld	r24, Y
   11b8e:	0e 94 05 d1 	call	0x1a20a	; 0x1a20a <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   11b92:	81 11       	cpse	r24, r1
   11b94:	3a c0       	rjmp	.+116    	; 0x11c0a <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   11b96:	8e 01       	movw	r16, r28
   11b98:	0f 5f       	subi	r16, 0xFF	; 255
   11b9a:	1f 4f       	sbci	r17, 0xFF	; 255
   11b9c:	9b e0       	ldi	r25, 0x0B	; 11
   11b9e:	e9 2e       	mov	r14, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   11ba0:	dd 24       	eor	r13, r13
   11ba2:	d3 94       	inc	r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   11ba4:	f8 01       	movw	r30, r16
   11ba6:	90 81       	ld	r25, Z
   11ba8:	96 30       	cpi	r25, 0x06	; 6
   11baa:	78 f5       	brcc	.+94     	; 0x11c0a <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   11bac:	20 91 ad 11 	lds	r18, 0x11AD	; 0x8011ad <Global_HWwirenum>
   11bb0:	42 2f       	mov	r20, r18
   11bb2:	50 e0       	ldi	r21, 0x00	; 0
   11bb4:	a2 e6       	ldi	r26, 0x62	; 98
   11bb6:	b2 e1       	ldi	r27, 0x12	; 18
   11bb8:	2e 9d       	mul	r18, r14
   11bba:	90 01       	movw	r18, r0
   11bbc:	11 24       	eor	r1, r1
   11bbe:	90 e0       	ldi	r25, 0x00	; 0
   11bc0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249 (discriminator 2)
   11bc2:	6d 91       	ld	r22, X+
   11bc4:	fc 01       	movw	r30, r24
   11bc6:	e2 0f       	add	r30, r18
   11bc8:	f3 1f       	adc	r31, r19
   11bca:	e5 59       	subi	r30, 0x95	; 149
   11bcc:	fe 4e       	sbci	r31, 0xEE	; 238
   11bce:	60 83       	st	Z, r22
   11bd0:	01 96       	adiw	r24, 0x01	; 1
   11bd2:	88 30       	cpi	r24, 0x08	; 8
   11bd4:	91 05       	cpc	r25, r1
   11bd6:	a9 f7       	brne	.-22     	; 0x11bc2 <one_hw_search_device(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   11bd8:	e4 9e       	mul	r14, r20
   11bda:	f0 01       	movw	r30, r0
   11bdc:	e5 9e       	mul	r14, r21
   11bde:	f0 0d       	add	r31, r0
   11be0:	11 24       	eor	r1, r1
   11be2:	e5 59       	subi	r30, 0x95	; 149
   11be4:	fe 4e       	sbci	r31, 0xEE	; 238
   11be6:	f0 86       	std	Z+8, r15	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   11be8:	d1 86       	std	Z+9, r13	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   11bea:	62 e6       	ldi	r22, 0x62	; 98
   11bec:	72 e1       	ldi	r23, 0x12	; 18
   11bee:	88 81       	ld	r24, Y
   11bf0:	0e 94 7f d0 	call	0x1a0fe	; 0x1a0fe <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   11bf4:	f8 01       	movw	r30, r16
   11bf6:	90 81       	ld	r25, Z
   11bf8:	9f 5f       	subi	r25, 0xFF	; 255
   11bfa:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   11bfc:	90 91 ad 11 	lds	r25, 0x11AD	; 0x8011ad <Global_HWwirenum>
   11c00:	9f 5f       	subi	r25, 0xFF	; 255
   11c02:	90 93 ad 11 	sts	0x11AD, r25	; 0x8011ad <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   11c06:	85 30       	cpi	r24, 0x05	; 5
   11c08:	69 f6       	brne	.-102    	; 0x11ba4 <one_hw_search_device(unsigned char)+0x4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   11c0a:	df 91       	pop	r29
   11c0c:	cf 91       	pop	r28
   11c0e:	1f 91       	pop	r17
   11c10:	0f 91       	pop	r16
   11c12:	ff 90       	pop	r15
   11c14:	ef 90       	pop	r14
   11c16:	df 90       	pop	r13
   11c18:	08 95       	ret

00011c1a <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   11c1a:	af 92       	push	r10
   11c1c:	bf 92       	push	r11
   11c1e:	cf 92       	push	r12
   11c20:	df 92       	push	r13
   11c22:	ef 92       	push	r14
   11c24:	ff 92       	push	r15
   11c26:	0f 93       	push	r16
   11c28:	1f 93       	push	r17
   11c2a:	cf 93       	push	r28
   11c2c:	df 93       	push	r29
   11c2e:	cd b7       	in	r28, 0x3d	; 61
   11c30:	de b7       	in	r29, 0x3e	; 62
   11c32:	68 97       	sbiw	r28, 0x18	; 24
   11c34:	0f b6       	in	r0, 0x3f	; 63
   11c36:	f8 94       	cli
   11c38:	de bf       	out	0x3e, r29	; 62
   11c3a:	0f be       	out	0x3f, r0	; 63
   11c3c:	cd bf       	out	0x3d, r28	; 61
   11c3e:	5e ea       	ldi	r21, 0xAE	; 174
   11c40:	e5 2e       	mov	r14, r21
   11c42:	51 e1       	ldi	r21, 0x11	; 17
   11c44:	f5 2e       	mov	r15, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11c46:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11c48:	6c 01       	movw	r12, r24
   11c4a:	dd 24       	eor	r13, r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11c4c:	6e e1       	ldi	r22, 0x1E	; 30
   11c4e:	a6 2e       	mov	r10, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   11c50:	be 01       	movw	r22, r28
   11c52:	6f 5f       	subi	r22, 0xFF	; 255
   11c54:	7f 4f       	sbci	r23, 0xFF	; 255
   11c56:	80 2f       	mov	r24, r16
   11c58:	0e 94 c0 8a 	call	0x11580	; 0x11580 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11c5c:	19 81       	ldd	r17, Y+1	; 0x01
   11c5e:	11 30       	cpi	r17, 0x01	; 1
   11c60:	09 f0       	breq	.+2      	; 0x11c64 <mereni_hwwire(unsigned int)+0x4a>
   11c62:	d9 c0       	rjmp	.+434    	; 0x11e16 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273 (discriminator 1)
   11c64:	f7 01       	movw	r30, r14
   11c66:	84 8d       	ldd	r24, Z+28	; 0x1c
   11c68:	9d 89       	ldd	r25, Y+21	; 0x15
   11c6a:	96 01       	movw	r18, r12
   11c6c:	28 1b       	sub	r18, r24
   11c6e:	31 09       	sbc	r19, r1
   11c70:	92 17       	cp	r25, r18
   11c72:	13 06       	cpc	r1, r19
   11c74:	11 f0       	breq	.+4      	; 0x11c7a <mereni_hwwire(unsigned int)+0x60>
   11c76:	08 f0       	brcs	.+2      	; 0x11c7a <mereni_hwwire(unsigned int)+0x60>
   11c78:	ce c0       	rjmp	.+412    	; 0x11e16 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   11c7a:	89 0f       	add	r24, r25
   11c7c:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   11c7e:	85 8d       	ldd	r24, Z+29	; 0x1d
   11c80:	81 11       	cpse	r24, r1
   11c82:	0f c0       	rjmp	.+30     	; 0x11ca2 <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   11c84:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c86:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   11c8a:	be 01       	movw	r22, r28
   11c8c:	6e 5f       	subi	r22, 0xFE	; 254
   11c8e:	7f 4f       	sbci	r23, 0xFF	; 255
   11c90:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c92:	0e 94 69 d0 	call	0x1a0d2	; 0x1a0d2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   11c96:	64 e4       	ldi	r22, 0x44	; 68
   11c98:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c9a:	0e 94 a5 d1 	call	0x1a34a	; 0x1a34a <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   11c9e:	f7 01       	movw	r30, r14
   11ca0:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   11ca2:	f7 01       	movw	r30, r14
   11ca4:	b5 8c       	ldd	r11, Z+29	; 0x1d
   11ca6:	f1 e0       	ldi	r31, 0x01	; 1
   11ca8:	bf 12       	cpse	r11, r31
   11caa:	b5 c0       	rjmp	.+362    	; 0x11e16 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   11cac:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cae:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   11cb2:	be 01       	movw	r22, r28
   11cb4:	6e 5f       	subi	r22, 0xFE	; 254
   11cb6:	7f 4f       	sbci	r23, 0xFF	; 255
   11cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cba:	0e 94 69 d0 	call	0x1a0d2	; 0x1a0d2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   11cbe:	be 01       	movw	r22, r28
   11cc0:	68 5e       	subi	r22, 0xE8	; 232
   11cc2:	7f 4f       	sbci	r23, 0xFF	; 255
   11cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cc6:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   11cca:	88 8d       	ldd	r24, Y+24	; 0x18
   11ccc:	88 23       	and	r24, r24
   11cce:	09 f4       	brne	.+2      	; 0x11cd2 <mereni_hwwire(unsigned int)+0xb8>
   11cd0:	a2 c0       	rjmp	.+324    	; 0x11e16 <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   11cd2:	f7 01       	movw	r30, r14
   11cd4:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   11cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cd8:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <ds2482owReset(unsigned char)>
   11cdc:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   11cde:	be 01       	movw	r22, r28
   11ce0:	6e 5f       	subi	r22, 0xFE	; 254
   11ce2:	7f 4f       	sbci	r23, 0xFF	; 255
   11ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ce6:	0e 94 69 d0 	call	0x1a0d2	; 0x1a0d2 <owMatchRom(unsigned char, unsigned char*)>
   11cea:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   11cec:	6e eb       	ldi	r22, 0xBE	; 190
   11cee:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cf0:	0e 94 a5 d1 	call	0x1a34a	; 0x1a34a <ds2482owWriteByte(unsigned char, unsigned char)>
   11cf4:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   11cf6:	be 01       	movw	r22, r28
   11cf8:	69 5e       	subi	r22, 0xE9	; 233
   11cfa:	7f 4f       	sbci	r23, 0xFF	; 255
   11cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cfe:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d02:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   11d04:	8f 89       	ldd	r24, Y+23	; 0x17
   11d06:	f7 01       	movw	r30, r14
   11d08:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   11d0a:	be 01       	movw	r22, r28
   11d0c:	69 5e       	subi	r22, 0xE9	; 233
   11d0e:	7f 4f       	sbci	r23, 0xFF	; 255
   11d10:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d12:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d16:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   11d18:	8f 89       	ldd	r24, Y+23	; 0x17
   11d1a:	f7 01       	movw	r30, r14
   11d1c:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   11d1e:	be 01       	movw	r22, r28
   11d20:	69 5e       	subi	r22, 0xE9	; 233
   11d22:	7f 4f       	sbci	r23, 0xFF	; 255
   11d24:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d26:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d2a:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   11d2c:	be 01       	movw	r22, r28
   11d2e:	69 5e       	subi	r22, 0xE9	; 233
   11d30:	7f 4f       	sbci	r23, 0xFF	; 255
   11d32:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d34:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d38:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   11d3a:	be 01       	movw	r22, r28
   11d3c:	69 5e       	subi	r22, 0xE9	; 233
   11d3e:	7f 4f       	sbci	r23, 0xFF	; 255
   11d40:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d42:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d46:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   11d48:	be 01       	movw	r22, r28
   11d4a:	69 5e       	subi	r22, 0xE9	; 233
   11d4c:	7f 4f       	sbci	r23, 0xFF	; 255
   11d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d50:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d54:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   11d56:	be 01       	movw	r22, r28
   11d58:	69 5e       	subi	r22, 0xE9	; 233
   11d5a:	7f 4f       	sbci	r23, 0xFF	; 255
   11d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d5e:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d62:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   11d64:	8f 89       	ldd	r24, Y+23	; 0x17
   11d66:	f7 01       	movw	r30, r14
   11d68:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   11d6a:	be 01       	movw	r22, r28
   11d6c:	69 5e       	subi	r22, 0xE9	; 233
   11d6e:	7f 4f       	sbci	r23, 0xFF	; 255
   11d70:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d72:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
   11d76:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   11d78:	8f 89       	ldd	r24, Y+23	; 0x17
   11d7a:	f7 01       	movw	r30, r14
   11d7c:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   11d7e:	be 01       	movw	r22, r28
   11d80:	69 5e       	subi	r22, 0xE9	; 233
   11d82:	7f 4f       	sbci	r23, 0xFF	; 255
   11d84:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d86:	0e 94 2d d2 	call	0x1a45a	; 0x1a45a <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   11d8a:	9f 89       	ldd	r25, Y+23	; 0x17
   11d8c:	f7 01       	movw	r30, r14
   11d8e:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   11d90:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   11d92:	09 f0       	breq	.+2      	; 0x11d96 <mereni_hwwire(unsigned int)+0x17c>
   11d94:	58 c0       	rjmp	.+176    	; 0x11e46 <mereni_hwwire(unsigned int)+0x22c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11d96:	63 81       	ldd	r22, Z+3	; 0x03
   11d98:	70 e0       	ldi	r23, 0x00	; 0
   11d9a:	e8 8d       	ldd	r30, Y+24	; 0x18
   11d9c:	ae 9e       	mul	r10, r30
   11d9e:	f0 01       	movw	r30, r0
   11da0:	11 24       	eor	r1, r1
   11da2:	e2 55       	subi	r30, 0x52	; 82
   11da4:	fe 4e       	sbci	r31, 0xEE	; 238
   11da6:	82 81       	ldd	r24, Z+2	; 0x02
   11da8:	9b 01       	movw	r18, r22
   11daa:	28 1b       	sub	r18, r24
   11dac:	31 09       	sbc	r19, r1
   11dae:	c9 01       	movw	r24, r18
   11db0:	96 95       	lsr	r25
   11db2:	98 2f       	mov	r25, r24
   11db4:	88 27       	eor	r24, r24
   11db6:	97 95       	ror	r25
   11db8:	87 95       	ror	r24
   11dba:	0e 94 b1 dc 	call	0x1b962	; 0x1b962 <__divmodhi4>
   11dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
   11dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
   11dc2:	40 97       	sbiw	r24, 0x10	; 16
   11dc4:	68 0f       	add	r22, r24
   11dc6:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   11dc8:	f7 01       	movw	r30, r14
   11dca:	81 81       	ldd	r24, Z+1	; 0x01
   11dcc:	90 e0       	ldi	r25, 0x00	; 0
   11dce:	98 2f       	mov	r25, r24
   11dd0:	88 27       	eor	r24, r24
   11dd2:	99 0f       	add	r25, r25
   11dd4:	99 0f       	add	r25, r25
   11dd6:	99 0f       	add	r25, r25
   11dd8:	20 81       	ld	r18, Z
   11dda:	f8 e0       	ldi	r31, 0x08	; 8
   11ddc:	2f 9f       	mul	r18, r31
   11dde:	90 01       	movw	r18, r0
   11de0:	11 24       	eor	r1, r1
   11de2:	82 2b       	or	r24, r18
   11de4:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11de6:	43 e0       	ldi	r20, 0x03	; 3
   11de8:	88 0f       	add	r24, r24
   11dea:	99 1f       	adc	r25, r25
   11dec:	4a 95       	dec	r20
   11dee:	e1 f7       	brne	.-8      	; 0x11de8 <mereni_hwwire(unsigned int)+0x1ce>
   11df0:	80 78       	andi	r24, 0x80	; 128
   11df2:	68 0f       	add	r22, r24
   11df4:	79 1f       	adc	r23, r25
   11df6:	f7 01       	movw	r30, r14
   11df8:	76 83       	std	Z+6, r23	; 0x06
   11dfa:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   11dfc:	b3 8e       	std	Z+27, r11	; 0x1b
   11dfe:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   11e00:	27 89       	ldd	r18, Z+23	; 0x17
   11e02:	30 8d       	ldd	r19, Z+24	; 0x18
   11e04:	32 8f       	std	Z+26, r19	; 0x1a
   11e06:	21 8f       	std	Z+25, r18	; 0x19
   11e08:	81 50       	subi	r24, 0x01	; 1
   11e0a:	32 97       	sbiw	r30, 0x02	; 2
   11e0c:	81 11       	cpse	r24, r1
   11e0e:	f8 cf       	rjmp	.-16     	; 0x11e00 <mereni_hwwire(unsigned int)+0x1e6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   11e10:	f7 01       	movw	r30, r14
   11e12:	70 87       	std	Z+8, r23	; 0x08
   11e14:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11e16:	0f 5f       	subi	r16, 0xFF	; 255
   11e18:	fe e1       	ldi	r31, 0x1E	; 30
   11e1a:	ef 0e       	add	r14, r31
   11e1c:	f1 1c       	adc	r15, r1
   11e1e:	06 30       	cpi	r16, 0x06	; 6
   11e20:	09 f0       	breq	.+2      	; 0x11e24 <mereni_hwwire(unsigned int)+0x20a>
   11e22:	16 cf       	rjmp	.-468    	; 0x11c50 <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:326
          }
        }
      }
    }
  }
}
   11e24:	68 96       	adiw	r28, 0x18	; 24
   11e26:	0f b6       	in	r0, 0x3f	; 63
   11e28:	f8 94       	cli
   11e2a:	de bf       	out	0x3e, r29	; 62
   11e2c:	0f be       	out	0x3f, r0	; 63
   11e2e:	cd bf       	out	0x3d, r28	; 61
   11e30:	df 91       	pop	r29
   11e32:	cf 91       	pop	r28
   11e34:	1f 91       	pop	r17
   11e36:	0f 91       	pop	r16
   11e38:	ff 90       	pop	r15
   11e3a:	ef 90       	pop	r14
   11e3c:	df 90       	pop	r13
   11e3e:	cf 90       	pop	r12
   11e40:	bf 90       	pop	r11
   11e42:	af 90       	pop	r10
   11e44:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   11e46:	13 8e       	std	Z+27, r1	; 0x1b
   11e48:	e6 cf       	rjmp	.-52     	; 0x11e16 <mereni_hwwire(unsigned int)+0x1fc>

00011e4a <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:198
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
   11e4a:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <eeprom_read_byte>

00011e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   11e4e:	0c 94 b8 e8 	jmp	0x1d170	; 0x1d170 <eeprom_write_byte>

00011e52 <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   11e52:	e8 2f       	mov	r30, r24
   11e54:	f0 e0       	ldi	r31, 0x00	; 0
   11e56:	ef 58       	subi	r30, 0x8F	; 143
   11e58:	fd 4e       	sbci	r31, 0xED	; 237
   11e5a:	80 81       	ld	r24, Z
   11e5c:	08 95       	ret

00011e5e <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   11e5e:	e8 2f       	mov	r30, r24
   11e60:	f0 e0       	ldi	r31, 0x00	; 0
   11e62:	ef 58       	subi	r30, 0x8F	; 143
   11e64:	fd 4e       	sbci	r31, 0xED	; 237
   11e66:	60 83       	st	Z, r22
   11e68:	08 95       	ret

00011e6a <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   11e6a:	e8 2f       	mov	r30, r24
   11e6c:	f0 e0       	ldi	r31, 0x00	; 0
   11e6e:	e4 59       	subi	r30, 0x94	; 148
   11e70:	fd 4e       	sbci	r31, 0xED	; 237
   11e72:	60 83       	st	Z, r22
   11e74:	08 95       	ret

00011e76 <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   11e76:	2f 92       	push	r2
   11e78:	3f 92       	push	r3
   11e7a:	4f 92       	push	r4
   11e7c:	5f 92       	push	r5
   11e7e:	6f 92       	push	r6
   11e80:	7f 92       	push	r7
   11e82:	8f 92       	push	r8
   11e84:	9f 92       	push	r9
   11e86:	af 92       	push	r10
   11e88:	bf 92       	push	r11
   11e8a:	cf 92       	push	r12
   11e8c:	df 92       	push	r13
   11e8e:	ef 92       	push	r14
   11e90:	ff 92       	push	r15
   11e92:	0f 93       	push	r16
   11e94:	1f 93       	push	r17
   11e96:	cf 93       	push	r28
   11e98:	df 93       	push	r29
   11e9a:	2f ed       	ldi	r18, 0xDF	; 223
   11e9c:	82 2e       	mov	r8, r18
   11e9e:	22 e1       	ldi	r18, 0x12	; 18
   11ea0:	92 2e       	mov	r9, r18
   11ea2:	3b ec       	ldi	r19, 0xCB	; 203
   11ea4:	43 2e       	mov	r4, r19
   11ea6:	32 e1       	ldi	r19, 0x12	; 18
   11ea8:	53 2e       	mov	r5, r19
   11eaa:	47 eb       	ldi	r20, 0xB7	; 183
   11eac:	24 2e       	mov	r2, r20
   11eae:	42 e1       	ldi	r20, 0x12	; 18
   11eb0:	34 2e       	mov	r3, r20
   11eb2:	d0 e0       	ldi	r29, 0x00	; 0
   11eb4:	c0 e0       	ldi	r28, 0x00	; 0
   11eb6:	8c e3       	ldi	r24, 0x3C	; 60
   11eb8:	90 e0       	ldi	r25, 0x00	; 0
   11eba:	0e 94 3f da 	call	0x1b47e	; 0x1b47e <operator new(unsigned int)>
   11ebe:	3c 01       	movw	r6, r24
   11ec0:	1f 92       	push	r1
   11ec2:	1f 92       	push	r1
   11ec4:	8f e3       	ldi	r24, 0x3F	; 63
   11ec6:	8f 93       	push	r24
   11ec8:	80 e8       	ldi	r24, 0x80	; 128
   11eca:	8f 93       	push	r24
   11ecc:	1f 92       	push	r1
   11ece:	1f 92       	push	r1
   11ed0:	a1 2c       	mov	r10, r1
   11ed2:	b1 2c       	mov	r11, r1
   11ed4:	80 ea       	ldi	r24, 0xA0	; 160
   11ed6:	c8 2e       	mov	r12, r24
   11ed8:	80 e4       	ldi	r24, 0x40	; 64
   11eda:	d8 2e       	mov	r13, r24
   11edc:	e1 2c       	mov	r14, r1
   11ede:	f1 2c       	mov	r15, r1
   11ee0:	00 e0       	ldi	r16, 0x00	; 0
   11ee2:	10 e4       	ldi	r17, 0x40	; 64
   11ee4:	91 01       	movw	r18, r2
   11ee6:	a2 01       	movw	r20, r4
   11ee8:	b4 01       	movw	r22, r8
   11eea:	c3 01       	movw	r24, r6
   11eec:	0e 94 18 c0 	call	0x18030	; 0x18030 <PID::PID(double*, double*, double*, double, double, double, int)>
   11ef0:	e0 91 6a 12 	lds	r30, 0x126A	; 0x80126a <array_pids>
   11ef4:	f0 91 6b 12 	lds	r31, 0x126B	; 0x80126b <array_pids+0x1>
   11ef8:	ec 0f       	add	r30, r28
   11efa:	fd 1f       	adc	r31, r29
   11efc:	71 82       	std	Z+1, r7	; 0x01
   11efe:	60 82       	st	Z, r6
   11f00:	61 e0       	ldi	r22, 0x01	; 1
   11f02:	70 e0       	ldi	r23, 0x00	; 0
   11f04:	c3 01       	movw	r24, r6
   11f06:	0e 94 50 bf 	call	0x17ea0	; 0x17ea0 <PID::SetMode(int)>
   11f0a:	e0 91 6a 12 	lds	r30, 0x126A	; 0x80126a <array_pids>
   11f0e:	f0 91 6b 12 	lds	r31, 0x126B	; 0x80126b <array_pids+0x1>
   11f12:	ec 0f       	add	r30, r28
   11f14:	fd 1f       	adc	r31, r29
   11f16:	00 e0       	ldi	r16, 0x00	; 0
   11f18:	10 e0       	ldi	r17, 0x00	; 0
   11f1a:	2f e7       	ldi	r18, 0x7F	; 127
   11f1c:	33 e4       	ldi	r19, 0x43	; 67
   11f1e:	40 e0       	ldi	r20, 0x00	; 0
   11f20:	50 e0       	ldi	r21, 0x00	; 0
   11f22:	ba 01       	movw	r22, r20
   11f24:	80 81       	ld	r24, Z
   11f26:	91 81       	ldd	r25, Z+1	; 0x01
   11f28:	0e 94 88 be 	call	0x17d10	; 0x17d10 <PID::SetOutputLimits(double, double)>
   11f2c:	84 e0       	ldi	r24, 0x04	; 4
   11f2e:	88 0e       	add	r8, r24
   11f30:	91 1c       	adc	r9, r1
   11f32:	84 e0       	ldi	r24, 0x04	; 4
   11f34:	48 0e       	add	r4, r24
   11f36:	51 1c       	adc	r5, r1
   11f38:	84 e0       	ldi	r24, 0x04	; 4
   11f3a:	28 0e       	add	r2, r24
   11f3c:	31 1c       	adc	r3, r1
   11f3e:	22 96       	adiw	r28, 0x02	; 2
   11f40:	0f 90       	pop	r0
   11f42:	0f 90       	pop	r0
   11f44:	0f 90       	pop	r0
   11f46:	0f 90       	pop	r0
   11f48:	0f 90       	pop	r0
   11f4a:	0f 90       	pop	r0
   11f4c:	ca 30       	cpi	r28, 0x0A	; 10
   11f4e:	d1 05       	cpc	r29, r1
   11f50:	09 f0       	breq	.+2      	; 0x11f54 <thermostat_init_pid()+0xde>
   11f52:	b1 cf       	rjmp	.-158    	; 0x11eb6 <thermostat_init_pid()+0x40>
   11f54:	df 91       	pop	r29
   11f56:	cf 91       	pop	r28
   11f58:	1f 91       	pop	r17
   11f5a:	0f 91       	pop	r16
   11f5c:	ff 90       	pop	r15
   11f5e:	ef 90       	pop	r14
   11f60:	df 90       	pop	r13
   11f62:	cf 90       	pop	r12
   11f64:	bf 90       	pop	r11
   11f66:	af 90       	pop	r10
   11f68:	9f 90       	pop	r9
   11f6a:	8f 90       	pop	r8
   11f6c:	7f 90       	pop	r7
   11f6e:	6f 90       	pop	r6
   11f70:	5f 90       	pop	r5
   11f72:	4f 90       	pop	r4
   11f74:	3f 90       	pop	r3
   11f76:	2f 90       	pop	r2
   11f78:	08 95       	ret

00011f7a <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   11f7a:	90 e0       	ldi	r25, 0x00	; 0
   11f7c:	88 0f       	add	r24, r24
   11f7e:	99 1f       	adc	r25, r25
   11f80:	20 91 6a 12 	lds	r18, 0x126A	; 0x80126a <array_pids>
   11f84:	30 91 6b 12 	lds	r19, 0x126B	; 0x80126b <array_pids+0x1>
   11f88:	82 0f       	add	r24, r18
   11f8a:	93 1f       	adc	r25, r19
   11f8c:	70 e0       	ldi	r23, 0x00	; 0
   11f8e:	60 e0       	ldi	r22, 0x00	; 0
   11f90:	fc 01       	movw	r30, r24
   11f92:	80 81       	ld	r24, Z
   11f94:	91 81       	ldd	r25, Z+1	; 0x01
   11f96:	0c 94 67 bf 	jmp	0x17ece	; 0x17ece <PID::SetControllerDirection(int)>

00011f9a <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   11f9a:	90 e0       	ldi	r25, 0x00	; 0
   11f9c:	88 0f       	add	r24, r24
   11f9e:	99 1f       	adc	r25, r25
   11fa0:	20 91 6a 12 	lds	r18, 0x126A	; 0x80126a <array_pids>
   11fa4:	30 91 6b 12 	lds	r19, 0x126B	; 0x80126b <array_pids+0x1>
   11fa8:	82 0f       	add	r24, r18
   11faa:	93 1f       	adc	r25, r19
   11fac:	61 e0       	ldi	r22, 0x01	; 1
   11fae:	70 e0       	ldi	r23, 0x00	; 0
   11fb0:	fc 01       	movw	r30, r24
   11fb2:	80 81       	ld	r24, Z
   11fb4:	91 81       	ldd	r25, Z+1	; 0x01
   11fb6:	0c 94 67 bf 	jmp	0x17ece	; 0x17ece <PID::SetControllerDirection(int)>

00011fba <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
   11fba:	94 e0       	ldi	r25, 0x04	; 4
   11fbc:	89 9f       	mul	r24, r25
   11fbe:	f0 01       	movw	r30, r0
   11fc0:	11 24       	eor	r1, r1
   11fc2:	ed 55       	subi	r30, 0x5D	; 93
   11fc4:	fd 4e       	sbci	r31, 0xED	; 237
   11fc6:	60 81       	ld	r22, Z
   11fc8:	71 81       	ldd	r23, Z+1	; 0x01
   11fca:	82 81       	ldd	r24, Z+2	; 0x02
   11fcc:	93 81       	ldd	r25, Z+3	; 0x03
   11fce:	08 95       	ret

00011fd0 <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
   11fd0:	94 e0       	ldi	r25, 0x04	; 4
   11fd2:	89 9f       	mul	r24, r25
   11fd4:	f0 01       	movw	r30, r0
   11fd6:	11 24       	eor	r1, r1
   11fd8:	e1 52       	subi	r30, 0x21	; 33
   11fda:	fd 4e       	sbci	r31, 0xED	; 237
   11fdc:	40 83       	st	Z, r20
   11fde:	51 83       	std	Z+1, r21	; 0x01
   11fe0:	62 83       	std	Z+2, r22	; 0x02
   11fe2:	73 83       	std	Z+3, r23	; 0x03
   11fe4:	08 95       	ret

00011fe6 <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
   11fe6:	94 e0       	ldi	r25, 0x04	; 4
   11fe8:	89 9f       	mul	r24, r25
   11fea:	f0 01       	movw	r30, r0
   11fec:	11 24       	eor	r1, r1
   11fee:	e9 54       	subi	r30, 0x49	; 73
   11ff0:	fd 4e       	sbci	r31, 0xED	; 237
   11ff2:	40 83       	st	Z, r20
   11ff4:	51 83       	std	Z+1, r21	; 0x01
   11ff6:	62 83       	std	Z+2, r22	; 0x02
   11ff8:	73 83       	std	Z+3, r23	; 0x03
   11ffa:	08 95       	ret

00011ffc <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
   11ffc:	94 e0       	ldi	r25, 0x04	; 4
   11ffe:	89 9f       	mul	r24, r25
   12000:	f0 01       	movw	r30, r0
   12002:	11 24       	eor	r1, r1
   12004:	e5 53       	subi	r30, 0x35	; 53
   12006:	fd 4e       	sbci	r31, 0xED	; 237
   12008:	60 81       	ld	r22, Z
   1200a:	71 81       	ldd	r23, Z+1	; 0x01
   1200c:	82 81       	ldd	r24, Z+2	; 0x02
   1200e:	93 81       	ldd	r25, Z+3	; 0x03
   12010:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
   12014:	86 2f       	mov	r24, r22
   12016:	08 95       	ret

00012018 <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
   12018:	94 e0       	ldi	r25, 0x04	; 4
   1201a:	89 9f       	mul	r24, r25
   1201c:	f0 01       	movw	r30, r0
   1201e:	11 24       	eor	r1, r1
   12020:	e1 57       	subi	r30, 0x71	; 113
   12022:	fd 4e       	sbci	r31, 0xED	; 237
   12024:	60 81       	ld	r22, Z
   12026:	71 81       	ldd	r23, Z+1	; 0x01
   12028:	82 81       	ldd	r24, Z+2	; 0x02
   1202a:	93 81       	ldd	r25, Z+3	; 0x03
   1202c:	08 95       	ret

0001202e <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
   1202e:	94 e0       	ldi	r25, 0x04	; 4
   12030:	89 9f       	mul	r24, r25
   12032:	f0 01       	movw	r30, r0
   12034:	11 24       	eor	r1, r1
   12036:	e5 58       	subi	r30, 0x85	; 133
   12038:	fd 4e       	sbci	r31, 0xED	; 237
   1203a:	60 81       	ld	r22, Z
   1203c:	71 81       	ldd	r23, Z+1	; 0x01
   1203e:	82 81       	ldd	r24, Z+2	; 0x02
   12040:	93 81       	ldd	r25, Z+3	; 0x03
   12042:	08 95       	ret

00012044 <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
   12044:	e8 2f       	mov	r30, r24
   12046:	f0 e0       	ldi	r31, 0x00	; 0
   12048:	ea 58       	subi	r30, 0x8A	; 138
   1204a:	fd 4e       	sbci	r31, 0xED	; 237
   1204c:	80 81       	ld	r24, Z
   1204e:	08 95       	ret

00012050 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
   12050:	ef 92       	push	r14
   12052:	ff 92       	push	r15
   12054:	0f 93       	push	r16
   12056:	1f 93       	push	r17
   12058:	cf 93       	push	r28
   1205a:	df 93       	push	r29
   1205c:	91 e2       	ldi	r25, 0x21	; 33
   1205e:	89 9f       	mul	r24, r25
   12060:	e0 01       	movw	r28, r0
   12062:	11 24       	eor	r1, r1
   12064:	8e 01       	movw	r16, r28
   12066:	04 5b       	subi	r16, 0xB4	; 180
   12068:	1e 4f       	sbci	r17, 0xFE	; 254
   1206a:	7b 01       	movw	r14, r22
   1206c:	cb 5a       	subi	r28, 0xAB	; 171
   1206e:	de 4f       	sbci	r29, 0xFE	; 254
   12070:	c8 01       	movw	r24, r16
   12072:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   12076:	f7 01       	movw	r30, r14
   12078:	81 93       	st	Z+, r24
   1207a:	7f 01       	movw	r14, r30
   1207c:	88 23       	and	r24, r24
   1207e:	29 f0       	breq	.+10     	; 0x1208a <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   12080:	0f 5f       	subi	r16, 0xFF	; 255
   12082:	1f 4f       	sbci	r17, 0xFF	; 255
   12084:	0c 17       	cp	r16, r28
   12086:	1d 07       	cpc	r17, r29
   12088:	99 f7       	brne	.-26     	; 0x12070 <thermostat_ring_get_name(unsigned char, char*)+0x20>
   1208a:	df 91       	pop	r29
   1208c:	cf 91       	pop	r28
   1208e:	1f 91       	pop	r17
   12090:	0f 91       	pop	r16
   12092:	ff 90       	pop	r15
   12094:	ef 90       	pop	r14
   12096:	08 95       	ret

00012098 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
   12098:	df 92       	push	r13
   1209a:	ef 92       	push	r14
   1209c:	ff 92       	push	r15
   1209e:	0f 93       	push	r16
   120a0:	1f 93       	push	r17
   120a2:	cf 93       	push	r28
   120a4:	df 93       	push	r29
   120a6:	91 e2       	ldi	r25, 0x21	; 33
   120a8:	89 9f       	mul	r24, r25
   120aa:	e0 01       	movw	r28, r0
   120ac:	11 24       	eor	r1, r1
   120ae:	7b 01       	movw	r14, r22
   120b0:	8e 01       	movw	r16, r28
   120b2:	04 5b       	subi	r16, 0xB4	; 180
   120b4:	1e 4f       	sbci	r17, 0xFE	; 254
   120b6:	cb 5a       	subi	r28, 0xAB	; 171
   120b8:	de 4f       	sbci	r29, 0xFE	; 254
   120ba:	f7 01       	movw	r30, r14
   120bc:	d1 90       	ld	r13, Z+
   120be:	7f 01       	movw	r14, r30
   120c0:	6d 2d       	mov	r22, r13
   120c2:	c8 01       	movw	r24, r16
   120c4:	0e 94 27 8f 	call	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   120c8:	dd 20       	and	r13, r13
   120ca:	29 f0       	breq	.+10     	; 0x120d6 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   120cc:	0f 5f       	subi	r16, 0xFF	; 255
   120ce:	1f 4f       	sbci	r17, 0xFF	; 255
   120d0:	0c 17       	cp	r16, r28
   120d2:	1d 07       	cpc	r17, r29
   120d4:	91 f7       	brne	.-28     	; 0x120ba <thermostat_ring_set_name(unsigned char, char*)+0x22>
   120d6:	df 91       	pop	r29
   120d8:	cf 91       	pop	r28
   120da:	1f 91       	pop	r17
   120dc:	0f 91       	pop	r16
   120de:	ff 90       	pop	r15
   120e0:	ef 90       	pop	r14
   120e2:	df 90       	pop	r13
   120e4:	08 95       	ret

000120e6 <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
   120e6:	21 e2       	ldi	r18, 0x21	; 33
   120e8:	82 9f       	mul	r24, r18
   120ea:	c0 01       	movw	r24, r0
   120ec:	11 24       	eor	r1, r1
   120ee:	81 5a       	subi	r24, 0xA1	; 161
   120f0:	9e 4f       	sbci	r25, 0xFE	; 254
   120f2:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

000120f6 <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
   120f6:	21 e2       	ldi	r18, 0x21	; 33
   120f8:	82 9f       	mul	r24, r18
   120fa:	c0 01       	movw	r24, r0
   120fc:	11 24       	eor	r1, r1
   120fe:	81 5a       	subi	r24, 0xA1	; 161
   12100:	9e 4f       	sbci	r25, 0xFE	; 254
   12102:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012106 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
   12106:	21 e2       	ldi	r18, 0x21	; 33
   12108:	82 9f       	mul	r24, r18
   1210a:	c0 01       	movw	r24, r0
   1210c:	11 24       	eor	r1, r1
   1210e:	83 5a       	subi	r24, 0xA3	; 163
   12110:	9e 4f       	sbci	r25, 0xFE	; 254
   12112:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

00012116 <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
   12116:	21 e2       	ldi	r18, 0x21	; 33
   12118:	82 9f       	mul	r24, r18
   1211a:	c0 01       	movw	r24, r0
   1211c:	11 24       	eor	r1, r1
   1211e:	83 5a       	subi	r24, 0xA3	; 163
   12120:	9e 4f       	sbci	r25, 0xFE	; 254
   12122:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012126 <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
   12126:	21 e2       	ldi	r18, 0x21	; 33
   12128:	82 9f       	mul	r24, r18
   1212a:	c0 01       	movw	r24, r0
   1212c:	11 24       	eor	r1, r1
   1212e:	85 5a       	subi	r24, 0xA5	; 165
   12130:	9e 4f       	sbci	r25, 0xFE	; 254
   12132:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

00012136 <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
   12136:	21 e2       	ldi	r18, 0x21	; 33
   12138:	82 9f       	mul	r24, r18
   1213a:	c0 01       	movw	r24, r0
   1213c:	11 24       	eor	r1, r1
   1213e:	85 5a       	subi	r24, 0xA5	; 165
   12140:	9e 4f       	sbci	r25, 0xFE	; 254
   12142:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012146 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
   12146:	0f 93       	push	r16
   12148:	1f 93       	push	r17
   1214a:	cf 93       	push	r28
   1214c:	91 e2       	ldi	r25, 0x21	; 33
   1214e:	89 9f       	mul	r24, r25
   12150:	80 01       	movw	r16, r0
   12152:	11 24       	eor	r1, r1
   12154:	c8 01       	movw	r24, r16
   12156:	8a 5a       	subi	r24, 0xAA	; 170
   12158:	9e 4f       	sbci	r25, 0xFE	; 254
   1215a:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   1215e:	c8 2f       	mov	r28, r24
   12160:	c8 01       	movw	r24, r16
   12162:	89 5a       	subi	r24, 0xA9	; 169
   12164:	9e 4f       	sbci	r25, 0xFE	; 254
   12166:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   1216a:	2c 2f       	mov	r18, r28
   1216c:	30 e0       	ldi	r19, 0x00	; 0
   1216e:	32 2f       	mov	r19, r18
   12170:	22 27       	eor	r18, r18
   12172:	82 0f       	add	r24, r18
   12174:	93 2f       	mov	r25, r19
   12176:	91 1d       	adc	r25, r1
   12178:	cf 91       	pop	r28
   1217a:	1f 91       	pop	r17
   1217c:	0f 91       	pop	r16
   1217e:	08 95       	ret

00012180 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
   12180:	1f 93       	push	r17
   12182:	cf 93       	push	r28
   12184:	df 93       	push	r29
   12186:	16 2f       	mov	r17, r22
   12188:	67 2f       	mov	r22, r23
   1218a:	91 e2       	ldi	r25, 0x21	; 33
   1218c:	89 9f       	mul	r24, r25
   1218e:	e0 01       	movw	r28, r0
   12190:	11 24       	eor	r1, r1
   12192:	ce 01       	movw	r24, r28
   12194:	8a 5a       	subi	r24, 0xAA	; 170
   12196:	9e 4f       	sbci	r25, 0xFE	; 254
   12198:	0e 94 27 8f 	call	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1219c:	61 2f       	mov	r22, r17
   1219e:	ce 01       	movw	r24, r28
   121a0:	89 5a       	subi	r24, 0xA9	; 169
   121a2:	9e 4f       	sbci	r25, 0xFE	; 254
   121a4:	df 91       	pop	r29
   121a6:	cf 91       	pop	r28
   121a8:	1f 91       	pop	r17
   121aa:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000121ae <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
   121ae:	21 e2       	ldi	r18, 0x21	; 33
   121b0:	82 9f       	mul	r24, r18
   121b2:	c0 01       	movw	r24, r0
   121b4:	11 24       	eor	r1, r1
   121b6:	84 5a       	subi	r24, 0xA4	; 164
   121b8:	9e 4f       	sbci	r25, 0xFE	; 254
   121ba:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

000121be <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
   121be:	21 e2       	ldi	r18, 0x21	; 33
   121c0:	82 9f       	mul	r24, r18
   121c2:	c0 01       	movw	r24, r0
   121c4:	11 24       	eor	r1, r1
   121c6:	84 5a       	subi	r24, 0xA4	; 164
   121c8:	9e 4f       	sbci	r25, 0xFE	; 254
   121ca:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000121ce <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
   121ce:	21 e2       	ldi	r18, 0x21	; 33
   121d0:	82 9f       	mul	r24, r18
   121d2:	c0 01       	movw	r24, r0
   121d4:	11 24       	eor	r1, r1
   121d6:	82 5a       	subi	r24, 0xA2	; 162
   121d8:	9e 4f       	sbci	r25, 0xFE	; 254
   121da:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

000121de <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
   121de:	21 e2       	ldi	r18, 0x21	; 33
   121e0:	82 9f       	mul	r24, r18
   121e2:	c0 01       	movw	r24, r0
   121e4:	11 24       	eor	r1, r1
   121e6:	82 5a       	subi	r24, 0xA2	; 162
   121e8:	9e 4f       	sbci	r25, 0xFE	; 254
   121ea:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000121ee <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
   121ee:	cf 93       	push	r28
   121f0:	c6 2f       	mov	r28, r22
   121f2:	0e 94 e7 90 	call	0x121ce	; 0x121ce <thermostat_ring_get_mode(unsigned char)>
   121f6:	91 e0       	ldi	r25, 0x01	; 1
   121f8:	8c 13       	cpse	r24, r28
   121fa:	90 e0       	ldi	r25, 0x00	; 0
   121fc:	89 2f       	mov	r24, r25
   121fe:	cf 91       	pop	r28
   12200:	08 95       	ret

00012202 <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
   12202:	21 e2       	ldi	r18, 0x21	; 33
   12204:	82 9f       	mul	r24, r18
   12206:	c0 01       	movw	r24, r0
   12208:	11 24       	eor	r1, r1
   1220a:	88 5a       	subi	r24, 0xA8	; 168
   1220c:	9e 4f       	sbci	r25, 0xFE	; 254
   1220e:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

00012212 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12212:	21 e2       	ldi	r18, 0x21	; 33
   12214:	82 9f       	mul	r24, r18
   12216:	c0 01       	movw	r24, r0
   12218:	11 24       	eor	r1, r1
   1221a:	88 5a       	subi	r24, 0xA8	; 168
   1221c:	9e 4f       	sbci	r25, 0xFE	; 254
   1221e:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012222 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   12222:	1f 93       	push	r17
   12224:	cf 93       	push	r28
   12226:	df 93       	push	r29
   12228:	c8 2f       	mov	r28, r24
   1222a:	16 2f       	mov	r17, r22
   1222c:	d4 2f       	mov	r29, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   1222e:	0e 94 01 91 	call	0x12202	; 0x12202 <thermostat_ring_get_status_data(unsigned char)>
   12232:	61 e0       	ldi	r22, 0x01	; 1
   12234:	70 e0       	ldi	r23, 0x00	; 0
   12236:	01 c0       	rjmp	.+2      	; 0x1223a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   12238:	66 0f       	add	r22, r22
   1223a:	1a 95       	dec	r17
   1223c:	ea f7       	brpl	.-6      	; 0x12238 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   1223e:	d1 11       	cpse	r29, r1
   12240:	08 c0       	rjmp	.+16     	; 0x12252 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206 (discriminator 1)
   12242:	60 95       	com	r22
   12244:	68 23       	and	r22, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   12246:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
}
   12248:	df 91       	pop	r29
   1224a:	cf 91       	pop	r28
   1224c:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   1224e:	0c 94 09 91 	jmp	0x12212	; 0x12212 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   12252:	68 2b       	or	r22, r24
   12254:	f8 cf       	rjmp	.-16     	; 0x12246 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

00012256 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   12256:	af 92       	push	r10
   12258:	bf 92       	push	r11
   1225a:	cf 92       	push	r12
   1225c:	df 92       	push	r13
   1225e:	ef 92       	push	r14
   12260:	ff 92       	push	r15
   12262:	0f 93       	push	r16
   12264:	1f 93       	push	r17
   12266:	cf 93       	push	r28
   12268:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   1226a:	c8 2f       	mov	r28, r24
   1226c:	d0 e0       	ldi	r29, 0x00	; 0
   1226e:	5e 01       	movw	r10, r28
   12270:	aa 0c       	add	r10, r10
   12272:	bb 1c       	adc	r11, r11
   12274:	ce 01       	movw	r24, r28
   12276:	88 0f       	add	r24, r24
   12278:	99 1f       	adc	r25, r25
   1227a:	88 0f       	add	r24, r24
   1227c:	99 1f       	adc	r25, r25
   1227e:	fc 01       	movw	r30, r24
   12280:	e5 58       	subi	r30, 0x85	; 133
   12282:	fd 4e       	sbci	r31, 0xED	; 237
   12284:	c0 80       	ld	r12, Z
   12286:	d1 80       	ldd	r13, Z+1	; 0x01
   12288:	e2 80       	ldd	r14, Z+2	; 0x02
   1228a:	f3 80       	ldd	r15, Z+3	; 0x03
   1228c:	fc 01       	movw	r30, r24
   1228e:	e1 57       	subi	r30, 0x71	; 113
   12290:	fd 4e       	sbci	r31, 0xED	; 237
   12292:	00 81       	ld	r16, Z
   12294:	11 81       	ldd	r17, Z+1	; 0x01
   12296:	22 81       	ldd	r18, Z+2	; 0x02
   12298:	33 81       	ldd	r19, Z+3	; 0x03
   1229a:	8d 55       	subi	r24, 0x5D	; 93
   1229c:	9d 4e       	sbci	r25, 0xED	; 237
   1229e:	fc 01       	movw	r30, r24
   122a0:	40 81       	ld	r20, Z
   122a2:	51 81       	ldd	r21, Z+1	; 0x01
   122a4:	62 81       	ldd	r22, Z+2	; 0x02
   122a6:	73 81       	ldd	r23, Z+3	; 0x03
   122a8:	e0 91 6a 12 	lds	r30, 0x126A	; 0x80126a <array_pids>
   122ac:	f0 91 6b 12 	lds	r31, 0x126B	; 0x80126b <array_pids+0x1>
   122b0:	ea 0d       	add	r30, r10
   122b2:	fb 1d       	adc	r31, r11
   122b4:	80 81       	ld	r24, Z
   122b6:	91 81       	ldd	r25, Z+1	; 0x01
   122b8:	0e 94 25 be 	call	0x17c4a	; 0x17c4a <PID::SetTunings(double, double, double)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   122bc:	ca 58       	subi	r28, 0x8A	; 138
   122be:	dd 4e       	sbci	r29, 0xED	; 237
   122c0:	68 81       	ld	r22, Y
   122c2:	70 e0       	ldi	r23, 0x00	; 0
   122c4:	80 91 6a 12 	lds	r24, 0x126A	; 0x80126a <array_pids>
   122c8:	90 91 6b 12 	lds	r25, 0x126B	; 0x80126b <array_pids+0x1>
   122cc:	a8 0e       	add	r10, r24
   122ce:	b9 1e       	adc	r11, r25
   122d0:	f5 01       	movw	r30, r10
   122d2:	80 81       	ld	r24, Z
   122d4:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
   122d6:	df 91       	pop	r29
   122d8:	cf 91       	pop	r28
   122da:	1f 91       	pop	r17
   122dc:	0f 91       	pop	r16
   122de:	ff 90       	pop	r15
   122e0:	ef 90       	pop	r14
   122e2:	df 90       	pop	r13
   122e4:	cf 90       	pop	r12
   122e6:	bf 90       	pop	r11
   122e8:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   122ea:	0c 94 3b be 	jmp	0x17c76	; 0x17c76 <PID::SetSampleTime(int)>

000122ee <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   122ee:	ef 92       	push	r14
   122f0:	ff 92       	push	r15
   122f2:	0f 93       	push	r16
   122f4:	1f 93       	push	r17
   122f6:	cf 93       	push	r28
   122f8:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   122fa:	e8 2e       	mov	r14, r24
   122fc:	f1 2c       	mov	r15, r1
   122fe:	91 e2       	ldi	r25, 0x21	; 33
   12300:	89 9f       	mul	r24, r25
   12302:	e0 01       	movw	r28, r0
   12304:	11 24       	eor	r1, r1
   12306:	ce 01       	movw	r24, r28
   12308:	80 5a       	subi	r24, 0xA0	; 160
   1230a:	9e 4f       	sbci	r25, 0xFE	; 254
   1230c:	0e 94 43 bc 	call	0x17886	; 0x17886 <EEPROMreadFloat(unsigned int)>
   12310:	87 01       	movw	r16, r14
   12312:	00 0f       	add	r16, r16
   12314:	11 1f       	adc	r17, r17
   12316:	00 0f       	add	r16, r16
   12318:	11 1f       	adc	r17, r17
   1231a:	f8 01       	movw	r30, r16
   1231c:	ed 55       	subi	r30, 0x5D	; 93
   1231e:	fd 4e       	sbci	r31, 0xED	; 237
   12320:	60 83       	st	Z, r22
   12322:	71 83       	std	Z+1, r23	; 0x01
   12324:	82 83       	std	Z+2, r24	; 0x02
   12326:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   12328:	ce 01       	movw	r24, r28
   1232a:	8c 59       	subi	r24, 0x9C	; 156
   1232c:	9e 4f       	sbci	r25, 0xFE	; 254
   1232e:	0e 94 43 bc 	call	0x17886	; 0x17886 <EEPROMreadFloat(unsigned int)>
   12332:	f8 01       	movw	r30, r16
   12334:	e1 57       	subi	r30, 0x71	; 113
   12336:	fd 4e       	sbci	r31, 0xED	; 237
   12338:	60 83       	st	Z, r22
   1233a:	71 83       	std	Z+1, r23	; 0x01
   1233c:	82 83       	std	Z+2, r24	; 0x02
   1233e:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   12340:	ce 01       	movw	r24, r28
   12342:	88 59       	subi	r24, 0x98	; 152
   12344:	9e 4f       	sbci	r25, 0xFE	; 254
   12346:	0e 94 43 bc 	call	0x17886	; 0x17886 <EEPROMreadFloat(unsigned int)>
   1234a:	f8 01       	movw	r30, r16
   1234c:	e5 58       	subi	r30, 0x85	; 133
   1234e:	fd 4e       	sbci	r31, 0xED	; 237
   12350:	60 83       	st	Z, r22
   12352:	71 83       	std	Z+1, r23	; 0x01
   12354:	82 83       	std	Z+2, r24	; 0x02
   12356:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   12358:	ce 01       	movw	r24, r28
   1235a:	84 59       	subi	r24, 0x94	; 148
   1235c:	9e 4f       	sbci	r25, 0xFE	; 254
   1235e:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   12362:	f7 01       	movw	r30, r14
   12364:	ea 58       	subi	r30, 0x8A	; 138
   12366:	fd 4e       	sbci	r31, 0xED	; 237
   12368:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:229
}
   1236a:	df 91       	pop	r29
   1236c:	cf 91       	pop	r28
   1236e:	1f 91       	pop	r17
   12370:	0f 91       	pop	r16
   12372:	ff 90       	pop	r15
   12374:	ef 90       	pop	r14
   12376:	08 95       	ret

00012378 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   12378:	ef 92       	push	r14
   1237a:	ff 92       	push	r15
   1237c:	0f 93       	push	r16
   1237e:	1f 93       	push	r17
   12380:	cf 93       	push	r28
   12382:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   12384:	e8 2e       	mov	r14, r24
   12386:	f1 2c       	mov	r15, r1
   12388:	91 e2       	ldi	r25, 0x21	; 33
   1238a:	89 9f       	mul	r24, r25
   1238c:	e0 01       	movw	r28, r0
   1238e:	11 24       	eor	r1, r1
   12390:	87 01       	movw	r16, r14
   12392:	00 0f       	add	r16, r16
   12394:	11 1f       	adc	r17, r17
   12396:	00 0f       	add	r16, r16
   12398:	11 1f       	adc	r17, r17
   1239a:	f8 01       	movw	r30, r16
   1239c:	ed 55       	subi	r30, 0x5D	; 93
   1239e:	fd 4e       	sbci	r31, 0xED	; 237
   123a0:	40 81       	ld	r20, Z
   123a2:	51 81       	ldd	r21, Z+1	; 0x01
   123a4:	62 81       	ldd	r22, Z+2	; 0x02
   123a6:	73 81       	ldd	r23, Z+3	; 0x03
   123a8:	ce 01       	movw	r24, r28
   123aa:	80 5a       	subi	r24, 0xA0	; 160
   123ac:	9e 4f       	sbci	r25, 0xFE	; 254
   123ae:	0e 94 75 bc 	call	0x178ea	; 0x178ea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   123b2:	f8 01       	movw	r30, r16
   123b4:	e1 57       	subi	r30, 0x71	; 113
   123b6:	fd 4e       	sbci	r31, 0xED	; 237
   123b8:	40 81       	ld	r20, Z
   123ba:	51 81       	ldd	r21, Z+1	; 0x01
   123bc:	62 81       	ldd	r22, Z+2	; 0x02
   123be:	73 81       	ldd	r23, Z+3	; 0x03
   123c0:	ce 01       	movw	r24, r28
   123c2:	8c 59       	subi	r24, 0x9C	; 156
   123c4:	9e 4f       	sbci	r25, 0xFE	; 254
   123c6:	0e 94 75 bc 	call	0x178ea	; 0x178ea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   123ca:	f8 01       	movw	r30, r16
   123cc:	e5 58       	subi	r30, 0x85	; 133
   123ce:	fd 4e       	sbci	r31, 0xED	; 237
   123d0:	40 81       	ld	r20, Z
   123d2:	51 81       	ldd	r21, Z+1	; 0x01
   123d4:	62 81       	ldd	r22, Z+2	; 0x02
   123d6:	73 81       	ldd	r23, Z+3	; 0x03
   123d8:	ce 01       	movw	r24, r28
   123da:	88 59       	subi	r24, 0x98	; 152
   123dc:	9e 4f       	sbci	r25, 0xFE	; 254
   123de:	0e 94 75 bc 	call	0x178ea	; 0x178ea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   123e2:	f7 01       	movw	r30, r14
   123e4:	ea 58       	subi	r30, 0x8A	; 138
   123e6:	fd 4e       	sbci	r31, 0xED	; 237
   123e8:	60 81       	ld	r22, Z
   123ea:	ce 01       	movw	r24, r28
   123ec:	84 59       	subi	r24, 0x94	; 148
   123ee:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
   123f0:	df 91       	pop	r29
   123f2:	cf 91       	pop	r28
   123f4:	1f 91       	pop	r17
   123f6:	0f 91       	pop	r16
   123f8:	ff 90       	pop	r15
   123fa:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   123fc:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012400 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   12400:	cf 93       	push	r28
   12402:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   12404:	84 e0       	ldi	r24, 0x04	; 4
   12406:	c8 9f       	mul	r28, r24
   12408:	f0 01       	movw	r30, r0
   1240a:	11 24       	eor	r1, r1
   1240c:	ed 55       	subi	r30, 0x5D	; 93
   1240e:	fd 4e       	sbci	r31, 0xED	; 237
   12410:	40 83       	st	Z, r20
   12412:	51 83       	std	Z+1, r21	; 0x01
   12414:	62 83       	std	Z+2, r22	; 0x02
   12416:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   12418:	8c 2f       	mov	r24, r28
   1241a:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   1241e:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:244
}
   12420:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   12422:	0c 94 bc 91 	jmp	0x12378	; 0x12378 <thermostat_ring_set_pid_eeprom(unsigned char)>

00012426 <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   12426:	cf 93       	push	r28
   12428:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   1242a:	84 e0       	ldi	r24, 0x04	; 4
   1242c:	c8 9f       	mul	r28, r24
   1242e:	f0 01       	movw	r30, r0
   12430:	11 24       	eor	r1, r1
   12432:	e1 57       	subi	r30, 0x71	; 113
   12434:	fd 4e       	sbci	r31, 0xED	; 237
   12436:	40 83       	st	Z, r20
   12438:	51 83       	std	Z+1, r21	; 0x01
   1243a:	62 83       	std	Z+2, r22	; 0x02
   1243c:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   1243e:	8c 2f       	mov	r24, r28
   12440:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   12444:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:250
}
   12446:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   12448:	0c 94 bc 91 	jmp	0x12378	; 0x12378 <thermostat_ring_set_pid_eeprom(unsigned char)>

0001244c <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   1244c:	cf 93       	push	r28
   1244e:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   12450:	84 e0       	ldi	r24, 0x04	; 4
   12452:	c8 9f       	mul	r28, r24
   12454:	f0 01       	movw	r30, r0
   12456:	11 24       	eor	r1, r1
   12458:	e5 58       	subi	r30, 0x85	; 133
   1245a:	fd 4e       	sbci	r31, 0xED	; 237
   1245c:	40 83       	st	Z, r20
   1245e:	51 83       	std	Z+1, r21	; 0x01
   12460:	62 83       	std	Z+2, r22	; 0x02
   12462:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   12464:	8c 2f       	mov	r24, r28
   12466:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   1246a:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:256
}
   1246c:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   1246e:	0c 94 bc 91 	jmp	0x12378	; 0x12378 <thermostat_ring_set_pid_eeprom(unsigned char)>

00012472 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   12472:	cf 93       	push	r28
   12474:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   12476:	e8 2f       	mov	r30, r24
   12478:	f0 e0       	ldi	r31, 0x00	; 0
   1247a:	ea 58       	subi	r30, 0x8A	; 138
   1247c:	fd 4e       	sbci	r31, 0xED	; 237
   1247e:	60 83       	st	Z, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   12480:	0e 94 2b 91 	call	0x12256	; 0x12256 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   12484:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:263
}
   12486:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   12488:	0c 94 bc 91 	jmp	0x12378	; 0x12378 <thermostat_ring_set_pid_eeprom(unsigned char)>

0001248c <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   1248c:	ef 92       	push	r14
   1248e:	ff 92       	push	r15
   12490:	0f 93       	push	r16
   12492:	1f 93       	push	r17
   12494:	cf 93       	push	r28
   12496:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   12498:	9d e4       	ldi	r25, 0x4D	; 77
   1249a:	89 9f       	mul	r24, r25
   1249c:	e0 01       	movw	r28, r0
   1249e:	11 24       	eor	r1, r1
   124a0:	8e 01       	movw	r16, r28
   124a2:	0c 5c       	subi	r16, 0xCC	; 204
   124a4:	1d 4f       	sbci	r17, 0xFD	; 253
   124a6:	7b 01       	movw	r14, r22
   124a8:	c2 5c       	subi	r28, 0xC2	; 194
   124aa:	dd 4f       	sbci	r29, 0xFD	; 253
   124ac:	c8 01       	movw	r24, r16
   124ae:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   124b2:	f7 01       	movw	r30, r14
   124b4:	81 93       	st	Z+, r24
   124b6:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   124b8:	88 23       	and	r24, r24
   124ba:	29 f0       	breq	.+10     	; 0x124c6 <thermostat_program_get_name(unsigned char, char*)+0x3a>
   124bc:	0f 5f       	subi	r16, 0xFF	; 255
   124be:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   124c0:	0c 17       	cp	r16, r28
   124c2:	1d 07       	cpc	r17, r29
   124c4:	99 f7       	brne	.-26     	; 0x124ac <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   124c6:	df 91       	pop	r29
   124c8:	cf 91       	pop	r28
   124ca:	1f 91       	pop	r17
   124cc:	0f 91       	pop	r16
   124ce:	ff 90       	pop	r15
   124d0:	ef 90       	pop	r14
   124d2:	08 95       	ret

000124d4 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   124d4:	ef 92       	push	r14
   124d6:	ff 92       	push	r15
   124d8:	0f 93       	push	r16
   124da:	1f 93       	push	r17
   124dc:	cf 93       	push	r28
   124de:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   124e0:	9d e4       	ldi	r25, 0x4D	; 77
   124e2:	89 9f       	mul	r24, r25
   124e4:	80 01       	movw	r16, r0
   124e6:	11 24       	eor	r1, r1
   124e8:	eb 01       	movw	r28, r22
   124ea:	78 01       	movw	r14, r16
   124ec:	8c ec       	ldi	r24, 0xCC	; 204
   124ee:	e8 1a       	sub	r14, r24
   124f0:	8d ef       	ldi	r24, 0xFD	; 253
   124f2:	f8 0a       	sbc	r15, r24
   124f4:	02 5c       	subi	r16, 0xC2	; 194
   124f6:	1d 4f       	sbci	r17, 0xFD	; 253
   124f8:	69 91       	ld	r22, Y+
   124fa:	c7 01       	movw	r24, r14
   124fc:	0e 94 27 8f 	call	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   12500:	fe 01       	movw	r30, r28
   12502:	31 97       	sbiw	r30, 0x01	; 1
   12504:	80 81       	ld	r24, Z
   12506:	88 23       	and	r24, r24
   12508:	31 f0       	breq	.+12     	; 0x12516 <thermostat_program_set_name(unsigned char, char*)+0x42>
   1250a:	9f ef       	ldi	r25, 0xFF	; 255
   1250c:	e9 1a       	sub	r14, r25
   1250e:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   12510:	e0 16       	cp	r14, r16
   12512:	f1 06       	cpc	r15, r17
   12514:	89 f7       	brne	.-30     	; 0x124f8 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   12516:	df 91       	pop	r29
   12518:	cf 91       	pop	r28
   1251a:	1f 91       	pop	r17
   1251c:	0f 91       	pop	r16
   1251e:	ff 90       	pop	r15
   12520:	ef 90       	pop	r14
   12522:	08 95       	ret

00012524 <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   12524:	2d e4       	ldi	r18, 0x4D	; 77
   12526:	82 9f       	mul	r24, r18
   12528:	c0 01       	movw	r24, r0
   1252a:	11 24       	eor	r1, r1
   1252c:	8f 50       	subi	r24, 0x0F	; 15
   1252e:	9e 4f       	sbci	r25, 0xFE	; 254
   12530:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

00012534 <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   12534:	2d e4       	ldi	r18, 0x4D	; 77
   12536:	82 9f       	mul	r24, r18
   12538:	c0 01       	movw	r24, r0
   1253a:	11 24       	eor	r1, r1
   1253c:	8f 50       	subi	r24, 0x0F	; 15
   1253e:	9e 4f       	sbci	r25, 0xFE	; 254
   12540:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012544 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   12544:	7f 92       	push	r7
   12546:	8f 92       	push	r8
   12548:	9f 92       	push	r9
   1254a:	af 92       	push	r10
   1254c:	bf 92       	push	r11
   1254e:	cf 92       	push	r12
   12550:	df 92       	push	r13
   12552:	ef 92       	push	r14
   12554:	ff 92       	push	r15
   12556:	0f 93       	push	r16
   12558:	1f 93       	push	r17
   1255a:	cf 93       	push	r28
   1255c:	df 93       	push	r29
   1255e:	5a 01       	movw	r10, r20
   12560:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   12562:	9d e4       	ldi	r25, 0x4D	; 77
   12564:	89 9f       	mul	r24, r25
   12566:	40 01       	movw	r8, r0
   12568:	11 24       	eor	r1, r1
   1256a:	ef e0       	ldi	r30, 0x0F	; 15
   1256c:	8e 1a       	sub	r8, r30
   1256e:	ee ef       	ldi	r30, 0xFE	; 254
   12570:	9e 0a       	sbc	r9, r30
   12572:	f6 e0       	ldi	r31, 0x06	; 6
   12574:	6f 9f       	mul	r22, r31
   12576:	80 0c       	add	r8, r0
   12578:	91 1c       	adc	r9, r1
   1257a:	11 24       	eor	r1, r1
   1257c:	c4 01       	movw	r24, r8
   1257e:	02 96       	adiw	r24, 0x02	; 2
   12580:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   12584:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   12586:	c4 01       	movw	r24, r8
   12588:	03 96       	adiw	r24, 0x03	; 3
   1258a:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   1258e:	97 2d       	mov	r25, r7
   12590:	96 95       	lsr	r25
   12592:	96 95       	lsr	r25
   12594:	96 95       	lsr	r25
   12596:	f5 01       	movw	r30, r10
   12598:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   1259a:	27 2d       	mov	r18, r7
   1259c:	30 e0       	ldi	r19, 0x00	; 0
   1259e:	35 95       	asr	r19
   125a0:	27 95       	ror	r18
   125a2:	23 70       	andi	r18, 0x03	; 3
   125a4:	9f e0       	ldi	r25, 0x0F	; 15
   125a6:	29 9f       	mul	r18, r25
   125a8:	20 2d       	mov	r18, r0
   125aa:	11 24       	eor	r1, r1
   125ac:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   125ae:	28 2f       	mov	r18, r24
   125b0:	26 95       	lsr	r18
   125b2:	26 95       	lsr	r18
   125b4:	26 95       	lsr	r18
   125b6:	f8 01       	movw	r30, r16
   125b8:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   125ba:	83 70       	andi	r24, 0x03	; 3
   125bc:	89 9f       	mul	r24, r25
   125be:	80 2d       	mov	r24, r0
   125c0:	11 24       	eor	r1, r1
   125c2:	f7 01       	movw	r30, r14
   125c4:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   125c6:	87 2d       	mov	r24, r7
   125c8:	81 70       	andi	r24, 0x01	; 1
   125ca:	f6 01       	movw	r30, r12
   125cc:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
   125ce:	df 91       	pop	r29
   125d0:	cf 91       	pop	r28
   125d2:	1f 91       	pop	r17
   125d4:	0f 91       	pop	r16
   125d6:	ff 90       	pop	r15
   125d8:	ef 90       	pop	r14
   125da:	df 90       	pop	r13
   125dc:	cf 90       	pop	r12
   125de:	bf 90       	pop	r11
   125e0:	af 90       	pop	r10
   125e2:	9f 90       	pop	r9
   125e4:	8f 90       	pop	r8
   125e6:	7f 90       	pop	r7
   125e8:	08 95       	ret

000125ea <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   125ea:	cf 92       	push	r12
   125ec:	ef 92       	push	r14
   125ee:	0f 93       	push	r16
   125f0:	1f 93       	push	r17
   125f2:	cf 93       	push	r28
   125f4:	df 93       	push	r29
   125f6:	c8 2f       	mov	r28, r24
   125f8:	56 2f       	mov	r21, r22
   125fa:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   125fc:	3f e0       	ldi	r19, 0x0F	; 15
   125fe:	63 2f       	mov	r22, r19
   12600:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   12604:	83 70       	andi	r24, 0x03	; 3
   12606:	98 e0       	ldi	r25, 0x08	; 8
   12608:	09 9f       	mul	r16, r25
   1260a:	80 01       	movw	r16, r0
   1260c:	11 24       	eor	r1, r1
   1260e:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   12610:	8d e4       	ldi	r24, 0x4D	; 77
   12612:	c8 9f       	mul	r28, r24
   12614:	e0 01       	movw	r28, r0
   12616:	11 24       	eor	r1, r1
   12618:	cf 50       	subi	r28, 0x0F	; 15
   1261a:	de 4f       	sbci	r29, 0xFE	; 254
   1261c:	96 e0       	ldi	r25, 0x06	; 6
   1261e:	59 9f       	mul	r21, r25
   12620:	c0 0d       	add	r28, r0
   12622:	d1 1d       	adc	r29, r1
   12624:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   12626:	82 2f       	mov	r24, r18
   12628:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   1262c:	68 2f       	mov	r22, r24
   1262e:	66 0f       	add	r22, r22
   12630:	66 70       	andi	r22, 0x06	; 6
   12632:	88 e0       	ldi	r24, 0x08	; 8
   12634:	48 9f       	mul	r20, r24
   12636:	a0 01       	movw	r20, r0
   12638:	11 24       	eor	r1, r1
   1263a:	9c 2d       	mov	r25, r12
   1263c:	91 70       	andi	r25, 0x01	; 1
   1263e:	c9 2e       	mov	r12, r25
   12640:	c4 0e       	add	r12, r20
   12642:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   12644:	ce 01       	movw	r24, r28
   12646:	02 96       	adiw	r24, 0x02	; 2
   12648:	0e 94 27 8f 	call	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   1264c:	60 2f       	mov	r22, r16
   1264e:	ce 01       	movw	r24, r28
   12650:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
   12652:	df 91       	pop	r29
   12654:	cf 91       	pop	r28
   12656:	1f 91       	pop	r17
   12658:	0f 91       	pop	r16
   1265a:	ef 90       	pop	r14
   1265c:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   1265e:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012662 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   12662:	1f 93       	push	r17
   12664:	cf 93       	push	r28
   12666:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   12668:	9d e4       	ldi	r25, 0x4D	; 77
   1266a:	89 9f       	mul	r24, r25
   1266c:	e0 01       	movw	r28, r0
   1266e:	11 24       	eor	r1, r1
   12670:	cf 50       	subi	r28, 0x0F	; 15
   12672:	de 4f       	sbci	r29, 0xFE	; 254
   12674:	86 e0       	ldi	r24, 0x06	; 6
   12676:	68 9f       	mul	r22, r24
   12678:	c0 0d       	add	r28, r0
   1267a:	d1 1d       	adc	r29, r1
   1267c:	11 24       	eor	r1, r1
   1267e:	ce 01       	movw	r24, r28
   12680:	05 96       	adiw	r24, 0x05	; 5
   12682:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   12686:	18 2f       	mov	r17, r24
   12688:	ce 01       	movw	r24, r28
   1268a:	04 96       	adiw	r24, 0x04	; 4
   1268c:	0e 94 25 8f 	call	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>
   12690:	21 2f       	mov	r18, r17
   12692:	30 e0       	ldi	r19, 0x00	; 0
   12694:	32 2f       	mov	r19, r18
   12696:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
   12698:	82 0f       	add	r24, r18
   1269a:	93 2f       	mov	r25, r19
   1269c:	91 1d       	adc	r25, r1
   1269e:	df 91       	pop	r29
   126a0:	cf 91       	pop	r28
   126a2:	1f 91       	pop	r17
   126a4:	08 95       	ret

000126a6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   126a6:	1f 93       	push	r17
   126a8:	cf 93       	push	r28
   126aa:	df 93       	push	r29
   126ac:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   126ae:	9d e4       	ldi	r25, 0x4D	; 77
   126b0:	89 9f       	mul	r24, r25
   126b2:	e0 01       	movw	r28, r0
   126b4:	11 24       	eor	r1, r1
   126b6:	cf 50       	subi	r28, 0x0F	; 15
   126b8:	de 4f       	sbci	r29, 0xFE	; 254
   126ba:	86 e0       	ldi	r24, 0x06	; 6
   126bc:	68 9f       	mul	r22, r24
   126be:	c0 0d       	add	r28, r0
   126c0:	d1 1d       	adc	r29, r1
   126c2:	11 24       	eor	r1, r1
   126c4:	65 2f       	mov	r22, r21
   126c6:	ce 01       	movw	r24, r28
   126c8:	05 96       	adiw	r24, 0x05	; 5
   126ca:	0e 94 27 8f 	call	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   126ce:	61 2f       	mov	r22, r17
   126d0:	ce 01       	movw	r24, r28
   126d2:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
   126d4:	df 91       	pop	r29
   126d6:	cf 91       	pop	r28
   126d8:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   126da:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000126de <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   126de:	2d e4       	ldi	r18, 0x4D	; 77
   126e0:	82 9f       	mul	r24, r18
   126e2:	c0 01       	movw	r24, r0
   126e4:	11 24       	eor	r1, r1
   126e6:	26 e0       	ldi	r18, 0x06	; 6
   126e8:	62 9f       	mul	r22, r18
   126ea:	80 0d       	add	r24, r0
   126ec:	91 1d       	adc	r25, r1
   126ee:	11 24       	eor	r1, r1
   126f0:	8e 50       	subi	r24, 0x0E	; 14
   126f2:	9e 4f       	sbci	r25, 0xFE	; 254
   126f4:	0c 94 25 8f 	jmp	0x11e4a	; 0x11e4a <EEPROMClass::read(int) [clone .isra.0]>

000126f8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   126f8:	2d e4       	ldi	r18, 0x4D	; 77
   126fa:	82 9f       	mul	r24, r18
   126fc:	c0 01       	movw	r24, r0
   126fe:	11 24       	eor	r1, r1
   12700:	26 e0       	ldi	r18, 0x06	; 6
   12702:	62 9f       	mul	r22, r18
   12704:	80 0d       	add	r24, r0
   12706:	91 1d       	adc	r25, r1
   12708:	11 24       	eor	r1, r1
   1270a:	64 2f       	mov	r22, r20
   1270c:	8e 50       	subi	r24, 0x0E	; 14
   1270e:	9e 4f       	sbci	r25, 0xFE	; 254
   12710:	0c 94 27 8f 	jmp	0x11e4e	; 0x11e4e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012714 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   12714:	bf 92       	push	r11
   12716:	cf 92       	push	r12
   12718:	df 92       	push	r13
   1271a:	ef 92       	push	r14
   1271c:	ff 92       	push	r15
   1271e:	0f 93       	push	r16
   12720:	1f 93       	push	r17
   12722:	cf 93       	push	r28
   12724:	df 93       	push	r29
   12726:	d8 2f       	mov	r29, r24
   12728:	16 2f       	mov	r17, r22
   1272a:	ca 01       	movw	r24, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   1272c:	61 ee       	ldi	r22, 0xE1	; 225
   1272e:	73 e0       	ldi	r23, 0x03	; 3
   12730:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   12734:	f1 2c       	mov	r15, r1
   12736:	c1 2c       	mov	r12, r1
   12738:	e1 2c       	mov	r14, r1
   1273a:	00 e0       	ldi	r16, 0x00	; 0
   1273c:	b1 2c       	mov	r11, r1
   1273e:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   12740:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   12742:	00 97       	sbiw	r24, 0x00	; 0
   12744:	59 f1       	breq	.+86     	; 0x1279c <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   12746:	c1 11       	cpse	r28, r1
   12748:	0b c0       	rjmp	.+22     	; 0x12760 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346 (discriminator 1)
   1274a:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   1274e:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   12750:	61 ee       	ldi	r22, 0xE1	; 225
   12752:	73 e0       	ldi	r23, 0x03	; 3
   12754:	90 e0       	ldi	r25, 0x00	; 0
   12756:	80 e0       	ldi	r24, 0x00	; 0
   12758:	0e 94 91 e0 	call	0x1c122	; 0x1c122 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   1275c:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   1275e:	f1 cf       	rjmp	.-30     	; 0x12742 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   12760:	c1 30       	cpi	r28, 0x01	; 1
   12762:	21 f4       	brne	.+8      	; 0x1276c <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347 (discriminator 1)
   12764:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   12768:	b8 2e       	mov	r11, r24
   1276a:	f2 cf       	rjmp	.-28     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   1276c:	c2 30       	cpi	r28, 0x02	; 2
   1276e:	21 f4       	brne	.+8      	; 0x12778 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348 (discriminator 1)
   12770:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   12774:	08 2f       	mov	r16, r24
   12776:	ec cf       	rjmp	.-40     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   12778:	c3 30       	cpi	r28, 0x03	; 3
   1277a:	21 f4       	brne	.+8      	; 0x12784 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349 (discriminator 1)
   1277c:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   12780:	e8 2e       	mov	r14, r24
   12782:	e6 cf       	rjmp	.-52     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   12784:	c4 30       	cpi	r28, 0x04	; 4
   12786:	21 f4       	brne	.+8      	; 0x12790 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350 (discriminator 1)
   12788:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   1278c:	f8 2e       	mov	r15, r24
   1278e:	e0 cf       	rjmp	.-64     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   12790:	c5 30       	cpi	r28, 0x05	; 5
   12792:	f1 f6       	brne	.-68     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351 (discriminator 1)
   12794:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <atoi>
   12798:	c8 2e       	mov	r12, r24
   1279a:	da cf       	rjmp	.-76     	; 0x12750 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   1279c:	c6 30       	cpi	r28, 0x06	; 6
   1279e:	a1 f4       	brne	.+40     	; 0x127c8 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   127a0:	2b 2d       	mov	r18, r11
   127a2:	4d 2d       	mov	r20, r13
   127a4:	61 2f       	mov	r22, r17
   127a6:	8d 2f       	mov	r24, r29
   127a8:	0e 94 f5 92 	call	0x125ea	; 0x125ea <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   127ac:	4f 2d       	mov	r20, r15
   127ae:	61 2f       	mov	r22, r17
   127b0:	8d 2f       	mov	r24, r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   127b2:	df 91       	pop	r29
   127b4:	cf 91       	pop	r28
   127b6:	1f 91       	pop	r17
   127b8:	0f 91       	pop	r16
   127ba:	ff 90       	pop	r15
   127bc:	ef 90       	pop	r14
   127be:	df 90       	pop	r13
   127c0:	cf 90       	pop	r12
   127c2:	bf 90       	pop	r11
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   127c4:	0c 94 7c 93 	jmp	0x126f8	; 0x126f8 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   127c8:	df 91       	pop	r29
   127ca:	cf 91       	pop	r28
   127cc:	1f 91       	pop	r17
   127ce:	0f 91       	pop	r16
   127d0:	ff 90       	pop	r15
   127d2:	ef 90       	pop	r14
   127d4:	df 90       	pop	r13
   127d6:	cf 90       	pop	r12
   127d8:	bf 90       	pop	r11
   127da:	08 95       	ret

000127dc <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   127dc:	9f 92       	push	r9
   127de:	af 92       	push	r10
   127e0:	bf 92       	push	r11
   127e2:	cf 92       	push	r12
   127e4:	df 92       	push	r13
   127e6:	ef 92       	push	r14
   127e8:	ff 92       	push	r15
   127ea:	0f 93       	push	r16
   127ec:	1f 93       	push	r17
   127ee:	cf 93       	push	r28
   127f0:	df 93       	push	r29
   127f2:	00 d0       	rcall	.+0      	; 0x127f4 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   127f4:	1f 92       	push	r1
   127f6:	1f 92       	push	r1
   127f8:	cd b7       	in	r28, 0x3d	; 61
   127fa:	de b7       	in	r29, 0x3e	; 62
   127fc:	b8 2e       	mov	r11, r24
   127fe:	a6 2e       	mov	r10, r22
   12800:	94 2e       	mov	r9, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12802:	ce 01       	movw	r24, r28
   12804:	01 96       	adiw	r24, 0x01	; 1
   12806:	6c 01       	movw	r12, r24
   12808:	01 96       	adiw	r24, 0x01	; 1
   1280a:	7c 01       	movw	r14, r24
   1280c:	8e 01       	movw	r16, r28
   1280e:	0d 5f       	subi	r16, 0xFD	; 253
   12810:	1f 4f       	sbci	r17, 0xFF	; 255
   12812:	9e 01       	movw	r18, r28
   12814:	2c 5f       	subi	r18, 0xFC	; 252
   12816:	3f 4f       	sbci	r19, 0xFF	; 255
   12818:	ae 01       	movw	r20, r28
   1281a:	4b 5f       	subi	r20, 0xFB	; 251
   1281c:	5f 4f       	sbci	r21, 0xFF	; 255
   1281e:	8b 2d       	mov	r24, r11
   12820:	0e 94 a2 92 	call	0x12544	; 0x12544 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   12824:	89 81       	ldd	r24, Y+1	; 0x01
   12826:	89 15       	cp	r24, r9
   12828:	49 f0       	breq	.+18     	; 0x1283c <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1282a:	c9 2c       	mov	r12, r9
   1282c:	ea 80       	ldd	r14, Y+2	; 0x02
   1282e:	0b 81       	ldd	r16, Y+3	; 0x03
   12830:	2c 81       	ldd	r18, Y+4	; 0x04
   12832:	4d 81       	ldd	r20, Y+5	; 0x05
   12834:	6a 2d       	mov	r22, r10
   12836:	8b 2d       	mov	r24, r11
   12838:	0e 94 f5 92 	call	0x125ea	; 0x125ea <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:382
}
   1283c:	0f 90       	pop	r0
   1283e:	0f 90       	pop	r0
   12840:	0f 90       	pop	r0
   12842:	0f 90       	pop	r0
   12844:	0f 90       	pop	r0
   12846:	df 91       	pop	r29
   12848:	cf 91       	pop	r28
   1284a:	1f 91       	pop	r17
   1284c:	0f 91       	pop	r16
   1284e:	ff 90       	pop	r15
   12850:	ef 90       	pop	r14
   12852:	df 90       	pop	r13
   12854:	cf 90       	pop	r12
   12856:	bf 90       	pop	r11
   12858:	af 90       	pop	r10
   1285a:	9f 90       	pop	r9
   1285c:	08 95       	ret

0001285e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   1285e:	3f 92       	push	r3
   12860:	4f 92       	push	r4
   12862:	5f 92       	push	r5
   12864:	6f 92       	push	r6
   12866:	7f 92       	push	r7
   12868:	8f 92       	push	r8
   1286a:	9f 92       	push	r9
   1286c:	af 92       	push	r10
   1286e:	bf 92       	push	r11
   12870:	cf 92       	push	r12
   12872:	df 92       	push	r13
   12874:	ef 92       	push	r14
   12876:	ff 92       	push	r15
   12878:	0f 93       	push	r16
   1287a:	1f 93       	push	r17
   1287c:	cf 93       	push	r28
   1287e:	df 93       	push	r29
   12880:	00 d0       	rcall	.+0      	; 0x12882 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   12882:	1f 92       	push	r1
   12884:	1f 92       	push	r1
   12886:	cd b7       	in	r28, 0x3d	; 61
   12888:	de b7       	in	r29, 0x3e	; 62
   1288a:	b8 2e       	mov	r11, r24
   1288c:	2b 01       	movw	r4, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   1288e:	8f ef       	ldi	r24, 0xFF	; 255
   12890:	b8 16       	cp	r11, r24
   12892:	09 f4       	brne	.+2      	; 0x12896 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   12894:	54 c0       	rjmp	.+168    	; 0x1293e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   12896:	82 2e       	mov	r8, r18
   12898:	91 2c       	mov	r9, r1
   1289a:	9c e3       	ldi	r25, 0x3C	; 60
   1289c:	49 9f       	mul	r20, r25
   1289e:	80 0c       	add	r8, r0
   128a0:	91 1c       	adc	r9, r1
   128a2:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   128a4:	81 e0       	ldi	r24, 0x01	; 1
   128a6:	90 e0       	ldi	r25, 0x00	; 0
   128a8:	02 c0       	rjmp	.+4      	; 0x128ae <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   128aa:	88 0f       	add	r24, r24
   128ac:	99 1f       	adc	r25, r25
   128ae:	0a 95       	dec	r16
   128b0:	e2 f7       	brpl	.-8      	; 0x128aa <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   128b2:	66 24       	eor	r6, r6
   128b4:	63 94       	inc	r6
   128b6:	71 2c       	mov	r7, r1
   128b8:	89 2b       	or	r24, r25
   128ba:	11 f4       	brne	.+4      	; 0x128c0 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   128bc:	71 2c       	mov	r7, r1
   128be:	61 2c       	mov	r6, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   128c0:	a1 2c       	mov	r10, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   128c2:	9c e3       	ldi	r25, 0x3C	; 60
   128c4:	39 2e       	mov	r3, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   128c6:	fe 01       	movw	r30, r28
   128c8:	31 96       	adiw	r30, 0x01	; 1
   128ca:	6f 01       	movw	r12, r30
   128cc:	ce 01       	movw	r24, r28
   128ce:	02 96       	adiw	r24, 0x02	; 2
   128d0:	7c 01       	movw	r14, r24
   128d2:	8e 01       	movw	r16, r28
   128d4:	0d 5f       	subi	r16, 0xFD	; 253
   128d6:	1f 4f       	sbci	r17, 0xFF	; 255
   128d8:	9e 01       	movw	r18, r28
   128da:	2c 5f       	subi	r18, 0xFC	; 252
   128dc:	3f 4f       	sbci	r19, 0xFF	; 255
   128de:	ae 01       	movw	r20, r28
   128e0:	4b 5f       	subi	r20, 0xFB	; 251
   128e2:	5f 4f       	sbci	r21, 0xFF	; 255
   128e4:	6a 2d       	mov	r22, r10
   128e6:	8b 2d       	mov	r24, r11
   128e8:	0e 94 a2 92 	call	0x12544	; 0x12544 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   128ec:	89 81       	ldd	r24, Y+1	; 0x01
   128ee:	81 30       	cpi	r24, 0x01	; 1
   128f0:	f1 f5       	brne	.+124    	; 0x1296e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   128f2:	6a 2d       	mov	r22, r10
   128f4:	8b 2d       	mov	r24, r11
   128f6:	0e 94 6f 93 	call	0x126de	; 0x126de <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   128fa:	9d 81       	ldd	r25, Y+5	; 0x05
   128fc:	2c 81       	ldd	r18, Y+4	; 0x04
   128fe:	30 e0       	ldi	r19, 0x00	; 0
   12900:	93 9d       	mul	r25, r3
   12902:	20 0d       	add	r18, r0
   12904:	31 1d       	adc	r19, r1
   12906:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12908:	82 16       	cp	r8, r18
   1290a:	93 06       	cpc	r9, r19
   1290c:	84 f1       	brlt	.+96     	; 0x1296e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   1290e:	9b 81       	ldd	r25, Y+3	; 0x03
   12910:	2a 81       	ldd	r18, Y+2	; 0x02
   12912:	30 e0       	ldi	r19, 0x00	; 0
   12914:	93 9d       	mul	r25, r3
   12916:	20 0d       	add	r18, r0
   12918:	31 1d       	adc	r19, r1
   1291a:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1291c:	82 16       	cp	r8, r18
   1291e:	93 06       	cpc	r9, r19
   12920:	34 f5       	brge	.+76     	; 0x1296e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 2)
   12922:	90 e0       	ldi	r25, 0x00	; 0
   12924:	86 21       	and	r24, r6
   12926:	97 21       	and	r25, r7
   12928:	89 2b       	or	r24, r25
   1292a:	09 f1       	breq	.+66     	; 0x1296e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1292c:	6a 2d       	mov	r22, r10
   1292e:	8b 2d       	mov	r24, r11
   12930:	0e 94 31 93 	call	0x12662	; 0x12662 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   12934:	f2 01       	movw	r30, r4
   12936:	91 83       	std	Z+1, r25	; 0x01
   12938:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   1293a:	8e ef       	ldi	r24, 0xFE	; 254
   1293c:	b8 2e       	mov	r11, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   1293e:	8b 2d       	mov	r24, r11
   12940:	0f 90       	pop	r0
   12942:	0f 90       	pop	r0
   12944:	0f 90       	pop	r0
   12946:	0f 90       	pop	r0
   12948:	0f 90       	pop	r0
   1294a:	df 91       	pop	r29
   1294c:	cf 91       	pop	r28
   1294e:	1f 91       	pop	r17
   12950:	0f 91       	pop	r16
   12952:	ff 90       	pop	r15
   12954:	ef 90       	pop	r14
   12956:	df 90       	pop	r13
   12958:	cf 90       	pop	r12
   1295a:	bf 90       	pop	r11
   1295c:	af 90       	pop	r10
   1295e:	9f 90       	pop	r9
   12960:	8f 90       	pop	r8
   12962:	7f 90       	pop	r7
   12964:	6f 90       	pop	r6
   12966:	5f 90       	pop	r5
   12968:	4f 90       	pop	r4
   1296a:	3f 90       	pop	r3
   1296c:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1296e:	a3 94       	inc	r10
   12970:	fb e0       	ldi	r31, 0x0B	; 11
   12972:	af 12       	cpse	r10, r31
   12974:	a8 cf       	rjmp	.-176    	; 0x128c6 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   12976:	e1 cf       	rjmp	.-62     	; 0x1293a <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

00012978 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   12978:	cf 93       	push	r28
   1297a:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   1297c:	40 e0       	ldi	r20, 0x00	; 0
   1297e:	50 e0       	ldi	r21, 0x00	; 0
   12980:	60 e8       	ldi	r22, 0x80	; 128
   12982:	7f e3       	ldi	r23, 0x3F	; 63
   12984:	0e 94 00 92 	call	0x12400	; 0x12400 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   12988:	40 e0       	ldi	r20, 0x00	; 0
   1298a:	50 e0       	ldi	r21, 0x00	; 0
   1298c:	60 e0       	ldi	r22, 0x00	; 0
   1298e:	7f e3       	ldi	r23, 0x3F	; 63
   12990:	8c 2f       	mov	r24, r28
   12992:	0e 94 13 92 	call	0x12426	; 0x12426 <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   12996:	40 e0       	ldi	r20, 0x00	; 0
   12998:	50 e0       	ldi	r21, 0x00	; 0
   1299a:	60 e8       	ldi	r22, 0x80	; 128
   1299c:	7f e3       	ldi	r23, 0x3F	; 63
   1299e:	8c 2f       	mov	r24, r28
   129a0:	0e 94 26 92 	call	0x1244c	; 0x1244c <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   129a4:	6c e3       	ldi	r22, 0x3C	; 60
   129a6:	8c 2f       	mov	r24, r28
   129a8:	0e 94 39 92 	call	0x12472	; 0x12472 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   129ac:	6f ef       	ldi	r22, 0xFF	; 255
   129ae:	8c 2f       	mov	r24, r28
   129b0:	0e 94 df 90 	call	0x121be	; 0x121be <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   129b4:	6c ed       	ldi	r22, 0xDC	; 220
   129b6:	70 e0       	ldi	r23, 0x00	; 0
   129b8:	8c 2f       	mov	r24, r28
   129ba:	0e 94 c0 90 	call	0x12180	; 0x12180 <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   129be:	6f ef       	ldi	r22, 0xFF	; 255
   129c0:	8c 2f       	mov	r24, r28
   129c2:	0e 94 9b 90 	call	0x12136	; 0x12136 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   129c6:	8c 2f       	mov	r24, r28
   129c8:	90 e0       	ldi	r25, 0x00	; 0
   129ca:	fc 01       	movw	r30, r24
   129cc:	ef 58       	subi	r30, 0x8F	; 143
   129ce:	fd 4e       	sbci	r31, 0xED	; 237
   129d0:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   129d2:	84 59       	subi	r24, 0x94	; 148
   129d4:	9d 4e       	sbci	r25, 0xED	; 237
   129d6:	fc 01       	movw	r30, r24
   129d8:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   129da:	6f ef       	ldi	r22, 0xFF	; 255
   129dc:	8c 2f       	mov	r24, r28
   129de:	0e 94 8b 90 	call	0x12116	; 0x12116 <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   129e2:	6f ef       	ldi	r22, 0xFF	; 255
   129e4:	8c 2f       	mov	r24, r28
   129e6:	0e 94 7b 90 	call	0x120f6	; 0x120f6 <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   129ea:	60 e0       	ldi	r22, 0x00	; 0
   129ec:	8c 2f       	mov	r24, r28
   129ee:	0e 94 ef 90 	call	0x121de	; 0x121de <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   129f2:	6b e0       	ldi	r22, 0x0B	; 11
   129f4:	78 e0       	ldi	r23, 0x08	; 8
   129f6:	8c 2f       	mov	r24, r28
   129f8:	0e 94 4c 90 	call	0x12098	; 0x12098 <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   129fc:	60 e0       	ldi	r22, 0x00	; 0
   129fe:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
}
   12a00:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   12a02:	0c 94 09 91 	jmp	0x12212	; 0x12212 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

00012a06 <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   12a06:	8a e0       	ldi	r24, 0x0A	; 10
   12a08:	90 e0       	ldi	r25, 0x00	; 0
   12a0a:	0e 94 41 da 	call	0x1b482	; 0x1b482 <operator new[](unsigned int)>
   12a0e:	90 93 6b 12 	sts	0x126B, r25	; 0x80126b <array_pids+0x1>
   12a12:	80 93 6a 12 	sts	0x126A, r24	; 0x80126a <array_pids>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   12a16:	08 95       	ret

00012a18 <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   12a18:	fc 01       	movw	r30, r24
   12a1a:	8a e9       	ldi	r24, 0x9A	; 154
   12a1c:	98 e0       	ldi	r25, 0x08	; 8
   12a1e:	91 83       	std	Z+1, r25	; 0x01
   12a20:	80 83       	st	Z, r24
   12a22:	80 e0       	ldi	r24, 0x00	; 0
   12a24:	98 ef       	ldi	r25, 0xF8	; 248
   12a26:	91 87       	std	Z+9, r25	; 0x09
   12a28:	80 87       	std	Z+8, r24	; 0x08
   12a2a:	20 ee       	ldi	r18, 0xE0	; 224
   12a2c:	37 e0       	ldi	r19, 0x07	; 7
   12a2e:	37 83       	std	Z+7, r19	; 0x07
   12a30:	26 83       	std	Z+6, r18	; 0x06
   12a32:	93 87       	std	Z+11, r25	; 0x0b
   12a34:	82 87       	std	Z+10, r24	; 0x0a
   12a36:	81 e0       	ldi	r24, 0x01	; 1
   12a38:	84 87       	std	Z+12, r24	; 0x0c
   12a3a:	15 86       	std	Z+13, r1	; 0x0d
   12a3c:	08 95       	ret

00012a3e <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   12a3e:	fc 01       	movw	r30, r24
   12a40:	73 87       	std	Z+11, r23	; 0x0b
   12a42:	62 87       	std	Z+10, r22	; 0x0a
   12a44:	08 95       	ret

00012a46 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   12a46:	ef 92       	push	r14
   12a48:	ff 92       	push	r15
   12a4a:	0f 93       	push	r16
   12a4c:	1f 93       	push	r17
   12a4e:	cf 93       	push	r28
   12a50:	df 93       	push	r29
   12a52:	e9 01       	movw	r28, r18
   12a54:	79 01       	movw	r14, r18
   12a56:	e6 1a       	sub	r14, r22
   12a58:	f7 0a       	sbc	r15, r23
   12a5a:	97 01       	movw	r18, r14
   12a5c:	2f 5f       	subi	r18, 0xFF	; 255
   12a5e:	3f 4f       	sbci	r19, 0xFF	; 255
   12a60:	f8 01       	movw	r30, r16
   12a62:	e4 1b       	sub	r30, r20
   12a64:	f5 0b       	sbc	r31, r21
   12a66:	df 01       	movw	r26, r30
   12a68:	11 96       	adiw	r26, 0x01	; 1
   12a6a:	37 ff       	sbrs	r19, 7
   12a6c:	04 c0       	rjmp	.+8      	; 0x12a76 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   12a6e:	97 01       	movw	r18, r14
   12a70:	20 95       	com	r18
   12a72:	30 95       	com	r19
   12a74:	be 01       	movw	r22, r28
   12a76:	b7 ff       	sbrs	r27, 7
   12a78:	04 c0       	rjmp	.+8      	; 0x12a82 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   12a7a:	df 01       	movw	r26, r30
   12a7c:	a0 95       	com	r26
   12a7e:	b0 95       	com	r27
   12a80:	a8 01       	movw	r20, r16
   12a82:	ec 01       	movw	r28, r24
   12a84:	ea 84       	ldd	r14, Y+10	; 0x0a
   12a86:	fb 84       	ldd	r15, Y+11	; 0x0b
   12a88:	e8 81       	ld	r30, Y
   12a8a:	f9 81       	ldd	r31, Y+1	; 0x01
   12a8c:	04 80       	ldd	r0, Z+4	; 0x04
   12a8e:	f5 81       	ldd	r31, Z+5	; 0x05
   12a90:	e0 2d       	mov	r30, r0
   12a92:	8d 01       	movw	r16, r26
   12a94:	19 95       	eicall
   12a96:	df 91       	pop	r29
   12a98:	cf 91       	pop	r28
   12a9a:	1f 91       	pop	r17
   12a9c:	0f 91       	pop	r16
   12a9e:	ff 90       	pop	r15
   12aa0:	ef 90       	pop	r14
   12aa2:	08 95       	ret

00012aa4 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   12aa4:	ef 92       	push	r14
   12aa6:	ff 92       	push	r15
   12aa8:	0f 93       	push	r16
   12aaa:	1f 93       	push	r17
   12aac:	dc 01       	movw	r26, r24
   12aae:	1a 96       	adiw	r26, 0x0a	; 10
   12ab0:	ed 90       	ld	r14, X+
   12ab2:	fc 90       	ld	r15, X
   12ab4:	1b 97       	sbiw	r26, 0x0b	; 11
   12ab6:	ed 91       	ld	r30, X+
   12ab8:	fc 91       	ld	r31, X
   12aba:	04 80       	ldd	r0, Z+4	; 0x04
   12abc:	f5 81       	ldd	r31, Z+5	; 0x05
   12abe:	e0 2d       	mov	r30, r0
   12ac0:	89 01       	movw	r16, r18
   12ac2:	21 e0       	ldi	r18, 0x01	; 1
   12ac4:	30 e0       	ldi	r19, 0x00	; 0
   12ac6:	19 95       	eicall
   12ac8:	1f 91       	pop	r17
   12aca:	0f 91       	pop	r16
   12acc:	ff 90       	pop	r15
   12ace:	ef 90       	pop	r14
   12ad0:	08 95       	ret

00012ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   12ad2:	ef 92       	push	r14
   12ad4:	ff 92       	push	r15
   12ad6:	0f 93       	push	r16
   12ad8:	1f 93       	push	r17
   12ada:	dc 01       	movw	r26, r24
   12adc:	1a 96       	adiw	r26, 0x0a	; 10
   12ade:	ed 90       	ld	r14, X+
   12ae0:	fc 90       	ld	r15, X
   12ae2:	1b 97       	sbiw	r26, 0x0b	; 11
   12ae4:	ed 91       	ld	r30, X+
   12ae6:	fc 91       	ld	r31, X
   12ae8:	04 80       	ldd	r0, Z+4	; 0x04
   12aea:	f5 81       	ldd	r31, Z+5	; 0x05
   12aec:	e0 2d       	mov	r30, r0
   12aee:	01 e0       	ldi	r16, 0x01	; 1
   12af0:	10 e0       	ldi	r17, 0x00	; 0
   12af2:	19 95       	eicall
   12af4:	1f 91       	pop	r17
   12af6:	0f 91       	pop	r16
   12af8:	ff 90       	pop	r15
   12afa:	ef 90       	pop	r14
   12afc:	08 95       	ret

00012afe <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   12afe:	cf 92       	push	r12
   12b00:	df 92       	push	r13
   12b02:	ef 92       	push	r14
   12b04:	ff 92       	push	r15
   12b06:	0f 93       	push	r16
   12b08:	1f 93       	push	r17
   12b0a:	cf 93       	push	r28
   12b0c:	df 93       	push	r29
   12b0e:	ec 01       	movw	r28, r24
   12b10:	7b 01       	movw	r14, r22
   12b12:	e8 81       	ld	r30, Y
   12b14:	f9 81       	ldd	r31, Y+1	; 0x01
   12b16:	c4 80       	ldd	r12, Z+4	; 0x04
   12b18:	d5 80       	ldd	r13, Z+5	; 0x05
   12b1a:	04 84       	ldd	r0, Z+12	; 0x0c
   12b1c:	f5 85       	ldd	r31, Z+13	; 0x0d
   12b1e:	e0 2d       	mov	r30, r0
   12b20:	19 95       	eicall
   12b22:	8c 01       	movw	r16, r24
   12b24:	e8 81       	ld	r30, Y
   12b26:	f9 81       	ldd	r31, Y+1	; 0x01
   12b28:	06 84       	ldd	r0, Z+14	; 0x0e
   12b2a:	f7 85       	ldd	r31, Z+15	; 0x0f
   12b2c:	e0 2d       	mov	r30, r0
   12b2e:	ce 01       	movw	r24, r28
   12b30:	19 95       	eicall
   12b32:	9c 01       	movw	r18, r24
   12b34:	50 e0       	ldi	r21, 0x00	; 0
   12b36:	40 e0       	ldi	r20, 0x00	; 0
   12b38:	70 e0       	ldi	r23, 0x00	; 0
   12b3a:	60 e0       	ldi	r22, 0x00	; 0
   12b3c:	ce 01       	movw	r24, r28
   12b3e:	f6 01       	movw	r30, r12
   12b40:	19 95       	eicall
   12b42:	df 91       	pop	r29
   12b44:	cf 91       	pop	r28
   12b46:	1f 91       	pop	r17
   12b48:	0f 91       	pop	r16
   12b4a:	ff 90       	pop	r15
   12b4c:	ef 90       	pop	r14
   12b4e:	df 90       	pop	r13
   12b50:	cf 90       	pop	r12
   12b52:	08 95       	ret

00012b54 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   12b54:	6f 92       	push	r6
   12b56:	7f 92       	push	r7
   12b58:	8f 92       	push	r8
   12b5a:	9f 92       	push	r9
   12b5c:	af 92       	push	r10
   12b5e:	bf 92       	push	r11
   12b60:	cf 92       	push	r12
   12b62:	df 92       	push	r13
   12b64:	ef 92       	push	r14
   12b66:	ff 92       	push	r15
   12b68:	0f 93       	push	r16
   12b6a:	1f 93       	push	r17
   12b6c:	cf 93       	push	r28
   12b6e:	df 93       	push	r29
   12b70:	3c 01       	movw	r6, r24
   12b72:	7b 01       	movw	r14, r22
   12b74:	ea 01       	movw	r28, r20
   12b76:	49 01       	movw	r8, r18
   12b78:	26 1b       	sub	r18, r22
   12b7a:	37 0b       	sbc	r19, r23
   12b7c:	59 01       	movw	r10, r18
   12b7e:	4f ef       	ldi	r20, 0xFF	; 255
   12b80:	a4 1a       	sub	r10, r20
   12b82:	b4 0a       	sbc	r11, r20
   12b84:	c8 01       	movw	r24, r16
   12b86:	8c 1b       	sub	r24, r28
   12b88:	9d 0b       	sbc	r25, r29
   12b8a:	6c 01       	movw	r12, r24
   12b8c:	4f ef       	ldi	r20, 0xFF	; 255
   12b8e:	c4 1a       	sub	r12, r20
   12b90:	d4 0a       	sbc	r13, r20
   12b92:	b7 fe       	sbrs	r11, 7
   12b94:	04 c0       	rjmp	.+8      	; 0x12b9e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   12b96:	59 01       	movw	r10, r18
   12b98:	a0 94       	com	r10
   12b9a:	b0 94       	com	r11
   12b9c:	74 01       	movw	r14, r8
   12b9e:	d7 fe       	sbrs	r13, 7
   12ba0:	04 c0       	rjmp	.+8      	; 0x12baa <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   12ba2:	6c 01       	movw	r12, r24
   12ba4:	c0 94       	com	r12
   12ba6:	d0 94       	com	r13
   12ba8:	e8 01       	movw	r28, r16
   12baa:	95 01       	movw	r18, r10
   12bac:	ae 01       	movw	r20, r28
   12bae:	b7 01       	movw	r22, r14
   12bb0:	c3 01       	movw	r24, r6
   12bb2:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12bb6:	95 01       	movw	r18, r10
   12bb8:	a8 01       	movw	r20, r16
   12bba:	b7 01       	movw	r22, r14
   12bbc:	c3 01       	movw	r24, r6
   12bbe:	0e 94 69 95 	call	0x12ad2	; 0x12ad2 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12bc2:	96 01       	movw	r18, r12
   12bc4:	ae 01       	movw	r20, r28
   12bc6:	b7 01       	movw	r22, r14
   12bc8:	c3 01       	movw	r24, r6
   12bca:	0e 94 52 95 	call	0x12aa4	; 0x12aa4 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   12bce:	96 01       	movw	r18, r12
   12bd0:	ae 01       	movw	r20, r28
   12bd2:	b4 01       	movw	r22, r8
   12bd4:	c3 01       	movw	r24, r6
   12bd6:	df 91       	pop	r29
   12bd8:	cf 91       	pop	r28
   12bda:	1f 91       	pop	r17
   12bdc:	0f 91       	pop	r16
   12bde:	ff 90       	pop	r15
   12be0:	ef 90       	pop	r14
   12be2:	df 90       	pop	r13
   12be4:	cf 90       	pop	r12
   12be6:	bf 90       	pop	r11
   12be8:	af 90       	pop	r10
   12bea:	9f 90       	pop	r9
   12bec:	8f 90       	pop	r8
   12bee:	7f 90       	pop	r7
   12bf0:	6f 90       	pop	r6
   12bf2:	0c 94 52 95 	jmp	0x12aa4	; 0x12aa4 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00012bf6 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   12bf6:	fc 01       	movw	r30, r24
   12bf8:	77 83       	std	Z+7, r23	; 0x07
   12bfa:	66 83       	std	Z+6, r22	; 0x06
   12bfc:	08 95       	ret

00012bfe <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   12bfe:	fc 01       	movw	r30, r24
   12c00:	71 87       	std	Z+9, r23	; 0x09
   12c02:	60 87       	std	Z+8, r22	; 0x08
   12c04:	08 95       	ret

00012c06 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   12c06:	fc 01       	movw	r30, r24
   12c08:	64 87       	std	Z+12, r22	; 0x0c
   12c0a:	08 95       	ret

00012c0c <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   12c0c:	fc 01       	movw	r30, r24
   12c0e:	65 87       	std	Z+13, r22	; 0x0d
   12c10:	08 95       	ret

00012c12 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   12c12:	2f 92       	push	r2
   12c14:	3f 92       	push	r3
   12c16:	4f 92       	push	r4
   12c18:	5f 92       	push	r5
   12c1a:	6f 92       	push	r6
   12c1c:	7f 92       	push	r7
   12c1e:	8f 92       	push	r8
   12c20:	9f 92       	push	r9
   12c22:	af 92       	push	r10
   12c24:	bf 92       	push	r11
   12c26:	cf 92       	push	r12
   12c28:	df 92       	push	r13
   12c2a:	ef 92       	push	r14
   12c2c:	ff 92       	push	r15
   12c2e:	0f 93       	push	r16
   12c30:	1f 93       	push	r17
   12c32:	cf 93       	push	r28
   12c34:	df 93       	push	r29
   12c36:	cd b7       	in	r28, 0x3d	; 61
   12c38:	de b7       	in	r29, 0x3e	; 62
   12c3a:	2d 97       	sbiw	r28, 0x0d	; 13
   12c3c:	0f b6       	in	r0, 0x3f	; 63
   12c3e:	f8 94       	cli
   12c40:	de bf       	out	0x3e, r29	; 62
   12c42:	0f be       	out	0x3f, r0	; 63
   12c44:	cd bf       	out	0x3d, r28	; 61
   12c46:	3c 01       	movw	r6, r24
   12c48:	4b 01       	movw	r8, r22
   12c4a:	2a 01       	movw	r4, r20
   12c4c:	d2 2e       	mov	r13, r18
   12c4e:	1c 83       	std	Y+4, r17	; 0x04
   12c50:	0b 83       	std	Y+3, r16	; 0x03
   12c52:	fe 82       	std	Y+6, r15	; 0x06
   12c54:	ed 82       	std	Y+5, r14	; 0x05
   12c56:	ca 82       	std	Y+2, r12	; 0x02
   12c58:	a9 86       	std	Y+9, r10	; 0x09
   12c5a:	dc 01       	movw	r26, r24
   12c5c:	ed 91       	ld	r30, X+
   12c5e:	fc 91       	ld	r31, X
   12c60:	06 84       	ldd	r0, Z+14	; 0x0e
   12c62:	f7 85       	ldd	r31, Z+15	; 0x0f
   12c64:	e0 2d       	mov	r30, r0
   12c66:	19 95       	eicall
   12c68:	88 16       	cp	r8, r24
   12c6a:	99 06       	cpc	r9, r25
   12c6c:	0c f0       	brlt	.+2      	; 0x12c70 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   12c6e:	7a c0       	rjmp	.+244    	; 0x12d64 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12c70:	d3 01       	movw	r26, r6
   12c72:	ed 91       	ld	r30, X+
   12c74:	fc 91       	ld	r31, X
   12c76:	04 84       	ldd	r0, Z+12	; 0x0c
   12c78:	f5 85       	ldd	r31, Z+13	; 0x0d
   12c7a:	e0 2d       	mov	r30, r0
   12c7c:	c3 01       	movw	r24, r6
   12c7e:	19 95       	eicall
   12c80:	48 16       	cp	r4, r24
   12c82:	59 06       	cpc	r5, r25
   12c84:	0c f0       	brlt	.+2      	; 0x12c88 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   12c86:	6e c0       	rjmp	.+220    	; 0x12d64 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12c88:	3a 81       	ldd	r19, Y+2	; 0x02
   12c8a:	23 2f       	mov	r18, r19
   12c8c:	30 e0       	ldi	r19, 0x00	; 0
   12c8e:	3d 87       	std	Y+13, r19	; 0x0d
   12c90:	2c 87       	std	Y+12, r18	; 0x0c
   12c92:	c4 01       	movw	r24, r8
   12c94:	aa 81       	ldd	r26, Y+2	; 0x02
   12c96:	46 e0       	ldi	r20, 0x06	; 6
   12c98:	a4 9f       	mul	r26, r20
   12c9a:	80 0d       	add	r24, r0
   12c9c:	91 1d       	adc	r25, r1
   12c9e:	11 24       	eor	r1, r1
   12ca0:	18 16       	cp	r1, r24
   12ca2:	19 06       	cpc	r1, r25
   12ca4:	0c f0       	brlt	.+2      	; 0x12ca8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   12ca6:	5e c0       	rjmp	.+188    	; 0x12d64 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12ca8:	c9 01       	movw	r24, r18
   12caa:	23 e0       	ldi	r18, 0x03	; 3
   12cac:	88 0f       	add	r24, r24
   12cae:	99 1f       	adc	r25, r25
   12cb0:	2a 95       	dec	r18
   12cb2:	e1 f7       	brne	.-8      	; 0x12cac <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   12cb4:	84 0d       	add	r24, r4
   12cb6:	95 1d       	adc	r25, r5
   12cb8:	18 16       	cp	r1, r24
   12cba:	19 06       	cpc	r1, r25
   12cbc:	0c f0       	brlt	.+2      	; 0x12cc0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   12cbe:	52 c0       	rjmp	.+164    	; 0x12d64 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12cc0:	bf ea       	ldi	r27, 0xAF	; 175
   12cc2:	bd 15       	cp	r27, r13
   12cc4:	08 f4       	brcc	.+2      	; 0x12cc8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   12cc6:	d3 94       	inc	r13
   12cc8:	54 01       	movw	r10, r8
   12cca:	19 82       	std	Y+1, r1	; 0x01
   12ccc:	8e e1       	ldi	r24, 0x1E	; 30
   12cce:	9d e5       	ldi	r25, 0x5D	; 93
   12cd0:	88 19       	sub	r24, r8
   12cd2:	99 09       	sbc	r25, r9
   12cd4:	9c 01       	movw	r18, r24
   12cd6:	45 e0       	ldi	r20, 0x05	; 5
   12cd8:	d4 9e       	mul	r13, r20
   12cda:	20 0d       	add	r18, r0
   12cdc:	31 1d       	adc	r19, r1
   12cde:	11 24       	eor	r1, r1
   12ce0:	3b 87       	std	Y+11, r19	; 0x0b
   12ce2:	2a 87       	std	Y+10, r18	; 0x0a
   12ce4:	89 81       	ldd	r24, Y+1	; 0x01
   12ce6:	e0 e0       	ldi	r30, 0x00	; 0
   12ce8:	85 30       	cpi	r24, 0x05	; 5
   12cea:	29 f0       	breq	.+10     	; 0x12cf6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   12cec:	ea 85       	ldd	r30, Y+10	; 0x0a
   12cee:	fb 85       	ldd	r31, Y+11	; 0x0b
   12cf0:	ea 0d       	add	r30, r10
   12cf2:	fb 1d       	adc	r31, r11
   12cf4:	e4 91       	lpm	r30, Z
   12cf6:	62 01       	movw	r12, r4
   12cf8:	31 2c       	mov	r3, r1
   12cfa:	21 2c       	mov	r2, r1
   12cfc:	ae 2f       	mov	r26, r30
   12cfe:	b0 e0       	ldi	r27, 0x00	; 0
   12d00:	b8 87       	std	Y+8, r27	; 0x08
   12d02:	af 83       	std	Y+7, r26	; 0x07
   12d04:	e0 ff       	sbrs	r30, 0
   12d06:	54 c0       	rjmp	.+168    	; 0x12db0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   12d08:	d3 01       	movw	r26, r6
   12d0a:	ed 91       	ld	r30, X+
   12d0c:	fc 91       	ld	r31, X
   12d0e:	ba 81       	ldd	r27, Y+2	; 0x02
   12d10:	b1 30       	cpi	r27, 0x01	; 1
   12d12:	09 f0       	breq	.+2      	; 0x12d16 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   12d14:	40 c0       	rjmp	.+128    	; 0x12d96 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   12d16:	02 80       	ldd	r0, Z+2	; 0x02
   12d18:	f3 81       	ldd	r31, Z+3	; 0x03
   12d1a:	e0 2d       	mov	r30, r0
   12d1c:	2b 81       	ldd	r18, Y+3	; 0x03
   12d1e:	3c 81       	ldd	r19, Y+4	; 0x04
   12d20:	a2 01       	movw	r20, r4
   12d22:	42 0d       	add	r20, r2
   12d24:	53 1d       	adc	r21, r3
   12d26:	b5 01       	movw	r22, r10
   12d28:	c3 01       	movw	r24, r6
   12d2a:	19 95       	eicall
   12d2c:	ef 81       	ldd	r30, Y+7	; 0x07
   12d2e:	f8 85       	ldd	r31, Y+8	; 0x08
   12d30:	f5 95       	asr	r31
   12d32:	e7 95       	ror	r30
   12d34:	2f ef       	ldi	r18, 0xFF	; 255
   12d36:	22 1a       	sub	r2, r18
   12d38:	32 0a       	sbc	r3, r18
   12d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
   12d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
   12d3e:	c8 0e       	add	r12, r24
   12d40:	d9 1e       	adc	r13, r25
   12d42:	98 e0       	ldi	r25, 0x08	; 8
   12d44:	29 16       	cp	r2, r25
   12d46:	31 04       	cpc	r3, r1
   12d48:	c9 f6       	brne	.-78     	; 0x12cfc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   12d4a:	af ef       	ldi	r26, 0xFF	; 255
   12d4c:	aa 1a       	sub	r10, r26
   12d4e:	ba 0a       	sbc	r11, r26
   12d50:	2c 85       	ldd	r18, Y+12	; 0x0c
   12d52:	3d 85       	ldd	r19, Y+13	; 0x0d
   12d54:	82 0e       	add	r8, r18
   12d56:	93 1e       	adc	r9, r19
   12d58:	39 81       	ldd	r19, Y+1	; 0x01
   12d5a:	3f 5f       	subi	r19, 0xFF	; 255
   12d5c:	39 83       	std	Y+1, r19	; 0x01
   12d5e:	36 30       	cpi	r19, 0x06	; 6
   12d60:	09 f0       	breq	.+2      	; 0x12d64 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12d62:	c0 cf       	rjmp	.-128    	; 0x12ce4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   12d64:	2d 96       	adiw	r28, 0x0d	; 13
   12d66:	0f b6       	in	r0, 0x3f	; 63
   12d68:	f8 94       	cli
   12d6a:	de bf       	out	0x3e, r29	; 62
   12d6c:	0f be       	out	0x3f, r0	; 63
   12d6e:	cd bf       	out	0x3d, r28	; 61
   12d70:	df 91       	pop	r29
   12d72:	cf 91       	pop	r28
   12d74:	1f 91       	pop	r17
   12d76:	0f 91       	pop	r16
   12d78:	ff 90       	pop	r15
   12d7a:	ef 90       	pop	r14
   12d7c:	df 90       	pop	r13
   12d7e:	cf 90       	pop	r12
   12d80:	bf 90       	pop	r11
   12d82:	af 90       	pop	r10
   12d84:	9f 90       	pop	r9
   12d86:	8f 90       	pop	r8
   12d88:	7f 90       	pop	r7
   12d8a:	6f 90       	pop	r6
   12d8c:	5f 90       	pop	r5
   12d8e:	4f 90       	pop	r4
   12d90:	3f 90       	pop	r3
   12d92:	2f 90       	pop	r2
   12d94:	08 95       	ret
   12d96:	04 80       	ldd	r0, Z+4	; 0x04
   12d98:	f5 81       	ldd	r31, Z+5	; 0x05
   12d9a:	e0 2d       	mov	r30, r0
   12d9c:	eb 80       	ldd	r14, Y+3	; 0x03
   12d9e:	fc 80       	ldd	r15, Y+4	; 0x04
   12da0:	0c 85       	ldd	r16, Y+12	; 0x0c
   12da2:	1d 85       	ldd	r17, Y+13	; 0x0d
   12da4:	98 01       	movw	r18, r16
   12da6:	a6 01       	movw	r20, r12
   12da8:	b4 01       	movw	r22, r8
   12daa:	c3 01       	movw	r24, r6
   12dac:	19 95       	eicall
   12dae:	be cf       	rjmp	.-132    	; 0x12d2c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12db0:	2d 81       	ldd	r18, Y+5	; 0x05
   12db2:	3e 81       	ldd	r19, Y+6	; 0x06
   12db4:	8b 81       	ldd	r24, Y+3	; 0x03
   12db6:	9c 81       	ldd	r25, Y+4	; 0x04
   12db8:	28 17       	cp	r18, r24
   12dba:	39 07       	cpc	r19, r25
   12dbc:	09 f4       	brne	.+2      	; 0x12dc0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   12dbe:	b6 cf       	rjmp	.-148    	; 0x12d2c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12dc0:	99 85       	ldd	r25, Y+9	; 0x09
   12dc2:	91 11       	cpse	r25, r1
   12dc4:	b3 cf       	rjmp	.-154    	; 0x12d2c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12dc6:	d3 01       	movw	r26, r6
   12dc8:	ed 91       	ld	r30, X+
   12dca:	fc 91       	ld	r31, X
   12dcc:	ba 81       	ldd	r27, Y+2	; 0x02
   12dce:	b1 30       	cpi	r27, 0x01	; 1
   12dd0:	21 f4       	brne	.+8      	; 0x12dda <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   12dd2:	02 80       	ldd	r0, Z+2	; 0x02
   12dd4:	f3 81       	ldd	r31, Z+3	; 0x03
   12dd6:	e0 2d       	mov	r30, r0
   12dd8:	a3 cf       	rjmp	.-186    	; 0x12d20 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   12dda:	04 80       	ldd	r0, Z+4	; 0x04
   12ddc:	f5 81       	ldd	r31, Z+5	; 0x05
   12dde:	e0 2d       	mov	r30, r0
   12de0:	ed 80       	ldd	r14, Y+5	; 0x05
   12de2:	fe 80       	ldd	r15, Y+6	; 0x06
   12de4:	dd cf       	rjmp	.-70     	; 0x12da0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

00012de6 <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   12de6:	af 92       	push	r10
   12de8:	cf 92       	push	r12
   12dea:	ef 92       	push	r14
   12dec:	ff 92       	push	r15
   12dee:	0f 93       	push	r16
   12df0:	1f 93       	push	r17
   12df2:	cf 93       	push	r28
   12df4:	df 93       	push	r29
   12df6:	ec 01       	movw	r28, r24
   12df8:	6a 30       	cpi	r22, 0x0A	; 10
   12dfa:	c1 f4       	brne	.+48     	; 0x12e2c <LCDWIKI_GUI::write(unsigned char)+0x46>
   12dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
   12dfe:	98 e0       	ldi	r25, 0x08	; 8
   12e00:	89 9f       	mul	r24, r25
   12e02:	90 01       	movw	r18, r0
   12e04:	11 24       	eor	r1, r1
   12e06:	8c 81       	ldd	r24, Y+4	; 0x04
   12e08:	9d 81       	ldd	r25, Y+5	; 0x05
   12e0a:	82 0f       	add	r24, r18
   12e0c:	93 1f       	adc	r25, r19
   12e0e:	9d 83       	std	Y+5, r25	; 0x05
   12e10:	8c 83       	std	Y+4, r24	; 0x04
   12e12:	1b 82       	std	Y+3, r1	; 0x03
   12e14:	1a 82       	std	Y+2, r1	; 0x02
   12e16:	81 e0       	ldi	r24, 0x01	; 1
   12e18:	90 e0       	ldi	r25, 0x00	; 0
   12e1a:	df 91       	pop	r29
   12e1c:	cf 91       	pop	r28
   12e1e:	1f 91       	pop	r17
   12e20:	0f 91       	pop	r16
   12e22:	ff 90       	pop	r15
   12e24:	ef 90       	pop	r14
   12e26:	cf 90       	pop	r12
   12e28:	af 90       	pop	r10
   12e2a:	08 95       	ret
   12e2c:	6d 30       	cpi	r22, 0x0D	; 13
   12e2e:	99 f3       	breq	.-26     	; 0x12e16 <LCDWIKI_GUI::write(unsigned char)+0x30>
   12e30:	26 2f       	mov	r18, r22
   12e32:	e8 84       	ldd	r14, Y+8	; 0x08
   12e34:	f9 84       	ldd	r15, Y+9	; 0x09
   12e36:	0e 81       	ldd	r16, Y+6	; 0x06
   12e38:	1f 81       	ldd	r17, Y+7	; 0x07
   12e3a:	4c 81       	ldd	r20, Y+4	; 0x04
   12e3c:	5d 81       	ldd	r21, Y+5	; 0x05
   12e3e:	6a 81       	ldd	r22, Y+2	; 0x02
   12e40:	7b 81       	ldd	r23, Y+3	; 0x03
   12e42:	ad 84       	ldd	r10, Y+13	; 0x0d
   12e44:	cc 84       	ldd	r12, Y+12	; 0x0c
   12e46:	0e 94 09 96 	call	0x12c12	; 0x12c12 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   12e4a:	2c 85       	ldd	r18, Y+12	; 0x0c
   12e4c:	8a 81       	ldd	r24, Y+2	; 0x02
   12e4e:	9b 81       	ldd	r25, Y+3	; 0x03
   12e50:	36 e0       	ldi	r19, 0x06	; 6
   12e52:	23 9f       	mul	r18, r19
   12e54:	80 0d       	add	r24, r0
   12e56:	91 1d       	adc	r25, r1
   12e58:	11 24       	eor	r1, r1
   12e5a:	9b 83       	std	Y+3, r25	; 0x03
   12e5c:	8a 83       	std	Y+2, r24	; 0x02
   12e5e:	db cf       	rjmp	.-74     	; 0x12e16 <LCDWIKI_GUI::write(unsigned char)+0x30>

00012e60 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   12e60:	dc 01       	movw	r26, r24
   12e62:	ed 91       	ld	r30, X+
   12e64:	fc 91       	ld	r31, X
   12e66:	06 84       	ldd	r0, Z+14	; 0x0e
   12e68:	f7 85       	ldd	r31, Z+15	; 0x0f
   12e6a:	e0 2d       	mov	r30, r0
   12e6c:	19 94       	eijmp

00012e6e <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   12e6e:	af 92       	push	r10
   12e70:	bf 92       	push	r11
   12e72:	cf 92       	push	r12
   12e74:	df 92       	push	r13
   12e76:	ef 92       	push	r14
   12e78:	ff 92       	push	r15
   12e7a:	0f 93       	push	r16
   12e7c:	1f 93       	push	r17
   12e7e:	cf 93       	push	r28
   12e80:	df 93       	push	r29
   12e82:	ec 01       	movw	r28, r24
   12e84:	6b 01       	movw	r12, r22
   12e86:	8a 01       	movw	r16, r20
   12e88:	79 01       	movw	r14, r18
   12e8a:	ca 01       	movw	r24, r20
   12e8c:	8e 50       	subi	r24, 0x0E	; 14
   12e8e:	97 42       	sbci	r25, 0x27	; 39
   12e90:	02 97       	sbiw	r24, 0x02	; 2
   12e92:	00 f5       	brcc	.+64     	; 0x12ed4 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   12e94:	fb 01       	movw	r30, r22
   12e96:	01 90       	ld	r0, Z+
   12e98:	00 20       	and	r0, r0
   12e9a:	e9 f7       	brne	.-6      	; 0x12e96 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   12e9c:	31 97       	sbiw	r30, 0x01	; 1
   12e9e:	e6 1b       	sub	r30, r22
   12ea0:	f7 0b       	sbc	r31, r23
   12ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
   12ea4:	26 e0       	ldi	r18, 0x06	; 6
   12ea6:	82 9f       	mul	r24, r18
   12ea8:	c0 01       	movw	r24, r0
   12eaa:	11 24       	eor	r1, r1
   12eac:	8e 9f       	mul	r24, r30
   12eae:	50 01       	movw	r10, r0
   12eb0:	8f 9f       	mul	r24, r31
   12eb2:	b0 0c       	add	r11, r0
   12eb4:	9e 9f       	mul	r25, r30
   12eb6:	b0 0c       	add	r11, r0
   12eb8:	11 24       	eor	r1, r1
   12eba:	ce 01       	movw	r24, r28
   12ebc:	0e 94 30 97 	call	0x12e60	; 0x12e60 <LCDWIKI_GUI::Get_Display_Width() const>
   12ec0:	8a 19       	sub	r24, r10
   12ec2:	9b 09       	sbc	r25, r11
   12ec4:	0e 30       	cpi	r16, 0x0E	; 14
   12ec6:	17 42       	sbci	r17, 0x27	; 39
   12ec8:	19 f5       	brne	.+70     	; 0x12f10 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   12eca:	97 fd       	sbrc	r25, 7
   12ecc:	01 96       	adiw	r24, 0x01	; 1
   12ece:	8c 01       	movw	r16, r24
   12ed0:	15 95       	asr	r17
   12ed2:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   12ed4:	1b 83       	std	Y+3, r17	; 0x03
   12ed6:	0a 83       	std	Y+2, r16	; 0x02
   12ed8:	fd 82       	std	Y+5, r15	; 0x05
   12eda:	ec 82       	std	Y+4, r14	; 0x04
   12edc:	86 01       	movw	r16, r12
   12ede:	78 01       	movw	r14, r16
   12ee0:	ec 18       	sub	r14, r12
   12ee2:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   12ee4:	f8 01       	movw	r30, r16
   12ee6:	61 91       	ld	r22, Z+
   12ee8:	8f 01       	movw	r16, r30
   12eea:	66 23       	and	r22, r22
   12eec:	29 f0       	breq	.+10     	; 0x12ef8 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   12eee:	ce 01       	movw	r24, r28
   12ef0:	0e 94 f3 96 	call	0x12de6	; 0x12de6 <LCDWIKI_GUI::write(unsigned char)>
   12ef4:	89 2b       	or	r24, r25
   12ef6:	99 f7       	brne	.-26     	; 0x12ede <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   12ef8:	c7 01       	movw	r24, r14
   12efa:	df 91       	pop	r29
   12efc:	cf 91       	pop	r28
   12efe:	1f 91       	pop	r17
   12f00:	0f 91       	pop	r16
   12f02:	ff 90       	pop	r15
   12f04:	ef 90       	pop	r14
   12f06:	df 90       	pop	r13
   12f08:	cf 90       	pop	r12
   12f0a:	bf 90       	pop	r11
   12f0c:	af 90       	pop	r10
   12f0e:	08 95       	ret
   12f10:	8c 01       	movw	r16, r24
   12f12:	01 50       	subi	r16, 0x01	; 1
   12f14:	11 09       	sbc	r17, r1
   12f16:	de cf       	rjmp	.-68     	; 0x12ed4 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

00012f18 <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   12f18:	fb 01       	movw	r30, r22
   12f1a:	60 81       	ld	r22, Z
   12f1c:	71 81       	ldd	r23, Z+1	; 0x01
   12f1e:	0c 94 37 97 	jmp	0x12e6e	; 0x12e6e <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00012f22 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   12f22:	dc 01       	movw	r26, r24
   12f24:	ed 91       	ld	r30, X+
   12f26:	fc 91       	ld	r31, X
   12f28:	04 84       	ldd	r0, Z+12	; 0x0c
   12f2a:	f5 85       	ldd	r31, Z+13	; 0x0d
   12f2c:	e0 2d       	mov	r30, r0
   12f2e:	19 94       	eijmp

00012f30 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   12f30:	0f 93       	push	r16
   12f32:	cf 93       	push	r28
   12f34:	df 93       	push	r29
   12f36:	dc 01       	movw	r26, r24
   12f38:	01 70       	andi	r16, 0x01	; 1
   12f3a:	9e 96       	adiw	r26, 0x2e	; 46
   12f3c:	ed 91       	ld	r30, X+
   12f3e:	fc 91       	ld	r31, X
   12f40:	9f 97       	sbiw	r26, 0x2f	; 47
   12f42:	80 81       	ld	r24, Z
   12f44:	da 96       	adiw	r26, 0x3a	; 58
   12f46:	9c 91       	ld	r25, X
   12f48:	da 97       	sbiw	r26, 0x3a	; 58
   12f4a:	89 23       	and	r24, r25
   12f4c:	80 83       	st	Z, r24
   12f4e:	22 23       	and	r18, r18
   12f50:	09 f4       	brne	.+2      	; 0x12f54 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   12f52:	5b c0       	rjmp	.+182    	; 0x1300a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   12f54:	58 96       	adiw	r26, 0x18	; 24
   12f56:	8d 91       	ld	r24, X+
   12f58:	9c 91       	ld	r25, X
   12f5a:	59 97       	sbiw	r26, 0x19	; 25
   12f5c:	89 2b       	or	r24, r25
   12f5e:	49 f5       	brne	.+82     	; 0x12fb2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   12f60:	d0 96       	adiw	r26, 0x30	; 48
   12f62:	ed 91       	ld	r30, X+
   12f64:	fc 91       	ld	r31, X
   12f66:	d1 97       	sbiw	r26, 0x31	; 49
   12f68:	80 81       	ld	r24, Z
   12f6a:	db 96       	adiw	r26, 0x3b	; 59
   12f6c:	9c 91       	ld	r25, X
   12f6e:	db 97       	sbiw	r26, 0x3b	; 59
   12f70:	89 23       	and	r24, r25
   12f72:	80 83       	st	Z, r24
   12f74:	12 b8       	out	0x02, r1	; 2
   12f76:	d2 96       	adiw	r26, 0x32	; 50
   12f78:	ed 91       	ld	r30, X+
   12f7a:	fc 91       	ld	r31, X
   12f7c:	d3 97       	sbiw	r26, 0x33	; 51
   12f7e:	80 81       	ld	r24, Z
   12f80:	dc 96       	adiw	r26, 0x3c	; 60
   12f82:	9c 91       	ld	r25, X
   12f84:	dc 97       	sbiw	r26, 0x3c	; 60
   12f86:	89 23       	and	r24, r25
   12f88:	80 83       	st	Z, r24
   12f8a:	d2 96       	adiw	r26, 0x32	; 50
   12f8c:	ed 91       	ld	r30, X+
   12f8e:	fc 91       	ld	r31, X
   12f90:	d3 97       	sbiw	r26, 0x33	; 51
   12f92:	80 81       	ld	r24, Z
   12f94:	d8 96       	adiw	r26, 0x38	; 56
   12f96:	9c 91       	ld	r25, X
   12f98:	d8 97       	sbiw	r26, 0x38	; 56
   12f9a:	89 2b       	or	r24, r25
   12f9c:	80 83       	st	Z, r24
   12f9e:	d0 96       	adiw	r26, 0x30	; 48
   12fa0:	ed 91       	ld	r30, X+
   12fa2:	fc 91       	ld	r31, X
   12fa4:	d1 97       	sbiw	r26, 0x31	; 49
   12fa6:	80 81       	ld	r24, Z
   12fa8:	d7 96       	adiw	r26, 0x37	; 55
   12faa:	9c 91       	ld	r25, X
   12fac:	d7 97       	sbiw	r26, 0x37	; 55
   12fae:	89 2b       	or	r24, r25
   12fb0:	80 83       	st	Z, r24
   12fb2:	d0 96       	adiw	r26, 0x30	; 48
   12fb4:	ed 91       	ld	r30, X+
   12fb6:	fc 91       	ld	r31, X
   12fb8:	d1 97       	sbiw	r26, 0x31	; 49
   12fba:	80 81       	ld	r24, Z
   12fbc:	db 96       	adiw	r26, 0x3b	; 59
   12fbe:	9c 91       	ld	r25, X
   12fc0:	db 97       	sbiw	r26, 0x3b	; 59
   12fc2:	89 23       	and	r24, r25
   12fc4:	80 83       	st	Z, r24
   12fc6:	90 96       	adiw	r26, 0x20	; 32
   12fc8:	8c 91       	ld	r24, X
   12fca:	90 97       	sbiw	r26, 0x20	; 32
   12fcc:	82 b9       	out	0x02, r24	; 2
   12fce:	d2 96       	adiw	r26, 0x32	; 50
   12fd0:	ed 91       	ld	r30, X+
   12fd2:	fc 91       	ld	r31, X
   12fd4:	d3 97       	sbiw	r26, 0x33	; 51
   12fd6:	80 81       	ld	r24, Z
   12fd8:	dc 96       	adiw	r26, 0x3c	; 60
   12fda:	9c 91       	ld	r25, X
   12fdc:	dc 97       	sbiw	r26, 0x3c	; 60
   12fde:	89 23       	and	r24, r25
   12fe0:	80 83       	st	Z, r24
   12fe2:	d2 96       	adiw	r26, 0x32	; 50
   12fe4:	ed 91       	ld	r30, X+
   12fe6:	fc 91       	ld	r31, X
   12fe8:	d3 97       	sbiw	r26, 0x33	; 51
   12fea:	80 81       	ld	r24, Z
   12fec:	d8 96       	adiw	r26, 0x38	; 56
   12fee:	9c 91       	ld	r25, X
   12ff0:	d8 97       	sbiw	r26, 0x38	; 56
   12ff2:	89 2b       	or	r24, r25
   12ff4:	80 83       	st	Z, r24
   12ff6:	d0 96       	adiw	r26, 0x30	; 48
   12ff8:	ed 91       	ld	r30, X+
   12ffa:	fc 91       	ld	r31, X
   12ffc:	d1 97       	sbiw	r26, 0x31	; 49
   12ffe:	80 81       	ld	r24, Z
   13000:	d7 96       	adiw	r26, 0x37	; 55
   13002:	9c 91       	ld	r25, X
   13004:	d7 97       	sbiw	r26, 0x37	; 55
   13006:	89 2b       	or	r24, r25
   13008:	80 83       	st	Z, r24
   1300a:	eb 01       	movw	r28, r22
   1300c:	ca 01       	movw	r24, r20
   1300e:	18 16       	cp	r1, r24
   13010:	19 06       	cpc	r1, r25
   13012:	bc f5       	brge	.+110    	; 0x13082 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   13014:	00 23       	and	r16, r16
   13016:	91 f1       	breq	.+100    	; 0x1307c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   13018:	fe 01       	movw	r30, r28
   1301a:	45 91       	lpm	r20, Z+
   1301c:	54 91       	lpm	r21, Z
   1301e:	34 2f       	mov	r19, r20
   13020:	25 2f       	mov	r18, r21
   13022:	22 b9       	out	0x02, r18	; 2
   13024:	d2 96       	adiw	r26, 0x32	; 50
   13026:	ed 91       	ld	r30, X+
   13028:	fc 91       	ld	r31, X
   1302a:	d3 97       	sbiw	r26, 0x33	; 51
   1302c:	20 81       	ld	r18, Z
   1302e:	dc 96       	adiw	r26, 0x3c	; 60
   13030:	4c 91       	ld	r20, X
   13032:	dc 97       	sbiw	r26, 0x3c	; 60
   13034:	24 23       	and	r18, r20
   13036:	20 83       	st	Z, r18
   13038:	d2 96       	adiw	r26, 0x32	; 50
   1303a:	ed 91       	ld	r30, X+
   1303c:	fc 91       	ld	r31, X
   1303e:	d3 97       	sbiw	r26, 0x33	; 51
   13040:	20 81       	ld	r18, Z
   13042:	d8 96       	adiw	r26, 0x38	; 56
   13044:	4c 91       	ld	r20, X
   13046:	d8 97       	sbiw	r26, 0x38	; 56
   13048:	24 2b       	or	r18, r20
   1304a:	20 83       	st	Z, r18
   1304c:	32 b9       	out	0x02, r19	; 2
   1304e:	d2 96       	adiw	r26, 0x32	; 50
   13050:	ed 91       	ld	r30, X+
   13052:	fc 91       	ld	r31, X
   13054:	d3 97       	sbiw	r26, 0x33	; 51
   13056:	20 81       	ld	r18, Z
   13058:	dc 96       	adiw	r26, 0x3c	; 60
   1305a:	3c 91       	ld	r19, X
   1305c:	dc 97       	sbiw	r26, 0x3c	; 60
   1305e:	23 23       	and	r18, r19
   13060:	20 83       	st	Z, r18
   13062:	d2 96       	adiw	r26, 0x32	; 50
   13064:	ed 91       	ld	r30, X+
   13066:	fc 91       	ld	r31, X
   13068:	d3 97       	sbiw	r26, 0x33	; 51
   1306a:	20 81       	ld	r18, Z
   1306c:	d8 96       	adiw	r26, 0x38	; 56
   1306e:	3c 91       	ld	r19, X
   13070:	d8 97       	sbiw	r26, 0x38	; 56
   13072:	23 2b       	or	r18, r19
   13074:	20 83       	st	Z, r18
   13076:	22 96       	adiw	r28, 0x02	; 2
   13078:	01 97       	sbiw	r24, 0x01	; 1
   1307a:	c9 cf       	rjmp	.-110    	; 0x1300e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   1307c:	38 81       	ld	r19, Y
   1307e:	29 81       	ldd	r18, Y+1	; 0x01
   13080:	d0 cf       	rjmp	.-96     	; 0x13022 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   13082:	9e 96       	adiw	r26, 0x2e	; 46
   13084:	ed 91       	ld	r30, X+
   13086:	fc 91       	ld	r31, X
   13088:	9f 97       	sbiw	r26, 0x2f	; 47
   1308a:	80 81       	ld	r24, Z
   1308c:	d6 96       	adiw	r26, 0x36	; 54
   1308e:	9c 91       	ld	r25, X
   13090:	89 2b       	or	r24, r25
   13092:	80 83       	st	Z, r24
   13094:	df 91       	pop	r29
   13096:	cf 91       	pop	r28
   13098:	0f 91       	pop	r16
   1309a:	08 95       	ret

0001309c <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   1309c:	38 e0       	ldi	r19, 0x08	; 8
   1309e:	43 9f       	mul	r20, r19
   130a0:	c0 01       	movw	r24, r0
   130a2:	11 24       	eor	r1, r1
   130a4:	80 7e       	andi	r24, 0xE0	; 224
   130a6:	97 70       	andi	r25, 0x07	; 7
   130a8:	26 95       	lsr	r18
   130aa:	26 95       	lsr	r18
   130ac:	26 95       	lsr	r18
   130ae:	82 2b       	or	r24, r18
   130b0:	70 e0       	ldi	r23, 0x00	; 0
   130b2:	76 2f       	mov	r23, r22
   130b4:	66 27       	eor	r22, r22
   130b6:	66 27       	eor	r22, r22
   130b8:	78 7f       	andi	r23, 0xF8	; 248
   130ba:	86 2b       	or	r24, r22
   130bc:	97 2b       	or	r25, r23
   130be:	08 95       	ret

000130c0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   130c0:	7f 92       	push	r7
   130c2:	8f 92       	push	r8
   130c4:	9f 92       	push	r9
   130c6:	af 92       	push	r10
   130c8:	bf 92       	push	r11
   130ca:	cf 92       	push	r12
   130cc:	df 92       	push	r13
   130ce:	ef 92       	push	r14
   130d0:	ff 92       	push	r15
   130d2:	0f 93       	push	r16
   130d4:	1f 93       	push	r17
   130d6:	cf 93       	push	r28
   130d8:	df 93       	push	r29
   130da:	ec 01       	movw	r28, r24
   130dc:	59 01       	movw	r10, r18
   130de:	98 01       	movw	r18, r16
   130e0:	0e 9d       	mul	r16, r14
   130e2:	60 01       	movw	r12, r0
   130e4:	0f 9d       	mul	r16, r15
   130e6:	d0 0c       	add	r13, r0
   130e8:	1e 9d       	mul	r17, r14
   130ea:	d0 0c       	add	r13, r0
   130ec:	11 24       	eor	r1, r1
   130ee:	87 01       	movw	r16, r14
   130f0:	04 0f       	add	r16, r20
   130f2:	15 1f       	adc	r17, r21
   130f4:	01 50       	subi	r16, 0x01	; 1
   130f6:	11 09       	sbc	r17, r1
   130f8:	26 0f       	add	r18, r22
   130fa:	37 1f       	adc	r19, r23
   130fc:	21 50       	subi	r18, 0x01	; 1
   130fe:	31 09       	sbc	r19, r1
   13100:	e8 81       	ld	r30, Y
   13102:	f9 81       	ldd	r31, Y+1	; 0x01
   13104:	06 80       	ldd	r0, Z+6	; 0x06
   13106:	f7 81       	ldd	r31, Z+7	; 0x07
   13108:	e0 2d       	mov	r30, r0
   1310a:	19 95       	eicall
   1310c:	77 24       	eor	r7, r7
   1310e:	7a 94       	dec	r7
   13110:	1c 14       	cp	r1, r12
   13112:	1d 04       	cpc	r1, r13
   13114:	0c f0       	brlt	.+2      	; 0x13118 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   13116:	0a c1       	rjmp	.+532    	; 0x1332c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   13118:	ee a5       	ldd	r30, Y+46	; 0x2e
   1311a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1311c:	80 81       	ld	r24, Z
   1311e:	9a ad       	ldd	r25, Y+58	; 0x3a
   13120:	89 23       	and	r24, r25
   13122:	80 83       	st	Z, r24
   13124:	e8 a9       	ldd	r30, Y+48	; 0x30
   13126:	f9 a9       	ldd	r31, Y+49	; 0x31
   13128:	80 81       	ld	r24, Z
   1312a:	9b ad       	ldd	r25, Y+59	; 0x3b
   1312c:	89 23       	and	r24, r25
   1312e:	80 83       	st	Z, r24
   13130:	9a a1       	ldd	r25, Y+34	; 0x22
   13132:	8b a1       	ldd	r24, Y+35	; 0x23
   13134:	82 b9       	out	0x02, r24	; 2
   13136:	ea a9       	ldd	r30, Y+50	; 0x32
   13138:	fb a9       	ldd	r31, Y+51	; 0x33
   1313a:	80 81       	ld	r24, Z
   1313c:	2c ad       	ldd	r18, Y+60	; 0x3c
   1313e:	82 23       	and	r24, r18
   13140:	80 83       	st	Z, r24
   13142:	ea a9       	ldd	r30, Y+50	; 0x32
   13144:	fb a9       	ldd	r31, Y+51	; 0x33
   13146:	80 81       	ld	r24, Z
   13148:	28 ad       	ldd	r18, Y+56	; 0x38
   1314a:	82 2b       	or	r24, r18
   1314c:	80 83       	st	Z, r24
   1314e:	92 b9       	out	0x02, r25	; 2
   13150:	ea a9       	ldd	r30, Y+50	; 0x32
   13152:	fb a9       	ldd	r31, Y+51	; 0x33
   13154:	80 81       	ld	r24, Z
   13156:	9c ad       	ldd	r25, Y+60	; 0x3c
   13158:	89 23       	and	r24, r25
   1315a:	80 83       	st	Z, r24
   1315c:	ea a9       	ldd	r30, Y+50	; 0x32
   1315e:	fb a9       	ldd	r31, Y+51	; 0x33
   13160:	80 81       	ld	r24, Z
   13162:	98 ad       	ldd	r25, Y+56	; 0x38
   13164:	89 2b       	or	r24, r25
   13166:	80 83       	st	Z, r24
   13168:	e8 a9       	ldd	r30, Y+48	; 0x30
   1316a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1316c:	80 81       	ld	r24, Z
   1316e:	9f a9       	ldd	r25, Y+55	; 0x37
   13170:	89 2b       	or	r24, r25
   13172:	80 83       	st	Z, r24
   13174:	81 b1       	in	r24, 0x01	; 1
   13176:	11 b8       	out	0x01, r1	; 1
   13178:	88 8d       	ldd	r24, Y+24	; 0x18
   1317a:	99 8d       	ldd	r25, Y+25	; 0x19
   1317c:	89 2b       	or	r24, r25
   1317e:	09 f0       	breq	.+2      	; 0x13182 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   13180:	67 c0       	rjmp	.+206    	; 0x13250 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   13182:	f5 01       	movw	r30, r10
   13184:	c6 01       	movw	r24, r12
   13186:	42 e0       	ldi	r20, 0x02	; 2
   13188:	50 e0       	ldi	r21, 0x00	; 0
   1318a:	ac a9       	ldd	r26, Y+52	; 0x34
   1318c:	bd a9       	ldd	r27, Y+53	; 0x35
   1318e:	2c 91       	ld	r18, X
   13190:	3d ad       	ldd	r19, Y+61	; 0x3d
   13192:	23 23       	and	r18, r19
   13194:	2c 93       	st	X, r18
   13196:	20 b1       	in	r18, 0x00	; 0
   13198:	ac a9       	ldd	r26, Y+52	; 0x34
   1319a:	bd a9       	ldd	r27, Y+53	; 0x35
   1319c:	2c 91       	ld	r18, X
   1319e:	39 ad       	ldd	r19, Y+57	; 0x39
   131a0:	23 2b       	or	r18, r19
   131a2:	2c 93       	st	X, r18
   131a4:	ac a9       	ldd	r26, Y+52	; 0x34
   131a6:	bd a9       	ldd	r27, Y+53	; 0x35
   131a8:	2c 91       	ld	r18, X
   131aa:	3d ad       	ldd	r19, Y+61	; 0x3d
   131ac:	23 23       	and	r18, r19
   131ae:	2c 93       	st	X, r18
   131b0:	20 b1       	in	r18, 0x00	; 0
   131b2:	ac a9       	ldd	r26, Y+52	; 0x34
   131b4:	bd a9       	ldd	r27, Y+53	; 0x35
   131b6:	2c 91       	ld	r18, X
   131b8:	39 ad       	ldd	r19, Y+57	; 0x39
   131ba:	23 2b       	or	r18, r19
   131bc:	2c 93       	st	X, r18
   131be:	ac a9       	ldd	r26, Y+52	; 0x34
   131c0:	bd a9       	ldd	r27, Y+53	; 0x35
   131c2:	2c 91       	ld	r18, X
   131c4:	3d ad       	ldd	r19, Y+61	; 0x3d
   131c6:	23 23       	and	r18, r19
   131c8:	2c 93       	st	X, r18
   131ca:	20 b1       	in	r18, 0x00	; 0
   131cc:	ac a9       	ldd	r26, Y+52	; 0x34
   131ce:	bd a9       	ldd	r27, Y+53	; 0x35
   131d0:	3c 91       	ld	r19, X
   131d2:	69 ad       	ldd	r22, Y+57	; 0x39
   131d4:	36 2b       	or	r19, r22
   131d6:	3c 93       	st	X, r19
   131d8:	ac a9       	ldd	r26, Y+52	; 0x34
   131da:	bd a9       	ldd	r27, Y+53	; 0x35
   131dc:	3c 91       	ld	r19, X
   131de:	6d ad       	ldd	r22, Y+61	; 0x3d
   131e0:	36 23       	and	r19, r22
   131e2:	3c 93       	st	X, r19
   131e4:	60 b1       	in	r22, 0x00	; 0
   131e6:	ac a9       	ldd	r26, Y+52	; 0x34
   131e8:	bd a9       	ldd	r27, Y+53	; 0x35
   131ea:	3c 91       	ld	r19, X
   131ec:	79 ad       	ldd	r23, Y+57	; 0x39
   131ee:	37 2b       	or	r19, r23
   131f0:	3c 93       	st	X, r19
   131f2:	41 30       	cpi	r20, 0x01	; 1
   131f4:	51 05       	cpc	r21, r1
   131f6:	49 f5       	brne	.+82     	; 0x1324a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   131f8:	32 2f       	mov	r19, r18
   131fa:	26 2f       	mov	r18, r22
   131fc:	21 93       	st	Z+, r18
   131fe:	31 93       	st	Z+, r19
   13200:	01 97       	sbiw	r24, 0x01	; 1
   13202:	09 f0       	breq	.+2      	; 0x13206 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   13204:	c0 cf       	rjmp	.-128    	; 0x13186 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   13206:	cc 0c       	add	r12, r12
   13208:	dd 1c       	adc	r13, r13
   1320a:	ac 0c       	add	r10, r12
   1320c:	bd 1c       	adc	r11, r13
   1320e:	0c 89       	ldd	r16, Y+20	; 0x14
   13210:	1d 89       	ldd	r17, Y+21	; 0x15
   13212:	01 50       	subi	r16, 0x01	; 1
   13214:	11 09       	sbc	r17, r1
   13216:	2a 89       	ldd	r18, Y+18	; 0x12
   13218:	3b 89       	ldd	r19, Y+19	; 0x13
   1321a:	21 50       	subi	r18, 0x01	; 1
   1321c:	31 09       	sbc	r19, r1
   1321e:	e8 81       	ld	r30, Y
   13220:	f9 81       	ldd	r31, Y+1	; 0x01
   13222:	06 80       	ldd	r0, Z+6	; 0x06
   13224:	f7 81       	ldd	r31, Z+7	; 0x07
   13226:	e0 2d       	mov	r30, r0
   13228:	50 e0       	ldi	r21, 0x00	; 0
   1322a:	40 e0       	ldi	r20, 0x00	; 0
   1322c:	70 e0       	ldi	r23, 0x00	; 0
   1322e:	60 e0       	ldi	r22, 0x00	; 0
   13230:	ce 01       	movw	r24, r28
   13232:	19 95       	eicall
   13234:	ee a5       	ldd	r30, Y+46	; 0x2e
   13236:	ff a5       	ldd	r31, Y+47	; 0x2f
   13238:	80 81       	ld	r24, Z
   1323a:	9e a9       	ldd	r25, Y+54	; 0x36
   1323c:	89 2b       	or	r24, r25
   1323e:	80 83       	st	Z, r24
   13240:	81 b1       	in	r24, 0x01	; 1
   13242:	71 b8       	out	0x01, r7	; 1
   13244:	d1 2c       	mov	r13, r1
   13246:	c1 2c       	mov	r12, r1
   13248:	63 cf       	rjmp	.-314    	; 0x13110 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   1324a:	41 e0       	ldi	r20, 0x01	; 1
   1324c:	50 e0       	ldi	r21, 0x00	; 0
   1324e:	9d cf       	rjmp	.-198    	; 0x1318a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   13250:	ec a9       	ldd	r30, Y+52	; 0x34
   13252:	fd a9       	ldd	r31, Y+53	; 0x35
   13254:	80 81       	ld	r24, Z
   13256:	9d ad       	ldd	r25, Y+61	; 0x3d
   13258:	89 23       	and	r24, r25
   1325a:	80 83       	st	Z, r24
   1325c:	80 b1       	in	r24, 0x00	; 0
   1325e:	ec a9       	ldd	r30, Y+52	; 0x34
   13260:	fd a9       	ldd	r31, Y+53	; 0x35
   13262:	80 81       	ld	r24, Z
   13264:	99 ad       	ldd	r25, Y+57	; 0x39
   13266:	89 2b       	or	r24, r25
   13268:	80 83       	st	Z, r24
   1326a:	75 01       	movw	r14, r10
   1326c:	86 01       	movw	r16, r12
   1326e:	8c a5       	ldd	r24, Y+44	; 0x2c
   13270:	9d a5       	ldd	r25, Y+45	; 0x2d
   13272:	81 30       	cpi	r24, 0x01	; 1
   13274:	91 05       	cpc	r25, r1
   13276:	d9 f5       	brne	.+118    	; 0x132ee <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   13278:	ec a9       	ldd	r30, Y+52	; 0x34
   1327a:	fd a9       	ldd	r31, Y+53	; 0x35
   1327c:	80 81       	ld	r24, Z
   1327e:	9d ad       	ldd	r25, Y+61	; 0x3d
   13280:	89 23       	and	r24, r25
   13282:	80 83       	st	Z, r24
   13284:	60 b1       	in	r22, 0x00	; 0
   13286:	ec a9       	ldd	r30, Y+52	; 0x34
   13288:	fd a9       	ldd	r31, Y+53	; 0x35
   1328a:	80 81       	ld	r24, Z
   1328c:	99 ad       	ldd	r25, Y+57	; 0x39
   1328e:	89 2b       	or	r24, r25
   13290:	80 83       	st	Z, r24
   13292:	ec a9       	ldd	r30, Y+52	; 0x34
   13294:	fd a9       	ldd	r31, Y+53	; 0x35
   13296:	80 81       	ld	r24, Z
   13298:	9d ad       	ldd	r25, Y+61	; 0x3d
   1329a:	89 23       	and	r24, r25
   1329c:	80 83       	st	Z, r24
   1329e:	40 b1       	in	r20, 0x00	; 0
   132a0:	ec a9       	ldd	r30, Y+52	; 0x34
   132a2:	fd a9       	ldd	r31, Y+53	; 0x35
   132a4:	80 81       	ld	r24, Z
   132a6:	99 ad       	ldd	r25, Y+57	; 0x39
   132a8:	89 2b       	or	r24, r25
   132aa:	80 83       	st	Z, r24
   132ac:	ec a9       	ldd	r30, Y+52	; 0x34
   132ae:	fd a9       	ldd	r31, Y+53	; 0x35
   132b0:	80 81       	ld	r24, Z
   132b2:	9d ad       	ldd	r25, Y+61	; 0x3d
   132b4:	89 23       	and	r24, r25
   132b6:	80 83       	st	Z, r24
   132b8:	20 b1       	in	r18, 0x00	; 0
   132ba:	ec a9       	ldd	r30, Y+52	; 0x34
   132bc:	fd a9       	ldd	r31, Y+53	; 0x35
   132be:	80 81       	ld	r24, Z
   132c0:	99 ad       	ldd	r25, Y+57	; 0x39
   132c2:	89 2b       	or	r24, r25
   132c4:	80 83       	st	Z, r24
   132c6:	e8 81       	ld	r30, Y
   132c8:	f9 81       	ldd	r31, Y+1	; 0x01
   132ca:	01 90       	ld	r0, Z+
   132cc:	f0 81       	ld	r31, Z
   132ce:	e0 2d       	mov	r30, r0
   132d0:	ce 01       	movw	r24, r28
   132d2:	19 95       	eicall
   132d4:	4c 01       	movw	r8, r24
   132d6:	f7 01       	movw	r30, r14
   132d8:	81 92       	st	Z+, r8
   132da:	91 92       	st	Z+, r9
   132dc:	7f 01       	movw	r14, r30
   132de:	01 50       	subi	r16, 0x01	; 1
   132e0:	11 09       	sbc	r17, r1
   132e2:	29 f6       	brne	.-118    	; 0x1326e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   132e4:	cc 0c       	add	r12, r12
   132e6:	dd 1c       	adc	r13, r13
   132e8:	ac 0c       	add	r10, r12
   132ea:	bd 1c       	adc	r11, r13
   132ec:	a3 cf       	rjmp	.-186    	; 0x13234 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   132ee:	89 2b       	or	r24, r25
   132f0:	91 f7       	brne	.-28     	; 0x132d6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   132f2:	ec a9       	ldd	r30, Y+52	; 0x34
   132f4:	fd a9       	ldd	r31, Y+53	; 0x35
   132f6:	80 81       	ld	r24, Z
   132f8:	9d ad       	ldd	r25, Y+61	; 0x3d
   132fa:	89 23       	and	r24, r25
   132fc:	80 83       	st	Z, r24
   132fe:	80 b0       	in	r8, 0x00	; 0
   13300:	ec a9       	ldd	r30, Y+52	; 0x34
   13302:	fd a9       	ldd	r31, Y+53	; 0x35
   13304:	80 81       	ld	r24, Z
   13306:	99 ad       	ldd	r25, Y+57	; 0x39
   13308:	89 2b       	or	r24, r25
   1330a:	80 83       	st	Z, r24
   1330c:	ec a9       	ldd	r30, Y+52	; 0x34
   1330e:	fd a9       	ldd	r31, Y+53	; 0x35
   13310:	80 81       	ld	r24, Z
   13312:	9d ad       	ldd	r25, Y+61	; 0x3d
   13314:	89 23       	and	r24, r25
   13316:	80 83       	st	Z, r24
   13318:	90 b1       	in	r25, 0x00	; 0
   1331a:	ec a9       	ldd	r30, Y+52	; 0x34
   1331c:	fd a9       	ldd	r31, Y+53	; 0x35
   1331e:	80 81       	ld	r24, Z
   13320:	29 ad       	ldd	r18, Y+57	; 0x39
   13322:	82 2b       	or	r24, r18
   13324:	80 83       	st	Z, r24
   13326:	98 2c       	mov	r9, r8
   13328:	89 2e       	mov	r8, r25
   1332a:	d5 cf       	rjmp	.-86     	; 0x132d6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   1332c:	90 e0       	ldi	r25, 0x00	; 0
   1332e:	80 e0       	ldi	r24, 0x00	; 0
   13330:	df 91       	pop	r29
   13332:	cf 91       	pop	r28
   13334:	1f 91       	pop	r17
   13336:	0f 91       	pop	r16
   13338:	ff 90       	pop	r15
   1333a:	ef 90       	pop	r14
   1333c:	df 90       	pop	r13
   1333e:	cf 90       	pop	r12
   13340:	bf 90       	pop	r11
   13342:	af 90       	pop	r10
   13344:	9f 90       	pop	r9
   13346:	8f 90       	pop	r8
   13348:	7f 90       	pop	r7
   1334a:	08 95       	ret

0001334c <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   1334c:	fc 01       	movw	r30, r24
   1334e:	82 89       	ldd	r24, Z+18	; 0x12
   13350:	93 89       	ldd	r25, Z+19	; 0x13
   13352:	08 95       	ret

00013354 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   13354:	fc 01       	movw	r30, r24
   13356:	84 89       	ldd	r24, Z+20	; 0x14
   13358:	95 89       	ldd	r25, Z+21	; 0x15
   1335a:	08 95       	ret

0001335c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   1335c:	af 92       	push	r10
   1335e:	bf 92       	push	r11
   13360:	cf 92       	push	r12
   13362:	df 92       	push	r13
   13364:	ef 92       	push	r14
   13366:	ff 92       	push	r15
   13368:	0f 93       	push	r16
   1336a:	1f 93       	push	r17
   1336c:	cf 93       	push	r28
   1336e:	df 93       	push	r29
   13370:	77 fd       	sbrc	r23, 7
   13372:	75 c0       	rjmp	.+234    	; 0x1345e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   13374:	57 fd       	sbrc	r21, 7
   13376:	73 c0       	rjmp	.+230    	; 0x1345e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   13378:	c3 2e       	mov	r12, r19
   1337a:	d2 2e       	mov	r13, r18
   1337c:	5a 01       	movw	r10, r20
   1337e:	7b 01       	movw	r14, r22
   13380:	ec 01       	movw	r28, r24
   13382:	e8 81       	ld	r30, Y
   13384:	f9 81       	ldd	r31, Y+1	; 0x01
   13386:	06 84       	ldd	r0, Z+14	; 0x0e
   13388:	f7 85       	ldd	r31, Z+15	; 0x0f
   1338a:	e0 2d       	mov	r30, r0
   1338c:	19 95       	eicall
   1338e:	8e 15       	cp	r24, r14
   13390:	9f 05       	cpc	r25, r15
   13392:	0c f4       	brge	.+2      	; 0x13396 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   13394:	64 c0       	rjmp	.+200    	; 0x1345e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   13396:	e8 81       	ld	r30, Y
   13398:	f9 81       	ldd	r31, Y+1	; 0x01
   1339a:	04 84       	ldd	r0, Z+12	; 0x0c
   1339c:	f5 85       	ldd	r31, Z+13	; 0x0d
   1339e:	e0 2d       	mov	r30, r0
   133a0:	ce 01       	movw	r24, r28
   133a2:	19 95       	eicall
   133a4:	8a 15       	cp	r24, r10
   133a6:	9b 05       	cpc	r25, r11
   133a8:	0c f4       	brge	.+2      	; 0x133ac <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   133aa:	59 c0       	rjmp	.+178    	; 0x1345e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   133ac:	e8 81       	ld	r30, Y
   133ae:	f9 81       	ldd	r31, Y+1	; 0x01
   133b0:	06 80       	ldd	r0, Z+6	; 0x06
   133b2:	f7 81       	ldd	r31, Z+7	; 0x07
   133b4:	e0 2d       	mov	r30, r0
   133b6:	85 01       	movw	r16, r10
   133b8:	97 01       	movw	r18, r14
   133ba:	a5 01       	movw	r20, r10
   133bc:	b7 01       	movw	r22, r14
   133be:	ce 01       	movw	r24, r28
   133c0:	19 95       	eicall
   133c2:	ee a5       	ldd	r30, Y+46	; 0x2e
   133c4:	ff a5       	ldd	r31, Y+47	; 0x2f
   133c6:	80 81       	ld	r24, Z
   133c8:	9a ad       	ldd	r25, Y+58	; 0x3a
   133ca:	89 23       	and	r24, r25
   133cc:	80 83       	st	Z, r24
   133ce:	98 a1       	ldd	r25, Y+32	; 0x20
   133d0:	29 a1       	ldd	r18, Y+33	; 0x21
   133d2:	e8 a9       	ldd	r30, Y+48	; 0x30
   133d4:	f9 a9       	ldd	r31, Y+49	; 0x31
   133d6:	80 81       	ld	r24, Z
   133d8:	3b ad       	ldd	r19, Y+59	; 0x3b
   133da:	83 23       	and	r24, r19
   133dc:	80 83       	st	Z, r24
   133de:	22 b9       	out	0x02, r18	; 2
   133e0:	ea a9       	ldd	r30, Y+50	; 0x32
   133e2:	fb a9       	ldd	r31, Y+51	; 0x33
   133e4:	80 81       	ld	r24, Z
   133e6:	2c ad       	ldd	r18, Y+60	; 0x3c
   133e8:	82 23       	and	r24, r18
   133ea:	80 83       	st	Z, r24
   133ec:	ea a9       	ldd	r30, Y+50	; 0x32
   133ee:	fb a9       	ldd	r31, Y+51	; 0x33
   133f0:	80 81       	ld	r24, Z
   133f2:	28 ad       	ldd	r18, Y+56	; 0x38
   133f4:	82 2b       	or	r24, r18
   133f6:	80 83       	st	Z, r24
   133f8:	92 b9       	out	0x02, r25	; 2
   133fa:	ea a9       	ldd	r30, Y+50	; 0x32
   133fc:	fb a9       	ldd	r31, Y+51	; 0x33
   133fe:	80 81       	ld	r24, Z
   13400:	9c ad       	ldd	r25, Y+60	; 0x3c
   13402:	89 23       	and	r24, r25
   13404:	80 83       	st	Z, r24
   13406:	ea a9       	ldd	r30, Y+50	; 0x32
   13408:	fb a9       	ldd	r31, Y+51	; 0x33
   1340a:	80 81       	ld	r24, Z
   1340c:	98 ad       	ldd	r25, Y+56	; 0x38
   1340e:	89 2b       	or	r24, r25
   13410:	80 83       	st	Z, r24
   13412:	e8 a9       	ldd	r30, Y+48	; 0x30
   13414:	f9 a9       	ldd	r31, Y+49	; 0x31
   13416:	80 81       	ld	r24, Z
   13418:	9f a9       	ldd	r25, Y+55	; 0x37
   1341a:	89 2b       	or	r24, r25
   1341c:	80 83       	st	Z, r24
   1341e:	c2 b8       	out	0x02, r12	; 2
   13420:	ea a9       	ldd	r30, Y+50	; 0x32
   13422:	fb a9       	ldd	r31, Y+51	; 0x33
   13424:	80 81       	ld	r24, Z
   13426:	9c ad       	ldd	r25, Y+60	; 0x3c
   13428:	89 23       	and	r24, r25
   1342a:	80 83       	st	Z, r24
   1342c:	ea a9       	ldd	r30, Y+50	; 0x32
   1342e:	fb a9       	ldd	r31, Y+51	; 0x33
   13430:	80 81       	ld	r24, Z
   13432:	98 ad       	ldd	r25, Y+56	; 0x38
   13434:	89 2b       	or	r24, r25
   13436:	80 83       	st	Z, r24
   13438:	d2 b8       	out	0x02, r13	; 2
   1343a:	ea a9       	ldd	r30, Y+50	; 0x32
   1343c:	fb a9       	ldd	r31, Y+51	; 0x33
   1343e:	80 81       	ld	r24, Z
   13440:	9c ad       	ldd	r25, Y+60	; 0x3c
   13442:	89 23       	and	r24, r25
   13444:	80 83       	st	Z, r24
   13446:	ea a9       	ldd	r30, Y+50	; 0x32
   13448:	fb a9       	ldd	r31, Y+51	; 0x33
   1344a:	80 81       	ld	r24, Z
   1344c:	98 ad       	ldd	r25, Y+56	; 0x38
   1344e:	89 2b       	or	r24, r25
   13450:	80 83       	st	Z, r24
   13452:	ee a5       	ldd	r30, Y+46	; 0x2e
   13454:	ff a5       	ldd	r31, Y+47	; 0x2f
   13456:	80 81       	ld	r24, Z
   13458:	9e a9       	ldd	r25, Y+54	; 0x36
   1345a:	89 2b       	or	r24, r25
   1345c:	80 83       	st	Z, r24
   1345e:	df 91       	pop	r29
   13460:	cf 91       	pop	r28
   13462:	1f 91       	pop	r17
   13464:	0f 91       	pop	r16
   13466:	ff 90       	pop	r15
   13468:	ef 90       	pop	r14
   1346a:	df 90       	pop	r13
   1346c:	cf 90       	pop	r12
   1346e:	bf 90       	pop	r11
   13470:	af 90       	pop	r10
   13472:	08 95       	ret

00013474 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   13474:	9f 92       	push	r9
   13476:	af 92       	push	r10
   13478:	bf 92       	push	r11
   1347a:	cf 92       	push	r12
   1347c:	df 92       	push	r13
   1347e:	ef 92       	push	r14
   13480:	ff 92       	push	r15
   13482:	0f 93       	push	r16
   13484:	1f 93       	push	r17
   13486:	cf 93       	push	r28
   13488:	df 93       	push	r29
   1348a:	ec 01       	movw	r28, r24
   1348c:	5b 01       	movw	r10, r22
   1348e:	14 2f       	mov	r17, r20
   13490:	d2 2e       	mov	r13, r18
   13492:	9e 2c       	mov	r9, r14
   13494:	0e 94 0c 95 	call	0x12a18	; 0x12a18 <LCDWIKI_GUI::LCDWIKI_GUI()>
   13498:	84 eb       	ldi	r24, 0xB4	; 180
   1349a:	98 e0       	ldi	r25, 0x08	; 8
   1349c:	99 83       	std	Y+1, r25	; 0x01
   1349e:	88 83       	st	Y, r24
   134a0:	ce ae       	std	Y+62, r12	; 0x3e
   134a2:	61 2f       	mov	r22, r17
   134a4:	70 e0       	ldi	r23, 0x00	; 0
   134a6:	fb 01       	movw	r30, r22
   134a8:	ec 57       	subi	r30, 0x7C	; 124
   134aa:	fb 49       	sbci	r31, 0x9B	; 155
   134ac:	e4 91       	lpm	r30, Z
   134ae:	f0 e0       	ldi	r31, 0x00	; 0
   134b0:	ee 0f       	add	r30, r30
   134b2:	ff 1f       	adc	r31, r31
   134b4:	e6 53       	subi	r30, 0x36	; 54
   134b6:	fb 49       	sbci	r31, 0x9B	; 155
   134b8:	a5 91       	lpm	r26, Z+
   134ba:	b4 91       	lpm	r27, Z
   134bc:	bf a7       	std	Y+47, r27	; 0x2f
   134be:	ae a7       	std	Y+46, r26	; 0x2e
   134c0:	4d 2d       	mov	r20, r13
   134c2:	50 e0       	ldi	r21, 0x00	; 0
   134c4:	fa 01       	movw	r30, r20
   134c6:	ec 57       	subi	r30, 0x7C	; 124
   134c8:	fb 49       	sbci	r31, 0x9B	; 155
   134ca:	e4 91       	lpm	r30, Z
   134cc:	f0 e0       	ldi	r31, 0x00	; 0
   134ce:	ee 0f       	add	r30, r30
   134d0:	ff 1f       	adc	r31, r31
   134d2:	e6 53       	subi	r30, 0x36	; 54
   134d4:	fb 49       	sbci	r31, 0x9B	; 155
   134d6:	85 91       	lpm	r24, Z+
   134d8:	94 91       	lpm	r25, Z
   134da:	99 ab       	std	Y+49, r25	; 0x31
   134dc:	88 ab       	std	Y+48, r24	; 0x30
   134de:	20 2f       	mov	r18, r16
   134e0:	30 e0       	ldi	r19, 0x00	; 0
   134e2:	f9 01       	movw	r30, r18
   134e4:	ec 57       	subi	r30, 0x7C	; 124
   134e6:	fb 49       	sbci	r31, 0x9B	; 155
   134e8:	e4 91       	lpm	r30, Z
   134ea:	f0 e0       	ldi	r31, 0x00	; 0
   134ec:	ee 0f       	add	r30, r30
   134ee:	ff 1f       	adc	r31, r31
   134f0:	e6 53       	subi	r30, 0x36	; 54
   134f2:	fb 49       	sbci	r31, 0x9B	; 155
   134f4:	85 91       	lpm	r24, Z+
   134f6:	94 91       	lpm	r25, Z
   134f8:	9b ab       	std	Y+51, r25	; 0x33
   134fa:	8a ab       	std	Y+50, r24	; 0x32
   134fc:	8e 2d       	mov	r24, r14
   134fe:	90 e0       	ldi	r25, 0x00	; 0
   13500:	fc 01       	movw	r30, r24
   13502:	ec 57       	subi	r30, 0x7C	; 124
   13504:	fb 49       	sbci	r31, 0x9B	; 155
   13506:	e4 91       	lpm	r30, Z
   13508:	f0 e0       	ldi	r31, 0x00	; 0
   1350a:	ee 0f       	add	r30, r30
   1350c:	ff 1f       	adc	r31, r31
   1350e:	e6 53       	subi	r30, 0x36	; 54
   13510:	fb 49       	sbci	r31, 0x9B	; 155
   13512:	e5 90       	lpm	r14, Z+
   13514:	f4 90       	lpm	r15, Z
   13516:	fd aa       	std	Y+53, r15	; 0x35
   13518:	ec aa       	std	Y+52, r14	; 0x34
   1351a:	62 5b       	subi	r22, 0xB2	; 178
   1351c:	7b 49       	sbci	r23, 0x9B	; 155
   1351e:	fb 01       	movw	r30, r22
   13520:	64 91       	lpm	r22, Z
   13522:	6e ab       	std	Y+54, r22	; 0x36
   13524:	42 5b       	subi	r20, 0xB2	; 178
   13526:	5b 49       	sbci	r21, 0x9B	; 155
   13528:	fa 01       	movw	r30, r20
   1352a:	44 91       	lpm	r20, Z
   1352c:	4f ab       	std	Y+55, r20	; 0x37
   1352e:	22 5b       	subi	r18, 0xB2	; 178
   13530:	3b 49       	sbci	r19, 0x9B	; 155
   13532:	f9 01       	movw	r30, r18
   13534:	24 91       	lpm	r18, Z
   13536:	28 af       	std	Y+56, r18	; 0x38
   13538:	82 5b       	subi	r24, 0xB2	; 178
   1353a:	9b 49       	sbci	r25, 0x9B	; 155
   1353c:	fc 01       	movw	r30, r24
   1353e:	84 91       	lpm	r24, Z
   13540:	89 af       	std	Y+57, r24	; 0x39
   13542:	96 2f       	mov	r25, r22
   13544:	90 95       	com	r25
   13546:	9a af       	std	Y+58, r25	; 0x3a
   13548:	e4 2f       	mov	r30, r20
   1354a:	e0 95       	com	r30
   1354c:	eb af       	std	Y+59, r30	; 0x3b
   1354e:	20 95       	com	r18
   13550:	2c af       	std	Y+60, r18	; 0x3c
   13552:	80 95       	com	r24
   13554:	8d af       	std	Y+61, r24	; 0x3d
   13556:	ec 91       	ld	r30, X
   13558:	6e 2b       	or	r22, r30
   1355a:	6c 93       	st	X, r22
   1355c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1355e:	f9 a9       	ldd	r31, Y+49	; 0x31
   13560:	80 81       	ld	r24, Z
   13562:	9f a9       	ldd	r25, Y+55	; 0x37
   13564:	89 2b       	or	r24, r25
   13566:	80 83       	st	Z, r24
   13568:	ea a9       	ldd	r30, Y+50	; 0x32
   1356a:	fb a9       	ldd	r31, Y+51	; 0x33
   1356c:	80 81       	ld	r24, Z
   1356e:	98 ad       	ldd	r25, Y+56	; 0x38
   13570:	89 2b       	or	r24, r25
   13572:	80 83       	st	Z, r24
   13574:	ec a9       	ldd	r30, Y+52	; 0x34
   13576:	fd a9       	ldd	r31, Y+53	; 0x35
   13578:	80 81       	ld	r24, Z
   1357a:	99 ad       	ldd	r25, Y+57	; 0x39
   1357c:	89 2b       	or	r24, r25
   1357e:	80 83       	st	Z, r24
   13580:	61 e0       	ldi	r22, 0x01	; 1
   13582:	81 2f       	mov	r24, r17
   13584:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   13588:	61 e0       	ldi	r22, 0x01	; 1
   1358a:	8d 2d       	mov	r24, r13
   1358c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   13590:	61 e0       	ldi	r22, 0x01	; 1
   13592:	80 2f       	mov	r24, r16
   13594:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   13598:	61 e0       	ldi	r22, 0x01	; 1
   1359a:	89 2d       	mov	r24, r9
   1359c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   135a0:	cc 20       	and	r12, r12
   135a2:	41 f0       	breq	.+16     	; 0x135b4 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   135a4:	61 e0       	ldi	r22, 0x01	; 1
   135a6:	8c 2d       	mov	r24, r12
   135a8:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   135ac:	61 e0       	ldi	r22, 0x01	; 1
   135ae:	8c 2d       	mov	r24, r12
   135b0:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   135b4:	1f 8a       	std	Y+23, r1	; 0x17
   135b6:	1e 8a       	std	Y+22, r1	; 0x16
   135b8:	86 e0       	ldi	r24, 0x06	; 6
   135ba:	8a 9d       	mul	r24, r10
   135bc:	f0 01       	movw	r30, r0
   135be:	8b 9d       	mul	r24, r11
   135c0:	f0 0d       	add	r31, r0
   135c2:	11 24       	eor	r1, r1
   135c4:	e4 5c       	subi	r30, 0xC4	; 196
   135c6:	fd 4f       	sbci	r31, 0xFD	; 253
   135c8:	80 81       	ld	r24, Z
   135ca:	91 81       	ldd	r25, Z+1	; 0x01
   135cc:	9b 8f       	std	Y+27, r25	; 0x1b
   135ce:	8a 8f       	std	Y+26, r24	; 0x1a
   135d0:	82 81       	ldd	r24, Z+2	; 0x02
   135d2:	93 81       	ldd	r25, Z+3	; 0x03
   135d4:	9f 87       	std	Y+15, r25	; 0x0f
   135d6:	8e 87       	std	Y+14, r24	; 0x0e
   135d8:	84 81       	ldd	r24, Z+4	; 0x04
   135da:	95 81       	ldd	r25, Z+5	; 0x05
   135dc:	99 8b       	std	Y+17, r25	; 0x11
   135de:	88 8b       	std	Y+16, r24	; 0x10
   135e0:	81 b1       	in	r24, 0x01	; 1
   135e2:	8f ef       	ldi	r24, 0xFF	; 255
   135e4:	81 b9       	out	0x01, r24	; 1
   135e6:	8e 85       	ldd	r24, Y+14	; 0x0e
   135e8:	9f 85       	ldd	r25, Y+15	; 0x0f
   135ea:	9b 8b       	std	Y+19, r25	; 0x13
   135ec:	8a 8b       	std	Y+18, r24	; 0x12
   135ee:	88 89       	ldd	r24, Y+16	; 0x10
   135f0:	99 89       	ldd	r25, Y+17	; 0x11
   135f2:	9d 8b       	std	Y+21, r25	; 0x15
   135f4:	8c 8b       	std	Y+20, r24	; 0x14
   135f6:	df 91       	pop	r29
   135f8:	cf 91       	pop	r28
   135fa:	1f 91       	pop	r17
   135fc:	0f 91       	pop	r16
   135fe:	ff 90       	pop	r15
   13600:	ef 90       	pop	r14
   13602:	df 90       	pop	r13
   13604:	cf 90       	pop	r12
   13606:	bf 90       	pop	r11
   13608:	af 90       	pop	r10
   1360a:	9f 90       	pop	r9
   1360c:	08 95       	ret

0001360e <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   1360e:	cf 93       	push	r28
   13610:	df 93       	push	r29
   13612:	ec 01       	movw	r28, r24
   13614:	ee a5       	ldd	r30, Y+46	; 0x2e
   13616:	ff a5       	ldd	r31, Y+47	; 0x2f
   13618:	80 81       	ld	r24, Z
   1361a:	9e a9       	ldd	r25, Y+54	; 0x36
   1361c:	89 2b       	or	r24, r25
   1361e:	80 83       	st	Z, r24
   13620:	ec a9       	ldd	r30, Y+52	; 0x34
   13622:	fd a9       	ldd	r31, Y+53	; 0x35
   13624:	80 81       	ld	r24, Z
   13626:	99 ad       	ldd	r25, Y+57	; 0x39
   13628:	89 2b       	or	r24, r25
   1362a:	80 83       	st	Z, r24
   1362c:	ea a9       	ldd	r30, Y+50	; 0x32
   1362e:	fb a9       	ldd	r31, Y+51	; 0x33
   13630:	80 81       	ld	r24, Z
   13632:	98 ad       	ldd	r25, Y+56	; 0x38
   13634:	89 2b       	or	r24, r25
   13636:	80 83       	st	Z, r24
   13638:	8e ad       	ldd	r24, Y+62	; 0x3e
   1363a:	88 23       	and	r24, r24
   1363c:	69 f0       	breq	.+26     	; 0x13658 <LCDWIKI_KBV::reset()+0x4a>
   1363e:	60 e0       	ldi	r22, 0x00	; 0
   13640:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   13644:	62 e0       	ldi	r22, 0x02	; 2
   13646:	70 e0       	ldi	r23, 0x00	; 0
   13648:	80 e0       	ldi	r24, 0x00	; 0
   1364a:	90 e0       	ldi	r25, 0x00	; 0
   1364c:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
   13650:	61 e0       	ldi	r22, 0x01	; 1
   13652:	8e ad       	ldd	r24, Y+62	; 0x3e
   13654:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   13658:	ee a5       	ldd	r30, Y+46	; 0x2e
   1365a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1365c:	80 81       	ld	r24, Z
   1365e:	9a ad       	ldd	r25, Y+58	; 0x3a
   13660:	89 23       	and	r24, r25
   13662:	80 83       	st	Z, r24
   13664:	e8 a9       	ldd	r30, Y+48	; 0x30
   13666:	f9 a9       	ldd	r31, Y+49	; 0x31
   13668:	80 81       	ld	r24, Z
   1366a:	9b ad       	ldd	r25, Y+59	; 0x3b
   1366c:	89 23       	and	r24, r25
   1366e:	80 83       	st	Z, r24
   13670:	12 b8       	out	0x02, r1	; 2
   13672:	ea a9       	ldd	r30, Y+50	; 0x32
   13674:	fb a9       	ldd	r31, Y+51	; 0x33
   13676:	80 81       	ld	r24, Z
   13678:	9c ad       	ldd	r25, Y+60	; 0x3c
   1367a:	89 23       	and	r24, r25
   1367c:	80 83       	st	Z, r24
   1367e:	ea a9       	ldd	r30, Y+50	; 0x32
   13680:	fb a9       	ldd	r31, Y+51	; 0x33
   13682:	80 81       	ld	r24, Z
   13684:	98 ad       	ldd	r25, Y+56	; 0x38
   13686:	89 2b       	or	r24, r25
   13688:	80 83       	st	Z, r24
   1368a:	83 e0       	ldi	r24, 0x03	; 3
   1368c:	ea a9       	ldd	r30, Y+50	; 0x32
   1368e:	fb a9       	ldd	r31, Y+51	; 0x33
   13690:	90 81       	ld	r25, Z
   13692:	2c ad       	ldd	r18, Y+60	; 0x3c
   13694:	92 23       	and	r25, r18
   13696:	90 83       	st	Z, r25
   13698:	ea a9       	ldd	r30, Y+50	; 0x32
   1369a:	fb a9       	ldd	r31, Y+51	; 0x33
   1369c:	90 81       	ld	r25, Z
   1369e:	28 ad       	ldd	r18, Y+56	; 0x38
   136a0:	92 2b       	or	r25, r18
   136a2:	90 83       	st	Z, r25
   136a4:	81 50       	subi	r24, 0x01	; 1
   136a6:	91 f7       	brne	.-28     	; 0x1368c <LCDWIKI_KBV::reset()+0x7e>
   136a8:	ee a5       	ldd	r30, Y+46	; 0x2e
   136aa:	ff a5       	ldd	r31, Y+47	; 0x2f
   136ac:	80 81       	ld	r24, Z
   136ae:	9e a9       	ldd	r25, Y+54	; 0x36
   136b0:	89 2b       	or	r24, r25
   136b2:	80 83       	st	Z, r24
   136b4:	df 91       	pop	r29
   136b6:	cf 91       	pop	r28
   136b8:	08 95       	ret

000136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   136ba:	cf 93       	push	r28
   136bc:	df 93       	push	r29
   136be:	fc 01       	movw	r30, r24
   136c0:	a6 a5       	ldd	r26, Z+46	; 0x2e
   136c2:	b7 a5       	ldd	r27, Z+47	; 0x2f
   136c4:	8c 91       	ld	r24, X
   136c6:	92 ad       	ldd	r25, Z+58	; 0x3a
   136c8:	89 23       	and	r24, r25
   136ca:	8c 93       	st	X, r24
   136cc:	a0 a9       	ldd	r26, Z+48	; 0x30
   136ce:	b1 a9       	ldd	r27, Z+49	; 0x31
   136d0:	8c 91       	ld	r24, X
   136d2:	93 ad       	ldd	r25, Z+59	; 0x3b
   136d4:	89 23       	and	r24, r25
   136d6:	8c 93       	st	X, r24
   136d8:	72 b9       	out	0x02, r23	; 2
   136da:	a2 a9       	ldd	r26, Z+50	; 0x32
   136dc:	b3 a9       	ldd	r27, Z+51	; 0x33
   136de:	8c 91       	ld	r24, X
   136e0:	94 ad       	ldd	r25, Z+60	; 0x3c
   136e2:	89 23       	and	r24, r25
   136e4:	8c 93       	st	X, r24
   136e6:	a2 a9       	ldd	r26, Z+50	; 0x32
   136e8:	b3 a9       	ldd	r27, Z+51	; 0x33
   136ea:	8c 91       	ld	r24, X
   136ec:	90 ad       	ldd	r25, Z+56	; 0x38
   136ee:	89 2b       	or	r24, r25
   136f0:	8c 93       	st	X, r24
   136f2:	62 b9       	out	0x02, r22	; 2
   136f4:	a2 a9       	ldd	r26, Z+50	; 0x32
   136f6:	b3 a9       	ldd	r27, Z+51	; 0x33
   136f8:	8c 91       	ld	r24, X
   136fa:	94 ad       	ldd	r25, Z+60	; 0x3c
   136fc:	89 23       	and	r24, r25
   136fe:	8c 93       	st	X, r24
   13700:	a2 a9       	ldd	r26, Z+50	; 0x32
   13702:	b3 a9       	ldd	r27, Z+51	; 0x33
   13704:	8c 91       	ld	r24, X
   13706:	90 ad       	ldd	r25, Z+56	; 0x38
   13708:	89 2b       	or	r24, r25
   1370a:	8c 93       	st	X, r24
   1370c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1370e:	b1 a9       	ldd	r27, Z+49	; 0x31
   13710:	8c 91       	ld	r24, X
   13712:	97 a9       	ldd	r25, Z+55	; 0x37
   13714:	89 2b       	or	r24, r25
   13716:	8c 93       	st	X, r24
   13718:	da 01       	movw	r26, r20
   1371a:	9f ef       	ldi	r25, 0xFF	; 255
   1371c:	92 0f       	add	r25, r18
   1371e:	12 16       	cp	r1, r18
   13720:	0c f0       	brlt	.+2      	; 0x13724 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   13722:	3f c0       	rjmp	.+126    	; 0x137a2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   13724:	8d 91       	ld	r24, X+
   13726:	82 b9       	out	0x02, r24	; 2
   13728:	c2 a9       	ldd	r28, Z+50	; 0x32
   1372a:	d3 a9       	ldd	r29, Z+51	; 0x33
   1372c:	88 81       	ld	r24, Y
   1372e:	24 ad       	ldd	r18, Z+60	; 0x3c
   13730:	82 23       	and	r24, r18
   13732:	88 83       	st	Y, r24
   13734:	c2 a9       	ldd	r28, Z+50	; 0x32
   13736:	d3 a9       	ldd	r29, Z+51	; 0x33
   13738:	88 81       	ld	r24, Y
   1373a:	20 ad       	ldd	r18, Z+56	; 0x38
   1373c:	82 2b       	or	r24, r18
   1373e:	88 83       	st	Y, r24
   13740:	99 23       	and	r25, r25
   13742:	69 f1       	breq	.+90     	; 0x1379e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   13744:	20 8d       	ldd	r18, Z+24	; 0x18
   13746:	31 8d       	ldd	r19, Z+25	; 0x19
   13748:	21 30       	cpi	r18, 0x01	; 1
   1374a:	31 05       	cpc	r19, r1
   1374c:	41 f5       	brne	.+80     	; 0x1379e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   1374e:	6f 5f       	subi	r22, 0xFF	; 255
   13750:	7f 4f       	sbci	r23, 0xFF	; 255
   13752:	c0 a9       	ldd	r28, Z+48	; 0x30
   13754:	d1 a9       	ldd	r29, Z+49	; 0x31
   13756:	88 81       	ld	r24, Y
   13758:	23 ad       	ldd	r18, Z+59	; 0x3b
   1375a:	82 23       	and	r24, r18
   1375c:	88 83       	st	Y, r24
   1375e:	72 b9       	out	0x02, r23	; 2
   13760:	c2 a9       	ldd	r28, Z+50	; 0x32
   13762:	d3 a9       	ldd	r29, Z+51	; 0x33
   13764:	88 81       	ld	r24, Y
   13766:	24 ad       	ldd	r18, Z+60	; 0x3c
   13768:	82 23       	and	r24, r18
   1376a:	88 83       	st	Y, r24
   1376c:	c2 a9       	ldd	r28, Z+50	; 0x32
   1376e:	d3 a9       	ldd	r29, Z+51	; 0x33
   13770:	88 81       	ld	r24, Y
   13772:	20 ad       	ldd	r18, Z+56	; 0x38
   13774:	82 2b       	or	r24, r18
   13776:	88 83       	st	Y, r24
   13778:	62 b9       	out	0x02, r22	; 2
   1377a:	c2 a9       	ldd	r28, Z+50	; 0x32
   1377c:	d3 a9       	ldd	r29, Z+51	; 0x33
   1377e:	88 81       	ld	r24, Y
   13780:	24 ad       	ldd	r18, Z+60	; 0x3c
   13782:	82 23       	and	r24, r18
   13784:	88 83       	st	Y, r24
   13786:	c2 a9       	ldd	r28, Z+50	; 0x32
   13788:	d3 a9       	ldd	r29, Z+51	; 0x33
   1378a:	88 81       	ld	r24, Y
   1378c:	20 ad       	ldd	r18, Z+56	; 0x38
   1378e:	82 2b       	or	r24, r18
   13790:	88 83       	st	Y, r24
   13792:	c0 a9       	ldd	r28, Z+48	; 0x30
   13794:	d1 a9       	ldd	r29, Z+49	; 0x31
   13796:	88 81       	ld	r24, Y
   13798:	27 a9       	ldd	r18, Z+55	; 0x37
   1379a:	82 2b       	or	r24, r18
   1379c:	88 83       	st	Y, r24
   1379e:	29 2f       	mov	r18, r25
   137a0:	bc cf       	rjmp	.-136    	; 0x1371a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   137a2:	a6 a5       	ldd	r26, Z+46	; 0x2e
   137a4:	b7 a5       	ldd	r27, Z+47	; 0x2f
   137a6:	8c 91       	ld	r24, X
   137a8:	96 a9       	ldd	r25, Z+54	; 0x36
   137aa:	89 2b       	or	r24, r25
   137ac:	8c 93       	st	X, r24
   137ae:	df 91       	pop	r29
   137b0:	cf 91       	pop	r28
   137b2:	08 95       	ret

000137b4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   137b4:	af 92       	push	r10
   137b6:	bf 92       	push	r11
   137b8:	cf 92       	push	r12
   137ba:	df 92       	push	r13
   137bc:	ef 92       	push	r14
   137be:	ff 92       	push	r15
   137c0:	0f 93       	push	r16
   137c2:	1f 93       	push	r17
   137c4:	cf 93       	push	r28
   137c6:	df 93       	push	r29
   137c8:	00 d0       	rcall	.+0      	; 0x137ca <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   137ca:	00 d0       	rcall	.+0      	; 0x137cc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   137cc:	1f 92       	push	r1
   137ce:	1f 92       	push	r1
   137d0:	cd b7       	in	r28, 0x3d	; 61
   137d2:	de b7       	in	r29, 0x3e	; 62
   137d4:	7c 01       	movw	r14, r24
   137d6:	dc 01       	movw	r26, r24
   137d8:	9e 96       	adiw	r26, 0x2e	; 46
   137da:	ed 91       	ld	r30, X+
   137dc:	fc 91       	ld	r31, X
   137de:	9f 97       	sbiw	r26, 0x2f	; 47
   137e0:	80 81       	ld	r24, Z
   137e2:	da 96       	adiw	r26, 0x3a	; 58
   137e4:	9c 91       	ld	r25, X
   137e6:	da 97       	sbiw	r26, 0x3a	; 58
   137e8:	89 23       	and	r24, r25
   137ea:	80 83       	st	Z, r24
   137ec:	58 96       	adiw	r26, 0x18	; 24
   137ee:	8d 91       	ld	r24, X+
   137f0:	9c 91       	ld	r25, X
   137f2:	59 97       	sbiw	r26, 0x19	; 25
   137f4:	00 97       	sbiw	r24, 0x00	; 0
   137f6:	09 f0       	breq	.+2      	; 0x137fa <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   137f8:	44 c3       	rjmp	.+1672   	; 0x13e82 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   137fa:	56 96       	adiw	r26, 0x16	; 22
   137fc:	8d 91       	ld	r24, X+
   137fe:	9c 91       	ld	r25, X
   13800:	57 97       	sbiw	r26, 0x17	; 23
   13802:	82 30       	cpi	r24, 0x02	; 2
   13804:	91 05       	cpc	r25, r1
   13806:	09 f4       	brne	.+2      	; 0x1380a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   13808:	0b c3       	rjmp	.+1558   	; 0x13e20 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1380a:	83 30       	cpi	r24, 0x03	; 3
   1380c:	91 05       	cpc	r25, r1
   1380e:	09 f4       	brne	.+2      	; 0x13812 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   13810:	23 c3       	rjmp	.+1606   	; 0x13e58 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   13812:	01 97       	sbiw	r24, 0x01	; 1
   13814:	09 f0       	breq	.+2      	; 0x13818 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   13816:	32 c3       	rjmp	.+1636   	; 0x13e7c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   13818:	1e 96       	adiw	r26, 0x0e	; 14
   1381a:	0d 90       	ld	r0, X+
   1381c:	bc 91       	ld	r27, X
   1381e:	a0 2d       	mov	r26, r0
   13820:	68 01       	movw	r12, r16
   13822:	c0 94       	com	r12
   13824:	d0 94       	com	r13
   13826:	40 95       	com	r20
   13828:	50 95       	com	r21
   1382a:	fa 01       	movw	r30, r20
   1382c:	ea 0f       	add	r30, r26
   1382e:	fb 1f       	adc	r31, r27
   13830:	cb 01       	movw	r24, r22
   13832:	89 01       	movw	r16, r18
   13834:	9f 01       	movw	r18, r30
   13836:	ab 01       	movw	r20, r22
   13838:	b6 01       	movw	r22, r12
   1383a:	6a 0f       	add	r22, r26
   1383c:	7b 1f       	adc	r23, r27
   1383e:	d7 01       	movw	r26, r14
   13840:	d0 96       	adiw	r26, 0x30	; 48
   13842:	cd 90       	ld	r12, X+
   13844:	dc 90       	ld	r13, X
   13846:	d6 01       	movw	r26, r12
   13848:	bc 90       	ld	r11, X
   1384a:	d7 01       	movw	r26, r14
   1384c:	db 96       	adiw	r26, 0x3b	; 59
   1384e:	ac 90       	ld	r10, X
   13850:	ba 20       	and	r11, r10
   13852:	d6 01       	movw	r26, r12
   13854:	bc 92       	st	X, r11
   13856:	12 b8       	out	0x02, r1	; 2
   13858:	d7 01       	movw	r26, r14
   1385a:	d2 96       	adiw	r26, 0x32	; 50
   1385c:	cd 90       	ld	r12, X+
   1385e:	dc 90       	ld	r13, X
   13860:	d6 01       	movw	r26, r12
   13862:	bc 90       	ld	r11, X
   13864:	d7 01       	movw	r26, r14
   13866:	dc 96       	adiw	r26, 0x3c	; 60
   13868:	ac 90       	ld	r10, X
   1386a:	ba 20       	and	r11, r10
   1386c:	d6 01       	movw	r26, r12
   1386e:	bc 92       	st	X, r11
   13870:	d7 01       	movw	r26, r14
   13872:	d2 96       	adiw	r26, 0x32	; 50
   13874:	cd 90       	ld	r12, X+
   13876:	dc 90       	ld	r13, X
   13878:	d6 01       	movw	r26, r12
   1387a:	bc 90       	ld	r11, X
   1387c:	d7 01       	movw	r26, r14
   1387e:	d8 96       	adiw	r26, 0x38	; 56
   13880:	ac 90       	ld	r10, X
   13882:	ba 28       	or	r11, r10
   13884:	d6 01       	movw	r26, r12
   13886:	bc 92       	st	X, r11
   13888:	a0 e5       	ldi	r26, 0x50	; 80
   1388a:	a2 b9       	out	0x02, r26	; 2
   1388c:	d7 01       	movw	r26, r14
   1388e:	d2 96       	adiw	r26, 0x32	; 50
   13890:	cd 90       	ld	r12, X+
   13892:	dc 90       	ld	r13, X
   13894:	d6 01       	movw	r26, r12
   13896:	bc 90       	ld	r11, X
   13898:	d7 01       	movw	r26, r14
   1389a:	dc 96       	adiw	r26, 0x3c	; 60
   1389c:	ac 90       	ld	r10, X
   1389e:	ba 20       	and	r11, r10
   138a0:	d6 01       	movw	r26, r12
   138a2:	bc 92       	st	X, r11
   138a4:	d7 01       	movw	r26, r14
   138a6:	d2 96       	adiw	r26, 0x32	; 50
   138a8:	cd 90       	ld	r12, X+
   138aa:	dc 90       	ld	r13, X
   138ac:	d6 01       	movw	r26, r12
   138ae:	bc 90       	ld	r11, X
   138b0:	d7 01       	movw	r26, r14
   138b2:	d8 96       	adiw	r26, 0x38	; 56
   138b4:	ac 90       	ld	r10, X
   138b6:	ba 28       	or	r11, r10
   138b8:	d6 01       	movw	r26, r12
   138ba:	bc 92       	st	X, r11
   138bc:	d7 01       	movw	r26, r14
   138be:	d0 96       	adiw	r26, 0x30	; 48
   138c0:	cd 90       	ld	r12, X+
   138c2:	dc 90       	ld	r13, X
   138c4:	d6 01       	movw	r26, r12
   138c6:	bc 90       	ld	r11, X
   138c8:	d7 01       	movw	r26, r14
   138ca:	d7 96       	adiw	r26, 0x37	; 55
   138cc:	ac 90       	ld	r10, X
   138ce:	ba 28       	or	r11, r10
   138d0:	d6 01       	movw	r26, r12
   138d2:	bc 92       	st	X, r11
   138d4:	72 b9       	out	0x02, r23	; 2
   138d6:	d7 01       	movw	r26, r14
   138d8:	d2 96       	adiw	r26, 0x32	; 50
   138da:	ad 90       	ld	r10, X+
   138dc:	bc 90       	ld	r11, X
   138de:	d5 01       	movw	r26, r10
   138e0:	7c 91       	ld	r23, X
   138e2:	d7 01       	movw	r26, r14
   138e4:	dc 96       	adiw	r26, 0x3c	; 60
   138e6:	dc 90       	ld	r13, X
   138e8:	7d 21       	and	r23, r13
   138ea:	d5 01       	movw	r26, r10
   138ec:	7c 93       	st	X, r23
   138ee:	d7 01       	movw	r26, r14
   138f0:	d2 96       	adiw	r26, 0x32	; 50
   138f2:	ad 90       	ld	r10, X+
   138f4:	bc 90       	ld	r11, X
   138f6:	d5 01       	movw	r26, r10
   138f8:	7c 91       	ld	r23, X
   138fa:	d7 01       	movw	r26, r14
   138fc:	d8 96       	adiw	r26, 0x38	; 56
   138fe:	dc 90       	ld	r13, X
   13900:	7d 29       	or	r23, r13
   13902:	d5 01       	movw	r26, r10
   13904:	7c 93       	st	X, r23
   13906:	62 b9       	out	0x02, r22	; 2
   13908:	d7 01       	movw	r26, r14
   1390a:	d2 96       	adiw	r26, 0x32	; 50
   1390c:	cd 90       	ld	r12, X+
   1390e:	dc 90       	ld	r13, X
   13910:	d6 01       	movw	r26, r12
   13912:	6c 91       	ld	r22, X
   13914:	d7 01       	movw	r26, r14
   13916:	dc 96       	adiw	r26, 0x3c	; 60
   13918:	7c 91       	ld	r23, X
   1391a:	67 23       	and	r22, r23
   1391c:	d6 01       	movw	r26, r12
   1391e:	6c 93       	st	X, r22
   13920:	d7 01       	movw	r26, r14
   13922:	d2 96       	adiw	r26, 0x32	; 50
   13924:	cd 90       	ld	r12, X+
   13926:	dc 90       	ld	r13, X
   13928:	d6 01       	movw	r26, r12
   1392a:	6c 91       	ld	r22, X
   1392c:	d7 01       	movw	r26, r14
   1392e:	d8 96       	adiw	r26, 0x38	; 56
   13930:	7c 91       	ld	r23, X
   13932:	67 2b       	or	r22, r23
   13934:	d6 01       	movw	r26, r12
   13936:	6c 93       	st	X, r22
   13938:	d7 01       	movw	r26, r14
   1393a:	d0 96       	adiw	r26, 0x30	; 48
   1393c:	cd 90       	ld	r12, X+
   1393e:	dc 90       	ld	r13, X
   13940:	d6 01       	movw	r26, r12
   13942:	6c 91       	ld	r22, X
   13944:	d7 01       	movw	r26, r14
   13946:	db 96       	adiw	r26, 0x3b	; 59
   13948:	7c 91       	ld	r23, X
   1394a:	67 23       	and	r22, r23
   1394c:	d6 01       	movw	r26, r12
   1394e:	6c 93       	st	X, r22
   13950:	12 b8       	out	0x02, r1	; 2
   13952:	d7 01       	movw	r26, r14
   13954:	d2 96       	adiw	r26, 0x32	; 50
   13956:	cd 90       	ld	r12, X+
   13958:	dc 90       	ld	r13, X
   1395a:	d6 01       	movw	r26, r12
   1395c:	6c 91       	ld	r22, X
   1395e:	d7 01       	movw	r26, r14
   13960:	dc 96       	adiw	r26, 0x3c	; 60
   13962:	7c 91       	ld	r23, X
   13964:	67 23       	and	r22, r23
   13966:	d6 01       	movw	r26, r12
   13968:	6c 93       	st	X, r22
   1396a:	d7 01       	movw	r26, r14
   1396c:	d2 96       	adiw	r26, 0x32	; 50
   1396e:	cd 90       	ld	r12, X+
   13970:	dc 90       	ld	r13, X
   13972:	d6 01       	movw	r26, r12
   13974:	6c 91       	ld	r22, X
   13976:	d7 01       	movw	r26, r14
   13978:	d8 96       	adiw	r26, 0x38	; 56
   1397a:	7c 91       	ld	r23, X
   1397c:	67 2b       	or	r22, r23
   1397e:	d6 01       	movw	r26, r12
   13980:	6c 93       	st	X, r22
   13982:	61 e5       	ldi	r22, 0x51	; 81
   13984:	62 b9       	out	0x02, r22	; 2
   13986:	d7 01       	movw	r26, r14
   13988:	d2 96       	adiw	r26, 0x32	; 50
   1398a:	cd 90       	ld	r12, X+
   1398c:	dc 90       	ld	r13, X
   1398e:	d6 01       	movw	r26, r12
   13990:	6c 91       	ld	r22, X
   13992:	d7 01       	movw	r26, r14
   13994:	dc 96       	adiw	r26, 0x3c	; 60
   13996:	7c 91       	ld	r23, X
   13998:	67 23       	and	r22, r23
   1399a:	d6 01       	movw	r26, r12
   1399c:	6c 93       	st	X, r22
   1399e:	d7 01       	movw	r26, r14
   139a0:	d2 96       	adiw	r26, 0x32	; 50
   139a2:	cd 90       	ld	r12, X+
   139a4:	dc 90       	ld	r13, X
   139a6:	d6 01       	movw	r26, r12
   139a8:	6c 91       	ld	r22, X
   139aa:	d7 01       	movw	r26, r14
   139ac:	d8 96       	adiw	r26, 0x38	; 56
   139ae:	7c 91       	ld	r23, X
   139b0:	67 2b       	or	r22, r23
   139b2:	d6 01       	movw	r26, r12
   139b4:	6c 93       	st	X, r22
   139b6:	d7 01       	movw	r26, r14
   139b8:	d0 96       	adiw	r26, 0x30	; 48
   139ba:	cd 90       	ld	r12, X+
   139bc:	dc 90       	ld	r13, X
   139be:	d6 01       	movw	r26, r12
   139c0:	6c 91       	ld	r22, X
   139c2:	d7 01       	movw	r26, r14
   139c4:	d7 96       	adiw	r26, 0x37	; 55
   139c6:	7c 91       	ld	r23, X
   139c8:	67 2b       	or	r22, r23
   139ca:	d6 01       	movw	r26, r12
   139cc:	6c 93       	st	X, r22
   139ce:	32 b9       	out	0x02, r19	; 2
   139d0:	d7 01       	movw	r26, r14
   139d2:	d2 96       	adiw	r26, 0x32	; 50
   139d4:	cd 90       	ld	r12, X+
   139d6:	dc 90       	ld	r13, X
   139d8:	d6 01       	movw	r26, r12
   139da:	3c 91       	ld	r19, X
   139dc:	d7 01       	movw	r26, r14
   139de:	dc 96       	adiw	r26, 0x3c	; 60
   139e0:	6c 91       	ld	r22, X
   139e2:	36 23       	and	r19, r22
   139e4:	d6 01       	movw	r26, r12
   139e6:	3c 93       	st	X, r19
   139e8:	d7 01       	movw	r26, r14
   139ea:	d2 96       	adiw	r26, 0x32	; 50
   139ec:	cd 90       	ld	r12, X+
   139ee:	dc 90       	ld	r13, X
   139f0:	d6 01       	movw	r26, r12
   139f2:	3c 91       	ld	r19, X
   139f4:	d7 01       	movw	r26, r14
   139f6:	d8 96       	adiw	r26, 0x38	; 56
   139f8:	6c 91       	ld	r22, X
   139fa:	36 2b       	or	r19, r22
   139fc:	d6 01       	movw	r26, r12
   139fe:	3c 93       	st	X, r19
   13a00:	22 b9       	out	0x02, r18	; 2
   13a02:	d7 01       	movw	r26, r14
   13a04:	d2 96       	adiw	r26, 0x32	; 50
   13a06:	6d 91       	ld	r22, X+
   13a08:	7c 91       	ld	r23, X
   13a0a:	db 01       	movw	r26, r22
   13a0c:	2c 91       	ld	r18, X
   13a0e:	d7 01       	movw	r26, r14
   13a10:	dc 96       	adiw	r26, 0x3c	; 60
   13a12:	3c 91       	ld	r19, X
   13a14:	23 23       	and	r18, r19
   13a16:	db 01       	movw	r26, r22
   13a18:	2c 93       	st	X, r18
   13a1a:	d7 01       	movw	r26, r14
   13a1c:	d2 96       	adiw	r26, 0x32	; 50
   13a1e:	6d 91       	ld	r22, X+
   13a20:	7c 91       	ld	r23, X
   13a22:	db 01       	movw	r26, r22
   13a24:	2c 91       	ld	r18, X
   13a26:	d7 01       	movw	r26, r14
   13a28:	d8 96       	adiw	r26, 0x38	; 56
   13a2a:	3c 91       	ld	r19, X
   13a2c:	23 2b       	or	r18, r19
   13a2e:	db 01       	movw	r26, r22
   13a30:	2c 93       	st	X, r18
   13a32:	d7 01       	movw	r26, r14
   13a34:	d0 96       	adiw	r26, 0x30	; 48
   13a36:	6d 91       	ld	r22, X+
   13a38:	7c 91       	ld	r23, X
   13a3a:	db 01       	movw	r26, r22
   13a3c:	2c 91       	ld	r18, X
   13a3e:	d7 01       	movw	r26, r14
   13a40:	db 96       	adiw	r26, 0x3b	; 59
   13a42:	3c 91       	ld	r19, X
   13a44:	23 23       	and	r18, r19
   13a46:	db 01       	movw	r26, r22
   13a48:	2c 93       	st	X, r18
   13a4a:	12 b8       	out	0x02, r1	; 2
   13a4c:	d7 01       	movw	r26, r14
   13a4e:	d2 96       	adiw	r26, 0x32	; 50
   13a50:	6d 91       	ld	r22, X+
   13a52:	7c 91       	ld	r23, X
   13a54:	db 01       	movw	r26, r22
   13a56:	2c 91       	ld	r18, X
   13a58:	d7 01       	movw	r26, r14
   13a5a:	dc 96       	adiw	r26, 0x3c	; 60
   13a5c:	3c 91       	ld	r19, X
   13a5e:	23 23       	and	r18, r19
   13a60:	db 01       	movw	r26, r22
   13a62:	2c 93       	st	X, r18
   13a64:	d7 01       	movw	r26, r14
   13a66:	d2 96       	adiw	r26, 0x32	; 50
   13a68:	6d 91       	ld	r22, X+
   13a6a:	7c 91       	ld	r23, X
   13a6c:	db 01       	movw	r26, r22
   13a6e:	2c 91       	ld	r18, X
   13a70:	d7 01       	movw	r26, r14
   13a72:	d8 96       	adiw	r26, 0x38	; 56
   13a74:	3c 91       	ld	r19, X
   13a76:	23 2b       	or	r18, r19
   13a78:	db 01       	movw	r26, r22
   13a7a:	2c 93       	st	X, r18
   13a7c:	22 e5       	ldi	r18, 0x52	; 82
   13a7e:	22 b9       	out	0x02, r18	; 2
   13a80:	d7 01       	movw	r26, r14
   13a82:	d2 96       	adiw	r26, 0x32	; 50
   13a84:	6d 91       	ld	r22, X+
   13a86:	7c 91       	ld	r23, X
   13a88:	db 01       	movw	r26, r22
   13a8a:	2c 91       	ld	r18, X
   13a8c:	d7 01       	movw	r26, r14
   13a8e:	dc 96       	adiw	r26, 0x3c	; 60
   13a90:	3c 91       	ld	r19, X
   13a92:	23 23       	and	r18, r19
   13a94:	db 01       	movw	r26, r22
   13a96:	2c 93       	st	X, r18
   13a98:	d7 01       	movw	r26, r14
   13a9a:	d2 96       	adiw	r26, 0x32	; 50
   13a9c:	6d 91       	ld	r22, X+
   13a9e:	7c 91       	ld	r23, X
   13aa0:	db 01       	movw	r26, r22
   13aa2:	2c 91       	ld	r18, X
   13aa4:	d7 01       	movw	r26, r14
   13aa6:	d8 96       	adiw	r26, 0x38	; 56
   13aa8:	3c 91       	ld	r19, X
   13aaa:	23 2b       	or	r18, r19
   13aac:	db 01       	movw	r26, r22
   13aae:	2c 93       	st	X, r18
   13ab0:	d7 01       	movw	r26, r14
   13ab2:	d0 96       	adiw	r26, 0x30	; 48
   13ab4:	6d 91       	ld	r22, X+
   13ab6:	7c 91       	ld	r23, X
   13ab8:	db 01       	movw	r26, r22
   13aba:	2c 91       	ld	r18, X
   13abc:	d7 01       	movw	r26, r14
   13abe:	d7 96       	adiw	r26, 0x37	; 55
   13ac0:	3c 91       	ld	r19, X
   13ac2:	23 2b       	or	r18, r19
   13ac4:	db 01       	movw	r26, r22
   13ac6:	2c 93       	st	X, r18
   13ac8:	52 b9       	out	0x02, r21	; 2
   13aca:	d7 01       	movw	r26, r14
   13acc:	d2 96       	adiw	r26, 0x32	; 50
   13ace:	6d 91       	ld	r22, X+
   13ad0:	7c 91       	ld	r23, X
   13ad2:	db 01       	movw	r26, r22
   13ad4:	2c 91       	ld	r18, X
   13ad6:	d7 01       	movw	r26, r14
   13ad8:	dc 96       	adiw	r26, 0x3c	; 60
   13ada:	3c 91       	ld	r19, X
   13adc:	23 23       	and	r18, r19
   13ade:	db 01       	movw	r26, r22
   13ae0:	2c 93       	st	X, r18
   13ae2:	d7 01       	movw	r26, r14
   13ae4:	d2 96       	adiw	r26, 0x32	; 50
   13ae6:	6d 91       	ld	r22, X+
   13ae8:	7c 91       	ld	r23, X
   13aea:	db 01       	movw	r26, r22
   13aec:	2c 91       	ld	r18, X
   13aee:	d7 01       	movw	r26, r14
   13af0:	d8 96       	adiw	r26, 0x38	; 56
   13af2:	3c 91       	ld	r19, X
   13af4:	23 2b       	or	r18, r19
   13af6:	db 01       	movw	r26, r22
   13af8:	2c 93       	st	X, r18
   13afa:	42 b9       	out	0x02, r20	; 2
   13afc:	d7 01       	movw	r26, r14
   13afe:	d2 96       	adiw	r26, 0x32	; 50
   13b00:	4d 91       	ld	r20, X+
   13b02:	5c 91       	ld	r21, X
   13b04:	da 01       	movw	r26, r20
   13b06:	2c 91       	ld	r18, X
   13b08:	d7 01       	movw	r26, r14
   13b0a:	dc 96       	adiw	r26, 0x3c	; 60
   13b0c:	3c 91       	ld	r19, X
   13b0e:	23 23       	and	r18, r19
   13b10:	da 01       	movw	r26, r20
   13b12:	2c 93       	st	X, r18
   13b14:	d7 01       	movw	r26, r14
   13b16:	d2 96       	adiw	r26, 0x32	; 50
   13b18:	4d 91       	ld	r20, X+
   13b1a:	5c 91       	ld	r21, X
   13b1c:	da 01       	movw	r26, r20
   13b1e:	2c 91       	ld	r18, X
   13b20:	d7 01       	movw	r26, r14
   13b22:	d8 96       	adiw	r26, 0x38	; 56
   13b24:	3c 91       	ld	r19, X
   13b26:	23 2b       	or	r18, r19
   13b28:	da 01       	movw	r26, r20
   13b2a:	2c 93       	st	X, r18
   13b2c:	d7 01       	movw	r26, r14
   13b2e:	d0 96       	adiw	r26, 0x30	; 48
   13b30:	4d 91       	ld	r20, X+
   13b32:	5c 91       	ld	r21, X
   13b34:	da 01       	movw	r26, r20
   13b36:	2c 91       	ld	r18, X
   13b38:	d7 01       	movw	r26, r14
   13b3a:	db 96       	adiw	r26, 0x3b	; 59
   13b3c:	3c 91       	ld	r19, X
   13b3e:	23 23       	and	r18, r19
   13b40:	da 01       	movw	r26, r20
   13b42:	2c 93       	st	X, r18
   13b44:	12 b8       	out	0x02, r1	; 2
   13b46:	d7 01       	movw	r26, r14
   13b48:	d2 96       	adiw	r26, 0x32	; 50
   13b4a:	4d 91       	ld	r20, X+
   13b4c:	5c 91       	ld	r21, X
   13b4e:	da 01       	movw	r26, r20
   13b50:	2c 91       	ld	r18, X
   13b52:	d7 01       	movw	r26, r14
   13b54:	dc 96       	adiw	r26, 0x3c	; 60
   13b56:	3c 91       	ld	r19, X
   13b58:	23 23       	and	r18, r19
   13b5a:	da 01       	movw	r26, r20
   13b5c:	2c 93       	st	X, r18
   13b5e:	d7 01       	movw	r26, r14
   13b60:	d2 96       	adiw	r26, 0x32	; 50
   13b62:	4d 91       	ld	r20, X+
   13b64:	5c 91       	ld	r21, X
   13b66:	da 01       	movw	r26, r20
   13b68:	2c 91       	ld	r18, X
   13b6a:	d7 01       	movw	r26, r14
   13b6c:	d8 96       	adiw	r26, 0x38	; 56
   13b6e:	3c 91       	ld	r19, X
   13b70:	23 2b       	or	r18, r19
   13b72:	da 01       	movw	r26, r20
   13b74:	2c 93       	st	X, r18
   13b76:	23 e5       	ldi	r18, 0x53	; 83
   13b78:	22 b9       	out	0x02, r18	; 2
   13b7a:	d7 01       	movw	r26, r14
   13b7c:	d2 96       	adiw	r26, 0x32	; 50
   13b7e:	4d 91       	ld	r20, X+
   13b80:	5c 91       	ld	r21, X
   13b82:	da 01       	movw	r26, r20
   13b84:	2c 91       	ld	r18, X
   13b86:	d7 01       	movw	r26, r14
   13b88:	dc 96       	adiw	r26, 0x3c	; 60
   13b8a:	3c 91       	ld	r19, X
   13b8c:	23 23       	and	r18, r19
   13b8e:	da 01       	movw	r26, r20
   13b90:	2c 93       	st	X, r18
   13b92:	d7 01       	movw	r26, r14
   13b94:	d2 96       	adiw	r26, 0x32	; 50
   13b96:	4d 91       	ld	r20, X+
   13b98:	5c 91       	ld	r21, X
   13b9a:	da 01       	movw	r26, r20
   13b9c:	2c 91       	ld	r18, X
   13b9e:	d7 01       	movw	r26, r14
   13ba0:	d8 96       	adiw	r26, 0x38	; 56
   13ba2:	3c 91       	ld	r19, X
   13ba4:	23 2b       	or	r18, r19
   13ba6:	da 01       	movw	r26, r20
   13ba8:	2c 93       	st	X, r18
   13baa:	d7 01       	movw	r26, r14
   13bac:	d0 96       	adiw	r26, 0x30	; 48
   13bae:	4d 91       	ld	r20, X+
   13bb0:	5c 91       	ld	r21, X
   13bb2:	da 01       	movw	r26, r20
   13bb4:	2c 91       	ld	r18, X
   13bb6:	d7 01       	movw	r26, r14
   13bb8:	d7 96       	adiw	r26, 0x37	; 55
   13bba:	3c 91       	ld	r19, X
   13bbc:	23 2b       	or	r18, r19
   13bbe:	da 01       	movw	r26, r20
   13bc0:	2c 93       	st	X, r18
   13bc2:	12 b9       	out	0x02, r17	; 2
   13bc4:	d7 01       	movw	r26, r14
   13bc6:	d2 96       	adiw	r26, 0x32	; 50
   13bc8:	4d 91       	ld	r20, X+
   13bca:	5c 91       	ld	r21, X
   13bcc:	da 01       	movw	r26, r20
   13bce:	2c 91       	ld	r18, X
   13bd0:	d7 01       	movw	r26, r14
   13bd2:	dc 96       	adiw	r26, 0x3c	; 60
   13bd4:	3c 91       	ld	r19, X
   13bd6:	23 23       	and	r18, r19
   13bd8:	da 01       	movw	r26, r20
   13bda:	2c 93       	st	X, r18
   13bdc:	d7 01       	movw	r26, r14
   13bde:	d2 96       	adiw	r26, 0x32	; 50
   13be0:	4d 91       	ld	r20, X+
   13be2:	5c 91       	ld	r21, X
   13be4:	da 01       	movw	r26, r20
   13be6:	2c 91       	ld	r18, X
   13be8:	d7 01       	movw	r26, r14
   13bea:	d8 96       	adiw	r26, 0x38	; 56
   13bec:	3c 91       	ld	r19, X
   13bee:	23 2b       	or	r18, r19
   13bf0:	da 01       	movw	r26, r20
   13bf2:	2c 93       	st	X, r18
   13bf4:	02 b9       	out	0x02, r16	; 2
   13bf6:	d7 01       	movw	r26, r14
   13bf8:	d2 96       	adiw	r26, 0x32	; 50
   13bfa:	4d 91       	ld	r20, X+
   13bfc:	5c 91       	ld	r21, X
   13bfe:	da 01       	movw	r26, r20
   13c00:	2c 91       	ld	r18, X
   13c02:	d7 01       	movw	r26, r14
   13c04:	dc 96       	adiw	r26, 0x3c	; 60
   13c06:	3c 91       	ld	r19, X
   13c08:	23 23       	and	r18, r19
   13c0a:	da 01       	movw	r26, r20
   13c0c:	2c 93       	st	X, r18
   13c0e:	d7 01       	movw	r26, r14
   13c10:	d2 96       	adiw	r26, 0x32	; 50
   13c12:	4d 91       	ld	r20, X+
   13c14:	5c 91       	ld	r21, X
   13c16:	da 01       	movw	r26, r20
   13c18:	2c 91       	ld	r18, X
   13c1a:	d7 01       	movw	r26, r14
   13c1c:	d8 96       	adiw	r26, 0x38	; 56
   13c1e:	3c 91       	ld	r19, X
   13c20:	23 2b       	or	r18, r19
   13c22:	da 01       	movw	r26, r20
   13c24:	2c 93       	st	X, r18
   13c26:	d7 01       	movw	r26, r14
   13c28:	d0 96       	adiw	r26, 0x30	; 48
   13c2a:	4d 91       	ld	r20, X+
   13c2c:	5c 91       	ld	r21, X
   13c2e:	da 01       	movw	r26, r20
   13c30:	2c 91       	ld	r18, X
   13c32:	d7 01       	movw	r26, r14
   13c34:	db 96       	adiw	r26, 0x3b	; 59
   13c36:	3c 91       	ld	r19, X
   13c38:	23 23       	and	r18, r19
   13c3a:	da 01       	movw	r26, r20
   13c3c:	2c 93       	st	X, r18
   13c3e:	12 b8       	out	0x02, r1	; 2
   13c40:	d7 01       	movw	r26, r14
   13c42:	d2 96       	adiw	r26, 0x32	; 50
   13c44:	4d 91       	ld	r20, X+
   13c46:	5c 91       	ld	r21, X
   13c48:	da 01       	movw	r26, r20
   13c4a:	2c 91       	ld	r18, X
   13c4c:	d7 01       	movw	r26, r14
   13c4e:	dc 96       	adiw	r26, 0x3c	; 60
   13c50:	3c 91       	ld	r19, X
   13c52:	23 23       	and	r18, r19
   13c54:	da 01       	movw	r26, r20
   13c56:	2c 93       	st	X, r18
   13c58:	d7 01       	movw	r26, r14
   13c5a:	d2 96       	adiw	r26, 0x32	; 50
   13c5c:	4d 91       	ld	r20, X+
   13c5e:	5c 91       	ld	r21, X
   13c60:	da 01       	movw	r26, r20
   13c62:	2c 91       	ld	r18, X
   13c64:	d7 01       	movw	r26, r14
   13c66:	d8 96       	adiw	r26, 0x38	; 56
   13c68:	3c 91       	ld	r19, X
   13c6a:	23 2b       	or	r18, r19
   13c6c:	da 01       	movw	r26, r20
   13c6e:	2c 93       	st	X, r18
   13c70:	20 e2       	ldi	r18, 0x20	; 32
   13c72:	22 b9       	out	0x02, r18	; 2
   13c74:	d7 01       	movw	r26, r14
   13c76:	d2 96       	adiw	r26, 0x32	; 50
   13c78:	4d 91       	ld	r20, X+
   13c7a:	5c 91       	ld	r21, X
   13c7c:	da 01       	movw	r26, r20
   13c7e:	2c 91       	ld	r18, X
   13c80:	d7 01       	movw	r26, r14
   13c82:	dc 96       	adiw	r26, 0x3c	; 60
   13c84:	3c 91       	ld	r19, X
   13c86:	23 23       	and	r18, r19
   13c88:	da 01       	movw	r26, r20
   13c8a:	2c 93       	st	X, r18
   13c8c:	d7 01       	movw	r26, r14
   13c8e:	d2 96       	adiw	r26, 0x32	; 50
   13c90:	4d 91       	ld	r20, X+
   13c92:	5c 91       	ld	r21, X
   13c94:	da 01       	movw	r26, r20
   13c96:	2c 91       	ld	r18, X
   13c98:	d7 01       	movw	r26, r14
   13c9a:	d8 96       	adiw	r26, 0x38	; 56
   13c9c:	3c 91       	ld	r19, X
   13c9e:	23 2b       	or	r18, r19
   13ca0:	da 01       	movw	r26, r20
   13ca2:	2c 93       	st	X, r18
   13ca4:	d7 01       	movw	r26, r14
   13ca6:	d0 96       	adiw	r26, 0x30	; 48
   13ca8:	4d 91       	ld	r20, X+
   13caa:	5c 91       	ld	r21, X
   13cac:	da 01       	movw	r26, r20
   13cae:	2c 91       	ld	r18, X
   13cb0:	d7 01       	movw	r26, r14
   13cb2:	d7 96       	adiw	r26, 0x37	; 55
   13cb4:	3c 91       	ld	r19, X
   13cb6:	23 2b       	or	r18, r19
   13cb8:	da 01       	movw	r26, r20
   13cba:	2c 93       	st	X, r18
   13cbc:	f2 b9       	out	0x02, r31	; 2
   13cbe:	d7 01       	movw	r26, r14
   13cc0:	d2 96       	adiw	r26, 0x32	; 50
   13cc2:	4d 91       	ld	r20, X+
   13cc4:	5c 91       	ld	r21, X
   13cc6:	da 01       	movw	r26, r20
   13cc8:	2c 91       	ld	r18, X
   13cca:	d7 01       	movw	r26, r14
   13ccc:	dc 96       	adiw	r26, 0x3c	; 60
   13cce:	3c 91       	ld	r19, X
   13cd0:	23 23       	and	r18, r19
   13cd2:	da 01       	movw	r26, r20
   13cd4:	2c 93       	st	X, r18
   13cd6:	d7 01       	movw	r26, r14
   13cd8:	d2 96       	adiw	r26, 0x32	; 50
   13cda:	4d 91       	ld	r20, X+
   13cdc:	5c 91       	ld	r21, X
   13cde:	da 01       	movw	r26, r20
   13ce0:	2c 91       	ld	r18, X
   13ce2:	d7 01       	movw	r26, r14
   13ce4:	d8 96       	adiw	r26, 0x38	; 56
   13ce6:	3c 91       	ld	r19, X
   13ce8:	23 2b       	or	r18, r19
   13cea:	da 01       	movw	r26, r20
   13cec:	2c 93       	st	X, r18
   13cee:	e2 b9       	out	0x02, r30	; 2
   13cf0:	d7 01       	movw	r26, r14
   13cf2:	d2 96       	adiw	r26, 0x32	; 50
   13cf4:	ed 91       	ld	r30, X+
   13cf6:	fc 91       	ld	r31, X
   13cf8:	d3 97       	sbiw	r26, 0x33	; 51
   13cfa:	20 81       	ld	r18, Z
   13cfc:	dc 96       	adiw	r26, 0x3c	; 60
   13cfe:	3c 91       	ld	r19, X
   13d00:	dc 97       	sbiw	r26, 0x3c	; 60
   13d02:	23 23       	and	r18, r19
   13d04:	20 83       	st	Z, r18
   13d06:	d2 96       	adiw	r26, 0x32	; 50
   13d08:	ed 91       	ld	r30, X+
   13d0a:	fc 91       	ld	r31, X
   13d0c:	d3 97       	sbiw	r26, 0x33	; 51
   13d0e:	20 81       	ld	r18, Z
   13d10:	d8 96       	adiw	r26, 0x38	; 56
   13d12:	3c 91       	ld	r19, X
   13d14:	d8 97       	sbiw	r26, 0x38	; 56
   13d16:	23 2b       	or	r18, r19
   13d18:	20 83       	st	Z, r18
   13d1a:	d0 96       	adiw	r26, 0x30	; 48
   13d1c:	ed 91       	ld	r30, X+
   13d1e:	fc 91       	ld	r31, X
   13d20:	d1 97       	sbiw	r26, 0x31	; 49
   13d22:	20 81       	ld	r18, Z
   13d24:	db 96       	adiw	r26, 0x3b	; 59
   13d26:	3c 91       	ld	r19, X
   13d28:	db 97       	sbiw	r26, 0x3b	; 59
   13d2a:	23 23       	and	r18, r19
   13d2c:	20 83       	st	Z, r18
   13d2e:	12 b8       	out	0x02, r1	; 2
   13d30:	d2 96       	adiw	r26, 0x32	; 50
   13d32:	ed 91       	ld	r30, X+
   13d34:	fc 91       	ld	r31, X
   13d36:	d3 97       	sbiw	r26, 0x33	; 51
   13d38:	20 81       	ld	r18, Z
   13d3a:	dc 96       	adiw	r26, 0x3c	; 60
   13d3c:	3c 91       	ld	r19, X
   13d3e:	dc 97       	sbiw	r26, 0x3c	; 60
   13d40:	23 23       	and	r18, r19
   13d42:	20 83       	st	Z, r18
   13d44:	d2 96       	adiw	r26, 0x32	; 50
   13d46:	ed 91       	ld	r30, X+
   13d48:	fc 91       	ld	r31, X
   13d4a:	d3 97       	sbiw	r26, 0x33	; 51
   13d4c:	20 81       	ld	r18, Z
   13d4e:	d8 96       	adiw	r26, 0x38	; 56
   13d50:	3c 91       	ld	r19, X
   13d52:	d8 97       	sbiw	r26, 0x38	; 56
   13d54:	23 2b       	or	r18, r19
   13d56:	20 83       	st	Z, r18
   13d58:	21 e2       	ldi	r18, 0x21	; 33
   13d5a:	22 b9       	out	0x02, r18	; 2
   13d5c:	d2 96       	adiw	r26, 0x32	; 50
   13d5e:	ed 91       	ld	r30, X+
   13d60:	fc 91       	ld	r31, X
   13d62:	d3 97       	sbiw	r26, 0x33	; 51
   13d64:	20 81       	ld	r18, Z
   13d66:	dc 96       	adiw	r26, 0x3c	; 60
   13d68:	3c 91       	ld	r19, X
   13d6a:	dc 97       	sbiw	r26, 0x3c	; 60
   13d6c:	23 23       	and	r18, r19
   13d6e:	20 83       	st	Z, r18
   13d70:	d2 96       	adiw	r26, 0x32	; 50
   13d72:	ed 91       	ld	r30, X+
   13d74:	fc 91       	ld	r31, X
   13d76:	d3 97       	sbiw	r26, 0x33	; 51
   13d78:	20 81       	ld	r18, Z
   13d7a:	d8 96       	adiw	r26, 0x38	; 56
   13d7c:	3c 91       	ld	r19, X
   13d7e:	d8 97       	sbiw	r26, 0x38	; 56
   13d80:	23 2b       	or	r18, r19
   13d82:	20 83       	st	Z, r18
   13d84:	d0 96       	adiw	r26, 0x30	; 48
   13d86:	ed 91       	ld	r30, X+
   13d88:	fc 91       	ld	r31, X
   13d8a:	d1 97       	sbiw	r26, 0x31	; 49
   13d8c:	20 81       	ld	r18, Z
   13d8e:	d7 96       	adiw	r26, 0x37	; 55
   13d90:	3c 91       	ld	r19, X
   13d92:	d7 97       	sbiw	r26, 0x37	; 55
   13d94:	23 2b       	or	r18, r19
   13d96:	20 83       	st	Z, r18
   13d98:	92 b9       	out	0x02, r25	; 2
   13d9a:	d2 96       	adiw	r26, 0x32	; 50
   13d9c:	ed 91       	ld	r30, X+
   13d9e:	fc 91       	ld	r31, X
   13da0:	d3 97       	sbiw	r26, 0x33	; 51
   13da2:	90 81       	ld	r25, Z
   13da4:	dc 96       	adiw	r26, 0x3c	; 60
   13da6:	2c 91       	ld	r18, X
   13da8:	dc 97       	sbiw	r26, 0x3c	; 60
   13daa:	92 23       	and	r25, r18
   13dac:	90 83       	st	Z, r25
   13dae:	d2 96       	adiw	r26, 0x32	; 50
   13db0:	ed 91       	ld	r30, X+
   13db2:	fc 91       	ld	r31, X
   13db4:	d3 97       	sbiw	r26, 0x33	; 51
   13db6:	90 81       	ld	r25, Z
   13db8:	d8 96       	adiw	r26, 0x38	; 56
   13dba:	2c 91       	ld	r18, X
   13dbc:	d8 97       	sbiw	r26, 0x38	; 56
   13dbe:	92 2b       	or	r25, r18
   13dc0:	90 83       	st	Z, r25
   13dc2:	82 b9       	out	0x02, r24	; 2
   13dc4:	d2 96       	adiw	r26, 0x32	; 50
   13dc6:	ed 91       	ld	r30, X+
   13dc8:	fc 91       	ld	r31, X
   13dca:	d3 97       	sbiw	r26, 0x33	; 51
   13dcc:	80 81       	ld	r24, Z
   13dce:	dc 96       	adiw	r26, 0x3c	; 60
   13dd0:	9c 91       	ld	r25, X
   13dd2:	dc 97       	sbiw	r26, 0x3c	; 60
   13dd4:	89 23       	and	r24, r25
   13dd6:	80 83       	st	Z, r24
   13dd8:	d2 96       	adiw	r26, 0x32	; 50
   13dda:	ed 91       	ld	r30, X+
   13ddc:	fc 91       	ld	r31, X
   13dde:	d3 97       	sbiw	r26, 0x33	; 51
   13de0:	80 81       	ld	r24, Z
   13de2:	d8 96       	adiw	r26, 0x38	; 56
   13de4:	9c 91       	ld	r25, X
   13de6:	89 2b       	or	r24, r25
   13de8:	80 83       	st	Z, r24
   13dea:	d7 01       	movw	r26, r14
   13dec:	9e 96       	adiw	r26, 0x2e	; 46
   13dee:	ed 91       	ld	r30, X+
   13df0:	fc 91       	ld	r31, X
   13df2:	9f 97       	sbiw	r26, 0x2f	; 47
   13df4:	80 81       	ld	r24, Z
   13df6:	d6 96       	adiw	r26, 0x36	; 54
   13df8:	9c 91       	ld	r25, X
   13dfa:	89 2b       	or	r24, r25
   13dfc:	80 83       	st	Z, r24
   13dfe:	28 96       	adiw	r28, 0x08	; 8
   13e00:	0f b6       	in	r0, 0x3f	; 63
   13e02:	f8 94       	cli
   13e04:	de bf       	out	0x3e, r29	; 62
   13e06:	0f be       	out	0x3f, r0	; 63
   13e08:	cd bf       	out	0x3d, r28	; 61
   13e0a:	df 91       	pop	r29
   13e0c:	cf 91       	pop	r28
   13e0e:	1f 91       	pop	r17
   13e10:	0f 91       	pop	r16
   13e12:	ff 90       	pop	r15
   13e14:	ef 90       	pop	r14
   13e16:	df 90       	pop	r13
   13e18:	cf 90       	pop	r12
   13e1a:	bf 90       	pop	r11
   13e1c:	af 90       	pop	r10
   13e1e:	08 95       	ret
   13e20:	f7 01       	movw	r30, r14
   13e22:	a6 85       	ldd	r26, Z+14	; 0x0e
   13e24:	b7 85       	ldd	r27, Z+15	; 0x0f
   13e26:	59 01       	movw	r10, r18
   13e28:	a0 94       	com	r10
   13e2a:	b0 94       	com	r11
   13e2c:	9d 01       	movw	r18, r26
   13e2e:	26 1b       	sub	r18, r22
   13e30:	37 0b       	sbc	r19, r23
   13e32:	21 50       	subi	r18, 0x01	; 1
   13e34:	31 09       	sbc	r19, r1
   13e36:	60 89       	ldd	r22, Z+16	; 0x10
   13e38:	71 89       	ldd	r23, Z+17	; 0x11
   13e3a:	68 01       	movw	r12, r16
   13e3c:	c0 94       	com	r12
   13e3e:	d0 94       	com	r13
   13e40:	8a 01       	movw	r16, r20
   13e42:	00 95       	com	r16
   13e44:	10 95       	com	r17
   13e46:	06 0f       	add	r16, r22
   13e48:	17 1f       	adc	r17, r23
   13e4a:	c8 01       	movw	r24, r16
   13e4c:	f9 01       	movw	r30, r18
   13e4e:	a6 01       	movw	r20, r12
   13e50:	46 0f       	add	r20, r22
   13e52:	57 1f       	adc	r21, r23
   13e54:	b5 01       	movw	r22, r10
   13e56:	f1 cc       	rjmp	.-1566   	; 0x1383a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   13e58:	f7 01       	movw	r30, r14
   13e5a:	a0 89       	ldd	r26, Z+16	; 0x10
   13e5c:	b1 89       	ldd	r27, Z+17	; 0x11
   13e5e:	69 01       	movw	r12, r18
   13e60:	c0 94       	com	r12
   13e62:	d0 94       	com	r13
   13e64:	cd 01       	movw	r24, r26
   13e66:	86 1b       	sub	r24, r22
   13e68:	97 0b       	sbc	r25, r23
   13e6a:	01 97       	sbiw	r24, 0x01	; 1
   13e6c:	fa 01       	movw	r30, r20
   13e6e:	98 01       	movw	r18, r16
   13e70:	8c 01       	movw	r16, r24
   13e72:	ba 01       	movw	r22, r20
   13e74:	a6 01       	movw	r20, r12
   13e76:	4a 0f       	add	r20, r26
   13e78:	5b 1f       	adc	r21, r27
   13e7a:	e1 cc       	rjmp	.-1598   	; 0x1383e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   13e7c:	ca 01       	movw	r24, r20
   13e7e:	fb 01       	movw	r30, r22
   13e80:	de cc       	rjmp	.-1604   	; 0x1383e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   13e82:	01 97       	sbiw	r24, 0x01	; 1
   13e84:	09 f0       	breq	.+2      	; 0x13e88 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   13e86:	e5 c1       	rjmp	.+970    	; 0x14252 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   13e88:	d0 96       	adiw	r26, 0x30	; 48
   13e8a:	ed 91       	ld	r30, X+
   13e8c:	fc 91       	ld	r31, X
   13e8e:	d1 97       	sbiw	r26, 0x31	; 49
   13e90:	80 81       	ld	r24, Z
   13e92:	db 96       	adiw	r26, 0x3b	; 59
   13e94:	9c 91       	ld	r25, X
   13e96:	db 97       	sbiw	r26, 0x3b	; 59
   13e98:	89 23       	and	r24, r25
   13e9a:	80 83       	st	Z, r24
   13e9c:	82 e0       	ldi	r24, 0x02	; 2
   13e9e:	82 b9       	out	0x02, r24	; 2
   13ea0:	d2 96       	adiw	r26, 0x32	; 50
   13ea2:	ed 91       	ld	r30, X+
   13ea4:	fc 91       	ld	r31, X
   13ea6:	d3 97       	sbiw	r26, 0x33	; 51
   13ea8:	80 81       	ld	r24, Z
   13eaa:	dc 96       	adiw	r26, 0x3c	; 60
   13eac:	9c 91       	ld	r25, X
   13eae:	dc 97       	sbiw	r26, 0x3c	; 60
   13eb0:	89 23       	and	r24, r25
   13eb2:	80 83       	st	Z, r24
   13eb4:	d2 96       	adiw	r26, 0x32	; 50
   13eb6:	ed 91       	ld	r30, X+
   13eb8:	fc 91       	ld	r31, X
   13eba:	d3 97       	sbiw	r26, 0x33	; 51
   13ebc:	80 81       	ld	r24, Z
   13ebe:	d8 96       	adiw	r26, 0x38	; 56
   13ec0:	9c 91       	ld	r25, X
   13ec2:	d8 97       	sbiw	r26, 0x38	; 56
   13ec4:	89 2b       	or	r24, r25
   13ec6:	80 83       	st	Z, r24
   13ec8:	d0 96       	adiw	r26, 0x30	; 48
   13eca:	ed 91       	ld	r30, X+
   13ecc:	fc 91       	ld	r31, X
   13ece:	d1 97       	sbiw	r26, 0x31	; 49
   13ed0:	80 81       	ld	r24, Z
   13ed2:	d7 96       	adiw	r26, 0x37	; 55
   13ed4:	9c 91       	ld	r25, X
   13ed6:	d7 97       	sbiw	r26, 0x37	; 55
   13ed8:	89 2b       	or	r24, r25
   13eda:	80 83       	st	Z, r24
   13edc:	72 b9       	out	0x02, r23	; 2
   13ede:	d2 96       	adiw	r26, 0x32	; 50
   13ee0:	ed 91       	ld	r30, X+
   13ee2:	fc 91       	ld	r31, X
   13ee4:	d3 97       	sbiw	r26, 0x33	; 51
   13ee6:	80 81       	ld	r24, Z
   13ee8:	dc 96       	adiw	r26, 0x3c	; 60
   13eea:	9c 91       	ld	r25, X
   13eec:	dc 97       	sbiw	r26, 0x3c	; 60
   13eee:	89 23       	and	r24, r25
   13ef0:	80 83       	st	Z, r24
   13ef2:	d2 96       	adiw	r26, 0x32	; 50
   13ef4:	ed 91       	ld	r30, X+
   13ef6:	fc 91       	ld	r31, X
   13ef8:	d3 97       	sbiw	r26, 0x33	; 51
   13efa:	80 81       	ld	r24, Z
   13efc:	d8 96       	adiw	r26, 0x38	; 56
   13efe:	9c 91       	ld	r25, X
   13f00:	d8 97       	sbiw	r26, 0x38	; 56
   13f02:	89 2b       	or	r24, r25
   13f04:	80 83       	st	Z, r24
   13f06:	d0 96       	adiw	r26, 0x30	; 48
   13f08:	ed 91       	ld	r30, X+
   13f0a:	fc 91       	ld	r31, X
   13f0c:	d1 97       	sbiw	r26, 0x31	; 49
   13f0e:	80 81       	ld	r24, Z
   13f10:	db 96       	adiw	r26, 0x3b	; 59
   13f12:	9c 91       	ld	r25, X
   13f14:	db 97       	sbiw	r26, 0x3b	; 59
   13f16:	89 23       	and	r24, r25
   13f18:	80 83       	st	Z, r24
   13f1a:	83 e0       	ldi	r24, 0x03	; 3
   13f1c:	82 b9       	out	0x02, r24	; 2
   13f1e:	d2 96       	adiw	r26, 0x32	; 50
   13f20:	ed 91       	ld	r30, X+
   13f22:	fc 91       	ld	r31, X
   13f24:	d3 97       	sbiw	r26, 0x33	; 51
   13f26:	80 81       	ld	r24, Z
   13f28:	dc 96       	adiw	r26, 0x3c	; 60
   13f2a:	9c 91       	ld	r25, X
   13f2c:	dc 97       	sbiw	r26, 0x3c	; 60
   13f2e:	89 23       	and	r24, r25
   13f30:	80 83       	st	Z, r24
   13f32:	d2 96       	adiw	r26, 0x32	; 50
   13f34:	ed 91       	ld	r30, X+
   13f36:	fc 91       	ld	r31, X
   13f38:	d3 97       	sbiw	r26, 0x33	; 51
   13f3a:	80 81       	ld	r24, Z
   13f3c:	d8 96       	adiw	r26, 0x38	; 56
   13f3e:	9c 91       	ld	r25, X
   13f40:	d8 97       	sbiw	r26, 0x38	; 56
   13f42:	89 2b       	or	r24, r25
   13f44:	80 83       	st	Z, r24
   13f46:	d0 96       	adiw	r26, 0x30	; 48
   13f48:	ed 91       	ld	r30, X+
   13f4a:	fc 91       	ld	r31, X
   13f4c:	d1 97       	sbiw	r26, 0x31	; 49
   13f4e:	80 81       	ld	r24, Z
   13f50:	d7 96       	adiw	r26, 0x37	; 55
   13f52:	9c 91       	ld	r25, X
   13f54:	d7 97       	sbiw	r26, 0x37	; 55
   13f56:	89 2b       	or	r24, r25
   13f58:	80 83       	st	Z, r24
   13f5a:	62 b9       	out	0x02, r22	; 2
   13f5c:	d2 96       	adiw	r26, 0x32	; 50
   13f5e:	ed 91       	ld	r30, X+
   13f60:	fc 91       	ld	r31, X
   13f62:	d3 97       	sbiw	r26, 0x33	; 51
   13f64:	80 81       	ld	r24, Z
   13f66:	dc 96       	adiw	r26, 0x3c	; 60
   13f68:	9c 91       	ld	r25, X
   13f6a:	dc 97       	sbiw	r26, 0x3c	; 60
   13f6c:	89 23       	and	r24, r25
   13f6e:	80 83       	st	Z, r24
   13f70:	d2 96       	adiw	r26, 0x32	; 50
   13f72:	ed 91       	ld	r30, X+
   13f74:	fc 91       	ld	r31, X
   13f76:	d3 97       	sbiw	r26, 0x33	; 51
   13f78:	80 81       	ld	r24, Z
   13f7a:	d8 96       	adiw	r26, 0x38	; 56
   13f7c:	9c 91       	ld	r25, X
   13f7e:	d8 97       	sbiw	r26, 0x38	; 56
   13f80:	89 2b       	or	r24, r25
   13f82:	80 83       	st	Z, r24
   13f84:	d0 96       	adiw	r26, 0x30	; 48
   13f86:	ed 91       	ld	r30, X+
   13f88:	fc 91       	ld	r31, X
   13f8a:	d1 97       	sbiw	r26, 0x31	; 49
   13f8c:	80 81       	ld	r24, Z
   13f8e:	db 96       	adiw	r26, 0x3b	; 59
   13f90:	9c 91       	ld	r25, X
   13f92:	db 97       	sbiw	r26, 0x3b	; 59
   13f94:	89 23       	and	r24, r25
   13f96:	80 83       	st	Z, r24
   13f98:	86 e0       	ldi	r24, 0x06	; 6
   13f9a:	82 b9       	out	0x02, r24	; 2
   13f9c:	d2 96       	adiw	r26, 0x32	; 50
   13f9e:	ed 91       	ld	r30, X+
   13fa0:	fc 91       	ld	r31, X
   13fa2:	d3 97       	sbiw	r26, 0x33	; 51
   13fa4:	80 81       	ld	r24, Z
   13fa6:	dc 96       	adiw	r26, 0x3c	; 60
   13fa8:	9c 91       	ld	r25, X
   13faa:	dc 97       	sbiw	r26, 0x3c	; 60
   13fac:	89 23       	and	r24, r25
   13fae:	80 83       	st	Z, r24
   13fb0:	d2 96       	adiw	r26, 0x32	; 50
   13fb2:	ed 91       	ld	r30, X+
   13fb4:	fc 91       	ld	r31, X
   13fb6:	d3 97       	sbiw	r26, 0x33	; 51
   13fb8:	80 81       	ld	r24, Z
   13fba:	d8 96       	adiw	r26, 0x38	; 56
   13fbc:	9c 91       	ld	r25, X
   13fbe:	d8 97       	sbiw	r26, 0x38	; 56
   13fc0:	89 2b       	or	r24, r25
   13fc2:	80 83       	st	Z, r24
   13fc4:	d0 96       	adiw	r26, 0x30	; 48
   13fc6:	ed 91       	ld	r30, X+
   13fc8:	fc 91       	ld	r31, X
   13fca:	d1 97       	sbiw	r26, 0x31	; 49
   13fcc:	80 81       	ld	r24, Z
   13fce:	d7 96       	adiw	r26, 0x37	; 55
   13fd0:	9c 91       	ld	r25, X
   13fd2:	d7 97       	sbiw	r26, 0x37	; 55
   13fd4:	89 2b       	or	r24, r25
   13fd6:	80 83       	st	Z, r24
   13fd8:	52 b9       	out	0x02, r21	; 2
   13fda:	d2 96       	adiw	r26, 0x32	; 50
   13fdc:	ed 91       	ld	r30, X+
   13fde:	fc 91       	ld	r31, X
   13fe0:	d3 97       	sbiw	r26, 0x33	; 51
   13fe2:	80 81       	ld	r24, Z
   13fe4:	dc 96       	adiw	r26, 0x3c	; 60
   13fe6:	9c 91       	ld	r25, X
   13fe8:	dc 97       	sbiw	r26, 0x3c	; 60
   13fea:	89 23       	and	r24, r25
   13fec:	80 83       	st	Z, r24
   13fee:	d2 96       	adiw	r26, 0x32	; 50
   13ff0:	ed 91       	ld	r30, X+
   13ff2:	fc 91       	ld	r31, X
   13ff4:	d3 97       	sbiw	r26, 0x33	; 51
   13ff6:	80 81       	ld	r24, Z
   13ff8:	d8 96       	adiw	r26, 0x38	; 56
   13ffa:	9c 91       	ld	r25, X
   13ffc:	d8 97       	sbiw	r26, 0x38	; 56
   13ffe:	89 2b       	or	r24, r25
   14000:	80 83       	st	Z, r24
   14002:	d0 96       	adiw	r26, 0x30	; 48
   14004:	ed 91       	ld	r30, X+
   14006:	fc 91       	ld	r31, X
   14008:	d1 97       	sbiw	r26, 0x31	; 49
   1400a:	80 81       	ld	r24, Z
   1400c:	db 96       	adiw	r26, 0x3b	; 59
   1400e:	9c 91       	ld	r25, X
   14010:	db 97       	sbiw	r26, 0x3b	; 59
   14012:	89 23       	and	r24, r25
   14014:	80 83       	st	Z, r24
   14016:	87 e0       	ldi	r24, 0x07	; 7
   14018:	82 b9       	out	0x02, r24	; 2
   1401a:	d2 96       	adiw	r26, 0x32	; 50
   1401c:	ed 91       	ld	r30, X+
   1401e:	fc 91       	ld	r31, X
   14020:	d3 97       	sbiw	r26, 0x33	; 51
   14022:	80 81       	ld	r24, Z
   14024:	dc 96       	adiw	r26, 0x3c	; 60
   14026:	9c 91       	ld	r25, X
   14028:	dc 97       	sbiw	r26, 0x3c	; 60
   1402a:	89 23       	and	r24, r25
   1402c:	80 83       	st	Z, r24
   1402e:	d2 96       	adiw	r26, 0x32	; 50
   14030:	ed 91       	ld	r30, X+
   14032:	fc 91       	ld	r31, X
   14034:	d3 97       	sbiw	r26, 0x33	; 51
   14036:	80 81       	ld	r24, Z
   14038:	d8 96       	adiw	r26, 0x38	; 56
   1403a:	9c 91       	ld	r25, X
   1403c:	d8 97       	sbiw	r26, 0x38	; 56
   1403e:	89 2b       	or	r24, r25
   14040:	80 83       	st	Z, r24
   14042:	d0 96       	adiw	r26, 0x30	; 48
   14044:	ed 91       	ld	r30, X+
   14046:	fc 91       	ld	r31, X
   14048:	d1 97       	sbiw	r26, 0x31	; 49
   1404a:	80 81       	ld	r24, Z
   1404c:	d7 96       	adiw	r26, 0x37	; 55
   1404e:	9c 91       	ld	r25, X
   14050:	d7 97       	sbiw	r26, 0x37	; 55
   14052:	89 2b       	or	r24, r25
   14054:	80 83       	st	Z, r24
   14056:	42 b9       	out	0x02, r20	; 2
   14058:	d2 96       	adiw	r26, 0x32	; 50
   1405a:	ed 91       	ld	r30, X+
   1405c:	fc 91       	ld	r31, X
   1405e:	d3 97       	sbiw	r26, 0x33	; 51
   14060:	80 81       	ld	r24, Z
   14062:	dc 96       	adiw	r26, 0x3c	; 60
   14064:	9c 91       	ld	r25, X
   14066:	dc 97       	sbiw	r26, 0x3c	; 60
   14068:	89 23       	and	r24, r25
   1406a:	80 83       	st	Z, r24
   1406c:	d2 96       	adiw	r26, 0x32	; 50
   1406e:	ed 91       	ld	r30, X+
   14070:	fc 91       	ld	r31, X
   14072:	d3 97       	sbiw	r26, 0x33	; 51
   14074:	80 81       	ld	r24, Z
   14076:	d8 96       	adiw	r26, 0x38	; 56
   14078:	9c 91       	ld	r25, X
   1407a:	d8 97       	sbiw	r26, 0x38	; 56
   1407c:	89 2b       	or	r24, r25
   1407e:	80 83       	st	Z, r24
   14080:	d0 96       	adiw	r26, 0x30	; 48
   14082:	ed 91       	ld	r30, X+
   14084:	fc 91       	ld	r31, X
   14086:	d1 97       	sbiw	r26, 0x31	; 49
   14088:	80 81       	ld	r24, Z
   1408a:	db 96       	adiw	r26, 0x3b	; 59
   1408c:	9c 91       	ld	r25, X
   1408e:	db 97       	sbiw	r26, 0x3b	; 59
   14090:	89 23       	and	r24, r25
   14092:	80 83       	st	Z, r24
   14094:	84 e0       	ldi	r24, 0x04	; 4
   14096:	82 b9       	out	0x02, r24	; 2
   14098:	d2 96       	adiw	r26, 0x32	; 50
   1409a:	ed 91       	ld	r30, X+
   1409c:	fc 91       	ld	r31, X
   1409e:	d3 97       	sbiw	r26, 0x33	; 51
   140a0:	80 81       	ld	r24, Z
   140a2:	dc 96       	adiw	r26, 0x3c	; 60
   140a4:	9c 91       	ld	r25, X
   140a6:	dc 97       	sbiw	r26, 0x3c	; 60
   140a8:	89 23       	and	r24, r25
   140aa:	80 83       	st	Z, r24
   140ac:	d2 96       	adiw	r26, 0x32	; 50
   140ae:	ed 91       	ld	r30, X+
   140b0:	fc 91       	ld	r31, X
   140b2:	d3 97       	sbiw	r26, 0x33	; 51
   140b4:	80 81       	ld	r24, Z
   140b6:	d8 96       	adiw	r26, 0x38	; 56
   140b8:	9c 91       	ld	r25, X
   140ba:	d8 97       	sbiw	r26, 0x38	; 56
   140bc:	89 2b       	or	r24, r25
   140be:	80 83       	st	Z, r24
   140c0:	d0 96       	adiw	r26, 0x30	; 48
   140c2:	ed 91       	ld	r30, X+
   140c4:	fc 91       	ld	r31, X
   140c6:	d1 97       	sbiw	r26, 0x31	; 49
   140c8:	80 81       	ld	r24, Z
   140ca:	d7 96       	adiw	r26, 0x37	; 55
   140cc:	9c 91       	ld	r25, X
   140ce:	d7 97       	sbiw	r26, 0x37	; 55
   140d0:	89 2b       	or	r24, r25
   140d2:	80 83       	st	Z, r24
   140d4:	32 b9       	out	0x02, r19	; 2
   140d6:	d2 96       	adiw	r26, 0x32	; 50
   140d8:	ed 91       	ld	r30, X+
   140da:	fc 91       	ld	r31, X
   140dc:	d3 97       	sbiw	r26, 0x33	; 51
   140de:	80 81       	ld	r24, Z
   140e0:	dc 96       	adiw	r26, 0x3c	; 60
   140e2:	9c 91       	ld	r25, X
   140e4:	dc 97       	sbiw	r26, 0x3c	; 60
   140e6:	89 23       	and	r24, r25
   140e8:	80 83       	st	Z, r24
   140ea:	d2 96       	adiw	r26, 0x32	; 50
   140ec:	ed 91       	ld	r30, X+
   140ee:	fc 91       	ld	r31, X
   140f0:	d3 97       	sbiw	r26, 0x33	; 51
   140f2:	80 81       	ld	r24, Z
   140f4:	d8 96       	adiw	r26, 0x38	; 56
   140f6:	9c 91       	ld	r25, X
   140f8:	d8 97       	sbiw	r26, 0x38	; 56
   140fa:	89 2b       	or	r24, r25
   140fc:	80 83       	st	Z, r24
   140fe:	d0 96       	adiw	r26, 0x30	; 48
   14100:	ed 91       	ld	r30, X+
   14102:	fc 91       	ld	r31, X
   14104:	d1 97       	sbiw	r26, 0x31	; 49
   14106:	80 81       	ld	r24, Z
   14108:	db 96       	adiw	r26, 0x3b	; 59
   1410a:	9c 91       	ld	r25, X
   1410c:	db 97       	sbiw	r26, 0x3b	; 59
   1410e:	89 23       	and	r24, r25
   14110:	80 83       	st	Z, r24
   14112:	85 e0       	ldi	r24, 0x05	; 5
   14114:	82 b9       	out	0x02, r24	; 2
   14116:	d2 96       	adiw	r26, 0x32	; 50
   14118:	ed 91       	ld	r30, X+
   1411a:	fc 91       	ld	r31, X
   1411c:	d3 97       	sbiw	r26, 0x33	; 51
   1411e:	80 81       	ld	r24, Z
   14120:	dc 96       	adiw	r26, 0x3c	; 60
   14122:	9c 91       	ld	r25, X
   14124:	dc 97       	sbiw	r26, 0x3c	; 60
   14126:	89 23       	and	r24, r25
   14128:	80 83       	st	Z, r24
   1412a:	d2 96       	adiw	r26, 0x32	; 50
   1412c:	ed 91       	ld	r30, X+
   1412e:	fc 91       	ld	r31, X
   14130:	d3 97       	sbiw	r26, 0x33	; 51
   14132:	80 81       	ld	r24, Z
   14134:	d8 96       	adiw	r26, 0x38	; 56
   14136:	9c 91       	ld	r25, X
   14138:	d8 97       	sbiw	r26, 0x38	; 56
   1413a:	89 2b       	or	r24, r25
   1413c:	80 83       	st	Z, r24
   1413e:	d0 96       	adiw	r26, 0x30	; 48
   14140:	ed 91       	ld	r30, X+
   14142:	fc 91       	ld	r31, X
   14144:	d1 97       	sbiw	r26, 0x31	; 49
   14146:	80 81       	ld	r24, Z
   14148:	d7 96       	adiw	r26, 0x37	; 55
   1414a:	9c 91       	ld	r25, X
   1414c:	d7 97       	sbiw	r26, 0x37	; 55
   1414e:	89 2b       	or	r24, r25
   14150:	80 83       	st	Z, r24
   14152:	22 b9       	out	0x02, r18	; 2
   14154:	d2 96       	adiw	r26, 0x32	; 50
   14156:	ed 91       	ld	r30, X+
   14158:	fc 91       	ld	r31, X
   1415a:	d3 97       	sbiw	r26, 0x33	; 51
   1415c:	80 81       	ld	r24, Z
   1415e:	dc 96       	adiw	r26, 0x3c	; 60
   14160:	9c 91       	ld	r25, X
   14162:	dc 97       	sbiw	r26, 0x3c	; 60
   14164:	89 23       	and	r24, r25
   14166:	80 83       	st	Z, r24
   14168:	d2 96       	adiw	r26, 0x32	; 50
   1416a:	ed 91       	ld	r30, X+
   1416c:	fc 91       	ld	r31, X
   1416e:	d3 97       	sbiw	r26, 0x33	; 51
   14170:	80 81       	ld	r24, Z
   14172:	d8 96       	adiw	r26, 0x38	; 56
   14174:	9c 91       	ld	r25, X
   14176:	d8 97       	sbiw	r26, 0x38	; 56
   14178:	89 2b       	or	r24, r25
   1417a:	80 83       	st	Z, r24
   1417c:	d0 96       	adiw	r26, 0x30	; 48
   1417e:	ed 91       	ld	r30, X+
   14180:	fc 91       	ld	r31, X
   14182:	d1 97       	sbiw	r26, 0x31	; 49
   14184:	80 81       	ld	r24, Z
   14186:	db 96       	adiw	r26, 0x3b	; 59
   14188:	9c 91       	ld	r25, X
   1418a:	db 97       	sbiw	r26, 0x3b	; 59
   1418c:	89 23       	and	r24, r25
   1418e:	80 83       	st	Z, r24
   14190:	88 e0       	ldi	r24, 0x08	; 8
   14192:	82 b9       	out	0x02, r24	; 2
   14194:	d2 96       	adiw	r26, 0x32	; 50
   14196:	ed 91       	ld	r30, X+
   14198:	fc 91       	ld	r31, X
   1419a:	d3 97       	sbiw	r26, 0x33	; 51
   1419c:	80 81       	ld	r24, Z
   1419e:	dc 96       	adiw	r26, 0x3c	; 60
   141a0:	9c 91       	ld	r25, X
   141a2:	dc 97       	sbiw	r26, 0x3c	; 60
   141a4:	89 23       	and	r24, r25
   141a6:	80 83       	st	Z, r24
   141a8:	d2 96       	adiw	r26, 0x32	; 50
   141aa:	ed 91       	ld	r30, X+
   141ac:	fc 91       	ld	r31, X
   141ae:	d3 97       	sbiw	r26, 0x33	; 51
   141b0:	80 81       	ld	r24, Z
   141b2:	d8 96       	adiw	r26, 0x38	; 56
   141b4:	9c 91       	ld	r25, X
   141b6:	d8 97       	sbiw	r26, 0x38	; 56
   141b8:	89 2b       	or	r24, r25
   141ba:	80 83       	st	Z, r24
   141bc:	d0 96       	adiw	r26, 0x30	; 48
   141be:	ed 91       	ld	r30, X+
   141c0:	fc 91       	ld	r31, X
   141c2:	d1 97       	sbiw	r26, 0x31	; 49
   141c4:	80 81       	ld	r24, Z
   141c6:	d7 96       	adiw	r26, 0x37	; 55
   141c8:	9c 91       	ld	r25, X
   141ca:	d7 97       	sbiw	r26, 0x37	; 55
   141cc:	89 2b       	or	r24, r25
   141ce:	80 83       	st	Z, r24
   141d0:	12 b9       	out	0x02, r17	; 2
   141d2:	d2 96       	adiw	r26, 0x32	; 50
   141d4:	ed 91       	ld	r30, X+
   141d6:	fc 91       	ld	r31, X
   141d8:	d3 97       	sbiw	r26, 0x33	; 51
   141da:	80 81       	ld	r24, Z
   141dc:	dc 96       	adiw	r26, 0x3c	; 60
   141de:	9c 91       	ld	r25, X
   141e0:	dc 97       	sbiw	r26, 0x3c	; 60
   141e2:	89 23       	and	r24, r25
   141e4:	80 83       	st	Z, r24
   141e6:	d2 96       	adiw	r26, 0x32	; 50
   141e8:	ed 91       	ld	r30, X+
   141ea:	fc 91       	ld	r31, X
   141ec:	d3 97       	sbiw	r26, 0x33	; 51
   141ee:	80 81       	ld	r24, Z
   141f0:	d8 96       	adiw	r26, 0x38	; 56
   141f2:	9c 91       	ld	r25, X
   141f4:	d8 97       	sbiw	r26, 0x38	; 56
   141f6:	89 2b       	or	r24, r25
   141f8:	80 83       	st	Z, r24
   141fa:	d0 96       	adiw	r26, 0x30	; 48
   141fc:	ed 91       	ld	r30, X+
   141fe:	fc 91       	ld	r31, X
   14200:	d1 97       	sbiw	r26, 0x31	; 49
   14202:	80 81       	ld	r24, Z
   14204:	db 96       	adiw	r26, 0x3b	; 59
   14206:	9c 91       	ld	r25, X
   14208:	db 97       	sbiw	r26, 0x3b	; 59
   1420a:	89 23       	and	r24, r25
   1420c:	80 83       	st	Z, r24
   1420e:	89 e0       	ldi	r24, 0x09	; 9
   14210:	82 b9       	out	0x02, r24	; 2
   14212:	d2 96       	adiw	r26, 0x32	; 50
   14214:	ed 91       	ld	r30, X+
   14216:	fc 91       	ld	r31, X
   14218:	d3 97       	sbiw	r26, 0x33	; 51
   1421a:	80 81       	ld	r24, Z
   1421c:	dc 96       	adiw	r26, 0x3c	; 60
   1421e:	9c 91       	ld	r25, X
   14220:	dc 97       	sbiw	r26, 0x3c	; 60
   14222:	89 23       	and	r24, r25
   14224:	80 83       	st	Z, r24
   14226:	d2 96       	adiw	r26, 0x32	; 50
   14228:	ed 91       	ld	r30, X+
   1422a:	fc 91       	ld	r31, X
   1422c:	d3 97       	sbiw	r26, 0x33	; 51
   1422e:	80 81       	ld	r24, Z
   14230:	d8 96       	adiw	r26, 0x38	; 56
   14232:	9c 91       	ld	r25, X
   14234:	d8 97       	sbiw	r26, 0x38	; 56
   14236:	89 2b       	or	r24, r25
   14238:	80 83       	st	Z, r24
   1423a:	d0 96       	adiw	r26, 0x30	; 48
   1423c:	ed 91       	ld	r30, X+
   1423e:	fc 91       	ld	r31, X
   14240:	d1 97       	sbiw	r26, 0x31	; 49
   14242:	80 81       	ld	r24, Z
   14244:	d7 96       	adiw	r26, 0x37	; 55
   14246:	9c 91       	ld	r25, X
   14248:	d7 97       	sbiw	r26, 0x37	; 55
   1424a:	89 2b       	or	r24, r25
   1424c:	80 83       	st	Z, r24
   1424e:	02 b9       	out	0x02, r16	; 2
   14250:	b9 cd       	rjmp	.-1166   	; 0x13dc4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   14252:	7d 83       	std	Y+5, r23	; 0x05
   14254:	6e 83       	std	Y+6, r22	; 0x06
   14256:	3f 83       	std	Y+7, r19	; 0x07
   14258:	28 87       	std	Y+8, r18	; 0x08
   1425a:	59 83       	std	Y+1, r21	; 0x01
   1425c:	4a 83       	std	Y+2, r20	; 0x02
   1425e:	1b 83       	std	Y+3, r17	; 0x03
   14260:	0c 83       	std	Y+4, r16	; 0x04
   14262:	f7 01       	movw	r30, r14
   14264:	64 8d       	ldd	r22, Z+28	; 0x1c
   14266:	75 8d       	ldd	r23, Z+29	; 0x1d
   14268:	24 e0       	ldi	r18, 0x04	; 4
   1426a:	ae 01       	movw	r20, r28
   1426c:	4b 5f       	subi	r20, 0xFB	; 251
   1426e:	5f 4f       	sbci	r21, 0xFF	; 255
   14270:	c7 01       	movw	r24, r14
   14272:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14276:	d7 01       	movw	r26, r14
   14278:	5e 96       	adiw	r26, 0x1e	; 30
   1427a:	6d 91       	ld	r22, X+
   1427c:	7c 91       	ld	r23, X
   1427e:	24 e0       	ldi	r18, 0x04	; 4
   14280:	ae 01       	movw	r20, r28
   14282:	4f 5f       	subi	r20, 0xFF	; 255
   14284:	5f 4f       	sbci	r21, 0xFF	; 255
   14286:	c7 01       	movw	r24, r14
   14288:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1428c:	ae cd       	rjmp	.-1188   	; 0x13dea <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

0001428e <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   1428e:	fc 01       	movw	r30, r24
   14290:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14292:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14294:	8c 91       	ld	r24, X
   14296:	92 ad       	ldd	r25, Z+58	; 0x3a
   14298:	89 23       	and	r24, r25
   1429a:	8c 93       	st	X, r24
   1429c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1429e:	b1 a9       	ldd	r27, Z+49	; 0x31
   142a0:	8c 91       	ld	r24, X
   142a2:	93 ad       	ldd	r25, Z+59	; 0x3b
   142a4:	89 23       	and	r24, r25
   142a6:	8c 93       	st	X, r24
   142a8:	84 e0       	ldi	r24, 0x04	; 4
   142aa:	82 b9       	out	0x02, r24	; 2
   142ac:	a2 a9       	ldd	r26, Z+50	; 0x32
   142ae:	b3 a9       	ldd	r27, Z+51	; 0x33
   142b0:	8c 91       	ld	r24, X
   142b2:	94 ad       	ldd	r25, Z+60	; 0x3c
   142b4:	89 23       	and	r24, r25
   142b6:	8c 93       	st	X, r24
   142b8:	a2 a9       	ldd	r26, Z+50	; 0x32
   142ba:	b3 a9       	ldd	r27, Z+51	; 0x33
   142bc:	8c 91       	ld	r24, X
   142be:	90 ad       	ldd	r25, Z+56	; 0x38
   142c0:	89 2b       	or	r24, r25
   142c2:	8c 93       	st	X, r24
   142c4:	a0 a9       	ldd	r26, Z+48	; 0x30
   142c6:	b1 a9       	ldd	r27, Z+49	; 0x31
   142c8:	8c 91       	ld	r24, X
   142ca:	97 a9       	ldd	r25, Z+55	; 0x37
   142cc:	89 2b       	or	r24, r25
   142ce:	8c 93       	st	X, r24
   142d0:	82 89       	ldd	r24, Z+18	; 0x12
   142d2:	93 89       	ldd	r25, Z+19	; 0x13
   142d4:	01 97       	sbiw	r24, 0x01	; 1
   142d6:	92 b9       	out	0x02, r25	; 2
   142d8:	a2 a9       	ldd	r26, Z+50	; 0x32
   142da:	b3 a9       	ldd	r27, Z+51	; 0x33
   142dc:	8c 91       	ld	r24, X
   142de:	94 ad       	ldd	r25, Z+60	; 0x3c
   142e0:	89 23       	and	r24, r25
   142e2:	8c 93       	st	X, r24
   142e4:	a2 a9       	ldd	r26, Z+50	; 0x32
   142e6:	b3 a9       	ldd	r27, Z+51	; 0x33
   142e8:	8c 91       	ld	r24, X
   142ea:	90 ad       	ldd	r25, Z+56	; 0x38
   142ec:	89 2b       	or	r24, r25
   142ee:	8c 93       	st	X, r24
   142f0:	a0 a9       	ldd	r26, Z+48	; 0x30
   142f2:	b1 a9       	ldd	r27, Z+49	; 0x31
   142f4:	8c 91       	ld	r24, X
   142f6:	93 ad       	ldd	r25, Z+59	; 0x3b
   142f8:	89 23       	and	r24, r25
   142fa:	8c 93       	st	X, r24
   142fc:	85 e0       	ldi	r24, 0x05	; 5
   142fe:	82 b9       	out	0x02, r24	; 2
   14300:	a2 a9       	ldd	r26, Z+50	; 0x32
   14302:	b3 a9       	ldd	r27, Z+51	; 0x33
   14304:	8c 91       	ld	r24, X
   14306:	94 ad       	ldd	r25, Z+60	; 0x3c
   14308:	89 23       	and	r24, r25
   1430a:	8c 93       	st	X, r24
   1430c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1430e:	b3 a9       	ldd	r27, Z+51	; 0x33
   14310:	8c 91       	ld	r24, X
   14312:	90 ad       	ldd	r25, Z+56	; 0x38
   14314:	89 2b       	or	r24, r25
   14316:	8c 93       	st	X, r24
   14318:	a0 a9       	ldd	r26, Z+48	; 0x30
   1431a:	b1 a9       	ldd	r27, Z+49	; 0x31
   1431c:	8c 91       	ld	r24, X
   1431e:	97 a9       	ldd	r25, Z+55	; 0x37
   14320:	89 2b       	or	r24, r25
   14322:	8c 93       	st	X, r24
   14324:	82 89       	ldd	r24, Z+18	; 0x12
   14326:	81 50       	subi	r24, 0x01	; 1
   14328:	82 b9       	out	0x02, r24	; 2
   1432a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1432c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1432e:	8c 91       	ld	r24, X
   14330:	94 ad       	ldd	r25, Z+60	; 0x3c
   14332:	89 23       	and	r24, r25
   14334:	8c 93       	st	X, r24
   14336:	a2 a9       	ldd	r26, Z+50	; 0x32
   14338:	b3 a9       	ldd	r27, Z+51	; 0x33
   1433a:	8c 91       	ld	r24, X
   1433c:	90 ad       	ldd	r25, Z+56	; 0x38
   1433e:	89 2b       	or	r24, r25
   14340:	8c 93       	st	X, r24
   14342:	a0 a9       	ldd	r26, Z+48	; 0x30
   14344:	b1 a9       	ldd	r27, Z+49	; 0x31
   14346:	8c 91       	ld	r24, X
   14348:	93 ad       	ldd	r25, Z+59	; 0x3b
   1434a:	89 23       	and	r24, r25
   1434c:	8c 93       	st	X, r24
   1434e:	88 e0       	ldi	r24, 0x08	; 8
   14350:	82 b9       	out	0x02, r24	; 2
   14352:	a2 a9       	ldd	r26, Z+50	; 0x32
   14354:	b3 a9       	ldd	r27, Z+51	; 0x33
   14356:	8c 91       	ld	r24, X
   14358:	94 ad       	ldd	r25, Z+60	; 0x3c
   1435a:	89 23       	and	r24, r25
   1435c:	8c 93       	st	X, r24
   1435e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14360:	b3 a9       	ldd	r27, Z+51	; 0x33
   14362:	8c 91       	ld	r24, X
   14364:	90 ad       	ldd	r25, Z+56	; 0x38
   14366:	89 2b       	or	r24, r25
   14368:	8c 93       	st	X, r24
   1436a:	a0 a9       	ldd	r26, Z+48	; 0x30
   1436c:	b1 a9       	ldd	r27, Z+49	; 0x31
   1436e:	8c 91       	ld	r24, X
   14370:	97 a9       	ldd	r25, Z+55	; 0x37
   14372:	89 2b       	or	r24, r25
   14374:	8c 93       	st	X, r24
   14376:	84 89       	ldd	r24, Z+20	; 0x14
   14378:	95 89       	ldd	r25, Z+21	; 0x15
   1437a:	01 97       	sbiw	r24, 0x01	; 1
   1437c:	92 b9       	out	0x02, r25	; 2
   1437e:	a2 a9       	ldd	r26, Z+50	; 0x32
   14380:	b3 a9       	ldd	r27, Z+51	; 0x33
   14382:	8c 91       	ld	r24, X
   14384:	94 ad       	ldd	r25, Z+60	; 0x3c
   14386:	89 23       	and	r24, r25
   14388:	8c 93       	st	X, r24
   1438a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1438c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1438e:	8c 91       	ld	r24, X
   14390:	90 ad       	ldd	r25, Z+56	; 0x38
   14392:	89 2b       	or	r24, r25
   14394:	8c 93       	st	X, r24
   14396:	a0 a9       	ldd	r26, Z+48	; 0x30
   14398:	b1 a9       	ldd	r27, Z+49	; 0x31
   1439a:	8c 91       	ld	r24, X
   1439c:	93 ad       	ldd	r25, Z+59	; 0x3b
   1439e:	89 23       	and	r24, r25
   143a0:	8c 93       	st	X, r24
   143a2:	89 e0       	ldi	r24, 0x09	; 9
   143a4:	82 b9       	out	0x02, r24	; 2
   143a6:	a2 a9       	ldd	r26, Z+50	; 0x32
   143a8:	b3 a9       	ldd	r27, Z+51	; 0x33
   143aa:	8c 91       	ld	r24, X
   143ac:	94 ad       	ldd	r25, Z+60	; 0x3c
   143ae:	89 23       	and	r24, r25
   143b0:	8c 93       	st	X, r24
   143b2:	a2 a9       	ldd	r26, Z+50	; 0x32
   143b4:	b3 a9       	ldd	r27, Z+51	; 0x33
   143b6:	8c 91       	ld	r24, X
   143b8:	90 ad       	ldd	r25, Z+56	; 0x38
   143ba:	89 2b       	or	r24, r25
   143bc:	8c 93       	st	X, r24
   143be:	a0 a9       	ldd	r26, Z+48	; 0x30
   143c0:	b1 a9       	ldd	r27, Z+49	; 0x31
   143c2:	8c 91       	ld	r24, X
   143c4:	97 a9       	ldd	r25, Z+55	; 0x37
   143c6:	89 2b       	or	r24, r25
   143c8:	8c 93       	st	X, r24
   143ca:	84 89       	ldd	r24, Z+20	; 0x14
   143cc:	81 50       	subi	r24, 0x01	; 1
   143ce:	82 b9       	out	0x02, r24	; 2
   143d0:	a2 a9       	ldd	r26, Z+50	; 0x32
   143d2:	b3 a9       	ldd	r27, Z+51	; 0x33
   143d4:	8c 91       	ld	r24, X
   143d6:	94 ad       	ldd	r25, Z+60	; 0x3c
   143d8:	89 23       	and	r24, r25
   143da:	8c 93       	st	X, r24
   143dc:	a2 a9       	ldd	r26, Z+50	; 0x32
   143de:	b3 a9       	ldd	r27, Z+51	; 0x33
   143e0:	8c 91       	ld	r24, X
   143e2:	90 ad       	ldd	r25, Z+56	; 0x38
   143e4:	89 2b       	or	r24, r25
   143e6:	8c 93       	st	X, r24
   143e8:	a6 a5       	ldd	r26, Z+46	; 0x2e
   143ea:	b7 a5       	ldd	r27, Z+47	; 0x2f
   143ec:	8c 91       	ld	r24, X
   143ee:	96 a9       	ldd	r25, Z+54	; 0x36
   143f0:	89 2b       	or	r24, r25
   143f2:	8c 93       	st	X, r24
   143f4:	08 95       	ret

000143f6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   143f6:	4f 92       	push	r4
   143f8:	5f 92       	push	r5
   143fa:	6f 92       	push	r6
   143fc:	7f 92       	push	r7
   143fe:	8f 92       	push	r8
   14400:	9f 92       	push	r9
   14402:	af 92       	push	r10
   14404:	bf 92       	push	r11
   14406:	cf 92       	push	r12
   14408:	df 92       	push	r13
   1440a:	ef 92       	push	r14
   1440c:	ff 92       	push	r15
   1440e:	0f 93       	push	r16
   14410:	1f 93       	push	r17
   14412:	cf 93       	push	r28
   14414:	df 93       	push	r29
   14416:	ec 01       	movw	r28, r24
   14418:	5a 01       	movw	r10, r20
   1441a:	27 01       	movw	r4, r14
   1441c:	37 ff       	sbrs	r19, 7
   1441e:	05 c0       	rjmp	.+10     	; 0x1442a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   14420:	62 0f       	add	r22, r18
   14422:	73 1f       	adc	r23, r19
   14424:	31 95       	neg	r19
   14426:	21 95       	neg	r18
   14428:	31 09       	sbc	r19, r1
   1442a:	7b 01       	movw	r14, r22
   1442c:	e2 0e       	add	r14, r18
   1442e:	f3 1e       	adc	r15, r19
   14430:	6b 01       	movw	r12, r22
   14432:	77 ff       	sbrs	r23, 7
   14434:	02 c0       	rjmp	.+4      	; 0x1443a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   14436:	d1 2c       	mov	r13, r1
   14438:	c1 2c       	mov	r12, r1
   1443a:	e8 81       	ld	r30, Y
   1443c:	f9 81       	ldd	r31, Y+1	; 0x01
   1443e:	06 84       	ldd	r0, Z+14	; 0x0e
   14440:	f7 85       	ldd	r31, Z+15	; 0x0f
   14442:	e0 2d       	mov	r30, r0
   14444:	ce 01       	movw	r24, r28
   14446:	19 95       	eicall
   14448:	8e 15       	cp	r24, r14
   1444a:	9f 05       	cpc	r25, r15
   1444c:	44 f4       	brge	.+16     	; 0x1445e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   1444e:	e8 81       	ld	r30, Y
   14450:	f9 81       	ldd	r31, Y+1	; 0x01
   14452:	06 84       	ldd	r0, Z+14	; 0x0e
   14454:	f7 85       	ldd	r31, Z+15	; 0x0f
   14456:	e0 2d       	mov	r30, r0
   14458:	ce 01       	movw	r24, r28
   1445a:	19 95       	eicall
   1445c:	7c 01       	movw	r14, r24
   1445e:	47 01       	movw	r8, r14
   14460:	8c 18       	sub	r8, r12
   14462:	9d 08       	sbc	r9, r13
   14464:	17 ff       	sbrs	r17, 7
   14466:	05 c0       	rjmp	.+10     	; 0x14472 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   14468:	a0 0e       	add	r10, r16
   1446a:	b1 1e       	adc	r11, r17
   1446c:	11 95       	neg	r17
   1446e:	01 95       	neg	r16
   14470:	11 09       	sbc	r17, r1
   14472:	0a 0d       	add	r16, r10
   14474:	1b 1d       	adc	r17, r11
   14476:	b7 fe       	sbrs	r11, 7
   14478:	02 c0       	rjmp	.+4      	; 0x1447e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   1447a:	b1 2c       	mov	r11, r1
   1447c:	a1 2c       	mov	r10, r1
   1447e:	e8 81       	ld	r30, Y
   14480:	f9 81       	ldd	r31, Y+1	; 0x01
   14482:	04 84       	ldd	r0, Z+12	; 0x0c
   14484:	f5 85       	ldd	r31, Z+13	; 0x0d
   14486:	e0 2d       	mov	r30, r0
   14488:	ce 01       	movw	r24, r28
   1448a:	19 95       	eicall
   1448c:	80 17       	cp	r24, r16
   1448e:	91 07       	cpc	r25, r17
   14490:	44 f4       	brge	.+16     	; 0x144a2 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   14492:	e8 81       	ld	r30, Y
   14494:	f9 81       	ldd	r31, Y+1	; 0x01
   14496:	04 84       	ldd	r0, Z+12	; 0x0c
   14498:	f5 85       	ldd	r31, Z+13	; 0x0d
   1449a:	e0 2d       	mov	r30, r0
   1449c:	ce 01       	movw	r24, r28
   1449e:	19 95       	eicall
   144a0:	8c 01       	movw	r16, r24
   144a2:	38 01       	movw	r6, r16
   144a4:	6a 18       	sub	r6, r10
   144a6:	7b 08       	sbc	r7, r11
   144a8:	01 50       	subi	r16, 0x01	; 1
   144aa:	11 09       	sbc	r17, r1
   144ac:	97 01       	movw	r18, r14
   144ae:	21 50       	subi	r18, 0x01	; 1
   144b0:	31 09       	sbc	r19, r1
   144b2:	e8 81       	ld	r30, Y
   144b4:	f9 81       	ldd	r31, Y+1	; 0x01
   144b6:	06 80       	ldd	r0, Z+6	; 0x06
   144b8:	f7 81       	ldd	r31, Z+7	; 0x07
   144ba:	e0 2d       	mov	r30, r0
   144bc:	a5 01       	movw	r20, r10
   144be:	b6 01       	movw	r22, r12
   144c0:	ce 01       	movw	r24, r28
   144c2:	19 95       	eicall
   144c4:	ee a5       	ldd	r30, Y+46	; 0x2e
   144c6:	ff a5       	ldd	r31, Y+47	; 0x2f
   144c8:	80 81       	ld	r24, Z
   144ca:	9a ad       	ldd	r25, Y+58	; 0x3a
   144cc:	89 23       	and	r24, r25
   144ce:	80 83       	st	Z, r24
   144d0:	88 8d       	ldd	r24, Y+24	; 0x18
   144d2:	99 8d       	ldd	r25, Y+25	; 0x19
   144d4:	89 2b       	or	r24, r25
   144d6:	c9 f4       	brne	.+50     	; 0x1450a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   144d8:	e8 a9       	ldd	r30, Y+48	; 0x30
   144da:	f9 a9       	ldd	r31, Y+49	; 0x31
   144dc:	80 81       	ld	r24, Z
   144de:	9b ad       	ldd	r25, Y+59	; 0x3b
   144e0:	89 23       	and	r24, r25
   144e2:	80 83       	st	Z, r24
   144e4:	12 b8       	out	0x02, r1	; 2
   144e6:	ea a9       	ldd	r30, Y+50	; 0x32
   144e8:	fb a9       	ldd	r31, Y+51	; 0x33
   144ea:	80 81       	ld	r24, Z
   144ec:	9c ad       	ldd	r25, Y+60	; 0x3c
   144ee:	89 23       	and	r24, r25
   144f0:	80 83       	st	Z, r24
   144f2:	ea a9       	ldd	r30, Y+50	; 0x32
   144f4:	fb a9       	ldd	r31, Y+51	; 0x33
   144f6:	80 81       	ld	r24, Z
   144f8:	98 ad       	ldd	r25, Y+56	; 0x38
   144fa:	89 2b       	or	r24, r25
   144fc:	80 83       	st	Z, r24
   144fe:	e8 a9       	ldd	r30, Y+48	; 0x30
   14500:	f9 a9       	ldd	r31, Y+49	; 0x31
   14502:	80 81       	ld	r24, Z
   14504:	9f a9       	ldd	r25, Y+55	; 0x37
   14506:	89 2b       	or	r24, r25
   14508:	80 83       	st	Z, r24
   1450a:	e8 a9       	ldd	r30, Y+48	; 0x30
   1450c:	f9 a9       	ldd	r31, Y+49	; 0x31
   1450e:	80 81       	ld	r24, Z
   14510:	9b ad       	ldd	r25, Y+59	; 0x3b
   14512:	89 23       	and	r24, r25
   14514:	80 83       	st	Z, r24
   14516:	88 a1       	ldd	r24, Y+32	; 0x20
   14518:	82 b9       	out	0x02, r24	; 2
   1451a:	ea a9       	ldd	r30, Y+50	; 0x32
   1451c:	fb a9       	ldd	r31, Y+51	; 0x33
   1451e:	80 81       	ld	r24, Z
   14520:	9c ad       	ldd	r25, Y+60	; 0x3c
   14522:	89 23       	and	r24, r25
   14524:	80 83       	st	Z, r24
   14526:	ea a9       	ldd	r30, Y+50	; 0x32
   14528:	fb a9       	ldd	r31, Y+51	; 0x33
   1452a:	80 81       	ld	r24, Z
   1452c:	98 ad       	ldd	r25, Y+56	; 0x38
   1452e:	89 2b       	or	r24, r25
   14530:	80 83       	st	Z, r24
   14532:	e8 a9       	ldd	r30, Y+48	; 0x30
   14534:	f9 a9       	ldd	r31, Y+49	; 0x31
   14536:	80 81       	ld	r24, Z
   14538:	9f a9       	ldd	r25, Y+55	; 0x37
   1453a:	89 2b       	or	r24, r25
   1453c:	80 83       	st	Z, r24
   1453e:	86 14       	cp	r8, r6
   14540:	97 04       	cpc	r9, r7
   14542:	2c f0       	brlt	.+10     	; 0x1454e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   14544:	96 2d       	mov	r25, r6
   14546:	87 2d       	mov	r24, r7
   14548:	34 01       	movw	r6, r8
   1454a:	89 2e       	mov	r8, r25
   1454c:	98 2e       	mov	r9, r24
   1454e:	18 14       	cp	r1, r8
   14550:	19 04       	cpc	r1, r9
   14552:	0c f5       	brge	.+66     	; 0x14596 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   14554:	c3 01       	movw	r24, r6
   14556:	52 b8       	out	0x02, r5	; 2
   14558:	ea a9       	ldd	r30, Y+50	; 0x32
   1455a:	fb a9       	ldd	r31, Y+51	; 0x33
   1455c:	20 81       	ld	r18, Z
   1455e:	3c ad       	ldd	r19, Y+60	; 0x3c
   14560:	23 23       	and	r18, r19
   14562:	20 83       	st	Z, r18
   14564:	ea a9       	ldd	r30, Y+50	; 0x32
   14566:	fb a9       	ldd	r31, Y+51	; 0x33
   14568:	20 81       	ld	r18, Z
   1456a:	38 ad       	ldd	r19, Y+56	; 0x38
   1456c:	23 2b       	or	r18, r19
   1456e:	20 83       	st	Z, r18
   14570:	42 b8       	out	0x02, r4	; 2
   14572:	ea a9       	ldd	r30, Y+50	; 0x32
   14574:	fb a9       	ldd	r31, Y+51	; 0x33
   14576:	20 81       	ld	r18, Z
   14578:	3c ad       	ldd	r19, Y+60	; 0x3c
   1457a:	23 23       	and	r18, r19
   1457c:	20 83       	st	Z, r18
   1457e:	ea a9       	ldd	r30, Y+50	; 0x32
   14580:	fb a9       	ldd	r31, Y+51	; 0x33
   14582:	20 81       	ld	r18, Z
   14584:	38 ad       	ldd	r19, Y+56	; 0x38
   14586:	23 2b       	or	r18, r19
   14588:	20 83       	st	Z, r18
   1458a:	01 97       	sbiw	r24, 0x01	; 1
   1458c:	21 f7       	brne	.-56     	; 0x14556 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   1458e:	81 e0       	ldi	r24, 0x01	; 1
   14590:	88 1a       	sub	r8, r24
   14592:	91 08       	sbc	r9, r1
   14594:	dc cf       	rjmp	.-72     	; 0x1454e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   14596:	88 8d       	ldd	r24, Y+24	; 0x18
   14598:	99 8d       	ldd	r25, Y+25	; 0x19
   1459a:	00 97       	sbiw	r24, 0x00	; 0
   1459c:	51 f5       	brne	.+84     	; 0x145f2 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   1459e:	0c 89       	ldd	r16, Y+20	; 0x14
   145a0:	1d 89       	ldd	r17, Y+21	; 0x15
   145a2:	01 50       	subi	r16, 0x01	; 1
   145a4:	11 09       	sbc	r17, r1
   145a6:	2a 89       	ldd	r18, Y+18	; 0x12
   145a8:	3b 89       	ldd	r19, Y+19	; 0x13
   145aa:	21 50       	subi	r18, 0x01	; 1
   145ac:	31 09       	sbc	r19, r1
   145ae:	e8 81       	ld	r30, Y
   145b0:	f9 81       	ldd	r31, Y+1	; 0x01
   145b2:	06 80       	ldd	r0, Z+6	; 0x06
   145b4:	f7 81       	ldd	r31, Z+7	; 0x07
   145b6:	e0 2d       	mov	r30, r0
   145b8:	50 e0       	ldi	r21, 0x00	; 0
   145ba:	40 e0       	ldi	r20, 0x00	; 0
   145bc:	70 e0       	ldi	r23, 0x00	; 0
   145be:	60 e0       	ldi	r22, 0x00	; 0
   145c0:	ce 01       	movw	r24, r28
   145c2:	19 95       	eicall
   145c4:	ee a5       	ldd	r30, Y+46	; 0x2e
   145c6:	ff a5       	ldd	r31, Y+47	; 0x2f
   145c8:	80 81       	ld	r24, Z
   145ca:	9e a9       	ldd	r25, Y+54	; 0x36
   145cc:	89 2b       	or	r24, r25
   145ce:	80 83       	st	Z, r24
   145d0:	df 91       	pop	r29
   145d2:	cf 91       	pop	r28
   145d4:	1f 91       	pop	r17
   145d6:	0f 91       	pop	r16
   145d8:	ff 90       	pop	r15
   145da:	ef 90       	pop	r14
   145dc:	df 90       	pop	r13
   145de:	cf 90       	pop	r12
   145e0:	bf 90       	pop	r11
   145e2:	af 90       	pop	r10
   145e4:	9f 90       	pop	r9
   145e6:	8f 90       	pop	r8
   145e8:	7f 90       	pop	r7
   145ea:	6f 90       	pop	r6
   145ec:	5f 90       	pop	r5
   145ee:	4f 90       	pop	r4
   145f0:	08 95       	ret
   145f2:	01 97       	sbiw	r24, 0x01	; 1
   145f4:	39 f7       	brne	.-50     	; 0x145c4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   145f6:	ce 01       	movw	r24, r28
   145f8:	0e 94 47 a1 	call	0x1428e	; 0x1428e <LCDWIKI_KBV::Set_LR()>
   145fc:	e3 cf       	rjmp	.-58     	; 0x145c4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

000145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   145fe:	1f 93       	push	r17
   14600:	cf 93       	push	r28
   14602:	df 93       	push	r29
   14604:	ec 01       	movw	r28, r24
   14606:	14 2f       	mov	r17, r20
   14608:	ee a5       	ldd	r30, Y+46	; 0x2e
   1460a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1460c:	80 81       	ld	r24, Z
   1460e:	9a ad       	ldd	r25, Y+58	; 0x3a
   14610:	89 23       	and	r24, r25
   14612:	80 83       	st	Z, r24
   14614:	e8 a9       	ldd	r30, Y+48	; 0x30
   14616:	f9 a9       	ldd	r31, Y+49	; 0x31
   14618:	80 81       	ld	r24, Z
   1461a:	9b ad       	ldd	r25, Y+59	; 0x3b
   1461c:	89 23       	and	r24, r25
   1461e:	80 83       	st	Z, r24
   14620:	72 b9       	out	0x02, r23	; 2
   14622:	ea a9       	ldd	r30, Y+50	; 0x32
   14624:	fb a9       	ldd	r31, Y+51	; 0x33
   14626:	80 81       	ld	r24, Z
   14628:	9c ad       	ldd	r25, Y+60	; 0x3c
   1462a:	89 23       	and	r24, r25
   1462c:	80 83       	st	Z, r24
   1462e:	ea a9       	ldd	r30, Y+50	; 0x32
   14630:	fb a9       	ldd	r31, Y+51	; 0x33
   14632:	80 81       	ld	r24, Z
   14634:	98 ad       	ldd	r25, Y+56	; 0x38
   14636:	89 2b       	or	r24, r25
   14638:	80 83       	st	Z, r24
   1463a:	62 b9       	out	0x02, r22	; 2
   1463c:	ea a9       	ldd	r30, Y+50	; 0x32
   1463e:	fb a9       	ldd	r31, Y+51	; 0x33
   14640:	80 81       	ld	r24, Z
   14642:	9c ad       	ldd	r25, Y+60	; 0x3c
   14644:	89 23       	and	r24, r25
   14646:	80 83       	st	Z, r24
   14648:	ea a9       	ldd	r30, Y+50	; 0x32
   1464a:	fb a9       	ldd	r31, Y+51	; 0x33
   1464c:	80 81       	ld	r24, Z
   1464e:	98 ad       	ldd	r25, Y+56	; 0x38
   14650:	89 2b       	or	r24, r25
   14652:	80 83       	st	Z, r24
   14654:	e8 a9       	ldd	r30, Y+48	; 0x30
   14656:	f9 a9       	ldd	r31, Y+49	; 0x31
   14658:	80 81       	ld	r24, Z
   1465a:	9f a9       	ldd	r25, Y+55	; 0x37
   1465c:	89 2b       	or	r24, r25
   1465e:	80 83       	st	Z, r24
   14660:	81 b1       	in	r24, 0x01	; 1
   14662:	11 b8       	out	0x01, r1	; 1
   14664:	61 e0       	ldi	r22, 0x01	; 1
   14666:	70 e0       	ldi	r23, 0x00	; 0
   14668:	80 e0       	ldi	r24, 0x00	; 0
   1466a:	90 e0       	ldi	r25, 0x00	; 0
   1466c:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
   14670:	ec a9       	ldd	r30, Y+52	; 0x34
   14672:	fd a9       	ldd	r31, Y+53	; 0x35
   14674:	80 81       	ld	r24, Z
   14676:	9d ad       	ldd	r25, Y+61	; 0x3d
   14678:	89 23       	and	r24, r25
   1467a:	80 83       	st	Z, r24
   1467c:	20 b1       	in	r18, 0x00	; 0
   1467e:	ec a9       	ldd	r30, Y+52	; 0x34
   14680:	fd a9       	ldd	r31, Y+53	; 0x35
   14682:	90 81       	ld	r25, Z
   14684:	89 ad       	ldd	r24, Y+57	; 0x39
   14686:	98 2b       	or	r25, r24
   14688:	90 83       	st	Z, r25
   1468a:	ec a9       	ldd	r30, Y+52	; 0x34
   1468c:	fd a9       	ldd	r31, Y+53	; 0x35
   1468e:	90 81       	ld	r25, Z
   14690:	8d ad       	ldd	r24, Y+61	; 0x3d
   14692:	98 23       	and	r25, r24
   14694:	90 83       	st	Z, r25
   14696:	80 b1       	in	r24, 0x00	; 0
   14698:	ec a9       	ldd	r30, Y+52	; 0x34
   1469a:	fd a9       	ldd	r31, Y+53	; 0x35
   1469c:	90 81       	ld	r25, Z
   1469e:	39 ad       	ldd	r19, Y+57	; 0x39
   146a0:	93 2b       	or	r25, r19
   146a2:	90 83       	st	Z, r25
   146a4:	11 50       	subi	r17, 0x01	; 1
   146a6:	17 ff       	sbrs	r17, 7
   146a8:	e3 cf       	rjmp	.-58     	; 0x14670 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   146aa:	ee a5       	ldd	r30, Y+46	; 0x2e
   146ac:	ff a5       	ldd	r31, Y+47	; 0x2f
   146ae:	90 81       	ld	r25, Z
   146b0:	3e a9       	ldd	r19, Y+54	; 0x36
   146b2:	93 2b       	or	r25, r19
   146b4:	90 83       	st	Z, r25
   146b6:	91 b1       	in	r25, 0x01	; 1
   146b8:	9f ef       	ldi	r25, 0xFF	; 255
   146ba:	91 b9       	out	0x01, r25	; 1
   146bc:	92 2f       	mov	r25, r18
   146be:	df 91       	pop	r29
   146c0:	cf 91       	pop	r28
   146c2:	1f 91       	pop	r17
   146c4:	08 95       	ret

000146c6 <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   146c6:	0f 93       	push	r16
   146c8:	1f 93       	push	r17
   146ca:	cf 93       	push	r28
   146cc:	df 93       	push	r29
   146ce:	00 d0       	rcall	.+0      	; 0x146d0 <LCDWIKI_KBV::Read_ID()+0xa>
   146d0:	cd b7       	in	r28, 0x3d	; 61
   146d2:	de b7       	in	r29, 0x3e	; 62
   146d4:	8c 01       	movw	r16, r24
   146d6:	40 e0       	ldi	r20, 0x00	; 0
   146d8:	64 e0       	ldi	r22, 0x04	; 4
   146da:	70 e0       	ldi	r23, 0x00	; 0
   146dc:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   146e0:	89 2b       	or	r24, r25
   146e2:	39 f5       	brne	.+78     	; 0x14732 <LCDWIKI_KBV::Read_ID()+0x6c>
   146e4:	41 e0       	ldi	r20, 0x01	; 1
   146e6:	64 e0       	ldi	r22, 0x04	; 4
   146e8:	70 e0       	ldi	r23, 0x00	; 0
   146ea:	c8 01       	movw	r24, r16
   146ec:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   146f0:	81 15       	cp	r24, r1
   146f2:	90 48       	sbci	r25, 0x80	; 128
   146f4:	f1 f4       	brne	.+60     	; 0x14732 <LCDWIKI_KBV::Read_ID()+0x6c>
   146f6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <LM75_Compatible_Registers+0x4>
   146fa:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <LM75_Compatible_Registers+0x5>
   146fe:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <LM75_Compatible_Registers+0x6>
   14702:	89 83       	std	Y+1, r24	; 0x01
   14704:	9a 83       	std	Y+2, r25	; 0x02
   14706:	ab 83       	std	Y+3, r26	; 0x03
   14708:	23 e0       	ldi	r18, 0x03	; 3
   1470a:	ae 01       	movw	r20, r28
   1470c:	4f 5f       	subi	r20, 0xFF	; 255
   1470e:	5f 4f       	sbci	r21, 0xFF	; 255
   14710:	69 eb       	ldi	r22, 0xB9	; 185
   14712:	70 e0       	ldi	r23, 0x00	; 0
   14714:	c8 01       	movw	r24, r16
   14716:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1471a:	40 e0       	ldi	r20, 0x00	; 0
   1471c:	60 ed       	ldi	r22, 0xD0	; 208
   1471e:	70 e0       	ldi	r23, 0x00	; 0
   14720:	c8 01       	movw	r24, r16
   14722:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14726:	41 e0       	ldi	r20, 0x01	; 1
   14728:	60 ed       	ldi	r22, 0xD0	; 208
   1472a:	70 e0       	ldi	r23, 0x00	; 0
   1472c:	c8 01       	movw	r24, r16
   1472e:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14732:	41 e0       	ldi	r20, 0x01	; 1
   14734:	63 ed       	ldi	r22, 0xD3	; 211
   14736:	70 e0       	ldi	r23, 0x00	; 0
   14738:	c8 01       	movw	r24, r16
   1473a:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1473e:	81 34       	cpi	r24, 0x41	; 65
   14740:	23 e9       	ldi	r18, 0x93	; 147
   14742:	92 07       	cpc	r25, r18
   14744:	91 f0       	breq	.+36     	; 0x1476a <LCDWIKI_KBV::Read_ID()+0xa4>
   14746:	86 38       	cpi	r24, 0x86	; 134
   14748:	24 e9       	ldi	r18, 0x94	; 148
   1474a:	92 07       	cpc	r25, r18
   1474c:	71 f0       	breq	.+28     	; 0x1476a <LCDWIKI_KBV::Read_ID()+0xa4>
   1474e:	88 38       	cpi	r24, 0x88	; 136
   14750:	24 e9       	ldi	r18, 0x94	; 148
   14752:	92 07       	cpc	r25, r18
   14754:	51 f0       	breq	.+20     	; 0x1476a <LCDWIKI_KBV::Read_ID()+0xa4>
   14756:	86 39       	cpi	r24, 0x96	; 150
   14758:	27 e7       	ldi	r18, 0x77	; 119
   1475a:	92 07       	cpc	r25, r18
   1475c:	31 f0       	breq	.+12     	; 0x1476a <LCDWIKI_KBV::Read_ID()+0xa4>
   1475e:	40 e0       	ldi	r20, 0x00	; 0
   14760:	70 e0       	ldi	r23, 0x00	; 0
   14762:	60 e0       	ldi	r22, 0x00	; 0
   14764:	c8 01       	movw	r24, r16
   14766:	0e 94 ff a2 	call	0x145fe	; 0x145fe <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1476a:	0f 90       	pop	r0
   1476c:	0f 90       	pop	r0
   1476e:	0f 90       	pop	r0
   14770:	df 91       	pop	r29
   14772:	cf 91       	pop	r28
   14774:	1f 91       	pop	r17
   14776:	0f 91       	pop	r16
   14778:	08 95       	ret

0001477a <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   1477a:	cf 92       	push	r12
   1477c:	df 92       	push	r13
   1477e:	ef 92       	push	r14
   14780:	ff 92       	push	r15
   14782:	0f 93       	push	r16
   14784:	1f 93       	push	r17
   14786:	cf 93       	push	r28
   14788:	df 93       	push	r29
   1478a:	00 d0       	rcall	.+0      	; 0x1478c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   1478c:	00 d0       	rcall	.+0      	; 0x1478e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   1478e:	cd b7       	in	r28, 0x3d	; 61
   14790:	de b7       	in	r29, 0x3e	; 62
   14792:	8c 01       	movw	r16, r24
   14794:	79 01       	movw	r14, r18
   14796:	88 27       	eor	r24, r24
   14798:	99 27       	eor	r25, r25
   1479a:	84 1b       	sub	r24, r20
   1479c:	95 0b       	sbc	r25, r21
   1479e:	6b 01       	movw	r12, r22
   147a0:	82 17       	cp	r24, r18
   147a2:	93 07       	cpc	r25, r19
   147a4:	0c f0       	brlt	.+2      	; 0x147a8 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   147a6:	a3 c0       	rjmp	.+326    	; 0x148ee <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   147a8:	24 17       	cp	r18, r20
   147aa:	35 07       	cpc	r19, r21
   147ac:	0c f0       	brlt	.+2      	; 0x147b0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   147ae:	9f c0       	rjmp	.+318    	; 0x148ee <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   147b0:	c2 0e       	add	r12, r18
   147b2:	d3 1e       	adc	r13, r19
   147b4:	37 ff       	sbrs	r19, 7
   147b6:	02 c0       	rjmp	.+4      	; 0x147bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   147b8:	c4 0e       	add	r12, r20
   147ba:	d5 1e       	adc	r13, r21
   147bc:	d8 01       	movw	r26, r16
   147be:	58 96       	adiw	r26, 0x18	; 24
   147c0:	8d 91       	ld	r24, X+
   147c2:	9c 91       	ld	r25, X
   147c4:	59 97       	sbiw	r26, 0x19	; 25
   147c6:	89 2b       	or	r24, r25
   147c8:	09 f0       	breq	.+2      	; 0x147cc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   147ca:	94 c0       	rjmp	.+296    	; 0x148f4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   147cc:	d0 96       	adiw	r26, 0x30	; 48
   147ce:	ed 91       	ld	r30, X+
   147d0:	fc 91       	ld	r31, X
   147d2:	d1 97       	sbiw	r26, 0x31	; 49
   147d4:	80 81       	ld	r24, Z
   147d6:	db 96       	adiw	r26, 0x3b	; 59
   147d8:	9c 91       	ld	r25, X
   147da:	db 97       	sbiw	r26, 0x3b	; 59
   147dc:	89 23       	and	r24, r25
   147de:	80 83       	st	Z, r24
   147e0:	94 96       	adiw	r26, 0x24	; 36
   147e2:	8c 91       	ld	r24, X
   147e4:	94 97       	sbiw	r26, 0x24	; 36
   147e6:	82 b9       	out	0x02, r24	; 2
   147e8:	d2 96       	adiw	r26, 0x32	; 50
   147ea:	ed 91       	ld	r30, X+
   147ec:	fc 91       	ld	r31, X
   147ee:	d3 97       	sbiw	r26, 0x33	; 51
   147f0:	80 81       	ld	r24, Z
   147f2:	dc 96       	adiw	r26, 0x3c	; 60
   147f4:	9c 91       	ld	r25, X
   147f6:	dc 97       	sbiw	r26, 0x3c	; 60
   147f8:	89 23       	and	r24, r25
   147fa:	80 83       	st	Z, r24
   147fc:	d2 96       	adiw	r26, 0x32	; 50
   147fe:	ed 91       	ld	r30, X+
   14800:	fc 91       	ld	r31, X
   14802:	d3 97       	sbiw	r26, 0x33	; 51
   14804:	80 81       	ld	r24, Z
   14806:	d8 96       	adiw	r26, 0x38	; 56
   14808:	9c 91       	ld	r25, X
   1480a:	d8 97       	sbiw	r26, 0x38	; 56
   1480c:	89 2b       	or	r24, r25
   1480e:	80 83       	st	Z, r24
   14810:	d0 96       	adiw	r26, 0x30	; 48
   14812:	ed 91       	ld	r30, X+
   14814:	fc 91       	ld	r31, X
   14816:	d1 97       	sbiw	r26, 0x31	; 49
   14818:	80 81       	ld	r24, Z
   1481a:	d7 96       	adiw	r26, 0x37	; 55
   1481c:	9c 91       	ld	r25, X
   1481e:	d7 97       	sbiw	r26, 0x37	; 55
   14820:	89 2b       	or	r24, r25
   14822:	80 83       	st	Z, r24
   14824:	83 e0       	ldi	r24, 0x03	; 3
   14826:	82 b9       	out	0x02, r24	; 2
   14828:	d2 96       	adiw	r26, 0x32	; 50
   1482a:	ed 91       	ld	r30, X+
   1482c:	fc 91       	ld	r31, X
   1482e:	d3 97       	sbiw	r26, 0x33	; 51
   14830:	80 81       	ld	r24, Z
   14832:	dc 96       	adiw	r26, 0x3c	; 60
   14834:	9c 91       	ld	r25, X
   14836:	dc 97       	sbiw	r26, 0x3c	; 60
   14838:	89 23       	and	r24, r25
   1483a:	80 83       	st	Z, r24
   1483c:	d2 96       	adiw	r26, 0x32	; 50
   1483e:	ed 91       	ld	r30, X+
   14840:	fc 91       	ld	r31, X
   14842:	d3 97       	sbiw	r26, 0x33	; 51
   14844:	80 81       	ld	r24, Z
   14846:	d8 96       	adiw	r26, 0x38	; 56
   14848:	9c 91       	ld	r25, X
   1484a:	d8 97       	sbiw	r26, 0x38	; 56
   1484c:	89 2b       	or	r24, r25
   1484e:	80 83       	st	Z, r24
   14850:	d0 96       	adiw	r26, 0x30	; 48
   14852:	ed 91       	ld	r30, X+
   14854:	fc 91       	ld	r31, X
   14856:	d1 97       	sbiw	r26, 0x31	; 49
   14858:	80 81       	ld	r24, Z
   1485a:	db 96       	adiw	r26, 0x3b	; 59
   1485c:	9c 91       	ld	r25, X
   1485e:	db 97       	sbiw	r26, 0x3b	; 59
   14860:	89 23       	and	r24, r25
   14862:	80 83       	st	Z, r24
   14864:	96 96       	adiw	r26, 0x26	; 38
   14866:	8c 91       	ld	r24, X
   14868:	96 97       	sbiw	r26, 0x26	; 38
   1486a:	82 b9       	out	0x02, r24	; 2
   1486c:	d2 96       	adiw	r26, 0x32	; 50
   1486e:	ed 91       	ld	r30, X+
   14870:	fc 91       	ld	r31, X
   14872:	d3 97       	sbiw	r26, 0x33	; 51
   14874:	80 81       	ld	r24, Z
   14876:	dc 96       	adiw	r26, 0x3c	; 60
   14878:	9c 91       	ld	r25, X
   1487a:	dc 97       	sbiw	r26, 0x3c	; 60
   1487c:	89 23       	and	r24, r25
   1487e:	80 83       	st	Z, r24
   14880:	d2 96       	adiw	r26, 0x32	; 50
   14882:	ed 91       	ld	r30, X+
   14884:	fc 91       	ld	r31, X
   14886:	d3 97       	sbiw	r26, 0x33	; 51
   14888:	80 81       	ld	r24, Z
   1488a:	d8 96       	adiw	r26, 0x38	; 56
   1488c:	9c 91       	ld	r25, X
   1488e:	d8 97       	sbiw	r26, 0x38	; 56
   14890:	89 2b       	or	r24, r25
   14892:	80 83       	st	Z, r24
   14894:	d0 96       	adiw	r26, 0x30	; 48
   14896:	ed 91       	ld	r30, X+
   14898:	fc 91       	ld	r31, X
   1489a:	d1 97       	sbiw	r26, 0x31	; 49
   1489c:	80 81       	ld	r24, Z
   1489e:	d7 96       	adiw	r26, 0x37	; 55
   148a0:	9c 91       	ld	r25, X
   148a2:	d7 97       	sbiw	r26, 0x37	; 55
   148a4:	89 2b       	or	r24, r25
   148a6:	80 83       	st	Z, r24
   148a8:	c2 b8       	out	0x02, r12	; 2
   148aa:	d2 96       	adiw	r26, 0x32	; 50
   148ac:	ed 91       	ld	r30, X+
   148ae:	fc 91       	ld	r31, X
   148b0:	d3 97       	sbiw	r26, 0x33	; 51
   148b2:	80 81       	ld	r24, Z
   148b4:	dc 96       	adiw	r26, 0x3c	; 60
   148b6:	9c 91       	ld	r25, X
   148b8:	dc 97       	sbiw	r26, 0x3c	; 60
   148ba:	89 23       	and	r24, r25
   148bc:	80 83       	st	Z, r24
   148be:	d2 96       	adiw	r26, 0x32	; 50
   148c0:	ed 91       	ld	r30, X+
   148c2:	fc 91       	ld	r31, X
   148c4:	d3 97       	sbiw	r26, 0x33	; 51
   148c6:	80 81       	ld	r24, Z
   148c8:	d8 96       	adiw	r26, 0x38	; 56
   148ca:	9c 91       	ld	r25, X
   148cc:	89 2b       	or	r24, r25
   148ce:	80 83       	st	Z, r24
   148d0:	26 96       	adiw	r28, 0x06	; 6
   148d2:	0f b6       	in	r0, 0x3f	; 63
   148d4:	f8 94       	cli
   148d6:	de bf       	out	0x3e, r29	; 62
   148d8:	0f be       	out	0x3f, r0	; 63
   148da:	cd bf       	out	0x3d, r28	; 61
   148dc:	df 91       	pop	r29
   148de:	cf 91       	pop	r28
   148e0:	1f 91       	pop	r17
   148e2:	0f 91       	pop	r16
   148e4:	ff 90       	pop	r15
   148e6:	ef 90       	pop	r14
   148e8:	df 90       	pop	r13
   148ea:	cf 90       	pop	r12
   148ec:	08 95       	ret
   148ee:	f1 2c       	mov	r15, r1
   148f0:	e1 2c       	mov	r14, r1
   148f2:	64 cf       	rjmp	.-312    	; 0x147bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   148f4:	f8 01       	movw	r30, r16
   148f6:	80 89       	ldd	r24, Z+16	; 0x10
   148f8:	91 89       	ldd	r25, Z+17	; 0x11
   148fa:	86 1b       	sub	r24, r22
   148fc:	97 0b       	sbc	r25, r23
   148fe:	84 1b       	sub	r24, r20
   14900:	95 0b       	sbc	r25, r21
   14902:	79 83       	std	Y+1, r23	; 0x01
   14904:	6a 83       	std	Y+2, r22	; 0x02
   14906:	5b 83       	std	Y+3, r21	; 0x03
   14908:	4c 83       	std	Y+4, r20	; 0x04
   1490a:	9d 83       	std	Y+5, r25	; 0x05
   1490c:	8e 83       	std	Y+6, r24	; 0x06
   1490e:	64 a1       	ldd	r22, Z+36	; 0x24
   14910:	75 a1       	ldd	r23, Z+37	; 0x25
   14912:	26 e0       	ldi	r18, 0x06	; 6
   14914:	ae 01       	movw	r20, r28
   14916:	4f 5f       	subi	r20, 0xFF	; 255
   14918:	5f 4f       	sbci	r21, 0xFF	; 255
   1491a:	c8 01       	movw	r24, r16
   1491c:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14920:	d9 82       	std	Y+1, r13	; 0x01
   14922:	ca 82       	std	Y+2, r12	; 0x02
   14924:	d8 01       	movw	r26, r16
   14926:	96 96       	adiw	r26, 0x26	; 38
   14928:	6d 91       	ld	r22, X+
   1492a:	7c 91       	ld	r23, X
   1492c:	22 e0       	ldi	r18, 0x02	; 2
   1492e:	ae 01       	movw	r20, r28
   14930:	4f 5f       	subi	r20, 0xFF	; 255
   14932:	5f 4f       	sbci	r21, 0xFF	; 255
   14934:	c8 01       	movw	r24, r16
   14936:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1493a:	f8 01       	movw	r30, r16
   1493c:	80 8d       	ldd	r24, Z+24	; 0x18
   1493e:	91 8d       	ldd	r25, Z+25	; 0x19
   14940:	01 97       	sbiw	r24, 0x01	; 1
   14942:	79 f4       	brne	.+30     	; 0x14962 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   14944:	88 e0       	ldi	r24, 0x08	; 8
   14946:	ef 28       	or	r14, r15
   14948:	09 f4       	brne	.+2      	; 0x1494c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   1494a:	80 e0       	ldi	r24, 0x00	; 0
   1494c:	89 83       	std	Y+1, r24	; 0x01
   1494e:	21 e0       	ldi	r18, 0x01	; 1
   14950:	ae 01       	movw	r20, r28
   14952:	4f 5f       	subi	r20, 0xFF	; 255
   14954:	5f 4f       	sbci	r21, 0xFF	; 255
   14956:	61 e0       	ldi	r22, 0x01	; 1
   14958:	70 e0       	ldi	r23, 0x00	; 0
   1495a:	c8 01       	movw	r24, r16
   1495c:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14960:	b7 cf       	rjmp	.-146    	; 0x148d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   14962:	ef 28       	or	r14, r15
   14964:	09 f0       	breq	.+2      	; 0x14968 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   14966:	b4 cf       	rjmp	.-152    	; 0x148d0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   14968:	20 e0       	ldi	r18, 0x00	; 0
   1496a:	50 e0       	ldi	r21, 0x00	; 0
   1496c:	40 e0       	ldi	r20, 0x00	; 0
   1496e:	63 e1       	ldi	r22, 0x13	; 19
   14970:	70 e0       	ldi	r23, 0x00	; 0
   14972:	f3 cf       	rjmp	.-26     	; 0x1495a <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

00014974 <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   14974:	0f 93       	push	r16
   14976:	1f 93       	push	r17
   14978:	cf 93       	push	r28
   1497a:	df 93       	push	r29
   1497c:	ec 01       	movw	r28, r24
   1497e:	86 2f       	mov	r24, r22
   14980:	83 70       	andi	r24, 0x03	; 3
   14982:	90 e0       	ldi	r25, 0x00	; 0
   14984:	9f 8b       	std	Y+23, r25	; 0x17
   14986:	8e 8b       	std	Y+22, r24	; 0x16
   14988:	26 2f       	mov	r18, r22
   1498a:	21 70       	andi	r18, 0x01	; 1
   1498c:	60 ff       	sbrs	r22, 0
   1498e:	8e c0       	rjmp	.+284    	; 0x14aac <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   14990:	88 89       	ldd	r24, Y+16	; 0x10
   14992:	99 89       	ldd	r25, Y+17	; 0x11
   14994:	9b 8b       	std	Y+19, r25	; 0x13
   14996:	8a 8b       	std	Y+18, r24	; 0x12
   14998:	22 23       	and	r18, r18
   1499a:	09 f4       	brne	.+2      	; 0x1499e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   1499c:	8a c0       	rjmp	.+276    	; 0x14ab2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   1499e:	8e 85       	ldd	r24, Y+14	; 0x0e
   149a0:	9f 85       	ldd	r25, Y+15	; 0x0f
   149a2:	9d 8b       	std	Y+21, r25	; 0x15
   149a4:	8c 8b       	std	Y+20, r24	; 0x14
   149a6:	ae a5       	ldd	r26, Y+46	; 0x2e
   149a8:	bf a5       	ldd	r27, Y+47	; 0x2f
   149aa:	8c 91       	ld	r24, X
   149ac:	9a ad       	ldd	r25, Y+58	; 0x3a
   149ae:	89 23       	and	r24, r25
   149b0:	8c 93       	st	X, r24
   149b2:	48 8d       	ldd	r20, Y+24	; 0x18
   149b4:	59 8d       	ldd	r21, Y+25	; 0x19
   149b6:	8e 89       	ldd	r24, Y+22	; 0x16
   149b8:	9f 89       	ldd	r25, Y+23	; 0x17
   149ba:	a8 a9       	ldd	r26, Y+48	; 0x30
   149bc:	b9 a9       	ldd	r27, Y+49	; 0x31
   149be:	2b ad       	ldd	r18, Y+59	; 0x3b
   149c0:	41 15       	cp	r20, r1
   149c2:	51 05       	cpc	r21, r1
   149c4:	09 f0       	breq	.+2      	; 0x149c8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   149c6:	7a c0       	rjmp	.+244    	; 0x14abc <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   149c8:	01 97       	sbiw	r24, 0x01	; 1
   149ca:	83 30       	cpi	r24, 0x03	; 3
   149cc:	91 05       	cpc	r25, r1
   149ce:	08 f0       	brcs	.+2      	; 0x149d2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   149d0:	73 c0       	rjmp	.+230    	; 0x14ab8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   149d2:	88 0f       	add	r24, r24
   149d4:	99 1f       	adc	r25, r25
   149d6:	fc 01       	movw	r30, r24
   149d8:	e6 55       	subi	r30, 0x56	; 86
   149da:	f7 4f       	sbci	r31, 0xF7	; 247
   149dc:	90 81       	ld	r25, Z
   149de:	38 a5       	ldd	r19, Y+40	; 0x28
   149e0:	49 a5       	ldd	r20, Y+41	; 0x29
   149e2:	8c 91       	ld	r24, X
   149e4:	28 23       	and	r18, r24
   149e6:	2c 93       	st	X, r18
   149e8:	42 b9       	out	0x02, r20	; 2
   149ea:	ea a9       	ldd	r30, Y+50	; 0x32
   149ec:	fb a9       	ldd	r31, Y+51	; 0x33
   149ee:	80 81       	ld	r24, Z
   149f0:	2c ad       	ldd	r18, Y+60	; 0x3c
   149f2:	82 23       	and	r24, r18
   149f4:	80 83       	st	Z, r24
   149f6:	ea a9       	ldd	r30, Y+50	; 0x32
   149f8:	fb a9       	ldd	r31, Y+51	; 0x33
   149fa:	80 81       	ld	r24, Z
   149fc:	28 ad       	ldd	r18, Y+56	; 0x38
   149fe:	82 2b       	or	r24, r18
   14a00:	80 83       	st	Z, r24
   14a02:	32 b9       	out	0x02, r19	; 2
   14a04:	ea a9       	ldd	r30, Y+50	; 0x32
   14a06:	fb a9       	ldd	r31, Y+51	; 0x33
   14a08:	80 81       	ld	r24, Z
   14a0a:	2c ad       	ldd	r18, Y+60	; 0x3c
   14a0c:	82 23       	and	r24, r18
   14a0e:	80 83       	st	Z, r24
   14a10:	ea a9       	ldd	r30, Y+50	; 0x32
   14a12:	fb a9       	ldd	r31, Y+51	; 0x33
   14a14:	80 81       	ld	r24, Z
   14a16:	28 ad       	ldd	r18, Y+56	; 0x38
   14a18:	82 2b       	or	r24, r18
   14a1a:	80 83       	st	Z, r24
   14a1c:	e8 a9       	ldd	r30, Y+48	; 0x30
   14a1e:	f9 a9       	ldd	r31, Y+49	; 0x31
   14a20:	80 81       	ld	r24, Z
   14a22:	2f a9       	ldd	r18, Y+55	; 0x37
   14a24:	82 2b       	or	r24, r18
   14a26:	80 83       	st	Z, r24
   14a28:	80 e1       	ldi	r24, 0x10	; 16
   14a2a:	82 b9       	out	0x02, r24	; 2
   14a2c:	ea a9       	ldd	r30, Y+50	; 0x32
   14a2e:	fb a9       	ldd	r31, Y+51	; 0x33
   14a30:	80 81       	ld	r24, Z
   14a32:	2c ad       	ldd	r18, Y+60	; 0x3c
   14a34:	82 23       	and	r24, r18
   14a36:	80 83       	st	Z, r24
   14a38:	ea a9       	ldd	r30, Y+50	; 0x32
   14a3a:	fb a9       	ldd	r31, Y+51	; 0x33
   14a3c:	80 81       	ld	r24, Z
   14a3e:	28 ad       	ldd	r18, Y+56	; 0x38
   14a40:	82 2b       	or	r24, r18
   14a42:	80 83       	st	Z, r24
   14a44:	92 b9       	out	0x02, r25	; 2
   14a46:	ea a9       	ldd	r30, Y+50	; 0x32
   14a48:	fb a9       	ldd	r31, Y+51	; 0x33
   14a4a:	80 81       	ld	r24, Z
   14a4c:	9c ad       	ldd	r25, Y+60	; 0x3c
   14a4e:	89 23       	and	r24, r25
   14a50:	80 83       	st	Z, r24
   14a52:	ea a9       	ldd	r30, Y+50	; 0x32
   14a54:	fb a9       	ldd	r31, Y+51	; 0x33
   14a56:	80 81       	ld	r24, Z
   14a58:	98 ad       	ldd	r25, Y+56	; 0x38
   14a5a:	89 2b       	or	r24, r25
   14a5c:	80 83       	st	Z, r24
   14a5e:	0c 89       	ldd	r16, Y+20	; 0x14
   14a60:	1d 89       	ldd	r17, Y+21	; 0x15
   14a62:	01 50       	subi	r16, 0x01	; 1
   14a64:	11 09       	sbc	r17, r1
   14a66:	2a 89       	ldd	r18, Y+18	; 0x12
   14a68:	3b 89       	ldd	r19, Y+19	; 0x13
   14a6a:	21 50       	subi	r18, 0x01	; 1
   14a6c:	31 09       	sbc	r19, r1
   14a6e:	e8 81       	ld	r30, Y
   14a70:	f9 81       	ldd	r31, Y+1	; 0x01
   14a72:	06 80       	ldd	r0, Z+6	; 0x06
   14a74:	f7 81       	ldd	r31, Z+7	; 0x07
   14a76:	e0 2d       	mov	r30, r0
   14a78:	50 e0       	ldi	r21, 0x00	; 0
   14a7a:	40 e0       	ldi	r20, 0x00	; 0
   14a7c:	70 e0       	ldi	r23, 0x00	; 0
   14a7e:	60 e0       	ldi	r22, 0x00	; 0
   14a80:	ce 01       	movw	r24, r28
   14a82:	19 95       	eicall
   14a84:	48 89       	ldd	r20, Y+16	; 0x10
   14a86:	59 89       	ldd	r21, Y+17	; 0x11
   14a88:	30 e0       	ldi	r19, 0x00	; 0
   14a8a:	20 e0       	ldi	r18, 0x00	; 0
   14a8c:	70 e0       	ldi	r23, 0x00	; 0
   14a8e:	60 e0       	ldi	r22, 0x00	; 0
   14a90:	ce 01       	movw	r24, r28
   14a92:	0e 94 bd a3 	call	0x1477a	; 0x1477a <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   14a96:	ee a5       	ldd	r30, Y+46	; 0x2e
   14a98:	ff a5       	ldd	r31, Y+47	; 0x2f
   14a9a:	80 81       	ld	r24, Z
   14a9c:	9e a9       	ldd	r25, Y+54	; 0x36
   14a9e:	89 2b       	or	r24, r25
   14aa0:	80 83       	st	Z, r24
   14aa2:	df 91       	pop	r29
   14aa4:	cf 91       	pop	r28
   14aa6:	1f 91       	pop	r17
   14aa8:	0f 91       	pop	r16
   14aaa:	08 95       	ret
   14aac:	8e 85       	ldd	r24, Y+14	; 0x0e
   14aae:	9f 85       	ldd	r25, Y+15	; 0x0f
   14ab0:	71 cf       	rjmp	.-286    	; 0x14994 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   14ab2:	88 89       	ldd	r24, Y+16	; 0x10
   14ab4:	99 89       	ldd	r25, Y+17	; 0x11
   14ab6:	75 cf       	rjmp	.-278    	; 0x149a2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   14ab8:	90 e3       	ldi	r25, 0x30	; 48
   14aba:	91 cf       	rjmp	.-222    	; 0x149de <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   14abc:	46 30       	cpi	r20, 0x06	; 6
   14abe:	51 05       	cpc	r21, r1
   14ac0:	51 f5       	brne	.+84     	; 0x14b16 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   14ac2:	81 30       	cpi	r24, 0x01	; 1
   14ac4:	91 05       	cpc	r25, r1
   14ac6:	f9 f0       	breq	.+62     	; 0x14b06 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   14ac8:	20 f1       	brcs	.+72     	; 0x14b12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   14aca:	82 30       	cpi	r24, 0x02	; 2
   14acc:	91 05       	cpc	r25, r1
   14ace:	e9 f0       	breq	.+58     	; 0x14b0a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   14ad0:	03 97       	sbiw	r24, 0x03	; 3
   14ad2:	e9 f0       	breq	.+58     	; 0x14b0e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   14ad4:	8c 91       	ld	r24, X
   14ad6:	28 23       	and	r18, r24
   14ad8:	2c 93       	st	X, r18
   14ada:	88 a5       	ldd	r24, Y+40	; 0x28
   14adc:	82 b9       	out	0x02, r24	; 2
   14ade:	ea a9       	ldd	r30, Y+50	; 0x32
   14ae0:	fb a9       	ldd	r31, Y+51	; 0x33
   14ae2:	80 81       	ld	r24, Z
   14ae4:	9c ad       	ldd	r25, Y+60	; 0x3c
   14ae6:	89 23       	and	r24, r25
   14ae8:	80 83       	st	Z, r24
   14aea:	ea a9       	ldd	r30, Y+50	; 0x32
   14aec:	fb a9       	ldd	r31, Y+51	; 0x33
   14aee:	80 81       	ld	r24, Z
   14af0:	98 ad       	ldd	r25, Y+56	; 0x38
   14af2:	89 2b       	or	r24, r25
   14af4:	80 83       	st	Z, r24
   14af6:	e8 a9       	ldd	r30, Y+48	; 0x30
   14af8:	f9 a9       	ldd	r31, Y+49	; 0x31
   14afa:	80 81       	ld	r24, Z
   14afc:	9f a9       	ldd	r25, Y+55	; 0x37
   14afe:	89 2b       	or	r24, r25
   14b00:	80 83       	st	Z, r24
   14b02:	12 b9       	out	0x02, r17	; 2
   14b04:	a0 cf       	rjmp	.-192    	; 0x14a46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14b06:	10 ea       	ldi	r17, 0xA0	; 160
   14b08:	e5 cf       	rjmp	.-54     	; 0x14ad4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14b0a:	10 e0       	ldi	r17, 0x00	; 0
   14b0c:	e3 cf       	rjmp	.-58     	; 0x14ad4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14b0e:	10 e6       	ldi	r17, 0x60	; 96
   14b10:	e1 cf       	rjmp	.-62     	; 0x14ad4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14b12:	10 ed       	ldi	r17, 0xD0	; 208
   14b14:	df cf       	rjmp	.-66     	; 0x14ad4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14b16:	48 30       	cpi	r20, 0x08	; 8
   14b18:	51 05       	cpc	r21, r1
   14b1a:	49 f5       	brne	.+82     	; 0x14b6e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   14b1c:	fb e2       	ldi	r31, 0x2B	; 43
   14b1e:	81 30       	cpi	r24, 0x01	; 1
   14b20:	91 05       	cpc	r25, r1
   14b22:	51 f0       	breq	.+20     	; 0x14b38 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14b24:	f9 e0       	ldi	r31, 0x09	; 9
   14b26:	81 30       	cpi	r24, 0x01	; 1
   14b28:	91 05       	cpc	r25, r1
   14b2a:	30 f0       	brcs	.+12     	; 0x14b38 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14b2c:	fa e0       	ldi	r31, 0x0A	; 10
   14b2e:	82 30       	cpi	r24, 0x02	; 2
   14b30:	91 05       	cpc	r25, r1
   14b32:	11 f0       	breq	.+4      	; 0x14b38 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14b34:	03 97       	sbiw	r24, 0x03	; 3
   14b36:	c9 f0       	breq	.+50     	; 0x14b6a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   14b38:	8c 91       	ld	r24, X
   14b3a:	28 23       	and	r18, r24
   14b3c:	2c 93       	st	X, r18
   14b3e:	88 a5       	ldd	r24, Y+40	; 0x28
   14b40:	82 b9       	out	0x02, r24	; 2
   14b42:	aa a9       	ldd	r26, Y+50	; 0x32
   14b44:	bb a9       	ldd	r27, Y+51	; 0x33
   14b46:	8c 91       	ld	r24, X
   14b48:	9c ad       	ldd	r25, Y+60	; 0x3c
   14b4a:	89 23       	and	r24, r25
   14b4c:	8c 93       	st	X, r24
   14b4e:	aa a9       	ldd	r26, Y+50	; 0x32
   14b50:	bb a9       	ldd	r27, Y+51	; 0x33
   14b52:	8c 91       	ld	r24, X
   14b54:	98 ad       	ldd	r25, Y+56	; 0x38
   14b56:	89 2b       	or	r24, r25
   14b58:	8c 93       	st	X, r24
   14b5a:	a8 a9       	ldd	r26, Y+48	; 0x30
   14b5c:	b9 a9       	ldd	r27, Y+49	; 0x31
   14b5e:	8c 91       	ld	r24, X
   14b60:	9f a9       	ldd	r25, Y+55	; 0x37
   14b62:	89 2b       	or	r24, r25
   14b64:	8c 93       	st	X, r24
   14b66:	f2 b9       	out	0x02, r31	; 2
   14b68:	6e cf       	rjmp	.-292    	; 0x14a46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14b6a:	f8 e2       	ldi	r31, 0x28	; 40
   14b6c:	e5 cf       	rjmp	.-54     	; 0x14b38 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14b6e:	45 30       	cpi	r20, 0x05	; 5
   14b70:	51 05       	cpc	r21, r1
   14b72:	49 f5       	brne	.+82     	; 0x14bc6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   14b74:	e8 e7       	ldi	r30, 0x78	; 120
   14b76:	81 30       	cpi	r24, 0x01	; 1
   14b78:	91 05       	cpc	r25, r1
   14b7a:	51 f0       	breq	.+20     	; 0x14b90 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14b7c:	e8 e0       	ldi	r30, 0x08	; 8
   14b7e:	81 30       	cpi	r24, 0x01	; 1
   14b80:	91 05       	cpc	r25, r1
   14b82:	30 f0       	brcs	.+12     	; 0x14b90 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14b84:	e8 ec       	ldi	r30, 0xC8	; 200
   14b86:	82 30       	cpi	r24, 0x02	; 2
   14b88:	91 05       	cpc	r25, r1
   14b8a:	11 f0       	breq	.+4      	; 0x14b90 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14b8c:	03 97       	sbiw	r24, 0x03	; 3
   14b8e:	c9 f0       	breq	.+50     	; 0x14bc2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   14b90:	8c 91       	ld	r24, X
   14b92:	28 23       	and	r18, r24
   14b94:	2c 93       	st	X, r18
   14b96:	88 a5       	ldd	r24, Y+40	; 0x28
   14b98:	82 b9       	out	0x02, r24	; 2
   14b9a:	aa a9       	ldd	r26, Y+50	; 0x32
   14b9c:	bb a9       	ldd	r27, Y+51	; 0x33
   14b9e:	8c 91       	ld	r24, X
   14ba0:	9c ad       	ldd	r25, Y+60	; 0x3c
   14ba2:	89 23       	and	r24, r25
   14ba4:	8c 93       	st	X, r24
   14ba6:	aa a9       	ldd	r26, Y+50	; 0x32
   14ba8:	bb a9       	ldd	r27, Y+51	; 0x33
   14baa:	8c 91       	ld	r24, X
   14bac:	98 ad       	ldd	r25, Y+56	; 0x38
   14bae:	89 2b       	or	r24, r25
   14bb0:	8c 93       	st	X, r24
   14bb2:	a8 a9       	ldd	r26, Y+48	; 0x30
   14bb4:	b9 a9       	ldd	r27, Y+49	; 0x31
   14bb6:	8c 91       	ld	r24, X
   14bb8:	9f a9       	ldd	r25, Y+55	; 0x37
   14bba:	89 2b       	or	r24, r25
   14bbc:	8c 93       	st	X, r24
   14bbe:	e2 b9       	out	0x02, r30	; 2
   14bc0:	42 cf       	rjmp	.-380    	; 0x14a46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14bc2:	e8 ea       	ldi	r30, 0xA8	; 168
   14bc4:	e5 cf       	rjmp	.-54     	; 0x14b90 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14bc6:	47 30       	cpi	r20, 0x07	; 7
   14bc8:	51 05       	cpc	r21, r1
   14bca:	51 f5       	brne	.+84     	; 0x14c20 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   14bcc:	81 30       	cpi	r24, 0x01	; 1
   14bce:	91 05       	cpc	r25, r1
   14bd0:	f9 f0       	breq	.+62     	; 0x14c10 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   14bd2:	20 f1       	brcs	.+72     	; 0x14c1c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   14bd4:	82 30       	cpi	r24, 0x02	; 2
   14bd6:	91 05       	cpc	r25, r1
   14bd8:	e9 f0       	breq	.+58     	; 0x14c14 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   14bda:	03 97       	sbiw	r24, 0x03	; 3
   14bdc:	e9 f0       	breq	.+58     	; 0x14c18 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   14bde:	8c 91       	ld	r24, X
   14be0:	28 23       	and	r18, r24
   14be2:	2c 93       	st	X, r18
   14be4:	88 a5       	ldd	r24, Y+40	; 0x28
   14be6:	82 b9       	out	0x02, r24	; 2
   14be8:	ea a9       	ldd	r30, Y+50	; 0x32
   14bea:	fb a9       	ldd	r31, Y+51	; 0x33
   14bec:	80 81       	ld	r24, Z
   14bee:	9c ad       	ldd	r25, Y+60	; 0x3c
   14bf0:	89 23       	and	r24, r25
   14bf2:	80 83       	st	Z, r24
   14bf4:	ea a9       	ldd	r30, Y+50	; 0x32
   14bf6:	fb a9       	ldd	r31, Y+51	; 0x33
   14bf8:	80 81       	ld	r24, Z
   14bfa:	98 ad       	ldd	r25, Y+56	; 0x38
   14bfc:	89 2b       	or	r24, r25
   14bfe:	80 83       	st	Z, r24
   14c00:	e8 a9       	ldd	r30, Y+48	; 0x30
   14c02:	f9 a9       	ldd	r31, Y+49	; 0x31
   14c04:	80 81       	ld	r24, Z
   14c06:	9f a9       	ldd	r25, Y+55	; 0x37
   14c08:	89 2b       	or	r24, r25
   14c0a:	80 83       	st	Z, r24
   14c0c:	72 b9       	out	0x02, r23	; 2
   14c0e:	1b cf       	rjmp	.-458    	; 0x14a46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14c10:	78 ea       	ldi	r23, 0xA8	; 168
   14c12:	e5 cf       	rjmp	.-54     	; 0x14bde <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14c14:	78 e1       	ldi	r23, 0x18	; 24
   14c16:	e3 cf       	rjmp	.-58     	; 0x14bde <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14c18:	78 e7       	ldi	r23, 0x78	; 120
   14c1a:	e1 cf       	rjmp	.-62     	; 0x14bde <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14c1c:	78 ec       	ldi	r23, 0xC8	; 200
   14c1e:	df cf       	rjmp	.-66     	; 0x14bde <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14c20:	81 30       	cpi	r24, 0x01	; 1
   14c22:	91 05       	cpc	r25, r1
   14c24:	f9 f0       	breq	.+62     	; 0x14c64 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   14c26:	20 f1       	brcs	.+72     	; 0x14c70 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   14c28:	82 30       	cpi	r24, 0x02	; 2
   14c2a:	91 05       	cpc	r25, r1
   14c2c:	e9 f0       	breq	.+58     	; 0x14c68 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   14c2e:	03 97       	sbiw	r24, 0x03	; 3
   14c30:	e9 f0       	breq	.+58     	; 0x14c6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   14c32:	8c 91       	ld	r24, X
   14c34:	28 23       	and	r18, r24
   14c36:	2c 93       	st	X, r18
   14c38:	88 a5       	ldd	r24, Y+40	; 0x28
   14c3a:	82 b9       	out	0x02, r24	; 2
   14c3c:	ea a9       	ldd	r30, Y+50	; 0x32
   14c3e:	fb a9       	ldd	r31, Y+51	; 0x33
   14c40:	80 81       	ld	r24, Z
   14c42:	9c ad       	ldd	r25, Y+60	; 0x3c
   14c44:	89 23       	and	r24, r25
   14c46:	80 83       	st	Z, r24
   14c48:	ea a9       	ldd	r30, Y+50	; 0x32
   14c4a:	fb a9       	ldd	r31, Y+51	; 0x33
   14c4c:	80 81       	ld	r24, Z
   14c4e:	98 ad       	ldd	r25, Y+56	; 0x38
   14c50:	89 2b       	or	r24, r25
   14c52:	80 83       	st	Z, r24
   14c54:	e8 a9       	ldd	r30, Y+48	; 0x30
   14c56:	f9 a9       	ldd	r31, Y+49	; 0x31
   14c58:	80 81       	ld	r24, Z
   14c5a:	9f a9       	ldd	r25, Y+55	; 0x37
   14c5c:	89 2b       	or	r24, r25
   14c5e:	80 83       	st	Z, r24
   14c60:	32 b9       	out	0x02, r19	; 2
   14c62:	f1 ce       	rjmp	.-542    	; 0x14a46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14c64:	38 e2       	ldi	r19, 0x28	; 40
   14c66:	e5 cf       	rjmp	.-54     	; 0x14c32 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14c68:	38 e9       	ldi	r19, 0x98	; 152
   14c6a:	e3 cf       	rjmp	.-58     	; 0x14c32 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14c6c:	38 ef       	ldi	r19, 0xF8	; 248
   14c6e:	e1 cf       	rjmp	.-62     	; 0x14c32 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   14c70:	38 e4       	ldi	r19, 0x48	; 72
   14c72:	df cf       	rjmp	.-66     	; 0x14c32 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

00014c74 <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   14c74:	fc 01       	movw	r30, r24
   14c76:	86 89       	ldd	r24, Z+22	; 0x16
   14c78:	08 95       	ret

00014c7a <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   14c7a:	fc 01       	movw	r30, r24
   14c7c:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14c7e:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14c80:	8c 91       	ld	r24, X
   14c82:	92 ad       	ldd	r25, Z+58	; 0x3a
   14c84:	89 23       	and	r24, r25
   14c86:	8c 93       	st	X, r24
   14c88:	82 a5       	ldd	r24, Z+42	; 0x2a
   14c8a:	40 8d       	ldd	r20, Z+24	; 0x18
   14c8c:	51 8d       	ldd	r21, Z+25	; 0x19
   14c8e:	a0 a9       	ldd	r26, Z+48	; 0x30
   14c90:	b1 a9       	ldd	r27, Z+49	; 0x31
   14c92:	23 ad       	ldd	r18, Z+59	; 0x3b
   14c94:	9c 91       	ld	r25, X
   14c96:	92 23       	and	r25, r18
   14c98:	9c 93       	st	X, r25
   14c9a:	41 15       	cp	r20, r1
   14c9c:	51 05       	cpc	r21, r1
   14c9e:	49 f5       	brne	.+82     	; 0x14cf2 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   14ca0:	91 e6       	ldi	r25, 0x61	; 97
   14ca2:	92 b9       	out	0x02, r25	; 2
   14ca4:	a2 a9       	ldd	r26, Z+50	; 0x32
   14ca6:	b3 a9       	ldd	r27, Z+51	; 0x33
   14ca8:	9c 91       	ld	r25, X
   14caa:	24 ad       	ldd	r18, Z+60	; 0x3c
   14cac:	92 23       	and	r25, r18
   14cae:	9c 93       	st	X, r25
   14cb0:	a2 a9       	ldd	r26, Z+50	; 0x32
   14cb2:	b3 a9       	ldd	r27, Z+51	; 0x33
   14cb4:	9c 91       	ld	r25, X
   14cb6:	20 ad       	ldd	r18, Z+56	; 0x38
   14cb8:	92 2b       	or	r25, r18
   14cba:	9c 93       	st	X, r25
   14cbc:	a0 a9       	ldd	r26, Z+48	; 0x30
   14cbe:	b1 a9       	ldd	r27, Z+49	; 0x31
   14cc0:	9c 91       	ld	r25, X
   14cc2:	27 a9       	ldd	r18, Z+55	; 0x37
   14cc4:	92 2b       	or	r25, r18
   14cc6:	9c 93       	st	X, r25
   14cc8:	68 27       	eor	r22, r24
   14cca:	62 b9       	out	0x02, r22	; 2
   14ccc:	a2 a9       	ldd	r26, Z+50	; 0x32
   14cce:	b3 a9       	ldd	r27, Z+51	; 0x33
   14cd0:	8c 91       	ld	r24, X
   14cd2:	94 ad       	ldd	r25, Z+60	; 0x3c
   14cd4:	89 23       	and	r24, r25
   14cd6:	8c 93       	st	X, r24
   14cd8:	a2 a9       	ldd	r26, Z+50	; 0x32
   14cda:	b3 a9       	ldd	r27, Z+51	; 0x33
   14cdc:	8c 91       	ld	r24, X
   14cde:	90 ad       	ldd	r25, Z+56	; 0x38
   14ce0:	89 2b       	or	r24, r25
   14ce2:	8c 93       	st	X, r24
   14ce4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14ce6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14ce8:	8c 91       	ld	r24, X
   14cea:	96 a9       	ldd	r25, Z+54	; 0x36
   14cec:	89 2b       	or	r24, r25
   14cee:	8c 93       	st	X, r24
   14cf0:	08 95       	ret
   14cf2:	41 30       	cpi	r20, 0x01	; 1
   14cf4:	51 05       	cpc	r21, r1
   14cf6:	d9 f4       	brne	.+54     	; 0x14d2e <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   14cf8:	91 e0       	ldi	r25, 0x01	; 1
   14cfa:	92 b9       	out	0x02, r25	; 2
   14cfc:	a2 a9       	ldd	r26, Z+50	; 0x32
   14cfe:	b3 a9       	ldd	r27, Z+51	; 0x33
   14d00:	9c 91       	ld	r25, X
   14d02:	24 ad       	ldd	r18, Z+60	; 0x3c
   14d04:	92 23       	and	r25, r18
   14d06:	9c 93       	st	X, r25
   14d08:	a2 a9       	ldd	r26, Z+50	; 0x32
   14d0a:	b3 a9       	ldd	r27, Z+51	; 0x33
   14d0c:	9c 91       	ld	r25, X
   14d0e:	20 ad       	ldd	r18, Z+56	; 0x38
   14d10:	92 2b       	or	r25, r18
   14d12:	9c 93       	st	X, r25
   14d14:	a0 a9       	ldd	r26, Z+48	; 0x30
   14d16:	b1 a9       	ldd	r27, Z+49	; 0x31
   14d18:	9c 91       	ld	r25, X
   14d1a:	27 a9       	ldd	r18, Z+55	; 0x37
   14d1c:	92 2b       	or	r25, r18
   14d1e:	9c 93       	st	X, r25
   14d20:	86 17       	cp	r24, r22
   14d22:	19 f0       	breq	.+6      	; 0x14d2a <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   14d24:	88 e0       	ldi	r24, 0x08	; 8
   14d26:	82 b9       	out	0x02, r24	; 2
   14d28:	d1 cf       	rjmp	.-94     	; 0x14ccc <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   14d2a:	8a e0       	ldi	r24, 0x0A	; 10
   14d2c:	fc cf       	rjmp	.-8      	; 0x14d26 <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   14d2e:	86 17       	cp	r24, r22
   14d30:	99 f0       	breq	.+38     	; 0x14d58 <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   14d32:	81 e2       	ldi	r24, 0x21	; 33
   14d34:	82 b9       	out	0x02, r24	; 2
   14d36:	a2 a9       	ldd	r26, Z+50	; 0x32
   14d38:	b3 a9       	ldd	r27, Z+51	; 0x33
   14d3a:	8c 91       	ld	r24, X
   14d3c:	94 ad       	ldd	r25, Z+60	; 0x3c
   14d3e:	89 23       	and	r24, r25
   14d40:	8c 93       	st	X, r24
   14d42:	a2 a9       	ldd	r26, Z+50	; 0x32
   14d44:	b3 a9       	ldd	r27, Z+51	; 0x33
   14d46:	8c 91       	ld	r24, X
   14d48:	90 ad       	ldd	r25, Z+56	; 0x38
   14d4a:	89 2b       	or	r24, r25
   14d4c:	8c 93       	st	X, r24
   14d4e:	a0 a9       	ldd	r26, Z+48	; 0x30
   14d50:	b1 a9       	ldd	r27, Z+49	; 0x31
   14d52:	8c 91       	ld	r24, X
   14d54:	97 a9       	ldd	r25, Z+55	; 0x37
   14d56:	c4 cf       	rjmp	.-120    	; 0x14ce0 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   14d58:	80 e2       	ldi	r24, 0x20	; 32
   14d5a:	ec cf       	rjmp	.-40     	; 0x14d34 <LCDWIKI_KBV::Invert_Display(bool)+0xba>

00014d5c <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   14d5c:	af 92       	push	r10
   14d5e:	bf 92       	push	r11
   14d60:	cf 92       	push	r12
   14d62:	df 92       	push	r13
   14d64:	ef 92       	push	r14
   14d66:	ff 92       	push	r15
   14d68:	1f 93       	push	r17
   14d6a:	cf 93       	push	r28
   14d6c:	df 93       	push	r29
   14d6e:	cd b7       	in	r28, 0x3d	; 61
   14d70:	de b7       	in	r29, 0x3e	; 62
   14d72:	68 97       	sbiw	r28, 0x18	; 24
   14d74:	0f b6       	in	r0, 0x3f	; 63
   14d76:	f8 94       	cli
   14d78:	de bf       	out	0x3e, r29	; 62
   14d7a:	0f be       	out	0x3f, r0	; 63
   14d7c:	cd bf       	out	0x3d, r28	; 61
   14d7e:	5c 01       	movw	r10, r24
   14d80:	7b 01       	movw	r14, r22
   14d82:	6a 01       	movw	r12, r20
   14d84:	1c 14       	cp	r1, r12
   14d86:	1d 04       	cpc	r1, r13
   14d88:	74 f5       	brge	.+92     	; 0x14de6 <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   14d8a:	f7 01       	movw	r30, r14
   14d8c:	64 91       	lpm	r22, Z
   14d8e:	31 96       	adiw	r30, 0x01	; 1
   14d90:	14 91       	lpm	r17, Z
   14d92:	f2 e0       	ldi	r31, 0x02	; 2
   14d94:	ef 0e       	add	r14, r31
   14d96:	f1 1c       	adc	r15, r1
   14d98:	6f 37       	cpi	r22, 0x7F	; 127
   14d9a:	79 f0       	breq	.+30     	; 0x14dba <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   14d9c:	de 01       	movw	r26, r28
   14d9e:	11 96       	adiw	r26, 0x01	; 1
   14da0:	30 e0       	ldi	r19, 0x00	; 0
   14da2:	20 e0       	ldi	r18, 0x00	; 0
   14da4:	ad 01       	movw	r20, r26
   14da6:	21 17       	cp	r18, r17
   14da8:	b0 f4       	brcc	.+44     	; 0x14dd6 <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   14daa:	f7 01       	movw	r30, r14
   14dac:	e2 0f       	add	r30, r18
   14dae:	f3 1f       	adc	r31, r19
   14db0:	e4 91       	lpm	r30, Z
   14db2:	ed 93       	st	X+, r30
   14db4:	2f 5f       	subi	r18, 0xFF	; 255
   14db6:	3f 4f       	sbci	r19, 0xFF	; 255
   14db8:	f6 cf       	rjmp	.-20     	; 0x14da6 <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   14dba:	61 2f       	mov	r22, r17
   14dbc:	70 e0       	ldi	r23, 0x00	; 0
   14dbe:	90 e0       	ldi	r25, 0x00	; 0
   14dc0:	80 e0       	ldi	r24, 0x00	; 0
   14dc2:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
   14dc6:	10 e0       	ldi	r17, 0x00	; 0
   14dc8:	61 2f       	mov	r22, r17
   14dca:	70 e0       	ldi	r23, 0x00	; 0
   14dcc:	6e 5f       	subi	r22, 0xFE	; 254
   14dce:	7f 4f       	sbci	r23, 0xFF	; 255
   14dd0:	c6 1a       	sub	r12, r22
   14dd2:	d7 0a       	sbc	r13, r23
   14dd4:	d7 cf       	rjmp	.-82     	; 0x14d84 <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   14dd6:	e1 0e       	add	r14, r17
   14dd8:	f1 1c       	adc	r15, r1
   14dda:	70 e0       	ldi	r23, 0x00	; 0
   14ddc:	21 2f       	mov	r18, r17
   14dde:	c5 01       	movw	r24, r10
   14de0:	0e 94 5d 9b 	call	0x136ba	; 0x136ba <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14de4:	f1 cf       	rjmp	.-30     	; 0x14dc8 <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   14de6:	68 96       	adiw	r28, 0x18	; 24
   14de8:	0f b6       	in	r0, 0x3f	; 63
   14dea:	f8 94       	cli
   14dec:	de bf       	out	0x3e, r29	; 62
   14dee:	0f be       	out	0x3f, r0	; 63
   14df0:	cd bf       	out	0x3d, r28	; 61
   14df2:	df 91       	pop	r29
   14df4:	cf 91       	pop	r28
   14df6:	1f 91       	pop	r17
   14df8:	ff 90       	pop	r15
   14dfa:	ef 90       	pop	r14
   14dfc:	df 90       	pop	r13
   14dfe:	cf 90       	pop	r12
   14e00:	bf 90       	pop	r11
   14e02:	af 90       	pop	r10
   14e04:	08 95       	ret

00014e06 <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   14e06:	0f 93       	push	r16
   14e08:	1f 93       	push	r17
   14e0a:	cf 93       	push	r28
   14e0c:	df 93       	push	r29
   14e0e:	ec 01       	movw	r28, r24
   14e10:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   14e12:	0e 94 07 9b 	call	0x1360e	; 0x1360e <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   14e16:	68 ec       	ldi	r22, 0xC8	; 200
   14e18:	70 e0       	ldi	r23, 0x00	; 0
   14e1a:	80 e0       	ldi	r24, 0x00	; 0
   14e1c:	90 e0       	ldi	r25, 0x00	; 0
   14e1e:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   14e22:	06 39       	cpi	r16, 0x96	; 150
   14e24:	17 47       	sbci	r17, 0x77	; 119
   14e26:	b9 f5       	brne	.+110    	; 0x14e96 <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   14e28:	89 e0       	ldi	r24, 0x09	; 9
   14e2a:	90 e0       	ldi	r25, 0x00	; 0
   14e2c:	99 8f       	std	Y+25, r25	; 0x19
   14e2e:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   14e30:	8a e2       	ldi	r24, 0x2A	; 42
   14e32:	90 e0       	ldi	r25, 0x00	; 0
   14e34:	9d 8f       	std	Y+29, r25	; 0x1d
   14e36:	8c 8f       	std	Y+28, r24	; 0x1c
   14e38:	8b e2       	ldi	r24, 0x2B	; 43
   14e3a:	90 e0       	ldi	r25, 0x00	; 0
   14e3c:	9f 8f       	std	Y+31, r25	; 0x1f
   14e3e:	8e 8f       	std	Y+30, r24	; 0x1e
   14e40:	8c e2       	ldi	r24, 0x2C	; 44
   14e42:	90 e0       	ldi	r25, 0x00	; 0
   14e44:	99 a3       	std	Y+33, r25	; 0x21
   14e46:	88 a3       	std	Y+32, r24	; 0x20
   14e48:	8e e2       	ldi	r24, 0x2E	; 46
   14e4a:	90 e0       	ldi	r25, 0x00	; 0
   14e4c:	9b a3       	std	Y+35, r25	; 0x23
   14e4e:	8a a3       	std	Y+34, r24	; 0x22
   14e50:	83 e3       	ldi	r24, 0x33	; 51
   14e52:	90 e0       	ldi	r25, 0x00	; 0
   14e54:	9d a3       	std	Y+37, r25	; 0x25
   14e56:	8c a3       	std	Y+36, r24	; 0x24
   14e58:	87 e3       	ldi	r24, 0x37	; 55
   14e5a:	90 e0       	ldi	r25, 0x00	; 0
   14e5c:	9f a3       	std	Y+39, r25	; 0x27
   14e5e:	8e a3       	std	Y+38, r24	; 0x26
   14e60:	86 e3       	ldi	r24, 0x36	; 54
   14e62:	90 e0       	ldi	r25, 0x00	; 0
   14e64:	99 a7       	std	Y+41, r25	; 0x29
   14e66:	88 a7       	std	Y+40, r24	; 0x28
   14e68:	1b a6       	std	Y+43, r1	; 0x2b
   14e6a:	1a a6       	std	Y+42, r1	; 0x2a
   14e6c:	1d a6       	std	Y+45, r1	; 0x2d
   14e6e:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   14e70:	4c e6       	ldi	r20, 0x6C	; 108
   14e72:	50 e0       	ldi	r21, 0x00	; 0
   14e74:	69 e1       	ldi	r22, 0x19	; 25
   14e76:	72 e6       	ldi	r23, 0x62	; 98
   14e78:	ce 01       	movw	r24, r28
   14e7a:	0e 94 ae a6 	call	0x14d5c	; 0x14d5c <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   14e7e:	6e 89       	ldd	r22, Y+22	; 0x16
   14e80:	ce 01       	movw	r24, r28
   14e82:	0e 94 ba a4 	call	0x14974	; 0x14974 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   14e86:	60 e0       	ldi	r22, 0x00	; 0
   14e88:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   14e8a:	df 91       	pop	r29
   14e8c:	cf 91       	pop	r28
   14e8e:	1f 91       	pop	r17
   14e90:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   14e92:	0c 94 3d a6 	jmp	0x14c7a	; 0x14c7a <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   14e96:	8f ef       	ldi	r24, 0xFF	; 255
   14e98:	90 e0       	ldi	r25, 0x00	; 0
   14e9a:	99 8f       	std	Y+25, r25	; 0x19
   14e9c:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   14e9e:	ef cf       	rjmp	.-34     	; 0x14e7e <LCDWIKI_KBV::start(unsigned int)+0x78>

00014ea0 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   14ea0:	cf 93       	push	r28
   14ea2:	df 93       	push	r29
   14ea4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   14ea6:	0e 94 07 9b 	call	0x1360e	; 0x1360e <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   14eaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
   14eac:	9b 8d       	ldd	r25, Y+27	; 0x1b
   14eae:	01 96       	adiw	r24, 0x01	; 1
   14eb0:	29 f4       	brne	.+10     	; 0x14ebc <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   14eb2:	ce 01       	movw	r24, r28
   14eb4:	0e 94 63 a3 	call	0x146c6	; 0x146c6 <LCDWIKI_KBV::Read_ID()>
   14eb8:	9b 8f       	std	Y+27, r25	; 0x1b
   14eba:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   14ebc:	6a 8d       	ldd	r22, Y+26	; 0x1a
   14ebe:	7b 8d       	ldd	r23, Y+27	; 0x1b
   14ec0:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   14ec2:	df 91       	pop	r29
   14ec4:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   14ec6:	0c 94 03 a7 	jmp	0x14e06	; 0x14e06 <LCDWIKI_KBV::start(unsigned int)>

00014eca <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:414
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   14eca:	0f 93       	push	r16
   14ecc:	1f 93       	push	r17
   14ece:	40 e0       	ldi	r20, 0x00	; 0
   14ed0:	04 2f       	mov	r16, r20
   14ed2:	10 e0       	ldi	r17, 0x00	; 0
   14ed4:	30 e0       	ldi	r19, 0x00	; 0
   14ed6:	20 e0       	ldi	r18, 0x00	; 0
   14ed8:	06 17       	cp	r16, r22
   14eda:	17 07       	cpc	r17, r23
   14edc:	28 07       	cpc	r18, r24
   14ede:	39 07       	cpc	r19, r25
   14ee0:	18 f4       	brcc	.+6      	; 0x14ee8 <delay_hus(unsigned long)+0x1e>
   14ee2:	00 00       	nop
   14ee4:	4f 5f       	subi	r20, 0xFF	; 255
   14ee6:	f4 cf       	rjmp	.-24     	; 0x14ed0 <delay_hus(unsigned long)+0x6>
   14ee8:	1f 91       	pop	r17
   14eea:	0f 91       	pop	r16
   14eec:	08 95       	ret

00014eee <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaaa():
   14eee:	8f 92       	push	r8
   14ef0:	9f 92       	push	r9
   14ef2:	af 92       	push	r10
   14ef4:	bf 92       	push	r11
   14ef6:	cf 92       	push	r12
   14ef8:	df 92       	push	r13
   14efa:	ef 92       	push	r14
   14efc:	ff 92       	push	r15
   14efe:	0f 93       	push	r16
   14f00:	1f 93       	push	r17
   14f02:	cf 93       	push	r28
   14f04:	df 93       	push	r29
   14f06:	ec 01       	movw	r28, r24
   14f08:	86 2e       	mov	r8, r22
   14f0a:	d4 2e       	mov	r13, r20
   14f0c:	f2 2e       	mov	r15, r18
   14f0e:	90 2e       	mov	r9, r16
   14f10:	86 2f       	mov	r24, r22
   14f12:	66 0f       	add	r22, r22
   14f14:	99 0b       	sbc	r25, r25
   14f16:	fc 01       	movw	r30, r24
   14f18:	ec 57       	subi	r30, 0x7C	; 124
   14f1a:	fb 49       	sbci	r31, 0x9B	; 155
   14f1c:	e4 91       	lpm	r30, Z
   14f1e:	f0 e0       	ldi	r31, 0x00	; 0
   14f20:	ee 0f       	add	r30, r30
   14f22:	ff 1f       	adc	r31, r31
   14f24:	e6 53       	subi	r30, 0x36	; 54
   14f26:	fb 49       	sbci	r31, 0x9B	; 155
   14f28:	25 91       	lpm	r18, Z+
   14f2a:	34 91       	lpm	r19, Z
   14f2c:	39 8b       	std	Y+17, r19	; 0x11
   14f2e:	28 8b       	std	Y+16, r18	; 0x10
   14f30:	04 2f       	mov	r16, r20
   14f32:	44 0f       	add	r20, r20
   14f34:	11 0b       	sbc	r17, r17
   14f36:	f8 01       	movw	r30, r16
   14f38:	ec 57       	subi	r30, 0x7C	; 124
   14f3a:	fb 49       	sbci	r31, 0x9B	; 155
   14f3c:	e4 91       	lpm	r30, Z
   14f3e:	f0 e0       	ldi	r31, 0x00	; 0
   14f40:	ee 0f       	add	r30, r30
   14f42:	ff 1f       	adc	r31, r31
   14f44:	e6 53       	subi	r30, 0x36	; 54
   14f46:	fb 49       	sbci	r31, 0x9B	; 155
   14f48:	25 91       	lpm	r18, Z+
   14f4a:	34 91       	lpm	r19, Z
   14f4c:	3b 8b       	std	Y+19, r19	; 0x13
   14f4e:	2a 8b       	std	Y+18, r18	; 0x12
   14f50:	af 2d       	mov	r26, r15
   14f52:	0f 2c       	mov	r0, r15
   14f54:	00 0c       	add	r0, r0
   14f56:	bb 0b       	sbc	r27, r27
   14f58:	fd 01       	movw	r30, r26
   14f5a:	ec 57       	subi	r30, 0x7C	; 124
   14f5c:	fb 49       	sbci	r31, 0x9B	; 155
   14f5e:	e4 91       	lpm	r30, Z
   14f60:	f0 e0       	ldi	r31, 0x00	; 0
   14f62:	ee 0f       	add	r30, r30
   14f64:	ff 1f       	adc	r31, r31
   14f66:	e6 54       	subi	r30, 0x46	; 70
   14f68:	fb 49       	sbci	r31, 0x9B	; 155
   14f6a:	25 91       	lpm	r18, Z+
   14f6c:	34 91       	lpm	r19, Z
   14f6e:	3d 8b       	std	Y+21, r19	; 0x15
   14f70:	2c 8b       	std	Y+20, r18	; 0x14
   14f72:	69 2d       	mov	r22, r9
   14f74:	09 2c       	mov	r0, r9
   14f76:	00 0c       	add	r0, r0
   14f78:	77 0b       	sbc	r23, r23
   14f7a:	fb 01       	movw	r30, r22
   14f7c:	ec 57       	subi	r30, 0x7C	; 124
   14f7e:	fb 49       	sbci	r31, 0x9B	; 155
   14f80:	e4 91       	lpm	r30, Z
   14f82:	f0 e0       	ldi	r31, 0x00	; 0
   14f84:	ee 0f       	add	r30, r30
   14f86:	ff 1f       	adc	r31, r31
   14f88:	e6 53       	subi	r30, 0x36	; 54
   14f8a:	fb 49       	sbci	r31, 0x9B	; 155
   14f8c:	25 91       	lpm	r18, Z+
   14f8e:	34 91       	lpm	r19, Z
   14f90:	3f 8b       	std	Y+23, r19	; 0x17
   14f92:	2e 8b       	std	Y+22, r18	; 0x16
   14f94:	4e 2d       	mov	r20, r14
   14f96:	0e 2c       	mov	r0, r14
   14f98:	00 0c       	add	r0, r0
   14f9a:	55 0b       	sbc	r21, r21
   14f9c:	fa 01       	movw	r30, r20
   14f9e:	ec 57       	subi	r30, 0x7C	; 124
   14fa0:	fb 49       	sbci	r31, 0x9B	; 155
   14fa2:	e4 91       	lpm	r30, Z
   14fa4:	f0 e0       	ldi	r31, 0x00	; 0
   14fa6:	ee 0f       	add	r30, r30
   14fa8:	ff 1f       	adc	r31, r31
   14faa:	e6 54       	subi	r30, 0x46	; 70
   14fac:	fb 49       	sbci	r31, 0x9B	; 155
   14fae:	25 91       	lpm	r18, Z+
   14fb0:	34 91       	lpm	r19, Z
   14fb2:	39 8f       	std	Y+25, r19	; 0x19
   14fb4:	28 8f       	std	Y+24, r18	; 0x18
   14fb6:	2c 2d       	mov	r18, r12
   14fb8:	0c 2c       	mov	r0, r12
   14fba:	00 0c       	add	r0, r0
   14fbc:	33 0b       	sbc	r19, r19
   14fbe:	f9 01       	movw	r30, r18
   14fc0:	ec 57       	subi	r30, 0x7C	; 124
   14fc2:	fb 49       	sbci	r31, 0x9B	; 155
   14fc4:	e4 91       	lpm	r30, Z
   14fc6:	f0 e0       	ldi	r31, 0x00	; 0
   14fc8:	ee 0f       	add	r30, r30
   14fca:	ff 1f       	adc	r31, r31
   14fcc:	e6 53       	subi	r30, 0x36	; 54
   14fce:	fb 49       	sbci	r31, 0x9B	; 155
   14fd0:	a5 90       	lpm	r10, Z+
   14fd2:	b4 90       	lpm	r11, Z
   14fd4:	bb 8e       	std	Y+27, r11	; 0x1b
   14fd6:	aa 8e       	std	Y+26, r10	; 0x1a
   14fd8:	fc 01       	movw	r30, r24
   14fda:	e2 5b       	subi	r30, 0xB2	; 178
   14fdc:	fb 49       	sbci	r31, 0x9B	; 155
   14fde:	e4 91       	lpm	r30, Z
   14fe0:	ec 8f       	std	Y+28, r30	; 0x1c
   14fe2:	f8 01       	movw	r30, r16
   14fe4:	e2 5b       	subi	r30, 0xB2	; 178
   14fe6:	fb 49       	sbci	r31, 0x9B	; 155
   14fe8:	e4 91       	lpm	r30, Z
   14fea:	ed 8f       	std	Y+29, r30	; 0x1d
   14fec:	fd 01       	movw	r30, r26
   14fee:	e2 5b       	subi	r30, 0xB2	; 178
   14ff0:	fb 49       	sbci	r31, 0x9B	; 155
   14ff2:	e4 91       	lpm	r30, Z
   14ff4:	ee 8f       	std	Y+30, r30	; 0x1e
   14ff6:	fb 01       	movw	r30, r22
   14ff8:	e2 5b       	subi	r30, 0xB2	; 178
   14ffa:	fb 49       	sbci	r31, 0x9B	; 155
   14ffc:	e4 91       	lpm	r30, Z
   14ffe:	ef 8f       	std	Y+31, r30	; 0x1f
   15000:	fa 01       	movw	r30, r20
   15002:	e2 5b       	subi	r30, 0xB2	; 178
   15004:	fb 49       	sbci	r31, 0x9B	; 155
   15006:	e4 91       	lpm	r30, Z
   15008:	e8 a3       	std	Y+32, r30	; 0x20
   1500a:	f9 01       	movw	r30, r18
   1500c:	e2 5b       	subi	r30, 0xB2	; 178
   1500e:	fb 49       	sbci	r31, 0x9B	; 155
   15010:	e4 91       	lpm	r30, Z
   15012:	e9 a3       	std	Y+33, r30	; 0x21
   15014:	61 e0       	ldi	r22, 0x01	; 1
   15016:	88 2d       	mov	r24, r8
   15018:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   1501c:	61 e0       	ldi	r22, 0x01	; 1
   1501e:	8d 2d       	mov	r24, r13
   15020:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15024:	60 e0       	ldi	r22, 0x00	; 0
   15026:	8f 2d       	mov	r24, r15
   15028:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   1502c:	61 e0       	ldi	r22, 0x01	; 1
   1502e:	89 2d       	mov	r24, r9
   15030:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15034:	60 e0       	ldi	r22, 0x00	; 0
   15036:	8e 2d       	mov	r24, r14
   15038:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   1503c:	61 e0       	ldi	r22, 0x01	; 1
   1503e:	8c 2d       	mov	r24, r12
   15040:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15044:	1c 86       	std	Y+12, r1	; 0x0c
   15046:	1d 86       	std	Y+13, r1	; 0x0d
   15048:	1e 86       	std	Y+14, r1	; 0x0e
   1504a:	1f 86       	std	Y+15, r1	; 0x0f
   1504c:	19 86       	std	Y+9, r1	; 0x09
   1504e:	18 86       	std	Y+8, r1	; 0x08
   15050:	1b 86       	std	Y+11, r1	; 0x0b
   15052:	1a 86       	std	Y+10, r1	; 0x0a
   15054:	19 82       	std	Y+1, r1	; 0x01
   15056:	18 82       	st	Y, r1
   15058:	1b 82       	std	Y+3, r1	; 0x03
   1505a:	1a 82       	std	Y+2, r1	; 0x02
   1505c:	8f ef       	ldi	r24, 0xFF	; 255
   1505e:	9f ef       	ldi	r25, 0xFF	; 255
   15060:	9d 83       	std	Y+5, r25	; 0x05
   15062:	8c 83       	std	Y+4, r24	; 0x04
   15064:	9f 83       	std	Y+7, r25	; 0x07
   15066:	8e 83       	std	Y+6, r24	; 0x06
   15068:	df 91       	pop	r29
   1506a:	cf 91       	pop	r28
   1506c:	1f 91       	pop	r17
   1506e:	0f 91       	pop	r16
   15070:	ff 90       	pop	r15
   15072:	ef 90       	pop	r14
   15074:	df 90       	pop	r13
   15076:	cf 90       	pop	r12
   15078:	bf 90       	pop	r11
   1507a:	af 90       	pop	r10
   1507c:	9f 90       	pop	r9
   1507e:	8f 90       	pop	r8
   15080:	08 95       	ret

00015082 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh():
   15082:	ef 92       	push	r14
   15084:	ff 92       	push	r15
   15086:	0f 93       	push	r16
   15088:	1f 93       	push	r17
   1508a:	cf 93       	push	r28
   1508c:	df 93       	push	r29
   1508e:	ec 01       	movw	r28, r24
   15090:	f1 2c       	mov	r15, r1
   15092:	e1 2c       	mov	r14, r1
   15094:	06 2f       	mov	r16, r22
   15096:	10 e0       	ldi	r17, 0x00	; 0
   15098:	ee 89       	ldd	r30, Y+22	; 0x16
   1509a:	ff 89       	ldd	r31, Y+23	; 0x17
   1509c:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1509e:	98 01       	movw	r18, r16
   150a0:	0e 2c       	mov	r0, r14
   150a2:	02 c0       	rjmp	.+4      	; 0x150a8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x26>
   150a4:	35 95       	asr	r19
   150a6:	27 95       	ror	r18
   150a8:	0a 94       	dec	r0
   150aa:	e2 f7       	brpl	.-8      	; 0x150a4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x22>
   150ac:	90 81       	ld	r25, Z
   150ae:	20 ff       	sbrs	r18, 0
   150b0:	2f c0       	rjmp	.+94     	; 0x15110 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x8e>
   150b2:	89 2b       	or	r24, r25
   150b4:	80 83       	st	Z, r24
   150b6:	60 e5       	ldi	r22, 0x50	; 80
   150b8:	70 e0       	ldi	r23, 0x00	; 0
   150ba:	80 e0       	ldi	r24, 0x00	; 0
   150bc:	90 e0       	ldi	r25, 0x00	; 0
   150be:	0e 94 65 a7 	call	0x14eca	; 0x14eca <delay_hus(unsigned long)>
   150c2:	ea 89       	ldd	r30, Y+18	; 0x12
   150c4:	fb 89       	ldd	r31, Y+19	; 0x13
   150c6:	90 81       	ld	r25, Z
   150c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
   150ca:	80 95       	com	r24
   150cc:	89 23       	and	r24, r25
   150ce:	80 83       	st	Z, r24
   150d0:	68 e7       	ldi	r22, 0x78	; 120
   150d2:	70 e0       	ldi	r23, 0x00	; 0
   150d4:	80 e0       	ldi	r24, 0x00	; 0
   150d6:	90 e0       	ldi	r25, 0x00	; 0
   150d8:	0e 94 65 a7 	call	0x14eca	; 0x14eca <delay_hus(unsigned long)>
   150dc:	ea 89       	ldd	r30, Y+18	; 0x12
   150de:	fb 89       	ldd	r31, Y+19	; 0x13
   150e0:	80 81       	ld	r24, Z
   150e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   150e4:	89 2b       	or	r24, r25
   150e6:	80 83       	st	Z, r24
   150e8:	68 e7       	ldi	r22, 0x78	; 120
   150ea:	70 e0       	ldi	r23, 0x00	; 0
   150ec:	80 e0       	ldi	r24, 0x00	; 0
   150ee:	90 e0       	ldi	r25, 0x00	; 0
   150f0:	0e 94 65 a7 	call	0x14eca	; 0x14eca <delay_hus(unsigned long)>
   150f4:	8f ef       	ldi	r24, 0xFF	; 255
   150f6:	e8 1a       	sub	r14, r24
   150f8:	f8 0a       	sbc	r15, r24
   150fa:	88 e0       	ldi	r24, 0x08	; 8
   150fc:	e8 16       	cp	r14, r24
   150fe:	f1 04       	cpc	r15, r1
   15100:	59 f6       	brne	.-106    	; 0x15098 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x16>
   15102:	df 91       	pop	r29
   15104:	cf 91       	pop	r28
   15106:	1f 91       	pop	r17
   15108:	0f 91       	pop	r16
   1510a:	ff 90       	pop	r15
   1510c:	ef 90       	pop	r14
   1510e:	08 95       	ret
   15110:	80 95       	com	r24
   15112:	89 23       	and	r24, r25
   15114:	cf cf       	rjmp	.-98     	; 0x150b4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x32>

00015116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh():
   15116:	1f 93       	push	r17
   15118:	cf 93       	push	r28
   1511a:	df 93       	push	r29
   1511c:	ec 01       	movw	r28, r24
   1511e:	16 2f       	mov	r17, r22
   15120:	6f 87       	std	Y+15, r22	; 0x0f
   15122:	e8 89       	ldd	r30, Y+16	; 0x10
   15124:	f9 89       	ldd	r31, Y+17	; 0x11
   15126:	90 81       	ld	r25, Z
   15128:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1512a:	80 95       	com	r24
   1512c:	89 23       	and	r24, r25
   1512e:	80 83       	st	Z, r24
   15130:	ea 8d       	ldd	r30, Y+26	; 0x1a
   15132:	fb 8d       	ldd	r31, Y+27	; 0x1b
   15134:	90 81       	ld	r25, Z
   15136:	89 a1       	ldd	r24, Y+33	; 0x21
   15138:	80 95       	com	r24
   1513a:	89 23       	and	r24, r25
   1513c:	80 83       	st	Z, r24
   1513e:	68 ec       	ldi	r22, 0xC8	; 200
   15140:	70 e0       	ldi	r23, 0x00	; 0
   15142:	80 e0       	ldi	r24, 0x00	; 0
   15144:	90 e0       	ldi	r25, 0x00	; 0
   15146:	0e 94 65 a7 	call	0x14eca	; 0x14eca <delay_hus(unsigned long)>
   1514a:	e8 89       	ldd	r30, Y+16	; 0x10
   1514c:	f9 89       	ldd	r31, Y+17	; 0x11
   1514e:	80 81       	ld	r24, Z
   15150:	9c 8d       	ldd	r25, Y+28	; 0x1c
   15152:	89 2b       	or	r24, r25
   15154:	80 83       	st	Z, r24
   15156:	ea 8d       	ldd	r30, Y+26	; 0x1a
   15158:	fb 8d       	ldd	r31, Y+27	; 0x1b
   1515a:	80 81       	ld	r24, Z
   1515c:	99 a1       	ldd	r25, Y+33	; 0x21
   1515e:	89 2b       	or	r24, r25
   15160:	80 83       	st	Z, r24
   15162:	65 e5       	ldi	r22, 0x55	; 85
   15164:	ce 01       	movw	r24, r28
   15166:	0e 94 41 a8 	call	0x15082	; 0x15082 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   1516a:	61 2f       	mov	r22, r17
   1516c:	ce 01       	movw	r24, r28
   1516e:	df 91       	pop	r29
   15170:	cf 91       	pop	r28
   15172:	1f 91       	pop	r17
   15174:	0c 94 41 a8 	jmp	0x15082	; 0x15082 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

00015178 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   15178:	fc 01       	movw	r30, r24
   1517a:	a6 89       	ldd	r26, Z+22	; 0x16
   1517c:	b7 89       	ldd	r27, Z+23	; 0x17
   1517e:	8c 91       	ld	r24, X
   15180:	97 8d       	ldd	r25, Z+31	; 0x1f
   15182:	89 2b       	or	r24, r25
   15184:	8c 93       	st	X, r24
   15186:	a2 89       	ldd	r26, Z+18	; 0x12
   15188:	b3 89       	ldd	r27, Z+19	; 0x13
   1518a:	8c 91       	ld	r24, X
   1518c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1518e:	89 2b       	or	r24, r25
   15190:	8c 93       	st	X, r24
   15192:	a0 89       	ldd	r26, Z+16	; 0x10
   15194:	b1 89       	ldd	r27, Z+17	; 0x11
   15196:	8c 91       	ld	r24, X
   15198:	94 8d       	ldd	r25, Z+28	; 0x1c
   1519a:	89 2b       	or	r24, r25
   1519c:	8c 93       	st	X, r24
   1519e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   151a0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   151a2:	8c 91       	ld	r24, X
   151a4:	91 a1       	ldd	r25, Z+33	; 0x21
   151a6:	89 2b       	or	r24, r25
   151a8:	8c 93       	st	X, r24
   151aa:	51 87       	std	Z+9, r21	; 0x09
   151ac:	40 87       	std	Z+8, r20	; 0x08
   151ae:	33 87       	std	Z+11, r19	; 0x0b
   151b0:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   151b2:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   151b4:	6a e0       	ldi	r22, 0x0A	; 10
   151b6:	cf 01       	movw	r24, r30
   151b8:	0c 94 8b a8 	jmp	0x15116	; 0x15116 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>

000151bc <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   151bc:	fc 01       	movw	r30, r24
   151be:	28 e0       	ldi	r18, 0x08	; 8
   151c0:	30 e0       	ldi	r19, 0x00	; 0
   151c2:	90 e8       	ldi	r25, 0x80	; 128
   151c4:	a6 89       	ldd	r26, Z+22	; 0x16
   151c6:	b7 89       	ldd	r27, Z+23	; 0x17
   151c8:	87 8d       	ldd	r24, Z+31	; 0x1f
   151ca:	46 2f       	mov	r20, r22
   151cc:	49 23       	and	r20, r25
   151ce:	a9 f0       	breq	.+42     	; 0x151fa <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   151d0:	4c 91       	ld	r20, X
   151d2:	84 2b       	or	r24, r20
   151d4:	8c 93       	st	X, r24
   151d6:	a2 89       	ldd	r26, Z+18	; 0x12
   151d8:	b3 89       	ldd	r27, Z+19	; 0x13
   151da:	4c 91       	ld	r20, X
   151dc:	85 8d       	ldd	r24, Z+29	; 0x1d
   151de:	80 95       	com	r24
   151e0:	84 23       	and	r24, r20
   151e2:	8c 93       	st	X, r24
   151e4:	a2 89       	ldd	r26, Z+18	; 0x12
   151e6:	b3 89       	ldd	r27, Z+19	; 0x13
   151e8:	8c 91       	ld	r24, X
   151ea:	45 8d       	ldd	r20, Z+29	; 0x1d
   151ec:	84 2b       	or	r24, r20
   151ee:	8c 93       	st	X, r24
   151f0:	96 95       	lsr	r25
   151f2:	21 50       	subi	r18, 0x01	; 1
   151f4:	31 09       	sbc	r19, r1
   151f6:	31 f7       	brne	.-52     	; 0x151c4 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   151f8:	08 95       	ret
   151fa:	4c 91       	ld	r20, X
   151fc:	80 95       	com	r24
   151fe:	84 23       	and	r24, r20
   15200:	e9 cf       	rjmp	.-46     	; 0x151d4 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

00015202 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   15202:	cf 93       	push	r28
   15204:	df 93       	push	r29
   15206:	ec 01       	movw	r28, r24
   15208:	e8 89       	ldd	r30, Y+16	; 0x10
   1520a:	f9 89       	ldd	r31, Y+17	; 0x11
   1520c:	90 81       	ld	r25, Z
   1520e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   15210:	80 95       	com	r24
   15212:	89 23       	and	r24, r25
   15214:	80 83       	st	Z, r24
   15216:	ea 89       	ldd	r30, Y+18	; 0x12
   15218:	fb 89       	ldd	r31, Y+19	; 0x13
   1521a:	90 81       	ld	r25, Z
   1521c:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1521e:	80 95       	com	r24
   15220:	89 23       	and	r24, r25
   15222:	80 83       	st	Z, r24
   15224:	ee 89       	ldd	r30, Y+22	; 0x16
   15226:	ff 89       	ldd	r31, Y+23	; 0x17
   15228:	90 81       	ld	r25, Z
   1522a:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1522c:	80 95       	com	r24
   1522e:	89 23       	and	r24, r25
   15230:	80 83       	st	Z, r24
   15232:	ce 01       	movw	r24, r28
   15234:	0e 94 de a8 	call	0x151bc	; 0x151bc <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   15238:	ea 89       	ldd	r30, Y+18	; 0x12
   1523a:	fb 89       	ldd	r31, Y+19	; 0x13
   1523c:	90 81       	ld	r25, Z
   1523e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15240:	80 95       	com	r24
   15242:	89 23       	and	r24, r25
   15244:	80 83       	st	Z, r24
   15246:	61 e0       	ldi	r22, 0x01	; 1
   15248:	70 e0       	ldi	r23, 0x00	; 0
   1524a:	80 e0       	ldi	r24, 0x00	; 0
   1524c:	90 e0       	ldi	r25, 0x00	; 0
   1524e:	0e 94 65 a7 	call	0x14eca	; 0x14eca <delay_hus(unsigned long)>
   15252:	ea 89       	ldd	r30, Y+18	; 0x12
   15254:	fb 89       	ldd	r31, Y+19	; 0x13
   15256:	80 81       	ld	r24, Z
   15258:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1525a:	89 2b       	or	r24, r25
   1525c:	80 83       	st	Z, r24
   1525e:	ea 89       	ldd	r30, Y+18	; 0x12
   15260:	fb 89       	ldd	r31, Y+19	; 0x13
   15262:	90 81       	ld	r25, Z
   15264:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15266:	80 95       	com	r24
   15268:	89 23       	and	r24, r25
   1526a:	80 83       	st	Z, r24
   1526c:	30 e1       	ldi	r19, 0x10	; 16
   1526e:	90 e0       	ldi	r25, 0x00	; 0
   15270:	80 e0       	ldi	r24, 0x00	; 0
   15272:	88 0f       	add	r24, r24
   15274:	99 1f       	adc	r25, r25
   15276:	ea 89       	ldd	r30, Y+18	; 0x12
   15278:	fb 89       	ldd	r31, Y+19	; 0x13
   1527a:	40 81       	ld	r20, Z
   1527c:	2d 8d       	ldd	r18, Y+29	; 0x1d
   1527e:	20 95       	com	r18
   15280:	24 23       	and	r18, r20
   15282:	20 83       	st	Z, r18
   15284:	ea 89       	ldd	r30, Y+18	; 0x12
   15286:	fb 89       	ldd	r31, Y+19	; 0x13
   15288:	20 81       	ld	r18, Z
   1528a:	4d 8d       	ldd	r20, Y+29	; 0x1d
   1528c:	24 2b       	or	r18, r20
   1528e:	20 83       	st	Z, r18
   15290:	ec 89       	ldd	r30, Y+20	; 0x14
   15292:	fd 89       	ldd	r31, Y+21	; 0x15
   15294:	20 81       	ld	r18, Z
   15296:	4e 8d       	ldd	r20, Y+30	; 0x1e
   15298:	24 23       	and	r18, r20
   1529a:	09 f0       	breq	.+2      	; 0x1529e <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x9c>
   1529c:	01 96       	adiw	r24, 0x01	; 1
   1529e:	31 50       	subi	r19, 0x01	; 1
   152a0:	41 f7       	brne	.-48     	; 0x15272 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x70>
   152a2:	e8 89       	ldd	r30, Y+16	; 0x10
   152a4:	f9 89       	ldd	r31, Y+17	; 0x11
   152a6:	20 81       	ld	r18, Z
   152a8:	3c 8d       	ldd	r19, Y+28	; 0x1c
   152aa:	23 2b       	or	r18, r19
   152ac:	20 83       	st	Z, r18
   152ae:	24 e0       	ldi	r18, 0x04	; 4
   152b0:	96 95       	lsr	r25
   152b2:	87 95       	ror	r24
   152b4:	2a 95       	dec	r18
   152b6:	e1 f7       	brne	.-8      	; 0x152b0 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xae>
   152b8:	df 91       	pop	r29
   152ba:	cf 91       	pop	r28
   152bc:	08 95       	ret

000152be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   152be:	9f 92       	push	r9
   152c0:	af 92       	push	r10
   152c2:	bf 92       	push	r11
   152c4:	cf 92       	push	r12
   152c6:	df 92       	push	r13
   152c8:	ef 92       	push	r14
   152ca:	ff 92       	push	r15
   152cc:	0f 93       	push	r16
   152ce:	1f 93       	push	r17
   152d0:	cf 93       	push	r28
   152d2:	df 93       	push	r29
   152d4:	00 d0       	rcall	.+0      	; 0x152d6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   152d6:	00 d0       	rcall	.+0      	; 0x152d8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   152d8:	00 d0       	rcall	.+0      	; 0x152da <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   152da:	1f 92       	push	r1
   152dc:	cd b7       	in	r28, 0x3d	; 61
   152de:	de b7       	in	r29, 0x3e	; 62
   152e0:	5c 01       	movw	r10, r24
   152e2:	96 2e       	mov	r9, r22
   152e4:	8e 01       	movw	r16, r28
   152e6:	0f 5f       	subi	r16, 0xFF	; 255
   152e8:	1f 4f       	sbci	r17, 0xFF	; 255
   152ea:	6e 01       	movw	r12, r28
   152ec:	8b e0       	ldi	r24, 0x0B	; 11
   152ee:	c8 0e       	add	r12, r24
   152f0:	d1 1c       	adc	r13, r1
   152f2:	78 01       	movw	r14, r16
   152f4:	69 2d       	mov	r22, r9
   152f6:	c5 01       	movw	r24, r10
   152f8:	0e 94 01 a9 	call	0x15202	; 0x15202 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   152fc:	d7 01       	movw	r26, r14
   152fe:	8d 93       	st	X+, r24
   15300:	9d 93       	st	X+, r25
   15302:	7d 01       	movw	r14, r26
   15304:	ac 15       	cp	r26, r12
   15306:	bd 05       	cpc	r27, r13
   15308:	a9 f7       	brne	.-22     	; 0x152f4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   1530a:	a8 01       	movw	r20, r16
   1530c:	48 5f       	subi	r20, 0xF8	; 248
   1530e:	5f 4f       	sbci	r21, 0xFF	; 255
   15310:	f8 01       	movw	r30, r16
   15312:	d8 01       	movw	r26, r16
   15314:	8d 91       	ld	r24, X+
   15316:	9c 91       	ld	r25, X
   15318:	11 97       	sbiw	r26, 0x01	; 1
   1531a:	22 81       	ldd	r18, Z+2	; 0x02
   1531c:	33 81       	ldd	r19, Z+3	; 0x03
   1531e:	28 17       	cp	r18, r24
   15320:	39 07       	cpc	r19, r25
   15322:	20 f4       	brcc	.+8      	; 0x1532c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   15324:	2d 93       	st	X+, r18
   15326:	3c 93       	st	X, r19
   15328:	93 83       	std	Z+3, r25	; 0x03
   1532a:	82 83       	std	Z+2, r24	; 0x02
   1532c:	32 96       	adiw	r30, 0x02	; 2
   1532e:	e4 17       	cp	r30, r20
   15330:	f5 07       	cpc	r31, r21
   15332:	79 f7       	brne	.-34     	; 0x15312 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   15334:	0e 5f       	subi	r16, 0xFE	; 254
   15336:	1f 4f       	sbci	r17, 0xFF	; 255
   15338:	e0 17       	cp	r30, r16
   1533a:	f1 07       	cpc	r31, r17
   1533c:	49 f7       	brne	.-46     	; 0x15310 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   1533e:	8b 81       	ldd	r24, Y+3	; 0x03
   15340:	9c 81       	ldd	r25, Y+4	; 0x04
   15342:	2d 81       	ldd	r18, Y+5	; 0x05
   15344:	3e 81       	ldd	r19, Y+6	; 0x06
   15346:	82 0f       	add	r24, r18
   15348:	93 1f       	adc	r25, r19
   1534a:	2f 81       	ldd	r18, Y+7	; 0x07
   1534c:	38 85       	ldd	r19, Y+8	; 0x08
   1534e:	82 0f       	add	r24, r18
   15350:	93 1f       	adc	r25, r19
   15352:	63 e0       	ldi	r22, 0x03	; 3
   15354:	70 e0       	ldi	r23, 0x00	; 0
   15356:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
   1535a:	cb 01       	movw	r24, r22
   1535c:	2a 96       	adiw	r28, 0x0a	; 10
   1535e:	0f b6       	in	r0, 0x3f	; 63
   15360:	f8 94       	cli
   15362:	de bf       	out	0x3e, r29	; 62
   15364:	0f be       	out	0x3f, r0	; 63
   15366:	cd bf       	out	0x3d, r28	; 61
   15368:	df 91       	pop	r29
   1536a:	cf 91       	pop	r28
   1536c:	1f 91       	pop	r17
   1536e:	0f 91       	pop	r16
   15370:	ff 90       	pop	r15
   15372:	ef 90       	pop	r14
   15374:	df 90       	pop	r13
   15376:	cf 90       	pop	r12
   15378:	bf 90       	pop	r11
   1537a:	af 90       	pop	r10
   1537c:	9f 90       	pop	r9
   1537e:	08 95       	ret

00015380 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   15380:	cf 92       	push	r12
   15382:	df 92       	push	r13
   15384:	ef 92       	push	r14
   15386:	ff 92       	push	r15
   15388:	0f 93       	push	r16
   1538a:	1f 93       	push	r17
   1538c:	cf 93       	push	r28
   1538e:	df 93       	push	r29
   15390:	ec 01       	movw	r28, r24
   15392:	7b 01       	movw	r14, r22
   15394:	8a 01       	movw	r16, r20
   15396:	60 ed       	ldi	r22, 0xD0	; 208
   15398:	0e 94 5f a9 	call	0x152be	; 0x152be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   1539c:	6c 01       	movw	r12, r24
   1539e:	60 e9       	ldi	r22, 0x90	; 144
   153a0:	ce 01       	movw	r24, r28
   153a2:	0e 94 5f a9 	call	0x152be	; 0x152be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   153a6:	f7 01       	movw	r30, r14
   153a8:	d1 82       	std	Z+1, r13	; 0x01
   153aa:	c0 82       	st	Z, r12
   153ac:	f8 01       	movw	r30, r16
   153ae:	91 83       	std	Z+1, r25	; 0x01
   153b0:	80 83       	st	Z, r24
   153b2:	81 e0       	ldi	r24, 0x01	; 1
   153b4:	df 91       	pop	r29
   153b6:	cf 91       	pop	r28
   153b8:	1f 91       	pop	r17
   153ba:	0f 91       	pop	r16
   153bc:	ff 90       	pop	r15
   153be:	ef 90       	pop	r14
   153c0:	df 90       	pop	r13
   153c2:	cf 90       	pop	r12
   153c4:	08 95       	ret

000153c6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   153c6:	cf 92       	push	r12
   153c8:	df 92       	push	r13
   153ca:	ef 92       	push	r14
   153cc:	ff 92       	push	r15
   153ce:	0f 93       	push	r16
   153d0:	1f 93       	push	r17
   153d2:	cf 93       	push	r28
   153d4:	df 93       	push	r29
   153d6:	00 d0       	rcall	.+0      	; 0x153d8 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   153d8:	00 d0       	rcall	.+0      	; 0x153da <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   153da:	1f 92       	push	r1
   153dc:	1f 92       	push	r1
   153de:	cd b7       	in	r28, 0x3d	; 61
   153e0:	de b7       	in	r29, 0x3e	; 62
   153e2:	6c 01       	movw	r12, r24
   153e4:	7b 01       	movw	r14, r22
   153e6:	8a 01       	movw	r16, r20
   153e8:	ae 01       	movw	r20, r28
   153ea:	4b 5f       	subi	r20, 0xFB	; 251
   153ec:	5f 4f       	sbci	r21, 0xFF	; 255
   153ee:	be 01       	movw	r22, r28
   153f0:	69 5f       	subi	r22, 0xF9	; 249
   153f2:	7f 4f       	sbci	r23, 0xFF	; 255
   153f4:	0e 94 c0 a9 	call	0x15380	; 0x15380 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   153f8:	81 11       	cpse	r24, r1
   153fa:	10 c0       	rjmp	.+32     	; 0x1541c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   153fc:	80 e0       	ldi	r24, 0x00	; 0
   153fe:	28 96       	adiw	r28, 0x08	; 8
   15400:	0f b6       	in	r0, 0x3f	; 63
   15402:	f8 94       	cli
   15404:	de bf       	out	0x3e, r29	; 62
   15406:	0f be       	out	0x3f, r0	; 63
   15408:	cd bf       	out	0x3d, r28	; 61
   1540a:	df 91       	pop	r29
   1540c:	cf 91       	pop	r28
   1540e:	1f 91       	pop	r17
   15410:	0f 91       	pop	r16
   15412:	ff 90       	pop	r15
   15414:	ef 90       	pop	r14
   15416:	df 90       	pop	r13
   15418:	cf 90       	pop	r12
   1541a:	08 95       	ret
   1541c:	ae 01       	movw	r20, r28
   1541e:	4f 5f       	subi	r20, 0xFF	; 255
   15420:	5f 4f       	sbci	r21, 0xFF	; 255
   15422:	be 01       	movw	r22, r28
   15424:	6d 5f       	subi	r22, 0xFD	; 253
   15426:	7f 4f       	sbci	r23, 0xFF	; 255
   15428:	c6 01       	movw	r24, r12
   1542a:	0e 94 c0 a9 	call	0x15380	; 0x15380 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   1542e:	88 23       	and	r24, r24
   15430:	29 f3       	breq	.-54     	; 0x153fc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   15432:	2b 81       	ldd	r18, Y+3	; 0x03
   15434:	3c 81       	ldd	r19, Y+4	; 0x04
   15436:	6f 81       	ldd	r22, Y+7	; 0x07
   15438:	78 85       	ldd	r23, Y+8	; 0x08
   1543a:	62 17       	cp	r22, r18
   1543c:	73 07       	cpc	r23, r19
   1543e:	40 f0       	brcs	.+16     	; 0x15450 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   15440:	c9 01       	movw	r24, r18
   15442:	c2 96       	adiw	r24, 0x32	; 50
   15444:	68 17       	cp	r22, r24
   15446:	79 07       	cpc	r23, r25
   15448:	40 f0       	brcs	.+16     	; 0x1545a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   1544a:	26 17       	cp	r18, r22
   1544c:	37 07       	cpc	r19, r23
   1544e:	b0 f2       	brcs	.-84     	; 0x153fc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   15450:	cb 01       	movw	r24, r22
   15452:	c2 96       	adiw	r24, 0x32	; 50
   15454:	28 17       	cp	r18, r24
   15456:	39 07       	cpc	r19, r25
   15458:	88 f6       	brcc	.-94     	; 0x153fc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1545a:	89 81       	ldd	r24, Y+1	; 0x01
   1545c:	9a 81       	ldd	r25, Y+2	; 0x02
   1545e:	4d 81       	ldd	r20, Y+5	; 0x05
   15460:	5e 81       	ldd	r21, Y+6	; 0x06
   15462:	48 17       	cp	r20, r24
   15464:	59 07       	cpc	r21, r25
   15466:	40 f0       	brcs	.+16     	; 0x15478 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   15468:	fc 01       	movw	r30, r24
   1546a:	f2 96       	adiw	r30, 0x32	; 50
   1546c:	4e 17       	cp	r20, r30
   1546e:	5f 07       	cpc	r21, r31
   15470:	48 f0       	brcs	.+18     	; 0x15484 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   15472:	84 17       	cp	r24, r20
   15474:	95 07       	cpc	r25, r21
   15476:	10 f2       	brcs	.-124    	; 0x153fc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   15478:	fa 01       	movw	r30, r20
   1547a:	f2 96       	adiw	r30, 0x32	; 50
   1547c:	8e 17       	cp	r24, r30
   1547e:	9f 07       	cpc	r25, r31
   15480:	08 f0       	brcs	.+2      	; 0x15484 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   15482:	bc cf       	rjmp	.-136    	; 0x153fc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   15484:	26 0f       	add	r18, r22
   15486:	37 1f       	adc	r19, r23
   15488:	36 95       	lsr	r19
   1548a:	27 95       	ror	r18
   1548c:	f7 01       	movw	r30, r14
   1548e:	31 83       	std	Z+1, r19	; 0x01
   15490:	20 83       	st	Z, r18
   15492:	84 0f       	add	r24, r20
   15494:	95 1f       	adc	r25, r21
   15496:	96 95       	lsr	r25
   15498:	87 95       	ror	r24
   1549a:	f8 01       	movw	r30, r16
   1549c:	91 83       	std	Z+1, r25	; 0x01
   1549e:	80 83       	st	Z, r24
   154a0:	81 e0       	ldi	r24, 0x01	; 1
   154a2:	ad cf       	rjmp	.-166    	; 0x153fe <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

000154a4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   154a4:	cf 92       	push	r12
   154a6:	df 92       	push	r13
   154a8:	ef 92       	push	r14
   154aa:	ff 92       	push	r15
   154ac:	0f 93       	push	r16
   154ae:	1f 93       	push	r17
   154b0:	cf 93       	push	r28
   154b2:	df 93       	push	r29
   154b4:	ec 01       	movw	r28, r24
   154b6:	96 2f       	mov	r25, r22
   154b8:	e8 8d       	ldd	r30, Y+24	; 0x18
   154ba:	f9 8d       	ldd	r31, Y+25	; 0x19
   154bc:	80 81       	ld	r24, Z
   154be:	28 a1       	ldd	r18, Y+32	; 0x20
   154c0:	82 23       	and	r24, r18
   154c2:	09 f0       	breq	.+2      	; 0x154c6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   154c4:	ae c0       	rjmp	.+348    	; 0x15622 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   154c6:	ae 01       	movw	r20, r28
   154c8:	4a 5f       	subi	r20, 0xFA	; 250
   154ca:	5f 4f       	sbci	r21, 0xFF	; 255
   154cc:	be 01       	movw	r22, r28
   154ce:	6c 5f       	subi	r22, 0xFC	; 252
   154d0:	7f 4f       	sbci	r23, 0xFF	; 255
   154d2:	99 23       	and	r25, r25
   154d4:	d9 f0       	breq	.+54     	; 0x1550c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   154d6:	ce 01       	movw	r24, r28
   154d8:	0e 94 e3 a9 	call	0x153c6	; 0x153c6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   154dc:	8c 85       	ldd	r24, Y+12	; 0x0c
   154de:	87 fd       	sbrc	r24, 7
   154e0:	0a c0       	rjmp	.+20     	; 0x154f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   154e2:	80 ec       	ldi	r24, 0xC0	; 192
   154e4:	8c 87       	std	Y+12, r24	; 0x0c
   154e6:	8c 81       	ldd	r24, Y+4	; 0x04
   154e8:	9d 81       	ldd	r25, Y+5	; 0x05
   154ea:	99 83       	std	Y+1, r25	; 0x01
   154ec:	88 83       	st	Y, r24
   154ee:	8e 81       	ldd	r24, Y+6	; 0x06
   154f0:	9f 81       	ldd	r25, Y+7	; 0x07
   154f2:	9b 83       	std	Y+3, r25	; 0x03
   154f4:	8a 83       	std	Y+2, r24	; 0x02
   154f6:	8c 85       	ldd	r24, Y+12	; 0x0c
   154f8:	80 78       	andi	r24, 0x80	; 128
   154fa:	df 91       	pop	r29
   154fc:	cf 91       	pop	r28
   154fe:	1f 91       	pop	r17
   15500:	0f 91       	pop	r16
   15502:	ff 90       	pop	r15
   15504:	ef 90       	pop	r14
   15506:	df 90       	pop	r13
   15508:	cf 90       	pop	r12
   1550a:	08 95       	ret
   1550c:	ce 01       	movw	r24, r28
   1550e:	0e 94 e3 a9 	call	0x153c6	; 0x153c6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   15512:	88 23       	and	r24, r24
   15514:	19 f3       	breq	.-58     	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15516:	2c 81       	ldd	r18, Y+4	; 0x04
   15518:	3d 81       	ldd	r19, Y+5	; 0x05
   1551a:	a4 e5       	ldi	r26, 0x54	; 84
   1551c:	b3 e0       	ldi	r27, 0x03	; 3
   1551e:	0e 94 0e dd 	call	0x1ba1c	; 0x1ba1c <__umulhisi3>
   15522:	20 e1       	ldi	r18, 0x10	; 16
   15524:	c2 2e       	mov	r12, r18
   15526:	27 e2       	ldi	r18, 0x27	; 39
   15528:	d2 2e       	mov	r13, r18
   1552a:	e1 2c       	mov	r14, r1
   1552c:	f1 2c       	mov	r15, r1
   1552e:	a7 01       	movw	r20, r14
   15530:	96 01       	movw	r18, r12
   15532:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
   15536:	89 01       	movw	r16, r18
   15538:	0e 50       	subi	r16, 0x0E	; 14
   1553a:	11 09       	sbc	r17, r1
   1553c:	1d 83       	std	Y+5, r17	; 0x05
   1553e:	0c 83       	std	Y+4, r16	; 0x04
   15540:	2e 81       	ldd	r18, Y+6	; 0x06
   15542:	3f 81       	ldd	r19, Y+7	; 0x07
   15544:	a4 e0       	ldi	r26, 0x04	; 4
   15546:	b5 e0       	ldi	r27, 0x05	; 5
   15548:	0e 94 0e dd 	call	0x1ba1c	; 0x1ba1c <__umulhisi3>
   1554c:	a7 01       	movw	r20, r14
   1554e:	96 01       	movw	r18, r12
   15550:	0e 94 e7 dc 	call	0x1b9ce	; 0x1b9ce <__divmodsi4>
   15554:	2e 51       	subi	r18, 0x1E	; 30
   15556:	31 09       	sbc	r19, r1
   15558:	3f 83       	std	Y+7, r19	; 0x07
   1555a:	2e 83       	std	Y+6, r18	; 0x06
   1555c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1555e:	81 30       	cpi	r24, 0x01	; 1
   15560:	a9 f1       	breq	.+106    	; 0x155cc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   15562:	90 f0       	brcs	.+36     	; 0x15588 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   15564:	82 30       	cpi	r24, 0x02	; 2
   15566:	09 f4       	brne	.+2      	; 0x1556a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   15568:	53 c0       	rjmp	.+166    	; 0x15610 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   1556a:	83 30       	cpi	r24, 0x03	; 3
   1556c:	09 f0       	breq	.+2      	; 0x15570 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   1556e:	b6 cf       	rjmp	.-148    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15570:	8e 85       	ldd	r24, Y+14	; 0x0e
   15572:	88 23       	and	r24, r24
   15574:	e1 f1       	breq	.+120    	; 0x155ee <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   15576:	81 30       	cpi	r24, 0x01	; 1
   15578:	09 f4       	brne	.+2      	; 0x1557c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   1557a:	43 c0       	rjmp	.+134    	; 0x15602 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   1557c:	82 30       	cpi	r24, 0x02	; 2
   1557e:	49 f1       	breq	.+82     	; 0x155d2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   15580:	83 30       	cpi	r24, 0x03	; 3
   15582:	09 f0       	breq	.+2      	; 0x15586 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   15584:	ab cf       	rjmp	.-170    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15586:	2c c0       	rjmp	.+88     	; 0x155e0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   15588:	8e 85       	ldd	r24, Y+14	; 0x0e
   1558a:	88 23       	and	r24, r24
   1558c:	09 f4       	brne	.+2      	; 0x15590 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   1558e:	a6 cf       	rjmp	.-180    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15590:	81 30       	cpi	r24, 0x01	; 1
   15592:	39 f4       	brne	.+14     	; 0x155a2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   15594:	3d 83       	std	Y+5, r19	; 0x05
   15596:	2c 83       	std	Y+4, r18	; 0x04
   15598:	8a 85       	ldd	r24, Y+10	; 0x0a
   1559a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1559c:	80 1b       	sub	r24, r16
   1559e:	91 0b       	sbc	r25, r17
   155a0:	2a c0       	rjmp	.+84     	; 0x155f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   155a2:	82 30       	cpi	r24, 0x02	; 2
   155a4:	39 f4       	brne	.+14     	; 0x155b4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   155a6:	88 85       	ldd	r24, Y+8	; 0x08
   155a8:	99 85       	ldd	r25, Y+9	; 0x09
   155aa:	80 1b       	sub	r24, r16
   155ac:	91 0b       	sbc	r25, r17
   155ae:	9d 83       	std	Y+5, r25	; 0x05
   155b0:	8c 83       	std	Y+4, r24	; 0x04
   155b2:	1d c0       	rjmp	.+58     	; 0x155ee <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   155b4:	83 30       	cpi	r24, 0x03	; 3
   155b6:	09 f0       	breq	.+2      	; 0x155ba <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   155b8:	91 cf       	rjmp	.-222    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   155ba:	1f 83       	std	Y+7, r17	; 0x07
   155bc:	0e 83       	std	Y+6, r16	; 0x06
   155be:	88 85       	ldd	r24, Y+8	; 0x08
   155c0:	99 85       	ldd	r25, Y+9	; 0x09
   155c2:	82 1b       	sub	r24, r18
   155c4:	93 0b       	sbc	r25, r19
   155c6:	9d 83       	std	Y+5, r25	; 0x05
   155c8:	8c 83       	std	Y+4, r24	; 0x04
   155ca:	88 cf       	rjmp	.-240    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   155cc:	8e 85       	ldd	r24, Y+14	; 0x0e
   155ce:	81 11       	cpse	r24, r1
   155d0:	05 c0       	rjmp	.+10     	; 0x155dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   155d2:	88 85       	ldd	r24, Y+8	; 0x08
   155d4:	99 85       	ldd	r25, Y+9	; 0x09
   155d6:	80 1b       	sub	r24, r16
   155d8:	91 0b       	sbc	r25, r17
   155da:	f5 cf       	rjmp	.-22     	; 0x155c6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   155dc:	81 30       	cpi	r24, 0x01	; 1
   155de:	29 f4       	brne	.+10     	; 0x155ea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   155e0:	3d 83       	std	Y+5, r19	; 0x05
   155e2:	2c 83       	std	Y+4, r18	; 0x04
   155e4:	1f 83       	std	Y+7, r17	; 0x07
   155e6:	0e 83       	std	Y+6, r16	; 0x06
   155e8:	79 cf       	rjmp	.-270    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   155ea:	82 30       	cpi	r24, 0x02	; 2
   155ec:	39 f4       	brne	.+14     	; 0x155fc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   155ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   155f0:	9b 85       	ldd	r25, Y+11	; 0x0b
   155f2:	82 1b       	sub	r24, r18
   155f4:	93 0b       	sbc	r25, r19
   155f6:	9f 83       	std	Y+7, r25	; 0x07
   155f8:	8e 83       	std	Y+6, r24	; 0x06
   155fa:	70 cf       	rjmp	.-288    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   155fc:	83 30       	cpi	r24, 0x03	; 3
   155fe:	09 f0       	breq	.+2      	; 0x15602 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   15600:	6d cf       	rjmp	.-294    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15602:	88 85       	ldd	r24, Y+8	; 0x08
   15604:	99 85       	ldd	r25, Y+9	; 0x09
   15606:	82 1b       	sub	r24, r18
   15608:	93 0b       	sbc	r25, r19
   1560a:	9d 83       	std	Y+5, r25	; 0x05
   1560c:	8c 83       	std	Y+4, r24	; 0x04
   1560e:	c4 cf       	rjmp	.-120    	; 0x15598 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   15610:	8e 85       	ldd	r24, Y+14	; 0x0e
   15612:	88 23       	and	r24, r24
   15614:	41 f2       	breq	.-112    	; 0x155a6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   15616:	81 30       	cpi	r24, 0x01	; 1
   15618:	81 f2       	breq	.-96     	; 0x155ba <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   1561a:	83 30       	cpi	r24, 0x03	; 3
   1561c:	09 f0       	breq	.+2      	; 0x15620 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   1561e:	5e cf       	rjmp	.-324    	; 0x154dc <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   15620:	b9 cf       	rjmp	.-142    	; 0x15594 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   15622:	8c 85       	ldd	r24, Y+12	; 0x0c
   15624:	87 ff       	sbrs	r24, 7
   15626:	03 c0       	rjmp	.+6      	; 0x1562e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   15628:	8f 77       	andi	r24, 0x7F	; 127
   1562a:	8c 87       	std	Y+12, r24	; 0x0c
   1562c:	64 cf       	rjmp	.-312    	; 0x154f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   1562e:	19 82       	std	Y+1, r1	; 0x01
   15630:	18 82       	st	Y, r1
   15632:	1b 82       	std	Y+3, r1	; 0x03
   15634:	1a 82       	std	Y+2, r1	; 0x02
   15636:	8f ef       	ldi	r24, 0xFF	; 255
   15638:	9f ef       	ldi	r25, 0xFF	; 255
   1563a:	9d 83       	std	Y+5, r25	; 0x05
   1563c:	8c 83       	std	Y+4, r24	; 0x04
   1563e:	9f 83       	std	Y+7, r25	; 0x07
   15640:	8e 83       	std	Y+6, r24	; 0x06
   15642:	59 cf       	rjmp	.-334    	; 0x154f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

00015644 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   15644:	fc 01       	movw	r30, r24
   15646:	65 87       	std	Z+13, r22	; 0x0d
   15648:	08 95       	ret

0001564a <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:419

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   1564a:	fc 01       	movw	r30, r24
   1564c:	84 85       	ldd	r24, Z+12	; 0x0c
   1564e:	08 95       	ret

00015650 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   15650:	fc 01       	movw	r30, r24
   15652:	82 2f       	mov	r24, r18
   15654:	64 83       	std	Z+4, r22	; 0x04
   15656:	43 83       	std	Z+3, r20	; 0x03
   15658:	25 83       	std	Z+5, r18	; 0x05
   1565a:	92 e0       	ldi	r25, 0x02	; 2
   1565c:	92 83       	std	Z+2, r25	; 0x02
   1565e:	10 82       	st	Z, r1
   15660:	11 82       	std	Z+1, r1	; 0x01
   15662:	16 82       	std	Z+6, r1	; 0x06
   15664:	60 e0       	ldi	r22, 0x00	; 0
   15666:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

0001566a <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   1566a:	cf 93       	push	r28
   1566c:	df 93       	push	r29
   1566e:	ec 01       	movw	r28, r24
   15670:	61 e0       	ldi	r22, 0x01	; 1
   15672:	8c 81       	ldd	r24, Y+4	; 0x04
   15674:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15678:	60 e0       	ldi	r22, 0x00	; 0
   1567a:	8b 81       	ldd	r24, Y+3	; 0x03
   1567c:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15680:	61 e0       	ldi	r22, 0x01	; 1
   15682:	8d 81       	ldd	r24, Y+5	; 0x05
   15684:	df 91       	pop	r29
   15686:	cf 91       	pop	r28
   15688:	0c 94 8c d6 	jmp	0x1ad18	; 0x1ad18 <pinMode>

0001568c <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   1568c:	8f 92       	push	r8
   1568e:	9f 92       	push	r9
   15690:	af 92       	push	r10
   15692:	bf 92       	push	r11
   15694:	cf 92       	push	r12
   15696:	df 92       	push	r13
   15698:	ff 92       	push	r15
   1569a:	0f 93       	push	r16
   1569c:	1f 93       	push	r17
   1569e:	cf 93       	push	r28
   156a0:	df 93       	push	r29
   156a2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   156a4:	fc 01       	movw	r30, r24
   156a6:	86 81       	ldd	r24, Z+6	; 0x06
   156a8:	81 11       	cpse	r24, r1
   156aa:	35 c0       	rjmp	.+106    	; 0x15716 <SoftSPIB::transfer(unsigned char)+0x8a>
   156ac:	86 2f       	mov	r24, r22
   156ae:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   156b0:	ec 01       	movw	r28, r24
   156b2:	d6 95       	lsr	r29
   156b4:	dc 2f       	mov	r29, r28
   156b6:	cc 27       	eor	r28, r28
   156b8:	d7 95       	ror	r29
   156ba:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   156bc:	66 1f       	adc	r22, r22
   156be:	66 27       	eor	r22, r22
   156c0:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   156c2:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   156c4:	ec 01       	movw	r28, r24
   156c6:	35 e0       	ldi	r19, 0x05	; 5
   156c8:	cc 0f       	add	r28, r28
   156ca:	dd 1f       	adc	r29, r29
   156cc:	3a 95       	dec	r19
   156ce:	e1 f7       	brne	.-8      	; 0x156c8 <SoftSPIB::transfer(unsigned char)+0x3c>
   156d0:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   156d2:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   156d4:	ec 01       	movw	r28, r24
   156d6:	43 e0       	ldi	r20, 0x03	; 3
   156d8:	cc 0f       	add	r28, r28
   156da:	dd 1f       	adc	r29, r29
   156dc:	4a 95       	dec	r20
   156de:	e1 f7       	brne	.-8      	; 0x156d8 <SoftSPIB::transfer(unsigned char)+0x4c>
   156e0:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   156e2:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   156e4:	ec 01       	movw	r28, r24
   156e6:	cc 0f       	add	r28, r28
   156e8:	dd 1f       	adc	r29, r29
   156ea:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   156ec:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   156ee:	ec 01       	movw	r28, r24
   156f0:	d5 95       	asr	r29
   156f2:	c7 95       	ror	r28
   156f4:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   156f6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   156f8:	ec 01       	movw	r28, r24
   156fa:	e3 e0       	ldi	r30, 0x03	; 3
   156fc:	d5 95       	asr	r29
   156fe:	c7 95       	ror	r28
   15700:	ea 95       	dec	r30
   15702:	e1 f7       	brne	.-8      	; 0x156fc <SoftSPIB::transfer(unsigned char)+0x70>
   15704:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   15706:	6c 2b       	or	r22, r28
   15708:	f5 e0       	ldi	r31, 0x05	; 5
   1570a:	95 95       	asr	r25
   1570c:	87 95       	ror	r24
   1570e:	fa 95       	dec	r31
   15710:	e1 f7       	brne	.-8      	; 0x1570a <SoftSPIB::transfer(unsigned char)+0x7e>
   15712:	82 70       	andi	r24, 0x02	; 2
   15714:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   15716:	91 e0       	ldi	r25, 0x01	; 1
   15718:	80 e0       	ldi	r24, 0x00	; 0
   1571a:	f8 01       	movw	r30, r16
   1571c:	21 81       	ldd	r18, Z+1	; 0x01
   1571e:	21 11       	cpse	r18, r1
   15720:	01 c0       	rjmp	.+2      	; 0x15724 <SoftSPIB::transfer(unsigned char)+0x98>
   15722:	90 e0       	ldi	r25, 0x00	; 0
   15724:	c9 2e       	mov	r12, r25
   15726:	d8 2e       	mov	r13, r24
   15728:	b1 2c       	mov	r11, r1
   1572a:	a1 2c       	mov	r10, r1
   1572c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1572e:	c6 2f       	mov	r28, r22
   15730:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   15732:	f8 01       	movw	r30, r16
   15734:	80 81       	ld	r24, Z
   15736:	88 23       	and	r24, r24
   15738:	39 f0       	breq	.+14     	; 0x15748 <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   1573a:	f1 e0       	ldi	r31, 0x01	; 1
   1573c:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   1573e:	6c 2d       	mov	r22, r12
   15740:	f8 01       	movw	r30, r16
   15742:	85 81       	ldd	r24, Z+5	; 0x05
   15744:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   15748:	be 01       	movw	r22, r28
   1574a:	0a 2c       	mov	r0, r10
   1574c:	02 c0       	rjmp	.+4      	; 0x15752 <SoftSPIB::transfer(unsigned char)+0xc6>
   1574e:	75 95       	asr	r23
   15750:	67 95       	ror	r22
   15752:	0a 94       	dec	r0
   15754:	e2 f7       	brpl	.-8      	; 0x1574e <SoftSPIB::transfer(unsigned char)+0xc2>
   15756:	61 70       	andi	r22, 0x01	; 1
   15758:	f8 01       	movw	r30, r16
   1575a:	84 81       	ldd	r24, Z+4	; 0x04
   1575c:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   15760:	46 01       	movw	r8, r12
   15762:	f1 e0       	ldi	r31, 0x01	; 1
   15764:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   15766:	68 2d       	mov	r22, r8
   15768:	f8 01       	movw	r30, r16
   1576a:	85 81       	ldd	r24, Z+5	; 0x05
   1576c:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   15770:	f8 01       	movw	r30, r16
   15772:	83 81       	ldd	r24, Z+3	; 0x03
   15774:	0e 94 f6 d6 	call	0x1adec	; 0x1adec <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   15778:	f8 01       	movw	r30, r16
   1577a:	96 81       	ldd	r25, Z+6	; 0x06
   1577c:	91 11       	cpse	r25, r1
   1577e:	1b c0       	rjmp	.+54     	; 0x157b6 <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   15780:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   15782:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   15784:	f8 01       	movw	r30, r16
   15786:	80 81       	ld	r24, Z
   15788:	88 23       	and	r24, r24
   1578a:	d1 f0       	breq	.+52     	; 0x157c0 <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   1578c:	64 01       	movw	r12, r8
   1578e:	ff ef       	ldi	r31, 0xFF	; 255
   15790:	af 1a       	sub	r10, r31
   15792:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   15794:	28 e0       	ldi	r18, 0x08	; 8
   15796:	a2 16       	cp	r10, r18
   15798:	b1 04       	cpc	r11, r1
   1579a:	59 f6       	brne	.-106    	; 0x15732 <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   1579c:	8f 2d       	mov	r24, r15
   1579e:	df 91       	pop	r29
   157a0:	cf 91       	pop	r28
   157a2:	1f 91       	pop	r17
   157a4:	0f 91       	pop	r16
   157a6:	ff 90       	pop	r15
   157a8:	df 90       	pop	r13
   157aa:	cf 90       	pop	r12
   157ac:	bf 90       	pop	r11
   157ae:	af 90       	pop	r10
   157b0:	9f 90       	pop	r9
   157b2:	8f 90       	pop	r8
   157b4:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   157b6:	87 95       	ror	r24
   157b8:	88 27       	eor	r24, r24
   157ba:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   157bc:	f6 94       	lsr	r15
   157be:	e1 cf       	rjmp	.-62     	; 0x15782 <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   157c0:	6c 2d       	mov	r22, r12
   157c2:	85 81       	ldd	r24, Z+5	; 0x05
   157c4:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   157c8:	e2 cf       	rjmp	.-60     	; 0x1578e <SoftSPIB::transfer(unsigned char)+0x102>

000157ca <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   157ca:	fc 01       	movw	r30, r24
   157cc:	80 e0       	ldi	r24, 0x00	; 0
   157ce:	90 e0       	ldi	r25, 0x00	; 0
   157d0:	a2 e0       	ldi	r26, 0x02	; 2
   157d2:	b0 e0       	ldi	r27, 0x00	; 0
   157d4:	23 30       	cpi	r18, 0x03	; 3
   157d6:	31 05       	cpc	r19, r1
   157d8:	40 f0       	brcs	.+16     	; 0x157ea <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   157da:	c9 01       	movw	r24, r18
   157dc:	03 97       	sbiw	r24, 0x03	; 3
   157de:	03 97       	sbiw	r24, 0x03	; 3
   157e0:	70 f4       	brcc	.+28     	; 0x157fe <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   157e2:	80 e0       	ldi	r24, 0x00	; 0
   157e4:	90 e0       	ldi	r25, 0x00	; 0
   157e6:	a1 e0       	ldi	r26, 0x01	; 1
   157e8:	b0 e0       	ldi	r27, 0x00	; 0
   157ea:	84 83       	std	Z+4, r24	; 0x04
   157ec:	95 83       	std	Z+5, r25	; 0x05
   157ee:	a6 83       	std	Z+6, r26	; 0x06
   157f0:	b7 83       	std	Z+7, r27	; 0x07
   157f2:	33 83       	std	Z+3, r19	; 0x03
   157f4:	22 83       	std	Z+2, r18	; 0x02
   157f6:	71 83       	std	Z+1, r23	; 0x01
   157f8:	60 83       	st	Z, r22
   157fa:	40 87       	std	Z+8, r20	; 0x08
   157fc:	08 95       	ret
   157fe:	c9 01       	movw	r24, r18
   15800:	06 97       	sbiw	r24, 0x06	; 6
   15802:	02 97       	sbiw	r24, 0x02	; 2
   15804:	28 f4       	brcc	.+10     	; 0x15810 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   15806:	80 e0       	ldi	r24, 0x00	; 0
   15808:	90 e8       	ldi	r25, 0x80	; 128
   1580a:	a0 e0       	ldi	r26, 0x00	; 0
   1580c:	b0 e0       	ldi	r27, 0x00	; 0
   1580e:	ed cf       	rjmp	.-38     	; 0x157ea <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   15810:	c9 01       	movw	r24, r18
   15812:	08 97       	sbiw	r24, 0x08	; 8
   15814:	02 97       	sbiw	r24, 0x02	; 2
   15816:	68 f7       	brcc	.-38     	; 0x157f2 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   15818:	80 e0       	ldi	r24, 0x00	; 0
   1581a:	90 e2       	ldi	r25, 0x20	; 32
   1581c:	a0 e0       	ldi	r26, 0x00	; 0
   1581e:	b0 e0       	ldi	r27, 0x00	; 0
   15820:	e4 cf       	rjmp	.-56     	; 0x157ea <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

00015822 <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   15822:	cf 92       	push	r12
   15824:	df 92       	push	r13
   15826:	ef 92       	push	r14
   15828:	ff 92       	push	r15
   1582a:	cf 93       	push	r28
   1582c:	df 93       	push	r29
   1582e:	ec 01       	movw	r28, r24
   15830:	6a 01       	movw	r12, r20
   15832:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   15834:	8c 81       	ldd	r24, Y+4	; 0x04
   15836:	9d 81       	ldd	r25, Y+5	; 0x05
   15838:	ae 81       	ldd	r26, Y+6	; 0x06
   1583a:	bf 81       	ldd	r27, Y+7	; 0x07
   1583c:	01 97       	sbiw	r24, 0x01	; 1
   1583e:	a1 40       	sbci	r26, 0x01	; 1
   15840:	b1 05       	cpc	r27, r1
   15842:	38 f0       	brcs	.+14     	; 0x15852 <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   15844:	b7 01       	movw	r22, r14
   15846:	88 27       	eor	r24, r24
   15848:	99 27       	eor	r25, r25
   1584a:	88 81       	ld	r24, Y
   1584c:	99 81       	ldd	r25, Y+1	; 0x01
   1584e:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   15852:	99 27       	eor	r25, r25
   15854:	8f 2d       	mov	r24, r15
   15856:	7e 2d       	mov	r23, r14
   15858:	6d 2d       	mov	r22, r13
   1585a:	88 81       	ld	r24, Y
   1585c:	99 81       	ldd	r25, Y+1	; 0x01
   1585e:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   15862:	6c 2d       	mov	r22, r12
   15864:	88 81       	ld	r24, Y
   15866:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   15868:	df 91       	pop	r29
   1586a:	cf 91       	pop	r28
   1586c:	ff 90       	pop	r15
   1586e:	ef 90       	pop	r14
   15870:	df 90       	pop	r13
   15872:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   15874:	0c 94 46 ab 	jmp	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>

00015878 <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   15878:	cf 92       	push	r12
   1587a:	df 92       	push	r13
   1587c:	ef 92       	push	r14
   1587e:	ff 92       	push	r15
   15880:	0f 93       	push	r16
   15882:	1f 93       	push	r17
   15884:	cf 93       	push	r28
   15886:	8c 01       	movw	r16, r24
   15888:	c6 2f       	mov	r28, r22
   1588a:	69 01       	movw	r12, r18
   1588c:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1588e:	60 e0       	ldi	r22, 0x00	; 0
   15890:	fc 01       	movw	r30, r24
   15892:	80 85       	ldd	r24, Z+8	; 0x08
   15894:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   15898:	6c 2f       	mov	r22, r28
   1589a:	f8 01       	movw	r30, r16
   1589c:	80 81       	ld	r24, Z
   1589e:	91 81       	ldd	r25, Z+1	; 0x01
   158a0:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   158a4:	c2 50       	subi	r28, 0x02	; 2
   158a6:	c2 30       	cpi	r28, 0x02	; 2
   158a8:	60 f4       	brcc	.+24     	; 0x158c2 <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   158aa:	b7 01       	movw	r22, r14
   158ac:	a6 01       	movw	r20, r12
   158ae:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   158b0:	cf 91       	pop	r28
   158b2:	1f 91       	pop	r17
   158b4:	0f 91       	pop	r16
   158b6:	ff 90       	pop	r15
   158b8:	ef 90       	pop	r14
   158ba:	df 90       	pop	r13
   158bc:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   158be:	0c 94 11 ac 	jmp	0x15822	; 0x15822 <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   158c2:	cf 91       	pop	r28
   158c4:	1f 91       	pop	r17
   158c6:	0f 91       	pop	r16
   158c8:	ff 90       	pop	r15
   158ca:	ef 90       	pop	r14
   158cc:	df 90       	pop	r13
   158ce:	cf 90       	pop	r12
   158d0:	08 95       	ret

000158d2 <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   158d2:	61 e0       	ldi	r22, 0x01	; 1
   158d4:	fc 01       	movw	r30, r24
   158d6:	80 85       	ldd	r24, Z+8	; 0x08
   158d8:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

000158dc <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   158dc:	cf 93       	push	r28
   158de:	df 93       	push	r29
   158e0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   158e2:	61 e0       	ldi	r22, 0x01	; 1
   158e4:	88 85       	ldd	r24, Y+8	; 0x08
   158e6:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   158ea:	61 e0       	ldi	r22, 0x01	; 1
   158ec:	88 85       	ldd	r24, Y+8	; 0x08
   158ee:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   158f2:	88 81       	ld	r24, Y
   158f4:	99 81       	ldd	r25, Y+1	; 0x01
   158f6:	0e 94 35 ab 	call	0x1566a	; 0x1566a <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   158fa:	20 e0       	ldi	r18, 0x00	; 0
   158fc:	30 e0       	ldi	r19, 0x00	; 0
   158fe:	a9 01       	movw	r20, r18
   15900:	61 e0       	ldi	r22, 0x01	; 1
   15902:	ce 01       	movw	r24, r28
   15904:	0e 94 3c ac 	call	0x15878	; 0x15878 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   15908:	60 e4       	ldi	r22, 0x40	; 64
   1590a:	88 81       	ld	r24, Y
   1590c:	99 81       	ldd	r25, Y+1	; 0x01
   1590e:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   15912:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   15914:	df 91       	pop	r29
   15916:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   15918:	0c 94 69 ac 	jmp	0x158d2	; 0x158d2 <SRAM_23LC::endCommand()>

0001591c <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   1591c:	0f 93       	push	r16
   1591e:	1f 93       	push	r17
   15920:	cf 93       	push	r28
   15922:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   15924:	fc 01       	movw	r30, r24
   15926:	04 81       	ldd	r16, Z+4	; 0x04
   15928:	15 81       	ldd	r17, Z+5	; 0x05
   1592a:	26 81       	ldd	r18, Z+6	; 0x06
   1592c:	37 81       	ldd	r19, Z+7	; 0x07
   1592e:	40 17       	cp	r20, r16
   15930:	51 07       	cpc	r21, r17
   15932:	62 07       	cpc	r22, r18
   15934:	73 07       	cpc	r23, r19
   15936:	a8 f4       	brcc	.+42     	; 0x15962 <SRAM_23LC::readByte(unsigned long)+0x46>
   15938:	9a 01       	movw	r18, r20
   1593a:	ab 01       	movw	r20, r22
   1593c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   1593e:	63 e0       	ldi	r22, 0x03	; 3
   15940:	0e 94 3c ac 	call	0x15878	; 0x15878 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   15944:	6f ef       	ldi	r22, 0xFF	; 255
   15946:	88 81       	ld	r24, Y
   15948:	99 81       	ldd	r25, Y+1	; 0x01
   1594a:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   1594e:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   15950:	ce 01       	movw	r24, r28
   15952:	0e 94 69 ac 	call	0x158d2	; 0x158d2 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   15956:	81 2f       	mov	r24, r17
   15958:	df 91       	pop	r29
   1595a:	cf 91       	pop	r28
   1595c:	1f 91       	pop	r17
   1595e:	0f 91       	pop	r16
   15960:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   15962:	10 e0       	ldi	r17, 0x00	; 0
   15964:	f8 cf       	rjmp	.-16     	; 0x15956 <SRAM_23LC::readByte(unsigned long)+0x3a>

00015966 <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   15966:	cf 92       	push	r12
   15968:	df 92       	push	r13
   1596a:	ef 92       	push	r14
   1596c:	ff 92       	push	r15
   1596e:	1f 93       	push	r17
   15970:	cf 93       	push	r28
   15972:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   15974:	fc 01       	movw	r30, r24
   15976:	c4 80       	ldd	r12, Z+4	; 0x04
   15978:	d5 80       	ldd	r13, Z+5	; 0x05
   1597a:	e6 80       	ldd	r14, Z+6	; 0x06
   1597c:	f7 80       	ldd	r15, Z+7	; 0x07
   1597e:	4c 15       	cp	r20, r12
   15980:	5d 05       	cpc	r21, r13
   15982:	6e 05       	cpc	r22, r14
   15984:	7f 05       	cpc	r23, r15
   15986:	c8 f4       	brcc	.+50     	; 0x159ba <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   15988:	12 2f       	mov	r17, r18
   1598a:	9a 01       	movw	r18, r20
   1598c:	ab 01       	movw	r20, r22
   1598e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   15990:	62 e0       	ldi	r22, 0x02	; 2
   15992:	0e 94 3c ac 	call	0x15878	; 0x15878 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   15996:	61 2f       	mov	r22, r17
   15998:	88 81       	ld	r24, Y
   1599a:	99 81       	ldd	r25, Y+1	; 0x01
   1599c:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   159a0:	ce 01       	movw	r24, r28
   159a2:	0e 94 69 ac 	call	0x158d2	; 0x158d2 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   159a6:	81 e0       	ldi	r24, 0x01	; 1
   159a8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   159aa:	df 91       	pop	r29
   159ac:	cf 91       	pop	r28
   159ae:	1f 91       	pop	r17
   159b0:	ff 90       	pop	r15
   159b2:	ef 90       	pop	r14
   159b4:	df 90       	pop	r13
   159b6:	cf 90       	pop	r12
   159b8:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   159ba:	90 e0       	ldi	r25, 0x00	; 0
   159bc:	80 e0       	ldi	r24, 0x00	; 0
   159be:	f5 cf       	rjmp	.-22     	; 0x159aa <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

000159c0 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   159c0:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   159c2:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   159c4:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   159c6:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <SPIClass::initialized>
   159ca:	81 11       	cpse	r24, r1
   159cc:	27 c0       	rjmp	.+78     	; 0x15a1c <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   159ce:	ec e8       	ldi	r30, 0x8C	; 140
   159d0:	f4 e6       	ldi	r31, 0x64	; 100
   159d2:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   159d4:	e6 e5       	ldi	r30, 0x56	; 86
   159d6:	f4 e6       	ldi	r31, 0x64	; 100
   159d8:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   159da:	e8 2f       	mov	r30, r24
   159dc:	f0 e0       	ldi	r31, 0x00	; 0
   159de:	ee 0f       	add	r30, r30
   159e0:	ff 1f       	adc	r31, r31
   159e2:	e6 52       	subi	r30, 0x26	; 38
   159e4:	fb 49       	sbci	r31, 0x9B	; 155
   159e6:	a5 91       	lpm	r26, Z+
   159e8:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   159ea:	ec 91       	ld	r30, X
   159ec:	e9 23       	and	r30, r25
   159ee:	21 f4       	brne	.+8      	; 0x159f8 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   159f0:	61 e0       	ldi	r22, 0x01	; 1
   159f2:	88 e0       	ldi	r24, 0x08	; 8
   159f4:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   159f8:	61 e0       	ldi	r22, 0x01	; 1
   159fa:	88 e0       	ldi	r24, 0x08	; 8
   159fc:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   15a00:	8c b5       	in	r24, 0x2c	; 44
   15a02:	80 61       	ori	r24, 0x10	; 16
   15a04:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   15a06:	8c b5       	in	r24, 0x2c	; 44
   15a08:	80 64       	ori	r24, 0x40	; 64
   15a0a:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   15a0c:	61 e0       	ldi	r22, 0x01	; 1
   15a0e:	89 e0       	ldi	r24, 0x09	; 9
   15a10:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   15a14:	61 e0       	ldi	r22, 0x01	; 1
   15a16:	8a e0       	ldi	r24, 0x0A	; 10
   15a18:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   15a1c:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <SPIClass::initialized>
   15a20:	8f 5f       	subi	r24, 0xFF	; 255
   15a22:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   15a26:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   15a28:	cf 91       	pop	r28
   15a2a:	08 95       	ret

00015a2c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   15a2c:	cf 92       	push	r12
   15a2e:	df 92       	push	r13
   15a30:	ef 92       	push	r14
   15a32:	ff 92       	push	r15
   15a34:	dc 01       	movw	r26, r24
   15a36:	2e 30       	cpi	r18, 0x0E	; 14
   15a38:	31 05       	cpc	r19, r1
   15a3a:	30 f5       	brcc	.+76     	; 0x15a88 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   15a3c:	f9 01       	movw	r30, r18
   15a3e:	88 27       	eor	r24, r24
   15a40:	eb 5d       	subi	r30, 0xDB	; 219
   15a42:	f2 45       	sbci	r31, 0x52	; 82
   15a44:	8f 4f       	sbci	r24, 0xFF	; 255
   15a46:	0c 94 06 dd 	jmp	0x1ba0c	; 0x1ba0c <__tablejump2__>
   15a4a:	33 ad       	ldd	r19, Z+59	; 0x3b
   15a4c:	52 ad       	ldd	r21, Z+58	; 0x3a
   15a4e:	58 ad       	ldd	r21, Y+56	; 0x38
   15a50:	65 ad       	ldd	r22, Z+61	; 0x3d
   15a52:	73 ad       	ldd	r23, Z+59	; 0x3b
   15a54:	79 ad       	ldd	r23, Y+57	; 0x39
   15a56:	7f ad       	ldd	r23, Y+63	; 0x3f
   15a58:	8d ad       	ldd	r24, Y+61	; 0x3d
   15a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
   15a5c:	93 ad       	ldd	r25, Z+59	; 0x3b
   15a5e:	93 ad       	ldd	r25, Z+59	; 0x3b
   15a60:	99 ad       	ldd	r25, Y+57	; 0x39
   15a62:	a7 ad       	ldd	r26, Z+63	; 0x3f
   15a64:	ac ad       	ldd	r26, Y+60	; 0x3c
   15a66:	c1 2c       	mov	r12, r1
   15a68:	d1 2c       	mov	r13, r1
   15a6a:	94 e0       	ldi	r25, 0x04	; 4
   15a6c:	e9 2e       	mov	r14, r25
   15a6e:	f1 2c       	mov	r15, r1
   15a70:	14 96       	adiw	r26, 0x04	; 4
   15a72:	cd 92       	st	X+, r12
   15a74:	dd 92       	st	X+, r13
   15a76:	ed 92       	st	X+, r14
   15a78:	fc 92       	st	X, r15
   15a7a:	17 97       	sbiw	r26, 0x07	; 7
   15a7c:	80 e0       	ldi	r24, 0x00	; 0
   15a7e:	91 e0       	ldi	r25, 0x01	; 1
   15a80:	19 96       	adiw	r26, 0x09	; 9
   15a82:	9c 93       	st	X, r25
   15a84:	8e 93       	st	-X, r24
   15a86:	18 97       	sbiw	r26, 0x08	; 8
   15a88:	13 96       	adiw	r26, 0x03	; 3
   15a8a:	3c 93       	st	X, r19
   15a8c:	2e 93       	st	-X, r18
   15a8e:	12 97       	sbiw	r26, 0x02	; 2
   15a90:	11 96       	adiw	r26, 0x01	; 1
   15a92:	7c 93       	st	X, r23
   15a94:	6e 93       	st	-X, r22
   15a96:	1a 96       	adiw	r26, 0x0a	; 10
   15a98:	4c 93       	st	X, r20
   15a9a:	ff 90       	pop	r15
   15a9c:	ef 90       	pop	r14
   15a9e:	df 90       	pop	r13
   15aa0:	cf 90       	pop	r12
   15aa2:	08 95       	ret
   15aa4:	c1 2c       	mov	r12, r1
   15aa6:	d1 2c       	mov	r13, r1
   15aa8:	82 e0       	ldi	r24, 0x02	; 2
   15aaa:	e8 2e       	mov	r14, r24
   15aac:	f1 2c       	mov	r15, r1
   15aae:	e0 cf       	rjmp	.-64     	; 0x15a70 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   15ab0:	c1 2c       	mov	r12, r1
   15ab2:	d1 2c       	mov	r13, r1
   15ab4:	76 01       	movw	r14, r12
   15ab6:	e3 94       	inc	r14
   15ab8:	14 96       	adiw	r26, 0x04	; 4
   15aba:	cd 92       	st	X+, r12
   15abc:	dd 92       	st	X+, r13
   15abe:	ed 92       	st	X+, r14
   15ac0:	fc 92       	st	X, r15
   15ac2:	17 97       	sbiw	r26, 0x07	; 7
   15ac4:	80 e8       	ldi	r24, 0x80	; 128
   15ac6:	90 e0       	ldi	r25, 0x00	; 0
   15ac8:	db cf       	rjmp	.-74     	; 0x15a80 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15aca:	c1 2c       	mov	r12, r1
   15acc:	e0 e8       	ldi	r30, 0x80	; 128
   15ace:	de 2e       	mov	r13, r30
   15ad0:	e1 2c       	mov	r14, r1
   15ad2:	f1 2c       	mov	r15, r1
   15ad4:	14 96       	adiw	r26, 0x04	; 4
   15ad6:	cd 92       	st	X+, r12
   15ad8:	dd 92       	st	X+, r13
   15ada:	ed 92       	st	X+, r14
   15adc:	fc 92       	st	X, r15
   15ade:	17 97       	sbiw	r26, 0x07	; 7
   15ae0:	80 e4       	ldi	r24, 0x40	; 64
   15ae2:	90 e0       	ldi	r25, 0x00	; 0
   15ae4:	cd cf       	rjmp	.-102    	; 0x15a80 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15ae6:	c1 2c       	mov	r12, r1
   15ae8:	50 e4       	ldi	r21, 0x40	; 64
   15aea:	d5 2e       	mov	r13, r21
   15aec:	e1 2c       	mov	r14, r1
   15aee:	f1 2c       	mov	r15, r1
   15af0:	f1 cf       	rjmp	.-30     	; 0x15ad4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   15af2:	c1 2c       	mov	r12, r1
   15af4:	90 e2       	ldi	r25, 0x20	; 32
   15af6:	d9 2e       	mov	r13, r25
   15af8:	e1 2c       	mov	r14, r1
   15afa:	f1 2c       	mov	r15, r1
   15afc:	eb cf       	rjmp	.-42     	; 0x15ad4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   15afe:	c1 2c       	mov	r12, r1
   15b00:	80 e1       	ldi	r24, 0x10	; 16
   15b02:	d8 2e       	mov	r13, r24
   15b04:	e1 2c       	mov	r14, r1
   15b06:	f1 2c       	mov	r15, r1
   15b08:	14 96       	adiw	r26, 0x04	; 4
   15b0a:	cd 92       	st	X+, r12
   15b0c:	dd 92       	st	X+, r13
   15b0e:	ed 92       	st	X+, r14
   15b10:	fc 92       	st	X, r15
   15b12:	17 97       	sbiw	r26, 0x07	; 7
   15b14:	80 e2       	ldi	r24, 0x20	; 32
   15b16:	90 e0       	ldi	r25, 0x00	; 0
   15b18:	b3 cf       	rjmp	.-154    	; 0x15a80 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15b1a:	c1 2c       	mov	r12, r1
   15b1c:	f8 e0       	ldi	r31, 0x08	; 8
   15b1e:	df 2e       	mov	r13, r31
   15b20:	e1 2c       	mov	r14, r1
   15b22:	f1 2c       	mov	r15, r1
   15b24:	f1 cf       	rjmp	.-30     	; 0x15b08 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15b26:	c1 2c       	mov	r12, r1
   15b28:	e4 e0       	ldi	r30, 0x04	; 4
   15b2a:	de 2e       	mov	r13, r30
   15b2c:	e1 2c       	mov	r14, r1
   15b2e:	f1 2c       	mov	r15, r1
   15b30:	eb cf       	rjmp	.-42     	; 0x15b08 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15b32:	c1 2c       	mov	r12, r1
   15b34:	52 e0       	ldi	r21, 0x02	; 2
   15b36:	d5 2e       	mov	r13, r21
   15b38:	e1 2c       	mov	r14, r1
   15b3a:	f1 2c       	mov	r15, r1
   15b3c:	14 96       	adiw	r26, 0x04	; 4
   15b3e:	cd 92       	st	X+, r12
   15b40:	dd 92       	st	X+, r13
   15b42:	ed 92       	st	X+, r14
   15b44:	fc 92       	st	X, r15
   15b46:	17 97       	sbiw	r26, 0x07	; 7
   15b48:	80 e1       	ldi	r24, 0x10	; 16
   15b4a:	90 e0       	ldi	r25, 0x00	; 0
   15b4c:	99 cf       	rjmp	.-206    	; 0x15a80 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15b4e:	c1 2c       	mov	r12, r1
   15b50:	d1 2c       	mov	r13, r1
   15b52:	76 01       	movw	r14, r12
   15b54:	d3 94       	inc	r13
   15b56:	f2 cf       	rjmp	.-28     	; 0x15b3c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   15b58:	80 e8       	ldi	r24, 0x80	; 128
   15b5a:	c8 2e       	mov	r12, r24
   15b5c:	d1 2c       	mov	r13, r1
   15b5e:	e1 2c       	mov	r14, r1
   15b60:	f1 2c       	mov	r15, r1
   15b62:	ec cf       	rjmp	.-40     	; 0x15b3c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

00015b64 <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   15b64:	cf 93       	push	r28
   15b66:	df 93       	push	r29
   15b68:	ec 01       	movw	r28, r24
   15b6a:	61 e0       	ldi	r22, 0x01	; 1
   15b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b6e:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   15b72:	61 e0       	ldi	r22, 0x01	; 1
   15b74:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b76:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   15b7a:	88 81       	ld	r24, Y
   15b7c:	99 81       	ldd	r25, Y+1	; 0x01
   15b7e:	df 91       	pop	r29
   15b80:	cf 91       	pop	r28
   15b82:	0c 94 35 ab 	jmp	0x1566a	; 0x1566a <SoftSPIB::begin()>

00015b86 <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   15b86:	cf 92       	push	r12
   15b88:	df 92       	push	r13
   15b8a:	ef 92       	push	r14
   15b8c:	ff 92       	push	r15
   15b8e:	cf 93       	push	r28
   15b90:	df 93       	push	r29
   15b92:	ec 01       	movw	r28, r24
   15b94:	6a 01       	movw	r12, r20
   15b96:	7b 01       	movw	r14, r22
   15b98:	8c 81       	ldd	r24, Y+4	; 0x04
   15b9a:	9d 81       	ldd	r25, Y+5	; 0x05
   15b9c:	ae 81       	ldd	r26, Y+6	; 0x06
   15b9e:	bf 81       	ldd	r27, Y+7	; 0x07
   15ba0:	01 97       	sbiw	r24, 0x01	; 1
   15ba2:	a1 40       	sbci	r26, 0x01	; 1
   15ba4:	b1 05       	cpc	r27, r1
   15ba6:	38 f0       	brcs	.+14     	; 0x15bb6 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   15ba8:	b7 01       	movw	r22, r14
   15baa:	88 27       	eor	r24, r24
   15bac:	99 27       	eor	r25, r25
   15bae:	88 81       	ld	r24, Y
   15bb0:	99 81       	ldd	r25, Y+1	; 0x01
   15bb2:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   15bb6:	8c 81       	ldd	r24, Y+4	; 0x04
   15bb8:	9d 81       	ldd	r25, Y+5	; 0x05
   15bba:	ae 81       	ldd	r26, Y+6	; 0x06
   15bbc:	bf 81       	ldd	r27, Y+7	; 0x07
   15bbe:	81 30       	cpi	r24, 0x01	; 1
   15bc0:	91 40       	sbci	r25, 0x01	; 1
   15bc2:	a1 05       	cpc	r26, r1
   15bc4:	b1 05       	cpc	r27, r1
   15bc6:	60 f0       	brcs	.+24     	; 0x15be0 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   15bc8:	8a 81       	ldd	r24, Y+2	; 0x02
   15bca:	9b 81       	ldd	r25, Y+3	; 0x03
   15bcc:	0b 97       	sbiw	r24, 0x0b	; 11
   15bce:	41 f0       	breq	.+16     	; 0x15be0 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   15bd0:	99 27       	eor	r25, r25
   15bd2:	8f 2d       	mov	r24, r15
   15bd4:	7e 2d       	mov	r23, r14
   15bd6:	6d 2d       	mov	r22, r13
   15bd8:	88 81       	ld	r24, Y
   15bda:	99 81       	ldd	r25, Y+1	; 0x01
   15bdc:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   15be0:	6c 2d       	mov	r22, r12
   15be2:	88 81       	ld	r24, Y
   15be4:	99 81       	ldd	r25, Y+1	; 0x01
   15be6:	df 91       	pop	r29
   15be8:	cf 91       	pop	r28
   15bea:	ff 90       	pop	r15
   15bec:	ef 90       	pop	r14
   15bee:	df 90       	pop	r13
   15bf0:	cf 90       	pop	r12
   15bf2:	0c 94 46 ab 	jmp	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>

00015bf6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   15bf6:	cf 92       	push	r12
   15bf8:	df 92       	push	r13
   15bfa:	ef 92       	push	r14
   15bfc:	ff 92       	push	r15
   15bfe:	0f 93       	push	r16
   15c00:	1f 93       	push	r17
   15c02:	cf 93       	push	r28
   15c04:	8c 01       	movw	r16, r24
   15c06:	c6 2f       	mov	r28, r22
   15c08:	69 01       	movw	r12, r18
   15c0a:	7a 01       	movw	r14, r20
   15c0c:	60 e0       	ldi	r22, 0x00	; 0
   15c0e:	fc 01       	movw	r30, r24
   15c10:	82 85       	ldd	r24, Z+10	; 0x0a
   15c12:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   15c16:	f8 01       	movw	r30, r16
   15c18:	82 81       	ldd	r24, Z+2	; 0x02
   15c1a:	93 81       	ldd	r25, Z+3	; 0x03
   15c1c:	0b 97       	sbiw	r24, 0x0b	; 11
   15c1e:	71 f4       	brne	.+28     	; 0x15c3c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15c20:	ff ef       	ldi	r31, 0xFF	; 255
   15c22:	cf 16       	cp	r12, r31
   15c24:	d1 04       	cpc	r13, r1
   15c26:	e1 04       	cpc	r14, r1
   15c28:	f1 04       	cpc	r15, r1
   15c2a:	41 f0       	breq	.+16     	; 0x15c3c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15c2c:	38 f0       	brcs	.+14     	; 0x15c3c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15c2e:	c3 30       	cpi	r28, 0x03	; 3
   15c30:	21 f0       	breq	.+8      	; 0x15c3a <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   15c32:	c2 30       	cpi	r28, 0x02	; 2
   15c34:	19 f4       	brne	.+6      	; 0x15c3c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15c36:	ca e0       	ldi	r28, 0x0A	; 10
   15c38:	01 c0       	rjmp	.+2      	; 0x15c3c <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15c3a:	cb e0       	ldi	r28, 0x0B	; 11
   15c3c:	6c 2f       	mov	r22, r28
   15c3e:	f8 01       	movw	r30, r16
   15c40:	80 81       	ld	r24, Z
   15c42:	91 81       	ldd	r25, Z+1	; 0x01
   15c44:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   15c48:	c2 50       	subi	r28, 0x02	; 2
   15c4a:	c2 30       	cpi	r28, 0x02	; 2
   15c4c:	60 f4       	brcc	.+24     	; 0x15c66 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   15c4e:	b7 01       	movw	r22, r14
   15c50:	a6 01       	movw	r20, r12
   15c52:	c8 01       	movw	r24, r16
   15c54:	cf 91       	pop	r28
   15c56:	1f 91       	pop	r17
   15c58:	0f 91       	pop	r16
   15c5a:	ff 90       	pop	r15
   15c5c:	ef 90       	pop	r14
   15c5e:	df 90       	pop	r13
   15c60:	cf 90       	pop	r12
   15c62:	0c 94 c3 ad 	jmp	0x15b86	; 0x15b86 <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   15c66:	cf 91       	pop	r28
   15c68:	1f 91       	pop	r17
   15c6a:	0f 91       	pop	r16
   15c6c:	ff 90       	pop	r15
   15c6e:	ef 90       	pop	r14
   15c70:	df 90       	pop	r13
   15c72:	cf 90       	pop	r12
   15c74:	08 95       	ret

00015c76 <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   15c76:	61 e0       	ldi	r22, 0x01	; 1
   15c78:	fc 01       	movw	r30, r24
   15c7a:	82 85       	ldd	r24, Z+10	; 0x0a
   15c7c:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

00015c80 <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   15c80:	1f 93       	push	r17
   15c82:	cf 93       	push	r28
   15c84:	df 93       	push	r29
   15c86:	ec 01       	movw	r28, r24
   15c88:	20 e0       	ldi	r18, 0x00	; 0
   15c8a:	30 e0       	ldi	r19, 0x00	; 0
   15c8c:	a9 01       	movw	r20, r18
   15c8e:	65 e0       	ldi	r22, 0x05	; 5
   15c90:	0e 94 fb ad 	call	0x15bf6	; 0x15bf6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   15c94:	6f ef       	ldi	r22, 0xFF	; 255
   15c96:	88 81       	ld	r24, Y
   15c98:	99 81       	ldd	r25, Y+1	; 0x01
   15c9a:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   15c9e:	18 2f       	mov	r17, r24
   15ca0:	ce 01       	movw	r24, r28
   15ca2:	0e 94 3b ae 	call	0x15c76	; 0x15c76 <EEPROM_CAT25::endCommand()>
   15ca6:	81 2f       	mov	r24, r17
   15ca8:	df 91       	pop	r29
   15caa:	cf 91       	pop	r28
   15cac:	1f 91       	pop	r17
   15cae:	08 95       	ret

00015cb0 <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   15cb0:	0e 94 40 ae 	call	0x15c80	; 0x15c80 <EEPROM_CAT25::getStatusRegister()>
   15cb4:	80 95       	com	r24
   15cb6:	81 70       	andi	r24, 0x01	; 1
   15cb8:	08 95       	ret

00015cba <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   15cba:	cf 93       	push	r28
   15cbc:	df 93       	push	r29
   15cbe:	ec 01       	movw	r28, r24
   15cc0:	20 e0       	ldi	r18, 0x00	; 0
   15cc2:	30 e0       	ldi	r19, 0x00	; 0
   15cc4:	a9 01       	movw	r20, r18
   15cc6:	66 e0       	ldi	r22, 0x06	; 6
   15cc8:	0e 94 fb ad 	call	0x15bf6	; 0x15bf6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   15ccc:	ce 01       	movw	r24, r28
   15cce:	df 91       	pop	r29
   15cd0:	cf 91       	pop	r28
   15cd2:	0c 94 3b ae 	jmp	0x15c76	; 0x15c76 <EEPROM_CAT25::endCommand()>

00015cd6 <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   15cd6:	cf 92       	push	r12
   15cd8:	df 92       	push	r13
   15cda:	ef 92       	push	r14
   15cdc:	ff 92       	push	r15
   15cde:	1f 93       	push	r17
   15ce0:	cf 93       	push	r28
   15ce2:	df 93       	push	r29
   15ce4:	ec 01       	movw	r28, r24
   15ce6:	6a 01       	movw	r12, r20
   15ce8:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   15cea:	8c 81       	ldd	r24, Y+4	; 0x04
   15cec:	9d 81       	ldd	r25, Y+5	; 0x05
   15cee:	ae 81       	ldd	r26, Y+6	; 0x06
   15cf0:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   15cf2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   15cf4:	c8 16       	cp	r12, r24
   15cf6:	d9 06       	cpc	r13, r25
   15cf8:	ea 06       	cpc	r14, r26
   15cfa:	fb 06       	cpc	r15, r27
   15cfc:	b8 f4       	brcc	.+46     	; 0x15d2c <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   15cfe:	ce 01       	movw	r24, r28
   15d00:	0e 94 58 ae 	call	0x15cb0	; 0x15cb0 <EEPROM_CAT25::isReady()>
   15d04:	81 11       	cpse	r24, r1
   15d06:	03 c0       	rjmp	.+6      	; 0x15d0e <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   15d08:	0e 94 1f d5 	call	0x1aa3e	; 0x1aa3e <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   15d0c:	f8 cf       	rjmp	.-16     	; 0x15cfe <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15d0e:	a7 01       	movw	r20, r14
   15d10:	96 01       	movw	r18, r12
   15d12:	63 e0       	ldi	r22, 0x03	; 3
   15d14:	ce 01       	movw	r24, r28
   15d16:	0e 94 fb ad 	call	0x15bf6	; 0x15bf6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   15d1a:	6f ef       	ldi	r22, 0xFF	; 255
   15d1c:	88 81       	ld	r24, Y
   15d1e:	99 81       	ldd	r25, Y+1	; 0x01
   15d20:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
   15d24:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   15d26:	ce 01       	movw	r24, r28
   15d28:	0e 94 3b ae 	call	0x15c76	; 0x15c76 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   15d2c:	81 2f       	mov	r24, r17
   15d2e:	df 91       	pop	r29
   15d30:	cf 91       	pop	r28
   15d32:	1f 91       	pop	r17
   15d34:	ff 90       	pop	r15
   15d36:	ef 90       	pop	r14
   15d38:	df 90       	pop	r13
   15d3a:	cf 90       	pop	r12
   15d3c:	08 95       	ret

00015d3e <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   15d3e:	cf 92       	push	r12
   15d40:	df 92       	push	r13
   15d42:	ef 92       	push	r14
   15d44:	ff 92       	push	r15
   15d46:	1f 93       	push	r17
   15d48:	cf 93       	push	r28
   15d4a:	df 93       	push	r29
   15d4c:	ec 01       	movw	r28, r24
   15d4e:	6a 01       	movw	r12, r20
   15d50:	7b 01       	movw	r14, r22
   15d52:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   15d54:	8c 81       	ldd	r24, Y+4	; 0x04
   15d56:	9d 81       	ldd	r25, Y+5	; 0x05
   15d58:	ae 81       	ldd	r26, Y+6	; 0x06
   15d5a:	bf 81       	ldd	r27, Y+7	; 0x07
   15d5c:	c8 16       	cp	r12, r24
   15d5e:	d9 06       	cpc	r13, r25
   15d60:	ea 06       	cpc	r14, r26
   15d62:	fb 06       	cpc	r15, r27
   15d64:	18 f5       	brcc	.+70     	; 0x15dac <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   15d66:	ce 01       	movw	r24, r28
   15d68:	0e 94 58 ae 	call	0x15cb0	; 0x15cb0 <EEPROM_CAT25::isReady()>
   15d6c:	81 11       	cpse	r24, r1
   15d6e:	03 c0       	rjmp	.+6      	; 0x15d76 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   15d70:	0e 94 1f d5 	call	0x1aa3e	; 0x1aa3e <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   15d74:	f8 cf       	rjmp	.-16     	; 0x15d66 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   15d76:	ce 01       	movw	r24, r28
   15d78:	0e 94 5d ae 	call	0x15cba	; 0x15cba <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   15d7c:	a7 01       	movw	r20, r14
   15d7e:	96 01       	movw	r18, r12
   15d80:	62 e0       	ldi	r22, 0x02	; 2
   15d82:	ce 01       	movw	r24, r28
   15d84:	0e 94 fb ad 	call	0x15bf6	; 0x15bf6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   15d88:	61 2f       	mov	r22, r17
   15d8a:	88 81       	ld	r24, Y
   15d8c:	99 81       	ldd	r25, Y+1	; 0x01
   15d8e:	0e 94 46 ab 	call	0x1568c	; 0x1568c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   15d92:	ce 01       	movw	r24, r28
   15d94:	0e 94 3b ae 	call	0x15c76	; 0x15c76 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   15d98:	81 e0       	ldi	r24, 0x01	; 1
   15d9a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   15d9c:	df 91       	pop	r29
   15d9e:	cf 91       	pop	r28
   15da0:	1f 91       	pop	r17
   15da2:	ff 90       	pop	r15
   15da4:	ef 90       	pop	r14
   15da6:	df 90       	pop	r13
   15da8:	cf 90       	pop	r12
   15daa:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   15dac:	90 e0       	ldi	r25, 0x00	; 0
   15dae:	80 e0       	ldi	r24, 0x00	; 0
   15db0:	f5 cf       	rjmp	.-22     	; 0x15d9c <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

00015db2 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   15db2:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   15db4:	00 e0       	ldi	r16, 0x00	; 0
   15db6:	20 e0       	ldi	r18, 0x00	; 0
   15db8:	40 e0       	ldi	r20, 0x00	; 0
   15dba:	60 e0       	ldi	r22, 0x00	; 0
   15dbc:	87 ef       	ldi	r24, 0xF7	; 247
   15dbe:	92 e1       	ldi	r25, 0x12	; 18
   15dc0:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   15dc4:	0f 91       	pop	r16
   15dc6:	08 95       	ret

00015dc8 <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   15dc8:	fb 01       	movw	r30, r22
   15dca:	42 81       	ldd	r20, Z+2	; 0x02
   15dcc:	53 81       	ldd	r21, Z+3	; 0x03
   15dce:	64 81       	ldd	r22, Z+4	; 0x04
   15dd0:	75 81       	ldd	r23, Z+5	; 0x05
   15dd2:	fc 01       	movw	r30, r24
   15dd4:	42 83       	std	Z+2, r20	; 0x02
   15dd6:	53 83       	std	Z+3, r21	; 0x03
   15dd8:	64 83       	std	Z+4, r22	; 0x04
   15dda:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   15ddc:	17 82       	std	Z+7, r1	; 0x07
   15dde:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   15de0:	08 95       	ret

00015de2 <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   15de2:	fb 01       	movw	r30, r22
   15de4:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   15de6:	8d 91       	ld	r24, X+
   15de8:	81 11       	cpse	r24, r1
   15dea:	fd cf       	rjmp	.-6      	; 0x15de6 <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   15dec:	90 e0       	ldi	r25, 0x00	; 0
   15dee:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   15df0:	70 e0       	ldi	r23, 0x00	; 0
   15df2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   15df4:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   15df6:	21 91       	ld	r18, Z+
   15df8:	22 23       	and	r18, r18
   15dfa:	f9 f0       	breq	.+62     	; 0x15e3a <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   15dfc:	64 30       	cpi	r22, 0x04	; 4
   15dfe:	71 05       	cpc	r23, r1
   15e00:	54 f5       	brge	.+84     	; 0x15e56 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   15e02:	2e 32       	cpi	r18, 0x2E	; 46
   15e04:	71 f4       	brne	.+28     	; 0x15e22 <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   15e06:	8f 3f       	cpi	r24, 0xFF	; 255
   15e08:	91 05       	cpc	r25, r1
   15e0a:	09 f0       	breq	.+2      	; 0x15e0e <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   15e0c:	24 f5       	brge	.+72     	; 0x15e56 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   15e0e:	da 01       	movw	r26, r20
   15e10:	a6 0f       	add	r26, r22
   15e12:	b7 1f       	adc	r27, r23
   15e14:	12 96       	adiw	r26, 0x02	; 2
   15e16:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   15e18:	6f 5f       	subi	r22, 0xFF	; 255
   15e1a:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   15e1c:	90 e0       	ldi	r25, 0x00	; 0
   15e1e:	80 e0       	ldi	r24, 0x00	; 0
   15e20:	ea cf       	rjmp	.-44     	; 0x15df6 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   15e22:	38 9f       	mul	r19, r24
   15e24:	d0 01       	movw	r26, r0
   15e26:	39 9f       	mul	r19, r25
   15e28:	b0 0d       	add	r27, r0
   15e2a:	11 24       	eor	r1, r1
   15e2c:	82 2f       	mov	r24, r18
   15e2e:	22 0f       	add	r18, r18
   15e30:	99 0b       	sbc	r25, r25
   15e32:	c0 97       	sbiw	r24, 0x30	; 48
   15e34:	8a 0f       	add	r24, r26
   15e36:	9b 1f       	adc	r25, r27
   15e38:	de cf       	rjmp	.-68     	; 0x15df6 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   15e3a:	8f 3f       	cpi	r24, 0xFF	; 255
   15e3c:	91 05       	cpc	r25, r1
   15e3e:	09 f0       	breq	.+2      	; 0x15e42 <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   15e40:	54 f4       	brge	.+20     	; 0x15e56 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   15e42:	64 30       	cpi	r22, 0x04	; 4
   15e44:	71 05       	cpc	r23, r1
   15e46:	3c f4       	brge	.+14     	; 0x15e56 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   15e48:	46 0f       	add	r20, r22
   15e4a:	57 1f       	adc	r21, r23
   15e4c:	fa 01       	movw	r30, r20
   15e4e:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   15e50:	81 e0       	ldi	r24, 0x01	; 1
   15e52:	90 e0       	ldi	r25, 0x00	; 0
   15e54:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   15e56:	90 e0       	ldi	r25, 0x00	; 0
   15e58:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   15e5a:	08 95       	ret

00015e5c <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   15e5c:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15e5e:	00 e0       	ldi	r16, 0x00	; 0
   15e60:	20 e0       	ldi	r18, 0x00	; 0
   15e62:	40 e0       	ldi	r20, 0x00	; 0
   15e64:	60 e0       	ldi	r22, 0x00	; 0
   15e66:	8d ef       	ldi	r24, 0xFD	; 253
   15e68:	92 e1       	ldi	r25, 0x12	; 18
   15e6a:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   15e6e:	0f 91       	pop	r16
   15e70:	08 95       	ret

00015e72 <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   15e72:	8f 92       	push	r8
   15e74:	9f 92       	push	r9
   15e76:	af 92       	push	r10
   15e78:	bf 92       	push	r11
   15e7a:	cf 92       	push	r12
   15e7c:	df 92       	push	r13
   15e7e:	ef 92       	push	r14
   15e80:	ff 92       	push	r15
   15e82:	0f 93       	push	r16
   15e84:	1f 93       	push	r17
   15e86:	cf 93       	push	r28
   15e88:	df 93       	push	r29
   15e8a:	00 d0       	rcall	.+0      	; 0x15e8c <DNSClient::BuildRequest(char const*)+0x1a>
   15e8c:	cd b7       	in	r28, 0x3d	; 61
   15e8e:	de b7       	in	r29, 0x3e	; 62
   15e90:	6c 01       	movw	r12, r24
   15e92:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   15e94:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   15e98:	f6 01       	movw	r30, r12
   15e9a:	77 83       	std	Z+7, r23	; 0x07
   15e9c:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   15e9e:	86 01       	movw	r16, r12
   15ea0:	08 5f       	subi	r16, 0xF8	; 248
   15ea2:	1f 4f       	sbci	r17, 0xFF	; 255
   15ea4:	b6 01       	movw	r22, r12
   15ea6:	6a 5f       	subi	r22, 0xFA	; 250
   15ea8:	7f 4f       	sbci	r23, 0xFF	; 255
   15eaa:	42 e0       	ldi	r20, 0x02	; 2
   15eac:	50 e0       	ldi	r21, 0x00	; 0
   15eae:	c8 01       	movw	r24, r16
   15eb0:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   15eb4:	81 e0       	ldi	r24, 0x01	; 1
   15eb6:	90 e0       	ldi	r25, 0x00	; 0
   15eb8:	9a 83       	std	Y+2, r25	; 0x02
   15eba:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15ebc:	42 e0       	ldi	r20, 0x02	; 2
   15ebe:	50 e0       	ldi	r21, 0x00	; 0
   15ec0:	be 01       	movw	r22, r28
   15ec2:	6f 5f       	subi	r22, 0xFF	; 255
   15ec4:	7f 4f       	sbci	r23, 0xFF	; 255
   15ec6:	c8 01       	movw	r24, r16
   15ec8:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   15ecc:	80 e0       	ldi	r24, 0x00	; 0
   15ece:	91 e0       	ldi	r25, 0x01	; 1
   15ed0:	9a 83       	std	Y+2, r25	; 0x02
   15ed2:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15ed4:	42 e0       	ldi	r20, 0x02	; 2
   15ed6:	50 e0       	ldi	r21, 0x00	; 0
   15ed8:	be 01       	movw	r22, r28
   15eda:	6f 5f       	subi	r22, 0xFF	; 255
   15edc:	7f 4f       	sbci	r23, 0xFF	; 255
   15ede:	c8 01       	movw	r24, r16
   15ee0:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   15ee4:	1a 82       	std	Y+2, r1	; 0x02
   15ee6:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15ee8:	42 e0       	ldi	r20, 0x02	; 2
   15eea:	50 e0       	ldi	r21, 0x00	; 0
   15eec:	be 01       	movw	r22, r28
   15eee:	6f 5f       	subi	r22, 0xFF	; 255
   15ef0:	7f 4f       	sbci	r23, 0xFF	; 255
   15ef2:	c8 01       	movw	r24, r16
   15ef4:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15ef8:	42 e0       	ldi	r20, 0x02	; 2
   15efa:	50 e0       	ldi	r21, 0x00	; 0
   15efc:	be 01       	movw	r22, r28
   15efe:	6f 5f       	subi	r22, 0xFF	; 255
   15f00:	7f 4f       	sbci	r23, 0xFF	; 255
   15f02:	c8 01       	movw	r24, r16
   15f04:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15f08:	42 e0       	ldi	r20, 0x02	; 2
   15f0a:	50 e0       	ldi	r21, 0x00	; 0
   15f0c:	be 01       	movw	r22, r28
   15f0e:	6f 5f       	subi	r22, 0xFF	; 255
   15f10:	7f 4f       	sbci	r23, 0xFF	; 255
   15f12:	c8 01       	movw	r24, r16
   15f14:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   15f18:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15f1a:	f7 01       	movw	r30, r14
   15f1c:	80 81       	ld	r24, Z
   15f1e:	88 23       	and	r24, r24
   15f20:	01 f1       	breq	.+64     	; 0x15f62 <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   15f22:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   15f24:	f7 01       	movw	r30, r14
   15f26:	81 91       	ld	r24, Z+
   15f28:	5f 01       	movw	r10, r30
   15f2a:	88 23       	and	r24, r24
   15f2c:	11 f0       	breq	.+4      	; 0x15f32 <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   15f2e:	8e 32       	cpi	r24, 0x2E	; 46
   15f30:	b1 f4       	brne	.+44     	; 0x15f5e <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   15f32:	47 01       	movw	r8, r14
   15f34:	8c 18       	sub	r8, r12
   15f36:	9d 08       	sbc	r9, r13
   15f38:	18 14       	cp	r1, r8
   15f3a:	19 04       	cpc	r1, r9
   15f3c:	74 f4       	brge	.+28     	; 0x15f5a <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   15f3e:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   15f40:	41 e0       	ldi	r20, 0x01	; 1
   15f42:	50 e0       	ldi	r21, 0x00	; 0
   15f44:	be 01       	movw	r22, r28
   15f46:	6d 5f       	subi	r22, 0xFD	; 253
   15f48:	7f 4f       	sbci	r23, 0xFF	; 255
   15f4a:	c8 01       	movw	r24, r16
   15f4c:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   15f50:	a4 01       	movw	r20, r8
   15f52:	b6 01       	movw	r22, r12
   15f54:	c8 01       	movw	r24, r16
   15f56:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15f5a:	65 01       	movw	r12, r10
   15f5c:	de cf       	rjmp	.-68     	; 0x15f1a <DNSClient::BuildRequest(char const*)+0xa8>
   15f5e:	75 01       	movw	r14, r10
   15f60:	e1 cf       	rjmp	.-62     	; 0x15f24 <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   15f62:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   15f64:	41 e0       	ldi	r20, 0x01	; 1
   15f66:	50 e0       	ldi	r21, 0x00	; 0
   15f68:	be 01       	movw	r22, r28
   15f6a:	6d 5f       	subi	r22, 0xFD	; 253
   15f6c:	7f 4f       	sbci	r23, 0xFF	; 255
   15f6e:	c8 01       	movw	r24, r16
   15f70:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   15f74:	e1 2c       	mov	r14, r1
   15f76:	ff 24       	eor	r15, r15
   15f78:	f3 94       	inc	r15
   15f7a:	fa 82       	std	Y+2, r15	; 0x02
   15f7c:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15f7e:	42 e0       	ldi	r20, 0x02	; 2
   15f80:	50 e0       	ldi	r21, 0x00	; 0
   15f82:	be 01       	movw	r22, r28
   15f84:	6f 5f       	subi	r22, 0xFF	; 255
   15f86:	7f 4f       	sbci	r23, 0xFF	; 255
   15f88:	c8 01       	movw	r24, r16
   15f8a:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   15f8e:	fa 82       	std	Y+2, r15	; 0x02
   15f90:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15f92:	42 e0       	ldi	r20, 0x02	; 2
   15f94:	50 e0       	ldi	r21, 0x00	; 0
   15f96:	be 01       	movw	r22, r28
   15f98:	6f 5f       	subi	r22, 0xFF	; 255
   15f9a:	7f 4f       	sbci	r23, 0xFF	; 255
   15f9c:	c8 01       	movw	r24, r16
   15f9e:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   15fa2:	81 e0       	ldi	r24, 0x01	; 1
   15fa4:	90 e0       	ldi	r25, 0x00	; 0
   15fa6:	0f 90       	pop	r0
   15fa8:	0f 90       	pop	r0
   15faa:	0f 90       	pop	r0
   15fac:	df 91       	pop	r29
   15fae:	cf 91       	pop	r28
   15fb0:	1f 91       	pop	r17
   15fb2:	0f 91       	pop	r16
   15fb4:	ff 90       	pop	r15
   15fb6:	ef 90       	pop	r14
   15fb8:	df 90       	pop	r13
   15fba:	cf 90       	pop	r12
   15fbc:	bf 90       	pop	r11
   15fbe:	af 90       	pop	r10
   15fc0:	9f 90       	pop	r9
   15fc2:	8f 90       	pop	r8
   15fc4:	08 95       	ret

00015fc6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   15fc6:	2f 92       	push	r2
   15fc8:	3f 92       	push	r3
   15fca:	4f 92       	push	r4
   15fcc:	5f 92       	push	r5
   15fce:	6f 92       	push	r6
   15fd0:	7f 92       	push	r7
   15fd2:	8f 92       	push	r8
   15fd4:	9f 92       	push	r9
   15fd6:	af 92       	push	r10
   15fd8:	bf 92       	push	r11
   15fda:	cf 92       	push	r12
   15fdc:	df 92       	push	r13
   15fde:	ef 92       	push	r14
   15fe0:	ff 92       	push	r15
   15fe2:	0f 93       	push	r16
   15fe4:	1f 93       	push	r17
   15fe6:	cf 93       	push	r28
   15fe8:	df 93       	push	r29
   15fea:	cd b7       	in	r28, 0x3d	; 61
   15fec:	de b7       	in	r29, 0x3e	; 62
   15fee:	63 97       	sbiw	r28, 0x13	; 19
   15ff0:	0f b6       	in	r0, 0x3f	; 63
   15ff2:	f8 94       	cli
   15ff4:	de bf       	out	0x3e, r29	; 62
   15ff6:	0f be       	out	0x3f, r0	; 63
   15ff8:	cd bf       	out	0x3d, r28	; 61
   15ffa:	7c 01       	movw	r14, r24
   15ffc:	2b 01       	movw	r4, r22
   15ffe:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   16000:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   16004:	4b 01       	movw	r8, r22
   16006:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   16008:	87 01       	movw	r16, r14
   1600a:	08 5f       	subi	r16, 0xF8	; 248
   1600c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1600e:	71 2c       	mov	r7, r1
   16010:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   16012:	c8 01       	movw	r24, r16
   16014:	0e 94 e0 b6 	call	0x16dc0	; 0x16dc0 <EthernetUDP::parsePacket()>
   16018:	18 16       	cp	r1, r24
   1601a:	19 06       	cpc	r1, r25
   1601c:	9c f0       	brlt	.+38     	; 0x16044 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1601e:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   16022:	68 19       	sub	r22, r8
   16024:	79 09       	sbc	r23, r9
   16026:	8a 09       	sbc	r24, r10
   16028:	9b 09       	sbc	r25, r11
   1602a:	46 16       	cp	r4, r22
   1602c:	57 06       	cpc	r5, r23
   1602e:	68 06       	cpc	r6, r24
   16030:	79 06       	cpc	r7, r25
   16032:	08 f4       	brcc	.+2      	; 0x16036 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   16034:	31 c1       	rjmp	.+610    	; 0x16298 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   16036:	62 e3       	ldi	r22, 0x32	; 50
   16038:	70 e0       	ldi	r23, 0x00	; 0
   1603a:	80 e0       	ldi	r24, 0x00	; 0
   1603c:	90 e0       	ldi	r25, 0x00	; 0
   1603e:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   16042:	e7 cf       	rjmp	.-50     	; 0x16012 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   16044:	f7 01       	movw	r30, r14
   16046:	42 81       	ldd	r20, Z+2	; 0x02
   16048:	53 81       	ldd	r21, Z+3	; 0x03
   1604a:	64 81       	ldd	r22, Z+4	; 0x04
   1604c:	75 81       	ldd	r23, Z+5	; 0x05
   1604e:	81 8d       	ldd	r24, Z+25	; 0x19
   16050:	92 8d       	ldd	r25, Z+26	; 0x1a
   16052:	a3 8d       	ldd	r26, Z+27	; 0x1b
   16054:	b4 8d       	ldd	r27, Z+28	; 0x1c
   16056:	48 17       	cp	r20, r24
   16058:	59 07       	cpc	r21, r25
   1605a:	6a 07       	cpc	r22, r26
   1605c:	7b 07       	cpc	r23, r27
   1605e:	09 f0       	breq	.+2      	; 0x16062 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   16060:	1f c1       	rjmp	.+574    	; 0x162a0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   16062:	85 8d       	ldd	r24, Z+29	; 0x1d
   16064:	96 8d       	ldd	r25, Z+30	; 0x1e
   16066:	c5 97       	sbiw	r24, 0x35	; 53
   16068:	09 f0       	breq	.+2      	; 0x1606c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   1606a:	1a c1       	rjmp	.+564    	; 0x162a0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   1606c:	c8 01       	movw	r24, r16
   1606e:	0e 94 1e b6 	call	0x16c3c	; 0x16c3c <EthernetUDP::available()>
   16072:	0c 97       	sbiw	r24, 0x0c	; 12
   16074:	0c f4       	brge	.+2      	; 0x16078 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   16076:	19 c1       	rjmp	.+562    	; 0x162aa <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   16078:	4c e0       	ldi	r20, 0x0C	; 12
   1607a:	50 e0       	ldi	r21, 0x00	; 0
   1607c:	be 01       	movw	r22, r28
   1607e:	6f 5f       	subi	r22, 0xFF	; 255
   16080:	7f 4f       	sbci	r23, 0xFF	; 255
   16082:	c8 01       	movw	r24, r16
   16084:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   16088:	8b 81       	ldd	r24, Y+3	; 0x03
   1608a:	9c 81       	ldd	r25, Y+4	; 0x04
   1608c:	98 27       	eor	r25, r24
   1608e:	89 27       	eor	r24, r25
   16090:	98 27       	eor	r25, r24
   16092:	9a 8b       	std	Y+18, r25	; 0x12
   16094:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   16096:	f7 01       	movw	r30, r14
   16098:	46 81       	ldd	r20, Z+6	; 0x06
   1609a:	57 81       	ldd	r21, Z+7	; 0x07
   1609c:	29 81       	ldd	r18, Y+1	; 0x01
   1609e:	3a 81       	ldd	r19, Y+2	; 0x02
   160a0:	42 17       	cp	r20, r18
   160a2:	53 07       	cpc	r21, r19
   160a4:	11 f4       	brne	.+4      	; 0x160aa <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   160a6:	97 fd       	sbrc	r25, 7
   160a8:	21 c0       	rjmp	.+66     	; 0x160ec <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   160aa:	c8 01       	movw	r24, r16
   160ac:	0e 94 38 b6 	call	0x16c70	; 0x16c70 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   160b0:	7c ef       	ldi	r23, 0xFC	; 252
   160b2:	e7 2e       	mov	r14, r23
   160b4:	ff 24       	eor	r15, r15
   160b6:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   160b8:	c7 01       	movw	r24, r14
   160ba:	63 96       	adiw	r28, 0x13	; 19
   160bc:	0f b6       	in	r0, 0x3f	; 63
   160be:	f8 94       	cli
   160c0:	de bf       	out	0x3e, r29	; 62
   160c2:	0f be       	out	0x3f, r0	; 63
   160c4:	cd bf       	out	0x3d, r28	; 61
   160c6:	df 91       	pop	r29
   160c8:	cf 91       	pop	r28
   160ca:	1f 91       	pop	r17
   160cc:	0f 91       	pop	r16
   160ce:	ff 90       	pop	r15
   160d0:	ef 90       	pop	r14
   160d2:	df 90       	pop	r13
   160d4:	cf 90       	pop	r12
   160d6:	bf 90       	pop	r11
   160d8:	af 90       	pop	r10
   160da:	9f 90       	pop	r9
   160dc:	8f 90       	pop	r8
   160de:	7f 90       	pop	r7
   160e0:	6f 90       	pop	r6
   160e2:	5f 90       	pop	r5
   160e4:	4f 90       	pop	r4
   160e6:	3f 90       	pop	r3
   160e8:	2f 90       	pop	r2
   160ea:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   160ec:	8f 70       	andi	r24, 0x0F	; 15
   160ee:	92 70       	andi	r25, 0x02	; 2
   160f0:	89 2b       	or	r24, r25
   160f2:	41 f0       	breq	.+16     	; 0x16104 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   160f4:	c8 01       	movw	r24, r16
   160f6:	0e 94 38 b6 	call	0x16c70	; 0x16c70 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   160fa:	6b ef       	ldi	r22, 0xFB	; 251
   160fc:	e6 2e       	mov	r14, r22
   160fe:	ff 24       	eor	r15, r15
   16100:	fa 94       	dec	r15
   16102:	da cf       	rjmp	.-76     	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   16104:	cf 80       	ldd	r12, Y+7	; 0x07
   16106:	d8 84       	ldd	r13, Y+8	; 0x08
   16108:	dc 24       	eor	r13, r12
   1610a:	cd 24       	eor	r12, r13
   1610c:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1610e:	f1 2c       	mov	r15, r1
   16110:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   16112:	c1 14       	cp	r12, r1
   16114:	d1 04       	cpc	r13, r1
   16116:	d1 f4       	brne	.+52     	; 0x1614c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   16118:	c8 01       	movw	r24, r16
   1611a:	0e 94 38 b6 	call	0x16c70	; 0x16c70 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   1611e:	5a ef       	ldi	r21, 0xFA	; 250
   16120:	e5 2e       	mov	r14, r21
   16122:	ff 24       	eor	r15, r15
   16124:	fa 94       	dec	r15
   16126:	c8 cf       	rjmp	.-112    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   16128:	8d 85       	ldd	r24, Y+13	; 0x0d
   1612a:	81 11       	cpse	r24, r1
   1612c:	17 c0       	rjmp	.+46     	; 0x1615c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1612e:	c8 01       	movw	r24, r16
   16130:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   16134:	c8 01       	movw	r24, r16
   16136:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   1613a:	c8 01       	movw	r24, r16
   1613c:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   16140:	c8 01       	movw	r24, r16
   16142:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   16146:	ff ef       	ldi	r31, 0xFF	; 255
   16148:	ef 1a       	sub	r14, r31
   1614a:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   1614c:	8d 81       	ldd	r24, Y+5	; 0x05
   1614e:	9e 81       	ldd	r25, Y+6	; 0x06
   16150:	98 27       	eor	r25, r24
   16152:	89 27       	eor	r24, r25
   16154:	98 27       	eor	r25, r24
   16156:	e8 16       	cp	r14, r24
   16158:	f9 06       	cpc	r15, r25
   1615a:	a8 f4       	brcc	.+42     	; 0x16186 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   1615c:	41 e0       	ldi	r20, 0x01	; 1
   1615e:	50 e0       	ldi	r21, 0x00	; 0
   16160:	be 01       	movw	r22, r28
   16162:	63 5f       	subi	r22, 0xF3	; 243
   16164:	7f 4f       	sbci	r23, 0xFF	; 255
   16166:	c8 01       	movw	r24, r16
   16168:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   1616c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1616e:	88 23       	and	r24, r24
   16170:	d9 f2       	breq	.-74     	; 0x16128 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   16172:	8d 85       	ldd	r24, Y+13	; 0x0d
   16174:	9f ef       	ldi	r25, 0xFF	; 255
   16176:	98 0f       	add	r25, r24
   16178:	9d 87       	std	Y+13, r25	; 0x0d
   1617a:	88 23       	and	r24, r24
   1617c:	a9 f2       	breq	.-86     	; 0x16128 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   1617e:	c8 01       	movw	r24, r16
   16180:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   16184:	f6 cf       	rjmp	.-20     	; 0x16172 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   16186:	b1 2c       	mov	r11, r1
   16188:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   1618a:	41 e0       	ldi	r20, 0x01	; 1
   1618c:	50 e0       	ldi	r21, 0x00	; 0
   1618e:	be 01       	movw	r22, r28
   16190:	6d 5e       	subi	r22, 0xED	; 237
   16192:	7f 4f       	sbci	r23, 0xFF	; 255
   16194:	c8 01       	movw	r24, r16
   16196:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   1619a:	8b 89       	ldd	r24, Y+19	; 0x13
   1619c:	98 2f       	mov	r25, r24
   1619e:	90 7c       	andi	r25, 0xC0	; 192
   161a0:	61 f4       	brne	.+24     	; 0x161ba <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   161a2:	88 23       	and	r24, r24
   161a4:	89 f0       	breq	.+34     	; 0x161c8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   161a6:	8b 89       	ldd	r24, Y+19	; 0x13
   161a8:	9f ef       	ldi	r25, 0xFF	; 255
   161aa:	98 0f       	add	r25, r24
   161ac:	9b 8b       	std	Y+19, r25	; 0x13
   161ae:	88 23       	and	r24, r24
   161b0:	41 f0       	breq	.+16     	; 0x161c2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   161b2:	c8 01       	movw	r24, r16
   161b4:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   161b8:	f6 cf       	rjmp	.-20     	; 0x161a6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   161ba:	c8 01       	movw	r24, r16
   161bc:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   161c0:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   161c2:	8b 89       	ldd	r24, Y+19	; 0x13
   161c4:	81 11       	cpse	r24, r1
   161c6:	e1 cf       	rjmp	.-62     	; 0x1618a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   161c8:	42 e0       	ldi	r20, 0x02	; 2
   161ca:	50 e0       	ldi	r21, 0x00	; 0
   161cc:	be 01       	movw	r22, r28
   161ce:	61 5f       	subi	r22, 0xF1	; 241
   161d0:	7f 4f       	sbci	r23, 0xFF	; 255
   161d2:	c8 01       	movw	r24, r16
   161d4:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   161d8:	42 e0       	ldi	r20, 0x02	; 2
   161da:	50 e0       	ldi	r21, 0x00	; 0
   161dc:	be 01       	movw	r22, r28
   161de:	63 5f       	subi	r22, 0xF3	; 243
   161e0:	7f 4f       	sbci	r23, 0xFF	; 255
   161e2:	c8 01       	movw	r24, r16
   161e4:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   161e8:	c8 01       	movw	r24, r16
   161ea:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   161ee:	c8 01       	movw	r24, r16
   161f0:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   161f4:	c8 01       	movw	r24, r16
   161f6:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
   161fa:	c8 01       	movw	r24, r16
   161fc:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   16200:	42 e0       	ldi	r20, 0x02	; 2
   16202:	50 e0       	ldi	r21, 0x00	; 0
   16204:	be 01       	movw	r22, r28
   16206:	6f 5e       	subi	r22, 0xEF	; 239
   16208:	7f 4f       	sbci	r23, 0xFF	; 255
   1620a:	c8 01       	movw	r24, r16
   1620c:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   16210:	8f 85       	ldd	r24, Y+15	; 0x0f
   16212:	98 89       	ldd	r25, Y+16	; 0x10
   16214:	81 15       	cp	r24, r1
   16216:	91 40       	sbci	r25, 0x01	; 1
   16218:	f9 f4       	brne	.+62     	; 0x16258 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   1621a:	ed 84       	ldd	r14, Y+13	; 0x0d
   1621c:	fe 84       	ldd	r15, Y+14	; 0x0e
   1621e:	fe 24       	eor	r15, r14
   16220:	ef 24       	eor	r14, r15
   16222:	fe 24       	eor	r15, r14
   16224:	81 e0       	ldi	r24, 0x01	; 1
   16226:	e8 16       	cp	r14, r24
   16228:	f1 04       	cpc	r15, r1
   1622a:	b1 f4       	brne	.+44     	; 0x16258 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   1622c:	89 89       	ldd	r24, Y+17	; 0x11
   1622e:	9a 89       	ldd	r25, Y+18	; 0x12
   16230:	81 15       	cp	r24, r1
   16232:	94 40       	sbci	r25, 0x04	; 4
   16234:	41 f0       	breq	.+16     	; 0x16246 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   16236:	c8 01       	movw	r24, r16
   16238:	0e 94 38 b6 	call	0x16c70	; 0x16c70 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   1623c:	47 ef       	ldi	r20, 0xF7	; 247
   1623e:	e4 2e       	mov	r14, r20
   16240:	ff 24       	eor	r15, r15
   16242:	fa 94       	dec	r15
   16244:	39 cf       	rjmp	.-398    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   16246:	b1 01       	movw	r22, r2
   16248:	6e 5f       	subi	r22, 0xFE	; 254
   1624a:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   1624c:	44 e0       	ldi	r20, 0x04	; 4
   1624e:	50 e0       	ldi	r21, 0x00	; 0
   16250:	c8 01       	movw	r24, r16
   16252:	0e 94 a9 b6 	call	0x16d52	; 0x16d52 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   16256:	30 cf       	rjmp	.-416    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   16258:	f1 2c       	mov	r15, r1
   1625a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   1625c:	89 89       	ldd	r24, Y+17	; 0x11
   1625e:	9a 89       	ldd	r25, Y+18	; 0x12
   16260:	98 27       	eor	r25, r24
   16262:	89 27       	eor	r24, r25
   16264:	98 27       	eor	r25, r24
   16266:	e8 16       	cp	r14, r24
   16268:	f9 06       	cpc	r15, r25
   1626a:	38 f4       	brcc	.+14     	; 0x1627a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   1626c:	c8 01       	movw	r24, r16
   1626e:	0e 94 7f b6 	call	0x16cfe	; 0x16cfe <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   16272:	ff ef       	ldi	r31, 0xFF	; 255
   16274:	ef 1a       	sub	r14, r31
   16276:	ff 0a       	sbc	r15, r31
   16278:	f1 cf       	rjmp	.-30     	; 0x1625c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   1627a:	2f ef       	ldi	r18, 0xFF	; 255
   1627c:	a2 1a       	sub	r10, r18
   1627e:	b2 0a       	sbc	r11, r18
   16280:	ca 14       	cp	r12, r10
   16282:	db 04       	cpc	r13, r11
   16284:	09 f0       	breq	.+2      	; 0x16288 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   16286:	81 cf       	rjmp	.-254    	; 0x1618a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   16288:	c8 01       	movw	r24, r16
   1628a:	0e 94 38 b6 	call	0x16c70	; 0x16c70 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   1628e:	36 ef       	ldi	r19, 0xF6	; 246
   16290:	e3 2e       	mov	r14, r19
   16292:	ff 24       	eor	r15, r15
   16294:	fa 94       	dec	r15
   16296:	10 cf       	rjmp	.-480    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   16298:	ee 24       	eor	r14, r14
   1629a:	ea 94       	dec	r14
   1629c:	fe 2c       	mov	r15, r14
   1629e:	0c cf       	rjmp	.-488    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   162a0:	9e ef       	ldi	r25, 0xFE	; 254
   162a2:	e9 2e       	mov	r14, r25
   162a4:	ff 24       	eor	r15, r15
   162a6:	fa 94       	dec	r15
   162a8:	07 cf       	rjmp	.-498    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   162aa:	8d ef       	ldi	r24, 0xFD	; 253
   162ac:	e8 2e       	mov	r14, r24
   162ae:	ff 24       	eor	r15, r15
   162b0:	fa 94       	dec	r15
   162b2:	02 cf       	rjmp	.-508    	; 0x160b8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

000162b4 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   162b4:	8f 92       	push	r8
   162b6:	9f 92       	push	r9
   162b8:	af 92       	push	r10
   162ba:	bf 92       	push	r11
   162bc:	cf 92       	push	r12
   162be:	df 92       	push	r13
   162c0:	ef 92       	push	r14
   162c2:	ff 92       	push	r15
   162c4:	0f 93       	push	r16
   162c6:	1f 93       	push	r17
   162c8:	cf 93       	push	r28
   162ca:	df 93       	push	r29
   162cc:	00 d0       	rcall	.+0      	; 0x162ce <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   162ce:	00 d0       	rcall	.+0      	; 0x162d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   162d0:	cd b7       	in	r28, 0x3d	; 61
   162d2:	de b7       	in	r29, 0x3e	; 62
   162d4:	7c 01       	movw	r14, r24
   162d6:	4b 01       	movw	r8, r22
   162d8:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   162da:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <DNSClient::inet_aton(char const*, IPAddress&)>
   162de:	8c 01       	movw	r16, r24
   162e0:	89 2b       	or	r24, r25
   162e2:	09 f0       	breq	.+2      	; 0x162e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   162e4:	6d c0       	rjmp	.+218    	; 0x163c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   162e6:	f7 01       	movw	r30, r14
   162e8:	42 81       	ldd	r20, Z+2	; 0x02
   162ea:	53 81       	ldd	r21, Z+3	; 0x03
   162ec:	64 81       	ldd	r22, Z+4	; 0x04
   162ee:	75 81       	ldd	r23, Z+5	; 0x05
   162f0:	80 91 ff 12 	lds	r24, 0x12FF	; 0x8012ff <INADDR_NONE+0x2>
   162f4:	90 91 00 13 	lds	r25, 0x1300	; 0x801300 <INADDR_NONE+0x3>
   162f8:	a0 91 01 13 	lds	r26, 0x1301	; 0x801301 <INADDR_NONE+0x4>
   162fc:	b0 91 02 13 	lds	r27, 0x1302	; 0x801302 <INADDR_NONE+0x5>
   16300:	48 17       	cp	r20, r24
   16302:	59 07       	cpc	r21, r25
   16304:	6a 07       	cpc	r22, r26
   16306:	7b 07       	cpc	r23, r27
   16308:	09 f4       	brne	.+2      	; 0x1630c <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   1630a:	5d c0       	rjmp	.+186    	; 0x163c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   1630c:	67 01       	movw	r12, r14
   1630e:	f8 e0       	ldi	r31, 0x08	; 8
   16310:	cf 0e       	add	r12, r31
   16312:	d1 1c       	adc	r13, r1
   16314:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   16318:	6f 70       	andi	r22, 0x0F	; 15
   1631a:	77 27       	eor	r23, r23
   1631c:	7c 5f       	subi	r23, 0xFC	; 252
   1631e:	c6 01       	movw	r24, r12
   16320:	0e 94 31 b7 	call	0x16e62	; 0x16e62 <EthernetUDP::begin(unsigned int)>
   16324:	81 30       	cpi	r24, 0x01	; 1
   16326:	29 f5       	brne	.+74     	; 0x16372 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16328:	83 e5       	ldi	r24, 0x53	; 83
   1632a:	99 e0       	ldi	r25, 0x09	; 9
   1632c:	9a 83       	std	Y+2, r25	; 0x02
   1632e:	89 83       	std	Y+1, r24	; 0x01
   16330:	f7 01       	movw	r30, r14
   16332:	82 81       	ldd	r24, Z+2	; 0x02
   16334:	93 81       	ldd	r25, Z+3	; 0x03
   16336:	a4 81       	ldd	r26, Z+4	; 0x04
   16338:	b5 81       	ldd	r27, Z+5	; 0x05
   1633a:	8b 83       	std	Y+3, r24	; 0x03
   1633c:	9c 83       	std	Y+4, r25	; 0x04
   1633e:	ad 83       	std	Y+5, r26	; 0x05
   16340:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   16342:	45 e3       	ldi	r20, 0x35	; 53
   16344:	50 e0       	ldi	r21, 0x00	; 0
   16346:	be 01       	movw	r22, r28
   16348:	6f 5f       	subi	r22, 0xFF	; 255
   1634a:	7f 4f       	sbci	r23, 0xFF	; 255
   1634c:	c6 01       	movw	r24, r12
   1634e:	0e 94 5f b6 	call	0x16cbe	; 0x16cbe <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   16352:	89 2b       	or	r24, r25
   16354:	59 f0       	breq	.+22     	; 0x1636c <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   16356:	b4 01       	movw	r22, r8
   16358:	c7 01       	movw	r24, r14
   1635a:	0e 94 39 af 	call	0x15e72	; 0x15e72 <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   1635e:	89 2b       	or	r24, r25
   16360:	29 f0       	breq	.+10     	; 0x1636c <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   16362:	c6 01       	movw	r24, r12
   16364:	0e 94 67 b6 	call	0x16cce	; 0x16cce <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   16368:	89 2b       	or	r24, r25
   1636a:	31 f5       	brne	.+76     	; 0x163b8 <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   1636c:	c6 01       	movw	r24, r12
   1636e:	0e 94 4a b6 	call	0x16c94	; 0x16c94 <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   16372:	c8 01       	movw	r24, r16
   16374:	26 96       	adiw	r28, 0x06	; 6
   16376:	0f b6       	in	r0, 0x3f	; 63
   16378:	f8 94       	cli
   1637a:	de bf       	out	0x3e, r29	; 62
   1637c:	0f be       	out	0x3f, r0	; 63
   1637e:	cd bf       	out	0x3d, r28	; 61
   16380:	df 91       	pop	r29
   16382:	cf 91       	pop	r28
   16384:	1f 91       	pop	r17
   16386:	0f 91       	pop	r16
   16388:	ff 90       	pop	r15
   1638a:	ef 90       	pop	r14
   1638c:	df 90       	pop	r13
   1638e:	cf 90       	pop	r12
   16390:	bf 90       	pop	r11
   16392:	af 90       	pop	r10
   16394:	9f 90       	pop	r9
   16396:	8f 90       	pop	r8
   16398:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   1639a:	0f 3f       	cpi	r16, 0xFF	; 255
   1639c:	10 07       	cpc	r17, r16
   1639e:	31 f7       	brne	.-52     	; 0x1636c <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   163a0:	a5 01       	movw	r20, r10
   163a2:	68 e8       	ldi	r22, 0x88	; 136
   163a4:	73 e1       	ldi	r23, 0x13	; 19
   163a6:	c7 01       	movw	r24, r14
   163a8:	0e 94 e3 af 	call	0x15fc6	; 0x15fc6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   163ac:	8c 01       	movw	r16, r24
   163ae:	81 e0       	ldi	r24, 0x01	; 1
   163b0:	88 1a       	sub	r8, r24
   163b2:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   163b4:	91 f7       	brne	.-28     	; 0x1639a <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   163b6:	da cf       	rjmp	.-76     	; 0x1636c <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   163b8:	83 e0       	ldi	r24, 0x03	; 3
   163ba:	88 2e       	mov	r8, r24
   163bc:	91 2c       	mov	r9, r1
   163be:	f0 cf       	rjmp	.-32     	; 0x163a0 <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   163c0:	01 e0       	ldi	r16, 0x01	; 1
   163c2:	10 e0       	ldi	r17, 0x00	; 0
   163c4:	d6 cf       	rjmp	.-84     	; 0x16372 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   163c6:	0e ef       	ldi	r16, 0xFE	; 254
   163c8:	1f ef       	ldi	r17, 0xFF	; 255
   163ca:	d3 cf       	rjmp	.-90     	; 0x16372 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

000163cc <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:207
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   163cc:	24 e0       	ldi	r18, 0x04	; 4
   163ce:	30 e0       	ldi	r19, 0x00	; 0
   163d0:	ac 01       	movw	r20, r24
   163d2:	64 e0       	ldi	r22, 0x04	; 4
   163d4:	81 e0       	ldi	r24, 0x01	; 1
   163d6:	90 e0       	ldi	r25, 0x00	; 0
   163d8:	0c 94 4a ba 	jmp	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000163dc <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   163dc:	24 e0       	ldi	r18, 0x04	; 4
   163de:	30 e0       	ldi	r19, 0x00	; 0
   163e0:	ac 01       	movw	r20, r24
   163e2:	64 e0       	ldi	r22, 0x04	; 4
   163e4:	85 e0       	ldi	r24, 0x05	; 5
   163e6:	90 e0       	ldi	r25, 0x00	; 0
   163e8:	0c 94 4a ba 	jmp	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000163ec <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   163ec:	26 e0       	ldi	r18, 0x06	; 6
   163ee:	30 e0       	ldi	r19, 0x00	; 0
   163f0:	ac 01       	movw	r20, r24
   163f2:	64 e0       	ldi	r22, 0x04	; 4
   163f4:	89 e0       	ldi	r24, 0x09	; 9
   163f6:	90 e0       	ldi	r25, 0x00	; 0
   163f8:	0c 94 4a ba 	jmp	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000163fc <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   163fc:	24 e0       	ldi	r18, 0x04	; 4
   163fe:	30 e0       	ldi	r19, 0x00	; 0
   16400:	ac 01       	movw	r20, r24
   16402:	64 e0       	ldi	r22, 0x04	; 4
   16404:	8f e0       	ldi	r24, 0x0F	; 15
   16406:	90 e0       	ldi	r25, 0x00	; 0
   16408:	0c 94 4a ba 	jmp	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

0001640c <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   1640c:	8f 92       	push	r8
   1640e:	9f 92       	push	r9
   16410:	af 92       	push	r10
   16412:	bf 92       	push	r11
   16414:	cf 92       	push	r12
   16416:	df 92       	push	r13
   16418:	ef 92       	push	r14
   1641a:	ff 92       	push	r15
   1641c:	0f 93       	push	r16
   1641e:	1f 93       	push	r17
   16420:	cf 93       	push	r28
   16422:	df 93       	push	r29
   16424:	4c 01       	movw	r8, r24
   16426:	5b 01       	movw	r10, r22
   16428:	6a 01       	movw	r12, r20
   1642a:	e9 01       	movw	r28, r18
   1642c:	fc 01       	movw	r30, r24
   1642e:	64 85       	ldd	r22, Z+12	; 0x0c
   16430:	83 e4       	ldi	r24, 0x43	; 67
   16432:	93 e1       	ldi	r25, 0x13	; 19
   16434:	0e 94 a2 ba 	call	0x17544	; 0x17544 <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   16438:	c5 01       	movw	r24, r10
   1643a:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   1643e:	c6 01       	movw	r24, r12
   16440:	02 96       	adiw	r24, 0x02	; 2
   16442:	0e 94 fe b1 	call	0x163fc	; 0x163fc <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   16446:	c8 01       	movw	r24, r16
   16448:	02 96       	adiw	r24, 0x02	; 2
   1644a:	0e 94 e6 b1 	call	0x163cc	; 0x163cc <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   1644e:	c7 01       	movw	r24, r14
   16450:	02 96       	adiw	r24, 0x02	; 2
   16452:	0e 94 ee b1 	call	0x163dc	; 0x163dc <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   16456:	8a 81       	ldd	r24, Y+2	; 0x02
   16458:	9b 81       	ldd	r25, Y+3	; 0x03
   1645a:	ac 81       	ldd	r26, Y+4	; 0x04
   1645c:	bd 81       	ldd	r27, Y+5	; 0x05
   1645e:	f4 01       	movw	r30, r8
   16460:	82 83       	std	Z+2, r24	; 0x02
   16462:	93 83       	std	Z+3, r25	; 0x03
   16464:	a4 83       	std	Z+4, r26	; 0x04
   16466:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   16468:	df 91       	pop	r29
   1646a:	cf 91       	pop	r28
   1646c:	1f 91       	pop	r17
   1646e:	0f 91       	pop	r16
   16470:	ff 90       	pop	r15
   16472:	ef 90       	pop	r14
   16474:	df 90       	pop	r13
   16476:	cf 90       	pop	r12
   16478:	bf 90       	pop	r11
   1647a:	af 90       	pop	r10
   1647c:	9f 90       	pop	r9
   1647e:	8f 90       	pop	r8
   16480:	08 95       	ret

00016482 <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   16482:	23 e5       	ldi	r18, 0x53	; 83
   16484:	39 e0       	ldi	r19, 0x09	; 9
   16486:	fc 01       	movw	r30, r24
   16488:	31 83       	std	Z+1, r19	; 0x01
   1648a:	20 83       	st	Z, r18
   1648c:	fb 01       	movw	r30, r22
   1648e:	42 81       	ldd	r20, Z+2	; 0x02
   16490:	53 81       	ldd	r21, Z+3	; 0x03
   16492:	64 81       	ldd	r22, Z+4	; 0x04
   16494:	75 81       	ldd	r23, Z+5	; 0x05
   16496:	fc 01       	movw	r30, r24
   16498:	42 83       	std	Z+2, r20	; 0x02
   1649a:	53 83       	std	Z+3, r21	; 0x03
   1649c:	64 83       	std	Z+4, r22	; 0x04
   1649e:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   164a0:	08 95       	ret

000164a2 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209

EthernetClass Ethernet;
   164a2:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   164a4:	00 e0       	ldi	r16, 0x00	; 0
   164a6:	20 e0       	ldi	r18, 0x00	; 0
   164a8:	40 e0       	ldi	r20, 0x00	; 0
   164aa:	60 e0       	ldi	r22, 0x00	; 0
   164ac:	80 e2       	ldi	r24, 0x20	; 32
   164ae:	93 e1       	ldi	r25, 0x13	; 19
   164b0:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   164b4:	83 e0       	ldi	r24, 0x03	; 3
   164b6:	93 e1       	ldi	r25, 0x13	; 19
   164b8:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
   164bc:	e3 e0       	ldi	r30, 0x03	; 3
   164be:	f3 e1       	ldi	r31, 0x13	; 19
   164c0:	13 86       	std	Z+11, r1	; 0x0b
   164c2:	12 86       	std	Z+10, r1	; 0x0a
   164c4:	8a e0       	ldi	r24, 0x0A	; 10
   164c6:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209
   164c8:	0f 91       	pop	r16
   164ca:	08 95       	ret

000164cc <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   164cc:	90 e0       	ldi	r25, 0x00	; 0
   164ce:	80 e0       	ldi	r24, 0x00	; 0
   164d0:	08 95       	ret

000164d2 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
   164d2:	dc 01       	movw	r26, r24
   164d4:	ed 91       	ld	r30, X+
   164d6:	fc 91       	ld	r31, X
   164d8:	02 8c       	ldd	r0, Z+26	; 0x1a
   164da:	f3 8d       	ldd	r31, Z+27	; 0x1b
   164dc:	e0 2d       	mov	r30, r0
   164de:	19 95       	eicall
   164e0:	91 e0       	ldi	r25, 0x01	; 1
   164e2:	89 27       	eor	r24, r25
   164e4:	08 95       	ret

000164e6 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
   164e6:	cf 93       	push	r28
   164e8:	df 93       	push	r29
   164ea:	1f 92       	push	r1
   164ec:	cd b7       	in	r28, 0x3d	; 61
   164ee:	de b7       	in	r29, 0x3e	; 62
   164f0:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
   164f2:	dc 01       	movw	r26, r24
   164f4:	ed 91       	ld	r30, X+
   164f6:	fc 91       	ld	r31, X
   164f8:	02 80       	ldd	r0, Z+2	; 0x02
   164fa:	f3 81       	ldd	r31, Z+3	; 0x03
   164fc:	e0 2d       	mov	r30, r0
   164fe:	41 e0       	ldi	r20, 0x01	; 1
   16500:	50 e0       	ldi	r21, 0x00	; 0
   16502:	be 01       	movw	r22, r28
   16504:	6f 5f       	subi	r22, 0xFF	; 255
   16506:	7f 4f       	sbci	r23, 0xFF	; 255
   16508:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
   1650a:	0f 90       	pop	r0
   1650c:	df 91       	pop	r29
   1650e:	cf 91       	pop	r28
   16510:	08 95       	ret

00016512 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   16512:	21 e0       	ldi	r18, 0x01	; 1
   16514:	fc 01       	movw	r30, r24
   16516:	84 85       	ldd	r24, Z+12	; 0x0c
   16518:	88 30       	cpi	r24, 0x08	; 8
   1651a:	09 f4       	brne	.+2      	; 0x1651e <EthernetClient::operator bool()+0xc>
   1651c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   1651e:	82 2f       	mov	r24, r18
   16520:	08 95       	ret

00016522 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   16522:	fc 01       	movw	r30, r24
   16524:	94 85       	ldd	r25, Z+12	; 0x0c
   16526:	fb 01       	movw	r30, r22
   16528:	84 85       	ldd	r24, Z+12	; 0x0c
   1652a:	98 13       	cpse	r25, r24
   1652c:	03 c0       	rjmp	.+6      	; 0x16534 <EthernetClient::operator==(EthernetClient const&)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167 (discriminator 1)
   1652e:	81 e0       	ldi	r24, 0x01	; 1
   16530:	98 30       	cpi	r25, 0x08	; 8
   16532:	09 f4       	brne	.+2      	; 0x16536 <EthernetClient::operator==(EthernetClient const&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
   16534:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   16536:	08 95       	ret

00016538 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
   16538:	cf 92       	push	r12
   1653a:	df 92       	push	r13
   1653c:	ef 92       	push	r14
   1653e:	ff 92       	push	r15
   16540:	0f 93       	push	r16
   16542:	1f 93       	push	r17
   16544:	cf 93       	push	r28
   16546:	df 93       	push	r29
   16548:	cd b7       	in	r28, 0x3d	; 61
   1654a:	de b7       	in	r29, 0x3e	; 62
   1654c:	af 97       	sbiw	r28, 0x2f	; 47
   1654e:	0f b6       	in	r0, 0x3f	; 63
   16550:	f8 94       	cli
   16552:	de bf       	out	0x3e, r29	; 62
   16554:	0f be       	out	0x3f, r0	; 63
   16556:	cd bf       	out	0x3d, r28	; 61
   16558:	8c 01       	movw	r16, r24
   1655a:	6b 01       	movw	r12, r22
   1655c:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   1655e:	ce 01       	movw	r24, r28
   16560:	01 96       	adiw	r24, 0x01	; 1
   16562:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
   16566:	ce 01       	movw	r24, r28
   16568:	09 96       	adiw	r24, 0x09	; 9
   1656a:	0e 94 66 b7 	call	0x16ecc	; 0x16ecc <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:27
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   1656e:	ce 01       	movw	r24, r28
   16570:	8a 96       	adiw	r24, 0x2a	; 42
   16572:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:29

  dns.begin(Ethernet.dnsServerIP());
   16576:	63 e0       	ldi	r22, 0x03	; 3
   16578:	73 e1       	ldi	r23, 0x13	; 19
   1657a:	ce 01       	movw	r24, r28
   1657c:	84 96       	adiw	r24, 0x24	; 36
   1657e:	0e 94 41 b2 	call	0x16482	; 0x16482 <EthernetClass::dnsServerIP()>
   16582:	be 01       	movw	r22, r28
   16584:	6c 5d       	subi	r22, 0xDC	; 220
   16586:	7f 4f       	sbci	r23, 0xFF	; 255
   16588:	ce 01       	movw	r24, r28
   1658a:	01 96       	adiw	r24, 0x01	; 1
   1658c:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  ret = dns.getHostByName(host, remote_addr);
   16590:	ae 01       	movw	r20, r28
   16592:	46 5d       	subi	r20, 0xD6	; 214
   16594:	5f 4f       	sbci	r21, 0xFF	; 255
   16596:	b6 01       	movw	r22, r12
   16598:	ce 01       	movw	r24, r28
   1659a:	01 96       	adiw	r24, 0x01	; 1
   1659c:	0e 94 5a b1 	call	0x162b4	; 0x162b4 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
   165a0:	81 30       	cpi	r24, 0x01	; 1
   165a2:	91 05       	cpc	r25, r1
   165a4:	c1 f4       	brne	.+48     	; 0x165d6 <EthernetClient::connect(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
   165a6:	d8 01       	movw	r26, r16
   165a8:	ed 91       	ld	r30, X+
   165aa:	fc 91       	ld	r31, X
   165ac:	06 84       	ldd	r0, Z+14	; 0x0e
   165ae:	f7 85       	ldd	r31, Z+15	; 0x0f
   165b0:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   165b2:	83 e5       	ldi	r24, 0x53	; 83
   165b4:	99 e0       	ldi	r25, 0x09	; 9
   165b6:	9d a3       	std	Y+37, r25	; 0x25
   165b8:	8c a3       	std	Y+36, r24	; 0x24
   165ba:	8c a5       	ldd	r24, Y+44	; 0x2c
   165bc:	9d a5       	ldd	r25, Y+45	; 0x2d
   165be:	ae a5       	ldd	r26, Y+46	; 0x2e
   165c0:	bf a5       	ldd	r27, Y+47	; 0x2f
   165c2:	8e a3       	std	Y+38, r24	; 0x26
   165c4:	9f a3       	std	Y+39, r25	; 0x27
   165c6:	a8 a7       	std	Y+40, r26	; 0x28
   165c8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
   165ca:	a7 01       	movw	r20, r14
   165cc:	be 01       	movw	r22, r28
   165ce:	6c 5d       	subi	r22, 0xDC	; 220
   165d0:	7f 4f       	sbci	r23, 0xFF	; 255
   165d2:	c8 01       	movw	r24, r16
   165d4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
   165d6:	af 96       	adiw	r28, 0x2f	; 47
   165d8:	0f b6       	in	r0, 0x3f	; 63
   165da:	f8 94       	cli
   165dc:	de bf       	out	0x3e, r29	; 62
   165de:	0f be       	out	0x3f, r0	; 63
   165e0:	cd bf       	out	0x3d, r28	; 61
   165e2:	df 91       	pop	r29
   165e4:	cf 91       	pop	r28
   165e6:	1f 91       	pop	r17
   165e8:	0f 91       	pop	r16
   165ea:	ff 90       	pop	r15
   165ec:	ef 90       	pop	r14
   165ee:	df 90       	pop	r13
   165f0:	cf 90       	pop	r12
   165f2:	08 95       	ret

000165f4 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   165f4:	0f 93       	push	r16
   165f6:	1f 93       	push	r17
   165f8:	cf 93       	push	r28
   165fa:	df 93       	push	r29
   165fc:	8c 01       	movw	r16, r24
   165fe:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   16600:	fc 01       	movw	r30, r24
   16602:	84 85       	ldd	r24, Z+12	; 0x0c
   16604:	88 30       	cpi	r24, 0x08	; 8
   16606:	69 f4       	brne	.+26     	; 0x16622 <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   16608:	81 e0       	ldi	r24, 0x01	; 1
   1660a:	90 e0       	ldi	r25, 0x00	; 0
   1660c:	f8 01       	movw	r30, r16
   1660e:	93 83       	std	Z+3, r25	; 0x03
   16610:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   16612:	d0 e0       	ldi	r29, 0x00	; 0
   16614:	c0 e0       	ldi	r28, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   16616:	ce 01       	movw	r24, r28
   16618:	df 91       	pop	r29
   1661a:	cf 91       	pop	r28
   1661c:	1f 91       	pop	r17
   1661e:	0f 91       	pop	r16
   16620:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   16622:	0e 94 cd b8 	call	0x1719a	; 0x1719a <send(unsigned char, unsigned char const*, unsigned int)>
   16626:	89 2b       	or	r24, r25
   16628:	79 f3       	breq	.-34     	; 0x16608 <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   1662a:	f5 cf       	rjmp	.-22     	; 0x16616 <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

0001662c <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
   1662c:	fc 01       	movw	r30, r24
   1662e:	64 85       	ldd	r22, Z+12	; 0x0c
   16630:	68 30       	cpi	r22, 0x08	; 8
   16632:	21 f0       	breq	.+8      	; 0x1663c <EthernetClient::available()+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
   16634:	83 e4       	ldi	r24, 0x43	; 67
   16636:	93 e1       	ldi	r25, 0x13	; 19
   16638:	0c 94 25 bb 	jmp	0x1764a	; 0x1764a <W5500Class::getRXReceivedSize(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
   1663c:	90 e0       	ldi	r25, 0x00	; 0
   1663e:	80 e0       	ldi	r24, 0x00	; 0
   16640:	08 95       	ret

00016642 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95

int EthernetClient::read() {
   16642:	cf 93       	push	r28
   16644:	df 93       	push	r29
   16646:	1f 92       	push	r1
   16648:	cd b7       	in	r28, 0x3d	; 61
   1664a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   1664c:	41 e0       	ldi	r20, 0x01	; 1
   1664e:	50 e0       	ldi	r21, 0x00	; 0
   16650:	be 01       	movw	r22, r28
   16652:	6f 5f       	subi	r22, 0xFF	; 255
   16654:	7f 4f       	sbci	r23, 0xFF	; 255
   16656:	fc 01       	movw	r30, r24
   16658:	84 85       	ldd	r24, Z+12	; 0x0c
   1665a:	0e 94 1e b9 	call	0x1723c	; 0x1723c <recv(unsigned char, unsigned char*, int)>
   1665e:	18 16       	cp	r1, r24
   16660:	19 06       	cpc	r1, r25
   16662:	34 f4       	brge	.+12     	; 0x16670 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   16664:	89 81       	ldd	r24, Y+1	; 0x01
   16666:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   16668:	0f 90       	pop	r0
   1666a:	df 91       	pop	r29
   1666c:	cf 91       	pop	r28
   1666e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   16670:	8f ef       	ldi	r24, 0xFF	; 255
   16672:	9f ef       	ldi	r25, 0xFF	; 255
   16674:	f9 cf       	rjmp	.-14     	; 0x16668 <EthernetClient::read()+0x26>

00016676 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   16676:	fc 01       	movw	r30, r24
   16678:	84 85       	ldd	r24, Z+12	; 0x0c
   1667a:	0c 94 1e b9 	jmp	0x1723c	; 0x1723c <recv(unsigned char, unsigned char*, int)>

0001667e <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113
}

int EthernetClient::peek() {
   1667e:	0f 93       	push	r16
   16680:	1f 93       	push	r17
   16682:	cf 93       	push	r28
   16684:	df 93       	push	r29
   16686:	1f 92       	push	r1
   16688:	cd b7       	in	r28, 0x3d	; 61
   1668a:	de b7       	in	r29, 0x3e	; 62
   1668c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
   1668e:	dc 01       	movw	r26, r24
   16690:	ed 91       	ld	r30, X+
   16692:	fc 91       	ld	r31, X
   16694:	00 84       	ldd	r0, Z+8	; 0x08
   16696:	f1 85       	ldd	r31, Z+9	; 0x09
   16698:	e0 2d       	mov	r30, r0
   1669a:	19 95       	eicall
   1669c:	89 2b       	or	r24, r25
   1669e:	79 f0       	breq	.+30     	; 0x166be <EthernetClient::peek()+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:118
    return -1;
  ::peek(_sock, &b);
   166a0:	be 01       	movw	r22, r28
   166a2:	6f 5f       	subi	r22, 0xFF	; 255
   166a4:	7f 4f       	sbci	r23, 0xFF	; 255
   166a6:	f8 01       	movw	r30, r16
   166a8:	84 85       	ldd	r24, Z+12	; 0x0c
   166aa:	0e 94 64 b9 	call	0x172c8	; 0x172c8 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
  return b;
   166ae:	89 81       	ldd	r24, Y+1	; 0x01
   166b0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
   166b2:	0f 90       	pop	r0
   166b4:	df 91       	pop	r29
   166b6:	cf 91       	pop	r28
   166b8:	1f 91       	pop	r17
   166ba:	0f 91       	pop	r16
   166bc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
   166be:	8f ef       	ldi	r24, 0xFF	; 255
   166c0:	9f ef       	ldi	r25, 0xFF	; 255
   166c2:	f7 cf       	rjmp	.-18     	; 0x166b2 <EthernetClient::peek()+0x34>

000166c4 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:123
  ::peek(_sock, &b);
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
   166c4:	fc 01       	movw	r30, r24
   166c6:	84 85       	ldd	r24, Z+12	; 0x0c
   166c8:	0c 94 72 b9 	jmp	0x172e4	; 0x172e4 <flush(unsigned char)>

000166cc <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
   166cc:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   166ce:	13 82       	std	Z+3, r1	; 0x03
   166d0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   166d2:	88 ee       	ldi	r24, 0xE8	; 232
   166d4:	93 e0       	ldi	r25, 0x03	; 3
   166d6:	a0 e0       	ldi	r26, 0x00	; 0
   166d8:	b0 e0       	ldi	r27, 0x00	; 0
   166da:	84 83       	std	Z+4, r24	; 0x04
   166dc:	95 83       	std	Z+5, r25	; 0x05
   166de:	a6 83       	std	Z+6, r26	; 0x06
   166e0:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:17
   166e2:	88 ec       	ldi	r24, 0xC8	; 200
   166e4:	98 e0       	ldi	r25, 0x08	; 8
   166e6:	91 83       	std	Z+1, r25	; 0x01
   166e8:	80 83       	st	Z, r24
   166ea:	88 e0       	ldi	r24, 0x08	; 8
   166ec:	84 87       	std	Z+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:18
}
   166ee:	08 95       	ret

000166f0 <EthernetClient::EthernetClient(unsigned char)>:
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   166f0:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   166f2:	13 82       	std	Z+3, r1	; 0x03
   166f4:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   166f6:	88 ee       	ldi	r24, 0xE8	; 232
   166f8:	93 e0       	ldi	r25, 0x03	; 3
   166fa:	a0 e0       	ldi	r26, 0x00	; 0
   166fc:	b0 e0       	ldi	r27, 0x00	; 0
   166fe:	84 83       	std	Z+4, r24	; 0x04
   16700:	95 83       	std	Z+5, r25	; 0x05
   16702:	a6 83       	std	Z+6, r26	; 0x06
   16704:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Eh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   16706:	88 ec       	ldi	r24, 0xC8	; 200
   16708:	98 e0       	ldi	r25, 0x08	; 8
   1670a:	91 83       	std	Z+1, r25	; 0x01
   1670c:	80 83       	st	Z, r24
   1670e:	64 87       	std	Z+12, r22	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21
}
   16710:	08 95       	ret

00016712 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   16712:	fc 01       	movw	r30, r24
   16714:	64 85       	ldd	r22, Z+12	; 0x0c
   16716:	68 30       	cpi	r22, 0x08	; 8
   16718:	41 f0       	breq	.+16     	; 0x1672a <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   1671a:	62 95       	swap	r22
   1671c:	66 0f       	add	r22, r22
   1671e:	60 7e       	andi	r22, 0xE0	; 224
   16720:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   16722:	83 e0       	ldi	r24, 0x03	; 3
   16724:	90 e0       	ldi	r25, 0x00	; 0
   16726:	0c 94 7e ba 	jmp	0x174fc	; 0x174fc <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1672a:	80 e0       	ldi	r24, 0x00	; 0
   1672c:	08 95       	ret

0001672e <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   1672e:	cf 92       	push	r12
   16730:	df 92       	push	r13
   16732:	ef 92       	push	r14
   16734:	ff 92       	push	r15
   16736:	0f 93       	push	r16
   16738:	1f 93       	push	r17
   1673a:	cf 93       	push	r28
   1673c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   1673e:	fc 01       	movw	r30, r24
   16740:	e4 84       	ldd	r14, Z+12	; 0x0c
   16742:	f8 e0       	ldi	r31, 0x08	; 8
   16744:	ef 16       	cp	r14, r31
   16746:	59 f0       	breq	.+22     	; 0x1675e <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   16748:	90 e0       	ldi	r25, 0x00	; 0
   1674a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   1674c:	df 91       	pop	r29
   1674e:	cf 91       	pop	r28
   16750:	1f 91       	pop	r17
   16752:	0f 91       	pop	r16
   16754:	ff 90       	pop	r15
   16756:	ef 90       	pop	r14
   16758:	df 90       	pop	r13
   1675a:	cf 90       	pop	r12
   1675c:	08 95       	ret
   1675e:	6a 01       	movw	r12, r20
   16760:	8b 01       	movw	r16, r22
   16762:	ec 01       	movw	r28, r24
   16764:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   16766:	6e 2d       	mov	r22, r14
   16768:	83 e0       	ldi	r24, 0x03	; 3
   1676a:	90 e0       	ldi	r25, 0x00	; 0
   1676c:	0e 94 7e ba 	call	0x174fc	; 0x174fc <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   16770:	81 11       	cpse	r24, r1
   16772:	23 c0       	rjmp	.+70     	; 0x167ba <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   16774:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   16776:	8c 85       	ldd	r24, Y+12	; 0x0c
   16778:	88 30       	cpi	r24, 0x08	; 8
   1677a:	31 f3       	breq	.-52     	; 0x16748 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   1677c:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <EthernetClient::_srcport>
   16780:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   16784:	2f 5f       	subi	r18, 0xFF	; 255
   16786:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   16788:	11 f1       	breq	.+68     	; 0x167ce <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   1678a:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <EthernetClient::_srcport+0x1>
   1678e:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   16792:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <EthernetClient::_srcport>
   16796:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <EthernetClient::_srcport+0x1>
   1679a:	20 e0       	ldi	r18, 0x00	; 0
   1679c:	61 e0       	ldi	r22, 0x01	; 1
   1679e:	0e 94 46 b8 	call	0x1708c	; 0x1708c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   167a2:	b8 01       	movw	r22, r16
   167a4:	6e 5f       	subi	r22, 0xFE	; 254
   167a6:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   167a8:	a6 01       	movw	r20, r12
   167aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   167ac:	0e 94 90 b8 	call	0x17120	; 0x17120 <connect(unsigned char, unsigned char*, unsigned int)>
   167b0:	81 11       	cpse	r24, r1
   167b2:	10 c0       	rjmp	.+32     	; 0x167d4 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   167b4:	88 e0       	ldi	r24, 0x08	; 8
   167b6:	8c 87       	std	Y+12, r24	; 0x0c
   167b8:	c7 cf       	rjmp	.-114    	; 0x16748 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   167ba:	8b 7f       	andi	r24, 0xFB	; 251
   167bc:	88 31       	cpi	r24, 0x18	; 24
   167be:	d1 f2       	breq	.-76     	; 0x16774 <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   167c0:	f3 94       	inc	r15
   167c2:	20 e2       	ldi	r18, 0x20	; 32
   167c4:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   167c6:	88 e0       	ldi	r24, 0x08	; 8
   167c8:	f8 12       	cpse	r15, r24
   167ca:	cd cf       	rjmp	.-102    	; 0x16766 <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   167cc:	d4 cf       	rjmp	.-88     	; 0x16776 <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   167ce:	20 e0       	ldi	r18, 0x00	; 0
   167d0:	34 e0       	ldi	r19, 0x04	; 4
   167d2:	db cf       	rjmp	.-74     	; 0x1678a <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   167d4:	ce 01       	movw	r24, r28
   167d6:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   167da:	87 31       	cpi	r24, 0x17	; 23
   167dc:	51 f0       	breq	.+20     	; 0x167f2 <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   167de:	61 e0       	ldi	r22, 0x01	; 1
   167e0:	70 e0       	ldi	r23, 0x00	; 0
   167e2:	80 e0       	ldi	r24, 0x00	; 0
   167e4:	90 e0       	ldi	r25, 0x00	; 0
   167e6:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   167ea:	ce 01       	movw	r24, r28
   167ec:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   167f0:	df cf       	rjmp	.-66     	; 0x167b0 <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   167f2:	81 e0       	ldi	r24, 0x01	; 1
   167f4:	90 e0       	ldi	r25, 0x00	; 0
   167f6:	aa cf       	rjmp	.-172    	; 0x1674c <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

000167f8 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   167f8:	cf 92       	push	r12
   167fa:	df 92       	push	r13
   167fc:	ef 92       	push	r14
   167fe:	ff 92       	push	r15
   16800:	cf 93       	push	r28
   16802:	df 93       	push	r29
   16804:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   16806:	8c 85       	ldd	r24, Y+12	; 0x0c
   16808:	88 30       	cpi	r24, 0x08	; 8
   1680a:	79 f1       	breq	.+94     	; 0x1686a <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   1680c:	0e 94 c6 b8 	call	0x1718c	; 0x1718c <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   16810:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   16814:	6b 01       	movw	r12, r22
   16816:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16818:	ce 01       	movw	r24, r28
   1681a:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   1681e:	88 23       	and	r24, r24
   16820:	91 f0       	breq	.+36     	; 0x16846 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   16822:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   16826:	6c 19       	sub	r22, r12
   16828:	7d 09       	sbc	r23, r13
   1682a:	8e 09       	sbc	r24, r14
   1682c:	9f 09       	sbc	r25, r15
   1682e:	68 3e       	cpi	r22, 0xE8	; 232
   16830:	73 40       	sbci	r23, 0x03	; 3
   16832:	81 05       	cpc	r24, r1
   16834:	91 05       	cpc	r25, r1
   16836:	38 f4       	brcc	.+14     	; 0x16846 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   16838:	61 e0       	ldi	r22, 0x01	; 1
   1683a:	70 e0       	ldi	r23, 0x00	; 0
   1683c:	80 e0       	ldi	r24, 0x00	; 0
   1683e:	90 e0       	ldi	r25, 0x00	; 0
   16840:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16844:	e9 cf       	rjmp	.-46     	; 0x16818 <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   16846:	ce 01       	movw	r24, r28
   16848:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   1684c:	88 23       	and	r24, r24
   1684e:	19 f0       	breq	.+6      	; 0x16856 <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   16850:	8c 85       	ldd	r24, Y+12	; 0x0c
   16852:	0e 94 38 b8 	call	0x17070	; 0x17070 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   16856:	ec 85       	ldd	r30, Y+12	; 0x0c
   16858:	f0 e0       	ldi	r31, 0x00	; 0
   1685a:	ee 0f       	add	r30, r30
   1685c:	ff 1f       	adc	r31, r31
   1685e:	e0 5f       	subi	r30, 0xF0	; 240
   16860:	fc 4e       	sbci	r31, 0xEC	; 236
   16862:	11 82       	std	Z+1, r1	; 0x01
   16864:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   16866:	88 e0       	ldi	r24, 0x08	; 8
   16868:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1686a:	df 91       	pop	r29
   1686c:	cf 91       	pop	r28
   1686e:	ff 90       	pop	r15
   16870:	ef 90       	pop	r14
   16872:	df 90       	pop	r13
   16874:	cf 90       	pop	r12
   16876:	08 95       	ret

00016878 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   16878:	cf 93       	push	r28
   1687a:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   1687c:	fc 01       	movw	r30, r24
   1687e:	24 85       	ldd	r18, Z+12	; 0x0c
   16880:	28 30       	cpi	r18, 0x08	; 8
   16882:	d9 f0       	breq	.+54     	; 0x168ba <EthernetClient::connected()+0x42>
   16884:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   16886:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1688a:	84 31       	cpi	r24, 0x14	; 20
   1688c:	89 f0       	breq	.+34     	; 0x168b0 <EthernetClient::connected()+0x38>
   1688e:	88 23       	and	r24, r24
   16890:	79 f0       	breq	.+30     	; 0x168b0 <EthernetClient::connected()+0x38>
   16892:	88 31       	cpi	r24, 0x18	; 24
   16894:	69 f0       	breq	.+26     	; 0x168b0 <EthernetClient::connected()+0x38>
   16896:	21 e0       	ldi	r18, 0x01	; 1
   16898:	8c 31       	cpi	r24, 0x1C	; 28
   1689a:	59 f4       	brne	.+22     	; 0x168b2 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1689c:	e8 81       	ld	r30, Y
   1689e:	f9 81       	ldd	r31, Y+1	; 0x01
   168a0:	00 84       	ldd	r0, Z+8	; 0x08
   168a2:	f1 85       	ldd	r31, Z+9	; 0x09
   168a4:	e0 2d       	mov	r30, r0
   168a6:	ce 01       	movw	r24, r28
   168a8:	19 95       	eicall
   168aa:	21 e0       	ldi	r18, 0x01	; 1
   168ac:	89 2b       	or	r24, r25
   168ae:	09 f4       	brne	.+2      	; 0x168b2 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   168b0:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   168b2:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   168b4:	df 91       	pop	r29
   168b6:	cf 91       	pop	r28
   168b8:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   168ba:	80 e0       	ldi	r24, 0x00	; 0
   168bc:	fb cf       	rjmp	.-10     	; 0x168b4 <EthernetClient::connected()+0x3c>

000168be <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   168be:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   168c0:	00 e0       	ldi	r16, 0x00	; 0
   168c2:	20 e0       	ldi	r18, 0x00	; 0
   168c4:	40 e0       	ldi	r20, 0x00	; 0
   168c6:	60 e0       	ldi	r22, 0x00	; 0
   168c8:	86 e2       	ldi	r24, 0x26	; 38
   168ca:	93 e1       	ldi	r25, 0x13	; 19
   168cc:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   168d0:	0f 91       	pop	r16
   168d2:	08 95       	ret

000168d4 <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   168d4:	08 95       	ret

000168d6 <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
   168d6:	cf 93       	push	r28
   168d8:	df 93       	push	r29
   168da:	1f 92       	push	r1
   168dc:	cd b7       	in	r28, 0x3d	; 61
   168de:	de b7       	in	r29, 0x3e	; 62
   168e0:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
   168e2:	dc 01       	movw	r26, r24
   168e4:	ed 91       	ld	r30, X+
   168e6:	fc 91       	ld	r31, X
   168e8:	02 80       	ldd	r0, Z+2	; 0x02
   168ea:	f3 81       	ldd	r31, Z+3	; 0x03
   168ec:	e0 2d       	mov	r30, r0
   168ee:	41 e0       	ldi	r20, 0x01	; 1
   168f0:	50 e0       	ldi	r21, 0x00	; 0
   168f2:	be 01       	movw	r22, r28
   168f4:	6f 5f       	subi	r22, 0xFF	; 255
   168f6:	7f 4f       	sbci	r23, 0xFF	; 255
   168f8:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
   168fa:	0f 90       	pop	r0
   168fc:	df 91       	pop	r29
   168fe:	cf 91       	pop	r28
   16900:	08 95       	ret

00016902 <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
   16902:	ef 92       	push	r14
   16904:	ff 92       	push	r15
   16906:	0f 93       	push	r16
   16908:	1f 93       	push	r17
   1690a:	cf 93       	push	r28
   1690c:	df 93       	push	r29
   1690e:	cd b7       	in	r28, 0x3d	; 61
   16910:	de b7       	in	r29, 0x3e	; 62
   16912:	2d 97       	sbiw	r28, 0x0d	; 13
   16914:	0f b6       	in	r0, 0x3f	; 63
   16916:	f8 94       	cli
   16918:	de bf       	out	0x3e, r29	; 62
   1691a:	0f be       	out	0x3f, r0	; 63
   1691c:	cd bf       	out	0x3d, r28	; 61
   1691e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16920:	10 e0       	ldi	r17, 0x00	; 0
   16922:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:19
    EthernetClient client(sock);
   16924:	60 2f       	mov	r22, r16
   16926:	ce 01       	movw	r24, r28
   16928:	01 96       	adiw	r24, 0x01	; 1
   1692a:	0e 94 78 b3 	call	0x166f0	; 0x166f0 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:20
    if (client.status() == SnSR::CLOSED) {
   1692e:	ce 01       	movw	r24, r28
   16930:	01 96       	adiw	r24, 0x01	; 1
   16932:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   16936:	81 11       	cpse	r24, r1
   16938:	22 c0       	rjmp	.+68     	; 0x1697e <EthernetServer::begin()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:21
      socket(sock, SnMR::TCP, _port, 0);
   1693a:	f7 01       	movw	r30, r14
   1693c:	44 81       	ldd	r20, Z+4	; 0x04
   1693e:	55 81       	ldd	r21, Z+5	; 0x05
   16940:	20 e0       	ldi	r18, 0x00	; 0
   16942:	61 e0       	ldi	r22, 0x01	; 1
   16944:	80 2f       	mov	r24, r16
   16946:	0e 94 46 b8 	call	0x1708c	; 0x1708c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:22
      listen(sock);
   1694a:	80 2f       	mov	r24, r16
   1694c:	0e 94 7c b8 	call	0x170f8	; 0x170f8 <listen(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      EthernetClass::_server_port[sock] = _port;
   16950:	f7 01       	movw	r30, r14
   16952:	84 81       	ldd	r24, Z+4	; 0x04
   16954:	95 81       	ldd	r25, Z+5	; 0x05
   16956:	00 0f       	add	r16, r16
   16958:	11 1f       	adc	r17, r17
   1695a:	f8 01       	movw	r30, r16
   1695c:	e0 5f       	subi	r30, 0xF0	; 240
   1695e:	fc 4e       	sbci	r31, 0xEC	; 236
   16960:	91 83       	std	Z+1, r25	; 0x01
   16962:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
   16964:	2d 96       	adiw	r28, 0x0d	; 13
   16966:	0f b6       	in	r0, 0x3f	; 63
   16968:	f8 94       	cli
   1696a:	de bf       	out	0x3e, r29	; 62
   1696c:	0f be       	out	0x3f, r0	; 63
   1696e:	cd bf       	out	0x3d, r28	; 61
   16970:	df 91       	pop	r29
   16972:	cf 91       	pop	r28
   16974:	1f 91       	pop	r17
   16976:	0f 91       	pop	r16
   16978:	ff 90       	pop	r15
   1697a:	ef 90       	pop	r14
   1697c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1697e:	0f 5f       	subi	r16, 0xFF	; 255
   16980:	1f 4f       	sbci	r17, 0xFF	; 255
   16982:	08 30       	cpi	r16, 0x08	; 8
   16984:	11 05       	cpc	r17, r1
   16986:	71 f6       	brne	.-100    	; 0x16924 <EthernetServer::begin()+0x22>
   16988:	ed cf       	rjmp	.-38     	; 0x16964 <EthernetServer::begin()+0x62>

0001698a <EthernetServer::EthernetServer(unsigned int)>:
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11

#include "Ethernet2.h"
#include "EthernetClient.h"
#include "EthernetServer.h"

EthernetServer::EthernetServer(uint16_t port)
   1698a:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1698c:	13 82       	std	Z+3, r1	; 0x03
   1698e:	12 82       	std	Z+2, r1	; 0x02
_ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:11
   16990:	8a ee       	ldi	r24, 0xEA	; 234
   16992:	98 e0       	ldi	r25, 0x08	; 8
   16994:	91 83       	std	Z+1, r25	; 0x01
   16996:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:13
{
  _port = port;
   16998:	75 83       	std	Z+5, r23	; 0x05
   1699a:	64 83       	std	Z+4, r22	; 0x04
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:14
}
   1699c:	08 95       	ret

0001699e <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
   1699e:	af 92       	push	r10
   169a0:	bf 92       	push	r11
   169a2:	cf 92       	push	r12
   169a4:	df 92       	push	r13
   169a6:	ef 92       	push	r14
   169a8:	ff 92       	push	r15
   169aa:	1f 93       	push	r17
   169ac:	cf 93       	push	r28
   169ae:	df 93       	push	r29
   169b0:	cd b7       	in	r28, 0x3d	; 61
   169b2:	de b7       	in	r29, 0x3e	; 62
   169b4:	2d 97       	sbiw	r28, 0x0d	; 13
   169b6:	0f b6       	in	r0, 0x3f	; 63
   169b8:	f8 94       	cli
   169ba:	de bf       	out	0x3e, r29	; 62
   169bc:	0f be       	out	0x3f, r0	; 63
   169be:	cd bf       	out	0x3d, r28	; 61
   169c0:	7c 01       	movw	r14, r24
   169c2:	90 e1       	ldi	r25, 0x10	; 16
   169c4:	a9 2e       	mov	r10, r25
   169c6:	93 e1       	ldi	r25, 0x13	; 19
   169c8:	b9 2e       	mov	r11, r25
   169ca:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
   169cc:	d1 2c       	mov	r13, r1
   169ce:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:34

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   169d0:	61 2f       	mov	r22, r17
   169d2:	ce 01       	movw	r24, r28
   169d4:	01 96       	adiw	r24, 0x01	; 1
   169d6:	0e 94 78 b3 	call	0x166f0	; 0x166f0 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

    if (EthernetClass::_server_port[sock] == _port) {
   169da:	d5 01       	movw	r26, r10
   169dc:	2d 91       	ld	r18, X+
   169de:	3d 91       	ld	r19, X+
   169e0:	5d 01       	movw	r10, r26
   169e2:	f7 01       	movw	r30, r14
   169e4:	84 81       	ldd	r24, Z+4	; 0x04
   169e6:	95 81       	ldd	r25, Z+5	; 0x05
   169e8:	28 17       	cp	r18, r24
   169ea:	39 07       	cpc	r19, r25
   169ec:	b1 f4       	brne	.+44     	; 0x16a1a <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
   169ee:	ce 01       	movw	r24, r28
   169f0:	01 96       	adiw	r24, 0x01	; 1
   169f2:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   169f6:	84 31       	cpi	r24, 0x14	; 20
   169f8:	69 f1       	breq	.+90     	; 0x16a54 <EthernetServer::accept()+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
   169fa:	ce 01       	movw	r24, r28
   169fc:	01 96       	adiw	r24, 0x01	; 1
   169fe:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
   16a02:	8c 31       	cpi	r24, 0x1C	; 28
   16a04:	51 f4       	brne	.+20     	; 0x16a1a <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40 (discriminator 1)
   16a06:	ce 01       	movw	r24, r28
   16a08:	01 96       	adiw	r24, 0x01	; 1
   16a0a:	0e 94 16 b3 	call	0x1662c	; 0x1662c <EthernetClient::available()>
   16a0e:	89 2b       	or	r24, r25
   16a10:	21 f4       	brne	.+8      	; 0x16a1a <EthernetServer::accept()+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
   16a12:	ce 01       	movw	r24, r28
   16a14:	01 96       	adiw	r24, 0x01	; 1
   16a16:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <EthernetClient::stop()>
   16a1a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33 (discriminator 1)

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16a1c:	18 30       	cpi	r17, 0x08	; 8
   16a1e:	c1 f6       	brne	.-80     	; 0x169d0 <EthernetServer::accept()+0x32>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
   16a20:	cd 28       	or	r12, r13
   16a22:	41 f4       	brne	.+16     	; 0x16a34 <EthernetServer::accept()+0x96>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
   16a24:	d7 01       	movw	r26, r14
   16a26:	ed 91       	ld	r30, X+
   16a28:	fc 91       	ld	r31, X
   16a2a:	00 84       	ldd	r0, Z+8	; 0x08
   16a2c:	f1 85       	ldd	r31, Z+9	; 0x09
   16a2e:	e0 2d       	mov	r30, r0
   16a30:	c7 01       	movw	r24, r14
   16a32:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
   16a34:	2d 96       	adiw	r28, 0x0d	; 13
   16a36:	0f b6       	in	r0, 0x3f	; 63
   16a38:	f8 94       	cli
   16a3a:	de bf       	out	0x3e, r29	; 62
   16a3c:	0f be       	out	0x3f, r0	; 63
   16a3e:	cd bf       	out	0x3d, r28	; 61
   16a40:	df 91       	pop	r29
   16a42:	cf 91       	pop	r28
   16a44:	1f 91       	pop	r17
   16a46:	ff 90       	pop	r15
   16a48:	ef 90       	pop	r14
   16a4a:	df 90       	pop	r13
   16a4c:	cf 90       	pop	r12
   16a4e:	bf 90       	pop	r11
   16a50:	af 90       	pop	r10
   16a52:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
   16a54:	cc 24       	eor	r12, r12
   16a56:	c3 94       	inc	r12
   16a58:	d1 2c       	mov	r13, r1
   16a5a:	df cf       	rjmp	.-66     	; 0x16a1a <EthernetServer::accept()+0x7c>

00016a5c <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
   16a5c:	7f 92       	push	r7
   16a5e:	8f 92       	push	r8
   16a60:	9f 92       	push	r9
   16a62:	af 92       	push	r10
   16a64:	bf 92       	push	r11
   16a66:	cf 92       	push	r12
   16a68:	df 92       	push	r13
   16a6a:	ef 92       	push	r14
   16a6c:	ff 92       	push	r15
   16a6e:	0f 93       	push	r16
   16a70:	1f 93       	push	r17
   16a72:	cf 93       	push	r28
   16a74:	df 93       	push	r29
   16a76:	cd b7       	in	r28, 0x3d	; 61
   16a78:	de b7       	in	r29, 0x3e	; 62
   16a7a:	2d 97       	sbiw	r28, 0x0d	; 13
   16a7c:	0f b6       	in	r0, 0x3f	; 63
   16a7e:	f8 94       	cli
   16a80:	de bf       	out	0x3e, r29	; 62
   16a82:	0f be       	out	0x3f, r0	; 63
   16a84:	cd bf       	out	0x3d, r28	; 61
   16a86:	6c 01       	movw	r12, r24
   16a88:	5b 01       	movw	r10, r22
   16a8a:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   16a8c:	0e 94 cf b4 	call	0x1699e	; 0x1699e <EthernetServer::accept()>
   16a90:	80 e1       	ldi	r24, 0x10	; 16
   16a92:	e8 2e       	mov	r14, r24
   16a94:	83 e1       	ldi	r24, 0x13	; 19
   16a96:	f8 2e       	mov	r15, r24
   16a98:	71 2c       	mov	r7, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   16a9a:	10 e0       	ldi	r17, 0x00	; 0
   16a9c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:82
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   16a9e:	67 2d       	mov	r22, r7
   16aa0:	ce 01       	movw	r24, r28
   16aa2:	01 96       	adiw	r24, 0x01	; 1
   16aa4:	0e 94 78 b3 	call	0x166f0	; 0x166f0 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84

    if (EthernetClass::_server_port[sock] == _port &&
   16aa8:	f7 01       	movw	r30, r14
   16aaa:	21 91       	ld	r18, Z+
   16aac:	31 91       	ld	r19, Z+
   16aae:	7f 01       	movw	r14, r30
   16ab0:	f6 01       	movw	r30, r12
   16ab2:	84 81       	ldd	r24, Z+4	; 0x04
   16ab4:	95 81       	ldd	r25, Z+5	; 0x05
   16ab6:	28 17       	cp	r18, r24
   16ab8:	39 07       	cpc	r19, r25
   16aba:	71 f4       	brne	.+28     	; 0x16ad8 <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85 (discriminator 1)
      client.status() == SnSR::ESTABLISHED) {
   16abc:	ce 01       	movw	r24, r28
   16abe:	01 96       	adiw	r24, 0x01	; 1
   16ac0:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84 (discriminator 1)
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   16ac4:	87 31       	cpi	r24, 0x17	; 23
   16ac6:	41 f4       	brne	.+16     	; 0x16ad8 <EthernetServer::write(unsigned char const*, unsigned int)+0x7c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   16ac8:	a4 01       	movw	r20, r8
   16aca:	b5 01       	movw	r22, r10
   16acc:	ce 01       	movw	r24, r28
   16ace:	01 96       	adiw	r24, 0x01	; 1
   16ad0:	0e 94 fa b2 	call	0x165f4	; 0x165f4 <EthernetClient::write(unsigned char const*, unsigned int)>
   16ad4:	08 0f       	add	r16, r24
   16ad6:	19 1f       	adc	r17, r25
   16ad8:	73 94       	inc	r7
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81 (discriminator 2)
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16ada:	f8 e0       	ldi	r31, 0x08	; 8
   16adc:	7f 12       	cpse	r7, r31
   16ade:	df cf       	rjmp	.-66     	; 0x16a9e <EthernetServer::write(unsigned char const*, unsigned int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   16ae0:	c8 01       	movw	r24, r16
   16ae2:	2d 96       	adiw	r28, 0x0d	; 13
   16ae4:	0f b6       	in	r0, 0x3f	; 63
   16ae6:	f8 94       	cli
   16ae8:	de bf       	out	0x3e, r29	; 62
   16aea:	0f be       	out	0x3f, r0	; 63
   16aec:	cd bf       	out	0x3d, r28	; 61
   16aee:	df 91       	pop	r29
   16af0:	cf 91       	pop	r28
   16af2:	1f 91       	pop	r17
   16af4:	0f 91       	pop	r16
   16af6:	ff 90       	pop	r15
   16af8:	ef 90       	pop	r14
   16afa:	df 90       	pop	r13
   16afc:	cf 90       	pop	r12
   16afe:	bf 90       	pop	r11
   16b00:	af 90       	pop	r10
   16b02:	9f 90       	pop	r9
   16b04:	8f 90       	pop	r8
   16b06:	7f 90       	pop	r7
   16b08:	08 95       	ret

00016b0a <EthernetServer::available()>:
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:52
    begin();
  }
}

EthernetClient EthernetServer::available()
{
   16b0a:	af 92       	push	r10
   16b0c:	bf 92       	push	r11
   16b0e:	cf 92       	push	r12
   16b10:	df 92       	push	r13
   16b12:	ff 92       	push	r15
   16b14:	0f 93       	push	r16
   16b16:	1f 93       	push	r17
   16b18:	cf 93       	push	r28
   16b1a:	df 93       	push	r29
   16b1c:	cd b7       	in	r28, 0x3d	; 61
   16b1e:	de b7       	in	r29, 0x3e	; 62
   16b20:	2d 97       	sbiw	r28, 0x0d	; 13
   16b22:	0f b6       	in	r0, 0x3f	; 63
   16b24:	f8 94       	cli
   16b26:	de bf       	out	0x3e, r29	; 62
   16b28:	0f be       	out	0x3f, r0	; 63
   16b2a:	cd bf       	out	0x3d, r28	; 61
   16b2c:	8c 01       	movw	r16, r24
   16b2e:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  accept();
   16b30:	cb 01       	movw	r24, r22
   16b32:	0e 94 cf b4 	call	0x1699e	; 0x1699e <EthernetServer::accept()>
   16b36:	80 e1       	ldi	r24, 0x10	; 16
   16b38:	c8 2e       	mov	r12, r24
   16b3a:	83 e1       	ldi	r24, 0x13	; 19
   16b3c:	d8 2e       	mov	r13, r24
   16b3e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:56

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
   16b40:	6f 2d       	mov	r22, r15
   16b42:	ce 01       	movw	r24, r28
   16b44:	01 96       	adiw	r24, 0x01	; 1
   16b46:	0e 94 78 b3 	call	0x166f0	; 0x166f0 <EthernetClient::EthernetClient(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
    if (EthernetClass::_server_port[sock] == _port &&
   16b4a:	f6 01       	movw	r30, r12
   16b4c:	21 91       	ld	r18, Z+
   16b4e:	31 91       	ld	r19, Z+
   16b50:	6f 01       	movw	r12, r30
   16b52:	f5 01       	movw	r30, r10
   16b54:	84 81       	ldd	r24, Z+4	; 0x04
   16b56:	95 81       	ldd	r25, Z+5	; 0x05
   16b58:	28 17       	cp	r18, r24
   16b5a:	39 07       	cpc	r19, r25
   16b5c:	f1 f5       	brne	.+124    	; 0x16bda <EthernetServer::available()+0xd0>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58 (discriminator 1)
        (client.status() == SnSR::ESTABLISHED ||
   16b5e:	ce 01       	movw	r24, r28
   16b60:	01 96       	adiw	r24, 0x01	; 1
   16b62:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57 (discriminator 1)
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   16b66:	87 31       	cpi	r24, 0x17	; 23
   16b68:	91 f5       	brne	.+100    	; 0x16bce <EthernetServer::available()+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   16b6a:	ce 01       	movw	r24, r28
   16b6c:	01 96       	adiw	r24, 0x01	; 1
   16b6e:	0e 94 16 b3 	call	0x1662c	; 0x1662c <EthernetClient::available()>
   16b72:	89 2b       	or	r24, r25
   16b74:	91 f1       	breq	.+100    	; 0x16bda <EthernetServer::available()+0xd0>
_ZN5PrintC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   16b76:	8b 81       	ldd	r24, Y+3	; 0x03
   16b78:	9c 81       	ldd	r25, Y+4	; 0x04
   16b7a:	f8 01       	movw	r30, r16
   16b7c:	93 83       	std	Z+3, r25	; 0x03
   16b7e:	82 83       	std	Z+2, r24	; 0x02
_ZN6StreamC4EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   16b80:	8d 81       	ldd	r24, Y+5	; 0x05
   16b82:	9e 81       	ldd	r25, Y+6	; 0x06
   16b84:	af 81       	ldd	r26, Y+7	; 0x07
   16b86:	b8 85       	ldd	r27, Y+8	; 0x08
   16b88:	84 83       	std	Z+4, r24	; 0x04
   16b8a:	95 83       	std	Z+5, r25	; 0x05
   16b8c:	a6 83       	std	Z+6, r26	; 0x06
   16b8e:	b7 83       	std	Z+7, r27	; 0x07
   16b90:	89 85       	ldd	r24, Y+9	; 0x09
   16b92:	9a 85       	ldd	r25, Y+10	; 0x0a
   16b94:	ab 85       	ldd	r26, Y+11	; 0x0b
   16b96:	bc 85       	ldd	r27, Y+12	; 0x0c
   16b98:	80 87       	std	Z+8, r24	; 0x08
   16b9a:	91 87       	std	Z+9, r25	; 0x09
   16b9c:	a2 87       	std	Z+10, r26	; 0x0a
   16b9e:	b3 87       	std	Z+11, r27	; 0x0b
_ZN14EthernetClientC4EOS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   16ba0:	88 ec       	ldi	r24, 0xC8	; 200
   16ba2:	98 e0       	ldi	r25, 0x08	; 8
   16ba4:	91 83       	std	Z+1, r25	; 0x01
   16ba6:	80 83       	st	Z, r24
   16ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
   16baa:	84 87       	std	Z+12, r24	; 0x0c
_ZN14EthernetServer9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:68
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
   16bac:	c8 01       	movw	r24, r16
   16bae:	2d 96       	adiw	r28, 0x0d	; 13
   16bb0:	0f b6       	in	r0, 0x3f	; 63
   16bb2:	f8 94       	cli
   16bb4:	de bf       	out	0x3e, r29	; 62
   16bb6:	0f be       	out	0x3f, r0	; 63
   16bb8:	cd bf       	out	0x3d, r28	; 61
   16bba:	df 91       	pop	r29
   16bbc:	cf 91       	pop	r28
   16bbe:	1f 91       	pop	r17
   16bc0:	0f 91       	pop	r16
   16bc2:	ff 90       	pop	r15
   16bc4:	df 90       	pop	r13
   16bc6:	cf 90       	pop	r12
   16bc8:	bf 90       	pop	r11
   16bca:	af 90       	pop	r10
   16bcc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   16bce:	ce 01       	movw	r24, r28
   16bd0:	01 96       	adiw	r24, 0x01	; 1
   16bd2:	0e 94 89 b3 	call	0x16712	; 0x16712 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   16bd6:	8c 31       	cpi	r24, 0x1C	; 28
   16bd8:	41 f2       	breq	.-112    	; 0x16b6a <EthernetServer::available()+0x60>
   16bda:	f3 94       	inc	r15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   16bdc:	f8 e0       	ldi	r31, 0x08	; 8
   16bde:	ff 12       	cpse	r15, r31
   16be0:	af cf       	rjmp	.-162    	; 0x16b40 <EthernetServer::available()+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:67
        return client;
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
   16be2:	68 e0       	ldi	r22, 0x08	; 8
   16be4:	c8 01       	movw	r24, r16
   16be6:	0e 94 78 b3 	call	0x166f0	; 0x166f0 <EthernetClient::EthernetClient(unsigned char)>
   16bea:	e0 cf       	rjmp	.-64     	; 0x16bac <EthernetServer::available()+0xa2>

00016bec <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   16bec:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   16bee:	00 e0       	ldi	r16, 0x00	; 0
   16bf0:	20 e0       	ldi	r18, 0x00	; 0
   16bf2:	40 e0       	ldi	r20, 0x00	; 0
   16bf4:	60 e0       	ldi	r22, 0x00	; 0
   16bf6:	8c e2       	ldi	r24, 0x2C	; 44
   16bf8:	93 e1       	ldi	r25, 0x13	; 19
   16bfa:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   16bfe:	0f 91       	pop	r16
   16c00:	08 95       	ret

00016c02 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   16c02:	80 e0       	ldi	r24, 0x00	; 0
   16c04:	08 95       	ret

00016c06 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   16c06:	dc 01       	movw	r26, r24
   16c08:	ed 91       	ld	r30, X+
   16c0a:	fc 91       	ld	r31, X
   16c0c:	04 8c       	ldd	r0, Z+28	; 0x1c
   16c0e:	f5 8d       	ldd	r31, Z+29	; 0x1d
   16c10:	e0 2d       	mov	r30, r0
   16c12:	19 94       	eijmp

00016c14 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16c14:	23 e5       	ldi	r18, 0x53	; 83
   16c16:	39 e0       	ldi	r19, 0x09	; 9
   16c18:	fc 01       	movw	r30, r24
   16c1a:	31 83       	std	Z+1, r19	; 0x01
   16c1c:	20 83       	st	Z, r18
   16c1e:	fb 01       	movw	r30, r22
   16c20:	41 89       	ldd	r20, Z+17	; 0x11
   16c22:	52 89       	ldd	r21, Z+18	; 0x12
   16c24:	63 89       	ldd	r22, Z+19	; 0x13
   16c26:	74 89       	ldd	r23, Z+20	; 0x14
   16c28:	fc 01       	movw	r30, r24
   16c2a:	42 83       	std	Z+2, r20	; 0x02
   16c2c:	53 83       	std	Z+3, r21	; 0x03
   16c2e:	64 83       	std	Z+4, r22	; 0x04
   16c30:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   16c32:	08 95       	ret

00016c34 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   16c34:	fc 01       	movw	r30, r24
   16c36:	85 89       	ldd	r24, Z+21	; 0x15
   16c38:	96 89       	ldd	r25, Z+22	; 0x16
   16c3a:	08 95       	ret

00016c3c <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   16c3c:	fc 01       	movw	r30, r24
   16c3e:	81 8d       	ldd	r24, Z+25	; 0x19
   16c40:	92 8d       	ldd	r25, Z+26	; 0x1a
   16c42:	08 95       	ret

00016c44 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   16c44:	cf 93       	push	r28
   16c46:	df 93       	push	r29
   16c48:	1f 92       	push	r1
   16c4a:	cd b7       	in	r28, 0x3d	; 61
   16c4c:	de b7       	in	r29, 0x3e	; 62
   16c4e:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   16c50:	dc 01       	movw	r26, r24
   16c52:	ed 91       	ld	r30, X+
   16c54:	fc 91       	ld	r31, X
   16c56:	02 80       	ldd	r0, Z+2	; 0x02
   16c58:	f3 81       	ldd	r31, Z+3	; 0x03
   16c5a:	e0 2d       	mov	r30, r0
   16c5c:	41 e0       	ldi	r20, 0x01	; 1
   16c5e:	50 e0       	ldi	r21, 0x00	; 0
   16c60:	be 01       	movw	r22, r28
   16c62:	6f 5f       	subi	r22, 0xFF	; 255
   16c64:	7f 4f       	sbci	r23, 0xFF	; 255
   16c66:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   16c68:	0f 90       	pop	r0
   16c6a:	df 91       	pop	r29
   16c6c:	cf 91       	pop	r28
   16c6e:	08 95       	ret

00016c70 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   16c70:	cf 93       	push	r28
   16c72:	df 93       	push	r29
   16c74:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16c76:	89 8d       	ldd	r24, Y+25	; 0x19
   16c78:	9a 8d       	ldd	r25, Y+26	; 0x1a
   16c7a:	89 2b       	or	r24, r25
   16c7c:	41 f0       	breq	.+16     	; 0x16c8e <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   16c7e:	e8 81       	ld	r30, Y
   16c80:	f9 81       	ldd	r31, Y+1	; 0x01
   16c82:	02 84       	ldd	r0, Z+10	; 0x0a
   16c84:	f3 85       	ldd	r31, Z+11	; 0x0b
   16c86:	e0 2d       	mov	r30, r0
   16c88:	ce 01       	movw	r24, r28
   16c8a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16c8c:	f4 cf       	rjmp	.-24     	; 0x16c76 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   16c8e:	df 91       	pop	r29
   16c90:	cf 91       	pop	r28
   16c92:	08 95       	ret

00016c94 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   16c94:	cf 93       	push	r28
   16c96:	df 93       	push	r29
   16c98:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   16c9a:	8c 85       	ldd	r24, Y+12	; 0x0c
   16c9c:	88 30       	cpi	r24, 0x08	; 8
   16c9e:	61 f0       	breq	.+24     	; 0x16cb8 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   16ca0:	0e 94 38 b8 	call	0x17070	; 0x17070 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   16ca4:	ec 85       	ldd	r30, Y+12	; 0x0c
   16ca6:	f0 e0       	ldi	r31, 0x00	; 0
   16ca8:	ee 0f       	add	r30, r30
   16caa:	ff 1f       	adc	r31, r31
   16cac:	e0 5f       	subi	r30, 0xF0	; 240
   16cae:	fc 4e       	sbci	r31, 0xEC	; 236
   16cb0:	11 82       	std	Z+1, r1	; 0x01
   16cb2:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   16cb4:	88 e0       	ldi	r24, 0x08	; 8
   16cb6:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   16cb8:	df 91       	pop	r29
   16cba:	cf 91       	pop	r28
   16cbc:	08 95       	ret

00016cbe <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   16cbe:	fc 01       	movw	r30, r24
   16cc0:	10 8e       	std	Z+24, r1	; 0x18
   16cc2:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   16cc4:	6e 5f       	subi	r22, 0xFE	; 254
   16cc6:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   16cc8:	84 85       	ldd	r24, Z+12	; 0x0c
   16cca:	0c 94 a1 b9 	jmp	0x17342	; 0x17342 <startUDP(unsigned char, unsigned char*, unsigned int)>

00016cce <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   16cce:	fc 01       	movw	r30, r24
   16cd0:	84 85       	ldd	r24, Z+12	; 0x0c
   16cd2:	0c 94 c6 b9 	jmp	0x1738c	; 0x1738c <sendUDP(unsigned char)>

00016cd6 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   16cd6:	cf 93       	push	r28
   16cd8:	df 93       	push	r29
   16cda:	ec 01       	movw	r28, r24
   16cdc:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   16cde:	8f 89       	ldd	r24, Y+23	; 0x17
   16ce0:	98 8d       	ldd	r25, Y+24	; 0x18
   16ce2:	ab 01       	movw	r20, r22
   16ce4:	bc 01       	movw	r22, r24
   16ce6:	8c 85       	ldd	r24, Y+12	; 0x0c
   16ce8:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   16cec:	2f 89       	ldd	r18, Y+23	; 0x17
   16cee:	38 8d       	ldd	r19, Y+24	; 0x18
   16cf0:	28 0f       	add	r18, r24
   16cf2:	39 1f       	adc	r19, r25
   16cf4:	38 8f       	std	Y+24, r19	; 0x18
   16cf6:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   16cf8:	df 91       	pop	r29
   16cfa:	cf 91       	pop	r28
   16cfc:	08 95       	ret

00016cfe <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   16cfe:	0f 93       	push	r16
   16d00:	1f 93       	push	r17
   16d02:	cf 93       	push	r28
   16d04:	df 93       	push	r29
   16d06:	1f 92       	push	r1
   16d08:	cd b7       	in	r28, 0x3d	; 61
   16d0a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16d0c:	fc 01       	movw	r30, r24
   16d0e:	21 8d       	ldd	r18, Z+25	; 0x19
   16d10:	32 8d       	ldd	r19, Z+26	; 0x1a
   16d12:	23 2b       	or	r18, r19
   16d14:	41 f4       	brne	.+16     	; 0x16d26 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   16d16:	8f ef       	ldi	r24, 0xFF	; 255
   16d18:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   16d1a:	0f 90       	pop	r0
   16d1c:	df 91       	pop	r29
   16d1e:	cf 91       	pop	r28
   16d20:	1f 91       	pop	r17
   16d22:	0f 91       	pop	r16
   16d24:	08 95       	ret
   16d26:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16d28:	41 e0       	ldi	r20, 0x01	; 1
   16d2a:	50 e0       	ldi	r21, 0x00	; 0
   16d2c:	be 01       	movw	r22, r28
   16d2e:	6f 5f       	subi	r22, 0xFF	; 255
   16d30:	7f 4f       	sbci	r23, 0xFF	; 255
   16d32:	fc 01       	movw	r30, r24
   16d34:	84 85       	ldd	r24, Z+12	; 0x0c
   16d36:	0e 94 1e b9 	call	0x1723c	; 0x1723c <recv(unsigned char, unsigned char*, int)>
   16d3a:	18 16       	cp	r1, r24
   16d3c:	19 06       	cpc	r1, r25
   16d3e:	5c f7       	brge	.-42     	; 0x16d16 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   16d40:	f8 01       	movw	r30, r16
   16d42:	81 8d       	ldd	r24, Z+25	; 0x19
   16d44:	92 8d       	ldd	r25, Z+26	; 0x1a
   16d46:	01 97       	sbiw	r24, 0x01	; 1
   16d48:	92 8f       	std	Z+26, r25	; 0x1a
   16d4a:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   16d4c:	89 81       	ldd	r24, Y+1	; 0x01
   16d4e:	90 e0       	ldi	r25, 0x00	; 0
   16d50:	e4 cf       	rjmp	.-56     	; 0x16d1a <EthernetUDP::read()+0x1c>

00016d52 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   16d52:	cf 93       	push	r28
   16d54:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   16d56:	fc 01       	movw	r30, r24
   16d58:	21 8d       	ldd	r18, Z+25	; 0x19
   16d5a:	32 8d       	ldd	r19, Z+26	; 0x1a
   16d5c:	21 15       	cp	r18, r1
   16d5e:	31 05       	cpc	r19, r1
   16d60:	29 f4       	brne	.+10     	; 0x16d6c <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   16d62:	8f ef       	ldi	r24, 0xFF	; 255
   16d64:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   16d66:	df 91       	pop	r29
   16d68:	cf 91       	pop	r28
   16d6a:	08 95       	ret
   16d6c:	ec 01       	movw	r28, r24
   16d6e:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   16d70:	42 17       	cp	r20, r18
   16d72:	53 07       	cpc	r21, r19
   16d74:	08 f0       	brcs	.+2      	; 0x16d78 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   16d76:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   16d78:	0e 94 1e b9 	call	0x1723c	; 0x1723c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   16d7c:	18 16       	cp	r1, r24
   16d7e:	19 06       	cpc	r1, r25
   16d80:	84 f7       	brge	.-32     	; 0x16d62 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   16d82:	29 8d       	ldd	r18, Y+25	; 0x19
   16d84:	3a 8d       	ldd	r19, Y+26	; 0x1a
   16d86:	28 1b       	sub	r18, r24
   16d88:	39 0b       	sbc	r19, r25
   16d8a:	3a 8f       	std	Y+26, r19	; 0x1a
   16d8c:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   16d8e:	eb cf       	rjmp	.-42     	; 0x16d66 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00016d90 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   16d90:	cf 93       	push	r28
   16d92:	df 93       	push	r29
   16d94:	1f 92       	push	r1
   16d96:	cd b7       	in	r28, 0x3d	; 61
   16d98:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16d9a:	fc 01       	movw	r30, r24
   16d9c:	21 8d       	ldd	r18, Z+25	; 0x19
   16d9e:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   16da0:	8f ef       	ldi	r24, 0xFF	; 255
   16da2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16da4:	23 2b       	or	r18, r19
   16da6:	41 f0       	breq	.+16     	; 0x16db8 <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   16da8:	be 01       	movw	r22, r28
   16daa:	6f 5f       	subi	r22, 0xFF	; 255
   16dac:	7f 4f       	sbci	r23, 0xFF	; 255
   16dae:	84 85       	ldd	r24, Z+12	; 0x0c
   16db0:	0e 94 64 b9 	call	0x172c8	; 0x172c8 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   16db4:	89 81       	ldd	r24, Y+1	; 0x01
   16db6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   16db8:	0f 90       	pop	r0
   16dba:	df 91       	pop	r29
   16dbc:	cf 91       	pop	r28
   16dbe:	08 95       	ret

00016dc0 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   16dc0:	0f 93       	push	r16
   16dc2:	1f 93       	push	r17
   16dc4:	cf 93       	push	r28
   16dc6:	df 93       	push	r29
   16dc8:	00 d0       	rcall	.+0      	; 0x16dca <EthernetUDP::parsePacket()+0xa>
   16dca:	00 d0       	rcall	.+0      	; 0x16dcc <EthernetUDP::parsePacket()+0xc>
   16dcc:	1f 92       	push	r1
   16dce:	1f 92       	push	r1
   16dd0:	cd b7       	in	r28, 0x3d	; 61
   16dd2:	de b7       	in	r29, 0x3e	; 62
   16dd4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   16dd6:	dc 01       	movw	r26, r24
   16dd8:	ed 91       	ld	r30, X+
   16dda:	fc 91       	ld	r31, X
   16ddc:	06 80       	ldd	r0, Z+6	; 0x06
   16dde:	f7 81       	ldd	r31, Z+7	; 0x07
   16de0:	e0 2d       	mov	r30, r0
   16de2:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   16de4:	f8 01       	movw	r30, r16
   16de6:	64 85       	ldd	r22, Z+12	; 0x0c
   16de8:	83 e4       	ldi	r24, 0x43	; 67
   16dea:	93 e1       	ldi	r25, 0x13	; 19
   16dec:	0e 94 25 bb 	call	0x1764a	; 0x1764a <W5500Class::getRXReceivedSize(unsigned char)>
   16df0:	89 2b       	or	r24, r25
   16df2:	a1 f1       	breq	.+104    	; 0x16e5c <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   16df4:	48 e0       	ldi	r20, 0x08	; 8
   16df6:	50 e0       	ldi	r21, 0x00	; 0
   16df8:	be 01       	movw	r22, r28
   16dfa:	6f 5f       	subi	r22, 0xFF	; 255
   16dfc:	7f 4f       	sbci	r23, 0xFF	; 255
   16dfe:	d8 01       	movw	r26, r16
   16e00:	1c 96       	adiw	r26, 0x0c	; 12
   16e02:	8c 91       	ld	r24, X
   16e04:	0e 94 1e b9 	call	0x1723c	; 0x1723c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   16e08:	18 16       	cp	r1, r24
   16e0a:	19 06       	cpc	r1, r25
   16e0c:	e4 f4       	brge	.+56     	; 0x16e46 <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   16e0e:	be 01       	movw	r22, r28
   16e10:	6f 5f       	subi	r22, 0xFF	; 255
   16e12:	7f 4f       	sbci	r23, 0xFF	; 255
   16e14:	c8 01       	movw	r24, r16
   16e16:	0f 96       	adiw	r24, 0x0f	; 15
   16e18:	0e 94 fa d8 	call	0x1b1f4	; 0x1b1f4 <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   16e1c:	8d 81       	ldd	r24, Y+5	; 0x05
   16e1e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   16e20:	98 2f       	mov	r25, r24
   16e22:	88 27       	eor	r24, r24
   16e24:	2e 81       	ldd	r18, Y+6	; 0x06
   16e26:	82 0f       	add	r24, r18
   16e28:	91 1d       	adc	r25, r1
   16e2a:	f8 01       	movw	r30, r16
   16e2c:	96 8b       	std	Z+22, r25	; 0x16
   16e2e:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   16e30:	8f 81       	ldd	r24, Y+7	; 0x07
   16e32:	28 2f       	mov	r18, r24
   16e34:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   16e36:	32 2f       	mov	r19, r18
   16e38:	22 27       	eor	r18, r18
   16e3a:	88 85       	ldd	r24, Y+8	; 0x08
   16e3c:	82 0f       	add	r24, r18
   16e3e:	93 2f       	mov	r25, r19
   16e40:	91 1d       	adc	r25, r1
   16e42:	92 8f       	std	Z+26, r25	; 0x1a
   16e44:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   16e46:	28 96       	adiw	r28, 0x08	; 8
   16e48:	0f b6       	in	r0, 0x3f	; 63
   16e4a:	f8 94       	cli
   16e4c:	de bf       	out	0x3e, r29	; 62
   16e4e:	0f be       	out	0x3f, r0	; 63
   16e50:	cd bf       	out	0x3d, r28	; 61
   16e52:	df 91       	pop	r29
   16e54:	cf 91       	pop	r28
   16e56:	1f 91       	pop	r17
   16e58:	0f 91       	pop	r16
   16e5a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   16e5c:	90 e0       	ldi	r25, 0x00	; 0
   16e5e:	80 e0       	ldi	r24, 0x00	; 0
   16e60:	f2 cf       	rjmp	.-28     	; 0x16e46 <EthernetUDP::parsePacket()+0x86>

00016e62 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   16e62:	ef 92       	push	r14
   16e64:	ff 92       	push	r15
   16e66:	0f 93       	push	r16
   16e68:	1f 93       	push	r17
   16e6a:	cf 93       	push	r28
   16e6c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   16e6e:	fc 01       	movw	r30, r24
   16e70:	e4 84       	ldd	r14, Z+12	; 0x0c
   16e72:	f8 e0       	ldi	r31, 0x08	; 8
   16e74:	ef 16       	cp	r14, r31
   16e76:	41 f0       	breq	.+16     	; 0x16e88 <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   16e78:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   16e7a:	df 91       	pop	r29
   16e7c:	cf 91       	pop	r28
   16e7e:	1f 91       	pop	r17
   16e80:	0f 91       	pop	r16
   16e82:	ff 90       	pop	r15
   16e84:	ef 90       	pop	r14
   16e86:	08 95       	ret
   16e88:	8b 01       	movw	r16, r22
   16e8a:	ec 01       	movw	r28, r24
   16e8c:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   16e8e:	6e 2d       	mov	r22, r14
   16e90:	83 e0       	ldi	r24, 0x03	; 3
   16e92:	90 e0       	ldi	r25, 0x00	; 0
   16e94:	0e 94 7e ba 	call	0x174fc	; 0x174fc <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   16e98:	81 11       	cpse	r24, r1
   16e9a:	0f c0       	rjmp	.+30     	; 0x16eba <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   16e9c:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   16e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16ea0:	88 30       	cpi	r24, 0x08	; 8
   16ea2:	51 f3       	breq	.-44     	; 0x16e78 <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   16ea4:	1e 87       	std	Y+14, r17	; 0x0e
   16ea6:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   16ea8:	1a 8e       	std	Y+26, r1	; 0x1a
   16eaa:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   16eac:	20 e0       	ldi	r18, 0x00	; 0
   16eae:	a8 01       	movw	r20, r16
   16eb0:	62 e0       	ldi	r22, 0x02	; 2
   16eb2:	0e 94 46 b8 	call	0x1708c	; 0x1708c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   16eb6:	81 e0       	ldi	r24, 0x01	; 1
   16eb8:	e0 cf       	rjmp	.-64     	; 0x16e7a <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   16eba:	88 31       	cpi	r24, 0x18	; 24
   16ebc:	79 f3       	breq	.-34     	; 0x16e9c <EthernetUDP::begin(unsigned int)+0x3a>
   16ebe:	f3 94       	inc	r15
   16ec0:	20 e2       	ldi	r18, 0x20	; 32
   16ec2:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   16ec4:	88 e0       	ldi	r24, 0x08	; 8
   16ec6:	f8 12       	cpse	r15, r24
   16ec8:	e2 cf       	rjmp	.-60     	; 0x16e8e <EthernetUDP::begin(unsigned int)+0x2c>
   16eca:	e9 cf       	rjmp	.-46     	; 0x16e9e <EthernetUDP::begin(unsigned int)+0x3c>

00016ecc <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   16ecc:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   16ece:	13 82       	std	Z+3, r1	; 0x03
   16ed0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   16ed2:	88 ee       	ldi	r24, 0xE8	; 232
   16ed4:	93 e0       	ldi	r25, 0x03	; 3
   16ed6:	a0 e0       	ldi	r26, 0x00	; 0
   16ed8:	b0 e0       	ldi	r27, 0x00	; 0
   16eda:	84 83       	std	Z+4, r24	; 0x04
   16edc:	95 83       	std	Z+5, r25	; 0x05
   16ede:	a6 83       	std	Z+6, r26	; 0x06
   16ee0:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   16ee2:	88 ef       	ldi	r24, 0xF8	; 248
   16ee4:	98 e0       	ldi	r25, 0x08	; 8
   16ee6:	91 83       	std	Z+1, r25	; 0x01
   16ee8:	80 83       	st	Z, r24
   16eea:	88 e0       	ldi	r24, 0x08	; 8
   16eec:	84 87       	std	Z+12, r24	; 0x0c
   16eee:	cf 01       	movw	r24, r30
   16ef0:	0f 96       	adiw	r24, 0x0f	; 15
   16ef2:	0c 94 d8 d8 	jmp	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>

00016ef6 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   16ef6:	cf 92       	push	r12
   16ef8:	df 92       	push	r13
   16efa:	ef 92       	push	r14
   16efc:	ff 92       	push	r15
   16efe:	0f 93       	push	r16
   16f00:	1f 93       	push	r17
   16f02:	cf 93       	push	r28
   16f04:	df 93       	push	r29
   16f06:	cd b7       	in	r28, 0x3d	; 61
   16f08:	de b7       	in	r29, 0x3e	; 62
   16f0a:	af 97       	sbiw	r28, 0x2f	; 47
   16f0c:	0f b6       	in	r0, 0x3f	; 63
   16f0e:	f8 94       	cli
   16f10:	de bf       	out	0x3e, r29	; 62
   16f12:	0f be       	out	0x3f, r0	; 63
   16f14:	cd bf       	out	0x3d, r28	; 61
   16f16:	8c 01       	movw	r16, r24
   16f18:	6b 01       	movw	r12, r22
   16f1a:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
   16f1c:	ce 01       	movw	r24, r28
   16f1e:	01 96       	adiw	r24, 0x01	; 1
   16f20:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
   16f24:	ce 01       	movw	r24, r28
   16f26:	09 96       	adiw	r24, 0x09	; 9
   16f28:	0e 94 66 b7 	call	0x16ecc	; 0x16ecc <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   16f2c:	ce 01       	movw	r24, r28
   16f2e:	8a 96       	adiw	r24, 0x2a	; 42
   16f30:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   16f34:	63 e0       	ldi	r22, 0x03	; 3
   16f36:	73 e1       	ldi	r23, 0x13	; 19
   16f38:	ce 01       	movw	r24, r28
   16f3a:	84 96       	adiw	r24, 0x24	; 36
   16f3c:	0e 94 41 b2 	call	0x16482	; 0x16482 <EthernetClass::dnsServerIP()>
   16f40:	be 01       	movw	r22, r28
   16f42:	6c 5d       	subi	r22, 0xDC	; 220
   16f44:	7f 4f       	sbci	r23, 0xFF	; 255
   16f46:	ce 01       	movw	r24, r28
   16f48:	01 96       	adiw	r24, 0x01	; 1
   16f4a:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   16f4e:	ae 01       	movw	r20, r28
   16f50:	46 5d       	subi	r20, 0xD6	; 214
   16f52:	5f 4f       	sbci	r21, 0xFF	; 255
   16f54:	b6 01       	movw	r22, r12
   16f56:	ce 01       	movw	r24, r28
   16f58:	01 96       	adiw	r24, 0x01	; 1
   16f5a:	0e 94 5a b1 	call	0x162b4	; 0x162b4 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   16f5e:	81 30       	cpi	r24, 0x01	; 1
   16f60:	91 05       	cpc	r25, r1
   16f62:	c1 f4       	brne	.+48     	; 0x16f94 <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   16f64:	d8 01       	movw	r26, r16
   16f66:	ed 91       	ld	r30, X+
   16f68:	fc 91       	ld	r31, X
   16f6a:	04 88       	ldd	r0, Z+20	; 0x14
   16f6c:	f5 89       	ldd	r31, Z+21	; 0x15
   16f6e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16f70:	83 e5       	ldi	r24, 0x53	; 83
   16f72:	99 e0       	ldi	r25, 0x09	; 9
   16f74:	9d a3       	std	Y+37, r25	; 0x25
   16f76:	8c a3       	std	Y+36, r24	; 0x24
   16f78:	8c a5       	ldd	r24, Y+44	; 0x2c
   16f7a:	9d a5       	ldd	r25, Y+45	; 0x2d
   16f7c:	ae a5       	ldd	r26, Y+46	; 0x2e
   16f7e:	bf a5       	ldd	r27, Y+47	; 0x2f
   16f80:	8e a3       	std	Y+38, r24	; 0x26
   16f82:	9f a3       	std	Y+39, r25	; 0x27
   16f84:	a8 a7       	std	Y+40, r26	; 0x28
   16f86:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   16f88:	a7 01       	movw	r20, r14
   16f8a:	be 01       	movw	r22, r28
   16f8c:	6c 5d       	subi	r22, 0xDC	; 220
   16f8e:	7f 4f       	sbci	r23, 0xFF	; 255
   16f90:	c8 01       	movw	r24, r16
   16f92:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   16f94:	af 96       	adiw	r28, 0x2f	; 47
   16f96:	0f b6       	in	r0, 0x3f	; 63
   16f98:	f8 94       	cli
   16f9a:	de bf       	out	0x3e, r29	; 62
   16f9c:	0f be       	out	0x3f, r0	; 63
   16f9e:	cd bf       	out	0x3d, r28	; 61
   16fa0:	df 91       	pop	r29
   16fa2:	cf 91       	pop	r28
   16fa4:	1f 91       	pop	r17
   16fa6:	0f 91       	pop	r16
   16fa8:	ff 90       	pop	r15
   16faa:	ef 90       	pop	r14
   16fac:	df 90       	pop	r13
   16fae:	cf 90       	pop	r12
   16fb0:	08 95       	ret

00016fb2 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   16fb2:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   16fb4:	00 e0       	ldi	r16, 0x00	; 0
   16fb6:	20 e0       	ldi	r18, 0x00	; 0
   16fb8:	40 e0       	ldi	r20, 0x00	; 0
   16fba:	60 e0       	ldi	r22, 0x00	; 0
   16fbc:	82 e3       	ldi	r24, 0x32	; 50
   16fbe:	93 e1       	ldi	r25, 0x13	; 19
   16fc0:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   16fc4:	0f 91       	pop	r16
   16fc6:	08 95       	ret

00016fc8 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   16fc8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   16fca:	00 e0       	ldi	r16, 0x00	; 0
   16fcc:	20 e0       	ldi	r18, 0x00	; 0
   16fce:	40 e0       	ldi	r20, 0x00	; 0
   16fd0:	60 e0       	ldi	r22, 0x00	; 0
   16fd2:	88 e3       	ldi	r24, 0x38	; 56
   16fd4:	93 e1       	ldi	r25, 0x13	; 19
   16fd6:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   16fda:	0f 91       	pop	r16
   16fdc:	08 95       	ret

00016fde <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   16fde:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   16fe0:	82 95       	swap	r24
   16fe2:	88 0f       	add	r24, r24
   16fe4:	80 7e       	andi	r24, 0xE0	; 224
   16fe6:	6c e0       	ldi	r22, 0x0C	; 12
   16fe8:	68 0f       	add	r22, r24
   16fea:	24 e0       	ldi	r18, 0x04	; 4
   16fec:	30 e0       	ldi	r19, 0x00	; 0
   16fee:	8c e0       	ldi	r24, 0x0C	; 12
   16ff0:	90 e0       	ldi	r25, 0x00	; 0
   16ff2:	0c 94 4a ba 	jmp	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00016ff6 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   16ff6:	9b 01       	movw	r18, r22
   16ff8:	82 95       	swap	r24
   16ffa:	88 0f       	add	r24, r24
   16ffc:	80 7e       	andi	r24, 0xE0	; 224
   16ffe:	68 e0       	ldi	r22, 0x08	; 8
   17000:	68 0f       	add	r22, r24
   17002:	c9 01       	movw	r24, r18
   17004:	0c 94 7e ba 	jmp	0x174fc	; 0x174fc <W5500Class::read(unsigned int, unsigned char)>

00017008 <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   17008:	62 e0       	ldi	r22, 0x02	; 2
   1700a:	70 e0       	ldi	r23, 0x00	; 0
   1700c:	0c 94 fb b7 	jmp	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>

00017010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   17010:	9b 01       	movw	r18, r22
   17012:	82 95       	swap	r24
   17014:	88 0f       	add	r24, r24
   17016:	80 7e       	andi	r24, 0xE0	; 224
   17018:	6c e0       	ldi	r22, 0x0C	; 12
   1701a:	68 0f       	add	r22, r24
   1701c:	c9 01       	movw	r24, r18
   1701e:	0c 94 24 ba 	jmp	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00017022 <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   17022:	cf 93       	push	r28
   17024:	df 93       	push	r29
   17026:	c8 2f       	mov	r28, r24
   17028:	d6 2f       	mov	r29, r22
   1702a:	47 2f       	mov	r20, r23
   1702c:	64 e0       	ldi	r22, 0x04	; 4
   1702e:	70 e0       	ldi	r23, 0x00	; 0
   17030:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   17034:	4d 2f       	mov	r20, r29
   17036:	65 e0       	ldi	r22, 0x05	; 5
   17038:	70 e0       	ldi	r23, 0x00	; 0
   1703a:	8c 2f       	mov	r24, r28
   1703c:	df 91       	pop	r29
   1703e:	cf 91       	pop	r28
   17040:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00017044 <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   17044:	46 2f       	mov	r20, r22
   17046:	62 e0       	ldi	r22, 0x02	; 2
   17048:	70 e0       	ldi	r23, 0x00	; 0
   1704a:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001704e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   1704e:	cf 93       	push	r28
   17050:	df 93       	push	r29
   17052:	c8 2f       	mov	r28, r24
   17054:	d6 2f       	mov	r29, r22
   17056:	47 2f       	mov	r20, r23
   17058:	60 e1       	ldi	r22, 0x10	; 16
   1705a:	70 e0       	ldi	r23, 0x00	; 0
   1705c:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   17060:	4d 2f       	mov	r20, r29
   17062:	61 e1       	ldi	r22, 0x11	; 17
   17064:	70 e0       	ldi	r23, 0x00	; 0
   17066:	8c 2f       	mov	r24, r28
   17068:	df 91       	pop	r29
   1706a:	cf 91       	pop	r28
   1706c:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00017070 <close(unsigned char)>:
_Z5closeh():
   17070:	cf 93       	push	r28
   17072:	c8 2f       	mov	r28, r24
   17074:	40 e1       	ldi	r20, 0x10	; 16
   17076:	50 e0       	ldi	r21, 0x00	; 0
   17078:	68 2f       	mov	r22, r24
   1707a:	83 e4       	ldi	r24, 0x43	; 67
   1707c:	93 e1       	ldi	r25, 0x13	; 19
   1707e:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   17082:	6f ef       	ldi	r22, 0xFF	; 255
   17084:	8c 2f       	mov	r24, r28
   17086:	cf 91       	pop	r28
   17088:	0c 94 22 b8 	jmp	0x17044	; 0x17044 <W5500Class::writeSnIR(unsigned char, unsigned char)>

0001708c <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   1708c:	ff 92       	push	r15
   1708e:	0f 93       	push	r16
   17090:	1f 93       	push	r17
   17092:	cf 93       	push	r28
   17094:	df 93       	push	r29
   17096:	9f ef       	ldi	r25, 0xFF	; 255
   17098:	96 0f       	add	r25, r22
   1709a:	95 30       	cpi	r25, 0x05	; 5
   1709c:	58 f5       	brcc	.+86     	; 0x170f4 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   1709e:	f2 2e       	mov	r15, r18
   170a0:	8a 01       	movw	r16, r20
   170a2:	d6 2f       	mov	r29, r22
   170a4:	c8 2f       	mov	r28, r24
   170a6:	0e 94 38 b8 	call	0x17070	; 0x17070 <close(unsigned char)>
   170aa:	4d 2f       	mov	r20, r29
   170ac:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   170ae:	70 e0       	ldi	r23, 0x00	; 0
   170b0:	60 e0       	ldi	r22, 0x00	; 0
   170b2:	8c 2f       	mov	r24, r28
   170b4:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   170b8:	b8 01       	movw	r22, r16
   170ba:	01 2b       	or	r16, r17
   170bc:	51 f4       	brne	.+20     	; 0x170d2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   170be:	60 91 3e 13 	lds	r22, 0x133E	; 0x80133e <local_port>
   170c2:	70 91 3f 13 	lds	r23, 0x133F	; 0x80133f <local_port+0x1>
   170c6:	6f 5f       	subi	r22, 0xFF	; 255
   170c8:	7f 4f       	sbci	r23, 0xFF	; 255
   170ca:	70 93 3f 13 	sts	0x133F, r23	; 0x80133f <local_port+0x1>
   170ce:	60 93 3e 13 	sts	0x133E, r22	; 0x80133e <local_port>
   170d2:	8c 2f       	mov	r24, r28
   170d4:	0e 94 11 b8 	call	0x17022	; 0x17022 <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   170d8:	41 e0       	ldi	r20, 0x01	; 1
   170da:	50 e0       	ldi	r21, 0x00	; 0
   170dc:	6c 2f       	mov	r22, r28
   170de:	83 e4       	ldi	r24, 0x43	; 67
   170e0:	93 e1       	ldi	r25, 0x13	; 19
   170e2:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   170e6:	81 e0       	ldi	r24, 0x01	; 1
   170e8:	df 91       	pop	r29
   170ea:	cf 91       	pop	r28
   170ec:	1f 91       	pop	r17
   170ee:	0f 91       	pop	r16
   170f0:	ff 90       	pop	r15
   170f2:	08 95       	ret
   170f4:	80 e0       	ldi	r24, 0x00	; 0
   170f6:	f8 cf       	rjmp	.-16     	; 0x170e8 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

000170f8 <listen(unsigned char)>:
_Z6listenh():
   170f8:	cf 93       	push	r28
   170fa:	c8 2f       	mov	r28, r24
_ZN10W5500Class8readSnSREh():
   170fc:	63 e0       	ldi	r22, 0x03	; 3
   170fe:	70 e0       	ldi	r23, 0x00	; 0
   17100:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z6listenh():
   17104:	83 31       	cpi	r24, 0x13	; 19
   17106:	51 f4       	brne	.+20     	; 0x1711c <listen(unsigned char)+0x24>
   17108:	42 e0       	ldi	r20, 0x02	; 2
   1710a:	50 e0       	ldi	r21, 0x00	; 0
   1710c:	6c 2f       	mov	r22, r28
   1710e:	83 e4       	ldi	r24, 0x43	; 67
   17110:	93 e1       	ldi	r25, 0x13	; 19
   17112:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   17116:	81 e0       	ldi	r24, 0x01	; 1
   17118:	cf 91       	pop	r28
   1711a:	08 95       	ret
   1711c:	80 e0       	ldi	r24, 0x00	; 0
   1711e:	fc cf       	rjmp	.-8      	; 0x17118 <listen(unsigned char)+0x20>

00017120 <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   17120:	0f 93       	push	r16
   17122:	1f 93       	push	r17
   17124:	cf 93       	push	r28
   17126:	fb 01       	movw	r30, r22
   17128:	90 81       	ld	r25, Z
   1712a:	9f 3f       	cpi	r25, 0xFF	; 255
   1712c:	59 f4       	brne	.+22     	; 0x17144 <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   1712e:	91 81       	ldd	r25, Z+1	; 0x01
   17130:	9f 3f       	cpi	r25, 0xFF	; 255
   17132:	99 f4       	brne	.+38     	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17134:	92 81       	ldd	r25, Z+2	; 0x02
   17136:	9f 3f       	cpi	r25, 0xFF	; 255
   17138:	81 f4       	brne	.+32     	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1713a:	93 81       	ldd	r25, Z+3	; 0x03
   1713c:	9f 3f       	cpi	r25, 0xFF	; 255
   1713e:	69 f4       	brne	.+26     	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17140:	90 e0       	ldi	r25, 0x00	; 0
   17142:	1f c0       	rjmp	.+62     	; 0x17182 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   17144:	91 11       	cpse	r25, r1
   17146:	09 c0       	rjmp	.+18     	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17148:	91 81       	ldd	r25, Z+1	; 0x01
   1714a:	91 11       	cpse	r25, r1
   1714c:	06 c0       	rjmp	.+12     	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   1714e:	92 81       	ldd	r25, Z+2	; 0x02
   17150:	91 11       	cpse	r25, r1
   17152:	03 c0       	rjmp	.+6      	; 0x1715a <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   17154:	93 81       	ldd	r25, Z+3	; 0x03
   17156:	99 23       	and	r25, r25
   17158:	a1 f0       	breq	.+40     	; 0x17182 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   1715a:	41 15       	cp	r20, r1
   1715c:	51 05       	cpc	r21, r1
   1715e:	81 f3       	breq	.-32     	; 0x17140 <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   17160:	8a 01       	movw	r16, r20
   17162:	bf 01       	movw	r22, r30
   17164:	c8 2f       	mov	r28, r24
   17166:	0e 94 ef b7 	call	0x16fde	; 0x16fde <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   1716a:	b8 01       	movw	r22, r16
   1716c:	8c 2f       	mov	r24, r28
   1716e:	0e 94 27 b8 	call	0x1704e	; 0x1704e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   17172:	44 e0       	ldi	r20, 0x04	; 4
   17174:	50 e0       	ldi	r21, 0x00	; 0
   17176:	6c 2f       	mov	r22, r28
   17178:	83 e4       	ldi	r24, 0x43	; 67
   1717a:	93 e1       	ldi	r25, 0x13	; 19
   1717c:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   17180:	91 e0       	ldi	r25, 0x01	; 1
   17182:	89 2f       	mov	r24, r25
   17184:	cf 91       	pop	r28
   17186:	1f 91       	pop	r17
   17188:	0f 91       	pop	r16
   1718a:	08 95       	ret

0001718c <disconnect(unsigned char)>:
_Z10disconnecth():
   1718c:	48 e0       	ldi	r20, 0x08	; 8
   1718e:	50 e0       	ldi	r21, 0x00	; 0
   17190:	68 2f       	mov	r22, r24
   17192:	83 e4       	ldi	r24, 0x43	; 67
   17194:	93 e1       	ldi	r25, 0x13	; 19
   17196:	0c 94 2c bc 	jmp	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>

0001719a <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   1719a:	cf 92       	push	r12
   1719c:	df 92       	push	r13
   1719e:	ef 92       	push	r14
   171a0:	ff 92       	push	r15
   171a2:	0f 93       	push	r16
   171a4:	1f 93       	push	r17
   171a6:	cf 93       	push	r28
   171a8:	c8 2f       	mov	r28, r24
   171aa:	7b 01       	movw	r14, r22
   171ac:	8a 01       	movw	r16, r20
   171ae:	41 30       	cpi	r20, 0x01	; 1
   171b0:	58 40       	sbci	r21, 0x08	; 8
   171b2:	10 f0       	brcs	.+4      	; 0x171b8 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   171b4:	00 e0       	ldi	r16, 0x00	; 0
   171b6:	18 e0       	ldi	r17, 0x08	; 8
   171b8:	6c 2f       	mov	r22, r28
   171ba:	83 e4       	ldi	r24, 0x43	; 67
   171bc:	93 e1       	ldi	r25, 0x13	; 19
   171be:	0e 94 f1 ba 	call	0x175e2	; 0x175e2 <W5500Class::getTXFreeSize(unsigned char)>
   171c2:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   171c4:	63 e0       	ldi	r22, 0x03	; 3
   171c6:	70 e0       	ldi	r23, 0x00	; 0
   171c8:	8c 2f       	mov	r24, r28
   171ca:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   171ce:	87 31       	cpi	r24, 0x17	; 23
   171d0:	11 f0       	breq	.+4      	; 0x171d6 <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   171d2:	8c 31       	cpi	r24, 0x1C	; 28
   171d4:	59 f5       	brne	.+86     	; 0x1722c <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   171d6:	c0 16       	cp	r12, r16
   171d8:	d1 06       	cpc	r13, r17
   171da:	70 f3       	brcs	.-36     	; 0x171b8 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   171dc:	98 01       	movw	r18, r16
   171de:	a7 01       	movw	r20, r14
   171e0:	6c 2f       	mov	r22, r28
   171e2:	83 e4       	ldi	r24, 0x43	; 67
   171e4:	93 e1       	ldi	r25, 0x13	; 19
   171e6:	0e 94 81 bb 	call	0x17702	; 0x17702 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   171ea:	40 e2       	ldi	r20, 0x20	; 32
   171ec:	50 e0       	ldi	r21, 0x00	; 0
   171ee:	6c 2f       	mov	r22, r28
   171f0:	83 e4       	ldi	r24, 0x43	; 67
   171f2:	93 e1       	ldi	r25, 0x13	; 19
   171f4:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   171f8:	8c 2f       	mov	r24, r28
   171fa:	0e 94 04 b8 	call	0x17008	; 0x17008 <W5500Class::readSnIR(unsigned char)>
   171fe:	84 fd       	sbrc	r24, 4
   17200:	18 c0       	rjmp	.+48     	; 0x17232 <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   17202:	63 e0       	ldi	r22, 0x03	; 3
   17204:	70 e0       	ldi	r23, 0x00	; 0
   17206:	8c 2f       	mov	r24, r28
   17208:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   1720c:	81 11       	cpse	r24, r1
   1720e:	f4 cf       	rjmp	.-24     	; 0x171f8 <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   17210:	8c 2f       	mov	r24, r28
   17212:	0e 94 38 b8 	call	0x17070	; 0x17070 <close(unsigned char)>
   17216:	10 e0       	ldi	r17, 0x00	; 0
   17218:	00 e0       	ldi	r16, 0x00	; 0
   1721a:	c8 01       	movw	r24, r16
   1721c:	cf 91       	pop	r28
   1721e:	1f 91       	pop	r17
   17220:	0f 91       	pop	r16
   17222:	ff 90       	pop	r15
   17224:	ef 90       	pop	r14
   17226:	df 90       	pop	r13
   17228:	cf 90       	pop	r12
   1722a:	08 95       	ret
   1722c:	10 e0       	ldi	r17, 0x00	; 0
   1722e:	00 e0       	ldi	r16, 0x00	; 0
   17230:	d5 cf       	rjmp	.-86     	; 0x171dc <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   17232:	60 e1       	ldi	r22, 0x10	; 16
   17234:	8c 2f       	mov	r24, r28
   17236:	0e 94 22 b8 	call	0x17044	; 0x17044 <W5500Class::writeSnIR(unsigned char, unsigned char)>
   1723a:	ef cf       	rjmp	.-34     	; 0x1721a <send(unsigned char, unsigned char const*, unsigned int)+0x80>

0001723c <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   1723c:	cf 92       	push	r12
   1723e:	df 92       	push	r13
   17240:	ef 92       	push	r14
   17242:	ff 92       	push	r15
   17244:	0f 93       	push	r16
   17246:	1f 93       	push	r17
   17248:	cf 93       	push	r28
   1724a:	df 93       	push	r29
   1724c:	18 2f       	mov	r17, r24
   1724e:	6b 01       	movw	r12, r22
   17250:	7a 01       	movw	r14, r20
   17252:	68 2f       	mov	r22, r24
   17254:	83 e4       	ldi	r24, 0x43	; 67
   17256:	93 e1       	ldi	r25, 0x13	; 19
   17258:	0e 94 25 bb 	call	0x1764a	; 0x1764a <W5500Class::getRXReceivedSize(unsigned char)>
   1725c:	ec 01       	movw	r28, r24
   1725e:	00 97       	sbiw	r24, 0x00	; 0
   17260:	e1 f4       	brne	.+56     	; 0x1729a <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   17262:	63 e0       	ldi	r22, 0x03	; 3
   17264:	70 e0       	ldi	r23, 0x00	; 0
   17266:	81 2f       	mov	r24, r17
   17268:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   1726c:	84 31       	cpi	r24, 0x14	; 20
   1726e:	59 f0       	breq	.+22     	; 0x17286 <recv(unsigned char, unsigned char*, int)+0x4a>
   17270:	88 23       	and	r24, r24
   17272:	49 f0       	breq	.+18     	; 0x17286 <recv(unsigned char, unsigned char*, int)+0x4a>
   17274:	c1 e0       	ldi	r28, 0x01	; 1
   17276:	d0 e0       	ldi	r29, 0x00	; 0
   17278:	8c 31       	cpi	r24, 0x1C	; 28
   1727a:	11 f4       	brne	.+4      	; 0x17280 <recv(unsigned char, unsigned char*, int)+0x44>
   1727c:	d0 e0       	ldi	r29, 0x00	; 0
   1727e:	c0 e0       	ldi	r28, 0x00	; 0
   17280:	d1 95       	neg	r29
   17282:	c1 95       	neg	r28
   17284:	d1 09       	sbc	r29, r1
   17286:	ce 01       	movw	r24, r28
   17288:	df 91       	pop	r29
   1728a:	cf 91       	pop	r28
   1728c:	1f 91       	pop	r17
   1728e:	0f 91       	pop	r16
   17290:	ff 90       	pop	r15
   17292:	ef 90       	pop	r14
   17294:	df 90       	pop	r13
   17296:	cf 90       	pop	r12
   17298:	08 95       	ret
   1729a:	e8 16       	cp	r14, r24
   1729c:	f9 06       	cpc	r15, r25
   1729e:	0c f4       	brge	.+2      	; 0x172a2 <recv(unsigned char, unsigned char*, int)+0x66>
   172a0:	e7 01       	movw	r28, r14
   172a2:	1c 16       	cp	r1, r28
   172a4:	1d 06       	cpc	r1, r29
   172a6:	7c f7       	brge	.-34     	; 0x17286 <recv(unsigned char, unsigned char*, int)+0x4a>
   172a8:	00 e0       	ldi	r16, 0x00	; 0
   172aa:	9e 01       	movw	r18, r28
   172ac:	a6 01       	movw	r20, r12
   172ae:	61 2f       	mov	r22, r17
   172b0:	83 e4       	ldi	r24, 0x43	; 67
   172b2:	93 e1       	ldi	r25, 0x13	; 19
   172b4:	0e 94 db bb 	call	0x177b6	; 0x177b6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   172b8:	40 e4       	ldi	r20, 0x40	; 64
   172ba:	50 e0       	ldi	r21, 0x00	; 0
   172bc:	61 2f       	mov	r22, r17
   172be:	83 e4       	ldi	r24, 0x43	; 67
   172c0:	93 e1       	ldi	r25, 0x13	; 19
   172c2:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   172c6:	df cf       	rjmp	.-66     	; 0x17286 <recv(unsigned char, unsigned char*, int)+0x4a>

000172c8 <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   172c8:	0f 93       	push	r16
   172ca:	ab 01       	movw	r20, r22
   172cc:	01 e0       	ldi	r16, 0x01	; 1
   172ce:	21 e0       	ldi	r18, 0x01	; 1
   172d0:	30 e0       	ldi	r19, 0x00	; 0
   172d2:	68 2f       	mov	r22, r24
   172d4:	83 e4       	ldi	r24, 0x43	; 67
   172d6:	93 e1       	ldi	r25, 0x13	; 19
   172d8:	0e 94 db bb 	call	0x177b6	; 0x177b6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   172dc:	81 e0       	ldi	r24, 0x01	; 1
   172de:	90 e0       	ldi	r25, 0x00	; 0
   172e0:	0f 91       	pop	r16
   172e2:	08 95       	ret

000172e4 <flush(unsigned char)>:
_Z5flushh():
   172e4:	08 95       	ret

000172e6 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   172e6:	af 92       	push	r10
   172e8:	bf 92       	push	r11
   172ea:	cf 92       	push	r12
   172ec:	df 92       	push	r13
   172ee:	ff 92       	push	r15
   172f0:	0f 93       	push	r16
   172f2:	1f 93       	push	r17
   172f4:	cf 93       	push	r28
   172f6:	df 93       	push	r29
   172f8:	f8 2e       	mov	r15, r24
   172fa:	6b 01       	movw	r12, r22
   172fc:	5a 01       	movw	r10, r20
   172fe:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   17300:	68 2f       	mov	r22, r24
   17302:	83 e4       	ldi	r24, 0x43	; 67
   17304:	93 e1       	ldi	r25, 0x13	; 19
   17306:	0e 94 f1 ba 	call	0x175e2	; 0x175e2 <W5500Class::getTXFreeSize(unsigned char)>
   1730a:	8c 17       	cp	r24, r28
   1730c:	9d 07       	cpc	r25, r29
   1730e:	30 f4       	brcc	.+12     	; 0x1731c <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   17310:	6f 2d       	mov	r22, r15
   17312:	83 e4       	ldi	r24, 0x43	; 67
   17314:	93 e1       	ldi	r25, 0x13	; 19
   17316:	0e 94 f1 ba 	call	0x175e2	; 0x175e2 <W5500Class::getTXFreeSize(unsigned char)>
   1731a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   1731c:	8e 01       	movw	r16, r28
   1731e:	95 01       	movw	r18, r10
   17320:	a6 01       	movw	r20, r12
   17322:	6f 2d       	mov	r22, r15
   17324:	83 e4       	ldi	r24, 0x43	; 67
   17326:	93 e1       	ldi	r25, 0x13	; 19
   17328:	0e 94 41 bb 	call	0x17682	; 0x17682 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   1732c:	ce 01       	movw	r24, r28
   1732e:	df 91       	pop	r29
   17330:	cf 91       	pop	r28
   17332:	1f 91       	pop	r17
   17334:	0f 91       	pop	r16
   17336:	ff 90       	pop	r15
   17338:	df 90       	pop	r13
   1733a:	cf 90       	pop	r12
   1733c:	bf 90       	pop	r11
   1733e:	af 90       	pop	r10
   17340:	08 95       	ret

00017342 <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   17342:	0f 93       	push	r16
   17344:	1f 93       	push	r17
   17346:	cf 93       	push	r28
   17348:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   1734a:	90 81       	ld	r25, Z
   1734c:	91 11       	cpse	r25, r1
   1734e:	09 c0       	rjmp	.+18     	; 0x17362 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   17350:	91 81       	ldd	r25, Z+1	; 0x01
   17352:	91 11       	cpse	r25, r1
   17354:	06 c0       	rjmp	.+12     	; 0x17362 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   17356:	92 81       	ldd	r25, Z+2	; 0x02
   17358:	91 11       	cpse	r25, r1
   1735a:	03 c0       	rjmp	.+6      	; 0x17362 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   1735c:	93 81       	ldd	r25, Z+3	; 0x03
   1735e:	99 23       	and	r25, r25
   17360:	91 f0       	breq	.+36     	; 0x17386 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   17362:	41 15       	cp	r20, r1
   17364:	51 05       	cpc	r21, r1
   17366:	79 f0       	breq	.+30     	; 0x17386 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   17368:	8a 01       	movw	r16, r20
   1736a:	bf 01       	movw	r22, r30
   1736c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   1736e:	0e 94 ef b7 	call	0x16fde	; 0x16fde <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   17372:	b8 01       	movw	r22, r16
   17374:	8c 2f       	mov	r24, r28
   17376:	0e 94 27 b8 	call	0x1704e	; 0x1704e <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   1737a:	81 e0       	ldi	r24, 0x01	; 1
   1737c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   1737e:	cf 91       	pop	r28
   17380:	1f 91       	pop	r17
   17382:	0f 91       	pop	r16
   17384:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   17386:	90 e0       	ldi	r25, 0x00	; 0
   17388:	80 e0       	ldi	r24, 0x00	; 0
   1738a:	f9 cf       	rjmp	.-14     	; 0x1737e <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

0001738c <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   1738c:	cf 93       	push	r28
   1738e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   17390:	40 e2       	ldi	r20, 0x20	; 32
   17392:	50 e0       	ldi	r21, 0x00	; 0
   17394:	68 2f       	mov	r22, r24
   17396:	83 e4       	ldi	r24, 0x43	; 67
   17398:	93 e1       	ldi	r25, 0x13	; 19
   1739a:	0e 94 2c bc 	call	0x17858	; 0x17858 <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   1739e:	8c 2f       	mov	r24, r28
   173a0:	0e 94 04 b8 	call	0x17008	; 0x17008 <W5500Class::readSnIR(unsigned char)>
   173a4:	84 fd       	sbrc	r24, 4
   173a6:	0d c0       	rjmp	.+26     	; 0x173c2 <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   173a8:	8c 2f       	mov	r24, r28
   173aa:	0e 94 04 b8 	call	0x17008	; 0x17008 <W5500Class::readSnIR(unsigned char)>
   173ae:	83 ff       	sbrs	r24, 3
   173b0:	f6 cf       	rjmp	.-20     	; 0x1739e <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   173b2:	68 e1       	ldi	r22, 0x18	; 24
   173b4:	8c 2f       	mov	r24, r28
   173b6:	0e 94 22 b8 	call	0x17044	; 0x17044 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   173ba:	90 e0       	ldi	r25, 0x00	; 0
   173bc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   173be:	cf 91       	pop	r28
   173c0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   173c2:	60 e1       	ldi	r22, 0x10	; 16
   173c4:	8c 2f       	mov	r24, r28
   173c6:	0e 94 22 b8 	call	0x17044	; 0x17044 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   173ca:	81 e0       	ldi	r24, 0x01	; 1
   173cc:	90 e0       	ldi	r25, 0x00	; 0
   173ce:	f7 cf       	rjmp	.-18     	; 0x173be <sendUDP(unsigned char)+0x32>

000173d0 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   173d0:	20 91 f5 12 	lds	r18, 0x12F5	; 0x8012f5 <SPIClass::interruptMode>
   173d4:	22 23       	and	r18, r18
   173d6:	81 f0       	breq	.+32     	; 0x173f8 <SPIClass::beginTransaction(SPISettings)+0x28>
   173d8:	3f b7       	in	r19, 0x3f	; 63
   173da:	f8 94       	cli
   173dc:	20 91 f5 12 	lds	r18, 0x12F5	; 0x8012f5 <SPIClass::interruptMode>
   173e0:	21 30       	cpi	r18, 0x01	; 1
   173e2:	69 f4       	brne	.+26     	; 0x173fe <SPIClass::beginTransaction(SPISettings)+0x2e>
   173e4:	2d b3       	in	r18, 0x1d	; 29
   173e6:	20 93 f3 12 	sts	0x12F3, r18	; 0x8012f3 <SPIClass::interruptSave>
   173ea:	4d b3       	in	r20, 0x1d	; 29
   173ec:	20 91 f4 12 	lds	r18, 0x12F4	; 0x8012f4 <SPIClass::interruptMask>
   173f0:	20 95       	com	r18
   173f2:	24 23       	and	r18, r20
   173f4:	2d bb       	out	0x1d, r18	; 29
   173f6:	3f bf       	out	0x3f, r19	; 63
   173f8:	8c bd       	out	0x2c, r24	; 44
   173fa:	9d bd       	out	0x2d, r25	; 45
   173fc:	08 95       	ret
   173fe:	30 93 f3 12 	sts	0x12F3, r19	; 0x8012f3 <SPIClass::interruptSave>
   17402:	fa cf       	rjmp	.-12     	; 0x173f8 <SPIClass::beginTransaction(SPISettings)+0x28>

00017404 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   17404:	8e bd       	out	0x2e, r24	; 46
   17406:	00 00       	nop
   17408:	0d b4       	in	r0, 0x2d	; 45
   1740a:	07 fe       	sbrs	r0, 7
   1740c:	fd cf       	rjmp	.-6      	; 0x17408 <SPIClass::transfer(unsigned char)+0x4>
   1740e:	8e b5       	in	r24, 0x2e	; 46
   17410:	08 95       	ret

00017412 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   17412:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <SPIClass::interruptMode>
   17416:	88 23       	and	r24, r24
   17418:	61 f0       	breq	.+24     	; 0x17432 <SPIClass::endTransaction()+0x20>
   1741a:	9f b7       	in	r25, 0x3f	; 63
   1741c:	f8 94       	cli
   1741e:	20 91 f5 12 	lds	r18, 0x12F5	; 0x8012f5 <SPIClass::interruptMode>
   17422:	80 91 f3 12 	lds	r24, 0x12F3	; 0x8012f3 <SPIClass::interruptSave>
   17426:	21 30       	cpi	r18, 0x01	; 1
   17428:	19 f4       	brne	.+6      	; 0x17430 <SPIClass::endTransaction()+0x1e>
   1742a:	8d bb       	out	0x1d, r24	; 29
   1742c:	9f bf       	out	0x3f, r25	; 63
   1742e:	08 95       	ret
   17430:	8f bf       	out	0x3f, r24	; 63
   17432:	08 95       	ret

00017434 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   17434:	60 e0       	ldi	r22, 0x00	; 0
   17436:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <SPI_CS>
   1743a:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

0001743e <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   1743e:	61 e0       	ldi	r22, 0x01	; 1
   17440:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <SPI_CS>
   17444:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>

00017448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   17448:	0f 93       	push	r16
   1744a:	1f 93       	push	r17
   1744c:	cf 93       	push	r28
   1744e:	df 93       	push	r29
   17450:	18 2f       	mov	r17, r24
   17452:	09 2f       	mov	r16, r25
   17454:	d6 2f       	mov	r29, r22
   17456:	c4 2f       	mov	r28, r20
   17458:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <wiznet_SPI_settings>
   1745c:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <wiznet_SPI_settings+0x1>
   17460:	0e 94 e8 b9 	call	0x173d0	; 0x173d0 <SPIClass::beginTransaction(SPISettings)>
   17464:	0e 94 1a ba 	call	0x17434	; 0x17434 <W5500Class::setSS()>
   17468:	80 2f       	mov	r24, r16
   1746a:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1746e:	81 2f       	mov	r24, r17
   17470:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17474:	8d 2f       	mov	r24, r29
   17476:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1747a:	8c 2f       	mov	r24, r28
   1747c:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17480:	0e 94 1f ba 	call	0x1743e	; 0x1743e <W5500Class::resetSS()>
   17484:	0e 94 09 ba 	call	0x17412	; 0x17412 <SPIClass::endTransaction()>
   17488:	81 e0       	ldi	r24, 0x01	; 1
   1748a:	df 91       	pop	r29
   1748c:	cf 91       	pop	r28
   1748e:	1f 91       	pop	r17
   17490:	0f 91       	pop	r16
   17492:	08 95       	ret

00017494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   17494:	df 92       	push	r13
   17496:	ef 92       	push	r14
   17498:	ff 92       	push	r15
   1749a:	0f 93       	push	r16
   1749c:	1f 93       	push	r17
   1749e:	cf 93       	push	r28
   174a0:	df 93       	push	r29
   174a2:	d8 2f       	mov	r29, r24
   174a4:	d9 2e       	mov	r13, r25
   174a6:	c6 2f       	mov	r28, r22
   174a8:	7a 01       	movw	r14, r20
   174aa:	89 01       	movw	r16, r18
   174ac:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <wiznet_SPI_settings>
   174b0:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <wiznet_SPI_settings+0x1>
   174b4:	0e 94 e8 b9 	call	0x173d0	; 0x173d0 <SPIClass::beginTransaction(SPISettings)>
   174b8:	0e 94 1a ba 	call	0x17434	; 0x17434 <W5500Class::setSS()>
   174bc:	8d 2d       	mov	r24, r13
   174be:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   174c2:	8d 2f       	mov	r24, r29
   174c4:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   174c8:	8c 2f       	mov	r24, r28
   174ca:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   174ce:	e7 01       	movw	r28, r14
   174d0:	e0 0e       	add	r14, r16
   174d2:	f1 1e       	adc	r15, r17
   174d4:	ce 15       	cp	r28, r14
   174d6:	df 05       	cpc	r29, r15
   174d8:	21 f0       	breq	.+8      	; 0x174e2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   174da:	89 91       	ld	r24, Y+
   174dc:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   174e0:	f9 cf       	rjmp	.-14     	; 0x174d4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   174e2:	0e 94 1f ba 	call	0x1743e	; 0x1743e <W5500Class::resetSS()>
   174e6:	0e 94 09 ba 	call	0x17412	; 0x17412 <SPIClass::endTransaction()>
   174ea:	c8 01       	movw	r24, r16
   174ec:	df 91       	pop	r29
   174ee:	cf 91       	pop	r28
   174f0:	1f 91       	pop	r17
   174f2:	0f 91       	pop	r16
   174f4:	ff 90       	pop	r15
   174f6:	ef 90       	pop	r14
   174f8:	df 90       	pop	r13
   174fa:	08 95       	ret

000174fc <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   174fc:	1f 93       	push	r17
   174fe:	cf 93       	push	r28
   17500:	df 93       	push	r29
   17502:	d8 2f       	mov	r29, r24
   17504:	19 2f       	mov	r17, r25
   17506:	c6 2f       	mov	r28, r22
   17508:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <wiznet_SPI_settings>
   1750c:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <wiznet_SPI_settings+0x1>
   17510:	0e 94 e8 b9 	call	0x173d0	; 0x173d0 <SPIClass::beginTransaction(SPISettings)>
   17514:	0e 94 1a ba 	call	0x17434	; 0x17434 <W5500Class::setSS()>
   17518:	81 2f       	mov	r24, r17
   1751a:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1751e:	8d 2f       	mov	r24, r29
   17520:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17524:	8c 2f       	mov	r24, r28
   17526:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1752a:	80 e0       	ldi	r24, 0x00	; 0
   1752c:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17530:	c8 2f       	mov	r28, r24
   17532:	0e 94 1f ba 	call	0x1743e	; 0x1743e <W5500Class::resetSS()>
   17536:	0e 94 09 ba 	call	0x17412	; 0x17412 <SPIClass::endTransaction()>
   1753a:	8c 2f       	mov	r24, r28
   1753c:	df 91       	pop	r29
   1753e:	cf 91       	pop	r28
   17540:	1f 91       	pop	r17
   17542:	08 95       	ret

00017544 <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   17544:	0f 93       	push	r16
   17546:	1f 93       	push	r17
   17548:	cf 93       	push	r28
   1754a:	60 93 40 13 	sts	0x1340, r22	; 0x801340 <SPI_CS>
   1754e:	68 ee       	ldi	r22, 0xE8	; 232
   17550:	73 e0       	ldi	r23, 0x03	; 3
   17552:	80 e0       	ldi	r24, 0x00	; 0
   17554:	90 e0       	ldi	r25, 0x00	; 0
   17556:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
_ZN10W5500Class6initSSEv():
   1755a:	61 e0       	ldi	r22, 0x01	; 1
   1755c:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <SPI_CS>
   17560:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
_ZN10W5500Class4initEh():
   17564:	0e 94 e0 ac 	call	0x159c0	; 0x159c0 <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   17568:	60 e0       	ldi	r22, 0x00	; 0
   1756a:	90 e0       	ldi	r25, 0x00	; 0
   1756c:	80 e0       	ldi	r24, 0x00	; 0
   1756e:	0e 94 7e ba 	call	0x174fc	; 0x174fc <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   17572:	48 2f       	mov	r20, r24
   17574:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   17576:	64 e0       	ldi	r22, 0x04	; 4
   17578:	90 e0       	ldi	r25, 0x00	; 0
   1757a:	80 e0       	ldi	r24, 0x00	; 0
   1757c:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   17580:	cc e0       	ldi	r28, 0x0C	; 12
   17582:	08 e0       	ldi	r16, 0x08	; 8
   17584:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   17586:	42 e0       	ldi	r20, 0x02	; 2
   17588:	6c 2f       	mov	r22, r28
   1758a:	8e e1       	ldi	r24, 0x1E	; 30
   1758c:	90 e0       	ldi	r25, 0x00	; 0
   1758e:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   17592:	42 e0       	ldi	r20, 0x02	; 2
   17594:	6c 2f       	mov	r22, r28
   17596:	8f e1       	ldi	r24, 0x1F	; 31
   17598:	90 e0       	ldi	r25, 0x00	; 0
   1759a:	0e 94 24 ba 	call	0x17448	; 0x17448 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1759e:	01 50       	subi	r16, 0x01	; 1
   175a0:	11 09       	sbc	r17, r1
   175a2:	c0 5e       	subi	r28, 0xE0	; 224
   175a4:	01 15       	cp	r16, r1
   175a6:	11 05       	cpc	r17, r1
   175a8:	71 f7       	brne	.-36     	; 0x17586 <W5500Class::init(unsigned char)+0x42>
   175aa:	cf 91       	pop	r28
   175ac:	1f 91       	pop	r17
   175ae:	0f 91       	pop	r16
   175b0:	08 95       	ret

000175b2 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   175b2:	1f 93       	push	r17
   175b4:	cf 93       	push	r28
   175b6:	df 93       	push	r29
   175b8:	18 2f       	mov	r17, r24
   175ba:	60 e2       	ldi	r22, 0x20	; 32
   175bc:	70 e0       	ldi	r23, 0x00	; 0
   175be:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   175c2:	c8 2f       	mov	r28, r24
   175c4:	d0 e0       	ldi	r29, 0x00	; 0
   175c6:	dc 2f       	mov	r29, r28
   175c8:	cc 27       	eor	r28, r28
   175ca:	61 e2       	ldi	r22, 0x21	; 33
   175cc:	70 e0       	ldi	r23, 0x00	; 0
   175ce:	81 2f       	mov	r24, r17
   175d0:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   175d4:	8c 0f       	add	r24, r28
   175d6:	9d 2f       	mov	r25, r29
   175d8:	91 1d       	adc	r25, r1
   175da:	df 91       	pop	r29
   175dc:	cf 91       	pop	r28
   175de:	1f 91       	pop	r17
   175e0:	08 95       	ret

000175e2 <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   175e2:	ff 92       	push	r15
   175e4:	0f 93       	push	r16
   175e6:	1f 93       	push	r17
   175e8:	cf 93       	push	r28
   175ea:	df 93       	push	r29
   175ec:	f6 2e       	mov	r15, r22
   175ee:	d0 e0       	ldi	r29, 0x00	; 0
   175f0:	c0 e0       	ldi	r28, 0x00	; 0
   175f2:	8f 2d       	mov	r24, r15
   175f4:	0e 94 d9 ba 	call	0x175b2	; 0x175b2 <W5500Class::readSnTX_FSR(unsigned char)>
   175f8:	8c 01       	movw	r16, r24
   175fa:	89 2b       	or	r24, r25
   175fc:	21 f0       	breq	.+8      	; 0x17606 <W5500Class::getTXFreeSize(unsigned char)+0x24>
   175fe:	8f 2d       	mov	r24, r15
   17600:	0e 94 d9 ba 	call	0x175b2	; 0x175b2 <W5500Class::readSnTX_FSR(unsigned char)>
   17604:	ec 01       	movw	r28, r24
   17606:	c0 17       	cp	r28, r16
   17608:	d1 07       	cpc	r29, r17
   1760a:	99 f7       	brne	.-26     	; 0x175f2 <W5500Class::getTXFreeSize(unsigned char)+0x10>
   1760c:	ce 01       	movw	r24, r28
   1760e:	df 91       	pop	r29
   17610:	cf 91       	pop	r28
   17612:	1f 91       	pop	r17
   17614:	0f 91       	pop	r16
   17616:	ff 90       	pop	r15
   17618:	08 95       	ret

0001761a <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   1761a:	1f 93       	push	r17
   1761c:	cf 93       	push	r28
   1761e:	df 93       	push	r29
   17620:	18 2f       	mov	r17, r24
   17622:	66 e2       	ldi	r22, 0x26	; 38
   17624:	70 e0       	ldi	r23, 0x00	; 0
   17626:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   1762a:	c8 2f       	mov	r28, r24
   1762c:	d0 e0       	ldi	r29, 0x00	; 0
   1762e:	dc 2f       	mov	r29, r28
   17630:	cc 27       	eor	r28, r28
   17632:	67 e2       	ldi	r22, 0x27	; 39
   17634:	70 e0       	ldi	r23, 0x00	; 0
   17636:	81 2f       	mov	r24, r17
   17638:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   1763c:	8c 0f       	add	r24, r28
   1763e:	9d 2f       	mov	r25, r29
   17640:	91 1d       	adc	r25, r1
   17642:	df 91       	pop	r29
   17644:	cf 91       	pop	r28
   17646:	1f 91       	pop	r17
   17648:	08 95       	ret

0001764a <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   1764a:	ff 92       	push	r15
   1764c:	0f 93       	push	r16
   1764e:	1f 93       	push	r17
   17650:	cf 93       	push	r28
   17652:	df 93       	push	r29
   17654:	f6 2e       	mov	r15, r22
   17656:	d0 e0       	ldi	r29, 0x00	; 0
   17658:	c0 e0       	ldi	r28, 0x00	; 0
   1765a:	8f 2d       	mov	r24, r15
   1765c:	0e 94 0d bb 	call	0x1761a	; 0x1761a <W5500Class::readSnRX_RSR(unsigned char)>
   17660:	8c 01       	movw	r16, r24
   17662:	89 2b       	or	r24, r25
   17664:	21 f0       	breq	.+8      	; 0x1766e <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   17666:	8f 2d       	mov	r24, r15
   17668:	0e 94 0d bb 	call	0x1761a	; 0x1761a <W5500Class::readSnRX_RSR(unsigned char)>
   1766c:	ec 01       	movw	r28, r24
   1766e:	c0 17       	cp	r28, r16
   17670:	d1 07       	cpc	r29, r17
   17672:	99 f7       	brne	.-26     	; 0x1765a <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   17674:	ce 01       	movw	r24, r28
   17676:	df 91       	pop	r29
   17678:	cf 91       	pop	r28
   1767a:	1f 91       	pop	r17
   1767c:	0f 91       	pop	r16
   1767e:	ff 90       	pop	r15
   17680:	08 95       	ret

00017682 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   17682:	bf 92       	push	r11
   17684:	cf 92       	push	r12
   17686:	df 92       	push	r13
   17688:	ef 92       	push	r14
   1768a:	ff 92       	push	r15
   1768c:	0f 93       	push	r16
   1768e:	1f 93       	push	r17
   17690:	cf 93       	push	r28
   17692:	df 93       	push	r29
   17694:	b6 2e       	mov	r11, r22
   17696:	7a 01       	movw	r14, r20
   17698:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   1769a:	64 e2       	ldi	r22, 0x24	; 36
   1769c:	70 e0       	ldi	r23, 0x00	; 0
   1769e:	8b 2d       	mov	r24, r11
   176a0:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   176a4:	c8 2f       	mov	r28, r24
   176a6:	65 e2       	ldi	r22, 0x25	; 37
   176a8:	70 e0       	ldi	r23, 0x00	; 0
   176aa:	8b 2d       	mov	r24, r11
   176ac:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   176b0:	d0 e0       	ldi	r29, 0x00	; 0
   176b2:	dc 2f       	mov	r29, r28
   176b4:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   176b6:	8e 0d       	add	r24, r14
   176b8:	9f 2d       	mov	r25, r15
   176ba:	91 1d       	adc	r25, r1
   176bc:	c8 0f       	add	r28, r24
   176be:	d9 1f       	adc	r29, r25
   176c0:	6b 2d       	mov	r22, r11
   176c2:	62 95       	swap	r22
   176c4:	66 0f       	add	r22, r22
   176c6:	60 7e       	andi	r22, 0xE0	; 224
   176c8:	6c 5e       	subi	r22, 0xEC	; 236
   176ca:	98 01       	movw	r18, r16
   176cc:	a6 01       	movw	r20, r12
   176ce:	ce 01       	movw	r24, r28
   176d0:	0e 94 4a ba 	call	0x17494	; 0x17494 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   176d4:	0c 0f       	add	r16, r28
   176d6:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   176d8:	41 2f       	mov	r20, r17
   176da:	64 e2       	ldi	r22, 0x24	; 36
   176dc:	70 e0       	ldi	r23, 0x00	; 0
   176de:	8b 2d       	mov	r24, r11
   176e0:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   176e4:	40 2f       	mov	r20, r16
   176e6:	65 e2       	ldi	r22, 0x25	; 37
   176e8:	70 e0       	ldi	r23, 0x00	; 0
   176ea:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   176ec:	df 91       	pop	r29
   176ee:	cf 91       	pop	r28
   176f0:	1f 91       	pop	r17
   176f2:	0f 91       	pop	r16
   176f4:	ff 90       	pop	r15
   176f6:	ef 90       	pop	r14
   176f8:	df 90       	pop	r13
   176fa:	cf 90       	pop	r12
   176fc:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   176fe:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00017702 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   17702:	0f 93       	push	r16
   17704:	1f 93       	push	r17
   17706:	89 01       	movw	r16, r18
   17708:	9a 01       	movw	r18, r20
   1770a:	50 e0       	ldi	r21, 0x00	; 0
   1770c:	40 e0       	ldi	r20, 0x00	; 0
   1770e:	0e 94 41 bb 	call	0x17682	; 0x17682 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   17712:	1f 91       	pop	r17
   17714:	0f 91       	pop	r16
   17716:	08 95       	ret

00017718 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   17718:	df 92       	push	r13
   1771a:	ef 92       	push	r14
   1771c:	ff 92       	push	r15
   1771e:	0f 93       	push	r16
   17720:	1f 93       	push	r17
   17722:	cf 93       	push	r28
   17724:	df 93       	push	r29
   17726:	d8 2f       	mov	r29, r24
   17728:	d9 2e       	mov	r13, r25
   1772a:	c6 2f       	mov	r28, r22
   1772c:	7a 01       	movw	r14, r20
   1772e:	89 01       	movw	r16, r18
   17730:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <wiznet_SPI_settings>
   17734:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <wiznet_SPI_settings+0x1>
   17738:	0e 94 e8 b9 	call	0x173d0	; 0x173d0 <SPIClass::beginTransaction(SPISettings)>
   1773c:	0e 94 1a ba 	call	0x17434	; 0x17434 <W5500Class::setSS()>
   17740:	8d 2d       	mov	r24, r13
   17742:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17746:	8d 2f       	mov	r24, r29
   17748:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1774c:	8c 2f       	mov	r24, r28
   1774e:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17752:	e7 01       	movw	r28, r14
   17754:	e0 0e       	add	r14, r16
   17756:	f1 1e       	adc	r15, r17
   17758:	ce 15       	cp	r28, r14
   1775a:	df 05       	cpc	r29, r15
   1775c:	29 f0       	breq	.+10     	; 0x17768 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   1775e:	80 e0       	ldi	r24, 0x00	; 0
   17760:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   17764:	89 93       	st	Y+, r24
   17766:	f8 cf       	rjmp	.-16     	; 0x17758 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   17768:	0e 94 1f ba 	call	0x1743e	; 0x1743e <W5500Class::resetSS()>
   1776c:	0e 94 09 ba 	call	0x17412	; 0x17412 <SPIClass::endTransaction()>
   17770:	c8 01       	movw	r24, r16
   17772:	df 91       	pop	r29
   17774:	cf 91       	pop	r28
   17776:	1f 91       	pop	r17
   17778:	0f 91       	pop	r16
   1777a:	ff 90       	pop	r15
   1777c:	ef 90       	pop	r14
   1777e:	df 90       	pop	r13
   17780:	08 95       	ret

00017782 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   17782:	0f 93       	push	r16
   17784:	1f 93       	push	r17
   17786:	cf 93       	push	r28
   17788:	df 93       	push	r29
   1778a:	1f 92       	push	r1
   1778c:	1f 92       	push	r1
   1778e:	cd b7       	in	r28, 0x3d	; 61
   17790:	de b7       	in	r29, 0x3e	; 62
   17792:	5a 83       	std	Y+2, r21	; 0x02
   17794:	49 83       	std	Y+1, r20	; 0x01
   17796:	a9 01       	movw	r20, r18
   17798:	98 01       	movw	r18, r16
   1779a:	89 81       	ldd	r24, Y+1	; 0x01
   1779c:	9a 81       	ldd	r25, Y+2	; 0x02
   1779e:	62 95       	swap	r22
   177a0:	66 0f       	add	r22, r22
   177a2:	60 7e       	andi	r22, 0xE0	; 224
   177a4:	68 5e       	subi	r22, 0xE8	; 232
   177a6:	0f 90       	pop	r0
   177a8:	0f 90       	pop	r0
   177aa:	df 91       	pop	r29
   177ac:	cf 91       	pop	r28
   177ae:	1f 91       	pop	r17
   177b0:	0f 91       	pop	r16
   177b2:	0c 94 8c bb 	jmp	0x17718	; 0x17718 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

000177b6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   177b6:	8f 92       	push	r8
   177b8:	9f 92       	push	r9
   177ba:	af 92       	push	r10
   177bc:	bf 92       	push	r11
   177be:	cf 92       	push	r12
   177c0:	df 92       	push	r13
   177c2:	ef 92       	push	r14
   177c4:	ff 92       	push	r15
   177c6:	0f 93       	push	r16
   177c8:	1f 93       	push	r17
   177ca:	cf 93       	push	r28
   177cc:	df 93       	push	r29
   177ce:	6c 01       	movw	r12, r24
   177d0:	96 2e       	mov	r9, r22
   177d2:	5a 01       	movw	r10, r20
   177d4:	79 01       	movw	r14, r18
   177d6:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   177d8:	68 e2       	ldi	r22, 0x28	; 40
   177da:	70 e0       	ldi	r23, 0x00	; 0
   177dc:	89 2d       	mov	r24, r9
   177de:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   177e2:	c8 2f       	mov	r28, r24
   177e4:	d0 e0       	ldi	r29, 0x00	; 0
   177e6:	dc 2f       	mov	r29, r28
   177e8:	cc 27       	eor	r28, r28
   177ea:	69 e2       	ldi	r22, 0x29	; 41
   177ec:	70 e0       	ldi	r23, 0x00	; 0
   177ee:	89 2d       	mov	r24, r9
   177f0:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
   177f4:	c8 0f       	add	r28, r24
   177f6:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   177f8:	87 01       	movw	r16, r14
   177fa:	95 01       	movw	r18, r10
   177fc:	ae 01       	movw	r20, r28
   177fe:	69 2d       	mov	r22, r9
   17800:	c6 01       	movw	r24, r12
   17802:	0e 94 c1 bb 	call	0x17782	; 0x17782 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   17806:	81 10       	cpse	r8, r1
   17808:	1a c0       	rjmp	.+52     	; 0x1783e <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   1780a:	ce 0d       	add	r28, r14
   1780c:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   1780e:	4d 2f       	mov	r20, r29
   17810:	68 e2       	ldi	r22, 0x28	; 40
   17812:	70 e0       	ldi	r23, 0x00	; 0
   17814:	89 2d       	mov	r24, r9
   17816:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1781a:	4c 2f       	mov	r20, r28
   1781c:	69 e2       	ldi	r22, 0x29	; 41
   1781e:	70 e0       	ldi	r23, 0x00	; 0
   17820:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   17822:	df 91       	pop	r29
   17824:	cf 91       	pop	r28
   17826:	1f 91       	pop	r17
   17828:	0f 91       	pop	r16
   1782a:	ff 90       	pop	r15
   1782c:	ef 90       	pop	r14
   1782e:	df 90       	pop	r13
   17830:	cf 90       	pop	r12
   17832:	bf 90       	pop	r11
   17834:	af 90       	pop	r10
   17836:	9f 90       	pop	r9
   17838:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   1783a:	0c 94 08 b8 	jmp	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   1783e:	df 91       	pop	r29
   17840:	cf 91       	pop	r28
   17842:	1f 91       	pop	r17
   17844:	0f 91       	pop	r16
   17846:	ff 90       	pop	r15
   17848:	ef 90       	pop	r14
   1784a:	df 90       	pop	r13
   1784c:	cf 90       	pop	r12
   1784e:	bf 90       	pop	r11
   17850:	af 90       	pop	r10
   17852:	9f 90       	pop	r9
   17854:	8f 90       	pop	r8
   17856:	08 95       	ret

00017858 <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17858:	cf 93       	push	r28
   1785a:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   1785c:	61 e0       	ldi	r22, 0x01	; 1
   1785e:	70 e0       	ldi	r23, 0x00	; 0
   17860:	8c 2f       	mov	r24, r28
   17862:	0e 94 08 b8 	call	0x17010	; 0x17010 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   17866:	61 e0       	ldi	r22, 0x01	; 1
   17868:	70 e0       	ldi	r23, 0x00	; 0
   1786a:	8c 2f       	mov	r24, r28
   1786c:	0e 94 fb b7 	call	0x16ff6	; 0x16ff6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   17870:	81 11       	cpse	r24, r1
   17872:	f9 cf       	rjmp	.-14     	; 0x17866 <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   17874:	cf 91       	pop	r28
   17876:	08 95       	ret

00017878 <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   17878:	e1 e4       	ldi	r30, 0x41	; 65
   1787a:	f3 e1       	ldi	r31, 0x13	; 19
   1787c:	80 e5       	ldi	r24, 0x50	; 80
   1787e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   17880:	81 e0       	ldi	r24, 0x01	; 1
   17882:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   17884:	08 95       	ret

00017886 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   17886:	cf 92       	push	r12
   17888:	df 92       	push	r13
   1788a:	ef 92       	push	r14
   1788c:	ff 92       	push	r15
   1788e:	0f 93       	push	r16
   17890:	1f 93       	push	r17
   17892:	cf 93       	push	r28
   17894:	df 93       	push	r29
   17896:	00 d0       	rcall	.+0      	; 0x17898 <EEPROMreadFloat(unsigned int)+0x12>
   17898:	1f 92       	push	r1
   1789a:	cd b7       	in	r28, 0x3d	; 61
   1789c:	de b7       	in	r29, 0x3e	; 62
   1789e:	7e 01       	movw	r14, r28
   178a0:	25 e0       	ldi	r18, 0x05	; 5
   178a2:	e2 0e       	add	r14, r18
   178a4:	f1 1c       	adc	r15, r1
   178a6:	8e 01       	movw	r16, r28
   178a8:	0f 5f       	subi	r16, 0xFF	; 255
   178aa:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   178ac:	6c 01       	movw	r12, r24
   178ae:	c0 1a       	sub	r12, r16
   178b0:	d1 0a       	sbc	r13, r17
   178b2:	c6 01       	movw	r24, r12
   178b4:	80 0f       	add	r24, r16
   178b6:	91 1f       	adc	r25, r17
   178b8:	0e 94 b0 e8 	call	0x1d160	; 0x1d160 <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   178bc:	f8 01       	movw	r30, r16
   178be:	81 93       	st	Z+, r24
   178c0:	8f 01       	movw	r16, r30
   178c2:	ee 15       	cp	r30, r14
   178c4:	ff 05       	cpc	r31, r15
   178c6:	a9 f7       	brne	.-22     	; 0x178b2 <EEPROMreadFloat(unsigned int)+0x2c>
   178c8:	69 81       	ldd	r22, Y+1	; 0x01
   178ca:	7a 81       	ldd	r23, Y+2	; 0x02
   178cc:	8b 81       	ldd	r24, Y+3	; 0x03
   178ce:	9c 81       	ldd	r25, Y+4	; 0x04
   178d0:	0f 90       	pop	r0
   178d2:	0f 90       	pop	r0
   178d4:	0f 90       	pop	r0
   178d6:	0f 90       	pop	r0
   178d8:	df 91       	pop	r29
   178da:	cf 91       	pop	r28
   178dc:	1f 91       	pop	r17
   178de:	0f 91       	pop	r16
   178e0:	ff 90       	pop	r15
   178e2:	ef 90       	pop	r14
   178e4:	df 90       	pop	r13
   178e6:	cf 90       	pop	r12
   178e8:	08 95       	ret

000178ea <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   178ea:	cf 92       	push	r12
   178ec:	df 92       	push	r13
   178ee:	ef 92       	push	r14
   178f0:	ff 92       	push	r15
   178f2:	0f 93       	push	r16
   178f4:	1f 93       	push	r17
   178f6:	cf 93       	push	r28
   178f8:	df 93       	push	r29
   178fa:	00 d0       	rcall	.+0      	; 0x178fc <EEPROMwriteFloat(unsigned int, float)+0x12>
   178fc:	1f 92       	push	r1
   178fe:	cd b7       	in	r28, 0x3d	; 61
   17900:	de b7       	in	r29, 0x3e	; 62
   17902:	6c 01       	movw	r12, r24
   17904:	49 83       	std	Y+1, r20	; 0x01
   17906:	5a 83       	std	Y+2, r21	; 0x02
   17908:	6b 83       	std	Y+3, r22	; 0x03
   1790a:	7c 83       	std	Y+4, r23	; 0x04
   1790c:	ce 01       	movw	r24, r28
   1790e:	01 96       	adiw	r24, 0x01	; 1
   17910:	7c 01       	movw	r14, r24
   17912:	10 e0       	ldi	r17, 0x00	; 0
   17914:	00 e0       	ldi	r16, 0x00	; 0
   17916:	f7 01       	movw	r30, r14
   17918:	61 91       	ld	r22, Z+
   1791a:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   1791c:	c8 01       	movw	r24, r16
   1791e:	8c 0d       	add	r24, r12
   17920:	9d 1d       	adc	r25, r13
   17922:	0e 94 b8 e8 	call	0x1d170	; 0x1d170 <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   17926:	0f 5f       	subi	r16, 0xFF	; 255
   17928:	1f 4f       	sbci	r17, 0xFF	; 255
   1792a:	04 30       	cpi	r16, 0x04	; 4
   1792c:	11 05       	cpc	r17, r1
   1792e:	99 f7       	brne	.-26     	; 0x17916 <EEPROMwriteFloat(unsigned int, float)+0x2c>
   17930:	0f 90       	pop	r0
   17932:	0f 90       	pop	r0
   17934:	0f 90       	pop	r0
   17936:	0f 90       	pop	r0
   17938:	df 91       	pop	r29
   1793a:	cf 91       	pop	r28
   1793c:	1f 91       	pop	r17
   1793e:	0f 91       	pop	r16
   17940:	ff 90       	pop	r15
   17942:	ef 90       	pop	r14
   17944:	df 90       	pop	r13
   17946:	cf 90       	pop	r12
   17948:	08 95       	ret

0001794a <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   1794a:	0e 94 27 db 	call	0x1b64e	; 0x1b64e <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   1794e:	cb 01       	movw	r24, r22
   17950:	08 95       	ret

00017952 <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   17952:	8f 92       	push	r8
   17954:	9f 92       	push	r9
   17956:	af 92       	push	r10
   17958:	bf 92       	push	r11
   1795a:	cf 92       	push	r12
   1795c:	df 92       	push	r13
   1795e:	ef 92       	push	r14
   17960:	ff 92       	push	r15
   17962:	0f 93       	push	r16
   17964:	1f 93       	push	r17
   17966:	cf 93       	push	r28
   17968:	df 93       	push	r29
   1796a:	ec 01       	movw	r28, r24
   1796c:	5a 01       	movw	r10, r20
   1796e:	49 01       	movw	r8, r18
   17970:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   17972:	c6 2e       	mov	r12, r22
   17974:	66 0f       	add	r22, r22
   17976:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 1)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   17978:	c7 01       	movw	r24, r14
   1797a:	8a 19       	sub	r24, r10
   1797c:	9b 09       	sbc	r25, r11
   1797e:	88 15       	cp	r24, r8
   17980:	99 05       	cpc	r25, r9
   17982:	b4 f4       	brge	.+44     	; 0x179b0 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   17984:	a8 01       	movw	r20, r16
   17986:	70 e0       	ldi	r23, 0x00	; 0
   17988:	60 e0       	ldi	r22, 0x00	; 0
   1798a:	ce 01       	movw	r24, r28
   1798c:	0e 94 4c df 	call	0x1be98	; 0x1be98 <strtoul>
   17990:	f7 01       	movw	r30, r14
   17992:	61 93       	st	Z+, r22
   17994:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    str = strchr(str, sep);               // Find next separator
   17996:	b6 01       	movw	r22, r12
   17998:	ce 01       	movw	r24, r28
   1799a:	0e 94 a9 e0 	call	0x1c152	; 0x1c152 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
   1799e:	00 97       	sbiw	r24, 0x00	; 0
   179a0:	39 f0       	breq	.+14     	; 0x179b0 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)
   179a2:	fc 01       	movw	r30, r24
   179a4:	20 81       	ld	r18, Z
   179a6:	22 23       	and	r18, r18
   179a8:	19 f0       	breq	.+6      	; 0x179b0 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   179aa:	ec 01       	movw	r28, r24
   179ac:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 2)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   179ae:	e4 cf       	rjmp	.-56     	; 0x17978 <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   179b0:	df 91       	pop	r29
   179b2:	cf 91       	pop	r28
   179b4:	1f 91       	pop	r17
   179b6:	0f 91       	pop	r16
   179b8:	ff 90       	pop	r15
   179ba:	ef 90       	pop	r14
   179bc:	df 90       	pop	r13
   179be:	cf 90       	pop	r12
   179c0:	bf 90       	pop	r11
   179c2:	af 90       	pop	r10
   179c4:	9f 90       	pop	r9
   179c6:	8f 90       	pop	r8
   179c8:	08 95       	ret

000179ca <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   179ca:	3f 92       	push	r3
   179cc:	4f 92       	push	r4
   179ce:	5f 92       	push	r5
   179d0:	6f 92       	push	r6
   179d2:	7f 92       	push	r7
   179d4:	8f 92       	push	r8
   179d6:	9f 92       	push	r9
   179d8:	af 92       	push	r10
   179da:	bf 92       	push	r11
   179dc:	cf 92       	push	r12
   179de:	df 92       	push	r13
   179e0:	ef 92       	push	r14
   179e2:	ff 92       	push	r15
   179e4:	0f 93       	push	r16
   179e6:	1f 93       	push	r17
   179e8:	cf 93       	push	r28
   179ea:	df 93       	push	r29
   179ec:	00 d0       	rcall	.+0      	; 0x179ee <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   179ee:	00 d0       	rcall	.+0      	; 0x179f0 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x26>
   179f0:	1f 92       	push	r1
   179f2:	1f 92       	push	r1
   179f4:	cd b7       	in	r28, 0x3d	; 61
   179f6:	de b7       	in	r29, 0x3e	; 62
   179f8:	5c 01       	movw	r10, r24
   179fa:	36 2e       	mov	r3, r22
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
  char tmp1[8];
  str[0] = 0;
   179fc:	fc 01       	movw	r30, r24
   179fe:	10 82       	st	Z, r1
   17a00:	2a 01       	movw	r4, r20
   17a02:	c2 2e       	mov	r12, r18
   17a04:	d1 2c       	mov	r13, r1
   17a06:	f1 2c       	mov	r15, r1
   17a08:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   17a0a:	60 2e       	mov	r6, r16
   17a0c:	71 2c       	mov	r7, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   17a0e:	8e 01       	movw	r16, r28
   17a10:	0f 5f       	subi	r16, 0xFF	; 255
   17a12:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   17a14:	46 01       	movw	r8, r12
   17a16:	f1 e0       	ldi	r31, 0x01	; 1
   17a18:	8f 1a       	sub	r8, r31
   17a1a:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   17a1c:	ec 14       	cp	r14, r12
   17a1e:	fd 04       	cpc	r15, r13
   17a20:	39 f1       	breq	.+78     	; 0x17a70 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  {
    itoa(bytes[a], tmp1, base);
   17a22:	f2 01       	movw	r30, r4
   17a24:	81 91       	ld	r24, Z+
   17a26:	2f 01       	movw	r4, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   17a28:	a3 01       	movw	r20, r6
   17a2a:	b8 01       	movw	r22, r16
   17a2c:	90 e0       	ldi	r25, 0x00	; 0
   17a2e:	0e 94 08 e1 	call	0x1c210	; 0x1c210 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (strlen(tmp1) < 2)
   17a32:	f8 01       	movw	r30, r16
   17a34:	01 90       	ld	r0, Z+
   17a36:	00 20       	and	r0, r0
   17a38:	e9 f7       	brne	.-6      	; 0x17a34 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x6a>
   17a3a:	31 97       	sbiw	r30, 0x01	; 1
   17a3c:	e0 1b       	sub	r30, r16
   17a3e:	f1 0b       	sbc	r31, r17
   17a40:	32 97       	sbiw	r30, 0x02	; 2
   17a42:	28 f4       	brcc	.+10     	; 0x17a4e <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x84>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      strcat(str, "0");
   17a44:	6c e1       	ldi	r22, 0x1C	; 28
   17a46:	79 e0       	ldi	r23, 0x09	; 9
   17a48:	c5 01       	movw	r24, r10
   17a4a:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    strcat(str, tmp1); 
   17a4e:	b8 01       	movw	r22, r16
   17a50:	c5 01       	movw	r24, r10
   17a52:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (a < maxBytes - 1)
   17a56:	e8 14       	cp	r14, r8
   17a58:	f9 04       	cpc	r15, r9
   17a5a:	34 f4       	brge	.+12     	; 0x17a68 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x9e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    {
      tmp1[0] = sep;
   17a5c:	39 82       	std	Y+1, r3	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      tmp1[1] = 0;
   17a5e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:132
      strcat(str, tmp1);
   17a60:	b8 01       	movw	r22, r16
   17a62:	c5 01       	movw	r24, r10
   17a64:	0e 94 9e e0 	call	0x1c13c	; 0x1c13c <strcat>
   17a68:	ff ef       	ldi	r31, 0xFF	; 255
   17a6a:	ef 1a       	sub	r14, r31
   17a6c:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   17a6e:	d6 cf       	rjmp	.-84     	; 0x17a1c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   17a70:	28 96       	adiw	r28, 0x08	; 8
   17a72:	0f b6       	in	r0, 0x3f	; 63
   17a74:	f8 94       	cli
   17a76:	de bf       	out	0x3e, r29	; 62
   17a78:	0f be       	out	0x3f, r0	; 63
   17a7a:	cd bf       	out	0x3d, r28	; 61
   17a7c:	df 91       	pop	r29
   17a7e:	cf 91       	pop	r28
   17a80:	1f 91       	pop	r17
   17a82:	0f 91       	pop	r16
   17a84:	ff 90       	pop	r15
   17a86:	ef 90       	pop	r14
   17a88:	df 90       	pop	r13
   17a8a:	cf 90       	pop	r12
   17a8c:	bf 90       	pop	r11
   17a8e:	af 90       	pop	r10
   17a90:	9f 90       	pop	r9
   17a92:	8f 90       	pop	r8
   17a94:	7f 90       	pop	r7
   17a96:	6f 90       	pop	r6
   17a98:	5f 90       	pop	r5
   17a9a:	4f 90       	pop	r4
   17a9c:	3f 90       	pop	r3
   17a9e:	08 95       	ret

00017aa0 <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   17aa0:	4f 92       	push	r4
   17aa2:	5f 92       	push	r5
   17aa4:	6f 92       	push	r6
   17aa6:	7f 92       	push	r7
   17aa8:	8f 92       	push	r8
   17aaa:	9f 92       	push	r9
   17aac:	af 92       	push	r10
   17aae:	bf 92       	push	r11
   17ab0:	cf 92       	push	r12
   17ab2:	df 92       	push	r13
   17ab4:	ef 92       	push	r14
   17ab6:	ff 92       	push	r15
   17ab8:	0f 93       	push	r16
   17aba:	1f 93       	push	r17
   17abc:	cf 93       	push	r28
   17abe:	df 93       	push	r29
   17ac0:	00 d0       	rcall	.+0      	; 0x17ac2 <PID::SetTunings(double, double, double, int)+0x22>
   17ac2:	00 d0       	rcall	.+0      	; 0x17ac4 <PID::SetTunings(double, double, double, int)+0x24>
   17ac4:	cd b7       	in	r28, 0x3d	; 61
   17ac6:	de b7       	in	r29, 0x3e	; 62
   17ac8:	9e 83       	std	Y+6, r25	; 0x06
   17aca:	8d 83       	std	Y+5, r24	; 0x05
   17acc:	49 83       	std	Y+1, r20	; 0x01
   17ace:	5a 83       	std	Y+2, r21	; 0x02
   17ad0:	6b 83       	std	Y+3, r22	; 0x03
   17ad2:	7c 83       	std	Y+4, r23	; 0x04
   17ad4:	28 01       	movw	r4, r16
   17ad6:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   17ad8:	20 e0       	ldi	r18, 0x00	; 0
   17ada:	30 e0       	ldi	r19, 0x00	; 0
   17adc:	a9 01       	movw	r20, r18
   17ade:	69 81       	ldd	r22, Y+1	; 0x01
   17ae0:	7a 81       	ldd	r23, Y+2	; 0x02
   17ae2:	8b 81       	ldd	r24, Y+3	; 0x03
   17ae4:	9c 81       	ldd	r25, Y+4	; 0x04
   17ae6:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17aea:	87 fd       	sbrc	r24, 7
   17aec:	97 c0       	rjmp	.+302    	; 0x17c1c <PID::SetTunings(double, double, double, int)+0x17c>
   17aee:	20 e0       	ldi	r18, 0x00	; 0
   17af0:	30 e0       	ldi	r19, 0x00	; 0
   17af2:	a9 01       	movw	r20, r18
   17af4:	c3 01       	movw	r24, r6
   17af6:	b8 01       	movw	r22, r16
   17af8:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17afc:	87 fd       	sbrc	r24, 7
   17afe:	8e c0       	rjmp	.+284    	; 0x17c1c <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   17b00:	20 e0       	ldi	r18, 0x00	; 0
   17b02:	30 e0       	ldi	r19, 0x00	; 0
   17b04:	a9 01       	movw	r20, r18
   17b06:	c7 01       	movw	r24, r14
   17b08:	b6 01       	movw	r22, r12
   17b0a:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17b0e:	87 fd       	sbrc	r24, 7
   17b10:	85 c0       	rjmp	.+266    	; 0x17c1c <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   17b12:	ad 81       	ldd	r26, Y+5	; 0x05
   17b14:	be 81       	ldd	r27, Y+6	; 0x06
   17b16:	5b 96       	adiw	r26, 0x1b	; 27
   17b18:	bc 92       	st	X, r11
   17b1a:	ae 92       	st	-X, r10
   17b1c:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   17b1e:	81 e0       	ldi	r24, 0x01	; 1
   17b20:	aa 94       	dec	r10
   17b22:	ab 28       	or	r10, r11
   17b24:	09 f0       	breq	.+2      	; 0x17b28 <PID::SetTunings(double, double, double, int)+0x88>
   17b26:	80 e0       	ldi	r24, 0x00	; 0
   17b28:	ed 81       	ldd	r30, Y+5	; 0x05
   17b2a:	fe 81       	ldd	r31, Y+6	; 0x06
   17b2c:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   17b2e:	89 81       	ldd	r24, Y+1	; 0x01
   17b30:	9a 81       	ldd	r25, Y+2	; 0x02
   17b32:	ab 81       	ldd	r26, Y+3	; 0x03
   17b34:	bc 81       	ldd	r27, Y+4	; 0x04
   17b36:	80 83       	st	Z, r24
   17b38:	91 83       	std	Z+1, r25	; 0x01
   17b3a:	a2 83       	std	Z+2, r26	; 0x02
   17b3c:	b3 83       	std	Z+3, r27	; 0x03
   17b3e:	44 82       	std	Z+4, r4	; 0x04
   17b40:	55 82       	std	Z+5, r5	; 0x05
   17b42:	66 82       	std	Z+6, r6	; 0x06
   17b44:	77 82       	std	Z+7, r7	; 0x07
   17b46:	c0 86       	std	Z+8, r12	; 0x08
   17b48:	d1 86       	std	Z+9, r13	; 0x09
   17b4a:	e2 86       	std	Z+10, r14	; 0x0a
   17b4c:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   17b4e:	66 a5       	ldd	r22, Z+46	; 0x2e
   17b50:	77 a5       	ldd	r23, Z+47	; 0x2f
   17b52:	80 a9       	ldd	r24, Z+48	; 0x30
   17b54:	91 a9       	ldd	r25, Z+49	; 0x31
   17b56:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
   17b5a:	20 e0       	ldi	r18, 0x00	; 0
   17b5c:	30 e0       	ldi	r19, 0x00	; 0
   17b5e:	4a e7       	ldi	r20, 0x7A	; 122
   17b60:	54 e4       	ldi	r21, 0x44	; 68
   17b62:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
   17b66:	4b 01       	movw	r8, r22
   17b68:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   17b6a:	89 81       	ldd	r24, Y+1	; 0x01
   17b6c:	9a 81       	ldd	r25, Y+2	; 0x02
   17b6e:	ab 81       	ldd	r26, Y+3	; 0x03
   17b70:	bc 81       	ldd	r27, Y+4	; 0x04
   17b72:	ed 81       	ldd	r30, Y+5	; 0x05
   17b74:	fe 81       	ldd	r31, Y+6	; 0x06
   17b76:	84 87       	std	Z+12, r24	; 0x0c
   17b78:	95 87       	std	Z+13, r25	; 0x0d
   17b7a:	a6 87       	std	Z+14, r26	; 0x0e
   17b7c:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   17b7e:	a5 01       	movw	r20, r10
   17b80:	94 01       	movw	r18, r8
   17b82:	c3 01       	movw	r24, r6
   17b84:	b2 01       	movw	r22, r4
   17b86:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
   17b8a:	2b 01       	movw	r4, r22
   17b8c:	3c 01       	movw	r6, r24
   17b8e:	ad 81       	ldd	r26, Y+5	; 0x05
   17b90:	be 81       	ldd	r27, Y+6	; 0x06
   17b92:	50 96       	adiw	r26, 0x10	; 16
   17b94:	4d 92       	st	X+, r4
   17b96:	5d 92       	st	X+, r5
   17b98:	6d 92       	st	X+, r6
   17b9a:	7c 92       	st	X, r7
   17b9c:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   17b9e:	a5 01       	movw	r20, r10
   17ba0:	94 01       	movw	r18, r8
   17ba2:	c7 01       	movw	r24, r14
   17ba4:	b6 01       	movw	r22, r12
   17ba6:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
   17baa:	6b 01       	movw	r12, r22
   17bac:	7c 01       	movw	r14, r24
   17bae:	ed 81       	ldd	r30, Y+5	; 0x05
   17bb0:	fe 81       	ldd	r31, Y+6	; 0x06
   17bb2:	c4 8a       	std	Z+20, r12	; 0x14
   17bb4:	d5 8a       	std	Z+21, r13	; 0x15
   17bb6:	e6 8a       	std	Z+22, r14	; 0x16
   17bb8:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   17bba:	80 8d       	ldd	r24, Z+24	; 0x18
   17bbc:	91 8d       	ldd	r25, Z+25	; 0x19
   17bbe:	01 97       	sbiw	r24, 0x01	; 1
   17bc0:	69 f5       	brne	.+90     	; 0x17c1c <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   17bc2:	29 81       	ldd	r18, Y+1	; 0x01
   17bc4:	3a 81       	ldd	r19, Y+2	; 0x02
   17bc6:	4b 81       	ldd	r20, Y+3	; 0x03
   17bc8:	5c 81       	ldd	r21, Y+4	; 0x04
   17bca:	60 e0       	ldi	r22, 0x00	; 0
   17bcc:	70 e0       	ldi	r23, 0x00	; 0
   17bce:	cb 01       	movw	r24, r22
   17bd0:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17bd4:	ad 81       	ldd	r26, Y+5	; 0x05
   17bd6:	be 81       	ldd	r27, Y+6	; 0x06
   17bd8:	1c 96       	adiw	r26, 0x0c	; 12
   17bda:	6d 93       	st	X+, r22
   17bdc:	7d 93       	st	X+, r23
   17bde:	8d 93       	st	X+, r24
   17be0:	9c 93       	st	X, r25
   17be2:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   17be4:	a3 01       	movw	r20, r6
   17be6:	92 01       	movw	r18, r4
   17be8:	60 e0       	ldi	r22, 0x00	; 0
   17bea:	70 e0       	ldi	r23, 0x00	; 0
   17bec:	cb 01       	movw	r24, r22
   17bee:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17bf2:	ed 81       	ldd	r30, Y+5	; 0x05
   17bf4:	fe 81       	ldd	r31, Y+6	; 0x06
   17bf6:	60 8b       	std	Z+16, r22	; 0x10
   17bf8:	71 8b       	std	Z+17, r23	; 0x11
   17bfa:	82 8b       	std	Z+18, r24	; 0x12
   17bfc:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   17bfe:	a7 01       	movw	r20, r14
   17c00:	96 01       	movw	r18, r12
   17c02:	60 e0       	ldi	r22, 0x00	; 0
   17c04:	70 e0       	ldi	r23, 0x00	; 0
   17c06:	cb 01       	movw	r24, r22
   17c08:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17c0c:	ad 81       	ldd	r26, Y+5	; 0x05
   17c0e:	be 81       	ldd	r27, Y+6	; 0x06
   17c10:	54 96       	adiw	r26, 0x14	; 20
   17c12:	6d 93       	st	X+, r22
   17c14:	7d 93       	st	X+, r23
   17c16:	8d 93       	st	X+, r24
   17c18:	9c 93       	st	X, r25
   17c1a:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   17c1c:	26 96       	adiw	r28, 0x06	; 6
   17c1e:	0f b6       	in	r0, 0x3f	; 63
   17c20:	f8 94       	cli
   17c22:	de bf       	out	0x3e, r29	; 62
   17c24:	0f be       	out	0x3f, r0	; 63
   17c26:	cd bf       	out	0x3d, r28	; 61
   17c28:	df 91       	pop	r29
   17c2a:	cf 91       	pop	r28
   17c2c:	1f 91       	pop	r17
   17c2e:	0f 91       	pop	r16
   17c30:	ff 90       	pop	r15
   17c32:	ef 90       	pop	r14
   17c34:	df 90       	pop	r13
   17c36:	cf 90       	pop	r12
   17c38:	bf 90       	pop	r11
   17c3a:	af 90       	pop	r10
   17c3c:	9f 90       	pop	r9
   17c3e:	8f 90       	pop	r8
   17c40:	7f 90       	pop	r7
   17c42:	6f 90       	pop	r6
   17c44:	5f 90       	pop	r5
   17c46:	4f 90       	pop	r4
   17c48:	08 95       	ret

00017c4a <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   17c4a:	af 92       	push	r10
   17c4c:	bf 92       	push	r11
   17c4e:	cf 92       	push	r12
   17c50:	df 92       	push	r13
   17c52:	ef 92       	push	r14
   17c54:	ff 92       	push	r15
   17c56:	0f 93       	push	r16
   17c58:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   17c5a:	fc 01       	movw	r30, r24
   17c5c:	a2 8c       	ldd	r10, Z+26	; 0x1a
   17c5e:	b3 8c       	ldd	r11, Z+27	; 0x1b
   17c60:	0e 94 50 bd 	call	0x17aa0	; 0x17aa0 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   17c64:	1f 91       	pop	r17
   17c66:	0f 91       	pop	r16
   17c68:	ff 90       	pop	r15
   17c6a:	ef 90       	pop	r14
   17c6c:	df 90       	pop	r13
   17c6e:	cf 90       	pop	r12
   17c70:	bf 90       	pop	r11
   17c72:	af 90       	pop	r10
   17c74:	08 95       	ret

00017c76 <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   17c76:	8f 92       	push	r8
   17c78:	9f 92       	push	r9
   17c7a:	af 92       	push	r10
   17c7c:	bf 92       	push	r11
   17c7e:	cf 92       	push	r12
   17c80:	df 92       	push	r13
   17c82:	ef 92       	push	r14
   17c84:	ff 92       	push	r15
   17c86:	cf 93       	push	r28
   17c88:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   17c8a:	16 16       	cp	r1, r22
   17c8c:	17 06       	cpc	r1, r23
   17c8e:	ac f5       	brge	.+106    	; 0x17cfa <PID::SetSampleTime(int)+0x84>
   17c90:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   17c92:	6b 01       	movw	r12, r22
   17c94:	77 0f       	add	r23, r23
   17c96:	ee 08       	sbc	r14, r14
   17c98:	ff 08       	sbc	r15, r15
   17c9a:	c7 01       	movw	r24, r14
   17c9c:	b6 01       	movw	r22, r12
   17c9e:	0e 94 5f db 	call	0x1b6be	; 0x1b6be <__floatsisf>
   17ca2:	4b 01       	movw	r8, r22
   17ca4:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   17ca6:	6e a5       	ldd	r22, Y+46	; 0x2e
   17ca8:	7f a5       	ldd	r23, Y+47	; 0x2f
   17caa:	88 a9       	ldd	r24, Y+48	; 0x30
   17cac:	99 a9       	ldd	r25, Y+49	; 0x31
   17cae:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
   17cb2:	9b 01       	movw	r18, r22
   17cb4:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   17cb6:	c5 01       	movw	r24, r10
   17cb8:	b4 01       	movw	r22, r8
   17cba:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
   17cbe:	4b 01       	movw	r8, r22
   17cc0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   17cc2:	ac 01       	movw	r20, r24
   17cc4:	9b 01       	movw	r18, r22
   17cc6:	68 89       	ldd	r22, Y+16	; 0x10
   17cc8:	79 89       	ldd	r23, Y+17	; 0x11
   17cca:	8a 89       	ldd	r24, Y+18	; 0x12
   17ccc:	9b 89       	ldd	r25, Y+19	; 0x13
   17cce:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
   17cd2:	68 8b       	std	Y+16, r22	; 0x10
   17cd4:	79 8b       	std	Y+17, r23	; 0x11
   17cd6:	8a 8b       	std	Y+18, r24	; 0x12
   17cd8:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   17cda:	a5 01       	movw	r20, r10
   17cdc:	94 01       	movw	r18, r8
   17cde:	6c 89       	ldd	r22, Y+20	; 0x14
   17ce0:	7d 89       	ldd	r23, Y+21	; 0x15
   17ce2:	8e 89       	ldd	r24, Y+22	; 0x16
   17ce4:	9f 89       	ldd	r25, Y+23	; 0x17
   17ce6:	0e 94 b5 da 	call	0x1b56a	; 0x1b56a <__divsf3>
   17cea:	6c 8b       	std	Y+20, r22	; 0x14
   17cec:	7d 8b       	std	Y+21, r23	; 0x15
   17cee:	8e 8b       	std	Y+22, r24	; 0x16
   17cf0:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   17cf2:	ce a6       	std	Y+46, r12	; 0x2e
   17cf4:	df a6       	std	Y+47, r13	; 0x2f
   17cf6:	e8 aa       	std	Y+48, r14	; 0x30
   17cf8:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   17cfa:	df 91       	pop	r29
   17cfc:	cf 91       	pop	r28
   17cfe:	ff 90       	pop	r15
   17d00:	ef 90       	pop	r14
   17d02:	df 90       	pop	r13
   17d04:	cf 90       	pop	r12
   17d06:	bf 90       	pop	r11
   17d08:	af 90       	pop	r10
   17d0a:	9f 90       	pop	r9
   17d0c:	8f 90       	pop	r8
   17d0e:	08 95       	ret

00017d10 <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   17d10:	2f 92       	push	r2
   17d12:	3f 92       	push	r3
   17d14:	4f 92       	push	r4
   17d16:	5f 92       	push	r5
   17d18:	6f 92       	push	r6
   17d1a:	7f 92       	push	r7
   17d1c:	8f 92       	push	r8
   17d1e:	9f 92       	push	r9
   17d20:	af 92       	push	r10
   17d22:	bf 92       	push	r11
   17d24:	cf 92       	push	r12
   17d26:	df 92       	push	r13
   17d28:	ef 92       	push	r14
   17d2a:	ff 92       	push	r15
   17d2c:	0f 93       	push	r16
   17d2e:	1f 93       	push	r17
   17d30:	cf 93       	push	r28
   17d32:	df 93       	push	r29
   17d34:	ec 01       	movw	r28, r24
   17d36:	6a 01       	movw	r12, r20
   17d38:	7b 01       	movw	r14, r22
   17d3a:	48 01       	movw	r8, r16
   17d3c:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   17d3e:	a9 01       	movw	r20, r18
   17d40:	98 01       	movw	r18, r16
   17d42:	cb 01       	movw	r24, r22
   17d44:	b6 01       	movw	r22, r12
   17d46:	0e 94 0f dc 	call	0x1b81e	; 0x1b81e <__gesf2>
   17d4a:	87 ff       	sbrs	r24, 7
   17d4c:	4f c0       	rjmp	.+158    	; 0x17dec <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   17d4e:	ca aa       	std	Y+50, r12	; 0x32
   17d50:	db aa       	std	Y+51, r13	; 0x33
   17d52:	ec aa       	std	Y+52, r14	; 0x34
   17d54:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   17d56:	8e aa       	std	Y+54, r8	; 0x36
   17d58:	9f aa       	std	Y+55, r9	; 0x37
   17d5a:	a8 ae       	std	Y+56, r10	; 0x38
   17d5c:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   17d5e:	8a ad       	ldd	r24, Y+58	; 0x3a
   17d60:	88 23       	and	r24, r24
   17d62:	09 f4       	brne	.+2      	; 0x17d66 <PID::SetOutputLimits(double, double)+0x56>
   17d64:	43 c0       	rjmp	.+134    	; 0x17dec <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   17d66:	2e 8c       	ldd	r2, Y+30	; 0x1e
   17d68:	3f 8c       	ldd	r3, Y+31	; 0x1f
   17d6a:	f1 01       	movw	r30, r2
   17d6c:	40 80       	ld	r4, Z
   17d6e:	51 80       	ldd	r5, Z+1	; 0x01
   17d70:	62 80       	ldd	r6, Z+2	; 0x02
   17d72:	73 80       	ldd	r7, Z+3	; 0x03
   17d74:	a3 01       	movw	r20, r6
   17d76:	92 01       	movw	r18, r4
   17d78:	c5 01       	movw	r24, r10
   17d7a:	b8 01       	movw	r22, r16
   17d7c:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17d80:	87 ff       	sbrs	r24, 7
   17d82:	1a c0       	rjmp	.+52     	; 0x17db8 <PID::SetOutputLimits(double, double)+0xa8>
   17d84:	f1 01       	movw	r30, r2
   17d86:	80 82       	st	Z, r8
   17d88:	91 82       	std	Z+1, r9	; 0x01
   17d8a:	a2 82       	std	Z+2, r10	; 0x02
   17d8c:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   17d8e:	8e a0       	ldd	r8, Y+38	; 0x26
   17d90:	9f a0       	ldd	r9, Y+39	; 0x27
   17d92:	a8 a4       	ldd	r10, Y+40	; 0x28
   17d94:	b9 a4       	ldd	r11, Y+41	; 0x29
   17d96:	ce a8       	ldd	r12, Y+54	; 0x36
   17d98:	df a8       	ldd	r13, Y+55	; 0x37
   17d9a:	e8 ac       	ldd	r14, Y+56	; 0x38
   17d9c:	f9 ac       	ldd	r15, Y+57	; 0x39
   17d9e:	a7 01       	movw	r20, r14
   17da0:	96 01       	movw	r18, r12
   17da2:	c5 01       	movw	r24, r10
   17da4:	b4 01       	movw	r22, r8
   17da6:	0e 94 0f dc 	call	0x1b81e	; 0x1b81e <__gesf2>
   17daa:	18 16       	cp	r1, r24
   17dac:	9c f4       	brge	.+38     	; 0x17dd4 <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   17dae:	ce a2       	std	Y+38, r12	; 0x26
   17db0:	df a2       	std	Y+39, r13	; 0x27
   17db2:	e8 a6       	std	Y+40, r14	; 0x28
   17db4:	f9 a6       	std	Y+41, r15	; 0x29
   17db6:	1a c0       	rjmp	.+52     	; 0x17dec <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   17db8:	a3 01       	movw	r20, r6
   17dba:	92 01       	movw	r18, r4
   17dbc:	c7 01       	movw	r24, r14
   17dbe:	b6 01       	movw	r22, r12
   17dc0:	0e 94 0f dc 	call	0x1b81e	; 0x1b81e <__gesf2>
   17dc4:	18 16       	cp	r1, r24
   17dc6:	1c f7       	brge	.-58     	; 0x17d8e <PID::SetOutputLimits(double, double)+0x7e>
   17dc8:	f1 01       	movw	r30, r2
   17dca:	c0 82       	st	Z, r12
   17dcc:	d1 82       	std	Z+1, r13	; 0x01
   17dce:	e2 82       	std	Z+2, r14	; 0x02
   17dd0:	f3 82       	std	Z+3, r15	; 0x03
   17dd2:	dd cf       	rjmp	.-70     	; 0x17d8e <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   17dd4:	ca a8       	ldd	r12, Y+50	; 0x32
   17dd6:	db a8       	ldd	r13, Y+51	; 0x33
   17dd8:	ec a8       	ldd	r14, Y+52	; 0x34
   17dda:	fd a8       	ldd	r15, Y+53	; 0x35
   17ddc:	a7 01       	movw	r20, r14
   17dde:	96 01       	movw	r18, r12
   17de0:	c5 01       	movw	r24, r10
   17de2:	b4 01       	movw	r22, r8
   17de4:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17de8:	87 fd       	sbrc	r24, 7
   17dea:	e1 cf       	rjmp	.-62     	; 0x17dae <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   17dec:	df 91       	pop	r29
   17dee:	cf 91       	pop	r28
   17df0:	1f 91       	pop	r17
   17df2:	0f 91       	pop	r16
   17df4:	ff 90       	pop	r15
   17df6:	ef 90       	pop	r14
   17df8:	df 90       	pop	r13
   17dfa:	cf 90       	pop	r12
   17dfc:	bf 90       	pop	r11
   17dfe:	af 90       	pop	r10
   17e00:	9f 90       	pop	r9
   17e02:	8f 90       	pop	r8
   17e04:	7f 90       	pop	r7
   17e06:	6f 90       	pop	r6
   17e08:	5f 90       	pop	r5
   17e0a:	4f 90       	pop	r4
   17e0c:	3f 90       	pop	r3
   17e0e:	2f 90       	pop	r2
   17e10:	08 95       	ret

00017e12 <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   17e12:	8f 92       	push	r8
   17e14:	9f 92       	push	r9
   17e16:	af 92       	push	r10
   17e18:	bf 92       	push	r11
   17e1a:	cf 92       	push	r12
   17e1c:	df 92       	push	r13
   17e1e:	ef 92       	push	r14
   17e20:	ff 92       	push	r15
   17e22:	cf 93       	push	r28
   17e24:	df 93       	push	r29
   17e26:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   17e28:	ee 8d       	ldd	r30, Y+30	; 0x1e
   17e2a:	ff 8d       	ldd	r31, Y+31	; 0x1f
   17e2c:	c0 80       	ld	r12, Z
   17e2e:	d1 80       	ldd	r13, Z+1	; 0x01
   17e30:	e2 80       	ldd	r14, Z+2	; 0x02
   17e32:	f3 80       	ldd	r15, Z+3	; 0x03
   17e34:	ce a2       	std	Y+38, r12	; 0x26
   17e36:	df a2       	std	Y+39, r13	; 0x27
   17e38:	e8 a6       	std	Y+40, r14	; 0x28
   17e3a:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   17e3c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   17e3e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   17e40:	80 81       	ld	r24, Z
   17e42:	91 81       	ldd	r25, Z+1	; 0x01
   17e44:	a2 81       	ldd	r26, Z+2	; 0x02
   17e46:	b3 81       	ldd	r27, Z+3	; 0x03
   17e48:	8a a7       	std	Y+42, r24	; 0x2a
   17e4a:	9b a7       	std	Y+43, r25	; 0x2b
   17e4c:	ac a7       	std	Y+44, r26	; 0x2c
   17e4e:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   17e50:	8e a8       	ldd	r8, Y+54	; 0x36
   17e52:	9f a8       	ldd	r9, Y+55	; 0x37
   17e54:	a8 ac       	ldd	r10, Y+56	; 0x38
   17e56:	b9 ac       	ldd	r11, Y+57	; 0x39
   17e58:	a5 01       	movw	r20, r10
   17e5a:	94 01       	movw	r18, r8
   17e5c:	c7 01       	movw	r24, r14
   17e5e:	b6 01       	movw	r22, r12
   17e60:	0e 94 0f dc 	call	0x1b81e	; 0x1b81e <__gesf2>
   17e64:	18 16       	cp	r1, r24
   17e66:	2c f4       	brge	.+10     	; 0x17e72 <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   17e68:	8e a2       	std	Y+38, r8	; 0x26
   17e6a:	9f a2       	std	Y+39, r9	; 0x27
   17e6c:	a8 a6       	std	Y+40, r10	; 0x28
   17e6e:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   17e70:	0c c0       	rjmp	.+24     	; 0x17e8a <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   17e72:	8a a8       	ldd	r8, Y+50	; 0x32
   17e74:	9b a8       	ldd	r9, Y+51	; 0x33
   17e76:	ac a8       	ldd	r10, Y+52	; 0x34
   17e78:	bd a8       	ldd	r11, Y+53	; 0x35
   17e7a:	a5 01       	movw	r20, r10
   17e7c:	94 01       	movw	r18, r8
   17e7e:	c7 01       	movw	r24, r14
   17e80:	b6 01       	movw	r22, r12
   17e82:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   17e86:	87 fd       	sbrc	r24, 7
   17e88:	ef cf       	rjmp	.-34     	; 0x17e68 <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   17e8a:	df 91       	pop	r29
   17e8c:	cf 91       	pop	r28
   17e8e:	ff 90       	pop	r15
   17e90:	ef 90       	pop	r14
   17e92:	df 90       	pop	r13
   17e94:	cf 90       	pop	r12
   17e96:	bf 90       	pop	r11
   17e98:	af 90       	pop	r10
   17e9a:	9f 90       	pop	r9
   17e9c:	8f 90       	pop	r8
   17e9e:	08 95       	ret

00017ea0 <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   17ea0:	1f 93       	push	r17
   17ea2:	cf 93       	push	r28
   17ea4:	df 93       	push	r29
   17ea6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   17ea8:	11 e0       	ldi	r17, 0x01	; 1
   17eaa:	61 30       	cpi	r22, 0x01	; 1
   17eac:	71 05       	cpc	r23, r1
   17eae:	09 f0       	breq	.+2      	; 0x17eb2 <PID::SetMode(int)+0x12>
   17eb0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   17eb2:	61 30       	cpi	r22, 0x01	; 1
   17eb4:	71 05       	cpc	r23, r1
   17eb6:	31 f4       	brne	.+12     	; 0x17ec4 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   17eb8:	8a ad       	ldd	r24, Y+58	; 0x3a
   17eba:	81 11       	cpse	r24, r1
   17ebc:	03 c0       	rjmp	.+6      	; 0x17ec4 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   17ebe:	ce 01       	movw	r24, r28
   17ec0:	0e 94 09 bf 	call	0x17e12	; 0x17e12 <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   17ec4:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   17ec6:	df 91       	pop	r29
   17ec8:	cf 91       	pop	r28
   17eca:	1f 91       	pop	r17
   17ecc:	08 95       	ret

00017ece <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   17ece:	0f 93       	push	r16
   17ed0:	1f 93       	push	r17
   17ed2:	cf 93       	push	r28
   17ed4:	df 93       	push	r29
   17ed6:	ec 01       	movw	r28, r24
   17ed8:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   17eda:	8a ad       	ldd	r24, Y+58	; 0x3a
   17edc:	88 23       	and	r24, r24
   17ede:	61 f1       	breq	.+88     	; 0x17f38 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   17ee0:	88 8d       	ldd	r24, Y+24	; 0x18
   17ee2:	99 8d       	ldd	r25, Y+25	; 0x19
   17ee4:	86 17       	cp	r24, r22
   17ee6:	97 07       	cpc	r25, r23
   17ee8:	39 f1       	breq	.+78     	; 0x17f38 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   17eea:	2c 85       	ldd	r18, Y+12	; 0x0c
   17eec:	3d 85       	ldd	r19, Y+13	; 0x0d
   17eee:	4e 85       	ldd	r20, Y+14	; 0x0e
   17ef0:	5f 85       	ldd	r21, Y+15	; 0x0f
   17ef2:	60 e0       	ldi	r22, 0x00	; 0
   17ef4:	70 e0       	ldi	r23, 0x00	; 0
   17ef6:	cb 01       	movw	r24, r22
   17ef8:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17efc:	6c 87       	std	Y+12, r22	; 0x0c
   17efe:	7d 87       	std	Y+13, r23	; 0x0d
   17f00:	8e 87       	std	Y+14, r24	; 0x0e
   17f02:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   17f04:	28 89       	ldd	r18, Y+16	; 0x10
   17f06:	39 89       	ldd	r19, Y+17	; 0x11
   17f08:	4a 89       	ldd	r20, Y+18	; 0x12
   17f0a:	5b 89       	ldd	r21, Y+19	; 0x13
   17f0c:	60 e0       	ldi	r22, 0x00	; 0
   17f0e:	70 e0       	ldi	r23, 0x00	; 0
   17f10:	cb 01       	movw	r24, r22
   17f12:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17f16:	68 8b       	std	Y+16, r22	; 0x10
   17f18:	79 8b       	std	Y+17, r23	; 0x11
   17f1a:	8a 8b       	std	Y+18, r24	; 0x12
   17f1c:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   17f1e:	2c 89       	ldd	r18, Y+20	; 0x14
   17f20:	3d 89       	ldd	r19, Y+21	; 0x15
   17f22:	4e 89       	ldd	r20, Y+22	; 0x16
   17f24:	5f 89       	ldd	r21, Y+23	; 0x17
   17f26:	60 e0       	ldi	r22, 0x00	; 0
   17f28:	70 e0       	ldi	r23, 0x00	; 0
   17f2a:	cb 01       	movw	r24, r22
   17f2c:	0e 94 43 da 	call	0x1b486	; 0x1b486 <__subsf3>
   17f30:	6c 8b       	std	Y+20, r22	; 0x14
   17f32:	7d 8b       	std	Y+21, r23	; 0x15
   17f34:	8e 8b       	std	Y+22, r24	; 0x16
   17f36:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   17f38:	19 8f       	std	Y+25, r17	; 0x19
   17f3a:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   17f3c:	df 91       	pop	r29
   17f3e:	cf 91       	pop	r28
   17f40:	1f 91       	pop	r17
   17f42:	0f 91       	pop	r16
   17f44:	08 95       	ret

00017f46 <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   17f46:	4f 92       	push	r4
   17f48:	5f 92       	push	r5
   17f4a:	6f 92       	push	r6
   17f4c:	7f 92       	push	r7
   17f4e:	8f 92       	push	r8
   17f50:	9f 92       	push	r9
   17f52:	af 92       	push	r10
   17f54:	bf 92       	push	r11
   17f56:	cf 92       	push	r12
   17f58:	df 92       	push	r13
   17f5a:	ef 92       	push	r14
   17f5c:	ff 92       	push	r15
   17f5e:	0f 93       	push	r16
   17f60:	1f 93       	push	r17
   17f62:	cf 93       	push	r28
   17f64:	df 93       	push	r29
   17f66:	00 d0       	rcall	.+0      	; 0x17f68 <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   17f68:	1f 92       	push	r1
   17f6a:	cd b7       	in	r28, 0x3d	; 61
   17f6c:	de b7       	in	r29, 0x3e	; 62
   17f6e:	4c 01       	movw	r8, r24
   17f70:	27 01       	movw	r4, r14
   17f72:	38 01       	movw	r6, r16
   17f74:	a9 82       	std	Y+1, r10	; 0x01
   17f76:	ba 82       	std	Y+2, r11	; 0x02
   17f78:	cb 82       	std	Y+3, r12	; 0x03
   17f7a:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   17f7c:	fc 01       	movw	r30, r24
   17f7e:	57 8f       	std	Z+31, r21	; 0x1f
   17f80:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   17f82:	75 8f       	std	Z+29, r23	; 0x1d
   17f84:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   17f86:	31 a3       	std	Z+33, r19	; 0x21
   17f88:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   17f8a:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   17f8c:	12 aa       	std	Z+50, r1	; 0x32
   17f8e:	13 aa       	std	Z+51, r1	; 0x33
   17f90:	14 aa       	std	Z+52, r1	; 0x34
   17f92:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   17f94:	80 e0       	ldi	r24, 0x00	; 0
   17f96:	90 e0       	ldi	r25, 0x00	; 0
   17f98:	af e7       	ldi	r26, 0x7F	; 127
   17f9a:	b3 e4       	ldi	r27, 0x43	; 67
   17f9c:	86 ab       	std	Z+54, r24	; 0x36
   17f9e:	97 ab       	std	Z+55, r25	; 0x37
   17fa0:	a0 af       	std	Z+56, r26	; 0x38
   17fa2:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   17fa4:	84 e6       	ldi	r24, 0x64	; 100
   17fa6:	90 e0       	ldi	r25, 0x00	; 0
   17fa8:	a0 e0       	ldi	r26, 0x00	; 0
   17faa:	b0 e0       	ldi	r27, 0x00	; 0
   17fac:	86 a7       	std	Z+46, r24	; 0x2e
   17fae:	97 a7       	std	Z+47, r25	; 0x2f
   17fb0:	a0 ab       	std	Z+48, r26	; 0x30
   17fb2:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   17fb4:	6e 8d       	ldd	r22, Y+30	; 0x1e
   17fb6:	7f 8d       	ldd	r23, Y+31	; 0x1f
   17fb8:	c4 01       	movw	r24, r8
   17fba:	0e 94 67 bf 	call	0x17ece	; 0x17ece <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   17fbe:	ac 8c       	ldd	r10, Y+28	; 0x1c
   17fc0:	bd 8c       	ldd	r11, Y+29	; 0x1d
   17fc2:	c8 8c       	ldd	r12, Y+24	; 0x18
   17fc4:	d9 8c       	ldd	r13, Y+25	; 0x19
   17fc6:	ea 8c       	ldd	r14, Y+26	; 0x1a
   17fc8:	fb 8c       	ldd	r15, Y+27	; 0x1b
   17fca:	09 81       	ldd	r16, Y+1	; 0x01
   17fcc:	1a 81       	ldd	r17, Y+2	; 0x02
   17fce:	2b 81       	ldd	r18, Y+3	; 0x03
   17fd0:	3c 81       	ldd	r19, Y+4	; 0x04
   17fd2:	b3 01       	movw	r22, r6
   17fd4:	a2 01       	movw	r20, r4
   17fd6:	c4 01       	movw	r24, r8
   17fd8:	0e 94 50 bd 	call	0x17aa0	; 0x17aa0 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   17fdc:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   17fe0:	28 ee       	ldi	r18, 0xE8	; 232
   17fe2:	33 e0       	ldi	r19, 0x03	; 3
   17fe4:	40 e0       	ldi	r20, 0x00	; 0
   17fe6:	50 e0       	ldi	r21, 0x00	; 0
   17fe8:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   17fec:	f4 01       	movw	r30, r8
   17fee:	86 a5       	ldd	r24, Z+46	; 0x2e
   17ff0:	97 a5       	ldd	r25, Z+47	; 0x2f
   17ff2:	a0 a9       	ldd	r26, Z+48	; 0x30
   17ff4:	b1 a9       	ldd	r27, Z+49	; 0x31
   17ff6:	28 1b       	sub	r18, r24
   17ff8:	39 0b       	sbc	r19, r25
   17ffa:	4a 0b       	sbc	r20, r26
   17ffc:	5b 0b       	sbc	r21, r27
   17ffe:	22 a3       	std	Z+34, r18	; 0x22
   18000:	33 a3       	std	Z+35, r19	; 0x23
   18002:	44 a3       	std	Z+36, r20	; 0x24
   18004:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   18006:	0f 90       	pop	r0
   18008:	0f 90       	pop	r0
   1800a:	0f 90       	pop	r0
   1800c:	0f 90       	pop	r0
   1800e:	df 91       	pop	r29
   18010:	cf 91       	pop	r28
   18012:	1f 91       	pop	r17
   18014:	0f 91       	pop	r16
   18016:	ff 90       	pop	r15
   18018:	ef 90       	pop	r14
   1801a:	df 90       	pop	r13
   1801c:	cf 90       	pop	r12
   1801e:	bf 90       	pop	r11
   18020:	af 90       	pop	r10
   18022:	9f 90       	pop	r9
   18024:	8f 90       	pop	r8
   18026:	7f 90       	pop	r7
   18028:	6f 90       	pop	r6
   1802a:	5f 90       	pop	r5
   1802c:	4f 90       	pop	r4
   1802e:	08 95       	ret

00018030 <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   18030:	8f 92       	push	r8
   18032:	9f 92       	push	r9
   18034:	af 92       	push	r10
   18036:	bf 92       	push	r11
   18038:	cf 92       	push	r12
   1803a:	df 92       	push	r13
   1803c:	ef 92       	push	r14
   1803e:	ff 92       	push	r15
   18040:	0f 93       	push	r16
   18042:	1f 93       	push	r17
   18044:	cf 93       	push	r28
   18046:	df 93       	push	r29
   18048:	cd b7       	in	r28, 0x3d	; 61
   1804a:	de b7       	in	r29, 0x3e	; 62
   1804c:	e8 89       	ldd	r30, Y+16	; 0x10
   1804e:	f9 89       	ldd	r31, Y+17	; 0x11
   18050:	aa 89       	ldd	r26, Y+18	; 0x12
   18052:	bb 89       	ldd	r27, Y+19	; 0x13
   18054:	9c 88       	ldd	r9, Y+20	; 0x14
   18056:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   18058:	8f 92       	push	r8
   1805a:	9f 92       	push	r9
   1805c:	1f 92       	push	r1
   1805e:	99 24       	eor	r9, r9
   18060:	93 94       	inc	r9
   18062:	9f 92       	push	r9
   18064:	bf 93       	push	r27
   18066:	af 93       	push	r26
   18068:	ff 93       	push	r31
   1806a:	ef 93       	push	r30
   1806c:	0e 94 a3 bf 	call	0x17f46	; 0x17f46 <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   18070:	0f b6       	in	r0, 0x3f	; 63
   18072:	f8 94       	cli
   18074:	de bf       	out	0x3e, r29	; 62
   18076:	0f be       	out	0x3f, r0	; 63
   18078:	cd bf       	out	0x3d, r28	; 61
   1807a:	df 91       	pop	r29
   1807c:	cf 91       	pop	r28
   1807e:	1f 91       	pop	r17
   18080:	0f 91       	pop	r16
   18082:	ff 90       	pop	r15
   18084:	ef 90       	pop	r14
   18086:	df 90       	pop	r13
   18088:	cf 90       	pop	r12
   1808a:	bf 90       	pop	r11
   1808c:	af 90       	pop	r10
   1808e:	9f 90       	pop	r9
   18090:	8f 90       	pop	r8
   18092:	08 95       	ret

00018094 <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:586
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
   18094:	0f 93       	push	r16
   18096:	1f 93       	push	r17
   18098:	cf 93       	push	r28
   1809a:	df 93       	push	r29
   1809c:	ec 01       	movw	r28, r24
   1809e:	8b 01       	movw	r16, r22
   180a0:	81 5f       	subi	r24, 0xF1	; 241
   180a2:	9d 4f       	sbci	r25, 0xFD	; 253
   180a4:	0e 94 d8 d8 	call	0x1b1b0	; 0x1b1b0 <IPAddress::IPAddress()>
   180a8:	fe 01       	movw	r30, r28
   180aa:	e5 5e       	subi	r30, 0xE5	; 229
   180ac:	fd 4f       	sbci	r31, 0xFD	; 253
   180ae:	8f ef       	ldi	r24, 0xFF	; 255
   180b0:	9f ef       	ldi	r25, 0xFF	; 255
   180b2:	91 83       	std	Z+1, r25	; 0x01
   180b4:	80 83       	st	Z, r24
_ZN12PubSubClient9setClientER6Client():
   180b6:	19 83       	std	Y+1, r17	; 0x01
   180b8:	08 83       	st	Y, r16
_ZN12PubSubClientC2ER6Client():
   180ba:	c7 5e       	subi	r28, 0xE7	; 231
   180bc:	dd 4f       	sbci	r29, 0xFD	; 253
   180be:	19 82       	std	Y+1, r1	; 0x01
   180c0:	18 82       	st	Y, r1
   180c2:	df 91       	pop	r29
   180c4:	cf 91       	pop	r28
   180c6:	1f 91       	pop	r17
   180c8:	0f 91       	pop	r16
   180ca:	08 95       	ret

000180cc <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   180cc:	cf 92       	push	r12
   180ce:	df 92       	push	r13
   180d0:	ef 92       	push	r14
   180d2:	ff 92       	push	r15
   180d4:	0f 93       	push	r16
   180d6:	1f 93       	push	r17
   180d8:	cf 93       	push	r28
   180da:	df 93       	push	r29
   180dc:	ec 01       	movw	r28, r24
   180de:	8b 01       	movw	r16, r22
   180e0:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   180e4:	6b 01       	movw	r12, r22
   180e6:	7c 01       	movw	r14, r24
   180e8:	88 81       	ld	r24, Y
   180ea:	99 81       	ldd	r25, Y+1	; 0x01
   180ec:	dc 01       	movw	r26, r24
   180ee:	ed 91       	ld	r30, X+
   180f0:	fc 91       	ld	r31, X
   180f2:	00 84       	ldd	r0, Z+8	; 0x08
   180f4:	f1 85       	ldd	r31, Z+9	; 0x09
   180f6:	e0 2d       	mov	r30, r0
   180f8:	19 95       	eicall
   180fa:	89 2b       	or	r24, r25
   180fc:	69 f4       	brne	.+26     	; 0x18118 <PubSubClient::readByte(unsigned char*)+0x4c>
   180fe:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   18102:	6c 19       	sub	r22, r12
   18104:	7d 09       	sbc	r23, r13
   18106:	8e 09       	sbc	r24, r14
   18108:	9f 09       	sbc	r25, r15
   1810a:	62 33       	cpi	r22, 0x32	; 50
   1810c:	71 05       	cpc	r23, r1
   1810e:	81 05       	cpc	r24, r1
   18110:	91 05       	cpc	r25, r1
   18112:	50 f3       	brcs	.-44     	; 0x180e8 <PubSubClient::readByte(unsigned char*)+0x1c>
   18114:	80 e0       	ldi	r24, 0x00	; 0
   18116:	0c c0       	rjmp	.+24     	; 0x18130 <PubSubClient::readByte(unsigned char*)+0x64>
   18118:	88 81       	ld	r24, Y
   1811a:	99 81       	ldd	r25, Y+1	; 0x01
   1811c:	dc 01       	movw	r26, r24
   1811e:	ed 91       	ld	r30, X+
   18120:	fc 91       	ld	r31, X
   18122:	02 84       	ldd	r0, Z+10	; 0x0a
   18124:	f3 85       	ldd	r31, Z+11	; 0x0b
   18126:	e0 2d       	mov	r30, r0
   18128:	19 95       	eicall
   1812a:	f8 01       	movw	r30, r16
   1812c:	80 83       	st	Z, r24
   1812e:	81 e0       	ldi	r24, 0x01	; 1
   18130:	df 91       	pop	r29
   18132:	cf 91       	pop	r28
   18134:	1f 91       	pop	r17
   18136:	0f 91       	pop	r16
   18138:	ff 90       	pop	r15
   1813a:	ef 90       	pop	r14
   1813c:	df 90       	pop	r13
   1813e:	cf 90       	pop	r12
   18140:	08 95       	ret

00018142 <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   18142:	0f 93       	push	r16
   18144:	1f 93       	push	r17
   18146:	cf 93       	push	r28
   18148:	df 93       	push	r29
   1814a:	8a 01       	movw	r16, r20
   1814c:	fa 01       	movw	r30, r20
   1814e:	c0 81       	ld	r28, Z
   18150:	d1 81       	ldd	r29, Z+1	; 0x01
   18152:	6c 0f       	add	r22, r28
   18154:	7d 1f       	adc	r23, r29
   18156:	0e 94 66 c0 	call	0x180cc	; 0x180cc <PubSubClient::readByte(unsigned char*)>
   1815a:	88 23       	and	r24, r24
   1815c:	21 f0       	breq	.+8      	; 0x18166 <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   1815e:	21 96       	adiw	r28, 0x01	; 1
   18160:	f8 01       	movw	r30, r16
   18162:	d1 83       	std	Z+1, r29	; 0x01
   18164:	c0 83       	st	Z, r28
   18166:	df 91       	pop	r29
   18168:	cf 91       	pop	r28
   1816a:	1f 91       	pop	r17
   1816c:	0f 91       	pop	r16
   1816e:	08 95       	ret

00018170 <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   18170:	4f 92       	push	r4
   18172:	5f 92       	push	r5
   18174:	6f 92       	push	r6
   18176:	7f 92       	push	r7
   18178:	8f 92       	push	r8
   1817a:	9f 92       	push	r9
   1817c:	af 92       	push	r10
   1817e:	bf 92       	push	r11
   18180:	cf 92       	push	r12
   18182:	df 92       	push	r13
   18184:	ef 92       	push	r14
   18186:	ff 92       	push	r15
   18188:	0f 93       	push	r16
   1818a:	1f 93       	push	r17
   1818c:	cf 93       	push	r28
   1818e:	df 93       	push	r29
   18190:	00 d0       	rcall	.+0      	; 0x18192 <PubSubClient::readPacket(unsigned char*)+0x22>
   18192:	1f 92       	push	r1
   18194:	cd b7       	in	r28, 0x3d	; 61
   18196:	de b7       	in	r29, 0x3e	; 62
   18198:	8c 01       	movw	r16, r24
   1819a:	4b 01       	movw	r8, r22
   1819c:	1a 82       	std	Y+2, r1	; 0x02
   1819e:	19 82       	std	Y+1, r1	; 0x01
   181a0:	7c 01       	movw	r14, r24
   181a2:	22 e0       	ldi	r18, 0x02	; 2
   181a4:	e2 0e       	add	r14, r18
   181a6:	f1 1c       	adc	r15, r1
   181a8:	ae 01       	movw	r20, r28
   181aa:	4f 5f       	subi	r20, 0xFF	; 255
   181ac:	5f 4f       	sbci	r21, 0xFF	; 255
   181ae:	b7 01       	movw	r22, r14
   181b0:	0e 94 a1 c0 	call	0x18142	; 0x18142 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   181b4:	81 11       	cpse	r24, r1
   181b6:	17 c0       	rjmp	.+46     	; 0x181e6 <PubSubClient::readPacket(unsigned char*)+0x76>
   181b8:	90 e0       	ldi	r25, 0x00	; 0
   181ba:	80 e0       	ldi	r24, 0x00	; 0
   181bc:	0f 90       	pop	r0
   181be:	0f 90       	pop	r0
   181c0:	0f 90       	pop	r0
   181c2:	0f 90       	pop	r0
   181c4:	df 91       	pop	r29
   181c6:	cf 91       	pop	r28
   181c8:	1f 91       	pop	r17
   181ca:	0f 91       	pop	r16
   181cc:	ff 90       	pop	r15
   181ce:	ef 90       	pop	r14
   181d0:	df 90       	pop	r13
   181d2:	cf 90       	pop	r12
   181d4:	bf 90       	pop	r11
   181d6:	af 90       	pop	r10
   181d8:	9f 90       	pop	r9
   181da:	8f 90       	pop	r8
   181dc:	7f 90       	pop	r7
   181de:	6f 90       	pop	r6
   181e0:	5f 90       	pop	r5
   181e2:	4f 90       	pop	r4
   181e4:	08 95       	ret
   181e6:	d8 01       	movw	r26, r16
   181e8:	12 96       	adiw	r26, 0x02	; 2
   181ea:	dc 90       	ld	r13, X
   181ec:	1b 82       	std	Y+3, r1	; 0x03
   181ee:	b1 2c       	mov	r11, r1
   181f0:	a1 2c       	mov	r10, r1
   181f2:	41 2c       	mov	r4, r1
   181f4:	51 2c       	mov	r5, r1
   181f6:	32 01       	movw	r6, r4
   181f8:	43 94       	inc	r4
   181fa:	be 01       	movw	r22, r28
   181fc:	6d 5f       	subi	r22, 0xFD	; 253
   181fe:	7f 4f       	sbci	r23, 0xFF	; 255
   18200:	c8 01       	movw	r24, r16
   18202:	0e 94 66 c0 	call	0x180cc	; 0x180cc <PubSubClient::readByte(unsigned char*)>
   18206:	88 23       	and	r24, r24
   18208:	b9 f2       	breq	.-82     	; 0x181b8 <PubSubClient::readPacket(unsigned char*)+0x48>
   1820a:	29 81       	ldd	r18, Y+1	; 0x01
   1820c:	3a 81       	ldd	r19, Y+2	; 0x02
   1820e:	c9 01       	movw	r24, r18
   18210:	01 96       	adiw	r24, 0x01	; 1
   18212:	9a 83       	std	Y+2, r25	; 0x02
   18214:	89 83       	std	Y+1, r24	; 0x01
   18216:	4b 81       	ldd	r20, Y+3	; 0x03
   18218:	20 0f       	add	r18, r16
   1821a:	31 1f       	adc	r19, r17
   1821c:	f9 01       	movw	r30, r18
   1821e:	42 83       	std	Z+2, r20	; 0x02
   18220:	24 2f       	mov	r18, r20
   18222:	2f 77       	andi	r18, 0x7F	; 127
   18224:	30 e0       	ldi	r19, 0x00	; 0
   18226:	24 9d       	mul	r18, r4
   18228:	b0 01       	movw	r22, r0
   1822a:	25 9d       	mul	r18, r5
   1822c:	70 0d       	add	r23, r0
   1822e:	34 9d       	mul	r19, r4
   18230:	70 0d       	add	r23, r0
   18232:	11 24       	eor	r1, r1
   18234:	a6 0e       	add	r10, r22
   18236:	b7 1e       	adc	r11, r23
   18238:	97 e0       	ldi	r25, 0x07	; 7
   1823a:	44 0c       	add	r4, r4
   1823c:	55 1c       	adc	r5, r5
   1823e:	66 1c       	adc	r6, r6
   18240:	77 1c       	adc	r7, r7
   18242:	9a 95       	dec	r25
   18244:	d1 f7       	brne	.-12     	; 0x1823a <PubSubClient::readPacket(unsigned char*)+0xca>
   18246:	47 fd       	sbrc	r20, 7
   18248:	d8 cf       	rjmp	.-80     	; 0x181fa <PubSubClient::readPacket(unsigned char*)+0x8a>
   1824a:	fd 2d       	mov	r31, r13
   1824c:	f0 7f       	andi	r31, 0xF0	; 240
   1824e:	fc 83       	std	Y+4, r31	; 0x04
   18250:	81 50       	subi	r24, 0x01	; 1
   18252:	d4 01       	movw	r26, r8
   18254:	8c 93       	st	X, r24
   18256:	80 e0       	ldi	r24, 0x00	; 0
   18258:	d1 2c       	mov	r13, r1
   1825a:	c1 2c       	mov	r12, r1
   1825c:	f0 33       	cpi	r31, 0x30	; 48
   1825e:	41 f5       	brne	.+80     	; 0x182b0 <PubSubClient::readPacket(unsigned char*)+0x140>
   18260:	ae 01       	movw	r20, r28
   18262:	4f 5f       	subi	r20, 0xFF	; 255
   18264:	5f 4f       	sbci	r21, 0xFF	; 255
   18266:	b7 01       	movw	r22, r14
   18268:	c8 01       	movw	r24, r16
   1826a:	0e 94 a1 c0 	call	0x18142	; 0x18142 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1826e:	88 23       	and	r24, r24
   18270:	09 f4       	brne	.+2      	; 0x18274 <PubSubClient::readPacket(unsigned char*)+0x104>
   18272:	a2 cf       	rjmp	.-188    	; 0x181b8 <PubSubClient::readPacket(unsigned char*)+0x48>
   18274:	ae 01       	movw	r20, r28
   18276:	4f 5f       	subi	r20, 0xFF	; 255
   18278:	5f 4f       	sbci	r21, 0xFF	; 255
   1827a:	b7 01       	movw	r22, r14
   1827c:	c8 01       	movw	r24, r16
   1827e:	0e 94 a1 c0 	call	0x18142	; 0x18142 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   18282:	88 23       	and	r24, r24
   18284:	09 f4       	brne	.+2      	; 0x18288 <PubSubClient::readPacket(unsigned char*)+0x118>
   18286:	98 cf       	rjmp	.-208    	; 0x181b8 <PubSubClient::readPacket(unsigned char*)+0x48>
   18288:	d4 01       	movw	r26, r8
   1828a:	ec 91       	ld	r30, X
   1828c:	e0 0f       	add	r30, r16
   1828e:	f1 2f       	mov	r31, r17
   18290:	f1 1d       	adc	r31, r1
   18292:	c3 80       	ldd	r12, Z+3	; 0x03
   18294:	d1 2c       	mov	r13, r1
   18296:	dc 2c       	mov	r13, r12
   18298:	cc 24       	eor	r12, r12
   1829a:	84 81       	ldd	r24, Z+4	; 0x04
   1829c:	c8 0e       	add	r12, r24
   1829e:	d1 1c       	adc	r13, r1
   182a0:	f8 01       	movw	r30, r16
   182a2:	82 81       	ldd	r24, Z+2	; 0x02
   182a4:	81 ff       	sbrs	r24, 1
   182a6:	03 c0       	rjmp	.+6      	; 0x182ae <PubSubClient::readPacket(unsigned char*)+0x13e>
   182a8:	f2 e0       	ldi	r31, 0x02	; 2
   182aa:	cf 0e       	add	r12, r31
   182ac:	d1 1c       	adc	r13, r1
   182ae:	82 e0       	ldi	r24, 0x02	; 2
   182b0:	e8 2e       	mov	r14, r24
   182b2:	f1 2c       	mov	r15, r1
   182b4:	38 01       	movw	r6, r16
   182b6:	27 ee       	ldi	r18, 0xE7	; 231
   182b8:	62 1a       	sub	r6, r18
   182ba:	2d ef       	ldi	r18, 0xFD	; 253
   182bc:	72 0a       	sbc	r7, r18
   182be:	ea 14       	cp	r14, r10
   182c0:	fb 04       	cpc	r15, r11
   182c2:	b0 f5       	brcc	.+108    	; 0x18330 <PubSubClient::readPacket(unsigned char*)+0x1c0>
   182c4:	be 01       	movw	r22, r28
   182c6:	6d 5f       	subi	r22, 0xFD	; 253
   182c8:	7f 4f       	sbci	r23, 0xFF	; 255
   182ca:	c8 01       	movw	r24, r16
   182cc:	0e 94 66 c0 	call	0x180cc	; 0x180cc <PubSubClient::readByte(unsigned char*)>
   182d0:	88 23       	and	r24, r24
   182d2:	09 f4       	brne	.+2      	; 0x182d6 <PubSubClient::readPacket(unsigned char*)+0x166>
   182d4:	71 cf       	rjmp	.-286    	; 0x181b8 <PubSubClient::readPacket(unsigned char*)+0x48>
   182d6:	d3 01       	movw	r26, r6
   182d8:	8d 91       	ld	r24, X+
   182da:	9c 91       	ld	r25, X
   182dc:	00 97       	sbiw	r24, 0x00	; 0
   182de:	b1 f0       	breq	.+44     	; 0x1830c <PubSubClient::readPacket(unsigned char*)+0x19c>
   182e0:	bc 81       	ldd	r27, Y+4	; 0x04
   182e2:	b0 33       	cpi	r27, 0x30	; 48
   182e4:	99 f4       	brne	.+38     	; 0x1830c <PubSubClient::readPacket(unsigned char*)+0x19c>
   182e6:	29 81       	ldd	r18, Y+1	; 0x01
   182e8:	3a 81       	ldd	r19, Y+2	; 0x02
   182ea:	22 50       	subi	r18, 0x02	; 2
   182ec:	31 09       	sbc	r19, r1
   182ee:	f4 01       	movw	r30, r8
   182f0:	40 81       	ld	r20, Z
   182f2:	24 1b       	sub	r18, r20
   182f4:	31 09       	sbc	r19, r1
   182f6:	c2 16       	cp	r12, r18
   182f8:	d3 06       	cpc	r13, r19
   182fa:	40 f4       	brcc	.+16     	; 0x1830c <PubSubClient::readPacket(unsigned char*)+0x19c>
   182fc:	dc 01       	movw	r26, r24
   182fe:	ed 91       	ld	r30, X+
   18300:	fc 91       	ld	r31, X
   18302:	01 90       	ld	r0, Z+
   18304:	f0 81       	ld	r31, Z
   18306:	e0 2d       	mov	r30, r0
   18308:	6b 81       	ldd	r22, Y+3	; 0x03
   1830a:	19 95       	eicall
   1830c:	89 81       	ldd	r24, Y+1	; 0x01
   1830e:	9a 81       	ldd	r25, Y+2	; 0x02
   18310:	81 15       	cp	r24, r1
   18312:	b2 e0       	ldi	r27, 0x02	; 2
   18314:	9b 07       	cpc	r25, r27
   18316:	28 f4       	brcc	.+10     	; 0x18322 <PubSubClient::readPacket(unsigned char*)+0x1b2>
   18318:	2b 81       	ldd	r18, Y+3	; 0x03
   1831a:	f8 01       	movw	r30, r16
   1831c:	e8 0f       	add	r30, r24
   1831e:	f9 1f       	adc	r31, r25
   18320:	22 83       	std	Z+2, r18	; 0x02
   18322:	01 96       	adiw	r24, 0x01	; 1
   18324:	9a 83       	std	Y+2, r25	; 0x02
   18326:	89 83       	std	Y+1, r24	; 0x01
   18328:	ef ef       	ldi	r30, 0xFF	; 255
   1832a:	ee 1a       	sub	r14, r30
   1832c:	fe 0a       	sbc	r15, r30
   1832e:	c7 cf       	rjmp	.-114    	; 0x182be <PubSubClient::readPacket(unsigned char*)+0x14e>
   18330:	f8 01       	movw	r30, r16
   18332:	e7 5e       	subi	r30, 0xE7	; 231
   18334:	fd 4f       	sbci	r31, 0xFD	; 253
   18336:	80 81       	ld	r24, Z
   18338:	91 81       	ldd	r25, Z+1	; 0x01
   1833a:	89 2b       	or	r24, r25
   1833c:	39 f4       	brne	.+14     	; 0x1834c <PubSubClient::readPacket(unsigned char*)+0x1dc>
   1833e:	89 81       	ldd	r24, Y+1	; 0x01
   18340:	9a 81       	ldd	r25, Y+2	; 0x02
   18342:	81 30       	cpi	r24, 0x01	; 1
   18344:	92 40       	sbci	r25, 0x02	; 2
   18346:	10 f0       	brcs	.+4      	; 0x1834c <PubSubClient::readPacket(unsigned char*)+0x1dc>
   18348:	1a 82       	std	Y+2, r1	; 0x02
   1834a:	19 82       	std	Y+1, r1	; 0x01
   1834c:	89 81       	ldd	r24, Y+1	; 0x01
   1834e:	9a 81       	ldd	r25, Y+2	; 0x02
   18350:	35 cf       	rjmp	.-406    	; 0x181bc <PubSubClient::readPacket(unsigned char*)+0x4c>

00018352 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   18352:	bf 92       	push	r11
   18354:	cf 92       	push	r12
   18356:	df 92       	push	r13
   18358:	ef 92       	push	r14
   1835a:	ff 92       	push	r15
   1835c:	0f 93       	push	r16
   1835e:	1f 93       	push	r17
   18360:	cf 93       	push	r28
   18362:	df 93       	push	r29
   18364:	00 d0       	rcall	.+0      	; 0x18366 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   18366:	1f 92       	push	r1
   18368:	cd b7       	in	r28, 0x3d	; 61
   1836a:	de b7       	in	r29, 0x3e	; 62
   1836c:	7c 01       	movw	r14, r24
   1836e:	b6 2e       	mov	r11, r22
   18370:	89 01       	movw	r16, r18
   18372:	c9 01       	movw	r24, r18
   18374:	30 e0       	ldi	r19, 0x00	; 0
   18376:	be 01       	movw	r22, r28
   18378:	6f 5f       	subi	r22, 0xFF	; 255
   1837a:	7f 4f       	sbci	r23, 0xFF	; 255
   1837c:	6b 01       	movw	r12, r22
   1837e:	28 2f       	mov	r18, r24
   18380:	2f 77       	andi	r18, 0x7F	; 127
   18382:	88 0f       	add	r24, r24
   18384:	89 2f       	mov	r24, r25
   18386:	88 1f       	adc	r24, r24
   18388:	99 0b       	sbc	r25, r25
   1838a:	91 95       	neg	r25
   1838c:	00 97       	sbiw	r24, 0x00	; 0
   1838e:	09 f0       	breq	.+2      	; 0x18392 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
   18390:	20 68       	ori	r18, 0x80	; 128
   18392:	f6 01       	movw	r30, r12
   18394:	e3 0f       	add	r30, r19
   18396:	f1 1d       	adc	r31, r1
   18398:	20 83       	st	Z, r18
   1839a:	3f 5f       	subi	r19, 0xFF	; 255
   1839c:	00 97       	sbiw	r24, 0x00	; 0
   1839e:	79 f7       	brne	.-34     	; 0x1837e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
   183a0:	e3 2f       	mov	r30, r19
   183a2:	f0 e0       	ldi	r31, 0x00	; 0
   183a4:	ba 01       	movw	r22, r20
   183a6:	6e 1b       	sub	r22, r30
   183a8:	7f 0b       	sbc	r23, r31
   183aa:	6c 5f       	subi	r22, 0xFC	; 252
   183ac:	7f 4f       	sbci	r23, 0xFF	; 255
   183ae:	db 01       	movw	r26, r22
   183b0:	bc 92       	st	X, r11
   183b2:	4e 1b       	sub	r20, r30
   183b4:	5f 0b       	sbc	r21, r31
   183b6:	4b 5f       	subi	r20, 0xFB	; 251
   183b8:	5f 4f       	sbci	r21, 0xFF	; 255
   183ba:	c6 01       	movw	r24, r12
   183bc:	9c 01       	movw	r18, r24
   183be:	2c 19       	sub	r18, r12
   183c0:	3d 09       	sbc	r19, r13
   183c2:	2e 17       	cp	r18, r30
   183c4:	3f 07       	cpc	r19, r31
   183c6:	3c f4       	brge	.+14     	; 0x183d6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
   183c8:	dc 01       	movw	r26, r24
   183ca:	2d 91       	ld	r18, X+
   183cc:	cd 01       	movw	r24, r26
   183ce:	da 01       	movw	r26, r20
   183d0:	2d 93       	st	X+, r18
   183d2:	ad 01       	movw	r20, r26
   183d4:	f3 cf       	rjmp	.-26     	; 0x183bc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
   183d6:	d7 01       	movw	r26, r14
   183d8:	8d 91       	ld	r24, X+
   183da:	9c 91       	ld	r25, X
   183dc:	0f 5f       	subi	r16, 0xFF	; 255
   183de:	1f 4f       	sbci	r17, 0xFF	; 255
   183e0:	0e 0f       	add	r16, r30
   183e2:	1f 1f       	adc	r17, r31
   183e4:	dc 01       	movw	r26, r24
   183e6:	ed 91       	ld	r30, X+
   183e8:	fc 91       	ld	r31, X
   183ea:	02 80       	ldd	r0, Z+2	; 0x02
   183ec:	f3 81       	ldd	r31, Z+3	; 0x03
   183ee:	e0 2d       	mov	r30, r0
   183f0:	a8 01       	movw	r20, r16
   183f2:	19 95       	eicall
   183f4:	6c 01       	movw	r12, r24
   183f6:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   183fa:	f7 01       	movw	r30, r14
   183fc:	ec 5f       	subi	r30, 0xFC	; 252
   183fe:	fd 4f       	sbci	r31, 0xFD	; 253
   18400:	60 83       	st	Z, r22
   18402:	71 83       	std	Z+1, r23	; 0x01
   18404:	82 83       	std	Z+2, r24	; 0x02
   18406:	93 83       	std	Z+3, r25	; 0x03
   18408:	81 e0       	ldi	r24, 0x01	; 1
   1840a:	0c 15       	cp	r16, r12
   1840c:	1d 05       	cpc	r17, r13
   1840e:	09 f0       	breq	.+2      	; 0x18412 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   18410:	80 e0       	ldi	r24, 0x00	; 0
   18412:	0f 90       	pop	r0
   18414:	0f 90       	pop	r0
   18416:	0f 90       	pop	r0
   18418:	0f 90       	pop	r0
   1841a:	df 91       	pop	r29
   1841c:	cf 91       	pop	r28
   1841e:	1f 91       	pop	r17
   18420:	0f 91       	pop	r16
   18422:	ff 90       	pop	r15
   18424:	ef 90       	pop	r14
   18426:	df 90       	pop	r13
   18428:	cf 90       	pop	r12
   1842a:	bf 90       	pop	r11
   1842c:	08 95       	ret

0001842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   1842e:	cf 93       	push	r28
   18430:	df 93       	push	r29
   18432:	eb 01       	movw	r28, r22
   18434:	f9 01       	movw	r30, r18
   18436:	32 96       	adiw	r30, 0x02	; 2
   18438:	e4 0f       	add	r30, r20
   1843a:	f5 1f       	adc	r31, r21
   1843c:	db 01       	movw	r26, r22
   1843e:	9d 01       	movw	r18, r26
   18440:	2c 1b       	sub	r18, r28
   18442:	3d 0b       	sbc	r19, r29
   18444:	cf 01       	movw	r24, r30
   18446:	84 1b       	sub	r24, r20
   18448:	95 0b       	sbc	r25, r21
   1844a:	7d 91       	ld	r23, X+
   1844c:	77 23       	and	r23, r23
   1844e:	11 f0       	breq	.+4      	; 0x18454 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   18450:	71 93       	st	Z+, r23
   18452:	f5 cf       	rjmp	.-22     	; 0x1843e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   18454:	bc 01       	movw	r22, r24
   18456:	62 1b       	sub	r22, r18
   18458:	73 0b       	sbc	r23, r19
   1845a:	46 0f       	add	r20, r22
   1845c:	57 1f       	adc	r21, r23
   1845e:	fa 01       	movw	r30, r20
   18460:	32 97       	sbiw	r30, 0x02	; 2
   18462:	30 83       	st	Z, r19
   18464:	41 50       	subi	r20, 0x01	; 1
   18466:	51 09       	sbc	r21, r1
   18468:	fa 01       	movw	r30, r20
   1846a:	20 83       	st	Z, r18
   1846c:	df 91       	pop	r29
   1846e:	cf 91       	pop	r28
   18470:	08 95       	ret

00018472 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   18472:	cf 93       	push	r28
   18474:	df 93       	push	r29
   18476:	fc 01       	movw	r30, r24
   18478:	a0 81       	ld	r26, Z
   1847a:	b1 81       	ldd	r27, Z+1	; 0x01
   1847c:	10 97       	sbiw	r26, 0x00	; 0
   1847e:	21 f4       	brne	.+8      	; 0x18488 <PubSubClient::connected()+0x16>
   18480:	80 e0       	ldi	r24, 0x00	; 0
   18482:	df 91       	pop	r29
   18484:	cf 91       	pop	r28
   18486:	08 95       	ret
   18488:	ec 01       	movw	r28, r24
   1848a:	ed 91       	ld	r30, X+
   1848c:	fc 91       	ld	r31, X
   1848e:	11 97       	sbiw	r26, 0x01	; 1
   18490:	06 88       	ldd	r0, Z+22	; 0x16
   18492:	f7 89       	ldd	r31, Z+23	; 0x17
   18494:	e0 2d       	mov	r30, r0
   18496:	cd 01       	movw	r24, r26
   18498:	19 95       	eicall
   1849a:	81 11       	cpse	r24, r1
   1849c:	1e c0       	rjmp	.+60     	; 0x184da <PubSubClient::connected()+0x68>
   1849e:	fe 01       	movw	r30, r28
   184a0:	e5 5e       	subi	r30, 0xE5	; 229
   184a2:	fd 4f       	sbci	r31, 0xFD	; 253
   184a4:	80 81       	ld	r24, Z
   184a6:	91 81       	ldd	r25, Z+1	; 0x01
   184a8:	89 2b       	or	r24, r25
   184aa:	51 f7       	brne	.-44     	; 0x18480 <PubSubClient::connected()+0xe>
   184ac:	8d ef       	ldi	r24, 0xFD	; 253
   184ae:	9f ef       	ldi	r25, 0xFF	; 255
   184b0:	91 83       	std	Z+1, r25	; 0x01
   184b2:	80 83       	st	Z, r24
   184b4:	88 81       	ld	r24, Y
   184b6:	99 81       	ldd	r25, Y+1	; 0x01
   184b8:	dc 01       	movw	r26, r24
   184ba:	ed 91       	ld	r30, X+
   184bc:	fc 91       	ld	r31, X
   184be:	06 80       	ldd	r0, Z+6	; 0x06
   184c0:	f7 81       	ldd	r31, Z+7	; 0x07
   184c2:	e0 2d       	mov	r30, r0
   184c4:	19 95       	eicall
   184c6:	88 81       	ld	r24, Y
   184c8:	99 81       	ldd	r25, Y+1	; 0x01
   184ca:	dc 01       	movw	r26, r24
   184cc:	ed 91       	ld	r30, X+
   184ce:	fc 91       	ld	r31, X
   184d0:	04 88       	ldd	r0, Z+20	; 0x14
   184d2:	f5 89       	ldd	r31, Z+21	; 0x15
   184d4:	e0 2d       	mov	r30, r0
   184d6:	19 95       	eicall
   184d8:	d3 cf       	rjmp	.-90     	; 0x18480 <PubSubClient::connected()+0xe>
   184da:	81 e0       	ldi	r24, 0x01	; 1
   184dc:	d2 cf       	rjmp	.-92     	; 0x18482 <PubSubClient::connected()+0x10>

000184de <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   184de:	2f 92       	push	r2
   184e0:	3f 92       	push	r3
   184e2:	4f 92       	push	r4
   184e4:	5f 92       	push	r5
   184e6:	6f 92       	push	r6
   184e8:	7f 92       	push	r7
   184ea:	8f 92       	push	r8
   184ec:	9f 92       	push	r9
   184ee:	af 92       	push	r10
   184f0:	bf 92       	push	r11
   184f2:	cf 92       	push	r12
   184f4:	df 92       	push	r13
   184f6:	ef 92       	push	r14
   184f8:	ff 92       	push	r15
   184fa:	0f 93       	push	r16
   184fc:	1f 93       	push	r17
   184fe:	cf 93       	push	r28
   18500:	df 93       	push	r29
   18502:	cd b7       	in	r28, 0x3d	; 61
   18504:	de b7       	in	r29, 0x3e	; 62
   18506:	2e 97       	sbiw	r28, 0x0e	; 14
   18508:	0f b6       	in	r0, 0x3f	; 63
   1850a:	f8 94       	cli
   1850c:	de bf       	out	0x3e, r29	; 62
   1850e:	0f be       	out	0x3f, r0	; 63
   18510:	cd bf       	out	0x3d, r28	; 61
   18512:	4c 01       	movw	r8, r24
   18514:	1b 01       	movw	r2, r22
   18516:	2a 01       	movw	r4, r20
   18518:	39 01       	movw	r6, r18
   1851a:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   1851e:	d8 2e       	mov	r13, r24
   18520:	81 11       	cpse	r24, r1
   18522:	08 c1       	rjmp	.+528    	; 0x18734 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   18524:	f4 01       	movw	r30, r8
   18526:	eb 5e       	subi	r30, 0xEB	; 235
   18528:	fd 4f       	sbci	r31, 0xFD	; 253
   1852a:	60 81       	ld	r22, Z
   1852c:	71 81       	ldd	r23, Z+1	; 0x01
   1852e:	d4 01       	movw	r26, r8
   18530:	8d 91       	ld	r24, X+
   18532:	9c 91       	ld	r25, X
   18534:	dc 01       	movw	r26, r24
   18536:	ed 91       	ld	r30, X+
   18538:	fc 91       	ld	r31, X
   1853a:	d4 01       	movw	r26, r8
   1853c:	a9 5e       	subi	r26, 0xE9	; 233
   1853e:	bd 4f       	sbci	r27, 0xFD	; 253
   18540:	2d 91       	ld	r18, X+
   18542:	3c 91       	ld	r19, X
   18544:	3e 87       	std	Y+14, r19	; 0x0e
   18546:	2d 87       	std	Y+13, r18	; 0x0d
   18548:	61 15       	cp	r22, r1
   1854a:	71 05       	cpc	r23, r1
   1854c:	09 f4       	brne	.+2      	; 0x18550 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x72>
   1854e:	b5 c0       	rjmp	.+362    	; 0x186ba <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1dc>
   18550:	00 88       	ldd	r0, Z+16	; 0x10
   18552:	f1 89       	ldd	r31, Z+17	; 0x11
   18554:	e0 2d       	mov	r30, r0
   18556:	a9 01       	movw	r20, r18
   18558:	19 95       	eicall
   1855a:	f4 01       	movw	r30, r8
   1855c:	81 30       	cpi	r24, 0x01	; 1
   1855e:	91 05       	cpc	r25, r1
   18560:	09 f0       	breq	.+2      	; 0x18564 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x86>
   18562:	0a c1       	rjmp	.+532    	; 0x18778 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x29a>
   18564:	ee 5f       	subi	r30, 0xFE	; 254
   18566:	fd 4f       	sbci	r31, 0xFD	; 253
   18568:	91 83       	std	Z+1, r25	; 0x01
   1856a:	80 83       	st	Z, r24
   1856c:	87 e0       	ldi	r24, 0x07	; 7
   1856e:	ed e8       	ldi	r30, 0x8D	; 141
   18570:	f2 e0       	ldi	r31, 0x02	; 2
   18572:	de 01       	movw	r26, r28
   18574:	11 96       	adiw	r26, 0x01	; 1
   18576:	01 90       	ld	r0, Z+
   18578:	0d 92       	st	X+, r0
   1857a:	8a 95       	dec	r24
   1857c:	e1 f7       	brne	.-8      	; 0x18576 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x98>
   1857e:	fe 01       	movw	r30, r28
   18580:	31 96       	adiw	r30, 0x01	; 1
   18582:	d4 01       	movw	r26, r8
   18584:	17 96       	adiw	r26, 0x07	; 7
   18586:	c4 01       	movw	r24, r8
   18588:	0e 96       	adiw	r24, 0x0e	; 14
   1858a:	21 91       	ld	r18, Z+
   1858c:	2d 93       	st	X+, r18
   1858e:	8a 17       	cp	r24, r26
   18590:	9b 07       	cpc	r25, r27
   18592:	d9 f7       	brne	.-10     	; 0x1858a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xac>
   18594:	82 e0       	ldi	r24, 0x02	; 2
   18596:	01 15       	cp	r16, r1
   18598:	11 05       	cpc	r17, r1
   1859a:	51 f0       	breq	.+20     	; 0x185b0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xd2>
   1859c:	30 e2       	ldi	r19, 0x20	; 32
   1859e:	c3 9e       	mul	r12, r19
   185a0:	c0 01       	movw	r24, r0
   185a2:	11 24       	eor	r1, r1
   185a4:	86 60       	ori	r24, 0x06	; 6
   185a6:	48 e0       	ldi	r20, 0x08	; 8
   185a8:	e4 9e       	mul	r14, r20
   185aa:	70 01       	movw	r14, r0
   185ac:	11 24       	eor	r1, r1
   185ae:	8e 29       	or	r24, r14
   185b0:	41 14       	cp	r4, r1
   185b2:	51 04       	cpc	r5, r1
   185b4:	29 f0       	breq	.+10     	; 0x185c0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   185b6:	61 14       	cp	r6, r1
   185b8:	71 04       	cpc	r7, r1
   185ba:	09 f0       	breq	.+2      	; 0x185be <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe0>
   185bc:	98 c0       	rjmp	.+304    	; 0x186ee <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x210>
   185be:	80 68       	ori	r24, 0x80	; 128
   185c0:	d4 01       	movw	r26, r8
   185c2:	1e 96       	adiw	r26, 0x0e	; 14
   185c4:	8c 93       	st	X, r24
   185c6:	1e 97       	sbiw	r26, 0x0e	; 14
   185c8:	1f 96       	adiw	r26, 0x0f	; 15
   185ca:	1c 92       	st	X, r1
   185cc:	1f 97       	sbiw	r26, 0x0f	; 15
   185ce:	8f e0       	ldi	r24, 0x0F	; 15
   185d0:	50 96       	adiw	r26, 0x10	; 16
   185d2:	8c 93       	st	X, r24
   185d4:	74 01       	movw	r14, r8
   185d6:	b2 e0       	ldi	r27, 0x02	; 2
   185d8:	eb 0e       	add	r14, r27
   185da:	f1 1c       	adc	r15, r1
   185dc:	2f e0       	ldi	r18, 0x0F	; 15
   185de:	30 e0       	ldi	r19, 0x00	; 0
   185e0:	a7 01       	movw	r20, r14
   185e2:	b1 01       	movw	r22, r2
   185e4:	c4 01       	movw	r24, r8
   185e6:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   185ea:	01 15       	cp	r16, r1
   185ec:	11 05       	cpc	r17, r1
   185ee:	61 f0       	breq	.+24     	; 0x18608 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x12a>
   185f0:	9c 01       	movw	r18, r24
   185f2:	a7 01       	movw	r20, r14
   185f4:	b8 01       	movw	r22, r16
   185f6:	c4 01       	movw	r24, r8
   185f8:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   185fc:	9c 01       	movw	r18, r24
   185fe:	a7 01       	movw	r20, r14
   18600:	b5 01       	movw	r22, r10
   18602:	c4 01       	movw	r24, r8
   18604:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18608:	41 14       	cp	r4, r1
   1860a:	51 04       	cpc	r5, r1
   1860c:	79 f0       	breq	.+30     	; 0x1862c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   1860e:	9c 01       	movw	r18, r24
   18610:	a7 01       	movw	r20, r14
   18612:	b2 01       	movw	r22, r4
   18614:	c4 01       	movw	r24, r8
   18616:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1861a:	61 14       	cp	r6, r1
   1861c:	71 04       	cpc	r7, r1
   1861e:	31 f0       	breq	.+12     	; 0x1862c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   18620:	9c 01       	movw	r18, r24
   18622:	a7 01       	movw	r20, r14
   18624:	b3 01       	movw	r22, r6
   18626:	c4 01       	movw	r24, r8
   18628:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1862c:	9c 01       	movw	r18, r24
   1862e:	25 50       	subi	r18, 0x05	; 5
   18630:	31 09       	sbc	r19, r1
   18632:	a7 01       	movw	r20, r14
   18634:	60 e1       	ldi	r22, 0x10	; 16
   18636:	c4 01       	movw	r24, r8
   18638:	0e 94 a9 c1 	call	0x18352	; 0x18352 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1863c:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   18640:	f4 01       	movw	r30, r8
   18642:	ec 5f       	subi	r30, 0xFC	; 252
   18644:	fd 4f       	sbci	r31, 0xFD	; 253
   18646:	60 83       	st	Z, r22
   18648:	71 83       	std	Z+1, r23	; 0x01
   1864a:	82 83       	std	Z+2, r24	; 0x02
   1864c:	93 83       	std	Z+3, r25	; 0x03
   1864e:	84 01       	movw	r16, r8
   18650:	08 5f       	subi	r16, 0xF8	; 248
   18652:	1d 4f       	sbci	r17, 0xFD	; 253
   18654:	f8 01       	movw	r30, r16
   18656:	60 83       	st	Z, r22
   18658:	71 83       	std	Z+1, r23	; 0x01
   1865a:	82 83       	std	Z+2, r24	; 0x02
   1865c:	93 83       	std	Z+3, r25	; 0x03
   1865e:	d4 01       	movw	r26, r8
   18660:	8d 91       	ld	r24, X+
   18662:	9c 91       	ld	r25, X
   18664:	dc 01       	movw	r26, r24
   18666:	ed 91       	ld	r30, X+
   18668:	fc 91       	ld	r31, X
   1866a:	00 84       	ldd	r0, Z+8	; 0x08
   1866c:	f1 85       	ldd	r31, Z+9	; 0x09
   1866e:	e0 2d       	mov	r30, r0
   18670:	19 95       	eicall
   18672:	89 2b       	or	r24, r25
   18674:	f1 f5       	brne	.+124    	; 0x186f2 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x214>
   18676:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1867a:	f8 01       	movw	r30, r16
   1867c:	40 80       	ld	r4, Z
   1867e:	51 80       	ldd	r5, Z+1	; 0x01
   18680:	62 80       	ldd	r6, Z+2	; 0x02
   18682:	73 80       	ldd	r7, Z+3	; 0x03
   18684:	64 19       	sub	r22, r4
   18686:	75 09       	sbc	r23, r5
   18688:	86 09       	sbc	r24, r6
   1868a:	97 09       	sbc	r25, r7
   1868c:	62 33       	cpi	r22, 0x32	; 50
   1868e:	71 05       	cpc	r23, r1
   18690:	81 05       	cpc	r24, r1
   18692:	91 05       	cpc	r25, r1
   18694:	20 f3       	brcs	.-56     	; 0x1865e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x180>
   18696:	f4 01       	movw	r30, r8
   18698:	e5 5e       	subi	r30, 0xE5	; 229
   1869a:	fd 4f       	sbci	r31, 0xFD	; 253
   1869c:	8c ef       	ldi	r24, 0xFC	; 252
   1869e:	9f ef       	ldi	r25, 0xFF	; 255
   186a0:	91 83       	std	Z+1, r25	; 0x01
   186a2:	80 83       	st	Z, r24
   186a4:	d4 01       	movw	r26, r8
   186a6:	8d 91       	ld	r24, X+
   186a8:	9c 91       	ld	r25, X
   186aa:	dc 01       	movw	r26, r24
   186ac:	ed 91       	ld	r30, X+
   186ae:	fc 91       	ld	r31, X
   186b0:	04 88       	ldd	r0, Z+20	; 0x14
   186b2:	f5 89       	ldd	r31, Z+21	; 0x15
   186b4:	e0 2d       	mov	r30, r0
   186b6:	19 95       	eicall
   186b8:	3d c0       	rjmp	.+122    	; 0x18734 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   186ba:	06 84       	ldd	r0, Z+14	; 0x0e
   186bc:	f7 85       	ldd	r31, Z+15	; 0x0f
   186be:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   186c0:	23 e5       	ldi	r18, 0x53	; 83
   186c2:	39 e0       	ldi	r19, 0x09	; 9
   186c4:	3a 83       	std	Y+2, r19	; 0x02
   186c6:	29 83       	std	Y+1, r18	; 0x01
   186c8:	d4 01       	movw	r26, r8
   186ca:	a1 5f       	subi	r26, 0xF1	; 241
   186cc:	bd 4f       	sbci	r27, 0xFD	; 253
   186ce:	12 96       	adiw	r26, 0x02	; 2
   186d0:	2d 91       	ld	r18, X+
   186d2:	3d 91       	ld	r19, X+
   186d4:	4d 91       	ld	r20, X+
   186d6:	5c 91       	ld	r21, X
   186d8:	15 97       	sbiw	r26, 0x05	; 5
   186da:	2b 83       	std	Y+3, r18	; 0x03
   186dc:	3c 83       	std	Y+4, r19	; 0x04
   186de:	4d 83       	std	Y+5, r20	; 0x05
   186e0:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   186e2:	4d 85       	ldd	r20, Y+13	; 0x0d
   186e4:	5e 85       	ldd	r21, Y+14	; 0x0e
   186e6:	be 01       	movw	r22, r28
   186e8:	6f 5f       	subi	r22, 0xFF	; 255
   186ea:	7f 4f       	sbci	r23, 0xFF	; 255
   186ec:	35 cf       	rjmp	.-406    	; 0x18558 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x7a>
   186ee:	80 6c       	ori	r24, 0xC0	; 192
   186f0:	67 cf       	rjmp	.-306    	; 0x185c0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   186f2:	be 01       	movw	r22, r28
   186f4:	68 5f       	subi	r22, 0xF8	; 248
   186f6:	7f 4f       	sbci	r23, 0xFF	; 255
   186f8:	c4 01       	movw	r24, r8
   186fa:	0e 94 b8 c0 	call	0x18170	; 0x18170 <PubSubClient::readPacket(unsigned char*)>
   186fe:	04 97       	sbiw	r24, 0x04	; 4
   18700:	b9 f5       	brne	.+110    	; 0x18770 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x292>
   18702:	f4 01       	movw	r30, r8
   18704:	85 81       	ldd	r24, Z+5	; 0x05
   18706:	94 01       	movw	r18, r8
   18708:	25 5e       	subi	r18, 0xE5	; 229
   1870a:	3d 4f       	sbci	r19, 0xFD	; 253
   1870c:	79 01       	movw	r14, r18
   1870e:	81 11       	cpse	r24, r1
   18710:	2b c0       	rjmp	.+86     	; 0x18768 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x28a>
   18712:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   18716:	d8 01       	movw	r26, r16
   18718:	6d 93       	st	X+, r22
   1871a:	7d 93       	st	X+, r23
   1871c:	8d 93       	st	X+, r24
   1871e:	9c 93       	st	X, r25
   18720:	13 97       	sbiw	r26, 0x03	; 3
   18722:	f4 01       	movw	r30, r8
   18724:	e4 5f       	subi	r30, 0xF4	; 244
   18726:	fd 4f       	sbci	r31, 0xFD	; 253
   18728:	10 82       	st	Z, r1
   1872a:	f7 01       	movw	r30, r14
   1872c:	11 82       	std	Z+1, r1	; 0x01
   1872e:	10 82       	st	Z, r1
   18730:	dd 24       	eor	r13, r13
   18732:	d3 94       	inc	r13
   18734:	8d 2d       	mov	r24, r13
   18736:	2e 96       	adiw	r28, 0x0e	; 14
   18738:	0f b6       	in	r0, 0x3f	; 63
   1873a:	f8 94       	cli
   1873c:	de bf       	out	0x3e, r29	; 62
   1873e:	0f be       	out	0x3f, r0	; 63
   18740:	cd bf       	out	0x3d, r28	; 61
   18742:	df 91       	pop	r29
   18744:	cf 91       	pop	r28
   18746:	1f 91       	pop	r17
   18748:	0f 91       	pop	r16
   1874a:	ff 90       	pop	r15
   1874c:	ef 90       	pop	r14
   1874e:	df 90       	pop	r13
   18750:	cf 90       	pop	r12
   18752:	bf 90       	pop	r11
   18754:	af 90       	pop	r10
   18756:	9f 90       	pop	r9
   18758:	8f 90       	pop	r8
   1875a:	7f 90       	pop	r7
   1875c:	6f 90       	pop	r6
   1875e:	5f 90       	pop	r5
   18760:	4f 90       	pop	r4
   18762:	3f 90       	pop	r3
   18764:	2f 90       	pop	r2
   18766:	08 95       	ret
   18768:	90 e0       	ldi	r25, 0x00	; 0
   1876a:	d9 01       	movw	r26, r18
   1876c:	8d 93       	st	X+, r24
   1876e:	9c 93       	st	X, r25
   18770:	f4 01       	movw	r30, r8
   18772:	80 81       	ld	r24, Z
   18774:	91 81       	ldd	r25, Z+1	; 0x01
   18776:	99 cf       	rjmp	.-206    	; 0x186aa <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1cc>
   18778:	e5 5e       	subi	r30, 0xE5	; 229
   1877a:	fd 4f       	sbci	r31, 0xFD	; 253
   1877c:	8e ef       	ldi	r24, 0xFE	; 254
   1877e:	9f ef       	ldi	r25, 0xFF	; 255
   18780:	91 83       	std	Z+1, r25	; 0x01
   18782:	80 83       	st	Z, r24
   18784:	d7 cf       	rjmp	.-82     	; 0x18734 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>

00018786 <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   18786:	af 92       	push	r10
   18788:	bf 92       	push	r11
   1878a:	cf 92       	push	r12
   1878c:	ef 92       	push	r14
   1878e:	0f 93       	push	r16
   18790:	1f 93       	push	r17
   18792:	b1 2c       	mov	r11, r1
   18794:	a1 2c       	mov	r10, r1
   18796:	c1 2c       	mov	r12, r1
   18798:	e1 2c       	mov	r14, r1
   1879a:	10 e0       	ldi	r17, 0x00	; 0
   1879c:	00 e0       	ldi	r16, 0x00	; 0
   1879e:	30 e0       	ldi	r19, 0x00	; 0
   187a0:	20 e0       	ldi	r18, 0x00	; 0
   187a2:	50 e0       	ldi	r21, 0x00	; 0
   187a4:	40 e0       	ldi	r20, 0x00	; 0
   187a6:	0e 94 6f c2 	call	0x184de	; 0x184de <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>
   187aa:	1f 91       	pop	r17
   187ac:	0f 91       	pop	r16
   187ae:	ef 90       	pop	r14
   187b0:	cf 90       	pop	r12
   187b2:	bf 90       	pop	r11
   187b4:	af 90       	pop	r10
   187b6:	08 95       	ret

000187b8 <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   187b8:	2f 92       	push	r2
   187ba:	3f 92       	push	r3
   187bc:	4f 92       	push	r4
   187be:	5f 92       	push	r5
   187c0:	6f 92       	push	r6
   187c2:	7f 92       	push	r7
   187c4:	8f 92       	push	r8
   187c6:	9f 92       	push	r9
   187c8:	af 92       	push	r10
   187ca:	bf 92       	push	r11
   187cc:	cf 92       	push	r12
   187ce:	df 92       	push	r13
   187d0:	ef 92       	push	r14
   187d2:	ff 92       	push	r15
   187d4:	0f 93       	push	r16
   187d6:	1f 93       	push	r17
   187d8:	cf 93       	push	r28
   187da:	df 93       	push	r29
   187dc:	00 d0       	rcall	.+0      	; 0x187de <PubSubClient::loop()+0x26>
   187de:	1f 92       	push	r1
   187e0:	1f 92       	push	r1
   187e2:	cd b7       	in	r28, 0x3d	; 61
   187e4:	de b7       	in	r29, 0x3e	; 62
   187e6:	8c 01       	movw	r16, r24
   187e8:	2d b7       	in	r18, 0x3d	; 61
   187ea:	3e b7       	in	r19, 0x3e	; 62
   187ec:	3d 83       	std	Y+5, r19	; 0x05
   187ee:	2c 83       	std	Y+4, r18	; 0x04
   187f0:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   187f4:	58 2e       	mov	r5, r24
   187f6:	88 23       	and	r24, r24
   187f8:	09 f4       	brne	.+2      	; 0x187fc <PubSubClient::loop()+0x44>
   187fa:	47 c0       	rjmp	.+142    	; 0x1888a <PubSubClient::loop()+0xd2>
   187fc:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   18800:	4b 01       	movw	r8, r22
   18802:	5c 01       	movw	r10, r24
   18804:	78 01       	movw	r14, r16
   18806:	38 ef       	ldi	r19, 0xF8	; 248
   18808:	e3 1a       	sub	r14, r19
   1880a:	3d ef       	ldi	r19, 0xFD	; 253
   1880c:	f3 0a       	sbc	r15, r19
   1880e:	f7 01       	movw	r30, r14
   18810:	80 81       	ld	r24, Z
   18812:	91 81       	ldd	r25, Z+1	; 0x01
   18814:	a2 81       	ldd	r26, Z+2	; 0x02
   18816:	b3 81       	ldd	r27, Z+3	; 0x03
   18818:	a5 01       	movw	r20, r10
   1881a:	94 01       	movw	r18, r8
   1881c:	28 1b       	sub	r18, r24
   1881e:	39 0b       	sbc	r19, r25
   18820:	4a 0b       	sbc	r20, r26
   18822:	5b 0b       	sbc	r21, r27
   18824:	da 01       	movw	r26, r20
   18826:	c9 01       	movw	r24, r18
   18828:	89 39       	cpi	r24, 0x99	; 153
   1882a:	9a 43       	sbci	r25, 0x3A	; 58
   1882c:	a1 05       	cpc	r26, r1
   1882e:	b1 05       	cpc	r27, r1
   18830:	98 f4       	brcc	.+38     	; 0x18858 <PubSubClient::loop()+0xa0>
   18832:	34 97       	sbiw	r30, 0x04	; 4
   18834:	80 81       	ld	r24, Z
   18836:	91 81       	ldd	r25, Z+1	; 0x01
   18838:	a2 81       	ldd	r26, Z+2	; 0x02
   1883a:	b3 81       	ldd	r27, Z+3	; 0x03
   1883c:	a5 01       	movw	r20, r10
   1883e:	94 01       	movw	r18, r8
   18840:	28 1b       	sub	r18, r24
   18842:	39 0b       	sbc	r19, r25
   18844:	4a 0b       	sbc	r20, r26
   18846:	5b 0b       	sbc	r21, r27
   18848:	da 01       	movw	r26, r20
   1884a:	c9 01       	movw	r24, r18
   1884c:	89 39       	cpi	r24, 0x99	; 153
   1884e:	9a 43       	sbci	r25, 0x3A	; 58
   18850:	a1 05       	cpc	r26, r1
   18852:	b1 05       	cpc	r27, r1
   18854:	08 f4       	brcc	.+2      	; 0x18858 <PubSubClient::loop()+0xa0>
   18856:	58 c0       	rjmp	.+176    	; 0x18908 <PubSubClient::loop()+0x150>
   18858:	d8 01       	movw	r26, r16
   1885a:	8d 91       	ld	r24, X+
   1885c:	9c 91       	ld	r25, X
   1885e:	68 01       	movw	r12, r16
   18860:	b4 ef       	ldi	r27, 0xF4	; 244
   18862:	cb 1a       	sub	r12, r27
   18864:	bd ef       	ldi	r27, 0xFD	; 253
   18866:	db 0a       	sbc	r13, r27
   18868:	f6 01       	movw	r30, r12
   1886a:	20 81       	ld	r18, Z
   1886c:	22 23       	and	r18, r18
   1886e:	69 f1       	breq	.+90     	; 0x188ca <PubSubClient::loop()+0x112>
   18870:	3f 96       	adiw	r30, 0x0f	; 15
   18872:	2c ef       	ldi	r18, 0xFC	; 252
   18874:	3f ef       	ldi	r19, 0xFF	; 255
   18876:	31 83       	std	Z+1, r19	; 0x01
   18878:	20 83       	st	Z, r18
   1887a:	dc 01       	movw	r26, r24
   1887c:	ed 91       	ld	r30, X+
   1887e:	fc 91       	ld	r31, X
   18880:	04 88       	ldd	r0, Z+20	; 0x14
   18882:	f5 89       	ldd	r31, Z+21	; 0x15
   18884:	e0 2d       	mov	r30, r0
   18886:	19 95       	eicall
   18888:	51 2c       	mov	r5, r1
   1888a:	85 2d       	mov	r24, r5
   1888c:	ec 81       	ldd	r30, Y+4	; 0x04
   1888e:	fd 81       	ldd	r31, Y+5	; 0x05
   18890:	0f b6       	in	r0, 0x3f	; 63
   18892:	f8 94       	cli
   18894:	fe bf       	out	0x3e, r31	; 62
   18896:	0f be       	out	0x3f, r0	; 63
   18898:	ed bf       	out	0x3d, r30	; 61
   1889a:	0f 90       	pop	r0
   1889c:	0f 90       	pop	r0
   1889e:	0f 90       	pop	r0
   188a0:	0f 90       	pop	r0
   188a2:	0f 90       	pop	r0
   188a4:	df 91       	pop	r29
   188a6:	cf 91       	pop	r28
   188a8:	1f 91       	pop	r17
   188aa:	0f 91       	pop	r16
   188ac:	ff 90       	pop	r15
   188ae:	ef 90       	pop	r14
   188b0:	df 90       	pop	r13
   188b2:	cf 90       	pop	r12
   188b4:	bf 90       	pop	r11
   188b6:	af 90       	pop	r10
   188b8:	9f 90       	pop	r9
   188ba:	8f 90       	pop	r8
   188bc:	7f 90       	pop	r7
   188be:	6f 90       	pop	r6
   188c0:	5f 90       	pop	r5
   188c2:	4f 90       	pop	r4
   188c4:	3f 90       	pop	r3
   188c6:	2f 90       	pop	r2
   188c8:	08 95       	ret
   188ca:	20 ec       	ldi	r18, 0xC0	; 192
   188cc:	f8 01       	movw	r30, r16
   188ce:	22 83       	std	Z+2, r18	; 0x02
   188d0:	13 82       	std	Z+3, r1	; 0x03
   188d2:	dc 01       	movw	r26, r24
   188d4:	ed 91       	ld	r30, X+
   188d6:	fc 91       	ld	r31, X
   188d8:	02 80       	ldd	r0, Z+2	; 0x02
   188da:	f3 81       	ldd	r31, Z+3	; 0x03
   188dc:	e0 2d       	mov	r30, r0
   188de:	42 e0       	ldi	r20, 0x02	; 2
   188e0:	50 e0       	ldi	r21, 0x00	; 0
   188e2:	b8 01       	movw	r22, r16
   188e4:	6e 5f       	subi	r22, 0xFE	; 254
   188e6:	7f 4f       	sbci	r23, 0xFF	; 255
   188e8:	19 95       	eicall
   188ea:	f8 01       	movw	r30, r16
   188ec:	ec 5f       	subi	r30, 0xFC	; 252
   188ee:	fd 4f       	sbci	r31, 0xFD	; 253
   188f0:	80 82       	st	Z, r8
   188f2:	91 82       	std	Z+1, r9	; 0x01
   188f4:	a2 82       	std	Z+2, r10	; 0x02
   188f6:	b3 82       	std	Z+3, r11	; 0x03
   188f8:	f7 01       	movw	r30, r14
   188fa:	80 82       	st	Z, r8
   188fc:	91 82       	std	Z+1, r9	; 0x01
   188fe:	a2 82       	std	Z+2, r10	; 0x02
   18900:	b3 82       	std	Z+3, r11	; 0x03
   18902:	81 e0       	ldi	r24, 0x01	; 1
   18904:	d6 01       	movw	r26, r12
   18906:	8c 93       	st	X, r24
   18908:	f8 01       	movw	r30, r16
   1890a:	80 81       	ld	r24, Z
   1890c:	91 81       	ldd	r25, Z+1	; 0x01
   1890e:	dc 01       	movw	r26, r24
   18910:	ed 91       	ld	r30, X+
   18912:	fc 91       	ld	r31, X
   18914:	00 84       	ldd	r0, Z+8	; 0x08
   18916:	f1 85       	ldd	r31, Z+9	; 0x09
   18918:	e0 2d       	mov	r30, r0
   1891a:	19 95       	eicall
   1891c:	89 2b       	or	r24, r25
   1891e:	09 f4       	brne	.+2      	; 0x18922 <PubSubClient::loop()+0x16a>
   18920:	b4 cf       	rjmp	.-152    	; 0x1888a <PubSubClient::loop()+0xd2>
   18922:	be 01       	movw	r22, r28
   18924:	6f 5f       	subi	r22, 0xFF	; 255
   18926:	7f 4f       	sbci	r23, 0xFF	; 255
   18928:	c8 01       	movw	r24, r16
   1892a:	0e 94 b8 c0 	call	0x18170	; 0x18170 <PubSubClient::readPacket(unsigned char*)>
   1892e:	6c 01       	movw	r12, r24
   18930:	89 2b       	or	r24, r25
   18932:	09 f4       	brne	.+2      	; 0x18936 <PubSubClient::loop()+0x17e>
   18934:	aa cf       	rjmp	.-172    	; 0x1888a <PubSubClient::loop()+0xd2>
   18936:	f7 01       	movw	r30, r14
   18938:	80 82       	st	Z, r8
   1893a:	91 82       	std	Z+1, r9	; 0x01
   1893c:	a2 82       	std	Z+2, r10	; 0x02
   1893e:	b3 82       	std	Z+3, r11	; 0x03
   18940:	d8 01       	movw	r26, r16
   18942:	12 96       	adiw	r26, 0x02	; 2
   18944:	4c 90       	ld	r4, X
   18946:	12 97       	sbiw	r26, 0x02	; 2
   18948:	84 2d       	mov	r24, r4
   1894a:	80 7f       	andi	r24, 0xF0	; 240
   1894c:	80 33       	cpi	r24, 0x30	; 48
   1894e:	09 f0       	breq	.+2      	; 0x18952 <PubSubClient::loop()+0x19a>
   18950:	9d c0       	rjmp	.+314    	; 0x18a8c <PubSubClient::loop()+0x2d4>
   18952:	f8 01       	movw	r30, r16
   18954:	e3 5f       	subi	r30, 0xF3	; 243
   18956:	fd 4f       	sbci	r31, 0xFD	; 253
   18958:	60 80       	ld	r6, Z
   1895a:	71 80       	ldd	r7, Z+1	; 0x01
   1895c:	61 14       	cp	r6, r1
   1895e:	71 04       	cpc	r7, r1
   18960:	09 f4       	brne	.+2      	; 0x18964 <PubSubClient::loop()+0x1ac>
   18962:	93 cf       	rjmp	.-218    	; 0x1888a <PubSubClient::loop()+0xd2>
   18964:	ed b7       	in	r30, 0x3d	; 61
   18966:	fe b7       	in	r31, 0x3e	; 62
   18968:	fb 83       	std	Y+3, r31	; 0x03
   1896a:	ea 83       	std	Y+2, r30	; 0x02
   1896c:	29 81       	ldd	r18, Y+1	; 0x01
   1896e:	30 e0       	ldi	r19, 0x00	; 0
   18970:	a2 0f       	add	r26, r18
   18972:	b3 1f       	adc	r27, r19
   18974:	13 96       	adiw	r26, 0x03	; 3
   18976:	ec 91       	ld	r30, X
   18978:	13 97       	sbiw	r26, 0x03	; 3
   1897a:	f0 e0       	ldi	r31, 0x00	; 0
   1897c:	fe 2f       	mov	r31, r30
   1897e:	ee 27       	eor	r30, r30
   18980:	14 96       	adiw	r26, 0x04	; 4
   18982:	6c 91       	ld	r22, X
   18984:	e6 0f       	add	r30, r22
   18986:	f1 1d       	adc	r31, r1
   18988:	cf 01       	movw	r24, r30
   1898a:	01 96       	adiw	r24, 0x01	; 1
   1898c:	4d b7       	in	r20, 0x3d	; 61
   1898e:	5e b7       	in	r21, 0x3e	; 62
   18990:	48 1b       	sub	r20, r24
   18992:	59 0b       	sbc	r21, r25
   18994:	0f b6       	in	r0, 0x3f	; 63
   18996:	f8 94       	cli
   18998:	5e bf       	out	0x3e, r21	; 62
   1899a:	0f be       	out	0x3f, r0	; 63
   1899c:	4d bf       	out	0x3d, r20	; 61
   1899e:	8d b7       	in	r24, 0x3d	; 61
   189a0:	9e b7       	in	r25, 0x3e	; 62
   189a2:	01 96       	adiw	r24, 0x01	; 1
   189a4:	a9 01       	movw	r20, r18
   189a6:	4b 5f       	subi	r20, 0xFB	; 251
   189a8:	5f 4f       	sbci	r21, 0xFF	; 255
   189aa:	40 0f       	add	r20, r16
   189ac:	51 1f       	adc	r21, r17
   189ae:	1c 01       	movw	r2, r24
   189b0:	bc 01       	movw	r22, r24
   189b2:	6e 0f       	add	r22, r30
   189b4:	7f 1f       	adc	r23, r31
   189b6:	26 16       	cp	r2, r22
   189b8:	37 06       	cpc	r3, r23
   189ba:	39 f0       	breq	.+14     	; 0x189ca <PubSubClient::loop()+0x212>
   189bc:	da 01       	movw	r26, r20
   189be:	fd 90       	ld	r15, X+
   189c0:	ad 01       	movw	r20, r26
   189c2:	d1 01       	movw	r26, r2
   189c4:	fd 92       	st	X+, r15
   189c6:	1d 01       	movw	r2, r26
   189c8:	f6 cf       	rjmp	.-20     	; 0x189b6 <PubSubClient::loop()+0x1fe>
   189ca:	d1 01       	movw	r26, r2
   189cc:	1c 92       	st	X, r1
   189ce:	78 01       	movw	r14, r16
   189d0:	b2 e0       	ldi	r27, 0x02	; 2
   189d2:	eb 0e       	add	r14, r27
   189d4:	f1 1c       	adc	r15, r1
   189d6:	a6 01       	movw	r20, r12
   189d8:	42 1b       	sub	r20, r18
   189da:	53 0b       	sbc	r21, r19
   189dc:	64 2d       	mov	r22, r4
   189de:	66 70       	andi	r22, 0x06	; 6
   189e0:	46 2e       	mov	r4, r22
   189e2:	a2 e0       	ldi	r26, 0x02	; 2
   189e4:	6a 13       	cpse	r22, r26
   189e6:	44 c0       	rjmp	.+136    	; 0x18a70 <PubSubClient::loop()+0x2b8>
   189e8:	b9 01       	movw	r22, r18
   189ea:	6e 0f       	add	r22, r30
   189ec:	7f 1f       	adc	r23, r31
   189ee:	d8 01       	movw	r26, r16
   189f0:	a6 0f       	add	r26, r22
   189f2:	b7 1f       	adc	r27, r23
   189f4:	15 96       	adiw	r26, 0x05	; 5
   189f6:	2c 91       	ld	r18, X
   189f8:	15 97       	sbiw	r26, 0x05	; 5
   189fa:	30 e0       	ldi	r19, 0x00	; 0
   189fc:	32 2f       	mov	r19, r18
   189fe:	22 27       	eor	r18, r18
   18a00:	16 96       	adiw	r26, 0x06	; 6
   18a02:	2c 90       	ld	r2, X
   18a04:	22 0e       	add	r2, r18
   18a06:	33 2e       	mov	r3, r19
   18a08:	31 1c       	adc	r3, r1
   18a0a:	4e 1b       	sub	r20, r30
   18a0c:	5f 0b       	sbc	r21, r31
   18a0e:	45 50       	subi	r20, 0x05	; 5
   18a10:	51 09       	sbc	r21, r1
   18a12:	6b 5f       	subi	r22, 0xFB	; 251
   18a14:	7f 4f       	sbci	r23, 0xFF	; 255
   18a16:	6e 0d       	add	r22, r14
   18a18:	7f 1d       	adc	r23, r15
   18a1a:	f3 01       	movw	r30, r6
   18a1c:	19 95       	eicall
   18a1e:	80 e4       	ldi	r24, 0x40	; 64
   18a20:	d8 01       	movw	r26, r16
   18a22:	12 96       	adiw	r26, 0x02	; 2
   18a24:	8c 93       	st	X, r24
   18a26:	12 97       	sbiw	r26, 0x02	; 2
   18a28:	13 96       	adiw	r26, 0x03	; 3
   18a2a:	4c 92       	st	X, r4
   18a2c:	13 97       	sbiw	r26, 0x03	; 3
   18a2e:	14 96       	adiw	r26, 0x04	; 4
   18a30:	3c 92       	st	X, r3
   18a32:	14 97       	sbiw	r26, 0x04	; 4
   18a34:	15 96       	adiw	r26, 0x05	; 5
   18a36:	2c 92       	st	X, r2
   18a38:	15 97       	sbiw	r26, 0x05	; 5
   18a3a:	8d 91       	ld	r24, X+
   18a3c:	9c 91       	ld	r25, X
   18a3e:	dc 01       	movw	r26, r24
   18a40:	ed 91       	ld	r30, X+
   18a42:	fc 91       	ld	r31, X
   18a44:	02 80       	ldd	r0, Z+2	; 0x02
   18a46:	f3 81       	ldd	r31, Z+3	; 0x03
   18a48:	e0 2d       	mov	r30, r0
   18a4a:	44 e0       	ldi	r20, 0x04	; 4
   18a4c:	50 e0       	ldi	r21, 0x00	; 0
   18a4e:	b7 01       	movw	r22, r14
   18a50:	19 95       	eicall
   18a52:	f8 01       	movw	r30, r16
   18a54:	ec 5f       	subi	r30, 0xFC	; 252
   18a56:	fd 4f       	sbci	r31, 0xFD	; 253
   18a58:	80 82       	st	Z, r8
   18a5a:	91 82       	std	Z+1, r9	; 0x01
   18a5c:	a2 82       	std	Z+2, r10	; 0x02
   18a5e:	b3 82       	std	Z+3, r11	; 0x03
   18a60:	2a 81       	ldd	r18, Y+2	; 0x02
   18a62:	3b 81       	ldd	r19, Y+3	; 0x03
   18a64:	0f b6       	in	r0, 0x3f	; 63
   18a66:	f8 94       	cli
   18a68:	3e bf       	out	0x3e, r19	; 62
   18a6a:	0f be       	out	0x3f, r0	; 63
   18a6c:	2d bf       	out	0x3d, r18	; 61
   18a6e:	0d cf       	rjmp	.-486    	; 0x1888a <PubSubClient::loop()+0xd2>
   18a70:	4e 1b       	sub	r20, r30
   18a72:	5f 0b       	sbc	r21, r31
   18a74:	43 50       	subi	r20, 0x03	; 3
   18a76:	51 09       	sbc	r21, r1
   18a78:	2d 5f       	subi	r18, 0xFD	; 253
   18a7a:	3f 4f       	sbci	r19, 0xFF	; 255
   18a7c:	e2 0f       	add	r30, r18
   18a7e:	f3 1f       	adc	r31, r19
   18a80:	b7 01       	movw	r22, r14
   18a82:	6e 0f       	add	r22, r30
   18a84:	7f 1f       	adc	r23, r31
   18a86:	f3 01       	movw	r30, r6
   18a88:	19 95       	eicall
   18a8a:	ea cf       	rjmp	.-44     	; 0x18a60 <PubSubClient::loop()+0x2a8>
   18a8c:	80 3c       	cpi	r24, 0xC0	; 192
   18a8e:	a1 f4       	brne	.+40     	; 0x18ab8 <PubSubClient::loop()+0x300>
   18a90:	80 ed       	ldi	r24, 0xD0	; 208
   18a92:	12 96       	adiw	r26, 0x02	; 2
   18a94:	8c 93       	st	X, r24
   18a96:	12 97       	sbiw	r26, 0x02	; 2
   18a98:	13 96       	adiw	r26, 0x03	; 3
   18a9a:	1c 92       	st	X, r1
   18a9c:	f8 01       	movw	r30, r16
   18a9e:	81 91       	ld	r24, Z+
   18aa0:	91 91       	ld	r25, Z+
   18aa2:	bf 01       	movw	r22, r30
   18aa4:	dc 01       	movw	r26, r24
   18aa6:	ed 91       	ld	r30, X+
   18aa8:	fc 91       	ld	r31, X
   18aaa:	02 80       	ldd	r0, Z+2	; 0x02
   18aac:	f3 81       	ldd	r31, Z+3	; 0x03
   18aae:	e0 2d       	mov	r30, r0
   18ab0:	42 e0       	ldi	r20, 0x02	; 2
   18ab2:	50 e0       	ldi	r21, 0x00	; 0
   18ab4:	19 95       	eicall
   18ab6:	e9 ce       	rjmp	.-558    	; 0x1888a <PubSubClient::loop()+0xd2>
   18ab8:	80 3d       	cpi	r24, 0xD0	; 208
   18aba:	09 f0       	breq	.+2      	; 0x18abe <PubSubClient::loop()+0x306>
   18abc:	e6 ce       	rjmp	.-564    	; 0x1888a <PubSubClient::loop()+0xd2>
   18abe:	f8 01       	movw	r30, r16
   18ac0:	e4 5f       	subi	r30, 0xF4	; 244
   18ac2:	fd 4f       	sbci	r31, 0xFD	; 253
   18ac4:	10 82       	st	Z, r1
   18ac6:	e1 ce       	rjmp	.-574    	; 0x1888a <PubSubClient::loop()+0xd2>

00018ac8 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   18ac8:	9f 92       	push	r9
   18aca:	af 92       	push	r10
   18acc:	bf 92       	push	r11
   18ace:	cf 92       	push	r12
   18ad0:	df 92       	push	r13
   18ad2:	ef 92       	push	r14
   18ad4:	ff 92       	push	r15
   18ad6:	0f 93       	push	r16
   18ad8:	1f 93       	push	r17
   18ada:	cf 93       	push	r28
   18adc:	df 93       	push	r29
   18ade:	ec 01       	movw	r28, r24
   18ae0:	6b 01       	movw	r12, r22
   18ae2:	94 2e       	mov	r9, r20
   18ae4:	15 2f       	mov	r17, r21
   18ae6:	79 01       	movw	r14, r18
   18ae8:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   18aec:	88 23       	and	r24, r24
   18aee:	09 f4       	brne	.+2      	; 0x18af2 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2a>
   18af0:	41 c0       	rjmp	.+130    	; 0x18b74 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   18af2:	f6 01       	movw	r30, r12
   18af4:	01 90       	ld	r0, Z+
   18af6:	00 20       	and	r0, r0
   18af8:	e9 f7       	brne	.-6      	; 0x18af4 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2c>
   18afa:	31 97       	sbiw	r30, 0x01	; 1
   18afc:	ec 19       	sub	r30, r12
   18afe:	fd 09       	sbc	r31, r13
   18b00:	c7 01       	movw	r24, r14
   18b02:	07 96       	adiw	r24, 0x07	; 7
   18b04:	e8 0f       	add	r30, r24
   18b06:	f9 1f       	adc	r31, r25
   18b08:	e1 30       	cpi	r30, 0x01	; 1
   18b0a:	f2 40       	sbci	r31, 0x02	; 2
   18b0c:	98 f5       	brcc	.+102    	; 0x18b74 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   18b0e:	5e 01       	movw	r10, r28
   18b10:	82 e0       	ldi	r24, 0x02	; 2
   18b12:	a8 0e       	add	r10, r24
   18b14:	b1 1c       	adc	r11, r1
   18b16:	25 e0       	ldi	r18, 0x05	; 5
   18b18:	30 e0       	ldi	r19, 0x00	; 0
   18b1a:	a5 01       	movw	r20, r10
   18b1c:	b6 01       	movw	r22, r12
   18b1e:	ce 01       	movw	r24, r28
   18b20:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18b24:	e9 2d       	mov	r30, r9
   18b26:	f1 2f       	mov	r31, r17
   18b28:	dc 01       	movw	r26, r24
   18b2a:	12 96       	adiw	r26, 0x02	; 2
   18b2c:	ac 0f       	add	r26, r28
   18b2e:	bd 1f       	adc	r27, r29
   18b30:	af 01       	movw	r20, r30
   18b32:	4e 0d       	add	r20, r14
   18b34:	5f 1d       	adc	r21, r15
   18b36:	e4 17       	cp	r30, r20
   18b38:	f5 07       	cpc	r31, r21
   18b3a:	19 f0       	breq	.+6      	; 0x18b42 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x7a>
   18b3c:	21 91       	ld	r18, Z+
   18b3e:	2d 93       	st	X+, r18
   18b40:	fa cf       	rjmp	.-12     	; 0x18b36 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x6e>
   18b42:	25 e0       	ldi	r18, 0x05	; 5
   18b44:	e2 1a       	sub	r14, r18
   18b46:	f1 08       	sbc	r15, r1
   18b48:	61 e3       	ldi	r22, 0x31	; 49
   18b4a:	01 11       	cpse	r16, r1
   18b4c:	01 c0       	rjmp	.+2      	; 0x18b50 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   18b4e:	60 e3       	ldi	r22, 0x30	; 48
   18b50:	9c 01       	movw	r18, r24
   18b52:	2e 0d       	add	r18, r14
   18b54:	3f 1d       	adc	r19, r15
   18b56:	a5 01       	movw	r20, r10
   18b58:	ce 01       	movw	r24, r28
   18b5a:	df 91       	pop	r29
   18b5c:	cf 91       	pop	r28
   18b5e:	1f 91       	pop	r17
   18b60:	0f 91       	pop	r16
   18b62:	ff 90       	pop	r15
   18b64:	ef 90       	pop	r14
   18b66:	df 90       	pop	r13
   18b68:	cf 90       	pop	r12
   18b6a:	bf 90       	pop	r11
   18b6c:	af 90       	pop	r10
   18b6e:	9f 90       	pop	r9
   18b70:	0c 94 a9 c1 	jmp	0x18352	; 0x18352 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18b74:	80 e0       	ldi	r24, 0x00	; 0
   18b76:	df 91       	pop	r29
   18b78:	cf 91       	pop	r28
   18b7a:	1f 91       	pop	r17
   18b7c:	0f 91       	pop	r16
   18b7e:	ff 90       	pop	r15
   18b80:	ef 90       	pop	r14
   18b82:	df 90       	pop	r13
   18b84:	cf 90       	pop	r12
   18b86:	bf 90       	pop	r11
   18b88:	af 90       	pop	r10
   18b8a:	9f 90       	pop	r9
   18b8c:	08 95       	ret

00018b8e <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   18b8e:	0f 93       	push	r16
   18b90:	fa 01       	movw	r30, r20
   18b92:	01 90       	ld	r0, Z+
   18b94:	00 20       	and	r0, r0
   18b96:	e9 f7       	brne	.-6      	; 0x18b92 <PubSubClient::publish(char const*, char const*)+0x4>
   18b98:	31 97       	sbiw	r30, 0x01	; 1
   18b9a:	9f 01       	movw	r18, r30
   18b9c:	24 1b       	sub	r18, r20
   18b9e:	35 0b       	sbc	r19, r21
   18ba0:	00 e0       	ldi	r16, 0x00	; 0
   18ba2:	0e 94 64 c5 	call	0x18ac8	; 0x18ac8 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   18ba6:	0f 91       	pop	r16
   18ba8:	08 95       	ret

00018baa <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   18baa:	df 92       	push	r13
   18bac:	ef 92       	push	r14
   18bae:	ff 92       	push	r15
   18bb0:	0f 93       	push	r16
   18bb2:	1f 93       	push	r17
   18bb4:	cf 93       	push	r28
   18bb6:	df 93       	push	r29
   18bb8:	42 30       	cpi	r20, 0x02	; 2
   18bba:	08 f0       	brcs	.+2      	; 0x18bbe <PubSubClient::subscribe(char const*, unsigned char)+0x14>
   18bbc:	41 c0       	rjmp	.+130    	; 0x18c40 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18bbe:	fb 01       	movw	r30, r22
   18bc0:	01 90       	ld	r0, Z+
   18bc2:	00 20       	and	r0, r0
   18bc4:	e9 f7       	brne	.-6      	; 0x18bc0 <PubSubClient::subscribe(char const*, unsigned char)+0x16>
   18bc6:	9f 01       	movw	r18, r30
   18bc8:	26 1b       	sub	r18, r22
   18bca:	37 0b       	sbc	r19, r23
   18bcc:	28 5f       	subi	r18, 0xF8	; 248
   18bce:	3f 4f       	sbci	r19, 0xFF	; 255
   18bd0:	21 30       	cpi	r18, 0x01	; 1
   18bd2:	32 40       	sbci	r19, 0x02	; 2
   18bd4:	a8 f5       	brcc	.+106    	; 0x18c40 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18bd6:	d4 2e       	mov	r13, r20
   18bd8:	8b 01       	movw	r16, r22
   18bda:	ec 01       	movw	r28, r24
   18bdc:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   18be0:	88 23       	and	r24, r24
   18be2:	71 f1       	breq	.+92     	; 0x18c40 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18be4:	fe 01       	movw	r30, r28
   18be6:	ee 5f       	subi	r30, 0xFE	; 254
   18be8:	fd 4f       	sbci	r31, 0xFD	; 253
   18bea:	80 81       	ld	r24, Z
   18bec:	91 81       	ldd	r25, Z+1	; 0x01
   18bee:	01 96       	adiw	r24, 0x01	; 1
   18bf0:	21 f1       	breq	.+72     	; 0x18c3a <PubSubClient::subscribe(char const*, unsigned char)+0x90>
   18bf2:	91 83       	std	Z+1, r25	; 0x01
   18bf4:	80 83       	st	Z, r24
   18bf6:	80 81       	ld	r24, Z
   18bf8:	91 81       	ldd	r25, Z+1	; 0x01
   18bfa:	9f 83       	std	Y+7, r25	; 0x07
   18bfc:	88 87       	std	Y+8, r24	; 0x08
   18bfe:	7e 01       	movw	r14, r28
   18c00:	52 e0       	ldi	r21, 0x02	; 2
   18c02:	e5 0e       	add	r14, r21
   18c04:	f1 1c       	adc	r15, r1
   18c06:	27 e0       	ldi	r18, 0x07	; 7
   18c08:	30 e0       	ldi	r19, 0x00	; 0
   18c0a:	a7 01       	movw	r20, r14
   18c0c:	b8 01       	movw	r22, r16
   18c0e:	ce 01       	movw	r24, r28
   18c10:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18c14:	fe 01       	movw	r30, r28
   18c16:	e8 0f       	add	r30, r24
   18c18:	f9 1f       	adc	r31, r25
   18c1a:	d2 82       	std	Z+2, r13	; 0x02
   18c1c:	9c 01       	movw	r18, r24
   18c1e:	24 50       	subi	r18, 0x04	; 4
   18c20:	31 09       	sbc	r19, r1
   18c22:	a7 01       	movw	r20, r14
   18c24:	62 e8       	ldi	r22, 0x82	; 130
   18c26:	ce 01       	movw	r24, r28
   18c28:	df 91       	pop	r29
   18c2a:	cf 91       	pop	r28
   18c2c:	1f 91       	pop	r17
   18c2e:	0f 91       	pop	r16
   18c30:	ff 90       	pop	r15
   18c32:	ef 90       	pop	r14
   18c34:	df 90       	pop	r13
   18c36:	0c 94 a9 c1 	jmp	0x18352	; 0x18352 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18c3a:	81 e0       	ldi	r24, 0x01	; 1
   18c3c:	90 e0       	ldi	r25, 0x00	; 0
   18c3e:	d9 cf       	rjmp	.-78     	; 0x18bf2 <PubSubClient::subscribe(char const*, unsigned char)+0x48>
   18c40:	80 e0       	ldi	r24, 0x00	; 0
   18c42:	df 91       	pop	r29
   18c44:	cf 91       	pop	r28
   18c46:	1f 91       	pop	r17
   18c48:	0f 91       	pop	r16
   18c4a:	ff 90       	pop	r15
   18c4c:	ef 90       	pop	r14
   18c4e:	df 90       	pop	r13
   18c50:	08 95       	ret

00018c52 <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   18c52:	40 e0       	ldi	r20, 0x00	; 0
   18c54:	0c 94 d5 c5 	jmp	0x18baa	; 0x18baa <PubSubClient::subscribe(char const*, unsigned char)>

00018c58 <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   18c58:	ef 92       	push	r14
   18c5a:	ff 92       	push	r15
   18c5c:	0f 93       	push	r16
   18c5e:	1f 93       	push	r17
   18c60:	cf 93       	push	r28
   18c62:	df 93       	push	r29
   18c64:	fb 01       	movw	r30, r22
   18c66:	01 90       	ld	r0, Z+
   18c68:	00 20       	and	r0, r0
   18c6a:	e9 f7       	brne	.-6      	; 0x18c66 <PubSubClient::unsubscribe(char const*)+0xe>
   18c6c:	9f 01       	movw	r18, r30
   18c6e:	26 1b       	sub	r18, r22
   18c70:	37 0b       	sbc	r19, r23
   18c72:	28 5f       	subi	r18, 0xF8	; 248
   18c74:	3f 4f       	sbci	r19, 0xFF	; 255
   18c76:	21 30       	cpi	r18, 0x01	; 1
   18c78:	32 40       	sbci	r19, 0x02	; 2
   18c7a:	78 f5       	brcc	.+94     	; 0x18cda <PubSubClient::unsubscribe(char const*)+0x82>
   18c7c:	8b 01       	movw	r16, r22
   18c7e:	ec 01       	movw	r28, r24
   18c80:	0e 94 39 c2 	call	0x18472	; 0x18472 <PubSubClient::connected()>
   18c84:	88 23       	and	r24, r24
   18c86:	49 f1       	breq	.+82     	; 0x18cda <PubSubClient::unsubscribe(char const*)+0x82>
   18c88:	fe 01       	movw	r30, r28
   18c8a:	ee 5f       	subi	r30, 0xFE	; 254
   18c8c:	fd 4f       	sbci	r31, 0xFD	; 253
   18c8e:	80 81       	ld	r24, Z
   18c90:	91 81       	ldd	r25, Z+1	; 0x01
   18c92:	01 96       	adiw	r24, 0x01	; 1
   18c94:	f9 f0       	breq	.+62     	; 0x18cd4 <PubSubClient::unsubscribe(char const*)+0x7c>
   18c96:	91 83       	std	Z+1, r25	; 0x01
   18c98:	80 83       	st	Z, r24
   18c9a:	80 81       	ld	r24, Z
   18c9c:	91 81       	ldd	r25, Z+1	; 0x01
   18c9e:	9f 83       	std	Y+7, r25	; 0x07
   18ca0:	88 87       	std	Y+8, r24	; 0x08
   18ca2:	7e 01       	movw	r14, r28
   18ca4:	42 e0       	ldi	r20, 0x02	; 2
   18ca6:	e4 0e       	add	r14, r20
   18ca8:	f1 1c       	adc	r15, r1
   18caa:	27 e0       	ldi	r18, 0x07	; 7
   18cac:	30 e0       	ldi	r19, 0x00	; 0
   18cae:	a7 01       	movw	r20, r14
   18cb0:	b8 01       	movw	r22, r16
   18cb2:	ce 01       	movw	r24, r28
   18cb4:	0e 94 17 c2 	call	0x1842e	; 0x1842e <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   18cb8:	9c 01       	movw	r18, r24
   18cba:	25 50       	subi	r18, 0x05	; 5
   18cbc:	31 09       	sbc	r19, r1
   18cbe:	a7 01       	movw	r20, r14
   18cc0:	62 ea       	ldi	r22, 0xA2	; 162
   18cc2:	ce 01       	movw	r24, r28
   18cc4:	df 91       	pop	r29
   18cc6:	cf 91       	pop	r28
   18cc8:	1f 91       	pop	r17
   18cca:	0f 91       	pop	r16
   18ccc:	ff 90       	pop	r15
   18cce:	ef 90       	pop	r14
   18cd0:	0c 94 a9 c1 	jmp	0x18352	; 0x18352 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18cd4:	81 e0       	ldi	r24, 0x01	; 1
   18cd6:	90 e0       	ldi	r25, 0x00	; 0
   18cd8:	de cf       	rjmp	.-68     	; 0x18c96 <PubSubClient::unsubscribe(char const*)+0x3e>
   18cda:	80 e0       	ldi	r24, 0x00	; 0
   18cdc:	df 91       	pop	r29
   18cde:	cf 91       	pop	r28
   18ce0:	1f 91       	pop	r17
   18ce2:	0f 91       	pop	r16
   18ce4:	ff 90       	pop	r15
   18ce6:	ef 90       	pop	r14
   18ce8:	08 95       	ret

00018cea <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   18cea:	cf 92       	push	r12
   18cec:	df 92       	push	r13
   18cee:	ef 92       	push	r14
   18cf0:	ff 92       	push	r15
   18cf2:	0f 93       	push	r16
   18cf4:	cf 93       	push	r28
   18cf6:	df 93       	push	r29
   18cf8:	cd b7       	in	r28, 0x3d	; 61
   18cfa:	de b7       	in	r29, 0x3e	; 62
   18cfc:	2c 97       	sbiw	r28, 0x0c	; 12
   18cfe:	0f b6       	in	r0, 0x3f	; 63
   18d00:	f8 94       	cli
   18d02:	de bf       	out	0x3e, r29	; 62
   18d04:	0f be       	out	0x3f, r0	; 63
   18d06:	cd bf       	out	0x3d, r28	; 61
   18d08:	7c 01       	movw	r14, r24
   18d0a:	fb 01       	movw	r30, r22
   18d0c:	6a 01       	movw	r12, r20
   18d0e:	03 81       	ldd	r16, Z+3	; 0x03
   18d10:	22 81       	ldd	r18, Z+2	; 0x02
   18d12:	41 81       	ldd	r20, Z+1	; 0x01
   18d14:	60 81       	ld	r22, Z
   18d16:	ce 01       	movw	r24, r28
   18d18:	07 96       	adiw	r24, 0x07	; 7
   18d1a:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   18d1e:	89 85       	ldd	r24, Y+9	; 0x09
   18d20:	9a 85       	ldd	r25, Y+10	; 0x0a
   18d22:	ab 85       	ldd	r26, Y+11	; 0x0b
   18d24:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   18d26:	f7 01       	movw	r30, r14
   18d28:	e1 5f       	subi	r30, 0xF1	; 241
   18d2a:	fd 4f       	sbci	r31, 0xFD	; 253
   18d2c:	82 83       	std	Z+2, r24	; 0x02
   18d2e:	93 83       	std	Z+3, r25	; 0x03
   18d30:	a4 83       	std	Z+4, r26	; 0x04
   18d32:	b5 83       	std	Z+5, r27	; 0x05
_ZN12PubSubClient9setServerE9IPAddressj():
   18d34:	38 96       	adiw	r30, 0x08	; 8
   18d36:	d1 82       	std	Z+1, r13	; 0x01
   18d38:	c0 82       	st	Z, r12
   18d3a:	32 97       	sbiw	r30, 0x02	; 2
   18d3c:	11 82       	std	Z+1, r1	; 0x01
   18d3e:	10 82       	st	Z, r1
_ZN12PubSubClient9setServerEPhj():
   18d40:	c7 01       	movw	r24, r14
   18d42:	2c 96       	adiw	r28, 0x0c	; 12
   18d44:	0f b6       	in	r0, 0x3f	; 63
   18d46:	f8 94       	cli
   18d48:	de bf       	out	0x3e, r29	; 62
   18d4a:	0f be       	out	0x3f, r0	; 63
   18d4c:	cd bf       	out	0x3d, r28	; 61
   18d4e:	df 91       	pop	r29
   18d50:	cf 91       	pop	r28
   18d52:	0f 91       	pop	r16
   18d54:	ff 90       	pop	r15
   18d56:	ef 90       	pop	r14
   18d58:	df 90       	pop	r13
   18d5a:	cf 90       	pop	r12
   18d5c:	08 95       	ret

00018d5e <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   18d5e:	fc 01       	movw	r30, r24
   18d60:	e3 5f       	subi	r30, 0xF3	; 243
   18d62:	fd 4f       	sbci	r31, 0xFD	; 253
   18d64:	71 83       	std	Z+1, r23	; 0x01
   18d66:	60 83       	st	Z, r22
   18d68:	08 95       	ret

00018d6a <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:589

int PubSubClient::state() {
    return this->_state;
   18d6a:	85 5e       	subi	r24, 0xE5	; 229
   18d6c:	9d 4f       	sbci	r25, 0xFD	; 253
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
}
   18d6e:	fc 01       	movw	r30, r24
   18d70:	80 81       	ld	r24, Z
   18d72:	91 81       	ldd	r25, Z+1	; 0x01
   18d74:	08 95       	ret

00018d76 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   18d76:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   18d78:	00 e0       	ldi	r16, 0x00	; 0
   18d7a:	20 e0       	ldi	r18, 0x00	; 0
   18d7c:	40 e0       	ldi	r20, 0x00	; 0
   18d7e:	60 e0       	ldi	r22, 0x00	; 0
   18d80:	84 e4       	ldi	r24, 0x44	; 68
   18d82:	93 e1       	ldi	r25, 0x13	; 19
   18d84:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
   18d88:	0f 91       	pop	r16
   18d8a:	08 95       	ret

00018d8c <RF24::csn(bool)>:
_ZN4RF243csnEb():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1552
    config |= _BV(EN_CRC);
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
   18d8c:	cf 93       	push	r28
   18d8e:	df 93       	push	r29
   18d90:	ec 01       	movw	r28, r24
_ZN8SPIClass11setBitOrderEh():
   18d92:	8c b5       	in	r24, 0x2c	; 44
   18d94:	8f 7d       	andi	r24, 0xDF	; 223
   18d96:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
   18d98:	8c b5       	in	r24, 0x2c	; 44
   18d9a:	83 7f       	andi	r24, 0xF3	; 243
   18d9c:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
   18d9e:	8c b5       	in	r24, 0x2c	; 44
   18da0:	8c 7f       	andi	r24, 0xFC	; 252
   18da2:	8c bd       	out	0x2c, r24	; 44
   18da4:	8d b5       	in	r24, 0x2d	; 45
   18da6:	81 60       	ori	r24, 0x01	; 1
   18da8:	8d bd       	out	0x2d, r24	; 45
_ZN4RF243csnEb():
   18daa:	8a 81       	ldd	r24, Y+2	; 0x02
   18dac:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   18db0:	8c 89       	ldd	r24, Y+20	; 0x14
   18db2:	9d 89       	ldd	r25, Y+21	; 0x15
   18db4:	df 91       	pop	r29
   18db6:	cf 91       	pop	r28
   18db8:	0c 94 d4 d5 	jmp	0x1aba8	; 0x1aba8 <delayMicroseconds>

00018dbc <RF24::ce(bool)>:
_ZN4RF242ceEb():
   18dbc:	fc 01       	movw	r30, r24
   18dbe:	20 81       	ld	r18, Z
   18dc0:	31 81       	ldd	r19, Z+1	; 0x01
   18dc2:	82 81       	ldd	r24, Z+2	; 0x02
   18dc4:	93 81       	ldd	r25, Z+3	; 0x03
   18dc6:	28 17       	cp	r18, r24
   18dc8:	39 07       	cpc	r19, r25
   18dca:	19 f0       	breq	.+6      	; 0x18dd2 <RF24::ce(bool)+0x16>
   18dcc:	82 2f       	mov	r24, r18
   18dce:	0c 94 c8 d6 	jmp	0x1ad90	; 0x1ad90 <digitalWrite>
   18dd2:	08 95       	ret

00018dd4 <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
   18dd4:	60 e0       	ldi	r22, 0x00	; 0
   18dd6:	0c 94 c6 c6 	jmp	0x18d8c	; 0x18d8c <RF24::csn(bool)>

00018dda <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
   18dda:	61 e0       	ldi	r22, 0x01	; 1
   18ddc:	0c 94 c6 c6 	jmp	0x18d8c	; 0x18d8c <RF24::csn(bool)>

00018de0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
   18de0:	cf 92       	push	r12
   18de2:	df 92       	push	r13
   18de4:	ef 92       	push	r14
   18de6:	ff 92       	push	r15
   18de8:	0f 93       	push	r16
   18dea:	1f 93       	push	r17
   18dec:	cf 93       	push	r28
   18dee:	df 93       	push	r29
   18df0:	7c 01       	movw	r14, r24
   18df2:	c6 2f       	mov	r28, r22
   18df4:	6a 01       	movw	r12, r20
   18df6:	12 2f       	mov	r17, r18
   18df8:	0e 94 ea c6 	call	0x18dd4	; 0x18dd4 <RF24::beginTransaction()>
   18dfc:	8c 2f       	mov	r24, r28
   18dfe:	8f 71       	andi	r24, 0x1F	; 31
   18e00:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e04:	08 2f       	mov	r16, r24
   18e06:	e6 01       	movw	r28, r12
   18e08:	11 50       	subi	r17, 0x01	; 1
   18e0a:	28 f0       	brcs	.+10     	; 0x18e16 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x36>
   18e0c:	8f ef       	ldi	r24, 0xFF	; 255
   18e0e:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e12:	89 93       	st	Y+, r24
   18e14:	f9 cf       	rjmp	.-14     	; 0x18e08 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x28>
   18e16:	c7 01       	movw	r24, r14
   18e18:	0e 94 ed c6 	call	0x18dda	; 0x18dda <RF24::endTransaction()>
   18e1c:	80 2f       	mov	r24, r16
   18e1e:	df 91       	pop	r29
   18e20:	cf 91       	pop	r28
   18e22:	1f 91       	pop	r17
   18e24:	0f 91       	pop	r16
   18e26:	ff 90       	pop	r15
   18e28:	ef 90       	pop	r14
   18e2a:	df 90       	pop	r13
   18e2c:	cf 90       	pop	r12
   18e2e:	08 95       	ret

00018e30 <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
   18e30:	1f 93       	push	r17
   18e32:	cf 93       	push	r28
   18e34:	df 93       	push	r29
   18e36:	ec 01       	movw	r28, r24
   18e38:	16 2f       	mov	r17, r22
   18e3a:	0e 94 ea c6 	call	0x18dd4	; 0x18dd4 <RF24::beginTransaction()>
   18e3e:	81 2f       	mov	r24, r17
   18e40:	8f 71       	andi	r24, 0x1F	; 31
   18e42:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e46:	8f ef       	ldi	r24, 0xFF	; 255
   18e48:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e4c:	18 2f       	mov	r17, r24
   18e4e:	ce 01       	movw	r24, r28
   18e50:	0e 94 ed c6 	call	0x18dda	; 0x18dda <RF24::endTransaction()>
   18e54:	81 2f       	mov	r24, r17
   18e56:	df 91       	pop	r29
   18e58:	cf 91       	pop	r28
   18e5a:	1f 91       	pop	r17
   18e5c:	08 95       	ret

00018e5e <RF24::write_register(unsigned char, unsigned char)>:
_ZN4RF2414write_registerEhh():
   18e5e:	0f 93       	push	r16
   18e60:	1f 93       	push	r17
   18e62:	cf 93       	push	r28
   18e64:	df 93       	push	r29
   18e66:	8c 01       	movw	r16, r24
   18e68:	c6 2f       	mov	r28, r22
   18e6a:	d4 2f       	mov	r29, r20
   18e6c:	0e 94 ea c6 	call	0x18dd4	; 0x18dd4 <RF24::beginTransaction()>
   18e70:	8c 2f       	mov	r24, r28
   18e72:	8f 71       	andi	r24, 0x1F	; 31
   18e74:	80 62       	ori	r24, 0x20	; 32
   18e76:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e7a:	c8 2f       	mov	r28, r24
   18e7c:	8d 2f       	mov	r24, r29
   18e7e:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18e82:	c8 01       	movw	r24, r16
   18e84:	0e 94 ed c6 	call	0x18dda	; 0x18dda <RF24::endTransaction()>
   18e88:	8c 2f       	mov	r24, r28
   18e8a:	df 91       	pop	r29
   18e8c:	cf 91       	pop	r28
   18e8e:	1f 91       	pop	r17
   18e90:	0f 91       	pop	r16
   18e92:	08 95       	ret

00018e94 <RF24::spiTrans(unsigned char)>:
_ZN4RF248spiTransEh():
   18e94:	1f 93       	push	r17
   18e96:	cf 93       	push	r28
   18e98:	df 93       	push	r29
   18e9a:	ec 01       	movw	r28, r24
   18e9c:	16 2f       	mov	r17, r22
   18e9e:	0e 94 ea c6 	call	0x18dd4	; 0x18dd4 <RF24::beginTransaction()>
   18ea2:	81 2f       	mov	r24, r17
   18ea4:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   18ea8:	18 2f       	mov	r17, r24
   18eaa:	ce 01       	movw	r24, r28
   18eac:	0e 94 ed c6 	call	0x18dda	; 0x18dda <RF24::endTransaction()>
   18eb0:	81 2f       	mov	r24, r17
   18eb2:	df 91       	pop	r29
   18eb4:	cf 91       	pop	r28
   18eb6:	1f 91       	pop	r17
   18eb8:	08 95       	ret

00018eba <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
   18eba:	62 ee       	ldi	r22, 0xE2	; 226
   18ebc:	0c 94 4a c7 	jmp	0x18e94	; 0x18e94 <RF24::spiTrans(unsigned char)>

00018ec0 <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
   18ec0:	61 ee       	ldi	r22, 0xE1	; 225
   18ec2:	0c 94 4a c7 	jmp	0x18e94	; 0x18e94 <RF24::spiTrans(unsigned char)>

00018ec6 <RF24::get_status()>:
_ZN4RF2410get_statusEv():
   18ec6:	6f ef       	ldi	r22, 0xFF	; 255
   18ec8:	0c 94 4a c7 	jmp	0x18e94	; 0x18e94 <RF24::spiTrans(unsigned char)>

00018ecc <RF24::print_status(unsigned char)>:
_ZN4RF2412print_statusEh():
   18ecc:	86 2f       	mov	r24, r22
   18ece:	90 e0       	ldi	r25, 0x00	; 0
   18ed0:	26 2f       	mov	r18, r22
   18ed2:	21 70       	andi	r18, 0x01	; 1
   18ed4:	1f 92       	push	r1
   18ed6:	2f 93       	push	r18
   18ed8:	9c 01       	movw	r18, r24
   18eda:	35 95       	asr	r19
   18edc:	27 95       	ror	r18
   18ede:	27 70       	andi	r18, 0x07	; 7
   18ee0:	33 27       	eor	r19, r19
   18ee2:	3f 93       	push	r19
   18ee4:	2f 93       	push	r18
   18ee6:	64 fb       	bst	r22, 4
   18ee8:	99 27       	eor	r25, r25
   18eea:	90 f9       	bld	r25, 0
   18eec:	1f 92       	push	r1
   18eee:	9f 93       	push	r25
   18ef0:	65 fb       	bst	r22, 5
   18ef2:	99 27       	eor	r25, r25
   18ef4:	90 f9       	bld	r25, 0
   18ef6:	1f 92       	push	r1
   18ef8:	9f 93       	push	r25
   18efa:	66 fb       	bst	r22, 6
   18efc:	88 27       	eor	r24, r24
   18efe:	80 f9       	bld	r24, 0
   18f00:	1f 92       	push	r1
   18f02:	8f 93       	push	r24
   18f04:	1f 92       	push	r1
   18f06:	6f 93       	push	r22
   18f08:	86 ec       	ldi	r24, 0xC6	; 198
   18f0a:	93 e6       	ldi	r25, 0x63	; 99
   18f0c:	9f 93       	push	r25
   18f0e:	8f 93       	push	r24
   18f10:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   18f14:	8d b7       	in	r24, 0x3d	; 61
   18f16:	9e b7       	in	r25, 0x3e	; 62
   18f18:	0e 96       	adiw	r24, 0x0e	; 14
   18f1a:	0f b6       	in	r0, 0x3f	; 63
   18f1c:	f8 94       	cli
   18f1e:	9e bf       	out	0x3e, r25	; 62
   18f20:	0f be       	out	0x3f, r0	; 63
   18f22:	8d bf       	out	0x3d, r24	; 61
   18f24:	08 95       	ret

00018f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
   18f26:	cf 92       	push	r12
   18f28:	df 92       	push	r13
   18f2a:	ff 92       	push	r15
   18f2c:	0f 93       	push	r16
   18f2e:	1f 93       	push	r17
   18f30:	cf 93       	push	r28
   18f32:	df 93       	push	r29
   18f34:	6c 01       	movw	r12, r24
   18f36:	c4 2f       	mov	r28, r20
   18f38:	d2 2f       	mov	r29, r18
   18f3a:	7f 93       	push	r23
   18f3c:	6f 93       	push	r22
   18f3e:	80 ec       	ldi	r24, 0xC0	; 192
   18f40:	93 e6       	ldi	r25, 0x63	; 99
   18f42:	9f 93       	push	r25
   18f44:	8f 93       	push	r24
   18f46:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   18f4a:	dc 0f       	add	r29, r28
   18f4c:	0f 90       	pop	r0
   18f4e:	0f 90       	pop	r0
   18f50:	0f 90       	pop	r0
   18f52:	0f 90       	pop	r0
   18f54:	08 eb       	ldi	r16, 0xB8	; 184
   18f56:	13 e6       	ldi	r17, 0x63	; 99
   18f58:	cd 17       	cp	r28, r29
   18f5a:	99 f0       	breq	.+38     	; 0x18f82 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
   18f5c:	ff 24       	eor	r15, r15
   18f5e:	f3 94       	inc	r15
   18f60:	fc 0e       	add	r15, r28
   18f62:	6c 2f       	mov	r22, r28
   18f64:	c6 01       	movw	r24, r12
   18f66:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   18f6a:	1f 92       	push	r1
   18f6c:	8f 93       	push	r24
   18f6e:	1f 93       	push	r17
   18f70:	0f 93       	push	r16
   18f72:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   18f76:	0f 90       	pop	r0
   18f78:	0f 90       	pop	r0
   18f7a:	0f 90       	pop	r0
   18f7c:	0f 90       	pop	r0
   18f7e:	cf 2d       	mov	r28, r15
   18f80:	eb cf       	rjmp	.-42     	; 0x18f58 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
   18f82:	85 eb       	ldi	r24, 0xB5	; 181
   18f84:	93 e6       	ldi	r25, 0x63	; 99
   18f86:	9f 93       	push	r25
   18f88:	8f 93       	push	r24
   18f8a:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   18f8e:	0f 90       	pop	r0
   18f90:	0f 90       	pop	r0
   18f92:	df 91       	pop	r29
   18f94:	cf 91       	pop	r28
   18f96:	1f 91       	pop	r17
   18f98:	0f 91       	pop	r16
   18f9a:	ff 90       	pop	r15
   18f9c:	df 90       	pop	r13
   18f9e:	cf 90       	pop	r12
   18fa0:	08 95       	ret

00018fa2 <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
   18fa2:	2f 92       	push	r2
   18fa4:	3f 92       	push	r3
   18fa6:	4f 92       	push	r4
   18fa8:	5f 92       	push	r5
   18faa:	6f 92       	push	r6
   18fac:	7f 92       	push	r7
   18fae:	8f 92       	push	r8
   18fb0:	9f 92       	push	r9
   18fb2:	af 92       	push	r10
   18fb4:	bf 92       	push	r11
   18fb6:	cf 92       	push	r12
   18fb8:	df 92       	push	r13
   18fba:	ef 92       	push	r14
   18fbc:	ff 92       	push	r15
   18fbe:	0f 93       	push	r16
   18fc0:	1f 93       	push	r17
   18fc2:	cf 93       	push	r28
   18fc4:	df 93       	push	r29
   18fc6:	1f 92       	push	r1
   18fc8:	cd b7       	in	r28, 0x3d	; 61
   18fca:	de b7       	in	r29, 0x3e	; 62
   18fcc:	6c 01       	movw	r12, r24
   18fce:	24 2e       	mov	r2, r20
   18fd0:	32 2e       	mov	r3, r18
   18fd2:	4d b6       	in	r4, 0x3d	; 61
   18fd4:	5e b6       	in	r5, 0x3e	; 62
   18fd6:	7f 93       	push	r23
   18fd8:	6f 93       	push	r22
   18fda:	8f ea       	ldi	r24, 0xAF	; 175
   18fdc:	93 e6       	ldi	r25, 0x63	; 99
   18fde:	9f 93       	push	r25
   18fe0:	8f 93       	push	r24
   18fe2:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   18fe6:	32 0c       	add	r3, r2
   18fe8:	0f 90       	pop	r0
   18fea:	0f 90       	pop	r0
   18fec:	0f 90       	pop	r0
   18fee:	0f 90       	pop	r0
   18ff0:	8b ea       	ldi	r24, 0xAB	; 171
   18ff2:	a8 2e       	mov	r10, r24
   18ff4:	83 e6       	ldi	r24, 0x63	; 99
   18ff6:	b8 2e       	mov	r11, r24
   18ff8:	96 ea       	ldi	r25, 0xA6	; 166
   18ffa:	89 2e       	mov	r8, r25
   18ffc:	93 e6       	ldi	r25, 0x63	; 99
   18ffe:	99 2e       	mov	r9, r25
   19000:	23 14       	cp	r2, r3
   19002:	e1 f1       	breq	.+120    	; 0x1907c <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xda>
   19004:	6d b6       	in	r6, 0x3d	; 61
   19006:	7e b6       	in	r7, 0x3e	; 62
   19008:	f6 01       	movw	r30, r12
   1900a:	26 85       	ldd	r18, Z+14	; 0x0e
   1900c:	02 2f       	mov	r16, r18
   1900e:	10 e0       	ldi	r17, 0x00	; 0
   19010:	8d b7       	in	r24, 0x3d	; 61
   19012:	9e b7       	in	r25, 0x3e	; 62
   19014:	80 1b       	sub	r24, r16
   19016:	91 0b       	sbc	r25, r17
   19018:	0f b6       	in	r0, 0x3f	; 63
   1901a:	f8 94       	cli
   1901c:	9e bf       	out	0x3e, r25	; 62
   1901e:	0f be       	out	0x3f, r0	; 63
   19020:	8d bf       	out	0x3d, r24	; 61
   19022:	ed b7       	in	r30, 0x3d	; 61
   19024:	fe b7       	in	r31, 0x3e	; 62
   19026:	31 96       	adiw	r30, 0x01	; 1
   19028:	7f 01       	movw	r14, r30
   1902a:	f1 e0       	ldi	r31, 0x01	; 1
   1902c:	f2 0d       	add	r31, r2
   1902e:	f9 83       	std	Y+1, r31	; 0x01
   19030:	a7 01       	movw	r20, r14
   19032:	62 2d       	mov	r22, r2
   19034:	c6 01       	movw	r24, r12
   19036:	0e 94 f0 c6 	call	0x18de0	; 0x18de0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
   1903a:	bf 92       	push	r11
   1903c:	af 92       	push	r10
   1903e:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   19042:	0e 0d       	add	r16, r14
   19044:	1f 1d       	adc	r17, r15
   19046:	0f 90       	pop	r0
   19048:	0f 90       	pop	r0
   1904a:	01 50       	subi	r16, 0x01	; 1
   1904c:	11 09       	sbc	r17, r1
   1904e:	0e 15       	cp	r16, r14
   19050:	1f 05       	cpc	r17, r15
   19052:	68 f0       	brcs	.+26     	; 0x1906e <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xcc>
   19054:	f8 01       	movw	r30, r16
   19056:	80 81       	ld	r24, Z
   19058:	1f 92       	push	r1
   1905a:	8f 93       	push	r24
   1905c:	9f 92       	push	r9
   1905e:	8f 92       	push	r8
   19060:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   19064:	0f 90       	pop	r0
   19066:	0f 90       	pop	r0
   19068:	0f 90       	pop	r0
   1906a:	0f 90       	pop	r0
   1906c:	ee cf       	rjmp	.-36     	; 0x1904a <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa8>
   1906e:	0f b6       	in	r0, 0x3f	; 63
   19070:	f8 94       	cli
   19072:	7e be       	out	0x3e, r7	; 62
   19074:	0f be       	out	0x3f, r0	; 63
   19076:	6d be       	out	0x3d, r6	; 61
   19078:	29 80       	ldd	r2, Y+1	; 0x01
   1907a:	c2 cf       	rjmp	.-124    	; 0x19000 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
   1907c:	83 ea       	ldi	r24, 0xA3	; 163
   1907e:	93 e6       	ldi	r25, 0x63	; 99
   19080:	9f 93       	push	r25
   19082:	8f 93       	push	r24
   19084:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
   19088:	0f 90       	pop	r0
   1908a:	0f 90       	pop	r0
   1908c:	0f b6       	in	r0, 0x3f	; 63
   1908e:	f8 94       	cli
   19090:	5e be       	out	0x3e, r5	; 62
   19092:	0f be       	out	0x3f, r0	; 63
   19094:	4d be       	out	0x3d, r4	; 61
   19096:	0f 90       	pop	r0
   19098:	df 91       	pop	r29
   1909a:	cf 91       	pop	r28
   1909c:	1f 91       	pop	r17
   1909e:	0f 91       	pop	r16
   190a0:	ff 90       	pop	r15
   190a2:	ef 90       	pop	r14
   190a4:	df 90       	pop	r13
   190a6:	cf 90       	pop	r12
   190a8:	bf 90       	pop	r11
   190aa:	af 90       	pop	r10
   190ac:	9f 90       	pop	r9
   190ae:	8f 90       	pop	r8
   190b0:	7f 90       	pop	r7
   190b2:	6f 90       	pop	r6
   190b4:	5f 90       	pop	r5
   190b6:	4f 90       	pop	r4
   190b8:	3f 90       	pop	r3
   190ba:	2f 90       	pop	r2
   190bc:	08 95       	ret

000190be <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
   190be:	fc 01       	movw	r30, r24
   190c0:	71 83       	std	Z+1, r23	; 0x01
   190c2:	60 83       	st	Z, r22
   190c4:	53 83       	std	Z+3, r21	; 0x03
   190c6:	42 83       	std	Z+2, r20	; 0x02
   190c8:	16 82       	std	Z+6, r1	; 0x06
   190ca:	80 e2       	ldi	r24, 0x20	; 32
   190cc:	87 83       	std	Z+7, r24	; 0x07
   190ce:	10 86       	std	Z+8, r1	; 0x08
   190d0:	85 e0       	ldi	r24, 0x05	; 5
   190d2:	86 87       	std	Z+14, r24	; 0x0e
   190d4:	85 e0       	ldi	r24, 0x05	; 5
   190d6:	90 e0       	ldi	r25, 0x00	; 0
   190d8:	a0 e0       	ldi	r26, 0x00	; 0
   190da:	b0 e0       	ldi	r27, 0x00	; 0
   190dc:	84 8b       	std	Z+20, r24	; 0x14
   190de:	95 8b       	std	Z+21, r25	; 0x15
   190e0:	a6 8b       	std	Z+22, r26	; 0x16
   190e2:	b7 8b       	std	Z+23, r27	; 0x17
   190e4:	11 86       	std	Z+9, r1	; 0x09
   190e6:	08 95       	ret

000190e8 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
   190e8:	46 2f       	mov	r20, r22
   190ea:	6d 37       	cpi	r22, 0x7D	; 125
   190ec:	08 f0       	brcs	.+2      	; 0x190f0 <RF24::setChannel(unsigned char)+0x8>
   190ee:	4d e7       	ldi	r20, 0x7D	; 125
   190f0:	65 e0       	ldi	r22, 0x05	; 5
   190f2:	0c 94 2f c7 	jmp	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>

000190f6 <RF24::powerUp()>:
_ZN4RF247powerUpEv():
   190f6:	cf 93       	push	r28
   190f8:	df 93       	push	r29
   190fa:	ec 01       	movw	r28, r24
   190fc:	60 e0       	ldi	r22, 0x00	; 0
   190fe:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   19102:	81 fd       	sbrc	r24, 1
   19104:	0e c0       	rjmp	.+28     	; 0x19122 <RF24::powerUp()+0x2c>
   19106:	48 2f       	mov	r20, r24
   19108:	42 60       	ori	r20, 0x02	; 2
   1910a:	60 e0       	ldi	r22, 0x00	; 0
   1910c:	ce 01       	movw	r24, r28
   1910e:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   19112:	65 e0       	ldi	r22, 0x05	; 5
   19114:	70 e0       	ldi	r23, 0x00	; 0
   19116:	80 e0       	ldi	r24, 0x00	; 0
   19118:	90 e0       	ldi	r25, 0x00	; 0
   1911a:	df 91       	pop	r29
   1911c:	cf 91       	pop	r28
   1911e:	0c 94 9b d5 	jmp	0x1ab36	; 0x1ab36 <delay>
   19122:	df 91       	pop	r29
   19124:	cf 91       	pop	r28
   19126:	08 95       	ret

00019128 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
   19128:	cf 93       	push	r28
   1912a:	df 93       	push	r29
   1912c:	ec 01       	movw	r28, r24
   1912e:	0e 94 ea c6 	call	0x18dd4	; 0x18dd4 <RF24::beginTransaction()>
   19132:	80 e5       	ldi	r24, 0x50	; 80
   19134:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   19138:	83 e7       	ldi	r24, 0x73	; 115
   1913a:	0e 94 02 ba 	call	0x17404	; 0x17404 <SPIClass::transfer(unsigned char)>
   1913e:	ce 01       	movw	r24, r28
   19140:	df 91       	pop	r29
   19142:	cf 91       	pop	r28
   19144:	0c 94 ed c6 	jmp	0x18dda	; 0x18dda <RF24::endTransaction()>

00019148 <RF24::setPALevel(unsigned char)>:
_ZN4RF2410setPALevelEh():
   19148:	0f 93       	push	r16
   1914a:	1f 93       	push	r17
   1914c:	cf 93       	push	r28
   1914e:	8c 01       	movw	r16, r24
   19150:	c6 2f       	mov	r28, r22
   19152:	66 e0       	ldi	r22, 0x06	; 6
   19154:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   19158:	88 7f       	andi	r24, 0xF8	; 248
   1915a:	c4 30       	cpi	r28, 0x04	; 4
   1915c:	58 f4       	brcc	.+22     	; 0x19174 <RF24::setPALevel(unsigned char)+0x2c>
   1915e:	cc 0f       	add	r28, r28
   19160:	cf 5f       	subi	r28, 0xFF	; 255
   19162:	4c 2f       	mov	r20, r28
   19164:	48 2b       	or	r20, r24
   19166:	66 e0       	ldi	r22, 0x06	; 6
   19168:	c8 01       	movw	r24, r16
   1916a:	cf 91       	pop	r28
   1916c:	1f 91       	pop	r17
   1916e:	0f 91       	pop	r16
   19170:	0c 94 2f c7 	jmp	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   19174:	c7 e0       	ldi	r28, 0x07	; 7
   19176:	f5 cf       	rjmp	.-22     	; 0x19162 <RF24::setPALevel(unsigned char)+0x1a>

00019178 <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
   19178:	66 e0       	ldi	r22, 0x06	; 6
   1917a:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   1917e:	90 e0       	ldi	r25, 0x00	; 0
   19180:	95 95       	asr	r25
   19182:	87 95       	ror	r24
   19184:	83 70       	andi	r24, 0x03	; 3
   19186:	08 95       	ret

00019188 <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
   19188:	ef 92       	push	r14
   1918a:	ff 92       	push	r15
   1918c:	0f 93       	push	r16
   1918e:	1f 93       	push	r17
   19190:	cf 93       	push	r28
   19192:	8c 01       	movw	r16, r24
   19194:	7b 01       	movw	r14, r22
   19196:	66 e0       	ldi	r22, 0x06	; 6
   19198:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   1919c:	c8 2f       	mov	r28, r24
   1919e:	c7 7d       	andi	r28, 0xD7	; 215
   191a0:	82 e0       	ldi	r24, 0x02	; 2
   191a2:	e8 16       	cp	r14, r24
   191a4:	f1 04       	cpc	r15, r1
   191a6:	e9 f4       	brne	.+58     	; 0x191e2 <RF24::setDataRate(rf24_datarate_e)+0x5a>
   191a8:	c0 62       	ori	r28, 0x20	; 32
   191aa:	8b e9       	ldi	r24, 0x9B	; 155
   191ac:	90 e0       	ldi	r25, 0x00	; 0
   191ae:	a0 e0       	ldi	r26, 0x00	; 0
   191b0:	b0 e0       	ldi	r27, 0x00	; 0
   191b2:	f8 01       	movw	r30, r16
   191b4:	80 8b       	std	Z+16, r24	; 0x10
   191b6:	91 8b       	std	Z+17, r25	; 0x11
   191b8:	a2 8b       	std	Z+18, r26	; 0x12
   191ba:	b3 8b       	std	Z+19, r27	; 0x13
   191bc:	4c 2f       	mov	r20, r28
   191be:	66 e0       	ldi	r22, 0x06	; 6
   191c0:	c8 01       	movw	r24, r16
   191c2:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   191c6:	66 e0       	ldi	r22, 0x06	; 6
   191c8:	c8 01       	movw	r24, r16
   191ca:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   191ce:	91 e0       	ldi	r25, 0x01	; 1
   191d0:	8c 13       	cpse	r24, r28
   191d2:	90 e0       	ldi	r25, 0x00	; 0
   191d4:	89 2f       	mov	r24, r25
   191d6:	cf 91       	pop	r28
   191d8:	1f 91       	pop	r17
   191da:	0f 91       	pop	r16
   191dc:	ff 90       	pop	r15
   191de:	ef 90       	pop	r14
   191e0:	08 95       	ret
   191e2:	85 e5       	ldi	r24, 0x55	; 85
   191e4:	90 e0       	ldi	r25, 0x00	; 0
   191e6:	a0 e0       	ldi	r26, 0x00	; 0
   191e8:	b0 e0       	ldi	r27, 0x00	; 0
   191ea:	ea 94       	dec	r14
   191ec:	ef 28       	or	r14, r15
   191ee:	09 f7       	brne	.-62     	; 0x191b2 <RF24::setDataRate(rf24_datarate_e)+0x2a>
   191f0:	c8 60       	ori	r28, 0x08	; 8
   191f2:	81 e4       	ldi	r24, 0x41	; 65
   191f4:	90 e0       	ldi	r25, 0x00	; 0
   191f6:	a0 e0       	ldi	r26, 0x00	; 0
   191f8:	b0 e0       	ldi	r27, 0x00	; 0
   191fa:	db cf       	rjmp	.-74     	; 0x191b2 <RF24::setDataRate(rf24_datarate_e)+0x2a>

000191fc <RF24::begin()>:
_ZN4RF245beginEv():
   191fc:	1f 93       	push	r17
   191fe:	cf 93       	push	r28
   19200:	df 93       	push	r29
   19202:	ec 01       	movw	r28, r24
   19204:	88 81       	ld	r24, Y
   19206:	99 81       	ldd	r25, Y+1	; 0x01
   19208:	2a 81       	ldd	r18, Y+2	; 0x02
   1920a:	3b 81       	ldd	r19, Y+3	; 0x03
   1920c:	82 17       	cp	r24, r18
   1920e:	93 07       	cpc	r25, r19
   19210:	19 f0       	breq	.+6      	; 0x19218 <RF24::begin()+0x1c>
   19212:	61 e0       	ldi	r22, 0x01	; 1
   19214:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   19218:	8a 81       	ldd	r24, Y+2	; 0x02
   1921a:	9b 81       	ldd	r25, Y+3	; 0x03
   1921c:	28 81       	ld	r18, Y
   1921e:	39 81       	ldd	r19, Y+1	; 0x01
   19220:	28 17       	cp	r18, r24
   19222:	39 07       	cpc	r19, r25
   19224:	19 f0       	breq	.+6      	; 0x1922c <RF24::begin()+0x30>
   19226:	61 e0       	ldi	r22, 0x01	; 1
   19228:	0e 94 8c d6 	call	0x1ad18	; 0x1ad18 <pinMode>
   1922c:	0e 94 e0 ac 	call	0x159c0	; 0x159c0 <SPIClass::begin()>
   19230:	60 e0       	ldi	r22, 0x00	; 0
   19232:	ce 01       	movw	r24, r28
   19234:	0e 94 de c6 	call	0x18dbc	; 0x18dbc <RF24::ce(bool)>
   19238:	61 e0       	ldi	r22, 0x01	; 1
   1923a:	ce 01       	movw	r24, r28
   1923c:	0e 94 c6 c6 	call	0x18d8c	; 0x18d8c <RF24::csn(bool)>
   19240:	65 e0       	ldi	r22, 0x05	; 5
   19242:	70 e0       	ldi	r23, 0x00	; 0
   19244:	80 e0       	ldi	r24, 0x00	; 0
   19246:	90 e0       	ldi	r25, 0x00	; 0
   19248:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
   1924c:	4c e0       	ldi	r20, 0x0C	; 12
   1924e:	60 e0       	ldi	r22, 0x00	; 0
   19250:	ce 01       	movw	r24, r28
   19252:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF2410setRetriesEhh():
   19256:	4f e5       	ldi	r20, 0x5F	; 95
   19258:	64 e0       	ldi	r22, 0x04	; 4
   1925a:	ce 01       	movw	r24, r28
   1925c:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF245beginEv():
   19260:	60 e0       	ldi	r22, 0x00	; 0
   19262:	ce 01       	movw	r24, r28
   19264:	0e 94 a4 c8 	call	0x19148	; 0x19148 <RF24::setPALevel(unsigned char)>
   19268:	62 e0       	ldi	r22, 0x02	; 2
   1926a:	70 e0       	ldi	r23, 0x00	; 0
   1926c:	ce 01       	movw	r24, r28
   1926e:	0e 94 c4 c8 	call	0x19188	; 0x19188 <RF24::setDataRate(rf24_datarate_e)>
   19272:	88 23       	and	r24, r24
   19274:	11 f0       	breq	.+4      	; 0x1927a <RF24::begin()+0x7e>
   19276:	81 e0       	ldi	r24, 0x01	; 1
   19278:	8e 83       	std	Y+6, r24	; 0x06
   1927a:	66 e0       	ldi	r22, 0x06	; 6
   1927c:	ce 01       	movw	r24, r28
   1927e:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   19282:	18 2f       	mov	r17, r24
   19284:	70 e0       	ldi	r23, 0x00	; 0
   19286:	60 e0       	ldi	r22, 0x00	; 0
   19288:	ce 01       	movw	r24, r28
   1928a:	0e 94 c4 c8 	call	0x19188	; 0x19188 <RF24::setDataRate(rf24_datarate_e)>
   1928e:	ce 01       	movw	r24, r28
   19290:	0e 94 94 c8 	call	0x19128	; 0x19128 <RF24::toggle_features()>
   19294:	40 e0       	ldi	r20, 0x00	; 0
   19296:	6d e1       	ldi	r22, 0x1D	; 29
   19298:	ce 01       	movw	r24, r28
   1929a:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   1929e:	40 e0       	ldi	r20, 0x00	; 0
   192a0:	6c e1       	ldi	r22, 0x1C	; 28
   192a2:	ce 01       	movw	r24, r28
   192a4:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   192a8:	18 86       	std	Y+8, r1	; 0x08
   192aa:	40 e7       	ldi	r20, 0x70	; 112
   192ac:	67 e0       	ldi	r22, 0x07	; 7
   192ae:	ce 01       	movw	r24, r28
   192b0:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   192b4:	6c e4       	ldi	r22, 0x4C	; 76
   192b6:	ce 01       	movw	r24, r28
   192b8:	0e 94 74 c8 	call	0x190e8	; 0x190e8 <RF24::setChannel(unsigned char)>
   192bc:	ce 01       	movw	r24, r28
   192be:	0e 94 5d c7 	call	0x18eba	; 0x18eba <RF24::flush_rx()>
   192c2:	ce 01       	movw	r24, r28
   192c4:	0e 94 60 c7 	call	0x18ec0	; 0x18ec0 <RF24::flush_tx()>
   192c8:	ce 01       	movw	r24, r28
   192ca:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <RF24::powerUp()>
   192ce:	60 e0       	ldi	r22, 0x00	; 0
   192d0:	ce 01       	movw	r24, r28
   192d2:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   192d6:	48 2f       	mov	r20, r24
   192d8:	4e 7f       	andi	r20, 0xFE	; 254
   192da:	60 e0       	ldi	r22, 0x00	; 0
   192dc:	ce 01       	movw	r24, r28
   192de:	0e 94 2f c7 	call	0x18e5e	; 0x18e5e <RF24::write_register(unsigned char, unsigned char)>
   192e2:	64 e6       	ldi	r22, 0x64	; 100
   192e4:	70 e0       	ldi	r23, 0x00	; 0
   192e6:	80 e0       	ldi	r24, 0x00	; 0
   192e8:	90 e0       	ldi	r25, 0x00	; 0
   192ea:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
   192ee:	11 50       	subi	r17, 0x01	; 1
   192f0:	81 e0       	ldi	r24, 0x01	; 1
   192f2:	1e 3f       	cpi	r17, 0xFE	; 254
   192f4:	08 f0       	brcs	.+2      	; 0x192f8 <RF24::begin()+0xfc>
   192f6:	80 e0       	ldi	r24, 0x00	; 0
   192f8:	df 91       	pop	r29
   192fa:	cf 91       	pop	r28
   192fc:	1f 91       	pop	r17
   192fe:	08 95       	ret

00019300 <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
   19300:	66 e0       	ldi	r22, 0x06	; 6
   19302:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   19306:	28 2f       	mov	r18, r24
   19308:	28 72       	andi	r18, 0x28	; 40
   1930a:	20 32       	cpi	r18, 0x20	; 32
   1930c:	31 f0       	breq	.+12     	; 0x1931a <RF24::getDataRate()+0x1a>
   1930e:	81 e0       	ldi	r24, 0x01	; 1
   19310:	90 e0       	ldi	r25, 0x00	; 0
   19312:	28 30       	cpi	r18, 0x08	; 8
   19314:	21 f0       	breq	.+8      	; 0x1931e <RF24::getDataRate()+0x1e>
   19316:	80 e0       	ldi	r24, 0x00	; 0
   19318:	08 95       	ret
   1931a:	82 e0       	ldi	r24, 0x02	; 2
   1931c:	90 e0       	ldi	r25, 0x00	; 0
   1931e:	08 95       	ret

00019320 <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1560
}

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
   19320:	0f 93       	push	r16
   19322:	1f 93       	push	r17
   19324:	cf 93       	push	r28
   19326:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   19328:	60 e0       	ldi	r22, 0x00	; 0
   1932a:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
   1932e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   19330:	61 e0       	ldi	r22, 0x01	; 1
   19332:	c8 01       	movw	r24, r16
   19334:	0e 94 18 c7 	call	0x18e30	; 0x18e30 <RF24::read_register(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   19338:	c3 fd       	sbrc	r28, 3
   1933a:	02 c0       	rjmp	.+4      	; 0x19340 <RF24::getCRCLength()+0x20>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566 (discriminator 1)
   1933c:	88 23       	and	r24, r24
   1933e:	39 f0       	breq	.+14     	; 0x1934e <RF24::getCRCLength()+0x2e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   19340:	81 e0       	ldi	r24, 0x01	; 1
   19342:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   19344:	c2 ff       	sbrs	r28, 2
   19346:	05 c0       	rjmp	.+10     	; 0x19352 <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
      result = RF24_CRC_16;
   19348:	82 e0       	ldi	r24, 0x02	; 2
   1934a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1574
    else
      result = RF24_CRC_8;
  }

  return result;
   1934c:	02 c0       	rjmp	.+4      	; 0x19352 <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   1934e:	90 e0       	ldi	r25, 0x00	; 0
   19350:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1575
    else
      result = RF24_CRC_8;
  }

  return result;
}
   19352:	cf 91       	pop	r28
   19354:	1f 91       	pop	r17
   19356:	0f 91       	pop	r16
   19358:	08 95       	ret

0001935a <RF24::printDetails()>:
_ZN4RF2412printDetailsEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:531
  rf24_csn_e_str_3,
};
#endif

void RF24::printDetails(void)
{
   1935a:	cf 93       	push	r28
   1935c:	df 93       	push	r29
   1935e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:565
	}
	printf("\n================ NRF Configuration ================\n");
 
#endif //Linux

  print_status(get_status());
   19360:	0e 94 63 c7 	call	0x18ec6	; 0x18ec6 <RF24::get_status()>
   19364:	68 2f       	mov	r22, r24
   19366:	ce 01       	movw	r24, r28
   19368:	0e 94 66 c7 	call	0x18ecc	; 0x18ecc <RF24::print_status(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:567

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   1936c:	22 e0       	ldi	r18, 0x02	; 2
   1936e:	4a e0       	ldi	r20, 0x0A	; 10
   19370:	62 e2       	ldi	r22, 0x22	; 34
   19372:	73 e6       	ldi	r23, 0x63	; 99
   19374:	ce 01       	movw	r24, r28
   19376:	0e 94 d1 c7 	call	0x18fa2	; 0x18fa2 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   1937a:	24 e0       	ldi	r18, 0x04	; 4
   1937c:	4c e0       	ldi	r20, 0x0C	; 12
   1937e:	65 e1       	ldi	r22, 0x15	; 21
   19380:	73 e6       	ldi	r23, 0x63	; 99
   19382:	ce 01       	movw	r24, r28
   19384:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   19388:	21 e0       	ldi	r18, 0x01	; 1
   1938a:	40 e1       	ldi	r20, 0x10	; 16
   1938c:	6c e0       	ldi	r22, 0x0C	; 12
   1938e:	73 e6       	ldi	r23, 0x63	; 99
   19390:	ce 01       	movw	r24, r28
   19392:	0e 94 d1 c7 	call	0x18fa2	; 0x18fa2 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   19396:	26 e0       	ldi	r18, 0x06	; 6
   19398:	41 e1       	ldi	r20, 0x11	; 17
   1939a:	61 e0       	ldi	r22, 0x01	; 1
   1939c:	73 e6       	ldi	r23, 0x63	; 99
   1939e:	ce 01       	movw	r24, r28
   193a0:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   193a4:	21 e0       	ldi	r18, 0x01	; 1
   193a6:	41 e0       	ldi	r20, 0x01	; 1
   193a8:	6a ef       	ldi	r22, 0xFA	; 250
   193aa:	72 e6       	ldi	r23, 0x62	; 98
   193ac:	ce 01       	movw	r24, r28
   193ae:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   193b2:	21 e0       	ldi	r18, 0x01	; 1
   193b4:	42 e0       	ldi	r20, 0x02	; 2
   193b6:	60 ef       	ldi	r22, 0xF0	; 240
   193b8:	72 e6       	ldi	r23, 0x62	; 98
   193ba:	ce 01       	movw	r24, r28
   193bc:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   193c0:	21 e0       	ldi	r18, 0x01	; 1
   193c2:	45 e0       	ldi	r20, 0x05	; 5
   193c4:	69 ee       	ldi	r22, 0xE9	; 233
   193c6:	72 e6       	ldi	r23, 0x62	; 98
   193c8:	ce 01       	movw	r24, r28
   193ca:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   193ce:	21 e0       	ldi	r18, 0x01	; 1
   193d0:	46 e0       	ldi	r20, 0x06	; 6
   193d2:	60 ee       	ldi	r22, 0xE0	; 224
   193d4:	72 e6       	ldi	r23, 0x62	; 98
   193d6:	ce 01       	movw	r24, r28
   193d8:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   193dc:	21 e0       	ldi	r18, 0x01	; 1
   193de:	40 e0       	ldi	r20, 0x00	; 0
   193e0:	68 ed       	ldi	r22, 0xD8	; 216
   193e2:	72 e6       	ldi	r23, 0x62	; 98
   193e4:	ce 01       	movw	r24, r28
   193e6:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   193ea:	22 e0       	ldi	r18, 0x02	; 2
   193ec:	4c e1       	ldi	r20, 0x1C	; 28
   193ee:	6a ec       	ldi	r22, 0xCA	; 202
   193f0:	72 e6       	ldi	r23, 0x62	; 98
   193f2:	ce 01       	movw	r24, r28
   193f4:	0e 94 93 c7 	call	0x18f26	; 0x18f26 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:579

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   193f8:	ce 01       	movw	r24, r28
   193fa:	0e 94 80 c9 	call	0x19300	; 0x19300 <RF24::getDataRate()>
   193fe:	fc 01       	movw	r30, r24
   19400:	ee 0f       	add	r30, r30
   19402:	ff 1f       	adc	r31, r31
   19404:	e7 57       	subi	r30, 0x77	; 119
   19406:	fc 49       	sbci	r31, 0x9C	; 156
   19408:	85 91       	lpm	r24, Z+
   1940a:	94 91       	lpm	r25, Z
   1940c:	9f 93       	push	r25
   1940e:	8f 93       	push	r24
   19410:	88 eb       	ldi	r24, 0xB8	; 184
   19412:	92 e6       	ldi	r25, 0x62	; 98
   19414:	9f 93       	push	r25
   19416:	8f 93       	push	r24
   19418:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   1941c:	ee 81       	ldd	r30, Y+6	; 0x06
   1941e:	f0 e0       	ldi	r31, 0x00	; 0
   19420:	ee 0f       	add	r30, r30
   19422:	ff 1f       	adc	r31, r31
   19424:	ee 58       	subi	r30, 0x8E	; 142
   19426:	fc 49       	sbci	r31, 0x9C	; 156
   19428:	85 91       	lpm	r24, Z+
   1942a:	94 91       	lpm	r25, Z
   1942c:	9f 93       	push	r25
   1942e:	8f 93       	push	r24
   19430:	89 ea       	ldi	r24, 0xA9	; 169
   19432:	92 e6       	ldi	r25, 0x62	; 98
   19434:	9f 93       	push	r25
   19436:	8f 93       	push	r24
   19438:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   1943c:	ce 01       	movw	r24, r28
   1943e:	0e 94 90 c9 	call	0x19320	; 0x19320 <RF24::getCRCLength()>
   19442:	fc 01       	movw	r30, r24
   19444:	ee 0f       	add	r30, r30
   19446:	ff 1f       	adc	r31, r31
   19448:	ec 5a       	subi	r30, 0xAC	; 172
   1944a:	fc 49       	sbci	r31, 0x9C	; 156
   1944c:	85 91       	lpm	r24, Z+
   1944e:	94 91       	lpm	r25, Z
   19450:	9f 93       	push	r25
   19452:	8f 93       	push	r24
   19454:	86 e9       	ldi	r24, 0x96	; 150
   19456:	92 e6       	ldi	r25, 0x62	; 98
   19458:	9f 93       	push	r25
   1945a:	8f 93       	push	r24
   1945c:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   19460:	ce 01       	movw	r24, r28
   19462:	0e 94 bc c8 	call	0x19178	; 0x19178 <RF24::getPALevel()>
   19466:	e8 2f       	mov	r30, r24
   19468:	f0 e0       	ldi	r31, 0x00	; 0
   1946a:	ee 0f       	add	r30, r30
   1946c:	ff 1f       	adc	r31, r31
   1946e:	e1 5d       	subi	r30, 0xD1	; 209
   19470:	fc 49       	sbci	r31, 0x9C	; 156
   19472:	85 91       	lpm	r24, Z+
   19474:	94 91       	lpm	r25, Z
   19476:	9f 93       	push	r25
   19478:	8f 93       	push	r24
   1947a:	85 e8       	ldi	r24, 0x85	; 133
   1947c:	92 e6       	ldi	r25, 0x62	; 98
   1947e:	9f 93       	push	r25
   19480:	8f 93       	push	r24
   19482:	0e 94 8b e1 	call	0x1c316	; 0x1c316 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:584

}
   19486:	8d b7       	in	r24, 0x3d	; 61
   19488:	9e b7       	in	r25, 0x3e	; 62
   1948a:	40 96       	adiw	r24, 0x10	; 16
   1948c:	0f b6       	in	r0, 0x3f	; 63
   1948e:	f8 94       	cli
   19490:	9e bf       	out	0x3e, r25	; 62
   19492:	0f be       	out	0x3f, r0	; 63
   19494:	8d bf       	out	0x3d, r24	; 61
   19496:	df 91       	pop	r29
   19498:	cf 91       	pop	r28
   1949a:	08 95       	ret

0001949c <RF24Network::RF24Network(RF24&)>:
_ZN11RF24NetworkC2ER4RF24():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   1949c:	fc 01       	movw	r30, r24
   1949e:	70 ab       	std	Z+48, r23	; 0x30
   194a0:	67 a7       	std	Z+47, r22	; 0x2f
   194a2:	dc 01       	movw	r26, r24
   194a4:	a1 53       	subi	r26, 0x31	; 49
   194a6:	bf 4f       	sbci	r27, 0xFF	; 255
   194a8:	c5 96       	adiw	r24, 0x35	; 53
   194aa:	11 96       	adiw	r26, 0x01	; 1
   194ac:	9c 93       	st	X, r25
   194ae:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:66
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
   194b0:	1c 96       	adiw	r26, 0x0c	; 12
   194b2:	88 55       	subi	r24, 0x58	; 88
   194b4:	9f 4f       	sbci	r25, 0xFF	; 255
   194b6:	8d 93       	st	X+, r24
   194b8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   194ba:	0c 97       	sbiw	r24, 0x0c	; 12
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:67
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
  frag_ptr = &frag_queue;
   194bc:	90 a7       	std	Z+40, r25	; 0x28
   194be:	87 a3       	std	Z+39, r24	; 0x27
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:69
  #endif
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
   194c0:	13 a6       	std	Z+43, r1	; 0x2b
   194c2:	14 a6       	std	Z+44, r1	; 0x2c
   194c4:	15 a6       	std	Z+45, r1	; 0x2d
   194c6:	16 a6       	std	Z+46, r1	; 0x2e
   194c8:	12 a6       	std	Z+42, r1	; 0x2a
   194ca:	11 a6       	std	Z+41, r1	; 0x29
   194cc:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:70
}
   194ce:	08 95       	ret

000194d0 <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>:
_ZN8RF24MeshC2ER4RF24R11RF24Network():
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:11
#include "RF24Mesh_config.h"
#if defined (__linux) && !defined(__ARDUINO_X86__)
#include <fstream>
#endif

RF24Mesh::RF24Mesh( RF24& _radio,RF24Network& _network ): radio(_radio),network(_network){}
   194d0:	fc 01       	movw	r30, r24
   194d2:	77 83       	std	Z+7, r23	; 0x07
   194d4:	66 83       	std	Z+6, r22	; 0x06
   194d6:	51 87       	std	Z+9, r21	; 0x09
   194d8:	40 87       	std	Z+8, r20	; 0x08
   194da:	08 95       	ret

000194dc <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   194dc:	dc 01       	movw	r26, r24
   194de:	50 e0       	ldi	r21, 0x00	; 0
   194e0:	ec e0       	ldi	r30, 0x0C	; 12
   194e2:	f4 e6       	ldi	r31, 0x64	; 100
   194e4:	81 e0       	ldi	r24, 0x01	; 1
   194e6:	86 17       	cp	r24, r22
   194e8:	30 f4       	brcc	.+12     	; 0x194f6 <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   194ea:	94 91       	lpm	r25, Z
   194ec:	49 0f       	add	r20, r25
   194ee:	51 1d       	adc	r21, r1
   194f0:	8f 5f       	subi	r24, 0xFF	; 255
   194f2:	31 96       	adiw	r30, 0x01	; 1
   194f4:	f8 cf       	rjmp	.-16     	; 0x194e6 <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   194f6:	63 30       	cpi	r22, 0x03	; 3
   194f8:	38 f0       	brcs	.+14     	; 0x19508 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   194fa:	cd 01       	movw	r24, r26
   194fc:	83 70       	andi	r24, 0x03	; 3
   194fe:	99 27       	eor	r25, r25
   19500:	89 2b       	or	r24, r25
   19502:	11 f4       	brne	.+4      	; 0x19508 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   19504:	4f 5f       	subi	r20, 0xFF	; 255
   19506:	5f 4f       	sbci	r21, 0xFF	; 255
   19508:	9d 01       	movw	r18, r26
   1950a:	2d 5f       	subi	r18, 0xFD	; 253
   1950c:	3f 4f       	sbci	r19, 0xFF	; 255
   1950e:	36 95       	lsr	r19
   19510:	27 95       	ror	r18
   19512:	36 95       	lsr	r19
   19514:	27 95       	ror	r18
   19516:	6d e6       	ldi	r22, 0x6D	; 109
   19518:	71 e0       	ldi	r23, 0x01	; 1
   1951a:	a6 9f       	mul	r26, r22
   1951c:	c0 01       	movw	r24, r0
   1951e:	a7 9f       	mul	r26, r23
   19520:	90 0d       	add	r25, r0
   19522:	b6 9f       	mul	r27, r22
   19524:	90 0d       	add	r25, r0
   19526:	11 24       	eor	r1, r1
   19528:	01 97       	sbiw	r24, 0x01	; 1
   1952a:	82 0f       	add	r24, r18
   1952c:	93 1f       	adc	r25, r19
   1952e:	84 0f       	add	r24, r20
   19530:	95 1f       	adc	r25, r21
   19532:	08 95       	ret

00019534 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   19534:	dc 01       	movw	r26, r24
   19536:	ed 91       	ld	r30, X+
   19538:	fc 91       	ld	r31, X
   1953a:	01 90       	ld	r0, Z+
   1953c:	f0 81       	ld	r31, Z
   1953e:	e0 2d       	mov	r30, r0
   19540:	19 94       	eijmp

00019542 <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   19542:	8f 92       	push	r8
   19544:	9f 92       	push	r9
   19546:	af 92       	push	r10
   19548:	bf 92       	push	r11
   1954a:	cf 92       	push	r12
   1954c:	df 92       	push	r13
   1954e:	ef 92       	push	r14
   19550:	ff 92       	push	r15
   19552:	cf 93       	push	r28
   19554:	df 93       	push	r29
   19556:	ec 01       	movw	r28, r24
   19558:	6a 01       	movw	r12, r20
   1955a:	7b 01       	movw	r14, r22
   1955c:	80 e8       	ldi	r24, 0x80	; 128
   1955e:	c8 1a       	sub	r12, r24
   19560:	83 e4       	ldi	r24, 0x43	; 67
   19562:	d8 0a       	sbc	r13, r24
   19564:	8d e6       	ldi	r24, 0x6D	; 109
   19566:	e8 0a       	sbc	r14, r24
   19568:	88 e3       	ldi	r24, 0x38	; 56
   1956a:	f8 0a       	sbc	r15, r24
   1956c:	8c e3       	ldi	r24, 0x3C	; 60
   1956e:	88 2e       	mov	r8, r24
   19570:	91 2c       	mov	r9, r1
   19572:	a1 2c       	mov	r10, r1
   19574:	b1 2c       	mov	r11, r1
   19576:	c7 01       	movw	r24, r14
   19578:	b6 01       	movw	r22, r12
   1957a:	a5 01       	movw	r20, r10
   1957c:	94 01       	movw	r18, r8
   1957e:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   19582:	6d 83       	std	Y+5, r22	; 0x05
   19584:	ca 01       	movw	r24, r20
   19586:	b9 01       	movw	r22, r18
   19588:	a5 01       	movw	r20, r10
   1958a:	94 01       	movw	r18, r8
   1958c:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   19590:	6c 83       	std	Y+4, r22	; 0x04
   19592:	c7 01       	movw	r24, r14
   19594:	b6 01       	movw	r22, r12
   19596:	20 e1       	ldi	r18, 0x10	; 16
   19598:	3e e0       	ldi	r19, 0x0E	; 14
   1959a:	40 e0       	ldi	r20, 0x00	; 0
   1959c:	50 e0       	ldi	r21, 0x00	; 0
   1959e:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   195a2:	ca 01       	movw	r24, r20
   195a4:	b9 01       	movw	r22, r18
   195a6:	28 e1       	ldi	r18, 0x18	; 24
   195a8:	30 e0       	ldi	r19, 0x00	; 0
   195aa:	40 e0       	ldi	r20, 0x00	; 0
   195ac:	50 e0       	ldi	r21, 0x00	; 0
   195ae:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   195b2:	6b 83       	std	Y+3, r22	; 0x03
   195b4:	c7 01       	movw	r24, r14
   195b6:	b6 01       	movw	r22, r12
   195b8:	20 e8       	ldi	r18, 0x80	; 128
   195ba:	31 e5       	ldi	r19, 0x51	; 81
   195bc:	41 e0       	ldi	r20, 0x01	; 1
   195be:	50 e0       	ldi	r21, 0x00	; 0
   195c0:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   195c4:	18 82       	st	Y, r1
   195c6:	63 e9       	ldi	r22, 0x93	; 147
   195c8:	7e ef       	ldi	r23, 0xFE	; 254
   195ca:	48 81       	ld	r20, Y
   195cc:	54 2f       	mov	r21, r20
   195ce:	53 70       	andi	r21, 0x03	; 3
   195d0:	81 e0       	ldi	r24, 0x01	; 1
   195d2:	09 f0       	breq	.+2      	; 0x195d6 <DateTime::DateTime(unsigned long)+0x94>
   195d4:	80 e0       	ldi	r24, 0x00	; 0
   195d6:	90 e0       	ldi	r25, 0x00	; 0
   195d8:	fc 01       	movw	r30, r24
   195da:	e3 59       	subi	r30, 0x93	; 147
   195dc:	fe 4f       	sbci	r31, 0xFE	; 254
   195de:	2e 17       	cp	r18, r30
   195e0:	3f 07       	cpc	r19, r31
   195e2:	40 f0       	brcs	.+16     	; 0x195f4 <DateTime::DateTime(unsigned long)+0xb2>
   195e4:	fb 01       	movw	r30, r22
   195e6:	e8 1b       	sub	r30, r24
   195e8:	f9 0b       	sbc	r31, r25
   195ea:	2e 0f       	add	r18, r30
   195ec:	3f 1f       	adc	r19, r31
   195ee:	4f 5f       	subi	r20, 0xFF	; 255
   195f0:	48 83       	st	Y, r20
   195f2:	eb cf       	rjmp	.-42     	; 0x195ca <DateTime::DateTime(unsigned long)+0x88>
   195f4:	81 e0       	ldi	r24, 0x01	; 1
   195f6:	89 83       	std	Y+1, r24	; 0x01
   195f8:	89 81       	ldd	r24, Y+1	; 0x01
   195fa:	68 2f       	mov	r22, r24
   195fc:	61 50       	subi	r22, 0x01	; 1
   195fe:	77 0b       	sbc	r23, r23
   19600:	fb 01       	movw	r30, r22
   19602:	e4 5f       	subi	r30, 0xF4	; 244
   19604:	fb 49       	sbci	r31, 0x9B	; 155
   19606:	e4 91       	lpm	r30, Z
   19608:	51 11       	cpse	r21, r1
   1960a:	03 c0       	rjmp	.+6      	; 0x19612 <DateTime::DateTime(unsigned long)+0xd0>
   1960c:	82 30       	cpi	r24, 0x02	; 2
   1960e:	09 f4       	brne	.+2      	; 0x19612 <DateTime::DateTime(unsigned long)+0xd0>
   19610:	ef 5f       	subi	r30, 0xFF	; 255
   19612:	f0 e0       	ldi	r31, 0x00	; 0
   19614:	2e 17       	cp	r18, r30
   19616:	3f 07       	cpc	r19, r31
   19618:	20 f0       	brcs	.+8      	; 0x19622 <DateTime::DateTime(unsigned long)+0xe0>
   1961a:	2e 1b       	sub	r18, r30
   1961c:	3f 0b       	sbc	r19, r31
   1961e:	8f 5f       	subi	r24, 0xFF	; 255
   19620:	ea cf       	rjmp	.-44     	; 0x195f6 <DateTime::DateTime(unsigned long)+0xb4>
   19622:	2f 5f       	subi	r18, 0xFF	; 255
   19624:	2a 83       	std	Y+2, r18	; 0x02
   19626:	df 91       	pop	r29
   19628:	cf 91       	pop	r28
   1962a:	ff 90       	pop	r15
   1962c:	ef 90       	pop	r14
   1962e:	df 90       	pop	r13
   19630:	cf 90       	pop	r12
   19632:	bf 90       	pop	r11
   19634:	af 90       	pop	r10
   19636:	9f 90       	pop	r9
   19638:	8f 90       	pop	r8
   1963a:	08 95       	ret

0001963c <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   1963c:	cf 92       	push	r12
   1963e:	ef 92       	push	r14
   19640:	0f 93       	push	r16
   19642:	fc 01       	movw	r30, r24
   19644:	60 3d       	cpi	r22, 0xD0	; 208
   19646:	87 e0       	ldi	r24, 0x07	; 7
   19648:	78 07       	cpc	r23, r24
   1964a:	10 f0       	brcs	.+4      	; 0x19650 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   1964c:	60 5d       	subi	r22, 0xD0	; 208
   1964e:	77 40       	sbci	r23, 0x07	; 7
   19650:	60 83       	st	Z, r22
   19652:	41 83       	std	Z+1, r20	; 0x01
   19654:	22 83       	std	Z+2, r18	; 0x02
   19656:	03 83       	std	Z+3, r16	; 0x03
   19658:	e4 82       	std	Z+4, r14	; 0x04
   1965a:	c5 82       	std	Z+5, r12	; 0x05
   1965c:	0f 91       	pop	r16
   1965e:	ef 90       	pop	r14
   19660:	cf 90       	pop	r12
   19662:	08 95       	ret

00019664 <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   19664:	fc 01       	movw	r30, r24
   19666:	80 81       	ld	r24, Z
   19668:	42 81       	ldd	r20, Z+2	; 0x02
   1966a:	61 81       	ldd	r22, Z+1	; 0x01
   1966c:	90 e0       	ldi	r25, 0x00	; 0
   1966e:	0e 94 6e ca 	call	0x194dc	; 0x194dc <date2days(unsigned int, unsigned char, unsigned char)>
   19672:	06 96       	adiw	r24, 0x06	; 6
   19674:	67 e0       	ldi	r22, 0x07	; 7
   19676:	70 e0       	ldi	r23, 0x00	; 0
   19678:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
   1967c:	08 95       	ret

0001967e <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   1967e:	8a e4       	ldi	r24, 0x4A	; 74
   19680:	93 e1       	ldi	r25, 0x13	; 19
   19682:	0e 94 7e cd 	call	0x19afc	; 0x19afc <TwoWire::begin()>
   19686:	81 e0       	ldi	r24, 0x01	; 1
   19688:	08 95       	ret

0001968a <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   1968a:	1f 93       	push	r17
   1968c:	cf 93       	push	r28
   1968e:	df 93       	push	r29
   19690:	ec 01       	movw	r28, r24
   19692:	68 e6       	ldi	r22, 0x68	; 104
   19694:	70 e0       	ldi	r23, 0x00	; 0
   19696:	8a e4       	ldi	r24, 0x4A	; 74
   19698:	93 e1       	ldi	r25, 0x13	; 19
   1969a:	0e 94 9a cd 	call	0x19b34	; 0x19b34 <TwoWire::beginTransmission(int)>
   1969e:	60 e0       	ldi	r22, 0x00	; 0
   196a0:	8a e4       	ldi	r24, 0x4A	; 74
   196a2:	93 e1       	ldi	r25, 0x13	; 19
   196a4:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   196a8:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   196aa:	1a e0       	ldi	r17, 0x0A	; 10
   196ac:	82 2f       	mov	r24, r18
   196ae:	61 2f       	mov	r22, r17
   196b0:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   196b4:	68 2f       	mov	r22, r24
   196b6:	66 0f       	add	r22, r22
   196b8:	68 0f       	add	r22, r24
   196ba:	66 0f       	add	r22, r22
   196bc:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   196be:	8a e4       	ldi	r24, 0x4A	; 74
   196c0:	93 e1       	ldi	r25, 0x13	; 19
   196c2:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   196c6:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   196c8:	82 2f       	mov	r24, r18
   196ca:	61 2f       	mov	r22, r17
   196cc:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   196d0:	68 2f       	mov	r22, r24
   196d2:	66 0f       	add	r22, r22
   196d4:	68 0f       	add	r22, r24
   196d6:	66 0f       	add	r22, r22
   196d8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   196da:	8a e4       	ldi	r24, 0x4A	; 74
   196dc:	93 e1       	ldi	r25, 0x13	; 19
   196de:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   196e2:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   196e4:	82 2f       	mov	r24, r18
   196e6:	61 2f       	mov	r22, r17
   196e8:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   196ec:	68 2f       	mov	r22, r24
   196ee:	66 0f       	add	r22, r22
   196f0:	68 0f       	add	r22, r24
   196f2:	66 0f       	add	r22, r22
   196f4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   196f6:	8a e4       	ldi	r24, 0x4A	; 74
   196f8:	93 e1       	ldi	r25, 0x13	; 19
   196fa:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   196fe:	60 e0       	ldi	r22, 0x00	; 0
   19700:	8a e4       	ldi	r24, 0x4A	; 74
   19702:	93 e1       	ldi	r25, 0x13	; 19
   19704:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   19708:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   1970a:	82 2f       	mov	r24, r18
   1970c:	61 2f       	mov	r22, r17
   1970e:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   19712:	68 2f       	mov	r22, r24
   19714:	66 0f       	add	r22, r22
   19716:	68 0f       	add	r22, r24
   19718:	66 0f       	add	r22, r22
   1971a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1971c:	8a e4       	ldi	r24, 0x4A	; 74
   1971e:	93 e1       	ldi	r25, 0x13	; 19
   19720:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   19724:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   19726:	82 2f       	mov	r24, r18
   19728:	61 2f       	mov	r22, r17
   1972a:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   1972e:	68 2f       	mov	r22, r24
   19730:	66 0f       	add	r22, r22
   19732:	68 0f       	add	r22, r24
   19734:	66 0f       	add	r22, r22
   19736:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   19738:	8a e4       	ldi	r24, 0x4A	; 74
   1973a:	93 e1       	ldi	r25, 0x13	; 19
   1973c:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   19740:	28 81       	ld	r18, Y
bin2bcd():
   19742:	82 2f       	mov	r24, r18
   19744:	61 2f       	mov	r22, r17
   19746:	0e 94 91 dc 	call	0x1b922	; 0x1b922 <__udivmodqi4>
   1974a:	68 2f       	mov	r22, r24
   1974c:	66 0f       	add	r22, r22
   1974e:	68 0f       	add	r22, r24
   19750:	66 0f       	add	r22, r22
   19752:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   19754:	8a e4       	ldi	r24, 0x4A	; 74
   19756:	93 e1       	ldi	r25, 0x13	; 19
   19758:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   1975c:	8a e4       	ldi	r24, 0x4A	; 74
   1975e:	93 e1       	ldi	r25, 0x13	; 19
   19760:	df 91       	pop	r29
   19762:	cf 91       	pop	r28
   19764:	1f 91       	pop	r17
   19766:	0c 94 18 ce 	jmp	0x19c30	; 0x19c30 <TwoWire::endTransmission()>

0001976a <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   1976a:	68 e6       	ldi	r22, 0x68	; 104
   1976c:	70 e0       	ldi	r23, 0x00	; 0
   1976e:	8a e4       	ldi	r24, 0x4A	; 74
   19770:	93 e1       	ldi	r25, 0x13	; 19
   19772:	0e 94 9a cd 	call	0x19b34	; 0x19b34 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   19776:	60 e0       	ldi	r22, 0x00	; 0
   19778:	8a e4       	ldi	r24, 0x4A	; 74
   1977a:	93 e1       	ldi	r25, 0x13	; 19
   1977c:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   19780:	8a e4       	ldi	r24, 0x4A	; 74
   19782:	93 e1       	ldi	r25, 0x13	; 19
   19784:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   19788:	41 e0       	ldi	r20, 0x01	; 1
   1978a:	50 e0       	ldi	r21, 0x00	; 0
   1978c:	68 e6       	ldi	r22, 0x68	; 104
   1978e:	70 e0       	ldi	r23, 0x00	; 0
   19790:	8a e4       	ldi	r24, 0x4A	; 74
   19792:	93 e1       	ldi	r25, 0x13	; 19
   19794:	0e 94 15 ce 	call	0x19c2a	; 0x19c2a <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   19798:	8a e4       	ldi	r24, 0x4A	; 74
   1979a:	93 e1       	ldi	r25, 0x13	; 19
   1979c:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   197a0:	80 58       	subi	r24, 0x80	; 128
   197a2:	87 fb       	bst	r24, 7
   197a4:	88 27       	eor	r24, r24
   197a6:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   197a8:	08 95       	ret

000197aa <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   197aa:	cf 92       	push	r12
   197ac:	df 92       	push	r13
   197ae:	ff 92       	push	r15
   197b0:	0f 93       	push	r16
   197b2:	1f 93       	push	r17
   197b4:	cf 93       	push	r28
   197b6:	df 93       	push	r29
   197b8:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   197ba:	68 e6       	ldi	r22, 0x68	; 104
   197bc:	70 e0       	ldi	r23, 0x00	; 0
   197be:	8a e4       	ldi	r24, 0x4A	; 74
   197c0:	93 e1       	ldi	r25, 0x13	; 19
   197c2:	0e 94 9a cd 	call	0x19b34	; 0x19b34 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   197c6:	60 e0       	ldi	r22, 0x00	; 0
   197c8:	8a e4       	ldi	r24, 0x4A	; 74
   197ca:	93 e1       	ldi	r25, 0x13	; 19
   197cc:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   197d0:	8a e4       	ldi	r24, 0x4A	; 74
   197d2:	93 e1       	ldi	r25, 0x13	; 19
   197d4:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   197d8:	47 e0       	ldi	r20, 0x07	; 7
   197da:	50 e0       	ldi	r21, 0x00	; 0
   197dc:	68 e6       	ldi	r22, 0x68	; 104
   197de:	70 e0       	ldi	r23, 0x00	; 0
   197e0:	8a e4       	ldi	r24, 0x4A	; 74
   197e2:	93 e1       	ldi	r25, 0x13	; 19
   197e4:	0e 94 15 ce 	call	0x19c2a	; 0x19c2a <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   197e8:	8a e4       	ldi	r24, 0x4A	; 74
   197ea:	93 e1       	ldi	r25, 0x13	; 19
   197ec:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   197f0:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   197f2:	28 2f       	mov	r18, r24
   197f4:	30 e0       	ldi	r19, 0x00	; 0
   197f6:	94 e0       	ldi	r25, 0x04	; 4
   197f8:	35 95       	asr	r19
   197fa:	27 95       	ror	r18
   197fc:	9a 95       	dec	r25
   197fe:	e1 f7       	brne	.-8      	; 0x197f8 <RTC_DS1307::now()+0x4e>
   19800:	92 2f       	mov	r25, r18
   19802:	99 0f       	add	r25, r25
   19804:	99 0f       	add	r25, r25
   19806:	c2 2f       	mov	r28, r18
   19808:	c9 1b       	sub	r28, r25
   1980a:	cc 0f       	add	r28, r28
   1980c:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   1980e:	8a e4       	ldi	r24, 0x4A	; 74
   19810:	93 e1       	ldi	r25, 0x13	; 19
   19812:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19816:	9c 01       	movw	r18, r24
   19818:	44 e0       	ldi	r20, 0x04	; 4
   1981a:	35 95       	asr	r19
   1981c:	27 95       	ror	r18
   1981e:	4a 95       	dec	r20
   19820:	e1 f7       	brne	.-8      	; 0x1981a <RTC_DS1307::now()+0x70>
   19822:	2f 70       	andi	r18, 0x0F	; 15
   19824:	33 27       	eor	r19, r19
   19826:	92 2f       	mov	r25, r18
   19828:	99 0f       	add	r25, r25
   1982a:	99 0f       	add	r25, r25
   1982c:	d2 2f       	mov	r29, r18
   1982e:	d9 1b       	sub	r29, r25
   19830:	dd 0f       	add	r29, r29
   19832:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   19834:	8a e4       	ldi	r24, 0x4A	; 74
   19836:	93 e1       	ldi	r25, 0x13	; 19
   19838:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1983c:	9c 01       	movw	r18, r24
   1983e:	54 e0       	ldi	r21, 0x04	; 4
   19840:	35 95       	asr	r19
   19842:	27 95       	ror	r18
   19844:	5a 95       	dec	r21
   19846:	e1 f7       	brne	.-8      	; 0x19840 <RTC_DS1307::now()+0x96>
   19848:	2f 70       	andi	r18, 0x0F	; 15
   1984a:	33 27       	eor	r19, r19
   1984c:	92 2f       	mov	r25, r18
   1984e:	99 0f       	add	r25, r25
   19850:	99 0f       	add	r25, r25
   19852:	12 2f       	mov	r17, r18
   19854:	19 1b       	sub	r17, r25
   19856:	11 0f       	add	r17, r17
   19858:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   1985a:	8a e4       	ldi	r24, 0x4A	; 74
   1985c:	93 e1       	ldi	r25, 0x13	; 19
   1985e:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   19862:	8a e4       	ldi	r24, 0x4A	; 74
   19864:	93 e1       	ldi	r25, 0x13	; 19
   19866:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1986a:	9c 01       	movw	r18, r24
   1986c:	64 e0       	ldi	r22, 0x04	; 4
   1986e:	35 95       	asr	r19
   19870:	27 95       	ror	r18
   19872:	6a 95       	dec	r22
   19874:	e1 f7       	brne	.-8      	; 0x1986e <RTC_DS1307::now()+0xc4>
   19876:	2f 70       	andi	r18, 0x0F	; 15
   19878:	33 27       	eor	r19, r19
   1987a:	92 2f       	mov	r25, r18
   1987c:	99 0f       	add	r25, r25
   1987e:	99 0f       	add	r25, r25
   19880:	02 2f       	mov	r16, r18
   19882:	09 1b       	sub	r16, r25
   19884:	00 0f       	add	r16, r16
   19886:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   19888:	8a e4       	ldi	r24, 0x4A	; 74
   1988a:	93 e1       	ldi	r25, 0x13	; 19
   1988c:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   19890:	9c 01       	movw	r18, r24
   19892:	74 e0       	ldi	r23, 0x04	; 4
   19894:	35 95       	asr	r19
   19896:	27 95       	ror	r18
   19898:	7a 95       	dec	r23
   1989a:	e1 f7       	brne	.-8      	; 0x19894 <RTC_DS1307::now()+0xea>
   1989c:	2f 70       	andi	r18, 0x0F	; 15
   1989e:	33 27       	eor	r19, r19
   198a0:	92 2f       	mov	r25, r18
   198a2:	99 0f       	add	r25, r25
   198a4:	99 0f       	add	r25, r25
   198a6:	f2 2e       	mov	r15, r18
   198a8:	f9 1a       	sub	r15, r25
   198aa:	ff 0c       	add	r15, r15
   198ac:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   198ae:	8a e4       	ldi	r24, 0x4A	; 74
   198b0:	93 e1       	ldi	r25, 0x13	; 19
   198b2:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   198b6:	9c 01       	movw	r18, r24
   198b8:	e4 e0       	ldi	r30, 0x04	; 4
   198ba:	35 95       	asr	r19
   198bc:	27 95       	ror	r18
   198be:	ea 95       	dec	r30
   198c0:	e1 f7       	brne	.-8      	; 0x198ba <RTC_DS1307::now()+0x110>
   198c2:	2f 70       	andi	r18, 0x0F	; 15
   198c4:	33 27       	eor	r19, r19
   198c6:	92 2f       	mov	r25, r18
   198c8:	99 0f       	add	r25, r25
   198ca:	99 0f       	add	r25, r25
   198cc:	29 1b       	sub	r18, r25
   198ce:	22 0f       	add	r18, r18
   198d0:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   198d2:	f6 01       	movw	r30, r12
   198d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   198d6:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   198d8:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   198da:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   198dc:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   198de:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   198e0:	c6 01       	movw	r24, r12
   198e2:	df 91       	pop	r29
   198e4:	cf 91       	pop	r28
   198e6:	1f 91       	pop	r17
   198e8:	0f 91       	pop	r16
   198ea:	ff 90       	pop	r15
   198ec:	df 90       	pop	r13
   198ee:	cf 90       	pop	r12
   198f0:	08 95       	ret

000198f2 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   198f2:	0f 93       	push	r16
   198f4:	1f 93       	push	r17
   198f6:	cf 93       	push	r28
   198f8:	df 93       	push	r29
   198fa:	ec 01       	movw	r28, r24
   198fc:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   198fe:	6a 81       	ldd	r22, Y+2	; 0x02
   19900:	88 81       	ld	r24, Y
   19902:	99 81       	ldd	r25, Y+1	; 0x01
   19904:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   19908:	88 81       	ld	r24, Y
   1990a:	99 81       	ldd	r25, Y+1	; 0x01
   1990c:	dc 01       	movw	r26, r24
   1990e:	ed 91       	ld	r30, X+
   19910:	fc 91       	ld	r31, X
   19912:	01 90       	ld	r0, Z+
   19914:	f0 81       	ld	r31, Z
   19916:	e0 2d       	mov	r30, r0
   19918:	61 2f       	mov	r22, r17
   1991a:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   1991c:	88 81       	ld	r24, Y
   1991e:	99 81       	ldd	r25, Y+1	; 0x01
   19920:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   19924:	88 81       	ld	r24, Y
   19926:	99 81       	ldd	r25, Y+1	; 0x01
   19928:	2b 81       	ldd	r18, Y+3	; 0x03
   1992a:	42 e0       	ldi	r20, 0x02	; 2
   1992c:	29 30       	cpi	r18, 0x09	; 9
   1992e:	08 f4       	brcc	.+2      	; 0x19932 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   19930:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   19932:	6a 81       	ldd	r22, Y+2	; 0x02
   19934:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   19938:	88 81       	ld	r24, Y
   1993a:	99 81       	ldd	r25, Y+1	; 0x01
   1993c:	dc 01       	movw	r26, r24
   1993e:	ed 91       	ld	r30, X+
   19940:	fc 91       	ld	r31, X
   19942:	02 84       	ldd	r0, Z+10	; 0x0a
   19944:	f3 85       	ldd	r31, Z+11	; 0x0b
   19946:	e0 2d       	mov	r30, r0
   19948:	19 95       	eicall
   1994a:	00 e0       	ldi	r16, 0x00	; 0
   1994c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   1994e:	8b 81       	ldd	r24, Y+3	; 0x03
   19950:	89 30       	cpi	r24, 0x09	; 9
   19952:	58 f0       	brcs	.+22     	; 0x1996a <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   19954:	88 81       	ld	r24, Y
   19956:	99 81       	ldd	r25, Y+1	; 0x01
   19958:	dc 01       	movw	r26, r24
   1995a:	ed 91       	ld	r30, X+
   1995c:	fc 91       	ld	r31, X
   1995e:	02 84       	ldd	r0, Z+10	; 0x0a
   19960:	f3 85       	ldd	r31, Z+11	; 0x0b
   19962:	e0 2d       	mov	r30, r0
   19964:	19 95       	eicall
   19966:	08 2b       	or	r16, r24
   19968:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   1996a:	88 81       	ld	r24, Y
   1996c:	99 81       	ldd	r25, Y+1	; 0x01
   1996e:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   19972:	8c 81       	ldd	r24, Y+4	; 0x04
   19974:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   19976:	80 23       	and	r24, r16
   19978:	91 23       	and	r25, r17
   1997a:	df 91       	pop	r29
   1997c:	cf 91       	pop	r28
   1997e:	1f 91       	pop	r17
   19980:	0f 91       	pop	r16
   19982:	08 95       	ret

00019984 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   19984:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <TwoWire::rxBufferLength>
   19988:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <TwoWire::rxBufferIndex>
   1998c:	89 1b       	sub	r24, r25
   1998e:	99 0b       	sbc	r25, r25
   19990:	08 95       	ret

00019992 <TwoWire::read()>:
_ZN7TwoWire4readEv():
   19992:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <TwoWire::rxBufferIndex>
   19996:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <TwoWire::rxBufferLength>
   1999a:	2f ef       	ldi	r18, 0xFF	; 255
   1999c:	3f ef       	ldi	r19, 0xFF	; 255
   1999e:	98 17       	cp	r25, r24
   199a0:	48 f4       	brcc	.+18     	; 0x199b4 <TwoWire::read()+0x22>
   199a2:	e9 2f       	mov	r30, r25
   199a4:	f0 e0       	ldi	r31, 0x00	; 0
   199a6:	e0 58       	subi	r30, 0x80	; 128
   199a8:	fc 4e       	sbci	r31, 0xEC	; 236
   199aa:	20 81       	ld	r18, Z
   199ac:	30 e0       	ldi	r19, 0x00	; 0
   199ae:	9f 5f       	subi	r25, 0xFF	; 255
   199b0:	90 93 7f 13 	sts	0x137F, r25	; 0x80137f <TwoWire::rxBufferIndex>
   199b4:	c9 01       	movw	r24, r18
   199b6:	08 95       	ret

000199b8 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   199b8:	e0 91 7f 13 	lds	r30, 0x137F	; 0x80137f <TwoWire::rxBufferIndex>
   199bc:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <TwoWire::rxBufferLength>
   199c0:	e8 17       	cp	r30, r24
   199c2:	30 f4       	brcc	.+12     	; 0x199d0 <TwoWire::peek()+0x18>
   199c4:	f0 e0       	ldi	r31, 0x00	; 0
   199c6:	e0 58       	subi	r30, 0x80	; 128
   199c8:	fc 4e       	sbci	r31, 0xEC	; 236
   199ca:	80 81       	ld	r24, Z
   199cc:	90 e0       	ldi	r25, 0x00	; 0
   199ce:	08 95       	ret
   199d0:	8f ef       	ldi	r24, 0xFF	; 255
   199d2:	9f ef       	ldi	r25, 0xFF	; 255
   199d4:	08 95       	ret

000199d6 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   199d6:	08 95       	ret

000199d8 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   199d8:	cf 93       	push	r28
   199da:	df 93       	push	r29
   199dc:	ec 01       	movw	r28, r24
   199de:	e0 91 56 13 	lds	r30, 0x1356	; 0x801356 <TwoWire::user_onReceive>
   199e2:	f0 91 57 13 	lds	r31, 0x1357	; 0x801357 <TwoWire::user_onReceive+0x1>
   199e6:	30 97       	sbiw	r30, 0x00	; 0
   199e8:	f1 f0       	breq	.+60     	; 0x19a26 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   199ea:	90 91 7f 13 	lds	r25, 0x137F	; 0x80137f <TwoWire::rxBufferIndex>
   199ee:	80 91 7e 13 	lds	r24, 0x137E	; 0x80137e <TwoWire::rxBufferLength>
   199f2:	98 17       	cp	r25, r24
   199f4:	c0 f0       	brcs	.+48     	; 0x19a26 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   199f6:	90 e0       	ldi	r25, 0x00	; 0
   199f8:	29 2f       	mov	r18, r25
   199fa:	30 e0       	ldi	r19, 0x00	; 0
   199fc:	26 17       	cp	r18, r22
   199fe:	37 07       	cpc	r19, r23
   19a00:	54 f4       	brge	.+20     	; 0x19a16 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   19a02:	de 01       	movw	r26, r28
   19a04:	a2 0f       	add	r26, r18
   19a06:	b3 1f       	adc	r27, r19
   19a08:	4c 91       	ld	r20, X
   19a0a:	20 58       	subi	r18, 0x80	; 128
   19a0c:	3c 4e       	sbci	r19, 0xEC	; 236
   19a0e:	d9 01       	movw	r26, r18
   19a10:	4c 93       	st	X, r20
   19a12:	9f 5f       	subi	r25, 0xFF	; 255
   19a14:	f1 cf       	rjmp	.-30     	; 0x199f8 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   19a16:	10 92 7f 13 	sts	0x137F, r1	; 0x80137f <TwoWire::rxBufferIndex>
   19a1a:	60 93 7e 13 	sts	0x137E, r22	; 0x80137e <TwoWire::rxBufferLength>
   19a1e:	cb 01       	movw	r24, r22
   19a20:	df 91       	pop	r29
   19a22:	cf 91       	pop	r28
   19a24:	19 94       	eijmp
   19a26:	df 91       	pop	r29
   19a28:	cf 91       	pop	r28
   19a2a:	08 95       	ret

00019a2c <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   19a2c:	e0 91 58 13 	lds	r30, 0x1358	; 0x801358 <TwoWire::user_onRequest>
   19a30:	f0 91 59 13 	lds	r31, 0x1359	; 0x801359 <TwoWire::user_onRequest+0x1>
   19a34:	30 97       	sbiw	r30, 0x00	; 0
   19a36:	29 f0       	breq	.+10     	; 0x19a42 <TwoWire::onRequestService()+0x16>
   19a38:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <TwoWire::txBufferIndex>
   19a3c:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <TwoWire::txBufferLength>
   19a40:	19 94       	eijmp
   19a42:	08 95       	ret

00019a44 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   19a44:	cf 93       	push	r28
   19a46:	df 93       	push	r29
   19a48:	1f 92       	push	r1
   19a4a:	cd b7       	in	r28, 0x3d	; 61
   19a4c:	de b7       	in	r29, 0x3e	; 62
   19a4e:	69 83       	std	Y+1, r22	; 0x01
   19a50:	20 91 5a 13 	lds	r18, 0x135A	; 0x80135a <TwoWire::transmitting>
   19a54:	22 23       	and	r18, r18
   19a56:	f9 f0       	breq	.+62     	; 0x19a96 <TwoWire::write(unsigned char)+0x52>
   19a58:	20 91 5b 13 	lds	r18, 0x135B	; 0x80135b <TwoWire::txBufferLength>
   19a5c:	20 32       	cpi	r18, 0x20	; 32
   19a5e:	58 f0       	brcs	.+22     	; 0x19a76 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   19a60:	21 e0       	ldi	r18, 0x01	; 1
   19a62:	30 e0       	ldi	r19, 0x00	; 0
   19a64:	fc 01       	movw	r30, r24
   19a66:	33 83       	std	Z+3, r19	; 0x03
   19a68:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   19a6a:	90 e0       	ldi	r25, 0x00	; 0
   19a6c:	80 e0       	ldi	r24, 0x00	; 0
   19a6e:	0f 90       	pop	r0
   19a70:	df 91       	pop	r29
   19a72:	cf 91       	pop	r28
   19a74:	08 95       	ret
   19a76:	80 91 5c 13 	lds	r24, 0x135C	; 0x80135c <TwoWire::txBufferIndex>
   19a7a:	e8 2f       	mov	r30, r24
   19a7c:	f0 e0       	ldi	r31, 0x00	; 0
   19a7e:	e3 5a       	subi	r30, 0xA3	; 163
   19a80:	fc 4e       	sbci	r31, 0xEC	; 236
   19a82:	99 81       	ldd	r25, Y+1	; 0x01
   19a84:	90 83       	st	Z, r25
   19a86:	8f 5f       	subi	r24, 0xFF	; 255
   19a88:	80 93 5c 13 	sts	0x135C, r24	; 0x80135c <TwoWire::txBufferIndex>
   19a8c:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <TwoWire::txBufferLength>
   19a90:	81 e0       	ldi	r24, 0x01	; 1
   19a92:	90 e0       	ldi	r25, 0x00	; 0
   19a94:	ec cf       	rjmp	.-40     	; 0x19a6e <TwoWire::write(unsigned char)+0x2a>
   19a96:	61 e0       	ldi	r22, 0x01	; 1
   19a98:	ce 01       	movw	r24, r28
   19a9a:	01 96       	adiw	r24, 0x01	; 1
   19a9c:	0e 94 e9 ce 	call	0x19dd2	; 0x19dd2 <twi_transmit>
   19aa0:	f7 cf       	rjmp	.-18     	; 0x19a90 <TwoWire::write(unsigned char)+0x4c>

00019aa2 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   19aa2:	cf 92       	push	r12
   19aa4:	df 92       	push	r13
   19aa6:	ef 92       	push	r14
   19aa8:	ff 92       	push	r15
   19aaa:	0f 93       	push	r16
   19aac:	1f 93       	push	r17
   19aae:	cf 93       	push	r28
   19ab0:	df 93       	push	r29
   19ab2:	7c 01       	movw	r14, r24
   19ab4:	cb 01       	movw	r24, r22
   19ab6:	8a 01       	movw	r16, r20
   19ab8:	20 91 5a 13 	lds	r18, 0x135A	; 0x80135a <TwoWire::transmitting>
   19abc:	22 23       	and	r18, r18
   19abe:	89 f0       	breq	.+34     	; 0x19ae2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   19ac0:	eb 01       	movw	r28, r22
   19ac2:	6b 01       	movw	r12, r22
   19ac4:	c4 0e       	add	r12, r20
   19ac6:	d5 1e       	adc	r13, r21
   19ac8:	cc 15       	cp	r28, r12
   19aca:	dd 05       	cpc	r29, r13
   19acc:	69 f0       	breq	.+26     	; 0x19ae8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   19ace:	69 91       	ld	r22, Y+
   19ad0:	d7 01       	movw	r26, r14
   19ad2:	ed 91       	ld	r30, X+
   19ad4:	fc 91       	ld	r31, X
   19ad6:	01 90       	ld	r0, Z+
   19ad8:	f0 81       	ld	r31, Z
   19ada:	e0 2d       	mov	r30, r0
   19adc:	c7 01       	movw	r24, r14
   19ade:	19 95       	eicall
   19ae0:	f3 cf       	rjmp	.-26     	; 0x19ac8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   19ae2:	64 2f       	mov	r22, r20
   19ae4:	0e 94 e9 ce 	call	0x19dd2	; 0x19dd2 <twi_transmit>
   19ae8:	c8 01       	movw	r24, r16
   19aea:	df 91       	pop	r29
   19aec:	cf 91       	pop	r28
   19aee:	1f 91       	pop	r17
   19af0:	0f 91       	pop	r16
   19af2:	ff 90       	pop	r15
   19af4:	ef 90       	pop	r14
   19af6:	df 90       	pop	r13
   19af8:	cf 90       	pop	r12
   19afa:	08 95       	ret

00019afc <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   19afc:	10 92 7f 13 	sts	0x137F, r1	; 0x80137f <TwoWire::rxBufferIndex>
   19b00:	10 92 7e 13 	sts	0x137E, r1	; 0x80137e <TwoWire::rxBufferLength>
   19b04:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <TwoWire::txBufferIndex>
   19b08:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <TwoWire::txBufferLength>
   19b0c:	0e 94 2c ce 	call	0x19c58	; 0x19c58 <twi_init>
   19b10:	86 e1       	ldi	r24, 0x16	; 22
   19b12:	9d ec       	ldi	r25, 0xCD	; 205
   19b14:	0e 94 15 cf 	call	0x19e2a	; 0x19e2a <twi_attachSlaveTxEvent>
   19b18:	8c ee       	ldi	r24, 0xEC	; 236
   19b1a:	9c ec       	ldi	r25, 0xCC	; 204
   19b1c:	0c 94 10 cf 	jmp	0x19e20	; 0x19e20 <twi_attachSlaveRxEvent>

00019b20 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   19b20:	81 e0       	ldi	r24, 0x01	; 1
   19b22:	80 93 5a 13 	sts	0x135A, r24	; 0x80135a <TwoWire::transmitting>
   19b26:	60 93 7d 13 	sts	0x137D, r22	; 0x80137d <TwoWire::txAddress>
   19b2a:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <TwoWire::txBufferIndex>
   19b2e:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <TwoWire::txBufferLength>
   19b32:	08 95       	ret

00019b34 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   19b34:	0c 94 90 cd 	jmp	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>

00019b38 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   19b38:	0f 93       	push	r16
   19b3a:	06 2f       	mov	r16, r22
   19b3c:	21 e0       	ldi	r18, 0x01	; 1
   19b3e:	40 91 5b 13 	lds	r20, 0x135B	; 0x80135b <TwoWire::txBufferLength>
   19b42:	6d e5       	ldi	r22, 0x5D	; 93
   19b44:	73 e1       	ldi	r23, 0x13	; 19
   19b46:	80 91 7d 13 	lds	r24, 0x137D	; 0x80137d <TwoWire::txAddress>
   19b4a:	0e 94 92 ce 	call	0x19d24	; 0x19d24 <twi_writeTo>
   19b4e:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <TwoWire::txBufferIndex>
   19b52:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <TwoWire::txBufferLength>
   19b56:	10 92 5a 13 	sts	0x135A, r1	; 0x80135a <TwoWire::transmitting>
   19b5a:	0f 91       	pop	r16
   19b5c:	08 95       	ret

00019b5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   19b5e:	4f 92       	push	r4
   19b60:	5f 92       	push	r5
   19b62:	6f 92       	push	r6
   19b64:	7f 92       	push	r7
   19b66:	af 92       	push	r10
   19b68:	bf 92       	push	r11
   19b6a:	cf 92       	push	r12
   19b6c:	ef 92       	push	r14
   19b6e:	ff 92       	push	r15
   19b70:	0f 93       	push	r16
   19b72:	1f 93       	push	r17
   19b74:	cf 93       	push	r28
   19b76:	df 93       	push	r29
   19b78:	5c 01       	movw	r10, r24
   19b7a:	f6 2e       	mov	r15, r22
   19b7c:	d4 2f       	mov	r29, r20
   19b7e:	28 01       	movw	r4, r16
   19b80:	39 01       	movw	r6, r18
   19b82:	ee 20       	and	r14, r14
   19b84:	19 f1       	breq	.+70     	; 0x19bcc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   19b86:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
   19b8a:	ce 2d       	mov	r28, r14
   19b8c:	c4 30       	cpi	r28, 0x04	; 4
   19b8e:	08 f0       	brcs	.+2      	; 0x19b92 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   19b90:	c3 e0       	ldi	r28, 0x03	; 3
   19b92:	c1 50       	subi	r28, 0x01	; 1
   19b94:	b8 f0       	brcs	.+46     	; 0x19bc4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   19b96:	28 e0       	ldi	r18, 0x08	; 8
   19b98:	c2 9f       	mul	r28, r18
   19b9a:	c0 01       	movw	r24, r0
   19b9c:	11 24       	eor	r1, r1
   19b9e:	a3 01       	movw	r20, r6
   19ba0:	92 01       	movw	r18, r4
   19ba2:	04 c0       	rjmp	.+8      	; 0x19bac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   19ba4:	56 95       	lsr	r21
   19ba6:	47 95       	ror	r20
   19ba8:	37 95       	ror	r19
   19baa:	27 95       	ror	r18
   19bac:	8a 95       	dec	r24
   19bae:	d2 f7       	brpl	.-12     	; 0x19ba4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   19bb0:	b9 01       	movw	r22, r18
   19bb2:	d5 01       	movw	r26, r10
   19bb4:	ed 91       	ld	r30, X+
   19bb6:	fc 91       	ld	r31, X
   19bb8:	01 90       	ld	r0, Z+
   19bba:	f0 81       	ld	r31, Z
   19bbc:	e0 2d       	mov	r30, r0
   19bbe:	c5 01       	movw	r24, r10
   19bc0:	19 95       	eicall
   19bc2:	e7 cf       	rjmp	.-50     	; 0x19b92 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   19bc4:	60 e0       	ldi	r22, 0x00	; 0
   19bc6:	c5 01       	movw	r24, r10
   19bc8:	0e 94 9c cd 	call	0x19b38	; 0x19b38 <TwoWire::endTransmission(unsigned char)>
   19bcc:	4d 2f       	mov	r20, r29
   19bce:	d1 32       	cpi	r29, 0x21	; 33
   19bd0:	08 f0       	brcs	.+2      	; 0x19bd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   19bd2:	40 e2       	ldi	r20, 0x20	; 32
   19bd4:	2c 2d       	mov	r18, r12
   19bd6:	60 e8       	ldi	r22, 0x80	; 128
   19bd8:	73 e1       	ldi	r23, 0x13	; 19
   19bda:	8f 2d       	mov	r24, r15
   19bdc:	0e 94 4a ce 	call	0x19c94	; 0x19c94 <twi_readFrom>
   19be0:	10 92 7f 13 	sts	0x137F, r1	; 0x80137f <TwoWire::rxBufferIndex>
   19be4:	80 93 7e 13 	sts	0x137E, r24	; 0x80137e <TwoWire::rxBufferLength>
   19be8:	df 91       	pop	r29
   19bea:	cf 91       	pop	r28
   19bec:	1f 91       	pop	r17
   19bee:	0f 91       	pop	r16
   19bf0:	ff 90       	pop	r15
   19bf2:	ef 90       	pop	r14
   19bf4:	cf 90       	pop	r12
   19bf6:	bf 90       	pop	r11
   19bf8:	af 90       	pop	r10
   19bfa:	7f 90       	pop	r7
   19bfc:	6f 90       	pop	r6
   19bfe:	5f 90       	pop	r5
   19c00:	4f 90       	pop	r4
   19c02:	08 95       	ret

00019c04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   19c04:	cf 92       	push	r12
   19c06:	ef 92       	push	r14
   19c08:	0f 93       	push	r16
   19c0a:	1f 93       	push	r17
   19c0c:	c2 2e       	mov	r12, r18
   19c0e:	e1 2c       	mov	r14, r1
   19c10:	00 e0       	ldi	r16, 0x00	; 0
   19c12:	10 e0       	ldi	r17, 0x00	; 0
   19c14:	98 01       	movw	r18, r16
   19c16:	0e 94 af cd 	call	0x19b5e	; 0x19b5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   19c1a:	1f 91       	pop	r17
   19c1c:	0f 91       	pop	r16
   19c1e:	ef 90       	pop	r14
   19c20:	cf 90       	pop	r12
   19c22:	08 95       	ret

00019c24 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   19c24:	21 e0       	ldi	r18, 0x01	; 1
   19c26:	0c 94 02 ce 	jmp	0x19c04	; 0x19c04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00019c2a <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   19c2a:	21 e0       	ldi	r18, 0x01	; 1
   19c2c:	0c 94 02 ce 	jmp	0x19c04	; 0x19c04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00019c30 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   19c30:	61 e0       	ldi	r22, 0x01	; 1
   19c32:	0c 94 9c cd 	jmp	0x19b38	; 0x19b38 <TwoWire::endTransmission(unsigned char)>

00019c36 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   19c36:	ea e4       	ldi	r30, 0x4A	; 74
   19c38:	f3 e1       	ldi	r31, 0x13	; 19
   19c3a:	13 82       	std	Z+3, r1	; 0x03
   19c3c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   19c3e:	88 ee       	ldi	r24, 0xE8	; 232
   19c40:	93 e0       	ldi	r25, 0x03	; 3
   19c42:	a0 e0       	ldi	r26, 0x00	; 0
   19c44:	b0 e0       	ldi	r27, 0x00	; 0
   19c46:	84 83       	std	Z+4, r24	; 0x04
   19c48:	95 83       	std	Z+5, r25	; 0x05
   19c4a:	a6 83       	std	Z+6, r26	; 0x06
   19c4c:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   19c4e:	82 e2       	ldi	r24, 0x22	; 34
   19c50:	99 e0       	ldi	r25, 0x09	; 9
   19c52:	91 83       	std	Z+1, r25	; 0x01
   19c54:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   19c56:	08 95       	ret

00019c58 <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   19c58:	10 92 0d 14 	sts	0x140D, r1	; 0x80140d <twi_state>
   19c5c:	81 e0       	ldi	r24, 0x01	; 1
   19c5e:	80 93 0b 14 	sts	0x140B, r24	; 0x80140b <twi_sendStop>
   19c62:	10 92 0a 14 	sts	0x140A, r1	; 0x80140a <twi_inRepStart>
   19c66:	61 e0       	ldi	r22, 0x01	; 1
   19c68:	83 e1       	ldi	r24, 0x13	; 19
   19c6a:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   19c6e:	61 e0       	ldi	r22, 0x01	; 1
   19c70:	82 e1       	ldi	r24, 0x12	; 18
   19c72:	0e 94 c8 d6 	call	0x1ad90	; 0x1ad90 <digitalWrite>
   19c76:	e9 eb       	ldi	r30, 0xB9	; 185
   19c78:	f0 e0       	ldi	r31, 0x00	; 0
   19c7a:	80 81       	ld	r24, Z
   19c7c:	8e 7f       	andi	r24, 0xFE	; 254
   19c7e:	80 83       	st	Z, r24
   19c80:	80 81       	ld	r24, Z
   19c82:	8d 7f       	andi	r24, 0xFD	; 253
   19c84:	80 83       	st	Z, r24
   19c86:	88 e4       	ldi	r24, 0x48	; 72
   19c88:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   19c8c:	85 e4       	ldi	r24, 0x45	; 69
   19c8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19c92:	08 95       	ret

00019c94 <twi_readFrom>:
twi_readFrom():
   19c94:	41 32       	cpi	r20, 0x21	; 33
   19c96:	08 f0       	brcs	.+2      	; 0x19c9a <twi_readFrom+0x6>
   19c98:	43 c0       	rjmp	.+134    	; 0x19d20 <twi_readFrom+0x8c>
   19c9a:	90 91 0d 14 	lds	r25, 0x140D	; 0x80140d <twi_state>
   19c9e:	91 11       	cpse	r25, r1
   19ca0:	fc cf       	rjmp	.-8      	; 0x19c9a <twi_readFrom+0x6>
   19ca2:	91 e0       	ldi	r25, 0x01	; 1
   19ca4:	90 93 0d 14 	sts	0x140D, r25	; 0x80140d <twi_state>
   19ca8:	20 93 0b 14 	sts	0x140B, r18	; 0x80140b <twi_sendStop>
   19cac:	2f ef       	ldi	r18, 0xFF	; 255
   19cae:	20 93 a0 13 	sts	0x13A0, r18	; 0x8013a0 <twi_error>
   19cb2:	10 92 e5 13 	sts	0x13E5, r1	; 0x8013e5 <twi_masterBufferIndex>
   19cb6:	24 0f       	add	r18, r20
   19cb8:	20 93 e4 13 	sts	0x13E4, r18	; 0x8013e4 <twi_masterBufferLength>
   19cbc:	90 93 0c 14 	sts	0x140C, r25	; 0x80140c <twi_slarw>
   19cc0:	90 91 0c 14 	lds	r25, 0x140C	; 0x80140c <twi_slarw>
   19cc4:	88 0f       	add	r24, r24
   19cc6:	89 2b       	or	r24, r25
   19cc8:	80 93 0c 14 	sts	0x140C, r24	; 0x80140c <twi_slarw>
   19ccc:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <twi_inRepStart>
   19cd0:	81 30       	cpi	r24, 0x01	; 1
   19cd2:	09 f5       	brne	.+66     	; 0x19d16 <twi_readFrom+0x82>
   19cd4:	10 92 0a 14 	sts	0x140A, r1	; 0x80140a <twi_inRepStart>
   19cd8:	80 91 0c 14 	lds	r24, 0x140C	; 0x80140c <twi_slarw>
   19cdc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   19ce0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19ce4:	83 fd       	sbrc	r24, 3
   19ce6:	f8 cf       	rjmp	.-16     	; 0x19cd8 <twi_readFrom+0x44>
   19ce8:	85 ec       	ldi	r24, 0xC5	; 197
   19cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19cee:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <twi_state>
   19cf2:	81 30       	cpi	r24, 0x01	; 1
   19cf4:	e1 f3       	breq	.-8      	; 0x19cee <twi_readFrom+0x5a>
   19cf6:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   19cfa:	84 17       	cp	r24, r20
   19cfc:	10 f4       	brcc	.+4      	; 0x19d02 <twi_readFrom+0x6e>
   19cfe:	40 91 e5 13 	lds	r20, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   19d02:	a6 ee       	ldi	r26, 0xE6	; 230
   19d04:	b3 e1       	ldi	r27, 0x13	; 19
   19d06:	96 2f       	mov	r25, r22
   19d08:	fb 01       	movw	r30, r22
   19d0a:	8e 2f       	mov	r24, r30
   19d0c:	89 1b       	sub	r24, r25
   19d0e:	84 17       	cp	r24, r20
   19d10:	20 f0       	brcs	.+8      	; 0x19d1a <twi_readFrom+0x86>
   19d12:	84 2f       	mov	r24, r20
   19d14:	08 95       	ret
   19d16:	85 ee       	ldi	r24, 0xE5	; 229
   19d18:	e8 cf       	rjmp	.-48     	; 0x19cea <twi_readFrom+0x56>
   19d1a:	8d 91       	ld	r24, X+
   19d1c:	81 93       	st	Z+, r24
   19d1e:	f5 cf       	rjmp	.-22     	; 0x19d0a <twi_readFrom+0x76>
   19d20:	40 e0       	ldi	r20, 0x00	; 0
   19d22:	f7 cf       	rjmp	.-18     	; 0x19d12 <twi_readFrom+0x7e>

00019d24 <twi_writeTo>:
twi_writeTo():
   19d24:	0f 93       	push	r16
   19d26:	41 32       	cpi	r20, 0x21	; 33
   19d28:	08 f0       	brcs	.+2      	; 0x19d2c <twi_writeTo+0x8>
   19d2a:	4b c0       	rjmp	.+150    	; 0x19dc2 <twi_writeTo+0x9e>
   19d2c:	90 91 0d 14 	lds	r25, 0x140D	; 0x80140d <twi_state>
   19d30:	91 11       	cpse	r25, r1
   19d32:	fc cf       	rjmp	.-8      	; 0x19d2c <twi_writeTo+0x8>
   19d34:	92 e0       	ldi	r25, 0x02	; 2
   19d36:	90 93 0d 14 	sts	0x140D, r25	; 0x80140d <twi_state>
   19d3a:	00 93 0b 14 	sts	0x140B, r16	; 0x80140b <twi_sendStop>
   19d3e:	9f ef       	ldi	r25, 0xFF	; 255
   19d40:	90 93 a0 13 	sts	0x13A0, r25	; 0x8013a0 <twi_error>
   19d44:	10 92 e5 13 	sts	0x13E5, r1	; 0x8013e5 <twi_masterBufferIndex>
   19d48:	40 93 e4 13 	sts	0x13E4, r20	; 0x8013e4 <twi_masterBufferLength>
   19d4c:	36 2f       	mov	r19, r22
   19d4e:	a6 ee       	ldi	r26, 0xE6	; 230
   19d50:	b3 e1       	ldi	r27, 0x13	; 19
   19d52:	fb 01       	movw	r30, r22
   19d54:	9e 2f       	mov	r25, r30
   19d56:	93 1b       	sub	r25, r19
   19d58:	94 17       	cp	r25, r20
   19d5a:	70 f1       	brcs	.+92     	; 0x19db8 <twi_writeTo+0x94>
   19d5c:	10 92 0c 14 	sts	0x140C, r1	; 0x80140c <twi_slarw>
   19d60:	90 91 0c 14 	lds	r25, 0x140C	; 0x80140c <twi_slarw>
   19d64:	88 0f       	add	r24, r24
   19d66:	89 2b       	or	r24, r25
   19d68:	80 93 0c 14 	sts	0x140C, r24	; 0x80140c <twi_slarw>
   19d6c:	80 91 0a 14 	lds	r24, 0x140A	; 0x80140a <twi_inRepStart>
   19d70:	81 30       	cpi	r24, 0x01	; 1
   19d72:	29 f5       	brne	.+74     	; 0x19dbe <twi_writeTo+0x9a>
   19d74:	10 92 0a 14 	sts	0x140A, r1	; 0x80140a <twi_inRepStart>
   19d78:	80 91 0c 14 	lds	r24, 0x140C	; 0x80140c <twi_slarw>
   19d7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   19d80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19d84:	83 fd       	sbrc	r24, 3
   19d86:	f8 cf       	rjmp	.-16     	; 0x19d78 <twi_writeTo+0x54>
   19d88:	85 ec       	ldi	r24, 0xC5	; 197
   19d8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19d8e:	22 23       	and	r18, r18
   19d90:	21 f0       	breq	.+8      	; 0x19d9a <twi_writeTo+0x76>
   19d92:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <twi_state>
   19d96:	82 30       	cpi	r24, 0x02	; 2
   19d98:	d1 f3       	breq	.-12     	; 0x19d8e <twi_writeTo+0x6a>
   19d9a:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <twi_error>
   19d9e:	8f 3f       	cpi	r24, 0xFF	; 255
   19da0:	91 f0       	breq	.+36     	; 0x19dc6 <twi_writeTo+0xa2>
   19da2:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <twi_error>
   19da6:	80 32       	cpi	r24, 0x20	; 32
   19da8:	81 f0       	breq	.+32     	; 0x19dca <twi_writeTo+0xa6>
   19daa:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <twi_error>
   19dae:	80 33       	cpi	r24, 0x30	; 48
   19db0:	71 f0       	breq	.+28     	; 0x19dce <twi_writeTo+0xaa>
   19db2:	84 e0       	ldi	r24, 0x04	; 4
   19db4:	0f 91       	pop	r16
   19db6:	08 95       	ret
   19db8:	91 91       	ld	r25, Z+
   19dba:	9d 93       	st	X+, r25
   19dbc:	cb cf       	rjmp	.-106    	; 0x19d54 <twi_writeTo+0x30>
   19dbe:	85 ee       	ldi	r24, 0xE5	; 229
   19dc0:	e4 cf       	rjmp	.-56     	; 0x19d8a <twi_writeTo+0x66>
   19dc2:	81 e0       	ldi	r24, 0x01	; 1
   19dc4:	f7 cf       	rjmp	.-18     	; 0x19db4 <twi_writeTo+0x90>
   19dc6:	80 e0       	ldi	r24, 0x00	; 0
   19dc8:	f5 cf       	rjmp	.-22     	; 0x19db4 <twi_writeTo+0x90>
   19dca:	82 e0       	ldi	r24, 0x02	; 2
   19dcc:	f3 cf       	rjmp	.-26     	; 0x19db4 <twi_writeTo+0x90>
   19dce:	83 e0       	ldi	r24, 0x03	; 3
   19dd0:	f1 cf       	rjmp	.-30     	; 0x19db4 <twi_writeTo+0x90>

00019dd2 <twi_transmit>:
twi_transmit():
   19dd2:	20 91 c2 13 	lds	r18, 0x13C2	; 0x8013c2 <twi_txBufferLength>
   19dd6:	26 0f       	add	r18, r22
   19dd8:	33 27       	eor	r19, r19
   19dda:	33 1f       	adc	r19, r19
   19ddc:	21 32       	cpi	r18, 0x21	; 33
   19dde:	31 05       	cpc	r19, r1
   19de0:	ec f4       	brge	.+58     	; 0x19e1c <twi_transmit+0x4a>
   19de2:	20 91 0d 14 	lds	r18, 0x140D	; 0x80140d <twi_state>
   19de6:	fc 01       	movw	r30, r24
   19de8:	90 e0       	ldi	r25, 0x00	; 0
   19dea:	80 e0       	ldi	r24, 0x00	; 0
   19dec:	24 30       	cpi	r18, 0x04	; 4
   19dee:	69 f0       	breq	.+26     	; 0x19e0a <twi_transmit+0x38>
   19df0:	82 e0       	ldi	r24, 0x02	; 2
   19df2:	08 95       	ret
   19df4:	a0 91 c2 13 	lds	r26, 0x13C2	; 0x8013c2 <twi_txBufferLength>
   19df8:	21 91       	ld	r18, Z+
   19dfa:	ac 01       	movw	r20, r24
   19dfc:	4c 53       	subi	r20, 0x3C	; 60
   19dfe:	5c 4e       	sbci	r21, 0xEC	; 236
   19e00:	a4 0f       	add	r26, r20
   19e02:	b5 2f       	mov	r27, r21
   19e04:	b1 1d       	adc	r27, r1
   19e06:	2c 93       	st	X, r18
   19e08:	01 96       	adiw	r24, 0x01	; 1
   19e0a:	86 17       	cp	r24, r22
   19e0c:	98 f3       	brcs	.-26     	; 0x19df4 <twi_transmit+0x22>
   19e0e:	80 91 c2 13 	lds	r24, 0x13C2	; 0x8013c2 <twi_txBufferLength>
   19e12:	68 0f       	add	r22, r24
   19e14:	60 93 c2 13 	sts	0x13C2, r22	; 0x8013c2 <twi_txBufferLength>
   19e18:	80 e0       	ldi	r24, 0x00	; 0
   19e1a:	08 95       	ret
   19e1c:	81 e0       	ldi	r24, 0x01	; 1
   19e1e:	08 95       	ret

00019e20 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   19e20:	90 93 07 14 	sts	0x1407, r25	; 0x801407 <twi_onSlaveReceive+0x1>
   19e24:	80 93 06 14 	sts	0x1406, r24	; 0x801406 <twi_onSlaveReceive>
   19e28:	08 95       	ret

00019e2a <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   19e2a:	90 93 09 14 	sts	0x1409, r25	; 0x801409 <twi_onSlaveTransmit+0x1>
   19e2e:	80 93 08 14 	sts	0x1408, r24	; 0x801408 <twi_onSlaveTransmit>
   19e32:	08 95       	ret

00019e34 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   19e34:	85 ed       	ldi	r24, 0xD5	; 213
   19e36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   19e3a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19e3e:	84 fd       	sbrc	r24, 4
   19e40:	fc cf       	rjmp	.-8      	; 0x19e3a <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   19e42:	10 92 0d 14 	sts	0x140D, r1	; 0x80140d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   19e46:	08 95       	ret

00019e48 <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   19e48:	85 ec       	ldi	r24, 0xC5	; 197
   19e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   19e4e:	10 92 0d 14 	sts	0x140D, r1	; 0x80140d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   19e52:	08 95       	ret

00019e54 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   19e54:	1f 92       	push	r1
   19e56:	0f 92       	push	r0
   19e58:	0f b6       	in	r0, 0x3f	; 63
   19e5a:	0f 92       	push	r0
   19e5c:	11 24       	eor	r1, r1
   19e5e:	0b b6       	in	r0, 0x3b	; 59
   19e60:	0f 92       	push	r0
   19e62:	2f 93       	push	r18
   19e64:	3f 93       	push	r19
   19e66:	4f 93       	push	r20
   19e68:	5f 93       	push	r21
   19e6a:	6f 93       	push	r22
   19e6c:	7f 93       	push	r23
   19e6e:	8f 93       	push	r24
   19e70:	9f 93       	push	r25
   19e72:	af 93       	push	r26
   19e74:	bf 93       	push	r27
   19e76:	ef 93       	push	r30
   19e78:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   19e7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   19e7e:	88 7f       	andi	r24, 0xF8	; 248
   19e80:	80 36       	cpi	r24, 0x60	; 96
   19e82:	09 f4       	brne	.+2      	; 0x19e86 <__vector_39+0x32>
   19e84:	4e c0       	rjmp	.+156    	; 0x19f22 <__vector_39+0xce>
   19e86:	08 f0       	brcs	.+2      	; 0x19e8a <__vector_39+0x36>
   19e88:	41 c0       	rjmp	.+130    	; 0x19f0c <__vector_39+0xb8>
   19e8a:	88 32       	cpi	r24, 0x28	; 40
   19e8c:	09 f4       	brne	.+2      	; 0x19e90 <__vector_39+0x3c>
   19e8e:	aa c0       	rjmp	.+340    	; 0x19fe4 <__vector_39+0x190>
   19e90:	28 f5       	brcc	.+74     	; 0x19edc <__vector_39+0x88>
   19e92:	80 31       	cpi	r24, 0x10	; 16
   19e94:	09 f4       	brne	.+2      	; 0x19e98 <__vector_39+0x44>
   19e96:	9e c0       	rjmp	.+316    	; 0x19fd4 <__vector_39+0x180>
   19e98:	c8 f4       	brcc	.+50     	; 0x19ecc <__vector_39+0x78>
   19e9a:	88 23       	and	r24, r24
   19e9c:	09 f4       	brne	.+2      	; 0x19ea0 <__vector_39+0x4c>
   19e9e:	fb c0       	rjmp	.+502    	; 0x1a096 <__vector_39+0x242>
   19ea0:	88 30       	cpi	r24, 0x08	; 8
   19ea2:	09 f4       	brne	.+2      	; 0x19ea6 <__vector_39+0x52>
   19ea4:	97 c0       	rjmp	.+302    	; 0x19fd4 <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   19ea6:	ff 91       	pop	r31
   19ea8:	ef 91       	pop	r30
   19eaa:	bf 91       	pop	r27
   19eac:	af 91       	pop	r26
   19eae:	9f 91       	pop	r25
   19eb0:	8f 91       	pop	r24
   19eb2:	7f 91       	pop	r23
   19eb4:	6f 91       	pop	r22
   19eb6:	5f 91       	pop	r21
   19eb8:	4f 91       	pop	r20
   19eba:	3f 91       	pop	r19
   19ebc:	2f 91       	pop	r18
   19ebe:	0f 90       	pop	r0
   19ec0:	0b be       	out	0x3b, r0	; 59
   19ec2:	0f 90       	pop	r0
   19ec4:	0f be       	out	0x3f, r0	; 63
   19ec6:	0f 90       	pop	r0
   19ec8:	1f 90       	pop	r1
   19eca:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19ecc:	88 31       	cpi	r24, 0x18	; 24
   19ece:	09 f4       	brne	.+2      	; 0x19ed2 <__vector_39+0x7e>
   19ed0:	89 c0       	rjmp	.+274    	; 0x19fe4 <__vector_39+0x190>
   19ed2:	80 32       	cpi	r24, 0x20	; 32
   19ed4:	41 f7       	brne	.-48     	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   19ed6:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <twi_error>
   19eda:	15 c0       	rjmp	.+42     	; 0x19f06 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19edc:	80 34       	cpi	r24, 0x40	; 64
   19ede:	09 f4       	brne	.+2      	; 0x19ee2 <__vector_39+0x8e>
   19ee0:	9e c0       	rjmp	.+316    	; 0x1a01e <__vector_39+0x1ca>
   19ee2:	48 f4       	brcc	.+18     	; 0x19ef6 <__vector_39+0xa2>
   19ee4:	80 33       	cpi	r24, 0x30	; 48
   19ee6:	b9 f3       	breq	.-18     	; 0x19ed6 <__vector_39+0x82>
   19ee8:	88 33       	cpi	r24, 0x38	; 56
   19eea:	e9 f6       	brne	.-70     	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   19eec:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   19ef0:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   19ef4:	d8 cf       	rjmp	.-80     	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19ef6:	80 35       	cpi	r24, 0x50	; 80
   19ef8:	09 f4       	brne	.+2      	; 0x19efc <__vector_39+0xa8>
   19efa:	85 c0       	rjmp	.+266    	; 0x1a006 <__vector_39+0x1b2>
   19efc:	88 35       	cpi	r24, 0x58	; 88
   19efe:	09 f4       	brne	.+2      	; 0x19f02 <__vector_39+0xae>
   19f00:	96 c0       	rjmp	.+300    	; 0x1a02e <__vector_39+0x1da>
   19f02:	88 34       	cpi	r24, 0x48	; 72
   19f04:	81 f6       	brne	.-96     	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   19f06:	0e 94 1a cf 	call	0x19e34	; 0x19e34 <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   19f0a:	cd cf       	rjmp	.-102    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19f0c:	88 39       	cpi	r24, 0x98	; 152
   19f0e:	09 f4       	brne	.+2      	; 0x19f12 <__vector_39+0xbe>
   19f10:	8c c0       	rjmp	.+280    	; 0x1a02a <__vector_39+0x1d6>
   19f12:	38 f5       	brcc	.+78     	; 0x19f62 <__vector_39+0x10e>
   19f14:	88 37       	cpi	r24, 0x78	; 120
   19f16:	29 f0       	breq	.+10     	; 0x19f22 <__vector_39+0xce>
   19f18:	50 f4       	brcc	.+20     	; 0x19f2e <__vector_39+0xda>
   19f1a:	88 36       	cpi	r24, 0x68	; 104
   19f1c:	11 f0       	breq	.+4      	; 0x19f22 <__vector_39+0xce>
   19f1e:	80 37       	cpi	r24, 0x70	; 112
   19f20:	11 f6       	brne	.-124    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   19f22:	83 e0       	ldi	r24, 0x03	; 3
   19f24:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   19f28:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <twi_rxBufferIndex>
   19f2c:	57 c0       	rjmp	.+174    	; 0x19fdc <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19f2e:	88 38       	cpi	r24, 0x88	; 136
   19f30:	09 f4       	brne	.+2      	; 0x19f34 <__vector_39+0xe0>
   19f32:	7b c0       	rjmp	.+246    	; 0x1a02a <__vector_39+0x1d6>
   19f34:	80 39       	cpi	r24, 0x90	; 144
   19f36:	19 f0       	breq	.+6      	; 0x19f3e <__vector_39+0xea>
   19f38:	80 38       	cpi	r24, 0x80	; 128
   19f3a:	09 f0       	breq	.+2      	; 0x19f3e <__vector_39+0xea>
   19f3c:	b4 cf       	rjmp	.-152    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   19f3e:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <twi_rxBufferIndex>
   19f42:	80 32       	cpi	r24, 0x20	; 32
   19f44:	08 f0       	brcs	.+2      	; 0x19f48 <__vector_39+0xf4>
   19f46:	71 c0       	rjmp	.+226    	; 0x1a02a <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   19f48:	e0 91 a1 13 	lds	r30, 0x13A1	; 0x8013a1 <twi_rxBufferIndex>
   19f4c:	81 e0       	ldi	r24, 0x01	; 1
   19f4e:	8e 0f       	add	r24, r30
   19f50:	80 93 a1 13 	sts	0x13A1, r24	; 0x8013a1 <twi_rxBufferIndex>
   19f54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   19f58:	f0 e0       	ldi	r31, 0x00	; 0
   19f5a:	ee 55       	subi	r30, 0x5E	; 94
   19f5c:	fc 4e       	sbci	r31, 0xEC	; 236
   19f5e:	80 83       	st	Z, r24
   19f60:	3d c0       	rjmp	.+122    	; 0x19fdc <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19f62:	80 3b       	cpi	r24, 0xB0	; 176
   19f64:	39 f0       	breq	.+14     	; 0x19f74 <__vector_39+0x120>
   19f66:	e0 f4       	brcc	.+56     	; 0x19fa0 <__vector_39+0x14c>
   19f68:	80 3a       	cpi	r24, 0xA0	; 160
   19f6a:	09 f4       	brne	.+2      	; 0x19f6e <__vector_39+0x11a>
   19f6c:	79 c0       	rjmp	.+242    	; 0x1a060 <__vector_39+0x20c>
   19f6e:	88 3a       	cpi	r24, 0xA8	; 168
   19f70:	09 f0       	breq	.+2      	; 0x19f74 <__vector_39+0x120>
   19f72:	99 cf       	rjmp	.-206    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   19f74:	84 e0       	ldi	r24, 0x04	; 4
   19f76:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   19f7a:	10 92 c3 13 	sts	0x13C3, r1	; 0x8013c3 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   19f7e:	10 92 c2 13 	sts	0x13C2, r1	; 0x8013c2 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   19f82:	e0 91 08 14 	lds	r30, 0x1408	; 0x801408 <twi_onSlaveTransmit>
   19f86:	f0 91 09 14 	lds	r31, 0x1409	; 0x801409 <twi_onSlaveTransmit+0x1>
   19f8a:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   19f8c:	80 91 c2 13 	lds	r24, 0x13C2	; 0x8013c2 <twi_txBufferLength>
   19f90:	81 11       	cpse	r24, r1
   19f92:	0f c0       	rjmp	.+30     	; 0x19fb2 <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   19f94:	81 e0       	ldi	r24, 0x01	; 1
   19f96:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   19f9a:	10 92 c4 13 	sts	0x13C4, r1	; 0x8013c4 <twi_txBuffer>
   19f9e:	09 c0       	rjmp	.+18     	; 0x19fb2 <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   19fa0:	80 3c       	cpi	r24, 0xC0	; 192
   19fa2:	09 f4       	brne	.+2      	; 0x19fa6 <__vector_39+0x152>
   19fa4:	76 c0       	rjmp	.+236    	; 0x1a092 <__vector_39+0x23e>
   19fa6:	88 3c       	cpi	r24, 0xC8	; 200
   19fa8:	09 f4       	brne	.+2      	; 0x19fac <__vector_39+0x158>
   19faa:	73 c0       	rjmp	.+230    	; 0x1a092 <__vector_39+0x23e>
   19fac:	88 3b       	cpi	r24, 0xB8	; 184
   19fae:	09 f0       	breq	.+2      	; 0x19fb2 <__vector_39+0x15e>
   19fb0:	7a cf       	rjmp	.-268    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   19fb2:	e0 91 c3 13 	lds	r30, 0x13C3	; 0x8013c3 <twi_txBufferIndex>
   19fb6:	81 e0       	ldi	r24, 0x01	; 1
   19fb8:	8e 0f       	add	r24, r30
   19fba:	80 93 c3 13 	sts	0x13C3, r24	; 0x8013c3 <twi_txBufferIndex>
   19fbe:	f0 e0       	ldi	r31, 0x00	; 0
   19fc0:	ec 53       	subi	r30, 0x3C	; 60
   19fc2:	fc 4e       	sbci	r31, 0xEC	; 236
   19fc4:	80 81       	ld	r24, Z
   19fc6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   19fca:	90 91 c3 13 	lds	r25, 0x13C3	; 0x8013c3 <twi_txBufferIndex>
   19fce:	80 91 c2 13 	lds	r24, 0x13C2	; 0x8013c2 <twi_txBufferLength>
   19fd2:	29 c0       	rjmp	.+82     	; 0x1a026 <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   19fd4:	80 91 0c 14 	lds	r24, 0x140C	; 0x80140c <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   19fd8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   19fdc:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   19fde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   19fe2:	61 cf       	rjmp	.-318    	; 0x19ea6 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   19fe4:	90 91 e5 13 	lds	r25, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   19fe8:	80 91 e4 13 	lds	r24, 0x13E4	; 0x8013e4 <twi_masterBufferLength>
   19fec:	98 17       	cp	r25, r24
   19fee:	58 f5       	brcc	.+86     	; 0x1a046 <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   19ff0:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   19ff4:	81 e0       	ldi	r24, 0x01	; 1
   19ff6:	8e 0f       	add	r24, r30
   19ff8:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <twi_masterBufferIndex>
   19ffc:	f0 e0       	ldi	r31, 0x00	; 0
   19ffe:	ea 51       	subi	r30, 0x1A	; 26
   1a000:	fc 4e       	sbci	r31, 0xEC	; 236
   1a002:	80 81       	ld	r24, Z
   1a004:	e9 cf       	rjmp	.-46     	; 0x19fd8 <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1a006:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   1a00a:	81 e0       	ldi	r24, 0x01	; 1
   1a00c:	8e 0f       	add	r24, r30
   1a00e:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <twi_masterBufferIndex>
   1a012:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a016:	f0 e0       	ldi	r31, 0x00	; 0
   1a018:	ea 51       	subi	r30, 0x1A	; 26
   1a01a:	fc 4e       	sbci	r31, 0xEC	; 236
   1a01c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   1a01e:	90 91 e5 13 	lds	r25, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   1a022:	80 91 e4 13 	lds	r24, 0x13E4	; 0x8013e4 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1a026:	98 17       	cp	r25, r24
   1a028:	c8 f2       	brcs	.-78     	; 0x19fdc <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   1a02a:	85 e8       	ldi	r24, 0x85	; 133
   1a02c:	d8 cf       	rjmp	.-80     	; 0x19fde <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1a02e:	e0 91 e5 13 	lds	r30, 0x13E5	; 0x8013e5 <twi_masterBufferIndex>
   1a032:	81 e0       	ldi	r24, 0x01	; 1
   1a034:	8e 0f       	add	r24, r30
   1a036:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <twi_masterBufferIndex>
   1a03a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1a03e:	f0 e0       	ldi	r31, 0x00	; 0
   1a040:	ea 51       	subi	r30, 0x1A	; 26
   1a042:	fc 4e       	sbci	r31, 0xEC	; 236
   1a044:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   1a046:	80 91 0b 14 	lds	r24, 0x140B	; 0x80140b <twi_sendStop>
   1a04a:	81 11       	cpse	r24, r1
   1a04c:	5c cf       	rjmp	.-328    	; 0x19f06 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   1a04e:	81 e0       	ldi	r24, 0x01	; 1
   1a050:	80 93 0a 14 	sts	0x140A, r24	; 0x80140a <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   1a054:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1a056:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   1a05a:	10 92 0d 14 	sts	0x140D, r1	; 0x80140d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   1a05e:	23 cf       	rjmp	.-442    	; 0x19ea6 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   1a060:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   1a064:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <twi_rxBufferIndex>
   1a068:	80 32       	cpi	r24, 0x20	; 32
   1a06a:	30 f4       	brcc	.+12     	; 0x1a078 <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   1a06c:	e0 91 a1 13 	lds	r30, 0x13A1	; 0x8013a1 <twi_rxBufferIndex>
   1a070:	f0 e0       	ldi	r31, 0x00	; 0
   1a072:	ee 55       	subi	r30, 0x5E	; 94
   1a074:	fc 4e       	sbci	r31, 0xEC	; 236
   1a076:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   1a078:	60 91 a1 13 	lds	r22, 0x13A1	; 0x8013a1 <twi_rxBufferIndex>
   1a07c:	70 e0       	ldi	r23, 0x00	; 0
   1a07e:	e0 91 06 14 	lds	r30, 0x1406	; 0x801406 <twi_onSlaveReceive>
   1a082:	f0 91 07 14 	lds	r31, 0x1407	; 0x801407 <twi_onSlaveReceive+0x1>
   1a086:	82 ea       	ldi	r24, 0xA2	; 162
   1a088:	93 e1       	ldi	r25, 0x13	; 19
   1a08a:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   1a08c:	10 92 a1 13 	sts	0x13A1, r1	; 0x8013a1 <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   1a090:	0a cf       	rjmp	.-492    	; 0x19ea6 <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1a092:	85 ec       	ldi	r24, 0xC5	; 197
   1a094:	e0 cf       	rjmp	.-64     	; 0x1a056 <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1a096:	10 92 a0 13 	sts	0x13A0, r1	; 0x8013a0 <twi_error>
   1a09a:	35 cf       	rjmp	.-406    	; 0x19f06 <__vector_39+0xb2>

0001a09c <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   1a09c:	ff 92       	push	r15
   1a09e:	0f 93       	push	r16
   1a0a0:	1f 93       	push	r17
   1a0a2:	cf 93       	push	r28
   1a0a4:	df 93       	push	r29
   1a0a6:	f8 2e       	mov	r15, r24
   1a0a8:	eb 01       	movw	r28, r22
   1a0aa:	8b 01       	movw	r16, r22
   1a0ac:	04 0f       	add	r16, r20
   1a0ae:	11 1d       	adc	r17, r1
   1a0b0:	c0 17       	cp	r28, r16
   1a0b2:	d1 07       	cpc	r29, r17
   1a0b4:	61 f0       	breq	.+24     	; 0x1a0ce <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   1a0b6:	69 91       	ld	r22, Y+
   1a0b8:	8f 2d       	mov	r24, r15
   1a0ba:	0e 94 a5 d1 	call	0x1a34a	; 0x1a34a <ds2482owWriteByte(unsigned char, unsigned char)>
   1a0be:	88 23       	and	r24, r24
   1a0c0:	b9 f3       	breq	.-18     	; 0x1a0b0 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   1a0c2:	df 91       	pop	r29
   1a0c4:	cf 91       	pop	r28
   1a0c6:	1f 91       	pop	r17
   1a0c8:	0f 91       	pop	r16
   1a0ca:	ff 90       	pop	r15
   1a0cc:	08 95       	ret
   1a0ce:	80 e0       	ldi	r24, 0x00	; 0
   1a0d0:	f8 cf       	rjmp	.-16     	; 0x1a0c2 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

0001a0d2 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   1a0d2:	0f 93       	push	r16
   1a0d4:	1f 93       	push	r17
   1a0d6:	cf 93       	push	r28
   1a0d8:	c8 2f       	mov	r28, r24
   1a0da:	8b 01       	movw	r16, r22
   1a0dc:	65 e5       	ldi	r22, 0x55	; 85
   1a0de:	0e 94 a5 d1 	call	0x1a34a	; 0x1a34a <ds2482owWriteByte(unsigned char, unsigned char)>
   1a0e2:	81 11       	cpse	r24, r1
   1a0e4:	08 c0       	rjmp	.+16     	; 0x1a0f6 <owMatchRom(unsigned char, unsigned char*)+0x24>
   1a0e6:	48 e0       	ldi	r20, 0x08	; 8
   1a0e8:	b8 01       	movw	r22, r16
   1a0ea:	8c 2f       	mov	r24, r28
   1a0ec:	cf 91       	pop	r28
   1a0ee:	1f 91       	pop	r17
   1a0f0:	0f 91       	pop	r16
   1a0f2:	0c 94 4e d0 	jmp	0x1a09c	; 0x1a09c <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   1a0f6:	cf 91       	pop	r28
   1a0f8:	1f 91       	pop	r17
   1a0fa:	0f 91       	pop	r16
   1a0fc:	08 95       	ret

0001a0fe <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   1a0fe:	bf 92       	push	r11
   1a100:	cf 92       	push	r12
   1a102:	df 92       	push	r13
   1a104:	ef 92       	push	r14
   1a106:	ff 92       	push	r15
   1a108:	0f 93       	push	r16
   1a10a:	1f 93       	push	r17
   1a10c:	cf 93       	push	r28
   1a10e:	df 93       	push	r29
   1a110:	1f 92       	push	r1
   1a112:	cd b7       	in	r28, 0x3d	; 61
   1a114:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1a116:	90 91 0e 14 	lds	r25, 0x140E	; 0x80140e <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   1a11a:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1a11c:	91 11       	cpse	r25, r1
   1a11e:	12 c0       	rjmp	.+36     	; 0x1a144 <owMatchNext(unsigned char, unsigned char*)+0x46>
   1a120:	7b 01       	movw	r14, r22
   1a122:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   1a124:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <ds2482owReset(unsigned char)>
   1a128:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1a12a:	81 11       	cpse	r24, r1
   1a12c:	0b c0       	rjmp	.+22     	; 0x1a144 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   1a12e:	60 ef       	ldi	r22, 0xF0	; 240
   1a130:	8b 2d       	mov	r24, r11
   1a132:	0e 94 a5 d1 	call	0x1a34a	; 0x1a34a <ds2482owWriteByte(unsigned char, unsigned char)>
   1a136:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1a138:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1a13a:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1a13c:	dd 24       	eor	r13, r13
   1a13e:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   1a140:	88 23       	and	r24, r24
   1a142:	81 f0       	breq	.+32     	; 0x1a164 <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   1a144:	81 2f       	mov	r24, r17
   1a146:	0f 90       	pop	r0
   1a148:	df 91       	pop	r29
   1a14a:	cf 91       	pop	r28
   1a14c:	1f 91       	pop	r17
   1a14e:	0f 91       	pop	r16
   1a150:	ff 90       	pop	r15
   1a152:	ef 90       	pop	r14
   1a154:	df 90       	pop	r13
   1a156:	cf 90       	pop	r12
   1a158:	bf 90       	pop	r11
   1a15a:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   1a15c:	98 e0       	ldi	r25, 0x08	; 8
   1a15e:	c9 16       	cp	r12, r25
   1a160:	09 f4       	brne	.+2      	; 0x1a164 <owMatchNext(unsigned char, unsigned char*)+0x66>
   1a162:	45 c0       	rjmp	.+138    	; 0x1a1ee <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   1a164:	90 91 0f 14 	lds	r25, 0x140F	; 0x80140f <lastDiscrepancy>
   1a168:	d9 16       	cp	r13, r25
   1a16a:	88 f5       	brcc	.+98     	; 0x1a1ce <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1a16c:	f7 01       	movw	r30, r14
   1a16e:	ec 0d       	add	r30, r12
   1a170:	f1 1d       	adc	r31, r1
   1a172:	80 81       	ld	r24, Z
   1a174:	80 23       	and	r24, r16
   1a176:	91 e0       	ldi	r25, 0x01	; 1
   1a178:	09 f4       	brne	.+2      	; 0x1a17c <owMatchNext(unsigned char, unsigned char*)+0x7e>
   1a17a:	90 e0       	ldi	r25, 0x00	; 0
   1a17c:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   1a17e:	be 01       	movw	r22, r28
   1a180:	6f 5f       	subi	r22, 0xFF	; 255
   1a182:	7f 4f       	sbci	r23, 0xFF	; 255
   1a184:	8b 2d       	mov	r24, r11
   1a186:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   1a18a:	81 11       	cpse	r24, r1
   1a18c:	3a c0       	rjmp	.+116    	; 0x1a202 <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   1a18e:	29 81       	ldd	r18, Y+1	; 0x01
   1a190:	30 e0       	ldi	r19, 0x00	; 0
   1a192:	a9 01       	movw	r20, r18
   1a194:	95 e0       	ldi	r25, 0x05	; 5
   1a196:	55 95       	asr	r21
   1a198:	47 95       	ror	r20
   1a19a:	9a 95       	dec	r25
   1a19c:	e1 f7       	brne	.-8      	; 0x1a196 <owMatchNext(unsigned char, unsigned char*)+0x98>
   1a19e:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   1a1a0:	22 0f       	add	r18, r18
   1a1a2:	23 2f       	mov	r18, r19
   1a1a4:	22 1f       	adc	r18, r18
   1a1a6:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   1a1a8:	43 30       	cpi	r20, 0x03	; 3
   1a1aa:	09 f1       	breq	.+66     	; 0x1a1ee <owMatchNext(unsigned char, unsigned char*)+0xf0>
   1a1ac:	ec 2d       	mov	r30, r12
   1a1ae:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   1a1b0:	41 11       	cpse	r20, r1
   1a1b2:	12 c0       	rjmp	.+36     	; 0x1a1d8 <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1a1b4:	22 23       	and	r18, r18
   1a1b6:	c9 f0       	breq	.+50     	; 0x1a1ea <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   1a1b8:	ee 0d       	add	r30, r14
   1a1ba:	ff 1d       	adc	r31, r15
   1a1bc:	90 81       	ld	r25, Z
   1a1be:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1a1c0:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1a1c2:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1a1c4:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1a1c6:	51 f6       	brne	.-108    	; 0x1a15c <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1a1c8:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   1a1ca:	01 e0       	ldi	r16, 0x01	; 1
   1a1cc:	c7 cf       	rjmp	.-114    	; 0x1a15c <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1a1ce:	81 e0       	ldi	r24, 0x01	; 1
   1a1d0:	9d 11       	cpse	r25, r13
   1a1d2:	80 e0       	ldi	r24, 0x00	; 0
   1a1d4:	89 83       	std	Y+1, r24	; 0x01
   1a1d6:	d3 cf       	rjmp	.-90     	; 0x1a17e <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   1a1d8:	21 11       	cpse	r18, r1
   1a1da:	ee cf       	rjmp	.-36     	; 0x1a1b8 <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1a1dc:	ee 0d       	add	r30, r14
   1a1de:	ff 1d       	adc	r31, r15
   1a1e0:	90 81       	ld	r25, Z
   1a1e2:	20 2f       	mov	r18, r16
   1a1e4:	20 95       	com	r18
   1a1e6:	92 23       	and	r25, r18
   1a1e8:	eb cf       	rjmp	.-42     	; 0x1a1c0 <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1a1ea:	1d 2d       	mov	r17, r13
   1a1ec:	f7 cf       	rjmp	.-18     	; 0x1a1dc <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   1a1ee:	90 e4       	ldi	r25, 0x40	; 64
   1a1f0:	9d 15       	cp	r25, r13
   1a1f2:	48 f4       	brcc	.+18     	; 0x1a206 <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1a1f4:	10 93 0f 14 	sts	0x140F, r17	; 0x80140f <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   1a1f8:	91 e0       	ldi	r25, 0x01	; 1
   1a1fa:	11 11       	cpse	r17, r1
   1a1fc:	90 e0       	ldi	r25, 0x00	; 0
   1a1fe:	90 93 0e 14 	sts	0x140E, r25	; 0x80140e <lastDevice>
   1a202:	18 2f       	mov	r17, r24
   1a204:	9f cf       	rjmp	.-194    	; 0x1a144 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   1a206:	85 e0       	ldi	r24, 0x05	; 5
   1a208:	fc cf       	rjmp	.-8      	; 0x1a202 <owMatchNext(unsigned char, unsigned char*)+0x104>

0001a20a <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   1a20a:	10 92 0e 14 	sts	0x140E, r1	; 0x80140e <lastDevice>
   1a20e:	10 92 0f 14 	sts	0x140F, r1	; 0x80140f <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1a212:	0c 94 7f d0 	jmp	0x1a0fe	; 0x1a0fe <owMatchNext(unsigned char, unsigned char*)>

0001a216 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   1a216:	68 2f       	mov	r22, r24
   1a218:	8a e4       	ldi	r24, 0x4A	; 74
   1a21a:	93 e1       	ldi	r25, 0x13	; 19
   1a21c:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
   1a220:	60 ef       	ldi	r22, 0xF0	; 240
   1a222:	70 e0       	ldi	r23, 0x00	; 0
   1a224:	8a e4       	ldi	r24, 0x4A	; 74
   1a226:	93 e1       	ldi	r25, 0x13	; 19
   1a228:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
   1a22c:	8a e4       	ldi	r24, 0x4A	; 74
   1a22e:	93 e1       	ldi	r25, 0x13	; 19
   1a230:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a234:	81 11       	cpse	r24, r1
   1a236:	8a e0       	ldi	r24, 0x0A	; 10
   1a238:	08 95       	ret

0001a23a <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   1a23a:	cf 93       	push	r28
   1a23c:	c6 2f       	mov	r28, r22
   1a23e:	68 2f       	mov	r22, r24
   1a240:	8a e4       	ldi	r24, 0x4A	; 74
   1a242:	93 e1       	ldi	r25, 0x13	; 19
   1a244:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
   1a248:	61 ee       	ldi	r22, 0xE1	; 225
   1a24a:	70 e0       	ldi	r23, 0x00	; 0
   1a24c:	8a e4       	ldi	r24, 0x4A	; 74
   1a24e:	93 e1       	ldi	r25, 0x13	; 19
   1a250:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
   1a254:	6c 2f       	mov	r22, r28
   1a256:	8a e4       	ldi	r24, 0x4A	; 74
   1a258:	93 e1       	ldi	r25, 0x13	; 19
   1a25a:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   1a25e:	8a e4       	ldi	r24, 0x4A	; 74
   1a260:	93 e1       	ldi	r25, 0x13	; 19
   1a262:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a266:	81 11       	cpse	r24, r1
   1a268:	83 e0       	ldi	r24, 0x03	; 3
   1a26a:	cf 91       	pop	r28
   1a26c:	08 95       	ret

0001a26e <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   1a26e:	cf 93       	push	r28
   1a270:	c6 2f       	mov	r28, r22
   1a272:	68 2f       	mov	r22, r24
   1a274:	8a e4       	ldi	r24, 0x4A	; 74
   1a276:	93 e1       	ldi	r25, 0x13	; 19
   1a278:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
   1a27c:	62 ed       	ldi	r22, 0xD2	; 210
   1a27e:	70 e0       	ldi	r23, 0x00	; 0
   1a280:	8a e4       	ldi	r24, 0x4A	; 74
   1a282:	93 e1       	ldi	r25, 0x13	; 19
   1a284:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
   1a288:	6c 2f       	mov	r22, r28
   1a28a:	8a e4       	ldi	r24, 0x4A	; 74
   1a28c:	93 e1       	ldi	r25, 0x13	; 19
   1a28e:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
   1a292:	8a e4       	ldi	r24, 0x4A	; 74
   1a294:	93 e1       	ldi	r25, 0x13	; 19
   1a296:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a29a:	81 11       	cpse	r24, r1
   1a29c:	83 e0       	ldi	r24, 0x03	; 3
   1a29e:	cf 91       	pop	r28
   1a2a0:	08 95       	ret

0001a2a2 <ds2482init(unsigned char)>:
_Z10ds2482inith():
   1a2a2:	cf 93       	push	r28
   1a2a4:	df 93       	push	r29
   1a2a6:	d8 2f       	mov	r29, r24
   1a2a8:	68 2f       	mov	r22, r24
   1a2aa:	8a e4       	ldi	r24, 0x4A	; 74
   1a2ac:	93 e1       	ldi	r25, 0x13	; 19
   1a2ae:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
   1a2b2:	8a e4       	ldi	r24, 0x4A	; 74
   1a2b4:	93 e1       	ldi	r25, 0x13	; 19
   1a2b6:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a2ba:	c8 2f       	mov	r28, r24
   1a2bc:	81 11       	cpse	r24, r1
   1a2be:	08 c0       	rjmp	.+16     	; 0x1a2d0 <ds2482init(unsigned char)+0x2e>
   1a2c0:	60 e0       	ldi	r22, 0x00	; 0
   1a2c2:	8d 2f       	mov	r24, r29
   1a2c4:	0e 94 37 d1 	call	0x1a26e	; 0x1a26e <ds2482setConfig(unsigned char, unsigned char)>
   1a2c8:	8c 2f       	mov	r24, r28
   1a2ca:	df 91       	pop	r29
   1a2cc:	cf 91       	pop	r28
   1a2ce:	08 95       	ret
   1a2d0:	ca e0       	ldi	r28, 0x0A	; 10
   1a2d2:	fa cf       	rjmp	.-12     	; 0x1a2c8 <ds2482init(unsigned char)+0x26>

0001a2d4 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   1a2d4:	0f 93       	push	r16
   1a2d6:	1f 93       	push	r17
   1a2d8:	cf 93       	push	r28
   1a2da:	df 93       	push	r29
   1a2dc:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a2de:	68 2f       	mov	r22, r24
   1a2e0:	8a e4       	ldi	r24, 0x4A	; 74
   1a2e2:	93 e1       	ldi	r25, 0x13	; 19
   1a2e4:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   1a2e8:	64 eb       	ldi	r22, 0xB4	; 180
   1a2ea:	70 e0       	ldi	r23, 0x00	; 0
   1a2ec:	8a e4       	ldi	r24, 0x4A	; 74
   1a2ee:	93 e1       	ldi	r25, 0x13	; 19
   1a2f0:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a2f4:	8a e4       	ldi	r24, 0x4A	; 74
   1a2f6:	93 e1       	ldi	r25, 0x13	; 19
   1a2f8:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a2fc:	c8 2f       	mov	r28, r24
   1a2fe:	81 11       	cpse	r24, r1
   1a300:	1b c0       	rjmp	.+54     	; 0x1a338 <ds2482owReset(unsigned char)+0x64>
   1a302:	de ef       	ldi	r29, 0xFE	; 254
   1a304:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   1a306:	f9 f0       	breq	.+62     	; 0x1a346 <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   1a308:	41 e0       	ldi	r20, 0x01	; 1
   1a30a:	60 2f       	mov	r22, r16
   1a30c:	8a e4       	ldi	r24, 0x4A	; 74
   1a30e:	93 e1       	ldi	r25, 0x13	; 19
   1a310:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   1a314:	8a e4       	ldi	r24, 0x4A	; 74
   1a316:	93 e1       	ldi	r25, 0x13	; 19
   1a318:	0e 94 c2 cc 	call	0x19984	; 0x19984 <TwoWire::available()>
   1a31c:	18 16       	cp	r1, r24
   1a31e:	19 06       	cpc	r1, r25
   1a320:	2c f4       	brge	.+10     	; 0x1a32c <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   1a322:	8a e4       	ldi	r24, 0x4A	; 74
   1a324:	93 e1       	ldi	r25, 0x13	; 19
   1a326:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   1a32a:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   1a32c:	10 fd       	sbrc	r17, 0
   1a32e:	ea cf       	rjmp	.-44     	; 0x1a304 <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   1a330:	11 fd       	sbrc	r17, 1
   1a332:	03 c0       	rjmp	.+6      	; 0x1a33a <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   1a334:	c5 e0       	ldi	r28, 0x05	; 5
   1a336:	01 c0       	rjmp	.+2      	; 0x1a33a <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a338:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   1a33a:	8c 2f       	mov	r24, r28
   1a33c:	df 91       	pop	r29
   1a33e:	cf 91       	pop	r28
   1a340:	1f 91       	pop	r17
   1a342:	0f 91       	pop	r16
   1a344:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   1a346:	c4 e0       	ldi	r28, 0x04	; 4
   1a348:	f8 cf       	rjmp	.-16     	; 0x1a33a <ds2482owReset(unsigned char)+0x66>

0001a34a <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   1a34a:	0f 93       	push	r16
   1a34c:	1f 93       	push	r17
   1a34e:	cf 93       	push	r28
   1a350:	df 93       	push	r29
   1a352:	08 2f       	mov	r16, r24
   1a354:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a356:	68 2f       	mov	r22, r24
   1a358:	8a e4       	ldi	r24, 0x4A	; 74
   1a35a:	93 e1       	ldi	r25, 0x13	; 19
   1a35c:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   1a360:	65 ea       	ldi	r22, 0xA5	; 165
   1a362:	70 e0       	ldi	r23, 0x00	; 0
   1a364:	8a e4       	ldi	r24, 0x4A	; 74
   1a366:	93 e1       	ldi	r25, 0x13	; 19
   1a368:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   1a36c:	6d 2f       	mov	r22, r29
   1a36e:	8a e4       	ldi	r24, 0x4A	; 74
   1a370:	93 e1       	ldi	r25, 0x13	; 19
   1a372:	0e 94 22 cd 	call	0x19a44	; 0x19a44 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a376:	8a e4       	ldi	r24, 0x4A	; 74
   1a378:	93 e1       	ldi	r25, 0x13	; 19
   1a37a:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a37e:	c8 2f       	mov	r28, r24
   1a380:	81 11       	cpse	r24, r1
   1a382:	1d c0       	rjmp	.+58     	; 0x1a3be <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   1a384:	1e ef       	ldi	r17, 0xFE	; 254
   1a386:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   1a388:	e1 f0       	breq	.+56     	; 0x1a3c2 <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1a38a:	41 e0       	ldi	r20, 0x01	; 1
   1a38c:	60 2f       	mov	r22, r16
   1a38e:	8a e4       	ldi	r24, 0x4A	; 74
   1a390:	93 e1       	ldi	r25, 0x13	; 19
   1a392:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1a396:	8a e4       	ldi	r24, 0x4A	; 74
   1a398:	93 e1       	ldi	r25, 0x13	; 19
   1a39a:	0e 94 c2 cc 	call	0x19984	; 0x19984 <TwoWire::available()>
   1a39e:	18 16       	cp	r1, r24
   1a3a0:	19 06       	cpc	r1, r25
   1a3a2:	2c f4       	brge	.+10     	; 0x1a3ae <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   1a3a4:	8a e4       	ldi	r24, 0x4A	; 74
   1a3a6:	93 e1       	ldi	r25, 0x13	; 19
   1a3a8:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   1a3ac:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   1a3ae:	d0 fd       	sbrc	r29, 0
   1a3b0:	ea cf       	rjmp	.-44     	; 0x1a386 <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1a3b2:	8c 2f       	mov	r24, r28
   1a3b4:	df 91       	pop	r29
   1a3b6:	cf 91       	pop	r28
   1a3b8:	1f 91       	pop	r17
   1a3ba:	0f 91       	pop	r16
   1a3bc:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a3be:	c3 e0       	ldi	r28, 0x03	; 3
   1a3c0:	f8 cf       	rjmp	.-16     	; 0x1a3b2 <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1a3c2:	c4 e0       	ldi	r28, 0x04	; 4
   1a3c4:	f6 cf       	rjmp	.-20     	; 0x1a3b2 <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

0001a3c6 <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   1a3c6:	ff 92       	push	r15
   1a3c8:	0f 93       	push	r16
   1a3ca:	1f 93       	push	r17
   1a3cc:	cf 93       	push	r28
   1a3ce:	df 93       	push	r29
   1a3d0:	f8 2e       	mov	r15, r24
   1a3d2:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1a3d4:	68 2f       	mov	r22, r24
   1a3d6:	8a e4       	ldi	r24, 0x4A	; 74
   1a3d8:	93 e1       	ldi	r25, 0x13	; 19
   1a3da:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1a3de:	68 e7       	ldi	r22, 0x78	; 120
   1a3e0:	70 e0       	ldi	r23, 0x00	; 0
   1a3e2:	8a e4       	ldi	r24, 0x4A	; 74
   1a3e4:	93 e1       	ldi	r25, 0x13	; 19
   1a3e6:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   1a3ea:	f8 01       	movw	r30, r16
   1a3ec:	80 81       	ld	r24, Z
   1a3ee:	70 e0       	ldi	r23, 0x00	; 0
   1a3f0:	60 e0       	ldi	r22, 0x00	; 0
   1a3f2:	88 23       	and	r24, r24
   1a3f4:	11 f0       	breq	.+4      	; 0x1a3fa <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   1a3f6:	60 e8       	ldi	r22, 0x80	; 128
   1a3f8:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   1a3fa:	8a e4       	ldi	r24, 0x4A	; 74
   1a3fc:	93 e1       	ldi	r25, 0x13	; 19
   1a3fe:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a402:	8a e4       	ldi	r24, 0x4A	; 74
   1a404:	93 e1       	ldi	r25, 0x13	; 19
   1a406:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
   1a40a:	c8 2f       	mov	r28, r24
   1a40c:	81 11       	cpse	r24, r1
   1a40e:	21 c0       	rjmp	.+66     	; 0x1a452 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   1a410:	de ef       	ldi	r29, 0xFE	; 254
   1a412:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1a414:	01 f1       	breq	.+64     	; 0x1a456 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1a416:	41 e0       	ldi	r20, 0x01	; 1
   1a418:	6f 2d       	mov	r22, r15
   1a41a:	8a e4       	ldi	r24, 0x4A	; 74
   1a41c:	93 e1       	ldi	r25, 0x13	; 19
   1a41e:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   1a422:	8a e4       	ldi	r24, 0x4A	; 74
   1a424:	93 e1       	ldi	r25, 0x13	; 19
   1a426:	0e 94 c2 cc 	call	0x19984	; 0x19984 <TwoWire::available()>
   1a42a:	18 16       	cp	r1, r24
   1a42c:	19 06       	cpc	r1, r25
   1a42e:	34 f4       	brge	.+12     	; 0x1a43c <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1a430:	8a e4       	ldi	r24, 0x4A	; 74
   1a432:	93 e1       	ldi	r25, 0x13	; 19
   1a434:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   1a438:	f8 01       	movw	r30, r16
   1a43a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   1a43c:	f8 01       	movw	r30, r16
   1a43e:	80 81       	ld	r24, Z
   1a440:	80 fd       	sbrc	r24, 0
   1a442:	e7 cf       	rjmp	.-50     	; 0x1a412 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   1a444:	8c 2f       	mov	r24, r28
   1a446:	df 91       	pop	r29
   1a448:	cf 91       	pop	r28
   1a44a:	1f 91       	pop	r17
   1a44c:	0f 91       	pop	r16
   1a44e:	ff 90       	pop	r15
   1a450:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1a452:	c3 e0       	ldi	r28, 0x03	; 3
   1a454:	f7 cf       	rjmp	.-18     	; 0x1a444 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1a456:	c4 e0       	ldi	r28, 0x04	; 4
   1a458:	f5 cf       	rjmp	.-22     	; 0x1a444 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

0001a45a <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   1a45a:	ff 92       	push	r15
   1a45c:	0f 93       	push	r16
   1a45e:	1f 93       	push	r17
   1a460:	cf 93       	push	r28
   1a462:	df 93       	push	r29
   1a464:	d8 2f       	mov	r29, r24
   1a466:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   1a468:	68 2f       	mov	r22, r24
   1a46a:	8a e4       	ldi	r24, 0x4A	; 74
   1a46c:	93 e1       	ldi	r25, 0x13	; 19
   1a46e:	0e 94 90 cd 	call	0x19b20	; 0x19b20 <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   1a472:	66 e9       	ldi	r22, 0x96	; 150
   1a474:	70 e0       	ldi	r23, 0x00	; 0
   1a476:	8a e4       	ldi	r24, 0x4A	; 74
   1a478:	93 e1       	ldi	r25, 0x13	; 19
   1a47a:	0e 94 9a ca 	call	0x19534	; 0x19534 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a47e:	8a e4       	ldi	r24, 0x4A	; 74
   1a480:	93 e1       	ldi	r25, 0x13	; 19
   1a482:	0e 94 18 ce 	call	0x19c30	; 0x19c30 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   1a486:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1a488:	81 11       	cpse	r24, r1
   1a48a:	31 c0       	rjmp	.+98     	; 0x1a4ee <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   1a48c:	ce ef       	ldi	r28, 0xFE	; 254
   1a48e:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1a490:	a9 f1       	breq	.+106    	; 0x1a4fc <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1a492:	41 e0       	ldi	r20, 0x01	; 1
   1a494:	6d 2f       	mov	r22, r29
   1a496:	8a e4       	ldi	r24, 0x4A	; 74
   1a498:	93 e1       	ldi	r25, 0x13	; 19
   1a49a:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1a49e:	8a e4       	ldi	r24, 0x4A	; 74
   1a4a0:	93 e1       	ldi	r25, 0x13	; 19
   1a4a2:	0e 94 c2 cc 	call	0x19984	; 0x19984 <TwoWire::available()>
   1a4a6:	18 16       	cp	r1, r24
   1a4a8:	19 06       	cpc	r1, r25
   1a4aa:	2c f4       	brge	.+10     	; 0x1a4b6 <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   1a4ac:	8a e4       	ldi	r24, 0x4A	; 74
   1a4ae:	93 e1       	ldi	r25, 0x13	; 19
   1a4b0:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   1a4b4:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   1a4b6:	f0 fc       	sbrc	r15, 0
   1a4b8:	ea cf       	rjmp	.-44     	; 0x1a48e <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   1a4ba:	61 ee       	ldi	r22, 0xE1	; 225
   1a4bc:	8d 2f       	mov	r24, r29
   1a4be:	0e 94 1d d1 	call	0x1a23a	; 0x1a23a <ds2482setReadPointer(unsigned char, unsigned char)>
   1a4c2:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   1a4c4:	81 11       	cpse	r24, r1
   1a4c6:	13 c0       	rjmp	.+38     	; 0x1a4ee <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   1a4c8:	41 e0       	ldi	r20, 0x01	; 1
   1a4ca:	6d 2f       	mov	r22, r29
   1a4cc:	8a e4       	ldi	r24, 0x4A	; 74
   1a4ce:	93 e1       	ldi	r25, 0x13	; 19
   1a4d0:	0e 94 12 ce 	call	0x19c24	; 0x19c24 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   1a4d4:	8a e4       	ldi	r24, 0x4A	; 74
   1a4d6:	93 e1       	ldi	r25, 0x13	; 19
   1a4d8:	0e 94 c2 cc 	call	0x19984	; 0x19984 <TwoWire::available()>
   1a4dc:	18 16       	cp	r1, r24
   1a4de:	19 06       	cpc	r1, r25
   1a4e0:	34 f4       	brge	.+12     	; 0x1a4ee <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   1a4e2:	8a e4       	ldi	r24, 0x4A	; 74
   1a4e4:	93 e1       	ldi	r25, 0x13	; 19
   1a4e6:	0e 94 c9 cc 	call	0x19992	; 0x19992 <TwoWire::read()>
   1a4ea:	f8 01       	movw	r30, r16
   1a4ec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   1a4ee:	8c 2f       	mov	r24, r28
   1a4f0:	df 91       	pop	r29
   1a4f2:	cf 91       	pop	r28
   1a4f4:	1f 91       	pop	r17
   1a4f6:	0f 91       	pop	r16
   1a4f8:	ff 90       	pop	r15
   1a4fa:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1a4fc:	c4 e0       	ldi	r28, 0x04	; 4
   1a4fe:	f7 cf       	rjmp	.-18     	; 0x1a4ee <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

0001a500 <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:160 (discriminator 2)

  unsigned long minutes = (rawTime % 3600) / 60;
  String minuteStr = minutes < 10 ? "0" + String(minutes) : String(minutes);

  unsigned long seconds = rawTime % 60;
  String secondStr = seconds < 10 ? "0" + String(seconds) : String(seconds);
   1a500:	fc 01       	movw	r30, r24
   1a502:	12 82       	std	Z+2, r1	; 0x02
   1a504:	80 e3       	ldi	r24, 0x30	; 48
   1a506:	99 e0       	ldi	r25, 0x09	; 9
   1a508:	94 83       	std	Z+4, r25	; 0x04
   1a50a:	83 83       	std	Z+3, r24	; 0x03
   1a50c:	89 e3       	ldi	r24, 0x39	; 57
   1a50e:	95 e0       	ldi	r25, 0x05	; 5
   1a510:	96 83       	std	Z+6, r25	; 0x06
   1a512:	85 83       	std	Z+5, r24	; 0x05
   1a514:	17 82       	std	Z+7, r1	; 0x07
   1a516:	10 86       	std	Z+8, r1	; 0x08
   1a518:	11 86       	std	Z+9, r1	; 0x09
   1a51a:	12 86       	std	Z+10, r1	; 0x0a
   1a51c:	80 e6       	ldi	r24, 0x60	; 96
   1a51e:	9a ee       	ldi	r25, 0xEA	; 234
   1a520:	a0 e0       	ldi	r26, 0x00	; 0
   1a522:	b0 e0       	ldi	r27, 0x00	; 0
   1a524:	83 87       	std	Z+11, r24	; 0x0b
   1a526:	94 87       	std	Z+12, r25	; 0x0c
   1a528:	a5 87       	std	Z+13, r26	; 0x0d
   1a52a:	b6 87       	std	Z+14, r27	; 0x0e
   1a52c:	17 86       	std	Z+15, r1	; 0x0f
   1a52e:	10 8a       	std	Z+16, r1	; 0x10
   1a530:	11 8a       	std	Z+17, r1	; 0x11
   1a532:	12 8a       	std	Z+18, r1	; 0x12
   1a534:	13 8a       	std	Z+19, r1	; 0x13
   1a536:	14 8a       	std	Z+20, r1	; 0x14
   1a538:	15 8a       	std	Z+21, r1	; 0x15
   1a53a:	16 8a       	std	Z+22, r1	; 0x16
   1a53c:	71 83       	std	Z+1, r23	; 0x01
   1a53e:	60 83       	st	Z, r22
   1a540:	08 95       	ret

0001a542 <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   1a542:	cf 93       	push	r28
   1a544:	df 93       	push	r29
   1a546:	ec 01       	movw	r28, r24
   1a548:	7e 83       	std	Y+6, r23	; 0x06
   1a54a:	6d 83       	std	Y+5, r22	; 0x05
   1a54c:	88 81       	ld	r24, Y
   1a54e:	99 81       	ldd	r25, Y+1	; 0x01
   1a550:	dc 01       	movw	r26, r24
   1a552:	ed 91       	ld	r30, X+
   1a554:	fc 91       	ld	r31, X
   1a556:	06 84       	ldd	r0, Z+14	; 0x0e
   1a558:	f7 85       	ldd	r31, Z+15	; 0x0f
   1a55a:	e0 2d       	mov	r30, r0
   1a55c:	19 95       	eicall
   1a55e:	81 e0       	ldi	r24, 0x01	; 1
   1a560:	8a 83       	std	Y+2, r24	; 0x02
   1a562:	df 91       	pop	r29
   1a564:	cf 91       	pop	r28
   1a566:	08 95       	ret

0001a568 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   1a568:	69 e3       	ldi	r22, 0x39	; 57
   1a56a:	75 e0       	ldi	r23, 0x05	; 5
   1a56c:	0c 94 a1 d2 	jmp	0x1a542	; 0x1a542 <NTPClient::begin(int)>

0001a570 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   1a570:	cf 92       	push	r12
   1a572:	df 92       	push	r13
   1a574:	ef 92       	push	r14
   1a576:	ff 92       	push	r15
   1a578:	0f 93       	push	r16
   1a57a:	1f 93       	push	r17
   1a57c:	cf 93       	push	r28
   1a57e:	df 93       	push	r29
   1a580:	ec 01       	movw	r28, r24
   1a582:	cf 80       	ldd	r12, Y+7	; 0x07
   1a584:	d8 84       	ldd	r13, Y+8	; 0x08
   1a586:	e9 84       	ldd	r14, Y+9	; 0x09
   1a588:	fa 84       	ldd	r15, Y+10	; 0x0a
   1a58a:	8f 85       	ldd	r24, Y+15	; 0x0f
   1a58c:	98 89       	ldd	r25, Y+16	; 0x10
   1a58e:	a9 89       	ldd	r26, Y+17	; 0x11
   1a590:	ba 89       	ldd	r27, Y+18	; 0x12
   1a592:	c8 0e       	add	r12, r24
   1a594:	d9 1e       	adc	r13, r25
   1a596:	ea 1e       	adc	r14, r26
   1a598:	fb 1e       	adc	r15, r27
   1a59a:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1a59e:	0b 89       	ldd	r16, Y+19	; 0x13
   1a5a0:	1c 89       	ldd	r17, Y+20	; 0x14
   1a5a2:	2d 89       	ldd	r18, Y+21	; 0x15
   1a5a4:	3e 89       	ldd	r19, Y+22	; 0x16
   1a5a6:	60 1b       	sub	r22, r16
   1a5a8:	71 0b       	sbc	r23, r17
   1a5aa:	82 0b       	sbc	r24, r18
   1a5ac:	93 0b       	sbc	r25, r19
   1a5ae:	28 ee       	ldi	r18, 0xE8	; 232
   1a5b0:	33 e0       	ldi	r19, 0x03	; 3
   1a5b2:	40 e0       	ldi	r20, 0x00	; 0
   1a5b4:	50 e0       	ldi	r21, 0x00	; 0
   1a5b6:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a5ba:	ca 01       	movw	r24, r20
   1a5bc:	b9 01       	movw	r22, r18
   1a5be:	6c 0d       	add	r22, r12
   1a5c0:	7d 1d       	adc	r23, r13
   1a5c2:	8e 1d       	adc	r24, r14
   1a5c4:	9f 1d       	adc	r25, r15
   1a5c6:	df 91       	pop	r29
   1a5c8:	cf 91       	pop	r28
   1a5ca:	1f 91       	pop	r17
   1a5cc:	0f 91       	pop	r16
   1a5ce:	ff 90       	pop	r15
   1a5d0:	ef 90       	pop	r14
   1a5d2:	df 90       	pop	r13
   1a5d4:	cf 90       	pop	r12
   1a5d6:	08 95       	ret

0001a5d8 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   1a5d8:	cf 93       	push	r28
   1a5da:	df 93       	push	r29
   1a5dc:	00 d0       	rcall	.+0      	; 0x1a5de <NTPClient::getYear() const+0x6>
   1a5de:	1f 92       	push	r1
   1a5e0:	cd b7       	in	r28, 0x3d	; 61
   1a5e2:	de b7       	in	r29, 0x3e	; 62
   1a5e4:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a5e8:	69 83       	std	Y+1, r22	; 0x01
   1a5ea:	7a 83       	std	Y+2, r23	; 0x02
   1a5ec:	8b 83       	std	Y+3, r24	; 0x03
   1a5ee:	9c 83       	std	Y+4, r25	; 0x04
   1a5f0:	ce 01       	movw	r24, r28
   1a5f2:	01 96       	adiw	r24, 0x01	; 1
   1a5f4:	0e 94 b8 32 	call	0x6570	; 0x6570 <localtime>
   1a5f8:	fc 01       	movw	r30, r24
   1a5fa:	86 81       	ldd	r24, Z+6	; 0x06
   1a5fc:	97 81       	ldd	r25, Z+7	; 0x07
   1a5fe:	84 59       	subi	r24, 0x94	; 148
   1a600:	98 4f       	sbci	r25, 0xF8	; 248
   1a602:	0f 90       	pop	r0
   1a604:	0f 90       	pop	r0
   1a606:	0f 90       	pop	r0
   1a608:	0f 90       	pop	r0
   1a60a:	df 91       	pop	r29
   1a60c:	cf 91       	pop	r28
   1a60e:	08 95       	ret

0001a610 <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   1a610:	cf 93       	push	r28
   1a612:	df 93       	push	r29
   1a614:	00 d0       	rcall	.+0      	; 0x1a616 <NTPClient::getMonth() const+0x6>
   1a616:	1f 92       	push	r1
   1a618:	cd b7       	in	r28, 0x3d	; 61
   1a61a:	de b7       	in	r29, 0x3e	; 62
   1a61c:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a620:	69 83       	std	Y+1, r22	; 0x01
   1a622:	7a 83       	std	Y+2, r23	; 0x02
   1a624:	8b 83       	std	Y+3, r24	; 0x03
   1a626:	9c 83       	std	Y+4, r25	; 0x04
   1a628:	ce 01       	movw	r24, r28
   1a62a:	01 96       	adiw	r24, 0x01	; 1
   1a62c:	0e 94 b8 32 	call	0x6570	; 0x6570 <localtime>
   1a630:	fc 01       	movw	r30, r24
   1a632:	85 81       	ldd	r24, Z+5	; 0x05
   1a634:	08 2e       	mov	r0, r24
   1a636:	00 0c       	add	r0, r0
   1a638:	99 0b       	sbc	r25, r25
   1a63a:	01 96       	adiw	r24, 0x01	; 1
   1a63c:	0f 90       	pop	r0
   1a63e:	0f 90       	pop	r0
   1a640:	0f 90       	pop	r0
   1a642:	0f 90       	pop	r0
   1a644:	df 91       	pop	r29
   1a646:	cf 91       	pop	r28
   1a648:	08 95       	ret

0001a64a <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   1a64a:	cf 93       	push	r28
   1a64c:	df 93       	push	r29
   1a64e:	00 d0       	rcall	.+0      	; 0x1a650 <NTPClient::getDate() const+0x6>
   1a650:	1f 92       	push	r1
   1a652:	cd b7       	in	r28, 0x3d	; 61
   1a654:	de b7       	in	r29, 0x3e	; 62
   1a656:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a65a:	69 83       	std	Y+1, r22	; 0x01
   1a65c:	7a 83       	std	Y+2, r23	; 0x02
   1a65e:	8b 83       	std	Y+3, r24	; 0x03
   1a660:	9c 83       	std	Y+4, r25	; 0x04
   1a662:	ce 01       	movw	r24, r28
   1a664:	01 96       	adiw	r24, 0x01	; 1
   1a666:	0e 94 b8 32 	call	0x6570	; 0x6570 <localtime>
   1a66a:	fc 01       	movw	r30, r24
   1a66c:	83 81       	ldd	r24, Z+3	; 0x03
   1a66e:	08 2e       	mov	r0, r24
   1a670:	00 0c       	add	r0, r0
   1a672:	99 0b       	sbc	r25, r25
   1a674:	0f 90       	pop	r0
   1a676:	0f 90       	pop	r0
   1a678:	0f 90       	pop	r0
   1a67a:	0f 90       	pop	r0
   1a67c:	df 91       	pop	r29
   1a67e:	cf 91       	pop	r28
   1a680:	08 95       	ret

0001a682 <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   1a682:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a686:	20 e8       	ldi	r18, 0x80	; 128
   1a688:	31 e5       	ldi	r19, 0x51	; 81
   1a68a:	41 e0       	ldi	r20, 0x01	; 1
   1a68c:	50 e0       	ldi	r21, 0x00	; 0
   1a68e:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a692:	20 e1       	ldi	r18, 0x10	; 16
   1a694:	3e e0       	ldi	r19, 0x0E	; 14
   1a696:	40 e0       	ldi	r20, 0x00	; 0
   1a698:	50 e0       	ldi	r21, 0x00	; 0
   1a69a:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a69e:	c9 01       	movw	r24, r18
   1a6a0:	08 95       	ret

0001a6a2 <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   1a6a2:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a6a6:	20 e1       	ldi	r18, 0x10	; 16
   1a6a8:	3e e0       	ldi	r19, 0x0E	; 14
   1a6aa:	40 e0       	ldi	r20, 0x00	; 0
   1a6ac:	50 e0       	ldi	r21, 0x00	; 0
   1a6ae:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a6b2:	2c e3       	ldi	r18, 0x3C	; 60
   1a6b4:	30 e0       	ldi	r19, 0x00	; 0
   1a6b6:	40 e0       	ldi	r20, 0x00	; 0
   1a6b8:	50 e0       	ldi	r21, 0x00	; 0
   1a6ba:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a6be:	c9 01       	movw	r24, r18
   1a6c0:	08 95       	ret

0001a6c2 <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   1a6c2:	0e 94 b8 d2 	call	0x1a570	; 0x1a570 <NTPClient::getEpochTime() const>
   1a6c6:	2c e3       	ldi	r18, 0x3C	; 60
   1a6c8:	30 e0       	ldi	r19, 0x00	; 0
   1a6ca:	40 e0       	ldi	r20, 0x00	; 0
   1a6cc:	50 e0       	ldi	r21, 0x00	; 0
   1a6ce:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1a6d2:	cb 01       	movw	r24, r22
   1a6d4:	08 95       	ret

0001a6d6 <NTPClient::end()>:
_ZN9NTPClient3endEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:165

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
   1a6d6:	cf 93       	push	r28
   1a6d8:	df 93       	push	r29
   1a6da:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166
  this->_udp->stop();
   1a6dc:	88 81       	ld	r24, Y
   1a6de:	99 81       	ldd	r25, Y+1	; 0x01
   1a6e0:	dc 01       	movw	r26, r24
   1a6e2:	ed 91       	ld	r30, X+
   1a6e4:	fc 91       	ld	r31, X
   1a6e6:	02 88       	ldd	r0, Z+18	; 0x12
   1a6e8:	f3 89       	ldd	r31, Z+19	; 0x13
   1a6ea:	e0 2d       	mov	r30, r0
   1a6ec:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   1a6ee:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:169
}
   1a6f0:	df 91       	pop	r29
   1a6f2:	cf 91       	pop	r28
   1a6f4:	08 95       	ret

0001a6f6 <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   1a6f6:	ab 01       	movw	r20, r22
   1a6f8:	77 0f       	add	r23, r23
   1a6fa:	66 0b       	sbc	r22, r22
   1a6fc:	77 0b       	sbc	r23, r23
   1a6fe:	fc 01       	movw	r30, r24
   1a700:	47 83       	std	Z+7, r20	; 0x07
   1a702:	50 87       	std	Z+8, r21	; 0x08
   1a704:	61 87       	std	Z+9, r22	; 0x09
   1a706:	72 87       	std	Z+10, r23	; 0x0a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:173
}
   1a708:	08 95       	ret

0001a70a <NTPClient::setUpdateInterval(unsigned long)>:
_ZN9NTPClient17setUpdateIntervalEm():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   1a70a:	fc 01       	movw	r30, r24
   1a70c:	43 87       	std	Z+11, r20	; 0x0b
   1a70e:	54 87       	std	Z+12, r21	; 0x0c
   1a710:	65 87       	std	Z+13, r22	; 0x0d
   1a712:	76 87       	std	Z+14, r23	; 0x0e
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
}
   1a714:	08 95       	ret

0001a716 <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   1a716:	fc 01       	movw	r30, r24
   1a718:	74 83       	std	Z+4, r23	; 0x04
   1a71a:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   1a71c:	08 95       	ret

0001a71e <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   1a71e:	cf 93       	push	r28
   1a720:	df 93       	push	r29
   1a722:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   1a724:	fc 01       	movw	r30, r24
   1a726:	7b 96       	adiw	r30, 0x1b	; 27
   1a728:	8c e2       	ldi	r24, 0x2C	; 44
   1a72a:	df 01       	movw	r26, r30
   1a72c:	1d 92       	st	X+, r1
   1a72e:	8a 95       	dec	r24
   1a730:	e9 f7       	brne	.-6      	; 0x1a72c <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   1a732:	83 ee       	ldi	r24, 0xE3	; 227
   1a734:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   1a736:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   1a738:	86 e0       	ldi	r24, 0x06	; 6
   1a73a:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   1a73c:	8c ee       	ldi	r24, 0xEC	; 236
   1a73e:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   1a740:	81 e3       	ldi	r24, 0x31	; 49
   1a742:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   1a744:	9e e4       	ldi	r25, 0x4E	; 78
   1a746:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   1a748:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   1a74a:	84 e3       	ldi	r24, 0x34	; 52
   1a74c:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   1a74e:	88 81       	ld	r24, Y
   1a750:	99 81       	ldd	r25, Y+1	; 0x01
   1a752:	6b 81       	ldd	r22, Y+3	; 0x03
   1a754:	7c 81       	ldd	r23, Y+4	; 0x04
   1a756:	dc 01       	movw	r26, r24
   1a758:	ed 91       	ld	r30, X+
   1a75a:	fc 91       	ld	r31, X
   1a75c:	06 88       	ldd	r0, Z+22	; 0x16
   1a75e:	f7 89       	ldd	r31, Z+23	; 0x17
   1a760:	e0 2d       	mov	r30, r0
   1a762:	4b e7       	ldi	r20, 0x7B	; 123
   1a764:	50 e0       	ldi	r21, 0x00	; 0
   1a766:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1a768:	88 81       	ld	r24, Y
   1a76a:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   1a76c:	be 01       	movw	r22, r28
   1a76e:	69 5e       	subi	r22, 0xE9	; 233
   1a770:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1a772:	dc 01       	movw	r26, r24
   1a774:	ed 91       	ld	r30, X+
   1a776:	fc 91       	ld	r31, X
   1a778:	02 80       	ldd	r0, Z+2	; 0x02
   1a77a:	f3 81       	ldd	r31, Z+3	; 0x03
   1a77c:	e0 2d       	mov	r30, r0
   1a77e:	40 e3       	ldi	r20, 0x30	; 48
   1a780:	50 e0       	ldi	r21, 0x00	; 0
   1a782:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   1a784:	88 81       	ld	r24, Y
   1a786:	99 81       	ldd	r25, Y+1	; 0x01
   1a788:	dc 01       	movw	r26, r24
   1a78a:	ed 91       	ld	r30, X+
   1a78c:	fc 91       	ld	r31, X
   1a78e:	00 8c       	ldd	r0, Z+24	; 0x18
   1a790:	f1 8d       	ldd	r31, Z+25	; 0x19
   1a792:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   1a794:	df 91       	pop	r29
   1a796:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   1a798:	19 94       	eijmp

0001a79a <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   1a79a:	0f 93       	push	r16
   1a79c:	1f 93       	push	r17
   1a79e:	cf 93       	push	r28
   1a7a0:	df 93       	push	r29
   1a7a2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   1a7a4:	0e 94 8f d3 	call	0x1a71e	; 0x1a71e <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   1a7a8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   1a7aa:	6a e0       	ldi	r22, 0x0A	; 10
   1a7ac:	70 e0       	ldi	r23, 0x00	; 0
   1a7ae:	80 e0       	ldi	r24, 0x00	; 0
   1a7b0:	90 e0       	ldi	r25, 0x00	; 0
   1a7b2:	0e 94 9b d5 	call	0x1ab36	; 0x1ab36 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   1a7b6:	88 81       	ld	r24, Y
   1a7b8:	99 81       	ldd	r25, Y+1	; 0x01
   1a7ba:	dc 01       	movw	r26, r24
   1a7bc:	ed 91       	ld	r30, X+
   1a7be:	fc 91       	ld	r31, X
   1a7c0:	02 8c       	ldd	r0, Z+26	; 0x1a
   1a7c2:	f3 8d       	ldd	r31, Z+27	; 0x1b
   1a7c4:	e0 2d       	mov	r30, r0
   1a7c6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   1a7c8:	15 36       	cpi	r17, 0x65	; 101
   1a7ca:	09 f4       	brne	.+2      	; 0x1a7ce <NTPClient::forceUpdate()+0x34>
   1a7cc:	59 c0       	rjmp	.+178    	; 0x1a880 <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   1a7ce:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   1a7d0:	89 2b       	or	r24, r25
   1a7d2:	59 f3       	breq	.-42     	; 0x1a7aa <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   1a7d4:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1a7d8:	21 2f       	mov	r18, r17
   1a7da:	30 e0       	ldi	r19, 0x00	; 0
   1a7dc:	a9 01       	movw	r20, r18
   1a7de:	4f 5f       	subi	r20, 0xFF	; 255
   1a7e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7e2:	ea e0       	ldi	r30, 0x0A	; 10
   1a7e4:	e4 9f       	mul	r30, r20
   1a7e6:	90 01       	movw	r18, r0
   1a7e8:	e5 9f       	mul	r30, r21
   1a7ea:	30 0d       	add	r19, r0
   1a7ec:	11 24       	eor	r1, r1
   1a7ee:	89 01       	movw	r16, r18
   1a7f0:	33 0f       	add	r19, r19
   1a7f2:	22 0b       	sbc	r18, r18
   1a7f4:	33 0b       	sbc	r19, r19
   1a7f6:	ab 01       	movw	r20, r22
   1a7f8:	bc 01       	movw	r22, r24
   1a7fa:	40 1b       	sub	r20, r16
   1a7fc:	51 0b       	sbc	r21, r17
   1a7fe:	62 0b       	sbc	r22, r18
   1a800:	73 0b       	sbc	r23, r19
   1a802:	4b 8b       	std	Y+19, r20	; 0x13
   1a804:	5c 8b       	std	Y+20, r21	; 0x14
   1a806:	6d 8b       	std	Y+21, r22	; 0x15
   1a808:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   1a80a:	88 81       	ld	r24, Y
   1a80c:	99 81       	ldd	r25, Y+1	; 0x01
   1a80e:	be 01       	movw	r22, r28
   1a810:	69 5e       	subi	r22, 0xE9	; 233
   1a812:	7f 4f       	sbci	r23, 0xFF	; 255
   1a814:	dc 01       	movw	r26, r24
   1a816:	ed 91       	ld	r30, X+
   1a818:	fc 91       	ld	r31, X
   1a81a:	04 8c       	ldd	r0, Z+28	; 0x1c
   1a81c:	f5 8d       	ldd	r31, Z+29	; 0x1d
   1a81e:	e0 2d       	mov	r30, r0
   1a820:	40 e3       	ldi	r20, 0x30	; 48
   1a822:	50 e0       	ldi	r21, 0x00	; 0
   1a824:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   1a826:	fe 01       	movw	r30, r28
   1a828:	e0 5c       	subi	r30, 0xC0	; 192
   1a82a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a82c:	60 81       	ld	r22, Z
   1a82e:	8f ad       	ldd	r24, Y+63	; 0x3f
   1a830:	0e 94 a6 d9 	call	0x1b34c	; 0x1b34c <makeWord(unsigned char, unsigned char)>
   1a834:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   1a836:	de 01       	movw	r26, r28
   1a838:	ae 5b       	subi	r26, 0xBE	; 190
   1a83a:	bf 4f       	sbci	r27, 0xFF	; 255
   1a83c:	fe 01       	movw	r30, r28
   1a83e:	ef 5b       	subi	r30, 0xBF	; 191
   1a840:	ff 4f       	sbci	r31, 0xFF	; 255
   1a842:	6c 91       	ld	r22, X
   1a844:	80 81       	ld	r24, Z
   1a846:	0e 94 a6 d9 	call	0x1b34c	; 0x1b34c <makeWord(unsigned char, unsigned char)>
   1a84a:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   1a84c:	c8 01       	movw	r24, r16
   1a84e:	b0 e0       	ldi	r27, 0x00	; 0
   1a850:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   1a852:	dc 01       	movw	r26, r24
   1a854:	99 27       	eor	r25, r25
   1a856:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   1a858:	70 e0       	ldi	r23, 0x00	; 0
   1a85a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   1a85c:	84 2b       	or	r24, r20
   1a85e:	95 2b       	or	r25, r21
   1a860:	a6 2b       	or	r26, r22
   1a862:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   1a864:	80 58       	subi	r24, 0x80	; 128
   1a866:	9e 47       	sbci	r25, 0x7E	; 126
   1a868:	aa 4a       	sbci	r26, 0xAA	; 170
   1a86a:	b3 48       	sbci	r27, 0x83	; 131
   1a86c:	8f 87       	std	Y+15, r24	; 0x0f
   1a86e:	98 8b       	std	Y+16, r25	; 0x10
   1a870:	a9 8b       	std	Y+17, r26	; 0x11
   1a872:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   1a874:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   1a876:	df 91       	pop	r29
   1a878:	cf 91       	pop	r28
   1a87a:	1f 91       	pop	r17
   1a87c:	0f 91       	pop	r16
   1a87e:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   1a880:	80 e0       	ldi	r24, 0x00	; 0
   1a882:	f9 cf       	rjmp	.-14     	; 0x1a876 <NTPClient::forceUpdate()+0xdc>

0001a884 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   1a884:	cf 92       	push	r12
   1a886:	df 92       	push	r13
   1a888:	ef 92       	push	r14
   1a88a:	ff 92       	push	r15
   1a88c:	0f 93       	push	r16
   1a88e:	1f 93       	push	r17
   1a890:	cf 93       	push	r28
   1a892:	df 93       	push	r29
   1a894:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   1a896:	0e 94 6a d5 	call	0x1aad4	; 0x1aad4 <millis>
   1a89a:	0b 89       	ldd	r16, Y+19	; 0x13
   1a89c:	1c 89       	ldd	r17, Y+20	; 0x14
   1a89e:	2d 89       	ldd	r18, Y+21	; 0x15
   1a8a0:	3e 89       	ldd	r19, Y+22	; 0x16
   1a8a2:	60 1b       	sub	r22, r16
   1a8a4:	71 0b       	sbc	r23, r17
   1a8a6:	82 0b       	sbc	r24, r18
   1a8a8:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   1a8aa:	cb 84       	ldd	r12, Y+11	; 0x0b
   1a8ac:	dc 84       	ldd	r13, Y+12	; 0x0c
   1a8ae:	ed 84       	ldd	r14, Y+13	; 0x0d
   1a8b0:	fe 84       	ldd	r15, Y+14	; 0x0e
   1a8b2:	6c 15       	cp	r22, r12
   1a8b4:	7d 05       	cpc	r23, r13
   1a8b6:	8e 05       	cpc	r24, r14
   1a8b8:	9f 05       	cpc	r25, r15
   1a8ba:	20 f4       	brcc	.+8      	; 0x1a8c4 <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   1a8bc:	01 2b       	or	r16, r17
   1a8be:	02 2b       	or	r16, r18
   1a8c0:	03 2b       	or	r16, r19
   1a8c2:	89 f4       	brne	.+34     	; 0x1a8e6 <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   1a8c4:	8a 81       	ldd	r24, Y+2	; 0x02
   1a8c6:	81 11       	cpse	r24, r1
   1a8c8:	03 c0       	rjmp	.+6      	; 0x1a8d0 <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   1a8ca:	ce 01       	movw	r24, r28
   1a8cc:	0e 94 b4 d2 	call	0x1a568	; 0x1a568 <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   1a8d0:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1a8d2:	df 91       	pop	r29
   1a8d4:	cf 91       	pop	r28
   1a8d6:	1f 91       	pop	r17
   1a8d8:	0f 91       	pop	r16
   1a8da:	ff 90       	pop	r15
   1a8dc:	ef 90       	pop	r14
   1a8de:	df 90       	pop	r13
   1a8e0:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   1a8e2:	0c 94 cd d3 	jmp	0x1a79a	; 0x1a79a <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1a8e6:	81 e0       	ldi	r24, 0x01	; 1
   1a8e8:	df 91       	pop	r29
   1a8ea:	cf 91       	pop	r28
   1a8ec:	1f 91       	pop	r17
   1a8ee:	0f 91       	pop	r16
   1a8f0:	ff 90       	pop	r15
   1a8f2:	ef 90       	pop	r14
   1a8f4:	df 90       	pop	r13
   1a8f6:	cf 90       	pop	r12
   1a8f8:	08 95       	ret

0001a8fa <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   1a8fa:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1a8fc:	00 e0       	ldi	r16, 0x00	; 0
   1a8fe:	20 e0       	ldi	r18, 0x00	; 0
   1a900:	40 e0       	ldi	r20, 0x00	; 0
   1a902:	60 e0       	ldi	r22, 0x00	; 0
   1a904:	80 e1       	ldi	r24, 0x10	; 16
   1a906:	94 e1       	ldi	r25, 0x14	; 20
   1a908:	0e 94 e2 d8 	call	0x1b1c4	; 0x1b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   1a90c:	0f 91       	pop	r16
   1a90e:	08 95       	ret

0001a910 <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   1a910:	90 93 17 14 	sts	0x1417, r25	; 0x801417 <a2d_interupt_func+0x1>
   1a914:	80 93 16 14 	sts	0x1416, r24	; 0x801416 <a2d_interupt_func>
   1a918:	08 95       	ret

0001a91a <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   1a91a:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <a2d_enable>
   1a91e:	40 93 19 14 	sts	0x1419, r20	; 0x801419 <a2d_reference>
   1a922:	60 93 18 14 	sts	0x1418, r22	; 0x801418 <a2d_delicka>
   1a926:	10 92 1b 14 	sts	0x141B, r1	; 0x80141b <a2d_index>
   1a92a:	10 92 1e 14 	sts	0x141E, r1	; 0x80141e <a2d_input>
   1a92e:	10 92 1d 14 	sts	0x141D, r1	; 0x80141d <a2d_data+0x1>
   1a932:	10 92 1c 14 	sts	0x141C, r1	; 0x80141c <a2d_data>
   1a936:	67 70       	andi	r22, 0x07	; 7
   1a938:	68 57       	subi	r22, 0x78	; 120
   1a93a:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1a93e:	ec e7       	ldi	r30, 0x7C	; 124
   1a940:	f0 e0       	ldi	r31, 0x00	; 0
   1a942:	10 82       	st	Z, r1
   1a944:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <a2d_reference>
   1a948:	20 e4       	ldi	r18, 0x40	; 64
   1a94a:	82 9f       	mul	r24, r18
   1a94c:	c0 01       	movw	r24, r0
   1a94e:	11 24       	eor	r1, r1
   1a950:	80 83       	st	Z, r24
   1a952:	08 95       	ret

0001a954 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   1a954:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <a2d_reference>
   1a958:	40 e4       	ldi	r20, 0x40	; 64
   1a95a:	94 9f       	mul	r25, r20
   1a95c:	90 01       	movw	r18, r0
   1a95e:	11 24       	eor	r1, r1
   1a960:	98 2f       	mov	r25, r24
   1a962:	97 70       	andi	r25, 0x07	; 7
   1a964:	92 0f       	add	r25, r18
   1a966:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   1a96a:	80 93 1e 14 	sts	0x141E, r24	; 0x80141e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1a96e:	ea e7       	ldi	r30, 0x7A	; 122
   1a970:	f0 e0       	ldi	r31, 0x00	; 0
   1a972:	80 81       	ld	r24, Z
   1a974:	80 64       	ori	r24, 0x40	; 64
   1a976:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   1a978:	08 95       	ret

0001a97a <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1a97a:	30 91 1a 14 	lds	r19, 0x141A	; 0x80141a <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a97e:	20 91 1b 14 	lds	r18, 0x141B	; 0x80141b <a2d_index>
   1a982:	90 e0       	ldi	r25, 0x00	; 0
   1a984:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1a986:	61 e0       	ldi	r22, 0x01	; 1
   1a988:	70 e0       	ldi	r23, 0x00	; 0
   1a98a:	ab 01       	movw	r20, r22
   1a98c:	08 2e       	mov	r0, r24
   1a98e:	01 c0       	rjmp	.+2      	; 0x1a992 <a2d_start_process()+0x18>
   1a990:	44 0f       	add	r20, r20
   1a992:	0a 94       	dec	r0
   1a994:	ea f7       	brpl	.-6      	; 0x1a990 <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1a996:	e3 2f       	mov	r30, r19
   1a998:	e4 23       	and	r30, r20
   1a99a:	41 f0       	breq	.+16     	; 0x1a9ac <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1a99c:	e2 2f       	mov	r30, r18
   1a99e:	e4 23       	and	r30, r20
   1a9a0:	29 f4       	brne	.+10     	; 0x1a9ac <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1a9a2:	24 2b       	or	r18, r20
   1a9a4:	20 93 1b 14 	sts	0x141B, r18	; 0x80141b <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1a9a8:	0c 94 aa d4 	jmp	0x1a954	; 0x1a954 <a2d_start_first(unsigned char)>
   1a9ac:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1a9ae:	88 30       	cpi	r24, 0x08	; 8
   1a9b0:	91 05       	cpc	r25, r1
   1a9b2:	59 f7       	brne	.-42     	; 0x1a98a <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1a9b4:	10 92 1b 14 	sts	0x141B, r1	; 0x80141b <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   1a9b8:	08 95       	ret

0001a9ba <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   1a9ba:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <a2d_index>
   1a9be:	08 95       	ret

0001a9c0 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   1a9c0:	1f 92       	push	r1
   1a9c2:	0f 92       	push	r0
   1a9c4:	0f b6       	in	r0, 0x3f	; 63
   1a9c6:	0f 92       	push	r0
   1a9c8:	11 24       	eor	r1, r1
   1a9ca:	0b b6       	in	r0, 0x3b	; 59
   1a9cc:	0f 92       	push	r0
   1a9ce:	2f 93       	push	r18
   1a9d0:	3f 93       	push	r19
   1a9d2:	4f 93       	push	r20
   1a9d4:	5f 93       	push	r21
   1a9d6:	6f 93       	push	r22
   1a9d8:	7f 93       	push	r23
   1a9da:	8f 93       	push	r24
   1a9dc:	9f 93       	push	r25
   1a9de:	af 93       	push	r26
   1a9e0:	bf 93       	push	r27
   1a9e2:	cf 93       	push	r28
   1a9e4:	ef 93       	push	r30
   1a9e6:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   1a9e8:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   1a9ea:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   1a9ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   1a9f2:	68 2f       	mov	r22, r24
   1a9f4:	70 e0       	ldi	r23, 0x00	; 0
   1a9f6:	76 2f       	mov	r23, r22
   1a9f8:	66 27       	eor	r22, r22
   1a9fa:	69 0f       	add	r22, r25
   1a9fc:	71 1d       	adc	r23, r1
   1a9fe:	70 93 1d 14 	sts	0x141D, r23	; 0x80141d <a2d_data+0x1>
   1aa02:	60 93 1c 14 	sts	0x141C, r22	; 0x80141c <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   1aa06:	e0 91 16 14 	lds	r30, 0x1416	; 0x801416 <a2d_interupt_func>
   1aa0a:	f0 91 17 14 	lds	r31, 0x1417	; 0x801417 <a2d_interupt_func+0x1>
   1aa0e:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <a2d_input>
   1aa12:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   1aa14:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   1aa16:	ff 91       	pop	r31
   1aa18:	ef 91       	pop	r30
   1aa1a:	cf 91       	pop	r28
   1aa1c:	bf 91       	pop	r27
   1aa1e:	af 91       	pop	r26
   1aa20:	9f 91       	pop	r25
   1aa22:	8f 91       	pop	r24
   1aa24:	7f 91       	pop	r23
   1aa26:	6f 91       	pop	r22
   1aa28:	5f 91       	pop	r21
   1aa2a:	4f 91       	pop	r20
   1aa2c:	3f 91       	pop	r19
   1aa2e:	2f 91       	pop	r18
   1aa30:	0f 90       	pop	r0
   1aa32:	0b be       	out	0x3b, r0	; 59
   1aa34:	0f 90       	pop	r0
   1aa36:	0f be       	out	0x3f, r0	; 63
   1aa38:	0f 90       	pop	r0
   1aa3a:	1f 90       	pop	r1
   1aa3c:	18 95       	reti

0001aa3e <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   1aa3e:	08 95       	ret

0001aa40 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   1aa40:	1f 92       	push	r1
   1aa42:	0f 92       	push	r0
   1aa44:	0f b6       	in	r0, 0x3f	; 63
   1aa46:	0f 92       	push	r0
   1aa48:	11 24       	eor	r1, r1
   1aa4a:	2f 93       	push	r18
   1aa4c:	3f 93       	push	r19
   1aa4e:	8f 93       	push	r24
   1aa50:	9f 93       	push	r25
   1aa52:	af 93       	push	r26
   1aa54:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   1aa56:	80 91 24 14 	lds	r24, 0x1424	; 0x801424 <timer0_millis>
   1aa5a:	90 91 25 14 	lds	r25, 0x1425	; 0x801425 <timer0_millis+0x1>
   1aa5e:	a0 91 26 14 	lds	r26, 0x1426	; 0x801426 <timer0_millis+0x2>
   1aa62:	b0 91 27 14 	lds	r27, 0x1427	; 0x801427 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   1aa66:	30 91 23 14 	lds	r19, 0x1423	; 0x801423 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   1aa6a:	23 e0       	ldi	r18, 0x03	; 3
   1aa6c:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   1aa6e:	2d 37       	cpi	r18, 0x7D	; 125
   1aa70:	68 f1       	brcs	.+90     	; 0x1aacc <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   1aa72:	26 e8       	ldi	r18, 0x86	; 134
   1aa74:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   1aa76:	02 96       	adiw	r24, 0x02	; 2
   1aa78:	a1 1d       	adc	r26, r1
   1aa7a:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   1aa7c:	20 93 23 14 	sts	0x1423, r18	; 0x801423 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   1aa80:	80 93 24 14 	sts	0x1424, r24	; 0x801424 <timer0_millis>
   1aa84:	90 93 25 14 	sts	0x1425, r25	; 0x801425 <timer0_millis+0x1>
   1aa88:	a0 93 26 14 	sts	0x1426, r26	; 0x801426 <timer0_millis+0x2>
   1aa8c:	b0 93 27 14 	sts	0x1427, r27	; 0x801427 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   1aa90:	80 91 1f 14 	lds	r24, 0x141F	; 0x80141f <timer0_overflow_count>
   1aa94:	90 91 20 14 	lds	r25, 0x1420	; 0x801420 <timer0_overflow_count+0x1>
   1aa98:	a0 91 21 14 	lds	r26, 0x1421	; 0x801421 <timer0_overflow_count+0x2>
   1aa9c:	b0 91 22 14 	lds	r27, 0x1422	; 0x801422 <timer0_overflow_count+0x3>
   1aaa0:	01 96       	adiw	r24, 0x01	; 1
   1aaa2:	a1 1d       	adc	r26, r1
   1aaa4:	b1 1d       	adc	r27, r1
   1aaa6:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <timer0_overflow_count>
   1aaaa:	90 93 20 14 	sts	0x1420, r25	; 0x801420 <timer0_overflow_count+0x1>
   1aaae:	a0 93 21 14 	sts	0x1421, r26	; 0x801421 <timer0_overflow_count+0x2>
   1aab2:	b0 93 22 14 	sts	0x1422, r27	; 0x801422 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   1aab6:	bf 91       	pop	r27
   1aab8:	af 91       	pop	r26
   1aaba:	9f 91       	pop	r25
   1aabc:	8f 91       	pop	r24
   1aabe:	3f 91       	pop	r19
   1aac0:	2f 91       	pop	r18
   1aac2:	0f 90       	pop	r0
   1aac4:	0f be       	out	0x3f, r0	; 63
   1aac6:	0f 90       	pop	r0
   1aac8:	1f 90       	pop	r1
   1aaca:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   1aacc:	01 96       	adiw	r24, 0x01	; 1
   1aace:	a1 1d       	adc	r26, r1
   1aad0:	b1 1d       	adc	r27, r1
   1aad2:	d4 cf       	rjmp	.-88     	; 0x1aa7c <__vector_23+0x3c>

0001aad4 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1aad4:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1aad6:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   1aad8:	60 91 24 14 	lds	r22, 0x1424	; 0x801424 <timer0_millis>
   1aadc:	70 91 25 14 	lds	r23, 0x1425	; 0x801425 <timer0_millis+0x1>
   1aae0:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <timer0_millis+0x2>
   1aae4:	90 91 27 14 	lds	r25, 0x1427	; 0x801427 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   1aae8:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   1aaea:	08 95       	ret

0001aaec <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   1aaec:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   1aaee:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   1aaf0:	80 91 1f 14 	lds	r24, 0x141F	; 0x80141f <timer0_overflow_count>
   1aaf4:	90 91 20 14 	lds	r25, 0x1420	; 0x801420 <timer0_overflow_count+0x1>
   1aaf8:	a0 91 21 14 	lds	r26, 0x1421	; 0x801421 <timer0_overflow_count+0x2>
   1aafc:	b0 91 22 14 	lds	r27, 0x1422	; 0x801422 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   1ab00:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   1ab02:	a8 9b       	sbis	0x15, 0	; 21
   1ab04:	05 c0       	rjmp	.+10     	; 0x1ab10 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
   1ab06:	2f 3f       	cpi	r18, 0xFF	; 255
   1ab08:	19 f0       	breq	.+6      	; 0x1ab10 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   1ab0a:	01 96       	adiw	r24, 0x01	; 1
   1ab0c:	a1 1d       	adc	r26, r1
   1ab0e:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   1ab10:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   1ab12:	ba 2f       	mov	r27, r26
   1ab14:	a9 2f       	mov	r26, r25
   1ab16:	98 2f       	mov	r25, r24
   1ab18:	88 27       	eor	r24, r24
   1ab1a:	bc 01       	movw	r22, r24
   1ab1c:	cd 01       	movw	r24, r26
   1ab1e:	62 0f       	add	r22, r18
   1ab20:	71 1d       	adc	r23, r1
   1ab22:	81 1d       	adc	r24, r1
   1ab24:	91 1d       	adc	r25, r1
   1ab26:	42 e0       	ldi	r20, 0x02	; 2
   1ab28:	66 0f       	add	r22, r22
   1ab2a:	77 1f       	adc	r23, r23
   1ab2c:	88 1f       	adc	r24, r24
   1ab2e:	99 1f       	adc	r25, r25
   1ab30:	4a 95       	dec	r20
   1ab32:	d1 f7       	brne	.-12     	; 0x1ab28 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   1ab34:	08 95       	ret

0001ab36 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   1ab36:	8f 92       	push	r8
   1ab38:	9f 92       	push	r9
   1ab3a:	af 92       	push	r10
   1ab3c:	bf 92       	push	r11
   1ab3e:	cf 92       	push	r12
   1ab40:	df 92       	push	r13
   1ab42:	ef 92       	push	r14
   1ab44:	ff 92       	push	r15
   1ab46:	6b 01       	movw	r12, r22
   1ab48:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   1ab4a:	0e 94 76 d5 	call	0x1aaec	; 0x1aaec <micros>
   1ab4e:	4b 01       	movw	r8, r22
   1ab50:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   1ab52:	c1 14       	cp	r12, r1
   1ab54:	d1 04       	cpc	r13, r1
   1ab56:	e1 04       	cpc	r14, r1
   1ab58:	f1 04       	cpc	r15, r1
   1ab5a:	e9 f0       	breq	.+58     	; 0x1ab96 <delay+0x60>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:400
    yield();
   1ab5c:	0e 94 1f d5 	call	0x1aa3e	; 0x1aa3e <yield>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1ab60:	0e 94 76 d5 	call	0x1aaec	; 0x1aaec <micros>
   1ab64:	68 19       	sub	r22, r8
   1ab66:	79 09       	sbc	r23, r9
   1ab68:	8a 09       	sbc	r24, r10
   1ab6a:	9b 09       	sbc	r25, r11
   1ab6c:	68 3e       	cpi	r22, 0xE8	; 232
   1ab6e:	73 40       	sbci	r23, 0x03	; 3
   1ab70:	81 05       	cpc	r24, r1
   1ab72:	91 05       	cpc	r25, r1
   1ab74:	70 f3       	brcs	.-36     	; 0x1ab52 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   1ab76:	21 e0       	ldi	r18, 0x01	; 1
   1ab78:	c2 1a       	sub	r12, r18
   1ab7a:	d1 08       	sbc	r13, r1
   1ab7c:	e1 08       	sbc	r14, r1
   1ab7e:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   1ab80:	88 ee       	ldi	r24, 0xE8	; 232
   1ab82:	88 0e       	add	r8, r24
   1ab84:	83 e0       	ldi	r24, 0x03	; 3
   1ab86:	98 1e       	adc	r9, r24
   1ab88:	a1 1c       	adc	r10, r1
   1ab8a:	b1 1c       	adc	r11, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   1ab8c:	c1 14       	cp	r12, r1
   1ab8e:	d1 04       	cpc	r13, r1
   1ab90:	e1 04       	cpc	r14, r1
   1ab92:	f1 04       	cpc	r15, r1
   1ab94:	29 f7       	brne	.-54     	; 0x1ab60 <delay+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   1ab96:	ff 90       	pop	r15
   1ab98:	ef 90       	pop	r14
   1ab9a:	df 90       	pop	r13
   1ab9c:	cf 90       	pop	r12
   1ab9e:	bf 90       	pop	r11
   1aba0:	af 90       	pop	r10
   1aba2:	9f 90       	pop	r9
   1aba4:	8f 90       	pop	r8
   1aba6:	08 95       	ret

0001aba8 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   1aba8:	82 30       	cpi	r24, 0x02	; 2
   1abaa:	91 05       	cpc	r25, r1
   1abac:	38 f0       	brcs	.+14     	; 0x1abbc <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   1abae:	88 0f       	add	r24, r24
   1abb0:	99 1f       	adc	r25, r25
   1abb2:	88 0f       	add	r24, r24
   1abb4:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   1abb6:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   1abb8:	01 97       	sbiw	r24, 0x01	; 1
   1abba:	f1 f7       	brne	.-4      	; 0x1abb8 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   1abbc:	08 95       	ret

0001abbe <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1abbe:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1abc0:	84 b5       	in	r24, 0x24	; 36
   1abc2:	83 60       	ori	r24, 0x03	; 3
   1abc4:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1abc6:	85 b5       	in	r24, 0x25	; 37
   1abc8:	83 60       	ori	r24, 0x03	; 3
   1abca:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1abcc:	ee e6       	ldi	r30, 0x6E	; 110
   1abce:	f0 e0       	ldi	r31, 0x00	; 0
   1abd0:	80 81       	ld	r24, Z
   1abd2:	81 60       	ori	r24, 0x01	; 1
   1abd4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1abd6:	e1 e8       	ldi	r30, 0x81	; 129
   1abd8:	f0 e0       	ldi	r31, 0x00	; 0
   1abda:	82 e0       	ldi	r24, 0x02	; 2
   1abdc:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1abde:	80 81       	ld	r24, Z
   1abe0:	81 60       	ori	r24, 0x01	; 1
   1abe2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1abe4:	e0 e8       	ldi	r30, 0x80	; 128
   1abe6:	f0 e0       	ldi	r31, 0x00	; 0
   1abe8:	80 81       	ld	r24, Z
   1abea:	81 60       	ori	r24, 0x01	; 1
   1abec:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1abee:	e1 eb       	ldi	r30, 0xB1	; 177
   1abf0:	f0 e0       	ldi	r31, 0x00	; 0
   1abf2:	80 81       	ld	r24, Z
   1abf4:	84 60       	ori	r24, 0x04	; 4
   1abf6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1abf8:	e0 eb       	ldi	r30, 0xB0	; 176
   1abfa:	f0 e0       	ldi	r31, 0x00	; 0
   1abfc:	80 81       	ld	r24, Z
   1abfe:	81 60       	ori	r24, 0x01	; 1
   1ac00:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1ac02:	e1 e9       	ldi	r30, 0x91	; 145
   1ac04:	f0 e0       	ldi	r31, 0x00	; 0
   1ac06:	80 81       	ld	r24, Z
   1ac08:	83 60       	ori	r24, 0x03	; 3
   1ac0a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1ac0c:	e0 e9       	ldi	r30, 0x90	; 144
   1ac0e:	f0 e0       	ldi	r31, 0x00	; 0
   1ac10:	80 81       	ld	r24, Z
   1ac12:	81 60       	ori	r24, 0x01	; 1
   1ac14:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1ac16:	e1 ea       	ldi	r30, 0xA1	; 161
   1ac18:	f0 e0       	ldi	r31, 0x00	; 0
   1ac1a:	80 81       	ld	r24, Z
   1ac1c:	83 60       	ori	r24, 0x03	; 3
   1ac1e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1ac20:	e0 ea       	ldi	r30, 0xA0	; 160
   1ac22:	f0 e0       	ldi	r31, 0x00	; 0
   1ac24:	80 81       	ld	r24, Z
   1ac26:	81 60       	ori	r24, 0x01	; 1
   1ac28:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1ac2a:	e1 e2       	ldi	r30, 0x21	; 33
   1ac2c:	f1 e0       	ldi	r31, 0x01	; 1
   1ac2e:	80 81       	ld	r24, Z
   1ac30:	83 60       	ori	r24, 0x03	; 3
   1ac32:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1ac34:	e0 e2       	ldi	r30, 0x20	; 32
   1ac36:	f1 e0       	ldi	r31, 0x01	; 1
   1ac38:	80 81       	ld	r24, Z
   1ac3a:	81 60       	ori	r24, 0x01	; 1
   1ac3c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1ac3e:	87 e8       	ldi	r24, 0x87	; 135
   1ac40:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1ac44:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   1ac48:	08 95       	ret

0001ac4a <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   1ac4a:	82 50       	subi	r24, 0x02	; 2
   1ac4c:	82 31       	cpi	r24, 0x12	; 18
   1ac4e:	08 f0       	brcs	.+2      	; 0x1ac52 <turnOffPWM+0x8>
   1ac50:	5f c0       	rjmp	.+190    	; 0x1ad10 <turnOffPWM+0xc6>
   1ac52:	e8 2f       	mov	r30, r24
   1ac54:	f0 e0       	ldi	r31, 0x00	; 0
   1ac56:	88 27       	eor	r24, r24
   1ac58:	ef 5c       	subi	r30, 0xCF	; 207
   1ac5a:	f9 42       	sbci	r31, 0x29	; 41
   1ac5c:	8f 4f       	sbci	r24, 0xFF	; 255
   1ac5e:	0c 94 06 dd 	jmp	0x1ba0c	; 0x1ba0c <__tablejump2__>
   1ac62:	85 d6       	rcall	.+3338   	; 0x1b96e <__divmodhi4+0xc>
   1ac64:	89 d6       	rcall	.+3346   	; 0x1b978 <__divmodhi4+0x16>
   1ac66:	43 d6       	rcall	.+3206   	; 0x1b8ee <__mulsf3_pse+0x9a>
   1ac68:	49 d6       	rcall	.+3218   	; 0x1b8fc <__mulsf3_pse+0xa8>
   1ac6a:	4d d6       	rcall	.+3226   	; 0x1b906 <__mulsi3+0x4>
   1ac6c:	88 d6       	rcall	.+3344   	; 0x1b97e <__divmodhi4_neg1+0x4>
   1ac6e:	51 d6       	rcall	.+3234   	; 0x1b912 <__mulsi3+0x10>
   1ac70:	57 d6       	rcall	.+3246   	; 0x1b920 <__mulsi3+0x1e>
   1ac72:	5b d6       	rcall	.+3254   	; 0x1b92a <__udivmodqi4_loop+0x2>
   1ac74:	61 d6       	rcall	.+3266   	; 0x1b938 <__udivmodqi4_ep+0x8>
   1ac76:	65 d6       	rcall	.+3274   	; 0x1b942 <__udivmodhi4_loop>
   1ac78:	69 d6       	rcall	.+3282   	; 0x1b94c <__udivmodhi4_loop+0xa>
   1ac7a:	6f d6       	rcall	.+3294   	; 0x1b95a <__udivmodhi4_ep+0xa>
   1ac7c:	73 d6       	rcall	.+3302   	; 0x1b964 <__divmodhi4+0x2>
   1ac7e:	88 d6       	rcall	.+3344   	; 0x1b990 <__udivmodsi4+0x6>
   1ac80:	77 d6       	rcall	.+3310   	; 0x1b970 <__divmodhi4+0xe>
   1ac82:	7d d6       	rcall	.+3322   	; 0x1b97e <__divmodhi4_neg1+0x4>
   1ac84:	81 d6       	rcall	.+3330   	; 0x1b988 <__divmodhi4_exit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   1ac86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1ac8a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1ac8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   1ac90:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1ac92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1ac96:	8f 7d       	andi	r24, 0xDF	; 223
   1ac98:	f9 cf       	rjmp	.-14     	; 0x1ac8c <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1ac9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1ac9e:	87 7f       	andi	r24, 0xF7	; 247
   1aca0:	f5 cf       	rjmp	.-22     	; 0x1ac8c <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   1aca2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1aca6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1aca8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   1acac:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1acae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1acb2:	8f 7d       	andi	r24, 0xDF	; 223
   1acb4:	f9 cf       	rjmp	.-14     	; 0x1aca8 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   1acb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1acba:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1acbc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   1acc0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   1acc2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1acc6:	8f 7d       	andi	r24, 0xDF	; 223
   1acc8:	f9 cf       	rjmp	.-14     	; 0x1acbc <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1acca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1acce:	87 7f       	andi	r24, 0xF7	; 247
   1acd0:	f5 cf       	rjmp	.-22     	; 0x1acbc <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   1acd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1acd6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1acd8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   1acdc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   1acde:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1ace2:	8f 7d       	andi	r24, 0xDF	; 223
   1ace4:	f9 cf       	rjmp	.-14     	; 0x1acd8 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1ace6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1acea:	87 7f       	andi	r24, 0xF7	; 247
   1acec:	f5 cf       	rjmp	.-22     	; 0x1acd8 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   1acee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1acf2:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1acf4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   1acf8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1acfa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1acfe:	8f 7d       	andi	r24, 0xDF	; 223
   1ad00:	f9 cf       	rjmp	.-14     	; 0x1acf4 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   1ad02:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1ad06:	87 7f       	andi	r24, 0xF7	; 247
   1ad08:	f5 cf       	rjmp	.-22     	; 0x1acf4 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1ad0a:	84 b5       	in	r24, 0x24	; 36
   1ad0c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1ad0e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   1ad10:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1ad12:	84 b5       	in	r24, 0x24	; 36
   1ad14:	8f 7d       	andi	r24, 0xDF	; 223
   1ad16:	fb cf       	rjmp	.-10     	; 0x1ad0e <turnOffPWM+0xc4>

0001ad18 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   1ad18:	cf 93       	push	r28
   1ad1a:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   1ad1c:	90 e0       	ldi	r25, 0x00	; 0
   1ad1e:	fc 01       	movw	r30, r24
   1ad20:	e2 5b       	subi	r30, 0xB2	; 178
   1ad22:	fb 49       	sbci	r31, 0x9B	; 155
   1ad24:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   1ad26:	8c 57       	subi	r24, 0x7C	; 124
   1ad28:	9b 49       	sbci	r25, 0x9B	; 155
   1ad2a:	fc 01       	movw	r30, r24
   1ad2c:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   1ad2e:	88 23       	and	r24, r24
   1ad30:	c9 f0       	breq	.+50     	; 0x1ad64 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1ad32:	90 e0       	ldi	r25, 0x00	; 0
   1ad34:	88 0f       	add	r24, r24
   1ad36:	99 1f       	adc	r25, r25
   1ad38:	fc 01       	movw	r30, r24
   1ad3a:	e6 52       	subi	r30, 0x26	; 38
   1ad3c:	fb 49       	sbci	r31, 0x9B	; 155
   1ad3e:	a5 91       	lpm	r26, Z+
   1ad40:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1ad42:	fc 01       	movw	r30, r24
   1ad44:	e6 53       	subi	r30, 0x36	; 54
   1ad46:	fb 49       	sbci	r31, 0x9B	; 155
   1ad48:	c5 91       	lpm	r28, Z+
   1ad4a:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   1ad4c:	61 11       	cpse	r22, r1
   1ad4e:	0d c0       	rjmp	.+26     	; 0x1ad6a <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1ad50:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1ad52:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1ad54:	8c 91       	ld	r24, X
   1ad56:	20 95       	com	r18
   1ad58:	82 23       	and	r24, r18
   1ad5a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   1ad5c:	88 81       	ld	r24, Y
   1ad5e:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1ad60:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1ad62:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1ad64:	df 91       	pop	r29
   1ad66:	cf 91       	pop	r28
   1ad68:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   1ad6a:	62 30       	cpi	r22, 0x02	; 2
   1ad6c:	51 f4       	brne	.+20     	; 0x1ad82 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   1ad6e:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1ad70:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1ad72:	3c 91       	ld	r19, X
   1ad74:	82 2f       	mov	r24, r18
   1ad76:	80 95       	com	r24
   1ad78:	83 23       	and	r24, r19
   1ad7a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   1ad7c:	e8 81       	ld	r30, Y
   1ad7e:	2e 2b       	or	r18, r30
   1ad80:	ef cf       	rjmp	.-34     	; 0x1ad60 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1ad82:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1ad84:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   1ad86:	ec 91       	ld	r30, X
   1ad88:	2e 2b       	or	r18, r30
   1ad8a:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   1ad8c:	8f bf       	out	0x3f, r24	; 63
   1ad8e:	ea cf       	rjmp	.-44     	; 0x1ad64 <pinMode+0x4c>

0001ad90 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1ad90:	1f 93       	push	r17
   1ad92:	cf 93       	push	r28
   1ad94:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   1ad96:	28 2f       	mov	r18, r24
   1ad98:	30 e0       	ldi	r19, 0x00	; 0
   1ad9a:	f9 01       	movw	r30, r18
   1ad9c:	e8 5e       	subi	r30, 0xE8	; 232
   1ad9e:	fb 49       	sbci	r31, 0x9B	; 155
   1ada0:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1ada2:	f9 01       	movw	r30, r18
   1ada4:	e2 5b       	subi	r30, 0xB2	; 178
   1ada6:	fb 49       	sbci	r31, 0x9B	; 155
   1ada8:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   1adaa:	f9 01       	movw	r30, r18
   1adac:	ec 57       	subi	r30, 0x7C	; 124
   1adae:	fb 49       	sbci	r31, 0x9B	; 155
   1adb0:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   1adb2:	cc 23       	and	r28, r28
   1adb4:	a9 f0       	breq	.+42     	; 0x1ade0 <digitalWrite+0x50>
   1adb6:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1adb8:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   1adba:	0e 94 25 d6 	call	0x1ac4a	; 0x1ac4a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   1adbe:	ec 2f       	mov	r30, r28
   1adc0:	f0 e0       	ldi	r31, 0x00	; 0
   1adc2:	ee 0f       	add	r30, r30
   1adc4:	ff 1f       	adc	r31, r31
   1adc6:	e6 53       	subi	r30, 0x36	; 54
   1adc8:	fb 49       	sbci	r31, 0x9B	; 155
   1adca:	a5 91       	lpm	r26, Z+
   1adcc:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   1adce:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   1add0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   1add2:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1add4:	11 11       	cpse	r17, r1
   1add6:	08 c0       	rjmp	.+16     	; 0x1ade8 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   1add8:	d0 95       	com	r29
   1adda:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   1addc:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   1adde:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   1ade0:	df 91       	pop	r29
   1ade2:	cf 91       	pop	r28
   1ade4:	1f 91       	pop	r17
   1ade6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   1ade8:	de 2b       	or	r29, r30
   1adea:	f8 cf       	rjmp	.-16     	; 0x1addc <digitalWrite+0x4c>

0001adec <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   1adec:	cf 93       	push	r28
   1adee:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   1adf0:	28 2f       	mov	r18, r24
   1adf2:	30 e0       	ldi	r19, 0x00	; 0
   1adf4:	f9 01       	movw	r30, r18
   1adf6:	e8 5e       	subi	r30, 0xE8	; 232
   1adf8:	fb 49       	sbci	r31, 0x9B	; 155
   1adfa:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   1adfc:	f9 01       	movw	r30, r18
   1adfe:	e2 5b       	subi	r30, 0xB2	; 178
   1ae00:	fb 49       	sbci	r31, 0x9B	; 155
   1ae02:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   1ae04:	f9 01       	movw	r30, r18
   1ae06:	ec 57       	subi	r30, 0x7C	; 124
   1ae08:	fb 49       	sbci	r31, 0x9B	; 155
   1ae0a:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   1ae0c:	cc 23       	and	r28, r28
   1ae0e:	a1 f0       	breq	.+40     	; 0x1ae38 <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1ae10:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   1ae12:	0e 94 25 d6 	call	0x1ac4a	; 0x1ac4a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   1ae16:	ec 2f       	mov	r30, r28
   1ae18:	f0 e0       	ldi	r31, 0x00	; 0
   1ae1a:	ee 0f       	add	r30, r30
   1ae1c:	ff 1f       	adc	r31, r31
   1ae1e:	e6 54       	subi	r30, 0x46	; 70
   1ae20:	fb 49       	sbci	r31, 0x9B	; 155
   1ae22:	a5 91       	lpm	r26, Z+
   1ae24:	b4 91       	lpm	r27, Z
   1ae26:	ec 91       	ld	r30, X
   1ae28:	ed 23       	and	r30, r29
   1ae2a:	81 e0       	ldi	r24, 0x01	; 1
   1ae2c:	90 e0       	ldi	r25, 0x00	; 0
   1ae2e:	09 f4       	brne	.+2      	; 0x1ae32 <digitalRead+0x46>
   1ae30:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   1ae32:	df 91       	pop	r29
   1ae34:	cf 91       	pop	r28
   1ae36:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   1ae38:	80 e0       	ldi	r24, 0x00	; 0
   1ae3a:	90 e0       	ldi	r25, 0x00	; 0
   1ae3c:	fa cf       	rjmp	.-12     	; 0x1ae32 <digitalRead+0x46>

0001ae3e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   1ae3e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   1ae40:	91 8d       	ldd	r25, Z+25	; 0x19
   1ae42:	22 8d       	ldd	r18, Z+26	; 0x1a
   1ae44:	89 2f       	mov	r24, r25
   1ae46:	90 e0       	ldi	r25, 0x00	; 0
   1ae48:	80 5c       	subi	r24, 0xC0	; 192
   1ae4a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae4c:	82 1b       	sub	r24, r18
   1ae4e:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   1ae50:	8f 73       	andi	r24, 0x3F	; 63
   1ae52:	99 27       	eor	r25, r25
   1ae54:	08 95       	ret

0001ae56 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   1ae56:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   1ae58:	91 8d       	ldd	r25, Z+25	; 0x19
   1ae5a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ae5c:	98 17       	cp	r25, r24
   1ae5e:	31 f0       	breq	.+12     	; 0x1ae6c <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   1ae60:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ae62:	e8 0f       	add	r30, r24
   1ae64:	f1 1d       	adc	r31, r1
   1ae66:	85 8d       	ldd	r24, Z+29	; 0x1d
   1ae68:	90 e0       	ldi	r25, 0x00	; 0
   1ae6a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1ae6c:	8f ef       	ldi	r24, 0xFF	; 255
   1ae6e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   1ae70:	08 95       	ret

0001ae72 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   1ae72:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   1ae74:	91 8d       	ldd	r25, Z+25	; 0x19
   1ae76:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ae78:	98 17       	cp	r25, r24
   1ae7a:	61 f0       	breq	.+24     	; 0x1ae94 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   1ae7c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ae7e:	ae 0f       	add	r26, r30
   1ae80:	bf 2f       	mov	r27, r31
   1ae82:	b1 1d       	adc	r27, r1
   1ae84:	5d 96       	adiw	r26, 0x1d	; 29
   1ae86:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   1ae88:	92 8d       	ldd	r25, Z+26	; 0x1a
   1ae8a:	9f 5f       	subi	r25, 0xFF	; 255
   1ae8c:	9f 73       	andi	r25, 0x3F	; 63
   1ae8e:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   1ae90:	90 e0       	ldi	r25, 0x00	; 0
   1ae92:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1ae94:	8f ef       	ldi	r24, 0xFF	; 255
   1ae96:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   1ae98:	08 95       	ret

0001ae9a <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1ae9a:	fc 01       	movw	r30, r24
   1ae9c:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   1ae9e:	44 8d       	ldd	r20, Z+28	; 0x1c
   1aea0:	25 2f       	mov	r18, r21
   1aea2:	30 e0       	ldi	r19, 0x00	; 0
   1aea4:	84 2f       	mov	r24, r20
   1aea6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   1aea8:	82 1b       	sub	r24, r18
   1aeaa:	93 0b       	sbc	r25, r19
   1aeac:	54 17       	cp	r21, r20
   1aeae:	10 f0       	brcs	.+4      	; 0x1aeb4 <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   1aeb0:	cf 96       	adiw	r24, 0x3f	; 63
   1aeb2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   1aeb4:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   1aeb6:	08 95       	ret

0001aeb8 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   1aeb8:	8f e5       	ldi	r24, 0x5F	; 95
   1aeba:	98 ed       	ldi	r25, 0xD8	; 216
   1aebc:	89 2b       	or	r24, r25
   1aebe:	49 f0       	breq	.+18     	; 0x1aed2 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   1aec0:	80 e0       	ldi	r24, 0x00	; 0
   1aec2:	90 e0       	ldi	r25, 0x00	; 0
   1aec4:	89 2b       	or	r24, r25
   1aec6:	29 f0       	breq	.+10     	; 0x1aed2 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   1aec8:	0e 94 5f d8 	call	0x1b0be	; 0x1b0be <Serial0_available()>
   1aecc:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   1aece:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   1aed2:	80 e0       	ldi	r24, 0x00	; 0
   1aed4:	90 e0       	ldi	r25, 0x00	; 0
   1aed6:	89 2b       	or	r24, r25
   1aed8:	49 f0       	breq	.+18     	; 0x1aeec <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   1aeda:	80 e0       	ldi	r24, 0x00	; 0
   1aedc:	90 e0       	ldi	r25, 0x00	; 0
   1aede:	89 2b       	or	r24, r25
   1aee0:	29 f0       	breq	.+10     	; 0x1aeec <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   1aee2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   1aee6:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   1aee8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   1aeec:	08 95       	ret

0001aeee <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1aeee:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1aef0:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1aef2:	a8 0f       	add	r26, r24
   1aef4:	b9 2f       	mov	r27, r25
   1aef6:	b1 1d       	adc	r27, r1
   1aef8:	a3 5a       	subi	r26, 0xA3	; 163
   1aefa:	bf 4f       	sbci	r27, 0xFF	; 255
   1aefc:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1aefe:	84 8d       	ldd	r24, Z+28	; 0x1c
   1af00:	90 e0       	ldi	r25, 0x00	; 0
   1af02:	01 96       	adiw	r24, 0x01	; 1
   1af04:	8f 73       	andi	r24, 0x3F	; 63
   1af06:	99 27       	eor	r25, r25
   1af08:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1af0a:	a6 89       	ldd	r26, Z+22	; 0x16
   1af0c:	b7 89       	ldd	r27, Z+23	; 0x17
   1af0e:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1af10:	a0 89       	ldd	r26, Z+16	; 0x10
   1af12:	b1 89       	ldd	r27, Z+17	; 0x11
   1af14:	8c 91       	ld	r24, X
   1af16:	80 64       	ori	r24, 0x40	; 64
   1af18:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1af1a:	93 8d       	ldd	r25, Z+27	; 0x1b
   1af1c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1af1e:	98 13       	cpse	r25, r24
   1af20:	06 c0       	rjmp	.+12     	; 0x1af2e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1af22:	02 88       	ldd	r0, Z+18	; 0x12
   1af24:	f3 89       	ldd	r31, Z+19	; 0x13
   1af26:	e0 2d       	mov	r30, r0
   1af28:	80 81       	ld	r24, Z
   1af2a:	8f 7d       	andi	r24, 0xDF	; 223
   1af2c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1af2e:	08 95       	ret

0001af30 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1af30:	cf 93       	push	r28
   1af32:	df 93       	push	r29
   1af34:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1af36:	88 8d       	ldd	r24, Y+24	; 0x18
   1af38:	88 23       	and	r24, r24
   1af3a:	b9 f0       	breq	.+46     	; 0x1af6a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1af3c:	aa 89       	ldd	r26, Y+18	; 0x12
   1af3e:	bb 89       	ldd	r27, Y+19	; 0x13
   1af40:	e8 89       	ldd	r30, Y+16	; 0x10
   1af42:	f9 89       	ldd	r31, Y+17	; 0x11
   1af44:	8c 91       	ld	r24, X
   1af46:	85 fd       	sbrc	r24, 5
   1af48:	03 c0       	rjmp	.+6      	; 0x1af50 <HardwareSerial::flush()+0x20>
   1af4a:	80 81       	ld	r24, Z
   1af4c:	86 fd       	sbrc	r24, 6
   1af4e:	0d c0       	rjmp	.+26     	; 0x1af6a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1af50:	0f b6       	in	r0, 0x3f	; 63
   1af52:	07 fc       	sbrc	r0, 7
   1af54:	f7 cf       	rjmp	.-18     	; 0x1af44 <HardwareSerial::flush()+0x14>
   1af56:	8c 91       	ld	r24, X
   1af58:	85 ff       	sbrs	r24, 5
   1af5a:	f2 cf       	rjmp	.-28     	; 0x1af40 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1af5c:	80 81       	ld	r24, Z
   1af5e:	85 ff       	sbrs	r24, 5
   1af60:	ed cf       	rjmp	.-38     	; 0x1af3c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1af62:	ce 01       	movw	r24, r28
   1af64:	0e 94 77 d7 	call	0x1aeee	; 0x1aeee <HardwareSerial::_tx_udr_empty_irq()>
   1af68:	e9 cf       	rjmp	.-46     	; 0x1af3c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1af6a:	df 91       	pop	r29
   1af6c:	cf 91       	pop	r28
   1af6e:	08 95       	ret

0001af70 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   1af70:	ef 92       	push	r14
   1af72:	ff 92       	push	r15
   1af74:	0f 93       	push	r16
   1af76:	1f 93       	push	r17
   1af78:	cf 93       	push	r28
   1af7a:	df 93       	push	r29
   1af7c:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1af7e:	81 e0       	ldi	r24, 0x01	; 1
   1af80:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1af82:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1af84:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1af86:	98 13       	cpse	r25, r24
   1af88:	16 c0       	rjmp	.+44     	; 0x1afb6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   1af8a:	e8 89       	ldd	r30, Y+16	; 0x10
   1af8c:	f9 89       	ldd	r31, Y+17	; 0x11
   1af8e:	80 81       	ld	r24, Z
   1af90:	85 ff       	sbrs	r24, 5
   1af92:	11 c0       	rjmp	.+34     	; 0x1afb6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1af94:	ee 89       	ldd	r30, Y+22	; 0x16
   1af96:	ff 89       	ldd	r31, Y+23	; 0x17
   1af98:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1af9a:	e8 89       	ldd	r30, Y+16	; 0x10
   1af9c:	f9 89       	ldd	r31, Y+17	; 0x11
   1af9e:	80 81       	ld	r24, Z
   1afa0:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1afa2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1afa4:	81 e0       	ldi	r24, 0x01	; 1
   1afa6:	90 e0       	ldi	r25, 0x00	; 0
   1afa8:	df 91       	pop	r29
   1afaa:	cf 91       	pop	r28
   1afac:	1f 91       	pop	r17
   1afae:	0f 91       	pop	r16
   1afb0:	ff 90       	pop	r15
   1afb2:	ef 90       	pop	r14
   1afb4:	08 95       	ret
   1afb6:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1afb8:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1afba:	10 e0       	ldi	r17, 0x00	; 0
   1afbc:	0f 5f       	subi	r16, 0xFF	; 255
   1afbe:	1f 4f       	sbci	r17, 0xFF	; 255
   1afc0:	0f 73       	andi	r16, 0x3F	; 63
   1afc2:	11 27       	eor	r17, r17
   1afc4:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1afc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1afc8:	8e 11       	cpse	r24, r14
   1afca:	0c c0       	rjmp	.+24     	; 0x1afe4 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1afcc:	0f b6       	in	r0, 0x3f	; 63
   1afce:	07 fc       	sbrc	r0, 7
   1afd0:	fa cf       	rjmp	.-12     	; 0x1afc6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1afd2:	e8 89       	ldd	r30, Y+16	; 0x10
   1afd4:	f9 89       	ldd	r31, Y+17	; 0x11
   1afd6:	80 81       	ld	r24, Z
   1afd8:	85 ff       	sbrs	r24, 5
   1afda:	f5 cf       	rjmp	.-22     	; 0x1afc6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1afdc:	ce 01       	movw	r24, r28
   1afde:	0e 94 77 d7 	call	0x1aeee	; 0x1aeee <HardwareSerial::_tx_udr_empty_irq()>
   1afe2:	f1 cf       	rjmp	.-30     	; 0x1afc6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1afe4:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1afe6:	ec 0f       	add	r30, r28
   1afe8:	fd 2f       	mov	r31, r29
   1afea:	f1 1d       	adc	r31, r1
   1afec:	e3 5a       	subi	r30, 0xA3	; 163
   1afee:	ff 4f       	sbci	r31, 0xFF	; 255
   1aff0:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1aff2:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1aff4:	ea 89       	ldd	r30, Y+18	; 0x12
   1aff6:	fb 89       	ldd	r31, Y+19	; 0x13
   1aff8:	80 81       	ld	r24, Z
   1affa:	80 62       	ori	r24, 0x20	; 32
   1affc:	d2 cf       	rjmp	.-92     	; 0x1afa2 <HardwareSerial::write(unsigned char)+0x32>

0001affe <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   1affe:	1f 92       	push	r1
   1b000:	0f 92       	push	r0
   1b002:	0f b6       	in	r0, 0x3f	; 63
   1b004:	0f 92       	push	r0
   1b006:	11 24       	eor	r1, r1
   1b008:	0b b6       	in	r0, 0x3b	; 59
   1b00a:	0f 92       	push	r0
   1b00c:	2f 93       	push	r18
   1b00e:	8f 93       	push	r24
   1b010:	9f 93       	push	r25
   1b012:	ef 93       	push	r30
   1b014:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1b016:	e0 91 38 14 	lds	r30, 0x1438	; 0x801438 <Serial+0x10>
   1b01a:	f0 91 39 14 	lds	r31, 0x1439	; 0x801439 <Serial+0x11>
   1b01e:	80 81       	ld	r24, Z
   1b020:	e0 91 3e 14 	lds	r30, 0x143E	; 0x80143e <Serial+0x16>
   1b024:	f0 91 3f 14 	lds	r31, 0x143F	; 0x80143f <Serial+0x17>
   1b028:	82 fd       	sbrc	r24, 2
   1b02a:	1d c0       	rjmp	.+58     	; 0x1b066 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   1b02c:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   1b02e:	80 91 41 14 	lds	r24, 0x1441	; 0x801441 <Serial+0x19>
   1b032:	8f 5f       	subi	r24, 0xFF	; 255
   1b034:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1b036:	20 91 42 14 	lds	r18, 0x1442	; 0x801442 <Serial+0x1a>
   1b03a:	82 17       	cp	r24, r18
   1b03c:	41 f0       	breq	.+16     	; 0x1b04e <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   1b03e:	e0 91 41 14 	lds	r30, 0x1441	; 0x801441 <Serial+0x19>
   1b042:	f0 e0       	ldi	r31, 0x00	; 0
   1b044:	e8 5d       	subi	r30, 0xD8	; 216
   1b046:	fb 4e       	sbci	r31, 0xEB	; 235
   1b048:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1b04a:	80 93 41 14 	sts	0x1441, r24	; 0x801441 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   1b04e:	ff 91       	pop	r31
   1b050:	ef 91       	pop	r30
   1b052:	9f 91       	pop	r25
   1b054:	8f 91       	pop	r24
   1b056:	2f 91       	pop	r18
   1b058:	0f 90       	pop	r0
   1b05a:	0b be       	out	0x3b, r0	; 59
   1b05c:	0f 90       	pop	r0
   1b05e:	0f be       	out	0x3f, r0	; 63
   1b060:	0f 90       	pop	r0
   1b062:	1f 90       	pop	r1
   1b064:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1b066:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   1b068:	f2 cf       	rjmp	.-28     	; 0x1b04e <__vector_25+0x50>

0001b06a <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   1b06a:	1f 92       	push	r1
   1b06c:	0f 92       	push	r0
   1b06e:	0f b6       	in	r0, 0x3f	; 63
   1b070:	0f 92       	push	r0
   1b072:	11 24       	eor	r1, r1
   1b074:	0b b6       	in	r0, 0x3b	; 59
   1b076:	0f 92       	push	r0
   1b078:	2f 93       	push	r18
   1b07a:	3f 93       	push	r19
   1b07c:	4f 93       	push	r20
   1b07e:	5f 93       	push	r21
   1b080:	6f 93       	push	r22
   1b082:	7f 93       	push	r23
   1b084:	8f 93       	push	r24
   1b086:	9f 93       	push	r25
   1b088:	af 93       	push	r26
   1b08a:	bf 93       	push	r27
   1b08c:	ef 93       	push	r30
   1b08e:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   1b090:	88 e2       	ldi	r24, 0x28	; 40
   1b092:	94 e1       	ldi	r25, 0x14	; 20
   1b094:	0e 94 77 d7 	call	0x1aeee	; 0x1aeee <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   1b098:	ff 91       	pop	r31
   1b09a:	ef 91       	pop	r30
   1b09c:	bf 91       	pop	r27
   1b09e:	af 91       	pop	r26
   1b0a0:	9f 91       	pop	r25
   1b0a2:	8f 91       	pop	r24
   1b0a4:	7f 91       	pop	r23
   1b0a6:	6f 91       	pop	r22
   1b0a8:	5f 91       	pop	r21
   1b0aa:	4f 91       	pop	r20
   1b0ac:	3f 91       	pop	r19
   1b0ae:	2f 91       	pop	r18
   1b0b0:	0f 90       	pop	r0
   1b0b2:	0b be       	out	0x3b, r0	; 59
   1b0b4:	0f 90       	pop	r0
   1b0b6:	0f be       	out	0x3f, r0	; 63
   1b0b8:	0f 90       	pop	r0
   1b0ba:	1f 90       	pop	r1
   1b0bc:	18 95       	reti

0001b0be <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   1b0be:	88 e2       	ldi	r24, 0x28	; 40
   1b0c0:	94 e1       	ldi	r25, 0x14	; 20
   1b0c2:	0e 94 1f d7 	call	0x1ae3e	; 0x1ae3e <HardwareSerial::available()>
   1b0c6:	21 e0       	ldi	r18, 0x01	; 1
   1b0c8:	89 2b       	or	r24, r25
   1b0ca:	09 f4       	brne	.+2      	; 0x1b0ce <Serial0_available()+0x10>
   1b0cc:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   1b0ce:	82 2f       	mov	r24, r18
   1b0d0:	08 95       	ret

0001b0d2 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1b0d2:	e8 e2       	ldi	r30, 0x28	; 40
   1b0d4:	f4 e1       	ldi	r31, 0x14	; 20
   1b0d6:	13 82       	std	Z+3, r1	; 0x03
   1b0d8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1b0da:	88 ee       	ldi	r24, 0xE8	; 232
   1b0dc:	93 e0       	ldi	r25, 0x03	; 3
   1b0de:	a0 e0       	ldi	r26, 0x00	; 0
   1b0e0:	b0 e0       	ldi	r27, 0x00	; 0
   1b0e2:	84 83       	std	Z+4, r24	; 0x04
   1b0e4:	95 83       	std	Z+5, r25	; 0x05
   1b0e6:	a6 83       	std	Z+6, r26	; 0x06
   1b0e8:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   1b0ea:	81 e4       	ldi	r24, 0x41	; 65
   1b0ec:	99 e0       	ldi	r25, 0x09	; 9
   1b0ee:	91 83       	std	Z+1, r25	; 0x01
   1b0f0:	80 83       	st	Z, r24
   1b0f2:	85 ec       	ldi	r24, 0xC5	; 197
   1b0f4:	90 e0       	ldi	r25, 0x00	; 0
   1b0f6:	95 87       	std	Z+13, r25	; 0x0d
   1b0f8:	84 87       	std	Z+12, r24	; 0x0c
   1b0fa:	84 ec       	ldi	r24, 0xC4	; 196
   1b0fc:	90 e0       	ldi	r25, 0x00	; 0
   1b0fe:	97 87       	std	Z+15, r25	; 0x0f
   1b100:	86 87       	std	Z+14, r24	; 0x0e
   1b102:	80 ec       	ldi	r24, 0xC0	; 192
   1b104:	90 e0       	ldi	r25, 0x00	; 0
   1b106:	91 8b       	std	Z+17, r25	; 0x11
   1b108:	80 8b       	std	Z+16, r24	; 0x10
   1b10a:	81 ec       	ldi	r24, 0xC1	; 193
   1b10c:	90 e0       	ldi	r25, 0x00	; 0
   1b10e:	93 8b       	std	Z+19, r25	; 0x13
   1b110:	82 8b       	std	Z+18, r24	; 0x12
   1b112:	82 ec       	ldi	r24, 0xC2	; 194
   1b114:	90 e0       	ldi	r25, 0x00	; 0
   1b116:	95 8b       	std	Z+21, r25	; 0x15
   1b118:	84 8b       	std	Z+20, r24	; 0x14
   1b11a:	86 ec       	ldi	r24, 0xC6	; 198
   1b11c:	90 e0       	ldi	r25, 0x00	; 0
   1b11e:	97 8b       	std	Z+23, r25	; 0x17
   1b120:	86 8b       	std	Z+22, r24	; 0x16
   1b122:	11 8e       	std	Z+25, r1	; 0x19
   1b124:	12 8e       	std	Z+26, r1	; 0x1a
   1b126:	13 8e       	std	Z+27, r1	; 0x1b
   1b128:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   1b12a:	08 95       	ret

0001b12c <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   1b12c:	8f 92       	push	r8
   1b12e:	9f 92       	push	r9
   1b130:	af 92       	push	r10
   1b132:	bf 92       	push	r11
   1b134:	cf 92       	push	r12
   1b136:	df 92       	push	r13
   1b138:	ef 92       	push	r14
   1b13a:	ff 92       	push	r15
   1b13c:	0f 93       	push	r16
   1b13e:	1f 93       	push	r17
   1b140:	cf 93       	push	r28
   1b142:	df 93       	push	r29
   1b144:	7c 01       	movw	r14, r24
   1b146:	8b 01       	movw	r16, r22
   1b148:	4c 01       	movw	r8, r24
   1b14a:	82 e0       	ldi	r24, 0x02	; 2
   1b14c:	88 0e       	add	r8, r24
   1b14e:	91 1c       	adc	r9, r1
   1b150:	57 01       	movw	r10, r14
   1b152:	e5 e0       	ldi	r30, 0x05	; 5
   1b154:	ae 0e       	add	r10, r30
   1b156:	b1 1c       	adc	r11, r1
   1b158:	d0 e0       	ldi	r29, 0x00	; 0
   1b15a:	c0 e0       	ldi	r28, 0x00	; 0
   1b15c:	f4 01       	movw	r30, r8
   1b15e:	61 91       	ld	r22, Z+
   1b160:	4f 01       	movw	r8, r30
   1b162:	4a e0       	ldi	r20, 0x0A	; 10
   1b164:	50 e0       	ldi	r21, 0x00	; 0
   1b166:	c8 01       	movw	r24, r16
   1b168:	0e 94 9f d9 	call	0x1b33e	; 0x1b33e <Print::print(unsigned char, int)>
   1b16c:	6c 01       	movw	r12, r24
   1b16e:	6e e2       	ldi	r22, 0x2E	; 46
   1b170:	c8 01       	movw	r24, r16
   1b172:	0e 94 3f d9 	call	0x1b27e	; 0x1b27e <Print::print(char)>
   1b176:	8c 0d       	add	r24, r12
   1b178:	9d 1d       	adc	r25, r13
   1b17a:	c8 0f       	add	r28, r24
   1b17c:	d9 1f       	adc	r29, r25
   1b17e:	8a 14       	cp	r8, r10
   1b180:	9b 04       	cpc	r9, r11
   1b182:	61 f7       	brne	.-40     	; 0x1b15c <IPAddress::printTo(Print&) const+0x30>
   1b184:	4a e0       	ldi	r20, 0x0A	; 10
   1b186:	50 e0       	ldi	r21, 0x00	; 0
   1b188:	f7 01       	movw	r30, r14
   1b18a:	65 81       	ldd	r22, Z+5	; 0x05
   1b18c:	c8 01       	movw	r24, r16
   1b18e:	0e 94 9f d9 	call	0x1b33e	; 0x1b33e <Print::print(unsigned char, int)>
   1b192:	8c 0f       	add	r24, r28
   1b194:	9d 1f       	adc	r25, r29
   1b196:	df 91       	pop	r29
   1b198:	cf 91       	pop	r28
   1b19a:	1f 91       	pop	r17
   1b19c:	0f 91       	pop	r16
   1b19e:	ff 90       	pop	r15
   1b1a0:	ef 90       	pop	r14
   1b1a2:	df 90       	pop	r13
   1b1a4:	cf 90       	pop	r12
   1b1a6:	bf 90       	pop	r11
   1b1a8:	af 90       	pop	r10
   1b1aa:	9f 90       	pop	r9
   1b1ac:	8f 90       	pop	r8
   1b1ae:	08 95       	ret

0001b1b0 <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   1b1b0:	23 e5       	ldi	r18, 0x53	; 83
   1b1b2:	39 e0       	ldi	r19, 0x09	; 9
   1b1b4:	fc 01       	movw	r30, r24
   1b1b6:	31 83       	std	Z+1, r19	; 0x01
   1b1b8:	20 83       	st	Z, r18
   1b1ba:	12 82       	std	Z+2, r1	; 0x02
   1b1bc:	13 82       	std	Z+3, r1	; 0x03
   1b1be:	14 82       	std	Z+4, r1	; 0x04
   1b1c0:	15 82       	std	Z+5, r1	; 0x05
   1b1c2:	08 95       	ret

0001b1c4 <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   1b1c4:	0f 93       	push	r16
   1b1c6:	fc 01       	movw	r30, r24
   1b1c8:	83 e5       	ldi	r24, 0x53	; 83
   1b1ca:	99 e0       	ldi	r25, 0x09	; 9
   1b1cc:	91 83       	std	Z+1, r25	; 0x01
   1b1ce:	80 83       	st	Z, r24
   1b1d0:	62 83       	std	Z+2, r22	; 0x02
   1b1d2:	43 83       	std	Z+3, r20	; 0x03
   1b1d4:	24 83       	std	Z+4, r18	; 0x04
   1b1d6:	05 83       	std	Z+5, r16	; 0x05
   1b1d8:	0f 91       	pop	r16
   1b1da:	08 95       	ret

0001b1dc <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   1b1dc:	dc 01       	movw	r26, r24
   1b1de:	83 e5       	ldi	r24, 0x53	; 83
   1b1e0:	99 e0       	ldi	r25, 0x09	; 9
   1b1e2:	8d 93       	st	X+, r24
   1b1e4:	9d 93       	st	X+, r25
   1b1e6:	84 e0       	ldi	r24, 0x04	; 4
   1b1e8:	fb 01       	movw	r30, r22
   1b1ea:	01 90       	ld	r0, Z+
   1b1ec:	0d 92       	st	X+, r0
   1b1ee:	8a 95       	dec	r24
   1b1f0:	e1 f7       	brne	.-8      	; 0x1b1ea <IPAddress::IPAddress(unsigned char const*)+0xe>
   1b1f2:	08 95       	ret

0001b1f4 <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1b1f4:	dc 01       	movw	r26, r24
   1b1f6:	12 96       	adiw	r26, 0x02	; 2
   1b1f8:	24 e0       	ldi	r18, 0x04	; 4
   1b1fa:	fb 01       	movw	r30, r22
   1b1fc:	01 90       	ld	r0, Z+
   1b1fe:	0d 92       	st	X+, r0
   1b200:	2a 95       	dec	r18
   1b202:	e1 f7       	brne	.-8      	; 0x1b1fc <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   1b204:	08 95       	ret

0001b206 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   1b206:	af 92       	push	r10
   1b208:	bf 92       	push	r11
   1b20a:	cf 92       	push	r12
   1b20c:	df 92       	push	r13
   1b20e:	ef 92       	push	r14
   1b210:	ff 92       	push	r15
   1b212:	0f 93       	push	r16
   1b214:	1f 93       	push	r17
   1b216:	cf 93       	push	r28
   1b218:	df 93       	push	r29
   1b21a:	6c 01       	movw	r12, r24
   1b21c:	7b 01       	movw	r14, r22
   1b21e:	8b 01       	movw	r16, r22
   1b220:	04 0f       	add	r16, r20
   1b222:	15 1f       	adc	r17, r21
   1b224:	eb 01       	movw	r28, r22
   1b226:	5e 01       	movw	r10, r28
   1b228:	ae 18       	sub	r10, r14
   1b22a:	bf 08       	sbc	r11, r15
   1b22c:	c0 17       	cp	r28, r16
   1b22e:	d1 07       	cpc	r29, r17
   1b230:	59 f0       	breq	.+22     	; 0x1b248 <Print::write(unsigned char const*, unsigned int)+0x42>
   1b232:	69 91       	ld	r22, Y+
   1b234:	d6 01       	movw	r26, r12
   1b236:	ed 91       	ld	r30, X+
   1b238:	fc 91       	ld	r31, X
   1b23a:	01 90       	ld	r0, Z+
   1b23c:	f0 81       	ld	r31, Z
   1b23e:	e0 2d       	mov	r30, r0
   1b240:	c6 01       	movw	r24, r12
   1b242:	19 95       	eicall
   1b244:	89 2b       	or	r24, r25
   1b246:	79 f7       	brne	.-34     	; 0x1b226 <Print::write(unsigned char const*, unsigned int)+0x20>
   1b248:	c5 01       	movw	r24, r10
   1b24a:	df 91       	pop	r29
   1b24c:	cf 91       	pop	r28
   1b24e:	1f 91       	pop	r17
   1b250:	0f 91       	pop	r16
   1b252:	ff 90       	pop	r15
   1b254:	ef 90       	pop	r14
   1b256:	df 90       	pop	r13
   1b258:	cf 90       	pop	r12
   1b25a:	bf 90       	pop	r11
   1b25c:	af 90       	pop	r10
   1b25e:	08 95       	ret

0001b260 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   1b260:	fb 01       	movw	r30, r22
   1b262:	01 90       	ld	r0, Z+
   1b264:	00 20       	and	r0, r0
   1b266:	e9 f7       	brne	.-6      	; 0x1b262 <Print::write(char const*) [clone .part.2]+0x2>
   1b268:	31 97       	sbiw	r30, 0x01	; 1
   1b26a:	af 01       	movw	r20, r30
   1b26c:	46 1b       	sub	r20, r22
   1b26e:	57 0b       	sbc	r21, r23
   1b270:	dc 01       	movw	r26, r24
   1b272:	ed 91       	ld	r30, X+
   1b274:	fc 91       	ld	r31, X
   1b276:	02 80       	ldd	r0, Z+2	; 0x02
   1b278:	f3 81       	ldd	r31, Z+3	; 0x03
   1b27a:	e0 2d       	mov	r30, r0
   1b27c:	19 94       	eijmp

0001b27e <Print::print(char)>:
_ZN5Print5printEc():
   1b27e:	dc 01       	movw	r26, r24
   1b280:	ed 91       	ld	r30, X+
   1b282:	fc 91       	ld	r31, X
   1b284:	01 90       	ld	r0, Z+
   1b286:	f0 81       	ld	r31, Z
   1b288:	e0 2d       	mov	r30, r0
   1b28a:	19 94       	eijmp

0001b28c <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   1b28c:	8f 92       	push	r8
   1b28e:	9f 92       	push	r9
   1b290:	af 92       	push	r10
   1b292:	bf 92       	push	r11
   1b294:	ef 92       	push	r14
   1b296:	ff 92       	push	r15
   1b298:	0f 93       	push	r16
   1b29a:	1f 93       	push	r17
   1b29c:	cf 93       	push	r28
   1b29e:	df 93       	push	r29
   1b2a0:	cd b7       	in	r28, 0x3d	; 61
   1b2a2:	de b7       	in	r29, 0x3e	; 62
   1b2a4:	a1 97       	sbiw	r28, 0x21	; 33
   1b2a6:	0f b6       	in	r0, 0x3f	; 63
   1b2a8:	f8 94       	cli
   1b2aa:	de bf       	out	0x3e, r29	; 62
   1b2ac:	0f be       	out	0x3f, r0	; 63
   1b2ae:	cd bf       	out	0x3d, r28	; 61
   1b2b0:	7c 01       	movw	r14, r24
   1b2b2:	fa 01       	movw	r30, r20
   1b2b4:	cb 01       	movw	r24, r22
   1b2b6:	19 a2       	std	Y+33, r1	; 0x21
   1b2b8:	22 30       	cpi	r18, 0x02	; 2
   1b2ba:	08 f4       	brcc	.+2      	; 0x1b2be <Print::printNumber(unsigned long, unsigned char)+0x32>
   1b2bc:	2a e0       	ldi	r18, 0x0A	; 10
   1b2be:	8e 01       	movw	r16, r28
   1b2c0:	0f 5d       	subi	r16, 0xDF	; 223
   1b2c2:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2c4:	82 2e       	mov	r8, r18
   1b2c6:	91 2c       	mov	r9, r1
   1b2c8:	b1 2c       	mov	r11, r1
   1b2ca:	a1 2c       	mov	r10, r1
   1b2cc:	bf 01       	movw	r22, r30
   1b2ce:	a5 01       	movw	r20, r10
   1b2d0:	94 01       	movw	r18, r8
   1b2d2:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1b2d6:	f9 01       	movw	r30, r18
   1b2d8:	ca 01       	movw	r24, r20
   1b2da:	6a 30       	cpi	r22, 0x0A	; 10
   1b2dc:	0c f5       	brge	.+66     	; 0x1b320 <Print::printNumber(unsigned long, unsigned char)+0x94>
   1b2de:	60 5d       	subi	r22, 0xD0	; 208
   1b2e0:	d8 01       	movw	r26, r16
   1b2e2:	6e 93       	st	-X, r22
   1b2e4:	8d 01       	movw	r16, r26
   1b2e6:	23 2b       	or	r18, r19
   1b2e8:	24 2b       	or	r18, r20
   1b2ea:	25 2b       	or	r18, r21
   1b2ec:	79 f7       	brne	.-34     	; 0x1b2cc <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1b2ee:	90 e0       	ldi	r25, 0x00	; 0
   1b2f0:	80 e0       	ldi	r24, 0x00	; 0
   1b2f2:	10 97       	sbiw	r26, 0x00	; 0
   1b2f4:	21 f0       	breq	.+8      	; 0x1b2fe <Print::printNumber(unsigned long, unsigned char)+0x72>
   1b2f6:	bd 01       	movw	r22, r26
   1b2f8:	c7 01       	movw	r24, r14
   1b2fa:	0e 94 30 d9 	call	0x1b260	; 0x1b260 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1b2fe:	a1 96       	adiw	r28, 0x21	; 33
   1b300:	0f b6       	in	r0, 0x3f	; 63
   1b302:	f8 94       	cli
   1b304:	de bf       	out	0x3e, r29	; 62
   1b306:	0f be       	out	0x3f, r0	; 63
   1b308:	cd bf       	out	0x3d, r28	; 61
   1b30a:	df 91       	pop	r29
   1b30c:	cf 91       	pop	r28
   1b30e:	1f 91       	pop	r17
   1b310:	0f 91       	pop	r16
   1b312:	ff 90       	pop	r15
   1b314:	ef 90       	pop	r14
   1b316:	bf 90       	pop	r11
   1b318:	af 90       	pop	r10
   1b31a:	9f 90       	pop	r9
   1b31c:	8f 90       	pop	r8
   1b31e:	08 95       	ret
   1b320:	69 5c       	subi	r22, 0xC9	; 201
   1b322:	de cf       	rjmp	.-68     	; 0x1b2e0 <Print::printNumber(unsigned long, unsigned char)+0x54>

0001b324 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   1b324:	21 15       	cp	r18, r1
   1b326:	31 05       	cpc	r19, r1
   1b328:	41 f4       	brne	.+16     	; 0x1b33a <Print::print(unsigned long, int)+0x16>
   1b32a:	dc 01       	movw	r26, r24
   1b32c:	ed 91       	ld	r30, X+
   1b32e:	fc 91       	ld	r31, X
   1b330:	01 90       	ld	r0, Z+
   1b332:	f0 81       	ld	r31, Z
   1b334:	e0 2d       	mov	r30, r0
   1b336:	64 2f       	mov	r22, r20
   1b338:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   1b33a:	0c 94 46 d9 	jmp	0x1b28c	; 0x1b28c <Print::printNumber(unsigned long, unsigned char)>

0001b33e <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1b33e:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1b340:	46 2f       	mov	r20, r22
   1b342:	50 e0       	ldi	r21, 0x00	; 0
   1b344:	70 e0       	ldi	r23, 0x00	; 0
   1b346:	60 e0       	ldi	r22, 0x00	; 0
   1b348:	0c 94 92 d9 	jmp	0x1b324	; 0x1b324 <Print::print(unsigned long, int)>

0001b34c <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   1b34c:	98 2f       	mov	r25, r24
   1b34e:	86 2f       	mov	r24, r22
   1b350:	08 95       	ret

0001b352 <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1b352:	fc 01       	movw	r30, r24
   1b354:	80 81       	ld	r24, Z
   1b356:	91 81       	ldd	r25, Z+1	; 0x01
   1b358:	0c 94 e2 dd 	jmp	0x1bbc4	; 0x1bbc4 <free>

0001b35c <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   1b35c:	cf 93       	push	r28
   1b35e:	df 93       	push	r29
   1b360:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   1b362:	88 81       	ld	r24, Y
   1b364:	99 81       	ldd	r25, Y+1	; 0x01
   1b366:	00 97       	sbiw	r24, 0x00	; 0
   1b368:	11 f0       	breq	.+4      	; 0x1b36e <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   1b36a:	0e 94 e2 dd 	call	0x1bbc4	; 0x1bbc4 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1b36e:	19 82       	std	Y+1, r1	; 0x01
   1b370:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1b372:	1d 82       	std	Y+5, r1	; 0x05
   1b374:	1c 82       	std	Y+4, r1	; 0x04
   1b376:	1b 82       	std	Y+3, r1	; 0x03
   1b378:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   1b37a:	df 91       	pop	r29
   1b37c:	cf 91       	pop	r28
   1b37e:	08 95       	ret

0001b380 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   1b380:	0f 93       	push	r16
   1b382:	1f 93       	push	r17
   1b384:	cf 93       	push	r28
   1b386:	df 93       	push	r29
   1b388:	ec 01       	movw	r28, r24
   1b38a:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1b38c:	6f 5f       	subi	r22, 0xFF	; 255
   1b38e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b390:	88 81       	ld	r24, Y
   1b392:	99 81       	ldd	r25, Y+1	; 0x01
   1b394:	0e 94 6b de 	call	0x1bcd6	; 0x1bcd6 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1b398:	00 97       	sbiw	r24, 0x00	; 0
   1b39a:	51 f0       	breq	.+20     	; 0x1b3b0 <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1b39c:	99 83       	std	Y+1, r25	; 0x01
   1b39e:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1b3a0:	1b 83       	std	Y+3, r17	; 0x03
   1b3a2:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   1b3a4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   1b3a6:	df 91       	pop	r29
   1b3a8:	cf 91       	pop	r28
   1b3aa:	1f 91       	pop	r17
   1b3ac:	0f 91       	pop	r16
   1b3ae:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   1b3b0:	80 e0       	ldi	r24, 0x00	; 0
   1b3b2:	f9 cf       	rjmp	.-14     	; 0x1b3a6 <String::changeBuffer(unsigned int)+0x26>

0001b3b4 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   1b3b4:	cf 93       	push	r28
   1b3b6:	df 93       	push	r29
   1b3b8:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   1b3ba:	88 81       	ld	r24, Y
   1b3bc:	99 81       	ldd	r25, Y+1	; 0x01
   1b3be:	89 2b       	or	r24, r25
   1b3c0:	49 f0       	breq	.+18     	; 0x1b3d4 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   1b3c2:	8a 81       	ldd	r24, Y+2	; 0x02
   1b3c4:	9b 81       	ldd	r25, Y+3	; 0x03
   1b3c6:	86 17       	cp	r24, r22
   1b3c8:	97 07       	cpc	r25, r23
   1b3ca:	20 f0       	brcs	.+8      	; 0x1b3d4 <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   1b3cc:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   1b3ce:	df 91       	pop	r29
   1b3d0:	cf 91       	pop	r28
   1b3d2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   1b3d4:	ce 01       	movw	r24, r28
   1b3d6:	0e 94 c0 d9 	call	0x1b380	; 0x1b380 <String::changeBuffer(unsigned int)>
   1b3da:	88 23       	and	r24, r24
   1b3dc:	c1 f3       	breq	.-16     	; 0x1b3ce <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   1b3de:	8c 81       	ldd	r24, Y+4	; 0x04
   1b3e0:	9d 81       	ldd	r25, Y+5	; 0x05
   1b3e2:	89 2b       	or	r24, r25
   1b3e4:	99 f7       	brne	.-26     	; 0x1b3cc <String::reserve(unsigned int)+0x18>
   1b3e6:	e8 81       	ld	r30, Y
   1b3e8:	f9 81       	ldd	r31, Y+1	; 0x01
   1b3ea:	10 82       	st	Z, r1
   1b3ec:	ef cf       	rjmp	.-34     	; 0x1b3cc <String::reserve(unsigned int)+0x18>

0001b3ee <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   1b3ee:	ef 92       	push	r14
   1b3f0:	ff 92       	push	r15
   1b3f2:	0f 93       	push	r16
   1b3f4:	1f 93       	push	r17
   1b3f6:	cf 93       	push	r28
   1b3f8:	df 93       	push	r29
   1b3fa:	ec 01       	movw	r28, r24
   1b3fc:	7b 01       	movw	r14, r22
   1b3fe:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   1b400:	ba 01       	movw	r22, r20
   1b402:	0e 94 da d9 	call	0x1b3b4	; 0x1b3b4 <String::reserve(unsigned int)>
   1b406:	81 11       	cpse	r24, r1
   1b408:	0b c0       	rjmp	.+22     	; 0x1b420 <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   1b40a:	ce 01       	movw	r24, r28
   1b40c:	0e 94 ae d9 	call	0x1b35c	; 0x1b35c <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   1b410:	ce 01       	movw	r24, r28
   1b412:	df 91       	pop	r29
   1b414:	cf 91       	pop	r28
   1b416:	1f 91       	pop	r17
   1b418:	0f 91       	pop	r16
   1b41a:	ff 90       	pop	r15
   1b41c:	ef 90       	pop	r14
   1b41e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1b420:	1d 83       	std	Y+5, r17	; 0x05
   1b422:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   1b424:	b7 01       	movw	r22, r14
   1b426:	88 81       	ld	r24, Y
   1b428:	99 81       	ldd	r25, Y+1	; 0x01
   1b42a:	0e 94 bd e0 	call	0x1c17a	; 0x1c17a <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   1b42e:	f0 cf       	rjmp	.-32     	; 0x1b410 <String::copy(char const*, unsigned int)+0x22>

0001b430 <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1b430:	fc 01       	movw	r30, r24
   1b432:	11 82       	std	Z+1, r1	; 0x01
   1b434:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1b436:	13 82       	std	Z+3, r1	; 0x03
   1b438:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1b43a:	15 82       	std	Z+5, r1	; 0x05
   1b43c:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1b43e:	61 15       	cp	r22, r1
   1b440:	71 05       	cpc	r23, r1
   1b442:	51 f0       	breq	.+20     	; 0x1b458 <String::String(char const*)+0x28>
   1b444:	fb 01       	movw	r30, r22
   1b446:	01 90       	ld	r0, Z+
   1b448:	00 20       	and	r0, r0
   1b44a:	e9 f7       	brne	.-6      	; 0x1b446 <String::String(char const*)+0x16>
   1b44c:	31 97       	sbiw	r30, 0x01	; 1
   1b44e:	af 01       	movw	r20, r30
   1b450:	46 1b       	sub	r20, r22
   1b452:	57 0b       	sbc	r21, r23
   1b454:	0c 94 f7 d9 	jmp	0x1b3ee	; 0x1b3ee <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   1b458:	08 95       	ret

0001b45a <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   1b45a:	0e 94 4f e0 	call	0x1c09e	; 0x1c09e <abort>

0001b45e <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   1b45e:	08 95       	ret

0001b460 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   1b460:	0e 94 df d5 	call	0x1abbe	; 0x1abbe <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   1b464:	0e 94 2f da 	call	0x1b45e	; 0x1b45e <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1b468:	0e 94 24 79 	call	0xf248	; 0xf248 <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1b46c:	cc e5       	ldi	r28, 0x5C	; 92
   1b46e:	d7 ed       	ldi	r29, 0xD7	; 215
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   1b470:	0e 94 92 81 	call	0x10324	; 0x10324 <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   1b474:	20 97       	sbiw	r28, 0x00	; 0
   1b476:	e1 f3       	breq	.-8      	; 0x1b470 <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   1b478:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <serialEventRun()>
   1b47c:	f9 cf       	rjmp	.-14     	; 0x1b470 <main+0x10>

0001b47e <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1b47e:	0c 94 46 dd 	jmp	0x1ba8c	; 0x1ba8c <malloc>

0001b482 <operator new[](unsigned int)>:
_Znaj():
   1b482:	0c 94 46 dd 	jmp	0x1ba8c	; 0x1ba8c <malloc>

0001b486 <__subsf3>:
__subsf3():
   1b486:	50 58       	subi	r21, 0x80	; 128

0001b488 <__addsf3>:
   1b488:	bb 27       	eor	r27, r27
   1b48a:	aa 27       	eor	r26, r26
   1b48c:	0e 94 5b da 	call	0x1b4b6	; 0x1b4b6 <__addsf3x>
   1b490:	0c 94 d5 db 	jmp	0x1b7aa	; 0x1b7aa <__fp_round>
__addsf3():
   1b494:	0e 94 c7 db 	call	0x1b78e	; 0x1b78e <__fp_pscA>
   1b498:	38 f0       	brcs	.+14     	; 0x1b4a8 <__addsf3+0x20>
   1b49a:	0e 94 ce db 	call	0x1b79c	; 0x1b79c <__fp_pscB>
   1b49e:	20 f0       	brcs	.+8      	; 0x1b4a8 <__addsf3+0x20>
   1b4a0:	39 f4       	brne	.+14     	; 0x1b4b0 <__addsf3+0x28>
   1b4a2:	9f 3f       	cpi	r25, 0xFF	; 255
   1b4a4:	19 f4       	brne	.+6      	; 0x1b4ac <__addsf3+0x24>
   1b4a6:	26 f4       	brtc	.+8      	; 0x1b4b0 <__addsf3+0x28>
   1b4a8:	0c 94 c4 db 	jmp	0x1b788	; 0x1b788 <__fp_nan>
   1b4ac:	0e f4       	brtc	.+2      	; 0x1b4b0 <__addsf3+0x28>
   1b4ae:	e0 95       	com	r30
   1b4b0:	e7 fb       	bst	r30, 7
   1b4b2:	0c 94 be db 	jmp	0x1b77c	; 0x1b77c <__fp_inf>

0001b4b6 <__addsf3x>:
__addsf3x():
   1b4b6:	e9 2f       	mov	r30, r25
   1b4b8:	0e 94 e6 db 	call	0x1b7cc	; 0x1b7cc <__fp_split3>
   1b4bc:	58 f3       	brcs	.-42     	; 0x1b494 <__addsf3+0xc>
   1b4be:	ba 17       	cp	r27, r26
   1b4c0:	62 07       	cpc	r22, r18
   1b4c2:	73 07       	cpc	r23, r19
   1b4c4:	84 07       	cpc	r24, r20
   1b4c6:	95 07       	cpc	r25, r21
   1b4c8:	20 f0       	brcs	.+8      	; 0x1b4d2 <__addsf3x+0x1c>
   1b4ca:	79 f4       	brne	.+30     	; 0x1b4ea <__addsf3x+0x34>
   1b4cc:	a6 f5       	brtc	.+104    	; 0x1b536 <__addsf3x+0x80>
   1b4ce:	0c 94 08 dc 	jmp	0x1b810	; 0x1b810 <__fp_zero>
   1b4d2:	0e f4       	brtc	.+2      	; 0x1b4d6 <__addsf3x+0x20>
   1b4d4:	e0 95       	com	r30
   1b4d6:	0b 2e       	mov	r0, r27
   1b4d8:	ba 2f       	mov	r27, r26
   1b4da:	a0 2d       	mov	r26, r0
   1b4dc:	0b 01       	movw	r0, r22
   1b4de:	b9 01       	movw	r22, r18
   1b4e0:	90 01       	movw	r18, r0
   1b4e2:	0c 01       	movw	r0, r24
   1b4e4:	ca 01       	movw	r24, r20
   1b4e6:	a0 01       	movw	r20, r0
   1b4e8:	11 24       	eor	r1, r1
   1b4ea:	ff 27       	eor	r31, r31
   1b4ec:	59 1b       	sub	r21, r25
   1b4ee:	99 f0       	breq	.+38     	; 0x1b516 <__addsf3x+0x60>
   1b4f0:	59 3f       	cpi	r21, 0xF9	; 249
   1b4f2:	50 f4       	brcc	.+20     	; 0x1b508 <__addsf3x+0x52>
   1b4f4:	50 3e       	cpi	r21, 0xE0	; 224
   1b4f6:	68 f1       	brcs	.+90     	; 0x1b552 <__addsf3x+0x9c>
   1b4f8:	1a 16       	cp	r1, r26
   1b4fa:	f0 40       	sbci	r31, 0x00	; 0
   1b4fc:	a2 2f       	mov	r26, r18
   1b4fe:	23 2f       	mov	r18, r19
   1b500:	34 2f       	mov	r19, r20
   1b502:	44 27       	eor	r20, r20
   1b504:	58 5f       	subi	r21, 0xF8	; 248
   1b506:	f3 cf       	rjmp	.-26     	; 0x1b4ee <__addsf3x+0x38>
   1b508:	46 95       	lsr	r20
   1b50a:	37 95       	ror	r19
   1b50c:	27 95       	ror	r18
   1b50e:	a7 95       	ror	r26
   1b510:	f0 40       	sbci	r31, 0x00	; 0
   1b512:	53 95       	inc	r21
   1b514:	c9 f7       	brne	.-14     	; 0x1b508 <__addsf3x+0x52>
   1b516:	7e f4       	brtc	.+30     	; 0x1b536 <__addsf3x+0x80>
   1b518:	1f 16       	cp	r1, r31
   1b51a:	ba 0b       	sbc	r27, r26
   1b51c:	62 0b       	sbc	r22, r18
   1b51e:	73 0b       	sbc	r23, r19
   1b520:	84 0b       	sbc	r24, r20
   1b522:	ba f0       	brmi	.+46     	; 0x1b552 <__addsf3x+0x9c>
   1b524:	91 50       	subi	r25, 0x01	; 1
   1b526:	a1 f0       	breq	.+40     	; 0x1b550 <__addsf3x+0x9a>
   1b528:	ff 0f       	add	r31, r31
   1b52a:	bb 1f       	adc	r27, r27
   1b52c:	66 1f       	adc	r22, r22
   1b52e:	77 1f       	adc	r23, r23
   1b530:	88 1f       	adc	r24, r24
   1b532:	c2 f7       	brpl	.-16     	; 0x1b524 <__addsf3x+0x6e>
   1b534:	0e c0       	rjmp	.+28     	; 0x1b552 <__addsf3x+0x9c>
   1b536:	ba 0f       	add	r27, r26
   1b538:	62 1f       	adc	r22, r18
   1b53a:	73 1f       	adc	r23, r19
   1b53c:	84 1f       	adc	r24, r20
   1b53e:	48 f4       	brcc	.+18     	; 0x1b552 <__addsf3x+0x9c>
   1b540:	87 95       	ror	r24
   1b542:	77 95       	ror	r23
   1b544:	67 95       	ror	r22
   1b546:	b7 95       	ror	r27
   1b548:	f7 95       	ror	r31
   1b54a:	9e 3f       	cpi	r25, 0xFE	; 254
   1b54c:	08 f0       	brcs	.+2      	; 0x1b550 <__addsf3x+0x9a>
   1b54e:	b0 cf       	rjmp	.-160    	; 0x1b4b0 <__addsf3+0x28>
   1b550:	93 95       	inc	r25
   1b552:	88 0f       	add	r24, r24
   1b554:	08 f0       	brcs	.+2      	; 0x1b558 <__addsf3x+0xa2>
   1b556:	99 27       	eor	r25, r25
   1b558:	ee 0f       	add	r30, r30
   1b55a:	97 95       	ror	r25
   1b55c:	87 95       	ror	r24
   1b55e:	08 95       	ret

0001b560 <__cmpsf2>:
   1b560:	0e 94 9a db 	call	0x1b734	; 0x1b734 <__fp_cmp>
   1b564:	08 f4       	brcc	.+2      	; 0x1b568 <__cmpsf2+0x8>
   1b566:	81 e0       	ldi	r24, 0x01	; 1
   1b568:	08 95       	ret

0001b56a <__divsf3>:
   1b56a:	0e 94 c9 da 	call	0x1b592	; 0x1b592 <__divsf3x>
   1b56e:	0c 94 d5 db 	jmp	0x1b7aa	; 0x1b7aa <__fp_round>
   1b572:	0e 94 ce db 	call	0x1b79c	; 0x1b79c <__fp_pscB>
   1b576:	58 f0       	brcs	.+22     	; 0x1b58e <__divsf3+0x24>
   1b578:	0e 94 c7 db 	call	0x1b78e	; 0x1b78e <__fp_pscA>
   1b57c:	40 f0       	brcs	.+16     	; 0x1b58e <__divsf3+0x24>
   1b57e:	29 f4       	brne	.+10     	; 0x1b58a <__divsf3+0x20>
   1b580:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   1b582:	29 f0       	breq	.+10     	; 0x1b58e <__divsf3+0x24>
   1b584:	0c 94 be db 	jmp	0x1b77c	; 0x1b77c <__fp_inf>
   1b588:	51 11       	cpse	r21, r1
   1b58a:	0c 94 09 dc 	jmp	0x1b812	; 0x1b812 <__fp_szero>
   1b58e:	0c 94 c4 db 	jmp	0x1b788	; 0x1b788 <__fp_nan>

0001b592 <__divsf3x>:
__divsf3x():
   1b592:	0e 94 e6 db 	call	0x1b7cc	; 0x1b7cc <__fp_split3>
   1b596:	68 f3       	brcs	.-38     	; 0x1b572 <__divsf3+0x8>

0001b598 <__divsf3_pse>:
   1b598:	99 23       	and	r25, r25
   1b59a:	b1 f3       	breq	.-20     	; 0x1b588 <__divsf3+0x1e>
   1b59c:	55 23       	and	r21, r21
   1b59e:	91 f3       	breq	.-28     	; 0x1b584 <__divsf3+0x1a>
   1b5a0:	95 1b       	sub	r25, r21
   1b5a2:	55 0b       	sbc	r21, r21
   1b5a4:	bb 27       	eor	r27, r27
   1b5a6:	aa 27       	eor	r26, r26
   1b5a8:	62 17       	cp	r22, r18
   1b5aa:	73 07       	cpc	r23, r19
   1b5ac:	84 07       	cpc	r24, r20
   1b5ae:	38 f0       	brcs	.+14     	; 0x1b5be <__divsf3_pse+0x26>
   1b5b0:	9f 5f       	subi	r25, 0xFF	; 255
   1b5b2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5b4:	22 0f       	add	r18, r18
   1b5b6:	33 1f       	adc	r19, r19
   1b5b8:	44 1f       	adc	r20, r20
   1b5ba:	aa 1f       	adc	r26, r26
   1b5bc:	a9 f3       	breq	.-22     	; 0x1b5a8 <__divsf3_pse+0x10>
   1b5be:	35 d0       	rcall	.+106    	; 0x1b62a <__divsf3_pse+0x92>
   1b5c0:	0e 2e       	mov	r0, r30
   1b5c2:	3a f0       	brmi	.+14     	; 0x1b5d2 <__divsf3_pse+0x3a>
   1b5c4:	e0 e8       	ldi	r30, 0x80	; 128
   1b5c6:	32 d0       	rcall	.+100    	; 0x1b62c <__divsf3_pse+0x94>
   1b5c8:	91 50       	subi	r25, 0x01	; 1
   1b5ca:	50 40       	sbci	r21, 0x00	; 0
   1b5cc:	e6 95       	lsr	r30
   1b5ce:	00 1c       	adc	r0, r0
   1b5d0:	ca f7       	brpl	.-14     	; 0x1b5c4 <__divsf3_pse+0x2c>
   1b5d2:	2b d0       	rcall	.+86     	; 0x1b62a <__divsf3_pse+0x92>
   1b5d4:	fe 2f       	mov	r31, r30
   1b5d6:	29 d0       	rcall	.+82     	; 0x1b62a <__divsf3_pse+0x92>
   1b5d8:	66 0f       	add	r22, r22
   1b5da:	77 1f       	adc	r23, r23
   1b5dc:	88 1f       	adc	r24, r24
   1b5de:	bb 1f       	adc	r27, r27
   1b5e0:	26 17       	cp	r18, r22
   1b5e2:	37 07       	cpc	r19, r23
   1b5e4:	48 07       	cpc	r20, r24
   1b5e6:	ab 07       	cpc	r26, r27
   1b5e8:	b0 e8       	ldi	r27, 0x80	; 128
   1b5ea:	09 f0       	breq	.+2      	; 0x1b5ee <__divsf3_pse+0x56>
   1b5ec:	bb 0b       	sbc	r27, r27
   1b5ee:	80 2d       	mov	r24, r0
   1b5f0:	bf 01       	movw	r22, r30
   1b5f2:	ff 27       	eor	r31, r31
   1b5f4:	93 58       	subi	r25, 0x83	; 131
   1b5f6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5f8:	3a f0       	brmi	.+14     	; 0x1b608 <__divsf3_pse+0x70>
   1b5fa:	9e 3f       	cpi	r25, 0xFE	; 254
   1b5fc:	51 05       	cpc	r21, r1
   1b5fe:	78 f0       	brcs	.+30     	; 0x1b61e <__divsf3_pse+0x86>
   1b600:	0c 94 be db 	jmp	0x1b77c	; 0x1b77c <__fp_inf>
   1b604:	0c 94 09 dc 	jmp	0x1b812	; 0x1b812 <__fp_szero>
   1b608:	5f 3f       	cpi	r21, 0xFF	; 255
   1b60a:	e4 f3       	brlt	.-8      	; 0x1b604 <__divsf3_pse+0x6c>
   1b60c:	98 3e       	cpi	r25, 0xE8	; 232
   1b60e:	d4 f3       	brlt	.-12     	; 0x1b604 <__divsf3_pse+0x6c>
   1b610:	86 95       	lsr	r24
   1b612:	77 95       	ror	r23
   1b614:	67 95       	ror	r22
   1b616:	b7 95       	ror	r27
   1b618:	f7 95       	ror	r31
   1b61a:	9f 5f       	subi	r25, 0xFF	; 255
   1b61c:	c9 f7       	brne	.-14     	; 0x1b610 <__divsf3_pse+0x78>
   1b61e:	88 0f       	add	r24, r24
   1b620:	91 1d       	adc	r25, r1
   1b622:	96 95       	lsr	r25
   1b624:	87 95       	ror	r24
   1b626:	97 f9       	bld	r25, 7
   1b628:	08 95       	ret
   1b62a:	e1 e0       	ldi	r30, 0x01	; 1
   1b62c:	66 0f       	add	r22, r22
   1b62e:	77 1f       	adc	r23, r23
   1b630:	88 1f       	adc	r24, r24
   1b632:	bb 1f       	adc	r27, r27
   1b634:	62 17       	cp	r22, r18
   1b636:	73 07       	cpc	r23, r19
   1b638:	84 07       	cpc	r24, r20
   1b63a:	ba 07       	cpc	r27, r26
   1b63c:	20 f0       	brcs	.+8      	; 0x1b646 <__divsf3_pse+0xae>
   1b63e:	62 1b       	sub	r22, r18
   1b640:	73 0b       	sbc	r23, r19
   1b642:	84 0b       	sbc	r24, r20
   1b644:	ba 0b       	sbc	r27, r26
   1b646:	ee 1f       	adc	r30, r30
   1b648:	88 f7       	brcc	.-30     	; 0x1b62c <__divsf3_pse+0x94>
   1b64a:	e0 95       	com	r30
   1b64c:	08 95       	ret

0001b64e <__fixsfsi>:
   1b64e:	0e 94 2e db 	call	0x1b65c	; 0x1b65c <__fixunssfsi>
   1b652:	68 94       	set
   1b654:	b1 11       	cpse	r27, r1
   1b656:	0c 94 09 dc 	jmp	0x1b812	; 0x1b812 <__fp_szero>
   1b65a:	08 95       	ret

0001b65c <__fixunssfsi>:
   1b65c:	0e 94 ee db 	call	0x1b7dc	; 0x1b7dc <__fp_splitA>
   1b660:	88 f0       	brcs	.+34     	; 0x1b684 <__fixunssfsi+0x28>
   1b662:	9f 57       	subi	r25, 0x7F	; 127
   1b664:	98 f0       	brcs	.+38     	; 0x1b68c <__fixunssfsi+0x30>
   1b666:	b9 2f       	mov	r27, r25
   1b668:	99 27       	eor	r25, r25
   1b66a:	b7 51       	subi	r27, 0x17	; 23
   1b66c:	b0 f0       	brcs	.+44     	; 0x1b69a <__fixunssfsi+0x3e>
__fixunssfsi():
   1b66e:	e1 f0       	breq	.+56     	; 0x1b6a8 <__fixunssfsi+0x4c>
   1b670:	66 0f       	add	r22, r22
   1b672:	77 1f       	adc	r23, r23
   1b674:	88 1f       	adc	r24, r24
   1b676:	99 1f       	adc	r25, r25
   1b678:	1a f0       	brmi	.+6      	; 0x1b680 <__fixunssfsi+0x24>
   1b67a:	ba 95       	dec	r27
   1b67c:	c9 f7       	brne	.-14     	; 0x1b670 <__fixunssfsi+0x14>
   1b67e:	14 c0       	rjmp	.+40     	; 0x1b6a8 <__fixunssfsi+0x4c>
   1b680:	b1 30       	cpi	r27, 0x01	; 1
   1b682:	91 f0       	breq	.+36     	; 0x1b6a8 <__fixunssfsi+0x4c>
   1b684:	0e 94 08 dc 	call	0x1b810	; 0x1b810 <__fp_zero>
   1b688:	b1 e0       	ldi	r27, 0x01	; 1
   1b68a:	08 95       	ret
   1b68c:	0c 94 08 dc 	jmp	0x1b810	; 0x1b810 <__fp_zero>
   1b690:	67 2f       	mov	r22, r23
   1b692:	78 2f       	mov	r23, r24
   1b694:	88 27       	eor	r24, r24
   1b696:	b8 5f       	subi	r27, 0xF8	; 248
   1b698:	39 f0       	breq	.+14     	; 0x1b6a8 <__fixunssfsi+0x4c>
   1b69a:	b9 3f       	cpi	r27, 0xF9	; 249
   1b69c:	cc f3       	brlt	.-14     	; 0x1b690 <__fixunssfsi+0x34>
   1b69e:	86 95       	lsr	r24
   1b6a0:	77 95       	ror	r23
   1b6a2:	67 95       	ror	r22
   1b6a4:	b3 95       	inc	r27
   1b6a6:	d9 f7       	brne	.-10     	; 0x1b69e <__fixunssfsi+0x42>
   1b6a8:	3e f4       	brtc	.+14     	; 0x1b6b8 <__fixunssfsi+0x5c>
   1b6aa:	90 95       	com	r25
   1b6ac:	80 95       	com	r24
   1b6ae:	70 95       	com	r23
   1b6b0:	61 95       	neg	r22
   1b6b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6b4:	8f 4f       	sbci	r24, 0xFF	; 255
   1b6b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1b6b8:	08 95       	ret

0001b6ba <__floatunsisf>:
__floatunsisf():
   1b6ba:	e8 94       	clt
   1b6bc:	09 c0       	rjmp	.+18     	; 0x1b6d0 <__floatsisf+0x12>

0001b6be <__floatsisf>:
   1b6be:	97 fb       	bst	r25, 7
   1b6c0:	3e f4       	brtc	.+14     	; 0x1b6d0 <__floatsisf+0x12>
   1b6c2:	90 95       	com	r25
   1b6c4:	80 95       	com	r24
   1b6c6:	70 95       	com	r23
   1b6c8:	61 95       	neg	r22
   1b6ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6cc:	8f 4f       	sbci	r24, 0xFF	; 255
   1b6ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1b6d0:	99 23       	and	r25, r25
   1b6d2:	a9 f0       	breq	.+42     	; 0x1b6fe <__floatsisf+0x40>
   1b6d4:	f9 2f       	mov	r31, r25
   1b6d6:	96 e9       	ldi	r25, 0x96	; 150
   1b6d8:	bb 27       	eor	r27, r27
   1b6da:	93 95       	inc	r25
   1b6dc:	f6 95       	lsr	r31
   1b6de:	87 95       	ror	r24
   1b6e0:	77 95       	ror	r23
   1b6e2:	67 95       	ror	r22
   1b6e4:	b7 95       	ror	r27
   1b6e6:	f1 11       	cpse	r31, r1
   1b6e8:	f8 cf       	rjmp	.-16     	; 0x1b6da <__floatsisf+0x1c>
   1b6ea:	fa f4       	brpl	.+62     	; 0x1b72a <__floatsisf+0x6c>
   1b6ec:	bb 0f       	add	r27, r27
   1b6ee:	11 f4       	brne	.+4      	; 0x1b6f4 <__floatsisf+0x36>
   1b6f0:	60 ff       	sbrs	r22, 0
   1b6f2:	1b c0       	rjmp	.+54     	; 0x1b72a <__floatsisf+0x6c>
   1b6f4:	6f 5f       	subi	r22, 0xFF	; 255
   1b6f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6f8:	8f 4f       	sbci	r24, 0xFF	; 255
   1b6fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1b6fc:	16 c0       	rjmp	.+44     	; 0x1b72a <__floatsisf+0x6c>
   1b6fe:	88 23       	and	r24, r24
   1b700:	11 f0       	breq	.+4      	; 0x1b706 <__floatsisf+0x48>
   1b702:	96 e9       	ldi	r25, 0x96	; 150
   1b704:	11 c0       	rjmp	.+34     	; 0x1b728 <__floatsisf+0x6a>
   1b706:	77 23       	and	r23, r23
   1b708:	21 f0       	breq	.+8      	; 0x1b712 <__floatsisf+0x54>
   1b70a:	9e e8       	ldi	r25, 0x8E	; 142
   1b70c:	87 2f       	mov	r24, r23
   1b70e:	76 2f       	mov	r23, r22
   1b710:	05 c0       	rjmp	.+10     	; 0x1b71c <__floatsisf+0x5e>
   1b712:	66 23       	and	r22, r22
   1b714:	71 f0       	breq	.+28     	; 0x1b732 <__floatsisf+0x74>
   1b716:	96 e8       	ldi	r25, 0x86	; 134
   1b718:	86 2f       	mov	r24, r22
   1b71a:	70 e0       	ldi	r23, 0x00	; 0
   1b71c:	60 e0       	ldi	r22, 0x00	; 0
   1b71e:	2a f0       	brmi	.+10     	; 0x1b72a <__floatsisf+0x6c>
   1b720:	9a 95       	dec	r25
   1b722:	66 0f       	add	r22, r22
   1b724:	77 1f       	adc	r23, r23
   1b726:	88 1f       	adc	r24, r24
   1b728:	da f7       	brpl	.-10     	; 0x1b720 <__floatsisf+0x62>
   1b72a:	88 0f       	add	r24, r24
   1b72c:	96 95       	lsr	r25
   1b72e:	87 95       	ror	r24
   1b730:	97 f9       	bld	r25, 7
   1b732:	08 95       	ret

0001b734 <__fp_cmp>:
__fp_cmp():
   1b734:	99 0f       	add	r25, r25
   1b736:	00 08       	sbc	r0, r0
   1b738:	55 0f       	add	r21, r21
   1b73a:	aa 0b       	sbc	r26, r26
   1b73c:	e0 e8       	ldi	r30, 0x80	; 128
   1b73e:	fe ef       	ldi	r31, 0xFE	; 254
   1b740:	16 16       	cp	r1, r22
   1b742:	17 06       	cpc	r1, r23
   1b744:	e8 07       	cpc	r30, r24
   1b746:	f9 07       	cpc	r31, r25
   1b748:	c0 f0       	brcs	.+48     	; 0x1b77a <__fp_cmp+0x46>
   1b74a:	12 16       	cp	r1, r18
   1b74c:	13 06       	cpc	r1, r19
   1b74e:	e4 07       	cpc	r30, r20
   1b750:	f5 07       	cpc	r31, r21
   1b752:	98 f0       	brcs	.+38     	; 0x1b77a <__fp_cmp+0x46>
   1b754:	62 1b       	sub	r22, r18
   1b756:	73 0b       	sbc	r23, r19
   1b758:	84 0b       	sbc	r24, r20
   1b75a:	95 0b       	sbc	r25, r21
   1b75c:	39 f4       	brne	.+14     	; 0x1b76c <__fp_cmp+0x38>
   1b75e:	0a 26       	eor	r0, r26
   1b760:	61 f0       	breq	.+24     	; 0x1b77a <__fp_cmp+0x46>
   1b762:	23 2b       	or	r18, r19
   1b764:	24 2b       	or	r18, r20
   1b766:	25 2b       	or	r18, r21
   1b768:	21 f4       	brne	.+8      	; 0x1b772 <__fp_cmp+0x3e>
   1b76a:	08 95       	ret
   1b76c:	0a 26       	eor	r0, r26
   1b76e:	09 f4       	brne	.+2      	; 0x1b772 <__fp_cmp+0x3e>
   1b770:	a1 40       	sbci	r26, 0x01	; 1
   1b772:	a6 95       	lsr	r26
   1b774:	8f ef       	ldi	r24, 0xFF	; 255
   1b776:	81 1d       	adc	r24, r1
   1b778:	81 1d       	adc	r24, r1
   1b77a:	08 95       	ret

0001b77c <__fp_inf>:
__fp_inf():
   1b77c:	97 f9       	bld	r25, 7
   1b77e:	9f 67       	ori	r25, 0x7F	; 127
   1b780:	80 e8       	ldi	r24, 0x80	; 128
   1b782:	70 e0       	ldi	r23, 0x00	; 0
   1b784:	60 e0       	ldi	r22, 0x00	; 0
   1b786:	08 95       	ret

0001b788 <__fp_nan>:
__fp_nan():
   1b788:	9f ef       	ldi	r25, 0xFF	; 255
   1b78a:	80 ec       	ldi	r24, 0xC0	; 192
   1b78c:	08 95       	ret

0001b78e <__fp_pscA>:
__fp_pscA():
   1b78e:	00 24       	eor	r0, r0
   1b790:	0a 94       	dec	r0
   1b792:	16 16       	cp	r1, r22
   1b794:	17 06       	cpc	r1, r23
   1b796:	18 06       	cpc	r1, r24
   1b798:	09 06       	cpc	r0, r25
   1b79a:	08 95       	ret

0001b79c <__fp_pscB>:
__fp_pscB():
   1b79c:	00 24       	eor	r0, r0
   1b79e:	0a 94       	dec	r0
   1b7a0:	12 16       	cp	r1, r18
   1b7a2:	13 06       	cpc	r1, r19
   1b7a4:	14 06       	cpc	r1, r20
   1b7a6:	05 06       	cpc	r0, r21
   1b7a8:	08 95       	ret

0001b7aa <__fp_round>:
__fp_round():
   1b7aa:	09 2e       	mov	r0, r25
   1b7ac:	03 94       	inc	r0
   1b7ae:	00 0c       	add	r0, r0
   1b7b0:	11 f4       	brne	.+4      	; 0x1b7b6 <__fp_round+0xc>
   1b7b2:	88 23       	and	r24, r24
   1b7b4:	52 f0       	brmi	.+20     	; 0x1b7ca <__fp_round+0x20>
   1b7b6:	bb 0f       	add	r27, r27
   1b7b8:	40 f4       	brcc	.+16     	; 0x1b7ca <__fp_round+0x20>
   1b7ba:	bf 2b       	or	r27, r31
   1b7bc:	11 f4       	brne	.+4      	; 0x1b7c2 <__fp_round+0x18>
   1b7be:	60 ff       	sbrs	r22, 0
   1b7c0:	04 c0       	rjmp	.+8      	; 0x1b7ca <__fp_round+0x20>
   1b7c2:	6f 5f       	subi	r22, 0xFF	; 255
   1b7c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1b7c6:	8f 4f       	sbci	r24, 0xFF	; 255
   1b7c8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b7ca:	08 95       	ret

0001b7cc <__fp_split3>:
__fp_split3():
   1b7cc:	57 fd       	sbrc	r21, 7
   1b7ce:	90 58       	subi	r25, 0x80	; 128
   1b7d0:	44 0f       	add	r20, r20
   1b7d2:	55 1f       	adc	r21, r21
   1b7d4:	59 f0       	breq	.+22     	; 0x1b7ec <__fp_splitA+0x10>
   1b7d6:	5f 3f       	cpi	r21, 0xFF	; 255
   1b7d8:	71 f0       	breq	.+28     	; 0x1b7f6 <__fp_splitA+0x1a>
   1b7da:	47 95       	ror	r20

0001b7dc <__fp_splitA>:
   1b7dc:	88 0f       	add	r24, r24
   1b7de:	97 fb       	bst	r25, 7
   1b7e0:	99 1f       	adc	r25, r25
   1b7e2:	61 f0       	breq	.+24     	; 0x1b7fc <__fp_splitA+0x20>
   1b7e4:	9f 3f       	cpi	r25, 0xFF	; 255
   1b7e6:	79 f0       	breq	.+30     	; 0x1b806 <__fp_splitA+0x2a>
   1b7e8:	87 95       	ror	r24
   1b7ea:	08 95       	ret
   1b7ec:	12 16       	cp	r1, r18
   1b7ee:	13 06       	cpc	r1, r19
   1b7f0:	14 06       	cpc	r1, r20
   1b7f2:	55 1f       	adc	r21, r21
   1b7f4:	f2 cf       	rjmp	.-28     	; 0x1b7da <__fp_split3+0xe>
   1b7f6:	46 95       	lsr	r20
   1b7f8:	f1 df       	rcall	.-30     	; 0x1b7dc <__fp_splitA>
   1b7fa:	08 c0       	rjmp	.+16     	; 0x1b80c <__fp_splitA+0x30>
   1b7fc:	16 16       	cp	r1, r22
   1b7fe:	17 06       	cpc	r1, r23
   1b800:	18 06       	cpc	r1, r24
   1b802:	99 1f       	adc	r25, r25
   1b804:	f1 cf       	rjmp	.-30     	; 0x1b7e8 <__fp_splitA+0xc>
   1b806:	86 95       	lsr	r24
   1b808:	71 05       	cpc	r23, r1
   1b80a:	61 05       	cpc	r22, r1
   1b80c:	08 94       	sec
   1b80e:	08 95       	ret

0001b810 <__fp_zero>:
__fp_zero():
   1b810:	e8 94       	clt

0001b812 <__fp_szero>:
   1b812:	bb 27       	eor	r27, r27
   1b814:	66 27       	eor	r22, r22
   1b816:	77 27       	eor	r23, r23
   1b818:	cb 01       	movw	r24, r22
   1b81a:	97 f9       	bld	r25, 7
   1b81c:	08 95       	ret

0001b81e <__gesf2>:
__gesf2():
   1b81e:	0e 94 9a db 	call	0x1b734	; 0x1b734 <__fp_cmp>
   1b822:	08 f4       	brcc	.+2      	; 0x1b826 <__gesf2+0x8>
   1b824:	8f ef       	ldi	r24, 0xFF	; 255
   1b826:	08 95       	ret

0001b828 <__mulsf3>:
__mulsf3():
   1b828:	0e 94 27 dc 	call	0x1b84e	; 0x1b84e <__mulsf3x>
   1b82c:	0c 94 d5 db 	jmp	0x1b7aa	; 0x1b7aa <__fp_round>
   1b830:	0e 94 c7 db 	call	0x1b78e	; 0x1b78e <__fp_pscA>
   1b834:	38 f0       	brcs	.+14     	; 0x1b844 <__mulsf3+0x1c>
   1b836:	0e 94 ce db 	call	0x1b79c	; 0x1b79c <__fp_pscB>
   1b83a:	20 f0       	brcs	.+8      	; 0x1b844 <__mulsf3+0x1c>
   1b83c:	95 23       	and	r25, r21
   1b83e:	11 f0       	breq	.+4      	; 0x1b844 <__mulsf3+0x1c>
   1b840:	0c 94 be db 	jmp	0x1b77c	; 0x1b77c <__fp_inf>
   1b844:	0c 94 c4 db 	jmp	0x1b788	; 0x1b788 <__fp_nan>
   1b848:	11 24       	eor	r1, r1
   1b84a:	0c 94 09 dc 	jmp	0x1b812	; 0x1b812 <__fp_szero>

0001b84e <__mulsf3x>:
__mulsf3x():
   1b84e:	0e 94 e6 db 	call	0x1b7cc	; 0x1b7cc <__fp_split3>
   1b852:	70 f3       	brcs	.-36     	; 0x1b830 <__mulsf3+0x8>

0001b854 <__mulsf3_pse>:
   1b854:	95 9f       	mul	r25, r21
   1b856:	c1 f3       	breq	.-16     	; 0x1b848 <__mulsf3+0x20>
   1b858:	95 0f       	add	r25, r21
   1b85a:	50 e0       	ldi	r21, 0x00	; 0
   1b85c:	55 1f       	adc	r21, r21
   1b85e:	62 9f       	mul	r22, r18
   1b860:	f0 01       	movw	r30, r0
   1b862:	72 9f       	mul	r23, r18
   1b864:	bb 27       	eor	r27, r27
   1b866:	f0 0d       	add	r31, r0
   1b868:	b1 1d       	adc	r27, r1
   1b86a:	63 9f       	mul	r22, r19
   1b86c:	aa 27       	eor	r26, r26
   1b86e:	f0 0d       	add	r31, r0
   1b870:	b1 1d       	adc	r27, r1
   1b872:	aa 1f       	adc	r26, r26
   1b874:	64 9f       	mul	r22, r20
   1b876:	66 27       	eor	r22, r22
   1b878:	b0 0d       	add	r27, r0
   1b87a:	a1 1d       	adc	r26, r1
   1b87c:	66 1f       	adc	r22, r22
   1b87e:	82 9f       	mul	r24, r18
   1b880:	22 27       	eor	r18, r18
   1b882:	b0 0d       	add	r27, r0
   1b884:	a1 1d       	adc	r26, r1
   1b886:	62 1f       	adc	r22, r18
   1b888:	73 9f       	mul	r23, r19
   1b88a:	b0 0d       	add	r27, r0
   1b88c:	a1 1d       	adc	r26, r1
   1b88e:	62 1f       	adc	r22, r18
   1b890:	83 9f       	mul	r24, r19
   1b892:	a0 0d       	add	r26, r0
   1b894:	61 1d       	adc	r22, r1
   1b896:	22 1f       	adc	r18, r18
   1b898:	74 9f       	mul	r23, r20
   1b89a:	33 27       	eor	r19, r19
   1b89c:	a0 0d       	add	r26, r0
   1b89e:	61 1d       	adc	r22, r1
   1b8a0:	23 1f       	adc	r18, r19
   1b8a2:	84 9f       	mul	r24, r20
   1b8a4:	60 0d       	add	r22, r0
   1b8a6:	21 1d       	adc	r18, r1
   1b8a8:	82 2f       	mov	r24, r18
   1b8aa:	76 2f       	mov	r23, r22
   1b8ac:	6a 2f       	mov	r22, r26
   1b8ae:	11 24       	eor	r1, r1
   1b8b0:	9f 57       	subi	r25, 0x7F	; 127
   1b8b2:	50 40       	sbci	r21, 0x00	; 0
   1b8b4:	9a f0       	brmi	.+38     	; 0x1b8dc <__mulsf3_pse+0x88>
   1b8b6:	f1 f0       	breq	.+60     	; 0x1b8f4 <__mulsf3_pse+0xa0>
   1b8b8:	88 23       	and	r24, r24
   1b8ba:	4a f0       	brmi	.+18     	; 0x1b8ce <__mulsf3_pse+0x7a>
   1b8bc:	ee 0f       	add	r30, r30
   1b8be:	ff 1f       	adc	r31, r31
   1b8c0:	bb 1f       	adc	r27, r27
   1b8c2:	66 1f       	adc	r22, r22
   1b8c4:	77 1f       	adc	r23, r23
   1b8c6:	88 1f       	adc	r24, r24
   1b8c8:	91 50       	subi	r25, 0x01	; 1
   1b8ca:	50 40       	sbci	r21, 0x00	; 0
   1b8cc:	a9 f7       	brne	.-22     	; 0x1b8b8 <__mulsf3_pse+0x64>
   1b8ce:	9e 3f       	cpi	r25, 0xFE	; 254
   1b8d0:	51 05       	cpc	r21, r1
   1b8d2:	80 f0       	brcs	.+32     	; 0x1b8f4 <__mulsf3_pse+0xa0>
   1b8d4:	0c 94 be db 	jmp	0x1b77c	; 0x1b77c <__fp_inf>
   1b8d8:	0c 94 09 dc 	jmp	0x1b812	; 0x1b812 <__fp_szero>
   1b8dc:	5f 3f       	cpi	r21, 0xFF	; 255
   1b8de:	e4 f3       	brlt	.-8      	; 0x1b8d8 <__mulsf3_pse+0x84>
   1b8e0:	98 3e       	cpi	r25, 0xE8	; 232
   1b8e2:	d4 f3       	brlt	.-12     	; 0x1b8d8 <__mulsf3_pse+0x84>
   1b8e4:	86 95       	lsr	r24
   1b8e6:	77 95       	ror	r23
   1b8e8:	67 95       	ror	r22
   1b8ea:	b7 95       	ror	r27
   1b8ec:	f7 95       	ror	r31
   1b8ee:	e7 95       	ror	r30
   1b8f0:	9f 5f       	subi	r25, 0xFF	; 255
   1b8f2:	c1 f7       	brne	.-16     	; 0x1b8e4 <__mulsf3_pse+0x90>
   1b8f4:	fe 2b       	or	r31, r30
   1b8f6:	88 0f       	add	r24, r24
   1b8f8:	91 1d       	adc	r25, r1
   1b8fa:	96 95       	lsr	r25
   1b8fc:	87 95       	ror	r24
   1b8fe:	97 f9       	bld	r25, 7
   1b900:	08 95       	ret

0001b902 <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1b902:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1b904:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1b906:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1b908:	0e 94 1d dd 	call	0x1ba3a	; 0x1ba3a <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1b90c:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1b90e:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1b910:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1b912:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1b914:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1b916:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1b918:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1b91a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1b91c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1b91e:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1b920:	08 95       	ret

0001b922 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1b922:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1b924:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1b926:	04 c0       	rjmp	.+8      	; 0x1b930 <__udivmodqi4_ep>

0001b928 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1b928:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1b92a:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1b92c:	08 f0       	brcs	.+2      	; 0x1b930 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1b92e:	96 1b       	sub	r25, r22

0001b930 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1b930:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1b932:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1b934:	c9 f7       	brne	.-14     	; 0x1b928 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1b936:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1b938:	08 95       	ret

0001b93a <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1b93a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1b93c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1b93e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1b940:	07 c0       	rjmp	.+14     	; 0x1b950 <__udivmodhi4_ep>

0001b942 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1b942:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1b944:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1b946:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1b948:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1b94a:	10 f0       	brcs	.+4      	; 0x1b950 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1b94c:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1b94e:	b7 0b       	sbc	r27, r23

0001b950 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1b950:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1b952:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1b954:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1b956:	a9 f7       	brne	.-22     	; 0x1b942 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1b958:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1b95a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1b95c:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1b95e:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1b960:	08 95       	ret

0001b962 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1b962:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1b964:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1b966:	16 f4       	brtc	.+4      	; 0x1b96c <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1b968:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1b96a:	07 d0       	rcall	.+14     	; 0x1b97a <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1b96c:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1b96e:	09 d0       	rcall	.+18     	; 0x1b982 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1b970:	0e 94 9d dc 	call	0x1b93a	; 0x1b93a <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1b974:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1b976:	05 d0       	rcall	.+10     	; 0x1b982 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1b978:	3e f4       	brtc	.+14     	; 0x1b988 <__divmodhi4_exit>

0001b97a <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1b97a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1b97c:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1b97e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1b980:	08 95       	ret

0001b982 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1b982:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1b984:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1b986:	7f 4f       	sbci	r23, 0xFF	; 255

0001b988 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1b988:	08 95       	ret

0001b98a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1b98a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1b98c:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1b98e:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1b990:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1b992:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1b994:	0d c0       	rjmp	.+26     	; 0x1b9b0 <__udivmodsi4_ep>

0001b996 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1b996:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1b998:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1b99a:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1b99c:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1b99e:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1b9a0:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1b9a2:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1b9a4:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1b9a6:	20 f0       	brcs	.+8      	; 0x1b9b0 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1b9a8:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1b9aa:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1b9ac:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1b9ae:	f5 0b       	sbc	r31, r21

0001b9b0 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1b9b0:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1b9b2:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1b9b4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1b9b6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1b9b8:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1b9ba:	69 f7       	brne	.-38     	; 0x1b996 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1b9bc:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1b9be:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1b9c0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1b9c2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1b9c4:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1b9c6:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1b9c8:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1b9ca:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1b9cc:	08 95       	ret

0001b9ce <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1b9ce:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1b9d0:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1b9d2:	1e f4       	brtc	.+6      	; 0x1b9da <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1b9d4:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1b9d6:	0e 94 fe dc 	call	0x1b9fc	; 0x1b9fc <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1b9da:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1b9dc:	07 d0       	rcall	.+14     	; 0x1b9ec <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1b9de:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1b9e2:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1b9e4:	03 d0       	rcall	.+6      	; 0x1b9ec <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1b9e6:	4e f4       	brtc	.+18     	; 0x1b9fa <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1b9e8:	0c 94 fe dc 	jmp	0x1b9fc	; 0x1b9fc <__negsi2>

0001b9ec <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1b9ec:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1b9ee:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1b9f0:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1b9f2:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1b9f4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1b9f6:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1b9f8:	5f 4f       	sbci	r21, 0xFF	; 255

0001b9fa <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1b9fa:	08 95       	ret

0001b9fc <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1b9fc:	90 95       	com	r25
   1b9fe:	80 95       	com	r24
   1ba00:	70 95       	com	r23
   1ba02:	61 95       	neg	r22
   1ba04:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba06:	8f 4f       	sbci	r24, 0xFF	; 255
   1ba08:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1ba0a:	08 95       	ret

0001ba0c <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1ba0c:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1ba0e:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1ba10:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1ba12:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1ba14:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1ba16:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1ba18:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1ba1a:	19 94       	eijmp

0001ba1c <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1ba1c:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1ba1e:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1ba20:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1ba22:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1ba24:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1ba26:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1ba28:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1ba2a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1ba2c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1ba2e:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1ba30:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1ba32:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1ba34:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1ba36:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1ba38:	08 95       	ret

0001ba3a <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1ba3a:	0e 94 0e dd 	call	0x1ba1c	; 0x1ba1c <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1ba3e:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1ba40:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1ba42:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1ba44:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1ba46:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1ba48:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1ba4a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1ba4c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1ba4e:	08 95       	ret

0001ba50 <dtostrf>:
dtostrf():
   1ba50:	ef 92       	push	r14
   1ba52:	0f 93       	push	r16
   1ba54:	1f 93       	push	r17
   1ba56:	cf 93       	push	r28
   1ba58:	df 93       	push	r29
   1ba5a:	e8 01       	movw	r28, r16
   1ba5c:	34 e0       	ldi	r19, 0x04	; 4
   1ba5e:	47 fd       	sbrc	r20, 7
   1ba60:	34 e1       	ldi	r19, 0x14	; 20
   1ba62:	04 2e       	mov	r0, r20
   1ba64:	00 0c       	add	r0, r0
   1ba66:	55 0b       	sbc	r21, r21
   1ba68:	57 ff       	sbrs	r21, 7
   1ba6a:	03 c0       	rjmp	.+6      	; 0x1ba72 <dtostrf+0x22>
   1ba6c:	51 95       	neg	r21
   1ba6e:	41 95       	neg	r20
   1ba70:	51 09       	sbc	r21, r1
   1ba72:	e3 2e       	mov	r14, r19
   1ba74:	02 2f       	mov	r16, r18
   1ba76:	24 2f       	mov	r18, r20
   1ba78:	ae 01       	movw	r20, r28
   1ba7a:	0e 94 2b e4 	call	0x1c856	; 0x1c856 <dtoa_prf>
   1ba7e:	ce 01       	movw	r24, r28
   1ba80:	df 91       	pop	r29
   1ba82:	cf 91       	pop	r28
   1ba84:	1f 91       	pop	r17
   1ba86:	0f 91       	pop	r16
   1ba88:	ef 90       	pop	r14
   1ba8a:	08 95       	ret

0001ba8c <malloc>:
malloc():
   1ba8c:	0f 93       	push	r16
   1ba8e:	1f 93       	push	r17
   1ba90:	cf 93       	push	r28
   1ba92:	df 93       	push	r29
   1ba94:	82 30       	cpi	r24, 0x02	; 2
   1ba96:	91 05       	cpc	r25, r1
   1ba98:	10 f4       	brcc	.+4      	; 0x1ba9e <malloc+0x12>
   1ba9a:	82 e0       	ldi	r24, 0x02	; 2
   1ba9c:	90 e0       	ldi	r25, 0x00	; 0
   1ba9e:	e0 91 c7 14 	lds	r30, 0x14C7	; 0x8014c7 <__flp>
   1baa2:	f0 91 c8 14 	lds	r31, 0x14C8	; 0x8014c8 <__flp+0x1>
   1baa6:	30 e0       	ldi	r19, 0x00	; 0
   1baa8:	20 e0       	ldi	r18, 0x00	; 0
   1baaa:	b0 e0       	ldi	r27, 0x00	; 0
   1baac:	a0 e0       	ldi	r26, 0x00	; 0
   1baae:	30 97       	sbiw	r30, 0x00	; 0
   1bab0:	99 f4       	brne	.+38     	; 0x1bad8 <malloc+0x4c>
   1bab2:	21 15       	cp	r18, r1
   1bab4:	31 05       	cpc	r19, r1
   1bab6:	09 f4       	brne	.+2      	; 0x1baba <malloc+0x2e>
   1bab8:	4a c0       	rjmp	.+148    	; 0x1bb4e <malloc+0xc2>
   1baba:	28 1b       	sub	r18, r24
   1babc:	39 0b       	sbc	r19, r25
   1babe:	24 30       	cpi	r18, 0x04	; 4
   1bac0:	31 05       	cpc	r19, r1
   1bac2:	d8 f5       	brcc	.+118    	; 0x1bb3a <malloc+0xae>
   1bac4:	8a 81       	ldd	r24, Y+2	; 0x02
   1bac6:	9b 81       	ldd	r25, Y+3	; 0x03
   1bac8:	61 15       	cp	r22, r1
   1baca:	71 05       	cpc	r23, r1
   1bacc:	89 f1       	breq	.+98     	; 0x1bb30 <malloc+0xa4>
   1bace:	fb 01       	movw	r30, r22
   1bad0:	93 83       	std	Z+3, r25	; 0x03
   1bad2:	82 83       	std	Z+2, r24	; 0x02
   1bad4:	fe 01       	movw	r30, r28
   1bad6:	11 c0       	rjmp	.+34     	; 0x1bafa <malloc+0x6e>
   1bad8:	40 81       	ld	r20, Z
   1bada:	51 81       	ldd	r21, Z+1	; 0x01
   1badc:	02 81       	ldd	r16, Z+2	; 0x02
   1bade:	13 81       	ldd	r17, Z+3	; 0x03
   1bae0:	48 17       	cp	r20, r24
   1bae2:	59 07       	cpc	r21, r25
   1bae4:	e0 f0       	brcs	.+56     	; 0x1bb1e <malloc+0x92>
   1bae6:	48 17       	cp	r20, r24
   1bae8:	59 07       	cpc	r21, r25
   1baea:	99 f4       	brne	.+38     	; 0x1bb12 <malloc+0x86>
   1baec:	10 97       	sbiw	r26, 0x00	; 0
   1baee:	61 f0       	breq	.+24     	; 0x1bb08 <malloc+0x7c>
   1baf0:	12 96       	adiw	r26, 0x02	; 2
   1baf2:	0c 93       	st	X, r16
   1baf4:	12 97       	sbiw	r26, 0x02	; 2
   1baf6:	13 96       	adiw	r26, 0x03	; 3
   1baf8:	1c 93       	st	X, r17
   1bafa:	32 96       	adiw	r30, 0x02	; 2
   1bafc:	cf 01       	movw	r24, r30
   1bafe:	df 91       	pop	r29
   1bb00:	cf 91       	pop	r28
   1bb02:	1f 91       	pop	r17
   1bb04:	0f 91       	pop	r16
   1bb06:	08 95       	ret
   1bb08:	00 93 c7 14 	sts	0x14C7, r16	; 0x8014c7 <__flp>
   1bb0c:	10 93 c8 14 	sts	0x14C8, r17	; 0x8014c8 <__flp+0x1>
   1bb10:	f4 cf       	rjmp	.-24     	; 0x1bafa <malloc+0x6e>
   1bb12:	21 15       	cp	r18, r1
   1bb14:	31 05       	cpc	r19, r1
   1bb16:	51 f0       	breq	.+20     	; 0x1bb2c <malloc+0xa0>
   1bb18:	42 17       	cp	r20, r18
   1bb1a:	53 07       	cpc	r21, r19
   1bb1c:	38 f0       	brcs	.+14     	; 0x1bb2c <malloc+0xa0>
   1bb1e:	a9 01       	movw	r20, r18
   1bb20:	db 01       	movw	r26, r22
   1bb22:	9a 01       	movw	r18, r20
   1bb24:	bd 01       	movw	r22, r26
   1bb26:	df 01       	movw	r26, r30
   1bb28:	f8 01       	movw	r30, r16
   1bb2a:	c1 cf       	rjmp	.-126    	; 0x1baae <malloc+0x22>
   1bb2c:	ef 01       	movw	r28, r30
   1bb2e:	f9 cf       	rjmp	.-14     	; 0x1bb22 <malloc+0x96>
   1bb30:	90 93 c8 14 	sts	0x14C8, r25	; 0x8014c8 <__flp+0x1>
   1bb34:	80 93 c7 14 	sts	0x14C7, r24	; 0x8014c7 <__flp>
   1bb38:	cd cf       	rjmp	.-102    	; 0x1bad4 <malloc+0x48>
   1bb3a:	fe 01       	movw	r30, r28
   1bb3c:	e2 0f       	add	r30, r18
   1bb3e:	f3 1f       	adc	r31, r19
   1bb40:	81 93       	st	Z+, r24
   1bb42:	91 93       	st	Z+, r25
   1bb44:	22 50       	subi	r18, 0x02	; 2
   1bb46:	31 09       	sbc	r19, r1
   1bb48:	39 83       	std	Y+1, r19	; 0x01
   1bb4a:	28 83       	st	Y, r18
   1bb4c:	d7 cf       	rjmp	.-82     	; 0x1bafc <malloc+0x70>
   1bb4e:	20 91 c5 14 	lds	r18, 0x14C5	; 0x8014c5 <__brkval>
   1bb52:	30 91 c6 14 	lds	r19, 0x14C6	; 0x8014c6 <__brkval+0x1>
   1bb56:	23 2b       	or	r18, r19
   1bb58:	41 f4       	brne	.+16     	; 0x1bb6a <malloc+0xde>
   1bb5a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   1bb5e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   1bb62:	30 93 c6 14 	sts	0x14C6, r19	; 0x8014c6 <__brkval+0x1>
   1bb66:	20 93 c5 14 	sts	0x14C5, r18	; 0x8014c5 <__brkval>
   1bb6a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1bb6e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1bb72:	21 15       	cp	r18, r1
   1bb74:	31 05       	cpc	r19, r1
   1bb76:	41 f4       	brne	.+16     	; 0x1bb88 <malloc+0xfc>
   1bb78:	2d b7       	in	r18, 0x3d	; 61
   1bb7a:	3e b7       	in	r19, 0x3e	; 62
   1bb7c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1bb80:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1bb84:	24 1b       	sub	r18, r20
   1bb86:	35 0b       	sbc	r19, r21
   1bb88:	e0 91 c5 14 	lds	r30, 0x14C5	; 0x8014c5 <__brkval>
   1bb8c:	f0 91 c6 14 	lds	r31, 0x14C6	; 0x8014c6 <__brkval+0x1>
   1bb90:	e2 17       	cp	r30, r18
   1bb92:	f3 07       	cpc	r31, r19
   1bb94:	a0 f4       	brcc	.+40     	; 0x1bbbe <malloc+0x132>
   1bb96:	2e 1b       	sub	r18, r30
   1bb98:	3f 0b       	sbc	r19, r31
   1bb9a:	28 17       	cp	r18, r24
   1bb9c:	39 07       	cpc	r19, r25
   1bb9e:	78 f0       	brcs	.+30     	; 0x1bbbe <malloc+0x132>
   1bba0:	ac 01       	movw	r20, r24
   1bba2:	4e 5f       	subi	r20, 0xFE	; 254
   1bba4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bba6:	24 17       	cp	r18, r20
   1bba8:	35 07       	cpc	r19, r21
   1bbaa:	48 f0       	brcs	.+18     	; 0x1bbbe <malloc+0x132>
   1bbac:	4e 0f       	add	r20, r30
   1bbae:	5f 1f       	adc	r21, r31
   1bbb0:	50 93 c6 14 	sts	0x14C6, r21	; 0x8014c6 <__brkval+0x1>
   1bbb4:	40 93 c5 14 	sts	0x14C5, r20	; 0x8014c5 <__brkval>
   1bbb8:	81 93       	st	Z+, r24
   1bbba:	91 93       	st	Z+, r25
   1bbbc:	9f cf       	rjmp	.-194    	; 0x1bafc <malloc+0x70>
   1bbbe:	f0 e0       	ldi	r31, 0x00	; 0
   1bbc0:	e0 e0       	ldi	r30, 0x00	; 0
   1bbc2:	9c cf       	rjmp	.-200    	; 0x1bafc <malloc+0x70>

0001bbc4 <free>:
free():
   1bbc4:	cf 93       	push	r28
   1bbc6:	df 93       	push	r29
   1bbc8:	00 97       	sbiw	r24, 0x00	; 0
   1bbca:	e9 f0       	breq	.+58     	; 0x1bc06 <free+0x42>
   1bbcc:	fc 01       	movw	r30, r24
   1bbce:	32 97       	sbiw	r30, 0x02	; 2
   1bbd0:	13 82       	std	Z+3, r1	; 0x03
   1bbd2:	12 82       	std	Z+2, r1	; 0x02
   1bbd4:	a0 91 c7 14 	lds	r26, 0x14C7	; 0x8014c7 <__flp>
   1bbd8:	b0 91 c8 14 	lds	r27, 0x14C8	; 0x8014c8 <__flp+0x1>
   1bbdc:	ed 01       	movw	r28, r26
   1bbde:	30 e0       	ldi	r19, 0x00	; 0
   1bbe0:	20 e0       	ldi	r18, 0x00	; 0
   1bbe2:	10 97       	sbiw	r26, 0x00	; 0
   1bbe4:	a1 f4       	brne	.+40     	; 0x1bc0e <free+0x4a>
   1bbe6:	20 81       	ld	r18, Z
   1bbe8:	31 81       	ldd	r19, Z+1	; 0x01
   1bbea:	82 0f       	add	r24, r18
   1bbec:	93 1f       	adc	r25, r19
   1bbee:	20 91 c5 14 	lds	r18, 0x14C5	; 0x8014c5 <__brkval>
   1bbf2:	30 91 c6 14 	lds	r19, 0x14C6	; 0x8014c6 <__brkval+0x1>
   1bbf6:	28 17       	cp	r18, r24
   1bbf8:	39 07       	cpc	r19, r25
   1bbfa:	09 f0       	breq	.+2      	; 0x1bbfe <free+0x3a>
   1bbfc:	61 c0       	rjmp	.+194    	; 0x1bcc0 <free+0xfc>
   1bbfe:	f0 93 c6 14 	sts	0x14C6, r31	; 0x8014c6 <__brkval+0x1>
   1bc02:	e0 93 c5 14 	sts	0x14C5, r30	; 0x8014c5 <__brkval>
   1bc06:	df 91       	pop	r29
   1bc08:	cf 91       	pop	r28
   1bc0a:	08 95       	ret
   1bc0c:	ea 01       	movw	r28, r20
   1bc0e:	ce 17       	cp	r28, r30
   1bc10:	df 07       	cpc	r29, r31
   1bc12:	e8 f5       	brcc	.+122    	; 0x1bc8e <free+0xca>
   1bc14:	4a 81       	ldd	r20, Y+2	; 0x02
   1bc16:	5b 81       	ldd	r21, Y+3	; 0x03
   1bc18:	9e 01       	movw	r18, r28
   1bc1a:	41 15       	cp	r20, r1
   1bc1c:	51 05       	cpc	r21, r1
   1bc1e:	b1 f7       	brne	.-20     	; 0x1bc0c <free+0x48>
   1bc20:	e9 01       	movw	r28, r18
   1bc22:	fb 83       	std	Y+3, r31	; 0x03
   1bc24:	ea 83       	std	Y+2, r30	; 0x02
   1bc26:	49 91       	ld	r20, Y+
   1bc28:	59 91       	ld	r21, Y+
   1bc2a:	c4 0f       	add	r28, r20
   1bc2c:	d5 1f       	adc	r29, r21
   1bc2e:	ec 17       	cp	r30, r28
   1bc30:	fd 07       	cpc	r31, r29
   1bc32:	61 f4       	brne	.+24     	; 0x1bc4c <free+0x88>
   1bc34:	80 81       	ld	r24, Z
   1bc36:	91 81       	ldd	r25, Z+1	; 0x01
   1bc38:	02 96       	adiw	r24, 0x02	; 2
   1bc3a:	84 0f       	add	r24, r20
   1bc3c:	95 1f       	adc	r25, r21
   1bc3e:	e9 01       	movw	r28, r18
   1bc40:	99 83       	std	Y+1, r25	; 0x01
   1bc42:	88 83       	st	Y, r24
   1bc44:	82 81       	ldd	r24, Z+2	; 0x02
   1bc46:	93 81       	ldd	r25, Z+3	; 0x03
   1bc48:	9b 83       	std	Y+3, r25	; 0x03
   1bc4a:	8a 83       	std	Y+2, r24	; 0x02
   1bc4c:	f0 e0       	ldi	r31, 0x00	; 0
   1bc4e:	e0 e0       	ldi	r30, 0x00	; 0
   1bc50:	12 96       	adiw	r26, 0x02	; 2
   1bc52:	8d 91       	ld	r24, X+
   1bc54:	9c 91       	ld	r25, X
   1bc56:	13 97       	sbiw	r26, 0x03	; 3
   1bc58:	00 97       	sbiw	r24, 0x00	; 0
   1bc5a:	b9 f5       	brne	.+110    	; 0x1bcca <free+0x106>
   1bc5c:	2d 91       	ld	r18, X+
   1bc5e:	3c 91       	ld	r19, X
   1bc60:	11 97       	sbiw	r26, 0x01	; 1
   1bc62:	cd 01       	movw	r24, r26
   1bc64:	02 96       	adiw	r24, 0x02	; 2
   1bc66:	82 0f       	add	r24, r18
   1bc68:	93 1f       	adc	r25, r19
   1bc6a:	20 91 c5 14 	lds	r18, 0x14C5	; 0x8014c5 <__brkval>
   1bc6e:	30 91 c6 14 	lds	r19, 0x14C6	; 0x8014c6 <__brkval+0x1>
   1bc72:	28 17       	cp	r18, r24
   1bc74:	39 07       	cpc	r19, r25
   1bc76:	39 f6       	brne	.-114    	; 0x1bc06 <free+0x42>
   1bc78:	30 97       	sbiw	r30, 0x00	; 0
   1bc7a:	51 f5       	brne	.+84     	; 0x1bcd0 <free+0x10c>
   1bc7c:	10 92 c8 14 	sts	0x14C8, r1	; 0x8014c8 <__flp+0x1>
   1bc80:	10 92 c7 14 	sts	0x14C7, r1	; 0x8014c7 <__flp>
   1bc84:	b0 93 c6 14 	sts	0x14C6, r27	; 0x8014c6 <__brkval+0x1>
   1bc88:	a0 93 c5 14 	sts	0x14C5, r26	; 0x8014c5 <__brkval>
   1bc8c:	bc cf       	rjmp	.-136    	; 0x1bc06 <free+0x42>
   1bc8e:	d3 83       	std	Z+3, r29	; 0x03
   1bc90:	c2 83       	std	Z+2, r28	; 0x02
   1bc92:	40 81       	ld	r20, Z
   1bc94:	51 81       	ldd	r21, Z+1	; 0x01
   1bc96:	84 0f       	add	r24, r20
   1bc98:	95 1f       	adc	r25, r21
   1bc9a:	c8 17       	cp	r28, r24
   1bc9c:	d9 07       	cpc	r29, r25
   1bc9e:	61 f4       	brne	.+24     	; 0x1bcb8 <free+0xf4>
   1bca0:	4e 5f       	subi	r20, 0xFE	; 254
   1bca2:	5f 4f       	sbci	r21, 0xFF	; 255
   1bca4:	88 81       	ld	r24, Y
   1bca6:	99 81       	ldd	r25, Y+1	; 0x01
   1bca8:	48 0f       	add	r20, r24
   1bcaa:	59 1f       	adc	r21, r25
   1bcac:	51 83       	std	Z+1, r21	; 0x01
   1bcae:	40 83       	st	Z, r20
   1bcb0:	8a 81       	ldd	r24, Y+2	; 0x02
   1bcb2:	9b 81       	ldd	r25, Y+3	; 0x03
   1bcb4:	93 83       	std	Z+3, r25	; 0x03
   1bcb6:	82 83       	std	Z+2, r24	; 0x02
   1bcb8:	21 15       	cp	r18, r1
   1bcba:	31 05       	cpc	r19, r1
   1bcbc:	09 f0       	breq	.+2      	; 0x1bcc0 <free+0xfc>
   1bcbe:	b0 cf       	rjmp	.-160    	; 0x1bc20 <free+0x5c>
   1bcc0:	f0 93 c8 14 	sts	0x14C8, r31	; 0x8014c8 <__flp+0x1>
   1bcc4:	e0 93 c7 14 	sts	0x14C7, r30	; 0x8014c7 <__flp>
   1bcc8:	9e cf       	rjmp	.-196    	; 0x1bc06 <free+0x42>
   1bcca:	fd 01       	movw	r30, r26
   1bccc:	dc 01       	movw	r26, r24
   1bcce:	c0 cf       	rjmp	.-128    	; 0x1bc50 <free+0x8c>
   1bcd0:	13 82       	std	Z+3, r1	; 0x03
   1bcd2:	12 82       	std	Z+2, r1	; 0x02
   1bcd4:	d7 cf       	rjmp	.-82     	; 0x1bc84 <free+0xc0>

0001bcd6 <realloc>:
realloc():
   1bcd6:	4f 92       	push	r4
   1bcd8:	5f 92       	push	r5
   1bcda:	6f 92       	push	r6
   1bcdc:	7f 92       	push	r7
   1bcde:	8f 92       	push	r8
   1bce0:	9f 92       	push	r9
   1bce2:	af 92       	push	r10
   1bce4:	bf 92       	push	r11
   1bce6:	cf 92       	push	r12
   1bce8:	df 92       	push	r13
   1bcea:	ef 92       	push	r14
   1bcec:	ff 92       	push	r15
   1bcee:	0f 93       	push	r16
   1bcf0:	1f 93       	push	r17
   1bcf2:	cf 93       	push	r28
   1bcf4:	df 93       	push	r29
   1bcf6:	8c 01       	movw	r16, r24
   1bcf8:	00 97       	sbiw	r24, 0x00	; 0
   1bcfa:	99 f4       	brne	.+38     	; 0x1bd22 <realloc+0x4c>
   1bcfc:	cb 01       	movw	r24, r22
   1bcfe:	df 91       	pop	r29
   1bd00:	cf 91       	pop	r28
   1bd02:	1f 91       	pop	r17
   1bd04:	0f 91       	pop	r16
   1bd06:	ff 90       	pop	r15
   1bd08:	ef 90       	pop	r14
   1bd0a:	df 90       	pop	r13
   1bd0c:	cf 90       	pop	r12
   1bd0e:	bf 90       	pop	r11
   1bd10:	af 90       	pop	r10
   1bd12:	9f 90       	pop	r9
   1bd14:	8f 90       	pop	r8
   1bd16:	7f 90       	pop	r7
   1bd18:	6f 90       	pop	r6
   1bd1a:	5f 90       	pop	r5
   1bd1c:	4f 90       	pop	r4
   1bd1e:	0c 94 46 dd 	jmp	0x1ba8c	; 0x1ba8c <malloc>
   1bd22:	fc 01       	movw	r30, r24
   1bd24:	e6 0f       	add	r30, r22
   1bd26:	f7 1f       	adc	r31, r23
   1bd28:	9c 01       	movw	r18, r24
   1bd2a:	22 50       	subi	r18, 0x02	; 2
   1bd2c:	31 09       	sbc	r19, r1
   1bd2e:	e2 17       	cp	r30, r18
   1bd30:	f3 07       	cpc	r31, r19
   1bd32:	08 f4       	brcc	.+2      	; 0x1bd36 <realloc+0x60>
   1bd34:	ae c0       	rjmp	.+348    	; 0x1be92 <realloc+0x1bc>
   1bd36:	d9 01       	movw	r26, r18
   1bd38:	cd 91       	ld	r28, X+
   1bd3a:	dc 91       	ld	r29, X
   1bd3c:	11 97       	sbiw	r26, 0x01	; 1
   1bd3e:	c6 17       	cp	r28, r22
   1bd40:	d7 07       	cpc	r29, r23
   1bd42:	20 f1       	brcs	.+72     	; 0x1bd8c <realloc+0xb6>
   1bd44:	c5 30       	cpi	r28, 0x05	; 5
   1bd46:	d1 05       	cpc	r29, r1
   1bd48:	78 f0       	brcs	.+30     	; 0x1bd68 <realloc+0x92>
   1bd4a:	ce 01       	movw	r24, r28
   1bd4c:	04 97       	sbiw	r24, 0x04	; 4
   1bd4e:	86 17       	cp	r24, r22
   1bd50:	97 07       	cpc	r25, r23
   1bd52:	50 f0       	brcs	.+20     	; 0x1bd68 <realloc+0x92>
   1bd54:	c6 1b       	sub	r28, r22
   1bd56:	d7 0b       	sbc	r29, r23
   1bd58:	22 97       	sbiw	r28, 0x02	; 2
   1bd5a:	c1 93       	st	Z+, r28
   1bd5c:	d1 93       	st	Z+, r29
   1bd5e:	6d 93       	st	X+, r22
   1bd60:	7c 93       	st	X, r23
   1bd62:	cf 01       	movw	r24, r30
   1bd64:	0e 94 e2 dd 	call	0x1bbc4	; 0x1bbc4 <free>
   1bd68:	c8 01       	movw	r24, r16
   1bd6a:	df 91       	pop	r29
   1bd6c:	cf 91       	pop	r28
   1bd6e:	1f 91       	pop	r17
   1bd70:	0f 91       	pop	r16
   1bd72:	ff 90       	pop	r15
   1bd74:	ef 90       	pop	r14
   1bd76:	df 90       	pop	r13
   1bd78:	cf 90       	pop	r12
   1bd7a:	bf 90       	pop	r11
   1bd7c:	af 90       	pop	r10
   1bd7e:	9f 90       	pop	r9
   1bd80:	8f 90       	pop	r8
   1bd82:	7f 90       	pop	r7
   1bd84:	6f 90       	pop	r6
   1bd86:	5f 90       	pop	r5
   1bd88:	4f 90       	pop	r4
   1bd8a:	08 95       	ret
   1bd8c:	5b 01       	movw	r10, r22
   1bd8e:	ac 1a       	sub	r10, r28
   1bd90:	bd 0a       	sbc	r11, r29
   1bd92:	4c 01       	movw	r8, r24
   1bd94:	8c 0e       	add	r8, r28
   1bd96:	9d 1e       	adc	r9, r29
   1bd98:	a0 91 c7 14 	lds	r26, 0x14C7	; 0x8014c7 <__flp>
   1bd9c:	b0 91 c8 14 	lds	r27, 0x14C8	; 0x8014c8 <__flp+0x1>
   1bda0:	51 2c       	mov	r5, r1
   1bda2:	41 2c       	mov	r4, r1
   1bda4:	f1 2c       	mov	r15, r1
   1bda6:	e1 2c       	mov	r14, r1
   1bda8:	10 97       	sbiw	r26, 0x00	; 0
   1bdaa:	31 f5       	brne	.+76     	; 0x1bdf8 <realloc+0x122>
   1bdac:	80 91 c5 14 	lds	r24, 0x14C5	; 0x8014c5 <__brkval>
   1bdb0:	90 91 c6 14 	lds	r25, 0x14C6	; 0x8014c6 <__brkval+0x1>
   1bdb4:	88 15       	cp	r24, r8
   1bdb6:	99 05       	cpc	r25, r9
   1bdb8:	09 f0       	breq	.+2      	; 0x1bdbc <realloc+0xe6>
   1bdba:	5c c0       	rjmp	.+184    	; 0x1be74 <realloc+0x19e>
   1bdbc:	46 16       	cp	r4, r22
   1bdbe:	57 06       	cpc	r5, r23
   1bdc0:	08 f0       	brcs	.+2      	; 0x1bdc4 <realloc+0xee>
   1bdc2:	58 c0       	rjmp	.+176    	; 0x1be74 <realloc+0x19e>
   1bdc4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1bdc8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1bdcc:	00 97       	sbiw	r24, 0x00	; 0
   1bdce:	41 f4       	brne	.+16     	; 0x1bde0 <realloc+0x10a>
   1bdd0:	8d b7       	in	r24, 0x3d	; 61
   1bdd2:	9e b7       	in	r25, 0x3e	; 62
   1bdd4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1bdd8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1bddc:	84 1b       	sub	r24, r20
   1bdde:	95 0b       	sbc	r25, r21
   1bde0:	e8 17       	cp	r30, r24
   1bde2:	f9 07       	cpc	r31, r25
   1bde4:	08 f0       	brcs	.+2      	; 0x1bde8 <realloc+0x112>
   1bde6:	55 c0       	rjmp	.+170    	; 0x1be92 <realloc+0x1bc>
   1bde8:	f0 93 c6 14 	sts	0x14C6, r31	; 0x8014c6 <__brkval+0x1>
   1bdec:	e0 93 c5 14 	sts	0x14C5, r30	; 0x8014c5 <__brkval>
   1bdf0:	f9 01       	movw	r30, r18
   1bdf2:	71 83       	std	Z+1, r23	; 0x01
   1bdf4:	60 83       	st	Z, r22
   1bdf6:	b8 cf       	rjmp	.-144    	; 0x1bd68 <realloc+0x92>
   1bdf8:	8d 91       	ld	r24, X+
   1bdfa:	9c 91       	ld	r25, X
   1bdfc:	11 97       	sbiw	r26, 0x01	; 1
   1bdfe:	12 96       	adiw	r26, 0x02	; 2
   1be00:	6c 90       	ld	r6, X
   1be02:	12 97       	sbiw	r26, 0x02	; 2
   1be04:	13 96       	adiw	r26, 0x03	; 3
   1be06:	7c 90       	ld	r7, X
   1be08:	13 97       	sbiw	r26, 0x03	; 3
   1be0a:	a8 15       	cp	r26, r8
   1be0c:	b9 05       	cpc	r27, r9
   1be0e:	59 f5       	brne	.+86     	; 0x1be66 <realloc+0x190>
   1be10:	6c 01       	movw	r12, r24
   1be12:	42 e0       	ldi	r20, 0x02	; 2
   1be14:	c4 0e       	add	r12, r20
   1be16:	d1 1c       	adc	r13, r1
   1be18:	ca 14       	cp	r12, r10
   1be1a:	db 04       	cpc	r13, r11
   1be1c:	20 f1       	brcs	.+72     	; 0x1be66 <realloc+0x190>
   1be1e:	ac 01       	movw	r20, r24
   1be20:	4a 19       	sub	r20, r10
   1be22:	5b 09       	sbc	r21, r11
   1be24:	da 01       	movw	r26, r20
   1be26:	12 96       	adiw	r26, 0x02	; 2
   1be28:	15 97       	sbiw	r26, 0x05	; 5
   1be2a:	80 f0       	brcs	.+32     	; 0x1be4c <realloc+0x176>
   1be2c:	62 82       	std	Z+2, r6	; 0x02
   1be2e:	73 82       	std	Z+3, r7	; 0x03
   1be30:	51 83       	std	Z+1, r21	; 0x01
   1be32:	40 83       	st	Z, r20
   1be34:	d9 01       	movw	r26, r18
   1be36:	6d 93       	st	X+, r22
   1be38:	7c 93       	st	X, r23
   1be3a:	e1 14       	cp	r14, r1
   1be3c:	f1 04       	cpc	r15, r1
   1be3e:	71 f0       	breq	.+28     	; 0x1be5c <realloc+0x186>
   1be40:	d7 01       	movw	r26, r14
   1be42:	13 96       	adiw	r26, 0x03	; 3
   1be44:	fc 93       	st	X, r31
   1be46:	ee 93       	st	-X, r30
   1be48:	12 97       	sbiw	r26, 0x02	; 2
   1be4a:	8e cf       	rjmp	.-228    	; 0x1bd68 <realloc+0x92>
   1be4c:	22 96       	adiw	r28, 0x02	; 2
   1be4e:	8c 0f       	add	r24, r28
   1be50:	9d 1f       	adc	r25, r29
   1be52:	f9 01       	movw	r30, r18
   1be54:	91 83       	std	Z+1, r25	; 0x01
   1be56:	80 83       	st	Z, r24
   1be58:	f3 01       	movw	r30, r6
   1be5a:	ef cf       	rjmp	.-34     	; 0x1be3a <realloc+0x164>
   1be5c:	f0 93 c8 14 	sts	0x14C8, r31	; 0x8014c8 <__flp+0x1>
   1be60:	e0 93 c7 14 	sts	0x14C7, r30	; 0x8014c7 <__flp>
   1be64:	81 cf       	rjmp	.-254    	; 0x1bd68 <realloc+0x92>
   1be66:	48 16       	cp	r4, r24
   1be68:	59 06       	cpc	r5, r25
   1be6a:	08 f4       	brcc	.+2      	; 0x1be6e <realloc+0x198>
   1be6c:	2c 01       	movw	r4, r24
   1be6e:	7d 01       	movw	r14, r26
   1be70:	d3 01       	movw	r26, r6
   1be72:	9a cf       	rjmp	.-204    	; 0x1bda8 <realloc+0xd2>
   1be74:	cb 01       	movw	r24, r22
   1be76:	0e 94 46 dd 	call	0x1ba8c	; 0x1ba8c <malloc>
   1be7a:	7c 01       	movw	r14, r24
   1be7c:	00 97       	sbiw	r24, 0x00	; 0
   1be7e:	49 f0       	breq	.+18     	; 0x1be92 <realloc+0x1bc>
   1be80:	ae 01       	movw	r20, r28
   1be82:	b8 01       	movw	r22, r16
   1be84:	0e 94 95 e0 	call	0x1c12a	; 0x1c12a <memcpy>
   1be88:	c8 01       	movw	r24, r16
   1be8a:	0e 94 e2 dd 	call	0x1bbc4	; 0x1bbc4 <free>
   1be8e:	87 01       	movw	r16, r14
   1be90:	6b cf       	rjmp	.-298    	; 0x1bd68 <realloc+0x92>
   1be92:	10 e0       	ldi	r17, 0x00	; 0
   1be94:	00 e0       	ldi	r16, 0x00	; 0
   1be96:	68 cf       	rjmp	.-304    	; 0x1bd68 <realloc+0x92>

0001be98 <strtoul>:
strtoul():
   1be98:	3f 92       	push	r3
   1be9a:	4f 92       	push	r4
   1be9c:	5f 92       	push	r5
   1be9e:	6f 92       	push	r6
   1bea0:	7f 92       	push	r7
   1bea2:	8f 92       	push	r8
   1bea4:	9f 92       	push	r9
   1bea6:	af 92       	push	r10
   1bea8:	bf 92       	push	r11
   1beaa:	cf 92       	push	r12
   1beac:	df 92       	push	r13
   1beae:	ef 92       	push	r14
   1beb0:	ff 92       	push	r15
   1beb2:	0f 93       	push	r16
   1beb4:	1f 93       	push	r17
   1beb6:	cf 93       	push	r28
   1beb8:	df 93       	push	r29
   1beba:	5c 01       	movw	r10, r24
   1bebc:	6b 01       	movw	r12, r22
   1bebe:	7a 01       	movw	r14, r20
   1bec0:	61 15       	cp	r22, r1
   1bec2:	71 05       	cpc	r23, r1
   1bec4:	19 f0       	breq	.+6      	; 0x1becc <strtoul+0x34>
   1bec6:	fb 01       	movw	r30, r22
   1bec8:	91 83       	std	Z+1, r25	; 0x01
   1beca:	80 83       	st	Z, r24
   1becc:	e1 14       	cp	r14, r1
   1bece:	f1 04       	cpc	r15, r1
   1bed0:	49 f0       	breq	.+18     	; 0x1bee4 <strtoul+0x4c>
   1bed2:	c7 01       	movw	r24, r14
   1bed4:	02 97       	sbiw	r24, 0x02	; 2
   1bed6:	83 97       	sbiw	r24, 0x23	; 35
   1bed8:	28 f0       	brcs	.+10     	; 0x1bee4 <strtoul+0x4c>
   1beda:	60 e0       	ldi	r22, 0x00	; 0
   1bedc:	70 e0       	ldi	r23, 0x00	; 0
   1bede:	cb 01       	movw	r24, r22
   1bee0:	9b c0       	rjmp	.+310    	; 0x1c018 <strtoul+0x180>
   1bee2:	5e 01       	movw	r10, r28
   1bee4:	e5 01       	movw	r28, r10
   1bee6:	21 96       	adiw	r28, 0x01	; 1
   1bee8:	f5 01       	movw	r30, r10
   1beea:	10 81       	ld	r17, Z
   1beec:	81 2f       	mov	r24, r17
   1beee:	90 e0       	ldi	r25, 0x00	; 0
   1bef0:	0e 94 76 e0 	call	0x1c0ec	; 0x1c0ec <isspace>
   1bef4:	89 2b       	or	r24, r25
   1bef6:	a9 f7       	brne	.-22     	; 0x1bee2 <strtoul+0x4a>
   1bef8:	1d 32       	cpi	r17, 0x2D	; 45
   1befa:	09 f0       	breq	.+2      	; 0x1befe <strtoul+0x66>
   1befc:	5c c0       	rjmp	.+184    	; 0x1bfb6 <strtoul+0x11e>
   1befe:	21 96       	adiw	r28, 0x01	; 1
   1bf00:	f5 01       	movw	r30, r10
   1bf02:	11 81       	ldd	r17, Z+1	; 0x01
   1bf04:	01 e0       	ldi	r16, 0x01	; 1
   1bf06:	e1 14       	cp	r14, r1
   1bf08:	f1 04       	cpc	r15, r1
   1bf0a:	09 f4       	brne	.+2      	; 0x1bf0e <strtoul+0x76>
   1bf0c:	bb c0       	rjmp	.+374    	; 0x1c084 <strtoul+0x1ec>
   1bf0e:	f0 e1       	ldi	r31, 0x10	; 16
   1bf10:	ef 16       	cp	r14, r31
   1bf12:	f1 04       	cpc	r15, r1
   1bf14:	09 f0       	breq	.+2      	; 0x1bf18 <strtoul+0x80>
   1bf16:	9b c0       	rjmp	.+310    	; 0x1c04e <strtoul+0x1b6>
   1bf18:	10 33       	cpi	r17, 0x30	; 48
   1bf1a:	41 f4       	brne	.+16     	; 0x1bf2c <strtoul+0x94>
   1bf1c:	88 81       	ld	r24, Y
   1bf1e:	8f 7d       	andi	r24, 0xDF	; 223
   1bf20:	88 35       	cpi	r24, 0x58	; 88
   1bf22:	09 f0       	breq	.+2      	; 0x1bf26 <strtoul+0x8e>
   1bf24:	8f c0       	rjmp	.+286    	; 0x1c044 <strtoul+0x1ac>
   1bf26:	19 81       	ldd	r17, Y+1	; 0x01
   1bf28:	22 96       	adiw	r28, 0x02	; 2
   1bf2a:	02 60       	ori	r16, 0x02	; 2
   1bf2c:	e0 e1       	ldi	r30, 0x10	; 16
   1bf2e:	ee 2e       	mov	r14, r30
   1bf30:	f1 2c       	mov	r15, r1
   1bf32:	88 24       	eor	r8, r8
   1bf34:	8a 94       	dec	r8
   1bf36:	98 2c       	mov	r9, r8
   1bf38:	a8 2c       	mov	r10, r8
   1bf3a:	ff e0       	ldi	r31, 0x0F	; 15
   1bf3c:	bf 2e       	mov	r11, r31
   1bf3e:	20 e0       	ldi	r18, 0x00	; 0
   1bf40:	60 e0       	ldi	r22, 0x00	; 0
   1bf42:	70 e0       	ldi	r23, 0x00	; 0
   1bf44:	cb 01       	movw	r24, r22
   1bf46:	27 01       	movw	r4, r14
   1bf48:	0f 2c       	mov	r0, r15
   1bf4a:	00 0c       	add	r0, r0
   1bf4c:	66 08       	sbc	r6, r6
   1bf4e:	77 08       	sbc	r7, r7
   1bf50:	fe 01       	movw	r30, r28
   1bf52:	50 ed       	ldi	r21, 0xD0	; 208
   1bf54:	35 2e       	mov	r3, r21
   1bf56:	31 0e       	add	r3, r17
   1bf58:	39 e0       	ldi	r19, 0x09	; 9
   1bf5a:	33 15       	cp	r19, r3
   1bf5c:	68 f4       	brcc	.+26     	; 0x1bf78 <strtoul+0xe0>
   1bf5e:	3f eb       	ldi	r19, 0xBF	; 191
   1bf60:	31 0f       	add	r19, r17
   1bf62:	49 ec       	ldi	r20, 0xC9	; 201
   1bf64:	34 2e       	mov	r3, r20
   1bf66:	3a 31       	cpi	r19, 0x1A	; 26
   1bf68:	30 f0       	brcs	.+12     	; 0x1bf76 <strtoul+0xde>
   1bf6a:	3f e9       	ldi	r19, 0x9F	; 159
   1bf6c:	31 0f       	add	r19, r17
   1bf6e:	3a 31       	cpi	r19, 0x1A	; 26
   1bf70:	b0 f5       	brcc	.+108    	; 0x1bfde <strtoul+0x146>
   1bf72:	39 ea       	ldi	r19, 0xA9	; 169
   1bf74:	33 2e       	mov	r3, r19
   1bf76:	31 0e       	add	r3, r17
   1bf78:	3e 14       	cp	r3, r14
   1bf7a:	1f 04       	cpc	r1, r15
   1bf7c:	84 f5       	brge	.+96     	; 0x1bfde <strtoul+0x146>
   1bf7e:	2f 3f       	cpi	r18, 0xFF	; 255
   1bf80:	b9 f0       	breq	.+46     	; 0x1bfb0 <strtoul+0x118>
   1bf82:	86 16       	cp	r8, r22
   1bf84:	97 06       	cpc	r9, r23
   1bf86:	a8 06       	cpc	r10, r24
   1bf88:	b9 06       	cpc	r11, r25
   1bf8a:	38 f1       	brcs	.+78     	; 0x1bfda <strtoul+0x142>
   1bf8c:	a3 01       	movw	r20, r6
   1bf8e:	92 01       	movw	r18, r4
   1bf90:	0e 94 81 dc 	call	0x1b902	; 0x1b902 <__mulsi3>
   1bf94:	23 2d       	mov	r18, r3
   1bf96:	30 e0       	ldi	r19, 0x00	; 0
   1bf98:	50 e0       	ldi	r21, 0x00	; 0
   1bf9a:	40 e0       	ldi	r20, 0x00	; 0
   1bf9c:	62 0f       	add	r22, r18
   1bf9e:	73 1f       	adc	r23, r19
   1bfa0:	84 1f       	adc	r24, r20
   1bfa2:	95 1f       	adc	r25, r21
   1bfa4:	62 17       	cp	r22, r18
   1bfa6:	73 07       	cpc	r23, r19
   1bfa8:	84 07       	cpc	r24, r20
   1bfaa:	95 07       	cpc	r25, r21
   1bfac:	b0 f0       	brcs	.+44     	; 0x1bfda <strtoul+0x142>
   1bfae:	21 e0       	ldi	r18, 0x01	; 1
   1bfb0:	21 96       	adiw	r28, 0x01	; 1
   1bfb2:	10 81       	ld	r17, Z
   1bfb4:	cd cf       	rjmp	.-102    	; 0x1bf50 <strtoul+0xb8>
   1bfb6:	1b 32       	cpi	r17, 0x2B	; 43
   1bfb8:	21 f4       	brne	.+8      	; 0x1bfc2 <strtoul+0x12a>
   1bfba:	e5 01       	movw	r28, r10
   1bfbc:	22 96       	adiw	r28, 0x02	; 2
   1bfbe:	f5 01       	movw	r30, r10
   1bfc0:	11 81       	ldd	r17, Z+1	; 0x01
   1bfc2:	00 e0       	ldi	r16, 0x00	; 0
   1bfc4:	a0 cf       	rjmp	.-192    	; 0x1bf06 <strtoul+0x6e>
   1bfc6:	78 e0       	ldi	r23, 0x08	; 8
   1bfc8:	e7 2e       	mov	r14, r23
   1bfca:	f1 2c       	mov	r15, r1
   1bfcc:	88 24       	eor	r8, r8
   1bfce:	8a 94       	dec	r8
   1bfd0:	98 2c       	mov	r9, r8
   1bfd2:	a8 2c       	mov	r10, r8
   1bfd4:	6f e1       	ldi	r22, 0x1F	; 31
   1bfd6:	b6 2e       	mov	r11, r22
   1bfd8:	b2 cf       	rjmp	.-156    	; 0x1bf3e <strtoul+0xa6>
   1bfda:	2f ef       	ldi	r18, 0xFF	; 255
   1bfdc:	e9 cf       	rjmp	.-46     	; 0x1bfb0 <strtoul+0x118>
   1bfde:	c1 14       	cp	r12, r1
   1bfe0:	d1 04       	cpc	r13, r1
   1bfe2:	31 f0       	breq	.+12     	; 0x1bff0 <strtoul+0x158>
   1bfe4:	22 23       	and	r18, r18
   1bfe6:	51 f1       	breq	.+84     	; 0x1c03c <strtoul+0x1a4>
   1bfe8:	21 97       	sbiw	r28, 0x01	; 1
   1bfea:	f6 01       	movw	r30, r12
   1bfec:	d1 83       	std	Z+1, r29	; 0x01
   1bfee:	c0 83       	st	Z, r28
   1bff0:	00 ff       	sbrs	r16, 0
   1bff2:	07 c0       	rjmp	.+14     	; 0x1c002 <strtoul+0x16a>
   1bff4:	90 95       	com	r25
   1bff6:	80 95       	com	r24
   1bff8:	70 95       	com	r23
   1bffa:	61 95       	neg	r22
   1bffc:	7f 4f       	sbci	r23, 0xFF	; 255
   1bffe:	8f 4f       	sbci	r24, 0xFF	; 255
   1c000:	9f 4f       	sbci	r25, 0xFF	; 255
   1c002:	2f 3f       	cpi	r18, 0xFF	; 255
   1c004:	49 f4       	brne	.+18     	; 0x1c018 <strtoul+0x180>
   1c006:	82 e2       	ldi	r24, 0x22	; 34
   1c008:	90 e0       	ldi	r25, 0x00	; 0
   1c00a:	90 93 e0 14 	sts	0x14E0, r25	; 0x8014e0 <errno+0x1>
   1c00e:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <errno>
   1c012:	6f ef       	ldi	r22, 0xFF	; 255
   1c014:	7f ef       	ldi	r23, 0xFF	; 255
   1c016:	cb 01       	movw	r24, r22
   1c018:	df 91       	pop	r29
   1c01a:	cf 91       	pop	r28
   1c01c:	1f 91       	pop	r17
   1c01e:	0f 91       	pop	r16
   1c020:	ff 90       	pop	r15
   1c022:	ef 90       	pop	r14
   1c024:	df 90       	pop	r13
   1c026:	cf 90       	pop	r12
   1c028:	bf 90       	pop	r11
   1c02a:	af 90       	pop	r10
   1c02c:	9f 90       	pop	r9
   1c02e:	8f 90       	pop	r8
   1c030:	7f 90       	pop	r7
   1c032:	6f 90       	pop	r6
   1c034:	5f 90       	pop	r5
   1c036:	4f 90       	pop	r4
   1c038:	3f 90       	pop	r3
   1c03a:	08 95       	ret
   1c03c:	01 ff       	sbrs	r16, 1
   1c03e:	d8 cf       	rjmp	.-80     	; 0x1bff0 <strtoul+0x158>
   1c040:	22 97       	sbiw	r28, 0x02	; 2
   1c042:	d3 cf       	rjmp	.-90     	; 0x1bfea <strtoul+0x152>
   1c044:	10 e3       	ldi	r17, 0x30	; 48
   1c046:	e1 14       	cp	r14, r1
   1c048:	f1 04       	cpc	r15, r1
   1c04a:	09 f4       	brne	.+2      	; 0x1c04e <strtoul+0x1b6>
   1c04c:	bc cf       	rjmp	.-136    	; 0x1bfc6 <strtoul+0x12e>
   1c04e:	3a e0       	ldi	r19, 0x0A	; 10
   1c050:	e3 16       	cp	r14, r19
   1c052:	f1 04       	cpc	r15, r1
   1c054:	e9 f0       	breq	.+58     	; 0x1c090 <strtoul+0x1f8>
   1c056:	80 e1       	ldi	r24, 0x10	; 16
   1c058:	e8 16       	cp	r14, r24
   1c05a:	f1 04       	cpc	r15, r1
   1c05c:	09 f4       	brne	.+2      	; 0x1c060 <strtoul+0x1c8>
   1c05e:	66 cf       	rjmp	.-308    	; 0x1bf2c <strtoul+0x94>
   1c060:	e8 e0       	ldi	r30, 0x08	; 8
   1c062:	ee 16       	cp	r14, r30
   1c064:	f1 04       	cpc	r15, r1
   1c066:	09 f4       	brne	.+2      	; 0x1c06a <strtoul+0x1d2>
   1c068:	b1 cf       	rjmp	.-158    	; 0x1bfcc <strtoul+0x134>
   1c06a:	6f ef       	ldi	r22, 0xFF	; 255
   1c06c:	7f ef       	ldi	r23, 0xFF	; 255
   1c06e:	cb 01       	movw	r24, r22
   1c070:	97 01       	movw	r18, r14
   1c072:	0f 2c       	mov	r0, r15
   1c074:	00 0c       	add	r0, r0
   1c076:	44 0b       	sbc	r20, r20
   1c078:	55 0b       	sbc	r21, r21
   1c07a:	0e 94 c5 dc 	call	0x1b98a	; 0x1b98a <__udivmodsi4>
   1c07e:	49 01       	movw	r8, r18
   1c080:	5a 01       	movw	r10, r20
   1c082:	5d cf       	rjmp	.-326    	; 0x1bf3e <strtoul+0xa6>
   1c084:	10 33       	cpi	r17, 0x30	; 48
   1c086:	09 f4       	brne	.+2      	; 0x1c08a <strtoul+0x1f2>
   1c088:	49 cf       	rjmp	.-366    	; 0x1bf1c <strtoul+0x84>
   1c08a:	9a e0       	ldi	r25, 0x0A	; 10
   1c08c:	e9 2e       	mov	r14, r25
   1c08e:	f1 2c       	mov	r15, r1
   1c090:	89 e9       	ldi	r24, 0x99	; 153
   1c092:	88 2e       	mov	r8, r24
   1c094:	98 2c       	mov	r9, r8
   1c096:	a8 2c       	mov	r10, r8
   1c098:	89 e1       	ldi	r24, 0x19	; 25
   1c09a:	b8 2e       	mov	r11, r24
   1c09c:	50 cf       	rjmp	.-352    	; 0x1bf3e <strtoul+0xa6>

0001c09e <abort>:
abort():
   1c09e:	81 e0       	ldi	r24, 0x01	; 1
   1c0a0:	90 e0       	ldi	r25, 0x00	; 0
   1c0a2:	f8 94       	cli
   1c0a4:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <_exit>

0001c0a8 <atof>:
atof():
   1c0a8:	66 27       	eor	r22, r22
   1c0aa:	77 27       	eor	r23, r23
   1c0ac:	0c 94 a4 e5 	jmp	0x1cb48	; 0x1cb48 <strtod>

0001c0b0 <atoi>:
atoi():
   1c0b0:	fc 01       	movw	r30, r24
   1c0b2:	88 27       	eor	r24, r24
   1c0b4:	99 27       	eor	r25, r25
   1c0b6:	e8 94       	clt
   1c0b8:	21 91       	ld	r18, Z+
   1c0ba:	20 32       	cpi	r18, 0x20	; 32
   1c0bc:	e9 f3       	breq	.-6      	; 0x1c0b8 <atoi+0x8>
   1c0be:	29 30       	cpi	r18, 0x09	; 9
   1c0c0:	10 f0       	brcs	.+4      	; 0x1c0c6 <atoi+0x16>
   1c0c2:	2e 30       	cpi	r18, 0x0E	; 14
   1c0c4:	c8 f3       	brcs	.-14     	; 0x1c0b8 <atoi+0x8>
   1c0c6:	2b 32       	cpi	r18, 0x2B	; 43
   1c0c8:	41 f0       	breq	.+16     	; 0x1c0da <atoi+0x2a>
   1c0ca:	2d 32       	cpi	r18, 0x2D	; 45
   1c0cc:	39 f4       	brne	.+14     	; 0x1c0dc <atoi+0x2c>
   1c0ce:	68 94       	set
   1c0d0:	04 c0       	rjmp	.+8      	; 0x1c0da <atoi+0x2a>
   1c0d2:	0e 94 1e e1 	call	0x1c23c	; 0x1c23c <__mulhi_const_10>
   1c0d6:	82 0f       	add	r24, r18
   1c0d8:	91 1d       	adc	r25, r1
   1c0da:	21 91       	ld	r18, Z+
   1c0dc:	20 53       	subi	r18, 0x30	; 48
   1c0de:	2a 30       	cpi	r18, 0x0A	; 10
   1c0e0:	c0 f3       	brcs	.-16     	; 0x1c0d2 <atoi+0x22>
   1c0e2:	1e f4       	brtc	.+6      	; 0x1c0ea <atoi+0x3a>
   1c0e4:	90 95       	com	r25
   1c0e6:	81 95       	neg	r24
   1c0e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0ea:	08 95       	ret

0001c0ec <isspace>:
isspace():
   1c0ec:	91 11       	cpse	r25, r1
   1c0ee:	0c 94 da e7 	jmp	0x1cfb4	; 0x1cfb4 <__ctype_isfalse>
   1c0f2:	80 32       	cpi	r24, 0x20	; 32
   1c0f4:	19 f0       	breq	.+6      	; 0x1c0fc <isspace+0x10>
   1c0f6:	89 50       	subi	r24, 0x09	; 9
   1c0f8:	85 50       	subi	r24, 0x05	; 5
   1c0fa:	c8 f7       	brcc	.-14     	; 0x1c0ee <isspace+0x2>
   1c0fc:	08 95       	ret

0001c0fe <strcat_P>:
strcat_P():
   1c0fe:	fb 01       	movw	r30, r22
   1c100:	dc 01       	movw	r26, r24
   1c102:	0d 90       	ld	r0, X+
   1c104:	00 20       	and	r0, r0
   1c106:	e9 f7       	brne	.-6      	; 0x1c102 <strcat_P+0x4>
   1c108:	11 97       	sbiw	r26, 0x01	; 1
   1c10a:	05 90       	lpm	r0, Z+
   1c10c:	0d 92       	st	X+, r0
   1c10e:	00 20       	and	r0, r0
   1c110:	e1 f7       	brne	.-8      	; 0x1c10a <strcat_P+0xc>
   1c112:	08 95       	ret

0001c114 <strcpy_P>:
strcpy_P():
   1c114:	fb 01       	movw	r30, r22
   1c116:	dc 01       	movw	r26, r24
   1c118:	05 90       	lpm	r0, Z+
   1c11a:	0d 92       	st	X+, r0
   1c11c:	00 20       	and	r0, r0
   1c11e:	e1 f7       	brne	.-8      	; 0x1c118 <strcpy_P+0x4>
   1c120:	08 95       	ret

0001c122 <strtok>:
strtok():
   1c122:	46 e5       	ldi	r20, 0x56	; 86
   1c124:	59 e0       	ldi	r21, 0x09	; 9
   1c126:	0c 94 e1 e0 	jmp	0x1c1c2	; 0x1c1c2 <strtok_r>

0001c12a <memcpy>:
memcpy():
   1c12a:	fb 01       	movw	r30, r22
   1c12c:	dc 01       	movw	r26, r24
   1c12e:	02 c0       	rjmp	.+4      	; 0x1c134 <memcpy+0xa>
   1c130:	01 90       	ld	r0, Z+
   1c132:	0d 92       	st	X+, r0
   1c134:	41 50       	subi	r20, 0x01	; 1
   1c136:	50 40       	sbci	r21, 0x00	; 0
   1c138:	d8 f7       	brcc	.-10     	; 0x1c130 <memcpy+0x6>
   1c13a:	08 95       	ret

0001c13c <strcat>:
strcat():
   1c13c:	fb 01       	movw	r30, r22
   1c13e:	dc 01       	movw	r26, r24
   1c140:	0d 90       	ld	r0, X+
   1c142:	00 20       	and	r0, r0
   1c144:	e9 f7       	brne	.-6      	; 0x1c140 <strcat+0x4>
   1c146:	11 97       	sbiw	r26, 0x01	; 1
   1c148:	01 90       	ld	r0, Z+
   1c14a:	0d 92       	st	X+, r0
   1c14c:	00 20       	and	r0, r0
   1c14e:	e1 f7       	brne	.-8      	; 0x1c148 <strcat+0xc>
   1c150:	08 95       	ret

0001c152 <strchr>:
strchr():
   1c152:	fc 01       	movw	r30, r24
   1c154:	81 91       	ld	r24, Z+
   1c156:	86 17       	cp	r24, r22
   1c158:	21 f0       	breq	.+8      	; 0x1c162 <strchr+0x10>
   1c15a:	88 23       	and	r24, r24
   1c15c:	d9 f7       	brne	.-10     	; 0x1c154 <strchr+0x2>
   1c15e:	99 27       	eor	r25, r25
   1c160:	08 95       	ret
   1c162:	31 97       	sbiw	r30, 0x01	; 1
   1c164:	cf 01       	movw	r24, r30
   1c166:	08 95       	ret

0001c168 <strcmp>:
strcmp():
   1c168:	fb 01       	movw	r30, r22
   1c16a:	dc 01       	movw	r26, r24
   1c16c:	8d 91       	ld	r24, X+
   1c16e:	01 90       	ld	r0, Z+
   1c170:	80 19       	sub	r24, r0
   1c172:	01 10       	cpse	r0, r1
   1c174:	d9 f3       	breq	.-10     	; 0x1c16c <strcmp+0x4>
   1c176:	99 0b       	sbc	r25, r25
   1c178:	08 95       	ret

0001c17a <strcpy>:
strcpy():
   1c17a:	fb 01       	movw	r30, r22
   1c17c:	dc 01       	movw	r26, r24
   1c17e:	01 90       	ld	r0, Z+
   1c180:	0d 92       	st	X+, r0
   1c182:	00 20       	and	r0, r0
   1c184:	e1 f7       	brne	.-8      	; 0x1c17e <strcpy+0x4>
   1c186:	08 95       	ret

0001c188 <strncmp>:
strncmp():
   1c188:	fb 01       	movw	r30, r22
   1c18a:	dc 01       	movw	r26, r24
   1c18c:	41 50       	subi	r20, 0x01	; 1
   1c18e:	50 40       	sbci	r21, 0x00	; 0
   1c190:	30 f0       	brcs	.+12     	; 0x1c19e <strncmp+0x16>
   1c192:	8d 91       	ld	r24, X+
   1c194:	01 90       	ld	r0, Z+
   1c196:	80 19       	sub	r24, r0
   1c198:	19 f4       	brne	.+6      	; 0x1c1a0 <strncmp+0x18>
   1c19a:	00 20       	and	r0, r0
   1c19c:	b9 f7       	brne	.-18     	; 0x1c18c <strncmp+0x4>
   1c19e:	88 1b       	sub	r24, r24
   1c1a0:	99 0b       	sbc	r25, r25
   1c1a2:	08 95       	ret

0001c1a4 <strncpy>:
strncpy():
   1c1a4:	fb 01       	movw	r30, r22
   1c1a6:	dc 01       	movw	r26, r24
   1c1a8:	41 50       	subi	r20, 0x01	; 1
   1c1aa:	50 40       	sbci	r21, 0x00	; 0
   1c1ac:	48 f0       	brcs	.+18     	; 0x1c1c0 <strncpy+0x1c>
   1c1ae:	01 90       	ld	r0, Z+
   1c1b0:	0d 92       	st	X+, r0
   1c1b2:	00 20       	and	r0, r0
   1c1b4:	c9 f7       	brne	.-14     	; 0x1c1a8 <strncpy+0x4>
   1c1b6:	01 c0       	rjmp	.+2      	; 0x1c1ba <strncpy+0x16>
   1c1b8:	1d 92       	st	X+, r1
   1c1ba:	41 50       	subi	r20, 0x01	; 1
   1c1bc:	50 40       	sbci	r21, 0x00	; 0
   1c1be:	e0 f7       	brcc	.-8      	; 0x1c1b8 <strncpy+0x14>
   1c1c0:	08 95       	ret

0001c1c2 <strtok_r>:
strtok_r():
   1c1c2:	fa 01       	movw	r30, r20
   1c1c4:	a1 91       	ld	r26, Z+
   1c1c6:	b0 81       	ld	r27, Z
   1c1c8:	00 97       	sbiw	r24, 0x00	; 0
   1c1ca:	19 f4       	brne	.+6      	; 0x1c1d2 <strtok_r+0x10>
   1c1cc:	10 97       	sbiw	r26, 0x00	; 0
   1c1ce:	e1 f0       	breq	.+56     	; 0x1c208 <strtok_r+0x46>
   1c1d0:	cd 01       	movw	r24, r26
   1c1d2:	dc 01       	movw	r26, r24
   1c1d4:	cd 01       	movw	r24, r26
   1c1d6:	0d 90       	ld	r0, X+
   1c1d8:	00 20       	and	r0, r0
   1c1da:	11 f4       	brne	.+4      	; 0x1c1e0 <strtok_r+0x1e>
   1c1dc:	c0 01       	movw	r24, r0
   1c1de:	13 c0       	rjmp	.+38     	; 0x1c206 <strtok_r+0x44>
   1c1e0:	fb 01       	movw	r30, r22
   1c1e2:	21 91       	ld	r18, Z+
   1c1e4:	22 23       	and	r18, r18
   1c1e6:	19 f0       	breq	.+6      	; 0x1c1ee <strtok_r+0x2c>
   1c1e8:	20 15       	cp	r18, r0
   1c1ea:	d9 f7       	brne	.-10     	; 0x1c1e2 <strtok_r+0x20>
   1c1ec:	f3 cf       	rjmp	.-26     	; 0x1c1d4 <strtok_r+0x12>
   1c1ee:	fb 01       	movw	r30, r22
   1c1f0:	21 91       	ld	r18, Z+
   1c1f2:	20 15       	cp	r18, r0
   1c1f4:	19 f4       	brne	.+6      	; 0x1c1fc <strtok_r+0x3a>
   1c1f6:	1e 92       	st	-X, r1
   1c1f8:	11 96       	adiw	r26, 0x01	; 1
   1c1fa:	06 c0       	rjmp	.+12     	; 0x1c208 <strtok_r+0x46>
   1c1fc:	22 23       	and	r18, r18
   1c1fe:	c1 f7       	brne	.-16     	; 0x1c1f0 <strtok_r+0x2e>
   1c200:	0d 90       	ld	r0, X+
   1c202:	00 20       	and	r0, r0
   1c204:	a1 f7       	brne	.-24     	; 0x1c1ee <strtok_r+0x2c>
   1c206:	d0 01       	movw	r26, r0
   1c208:	fa 01       	movw	r30, r20
   1c20a:	a1 93       	st	Z+, r26
   1c20c:	b0 83       	st	Z, r27
   1c20e:	08 95       	ret

0001c210 <itoa>:
itoa():
   1c210:	45 32       	cpi	r20, 0x25	; 37
   1c212:	51 05       	cpc	r21, r1
   1c214:	20 f4       	brcc	.+8      	; 0x1c21e <itoa+0xe>
   1c216:	42 30       	cpi	r20, 0x02	; 2
   1c218:	10 f0       	brcs	.+4      	; 0x1c21e <itoa+0xe>
   1c21a:	0c 94 13 e1 	jmp	0x1c226	; 0x1c226 <__itoa_ncheck>
   1c21e:	fb 01       	movw	r30, r22
   1c220:	10 82       	st	Z, r1
   1c222:	cb 01       	movw	r24, r22
   1c224:	08 95       	ret

0001c226 <__itoa_ncheck>:
__itoa_ncheck():
   1c226:	bb 27       	eor	r27, r27
   1c228:	4a 30       	cpi	r20, 0x0A	; 10
   1c22a:	31 f4       	brne	.+12     	; 0x1c238 <__itoa_ncheck+0x12>
   1c22c:	99 23       	and	r25, r25
   1c22e:	22 f4       	brpl	.+8      	; 0x1c238 <__itoa_ncheck+0x12>
   1c230:	bd e2       	ldi	r27, 0x2D	; 45
   1c232:	90 95       	com	r25
   1c234:	81 95       	neg	r24
   1c236:	9f 4f       	sbci	r25, 0xFF	; 255
   1c238:	0c 94 27 e1 	jmp	0x1c24e	; 0x1c24e <__utoa_common>

0001c23c <__mulhi_const_10>:
__mulhi_const_10():
   1c23c:	7a e0       	ldi	r23, 0x0A	; 10
   1c23e:	97 9f       	mul	r25, r23
   1c240:	90 2d       	mov	r25, r0
   1c242:	87 9f       	mul	r24, r23
   1c244:	80 2d       	mov	r24, r0
   1c246:	91 0d       	add	r25, r1
   1c248:	11 24       	eor	r1, r1
   1c24a:	08 95       	ret

0001c24c <__utoa_ncheck>:
__utoa_ncheck():
   1c24c:	bb 27       	eor	r27, r27

0001c24e <__utoa_common>:
   1c24e:	fb 01       	movw	r30, r22
   1c250:	55 27       	eor	r21, r21
   1c252:	aa 27       	eor	r26, r26
   1c254:	88 0f       	add	r24, r24
   1c256:	99 1f       	adc	r25, r25
   1c258:	aa 1f       	adc	r26, r26
   1c25a:	a4 17       	cp	r26, r20
   1c25c:	10 f0       	brcs	.+4      	; 0x1c262 <__utoa_common+0x14>
   1c25e:	a4 1b       	sub	r26, r20
   1c260:	83 95       	inc	r24
   1c262:	50 51       	subi	r21, 0x10	; 16
   1c264:	b9 f7       	brne	.-18     	; 0x1c254 <__utoa_common+0x6>
   1c266:	a0 5d       	subi	r26, 0xD0	; 208
   1c268:	aa 33       	cpi	r26, 0x3A	; 58
   1c26a:	08 f0       	brcs	.+2      	; 0x1c26e <__utoa_common+0x20>
   1c26c:	a9 5d       	subi	r26, 0xD9	; 217
   1c26e:	a1 93       	st	Z+, r26
   1c270:	00 97       	sbiw	r24, 0x00	; 0
   1c272:	79 f7       	brne	.-34     	; 0x1c252 <__utoa_common+0x4>
   1c274:	b1 11       	cpse	r27, r1
   1c276:	b1 93       	st	Z+, r27
   1c278:	11 92       	st	Z+, r1
   1c27a:	cb 01       	movw	r24, r22
   1c27c:	0c 94 12 e8 	jmp	0x1d024	; 0x1d024 <strrev>

0001c280 <fdevopen>:
fdevopen():
   1c280:	0f 93       	push	r16
   1c282:	1f 93       	push	r17
   1c284:	cf 93       	push	r28
   1c286:	df 93       	push	r29
   1c288:	00 97       	sbiw	r24, 0x00	; 0
   1c28a:	59 f4       	brne	.+22     	; 0x1c2a2 <fdevopen+0x22>
   1c28c:	61 15       	cp	r22, r1
   1c28e:	71 05       	cpc	r23, r1
   1c290:	41 f4       	brne	.+16     	; 0x1c2a2 <fdevopen+0x22>
   1c292:	f0 e0       	ldi	r31, 0x00	; 0
   1c294:	e0 e0       	ldi	r30, 0x00	; 0
   1c296:	cf 01       	movw	r24, r30
   1c298:	df 91       	pop	r29
   1c29a:	cf 91       	pop	r28
   1c29c:	1f 91       	pop	r17
   1c29e:	0f 91       	pop	r16
   1c2a0:	08 95       	ret
   1c2a2:	8b 01       	movw	r16, r22
   1c2a4:	ec 01       	movw	r28, r24
   1c2a6:	6e e0       	ldi	r22, 0x0E	; 14
   1c2a8:	70 e0       	ldi	r23, 0x00	; 0
   1c2aa:	81 e0       	ldi	r24, 0x01	; 1
   1c2ac:	90 e0       	ldi	r25, 0x00	; 0
   1c2ae:	0e 94 0f e4 	call	0x1c81e	; 0x1c81e <calloc>
   1c2b2:	fc 01       	movw	r30, r24
   1c2b4:	89 2b       	or	r24, r25
   1c2b6:	69 f3       	breq	.-38     	; 0x1c292 <fdevopen+0x12>
   1c2b8:	80 e8       	ldi	r24, 0x80	; 128
   1c2ba:	83 83       	std	Z+3, r24	; 0x03
   1c2bc:	01 15       	cp	r16, r1
   1c2be:	11 05       	cpc	r17, r1
   1c2c0:	71 f0       	breq	.+28     	; 0x1c2de <fdevopen+0x5e>
   1c2c2:	13 87       	std	Z+11, r17	; 0x0b
   1c2c4:	02 87       	std	Z+10, r16	; 0x0a
   1c2c6:	81 e8       	ldi	r24, 0x81	; 129
   1c2c8:	83 83       	std	Z+3, r24	; 0x03
   1c2ca:	80 91 c9 14 	lds	r24, 0x14C9	; 0x8014c9 <__iob>
   1c2ce:	90 91 ca 14 	lds	r25, 0x14CA	; 0x8014ca <__iob+0x1>
   1c2d2:	89 2b       	or	r24, r25
   1c2d4:	21 f4       	brne	.+8      	; 0x1c2de <fdevopen+0x5e>
   1c2d6:	f0 93 ca 14 	sts	0x14CA, r31	; 0x8014ca <__iob+0x1>
   1c2da:	e0 93 c9 14 	sts	0x14C9, r30	; 0x8014c9 <__iob>
   1c2de:	20 97       	sbiw	r28, 0x00	; 0
   1c2e0:	d1 f2       	breq	.-76     	; 0x1c296 <fdevopen+0x16>
   1c2e2:	d1 87       	std	Z+9, r29	; 0x09
   1c2e4:	c0 87       	std	Z+8, r28	; 0x08
   1c2e6:	83 81       	ldd	r24, Z+3	; 0x03
   1c2e8:	82 60       	ori	r24, 0x02	; 2
   1c2ea:	83 83       	std	Z+3, r24	; 0x03
   1c2ec:	80 91 cb 14 	lds	r24, 0x14CB	; 0x8014cb <__iob+0x2>
   1c2f0:	90 91 cc 14 	lds	r25, 0x14CC	; 0x8014cc <__iob+0x3>
   1c2f4:	89 2b       	or	r24, r25
   1c2f6:	79 f6       	brne	.-98     	; 0x1c296 <fdevopen+0x16>
   1c2f8:	f0 93 cc 14 	sts	0x14CC, r31	; 0x8014cc <__iob+0x3>
   1c2fc:	e0 93 cb 14 	sts	0x14CB, r30	; 0x8014cb <__iob+0x2>
   1c300:	80 91 cd 14 	lds	r24, 0x14CD	; 0x8014cd <__iob+0x4>
   1c304:	90 91 ce 14 	lds	r25, 0x14CE	; 0x8014ce <__iob+0x5>
   1c308:	89 2b       	or	r24, r25
   1c30a:	29 f6       	brne	.-118    	; 0x1c296 <fdevopen+0x16>
   1c30c:	f0 93 ce 14 	sts	0x14CE, r31	; 0x8014ce <__iob+0x5>
   1c310:	e0 93 cd 14 	sts	0x14CD, r30	; 0x8014cd <__iob+0x4>
   1c314:	c0 cf       	rjmp	.-128    	; 0x1c296 <fdevopen+0x16>

0001c316 <printf_P>:
printf_P():
   1c316:	0f 93       	push	r16
   1c318:	1f 93       	push	r17
   1c31a:	cf 93       	push	r28
   1c31c:	df 93       	push	r29
   1c31e:	cd b7       	in	r28, 0x3d	; 61
   1c320:	de b7       	in	r29, 0x3e	; 62
   1c322:	ae 01       	movw	r20, r28
   1c324:	48 5f       	subi	r20, 0xF8	; 248
   1c326:	5f 4f       	sbci	r21, 0xFF	; 255
   1c328:	da 01       	movw	r26, r20
   1c32a:	6d 91       	ld	r22, X+
   1c32c:	7d 91       	ld	r23, X+
   1c32e:	ad 01       	movw	r20, r26
   1c330:	09 ec       	ldi	r16, 0xC9	; 201
   1c332:	14 e1       	ldi	r17, 0x14	; 20
   1c334:	f8 01       	movw	r30, r16
   1c336:	82 81       	ldd	r24, Z+2	; 0x02
   1c338:	93 81       	ldd	r25, Z+3	; 0x03
   1c33a:	dc 01       	movw	r26, r24
   1c33c:	13 96       	adiw	r26, 0x03	; 3
   1c33e:	2c 91       	ld	r18, X
   1c340:	13 97       	sbiw	r26, 0x03	; 3
   1c342:	28 60       	ori	r18, 0x08	; 8
   1c344:	13 96       	adiw	r26, 0x03	; 3
   1c346:	2c 93       	st	X, r18
   1c348:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <vfprintf>
   1c34c:	d8 01       	movw	r26, r16
   1c34e:	12 96       	adiw	r26, 0x02	; 2
   1c350:	ed 91       	ld	r30, X+
   1c352:	fc 91       	ld	r31, X
   1c354:	23 81       	ldd	r18, Z+3	; 0x03
   1c356:	27 7f       	andi	r18, 0xF7	; 247
   1c358:	23 83       	std	Z+3, r18	; 0x03
   1c35a:	df 91       	pop	r29
   1c35c:	cf 91       	pop	r28
   1c35e:	1f 91       	pop	r17
   1c360:	0f 91       	pop	r16
   1c362:	08 95       	ret

0001c364 <puts>:
puts():
   1c364:	0f 93       	push	r16
   1c366:	1f 93       	push	r17
   1c368:	cf 93       	push	r28
   1c36a:	df 93       	push	r29
   1c36c:	e0 91 cb 14 	lds	r30, 0x14CB	; 0x8014cb <__iob+0x2>
   1c370:	f0 91 cc 14 	lds	r31, 0x14CC	; 0x8014cc <__iob+0x3>
   1c374:	23 81       	ldd	r18, Z+3	; 0x03
   1c376:	ec 01       	movw	r28, r24
   1c378:	10 e0       	ldi	r17, 0x00	; 0
   1c37a:	00 e0       	ldi	r16, 0x00	; 0
   1c37c:	21 fd       	sbrc	r18, 1
   1c37e:	08 c0       	rjmp	.+16     	; 0x1c390 <puts+0x2c>
   1c380:	0f ef       	ldi	r16, 0xFF	; 255
   1c382:	1f ef       	ldi	r17, 0xFF	; 255
   1c384:	14 c0       	rjmp	.+40     	; 0x1c3ae <puts+0x4a>
   1c386:	19 95       	eicall
   1c388:	89 2b       	or	r24, r25
   1c38a:	11 f0       	breq	.+4      	; 0x1c390 <puts+0x2c>
   1c38c:	0f ef       	ldi	r16, 0xFF	; 255
   1c38e:	1f ef       	ldi	r17, 0xFF	; 255
   1c390:	89 91       	ld	r24, Y+
   1c392:	60 91 cb 14 	lds	r22, 0x14CB	; 0x8014cb <__iob+0x2>
   1c396:	70 91 cc 14 	lds	r23, 0x14CC	; 0x8014cc <__iob+0x3>
   1c39a:	db 01       	movw	r26, r22
   1c39c:	18 96       	adiw	r26, 0x08	; 8
   1c39e:	ed 91       	ld	r30, X+
   1c3a0:	fc 91       	ld	r31, X
   1c3a2:	81 11       	cpse	r24, r1
   1c3a4:	f0 cf       	rjmp	.-32     	; 0x1c386 <puts+0x22>
   1c3a6:	8a e0       	ldi	r24, 0x0A	; 10
   1c3a8:	19 95       	eicall
   1c3aa:	89 2b       	or	r24, r25
   1c3ac:	49 f7       	brne	.-46     	; 0x1c380 <puts+0x1c>
   1c3ae:	c8 01       	movw	r24, r16
   1c3b0:	df 91       	pop	r29
   1c3b2:	cf 91       	pop	r28
   1c3b4:	1f 91       	pop	r17
   1c3b6:	0f 91       	pop	r16
   1c3b8:	08 95       	ret

0001c3ba <sprintf>:
sprintf():
   1c3ba:	0f 93       	push	r16
   1c3bc:	1f 93       	push	r17
   1c3be:	cf 93       	push	r28
   1c3c0:	df 93       	push	r29
   1c3c2:	cd b7       	in	r28, 0x3d	; 61
   1c3c4:	de b7       	in	r29, 0x3e	; 62
   1c3c6:	2e 97       	sbiw	r28, 0x0e	; 14
   1c3c8:	0f b6       	in	r0, 0x3f	; 63
   1c3ca:	f8 94       	cli
   1c3cc:	de bf       	out	0x3e, r29	; 62
   1c3ce:	0f be       	out	0x3f, r0	; 63
   1c3d0:	cd bf       	out	0x3d, r28	; 61
   1c3d2:	0e 89       	ldd	r16, Y+22	; 0x16
   1c3d4:	1f 89       	ldd	r17, Y+23	; 0x17
   1c3d6:	86 e0       	ldi	r24, 0x06	; 6
   1c3d8:	8c 83       	std	Y+4, r24	; 0x04
   1c3da:	1a 83       	std	Y+2, r17	; 0x02
   1c3dc:	09 83       	std	Y+1, r16	; 0x01
   1c3de:	8f ef       	ldi	r24, 0xFF	; 255
   1c3e0:	9f e7       	ldi	r25, 0x7F	; 127
   1c3e2:	9e 83       	std	Y+6, r25	; 0x06
   1c3e4:	8d 83       	std	Y+5, r24	; 0x05
   1c3e6:	ae 01       	movw	r20, r28
   1c3e8:	46 5e       	subi	r20, 0xE6	; 230
   1c3ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1c3ec:	68 8d       	ldd	r22, Y+24	; 0x18
   1c3ee:	79 8d       	ldd	r23, Y+25	; 0x19
   1c3f0:	ce 01       	movw	r24, r28
   1c3f2:	01 96       	adiw	r24, 0x01	; 1
   1c3f4:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <vfprintf>
   1c3f8:	2f 81       	ldd	r18, Y+7	; 0x07
   1c3fa:	38 85       	ldd	r19, Y+8	; 0x08
   1c3fc:	02 0f       	add	r16, r18
   1c3fe:	13 1f       	adc	r17, r19
   1c400:	f8 01       	movw	r30, r16
   1c402:	10 82       	st	Z, r1
   1c404:	2e 96       	adiw	r28, 0x0e	; 14
   1c406:	0f b6       	in	r0, 0x3f	; 63
   1c408:	f8 94       	cli
   1c40a:	de bf       	out	0x3e, r29	; 62
   1c40c:	0f be       	out	0x3f, r0	; 63
   1c40e:	cd bf       	out	0x3d, r28	; 61
   1c410:	df 91       	pop	r29
   1c412:	cf 91       	pop	r28
   1c414:	1f 91       	pop	r17
   1c416:	0f 91       	pop	r16
   1c418:	08 95       	ret

0001c41a <vfprintf>:
vfprintf():
   1c41a:	2f 92       	push	r2
   1c41c:	3f 92       	push	r3
   1c41e:	4f 92       	push	r4
   1c420:	5f 92       	push	r5
   1c422:	6f 92       	push	r6
   1c424:	7f 92       	push	r7
   1c426:	8f 92       	push	r8
   1c428:	9f 92       	push	r9
   1c42a:	af 92       	push	r10
   1c42c:	bf 92       	push	r11
   1c42e:	cf 92       	push	r12
   1c430:	df 92       	push	r13
   1c432:	ef 92       	push	r14
   1c434:	ff 92       	push	r15
   1c436:	0f 93       	push	r16
   1c438:	1f 93       	push	r17
   1c43a:	cf 93       	push	r28
   1c43c:	df 93       	push	r29
   1c43e:	00 d0       	rcall	.+0      	; 0x1c440 <vfprintf+0x26>
   1c440:	00 d0       	rcall	.+0      	; 0x1c442 <vfprintf+0x28>
   1c442:	00 d0       	rcall	.+0      	; 0x1c444 <vfprintf+0x2a>
   1c444:	1f 92       	push	r1
   1c446:	1f 92       	push	r1
   1c448:	cd b7       	in	r28, 0x3d	; 61
   1c44a:	de b7       	in	r29, 0x3e	; 62
   1c44c:	7c 01       	movw	r14, r24
   1c44e:	3b 01       	movw	r6, r22
   1c450:	8a 01       	movw	r16, r20
   1c452:	fc 01       	movw	r30, r24
   1c454:	17 82       	std	Z+7, r1	; 0x07
   1c456:	16 82       	std	Z+6, r1	; 0x06
   1c458:	83 81       	ldd	r24, Z+3	; 0x03
   1c45a:	81 ff       	sbrs	r24, 1
   1c45c:	dd c1       	rjmp	.+954    	; 0x1c818 <vfprintf+0x3fe>
   1c45e:	ce 01       	movw	r24, r28
   1c460:	01 96       	adiw	r24, 0x01	; 1
   1c462:	5c 01       	movw	r10, r24
   1c464:	f7 01       	movw	r30, r14
   1c466:	93 81       	ldd	r25, Z+3	; 0x03
   1c468:	f3 01       	movw	r30, r6
   1c46a:	93 fd       	sbrc	r25, 3
   1c46c:	85 91       	lpm	r24, Z+
   1c46e:	93 ff       	sbrs	r25, 3
   1c470:	81 91       	ld	r24, Z+
   1c472:	3f 01       	movw	r6, r30
   1c474:	88 23       	and	r24, r24
   1c476:	09 f4       	brne	.+2      	; 0x1c47a <vfprintf+0x60>
   1c478:	53 c1       	rjmp	.+678    	; 0x1c720 <vfprintf+0x306>
   1c47a:	85 32       	cpi	r24, 0x25	; 37
   1c47c:	39 f4       	brne	.+14     	; 0x1c48c <vfprintf+0x72>
   1c47e:	93 fd       	sbrc	r25, 3
   1c480:	85 91       	lpm	r24, Z+
   1c482:	93 ff       	sbrs	r25, 3
   1c484:	81 91       	ld	r24, Z+
   1c486:	3f 01       	movw	r6, r30
   1c488:	85 32       	cpi	r24, 0x25	; 37
   1c48a:	29 f4       	brne	.+10     	; 0x1c496 <vfprintf+0x7c>
   1c48c:	b7 01       	movw	r22, r14
   1c48e:	90 e0       	ldi	r25, 0x00	; 0
   1c490:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c494:	e7 cf       	rjmp	.-50     	; 0x1c464 <vfprintf+0x4a>
   1c496:	91 2c       	mov	r9, r1
   1c498:	21 2c       	mov	r2, r1
   1c49a:	31 2c       	mov	r3, r1
   1c49c:	ff e1       	ldi	r31, 0x1F	; 31
   1c49e:	f3 15       	cp	r31, r3
   1c4a0:	38 f0       	brcs	.+14     	; 0x1c4b0 <vfprintf+0x96>
   1c4a2:	8b 32       	cpi	r24, 0x2B	; 43
   1c4a4:	11 f1       	breq	.+68     	; 0x1c4ea <vfprintf+0xd0>
   1c4a6:	90 f4       	brcc	.+36     	; 0x1c4cc <vfprintf+0xb2>
   1c4a8:	80 32       	cpi	r24, 0x20	; 32
   1c4aa:	09 f1       	breq	.+66     	; 0x1c4ee <vfprintf+0xd4>
   1c4ac:	83 32       	cpi	r24, 0x23	; 35
   1c4ae:	29 f1       	breq	.+74     	; 0x1c4fa <vfprintf+0xe0>
   1c4b0:	37 fc       	sbrc	r3, 7
   1c4b2:	3c c0       	rjmp	.+120    	; 0x1c52c <vfprintf+0x112>
   1c4b4:	20 ed       	ldi	r18, 0xD0	; 208
   1c4b6:	28 0f       	add	r18, r24
   1c4b8:	2a 30       	cpi	r18, 0x0A	; 10
   1c4ba:	50 f5       	brcc	.+84     	; 0x1c510 <vfprintf+0xf6>
   1c4bc:	36 fe       	sbrs	r3, 6
   1c4be:	20 c0       	rjmp	.+64     	; 0x1c500 <vfprintf+0xe6>
   1c4c0:	8a e0       	ldi	r24, 0x0A	; 10
   1c4c2:	98 9e       	mul	r9, r24
   1c4c4:	20 0d       	add	r18, r0
   1c4c6:	11 24       	eor	r1, r1
   1c4c8:	92 2e       	mov	r9, r18
   1c4ca:	06 c0       	rjmp	.+12     	; 0x1c4d8 <vfprintf+0xbe>
   1c4cc:	8d 32       	cpi	r24, 0x2D	; 45
   1c4ce:	91 f0       	breq	.+36     	; 0x1c4f4 <vfprintf+0xda>
   1c4d0:	80 33       	cpi	r24, 0x30	; 48
   1c4d2:	71 f7       	brne	.-36     	; 0x1c4b0 <vfprintf+0x96>
   1c4d4:	68 94       	set
   1c4d6:	30 f8       	bld	r3, 0
   1c4d8:	f3 01       	movw	r30, r6
   1c4da:	93 fd       	sbrc	r25, 3
   1c4dc:	85 91       	lpm	r24, Z+
   1c4de:	93 ff       	sbrs	r25, 3
   1c4e0:	81 91       	ld	r24, Z+
   1c4e2:	3f 01       	movw	r6, r30
   1c4e4:	81 11       	cpse	r24, r1
   1c4e6:	da cf       	rjmp	.-76     	; 0x1c49c <vfprintf+0x82>
   1c4e8:	21 c0       	rjmp	.+66     	; 0x1c52c <vfprintf+0x112>
   1c4ea:	68 94       	set
   1c4ec:	31 f8       	bld	r3, 1
   1c4ee:	68 94       	set
   1c4f0:	32 f8       	bld	r3, 2
   1c4f2:	f2 cf       	rjmp	.-28     	; 0x1c4d8 <vfprintf+0xbe>
   1c4f4:	68 94       	set
   1c4f6:	33 f8       	bld	r3, 3
   1c4f8:	ef cf       	rjmp	.-34     	; 0x1c4d8 <vfprintf+0xbe>
   1c4fa:	68 94       	set
   1c4fc:	34 f8       	bld	r3, 4
   1c4fe:	ec cf       	rjmp	.-40     	; 0x1c4d8 <vfprintf+0xbe>
   1c500:	ea e0       	ldi	r30, 0x0A	; 10
   1c502:	2e 9e       	mul	r2, r30
   1c504:	20 0d       	add	r18, r0
   1c506:	11 24       	eor	r1, r1
   1c508:	22 2e       	mov	r2, r18
   1c50a:	68 94       	set
   1c50c:	35 f8       	bld	r3, 5
   1c50e:	e4 cf       	rjmp	.-56     	; 0x1c4d8 <vfprintf+0xbe>
   1c510:	8e 32       	cpi	r24, 0x2E	; 46
   1c512:	29 f4       	brne	.+10     	; 0x1c51e <vfprintf+0x104>
   1c514:	36 fc       	sbrc	r3, 6
   1c516:	04 c1       	rjmp	.+520    	; 0x1c720 <vfprintf+0x306>
   1c518:	68 94       	set
   1c51a:	36 f8       	bld	r3, 6
   1c51c:	dd cf       	rjmp	.-70     	; 0x1c4d8 <vfprintf+0xbe>
   1c51e:	8c 36       	cpi	r24, 0x6C	; 108
   1c520:	19 f4       	brne	.+6      	; 0x1c528 <vfprintf+0x10e>
   1c522:	68 94       	set
   1c524:	37 f8       	bld	r3, 7
   1c526:	d8 cf       	rjmp	.-80     	; 0x1c4d8 <vfprintf+0xbe>
   1c528:	88 36       	cpi	r24, 0x68	; 104
   1c52a:	b1 f2       	breq	.-84     	; 0x1c4d8 <vfprintf+0xbe>
   1c52c:	98 2f       	mov	r25, r24
   1c52e:	9f 7d       	andi	r25, 0xDF	; 223
   1c530:	95 54       	subi	r25, 0x45	; 69
   1c532:	93 30       	cpi	r25, 0x03	; 3
   1c534:	e0 f0       	brcs	.+56     	; 0x1c56e <vfprintf+0x154>
   1c536:	83 36       	cpi	r24, 0x63	; 99
   1c538:	a1 f1       	breq	.+104    	; 0x1c5a2 <vfprintf+0x188>
   1c53a:	83 37       	cpi	r24, 0x73	; 115
   1c53c:	c1 f1       	breq	.+112    	; 0x1c5ae <vfprintf+0x194>
   1c53e:	83 35       	cpi	r24, 0x53	; 83
   1c540:	09 f0       	breq	.+2      	; 0x1c544 <vfprintf+0x12a>
   1c542:	63 c0       	rjmp	.+198    	; 0x1c60a <vfprintf+0x1f0>
   1c544:	28 01       	movw	r4, r16
   1c546:	f2 e0       	ldi	r31, 0x02	; 2
   1c548:	4f 0e       	add	r4, r31
   1c54a:	51 1c       	adc	r5, r1
   1c54c:	f8 01       	movw	r30, r16
   1c54e:	c0 80       	ld	r12, Z
   1c550:	d1 80       	ldd	r13, Z+1	; 0x01
   1c552:	69 2d       	mov	r22, r9
   1c554:	70 e0       	ldi	r23, 0x00	; 0
   1c556:	36 fc       	sbrc	r3, 6
   1c558:	02 c0       	rjmp	.+4      	; 0x1c55e <vfprintf+0x144>
   1c55a:	6f ef       	ldi	r22, 0xFF	; 255
   1c55c:	7f ef       	ldi	r23, 0xFF	; 255
   1c55e:	c6 01       	movw	r24, r12
   1c560:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <strnlen_P>
   1c564:	4c 01       	movw	r8, r24
   1c566:	68 94       	set
   1c568:	37 f8       	bld	r3, 7
   1c56a:	82 01       	movw	r16, r4
   1c56c:	0a c0       	rjmp	.+20     	; 0x1c582 <vfprintf+0x168>
   1c56e:	0c 5f       	subi	r16, 0xFC	; 252
   1c570:	1f 4f       	sbci	r17, 0xFF	; 255
   1c572:	ff e3       	ldi	r31, 0x3F	; 63
   1c574:	f9 83       	std	Y+1, r31	; 0x01
   1c576:	88 24       	eor	r8, r8
   1c578:	83 94       	inc	r8
   1c57a:	91 2c       	mov	r9, r1
   1c57c:	65 01       	movw	r12, r10
   1c57e:	e8 94       	clt
   1c580:	37 f8       	bld	r3, 7
   1c582:	33 fe       	sbrs	r3, 3
   1c584:	2d c0       	rjmp	.+90     	; 0x1c5e0 <vfprintf+0x1c6>
   1c586:	52 2c       	mov	r5, r2
   1c588:	81 14       	cp	r8, r1
   1c58a:	91 04       	cpc	r9, r1
   1c58c:	71 f5       	brne	.+92     	; 0x1c5ea <vfprintf+0x1d0>
   1c58e:	55 20       	and	r5, r5
   1c590:	09 f4       	brne	.+2      	; 0x1c594 <vfprintf+0x17a>
   1c592:	68 cf       	rjmp	.-304    	; 0x1c464 <vfprintf+0x4a>
   1c594:	b7 01       	movw	r22, r14
   1c596:	80 e2       	ldi	r24, 0x20	; 32
   1c598:	90 e0       	ldi	r25, 0x00	; 0
   1c59a:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c59e:	5a 94       	dec	r5
   1c5a0:	f6 cf       	rjmp	.-20     	; 0x1c58e <vfprintf+0x174>
   1c5a2:	f8 01       	movw	r30, r16
   1c5a4:	80 81       	ld	r24, Z
   1c5a6:	89 83       	std	Y+1, r24	; 0x01
   1c5a8:	0e 5f       	subi	r16, 0xFE	; 254
   1c5aa:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5ac:	e4 cf       	rjmp	.-56     	; 0x1c576 <vfprintf+0x15c>
   1c5ae:	28 01       	movw	r4, r16
   1c5b0:	f2 e0       	ldi	r31, 0x02	; 2
   1c5b2:	4f 0e       	add	r4, r31
   1c5b4:	51 1c       	adc	r5, r1
   1c5b6:	f8 01       	movw	r30, r16
   1c5b8:	c0 80       	ld	r12, Z
   1c5ba:	d1 80       	ldd	r13, Z+1	; 0x01
   1c5bc:	69 2d       	mov	r22, r9
   1c5be:	70 e0       	ldi	r23, 0x00	; 0
   1c5c0:	36 fc       	sbrc	r3, 6
   1c5c2:	02 c0       	rjmp	.+4      	; 0x1c5c8 <vfprintf+0x1ae>
   1c5c4:	6f ef       	ldi	r22, 0xFF	; 255
   1c5c6:	7f ef       	ldi	r23, 0xFF	; 255
   1c5c8:	c6 01       	movw	r24, r12
   1c5ca:	0e 94 07 e8 	call	0x1d00e	; 0x1d00e <strnlen>
   1c5ce:	4c 01       	movw	r8, r24
   1c5d0:	82 01       	movw	r16, r4
   1c5d2:	d5 cf       	rjmp	.-86     	; 0x1c57e <vfprintf+0x164>
   1c5d4:	b7 01       	movw	r22, r14
   1c5d6:	80 e2       	ldi	r24, 0x20	; 32
   1c5d8:	90 e0       	ldi	r25, 0x00	; 0
   1c5da:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c5de:	2a 94       	dec	r2
   1c5e0:	28 14       	cp	r2, r8
   1c5e2:	19 04       	cpc	r1, r9
   1c5e4:	09 f0       	breq	.+2      	; 0x1c5e8 <vfprintf+0x1ce>
   1c5e6:	b0 f7       	brcc	.-20     	; 0x1c5d4 <vfprintf+0x1ba>
   1c5e8:	ce cf       	rjmp	.-100    	; 0x1c586 <vfprintf+0x16c>
   1c5ea:	f6 01       	movw	r30, r12
   1c5ec:	37 fc       	sbrc	r3, 7
   1c5ee:	85 91       	lpm	r24, Z+
   1c5f0:	37 fe       	sbrs	r3, 7
   1c5f2:	81 91       	ld	r24, Z+
   1c5f4:	6f 01       	movw	r12, r30
   1c5f6:	b7 01       	movw	r22, r14
   1c5f8:	90 e0       	ldi	r25, 0x00	; 0
   1c5fa:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c5fe:	51 10       	cpse	r5, r1
   1c600:	5a 94       	dec	r5
   1c602:	f1 e0       	ldi	r31, 0x01	; 1
   1c604:	8f 1a       	sub	r8, r31
   1c606:	91 08       	sbc	r9, r1
   1c608:	bf cf       	rjmp	.-130    	; 0x1c588 <vfprintf+0x16e>
   1c60a:	84 36       	cpi	r24, 0x64	; 100
   1c60c:	19 f0       	breq	.+6      	; 0x1c614 <vfprintf+0x1fa>
   1c60e:	89 36       	cpi	r24, 0x69	; 105
   1c610:	09 f0       	breq	.+2      	; 0x1c614 <vfprintf+0x1fa>
   1c612:	77 c0       	rjmp	.+238    	; 0x1c702 <vfprintf+0x2e8>
   1c614:	f8 01       	movw	r30, r16
   1c616:	37 fe       	sbrs	r3, 7
   1c618:	6b c0       	rjmp	.+214    	; 0x1c6f0 <vfprintf+0x2d6>
   1c61a:	60 81       	ld	r22, Z
   1c61c:	71 81       	ldd	r23, Z+1	; 0x01
   1c61e:	82 81       	ldd	r24, Z+2	; 0x02
   1c620:	93 81       	ldd	r25, Z+3	; 0x03
   1c622:	0c 5f       	subi	r16, 0xFC	; 252
   1c624:	1f 4f       	sbci	r17, 0xFF	; 255
   1c626:	f3 2d       	mov	r31, r3
   1c628:	ff 76       	andi	r31, 0x6F	; 111
   1c62a:	3f 2e       	mov	r3, r31
   1c62c:	97 ff       	sbrs	r25, 7
   1c62e:	09 c0       	rjmp	.+18     	; 0x1c642 <vfprintf+0x228>
   1c630:	90 95       	com	r25
   1c632:	80 95       	com	r24
   1c634:	70 95       	com	r23
   1c636:	61 95       	neg	r22
   1c638:	7f 4f       	sbci	r23, 0xFF	; 255
   1c63a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c63c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c63e:	68 94       	set
   1c640:	37 f8       	bld	r3, 7
   1c642:	2a e0       	ldi	r18, 0x0A	; 10
   1c644:	30 e0       	ldi	r19, 0x00	; 0
   1c646:	a5 01       	movw	r20, r10
   1c648:	0e 94 52 e8 	call	0x1d0a4	; 0x1d0a4 <__ultoa_invert>
   1c64c:	c8 2e       	mov	r12, r24
   1c64e:	ca 18       	sub	r12, r10
   1c650:	8c 2c       	mov	r8, r12
   1c652:	43 2c       	mov	r4, r3
   1c654:	36 fe       	sbrs	r3, 6
   1c656:	0c c0       	rjmp	.+24     	; 0x1c670 <vfprintf+0x256>
   1c658:	e8 94       	clt
   1c65a:	40 f8       	bld	r4, 0
   1c65c:	c9 14       	cp	r12, r9
   1c65e:	40 f4       	brcc	.+16     	; 0x1c670 <vfprintf+0x256>
   1c660:	34 fe       	sbrs	r3, 4
   1c662:	05 c0       	rjmp	.+10     	; 0x1c66e <vfprintf+0x254>
   1c664:	32 fc       	sbrc	r3, 2
   1c666:	03 c0       	rjmp	.+6      	; 0x1c66e <vfprintf+0x254>
   1c668:	f3 2d       	mov	r31, r3
   1c66a:	fe 7e       	andi	r31, 0xEE	; 238
   1c66c:	4f 2e       	mov	r4, r31
   1c66e:	89 2c       	mov	r8, r9
   1c670:	44 fe       	sbrs	r4, 4
   1c672:	aa c0       	rjmp	.+340    	; 0x1c7c8 <vfprintf+0x3ae>
   1c674:	fe 01       	movw	r30, r28
   1c676:	ec 0d       	add	r30, r12
   1c678:	f1 1d       	adc	r31, r1
   1c67a:	80 81       	ld	r24, Z
   1c67c:	80 33       	cpi	r24, 0x30	; 48
   1c67e:	09 f0       	breq	.+2      	; 0x1c682 <vfprintf+0x268>
   1c680:	9c c0       	rjmp	.+312    	; 0x1c7ba <vfprintf+0x3a0>
   1c682:	24 2d       	mov	r18, r4
   1c684:	29 7e       	andi	r18, 0xE9	; 233
   1c686:	42 2e       	mov	r4, r18
   1c688:	84 2d       	mov	r24, r4
   1c68a:	88 70       	andi	r24, 0x08	; 8
   1c68c:	58 2e       	mov	r5, r24
   1c68e:	43 fc       	sbrc	r4, 3
   1c690:	aa c0       	rjmp	.+340    	; 0x1c7e6 <vfprintf+0x3cc>
   1c692:	40 fe       	sbrs	r4, 0
   1c694:	a4 c0       	rjmp	.+328    	; 0x1c7de <vfprintf+0x3c4>
   1c696:	9c 2c       	mov	r9, r12
   1c698:	82 14       	cp	r8, r2
   1c69a:	18 f4       	brcc	.+6      	; 0x1c6a2 <vfprintf+0x288>
   1c69c:	2c 0c       	add	r2, r12
   1c69e:	92 2c       	mov	r9, r2
   1c6a0:	98 18       	sub	r9, r8
   1c6a2:	44 fe       	sbrs	r4, 4
   1c6a4:	a6 c0       	rjmp	.+332    	; 0x1c7f2 <vfprintf+0x3d8>
   1c6a6:	b7 01       	movw	r22, r14
   1c6a8:	80 e3       	ldi	r24, 0x30	; 48
   1c6aa:	90 e0       	ldi	r25, 0x00	; 0
   1c6ac:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c6b0:	42 fe       	sbrs	r4, 2
   1c6b2:	09 c0       	rjmp	.+18     	; 0x1c6c6 <vfprintf+0x2ac>
   1c6b4:	88 e7       	ldi	r24, 0x78	; 120
   1c6b6:	90 e0       	ldi	r25, 0x00	; 0
   1c6b8:	41 fe       	sbrs	r4, 1
   1c6ba:	02 c0       	rjmp	.+4      	; 0x1c6c0 <vfprintf+0x2a6>
   1c6bc:	88 e5       	ldi	r24, 0x58	; 88
   1c6be:	90 e0       	ldi	r25, 0x00	; 0
   1c6c0:	b7 01       	movw	r22, r14
   1c6c2:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c6c6:	c9 14       	cp	r12, r9
   1c6c8:	08 f4       	brcc	.+2      	; 0x1c6cc <vfprintf+0x2b2>
   1c6ca:	9f c0       	rjmp	.+318    	; 0x1c80a <vfprintf+0x3f0>
   1c6cc:	ca 94       	dec	r12
   1c6ce:	d1 2c       	mov	r13, r1
   1c6d0:	9f ef       	ldi	r25, 0xFF	; 255
   1c6d2:	c9 1a       	sub	r12, r25
   1c6d4:	d9 0a       	sbc	r13, r25
   1c6d6:	ca 0c       	add	r12, r10
   1c6d8:	db 1c       	adc	r13, r11
   1c6da:	f6 01       	movw	r30, r12
   1c6dc:	82 91       	ld	r24, -Z
   1c6de:	6f 01       	movw	r12, r30
   1c6e0:	b7 01       	movw	r22, r14
   1c6e2:	90 e0       	ldi	r25, 0x00	; 0
   1c6e4:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c6e8:	ac 14       	cp	r10, r12
   1c6ea:	bd 04       	cpc	r11, r13
   1c6ec:	b1 f7       	brne	.-20     	; 0x1c6da <vfprintf+0x2c0>
   1c6ee:	4f cf       	rjmp	.-354    	; 0x1c58e <vfprintf+0x174>
   1c6f0:	60 81       	ld	r22, Z
   1c6f2:	71 81       	ldd	r23, Z+1	; 0x01
   1c6f4:	07 2e       	mov	r0, r23
   1c6f6:	00 0c       	add	r0, r0
   1c6f8:	88 0b       	sbc	r24, r24
   1c6fa:	99 0b       	sbc	r25, r25
   1c6fc:	0e 5f       	subi	r16, 0xFE	; 254
   1c6fe:	1f 4f       	sbci	r17, 0xFF	; 255
   1c700:	92 cf       	rjmp	.-220    	; 0x1c626 <vfprintf+0x20c>
   1c702:	d3 2c       	mov	r13, r3
   1c704:	e8 94       	clt
   1c706:	d4 f8       	bld	r13, 4
   1c708:	2a e0       	ldi	r18, 0x0A	; 10
   1c70a:	30 e0       	ldi	r19, 0x00	; 0
   1c70c:	85 37       	cpi	r24, 0x75	; 117
   1c70e:	e1 f1       	breq	.+120    	; 0x1c788 <vfprintf+0x36e>
   1c710:	23 2d       	mov	r18, r3
   1c712:	29 7f       	andi	r18, 0xF9	; 249
   1c714:	d2 2e       	mov	r13, r18
   1c716:	8f 36       	cpi	r24, 0x6F	; 111
   1c718:	a9 f1       	breq	.+106    	; 0x1c784 <vfprintf+0x36a>
   1c71a:	f0 f4       	brcc	.+60     	; 0x1c758 <vfprintf+0x33e>
   1c71c:	88 35       	cpi	r24, 0x58	; 88
   1c71e:	51 f1       	breq	.+84     	; 0x1c774 <vfprintf+0x35a>
   1c720:	f7 01       	movw	r30, r14
   1c722:	86 81       	ldd	r24, Z+6	; 0x06
   1c724:	97 81       	ldd	r25, Z+7	; 0x07
   1c726:	2b 96       	adiw	r28, 0x0b	; 11
   1c728:	0f b6       	in	r0, 0x3f	; 63
   1c72a:	f8 94       	cli
   1c72c:	de bf       	out	0x3e, r29	; 62
   1c72e:	0f be       	out	0x3f, r0	; 63
   1c730:	cd bf       	out	0x3d, r28	; 61
   1c732:	df 91       	pop	r29
   1c734:	cf 91       	pop	r28
   1c736:	1f 91       	pop	r17
   1c738:	0f 91       	pop	r16
   1c73a:	ff 90       	pop	r15
   1c73c:	ef 90       	pop	r14
   1c73e:	df 90       	pop	r13
   1c740:	cf 90       	pop	r12
   1c742:	bf 90       	pop	r11
   1c744:	af 90       	pop	r10
   1c746:	9f 90       	pop	r9
   1c748:	8f 90       	pop	r8
   1c74a:	7f 90       	pop	r7
   1c74c:	6f 90       	pop	r6
   1c74e:	5f 90       	pop	r5
   1c750:	4f 90       	pop	r4
   1c752:	3f 90       	pop	r3
   1c754:	2f 90       	pop	r2
   1c756:	08 95       	ret
   1c758:	80 37       	cpi	r24, 0x70	; 112
   1c75a:	49 f0       	breq	.+18     	; 0x1c76e <vfprintf+0x354>
   1c75c:	88 37       	cpi	r24, 0x78	; 120
   1c75e:	01 f7       	brne	.-64     	; 0x1c720 <vfprintf+0x306>
   1c760:	d4 fe       	sbrs	r13, 4
   1c762:	02 c0       	rjmp	.+4      	; 0x1c768 <vfprintf+0x34e>
   1c764:	68 94       	set
   1c766:	d2 f8       	bld	r13, 2
   1c768:	20 e1       	ldi	r18, 0x10	; 16
   1c76a:	30 e0       	ldi	r19, 0x00	; 0
   1c76c:	0d c0       	rjmp	.+26     	; 0x1c788 <vfprintf+0x36e>
   1c76e:	68 94       	set
   1c770:	d4 f8       	bld	r13, 4
   1c772:	f6 cf       	rjmp	.-20     	; 0x1c760 <vfprintf+0x346>
   1c774:	34 fe       	sbrs	r3, 4
   1c776:	03 c0       	rjmp	.+6      	; 0x1c77e <vfprintf+0x364>
   1c778:	82 2f       	mov	r24, r18
   1c77a:	86 60       	ori	r24, 0x06	; 6
   1c77c:	d8 2e       	mov	r13, r24
   1c77e:	20 e1       	ldi	r18, 0x10	; 16
   1c780:	32 e0       	ldi	r19, 0x02	; 2
   1c782:	02 c0       	rjmp	.+4      	; 0x1c788 <vfprintf+0x36e>
   1c784:	28 e0       	ldi	r18, 0x08	; 8
   1c786:	30 e0       	ldi	r19, 0x00	; 0
   1c788:	f8 01       	movw	r30, r16
   1c78a:	d7 fe       	sbrs	r13, 7
   1c78c:	0f c0       	rjmp	.+30     	; 0x1c7ac <vfprintf+0x392>
   1c78e:	60 81       	ld	r22, Z
   1c790:	71 81       	ldd	r23, Z+1	; 0x01
   1c792:	82 81       	ldd	r24, Z+2	; 0x02
   1c794:	93 81       	ldd	r25, Z+3	; 0x03
   1c796:	0c 5f       	subi	r16, 0xFC	; 252
   1c798:	1f 4f       	sbci	r17, 0xFF	; 255
   1c79a:	a5 01       	movw	r20, r10
   1c79c:	0e 94 52 e8 	call	0x1d0a4	; 0x1d0a4 <__ultoa_invert>
   1c7a0:	c8 2e       	mov	r12, r24
   1c7a2:	ca 18       	sub	r12, r10
   1c7a4:	3d 2c       	mov	r3, r13
   1c7a6:	e8 94       	clt
   1c7a8:	37 f8       	bld	r3, 7
   1c7aa:	52 cf       	rjmp	.-348    	; 0x1c650 <vfprintf+0x236>
   1c7ac:	60 81       	ld	r22, Z
   1c7ae:	71 81       	ldd	r23, Z+1	; 0x01
   1c7b0:	90 e0       	ldi	r25, 0x00	; 0
   1c7b2:	80 e0       	ldi	r24, 0x00	; 0
   1c7b4:	0e 5f       	subi	r16, 0xFE	; 254
   1c7b6:	1f 4f       	sbci	r17, 0xFF	; 255
   1c7b8:	f0 cf       	rjmp	.-32     	; 0x1c79a <vfprintf+0x380>
   1c7ba:	42 fc       	sbrc	r4, 2
   1c7bc:	02 c0       	rjmp	.+4      	; 0x1c7c2 <vfprintf+0x3a8>
   1c7be:	83 94       	inc	r8
   1c7c0:	63 cf       	rjmp	.-314    	; 0x1c688 <vfprintf+0x26e>
   1c7c2:	83 94       	inc	r8
   1c7c4:	83 94       	inc	r8
   1c7c6:	60 cf       	rjmp	.-320    	; 0x1c688 <vfprintf+0x26e>
   1c7c8:	84 2d       	mov	r24, r4
   1c7ca:	86 78       	andi	r24, 0x86	; 134
   1c7cc:	09 f4       	brne	.+2      	; 0x1c7d0 <vfprintf+0x3b6>
   1c7ce:	5c cf       	rjmp	.-328    	; 0x1c688 <vfprintf+0x26e>
   1c7d0:	f6 cf       	rjmp	.-20     	; 0x1c7be <vfprintf+0x3a4>
   1c7d2:	b7 01       	movw	r22, r14
   1c7d4:	80 e2       	ldi	r24, 0x20	; 32
   1c7d6:	90 e0       	ldi	r25, 0x00	; 0
   1c7d8:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c7dc:	83 94       	inc	r8
   1c7de:	82 14       	cp	r8, r2
   1c7e0:	c0 f3       	brcs	.-16     	; 0x1c7d2 <vfprintf+0x3b8>
   1c7e2:	51 2c       	mov	r5, r1
   1c7e4:	5e cf       	rjmp	.-324    	; 0x1c6a2 <vfprintf+0x288>
   1c7e6:	52 2c       	mov	r5, r2
   1c7e8:	58 18       	sub	r5, r8
   1c7ea:	82 14       	cp	r8, r2
   1c7ec:	08 f4       	brcc	.+2      	; 0x1c7f0 <vfprintf+0x3d6>
   1c7ee:	59 cf       	rjmp	.-334    	; 0x1c6a2 <vfprintf+0x288>
   1c7f0:	f8 cf       	rjmp	.-16     	; 0x1c7e2 <vfprintf+0x3c8>
   1c7f2:	84 2d       	mov	r24, r4
   1c7f4:	86 78       	andi	r24, 0x86	; 134
   1c7f6:	09 f4       	brne	.+2      	; 0x1c7fa <vfprintf+0x3e0>
   1c7f8:	66 cf       	rjmp	.-308    	; 0x1c6c6 <vfprintf+0x2ac>
   1c7fa:	8b e2       	ldi	r24, 0x2B	; 43
   1c7fc:	41 fe       	sbrs	r4, 1
   1c7fe:	80 e2       	ldi	r24, 0x20	; 32
   1c800:	47 fc       	sbrc	r4, 7
   1c802:	8d e2       	ldi	r24, 0x2D	; 45
   1c804:	b7 01       	movw	r22, r14
   1c806:	90 e0       	ldi	r25, 0x00	; 0
   1c808:	5c cf       	rjmp	.-328    	; 0x1c6c2 <vfprintf+0x2a8>
   1c80a:	b7 01       	movw	r22, r14
   1c80c:	80 e3       	ldi	r24, 0x30	; 48
   1c80e:	90 e0       	ldi	r25, 0x00	; 0
   1c810:	0e 94 22 e8 	call	0x1d044	; 0x1d044 <fputc>
   1c814:	9a 94       	dec	r9
   1c816:	57 cf       	rjmp	.-338    	; 0x1c6c6 <vfprintf+0x2ac>
   1c818:	8f ef       	ldi	r24, 0xFF	; 255
   1c81a:	9f ef       	ldi	r25, 0xFF	; 255
   1c81c:	84 cf       	rjmp	.-248    	; 0x1c726 <vfprintf+0x30c>

0001c81e <calloc>:
calloc():
   1c81e:	0f 93       	push	r16
   1c820:	1f 93       	push	r17
   1c822:	cf 93       	push	r28
   1c824:	df 93       	push	r29
   1c826:	86 9f       	mul	r24, r22
   1c828:	80 01       	movw	r16, r0
   1c82a:	87 9f       	mul	r24, r23
   1c82c:	10 0d       	add	r17, r0
   1c82e:	96 9f       	mul	r25, r22
   1c830:	10 0d       	add	r17, r0
   1c832:	11 24       	eor	r1, r1
   1c834:	c8 01       	movw	r24, r16
   1c836:	0e 94 46 dd 	call	0x1ba8c	; 0x1ba8c <malloc>
   1c83a:	ec 01       	movw	r28, r24
   1c83c:	00 97       	sbiw	r24, 0x00	; 0
   1c83e:	29 f0       	breq	.+10     	; 0x1c84a <calloc+0x2c>
   1c840:	a8 01       	movw	r20, r16
   1c842:	70 e0       	ldi	r23, 0x00	; 0
   1c844:	60 e0       	ldi	r22, 0x00	; 0
   1c846:	0e 94 00 e8 	call	0x1d000	; 0x1d000 <memset>
   1c84a:	ce 01       	movw	r24, r28
   1c84c:	df 91       	pop	r29
   1c84e:	cf 91       	pop	r28
   1c850:	1f 91       	pop	r17
   1c852:	0f 91       	pop	r16
   1c854:	08 95       	ret

0001c856 <dtoa_prf>:
dtoa_prf():
   1c856:	8f 92       	push	r8
   1c858:	9f 92       	push	r9
   1c85a:	af 92       	push	r10
   1c85c:	bf 92       	push	r11
   1c85e:	cf 92       	push	r12
   1c860:	df 92       	push	r13
   1c862:	ef 92       	push	r14
   1c864:	ff 92       	push	r15
   1c866:	0f 93       	push	r16
   1c868:	1f 93       	push	r17
   1c86a:	cf 93       	push	r28
   1c86c:	df 93       	push	r29
   1c86e:	00 d0       	rcall	.+0      	; 0x1c870 <dtoa_prf+0x1a>
   1c870:	00 d0       	rcall	.+0      	; 0x1c872 <dtoa_prf+0x1c>
   1c872:	00 d0       	rcall	.+0      	; 0x1c874 <dtoa_prf+0x1e>
   1c874:	cd b7       	in	r28, 0x3d	; 61
   1c876:	de b7       	in	r29, 0x3e	; 62
   1c878:	6a 01       	movw	r12, r20
   1c87a:	f2 2e       	mov	r15, r18
   1c87c:	b0 2e       	mov	r11, r16
   1c87e:	10 2f       	mov	r17, r16
   1c880:	fb e3       	ldi	r31, 0x3B	; 59
   1c882:	af 2e       	mov	r10, r31
   1c884:	a0 16       	cp	r10, r16
   1c886:	08 f4       	brcc	.+2      	; 0x1c88a <dtoa_prf+0x34>
   1c888:	1b e3       	ldi	r17, 0x3B	; 59
   1c88a:	1f 5f       	subi	r17, 0xFF	; 255
   1c88c:	01 2f       	mov	r16, r17
   1c88e:	27 e0       	ldi	r18, 0x07	; 7
   1c890:	ae 01       	movw	r20, r28
   1c892:	4f 5f       	subi	r20, 0xFF	; 255
   1c894:	5f 4f       	sbci	r21, 0xFF	; 255
   1c896:	0e 94 02 e7 	call	0x1ce04	; 0x1ce04 <__ftoa_engine>
   1c89a:	bc 01       	movw	r22, r24
   1c89c:	89 81       	ldd	r24, Y+1	; 0x01
   1c89e:	98 2f       	mov	r25, r24
   1c8a0:	99 70       	andi	r25, 0x09	; 9
   1c8a2:	91 30       	cpi	r25, 0x01	; 1
   1c8a4:	09 f4       	brne	.+2      	; 0x1c8a8 <dtoa_prf+0x52>
   1c8a6:	4e c0       	rjmp	.+156    	; 0x1c944 <dtoa_prf+0xee>
   1c8a8:	9b e2       	ldi	r25, 0x2B	; 43
   1c8aa:	e1 fc       	sbrc	r14, 1
   1c8ac:	04 c0       	rjmp	.+8      	; 0x1c8b6 <dtoa_prf+0x60>
   1c8ae:	9e 2d       	mov	r25, r14
   1c8b0:	91 70       	andi	r25, 0x01	; 1
   1c8b2:	e0 fc       	sbrc	r14, 0
   1c8b4:	49 c0       	rjmp	.+146    	; 0x1c948 <dtoa_prf+0xf2>
   1c8b6:	5e 2d       	mov	r21, r14
   1c8b8:	50 71       	andi	r21, 0x10	; 16
   1c8ba:	e8 2f       	mov	r30, r24
   1c8bc:	e8 70       	andi	r30, 0x08	; 8
   1c8be:	83 ff       	sbrs	r24, 3
   1c8c0:	55 c0       	rjmp	.+170    	; 0x1c96c <dtoa_prf+0x116>
   1c8c2:	84 e0       	ldi	r24, 0x04	; 4
   1c8c4:	91 11       	cpse	r25, r1
   1c8c6:	01 c0       	rjmp	.+2      	; 0x1c8ca <dtoa_prf+0x74>
   1c8c8:	83 e0       	ldi	r24, 0x03	; 3
   1c8ca:	ef 2d       	mov	r30, r15
   1c8cc:	e8 1b       	sub	r30, r24
   1c8ce:	8f 15       	cp	r24, r15
   1c8d0:	08 f0       	brcs	.+2      	; 0x1c8d4 <dtoa_prf+0x7e>
   1c8d2:	e0 e0       	ldi	r30, 0x00	; 0
   1c8d4:	d6 01       	movw	r26, r12
   1c8d6:	8e 2f       	mov	r24, r30
   1c8d8:	20 e2       	ldi	r18, 0x20	; 32
   1c8da:	55 23       	and	r21, r21
   1c8dc:	c9 f1       	breq	.+114    	; 0x1c950 <dtoa_prf+0xfa>
   1c8de:	99 23       	and	r25, r25
   1c8e0:	29 f0       	breq	.+10     	; 0x1c8ec <dtoa_prf+0x96>
   1c8e2:	d6 01       	movw	r26, r12
   1c8e4:	9c 93       	st	X, r25
   1c8e6:	c6 01       	movw	r24, r12
   1c8e8:	01 96       	adiw	r24, 0x01	; 1
   1c8ea:	6c 01       	movw	r12, r24
   1c8ec:	96 01       	movw	r18, r12
   1c8ee:	2d 5f       	subi	r18, 0xFD	; 253
   1c8f0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c8f2:	e2 fe       	sbrs	r14, 2
   1c8f4:	33 c0       	rjmp	.+102    	; 0x1c95c <dtoa_prf+0x106>
   1c8f6:	8e e4       	ldi	r24, 0x4E	; 78
   1c8f8:	d6 01       	movw	r26, r12
   1c8fa:	8c 93       	st	X, r24
   1c8fc:	91 e4       	ldi	r25, 0x41	; 65
   1c8fe:	11 96       	adiw	r26, 0x01	; 1
   1c900:	9c 93       	st	X, r25
   1c902:	11 97       	sbiw	r26, 0x01	; 1
   1c904:	12 96       	adiw	r26, 0x02	; 2
   1c906:	8c 93       	st	X, r24
   1c908:	d9 01       	movw	r26, r18
   1c90a:	8e 2f       	mov	r24, r30
   1c90c:	90 e2       	ldi	r25, 0x20	; 32
   1c90e:	81 11       	cpse	r24, r1
   1c910:	2a c0       	rjmp	.+84     	; 0x1c966 <dtoa_prf+0x110>
   1c912:	e2 0f       	add	r30, r18
   1c914:	f3 2f       	mov	r31, r19
   1c916:	f1 1d       	adc	r31, r1
   1c918:	10 82       	st	Z, r1
   1c91a:	8e ef       	ldi	r24, 0xFE	; 254
   1c91c:	9f ef       	ldi	r25, 0xFF	; 255
   1c91e:	29 96       	adiw	r28, 0x09	; 9
   1c920:	0f b6       	in	r0, 0x3f	; 63
   1c922:	f8 94       	cli
   1c924:	de bf       	out	0x3e, r29	; 62
   1c926:	0f be       	out	0x3f, r0	; 63
   1c928:	cd bf       	out	0x3d, r28	; 61
   1c92a:	df 91       	pop	r29
   1c92c:	cf 91       	pop	r28
   1c92e:	1f 91       	pop	r17
   1c930:	0f 91       	pop	r16
   1c932:	ff 90       	pop	r15
   1c934:	ef 90       	pop	r14
   1c936:	df 90       	pop	r13
   1c938:	cf 90       	pop	r12
   1c93a:	bf 90       	pop	r11
   1c93c:	af 90       	pop	r10
   1c93e:	9f 90       	pop	r9
   1c940:	8f 90       	pop	r8
   1c942:	08 95       	ret
   1c944:	9d e2       	ldi	r25, 0x2D	; 45
   1c946:	b7 cf       	rjmp	.-146    	; 0x1c8b6 <dtoa_prf+0x60>
   1c948:	90 e2       	ldi	r25, 0x20	; 32
   1c94a:	b5 cf       	rjmp	.-150    	; 0x1c8b6 <dtoa_prf+0x60>
   1c94c:	2d 93       	st	X+, r18
   1c94e:	81 50       	subi	r24, 0x01	; 1
   1c950:	81 11       	cpse	r24, r1
   1c952:	fc cf       	rjmp	.-8      	; 0x1c94c <dtoa_prf+0xf6>
   1c954:	ce 0e       	add	r12, r30
   1c956:	d1 1c       	adc	r13, r1
   1c958:	e0 e0       	ldi	r30, 0x00	; 0
   1c95a:	c1 cf       	rjmp	.-126    	; 0x1c8de <dtoa_prf+0x88>
   1c95c:	8e e6       	ldi	r24, 0x6E	; 110
   1c95e:	d6 01       	movw	r26, r12
   1c960:	8c 93       	st	X, r24
   1c962:	91 e6       	ldi	r25, 0x61	; 97
   1c964:	cc cf       	rjmp	.-104    	; 0x1c8fe <dtoa_prf+0xa8>
   1c966:	9d 93       	st	X+, r25
   1c968:	81 50       	subi	r24, 0x01	; 1
   1c96a:	d1 cf       	rjmp	.-94     	; 0x1c90e <dtoa_prf+0xb8>
   1c96c:	48 2f       	mov	r20, r24
   1c96e:	44 70       	andi	r20, 0x04	; 4
   1c970:	82 ff       	sbrs	r24, 2
   1c972:	3d c0       	rjmp	.+122    	; 0x1c9ee <dtoa_prf+0x198>
   1c974:	84 e0       	ldi	r24, 0x04	; 4
   1c976:	91 11       	cpse	r25, r1
   1c978:	01 c0       	rjmp	.+2      	; 0x1c97c <dtoa_prf+0x126>
   1c97a:	83 e0       	ldi	r24, 0x03	; 3
   1c97c:	8f 15       	cp	r24, r15
   1c97e:	10 f4       	brcc	.+4      	; 0x1c984 <dtoa_prf+0x12e>
   1c980:	ef 2d       	mov	r30, r15
   1c982:	e8 1b       	sub	r30, r24
   1c984:	d6 01       	movw	r26, r12
   1c986:	8e 2f       	mov	r24, r30
   1c988:	20 e2       	ldi	r18, 0x20	; 32
   1c98a:	55 23       	and	r21, r21
   1c98c:	09 f1       	breq	.+66     	; 0x1c9d0 <dtoa_prf+0x17a>
   1c98e:	99 23       	and	r25, r25
   1c990:	29 f0       	breq	.+10     	; 0x1c99c <dtoa_prf+0x146>
   1c992:	d6 01       	movw	r26, r12
   1c994:	9c 93       	st	X, r25
   1c996:	c6 01       	movw	r24, r12
   1c998:	01 96       	adiw	r24, 0x01	; 1
   1c99a:	6c 01       	movw	r12, r24
   1c99c:	96 01       	movw	r18, r12
   1c99e:	2d 5f       	subi	r18, 0xFD	; 253
   1c9a0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c9a2:	e2 fe       	sbrs	r14, 2
   1c9a4:	1b c0       	rjmp	.+54     	; 0x1c9dc <dtoa_prf+0x186>
   1c9a6:	89 e4       	ldi	r24, 0x49	; 73
   1c9a8:	d6 01       	movw	r26, r12
   1c9aa:	8c 93       	st	X, r24
   1c9ac:	8e e4       	ldi	r24, 0x4E	; 78
   1c9ae:	11 96       	adiw	r26, 0x01	; 1
   1c9b0:	8c 93       	st	X, r24
   1c9b2:	11 97       	sbiw	r26, 0x01	; 1
   1c9b4:	86 e4       	ldi	r24, 0x46	; 70
   1c9b6:	12 96       	adiw	r26, 0x02	; 2
   1c9b8:	8c 93       	st	X, r24
   1c9ba:	d9 01       	movw	r26, r18
   1c9bc:	8e 2f       	mov	r24, r30
   1c9be:	90 e2       	ldi	r25, 0x20	; 32
   1c9c0:	88 23       	and	r24, r24
   1c9c2:	09 f4       	brne	.+2      	; 0x1c9c6 <dtoa_prf+0x170>
   1c9c4:	a6 cf       	rjmp	.-180    	; 0x1c912 <dtoa_prf+0xbc>
   1c9c6:	9d 93       	st	X+, r25
   1c9c8:	81 50       	subi	r24, 0x01	; 1
   1c9ca:	fa cf       	rjmp	.-12     	; 0x1c9c0 <dtoa_prf+0x16a>
   1c9cc:	2d 93       	st	X+, r18
   1c9ce:	81 50       	subi	r24, 0x01	; 1
   1c9d0:	81 11       	cpse	r24, r1
   1c9d2:	fc cf       	rjmp	.-8      	; 0x1c9cc <dtoa_prf+0x176>
   1c9d4:	ce 0e       	add	r12, r30
   1c9d6:	d1 1c       	adc	r13, r1
   1c9d8:	e0 e0       	ldi	r30, 0x00	; 0
   1c9da:	d9 cf       	rjmp	.-78     	; 0x1c98e <dtoa_prf+0x138>
   1c9dc:	89 e6       	ldi	r24, 0x69	; 105
   1c9de:	d6 01       	movw	r26, r12
   1c9e0:	8c 93       	st	X, r24
   1c9e2:	8e e6       	ldi	r24, 0x6E	; 110
   1c9e4:	11 96       	adiw	r26, 0x01	; 1
   1c9e6:	8c 93       	st	X, r24
   1c9e8:	11 97       	sbiw	r26, 0x01	; 1
   1c9ea:	86 e6       	ldi	r24, 0x66	; 102
   1c9ec:	e4 cf       	rjmp	.-56     	; 0x1c9b6 <dtoa_prf+0x160>
   1c9ee:	9b 01       	movw	r18, r22
   1c9f0:	77 ff       	sbrs	r23, 7
   1c9f2:	02 c0       	rjmp	.+4      	; 0x1c9f8 <dtoa_prf+0x1a2>
   1c9f4:	30 e0       	ldi	r19, 0x00	; 0
   1c9f6:	20 e0       	ldi	r18, 0x00	; 0
   1c9f8:	a1 e0       	ldi	r26, 0x01	; 1
   1c9fa:	b0 e0       	ldi	r27, 0x00	; 0
   1c9fc:	91 11       	cpse	r25, r1
   1c9fe:	02 c0       	rjmp	.+4      	; 0x1ca04 <dtoa_prf+0x1ae>
   1ca00:	b0 e0       	ldi	r27, 0x00	; 0
   1ca02:	a0 e0       	ldi	r26, 0x00	; 0
   1ca04:	f9 01       	movw	r30, r18
   1ca06:	31 96       	adiw	r30, 0x01	; 1
   1ca08:	ae 0f       	add	r26, r30
   1ca0a:	bf 1f       	adc	r27, r31
   1ca0c:	8b 2c       	mov	r8, r11
   1ca0e:	91 2c       	mov	r9, r1
   1ca10:	bb 20       	and	r11, r11
   1ca12:	09 f4       	brne	.+2      	; 0x1ca16 <dtoa_prf+0x1c0>
   1ca14:	61 c0       	rjmp	.+194    	; 0x1cad8 <dtoa_prf+0x282>
   1ca16:	54 01       	movw	r10, r8
   1ca18:	ef ef       	ldi	r30, 0xFF	; 255
   1ca1a:	ae 1a       	sub	r10, r30
   1ca1c:	be 0a       	sbc	r11, r30
   1ca1e:	aa 0d       	add	r26, r10
   1ca20:	bb 1d       	adc	r27, r11
   1ca22:	fa 16       	cp	r15, r26
   1ca24:	1b 06       	cpc	r1, r27
   1ca26:	19 f0       	breq	.+6      	; 0x1ca2e <dtoa_prf+0x1d8>
   1ca28:	14 f0       	brlt	.+4      	; 0x1ca2e <dtoa_prf+0x1d8>
   1ca2a:	4f 2d       	mov	r20, r15
   1ca2c:	4a 1b       	sub	r20, r26
   1ca2e:	51 11       	cpse	r21, r1
   1ca30:	88 c0       	rjmp	.+272    	; 0x1cb42 <dtoa_prf+0x2ec>
   1ca32:	e3 fc       	sbrc	r14, 3
   1ca34:	59 c0       	rjmp	.+178    	; 0x1cae8 <dtoa_prf+0x292>
   1ca36:	76 01       	movw	r14, r12
   1ca38:	a4 2f       	mov	r26, r20
   1ca3a:	b0 e2       	ldi	r27, 0x20	; 32
   1ca3c:	a1 11       	cpse	r26, r1
   1ca3e:	4f c0       	rjmp	.+158    	; 0x1cade <dtoa_prf+0x288>
   1ca40:	c4 0e       	add	r12, r20
   1ca42:	d1 1c       	adc	r13, r1
   1ca44:	99 23       	and	r25, r25
   1ca46:	09 f4       	brne	.+2      	; 0x1ca4a <dtoa_prf+0x1f4>
   1ca48:	5b c0       	rjmp	.+182    	; 0x1cb00 <dtoa_prf+0x2aa>
   1ca4a:	40 e0       	ldi	r20, 0x00	; 0
   1ca4c:	d6 01       	movw	r26, r12
   1ca4e:	11 96       	adiw	r26, 0x01	; 1
   1ca50:	f6 01       	movw	r30, r12
   1ca52:	90 83       	st	Z, r25
   1ca54:	6d 01       	movw	r12, r26
   1ca56:	55 23       	and	r21, r21
   1ca58:	09 f4       	brne	.+2      	; 0x1ca5c <dtoa_prf+0x206>
   1ca5a:	48 c0       	rjmp	.+144    	; 0x1caec <dtoa_prf+0x296>
   1ca5c:	01 2f       	mov	r16, r17
   1ca5e:	06 0f       	add	r16, r22
   1ca60:	9a 81       	ldd	r25, Y+2	; 0x02
   1ca62:	58 2f       	mov	r21, r24
   1ca64:	50 71       	andi	r21, 0x10	; 16
   1ca66:	84 ff       	sbrs	r24, 4
   1ca68:	03 c0       	rjmp	.+6      	; 0x1ca70 <dtoa_prf+0x21a>
   1ca6a:	91 33       	cpi	r25, 0x31	; 49
   1ca6c:	09 f4       	brne	.+2      	; 0x1ca70 <dtoa_prf+0x21a>
   1ca6e:	01 50       	subi	r16, 0x01	; 1
   1ca70:	10 16       	cp	r1, r16
   1ca72:	0c f0       	brlt	.+2      	; 0x1ca76 <dtoa_prf+0x220>
   1ca74:	47 c0       	rjmp	.+142    	; 0x1cb04 <dtoa_prf+0x2ae>
   1ca76:	09 30       	cpi	r16, 0x09	; 9
   1ca78:	08 f0       	brcs	.+2      	; 0x1ca7c <dtoa_prf+0x226>
   1ca7a:	08 e0       	ldi	r16, 0x08	; 8
   1ca7c:	ee e2       	ldi	r30, 0x2E	; 46
   1ca7e:	fe 2e       	mov	r15, r30
   1ca80:	5b 01       	movw	r10, r22
   1ca82:	a0 1a       	sub	r10, r16
   1ca84:	b1 08       	sbc	r11, r1
   1ca86:	85 01       	movw	r16, r10
   1ca88:	91 94       	neg	r9
   1ca8a:	81 94       	neg	r8
   1ca8c:	91 08       	sbc	r9, r1
   1ca8e:	2f 3f       	cpi	r18, 0xFF	; 255
   1ca90:	32 07       	cpc	r19, r18
   1ca92:	29 f4       	brne	.+10     	; 0x1ca9e <dtoa_prf+0x248>
   1ca94:	d6 01       	movw	r26, r12
   1ca96:	fc 92       	st	X, r15
   1ca98:	f6 01       	movw	r30, r12
   1ca9a:	31 96       	adiw	r30, 0x01	; 1
   1ca9c:	6f 01       	movw	r12, r30
   1ca9e:	62 17       	cp	r22, r18
   1caa0:	73 07       	cpc	r23, r19
   1caa2:	94 f1       	brlt	.+100    	; 0x1cb08 <dtoa_prf+0x2b2>
   1caa4:	02 17       	cp	r16, r18
   1caa6:	13 07       	cpc	r17, r19
   1caa8:	7c f5       	brge	.+94     	; 0x1cb08 <dtoa_prf+0x2b2>
   1caaa:	db 01       	movw	r26, r22
   1caac:	a2 1b       	sub	r26, r18
   1caae:	b3 0b       	sbc	r27, r19
   1cab0:	aa 24       	eor	r10, r10
   1cab2:	a3 94       	inc	r10
   1cab4:	b1 2c       	mov	r11, r1
   1cab6:	ac 0e       	add	r10, r28
   1cab8:	bd 1e       	adc	r11, r29
   1caba:	aa 0d       	add	r26, r10
   1cabc:	bb 1d       	adc	r27, r11
   1cabe:	11 96       	adiw	r26, 0x01	; 1
   1cac0:	8c 91       	ld	r24, X
   1cac2:	21 50       	subi	r18, 0x01	; 1
   1cac4:	31 09       	sbc	r19, r1
   1cac6:	d6 01       	movw	r26, r12
   1cac8:	11 96       	adiw	r26, 0x01	; 1
   1caca:	28 15       	cp	r18, r8
   1cacc:	39 05       	cpc	r19, r9
   1cace:	f4 f0       	brlt	.+60     	; 0x1cb0c <dtoa_prf+0x2b6>
   1cad0:	f6 01       	movw	r30, r12
   1cad2:	80 83       	st	Z, r24
   1cad4:	6d 01       	movw	r12, r26
   1cad6:	db cf       	rjmp	.-74     	; 0x1ca8e <dtoa_prf+0x238>
   1cad8:	b1 2c       	mov	r11, r1
   1cada:	a1 2c       	mov	r10, r1
   1cadc:	a0 cf       	rjmp	.-192    	; 0x1ca1e <dtoa_prf+0x1c8>
   1cade:	f7 01       	movw	r30, r14
   1cae0:	b1 93       	st	Z+, r27
   1cae2:	7f 01       	movw	r14, r30
   1cae4:	a1 50       	subi	r26, 0x01	; 1
   1cae6:	aa cf       	rjmp	.-172    	; 0x1ca3c <dtoa_prf+0x1e6>
   1cae8:	91 11       	cpse	r25, r1
   1caea:	b0 cf       	rjmp	.-160    	; 0x1ca4c <dtoa_prf+0x1f6>
   1caec:	d6 01       	movw	r26, r12
   1caee:	94 2f       	mov	r25, r20
   1caf0:	50 e3       	ldi	r21, 0x30	; 48
   1caf2:	02 c0       	rjmp	.+4      	; 0x1caf8 <dtoa_prf+0x2a2>
   1caf4:	5d 93       	st	X+, r21
   1caf6:	91 50       	subi	r25, 0x01	; 1
   1caf8:	91 11       	cpse	r25, r1
   1cafa:	fc cf       	rjmp	.-8      	; 0x1caf4 <dtoa_prf+0x29e>
   1cafc:	c4 0e       	add	r12, r20
   1cafe:	d1 1c       	adc	r13, r1
   1cb00:	40 e0       	ldi	r20, 0x00	; 0
   1cb02:	ac cf       	rjmp	.-168    	; 0x1ca5c <dtoa_prf+0x206>
   1cb04:	01 e0       	ldi	r16, 0x01	; 1
   1cb06:	ba cf       	rjmp	.-140    	; 0x1ca7c <dtoa_prf+0x226>
   1cb08:	80 e3       	ldi	r24, 0x30	; 48
   1cb0a:	db cf       	rjmp	.-74     	; 0x1cac2 <dtoa_prf+0x26c>
   1cb0c:	62 17       	cp	r22, r18
   1cb0e:	73 07       	cpc	r23, r19
   1cb10:	31 f4       	brne	.+12     	; 0x1cb1e <dtoa_prf+0x2c8>
   1cb12:	96 33       	cpi	r25, 0x36	; 54
   1cb14:	88 f4       	brcc	.+34     	; 0x1cb38 <dtoa_prf+0x2e2>
   1cb16:	95 33       	cpi	r25, 0x35	; 53
   1cb18:	11 f4       	brne	.+4      	; 0x1cb1e <dtoa_prf+0x2c8>
   1cb1a:	55 23       	and	r21, r21
   1cb1c:	69 f0       	breq	.+26     	; 0x1cb38 <dtoa_prf+0x2e2>
   1cb1e:	f6 01       	movw	r30, r12
   1cb20:	80 83       	st	Z, r24
   1cb22:	fd 01       	movw	r30, r26
   1cb24:	84 2f       	mov	r24, r20
   1cb26:	90 e2       	ldi	r25, 0x20	; 32
   1cb28:	81 11       	cpse	r24, r1
   1cb2a:	08 c0       	rjmp	.+16     	; 0x1cb3c <dtoa_prf+0x2e6>
   1cb2c:	a4 0f       	add	r26, r20
   1cb2e:	b1 1d       	adc	r27, r1
   1cb30:	1c 92       	st	X, r1
   1cb32:	90 e0       	ldi	r25, 0x00	; 0
   1cb34:	80 e0       	ldi	r24, 0x00	; 0
   1cb36:	f3 ce       	rjmp	.-538    	; 0x1c91e <dtoa_prf+0xc8>
   1cb38:	81 e3       	ldi	r24, 0x31	; 49
   1cb3a:	f1 cf       	rjmp	.-30     	; 0x1cb1e <dtoa_prf+0x2c8>
   1cb3c:	91 93       	st	Z+, r25
   1cb3e:	81 50       	subi	r24, 0x01	; 1
   1cb40:	f3 cf       	rjmp	.-26     	; 0x1cb28 <dtoa_prf+0x2d2>
   1cb42:	91 11       	cpse	r25, r1
   1cb44:	83 cf       	rjmp	.-250    	; 0x1ca4c <dtoa_prf+0x1f6>
   1cb46:	8a cf       	rjmp	.-236    	; 0x1ca5c <dtoa_prf+0x206>

0001cb48 <strtod>:
strtod():
   1cb48:	8f 92       	push	r8
   1cb4a:	9f 92       	push	r9
   1cb4c:	af 92       	push	r10
   1cb4e:	bf 92       	push	r11
   1cb50:	cf 92       	push	r12
   1cb52:	df 92       	push	r13
   1cb54:	ef 92       	push	r14
   1cb56:	ff 92       	push	r15
   1cb58:	0f 93       	push	r16
   1cb5a:	1f 93       	push	r17
   1cb5c:	cf 93       	push	r28
   1cb5e:	df 93       	push	r29
   1cb60:	5c 01       	movw	r10, r24
   1cb62:	7b 01       	movw	r14, r22
   1cb64:	61 15       	cp	r22, r1
   1cb66:	71 05       	cpc	r23, r1
   1cb68:	19 f0       	breq	.+6      	; 0x1cb70 <strtod+0x28>
   1cb6a:	db 01       	movw	r26, r22
   1cb6c:	8d 93       	st	X+, r24
   1cb6e:	9c 93       	st	X, r25
   1cb70:	85 01       	movw	r16, r10
   1cb72:	0f 5f       	subi	r16, 0xFF	; 255
   1cb74:	1f 4f       	sbci	r17, 0xFF	; 255
   1cb76:	f5 01       	movw	r30, r10
   1cb78:	d0 81       	ld	r29, Z
   1cb7a:	8d 2f       	mov	r24, r29
   1cb7c:	90 e0       	ldi	r25, 0x00	; 0
   1cb7e:	0e 94 76 e0 	call	0x1c0ec	; 0x1c0ec <isspace>
   1cb82:	6c 01       	movw	r12, r24
   1cb84:	89 2b       	or	r24, r25
   1cb86:	b9 f5       	brne	.+110    	; 0x1cbf6 <strtod+0xae>
   1cb88:	dd 32       	cpi	r29, 0x2D	; 45
   1cb8a:	b9 f5       	brne	.+110    	; 0x1cbfa <strtod+0xb2>
   1cb8c:	0f 5f       	subi	r16, 0xFF	; 255
   1cb8e:	1f 4f       	sbci	r17, 0xFF	; 255
   1cb90:	d5 01       	movw	r26, r10
   1cb92:	11 96       	adiw	r26, 0x01	; 1
   1cb94:	dc 91       	ld	r29, X
   1cb96:	c1 e0       	ldi	r28, 0x01	; 1
   1cb98:	58 01       	movw	r10, r16
   1cb9a:	f1 e0       	ldi	r31, 0x01	; 1
   1cb9c:	af 1a       	sub	r10, r31
   1cb9e:	b1 08       	sbc	r11, r1
   1cba0:	43 e0       	ldi	r20, 0x03	; 3
   1cba2:	50 e0       	ldi	r21, 0x00	; 0
   1cba4:	6c ec       	ldi	r22, 0xCC	; 204
   1cba6:	73 e0       	ldi	r23, 0x03	; 3
   1cba8:	c5 01       	movw	r24, r10
   1cbaa:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <strncasecmp_P>
   1cbae:	89 2b       	or	r24, r25
   1cbb0:	69 f5       	brne	.+90     	; 0x1cc0c <strtod+0xc4>
   1cbb2:	68 01       	movw	r12, r16
   1cbb4:	82 e0       	ldi	r24, 0x02	; 2
   1cbb6:	c8 0e       	add	r12, r24
   1cbb8:	d1 1c       	adc	r13, r1
   1cbba:	45 e0       	ldi	r20, 0x05	; 5
   1cbbc:	50 e0       	ldi	r21, 0x00	; 0
   1cbbe:	67 ec       	ldi	r22, 0xC7	; 199
   1cbc0:	73 e0       	ldi	r23, 0x03	; 3
   1cbc2:	c6 01       	movw	r24, r12
   1cbc4:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <strncasecmp_P>
   1cbc8:	89 2b       	or	r24, r25
   1cbca:	21 f4       	brne	.+8      	; 0x1cbd4 <strtod+0x8c>
   1cbcc:	68 01       	movw	r12, r16
   1cbce:	97 e0       	ldi	r25, 0x07	; 7
   1cbd0:	c9 0e       	add	r12, r25
   1cbd2:	d1 1c       	adc	r13, r1
   1cbd4:	e1 14       	cp	r14, r1
   1cbd6:	f1 04       	cpc	r15, r1
   1cbd8:	19 f0       	breq	.+6      	; 0x1cbe0 <strtod+0x98>
   1cbda:	d7 01       	movw	r26, r14
   1cbdc:	cd 92       	st	X+, r12
   1cbde:	dc 92       	st	X, r13
   1cbe0:	60 e0       	ldi	r22, 0x00	; 0
   1cbe2:	70 e0       	ldi	r23, 0x00	; 0
   1cbe4:	80 e8       	ldi	r24, 0x80	; 128
   1cbe6:	9f ef       	ldi	r25, 0xFF	; 255
   1cbe8:	c1 11       	cpse	r28, r1
   1cbea:	ff c0       	rjmp	.+510    	; 0x1cdea <strtod+0x2a2>
   1cbec:	60 e0       	ldi	r22, 0x00	; 0
   1cbee:	70 e0       	ldi	r23, 0x00	; 0
   1cbf0:	80 e8       	ldi	r24, 0x80	; 128
   1cbf2:	9f e7       	ldi	r25, 0x7F	; 127
   1cbf4:	fa c0       	rjmp	.+500    	; 0x1cdea <strtod+0x2a2>
   1cbf6:	58 01       	movw	r10, r16
   1cbf8:	bb cf       	rjmp	.-138    	; 0x1cb70 <strtod+0x28>
   1cbfa:	db 32       	cpi	r29, 0x2B	; 43
   1cbfc:	29 f4       	brne	.+10     	; 0x1cc08 <strtod+0xc0>
   1cbfe:	85 01       	movw	r16, r10
   1cc00:	0e 5f       	subi	r16, 0xFE	; 254
   1cc02:	1f 4f       	sbci	r17, 0xFF	; 255
   1cc04:	f5 01       	movw	r30, r10
   1cc06:	d1 81       	ldd	r29, Z+1	; 0x01
   1cc08:	c0 e0       	ldi	r28, 0x00	; 0
   1cc0a:	c6 cf       	rjmp	.-116    	; 0x1cb98 <strtod+0x50>
   1cc0c:	43 e0       	ldi	r20, 0x03	; 3
   1cc0e:	50 e0       	ldi	r21, 0x00	; 0
   1cc10:	64 ec       	ldi	r22, 0xC4	; 196
   1cc12:	73 e0       	ldi	r23, 0x03	; 3
   1cc14:	c5 01       	movw	r24, r10
   1cc16:	0e 94 dd e7 	call	0x1cfba	; 0x1cfba <strncasecmp_P>
   1cc1a:	89 2b       	or	r24, r25
   1cc1c:	e9 f0       	breq	.+58     	; 0x1cc58 <strtod+0x110>
   1cc1e:	f8 01       	movw	r30, r16
   1cc20:	10 e0       	ldi	r17, 0x00	; 0
   1cc22:	00 e0       	ldi	r16, 0x00	; 0
   1cc24:	20 e0       	ldi	r18, 0x00	; 0
   1cc26:	30 e0       	ldi	r19, 0x00	; 0
   1cc28:	a9 01       	movw	r20, r18
   1cc2a:	5f 01       	movw	r10, r30
   1cc2c:	b0 ed       	ldi	r27, 0xD0	; 208
   1cc2e:	8b 2e       	mov	r8, r27
   1cc30:	8d 0e       	add	r8, r29
   1cc32:	89 e0       	ldi	r24, 0x09	; 9
   1cc34:	88 15       	cp	r24, r8
   1cc36:	c8 f1       	brcs	.+114    	; 0x1ccaa <strtod+0x162>
   1cc38:	9c 2e       	mov	r9, r28
   1cc3a:	68 94       	set
   1cc3c:	91 f8       	bld	r9, 1
   1cc3e:	8c 2f       	mov	r24, r28
   1cc40:	88 70       	andi	r24, 0x08	; 8
   1cc42:	c2 ff       	sbrs	r28, 2
   1cc44:	16 c0       	rjmp	.+44     	; 0x1cc72 <strtod+0x12a>
   1cc46:	81 11       	cpse	r24, r1
   1cc48:	02 c0       	rjmp	.+4      	; 0x1cc4e <strtod+0x106>
   1cc4a:	0f 5f       	subi	r16, 0xFF	; 255
   1cc4c:	1f 4f       	sbci	r17, 0xFF	; 255
   1cc4e:	31 96       	adiw	r30, 0x01	; 1
   1cc50:	d5 01       	movw	r26, r10
   1cc52:	dc 91       	ld	r29, X
   1cc54:	c9 2d       	mov	r28, r9
   1cc56:	e9 cf       	rjmp	.-46     	; 0x1cc2a <strtod+0xe2>
   1cc58:	e1 14       	cp	r14, r1
   1cc5a:	f1 04       	cpc	r15, r1
   1cc5c:	29 f0       	breq	.+10     	; 0x1cc68 <strtod+0x120>
   1cc5e:	0e 5f       	subi	r16, 0xFE	; 254
   1cc60:	1f 4f       	sbci	r17, 0xFF	; 255
   1cc62:	f7 01       	movw	r30, r14
   1cc64:	11 83       	std	Z+1, r17	; 0x01
   1cc66:	00 83       	st	Z, r16
   1cc68:	60 e0       	ldi	r22, 0x00	; 0
   1cc6a:	70 e0       	ldi	r23, 0x00	; 0
   1cc6c:	80 ec       	ldi	r24, 0xC0	; 192
   1cc6e:	9f e7       	ldi	r25, 0x7F	; 127
   1cc70:	bc c0       	rjmp	.+376    	; 0x1cdea <strtod+0x2a2>
   1cc72:	88 23       	and	r24, r24
   1cc74:	11 f0       	breq	.+4      	; 0x1cc7a <strtod+0x132>
   1cc76:	01 50       	subi	r16, 0x01	; 1
   1cc78:	11 09       	sbc	r17, r1
   1cc7a:	a5 e0       	ldi	r26, 0x05	; 5
   1cc7c:	b0 e0       	ldi	r27, 0x00	; 0
   1cc7e:	0e 94 1d dd 	call	0x1ba3a	; 0x1ba3a <__muluhisi3>
   1cc82:	9b 01       	movw	r18, r22
   1cc84:	ac 01       	movw	r20, r24
   1cc86:	22 0f       	add	r18, r18
   1cc88:	33 1f       	adc	r19, r19
   1cc8a:	44 1f       	adc	r20, r20
   1cc8c:	55 1f       	adc	r21, r21
   1cc8e:	28 0d       	add	r18, r8
   1cc90:	31 1d       	adc	r19, r1
   1cc92:	41 1d       	adc	r20, r1
   1cc94:	51 1d       	adc	r21, r1
   1cc96:	28 39       	cpi	r18, 0x98	; 152
   1cc98:	99 e9       	ldi	r25, 0x99	; 153
   1cc9a:	39 07       	cpc	r19, r25
   1cc9c:	49 07       	cpc	r20, r25
   1cc9e:	99 e1       	ldi	r25, 0x19	; 25
   1cca0:	59 07       	cpc	r21, r25
   1cca2:	a8 f2       	brcs	.-86     	; 0x1cc4e <strtod+0x106>
   1cca4:	c6 60       	ori	r28, 0x06	; 6
   1cca6:	9c 2e       	mov	r9, r28
   1cca8:	d2 cf       	rjmp	.-92     	; 0x1cc4e <strtod+0x106>
   1ccaa:	ae ef       	ldi	r26, 0xFE	; 254
   1ccac:	8a 12       	cpse	r8, r26
   1ccae:	06 c0       	rjmp	.+12     	; 0x1ccbc <strtod+0x174>
   1ccb0:	c3 fd       	sbrc	r28, 3
   1ccb2:	3c c0       	rjmp	.+120    	; 0x1cd2c <strtod+0x1e4>
   1ccb4:	9c 2e       	mov	r9, r28
   1ccb6:	68 94       	set
   1ccb8:	93 f8       	bld	r9, 3
   1ccba:	c9 cf       	rjmp	.-110    	; 0x1cc4e <strtod+0x106>
   1ccbc:	df 7d       	andi	r29, 0xDF	; 223
   1ccbe:	d5 34       	cpi	r29, 0x45	; 69
   1ccc0:	a9 f5       	brne	.+106    	; 0x1cd2c <strtod+0x1e4>
   1ccc2:	80 81       	ld	r24, Z
   1ccc4:	8d 32       	cpi	r24, 0x2D	; 45
   1ccc6:	39 f4       	brne	.+14     	; 0x1ccd6 <strtod+0x18e>
   1ccc8:	c0 61       	ori	r28, 0x10	; 16
   1ccca:	df 01       	movw	r26, r30
   1cccc:	12 96       	adiw	r26, 0x02	; 2
   1ccce:	81 81       	ldd	r24, Z+1	; 0x01
   1ccd0:	62 e0       	ldi	r22, 0x02	; 2
   1ccd2:	70 e0       	ldi	r23, 0x00	; 0
   1ccd4:	06 c0       	rjmp	.+12     	; 0x1cce2 <strtod+0x19a>
   1ccd6:	df 01       	movw	r26, r30
   1ccd8:	8b 32       	cpi	r24, 0x2B	; 43
   1ccda:	c1 f3       	breq	.-16     	; 0x1cccc <strtod+0x184>
   1ccdc:	11 96       	adiw	r26, 0x01	; 1
   1ccde:	61 e0       	ldi	r22, 0x01	; 1
   1cce0:	70 e0       	ldi	r23, 0x00	; 0
   1cce2:	80 53       	subi	r24, 0x30	; 48
   1cce4:	5d 01       	movw	r10, r26
   1cce6:	a6 1a       	sub	r10, r22
   1cce8:	b7 0a       	sbc	r11, r23
   1ccea:	8a 30       	cpi	r24, 0x0A	; 10
   1ccec:	f8 f4       	brcc	.+62     	; 0x1cd2c <strtod+0x1e4>
   1ccee:	e0 e8       	ldi	r30, 0x80	; 128
   1ccf0:	ce 16       	cp	r12, r30
   1ccf2:	ec e0       	ldi	r30, 0x0C	; 12
   1ccf4:	de 06       	cpc	r13, r30
   1ccf6:	5c f4       	brge	.+22     	; 0x1cd0e <strtod+0x1c6>
   1ccf8:	b6 01       	movw	r22, r12
   1ccfa:	66 0f       	add	r22, r22
   1ccfc:	77 1f       	adc	r23, r23
   1ccfe:	66 0f       	add	r22, r22
   1cd00:	77 1f       	adc	r23, r23
   1cd02:	c6 0e       	add	r12, r22
   1cd04:	d7 1e       	adc	r13, r23
   1cd06:	cc 0c       	add	r12, r12
   1cd08:	dd 1c       	adc	r13, r13
   1cd0a:	c8 0e       	add	r12, r24
   1cd0c:	d1 1c       	adc	r13, r1
   1cd0e:	5d 01       	movw	r10, r26
   1cd10:	ff ef       	ldi	r31, 0xFF	; 255
   1cd12:	af 1a       	sub	r10, r31
   1cd14:	bf 0a       	sbc	r11, r31
   1cd16:	8c 91       	ld	r24, X
   1cd18:	80 53       	subi	r24, 0x30	; 48
   1cd1a:	8a 30       	cpi	r24, 0x0A	; 10
   1cd1c:	a8 f1       	brcs	.+106    	; 0x1cd88 <strtod+0x240>
   1cd1e:	c4 ff       	sbrs	r28, 4
   1cd20:	03 c0       	rjmp	.+6      	; 0x1cd28 <strtod+0x1e0>
   1cd22:	d1 94       	neg	r13
   1cd24:	c1 94       	neg	r12
   1cd26:	d1 08       	sbc	r13, r1
   1cd28:	0c 0d       	add	r16, r12
   1cd2a:	1d 1d       	adc	r17, r13
   1cd2c:	c1 ff       	sbrs	r28, 1
   1cd2e:	09 c0       	rjmp	.+18     	; 0x1cd42 <strtod+0x1fa>
   1cd30:	e1 14       	cp	r14, r1
   1cd32:	f1 04       	cpc	r15, r1
   1cd34:	31 f0       	breq	.+12     	; 0x1cd42 <strtod+0x1fa>
   1cd36:	81 e0       	ldi	r24, 0x01	; 1
   1cd38:	a8 1a       	sub	r10, r24
   1cd3a:	b1 08       	sbc	r11, r1
   1cd3c:	d7 01       	movw	r26, r14
   1cd3e:	ad 92       	st	X+, r10
   1cd40:	bc 92       	st	X, r11
   1cd42:	ca 01       	movw	r24, r20
   1cd44:	b9 01       	movw	r22, r18
   1cd46:	0e 94 5d db 	call	0x1b6ba	; 0x1b6ba <__floatunsisf>
   1cd4a:	c3 70       	andi	r28, 0x03	; 3
   1cd4c:	c3 30       	cpi	r28, 0x03	; 3
   1cd4e:	09 f4       	brne	.+2      	; 0x1cd52 <strtod+0x20a>
   1cd50:	90 58       	subi	r25, 0x80	; 128
   1cd52:	4b 01       	movw	r8, r22
   1cd54:	5c 01       	movw	r10, r24
   1cd56:	20 e0       	ldi	r18, 0x00	; 0
   1cd58:	30 e0       	ldi	r19, 0x00	; 0
   1cd5a:	a9 01       	movw	r20, r18
   1cd5c:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   1cd60:	88 23       	and	r24, r24
   1cd62:	09 f4       	brne	.+2      	; 0x1cd66 <strtod+0x21e>
   1cd64:	40 c0       	rjmp	.+128    	; 0x1cde6 <strtod+0x29e>
   1cd66:	cb ef       	ldi	r28, 0xFB	; 251
   1cd68:	d3 e0       	ldi	r29, 0x03	; 3
   1cd6a:	17 ff       	sbrs	r17, 7
   1cd6c:	05 c0       	rjmp	.+10     	; 0x1cd78 <strtod+0x230>
   1cd6e:	11 95       	neg	r17
   1cd70:	01 95       	neg	r16
   1cd72:	11 09       	sbc	r17, r1
   1cd74:	c3 ee       	ldi	r28, 0xE3	; 227
   1cd76:	d3 e0       	ldi	r29, 0x03	; 3
   1cd78:	6e 01       	movw	r12, r28
   1cd7a:	b8 e1       	ldi	r27, 0x18	; 24
   1cd7c:	cb 1a       	sub	r12, r27
   1cd7e:	d1 08       	sbc	r13, r1
   1cd80:	80 e2       	ldi	r24, 0x20	; 32
   1cd82:	e8 2e       	mov	r14, r24
   1cd84:	f1 2c       	mov	r15, r1
   1cd86:	0f c0       	rjmp	.+30     	; 0x1cda6 <strtod+0x25e>
   1cd88:	d5 01       	movw	r26, r10
   1cd8a:	b1 cf       	rjmp	.-158    	; 0x1ccee <strtod+0x1a6>
   1cd8c:	fe 01       	movw	r30, r28
   1cd8e:	25 91       	lpm	r18, Z+
   1cd90:	35 91       	lpm	r19, Z+
   1cd92:	45 91       	lpm	r20, Z+
   1cd94:	54 91       	lpm	r21, Z
   1cd96:	0e 19       	sub	r16, r14
   1cd98:	1f 09       	sbc	r17, r15
   1cd9a:	c5 01       	movw	r24, r10
   1cd9c:	b4 01       	movw	r22, r8
   1cd9e:	0e 94 14 dc 	call	0x1b828	; 0x1b828 <__mulsf3>
   1cda2:	4b 01       	movw	r8, r22
   1cda4:	5c 01       	movw	r10, r24
   1cda6:	d5 01       	movw	r26, r10
   1cda8:	c4 01       	movw	r24, r8
   1cdaa:	0e 15       	cp	r16, r14
   1cdac:	1f 05       	cpc	r17, r15
   1cdae:	74 f7       	brge	.-36     	; 0x1cd8c <strtod+0x244>
   1cdb0:	24 97       	sbiw	r28, 0x04	; 4
   1cdb2:	f5 94       	asr	r15
   1cdb4:	e7 94       	ror	r14
   1cdb6:	cc 16       	cp	r12, r28
   1cdb8:	dd 06       	cpc	r13, r29
   1cdba:	a9 f7       	brne	.-22     	; 0x1cda6 <strtod+0x25e>
   1cdbc:	8a 2f       	mov	r24, r26
   1cdbe:	88 0f       	add	r24, r24
   1cdc0:	8b 2f       	mov	r24, r27
   1cdc2:	88 1f       	adc	r24, r24
   1cdc4:	8f 3f       	cpi	r24, 0xFF	; 255
   1cdc6:	49 f0       	breq	.+18     	; 0x1cdda <strtod+0x292>
   1cdc8:	20 e0       	ldi	r18, 0x00	; 0
   1cdca:	30 e0       	ldi	r19, 0x00	; 0
   1cdcc:	a9 01       	movw	r20, r18
   1cdce:	c5 01       	movw	r24, r10
   1cdd0:	b4 01       	movw	r22, r8
   1cdd2:	0e 94 b0 da 	call	0x1b560	; 0x1b560 <__cmpsf2>
   1cdd6:	81 11       	cpse	r24, r1
   1cdd8:	06 c0       	rjmp	.+12     	; 0x1cde6 <strtod+0x29e>
   1cdda:	82 e2       	ldi	r24, 0x22	; 34
   1cddc:	90 e0       	ldi	r25, 0x00	; 0
   1cdde:	90 93 e0 14 	sts	0x14E0, r25	; 0x8014e0 <errno+0x1>
   1cde2:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <errno>
   1cde6:	c5 01       	movw	r24, r10
   1cde8:	b4 01       	movw	r22, r8
   1cdea:	df 91       	pop	r29
   1cdec:	cf 91       	pop	r28
   1cdee:	1f 91       	pop	r17
   1cdf0:	0f 91       	pop	r16
   1cdf2:	ff 90       	pop	r15
   1cdf4:	ef 90       	pop	r14
   1cdf6:	df 90       	pop	r13
   1cdf8:	cf 90       	pop	r12
   1cdfa:	bf 90       	pop	r11
   1cdfc:	af 90       	pop	r10
   1cdfe:	9f 90       	pop	r9
   1ce00:	8f 90       	pop	r8
   1ce02:	08 95       	ret

0001ce04 <__ftoa_engine>:
__ftoa_engine():
   1ce04:	28 30       	cpi	r18, 0x08	; 8
   1ce06:	08 f0       	brcs	.+2      	; 0x1ce0a <__ftoa_engine+0x6>
   1ce08:	27 e0       	ldi	r18, 0x07	; 7
   1ce0a:	33 27       	eor	r19, r19
   1ce0c:	da 01       	movw	r26, r20
   1ce0e:	99 0f       	add	r25, r25
   1ce10:	31 1d       	adc	r19, r1
   1ce12:	87 fd       	sbrc	r24, 7
   1ce14:	91 60       	ori	r25, 0x01	; 1
   1ce16:	00 96       	adiw	r24, 0x00	; 0
   1ce18:	61 05       	cpc	r22, r1
   1ce1a:	71 05       	cpc	r23, r1
   1ce1c:	39 f4       	brne	.+14     	; 0x1ce2c <__ftoa_engine+0x28>
   1ce1e:	32 60       	ori	r19, 0x02	; 2
   1ce20:	2e 5f       	subi	r18, 0xFE	; 254
   1ce22:	3d 93       	st	X+, r19
   1ce24:	30 e3       	ldi	r19, 0x30	; 48
   1ce26:	2a 95       	dec	r18
   1ce28:	e1 f7       	brne	.-8      	; 0x1ce22 <__ftoa_engine+0x1e>
   1ce2a:	08 95       	ret
   1ce2c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce2e:	30 f0       	brcs	.+12     	; 0x1ce3c <__ftoa_engine+0x38>
   1ce30:	80 38       	cpi	r24, 0x80	; 128
   1ce32:	71 05       	cpc	r23, r1
   1ce34:	61 05       	cpc	r22, r1
   1ce36:	09 f0       	breq	.+2      	; 0x1ce3a <__ftoa_engine+0x36>
   1ce38:	3c 5f       	subi	r19, 0xFC	; 252
   1ce3a:	3c 5f       	subi	r19, 0xFC	; 252
   1ce3c:	3d 93       	st	X+, r19
   1ce3e:	91 30       	cpi	r25, 0x01	; 1
   1ce40:	08 f0       	brcs	.+2      	; 0x1ce44 <__ftoa_engine+0x40>
   1ce42:	80 68       	ori	r24, 0x80	; 128
   1ce44:	91 1d       	adc	r25, r1
   1ce46:	df 93       	push	r29
   1ce48:	cf 93       	push	r28
   1ce4a:	1f 93       	push	r17
   1ce4c:	0f 93       	push	r16
   1ce4e:	ff 92       	push	r15
   1ce50:	ef 92       	push	r14
   1ce52:	19 2f       	mov	r17, r25
   1ce54:	98 7f       	andi	r25, 0xF8	; 248
   1ce56:	96 95       	lsr	r25
   1ce58:	e9 2f       	mov	r30, r25
   1ce5a:	96 95       	lsr	r25
   1ce5c:	96 95       	lsr	r25
   1ce5e:	e9 0f       	add	r30, r25
   1ce60:	ff 27       	eor	r31, r31
   1ce62:	e7 5a       	subi	r30, 0xA7	; 167
   1ce64:	fb 4f       	sbci	r31, 0xFB	; 251
   1ce66:	99 27       	eor	r25, r25
   1ce68:	33 27       	eor	r19, r19
   1ce6a:	ee 24       	eor	r14, r14
   1ce6c:	ff 24       	eor	r15, r15
   1ce6e:	a7 01       	movw	r20, r14
   1ce70:	e7 01       	movw	r28, r14
   1ce72:	05 90       	lpm	r0, Z+
   1ce74:	08 94       	sec
   1ce76:	07 94       	ror	r0
   1ce78:	28 f4       	brcc	.+10     	; 0x1ce84 <__ftoa_engine+0x80>
   1ce7a:	36 0f       	add	r19, r22
   1ce7c:	e7 1e       	adc	r14, r23
   1ce7e:	f8 1e       	adc	r15, r24
   1ce80:	49 1f       	adc	r20, r25
   1ce82:	51 1d       	adc	r21, r1
   1ce84:	66 0f       	add	r22, r22
   1ce86:	77 1f       	adc	r23, r23
   1ce88:	88 1f       	adc	r24, r24
   1ce8a:	99 1f       	adc	r25, r25
   1ce8c:	06 94       	lsr	r0
   1ce8e:	a1 f7       	brne	.-24     	; 0x1ce78 <__ftoa_engine+0x74>
   1ce90:	05 90       	lpm	r0, Z+
   1ce92:	07 94       	ror	r0
   1ce94:	28 f4       	brcc	.+10     	; 0x1cea0 <__ftoa_engine+0x9c>
   1ce96:	e7 0e       	add	r14, r23
   1ce98:	f8 1e       	adc	r15, r24
   1ce9a:	49 1f       	adc	r20, r25
   1ce9c:	56 1f       	adc	r21, r22
   1ce9e:	c1 1d       	adc	r28, r1
   1cea0:	77 0f       	add	r23, r23
   1cea2:	88 1f       	adc	r24, r24
   1cea4:	99 1f       	adc	r25, r25
   1cea6:	66 1f       	adc	r22, r22
   1cea8:	06 94       	lsr	r0
   1ceaa:	a1 f7       	brne	.-24     	; 0x1ce94 <__ftoa_engine+0x90>
   1ceac:	05 90       	lpm	r0, Z+
   1ceae:	07 94       	ror	r0
   1ceb0:	28 f4       	brcc	.+10     	; 0x1cebc <__ftoa_engine+0xb8>
   1ceb2:	f8 0e       	add	r15, r24
   1ceb4:	49 1f       	adc	r20, r25
   1ceb6:	56 1f       	adc	r21, r22
   1ceb8:	c7 1f       	adc	r28, r23
   1ceba:	d1 1d       	adc	r29, r1
   1cebc:	88 0f       	add	r24, r24
   1cebe:	99 1f       	adc	r25, r25
   1cec0:	66 1f       	adc	r22, r22
   1cec2:	77 1f       	adc	r23, r23
   1cec4:	06 94       	lsr	r0
   1cec6:	a1 f7       	brne	.-24     	; 0x1ceb0 <__ftoa_engine+0xac>
   1cec8:	05 90       	lpm	r0, Z+
   1ceca:	07 94       	ror	r0
   1cecc:	20 f4       	brcc	.+8      	; 0x1ced6 <__ftoa_engine+0xd2>
   1cece:	49 0f       	add	r20, r25
   1ced0:	56 1f       	adc	r21, r22
   1ced2:	c7 1f       	adc	r28, r23
   1ced4:	d8 1f       	adc	r29, r24
   1ced6:	99 0f       	add	r25, r25
   1ced8:	66 1f       	adc	r22, r22
   1ceda:	77 1f       	adc	r23, r23
   1cedc:	88 1f       	adc	r24, r24
   1cede:	06 94       	lsr	r0
   1cee0:	a9 f7       	brne	.-22     	; 0x1cecc <__ftoa_engine+0xc8>
   1cee2:	84 91       	lpm	r24, Z
   1cee4:	10 95       	com	r17
   1cee6:	17 70       	andi	r17, 0x07	; 7
   1cee8:	41 f0       	breq	.+16     	; 0x1cefa <__ftoa_engine+0xf6>
   1ceea:	d6 95       	lsr	r29
   1ceec:	c7 95       	ror	r28
   1ceee:	57 95       	ror	r21
   1cef0:	47 95       	ror	r20
   1cef2:	f7 94       	ror	r15
   1cef4:	e7 94       	ror	r14
   1cef6:	1a 95       	dec	r17
   1cef8:	c1 f7       	brne	.-16     	; 0x1ceea <__ftoa_engine+0xe6>
   1cefa:	ef ef       	ldi	r30, 0xFF	; 255
   1cefc:	f3 e0       	ldi	r31, 0x03	; 3
   1cefe:	68 94       	set
   1cf00:	15 90       	lpm	r1, Z+
   1cf02:	15 91       	lpm	r17, Z+
   1cf04:	35 91       	lpm	r19, Z+
   1cf06:	65 91       	lpm	r22, Z+
   1cf08:	95 91       	lpm	r25, Z+
   1cf0a:	05 90       	lpm	r0, Z+
   1cf0c:	7f e2       	ldi	r23, 0x2F	; 47
   1cf0e:	73 95       	inc	r23
   1cf10:	e1 18       	sub	r14, r1
   1cf12:	f1 0a       	sbc	r15, r17
   1cf14:	43 0b       	sbc	r20, r19
   1cf16:	56 0b       	sbc	r21, r22
   1cf18:	c9 0b       	sbc	r28, r25
   1cf1a:	d0 09       	sbc	r29, r0
   1cf1c:	c0 f7       	brcc	.-16     	; 0x1cf0e <__ftoa_engine+0x10a>
   1cf1e:	e1 0c       	add	r14, r1
   1cf20:	f1 1e       	adc	r15, r17
   1cf22:	43 1f       	adc	r20, r19
   1cf24:	56 1f       	adc	r21, r22
   1cf26:	c9 1f       	adc	r28, r25
   1cf28:	d0 1d       	adc	r29, r0
   1cf2a:	7e f4       	brtc	.+30     	; 0x1cf4a <__ftoa_engine+0x146>
   1cf2c:	70 33       	cpi	r23, 0x30	; 48
   1cf2e:	11 f4       	brne	.+4      	; 0x1cf34 <__ftoa_engine+0x130>
   1cf30:	8a 95       	dec	r24
   1cf32:	e6 cf       	rjmp	.-52     	; 0x1cf00 <__ftoa_engine+0xfc>
   1cf34:	e8 94       	clt
   1cf36:	01 50       	subi	r16, 0x01	; 1
   1cf38:	30 f0       	brcs	.+12     	; 0x1cf46 <__ftoa_engine+0x142>
   1cf3a:	08 0f       	add	r16, r24
   1cf3c:	0a f4       	brpl	.+2      	; 0x1cf40 <__ftoa_engine+0x13c>
   1cf3e:	00 27       	eor	r16, r16
   1cf40:	02 17       	cp	r16, r18
   1cf42:	08 f4       	brcc	.+2      	; 0x1cf46 <__ftoa_engine+0x142>
   1cf44:	20 2f       	mov	r18, r16
   1cf46:	23 95       	inc	r18
   1cf48:	02 2f       	mov	r16, r18
   1cf4a:	7a 33       	cpi	r23, 0x3A	; 58
   1cf4c:	28 f0       	brcs	.+10     	; 0x1cf58 <__ftoa_engine+0x154>
   1cf4e:	79 e3       	ldi	r23, 0x39	; 57
   1cf50:	7d 93       	st	X+, r23
   1cf52:	2a 95       	dec	r18
   1cf54:	e9 f7       	brne	.-6      	; 0x1cf50 <__ftoa_engine+0x14c>
   1cf56:	10 c0       	rjmp	.+32     	; 0x1cf78 <__ftoa_engine+0x174>
   1cf58:	7d 93       	st	X+, r23
   1cf5a:	2a 95       	dec	r18
   1cf5c:	89 f6       	brne	.-94     	; 0x1cf00 <__ftoa_engine+0xfc>
   1cf5e:	06 94       	lsr	r0
   1cf60:	97 95       	ror	r25
   1cf62:	67 95       	ror	r22
   1cf64:	37 95       	ror	r19
   1cf66:	17 95       	ror	r17
   1cf68:	17 94       	ror	r1
   1cf6a:	e1 18       	sub	r14, r1
   1cf6c:	f1 0a       	sbc	r15, r17
   1cf6e:	43 0b       	sbc	r20, r19
   1cf70:	56 0b       	sbc	r21, r22
   1cf72:	c9 0b       	sbc	r28, r25
   1cf74:	d0 09       	sbc	r29, r0
   1cf76:	98 f0       	brcs	.+38     	; 0x1cf9e <__ftoa_engine+0x19a>
   1cf78:	23 95       	inc	r18
   1cf7a:	7e 91       	ld	r23, -X
   1cf7c:	73 95       	inc	r23
   1cf7e:	7a 33       	cpi	r23, 0x3A	; 58
   1cf80:	08 f0       	brcs	.+2      	; 0x1cf84 <__ftoa_engine+0x180>
   1cf82:	70 e3       	ldi	r23, 0x30	; 48
   1cf84:	7c 93       	st	X, r23
   1cf86:	20 13       	cpse	r18, r16
   1cf88:	b8 f7       	brcc	.-18     	; 0x1cf78 <__ftoa_engine+0x174>
   1cf8a:	7e 91       	ld	r23, -X
   1cf8c:	70 61       	ori	r23, 0x10	; 16
   1cf8e:	7d 93       	st	X+, r23
   1cf90:	30 f0       	brcs	.+12     	; 0x1cf9e <__ftoa_engine+0x19a>
   1cf92:	83 95       	inc	r24
   1cf94:	71 e3       	ldi	r23, 0x31	; 49
   1cf96:	7d 93       	st	X+, r23
   1cf98:	70 e3       	ldi	r23, 0x30	; 48
   1cf9a:	2a 95       	dec	r18
   1cf9c:	e1 f7       	brne	.-8      	; 0x1cf96 <__ftoa_engine+0x192>
   1cf9e:	11 24       	eor	r1, r1
   1cfa0:	ef 90       	pop	r14
   1cfa2:	ff 90       	pop	r15
   1cfa4:	0f 91       	pop	r16
   1cfa6:	1f 91       	pop	r17
   1cfa8:	cf 91       	pop	r28
   1cfaa:	df 91       	pop	r29
   1cfac:	99 27       	eor	r25, r25
   1cfae:	87 fd       	sbrc	r24, 7
   1cfb0:	90 95       	com	r25
   1cfb2:	08 95       	ret

0001cfb4 <__ctype_isfalse>:
__ctype_isfalse():
   1cfb4:	99 27       	eor	r25, r25
   1cfb6:	88 27       	eor	r24, r24

0001cfb8 <__ctype_istrue>:
__ctype_istrue():
   1cfb8:	08 95       	ret

0001cfba <strncasecmp_P>:
strncasecmp_P():
   1cfba:	fb 01       	movw	r30, r22
   1cfbc:	dc 01       	movw	r26, r24
   1cfbe:	41 50       	subi	r20, 0x01	; 1
   1cfc0:	50 40       	sbci	r21, 0x00	; 0
   1cfc2:	88 f0       	brcs	.+34     	; 0x1cfe6 <strncasecmp_P+0x2c>
   1cfc4:	8d 91       	ld	r24, X+
   1cfc6:	81 34       	cpi	r24, 0x41	; 65
   1cfc8:	1c f0       	brlt	.+6      	; 0x1cfd0 <strncasecmp_P+0x16>
   1cfca:	8b 35       	cpi	r24, 0x5B	; 91
   1cfcc:	0c f4       	brge	.+2      	; 0x1cfd0 <strncasecmp_P+0x16>
   1cfce:	80 5e       	subi	r24, 0xE0	; 224
   1cfd0:	65 91       	lpm	r22, Z+
   1cfd2:	61 34       	cpi	r22, 0x41	; 65
   1cfd4:	1c f0       	brlt	.+6      	; 0x1cfdc <strncasecmp_P+0x22>
   1cfd6:	6b 35       	cpi	r22, 0x5B	; 91
   1cfd8:	0c f4       	brge	.+2      	; 0x1cfdc <strncasecmp_P+0x22>
   1cfda:	60 5e       	subi	r22, 0xE0	; 224
   1cfdc:	86 1b       	sub	r24, r22
   1cfde:	61 11       	cpse	r22, r1
   1cfe0:	71 f3       	breq	.-36     	; 0x1cfbe <strncasecmp_P+0x4>
   1cfe2:	99 0b       	sbc	r25, r25
   1cfe4:	08 95       	ret
   1cfe6:	88 1b       	sub	r24, r24
   1cfe8:	fc cf       	rjmp	.-8      	; 0x1cfe2 <strncasecmp_P+0x28>

0001cfea <strnlen_P>:
strnlen_P():
   1cfea:	fc 01       	movw	r30, r24
   1cfec:	05 90       	lpm	r0, Z+
   1cfee:	61 50       	subi	r22, 0x01	; 1
   1cff0:	70 40       	sbci	r23, 0x00	; 0
   1cff2:	01 10       	cpse	r0, r1
   1cff4:	d8 f7       	brcc	.-10     	; 0x1cfec <strnlen_P+0x2>
   1cff6:	80 95       	com	r24
   1cff8:	90 95       	com	r25
   1cffa:	8e 0f       	add	r24, r30
   1cffc:	9f 1f       	adc	r25, r31
   1cffe:	08 95       	ret

0001d000 <memset>:
memset():
   1d000:	dc 01       	movw	r26, r24
   1d002:	01 c0       	rjmp	.+2      	; 0x1d006 <memset+0x6>
   1d004:	6d 93       	st	X+, r22
   1d006:	41 50       	subi	r20, 0x01	; 1
   1d008:	50 40       	sbci	r21, 0x00	; 0
   1d00a:	e0 f7       	brcc	.-8      	; 0x1d004 <memset+0x4>
   1d00c:	08 95       	ret

0001d00e <strnlen>:
strnlen():
   1d00e:	fc 01       	movw	r30, r24
   1d010:	61 50       	subi	r22, 0x01	; 1
   1d012:	70 40       	sbci	r23, 0x00	; 0
   1d014:	01 90       	ld	r0, Z+
   1d016:	01 10       	cpse	r0, r1
   1d018:	d8 f7       	brcc	.-10     	; 0x1d010 <strnlen+0x2>
   1d01a:	80 95       	com	r24
   1d01c:	90 95       	com	r25
   1d01e:	8e 0f       	add	r24, r30
   1d020:	9f 1f       	adc	r25, r31
   1d022:	08 95       	ret

0001d024 <strrev>:
strrev():
   1d024:	dc 01       	movw	r26, r24
   1d026:	fc 01       	movw	r30, r24
   1d028:	67 2f       	mov	r22, r23
   1d02a:	71 91       	ld	r23, Z+
   1d02c:	77 23       	and	r23, r23
   1d02e:	e1 f7       	brne	.-8      	; 0x1d028 <strrev+0x4>
   1d030:	32 97       	sbiw	r30, 0x02	; 2
   1d032:	04 c0       	rjmp	.+8      	; 0x1d03c <strrev+0x18>
   1d034:	7c 91       	ld	r23, X
   1d036:	6d 93       	st	X+, r22
   1d038:	70 83       	st	Z, r23
   1d03a:	62 91       	ld	r22, -Z
   1d03c:	ae 17       	cp	r26, r30
   1d03e:	bf 07       	cpc	r27, r31
   1d040:	c8 f3       	brcs	.-14     	; 0x1d034 <strrev+0x10>
   1d042:	08 95       	ret

0001d044 <fputc>:
fputc():
   1d044:	0f 93       	push	r16
   1d046:	1f 93       	push	r17
   1d048:	cf 93       	push	r28
   1d04a:	df 93       	push	r29
   1d04c:	18 2f       	mov	r17, r24
   1d04e:	09 2f       	mov	r16, r25
   1d050:	eb 01       	movw	r28, r22
   1d052:	8b 81       	ldd	r24, Y+3	; 0x03
   1d054:	81 fd       	sbrc	r24, 1
   1d056:	09 c0       	rjmp	.+18     	; 0x1d06a <fputc+0x26>
   1d058:	1f ef       	ldi	r17, 0xFF	; 255
   1d05a:	0f ef       	ldi	r16, 0xFF	; 255
   1d05c:	81 2f       	mov	r24, r17
   1d05e:	90 2f       	mov	r25, r16
   1d060:	df 91       	pop	r29
   1d062:	cf 91       	pop	r28
   1d064:	1f 91       	pop	r17
   1d066:	0f 91       	pop	r16
   1d068:	08 95       	ret
   1d06a:	82 ff       	sbrs	r24, 2
   1d06c:	14 c0       	rjmp	.+40     	; 0x1d096 <fputc+0x52>
   1d06e:	2e 81       	ldd	r18, Y+6	; 0x06
   1d070:	3f 81       	ldd	r19, Y+7	; 0x07
   1d072:	8c 81       	ldd	r24, Y+4	; 0x04
   1d074:	9d 81       	ldd	r25, Y+5	; 0x05
   1d076:	28 17       	cp	r18, r24
   1d078:	39 07       	cpc	r19, r25
   1d07a:	3c f4       	brge	.+14     	; 0x1d08a <fputc+0x46>
   1d07c:	e8 81       	ld	r30, Y
   1d07e:	f9 81       	ldd	r31, Y+1	; 0x01
   1d080:	cf 01       	movw	r24, r30
   1d082:	01 96       	adiw	r24, 0x01	; 1
   1d084:	99 83       	std	Y+1, r25	; 0x01
   1d086:	88 83       	st	Y, r24
   1d088:	10 83       	st	Z, r17
   1d08a:	8e 81       	ldd	r24, Y+6	; 0x06
   1d08c:	9f 81       	ldd	r25, Y+7	; 0x07
   1d08e:	01 96       	adiw	r24, 0x01	; 1
   1d090:	9f 83       	std	Y+7, r25	; 0x07
   1d092:	8e 83       	std	Y+6, r24	; 0x06
   1d094:	e3 cf       	rjmp	.-58     	; 0x1d05c <fputc+0x18>
   1d096:	e8 85       	ldd	r30, Y+8	; 0x08
   1d098:	f9 85       	ldd	r31, Y+9	; 0x09
   1d09a:	81 2f       	mov	r24, r17
   1d09c:	19 95       	eicall
   1d09e:	89 2b       	or	r24, r25
   1d0a0:	a1 f3       	breq	.-24     	; 0x1d08a <fputc+0x46>
   1d0a2:	da cf       	rjmp	.-76     	; 0x1d058 <fputc+0x14>

0001d0a4 <__ultoa_invert>:
__ultoa_invert():
   1d0a4:	fa 01       	movw	r30, r20
   1d0a6:	aa 27       	eor	r26, r26
   1d0a8:	28 30       	cpi	r18, 0x08	; 8
   1d0aa:	51 f1       	breq	.+84     	; 0x1d100 <__ultoa_invert+0x5c>
   1d0ac:	20 31       	cpi	r18, 0x10	; 16
   1d0ae:	81 f1       	breq	.+96     	; 0x1d110 <__ultoa_invert+0x6c>
   1d0b0:	e8 94       	clt
   1d0b2:	6f 93       	push	r22
   1d0b4:	6e 7f       	andi	r22, 0xFE	; 254
   1d0b6:	6e 5f       	subi	r22, 0xFE	; 254
   1d0b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0ba:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0bc:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0be:	af 4f       	sbci	r26, 0xFF	; 255
   1d0c0:	b1 e0       	ldi	r27, 0x01	; 1
   1d0c2:	3e d0       	rcall	.+124    	; 0x1d140 <__ultoa_invert+0x9c>
   1d0c4:	b4 e0       	ldi	r27, 0x04	; 4
   1d0c6:	3c d0       	rcall	.+120    	; 0x1d140 <__ultoa_invert+0x9c>
   1d0c8:	67 0f       	add	r22, r23
   1d0ca:	78 1f       	adc	r23, r24
   1d0cc:	89 1f       	adc	r24, r25
   1d0ce:	9a 1f       	adc	r25, r26
   1d0d0:	a1 1d       	adc	r26, r1
   1d0d2:	68 0f       	add	r22, r24
   1d0d4:	79 1f       	adc	r23, r25
   1d0d6:	8a 1f       	adc	r24, r26
   1d0d8:	91 1d       	adc	r25, r1
   1d0da:	a1 1d       	adc	r26, r1
   1d0dc:	6a 0f       	add	r22, r26
   1d0de:	71 1d       	adc	r23, r1
   1d0e0:	81 1d       	adc	r24, r1
   1d0e2:	91 1d       	adc	r25, r1
   1d0e4:	a1 1d       	adc	r26, r1
   1d0e6:	20 d0       	rcall	.+64     	; 0x1d128 <__ultoa_invert+0x84>
   1d0e8:	09 f4       	brne	.+2      	; 0x1d0ec <__ultoa_invert+0x48>
   1d0ea:	68 94       	set
   1d0ec:	3f 91       	pop	r19
   1d0ee:	2a e0       	ldi	r18, 0x0A	; 10
   1d0f0:	26 9f       	mul	r18, r22
   1d0f2:	11 24       	eor	r1, r1
   1d0f4:	30 19       	sub	r19, r0
   1d0f6:	30 5d       	subi	r19, 0xD0	; 208
   1d0f8:	31 93       	st	Z+, r19
   1d0fa:	de f6       	brtc	.-74     	; 0x1d0b2 <__ultoa_invert+0xe>
   1d0fc:	cf 01       	movw	r24, r30
   1d0fe:	08 95       	ret
   1d100:	46 2f       	mov	r20, r22
   1d102:	47 70       	andi	r20, 0x07	; 7
   1d104:	40 5d       	subi	r20, 0xD0	; 208
   1d106:	41 93       	st	Z+, r20
   1d108:	b3 e0       	ldi	r27, 0x03	; 3
   1d10a:	0f d0       	rcall	.+30     	; 0x1d12a <__ultoa_invert+0x86>
   1d10c:	c9 f7       	brne	.-14     	; 0x1d100 <__ultoa_invert+0x5c>
   1d10e:	f6 cf       	rjmp	.-20     	; 0x1d0fc <__ultoa_invert+0x58>
   1d110:	46 2f       	mov	r20, r22
   1d112:	4f 70       	andi	r20, 0x0F	; 15
   1d114:	40 5d       	subi	r20, 0xD0	; 208
   1d116:	4a 33       	cpi	r20, 0x3A	; 58
   1d118:	18 f0       	brcs	.+6      	; 0x1d120 <__ultoa_invert+0x7c>
   1d11a:	49 5d       	subi	r20, 0xD9	; 217
   1d11c:	31 fd       	sbrc	r19, 1
   1d11e:	40 52       	subi	r20, 0x20	; 32
   1d120:	41 93       	st	Z+, r20
   1d122:	02 d0       	rcall	.+4      	; 0x1d128 <__ultoa_invert+0x84>
   1d124:	a9 f7       	brne	.-22     	; 0x1d110 <__ultoa_invert+0x6c>
   1d126:	ea cf       	rjmp	.-44     	; 0x1d0fc <__ultoa_invert+0x58>
   1d128:	b4 e0       	ldi	r27, 0x04	; 4
   1d12a:	a6 95       	lsr	r26
   1d12c:	97 95       	ror	r25
   1d12e:	87 95       	ror	r24
   1d130:	77 95       	ror	r23
   1d132:	67 95       	ror	r22
   1d134:	ba 95       	dec	r27
   1d136:	c9 f7       	brne	.-14     	; 0x1d12a <__ultoa_invert+0x86>
   1d138:	00 97       	sbiw	r24, 0x00	; 0
   1d13a:	61 05       	cpc	r22, r1
   1d13c:	71 05       	cpc	r23, r1
   1d13e:	08 95       	ret
   1d140:	9b 01       	movw	r18, r22
   1d142:	ac 01       	movw	r20, r24
   1d144:	0a 2e       	mov	r0, r26
   1d146:	06 94       	lsr	r0
   1d148:	57 95       	ror	r21
   1d14a:	47 95       	ror	r20
   1d14c:	37 95       	ror	r19
   1d14e:	27 95       	ror	r18
   1d150:	ba 95       	dec	r27
   1d152:	c9 f7       	brne	.-14     	; 0x1d146 <__ultoa_invert+0xa2>
   1d154:	62 0f       	add	r22, r18
   1d156:	73 1f       	adc	r23, r19
   1d158:	84 1f       	adc	r24, r20
   1d15a:	95 1f       	adc	r25, r21
   1d15c:	a0 1d       	adc	r26, r0
   1d15e:	08 95       	ret

0001d160 <eeprom_read_byte>:
eeprom_read_byte():
   1d160:	f9 99       	sbic	0x1f, 1	; 31
   1d162:	fe cf       	rjmp	.-4      	; 0x1d160 <eeprom_read_byte>
   1d164:	92 bd       	out	0x22, r25	; 34
   1d166:	81 bd       	out	0x21, r24	; 33
   1d168:	f8 9a       	sbi	0x1f, 0	; 31
   1d16a:	99 27       	eor	r25, r25
   1d16c:	80 b5       	in	r24, 0x20	; 32
   1d16e:	08 95       	ret

0001d170 <eeprom_write_byte>:
eeprom_write_byte():
   1d170:	26 2f       	mov	r18, r22

0001d172 <eeprom_write_r18>:
   1d172:	f9 99       	sbic	0x1f, 1	; 31
   1d174:	fe cf       	rjmp	.-4      	; 0x1d172 <eeprom_write_r18>
   1d176:	1f ba       	out	0x1f, r1	; 31
   1d178:	92 bd       	out	0x22, r25	; 34
   1d17a:	81 bd       	out	0x21, r24	; 33
   1d17c:	20 bd       	out	0x20, r18	; 32
   1d17e:	0f b6       	in	r0, 0x3f	; 63
   1d180:	f8 94       	cli
   1d182:	fa 9a       	sbi	0x1f, 2	; 31
   1d184:	f9 9a       	sbi	0x1f, 1	; 31
   1d186:	0f be       	out	0x3f, r0	; 63
   1d188:	01 96       	adiw	r24, 0x01	; 1
   1d18a:	08 95       	ret

0001d18c <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1d18c:	f8 94       	cli

0001d18e <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1d18e:	ff cf       	rjmp	.-2      	; 0x1d18e <__stop_program>
