
/tmp/arduino_build_740910/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__ctors_end>
       4:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
       8:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
       c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      10:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      14:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      18:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      1c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      20:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      24:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      28:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      2c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      30:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      34:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      38:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      3c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      40:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      44:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      48:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      4c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      50:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      54:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      58:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      5c:	0c 94 f4 7a 	jmp	0xf5e8	; 0xf5e8 <__vector_23>
      60:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      64:	0c 94 68 7b 	jmp	0xf6d0	; 0xf6d0 <__vector_25>
      68:	0c 94 3e 7b 	jmp	0xf67c	; 0xf67c <__vector_26>
      6c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      70:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      74:	0c 94 9e 7b 	jmp	0xf73c	; 0xf73c <__vector_29>
      78:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      7c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      80:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      84:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      88:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      8c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      90:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      94:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      98:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      9c:	0c 94 1c 7d 	jmp	0xfa38	; 0xfa38 <__vector_39>
      a0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      a4:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      a8:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      ac:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      b0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      b4:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      b8:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      bc:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      c0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      c4:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>
      c8:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 d5 26 	jmp	0x4daa	; 0x4daa <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      d0:	0c 94 7a 6e 	jmp	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
      d4:	0c 94 c7 6e 	jmp	0xdd8e	; 0xdd8e <EthernetClient::operator bool()>
      d8:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      dc:	0c 94 6a 77 	jmp	0xeed4	; 0xeed4 <turnOffPWM.lto_priv.232+0xa4>
      e0:	0c 94 98 6c 	jmp	0xd930	; 0xd930 <TwoWire::onRequestService()>
      e4:	0c 94 76 5d 	jmp	0xbaec	; 0xbaec <mqtt_callback(char*, unsigned char*, unsigned int)>
      e8:	0c 94 3f 6d 	jmp	0xda7e	; 0xda7e <HardwareSerial::flush()>
      ec:	0c 94 e9 49 	jmp	0x93d2	; 0x93d2 <display_menu_tds_set_period(unsigned char, unsigned char)>
      f0:	0c 94 e4 4c 	jmp	0x99c8	; 0x99c8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      f4:	0c 94 7b 87 	jmp	0x10ef6	; 0x10ef6 <EthernetClient::peek()>
      f8:	0c 94 61 87 	jmp	0x10ec2	; 0x10ec2 <EthernetClient::read()>
      fc:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <display_element_dialog_set_variable_minus()>
     100:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     104:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <returnnullfceargs(unsigned int, unsigned int)>
     108:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <EthernetClient::operator!=(EthernetClient const&)>
     10c:	0c 94 4c 5d 	jmp	0xba98	; 0xba98 <menu_rtds_create_name(unsigned char, unsigned char)>
     110:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <function_vertical_slider_dec(unsigned char, unsigned char)>
     114:	0c 94 a6 6e 	jmp	0xdd4c	; 0xdd4c <EthernetUDP::remotePort()>
     118:	0c 94 4a 77 	jmp	0xee94	; 0xee94 <turnOffPWM.lto_priv.232+0x64>
     11c:	0c 94 62 77 	jmp	0xeec4	; 0xeec4 <turnOffPWM.lto_priv.232+0x94>
     120:	0c 94 5d 87 	jmp	0x10eba	; 0x10eba <EthernetClient::read(unsigned char*, unsigned int)>
     124:	0c 94 85 19 	jmp	0x330a	; 0x330a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     128:	0c 94 e0 8a 	jmp	0x115c0	; 0x115c0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945>
     12c:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <click_keyboard_number(unsigned char, unsigned char)>
     130:	0c 94 e2 24 	jmp	0x49c4	; 0x49c4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     134:	0c 94 47 48 	jmp	0x908e	; 0x908e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     138:	0c 94 9a 4d 	jmp	0x9b34	; 0x9b34 <get_function_thermostat_default_ring_has_mode(unsigned char)>
     13c:	0c 94 7c 77 	jmp	0xeef8	; 0xeef8 <turnOffPWM.lto_priv.232+0xc8>
     140:	0c 94 8c 6e 	jmp	0xdd18	; 0xdd18 <EthernetUDP::write(unsigned char)>
     144:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>
     148:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     14c:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     150:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <menu_redraw_time05s(unsigned char, unsigned char)>
     154:	0c 94 44 29 	jmp	0x5288	; 0x5288 <click_dialog_button_yes(unsigned char, unsigned char)>
     158:	0c 94 bd 6c 	jmp	0xd97a	; 0xd97a <HardwareSerial::peek()>
     15c:	0c 94 02 5c 	jmp	0xb804	; 0xb804 <click_rtds_add_sensor(unsigned char, unsigned char)>
     160:	0c 94 36 77 	jmp	0xee6c	; 0xee6c <turnOffPWM.lto_priv.232+0x3c>
     164:	0c 94 aa 6e 	jmp	0xdd54	; 0xdd54 <EthernetUDP::remoteIP()>
     168:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <get_function_budik_text_state(unsigned char, unsigned char, char*)>
     16c:	0c 94 f5 6b 	jmp	0xd7ea	; 0xd7ea <display_menu_rtds_update_name(unsigned char, unsigned char)>
     170:	0c 94 a2 6e 	jmp	0xdd44	; 0xdd44 <EthernetUDP::available()>
     174:	0c 94 16 24 	jmp	0x482c	; 0x482c <display_element_set_string_del_char(unsigned char, unsigned char)>
     178:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <Print::availableForWrite()>
     17c:	0c 94 3e 71 	jmp	0xe27c	; 0xe27c <EthernetUDP::beginPacket(char const*, unsigned int)>
     180:	0c 94 91 6c 	jmp	0xd922	; 0xd922 <TwoWire::available()>
     184:	0c 94 fd 87 	jmp	0x10ffa	; 0x10ffa <EthernetUDP::begin(unsigned int)>
     188:	0c 94 bb 47 	jmp	0x8f76	; 0x8f76 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     18c:	0c 94 4e 77 	jmp	0xee9c	; 0xee9c <turnOffPWM.lto_priv.232+0x6c>
     190:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     194:	0c 94 01 24 	jmp	0x4802	; 0x4802 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     198:	0c 94 a5 6d 	jmp	0xdb4a	; 0xdb4a <Print::write(unsigned char const*, unsigned int)>
     19c:	0c 94 61 4a 	jmp	0x94c2	; 0x94c2 <menu_tds_save_name(unsigned char, unsigned char)>
     1a0:	0c 94 54 77 	jmp	0xeea8	; 0xeea8 <turnOffPWM.lto_priv.232+0x78>
     1a4:	0c 94 e2 86 	jmp	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
     1a8:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <display_element_dialog_set_variable_plus()>
     1ac:	0c 94 66 77 	jmp	0xeecc	; 0xeecc <turnOffPWM.lto_priv.232+0x9c>
     1b0:	0c 94 64 4b 	jmp	0x96c8	; 0x96c8 <printf_via_mqtt(char, __file*)>
     1b4:	0c 94 2b 88 	jmp	0x11056	; 0x11056 <EthernetUDP::stop()>
     1b8:	0c 94 3c 5c 	jmp	0xb878	; 0xb878 <get_function_active_rtds_button(unsigned char, unsigned char)>
     1bc:	0c 94 a9 6c 	jmp	0xd952	; 0xd952 <HardwareSerial::read()>
     1c0:	0c 94 c3 86 	jmp	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
     1c4:	0c 94 6b 6c 	jmp	0xd8d6	; 0xd8d6 <TwoWire::read()>
     1c8:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1cc:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <a2d_complete(unsigned char, unsigned int)>
     1d0:	0c 94 7c 44 	jmp	0x88f8	; 0x88f8 <click_thermostat_default_ring_set_mode(unsigned char)>
     1d4:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <LCDWIKI_KBV::Get_Width() const>
     1d8:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <LCDWIKI_KBV::Get_Height() const>
     1dc:	0c 94 bc 4a 	jmp	0x9578	; 0x9578 <menu_tds_save_offset(unsigned char, unsigned char)>
     1e0:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <get_function_keyboard_alfa_max_keys(unsigned char)>
     1e4:	0c 94 31 29 	jmp	0x5262	; 0x5262 <MenuHistoryPrevMenu()>
     1e8:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1ec:	0c 94 25 4a 	jmp	0x944a	; 0x944a <display_menu_tds_set_offset(unsigned char, unsigned char)>
     1f0:	0c 94 74 77 	jmp	0xeee8	; 0xeee8 <turnOffPWM.lto_priv.232+0xb8>
     1f4:	0c 94 a1 87 	jmp	0x10f42	; 0x10f42 <EthernetUDP::peek()>
     1f8:	0c 94 38 88 	jmp	0x11070	; 0x11070 <EthernetClient::write(unsigned char const*, unsigned int)>
     1fc:	0c 94 cf 6e 	jmp	0xdd9e	; 0xdd9e <EthernetClient::flush()>
     200:	0c 94 78 77 	jmp	0xeef0	; 0xeef0 <turnOffPWM.lto_priv.232+0xc0>
     204:	0c 94 04 6e 	jmp	0xdc08	; 0xdc08 <TwoWire::peek()>
     208:	0c 94 c8 88 	jmp	0x11190	; 0x11190 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     20c:	0c 94 70 77 	jmp	0xeee0	; 0xeee0 <turnOffPWM.lto_priv.232+0xb0>
     210:	0c 94 5c 77 	jmp	0xeeb8	; 0xeeb8 <turnOffPWM.lto_priv.232+0x88>
     214:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <get_function_keyboard_number_max_keys(unsigned char)>
     218:	0c 94 cb 6c 	jmp	0xd996	; 0xd996 <HardwareSerial::available()>
     21c:	0c 94 e4 1e 	jmp	0x3dc8	; 0x3dc8 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>
     220:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <click_keyboard_alfa(unsigned char, unsigned char)>
     224:	0c 94 47 49 	jmp	0x928e	; 0x928e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     228:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <EthernetUDP::read(char*, unsigned int)>
     22c:	0c 94 ec 46 	jmp	0x8dd8	; 0x8dd8 <tds_associate(unsigned char)>
     230:	0c 94 81 70 	jmp	0xe102	; 0xe102 <IPAddress::printTo(Print&) const>
     234:	0c 94 40 6e 	jmp	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
     238:	0c 94 7a 5c 	jmp	0xb8f4	; 0xb8f4 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>
     23c:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <function_vertical_slider_inc(unsigned char, unsigned char)>
     240:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     244:	0c 94 ba 6e 	jmp	0xdd74	; 0xdd74 <UDP::beginMulticast(IPAddress, unsigned int)>
     248:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>
     24c:	0c 94 84 2c 	jmp	0x5908	; 0x5908 <EthernetClient::connect(char const*, unsigned int)>
     250:	0c 94 bc 6e 	jmp	0xdd78	; 0xdd78 <EthernetClient::operator==(EthernetClient const&)>
     254:	0c 94 9f 88 	jmp	0x1113e	; 0x1113e <EthernetUDP::endPacket()>
     258:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <get_function_one_wire_last_index_for_menu(unsigned char)>
     25c:	0c 94 99 6c 	jmp	0xd932	; 0xd932 <TwoWire::onReceiveService(unsigned char*, int)>
     260:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     264:	0c 94 58 77 	jmp	0xeeb0	; 0xeeb0 <turnOffPWM.lto_priv.232+0x80>
     268:	0c 94 7b 77 	jmp	0xeef6	; 0xeef6 <turnOffPWM.lto_priv.232+0xc6>
     26c:	0c 94 44 77 	jmp	0xee88	; 0xee88 <turnOffPWM.lto_priv.232+0x58>
     270:	0c 94 40 77 	jmp	0xee80	; 0xee80 <turnOffPWM.lto_priv.232+0x50>
     274:	0c 94 ff 70 	jmp	0xe1fe	; 0xe1fe <EthernetClient::available()>
     278:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <EthernetClient::write(unsigned char)>
     27c:	0c 94 03 6e 	jmp	0xdc06	; 0xdc06 <TwoWire::flush()>
     280:	0c 94 3c 77 	jmp	0xee78	; 0xee78 <turnOffPWM.lto_priv.232+0x48>
     284:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <EthernetClient::connect(IPAddress, unsigned int)>
     288:	0c 94 f8 6c 	jmp	0xd9f0	; 0xd9f0 <HardwareSerial::write(unsigned char)>
     28c:	0c 94 25 46 	jmp	0x8c4a	; 0x8c4a <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     290:	0c 94 13 6e 	jmp	0xdc26	; 0xdc26 <TwoWire::write(unsigned char const*, unsigned int)>
     294:	0c 94 9a 6c 	jmp	0xd934	; 0xd934 <HardwareSerial::availableForWrite()>
     298:	0c 94 c6 47 	jmp	0x8f8c	; 0x8f8c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>
     29c:	0c 94 b1 49 	jmp	0x9362	; 0x9362 <display_menu_tds_set_name(unsigned char, unsigned char)>
     2a0:	0c 94 34 89 	jmp	0x11268	; 0x11268 <EthernetClient::stop()>
     2a4:	0c 94 94 4a 	jmp	0x9528	; 0x9528 <menu_tds_save_period(unsigned char, unsigned char)>
     2a8:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
     2ac:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <serial_putc(char, __file*)>
     2b0:	0c 94 0c 87 	jmp	0x10e18	; 0x10e18 <EthernetUDP::parsePacket()>
     2b4:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>
     2b8:	0c 94 de 85 	jmp	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
     2bc:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <click_keyboard_type(unsigned char, unsigned char)>
     2c0:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     2c4:	0c 94 3b 29 	jmp	0x5276	; 0x5276 <dialog_set_variable_button_click(unsigned char, unsigned char)>
     2c8:	0c 94 11 89 	jmp	0x11222	; 0x11222 <EthernetClient::connected()>
     2cc:	0c 94 d8 5b 	jmp	0xb7b0	; 0xb7b0 <click_rtds_setting_sensor(unsigned char, unsigned char)>
     2d0:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <nullfce()>
     2d4:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <get_function_budik_enabled(unsigned char)>
     2d8:	0c 94 cd 45 	jmp	0x8b9a	; 0x8b9a <menu_rtds_update_name(unsigned char, unsigned char)>
     2dc:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>

000002e0 <__trampolines_end>:
__trampolines_end():
     2e0:	4e 41       	sbci	r20, 0x1E	; 30
     2e2:	4e 49       	Address 0x00000000000002e2 is out of bounds.
.word	0xffff	; ????

000002e3 <pstr_inity>:
     2e3:	49 4e 49 54 59                                      INITY

000002e8 <pstr_inf>:
     2e8:	49 4e 46                                            INF

000002eb <pwr_m10>:
     2eb:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2fb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000303 <pwr_p10>:
     303:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     313:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     323:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     333:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     343:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     353:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     363:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     373:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     383:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     393:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     3a3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     3b3:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     3c3:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     3d3:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     3e3:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     3f3:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     403:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     413:	3d 27                                               ='

00000415 <text_rtds_novy>:
     415:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     425:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000430 <text_no>:
     430:	4e 65 00                                            Ne.

00000433 <text_yes>:
     433:	41 6e 6f 00                                         Ano.

00000437 <text_special_case>:
     437:	40 00                                               @.

00000439 <text_lower_case>:
     439:	61 00                                               a.

0000043b <text_upper_case>:
     43b:	41 00                                               A.

0000043d <text_delete_char>:
     43d:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000447 <text_klavesnice>:
     447:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00000452 <text_zrusit>:
     452:	5a 72 75 73 69 74 00                                Zrusit.

00000459 <text_ulozit>:
     459:	55 6c 6f 7a 69 74 00                                Ulozit.

00000460 <text_upozorneni>:
     460:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000046b <nastaveni_tds_offset>:
     46b:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000047b <nastaveni_name_sensor>:
     47b:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000048a <nastaveni_tds_period>:
     48a:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00000499 <nastaveni_delete_sensor>:
     499:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000004a7 <text_tds_sensors>:
     4a7:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     4b7:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000004c2 <budik_text>:
     4c2:	42 75 64 69 6b 00                                   Budik.

000004c8 <nastaveni_onewire>:
     4c8:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000004d6 <nastaveni_rtds>:
     4d6:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000004e5 <button_zpet>:
     4e5:	5a 70 65 74 00                                      Zpet.

000004ea <nastaveni_default>:
     4ea:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000004fa <nastaveni_nrf>:
     4fa:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00000508 <nastaveni_site>:
     508:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000517 <button_term_man>:
     517:	4d 41 4e 00                                         MAN.

0000051b <button_term_prog>:
     51b:	50 52 4f 47 00                                      PROG.

00000520 <button_term_min>:
     520:	4d 49 4e 00                                         MIN.

00000524 <button_term_max>:
     524:	4d 41 58 00                                         MAX.

00000528 <button_term_off>:
     528:	4f 46 46 00                                         OFF.

0000052c <nastaveni_text>:
     52c:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000536 <funkce_text>:
     536:	46 75 6e 6b 63 65 00                                Funkce.

0000053d <regulator_text>:
     53d:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000547 <Menu_All>:
     547:	06 06 13 28 3d 05 22 01 96 00 aa 00 28 00 02 05     ...(=.".....(...
     557:	de 28 08 36 05 22 01 5a 00 aa 00 28 00 02 01 de     .(.6.".Z...(....
     567:	28 08 2c 05 22 01 1e 00 aa 00 28 00 02 02 de 28     (.,.".....(....(
     577:	08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5df:	00 00 28 05 0a 00 dc 00 52 00 3c 00 03 9a d6 ff     ..(.....R.<.....
     5ef:	ff 00 7c 44 9a 4d 0a 24 05 64 00 dc 00 52 00 3c     ..|D.M.$.d...R.<
     5ff:	00 03 00 f8 ff ff 01 7c 44 9a 4d 0a 20 05 be 00     .......|D.M. ...
     60f:	dc 00 52 00 3c 00 03 1f 00 ff ff 07 7c 44 9a 4d     ..R.<.......|D.M
     61f:	0a 1b 05 18 01 dc 00 52 00 3c 00 03 e0 ff ff ff     .......R.<......
     62f:	02 7c 44 9a 4d 0a 17 05 72 01 dc 00 52 00 3c 00     .|D.M...r...R.<.
     63f:	03 e0 07 ff ff 08 7c 44 9a 4d 0a 0a 00 82 00 00     ......|D.M......
     64f:	e4 4c 00 00 00 00 0c 18 01 22 01 00 f9 27 00 00     .L......."...'..
     65f:	00 00 0c 0a 00 1e 00 00 e2 24 00 00 00 00 09 00     .........$......
	...
     72b:	03 05 03 00 00 00 00 00 00 00 00 00 e0 01 40 01     ..............@.
     73b:	01 ff ff 00 00 08 b1 1e a8 1e 75 1f 2c 05 08 05     ..........u.,...
     74b:	0a 00 28 00 be 00 28 00 02 00 77 1f 08 fa 04 0a     ..(...(...w.....
     75b:	00 64 00 be 00 28 00 02 00 77 1f 08 ea 04 0a 00     .d...(...w......
     76b:	a0 00 be 00 28 00 02 00 77 1f 08 e5 04 0a 00 dc     ....(...w.......
     77b:	00 be 00 28 00 02 00 31 29 08 d6 04 18 01 64 00     ...(...1).....d.
     78b:	be 00 28 00 02 06 de 28 08 c8 04 18 01 28 00 be     ..(....(.....(..
     79b:	00 28 00 02 03 de 28 08 00 00 00 00 00 00 00 00     .(....(.........
	...
     847:	00 18 01 22 01 00 f9 27 00 00 00 00 0c 00 00 00     ..."...'........
	...
     927:	00 00 06 00 01 00 00 00 00 02 00 00 00 00 e0 01     ................
     937:	40 01 01 ff ff 00 00 08 75 1f 75 1f 75 1f 36 05     @.......u.u.u.6.
     947:	e5 04 0a 00 dc 00 be 00 28 00 02 00 31 29 08 00     ........(...1)..
	...
     a43:	00 00 00 18 01 22 01 00 f9 27 00 00 00 00 0c 00     ....."...'......
	...
     a67:	00 00 00 c2 04 0a 00 28 00 be 00 78 00 02 00 00     .......(...x....
     a77:	00 00 01 77 1f f0 1e 9d 1f 08 00 00 00 00 00 00     ...w............
	...
     b27:	01 00 01 01 00 00 00 01 00 00 00 00 e0 01 40 01     ..............@.
     b37:	01 ff ff 00 00 08 75 1f 75 1f 75 1f c8 04 e5 04     ......u.u.u.....
     b47:	0a 00 dc 00 be 00 28 00 02 00 31 29 08 00 00 00     ......(...1)....
	...
     c43:	00 18 01 22 01 00 f9 27 00 00 00 00 0c 9a 01 48     ..."...'.......H
     c53:	00 00 55 26 28 00 7e 00 08 dc 00 14 00 00 68 25     ..U&(.~.......h%
     c63:	f0 00 f0 00 08 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     cab:	00 00 e6 00 23 00 aa 00 37 00 01 3c 00 03 00 01     ....#...7..<....
     cbb:	c6 47 ec 28 23 1e 75 1f 08 2b 9a 01 1e 00 28 00     .G.(#.u..+....(.
     ccb:	28 00 02 00 65 1e 08 2d 9a 01 c8 00 28 00 28 00     (...e..-....(.(.
     cdb:	02 00 71 1e 08 00 00 00 00 00 00 00 00 00 00 00     ..q.............
	...
     d23:	00 00 01 00 03 00 01 02 00 03 00 00 00 00 e0 01     ................
     d33:	40 01 01 ff ff 00 00 08 75 1f 75 1f 75 1f a7 04     @.......u.u.u...
     d43:	e5 04 0a 00 dc 00 be 00 28 00 02 00 31 29 08 99     ........(...1)..
     d53:	04 18 01 be 00 be 00 28 00 02 00 bb 47 08 8a 04     .......(....G...
     d63:	18 01 8c 00 be 00 28 00 02 00 e9 49 08 7b 04 18     ......(....I.{..
     d73:	01 5a 00 be 00 28 00 02 00 b1 49 08 6b 04 18 01     .Z...(....I.k...
     d83:	28 00 be 00 28 00 02 00 25 4a 08 00 00 00 00 00     (...(...%J......
	...
     e3f:	00 00 00 18 01 22 01 00 f9 27 00 00 00 00 0c 14     ....."...'......
     e4f:	00 14 00 00 47 48 00 00 00 00 08 14 00 14 00 00     ....GH..........
     e5f:	47 49 00 00 00 00 0c 00 00 00 00 00 00 00 00 00     GI..............
	...
     f23:	05 00 03 00 00 00 00 04 00 00 00 00 e0 01 40 01     ..............@.
     f33:	01 ff ff ee 08 08 75 1f 75 1f 75 1f 60 04 59 04     ......u.u.u.`.Y.
     f43:	0a 00 c8 00 82 00 28 00 02 00 3b 29 08 52 04 96     ......(...;).R..
     f53:	00 c8 00 82 00 28 00 02 00 31 29 08 00 00 00 00     .....(...1).....
	...
    103f:	00 64 00 2d 00 00 5b 27 b4 00 28 00 08 00 00 00     .d.-..['..(.....
	...
    10bf:	00 2b 3c 00 2d 00 28 00 28 00 02 00 f2 1e 08 2d     .+<.-.(.(......-
    10cf:	18 01 2d 00 28 00 28 00 02 00 07 1f 08 00 00 00     ..-.(.(.........
	...
    111f:	00 00 02 00 01 00 00 02 00 66 0a 00 0a 00 cc 01     .........f......
    112f:	04 01 06 e0 ff 00 00 00 75 1f 75 1f 75 1f 00 00     ........u.u.u...
	...
    1933:	00 00 47 04 59 04 0a 00 c8 00 82 00 28 00 02 00     ..G.Y.......(...
    1943:	3b 29 08 52 04 96 00 c8 00 82 00 28 00 02 00 31     ;).R.......(...1
    1953:	29 08 3d 04 2c 01 c8 00 82 00 28 00 02 00 16 24     ).=.,.....(....$
    1963:	08 3b 04 40 01 23 00 28 00 28 00 02 00 ba 1e 08     .;.@.#.(.(......
    1973:	39 04 6d 01 23 00 28 00 28 00 02 01 ba 1e 08 37     9.m.#.(.(......7
    1983:	04 9a 01 23 00 28 00 28 00 02 02 ba 1e 08 00 00     ...#.(.(........
	...
    1a33:	00 00 00 0a 00 23 00 00 d5 26 2c 01 28 00 08 00     .....#...&,.(...
	...
    1acf:	00 00 00 0a 00 50 00 1e 00 1e 00 02 28 02 0a 00     .....P......(...
    1adf:	03 c8 1e 3b 24 bd 1e 75 1f 08 00 00 00 00 00 00     ...;$..u........
	...
    1b17:	06 00 01 00 00 00 01 67 0a 00 0a 00 cc 01 04 01     .......g........
    1b27:	06 e0 ff 00 00 00 75 1f 75 1f 75 1f 60 04 59 04     ......u.u.u.`.Y.
    1b37:	0a 00 c8 00 82 00 28 00 02 00 3b 29 08 52 04 96     ......(...;).R..
    1b47:	00 c8 00 82 00 28 00 02 00 31 29 08 3d 04 2c 01     .....(...1).=.,.
    1b57:	c8 00 82 00 28 00 02 00 16 24 08 00 00 00 00 00     ....(....$......
	...
    1c33:	00 0a 00 23 00 00 d5 26 2c 01 28 00 08 00 00 00     ...#...&,.(.....
	...
    1ccf:	00 0a 00 3c 00 1e 00 1e 00 02 28 02 09 00 02 e4     ...<......(.....
    1cdf:	1e 54 24 ee 1e 75 1f 08 00 00 00 00 00 00 00 00     .T$..u..........
	...
    1d13:	00 00 03 00 01 00 00 00 01 65 0a 00 0a 00 cc 01     .........e......
    1d23:	04 01 06 e0 ff 00 00 00 75 1f 75 1f 75 1f 60 04     ........u.u.u.`.
    1d33:	33 04 1e 00 3c 00 64 00 28 00 02 00 44 29 08 30     3...<.d.(...D).0
    1d43:	04 fa 00 3c 00 64 00 28 00 02 00 31 29 08 00 00     ...<.d.(...1)...
	...
    1e2f:	00 00 00 14 00 23 00 00 01 24 00 00 00 00 08 00     .....#...$......
	...
    1f13:	02 00 01 00 00 00 00 64 32 00 32 00 7c 01 8c 00     .......d2.2.|...
    1f23:	06 e0 ff 00 00 00 75 1f 75 1f 75 1f 3d 05 e5 04     ......u.u.u.=...
    1f33:	0a 00 dc 00 be 00 28 00 02 00 31 29 08 00 00 00     ......(...1)....
	...
    202f:	00 18 01 22 01 00 f9 27 00 00 00 00 0c 00 00 00     ..."...'........
	...
    210f:	00 00 01 00 01 00 00 00 00 05 00 00 00 00 e0 01     ................
    211f:	40 01 01 ff ff 00 00 08 75 1f 75 1f 75 1f d6 04     @.......u.u.u...
    212f:	e5 04 0a 00 dc 00 be 00 28 00 02 00 31 29 08 15     ........(...1)..
    213f:	04 0a 00 28 00 be 00 28 00 01 00 02 5c 08 00 00     ...(...(....\...
	...
    222b:	00 00 00 dc 00 14 00 00 68 25 f0 00 f0 00 08 18     ........h%......
    223b:	01 22 01 00 f9 27 00 00 00 00 0c 9a 01 48 00 01     ."...'.......H..
    224b:	55 26 28 00 7e 00 08 00 00 00 00 00 00 00 00 00     U&(.~...........
	...
    2297:	e6 00 23 00 aa 00 37 00 01 3c 00 03 01 04 7a 5c     ..#...7..<....z\
    22a7:	d8 5b 30 1e 3c 5c 08 2b 9a 01 1e 00 28 00 28 00     .[0.<\.+....(.(.
    22b7:	02 01 65 1e 08 2d 9a 01 c8 00 28 00 28 00 02 01     ..e..-....(.(...
    22c7:	71 1e 08 00 00 00 00 00 00 00 00 00 00 00 00 00     q...............
	...
    230f:	02 00 03 00 01 02 00 06 00 00 00 00 e0 01 40 01     ..............@.
    231f:	01 ff ff 00 00 08 75 1f 75 1f 75 1f d6 04 e5 04     ......u.u.u.....
    232f:	0a 00 dc 00 be 00 28 00 02 00 31 29 08 99 04 18     ......(...1)....
    233f:	01 5a 00 be 00 28 00 02 00 25 46 08 7b 04 18 01     .Z...(...%F.{...
    234f:	28 00 be 00 28 00 02 00 f5 6b 08 00 00 00 00 00     (...(....k......
	...
    250b:	00 00 03 00 00 00 00 00 00 07 00 00 00 00 e0 01     ................
    251b:	40 01 01 ff ff 03 09 08 75 1f 75 1f 75 1f           @.......u.u.u.

00002529 <keyboad_number_char_special>:
    2529:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    2539:	26 2a 7c 5c 2b 2d 5f 3f 2c 2e 2f                    &*|\+-_?,./

00002544 <keyboad_number_char_lower>:
    2544:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    2554:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

0000255e <keyboad_number_char_upper>:
    255e:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    256e:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00002578 <network_name>:
    2578:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00002585 <network_mqtt_key>:
    2585:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00002596 <network_mqtt_user>:
    2596:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    25a6:	72 00                                               r.

000025a8 <network_mqtt_port>:
    25a8:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    25b8:	74 00                                               t.

000025ba <network_mqtt_host>:
    25ba:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    25ca:	74 00                                               t.

000025cc <network_ntp>:
    25cc:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000025d8 <network_dns>:
    25d8:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000025e4 <network_gw>:
    25e4:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000025ef <network_netmask>:
    25ef:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000025ff <network_mac>:
    25ff:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

0000260b <global_time_offset>:
    260b:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    261b:	6f 66 66 73 65 74 00                                offset.

00002622 <global_time_ntp>:
    2622:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00002632 <global_time_set>:
    2632:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00002642 <termbig_header_out>:
    2642:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00002650 <termbig_subscribe>:
    2650:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    2660:	73 63 72 69 62 65 00                                scribe.

00002667 <thermctl_subscribe>:
    2667:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    2677:	62 73 63 72 69 62 65 00                             bscribe.

0000267f <lightctl_header_out>:
    267f:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

0000268e <thermctl_header_in>:
    268e:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

0000269c <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    269c:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    26ac:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    26bc:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    26cc:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    26dc:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    26ec:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    26fc:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00002708 <text_rtc_cas>:
    2708:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    2718:	6e 79 00                                            ny.

0000271b <text_ntp_cas>:
    271b:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    272b:	63 61 73 00                                         cas.

0000272f <text_pid_regulator>:
    272f:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

0000273d <text_nrf_rozhrani>:
    273d:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

0000274a <text_rest_rozhrani>:
    274a:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    275a:	69 00                                               i.

0000275c <thermctl_header_out>:
    275c:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

0000276b <text_mqtt_rozhrani>:
    276b:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00002779 <text_ethernet_rozhrani>:
    2779:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    2789:	69 00                                               i.

0000278b <text_onewire_hledam>:
    278b:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00002798 <text_onewire_rozhrani>:
    2798:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

000027a7 <text_touchscreen>:
    27a7:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

000027b3 <text_nastaveni_systemu>:
    27b3:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    27c3:	75 00                                               u.

000027c5 <text_test_eeprom>:
    27c5:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

000027d5 <text_ok>:
    27d5:	4f 4b 00                                            OK.

000027d8 <text_test_ram>:
    27d8:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

000027e5 <text_bezny_start>:
    27e5:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

000027f1 <text_vychozi_nastaveni>:
    27f1:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    2801:	69 00                                               i.

00002803 <text_vnitrni_ochrany>:
    2803:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00002813 <term_title>:
    2813:	50 6f 6b 6f 6a 6f 76 79 20 74 65 72 6d 6f 73 74     Pokojovy termost
    2823:	61 74 20 76 33 00                                   at v3.

00002829 <current_time>:
    2829:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00002836 <text_err>:
    2836:	45 72 72 6f 72 00                                   Error.

0000283c <current_temp>:
    283c:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    284c:	3a 00                                               :.

0000284e <current_temp_short>:
    284e:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00002857 <temp_offset_short>:
    2857:	6f 66 66 73 65 74 3a 00                             offset:.

0000285f <text_nastavit_tds>:
    285f:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    286f:	6c 6f 00                                            lo.

00002872 <text_not_used>:
    2872:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000287f <text_associovat_tds>:
    287f:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    288f:	64 6c 6f 00                                         dlo.

00002893 <text_rtds_prefix>:
    2893:	2f 00                                               /.

00002895 <status_know_devices>:
    2895:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    28a5:	63 65 73 00                                         ces.

000028a9 <_ZL10network_ip.lto_priv.231>:
    28a9:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

000028b4 <status_mqtt_process>:
    28b4:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    28c4:	65 73 73 00                                         ess.

000028c8 <status_mqtt_receive>:
    28c8:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    28d8:	69 76 65 00                                         ive.

000028dc <status_mqtt_error>:
    28dc:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    28ec:	72 00                                               r.

000028ee <status_mqtt_send>:
    28ee:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

000028ff <port_to_mode_PGM>:
    28ff:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

0000290f <digital_pin_to_timer_PGM>:
    290f:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    2943:	00 03                                               ..

00002945 <lcd_font>:
    2945:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    2955:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    2965:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    2975:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    2985:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    2995:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    29a5:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    29b5:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    29c5:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    29d5:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    29e5:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    29f5:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    2a05:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    2a15:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    2a25:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    2a35:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    2a45:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    2a55:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    2a65:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    2a75:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    2a85:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    2a95:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    2aa5:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    2ab5:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    2ac5:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    2ad5:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    2ae5:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    2af5:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    2b05:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    2b15:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    2b25:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    2b35:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    2b45:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    2b55:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    2b65:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    2b75:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    2b85:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    2b95:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    2ba5:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    2bb5:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    2bc5:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    2bd5:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    2be5:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    2bf5:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    2c05:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    2c15:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    2c25:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    2c35:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    2c45:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    2c55:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    2c65:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    2c75:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    2c85:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    2c95:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    2ca5:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    2cb5:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    2cc5:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    2cd5:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    2ce5:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    2cf5:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    2d05:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    2d15:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    2d25:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    2d35:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    2d45:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    2d55:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    2d65:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    2d75:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    2d85:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    2d95:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    2da5:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    2db5:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    2dc5:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    2dd5:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    2de5:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    2df5:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    2e05:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    2e15:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    2e25:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    2e35:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00002e40 <port_to_input_PGM>:
    2e40:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00002e50 <digital_pin_to_bit_mask_PGM>:
    2e50:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    2e60:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    2e70:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    2e80:	08 10 20 40 80 20                                   .. @. 

00002e86 <port_to_output_PGM>:
    2e86:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00002e96 <digital_pin_to_port_PGM>:
    2e96:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    2ea6:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    2eb6:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    2ec6:	06 06 06 06 06 07                                   ......

00002ecc <daysInMonth>:
    2ecc:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00002ed8 <__ctors_start>:
__ctors_start():
    2ed8:	e0 8a       	std	Z+16, r14	; 0x10

00002eda <__ctors_end>:
__dtors_end():
    2eda:	11 24       	eor	r1, r1
    2edc:	1f be       	out	0x3f, r1	; 63
    2ede:	cf ef       	ldi	r28, 0xFF	; 255
    2ee0:	d1 e2       	ldi	r29, 0x21	; 33
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	00 e0       	ldi	r16, 0x00	; 0
    2ee8:	0c bf       	out	0x3c, r16	; 60

00002eea <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    2eea:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    2eec:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    2eee:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    2ef0:	e2 eb       	ldi	r30, 0xB2	; 178
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    2ef2:	fa e4       	ldi	r31, 0x4A	; 74
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    2ef4:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    2ef6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    2efa:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    2efc:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    2efe:	a2 37       	cpi	r26, 0x72	; 114
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    2f00:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    2f02:	d9 f7       	brne	.-10     	; 0x2efa <__do_copy_data+0x10>

00002f04 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    2f04:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    2f06:	a2 e7       	ldi	r26, 0x72	; 114
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    2f08:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <.do_clear_bss_start>

00002f0c <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    2f0c:	1d 92       	st	X+, r1

00002f0e <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    2f0e:	a3 35       	cpi	r26, 0x53	; 83
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    2f10:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <.do_clear_bss_loop>

00002f14 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    2f14:	17 e1       	ldi	r17, 0x17	; 23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    2f16:	cd e6       	ldi	r28, 0x6D	; 109
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    2f18:	d7 e1       	ldi	r29, 0x17	; 23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    2f1a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    2f1c:	06 c0       	rjmp	.+12     	; 0x2f2a <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    2f1e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    2f20:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    2f22:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    2f24:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    2f26:	0e 94 d9 a3 	call	0x147b2	; 0x147b2 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    2f2a:	cc 36       	cpi	r28, 0x6C	; 108
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    2f2c:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    2f30:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    2f32:	a9 f7       	brne	.-22     	; 0x2f1e <__do_global_ctors+0xa>
    2f34:	0e 94 ef 8e 	call	0x11dde	; 0x11dde <main>
    2f38:	0c 94 57 a5 	jmp	0x14aae	; 0x14aae <_exit>

00002f3c <__bad_interrupt>:
__vector_38():
    2f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002f40 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	1f 92       	push	r1
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	ed 91       	ld	r30, X+
    2f50:	fc 91       	ld	r31, X
    2f52:	02 80       	ldd	r0, Z+2	; 0x02
    2f54:	f3 81       	ldd	r31, Z+3	; 0x03
    2f56:	e0 2d       	mov	r30, r0
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	be 01       	movw	r22, r28
    2f5e:	6f 5f       	subi	r22, 0xFF	; 255
    2f60:	7f 4f       	sbci	r23, 0xFF	; 255
    2f62:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    2f64:	0f 90       	pop	r0
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	08 95       	ret

00002f6c <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	ed 91       	ld	r30, X+
    2f70:	fc 91       	ld	r31, X
    2f72:	02 8c       	ldd	r0, Z+26	; 0x1a
    2f74:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2f76:	e0 2d       	mov	r30, r0
    2f78:	19 95       	eicall
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	89 27       	eor	r24, r25
    2f7e:	08 95       	ret

00002f80 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	08 95       	ret

00002f86 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    2f86:	dc 01       	movw	r26, r24
    2f88:	ed 91       	ld	r30, X+
    2f8a:	fc 91       	ld	r31, X
    2f8c:	04 8c       	ldd	r0, Z+28	; 0x1c
    2f8e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2f90:	e0 2d       	mov	r30, r0
    2f92:	19 94       	eijmp

00002f94 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    2f94:	fc 01       	movw	r30, r24
    2f96:	84 89       	ldd	r24, Z+20	; 0x14
    2f98:	95 89       	ldd	r25, Z+21	; 0x15
    2f9a:	08 95       	ret

00002f9c <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	82 89       	ldd	r24, Z+18	; 0x12
    2fa0:	93 89       	ldd	r25, Z+19	; 0x13
    2fa2:	08 95       	ret

00002fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    2fa4:	4f 92       	push	r4
    2fa6:	5f 92       	push	r5
    2fa8:	6f 92       	push	r6
    2faa:	7f 92       	push	r7
    2fac:	8f 92       	push	r8
    2fae:	9f 92       	push	r9
    2fb0:	af 92       	push	r10
    2fb2:	bf 92       	push	r11
    2fb4:	cf 92       	push	r12
    2fb6:	df 92       	push	r13
    2fb8:	ef 92       	push	r14
    2fba:	ff 92       	push	r15
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	ec 01       	movw	r28, r24
    2fc6:	5a 01       	movw	r10, r20
    2fc8:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    2fca:	37 ff       	sbrs	r19, 7
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    2fce:	62 0f       	add	r22, r18
    2fd0:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    2fd2:	31 95       	neg	r19
    2fd4:	21 95       	neg	r18
    2fd6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    2fd8:	7b 01       	movw	r14, r22
    2fda:	e2 0e       	add	r14, r18
    2fdc:	f3 1e       	adc	r15, r19
    2fde:	6b 01       	movw	r12, r22
    2fe0:	77 ff       	sbrs	r23, 7
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    2fe4:	d1 2c       	mov	r13, r1
    2fe6:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    2fe8:	e8 81       	ld	r30, Y
    2fea:	f9 81       	ldd	r31, Y+1	; 0x01
    2fec:	06 84       	ldd	r0, Z+14	; 0x0e
    2fee:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ff0:	e0 2d       	mov	r30, r0
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	19 95       	eicall
    2ff6:	8e 15       	cp	r24, r14
    2ff8:	9f 05       	cpc	r25, r15
    2ffa:	44 f4       	brge	.+16     	; 0x300c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    2ffc:	e8 81       	ld	r30, Y
    2ffe:	f9 81       	ldd	r31, Y+1	; 0x01
    3000:	06 84       	ldd	r0, Z+14	; 0x0e
    3002:	f7 85       	ldd	r31, Z+15	; 0x0f
    3004:	e0 2d       	mov	r30, r0
    3006:	ce 01       	movw	r24, r28
    3008:	19 95       	eicall
    300a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    300c:	47 01       	movw	r8, r14
    300e:	8c 18       	sub	r8, r12
    3010:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    3012:	17 ff       	sbrs	r17, 7
    3014:	05 c0       	rjmp	.+10     	; 0x3020 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3016:	a0 0e       	add	r10, r16
    3018:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    301a:	11 95       	neg	r17
    301c:	01 95       	neg	r16
    301e:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    3020:	0a 0d       	add	r16, r10
    3022:	1b 1d       	adc	r17, r11
    3024:	b7 fe       	sbrs	r11, 7
    3026:	02 c0       	rjmp	.+4      	; 0x302c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3028:	b1 2c       	mov	r11, r1
    302a:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    302c:	e8 81       	ld	r30, Y
    302e:	f9 81       	ldd	r31, Y+1	; 0x01
    3030:	04 84       	ldd	r0, Z+12	; 0x0c
    3032:	f5 85       	ldd	r31, Z+13	; 0x0d
    3034:	e0 2d       	mov	r30, r0
    3036:	ce 01       	movw	r24, r28
    3038:	19 95       	eicall
    303a:	80 17       	cp	r24, r16
    303c:	91 07       	cpc	r25, r17
    303e:	44 f4       	brge	.+16     	; 0x3050 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    3040:	e8 81       	ld	r30, Y
    3042:	f9 81       	ldd	r31, Y+1	; 0x01
    3044:	04 84       	ldd	r0, Z+12	; 0x0c
    3046:	f5 85       	ldd	r31, Z+13	; 0x0d
    3048:	e0 2d       	mov	r30, r0
    304a:	ce 01       	movw	r24, r28
    304c:	19 95       	eicall
    304e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    3050:	38 01       	movw	r6, r16
    3052:	6a 18       	sub	r6, r10
    3054:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    3056:	01 50       	subi	r16, 0x01	; 1
    3058:	11 09       	sbc	r17, r1
    305a:	97 01       	movw	r18, r14
    305c:	21 50       	subi	r18, 0x01	; 1
    305e:	31 09       	sbc	r19, r1
    3060:	e8 81       	ld	r30, Y
    3062:	f9 81       	ldd	r31, Y+1	; 0x01
    3064:	06 80       	ldd	r0, Z+6	; 0x06
    3066:	f7 81       	ldd	r31, Z+7	; 0x07
    3068:	e0 2d       	mov	r30, r0
    306a:	a5 01       	movw	r20, r10
    306c:	b6 01       	movw	r22, r12
    306e:	ce 01       	movw	r24, r28
    3070:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    3072:	ee a5       	ldd	r30, Y+46	; 0x2e
    3074:	ff a5       	ldd	r31, Y+47	; 0x2f
    3076:	80 81       	ld	r24, Z
    3078:	9a ad       	ldd	r25, Y+58	; 0x3a
    307a:	89 23       	and	r24, r25
    307c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    307e:	88 8d       	ldd	r24, Y+24	; 0x18
    3080:	99 8d       	ldd	r25, Y+25	; 0x19
    3082:	89 2b       	or	r24, r25
    3084:	c9 f4       	brne	.+50     	; 0x30b8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3086:	e8 a9       	ldd	r30, Y+48	; 0x30
    3088:	f9 a9       	ldd	r31, Y+49	; 0x31
    308a:	80 81       	ld	r24, Z
    308c:	9b ad       	ldd	r25, Y+59	; 0x3b
    308e:	89 23       	and	r24, r25
    3090:	80 83       	st	Z, r24
    3092:	12 b8       	out	0x02, r1	; 2
    3094:	ea a9       	ldd	r30, Y+50	; 0x32
    3096:	fb a9       	ldd	r31, Y+51	; 0x33
    3098:	80 81       	ld	r24, Z
    309a:	9c ad       	ldd	r25, Y+60	; 0x3c
    309c:	89 23       	and	r24, r25
    309e:	80 83       	st	Z, r24
    30a0:	ea a9       	ldd	r30, Y+50	; 0x32
    30a2:	fb a9       	ldd	r31, Y+51	; 0x33
    30a4:	80 81       	ld	r24, Z
    30a6:	98 ad       	ldd	r25, Y+56	; 0x38
    30a8:	89 2b       	or	r24, r25
    30aa:	80 83       	st	Z, r24
    30ac:	e8 a9       	ldd	r30, Y+48	; 0x30
    30ae:	f9 a9       	ldd	r31, Y+49	; 0x31
    30b0:	80 81       	ld	r24, Z
    30b2:	9f a9       	ldd	r25, Y+55	; 0x37
    30b4:	89 2b       	or	r24, r25
    30b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    30b8:	e8 a9       	ldd	r30, Y+48	; 0x30
    30ba:	f9 a9       	ldd	r31, Y+49	; 0x31
    30bc:	80 81       	ld	r24, Z
    30be:	9b ad       	ldd	r25, Y+59	; 0x3b
    30c0:	89 23       	and	r24, r25
    30c2:	80 83       	st	Z, r24
    30c4:	88 a1       	ldd	r24, Y+32	; 0x20
    30c6:	82 b9       	out	0x02, r24	; 2
    30c8:	ea a9       	ldd	r30, Y+50	; 0x32
    30ca:	fb a9       	ldd	r31, Y+51	; 0x33
    30cc:	80 81       	ld	r24, Z
    30ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    30d0:	89 23       	and	r24, r25
    30d2:	80 83       	st	Z, r24
    30d4:	ea a9       	ldd	r30, Y+50	; 0x32
    30d6:	fb a9       	ldd	r31, Y+51	; 0x33
    30d8:	80 81       	ld	r24, Z
    30da:	98 ad       	ldd	r25, Y+56	; 0x38
    30dc:	89 2b       	or	r24, r25
    30de:	80 83       	st	Z, r24
    30e0:	e8 a9       	ldd	r30, Y+48	; 0x30
    30e2:	f9 a9       	ldd	r31, Y+49	; 0x31
    30e4:	80 81       	ld	r24, Z
    30e6:	9f a9       	ldd	r25, Y+55	; 0x37
    30e8:	89 2b       	or	r24, r25
    30ea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    30ec:	86 14       	cp	r8, r6
    30ee:	97 04       	cpc	r9, r7
    30f0:	2c f0       	brlt	.+10     	; 0x30fc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    30f2:	96 2d       	mov	r25, r6
    30f4:	87 2d       	mov	r24, r7
    30f6:	34 01       	movw	r6, r8
    30f8:	89 2e       	mov	r8, r25
    30fa:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    30fc:	18 14       	cp	r1, r8
    30fe:	19 04       	cpc	r1, r9
    3100:	0c f5       	brge	.+66     	; 0x3144 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    3102:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3104:	52 b8       	out	0x02, r5	; 2
    3106:	ea a9       	ldd	r30, Y+50	; 0x32
    3108:	fb a9       	ldd	r31, Y+51	; 0x33
    310a:	20 81       	ld	r18, Z
    310c:	3c ad       	ldd	r19, Y+60	; 0x3c
    310e:	23 23       	and	r18, r19
    3110:	20 83       	st	Z, r18
    3112:	ea a9       	ldd	r30, Y+50	; 0x32
    3114:	fb a9       	ldd	r31, Y+51	; 0x33
    3116:	20 81       	ld	r18, Z
    3118:	38 ad       	ldd	r19, Y+56	; 0x38
    311a:	23 2b       	or	r18, r19
    311c:	20 83       	st	Z, r18
    311e:	42 b8       	out	0x02, r4	; 2
    3120:	ea a9       	ldd	r30, Y+50	; 0x32
    3122:	fb a9       	ldd	r31, Y+51	; 0x33
    3124:	20 81       	ld	r18, Z
    3126:	3c ad       	ldd	r19, Y+60	; 0x3c
    3128:	23 23       	and	r18, r19
    312a:	20 83       	st	Z, r18
    312c:	ea a9       	ldd	r30, Y+50	; 0x32
    312e:	fb a9       	ldd	r31, Y+51	; 0x33
    3130:	20 81       	ld	r18, Z
    3132:	38 ad       	ldd	r19, Y+56	; 0x38
    3134:	23 2b       	or	r18, r19
    3136:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	21 f7       	brne	.-56     	; 0x3104 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	88 1a       	sub	r8, r24
    3140:	91 08       	sbc	r9, r1
    3142:	dc cf       	rjmp	.-72     	; 0x30fc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    3144:	88 8d       	ldd	r24, Y+24	; 0x18
    3146:	99 8d       	ldd	r25, Y+25	; 0x19
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	51 f5       	brne	.+84     	; 0x31a0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    314c:	0c 89       	ldd	r16, Y+20	; 0x14
    314e:	1d 89       	ldd	r17, Y+21	; 0x15
    3150:	01 50       	subi	r16, 0x01	; 1
    3152:	11 09       	sbc	r17, r1
    3154:	2a 89       	ldd	r18, Y+18	; 0x12
    3156:	3b 89       	ldd	r19, Y+19	; 0x13
    3158:	21 50       	subi	r18, 0x01	; 1
    315a:	31 09       	sbc	r19, r1
    315c:	e8 81       	ld	r30, Y
    315e:	f9 81       	ldd	r31, Y+1	; 0x01
    3160:	06 80       	ldd	r0, Z+6	; 0x06
    3162:	f7 81       	ldd	r31, Z+7	; 0x07
    3164:	e0 2d       	mov	r30, r0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	40 e0       	ldi	r20, 0x00	; 0
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	ce 01       	movw	r24, r28
    3170:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    3172:	ee a5       	ldd	r30, Y+46	; 0x2e
    3174:	ff a5       	ldd	r31, Y+47	; 0x2f
    3176:	80 81       	ld	r24, Z
    3178:	9e a9       	ldd	r25, Y+54	; 0x36
    317a:	89 2b       	or	r24, r25
    317c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	df 90       	pop	r13
    318c:	cf 90       	pop	r12
    318e:	bf 90       	pop	r11
    3190:	af 90       	pop	r10
    3192:	9f 90       	pop	r9
    3194:	8f 90       	pop	r8
    3196:	7f 90       	pop	r7
    3198:	6f 90       	pop	r6
    319a:	5f 90       	pop	r5
    319c:	4f 90       	pop	r4
    319e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	39 f7       	brne	.-50     	; 0x3172 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    31a4:	ee a5       	ldd	r30, Y+46	; 0x2e
    31a6:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    31a8:	80 81       	ld	r24, Z
    31aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    31ac:	89 23       	and	r24, r25
    31ae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    31b0:	e8 a9       	ldd	r30, Y+48	; 0x30
    31b2:	f9 a9       	ldd	r31, Y+49	; 0x31
    31b4:	80 81       	ld	r24, Z
    31b6:	9b ad       	ldd	r25, Y+59	; 0x3b
    31b8:	89 23       	and	r24, r25
    31ba:	80 83       	st	Z, r24
    31bc:	84 e0       	ldi	r24, 0x04	; 4
    31be:	82 b9       	out	0x02, r24	; 2
    31c0:	ea a9       	ldd	r30, Y+50	; 0x32
    31c2:	fb a9       	ldd	r31, Y+51	; 0x33
    31c4:	80 81       	ld	r24, Z
    31c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    31c8:	89 23       	and	r24, r25
    31ca:	80 83       	st	Z, r24
    31cc:	ea a9       	ldd	r30, Y+50	; 0x32
    31ce:	fb a9       	ldd	r31, Y+51	; 0x33
    31d0:	80 81       	ld	r24, Z
    31d2:	98 ad       	ldd	r25, Y+56	; 0x38
    31d4:	89 2b       	or	r24, r25
    31d6:	80 83       	st	Z, r24
    31d8:	e8 a9       	ldd	r30, Y+48	; 0x30
    31da:	f9 a9       	ldd	r31, Y+49	; 0x31
    31dc:	80 81       	ld	r24, Z
    31de:	9f a9       	ldd	r25, Y+55	; 0x37
    31e0:	89 2b       	or	r24, r25
    31e2:	80 83       	st	Z, r24
    31e4:	8a 89       	ldd	r24, Y+18	; 0x12
    31e6:	9b 89       	ldd	r25, Y+19	; 0x13
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	92 b9       	out	0x02, r25	; 2
    31ec:	ea a9       	ldd	r30, Y+50	; 0x32
    31ee:	fb a9       	ldd	r31, Y+51	; 0x33
    31f0:	80 81       	ld	r24, Z
    31f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    31f4:	89 23       	and	r24, r25
    31f6:	80 83       	st	Z, r24
    31f8:	ea a9       	ldd	r30, Y+50	; 0x32
    31fa:	fb a9       	ldd	r31, Y+51	; 0x33
    31fc:	80 81       	ld	r24, Z
    31fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3200:	89 2b       	or	r24, r25
    3202:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3204:	e8 a9       	ldd	r30, Y+48	; 0x30
    3206:	f9 a9       	ldd	r31, Y+49	; 0x31
    3208:	80 81       	ld	r24, Z
    320a:	9b ad       	ldd	r25, Y+59	; 0x3b
    320c:	89 23       	and	r24, r25
    320e:	80 83       	st	Z, r24
    3210:	85 e0       	ldi	r24, 0x05	; 5
    3212:	82 b9       	out	0x02, r24	; 2
    3214:	ea a9       	ldd	r30, Y+50	; 0x32
    3216:	fb a9       	ldd	r31, Y+51	; 0x33
    3218:	80 81       	ld	r24, Z
    321a:	9c ad       	ldd	r25, Y+60	; 0x3c
    321c:	89 23       	and	r24, r25
    321e:	80 83       	st	Z, r24
    3220:	ea a9       	ldd	r30, Y+50	; 0x32
    3222:	fb a9       	ldd	r31, Y+51	; 0x33
    3224:	80 81       	ld	r24, Z
    3226:	98 ad       	ldd	r25, Y+56	; 0x38
    3228:	89 2b       	or	r24, r25
    322a:	80 83       	st	Z, r24
    322c:	e8 a9       	ldd	r30, Y+48	; 0x30
    322e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3230:	80 81       	ld	r24, Z
    3232:	9f a9       	ldd	r25, Y+55	; 0x37
    3234:	89 2b       	or	r24, r25
    3236:	80 83       	st	Z, r24
    3238:	8a 89       	ldd	r24, Y+18	; 0x12
    323a:	81 50       	subi	r24, 0x01	; 1
    323c:	82 b9       	out	0x02, r24	; 2
    323e:	ea a9       	ldd	r30, Y+50	; 0x32
    3240:	fb a9       	ldd	r31, Y+51	; 0x33
    3242:	80 81       	ld	r24, Z
    3244:	9c ad       	ldd	r25, Y+60	; 0x3c
    3246:	89 23       	and	r24, r25
    3248:	80 83       	st	Z, r24
    324a:	ea a9       	ldd	r30, Y+50	; 0x32
    324c:	fb a9       	ldd	r31, Y+51	; 0x33
    324e:	80 81       	ld	r24, Z
    3250:	98 ad       	ldd	r25, Y+56	; 0x38
    3252:	89 2b       	or	r24, r25
    3254:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    3256:	e8 a9       	ldd	r30, Y+48	; 0x30
    3258:	f9 a9       	ldd	r31, Y+49	; 0x31
    325a:	80 81       	ld	r24, Z
    325c:	9b ad       	ldd	r25, Y+59	; 0x3b
    325e:	89 23       	and	r24, r25
    3260:	80 83       	st	Z, r24
    3262:	88 e0       	ldi	r24, 0x08	; 8
    3264:	82 b9       	out	0x02, r24	; 2
    3266:	ea a9       	ldd	r30, Y+50	; 0x32
    3268:	fb a9       	ldd	r31, Y+51	; 0x33
    326a:	80 81       	ld	r24, Z
    326c:	9c ad       	ldd	r25, Y+60	; 0x3c
    326e:	89 23       	and	r24, r25
    3270:	80 83       	st	Z, r24
    3272:	ea a9       	ldd	r30, Y+50	; 0x32
    3274:	fb a9       	ldd	r31, Y+51	; 0x33
    3276:	80 81       	ld	r24, Z
    3278:	98 ad       	ldd	r25, Y+56	; 0x38
    327a:	89 2b       	or	r24, r25
    327c:	80 83       	st	Z, r24
    327e:	e8 a9       	ldd	r30, Y+48	; 0x30
    3280:	f9 a9       	ldd	r31, Y+49	; 0x31
    3282:	80 81       	ld	r24, Z
    3284:	9f a9       	ldd	r25, Y+55	; 0x37
    3286:	89 2b       	or	r24, r25
    3288:	80 83       	st	Z, r24
    328a:	8c 89       	ldd	r24, Y+20	; 0x14
    328c:	9d 89       	ldd	r25, Y+21	; 0x15
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	92 b9       	out	0x02, r25	; 2
    3292:	ea a9       	ldd	r30, Y+50	; 0x32
    3294:	fb a9       	ldd	r31, Y+51	; 0x33
    3296:	80 81       	ld	r24, Z
    3298:	9c ad       	ldd	r25, Y+60	; 0x3c
    329a:	89 23       	and	r24, r25
    329c:	80 83       	st	Z, r24
    329e:	ea a9       	ldd	r30, Y+50	; 0x32
    32a0:	fb a9       	ldd	r31, Y+51	; 0x33
    32a2:	80 81       	ld	r24, Z
    32a4:	98 ad       	ldd	r25, Y+56	; 0x38
    32a6:	89 2b       	or	r24, r25
    32a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    32aa:	e8 a9       	ldd	r30, Y+48	; 0x30
    32ac:	f9 a9       	ldd	r31, Y+49	; 0x31
    32ae:	80 81       	ld	r24, Z
    32b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    32b2:	89 23       	and	r24, r25
    32b4:	80 83       	st	Z, r24
    32b6:	89 e0       	ldi	r24, 0x09	; 9
    32b8:	82 b9       	out	0x02, r24	; 2
    32ba:	ea a9       	ldd	r30, Y+50	; 0x32
    32bc:	fb a9       	ldd	r31, Y+51	; 0x33
    32be:	80 81       	ld	r24, Z
    32c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    32c2:	89 23       	and	r24, r25
    32c4:	80 83       	st	Z, r24
    32c6:	ea a9       	ldd	r30, Y+50	; 0x32
    32c8:	fb a9       	ldd	r31, Y+51	; 0x33
    32ca:	80 81       	ld	r24, Z
    32cc:	98 ad       	ldd	r25, Y+56	; 0x38
    32ce:	89 2b       	or	r24, r25
    32d0:	80 83       	st	Z, r24
    32d2:	e8 a9       	ldd	r30, Y+48	; 0x30
    32d4:	f9 a9       	ldd	r31, Y+49	; 0x31
    32d6:	80 81       	ld	r24, Z
    32d8:	9f a9       	ldd	r25, Y+55	; 0x37
    32da:	89 2b       	or	r24, r25
    32dc:	80 83       	st	Z, r24
    32de:	8c 89       	ldd	r24, Y+20	; 0x14
    32e0:	81 50       	subi	r24, 0x01	; 1
    32e2:	82 b9       	out	0x02, r24	; 2
    32e4:	ea a9       	ldd	r30, Y+50	; 0x32
    32e6:	fb a9       	ldd	r31, Y+51	; 0x33
    32e8:	80 81       	ld	r24, Z
    32ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    32ec:	89 23       	and	r24, r25
    32ee:	80 83       	st	Z, r24
    32f0:	ea a9       	ldd	r30, Y+50	; 0x32
    32f2:	fb a9       	ldd	r31, Y+51	; 0x33
    32f4:	80 81       	ld	r24, Z
    32f6:	98 ad       	ldd	r25, Y+56	; 0x38
    32f8:	89 2b       	or	r24, r25
    32fa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    32fc:	ee a5       	ldd	r30, Y+46	; 0x2e
    32fe:	ff a5       	ldd	r31, Y+47	; 0x2f
    3300:	80 81       	ld	r24, Z
    3302:	9e a9       	ldd	r25, Y+54	; 0x36
    3304:	89 2b       	or	r24, r25
    3306:	80 83       	st	Z, r24
    3308:	34 cf       	rjmp	.-408    	; 0x3172 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

0000330a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    331e:	77 fd       	sbrc	r23, 7
    3320:	75 c0       	rjmp	.+234    	; 0x340c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3322:	57 fd       	sbrc	r21, 7
    3324:	73 c0       	rjmp	.+230    	; 0x340c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3326:	c3 2e       	mov	r12, r19
    3328:	d2 2e       	mov	r13, r18
    332a:	5a 01       	movw	r10, r20
    332c:	7b 01       	movw	r14, r22
    332e:	ec 01       	movw	r28, r24
    3330:	e8 81       	ld	r30, Y
    3332:	f9 81       	ldd	r31, Y+1	; 0x01
    3334:	06 84       	ldd	r0, Z+14	; 0x0e
    3336:	f7 85       	ldd	r31, Z+15	; 0x0f
    3338:	e0 2d       	mov	r30, r0
    333a:	19 95       	eicall
    333c:	8e 15       	cp	r24, r14
    333e:	9f 05       	cpc	r25, r15
    3340:	0c f4       	brge	.+2      	; 0x3344 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    3342:	64 c0       	rjmp	.+200    	; 0x340c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3344:	e8 81       	ld	r30, Y
    3346:	f9 81       	ldd	r31, Y+1	; 0x01
    3348:	04 84       	ldd	r0, Z+12	; 0x0c
    334a:	f5 85       	ldd	r31, Z+13	; 0x0d
    334c:	e0 2d       	mov	r30, r0
    334e:	ce 01       	movw	r24, r28
    3350:	19 95       	eicall
    3352:	8a 15       	cp	r24, r10
    3354:	9b 05       	cpc	r25, r11
    3356:	0c f4       	brge	.+2      	; 0x335a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    3358:	59 c0       	rjmp	.+178    	; 0x340c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    335a:	e8 81       	ld	r30, Y
    335c:	f9 81       	ldd	r31, Y+1	; 0x01
    335e:	06 80       	ldd	r0, Z+6	; 0x06
    3360:	f7 81       	ldd	r31, Z+7	; 0x07
    3362:	e0 2d       	mov	r30, r0
    3364:	85 01       	movw	r16, r10
    3366:	97 01       	movw	r18, r14
    3368:	a5 01       	movw	r20, r10
    336a:	b7 01       	movw	r22, r14
    336c:	ce 01       	movw	r24, r28
    336e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    3370:	ee a5       	ldd	r30, Y+46	; 0x2e
    3372:	ff a5       	ldd	r31, Y+47	; 0x2f
    3374:	80 81       	ld	r24, Z
    3376:	9a ad       	ldd	r25, Y+58	; 0x3a
    3378:	89 23       	and	r24, r25
    337a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    337c:	98 a1       	ldd	r25, Y+32	; 0x20
    337e:	29 a1       	ldd	r18, Y+33	; 0x21
    3380:	e8 a9       	ldd	r30, Y+48	; 0x30
    3382:	f9 a9       	ldd	r31, Y+49	; 0x31
    3384:	80 81       	ld	r24, Z
    3386:	3b ad       	ldd	r19, Y+59	; 0x3b
    3388:	83 23       	and	r24, r19
    338a:	80 83       	st	Z, r24
    338c:	22 b9       	out	0x02, r18	; 2
    338e:	ea a9       	ldd	r30, Y+50	; 0x32
    3390:	fb a9       	ldd	r31, Y+51	; 0x33
    3392:	80 81       	ld	r24, Z
    3394:	2c ad       	ldd	r18, Y+60	; 0x3c
    3396:	82 23       	and	r24, r18
    3398:	80 83       	st	Z, r24
    339a:	ea a9       	ldd	r30, Y+50	; 0x32
    339c:	fb a9       	ldd	r31, Y+51	; 0x33
    339e:	80 81       	ld	r24, Z
    33a0:	28 ad       	ldd	r18, Y+56	; 0x38
    33a2:	82 2b       	or	r24, r18
    33a4:	80 83       	st	Z, r24
    33a6:	92 b9       	out	0x02, r25	; 2
    33a8:	ea a9       	ldd	r30, Y+50	; 0x32
    33aa:	fb a9       	ldd	r31, Y+51	; 0x33
    33ac:	80 81       	ld	r24, Z
    33ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    33b0:	89 23       	and	r24, r25
    33b2:	80 83       	st	Z, r24
    33b4:	ea a9       	ldd	r30, Y+50	; 0x32
    33b6:	fb a9       	ldd	r31, Y+51	; 0x33
    33b8:	80 81       	ld	r24, Z
    33ba:	98 ad       	ldd	r25, Y+56	; 0x38
    33bc:	89 2b       	or	r24, r25
    33be:	80 83       	st	Z, r24
    33c0:	e8 a9       	ldd	r30, Y+48	; 0x30
    33c2:	f9 a9       	ldd	r31, Y+49	; 0x31
    33c4:	80 81       	ld	r24, Z
    33c6:	9f a9       	ldd	r25, Y+55	; 0x37
    33c8:	89 2b       	or	r24, r25
    33ca:	80 83       	st	Z, r24
    33cc:	c2 b8       	out	0x02, r12	; 2
    33ce:	ea a9       	ldd	r30, Y+50	; 0x32
    33d0:	fb a9       	ldd	r31, Y+51	; 0x33
    33d2:	80 81       	ld	r24, Z
    33d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    33d6:	89 23       	and	r24, r25
    33d8:	80 83       	st	Z, r24
    33da:	ea a9       	ldd	r30, Y+50	; 0x32
    33dc:	fb a9       	ldd	r31, Y+51	; 0x33
    33de:	80 81       	ld	r24, Z
    33e0:	98 ad       	ldd	r25, Y+56	; 0x38
    33e2:	89 2b       	or	r24, r25
    33e4:	80 83       	st	Z, r24
    33e6:	d2 b8       	out	0x02, r13	; 2
    33e8:	ea a9       	ldd	r30, Y+50	; 0x32
    33ea:	fb a9       	ldd	r31, Y+51	; 0x33
    33ec:	80 81       	ld	r24, Z
    33ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    33f0:	89 23       	and	r24, r25
    33f2:	80 83       	st	Z, r24
    33f4:	ea a9       	ldd	r30, Y+50	; 0x32
    33f6:	fb a9       	ldd	r31, Y+51	; 0x33
    33f8:	80 81       	ld	r24, Z
    33fa:	98 ad       	ldd	r25, Y+56	; 0x38
    33fc:	89 2b       	or	r24, r25
    33fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    3400:	ee a5       	ldd	r30, Y+46	; 0x2e
    3402:	ff a5       	ldd	r31, Y+47	; 0x2f
    3404:	80 81       	ld	r24, Z
    3406:	9e a9       	ldd	r25, Y+54	; 0x36
    3408:	89 2b       	or	r24, r25
    340a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ff 90       	pop	r15
    3416:	ef 90       	pop	r14
    3418:	df 90       	pop	r13
    341a:	cf 90       	pop	r12
    341c:	bf 90       	pop	r11
    341e:	af 90       	pop	r10
    3420:	08 95       	ret

00003422 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    3422:	7f 92       	push	r7
    3424:	8f 92       	push	r8
    3426:	9f 92       	push	r9
    3428:	af 92       	push	r10
    342a:	bf 92       	push	r11
    342c:	cf 92       	push	r12
    342e:	df 92       	push	r13
    3430:	ef 92       	push	r14
    3432:	ff 92       	push	r15
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	ec 01       	movw	r28, r24
    343e:	59 01       	movw	r10, r18
    3440:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    3442:	0e 9d       	mul	r16, r14
    3444:	60 01       	movw	r12, r0
    3446:	0f 9d       	mul	r16, r15
    3448:	d0 0c       	add	r13, r0
    344a:	1e 9d       	mul	r17, r14
    344c:	d0 0c       	add	r13, r0
    344e:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    3450:	87 01       	movw	r16, r14
    3452:	04 0f       	add	r16, r20
    3454:	15 1f       	adc	r17, r21
    3456:	01 50       	subi	r16, 0x01	; 1
    3458:	11 09       	sbc	r17, r1
    345a:	26 0f       	add	r18, r22
    345c:	37 1f       	adc	r19, r23
    345e:	21 50       	subi	r18, 0x01	; 1
    3460:	31 09       	sbc	r19, r1
    3462:	e8 81       	ld	r30, Y
    3464:	f9 81       	ldd	r31, Y+1	; 0x01
    3466:	06 80       	ldd	r0, Z+6	; 0x06
    3468:	f7 81       	ldd	r31, Z+7	; 0x07
    346a:	e0 2d       	mov	r30, r0
    346c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    346e:	77 24       	eor	r7, r7
    3470:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    3472:	1c 14       	cp	r1, r12
    3474:	1d 04       	cpc	r1, r13
    3476:	0c f0       	brlt	.+2      	; 0x347a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    3478:	0a c1       	rjmp	.+532    	; 0x368e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    347a:	ee a5       	ldd	r30, Y+46	; 0x2e
    347c:	ff a5       	ldd	r31, Y+47	; 0x2f
    347e:	80 81       	ld	r24, Z
    3480:	9a ad       	ldd	r25, Y+58	; 0x3a
    3482:	89 23       	and	r24, r25
    3484:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    3486:	e8 a9       	ldd	r30, Y+48	; 0x30
    3488:	f9 a9       	ldd	r31, Y+49	; 0x31
    348a:	80 81       	ld	r24, Z
    348c:	9b ad       	ldd	r25, Y+59	; 0x3b
    348e:	89 23       	and	r24, r25
    3490:	80 83       	st	Z, r24
    3492:	9a a1       	ldd	r25, Y+34	; 0x22
    3494:	8b a1       	ldd	r24, Y+35	; 0x23
    3496:	82 b9       	out	0x02, r24	; 2
    3498:	ea a9       	ldd	r30, Y+50	; 0x32
    349a:	fb a9       	ldd	r31, Y+51	; 0x33
    349c:	80 81       	ld	r24, Z
    349e:	2c ad       	ldd	r18, Y+60	; 0x3c
    34a0:	82 23       	and	r24, r18
    34a2:	80 83       	st	Z, r24
    34a4:	ea a9       	ldd	r30, Y+50	; 0x32
    34a6:	fb a9       	ldd	r31, Y+51	; 0x33
    34a8:	80 81       	ld	r24, Z
    34aa:	28 ad       	ldd	r18, Y+56	; 0x38
    34ac:	82 2b       	or	r24, r18
    34ae:	80 83       	st	Z, r24
    34b0:	92 b9       	out	0x02, r25	; 2
    34b2:	ea a9       	ldd	r30, Y+50	; 0x32
    34b4:	fb a9       	ldd	r31, Y+51	; 0x33
    34b6:	80 81       	ld	r24, Z
    34b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    34ba:	89 23       	and	r24, r25
    34bc:	80 83       	st	Z, r24
    34be:	ea a9       	ldd	r30, Y+50	; 0x32
    34c0:	fb a9       	ldd	r31, Y+51	; 0x33
    34c2:	80 81       	ld	r24, Z
    34c4:	98 ad       	ldd	r25, Y+56	; 0x38
    34c6:	89 2b       	or	r24, r25
    34c8:	80 83       	st	Z, r24
    34ca:	e8 a9       	ldd	r30, Y+48	; 0x30
    34cc:	f9 a9       	ldd	r31, Y+49	; 0x31
    34ce:	80 81       	ld	r24, Z
    34d0:	9f a9       	ldd	r25, Y+55	; 0x37
    34d2:	89 2b       	or	r24, r25
    34d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    34d6:	81 b1       	in	r24, 0x01	; 1
    34d8:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    34da:	88 8d       	ldd	r24, Y+24	; 0x18
    34dc:	99 8d       	ldd	r25, Y+25	; 0x19
    34de:	89 2b       	or	r24, r25
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    34e2:	67 c0       	rjmp	.+206    	; 0x35b2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    34e4:	f5 01       	movw	r30, r10
    34e6:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    34e8:	42 e0       	ldi	r20, 0x02	; 2
    34ea:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    34ec:	ac a9       	ldd	r26, Y+52	; 0x34
    34ee:	bd a9       	ldd	r27, Y+53	; 0x35
    34f0:	2c 91       	ld	r18, X
    34f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    34f4:	23 23       	and	r18, r19
    34f6:	2c 93       	st	X, r18
    34f8:	20 b1       	in	r18, 0x00	; 0
    34fa:	ac a9       	ldd	r26, Y+52	; 0x34
    34fc:	bd a9       	ldd	r27, Y+53	; 0x35
    34fe:	2c 91       	ld	r18, X
    3500:	39 ad       	ldd	r19, Y+57	; 0x39
    3502:	23 2b       	or	r18, r19
    3504:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    3506:	ac a9       	ldd	r26, Y+52	; 0x34
    3508:	bd a9       	ldd	r27, Y+53	; 0x35
    350a:	2c 91       	ld	r18, X
    350c:	3d ad       	ldd	r19, Y+61	; 0x3d
    350e:	23 23       	and	r18, r19
    3510:	2c 93       	st	X, r18
    3512:	20 b1       	in	r18, 0x00	; 0
    3514:	ac a9       	ldd	r26, Y+52	; 0x34
    3516:	bd a9       	ldd	r27, Y+53	; 0x35
    3518:	2c 91       	ld	r18, X
    351a:	39 ad       	ldd	r19, Y+57	; 0x39
    351c:	23 2b       	or	r18, r19
    351e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    3520:	ac a9       	ldd	r26, Y+52	; 0x34
    3522:	bd a9       	ldd	r27, Y+53	; 0x35
    3524:	2c 91       	ld	r18, X
    3526:	3d ad       	ldd	r19, Y+61	; 0x3d
    3528:	23 23       	and	r18, r19
    352a:	2c 93       	st	X, r18
    352c:	20 b1       	in	r18, 0x00	; 0
    352e:	ac a9       	ldd	r26, Y+52	; 0x34
    3530:	bd a9       	ldd	r27, Y+53	; 0x35
    3532:	3c 91       	ld	r19, X
    3534:	69 ad       	ldd	r22, Y+57	; 0x39
    3536:	36 2b       	or	r19, r22
    3538:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    353a:	ac a9       	ldd	r26, Y+52	; 0x34
    353c:	bd a9       	ldd	r27, Y+53	; 0x35
    353e:	3c 91       	ld	r19, X
    3540:	6d ad       	ldd	r22, Y+61	; 0x3d
    3542:	36 23       	and	r19, r22
    3544:	3c 93       	st	X, r19
    3546:	60 b1       	in	r22, 0x00	; 0
    3548:	ac a9       	ldd	r26, Y+52	; 0x34
    354a:	bd a9       	ldd	r27, Y+53	; 0x35
    354c:	3c 91       	ld	r19, X
    354e:	79 ad       	ldd	r23, Y+57	; 0x39
    3550:	37 2b       	or	r19, r23
    3552:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    3554:	41 30       	cpi	r20, 0x01	; 1
    3556:	51 05       	cpc	r21, r1
    3558:	49 f5       	brne	.+82     	; 0x35ac <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    355a:	32 2f       	mov	r19, r18
    355c:	26 2f       	mov	r18, r22
    355e:	21 93       	st	Z+, r18
    3560:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    3562:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    3564:	09 f0       	breq	.+2      	; 0x3568 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    3566:	c0 cf       	rjmp	.-128    	; 0x34e8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    3568:	cc 0c       	add	r12, r12
    356a:	dd 1c       	adc	r13, r13
    356c:	ac 0c       	add	r10, r12
    356e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    3570:	0c 89       	ldd	r16, Y+20	; 0x14
    3572:	1d 89       	ldd	r17, Y+21	; 0x15
    3574:	01 50       	subi	r16, 0x01	; 1
    3576:	11 09       	sbc	r17, r1
    3578:	2a 89       	ldd	r18, Y+18	; 0x12
    357a:	3b 89       	ldd	r19, Y+19	; 0x13
    357c:	21 50       	subi	r18, 0x01	; 1
    357e:	31 09       	sbc	r19, r1
    3580:	e8 81       	ld	r30, Y
    3582:	f9 81       	ldd	r31, Y+1	; 0x01
    3584:	06 80       	ldd	r0, Z+6	; 0x06
    3586:	f7 81       	ldd	r31, Z+7	; 0x07
    3588:	e0 2d       	mov	r30, r0
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	ce 01       	movw	r24, r28
    3594:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    3596:	ee a5       	ldd	r30, Y+46	; 0x2e
    3598:	ff a5       	ldd	r31, Y+47	; 0x2f
    359a:	80 81       	ld	r24, Z
    359c:	9e a9       	ldd	r25, Y+54	; 0x36
    359e:	89 2b       	or	r24, r25
    35a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    35a2:	81 b1       	in	r24, 0x01	; 1
    35a4:	71 b8       	out	0x01, r7	; 1
    35a6:	d1 2c       	mov	r13, r1
    35a8:	c1 2c       	mov	r12, r1
    35aa:	63 cf       	rjmp	.-314    	; 0x3472 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	9d cf       	rjmp	.-198    	; 0x34ec <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    35b2:	ec a9       	ldd	r30, Y+52	; 0x34
    35b4:	fd a9       	ldd	r31, Y+53	; 0x35
    35b6:	80 81       	ld	r24, Z
    35b8:	9d ad       	ldd	r25, Y+61	; 0x3d
    35ba:	89 23       	and	r24, r25
    35bc:	80 83       	st	Z, r24
    35be:	80 b1       	in	r24, 0x00	; 0
    35c0:	ec a9       	ldd	r30, Y+52	; 0x34
    35c2:	fd a9       	ldd	r31, Y+53	; 0x35
    35c4:	80 81       	ld	r24, Z
    35c6:	99 ad       	ldd	r25, Y+57	; 0x39
    35c8:	89 2b       	or	r24, r25
    35ca:	80 83       	st	Z, r24
    35cc:	75 01       	movw	r14, r10
    35ce:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    35d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    35d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	d9 f5       	brne	.+118    	; 0x3650 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    35da:	ec a9       	ldd	r30, Y+52	; 0x34
    35dc:	fd a9       	ldd	r31, Y+53	; 0x35
    35de:	80 81       	ld	r24, Z
    35e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    35e2:	89 23       	and	r24, r25
    35e4:	80 83       	st	Z, r24
    35e6:	60 b1       	in	r22, 0x00	; 0
    35e8:	ec a9       	ldd	r30, Y+52	; 0x34
    35ea:	fd a9       	ldd	r31, Y+53	; 0x35
    35ec:	80 81       	ld	r24, Z
    35ee:	99 ad       	ldd	r25, Y+57	; 0x39
    35f0:	89 2b       	or	r24, r25
    35f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    35f4:	ec a9       	ldd	r30, Y+52	; 0x34
    35f6:	fd a9       	ldd	r31, Y+53	; 0x35
    35f8:	80 81       	ld	r24, Z
    35fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    35fc:	89 23       	and	r24, r25
    35fe:	80 83       	st	Z, r24
    3600:	40 b1       	in	r20, 0x00	; 0
    3602:	ec a9       	ldd	r30, Y+52	; 0x34
    3604:	fd a9       	ldd	r31, Y+53	; 0x35
    3606:	80 81       	ld	r24, Z
    3608:	99 ad       	ldd	r25, Y+57	; 0x39
    360a:	89 2b       	or	r24, r25
    360c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    360e:	ec a9       	ldd	r30, Y+52	; 0x34
    3610:	fd a9       	ldd	r31, Y+53	; 0x35
    3612:	80 81       	ld	r24, Z
    3614:	9d ad       	ldd	r25, Y+61	; 0x3d
    3616:	89 23       	and	r24, r25
    3618:	80 83       	st	Z, r24
    361a:	20 b1       	in	r18, 0x00	; 0
    361c:	ec a9       	ldd	r30, Y+52	; 0x34
    361e:	fd a9       	ldd	r31, Y+53	; 0x35
    3620:	80 81       	ld	r24, Z
    3622:	99 ad       	ldd	r25, Y+57	; 0x39
    3624:	89 2b       	or	r24, r25
    3626:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    3628:	e8 81       	ld	r30, Y
    362a:	f9 81       	ldd	r31, Y+1	; 0x01
    362c:	01 90       	ld	r0, Z+
    362e:	f0 81       	ld	r31, Z
    3630:	e0 2d       	mov	r30, r0
    3632:	ce 01       	movw	r24, r28
    3634:	19 95       	eicall
    3636:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    3638:	f7 01       	movw	r30, r14
    363a:	81 92       	st	Z+, r8
    363c:	91 92       	st	Z+, r9
    363e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    3640:	01 50       	subi	r16, 0x01	; 1
    3642:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    3644:	29 f6       	brne	.-118    	; 0x35d0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    3646:	cc 0c       	add	r12, r12
    3648:	dd 1c       	adc	r13, r13
    364a:	ac 0c       	add	r10, r12
    364c:	bd 1c       	adc	r11, r13
    364e:	a3 cf       	rjmp	.-186    	; 0x3596 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    3650:	89 2b       	or	r24, r25
    3652:	91 f7       	brne	.-28     	; 0x3638 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    3654:	ec a9       	ldd	r30, Y+52	; 0x34
    3656:	fd a9       	ldd	r31, Y+53	; 0x35
    3658:	80 81       	ld	r24, Z
    365a:	9d ad       	ldd	r25, Y+61	; 0x3d
    365c:	89 23       	and	r24, r25
    365e:	80 83       	st	Z, r24
    3660:	80 b0       	in	r8, 0x00	; 0
    3662:	ec a9       	ldd	r30, Y+52	; 0x34
    3664:	fd a9       	ldd	r31, Y+53	; 0x35
    3666:	80 81       	ld	r24, Z
    3668:	99 ad       	ldd	r25, Y+57	; 0x39
    366a:	89 2b       	or	r24, r25
    366c:	80 83       	st	Z, r24
    366e:	ec a9       	ldd	r30, Y+52	; 0x34
    3670:	fd a9       	ldd	r31, Y+53	; 0x35
    3672:	80 81       	ld	r24, Z
    3674:	9d ad       	ldd	r25, Y+61	; 0x3d
    3676:	89 23       	and	r24, r25
    3678:	80 83       	st	Z, r24
    367a:	90 b1       	in	r25, 0x00	; 0
    367c:	ec a9       	ldd	r30, Y+52	; 0x34
    367e:	fd a9       	ldd	r31, Y+53	; 0x35
    3680:	80 81       	ld	r24, Z
    3682:	29 ad       	ldd	r18, Y+57	; 0x39
    3684:	82 2b       	or	r24, r18
    3686:	80 83       	st	Z, r24
    3688:	98 2c       	mov	r9, r8
    368a:	89 2e       	mov	r8, r25
    368c:	d5 cf       	rjmp	.-86     	; 0x3638 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	bf 90       	pop	r11
    36a4:	af 90       	pop	r10
    36a6:	9f 90       	pop	r9
    36a8:	8f 90       	pop	r8
    36aa:	7f 90       	pop	r7
    36ac:	08 95       	ret

000036ae <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    36ae:	38 e0       	ldi	r19, 0x08	; 8
    36b0:	43 9f       	mul	r20, r19
    36b2:	c0 01       	movw	r24, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	80 7e       	andi	r24, 0xE0	; 224
    36b8:	97 70       	andi	r25, 0x07	; 7
    36ba:	26 95       	lsr	r18
    36bc:	26 95       	lsr	r18
    36be:	26 95       	lsr	r18
    36c0:	82 2b       	or	r24, r18
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	76 2f       	mov	r23, r22
    36c6:	66 27       	eor	r22, r22
    36c8:	66 27       	eor	r22, r22
    36ca:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    36cc:	86 2b       	or	r24, r22
    36ce:	97 2b       	or	r25, r23
    36d0:	08 95       	ret

000036d2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    36d2:	0f 93       	push	r16
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	dc 01       	movw	r26, r24
    36da:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    36dc:	9e 96       	adiw	r26, 0x2e	; 46
    36de:	ed 91       	ld	r30, X+
    36e0:	fc 91       	ld	r31, X
    36e2:	9f 97       	sbiw	r26, 0x2f	; 47
    36e4:	80 81       	ld	r24, Z
    36e6:	da 96       	adiw	r26, 0x3a	; 58
    36e8:	9c 91       	ld	r25, X
    36ea:	da 97       	sbiw	r26, 0x3a	; 58
    36ec:	89 23       	and	r24, r25
    36ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    36f0:	22 23       	and	r18, r18
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    36f4:	5b c0       	rjmp	.+182    	; 0x37ac <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    36f6:	58 96       	adiw	r26, 0x18	; 24
    36f8:	8d 91       	ld	r24, X+
    36fa:	9c 91       	ld	r25, X
    36fc:	59 97       	sbiw	r26, 0x19	; 25
    36fe:	89 2b       	or	r24, r25
    3700:	49 f5       	brne	.+82     	; 0x3754 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    3702:	d0 96       	adiw	r26, 0x30	; 48
    3704:	ed 91       	ld	r30, X+
    3706:	fc 91       	ld	r31, X
    3708:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    370a:	80 81       	ld	r24, Z
    370c:	db 96       	adiw	r26, 0x3b	; 59
    370e:	9c 91       	ld	r25, X
    3710:	db 97       	sbiw	r26, 0x3b	; 59
    3712:	89 23       	and	r24, r25
    3714:	80 83       	st	Z, r24
    3716:	12 b8       	out	0x02, r1	; 2
    3718:	d2 96       	adiw	r26, 0x32	; 50
    371a:	ed 91       	ld	r30, X+
    371c:	fc 91       	ld	r31, X
    371e:	d3 97       	sbiw	r26, 0x33	; 51
    3720:	80 81       	ld	r24, Z
    3722:	dc 96       	adiw	r26, 0x3c	; 60
    3724:	9c 91       	ld	r25, X
    3726:	dc 97       	sbiw	r26, 0x3c	; 60
    3728:	89 23       	and	r24, r25
    372a:	80 83       	st	Z, r24
    372c:	d2 96       	adiw	r26, 0x32	; 50
    372e:	ed 91       	ld	r30, X+
    3730:	fc 91       	ld	r31, X
    3732:	d3 97       	sbiw	r26, 0x33	; 51
    3734:	80 81       	ld	r24, Z
    3736:	d8 96       	adiw	r26, 0x38	; 56
    3738:	9c 91       	ld	r25, X
    373a:	d8 97       	sbiw	r26, 0x38	; 56
    373c:	89 2b       	or	r24, r25
    373e:	80 83       	st	Z, r24
    3740:	d0 96       	adiw	r26, 0x30	; 48
    3742:	ed 91       	ld	r30, X+
    3744:	fc 91       	ld	r31, X
    3746:	d1 97       	sbiw	r26, 0x31	; 49
    3748:	80 81       	ld	r24, Z
    374a:	d7 96       	adiw	r26, 0x37	; 55
    374c:	9c 91       	ld	r25, X
    374e:	d7 97       	sbiw	r26, 0x37	; 55
    3750:	89 2b       	or	r24, r25
    3752:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    3754:	d0 96       	adiw	r26, 0x30	; 48
    3756:	ed 91       	ld	r30, X+
    3758:	fc 91       	ld	r31, X
    375a:	d1 97       	sbiw	r26, 0x31	; 49
    375c:	80 81       	ld	r24, Z
    375e:	db 96       	adiw	r26, 0x3b	; 59
    3760:	9c 91       	ld	r25, X
    3762:	db 97       	sbiw	r26, 0x3b	; 59
    3764:	89 23       	and	r24, r25
    3766:	80 83       	st	Z, r24
    3768:	90 96       	adiw	r26, 0x20	; 32
    376a:	8c 91       	ld	r24, X
    376c:	90 97       	sbiw	r26, 0x20	; 32
    376e:	82 b9       	out	0x02, r24	; 2
    3770:	d2 96       	adiw	r26, 0x32	; 50
    3772:	ed 91       	ld	r30, X+
    3774:	fc 91       	ld	r31, X
    3776:	d3 97       	sbiw	r26, 0x33	; 51
    3778:	80 81       	ld	r24, Z
    377a:	dc 96       	adiw	r26, 0x3c	; 60
    377c:	9c 91       	ld	r25, X
    377e:	dc 97       	sbiw	r26, 0x3c	; 60
    3780:	89 23       	and	r24, r25
    3782:	80 83       	st	Z, r24
    3784:	d2 96       	adiw	r26, 0x32	; 50
    3786:	ed 91       	ld	r30, X+
    3788:	fc 91       	ld	r31, X
    378a:	d3 97       	sbiw	r26, 0x33	; 51
    378c:	80 81       	ld	r24, Z
    378e:	d8 96       	adiw	r26, 0x38	; 56
    3790:	9c 91       	ld	r25, X
    3792:	d8 97       	sbiw	r26, 0x38	; 56
    3794:	89 2b       	or	r24, r25
    3796:	80 83       	st	Z, r24
    3798:	d0 96       	adiw	r26, 0x30	; 48
    379a:	ed 91       	ld	r30, X+
    379c:	fc 91       	ld	r31, X
    379e:	d1 97       	sbiw	r26, 0x31	; 49
    37a0:	80 81       	ld	r24, Z
    37a2:	d7 96       	adiw	r26, 0x37	; 55
    37a4:	9c 91       	ld	r25, X
    37a6:	d7 97       	sbiw	r26, 0x37	; 55
    37a8:	89 2b       	or	r24, r25
    37aa:	80 83       	st	Z, r24
    37ac:	eb 01       	movw	r28, r22
    37ae:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    37b0:	18 16       	cp	r1, r24
    37b2:	19 06       	cpc	r1, r25
    37b4:	bc f5       	brge	.+110    	; 0x3824 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    37b6:	00 23       	and	r16, r16
    37b8:	91 f1       	breq	.+100    	; 0x381e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    37ba:	fe 01       	movw	r30, r28
    37bc:	45 91       	lpm	r20, Z+
    37be:	54 91       	lpm	r21, Z
    37c0:	34 2f       	mov	r19, r20
    37c2:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    37c4:	22 b9       	out	0x02, r18	; 2
    37c6:	d2 96       	adiw	r26, 0x32	; 50
    37c8:	ed 91       	ld	r30, X+
    37ca:	fc 91       	ld	r31, X
    37cc:	d3 97       	sbiw	r26, 0x33	; 51
    37ce:	20 81       	ld	r18, Z
    37d0:	dc 96       	adiw	r26, 0x3c	; 60
    37d2:	4c 91       	ld	r20, X
    37d4:	dc 97       	sbiw	r26, 0x3c	; 60
    37d6:	24 23       	and	r18, r20
    37d8:	20 83       	st	Z, r18
    37da:	d2 96       	adiw	r26, 0x32	; 50
    37dc:	ed 91       	ld	r30, X+
    37de:	fc 91       	ld	r31, X
    37e0:	d3 97       	sbiw	r26, 0x33	; 51
    37e2:	20 81       	ld	r18, Z
    37e4:	d8 96       	adiw	r26, 0x38	; 56
    37e6:	4c 91       	ld	r20, X
    37e8:	d8 97       	sbiw	r26, 0x38	; 56
    37ea:	24 2b       	or	r18, r20
    37ec:	20 83       	st	Z, r18
    37ee:	32 b9       	out	0x02, r19	; 2
    37f0:	d2 96       	adiw	r26, 0x32	; 50
    37f2:	ed 91       	ld	r30, X+
    37f4:	fc 91       	ld	r31, X
    37f6:	d3 97       	sbiw	r26, 0x33	; 51
    37f8:	20 81       	ld	r18, Z
    37fa:	dc 96       	adiw	r26, 0x3c	; 60
    37fc:	3c 91       	ld	r19, X
    37fe:	dc 97       	sbiw	r26, 0x3c	; 60
    3800:	23 23       	and	r18, r19
    3802:	20 83       	st	Z, r18
    3804:	d2 96       	adiw	r26, 0x32	; 50
    3806:	ed 91       	ld	r30, X+
    3808:	fc 91       	ld	r31, X
    380a:	d3 97       	sbiw	r26, 0x33	; 51
    380c:	20 81       	ld	r18, Z
    380e:	d8 96       	adiw	r26, 0x38	; 56
    3810:	3c 91       	ld	r19, X
    3812:	d8 97       	sbiw	r26, 0x38	; 56
    3814:	23 2b       	or	r18, r19
    3816:	20 83       	st	Z, r18
    3818:	22 96       	adiw	r28, 0x02	; 2
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	c9 cf       	rjmp	.-110    	; 0x37b0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    381e:	38 81       	ld	r19, Y
    3820:	29 81       	ldd	r18, Y+1	; 0x01
    3822:	d0 cf       	rjmp	.-96     	; 0x37c4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    3824:	9e 96       	adiw	r26, 0x2e	; 46
    3826:	ed 91       	ld	r30, X+
    3828:	fc 91       	ld	r31, X
    382a:	9f 97       	sbiw	r26, 0x2f	; 47
    382c:	80 81       	ld	r24, Z
    382e:	d6 96       	adiw	r26, 0x36	; 54
    3830:	9c 91       	ld	r25, X
    3832:	89 2b       	or	r24, r25
    3834:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	0f 91       	pop	r16
    383c:	08 95       	ret

0000383e <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:219




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    383e:	2f 92       	push	r2
    3840:	3f 92       	push	r3
    3842:	4f 92       	push	r4
    3844:	5f 92       	push	r5
    3846:	6f 92       	push	r6
    3848:	7f 92       	push	r7
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	00 d0       	rcall	.+0      	; 0x3864 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    3864:	00 d0       	rcall	.+0      	; 0x3866 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    386a:	28 2e       	mov	r2, r24
    386c:	31 2c       	mov	r3, r1
    386e:	c1 01       	movw	r24, r2
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	e0 91 2c 0c 	lds	r30, 0x0C2C	; 0x800c2c <array_pids>
    3878:	f0 91 2d 0c 	lds	r31, 0x0C2D	; 0x800c2d <array_pids+0x1>
    387c:	e8 0f       	add	r30, r24
    387e:	f9 1f       	adc	r31, r25
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	81 01       	movw	r16, r2
    388a:	00 0f       	add	r16, r16
    388c:	11 1f       	adc	r17, r17
    388e:	00 0f       	add	r16, r16
    3890:	11 1f       	adc	r17, r17
    3892:	f8 01       	movw	r30, r16
    3894:	e7 57       	subi	r30, 0x77	; 119
    3896:	f6 4f       	sbci	r31, 0xF6	; 246
    3898:	40 80       	ld	r4, Z
    389a:	51 80       	ldd	r5, Z+1	; 0x01
    389c:	62 80       	ldd	r6, Z+2	; 0x02
    389e:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	a9 01       	movw	r20, r18
    38a6:	c3 01       	movw	r24, r6
    38a8:	b2 01       	movw	r22, r4
    38aa:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    38ae:	87 fd       	sbrc	r24, 7
    38b0:	97 c0       	rjmp	.+302    	; 0x39e0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:220
    38b2:	f8 01       	movw	r30, r16
    38b4:	e3 56       	subi	r30, 0x63	; 99
    38b6:	f6 4f       	sbci	r31, 0xF6	; 246
    38b8:	80 80       	ld	r8, Z
    38ba:	91 80       	ldd	r9, Z+1	; 0x01
    38bc:	a2 80       	ldd	r10, Z+2	; 0x02
    38be:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	a9 01       	movw	r20, r18
    38c6:	c5 01       	movw	r24, r10
    38c8:	b4 01       	movw	r22, r8
    38ca:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    38ce:	87 fd       	sbrc	r24, 7
    38d0:	87 c0       	rjmp	.+270    	; 0x39e0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:220
    38d2:	f8 01       	movw	r30, r16
    38d4:	ef 54       	subi	r30, 0x4F	; 79
    38d6:	f6 4f       	sbci	r31, 0xF6	; 246
    38d8:	c0 80       	ld	r12, Z
    38da:	d1 80       	ldd	r13, Z+1	; 0x01
    38dc:	e2 80       	ldd	r14, Z+2	; 0x02
    38de:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	a9 01       	movw	r20, r18
    38e6:	c7 01       	movw	r24, r14
    38e8:	b6 01       	movw	r22, r12
    38ea:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    38ee:	87 fd       	sbrc	r24, 7
    38f0:	77 c0       	rjmp	.+238    	; 0x39e0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	ed 81       	ldd	r30, Y+5	; 0x05
    38f6:	fe 81       	ldd	r31, Y+6	; 0x06
    38f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    38fa:	33 8d       	ldd	r19, Z+27	; 0x1b
    38fc:	21 30       	cpi	r18, 0x01	; 1
    38fe:	31 05       	cpc	r19, r1
    3900:	09 f0       	breq	.+2      	; 0x3904 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	ed 81       	ldd	r30, Y+5	; 0x05
    3906:	fe 81       	ldd	r31, Y+6	; 0x06
    3908:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    390a:	40 82       	st	Z, r4
    390c:	51 82       	std	Z+1, r5	; 0x01
    390e:	62 82       	std	Z+2, r6	; 0x02
    3910:	73 82       	std	Z+3, r7	; 0x03
    3912:	84 82       	std	Z+4, r8	; 0x04
    3914:	95 82       	std	Z+5, r9	; 0x05
    3916:	a6 82       	std	Z+6, r10	; 0x06
    3918:	b7 82       	std	Z+7, r11	; 0x07
    391a:	c0 86       	std	Z+8, r12	; 0x08
    391c:	d1 86       	std	Z+9, r13	; 0x09
    391e:	e2 86       	std	Z+10, r14	; 0x0a
    3920:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    3922:	66 a5       	ldd	r22, Z+46	; 0x2e
    3924:	77 a5       	ldd	r23, Z+47	; 0x2f
    3926:	80 a9       	ldd	r24, Z+48	; 0x30
    3928:	91 a9       	ldd	r25, Z+49	; 0x31
    392a:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4a e7       	ldi	r20, 0x7A	; 122
    3934:	54 e4       	ldi	r21, 0x44	; 68
    3936:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
    393a:	69 83       	std	Y+1, r22	; 0x01
    393c:	7a 83       	std	Y+2, r23	; 0x02
    393e:	8b 83       	std	Y+3, r24	; 0x03
    3940:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    3942:	ed 81       	ldd	r30, Y+5	; 0x05
    3944:	fe 81       	ldd	r31, Y+6	; 0x06
    3946:	44 86       	std	Z+12, r4	; 0x0c
    3948:	55 86       	std	Z+13, r5	; 0x0d
    394a:	66 86       	std	Z+14, r6	; 0x0e
    394c:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    394e:	9b 01       	movw	r18, r22
    3950:	ac 01       	movw	r20, r24
    3952:	c5 01       	movw	r24, r10
    3954:	b4 01       	movw	r22, r8
    3956:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
    395a:	4b 01       	movw	r8, r22
    395c:	5c 01       	movw	r10, r24
    395e:	ed 81       	ldd	r30, Y+5	; 0x05
    3960:	fe 81       	ldd	r31, Y+6	; 0x06
    3962:	80 8a       	std	Z+16, r8	; 0x10
    3964:	91 8a       	std	Z+17, r9	; 0x11
    3966:	a2 8a       	std	Z+18, r10	; 0x12
    3968:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    396a:	29 81       	ldd	r18, Y+1	; 0x01
    396c:	3a 81       	ldd	r19, Y+2	; 0x02
    396e:	4b 81       	ldd	r20, Y+3	; 0x03
    3970:	5c 81       	ldd	r21, Y+4	; 0x04
    3972:	c7 01       	movw	r24, r14
    3974:	b6 01       	movw	r22, r12
    3976:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
    397a:	6b 01       	movw	r12, r22
    397c:	7c 01       	movw	r14, r24
    397e:	ed 81       	ldd	r30, Y+5	; 0x05
    3980:	fe 81       	ldd	r31, Y+6	; 0x06
    3982:	c4 8a       	std	Z+20, r12	; 0x14
    3984:	d5 8a       	std	Z+21, r13	; 0x15
    3986:	e6 8a       	std	Z+22, r14	; 0x16
    3988:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    398a:	80 8d       	ldd	r24, Z+24	; 0x18
    398c:	91 8d       	ldd	r25, Z+25	; 0x19
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	39 f5       	brne	.+78     	; 0x39e0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    3992:	a3 01       	movw	r20, r6
    3994:	92 01       	movw	r18, r4
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	cb 01       	movw	r24, r22
    399c:	0e 94 b3 a2 	call	0x14566	; 0x14566 <__subsf3>
    39a0:	ed 81       	ldd	r30, Y+5	; 0x05
    39a2:	fe 81       	ldd	r31, Y+6	; 0x06
    39a4:	64 87       	std	Z+12, r22	; 0x0c
    39a6:	75 87       	std	Z+13, r23	; 0x0d
    39a8:	86 87       	std	Z+14, r24	; 0x0e
    39aa:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    39ac:	a5 01       	movw	r20, r10
    39ae:	94 01       	movw	r18, r8
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	cb 01       	movw	r24, r22
    39b6:	0e 94 b3 a2 	call	0x14566	; 0x14566 <__subsf3>
    39ba:	ed 81       	ldd	r30, Y+5	; 0x05
    39bc:	fe 81       	ldd	r31, Y+6	; 0x06
    39be:	60 8b       	std	Z+16, r22	; 0x10
    39c0:	71 8b       	std	Z+17, r23	; 0x11
    39c2:	82 8b       	std	Z+18, r24	; 0x12
    39c4:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    39c6:	a7 01       	movw	r20, r14
    39c8:	96 01       	movw	r18, r12
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	cb 01       	movw	r24, r22
    39d0:	0e 94 b3 a2 	call	0x14566	; 0x14566 <__subsf3>
    39d4:	ed 81       	ldd	r30, Y+5	; 0x05
    39d6:	fe 81       	ldd	r31, Y+6	; 0x06
    39d8:	64 8b       	std	Z+20, r22	; 0x14
    39da:	75 8b       	std	Z+21, r23	; 0x15
    39dc:	86 8b       	std	Z+22, r24	; 0x16
    39de:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:221
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    39e0:	f1 01       	movw	r30, r2
    39e2:	eb 53       	subi	r30, 0x3B	; 59
    39e4:	f6 4f       	sbci	r31, 0xF6	; 246
    39e6:	10 81       	ld	r17, Z
    39e8:	61 2f       	mov	r22, r17
    39ea:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    39ec:	61 15       	cp	r22, r1
    39ee:	71 05       	cpc	r23, r1
    39f0:	f1 f1       	breq	.+124    	; 0x3a6e <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    39f2:	07 2e       	mov	r0, r23
    39f4:	00 0c       	add	r0, r0
    39f6:	88 0b       	sbc	r24, r24
    39f8:	99 0b       	sbc	r25, r25
    39fa:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
    39fe:	6b 01       	movw	r12, r22
    3a00:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    3a02:	ed 81       	ldd	r30, Y+5	; 0x05
    3a04:	fe 81       	ldd	r31, Y+6	; 0x06
    3a06:	66 a5       	ldd	r22, Z+46	; 0x2e
    3a08:	77 a5       	ldd	r23, Z+47	; 0x2f
    3a0a:	80 a9       	ldd	r24, Z+48	; 0x30
    3a0c:	91 a9       	ldd	r25, Z+49	; 0x31
    3a0e:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    3a16:	c7 01       	movw	r24, r14
    3a18:	b6 01       	movw	r22, r12
    3a1a:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
    3a1e:	6b 01       	movw	r12, r22
    3a20:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    3a22:	ac 01       	movw	r20, r24
    3a24:	9b 01       	movw	r18, r22
    3a26:	ed 81       	ldd	r30, Y+5	; 0x05
    3a28:	fe 81       	ldd	r31, Y+6	; 0x06
    3a2a:	60 89       	ldd	r22, Z+16	; 0x10
    3a2c:	71 89       	ldd	r23, Z+17	; 0x11
    3a2e:	82 89       	ldd	r24, Z+18	; 0x12
    3a30:	93 89       	ldd	r25, Z+19	; 0x13
    3a32:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
    3a36:	ed 81       	ldd	r30, Y+5	; 0x05
    3a38:	fe 81       	ldd	r31, Y+6	; 0x06
    3a3a:	60 8b       	std	Z+16, r22	; 0x10
    3a3c:	71 8b       	std	Z+17, r23	; 0x11
    3a3e:	82 8b       	std	Z+18, r24	; 0x12
    3a40:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    3a42:	a7 01       	movw	r20, r14
    3a44:	96 01       	movw	r18, r12
    3a46:	64 89       	ldd	r22, Z+20	; 0x14
    3a48:	75 89       	ldd	r23, Z+21	; 0x15
    3a4a:	86 89       	ldd	r24, Z+22	; 0x16
    3a4c:	97 89       	ldd	r25, Z+23	; 0x17
    3a4e:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
    3a52:	ed 81       	ldd	r30, Y+5	; 0x05
    3a54:	fe 81       	ldd	r31, Y+6	; 0x06
    3a56:	64 8b       	std	Z+20, r22	; 0x14
    3a58:	75 8b       	std	Z+21, r23	; 0x15
    3a5a:	86 8b       	std	Z+22, r24	; 0x16
    3a5c:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    3a5e:	81 2f       	mov	r24, r17
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	a0 e0       	ldi	r26, 0x00	; 0
    3a66:	86 a7       	std	Z+46, r24	; 0x2e
    3a68:	97 a7       	std	Z+47, r25	; 0x2f
    3a6a:	a0 ab       	std	Z+48, r26	; 0x30
    3a6c:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:222
}
    3a6e:	26 96       	adiw	r28, 0x06	; 6
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	1f 91       	pop	r17
    3a80:	0f 91       	pop	r16
    3a82:	ff 90       	pop	r15
    3a84:	ef 90       	pop	r14
    3a86:	df 90       	pop	r13
    3a88:	cf 90       	pop	r12
    3a8a:	bf 90       	pop	r11
    3a8c:	af 90       	pop	r10
    3a8e:	9f 90       	pop	r9
    3a90:	8f 90       	pop	r8
    3a92:	7f 90       	pop	r7
    3a94:	6f 90       	pop	r6
    3a96:	5f 90       	pop	r5
    3a98:	4f 90       	pop	r4
    3a9a:	3f 90       	pop	r3
    3a9c:	2f 90       	pop	r2
    3a9e:	08 95       	ret

00003aa0 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:151
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    3aa0:	fb 01       	movw	r30, r22
    3aa2:	9c 01       	movw	r18, r24
    3aa4:	28 5f       	subi	r18, 0xF8	; 248
    3aa6:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:154
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	5d 91       	ld	r21, X+
    3aac:	cd 01       	movw	r24, r26
    3aae:	41 91       	ld	r20, Z+
    3ab0:	54 13       	cpse	r21, r20
    3ab2:	05 c0       	rjmp	.+10     	; 0x3abe <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:153

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    3ab4:	a2 17       	cp	r26, r18
    3ab6:	b3 07       	cpc	r27, r19
    3ab8:	b9 f7       	brne	.-18     	; 0x3aa8 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:152
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	08 95       	ret
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:156
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    3abe:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:160
      break;
    }
  return ret;
}
    3ac0:	08 95       	ret

00003ac2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    3ac2:	80 33       	cpi	r24, 0x30	; 48
    3ac4:	9c f0       	brlt	.+38     	; 0x3aec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    3ac6:	8a 33       	cpi	r24, 0x3A	; 58
    3ac8:	24 f0       	brlt	.+8      	; 0x3ad2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    3aca:	8f 35       	cpi	r24, 0x5F	; 95
    3acc:	24 f0       	brlt	.+8      	; 0x3ad6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    3ace:	8b 37       	cpi	r24, 0x7B	; 123
    3ad0:	24 f4       	brge	.+8      	; 0x3ada <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    3ad4:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    3ad6:	81 34       	cpi	r24, 0x41	; 65
    3ad8:	4c f0       	brlt	.+18     	; 0x3aec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    3ada:	8b 35       	cpi	r24, 0x5B	; 91
    3adc:	d4 f3       	brlt	.-12     	; 0x3ad2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    3ade:	93 ed       	ldi	r25, 0xD3	; 211
    3ae0:	98 0f       	add	r25, r24
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	92 30       	cpi	r25, 0x02	; 2
    3ae6:	b0 f3       	brcs	.-20     	; 0x3ad4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	08 95       	ret
    3aec:	8b 32       	cpi	r24, 0x2B	; 43
    3aee:	b9 f7       	brne	.-18     	; 0x3ade <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    3af0:	f0 cf       	rjmp	.-32     	; 0x3ad2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00003af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    3af2:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    3af4:	80 85       	ldd	r24, Z+8	; 0x08
    3af6:	81 11       	cpse	r24, r1
    3af8:	0a c0       	rjmp	.+20     	; 0x3b0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    3afa:	a2 81       	ldd	r26, Z+2	; 0x02
    3afc:	b3 81       	ldd	r27, Z+3	; 0x03
    3afe:	cd 01       	movw	r24, r26
    3b00:	01 96       	adiw	r24, 0x01	; 1
    3b02:	93 83       	std	Z+3, r25	; 0x03
    3b04:	82 83       	std	Z+2, r24	; 0x02
    3b06:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    3b08:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    3b0e:	87 81       	ldd	r24, Z+7	; 0x07
    3b10:	08 95       	ret

00003b12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    3b12:	df 92       	push	r13
    3b14:	ef 92       	push	r14
    3b16:	ff 92       	push	r15
    3b18:	0f 93       	push	r16
    3b1a:	1f 93       	push	r17
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
    3b20:	ec 01       	movw	r28, r24
    3b22:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    3b24:	0c 81       	ldd	r16, Y+4	; 0x04
    3b26:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    3b28:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    3b2c:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3b2e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    3b30:	ce 01       	movw	r24, r28
    3b32:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3b36:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    3b38:	d8 16       	cp	r13, r24
    3b3a:	89 f1       	breq	.+98     	; 0x3b9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    3b3c:	81 11       	cpse	r24, r1
    3b3e:	0a c0       	rjmp	.+20     	; 0x3b54 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    3b54:	8c 35       	cpi	r24, 0x5C	; 92
    3b56:	d1 f4       	brne	.+52     	; 0x3b8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    3b58:	ce 01       	movw	r24, r28
    3b5a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    3b5e:	88 23       	and	r24, r24
    3b60:	79 f3       	breq	.-34     	; 0x3b40 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    3b62:	85 37       	cpi	r24, 0x75	; 117
    3b64:	19 f4       	brne	.+6      	; 0x3b6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    3b66:	84 e0       	ldi	r24, 0x04	; 4
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	ec cf       	rjmp	.-40     	; 0x3b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    3b6c:	e8 ee       	ldi	r30, 0xE8	; 232
    3b6e:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    3b70:	90 81       	ld	r25, Z
    3b72:	99 23       	and	r25, r25
    3b74:	51 f0       	breq	.+20     	; 0x3b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    3b76:	89 13       	cpse	r24, r25
    3b78:	06 c0       	rjmp	.+12     	; 0x3b86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    3b7a:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    3b7c:	81 11       	cpse	r24, r1
    3b7e:	05 c0       	rjmp	.+10     	; 0x3b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	df cf       	rjmp	.-66     	; 0x3b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    3b86:	32 96       	adiw	r30, 0x02	; 2
    3b88:	f3 cf       	rjmp	.-26     	; 0x3b70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3b8a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    3b8c:	ec 81       	ldd	r30, Y+4	; 0x04
    3b8e:	fd 81       	ldd	r31, Y+5	; 0x05
    3b90:	9f 01       	movw	r18, r30
    3b92:	2f 5f       	subi	r18, 0xFF	; 255
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	3d 83       	std	Y+5, r19	; 0x05
    3b98:	2c 83       	std	Y+4, r18	; 0x04
    3b9a:	80 83       	st	Z, r24
    3b9c:	c9 cf       	rjmp	.-110    	; 0x3b30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    3b9e:	ec 81       	ldd	r30, Y+4	; 0x04
    3ba0:	fd 81       	ldd	r31, Y+5	; 0x05
    3ba2:	cf 01       	movw	r24, r30
    3ba4:	01 96       	adiw	r24, 0x01	; 1
    3ba6:	9d 83       	std	Y+5, r25	; 0x05
    3ba8:	8c 83       	std	Y+4, r24	; 0x04
    3baa:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    3bac:	f7 01       	movw	r30, r14
    3bae:	11 83       	std	Z+1, r17	; 0x01
    3bb0:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    3bb2:	83 e0       	ldi	r24, 0x03	; 3
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	01 2b       	or	r16, r17
    3bb8:	29 f2       	breq	.-118    	; 0x3b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	c2 cf       	rjmp	.-124    	; 0x3b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00003bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    3bc8:	ce 01       	movw	r24, r28
    3bca:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    3bce:	8b 30       	cpi	r24, 0x0B	; 11
    3bd0:	3c f4       	brge	.+14     	; 0x3be0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    3bd2:	89 30       	cpi	r24, 0x09	; 9
    3bd4:	5c f4       	brge	.+22     	; 0x3bec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    3bd6:	88 23       	and	r24, r24
    3bd8:	e9 f0       	breq	.+58     	; 0x3c14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	1c c0       	rjmp	.+56     	; 0x3c18 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    3be0:	80 32       	cpi	r24, 0x20	; 32
    3be2:	21 f0       	breq	.+8      	; 0x3bec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    3be4:	8f 32       	cpi	r24, 0x2F	; 47
    3be6:	21 f0       	breq	.+8      	; 0x3bf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    3be8:	8d 30       	cpi	r24, 0x0D	; 13
    3bea:	b9 f7       	brne	.-18     	; 0x3bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3bec:	18 86       	std	Y+8, r1	; 0x08
    3bee:	ec cf       	rjmp	.-40     	; 0x3bc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    3bf0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    3bf8:	8a 32       	cpi	r24, 0x2A	; 42
    3bfa:	29 f0       	breq	.+10     	; 0x3c06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    3bfc:	8f 32       	cpi	r24, 0x2F	; 47
    3bfe:	d1 f0       	breq	.+52     	; 0x3c34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    3c00:	82 e0       	ldi	r24, 0x02	; 2
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	09 c0       	rjmp	.+18     	; 0x3c18 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3c06:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    3c08:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    3c10:	81 11       	cpse	r24, r1
    3c12:	06 c0       	rjmp	.+12     	; 0x3c20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    3c20:	8f 32       	cpi	r24, 0x2F	; 47
    3c22:	11 f4       	brne	.+4      	; 0x3c28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    3c24:	11 11       	cpse	r17, r1
    3c26:	e2 cf       	rjmp	.-60     	; 0x3bec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    3c28:	11 e0       	ldi	r17, 0x01	; 1
    3c2a:	8a 32       	cpi	r24, 0x2A	; 42
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    3c2e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    3c30:	18 86       	std	Y+8, r1	; 0x08
    3c32:	eb cf       	rjmp	.-42     	; 0x3c0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    3c34:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    3c36:	ce 01       	movw	r24, r28
    3c38:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    3c3c:	88 23       	and	r24, r24
    3c3e:	51 f3       	breq	.-44     	; 0x3c14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    3c40:	8a 30       	cpi	r24, 0x0A	; 10
    3c42:	c1 f7       	brne	.-16     	; 0x3c34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    3c44:	c1 cf       	rjmp	.-126    	; 0x3bc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00003c46 <get_function_one_wire_last_index_for_menu(unsigned char)>:
_Z41get_function_one_wire_last_index_for_menuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
    3c46:	e1 ed       	ldi	r30, 0xD1	; 209
    3c48:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162
  uint8_t active = 0;
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    3c4c:	91 85       	ldd	r25, Z+9	; 0x09
    3c4e:	91 30       	cpi	r25, 0x01	; 1
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <get_function_one_wire_last_index_for_menu(unsigned char)+0xe>
    3c52:	8f 5f       	subi	r24, 0xFF	; 255
    3c54:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    3c56:	9a e0       	ldi	r25, 0x0A	; 10
    3c58:	e3 31       	cpi	r30, 0x13	; 19
    3c5a:	f9 07       	cpc	r31, r25
    3c5c:	b9 f7       	brne	.-18     	; 0x3c4c <get_function_one_wire_last_index_for_menu(unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    3c5e:	08 95       	ret

00003c60 <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>:
_Z37get_function_rtds_last_index_for_menuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint8_t args1, uint8_t args2)
{
  return MAX_RTDS;
  //return use_rtds;
}
    3c60:	8a e0       	ldi	r24, 0x0A	; 10
    3c62:	08 95       	ret

00003c64 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	fc 01       	movw	r30, r24
    3c6a:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
  menu_slider_data_max = *stop;
    3c6c:	98 81       	ld	r25, Y
    3c6e:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
  menu_slider_data_min = *start;
    3c72:	80 81       	ld	r24, Z
    3c74:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
  menu_slider_data_max_element = max_element;
    3c78:	20 93 c8 08 	sts	0x08C8, r18	; 0x8008c8 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
  ///
  *start = menu_slider_data_current[args];
    3c7c:	a4 2f       	mov	r26, r20
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	ad 53       	subi	r26, 0x3D	; 61
    3c82:	b7 4f       	sbci	r27, 0xF7	; 247
    3c84:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    3c86:	62 2f       	mov	r22, r18
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	49 2f       	mov	r20, r25
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	db 01       	movw	r26, r22
    3c90:	a3 0f       	add	r26, r19
    3c92:	b1 1d       	adc	r27, r1
    3c94:	4a 17       	cp	r20, r26
    3c96:	5b 07       	cpc	r21, r27
    3c98:	6c f0       	brlt	.+26     	; 0x3cb4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
{
  menu_slider_data_max = *stop;
  menu_slider_data_min = *start;
  menu_slider_data_max_element = max_element;
  ///
  *start = menu_slider_data_current[args];
    3c9a:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    *start = menu_slider_data_max - max_element;
  if (*start > menu_slider_data_max)
    3c9c:	80 81       	ld	r24, Z
    3c9e:	98 17       	cp	r25, r24
    3ca0:	08 f4       	brcc	.+2      	; 0x3ca4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
    *start = menu_slider_data_max;
    3ca2:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
  ///
  *stop = *start + max_element;
  if (menu_slider_data_max <= max_element)
    3ca4:	29 17       	cp	r18, r25
    3ca6:	78 f4       	brcc	.+30     	; 0x3cc6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    *start = menu_slider_data_max - max_element;
  if (*start > menu_slider_data_max)
    *start = menu_slider_data_max;
  ///
  *stop = *start + max_element;
    3ca8:	80 81       	ld	r24, Z
    3caa:	28 0f       	add	r18, r24
    3cac:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3954
  if (menu_slider_data_max <= max_element)
    *stop = menu_slider_data_max;
}
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
  menu_slider_data_max = *stop;
  menu_slider_data_min = *start;
  menu_slider_data_max_element = max_element;
  ///
  *start = menu_slider_data_current[args];
  if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    3cb4:	48 1b       	sub	r20, r24
    3cb6:	51 09       	sbc	r21, r1
    3cb8:	64 17       	cp	r22, r20
    3cba:	75 07       	cpc	r23, r21
    3cbc:	74 f7       	brge	.-36     	; 0x3c9a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
    *start = menu_slider_data_max - max_element;
    3cbe:	89 2f       	mov	r24, r25
    3cc0:	82 1b       	sub	r24, r18
    3cc2:	80 83       	st	Z, r24
    3cc4:	eb cf       	rjmp	.-42     	; 0x3c9c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
  if (*start > menu_slider_data_max)
    *start = menu_slider_data_max;
  ///
  *stop = *start + max_element;
  if (menu_slider_data_max <= max_element)
    *stop = menu_slider_data_max;
    3cc6:	98 83       	st	Y, r25
    3cc8:	f2 cf       	rjmp	.-28     	; 0x3cae <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4a>

00003cca <function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z28function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
    menu_slider_data_current[args1]++;
}
///
void function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    3cca:	e8 2f       	mov	r30, r24
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	ed 53       	subi	r30, 0x3D	; 61
    3cd0:	f7 4f       	sbci	r31, 0xF7	; 247
    3cd2:	80 81       	ld	r24, Z
    3cd4:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <menu_slider_data_min>
    3cd8:	98 17       	cp	r25, r24
    3cda:	10 f4       	brcc	.+4      	; 0x3ce0 <function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
    menu_slider_data_current[args1]--;
    3cdc:	81 50       	subi	r24, 0x01	; 1
    3cde:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
}
    3ce0:	08 95       	ret

00003ce2 <function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z28function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929
  menu_slider_data_current[args1] = 0;
}
///
void function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    3ce2:	e8 2f       	mov	r30, r24
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	ed 53       	subi	r30, 0x3D	; 61
    3ce8:	f7 4f       	sbci	r31, 0xF7	; 247
    3cea:	80 81       	ld	r24, Z
    3cec:	20 91 ca 08 	lds	r18, 0x08CA	; 0x8008ca <menu_slider_data_max>
    3cf0:	90 91 c8 08 	lds	r25, 0x08C8	; 0x8008c8 <menu_slider_data_max_element>
    3cf4:	29 1b       	sub	r18, r25
    3cf6:	33 0b       	sbc	r19, r19
    3cf8:	82 17       	cp	r24, r18
    3cfa:	13 06       	cpc	r1, r19
    3cfc:	14 f4       	brge	.+4      	; 0x3d02 <function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3930
    menu_slider_data_current[args1]++;
    3cfe:	8f 5f       	subi	r24, 0xFF	; 255
    3d00:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
}
    3d02:	08 95       	ret

00003d04 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    3d04:	83 30       	cpi	r24, 0x03	; 3
    3d06:	41 f4       	brne	.+16     	; 0x3d18 <a2d_complete(unsigned char, unsigned int)+0x14>
    3d08:	70 93 19 0a 	sts	0x0A19, r23	; 0x800a19 <proud+0x1>
    3d0c:	60 93 18 0a 	sts	0x0A18, r22	; 0x800a18 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	80 93 e4 0a 	sts	0x0AE4, r24	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2900
}
    3d16:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    3d18:	86 30       	cpi	r24, 0x06	; 6
    3d1a:	29 f4       	brne	.+10     	; 0x3d26 <a2d_complete(unsigned char, unsigned int)+0x22>
    3d1c:	70 93 1f 0a 	sts	0x0A1F, r23	; 0x800a1f <tritri+0x1>
    3d20:	60 93 1e 0a 	sts	0x0A1E, r22	; 0x800a1e <tritri>
    3d24:	f5 cf       	rjmp	.-22     	; 0x3d10 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  if (channel == A_PETV) petnula = data;
    3d26:	85 30       	cpi	r24, 0x05	; 5
    3d28:	29 f4       	brne	.+10     	; 0x3d34 <a2d_complete(unsigned char, unsigned int)+0x30>
    3d2a:	70 93 1d 0a 	sts	0x0A1D, r23	; 0x800a1d <petnula+0x1>
    3d2e:	60 93 1c 0a 	sts	0x0A1C, r22	; 0x800a1c <petnula>
    3d32:	ee cf       	rjmp	.-36     	; 0x3d10 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
  if (channel == A_DVANACTV) dvanact = data;
    3d34:	84 30       	cpi	r24, 0x04	; 4
    3d36:	29 f4       	brne	.+10     	; 0x3d42 <a2d_complete(unsigned char, unsigned int)+0x3e>
    3d38:	70 93 1b 0a 	sts	0x0A1B, r23	; 0x800a1b <dvanact+0x1>
    3d3c:	60 93 1a 0a 	sts	0x0A1A, r22	; 0x800a1a <dvanact>
    3d40:	e7 cf       	rjmp	.-50     	; 0x3d10 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
  if (channel == A_LIGHT) light_curr = data;
    3d42:	87 30       	cpi	r24, 0x07	; 7
    3d44:	29 f7       	brne	.-54     	; 0x3d10 <a2d_complete(unsigned char, unsigned int)+0xc>
    3d46:	70 93 e3 0a 	sts	0x0AE3, r23	; 0x800ae3 <light_curr+0x1>
    3d4a:	60 93 e2 0a 	sts	0x0AE2, r22	; 0x800ae2 <light_curr>
    3d4e:	e0 cf       	rjmp	.-64     	; 0x3d10 <a2d_complete(unsigned char, unsigned int)+0xc>

00003d50 <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1644
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    3d50:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <change_term_mode>
    3d54:	81 30       	cpi	r24, 0x01	; 1
    3d56:	19 f4       	brne	.+6      	; 0x3d5e <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
  {
    change_term_mode = 0;
    3d58:	10 92 79 08 	sts	0x0879, r1	; 0x800879 <change_term_mode>
    3d5c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1649
    return 1;
  }
  return 0;
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1650
}
    3d60:	08 95       	ret

00003d62 <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    3d62:	80 91 e5 0a 	lds	r24, 0x0AE5	; 0x800ae5 <menu_redraw05s>
    3d66:	81 30       	cpi	r24, 0x01	; 1
    3d68:	19 f4       	brne	.+6      	; 0x3d70 <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
  {
    menu_redraw05s = 0;
    3d6a:	10 92 e5 0a 	sts	0x0AE5, r1	; 0x800ae5 <menu_redraw05s>
    3d6e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1639
    return 1;
  }
  return 0;
    3d70:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1640
}
    3d72:	08 95       	ret

00003d74 <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1599
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    3d74:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1600
}
    3d78:	08 95       	ret

00003d7a <get_function_keyboard_alfa_max_keys(unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint8_t idx)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    3d7a:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <dialog_set_string_keyboard_type>
    3d7e:	82 30       	cpi	r24, 0x02	; 2
    3d80:	18 f0       	brcs	.+6      	; 0x3d88 <get_function_keyboard_alfa_max_keys(unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1593
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    3d82:	82 30       	cpi	r24, 0x02	; 2
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <get_function_keyboard_alfa_max_keys(unsigned char)+0x12>
    3d86:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1590
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint8_t idx)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    return KEYBOARD_SIZE_CHAR_UPPER;
    3d88:	8a e1       	ldi	r24, 0x1A	; 26
    3d8a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1594
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
    3d8c:	8b e1       	ldi	r24, 0x1B	; 27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1595
}
    3d8e:	08 95       	ret

00003d90 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1561

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    3d90:	90 91 78 08 	lds	r25, 0x0878	; 0x800878 <dialog_set_string_keyboard_type>
    3d94:	91 11       	cpse	r25, r1
    3d96:	0a c0       	rjmp	.+20     	; 0x3dac <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1562
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    3d98:	e8 2f       	mov	r30, r24
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	e2 5a       	subi	r30, 0xA2	; 162
    3d9e:	fa 4d       	sbci	r31, 0xDA	; 218
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1566
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    3da0:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1567
  line1[0] = znak;
    3da2:	da 01       	movw	r26, r20
    3da4:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1568
  line2[0] = 0;
    3da6:	f9 01       	movw	r30, r18
    3da8:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1569
}
    3daa:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1563
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    3dac:	91 30       	cpi	r25, 0x01	; 1
    3dae:	29 f4       	brne	.+10     	; 0x3dba <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1564
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    3db0:	e8 2f       	mov	r30, r24
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	ec 5b       	subi	r30, 0xBC	; 188
    3db6:	fa 4d       	sbci	r31, 0xDA	; 218
    3db8:	f3 cf       	rjmp	.-26     	; 0x3da0 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1565
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    3dba:	92 30       	cpi	r25, 0x02	; 2
    3dbc:	91 f7       	brne	.-28     	; 0x3da2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1566
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    3dbe:	e8 2f       	mov	r30, r24
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	e7 5d       	subi	r30, 0xD7	; 215
    3dc4:	fa 4d       	sbci	r31, 0xDA	; 218
    3dc6:	ec cf       	rjmp	.-40     	; 0x3da0 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>

00003dc8 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
  display_element_set_string_add_char(znak);
}
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    3dc8:	8a 30       	cpi	r24, 0x0A	; 10
    3dca:	31 f0       	breq	.+12     	; 0x3dd8 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1552
  if (args1 == 10) znak = '.';
  display_element_set_string_add_char(znak);
}
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    3dcc:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
  if (args1 == 10) line1[0] = '.';
    3dce:	fa 01       	movw	r30, r20
    3dd0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
  line2[0] = 0;
    3dd2:	f9 01       	movw	r30, r18
    3dd4:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1555
}
    3dd6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
  display_element_set_string_add_char(znak);
}
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    3dd8:	8e e2       	ldi	r24, 0x2E	; 46
    3dda:	f9 cf       	rjmp	.-14     	; 0x3dce <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x6>

00003ddc <get_function_keyboard_number_max_keys(unsigned char)>:
_Z37get_function_keyboard_number_max_keysh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
////////////////////////////////////////////////////////////

uint8_t get_function_keyboard_number_max_keys(uint8_t idx)
{
  return 11;
}
    3ddc:	8b e0       	ldi	r24, 0x0B	; 11
    3dde:	08 95       	ret

00003de0 <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1525
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	08 95       	ret

00003de4 <display_element_dialog_set_variable_plus()>:
_Z40display_element_dialog_set_variable_plusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1406
    //menu_redraw_dialog_now = 1;
  }
}
void display_element_dialog_set_variable_plus(void)
{
  if ((menu_dialog_set_variable_now + menu_dialog_set_variable_step) <= menu_dialog_set_variable_max)
    3de4:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <menu_dialog_set_variable_step>
    3de8:	20 91 c1 08 	lds	r18, 0x08C1	; 0x8008c1 <menu_dialog_set_variable_now>
    3dec:	30 91 c2 08 	lds	r19, 0x08C2	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    3df0:	82 0f       	add	r24, r18
    3df2:	93 2f       	mov	r25, r19
    3df4:	91 1d       	adc	r25, r1
    3df6:	20 91 74 08 	lds	r18, 0x0874	; 0x800874 <menu_dialog_set_variable_max>
    3dfa:	30 91 75 08 	lds	r19, 0x0875	; 0x800875 <menu_dialog_set_variable_max+0x1>
    3dfe:	28 17       	cp	r18, r24
    3e00:	39 07       	cpc	r19, r25
    3e02:	24 f0       	brlt	.+8      	; 0x3e0c <display_element_dialog_set_variable_plus()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
    3e04:	90 93 c2 08 	sts	0x08C2, r25	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    3e08:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1411
    //menu_redraw_dialog_now = 1;
  }
}
    3e0c:	08 95       	ret

00003e0e <display_element_dialog_set_variable_minus()>:
_Z41display_element_dialog_set_variable_minusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
  return menu_dialog_set_variable_now;
}

void display_element_dialog_set_variable_minus(void)
{
  if (menu_dialog_set_variable_now - menu_dialog_set_variable_step >= menu_dialog_set_variable_min)
    3e0e:	20 91 73 08 	lds	r18, 0x0873	; 0x800873 <menu_dialog_set_variable_step>
    3e12:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <menu_dialog_set_variable_now>
    3e16:	90 91 c2 08 	lds	r25, 0x08C2	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    3e1a:	82 1b       	sub	r24, r18
    3e1c:	91 09       	sbc	r25, r1
    3e1e:	20 91 76 08 	lds	r18, 0x0876	; 0x800876 <menu_dialog_set_variable_min>
    3e22:	30 91 77 08 	lds	r19, 0x0877	; 0x800877 <menu_dialog_set_variable_min+0x1>
    3e26:	82 17       	cp	r24, r18
    3e28:	93 07       	cpc	r25, r19
    3e2a:	24 f0       	brlt	.+8      	; 0x3e34 <display_element_dialog_set_variable_minus()+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1400
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
    3e2c:	90 93 c2 08 	sts	0x08C2, r25	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    3e30:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1403
    //menu_redraw_dialog_now = 1;
  }
}
    3e34:	08 95       	ret

00003e36 <MenuHistoryGetMenu()>:
_Z18MenuHistoryGetMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(void)
{
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    3e3a:	20 91 84 08 	lds	r18, 0x0884	; 0x800884 <MenuHistoryIndex>
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
}
///
Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	67 e4       	ldi	r22, 0x47	; 71
    3e44:	75 e0       	ldi	r23, 0x05	; 5
    3e46:	ae ef       	ldi	r26, 0xFE	; 254
    3e48:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    3e4a:	e9 01       	movw	r28, r18
    3e4c:	c6 58       	subi	r28, 0x86	; 134
    3e4e:	d7 4f       	sbci	r29, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
}
///
Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    3e50:	fb 01       	movw	r30, r22
    3e52:	84 91       	lpm	r24, Z
    3e54:	48 17       	cp	r20, r24
    3e56:	70 f4       	brcc	.+28     	; 0x3e74 <MenuHistoryGetMenu()+0x3e>
    3e58:	4a 9f       	mul	r20, r26
    3e5a:	c0 01       	movw	r24, r0
    3e5c:	4b 9f       	mul	r20, r27
    3e5e:	90 0d       	add	r25, r0
    3e60:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    3e62:	fc 01       	movw	r30, r24
    3e64:	ee 5c       	subi	r30, 0xCE	; 206
    3e66:	f8 4f       	sbci	r31, 0xF8	; 248
    3e68:	e4 91       	lpm	r30, Z
    3e6a:	58 81       	ld	r21, Y
    3e6c:	5e 17       	cp	r21, r30
    3e6e:	11 f1       	breq	.+68     	; 0x3eb4 <MenuHistoryGetMenu()+0x7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
}
///
Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    3e70:	4f 5f       	subi	r20, 0xFF	; 255
    3e72:	ee cf       	rjmp	.-36     	; 0x3e50 <MenuHistoryGetMenu()+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	68 e4       	ldi	r22, 0x48	; 72
    3e78:	75 e0       	ldi	r23, 0x05	; 5
    3e7a:	ae ef       	ldi	r26, 0xFE	; 254
    3e7c:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    3e7e:	26 58       	subi	r18, 0x86	; 134
    3e80:	37 4f       	sbci	r19, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    3e82:	fb 01       	movw	r30, r22
    3e84:	84 91       	lpm	r24, Z
    3e86:	48 17       	cp	r20, r24
    3e88:	a0 f4       	brcc	.+40     	; 0x3eb2 <MenuHistoryGetMenu()+0x7c>
    3e8a:	4a 9f       	mul	r20, r26
    3e8c:	c0 01       	movw	r24, r0
    3e8e:	4b 9f       	mul	r20, r27
    3e90:	90 0d       	add	r25, r0
    3e92:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    3e94:	fc 01       	movw	r30, r24
    3e96:	e2 5e       	subi	r30, 0xE2	; 226
    3e98:	f4 4e       	sbci	r31, 0xE4	; 228
    3e9a:	e4 91       	lpm	r30, Z
    3e9c:	e9 01       	movw	r28, r18
    3e9e:	58 81       	ld	r21, Y
    3ea0:	5e 13       	cpse	r21, r30
    3ea2:	05 c0       	rjmp	.+10     	; 0x3eae <MenuHistoryGetMenu()+0x78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    3ea4:	8b 5c       	subi	r24, 0xCB	; 203
    3ea6:	96 4e       	sbci	r25, 0xE6	; 230
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1376
    {
      return menus;
    }
  }

}
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    3eae:	4f 5f       	subi	r20, 0xFF	; 255
    3eb0:	e8 cf       	rjmp	.-48     	; 0x3e82 <MenuHistoryGetMenu()+0x4c>
    3eb2:	fa cf       	rjmp	.-12     	; 0x3ea8 <MenuHistoryGetMenu()+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
Menu1 *MenuHistoryGetMenu(void)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    3eb4:	87 5b       	subi	r24, 0xB7	; 183
    3eb6:	9a 4f       	sbci	r25, 0xFA	; 250
    3eb8:	f7 cf       	rjmp	.-18     	; 0x3ea8 <MenuHistoryGetMenu()+0x72>

00003eba <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:913




bool enable_redraw(uint8_t mask, uint8_t data)
{
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    3ebe:	e1 e0       	ldi	r30, 0x01	; 1
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	af 01       	movw	r20, r30
    3ec4:	02 2e       	mov	r0, r18
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <enable_redraw(unsigned char, unsigned char)+0x10>
    3ec8:	44 0f       	add	r20, r20
    3eca:	0a 94       	dec	r0
    3ecc:	ea f7       	brpl	.-6      	; 0x3ec8 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:918
    if ( (mask & v) != 0 )
    3ece:	98 2f       	mov	r25, r24
    3ed0:	94 23       	and	r25, r20
    3ed2:	11 f0       	breq	.+4      	; 0x3ed8 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:919
      if ( (data & v) != 0)
    3ed4:	46 23       	and	r20, r22
    3ed6:	39 f4       	brne	.+14     	; 0x3ee6 <enable_redraw(unsigned char, unsigned char)+0x2c>
    3ed8:	2f 5f       	subi	r18, 0xFF	; 255
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:915


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    3edc:	28 30       	cpi	r18, 0x08	; 8
    3ede:	31 05       	cpc	r19, r1
    3ee0:	81 f7       	brne	.-32     	; 0x3ec2 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:921
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:926
        break;
      }
  }
  return ret;
}
    3ee8:	08 95       	ret

00003eea <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:900

void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2) {
  return 0;
}
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	08 95       	ret

00003eee <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:896





void nullfce(void) {};
    3eee:	08 95       	ret

00003ef0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    3ef0:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    3ef2:	86 81       	ldd	r24, Z+6	; 0x06
    3ef4:	97 81       	ldd	r25, Z+7	; 0x07
    3ef6:	68 0f       	add	r22, r24
    3ef8:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    3efa:	24 81       	ldd	r18, Z+4	; 0x04
    3efc:	35 81       	ldd	r19, Z+5	; 0x05
    3efe:	26 17       	cp	r18, r22
    3f00:	37 07       	cpc	r19, r23
    3f02:	38 f0       	brcs	.+14     	; 0x3f12 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    3f04:	22 81       	ldd	r18, Z+2	; 0x02
    3f06:	33 81       	ldd	r19, Z+3	; 0x03
    3f08:	82 0f       	add	r24, r18
    3f0a:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    3f0c:	77 83       	std	Z+7, r23	; 0x07
    3f0e:	66 83       	std	Z+6, r22	; 0x06
    3f10:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    3f16:	08 95       	ret

00003f18 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    3f1e:	61 e0       	ldi	r22, 0x01	; 1
    3f20:	8c 81       	ldd	r24, Y+4	; 0x04
    3f22:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2a:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    3f2e:	61 e0       	ldi	r22, 0x01	; 1
    3f30:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    3f36:	0c 94 68 78 	jmp	0xf0d0	; 0xf0d0 <pinMode>

00003f3a <get_function_budik_text_state(unsigned char, unsigned char, char*)>:
_Z29get_function_budik_text_statehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, char *text)
{
    3f3a:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
  strcpy(text, "Zapnuto 06:45");
    3f3c:	63 ef       	ldi	r22, 0xF3	; 243
    3f3e:	72 e0       	ldi	r23, 0x02	; 2
    3f40:	0c 94 ef a4 	jmp	0x149de	; 0x149de <strcpy>

00003f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.20():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	01 f1       	breq	.+64     	; 0x3f90 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x4c>
    3f50:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    3f52:	fc 01       	movw	r30, r24
    3f54:	c0 81       	ld	r28, Z
    3f56:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    3f58:	20 97       	sbiw	r28, 0x00	; 0
    3f5a:	d1 f0       	breq	.+52     	; 0x3f90 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    3f5c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f5e:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    3f60:	01 15       	cp	r16, r1
    3f62:	11 05       	cpc	r17, r1
    3f64:	19 f0       	breq	.+6      	; 0x3f6c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x28>
    3f66:	61 15       	cp	r22, r1
    3f68:	71 05       	cpc	r23, r1
    3f6a:	49 f4       	brne	.+18     	; 0x3f7e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x3a>
    3f6c:	06 17       	cp	r16, r22
    3f6e:	17 07       	cpc	r17, r23
    3f70:	59 f4       	brne	.+22     	; 0x3f88 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.20():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    3f72:	ce 01       	movw	r24, r28
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    3f7e:	c8 01       	movw	r24, r16
    3f80:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    3f84:	89 2b       	or	r24, r25
    3f86:	a9 f3       	breq	.-22     	; 0x3f72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.20():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    3f88:	0e 80       	ldd	r0, Y+6	; 0x06
    3f8a:	df 81       	ldd	r29, Y+7	; 0x07
    3f8c:	c0 2d       	mov	r28, r0
    3f8e:	e4 cf       	rjmp	.-56     	; 0x3f58 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    3f90:	d0 e0       	ldi	r29, 0x00	; 0
    3f92:	c0 e0       	ldi	r28, 0x00	; 0
    3f94:	ee cf       	rjmp	.-36     	; 0x3f72 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]+0x2e>

00003f96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    3f96:	4f 92       	push	r4
    3f98:	5f 92       	push	r5
    3f9a:	6f 92       	push	r6
    3f9c:	7f 92       	push	r7
    3f9e:	8f 92       	push	r8
    3fa0:	9f 92       	push	r9
    3fa2:	af 92       	push	r10
    3fa4:	bf 92       	push	r11
    3fa6:	df 92       	push	r13
    3fa8:	ef 92       	push	r14
    3faa:	ff 92       	push	r15
    3fac:	0f 93       	push	r16
    3fae:	1f 93       	push	r17
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	c4 54       	subi	r28, 0x44	; 68
    3fba:	d1 09       	sbc	r29, r1
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	8c 01       	movw	r16, r24
    3fc8:	4a 01       	movw	r8, r20
    3fca:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    3fcc:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    3fd4:	b0 c0       	rjmp	.+352    	; 0x4136 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    3fd6:	c8 01       	movw	r24, r16
    3fd8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    3fdc:	75 01       	movw	r14, r10
    3fde:	8b 35       	cpi	r24, 0x5B	; 91
    3fe0:	49 f1       	breq	.+82     	; 0x4034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    3fe2:	8b 37       	cpi	r24, 0x7B	; 123
    3fe4:	09 f4       	brne	.+2      	; 0x3fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    3fe6:	d2 c0       	rjmp	.+420    	; 0x418c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    3fe8:	c8 01       	movw	r24, r16
    3fea:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    3fee:	87 32       	cpi	r24, 0x27	; 39
    3ff0:	09 f4       	brne	.+2      	; 0x3ff4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    3ff2:	eb c1       	rjmp	.+982    	; 0x43ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    3ff4:	82 32       	cpi	r24, 0x22	; 34
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    3ff8:	e8 c1       	rjmp	.+976    	; 0x43ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    3ffa:	c8 01       	movw	r24, r16
    3ffc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4000:	b8 2e       	mov	r11, r24
    4002:	ce 01       	movw	r24, r28
    4004:	01 96       	adiw	r24, 0x01	; 1
    4006:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    4008:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    400a:	8b 2d       	mov	r24, r11
    400c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4010:	88 23       	and	r24, r24
    4012:	09 f4       	brne	.+2      	; 0x4016 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    4014:	f5 c1       	rjmp	.+1002   	; 0x4400 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    4016:	bf e3       	ldi	r27, 0x3F	; 63
    4018:	db 16       	cp	r13, r27
    401a:	09 f4       	brne	.+2      	; 0x401e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    401c:	f1 c1       	rjmp	.+994    	; 0x4400 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    401e:	f8 01       	movw	r30, r16
    4020:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    4022:	d3 94       	inc	r13
    4024:	d4 01       	movw	r26, r8
    4026:	bd 92       	st	X+, r11
    4028:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    402a:	c8 01       	movw	r24, r16
    402c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4030:	b8 2e       	mov	r11, r24
    4032:	eb cf       	rjmp	.-42     	; 0x400a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4034:	d8 01       	movw	r26, r16
    4036:	16 96       	adiw	r26, 0x06	; 6
    4038:	8c 91       	ld	r24, X
    403a:	88 23       	and	r24, r24
    403c:	09 f4       	brne	.+2      	; 0x4040 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    403e:	c1 c1       	rjmp	.+898    	; 0x43c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    4040:	a1 14       	cp	r10, r1
    4042:	b1 04       	cpc	r11, r1
    4044:	09 f4       	brne	.+2      	; 0x4048 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    4046:	2d c1       	rjmp	.+602    	; 0x42a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    4048:	88 e0       	ldi	r24, 0x08	; 8
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	f5 01       	movw	r30, r10
    404e:	91 83       	std	Z+1, r25	; 0x01
    4050:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    4052:	13 82       	std	Z+3, r1	; 0x03
    4054:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    4056:	15 82       	std	Z+5, r1	; 0x05
    4058:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    405a:	c8 01       	movw	r24, r16
    405c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4060:	8b 35       	cpi	r24, 0x5B	; 91
    4062:	09 f0       	breq	.+2      	; 0x4066 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    4064:	ef c0       	rjmp	.+478    	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4066:	d8 01       	movw	r26, r16
    4068:	18 96       	adiw	r26, 0x08	; 8
    406a:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    406c:	c8 01       	movw	r24, r16
    406e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4072:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    4074:	89 2b       	or	r24, r25
    4076:	09 f0       	breq	.+2      	; 0x407a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    4078:	5d c0       	rjmp	.+186    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    407a:	c8 01       	movw	r24, r16
    407c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4080:	8d 35       	cpi	r24, 0x5D	; 93
    4082:	09 f4       	brne	.+2      	; 0x4086 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    4084:	55 c0       	rjmp	.+170    	; 0x4130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    4086:	8c e0       	ldi	r24, 0x0C	; 12
    4088:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    408a:	d4 01       	movw	r26, r8
    408c:	ed 91       	ld	r30, X+
    408e:	fc 91       	ld	r31, X
    4090:	01 90       	ld	r0, Z+
    4092:	f0 81       	ld	r31, Z
    4094:	e0 2d       	mov	r30, r0
    4096:	6c e0       	ldi	r22, 0x0C	; 12
    4098:	70 e0       	ldi	r23, 0x00	; 0
    409a:	c4 01       	movw	r24, r8
    409c:	19 95       	eicall
    409e:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    40a4:	64 c0       	rjmp	.+200    	; 0x416e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    40a6:	dc 01       	movw	r26, r24
    40a8:	2d 2d       	mov	r18, r13
    40aa:	1d 92       	st	X+, r1
    40ac:	2a 95       	dec	r18
    40ae:	e9 f7       	brne	.-6      	; 0x40aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    40b0:	11 82       	std	Z+1, r1	; 0x01
    40b2:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    40b4:	d7 01       	movw	r26, r14
    40b6:	14 96       	adiw	r26, 0x04	; 4
    40b8:	8d 91       	ld	r24, X+
    40ba:	9c 91       	ld	r25, X
    40bc:	15 97       	sbiw	r26, 0x05	; 5
    40be:	00 97       	sbiw	r24, 0x00	; 0
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    40c2:	50 c0       	rjmp	.+160    	; 0x4164 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    40c4:	91 87       	std	Z+9, r25	; 0x09
    40c6:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    40c8:	14 96       	adiw	r26, 0x04	; 4
    40ca:	8d 91       	ld	r24, X+
    40cc:	9c 91       	ld	r25, X
    40ce:	dc 01       	movw	r26, r24
    40d0:	17 96       	adiw	r26, 0x07	; 7
    40d2:	fc 93       	st	X, r31
    40d4:	ee 93       	st	-X, r30
    40d6:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    40d8:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    40da:	15 96       	adiw	r26, 0x05	; 5
    40dc:	fc 93       	st	X, r31
    40de:	ee 93       	st	-X, r30
    40e0:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    40e2:	98 2d       	mov	r25, r8
    40e4:	89 2d       	mov	r24, r9
    40e6:	49 2e       	mov	r4, r25
    40e8:	58 2e       	mov	r5, r24
    40ea:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    40ec:	ef 2b       	or	r30, r31
    40ee:	09 f4       	brne	.+2      	; 0x40f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    40f0:	d8 c0       	rjmp	.+432    	; 0x42a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    40f2:	f8 01       	movw	r30, r16
    40f4:	86 81       	ldd	r24, Z+6	; 0x06
    40f6:	81 50       	subi	r24, 0x01	; 1
    40f8:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    40fa:	b3 01       	movw	r22, r6
    40fc:	a2 01       	movw	r20, r4
    40fe:	c8 01       	movw	r24, r16
    4100:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    4104:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    4106:	d8 01       	movw	r26, r16
    4108:	16 96       	adiw	r26, 0x06	; 6
    410a:	8c 91       	ld	r24, X
    410c:	16 97       	sbiw	r26, 0x06	; 6
    410e:	8f 5f       	subi	r24, 0xFF	; 255
    4110:	16 96       	adiw	r26, 0x06	; 6
    4112:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    4114:	a1 14       	cp	r10, r1
    4116:	b1 04       	cpc	r11, r1
    4118:	69 f4       	brne	.+26     	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    411a:	c8 01       	movw	r24, r16
    411c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4120:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    4122:	89 2b       	or	r24, r25
    4124:	39 f4       	brne	.+14     	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4126:	c8 01       	movw	r24, r16
    4128:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    412c:	8d 35       	cpi	r24, 0x5D	; 93
    412e:	21 f5       	brne	.+72     	; 0x4178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4130:	f8 01       	movw	r30, r16
    4132:	10 86       	std	Z+8, r1	; 0x08
    4134:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    4136:	cc 5b       	subi	r28, 0xBC	; 188
    4138:	df 4f       	sbci	r29, 0xFF	; 255
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	f8 94       	cli
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	cd bf       	out	0x3d, r28	; 61
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	ff 90       	pop	r15
    414e:	ef 90       	pop	r14
    4150:	df 90       	pop	r13
    4152:	bf 90       	pop	r11
    4154:	af 90       	pop	r10
    4156:	9f 90       	pop	r9
    4158:	8f 90       	pop	r8
    415a:	7f 90       	pop	r7
    415c:	6f 90       	pop	r6
    415e:	5f 90       	pop	r5
    4160:	4f 90       	pop	r4
    4162:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    4164:	13 96       	adiw	r26, 0x03	; 3
    4166:	fc 93       	st	X, r31
    4168:	ee 93       	st	-X, r30
    416a:	12 97       	sbiw	r26, 0x02	; 2
    416c:	b6 cf       	rjmp	.-148    	; 0x40da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	e0 e0       	ldi	r30, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	b7 cf       	rjmp	.-146    	; 0x40e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4178:	c8 01       	movw	r24, r16
    417a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    417e:	8c 32       	cpi	r24, 0x2C	; 44
    4180:	09 f0       	breq	.+2      	; 0x4184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    4182:	60 c0       	rjmp	.+192    	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4184:	d8 01       	movw	r26, r16
    4186:	18 96       	adiw	r26, 0x08	; 8
    4188:	1c 92       	st	X, r1
    418a:	7f cf       	rjmp	.-258    	; 0x408a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    418c:	f8 01       	movw	r30, r16
    418e:	86 81       	ldd	r24, Z+6	; 0x06
    4190:	88 23       	and	r24, r24
    4192:	09 f4       	brne	.+2      	; 0x4196 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    4194:	16 c1       	rjmp	.+556    	; 0x43c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    4196:	a1 14       	cp	r10, r1
    4198:	b1 04       	cpc	r11, r1
    419a:	09 f4       	brne	.+2      	; 0x419e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    419c:	82 c0       	rjmp	.+260    	; 0x42a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    419e:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    41a0:	89 e0       	ldi	r24, 0x09	; 9
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	d5 01       	movw	r26, r10
    41a6:	11 96       	adiw	r26, 0x01	; 1
    41a8:	9c 93       	st	X, r25
    41aa:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    41ac:	13 96       	adiw	r26, 0x03	; 3
    41ae:	1c 92       	st	X, r1
    41b0:	1e 92       	st	-X, r1
    41b2:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    41b4:	15 96       	adiw	r26, 0x05	; 5
    41b6:	1c 92       	st	X, r1
    41b8:	1e 92       	st	-X, r1
    41ba:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    41bc:	45 01       	movw	r8, r10
    41be:	b2 e0       	ldi	r27, 0x02	; 2
    41c0:	8b 0e       	add	r8, r27
    41c2:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    41c4:	c8 01       	movw	r24, r16
    41c6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    41ca:	8b 37       	cpi	r24, 0x7B	; 123
    41cc:	d9 f5       	brne	.+118    	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    41ce:	f8 01       	movw	r30, r16
    41d0:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    41d2:	c8 01       	movw	r24, r16
    41d4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    41d8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    41da:	89 2b       	or	r24, r25
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    41de:	aa cf       	rjmp	.-172    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    41e0:	c8 01       	movw	r24, r16
    41e2:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    41e6:	8d 37       	cpi	r24, 0x7D	; 125
    41e8:	09 f4       	brne	.+2      	; 0x41ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    41ea:	9c c0       	rjmp	.+312    	; 0x4324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    41ec:	bc e0       	ldi	r27, 0x0C	; 12
    41ee:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    41f0:	c8 01       	movw	r24, r16
    41f2:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    41f6:	87 32       	cpi	r24, 0x27	; 39
    41f8:	79 f0       	breq	.+30     	; 0x4218 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    41fa:	82 32       	cpi	r24, 0x22	; 34
    41fc:	69 f0       	breq	.+26     	; 0x4218 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    41fe:	f8 01       	movw	r30, r16
    4200:	a4 80       	ldd	r10, Z+4	; 0x04
    4202:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    4204:	c8 01       	movw	r24, r16
    4206:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    420a:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    420c:	81 11       	cpse	r24, r1
    420e:	1e c0       	rjmp	.+60     	; 0x424c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    4210:	aa 24       	eor	r10, r10
    4212:	a3 94       	inc	r10
    4214:	b1 2c       	mov	r11, r1
    4216:	8e cf       	rjmp	.-228    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    4218:	be 01       	movw	r22, r28
    421a:	6f 5f       	subi	r22, 0xFF	; 255
    421c:	7f 4f       	sbci	r23, 0xFF	; 255
    421e:	c8 01       	movw	r24, r16
    4220:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    4224:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    4226:	89 2b       	or	r24, r25
    4228:	09 f0       	breq	.+2      	; 0x422c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    422a:	84 cf       	rjmp	.-248    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    422c:	c8 01       	movw	r24, r16
    422e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4232:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    4234:	89 2b       	or	r24, r25
    4236:	09 f0       	breq	.+2      	; 0x423a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    4238:	7d cf       	rjmp	.-262    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    423a:	c8 01       	movw	r24, r16
    423c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4240:	8a 33       	cpi	r24, 0x3A	; 58
    4242:	99 f1       	breq	.+102    	; 0x42aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    4244:	72 e0       	ldi	r23, 0x02	; 2
    4246:	a7 2e       	mov	r10, r23
    4248:	b1 2c       	mov	r11, r1
    424a:	74 cf       	rjmp	.-280    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    424c:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4250:	88 23       	and	r24, r24
    4252:	c1 f3       	breq	.-16     	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4254:	d8 01       	movw	r26, r16
    4256:	18 96       	adiw	r26, 0x08	; 8
    4258:	1c 92       	st	X, r1
    425a:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    425c:	14 96       	adiw	r26, 0x04	; 4
    425e:	ed 91       	ld	r30, X+
    4260:	fc 91       	ld	r31, X
    4262:	15 97       	sbiw	r26, 0x05	; 5
    4264:	cf 01       	movw	r24, r30
    4266:	01 96       	adiw	r24, 0x01	; 1
    4268:	15 96       	adiw	r26, 0x05	; 5
    426a:	9c 93       	st	X, r25
    426c:	8e 93       	st	-X, r24
    426e:	14 97       	sbiw	r26, 0x04	; 4
    4270:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    4272:	c8 01       	movw	r24, r16
    4274:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4278:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    427a:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    427e:	81 11       	cpse	r24, r1
    4280:	e9 cf       	rjmp	.-46     	; 0x4254 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    4282:	d8 01       	movw	r26, r16
    4284:	14 96       	adiw	r26, 0x04	; 4
    4286:	ed 91       	ld	r30, X+
    4288:	fc 91       	ld	r31, X
    428a:	15 97       	sbiw	r26, 0x05	; 5
    428c:	cf 01       	movw	r24, r30
    428e:	01 96       	adiw	r24, 0x01	; 1
    4290:	15 96       	adiw	r26, 0x05	; 5
    4292:	9c 93       	st	X, r25
    4294:	8e 93       	st	-X, r24
    4296:	14 97       	sbiw	r26, 0x04	; 4
    4298:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    429a:	ba 82       	std	Y+2, r11	; 0x02
    429c:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    429e:	ab 28       	or	r10, r11
    42a0:	29 f6       	brne	.-118    	; 0x422c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    42a2:	e3 e0       	ldi	r30, 0x03	; 3
    42a4:	ae 2e       	mov	r10, r30
    42a6:	b1 2c       	mov	r11, r1
    42a8:	45 cf       	rjmp	.-374    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    42aa:	f8 01       	movw	r30, r16
    42ac:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    42ae:	a9 80       	ldd	r10, Y+1	; 0x01
    42b0:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    42b2:	a1 14       	cp	r10, r1
    42b4:	b1 04       	cpc	r11, r1
    42b6:	d1 f5       	brne	.+116    	; 0x432c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    42c0:	22 96       	adiw	r28, 0x02	; 2
    42c2:	3f af       	std	Y+63, r19	; 0x3f
    42c4:	22 97       	sbiw	r28, 0x02	; 2
    42c6:	23 96       	adiw	r28, 0x03	; 3
    42c8:	2f af       	std	Y+63, r18	; 0x3f
    42ca:	23 97       	sbiw	r28, 0x03	; 3
    42cc:	25 96       	adiw	r28, 0x05	; 5
    42ce:	9f af       	std	Y+63, r25	; 0x3f
    42d0:	8e af       	std	Y+62, r24	; 0x3e
    42d2:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    42d4:	89 2b       	or	r24, r25
    42d6:	29 f3       	breq	.-54     	; 0x42a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    42d8:	d8 01       	movw	r26, r16
    42da:	16 96       	adiw	r26, 0x06	; 6
    42dc:	8c 91       	ld	r24, X
    42de:	16 97       	sbiw	r26, 0x06	; 6
    42e0:	81 50       	subi	r24, 0x01	; 1
    42e2:	16 96       	adiw	r26, 0x06	; 6
    42e4:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    42e6:	25 96       	adiw	r28, 0x05	; 5
    42e8:	4c ad       	ldd	r20, Y+60	; 0x3c
    42ea:	5d ad       	ldd	r21, Y+61	; 0x3d
    42ec:	6e ad       	ldd	r22, Y+62	; 0x3e
    42ee:	7f ad       	ldd	r23, Y+63	; 0x3f
    42f0:	25 97       	sbiw	r28, 0x05	; 5
    42f2:	c8 01       	movw	r24, r16
    42f4:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    42f8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    42fa:	f8 01       	movw	r30, r16
    42fc:	86 81       	ldd	r24, Z+6	; 0x06
    42fe:	8f 5f       	subi	r24, 0xFF	; 255
    4300:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    4302:	a1 14       	cp	r10, r1
    4304:	b1 04       	cpc	r11, r1
    4306:	09 f0       	breq	.+2      	; 0x430a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    4308:	15 cf       	rjmp	.-470    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    430a:	c8 01       	movw	r24, r16
    430c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4310:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    4312:	89 2b       	or	r24, r25
    4314:	09 f0       	breq	.+2      	; 0x4318 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    4316:	0e cf       	rjmp	.-484    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4318:	c8 01       	movw	r24, r16
    431a:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    431e:	8d 37       	cpi	r24, 0x7D	; 125
    4320:	09 f0       	breq	.+2      	; 0x4324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    4322:	3f c0       	rjmp	.+126    	; 0x43a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4324:	d8 01       	movw	r26, r16
    4326:	18 96       	adiw	r26, 0x08	; 8
    4328:	1c 92       	st	X, r1
    432a:	04 cf       	rjmp	.-504    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    432c:	b5 01       	movw	r22, r10
    432e:	c4 01       	movw	r24, r8
    4330:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	49 f5       	brne	.+82     	; 0x438a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    4338:	d3 01       	movw	r26, r6
    433a:	ed 91       	ld	r30, X+
    433c:	fc 91       	ld	r31, X
    433e:	01 90       	ld	r0, Z+
    4340:	f0 81       	ld	r31, Z
    4342:	e0 2d       	mov	r30, r0
    4344:	6c e0       	ldi	r22, 0x0C	; 12
    4346:	70 e0       	ldi	r23, 0x00	; 0
    4348:	c3 01       	movw	r24, r6
    434a:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	09 f4       	brne	.+2      	; 0x4352 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    4350:	b3 cf       	rjmp	.-154    	; 0x42b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    4352:	fc 01       	movw	r30, r24
    4354:	25 2d       	mov	r18, r5
    4356:	11 92       	st	Z+, r1
    4358:	2a 95       	dec	r18
    435a:	e9 f7       	brne	.-6      	; 0x4356 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    435c:	dc 01       	movw	r26, r24
    435e:	1d 92       	st	X+, r1
    4360:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    4362:	d7 01       	movw	r26, r14
    4364:	14 96       	adiw	r26, 0x04	; 4
    4366:	ed 91       	ld	r30, X+
    4368:	fc 91       	ld	r31, X
    436a:	15 97       	sbiw	r26, 0x05	; 5
    436c:	30 97       	sbiw	r30, 0x00	; 0
    436e:	81 f0       	breq	.+32     	; 0x4390 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    4370:	dc 01       	movw	r26, r24
    4372:	19 96       	adiw	r26, 0x09	; 9
    4374:	fc 93       	st	X, r31
    4376:	ee 93       	st	-X, r30
    4378:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    437a:	97 83       	std	Z+7, r25	; 0x07
    437c:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    437e:	f7 01       	movw	r30, r14
    4380:	95 83       	std	Z+5, r25	; 0x05
    4382:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    4384:	fc 01       	movw	r30, r24
    4386:	b3 86       	std	Z+11, r11	; 0x0b
    4388:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    438a:	36 2d       	mov	r19, r6
    438c:	27 2d       	mov	r18, r7
    438e:	98 cf       	rjmp	.-208    	; 0x42c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    4390:	13 96       	adiw	r26, 0x03	; 3
    4392:	9c 93       	st	X, r25
    4394:	8e 93       	st	-X, r24
    4396:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    4398:	15 96       	adiw	r26, 0x05	; 5
    439a:	9c 93       	st	X, r25
    439c:	8e 93       	st	-X, r24
    439e:	14 97       	sbiw	r26, 0x04	; 4
    43a0:	f1 cf       	rjmp	.-30     	; 0x4384 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    43a2:	c8 01       	movw	r24, r16
    43a4:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    43a8:	8c 32       	cpi	r24, 0x2C	; 44
    43aa:	09 f0       	breq	.+2      	; 0x43ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    43ac:	4b cf       	rjmp	.-362    	; 0x4244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    43ae:	f8 01       	movw	r30, r16
    43b0:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    43b2:	c8 01       	movw	r24, r16
    43b4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    43b8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    43ba:	89 2b       	or	r24, r25
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    43be:	18 cf       	rjmp	.-464    	; 0x41f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    43c0:	b9 ce       	rjmp	.-654    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    43c2:	f5 e0       	ldi	r31, 0x05	; 5
    43c4:	af 2e       	mov	r10, r31
    43c6:	b1 2c       	mov	r11, r1
    43c8:	b5 ce       	rjmp	.-662    	; 0x4134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.28():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    43ca:	be 01       	movw	r22, r28
    43cc:	6f 5f       	subi	r22, 0xFF	; 255
    43ce:	7f 4f       	sbci	r23, 0xFF	; 255
    43d0:	c8 01       	movw	r24, r16
    43d2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    43d6:	00 97       	sbiw	r24, 0x00	; 0
    43d8:	09 f0       	breq	.+2      	; 0x43dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    43da:	ad ce       	rjmp	.-678    	; 0x4136 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    43dc:	e1 14       	cp	r14, r1
    43de:	f1 04       	cpc	r15, r1
    43e0:	61 f0       	breq	.+24     	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.28():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    43e2:	89 81       	ldd	r24, Y+1	; 0x01
    43e4:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    43e6:	23 e0       	ldi	r18, 0x03	; 3
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	d7 01       	movw	r26, r14
    43ec:	11 96       	adiw	r26, 0x01	; 1
    43ee:	3c 93       	st	X, r19
    43f0:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    43f2:	13 96       	adiw	r26, 0x03	; 3
    43f4:	9c 93       	st	X, r25
    43f6:	8e 93       	st	-X, r24
    43f8:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	9b ce       	rjmp	.-714    	; 0x4136 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    4400:	e1 e0       	ldi	r30, 0x01	; 1
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	ec 0f       	add	r30, r28
    4406:	fd 1f       	adc	r31, r29
    4408:	ed 0d       	add	r30, r13
    440a:	f1 1d       	adc	r31, r1
    440c:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    440e:	19 81       	ldd	r17, Y+1	; 0x01
    4410:	11 23       	and	r17, r17
    4412:	09 f4       	brne	.+2      	; 0x4416 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    4414:	51 c0       	rjmp	.+162    	; 0x44b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    4416:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    4418:	1d 32       	cpi	r17, 0x2D	; 45
    441a:	71 f1       	breq	.+92     	; 0x4478 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    441c:	1b 32       	cpi	r17, 0x2B	; 43
    441e:	61 f1       	breq	.+88     	; 0x4478 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    4420:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    4422:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4424:	90 ed       	ldi	r25, 0xD0	; 208
    4426:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    4428:	9a 30       	cpi	r25, 0x0A	; 10
    442a:	d8 f3       	brcs	.-10     	; 0x4422 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    442c:	81 11       	cpse	r24, r1
    442e:	44 c0       	rjmp	.+136    	; 0x44b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    4430:	14 37       	cpi	r17, 0x74	; 116
    4432:	09 f4       	brne	.+2      	; 0x4436 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    4434:	dd c1       	rjmp	.+954    	; 0x47f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    4436:	1b 32       	cpi	r17, 0x2B	; 43
    4438:	09 f1       	breq	.+66     	; 0x447c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    443a:	1d 32       	cpi	r17, 0x2D	; 45
    443c:	19 f1       	breq	.+70     	; 0x4484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    443e:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    4440:	fe 01       	movw	r30, r28
    4442:	31 96       	adiw	r30, 0x01	; 1
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    444a:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    444c:	80 ed       	ldi	r24, 0xD0	; 208
    444e:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    4450:	8a 30       	cpi	r24, 0x0A	; 10
    4452:	d0 f4       	brcc	.+52     	; 0x4488 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    4454:	aa e0       	ldi	r26, 0x0A	; 10
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	0e 94 99 a2 	call	0x14532	; 0x14532 <__muluhisi3>
    445c:	20 2f       	mov	r18, r16
    445e:	00 0f       	add	r16, r16
    4460:	33 0b       	sbc	r19, r19
    4462:	20 53       	subi	r18, 0x30	; 48
    4464:	31 09       	sbc	r19, r1
    4466:	03 2e       	mov	r0, r19
    4468:	00 0c       	add	r0, r0
    446a:	44 0b       	sbc	r20, r20
    446c:	55 0b       	sbc	r21, r21
    446e:	26 0f       	add	r18, r22
    4470:	37 1f       	adc	r19, r23
    4472:	48 1f       	adc	r20, r24
    4474:	59 1f       	adc	r21, r25
    4476:	e9 cf       	rjmp	.-46     	; 0x444a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    4478:	32 96       	adiw	r30, 0x02	; 2
    447a:	d3 cf       	rjmp	.-90     	; 0x4422 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    447c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    447e:	fe 01       	movw	r30, r28
    4480:	32 96       	adiw	r30, 0x02	; 2
    4482:	e0 cf       	rjmp	.-64     	; 0x4444 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    4484:	11 e0       	ldi	r17, 0x01	; 1
    4486:	fb cf       	rjmp	.-10     	; 0x447e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    4488:	11 23       	and	r17, r17
    448a:	09 f4       	brne	.+2      	; 0x448e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    448c:	b5 c1       	rjmp	.+874    	; 0x47f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    448e:	e1 14       	cp	r14, r1
    4490:	f1 04       	cpc	r15, r1
    4492:	09 f4       	brne	.+2      	; 0x4496 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    4494:	b2 cf       	rjmp	.-156    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    4496:	87 e0       	ldi	r24, 0x07	; 7
    4498:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    449a:	21 15       	cp	r18, r1
    449c:	31 05       	cpc	r19, r1
    449e:	41 05       	cpc	r20, r1
    44a0:	51 05       	cpc	r21, r1
    44a2:	11 f4       	brne	.+4      	; 0x44a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    44a4:	86 e0       	ldi	r24, 0x06	; 6
    44a6:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    44a8:	f7 01       	movw	r30, r14
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    44ae:	22 83       	std	Z+2, r18	; 0x02
    44b0:	33 83       	std	Z+3, r19	; 0x03
    44b2:	44 83       	std	Z+4, r20	; 0x04
    44b4:	55 83       	std	Z+5, r21	; 0x05
    44b6:	a1 cf       	rjmp	.-190    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    44b8:	61 e0       	ldi	r22, 0x01	; 1
    44ba:	73 e0       	ldi	r23, 0x03	; 3
    44bc:	ce 01       	movw	r24, r28
    44be:	01 96       	adiw	r24, 0x01	; 1
    44c0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    44c4:	89 2b       	or	r24, r25
    44c6:	09 f4       	brne	.+2      	; 0x44ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    44c8:	46 c0       	rjmp	.+140    	; 0x4556 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    44ca:	5e 01       	movw	r10, r28
    44cc:	f2 e0       	ldi	r31, 0x02	; 2
    44ce:	af 0e       	add	r10, r31
    44d0:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    44d2:	1d 32       	cpi	r17, 0x2D	; 45
    44d4:	49 f0       	breq	.+18     	; 0x44e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    44d6:	fe 01       	movw	r30, r28
    44d8:	31 96       	adiw	r30, 0x01	; 1
    44da:	5f 01       	movw	r10, r30
    44dc:	1b 32       	cpi	r17, 0x2B	; 43
    44de:	21 f4       	brne	.+8      	; 0x44e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    44e0:	5e 01       	movw	r10, r28
    44e2:	22 e0       	ldi	r18, 0x02	; 2
    44e4:	a2 0e       	add	r10, r18
    44e6:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    44e8:	65 e0       	ldi	r22, 0x05	; 5
    44ea:	73 e0       	ldi	r23, 0x03	; 3
    44ec:	c5 01       	movw	r24, r10
    44ee:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    44f2:	89 2b       	or	r24, r25
    44f4:	81 f1       	breq	.+96     	; 0x4556 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    44f6:	d5 01       	movw	r26, r10
    44f8:	8c 91       	ld	r24, X
    44fa:	88 23       	and	r24, r24
    44fc:	09 f4       	brne	.+2      	; 0x4500 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    44fe:	3b c1       	rjmp	.+630    	; 0x4776 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    4500:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    4502:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4504:	90 ed       	ldi	r25, 0xD0	; 208
    4506:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    4508:	9a 30       	cpi	r25, 0x0A	; 10
    450a:	d0 f3       	brcs	.-12     	; 0x4500 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    450c:	8e 32       	cpi	r24, 0x2E	; 46
    450e:	41 f4       	brne	.+16     	; 0x4520 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    4510:	9d 01       	movw	r18, r26
    4512:	f9 01       	movw	r30, r18
    4514:	2f 5f       	subi	r18, 0xFF	; 255
    4516:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4518:	80 81       	ld	r24, Z
    451a:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    451c:	8a 30       	cpi	r24, 0x0A	; 10
    451e:	c8 f3       	brcs	.-14     	; 0x4512 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    4520:	80 81       	ld	r24, Z
    4522:	8f 7d       	andi	r24, 0xDF	; 223
    4524:	85 34       	cpi	r24, 0x45	; 69
    4526:	a1 f4       	brne	.+40     	; 0x4550 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    4528:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    452a:	8d 32       	cpi	r24, 0x2D	; 45
    452c:	09 f4       	brne	.+2      	; 0x4530 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    452e:	57 c0       	rjmp	.+174    	; 0x45de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    4530:	8b 32       	cpi	r24, 0x2B	; 43
    4532:	09 f4       	brne	.+2      	; 0x4536 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    4534:	54 c0       	rjmp	.+168    	; 0x45de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    4536:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    4538:	80 81       	ld	r24, Z
    453a:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    453c:	8a 30       	cpi	r24, 0x0A	; 10
    453e:	08 f0       	brcs	.+2      	; 0x4542 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    4540:	1a c1       	rjmp	.+564    	; 0x4776 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    4542:	cf 01       	movw	r24, r30
    4544:	fc 01       	movw	r30, r24
    4546:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4548:	20 81       	ld	r18, Z
    454a:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    454c:	2a 30       	cpi	r18, 0x0A	; 10
    454e:	d0 f3       	brcs	.-12     	; 0x4544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    4550:	80 81       	ld	r24, Z
    4552:	81 11       	cpse	r24, r1
    4554:	10 c1       	rjmp	.+544    	; 0x4776 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    4556:	1b 32       	cpi	r17, 0x2B	; 43
    4558:	09 f4       	brne	.+2      	; 0x455c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    455a:	43 c0       	rjmp	.+134    	; 0x45e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    455c:	1d 32       	cpi	r17, 0x2D	; 45
    455e:	09 f0       	breq	.+2      	; 0x4562 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    4560:	47 c0       	rjmp	.+142    	; 0x45f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    4562:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    4564:	dd 24       	eor	r13, r13
    4566:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    4568:	5e 01       	movw	r10, r28
    456a:	b2 e0       	ldi	r27, 0x02	; 2
    456c:	ab 0e       	add	r10, r27
    456e:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    4570:	60 e0       	ldi	r22, 0x00	; 0
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	80 e8       	ldi	r24, 0x80	; 128
    4576:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    4578:	14 37       	cpi	r17, 0x74	; 116
    457a:	09 f4       	brne	.+2      	; 0x457e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    457c:	d2 c0       	rjmp	.+420    	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    457e:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    4580:	60 e0       	ldi	r22, 0x00	; 0
    4582:	70 e0       	ldi	r23, 0x00	; 0
    4584:	80 ec       	ldi	r24, 0xC0	; 192
    4586:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    4588:	1e 34       	cpi	r17, 0x4E	; 78
    458a:	09 f4       	brne	.+2      	; 0x458e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    458c:	ca c0       	rjmp	.+404    	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    458e:	19 34       	cpi	r17, 0x49	; 73
    4590:	09 f4       	brne	.+2      	; 0x4594 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    4592:	97 c0       	rjmp	.+302    	; 0x46c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    4594:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	a9 01       	movw	r20, r18
    459c:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    459e:	d5 01       	movw	r26, r10
    45a0:	1d 91       	ld	r17, X+
    45a2:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    45a4:	80 ed       	ldi	r24, 0xD0	; 208
    45a6:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    45a8:	8a 30       	cpi	r24, 0x0A	; 10
    45aa:	48 f5       	brcc	.+82     	; 0x45fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    45ac:	2c 3c       	cpi	r18, 0xCC	; 204
    45ae:	bc ec       	ldi	r27, 0xCC	; 204
    45b0:	3b 07       	cpc	r19, r27
    45b2:	bc e0       	ldi	r27, 0x0C	; 12
    45b4:	4b 07       	cpc	r20, r27
    45b6:	51 05       	cpc	r21, r1
    45b8:	04 f5       	brge	.+64     	; 0x45fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    45ba:	aa e0       	ldi	r26, 0x0A	; 10
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	0e 94 99 a2 	call	0x14532	; 0x14532 <__muluhisi3>
    45c2:	21 2f       	mov	r18, r17
    45c4:	11 0f       	add	r17, r17
    45c6:	33 0b       	sbc	r19, r19
    45c8:	20 53       	subi	r18, 0x30	; 48
    45ca:	31 09       	sbc	r19, r1
    45cc:	03 2e       	mov	r0, r19
    45ce:	00 0c       	add	r0, r0
    45d0:	44 0b       	sbc	r20, r20
    45d2:	55 0b       	sbc	r21, r21
    45d4:	26 0f       	add	r18, r22
    45d6:	37 1f       	adc	r19, r23
    45d8:	48 1f       	adc	r20, r24
    45da:	59 1f       	adc	r21, r25
    45dc:	df cf       	rjmp	.-66     	; 0x459c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    45de:	32 96       	adiw	r30, 0x02	; 2
    45e0:	ab cf       	rjmp	.-170    	; 0x4538 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    45e2:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    45e4:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    45e6:	5e 01       	movw	r10, r28
    45e8:	e2 e0       	ldi	r30, 0x02	; 2
    45ea:	ae 0e       	add	r10, r30
    45ec:	b1 1c       	adc	r11, r1
    45ee:	c0 cf       	rjmp	.-128    	; 0x4570 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    45f0:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    45f2:	ce 01       	movw	r24, r28
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	5c 01       	movw	r10, r24
    45f8:	bb cf       	rjmp	.-138    	; 0x4570 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    45fa:	0f 5f       	subi	r16, 0xFF	; 255
    45fc:	cf cf       	rjmp	.-98     	; 0x459c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    45fe:	1e 32       	cpi	r17, 0x2E	; 46
    4600:	31 f5       	brne	.+76     	; 0x464e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    4602:	5f 01       	movw	r10, r30
    4604:	8f ef       	ldi	r24, 0xFF	; 255
    4606:	a8 1a       	sub	r10, r24
    4608:	b8 0a       	sbc	r11, r24
    460a:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    460c:	d5 01       	movw	r26, r10
    460e:	1d 91       	ld	r17, X+
    4610:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4612:	80 ed       	ldi	r24, 0xD0	; 208
    4614:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    4616:	8a 30       	cpi	r24, 0x0A	; 10
    4618:	d0 f4       	brcc	.+52     	; 0x464e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    461a:	2c 3c       	cpi	r18, 0xCC	; 204
    461c:	bc ec       	ldi	r27, 0xCC	; 204
    461e:	3b 07       	cpc	r19, r27
    4620:	bc e0       	ldi	r27, 0x0C	; 12
    4622:	4b 07       	cpc	r20, r27
    4624:	51 05       	cpc	r21, r1
    4626:	8c f7       	brge	.-30     	; 0x460a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    4628:	aa e0       	ldi	r26, 0x0A	; 10
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	0e 94 99 a2 	call	0x14532	; 0x14532 <__muluhisi3>
    4630:	21 2f       	mov	r18, r17
    4632:	11 0f       	add	r17, r17
    4634:	33 0b       	sbc	r19, r19
    4636:	20 53       	subi	r18, 0x30	; 48
    4638:	31 09       	sbc	r19, r1
    463a:	03 2e       	mov	r0, r19
    463c:	00 0c       	add	r0, r0
    463e:	44 0b       	sbc	r20, r20
    4640:	55 0b       	sbc	r21, r21
    4642:	26 0f       	add	r18, r22
    4644:	37 1f       	adc	r19, r23
    4646:	48 1f       	adc	r20, r24
    4648:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    464a:	01 50       	subi	r16, 0x01	; 1
    464c:	de cf       	rjmp	.-68     	; 0x460a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    464e:	80 81       	ld	r24, Z
    4650:	8f 7d       	andi	r24, 0xDF	; 223
    4652:	00 2e       	mov	r0, r16
    4654:	00 0c       	add	r0, r0
    4656:	11 0b       	sbc	r17, r17
    4658:	85 34       	cpi	r24, 0x45	; 69
    465a:	09 f0       	breq	.+2      	; 0x465e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    465c:	70 c0       	rjmp	.+224    	; 0x473e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    465e:	81 81       	ldd	r24, Z+1	; 0x01
    4660:	8d 32       	cpi	r24, 0x2D	; 45
    4662:	41 f5       	brne	.+80     	; 0x46b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    4664:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    4666:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    466c:	6a e0       	ldi	r22, 0x0A	; 10
    466e:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    4670:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    4672:	60 ed       	ldi	r22, 0xD0	; 208
    4674:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    4676:	6a 30       	cpi	r22, 0x0A	; 10
    4678:	78 f5       	brcc	.+94     	; 0x46d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    467a:	b8 9e       	mul	r11, r24
    467c:	b0 01       	movw	r22, r0
    467e:	b9 9e       	mul	r11, r25
    4680:	70 0d       	add	r23, r0
    4682:	11 24       	eor	r1, r1
    4684:	8a 2f       	mov	r24, r26
    4686:	aa 0f       	add	r26, r26
    4688:	99 0b       	sbc	r25, r25
    468a:	c0 97       	sbiw	r24, 0x30	; 48
    468c:	86 0f       	add	r24, r22
    468e:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    4690:	b8 01       	movw	r22, r16
    4692:	68 0f       	add	r22, r24
    4694:	79 1f       	adc	r23, r25
    4696:	67 32       	cpi	r22, 0x27	; 39
    4698:	71 05       	cpc	r23, r1
    469a:	54 f3       	brlt	.-44     	; 0x4670 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    469c:	bb 23       	and	r27, r27
    469e:	89 f0       	breq	.+34     	; 0x46c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    46a8:	d1 10       	cpse	r13, r1
    46aa:	3b c0       	rjmp	.+118    	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    46ac:	60 e0       	ldi	r22, 0x00	; 0
    46ae:	70 e0       	ldi	r23, 0x00	; 0
    46b0:	cb 01       	movw	r24, r22
    46b2:	37 c0       	rjmp	.+110    	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    46b4:	8b 32       	cpi	r24, 0x2B	; 43
    46b6:	19 f0       	breq	.+6      	; 0x46be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    46b8:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	d5 cf       	rjmp	.-86     	; 0x4668 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    46be:	32 96       	adiw	r30, 0x02	; 2
    46c0:	fc cf       	rjmp	.-8      	; 0x46ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	80 e8       	ldi	r24, 0x80	; 128
    46c8:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    46ca:	d1 10       	cpse	r13, r1
    46cc:	2a c0       	rjmp	.+84     	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    46ce:	60 e0       	ldi	r22, 0x00	; 0
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	80 e8       	ldi	r24, 0x80	; 128
    46d4:	9f e7       	ldi	r25, 0x7F	; 127
    46d6:	25 c0       	rjmp	.+74     	; 0x4722 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    46d8:	bb 23       	and	r27, r27
    46da:	19 f0       	breq	.+6      	; 0x46e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    46dc:	91 95       	neg	r25
    46de:	81 95       	neg	r24
    46e0:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    46e2:	08 0f       	add	r16, r24
    46e4:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    46e6:	ca 01       	movw	r24, r20
    46e8:	b9 01       	movw	r22, r18
    46ea:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    46ee:	10 16       	cp	r1, r16
    46f0:	11 06       	cpc	r1, r17
    46f2:	44 f5       	brge	.+80     	; 0x4744 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    46f4:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    46f6:	00 ff       	sbrs	r16, 0
    46f8:	0c c0       	rjmp	.+24     	; 0x4712 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    46fa:	24 e0       	ldi	r18, 0x04	; 4
    46fc:	b2 9e       	mul	r11, r18
    46fe:	f0 01       	movw	r30, r0
    4700:	11 24       	eor	r1, r1
    4702:	e8 5c       	subi	r30, 0xC8	; 200
    4704:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    4706:	20 81       	ld	r18, Z
    4708:	31 81       	ldd	r19, Z+1	; 0x01
    470a:	42 81       	ldd	r20, Z+2	; 0x02
    470c:	53 81       	ldd	r21, Z+3	; 0x03
    470e:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    4712:	15 95       	asr	r17
    4714:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    4716:	b3 94       	inc	r11
    4718:	01 15       	cp	r16, r1
    471a:	11 05       	cpc	r17, r1
    471c:	61 f7       	brne	.-40     	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    471e:	d1 10       	cpse	r13, r1
    4720:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    4722:	e1 14       	cp	r14, r1
    4724:	f1 04       	cpc	r15, r1
    4726:	09 f4       	brne	.+2      	; 0x472a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    4728:	68 ce       	rjmp	.-816    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    472a:	2a e0       	ldi	r18, 0x0A	; 10
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	f7 01       	movw	r30, r14
    4730:	31 83       	std	Z+1, r19	; 0x01
    4732:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    4734:	62 83       	std	Z+2, r22	; 0x02
    4736:	73 83       	std	Z+3, r23	; 0x03
    4738:	84 83       	std	Z+4, r24	; 0x04
    473a:	95 83       	std	Z+5, r25	; 0x05
    473c:	5e ce       	rjmp	.-836    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	cf cf       	rjmp	.-98     	; 0x46e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    4744:	11 95       	neg	r17
    4746:	01 95       	neg	r16
    4748:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    474a:	b1 2c       	mov	r11, r1
make_float():
    474c:	01 15       	cp	r16, r1
    474e:	11 05       	cpc	r17, r1
    4750:	31 f3       	breq	.-52     	; 0x471e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    4752:	00 ff       	sbrs	r16, 0
    4754:	0c c0       	rjmp	.+24     	; 0x476e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    4756:	a4 e0       	ldi	r26, 0x04	; 4
    4758:	ba 9e       	mul	r11, r26
    475a:	f0 01       	movw	r30, r0
    475c:	11 24       	eor	r1, r1
    475e:	e0 5e       	subi	r30, 0xE0	; 224
    4760:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    4762:	20 81       	ld	r18, Z
    4764:	31 81       	ldd	r19, Z+1	; 0x01
    4766:	42 81       	ldd	r20, Z+2	; 0x02
    4768:	53 81       	ldd	r21, Z+3	; 0x03
    476a:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    476e:	15 95       	asr	r17
    4770:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    4772:	b3 94       	inc	r11
    4774:	eb cf       	rjmp	.-42     	; 0x474c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    4776:	6e e0       	ldi	r22, 0x0E	; 14
    4778:	73 e0       	ldi	r23, 0x03	; 3
    477a:	ce 01       	movw	r24, r28
    477c:	01 96       	adiw	r24, 0x01	; 1
    477e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    4782:	89 2b       	or	r24, r25
    4784:	91 f4       	brne	.+36     	; 0x47aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    4786:	e1 14       	cp	r14, r1
    4788:	f1 04       	cpc	r15, r1
    478a:	09 f4       	brne	.+2      	; 0x478e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    478c:	36 ce       	rjmp	.-916    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    478e:	85 e0       	ldi	r24, 0x05	; 5
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	f7 01       	movw	r30, r14
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	a0 e0       	ldi	r26, 0x00	; 0
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	82 83       	std	Z+2, r24	; 0x02
    47a2:	93 83       	std	Z+3, r25	; 0x03
    47a4:	a4 83       	std	Z+4, r26	; 0x04
    47a6:	b5 83       	std	Z+5, r27	; 0x05
    47a8:	28 ce       	rjmp	.-944    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    47aa:	63 e1       	ldi	r22, 0x13	; 19
    47ac:	73 e0       	ldi	r23, 0x03	; 3
    47ae:	ce 01       	movw	r24, r28
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    47b6:	89 2b       	or	r24, r25
    47b8:	79 f4       	brne	.+30     	; 0x47d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    47ba:	e1 14       	cp	r14, r1
    47bc:	f1 04       	cpc	r15, r1
    47be:	09 f4       	brne	.+2      	; 0x47c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    47c0:	1c ce       	rjmp	.-968    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    47c2:	85 e0       	ldi	r24, 0x05	; 5
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	d7 01       	movw	r26, r14
    47c8:	8d 93       	st	X+, r24
    47ca:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    47cc:	f7 01       	movw	r30, r14
    47ce:	12 82       	std	Z+2, r1	; 0x02
    47d0:	13 82       	std	Z+3, r1	; 0x03
    47d2:	14 82       	std	Z+4, r1	; 0x04
    47d4:	15 82       	std	Z+5, r1	; 0x05
    47d6:	11 ce       	rjmp	.-990    	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    47d8:	69 e1       	ldi	r22, 0x19	; 25
    47da:	73 e0       	ldi	r23, 0x03	; 3
    47dc:	ce 01       	movw	r24, r28
    47de:	01 96       	adiw	r24, 0x01	; 1
    47e0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    47e4:	89 2b       	or	r24, r25
    47e6:	09 f4       	brne	.+2      	; 0x47ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    47e8:	08 ce       	rjmp	.-1008   	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    47ea:	82 e0       	ldi	r24, 0x02	; 2
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	a3 cc       	rjmp	.-1722   	; 0x4136 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    47f0:	21 e0       	ldi	r18, 0x01	; 1
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e0       	ldi	r20, 0x00	; 0
    47f6:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    47f8:	e1 14       	cp	r14, r1
    47fa:	f1 04       	cpc	r15, r1
    47fc:	09 f0       	breq	.+2      	; 0x4800 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    47fe:	52 ce       	rjmp	.-860    	; 0x44a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    4800:	fc cd       	rjmp	.-1032   	; 0x43fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00004802 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    4802:	ef 92       	push	r14
    4804:	ff 92       	push	r15
    4806:	0f 93       	push	r16
    4808:	1f 93       	push	r17
    480a:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    480c:	ee 24       	eor	r14, r14
    480e:	ea 94       	dec	r14
    4810:	fe 2c       	mov	r15, r14
    4812:	10 e0       	ldi	r17, 0x00	; 0
    4814:	00 e0       	ldi	r16, 0x00	; 0
    4816:	22 e0       	ldi	r18, 0x02	; 2
    4818:	bc 01       	movw	r22, r24
    481a:	8b ec       	ldi	r24, 0xCB	; 203
    481c:	98 e0       	ldi	r25, 0x08	; 8
    481e:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
}
    4822:	1f 91       	pop	r17
    4824:	0f 91       	pop	r16
    4826:	ff 90       	pop	r15
    4828:	ef 90       	pop	r14
    482a:	08 95       	ret

0000482c <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    482c:	82 ef       	ldi	r24, 0xF2	; 242
    482e:	98 e0       	ldi	r25, 0x08	; 8
    4830:	fc 01       	movw	r30, r24
    4832:	01 90       	ld	r0, Z+
    4834:	00 20       	and	r0, r0
    4836:	e9 f7       	brne	.-6      	; 0x4832 <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    4838:	cf 01       	movw	r24, r30
    483a:	83 5f       	subi	r24, 0xF3	; 243
    483c:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
  if (len > 0)
    483e:	88 23       	and	r24, r24
    4840:	29 f0       	breq	.+10     	; 0x484c <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
    dialog_set_string[len - 1] = 0;
    4842:	99 27       	eor	r25, r25
    4844:	fc 01       	movw	r30, r24
    4846:	ef 50       	subi	r30, 0x0F	; 15
    4848:	f7 4f       	sbci	r31, 0xF7	; 247
    484a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
}
    484c:	08 95       	ret

0000484e <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1440
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    484e:	e2 ef       	ldi	r30, 0xF2	; 242
    4850:	f8 e0       	ldi	r31, 0x08	; 8
    4852:	01 90       	ld	r0, Z+
    4854:	00 20       	and	r0, r0
    4856:	e9 f7       	brne	.-6      	; 0x4852 <display_element_set_string_add_char(char)+0x4>
    4858:	e3 5f       	subi	r30, 0xF3	; 243
    485a:	f8 40       	sbci	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1441
  if (len  < dialog_set_string_max_length - 1)
    485c:	ff 27       	eor	r31, r31
    485e:	20 91 ef 08 	lds	r18, 0x08EF	; 0x8008ef <dialog_set_string_max_length>
    4862:	21 50       	subi	r18, 0x01	; 1
    4864:	33 0b       	sbc	r19, r19
    4866:	e2 17       	cp	r30, r18
    4868:	f3 07       	cpc	r31, r19
    486a:	24 f4       	brge	.+8      	; 0x4874 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1443
  {
    dialog_set_string[len] = znak;
    486c:	ee 50       	subi	r30, 0x0E	; 14
    486e:	f7 4f       	sbci	r31, 0xF7	; 247
    4870:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1444
    dialog_set_string[len + 1] = 0;
    4872:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1446
  }
}
    4874:	08 95       	ret

00004876 <click_keyboard_alfa(unsigned char, unsigned char)>:
_Z19click_keyboard_alfahh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1577
   args2 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4876:	90 91 78 08 	lds	r25, 0x0878	; 0x800878 <dialog_set_string_keyboard_type>
    487a:	91 11       	cpse	r25, r1
    487c:	07 c0       	rjmp	.+14     	; 0x488c <click_keyboard_alfa(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1578
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
    487e:	e6 2f       	mov	r30, r22
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	e2 5a       	subi	r30, 0xA2	; 162
    4884:	fa 4d       	sbci	r31, 0xDA	; 218
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1582
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    4886:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
  ///
  display_element_set_string_add_char(znak);
    4888:	0c 94 27 24 	jmp	0x484e	; 0x484e <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1579
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    488c:	91 30       	cpi	r25, 0x01	; 1
    488e:	29 f4       	brne	.+10     	; 0x489a <click_keyboard_alfa(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1580
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
    4890:	e6 2f       	mov	r30, r22
    4892:	f0 e0       	ldi	r31, 0x00	; 0
    4894:	ec 5b       	subi	r30, 0xBC	; 188
    4896:	fa 4d       	sbci	r31, 0xDA	; 218
    4898:	f6 cf       	rjmp	.-20     	; 0x4886 <click_keyboard_alfa(unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1581
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    489a:	92 30       	cpi	r25, 0x02	; 2
    489c:	a9 f7       	brne	.-22     	; 0x4888 <click_keyboard_alfa(unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1582
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    489e:	e6 2f       	mov	r30, r22
    48a0:	f0 e0       	ldi	r31, 0x00	; 0
    48a2:	e7 5d       	subi	r30, 0xD7	; 215
    48a4:	fa 4d       	sbci	r31, 0xDA	; 218
    48a6:	ef cf       	rjmp	.-34     	; 0x4886 <click_keyboard_alfa(unsigned char, unsigned char)+0x10>

000048a8 <click_keyboard_number(unsigned char, unsigned char)>:
_Z21click_keyboard_numberhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    48a8:	8a 30       	cpi	r24, 0x0A	; 10
    48aa:	21 f0       	breq	.+8      	; 0x48b4 <click_keyboard_number(unsigned char, unsigned char)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1546
   args2 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
    48ac:	80 e3       	ldi	r24, 0x30	; 48
    48ae:	86 0f       	add	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1548
  if (args1 == 10) znak = '.';
  display_element_set_string_add_char(znak);
    48b0:	0c 94 27 24 	jmp	0x484e	; 0x484e <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    48b4:	8e e2       	ldi	r24, 0x2E	; 46
    48b6:	fc cf       	rjmp	.-8      	; 0x48b0 <click_keyboard_number(unsigned char, unsigned char)+0x8>

000048b8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4046
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    48b8:	2f 92       	push	r2
    48ba:	3f 92       	push	r3
    48bc:	4f 92       	push	r4
    48be:	5f 92       	push	r5
    48c0:	6f 92       	push	r6
    48c2:	7f 92       	push	r7
    48c4:	9f 92       	push	r9
    48c6:	af 92       	push	r10
    48c8:	bf 92       	push	r11
    48ca:	cf 92       	push	r12
    48cc:	df 92       	push	r13
    48ce:	ef 92       	push	r14
    48d0:	ff 92       	push	r15
    48d2:	0f 93       	push	r16
    48d4:	1f 93       	push	r17
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	00 d0       	rcall	.+0      	; 0x48dc <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    48dc:	1f 92       	push	r1
    48de:	1f 92       	push	r1
    48e0:	cd b7       	in	r28, 0x3d	; 61
    48e2:	de b7       	in	r29, 0x3e	; 62
    48e4:	6c 01       	movw	r12, r24
    48e6:	5b 01       	movw	r10, r22
    48e8:	1a 01       	movw	r2, r20
    48ea:	29 01       	movw	r4, r18
    48ec:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    48ee:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    48f2:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    48f6:	10 e0       	ldi	r17, 0x00	; 0
    48f8:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    48fa:	3b 01       	movw	r6, r22
    48fc:	62 0e       	add	r6, r18
    48fe:	73 1e       	adc	r7, r19
    4900:	84 0f       	add	r24, r20
    4902:	95 1f       	adc	r25, r21
    4904:	9d 83       	std	Y+5, r25	; 0x05
    4906:	8c 83       	std	Y+4, r24	; 0x04
    4908:	93 01       	movw	r18, r6
    490a:	20 1b       	sub	r18, r16
    490c:	31 0b       	sbc	r19, r17
    490e:	4c 81       	ldd	r20, Y+4	; 0x04
    4910:	5d 81       	ldd	r21, Y+5	; 0x05
    4912:	40 1b       	sub	r20, r16
    4914:	51 0b       	sbc	r21, r17
    4916:	b5 01       	movw	r22, r10
    4918:	60 0f       	add	r22, r16
    491a:	71 1f       	adc	r23, r17
    491c:	c6 01       	movw	r24, r12
    491e:	80 0f       	add	r24, r16
    4920:	91 1f       	adc	r25, r17
    4922:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    4926:	0f 5f       	subi	r16, 0xFF	; 255
    4928:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4050
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    492a:	03 30       	cpi	r16, 0x03	; 3
    492c:	11 05       	cpc	r17, r1
    492e:	61 f7       	brne	.-40     	; 0x4908 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4052
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    4930:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053
  str1[1] = 0;
    4932:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    4934:	ce 01       	movw	r24, r28
    4936:	01 96       	adiw	r24, 0x01	; 1
    4938:	fc 01       	movw	r30, r24
    493a:	01 90       	ld	r0, Z+
    493c:	00 20       	and	r0, r0
    493e:	e9 f7       	brne	.-6      	; 0x493a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    4940:	31 97       	sbiw	r30, 0x01	; 1
    4942:	e8 1b       	sub	r30, r24
    4944:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    4946:	29 2d       	mov	r18, r9
    4948:	22 0f       	add	r18, r18
    494a:	29 0d       	add	r18, r9
    494c:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    494e:	a2 01       	movw	r20, r4
    4950:	42 1b       	sub	r20, r18
    4952:	51 09       	sbc	r21, r1
    4954:	56 95       	lsr	r21
    4956:	47 95       	ror	r20
    4958:	56 95       	lsr	r21
    495a:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4058
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    495c:	4a 0d       	add	r20, r10
    495e:	5b 2d       	mov	r21, r11
    4960:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    4962:	26 e0       	ldi	r18, 0x06	; 6
    4964:	e2 9f       	mul	r30, r18
    4966:	f0 01       	movw	r30, r0
    4968:	11 24       	eor	r1, r1
    496a:	9e 9e       	mul	r9, r30
    496c:	90 01       	movw	r18, r0
    496e:	9f 9e       	mul	r9, r31
    4970:	30 0d       	add	r19, r0
    4972:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4056
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    4974:	33 27       	eor	r19, r19
    4976:	b1 01       	movw	r22, r2
    4978:	62 1b       	sub	r22, r18
    497a:	73 0b       	sbc	r23, r19
    497c:	76 95       	lsr	r23
    497e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4058
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    4980:	6c 0d       	add	r22, r12
    4982:	7d 2d       	mov	r23, r13
    4984:	71 1d       	adc	r23, r1
    4986:	ee 24       	eor	r14, r14
    4988:	ea 94       	dec	r14
    498a:	fe 2c       	mov	r15, r14
    498c:	10 e0       	ldi	r17, 0x00	; 0
    498e:	00 e0       	ldi	r16, 0x00	; 0
    4990:	29 2d       	mov	r18, r9
    4992:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4059
}
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	0f 90       	pop	r0
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	ff 90       	pop	r15
    49aa:	ef 90       	pop	r14
    49ac:	df 90       	pop	r13
    49ae:	cf 90       	pop	r12
    49b0:	bf 90       	pop	r11
    49b2:	af 90       	pop	r10
    49b4:	9f 90       	pop	r9
    49b6:	7f 90       	pop	r7
    49b8:	6f 90       	pop	r6
    49ba:	5f 90       	pop	r5
    49bc:	4f 90       	pop	r4
    49be:	3f 90       	pop	r3
    49c0:	2f 90       	pop	r2
    49c2:	08 95       	ret

000049c4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    49c4:	8f 92       	push	r8
    49c6:	9f 92       	push	r9
    49c8:	af 92       	push	r10
    49ca:	bf 92       	push	r11
    49cc:	cf 92       	push	r12
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
    49e0:	68 97       	sbiw	r28, 0x18	; 24
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	f8 94       	cli
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	cd bf       	out	0x3d, r28	; 61
    49ec:	5c 01       	movw	r10, r24
    49ee:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    49f0:	69 e2       	ldi	r22, 0x29	; 41
    49f2:	78 e2       	ldi	r23, 0x28	; 40
    49f4:	ce 01       	movw	r24, r28
    49f6:	01 96       	adiw	r24, 0x01	; 1
    49f8:	6c 01       	movw	r12, r24
    49fa:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    49fe:	a4 01       	movw	r20, r8
    4a00:	4b 5f       	subi	r20, 0xFB	; 251
    4a02:	5f 4f       	sbci	r21, 0xFF	; 255
    4a04:	b5 01       	movw	r22, r10
    4a06:	61 5b       	subi	r22, 0xB1	; 177
    4a08:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0a:	ee 24       	eor	r14, r14
    4a0c:	ea 94       	dec	r14
    4a0e:	fe 2c       	mov	r15, r14
    4a10:	10 e0       	ldi	r17, 0x00	; 0
    4a12:	00 e0       	ldi	r16, 0x00	; 0
    4a14:	21 e0       	ldi	r18, 0x01	; 1
    4a16:	c6 01       	movw	r24, r12
    4a18:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    4a1c:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    4a20:	80 fd       	sbrc	r24, 0
    4a22:	50 c0       	rjmp	.+160    	; 0x4ac4 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    4a24:	90 91 5d 10 	lds	r25, 0x105D	; 0x80105d <now+0x4>
    4a28:	80 91 5c 10 	lds	r24, 0x105C	; 0x80105c <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
  {
    if (uptime % 2 )
    4a2c:	20 91 e6 0a 	lds	r18, 0x0AE6	; 0x800ae6 <uptime>
    4a30:	20 ff       	sbrs	r18, 0
    4a32:	41 c0       	rjmp	.+130    	; 0x4ab6 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    4a34:	1f 92       	push	r1
    4a36:	9f 93       	push	r25
    4a38:	1f 92       	push	r1
    4a3a:	8f 93       	push	r24
    4a3c:	8e e1       	ldi	r24, 0x1E	; 30
    4a3e:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    4a40:	9f 93       	push	r25
    4a42:	8f 93       	push	r24
    4a44:	df 92       	push	r13
    4a46:	cf 92       	push	r12
    4a48:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
    4a4c:	0f b6       	in	r0, 0x3f	; 63
    4a4e:	f8 94       	cli
    4a50:	de bf       	out	0x3e, r29	; 62
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4a56:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4a5a:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    4a5e:	a4 01       	movw	r20, r8
    4a60:	4c 5e       	subi	r20, 0xEC	; 236
    4a62:	5f 4f       	sbci	r21, 0xFF	; 255
    4a64:	b5 01       	movw	r22, r10
    4a66:	6c 5f       	subi	r22, 0xFC	; 252
    4a68:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6a:	ee 24       	eor	r14, r14
    4a6c:	ea 94       	dec	r14
    4a6e:	fe 2c       	mov	r15, r14
    4a70:	10 e0       	ldi	r17, 0x00	; 0
    4a72:	00 e0       	ldi	r16, 0x00	; 0
    4a74:	28 e0       	ldi	r18, 0x08	; 8
    4a76:	c6 01       	movw	r24, r12
    4a78:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    4a7c:	94 01       	movw	r18, r8
    4a7e:	2c 5a       	subi	r18, 0xAC	; 172
    4a80:	3f 4f       	sbci	r19, 0xFF	; 255
    4a82:	a5 01       	movw	r20, r10
    4a84:	4c 50       	subi	r20, 0x0C	; 12
    4a86:	5f 4f       	sbci	r21, 0xFF	; 255
    4a88:	b4 01       	movw	r22, r8
    4a8a:	c5 01       	movw	r24, r10
    4a8c:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
}
    4a90:	68 96       	adiw	r28, 0x18	; 24
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	f8 94       	cli
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	cd bf       	out	0x3d, r28	; 61
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	ff 90       	pop	r15
    4aa6:	ef 90       	pop	r14
    4aa8:	df 90       	pop	r13
    4aaa:	cf 90       	pop	r12
    4aac:	bf 90       	pop	r11
    4aae:	af 90       	pop	r10
    4ab0:	9f 90       	pop	r9
    4ab2:	8f 90       	pop	r8
    4ab4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    4ab6:	1f 92       	push	r1
    4ab8:	9f 93       	push	r25
    4aba:	1f 92       	push	r1
    4abc:	8f 93       	push	r24
    4abe:	88 e2       	ldi	r24, 0x28	; 40
    4ac0:	93 e0       	ldi	r25, 0x03	; 3
    4ac2:	be cf       	rjmp	.-132    	; 0x4a40 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
  }
  else
  {
    strcpy(str1, "--:--");
    4ac4:	62 e3       	ldi	r22, 0x32	; 50
    4ac6:	73 e0       	ldi	r23, 0x03	; 3
    4ac8:	c6 01       	movw	r24, r12
    4aca:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
    4ace:	c3 cf       	rjmp	.-122    	; 0x4a56 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

00004ad0 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    4ad0:	26 0f       	add	r18, r22
    4ad2:	37 1f       	adc	r19, r23
    4ad4:	48 0f       	add	r20, r24
    4ad6:	59 1f       	adc	r21, r25
    4ad8:	0c 94 c7 71 	jmp	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>

00004adc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    4adc:	2f 92       	push	r2
    4ade:	3f 92       	push	r3
    4ae0:	4f 92       	push	r4
    4ae2:	5f 92       	push	r5
    4ae4:	6f 92       	push	r6
    4ae6:	7f 92       	push	r7
    4ae8:	8f 92       	push	r8
    4aea:	9f 92       	push	r9
    4aec:	af 92       	push	r10
    4aee:	bf 92       	push	r11
    4af0:	cf 92       	push	r12
    4af2:	df 92       	push	r13
    4af4:	ef 92       	push	r14
    4af6:	ff 92       	push	r15
    4af8:	0f 93       	push	r16
    4afa:	1f 93       	push	r17
    4afc:	cf 93       	push	r28
    4afe:	df 93       	push	r29
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    4b02:	1f 92       	push	r1
    4b04:	1f 92       	push	r1
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	2c 01       	movw	r4, r24
    4b0c:	3b 01       	movw	r6, r22
    4b0e:	5a 83       	std	Y+2, r21	; 0x02
    4b10:	49 83       	std	Y+1, r20	; 0x01
    4b12:	19 01       	movw	r2, r18
    4b14:	90 2e       	mov	r9, r16
    4b16:	eb 82       	std	Y+3, r14	; 0x03
    4b18:	dd 82       	std	Y+5, r13	; 0x05
    4b1a:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4b1c:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4b20:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    4b24:	10 e0       	ldi	r17, 0x00	; 0
    4b26:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    4b28:	6b 01       	movw	r12, r22
    4b2a:	c2 0e       	add	r12, r18
    4b2c:	d3 1e       	adc	r13, r19
    4b2e:	7a 01       	movw	r14, r20
    4b30:	e8 0e       	add	r14, r24
    4b32:	f9 1e       	adc	r15, r25
    4b34:	96 01       	movw	r18, r12
    4b36:	20 1b       	sub	r18, r16
    4b38:	31 0b       	sbc	r19, r17
    4b3a:	a7 01       	movw	r20, r14
    4b3c:	40 1b       	sub	r20, r16
    4b3e:	51 0b       	sbc	r21, r17
    4b40:	b8 01       	movw	r22, r16
    4b42:	66 0d       	add	r22, r6
    4b44:	77 1d       	adc	r23, r7
    4b46:	c8 01       	movw	r24, r16
    4b48:	84 0d       	add	r24, r4
    4b4a:	95 1d       	adc	r25, r5
    4b4c:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    4b50:	0f 5f       	subi	r16, 0xFF	; 255
    4b52:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    4b54:	03 30       	cpi	r16, 0x03	; 3
    4b56:	11 05       	cpc	r17, r1
    4b58:	69 f7       	brne	.-38     	; 0x4b34 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    4b5a:	91 01       	movw	r18, r2
    4b5c:	23 50       	subi	r18, 0x03	; 3
    4b5e:	31 09       	sbc	r19, r1
    4b60:	49 81       	ldd	r20, Y+1	; 0x01
    4b62:	5a 81       	ldd	r21, Y+2	; 0x02
    4b64:	43 50       	subi	r20, 0x03	; 3
    4b66:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    4b68:	61 e0       	ldi	r22, 0x01	; 1
    4b6a:	86 12       	cpse	r8, r22
    4b6c:	11 c0       	rjmp	.+34     	; 0x4b90 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4b6e:	8f ef       	ldi	r24, 0xFF	; 255
    4b70:	9f ef       	ldi	r25, 0xFF	; 255
    4b72:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    4b76:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3979
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    4b7a:	26 0d       	add	r18, r6
    4b7c:	37 1d       	adc	r19, r7
    4b7e:	44 0d       	add	r20, r4
    4b80:	55 1d       	adc	r21, r5
    4b82:	b3 01       	movw	r22, r6
    4b84:	6d 5f       	subi	r22, 0xFD	; 253
    4b86:	7f 4f       	sbci	r23, 0xFF	; 255
    4b88:	c2 01       	movw	r24, r4
    4b8a:	03 96       	adiw	r24, 0x03	; 3
    4b8c:	0e 94 20 72 	call	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981
  }
  if (strlen(line1) > 0)
    4b90:	ec 81       	ldd	r30, Y+4	; 0x04
    4b92:	fd 81       	ldd	r31, Y+5	; 0x05
    4b94:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3972
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    4b96:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    4b98:	d1 2c       	mov	r13, r1
    4b9a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    4b9c:	88 23       	and	r24, r24
    4b9e:	91 f1       	breq	.+100    	; 0x4c04 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    4ba0:	01 90       	ld	r0, Z+
    4ba2:	00 20       	and	r0, r0
    4ba4:	e9 f7       	brne	.-6      	; 0x4ba0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    4ba6:	31 97       	sbiw	r30, 0x01	; 1
    4ba8:	4c 81       	ldd	r20, Y+4	; 0x04
    4baa:	5d 81       	ldd	r21, Y+5	; 0x05
    4bac:	e4 1b       	sub	r30, r20
    4bae:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    4bb0:	89 2d       	mov	r24, r9
    4bb2:	88 0f       	add	r24, r24
    4bb4:	89 0d       	add	r24, r9
    4bb6:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3986
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    4bb8:	61 01       	movw	r12, r2
    4bba:	c8 1a       	sub	r12, r24
    4bbc:	d1 08       	sbc	r13, r1
    4bbe:	d6 94       	lsr	r13
    4bc0:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3987
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    4bc2:	a3 01       	movw	r20, r6
    4bc4:	41 50       	subi	r20, 0x01	; 1
    4bc6:	51 09       	sbc	r21, r1
    4bc8:	4c 0d       	add	r20, r12
    4bca:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    4bcc:	66 e0       	ldi	r22, 0x06	; 6
    4bce:	e6 9f       	mul	r30, r22
    4bd0:	f0 01       	movw	r30, r0
    4bd2:	11 24       	eor	r1, r1
    4bd4:	9e 9e       	mul	r9, r30
    4bd6:	c0 01       	movw	r24, r0
    4bd8:	9f 9e       	mul	r9, r31
    4bda:	90 0d       	add	r25, r0
    4bdc:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    4bde:	69 81       	ldd	r22, Y+1	; 0x01
    4be0:	7a 81       	ldd	r23, Y+2	; 0x02
    4be2:	68 1b       	sub	r22, r24
    4be4:	79 0b       	sbc	r23, r25
    4be6:	76 95       	lsr	r23
    4be8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3987
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    4bea:	64 0d       	add	r22, r4
    4bec:	75 1d       	adc	r23, r5
    4bee:	ee 24       	eor	r14, r14
    4bf0:	ea 94       	dec	r14
    4bf2:	fe 2c       	mov	r15, r14
    4bf4:	10 e0       	ldi	r17, 0x00	; 0
    4bf6:	00 e0       	ldi	r16, 0x00	; 0
    4bf8:	29 2d       	mov	r18, r9
    4bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    4bfe:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    4c02:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3989
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    4c04:	f5 01       	movw	r30, r10
    4c06:	80 81       	ld	r24, Z
    4c08:	88 23       	and	r24, r24
    4c0a:	b9 f1       	breq	.+110    	; 0x4c7a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    4c0c:	01 90       	ld	r0, Z+
    4c0e:	00 20       	and	r0, r0
    4c10:	e9 f7       	brne	.-6      	; 0x4c0c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    4c12:	9f 01       	movw	r18, r30
    4c14:	21 50       	subi	r18, 0x01	; 1
    4c16:	31 09       	sbc	r19, r1
    4c18:	2a 19       	sub	r18, r10
    4c1a:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    4c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1e:	88 0f       	add	r24, r24
    4c20:	fb 81       	ldd	r31, Y+3	; 0x03
    4c22:	8f 0f       	add	r24, r31
    4c24:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    4c26:	a1 01       	movw	r20, r2
    4c28:	48 1b       	sub	r20, r24
    4c2a:	51 09       	sbc	r21, r1
    4c2c:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    4c2e:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	0e 94 30 a2 	call	0x14460	; 0x14460 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    4c36:	51 e0       	ldi	r21, 0x01	; 1
    4c38:	65 1a       	sub	r6, r21
    4c3a:	71 08       	sbc	r7, r1
    4c3c:	c6 0c       	add	r12, r6
    4c3e:	d7 1c       	adc	r13, r7
    4c40:	ab 01       	movw	r20, r22
    4c42:	4c 0d       	add	r20, r12
    4c44:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    4c46:	66 e0       	ldi	r22, 0x06	; 6
    4c48:	26 9f       	mul	r18, r22
    4c4a:	90 01       	movw	r18, r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	f2 9f       	mul	r31, r18
    4c50:	c0 01       	movw	r24, r0
    4c52:	f3 9f       	mul	r31, r19
    4c54:	90 0d       	add	r25, r0
    4c56:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    4c58:	69 81       	ldd	r22, Y+1	; 0x01
    4c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    4c5c:	68 1b       	sub	r22, r24
    4c5e:	79 0b       	sbc	r23, r25
    4c60:	76 95       	lsr	r23
    4c62:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    4c64:	64 0d       	add	r22, r4
    4c66:	75 1d       	adc	r23, r5
    4c68:	ee 24       	eor	r14, r14
    4c6a:	ea 94       	dec	r14
    4c6c:	fe 2c       	mov	r15, r14
    4c6e:	10 e0       	ldi	r17, 0x00	; 0
    4c70:	00 e0       	ldi	r16, 0x00	; 0
    4c72:	2f 2f       	mov	r18, r31
    4c74:	c5 01       	movw	r24, r10
    4c76:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
  }
}
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	ff 90       	pop	r15
    4c8e:	ef 90       	pop	r14
    4c90:	df 90       	pop	r13
    4c92:	cf 90       	pop	r12
    4c94:	bf 90       	pop	r11
    4c96:	af 90       	pop	r10
    4c98:	9f 90       	pop	r9
    4c9a:	8f 90       	pop	r8
    4c9c:	7f 90       	pop	r7
    4c9e:	6f 90       	pop	r6
    4ca0:	5f 90       	pop	r5
    4ca2:	4f 90       	pop	r4
    4ca4:	3f 90       	pop	r3
    4ca6:	2f 90       	pop	r2
    4ca8:	08 95       	ret

00004caa <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
/*
   dynamicke posouvani v menu

*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    4caa:	4f 92       	push	r4
    4cac:	5f 92       	push	r5
    4cae:	6f 92       	push	r6
    4cb0:	7f 92       	push	r7
    4cb2:	8f 92       	push	r8
    4cb4:	9f 92       	push	r9
    4cb6:	af 92       	push	r10
    4cb8:	bf 92       	push	r11
    4cba:	cf 92       	push	r12
    4cbc:	df 92       	push	r13
    4cbe:	ef 92       	push	r14
    4cc0:	ff 92       	push	r15
    4cc2:	0f 93       	push	r16
    4cc4:	cf 93       	push	r28
    4cc6:	df 93       	push	r29
    4cc8:	ec 01       	movw	r28, r24
    4cca:	6b 01       	movw	r12, r22
    4ccc:	2a 01       	movw	r4, r20
    4cce:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4cd0:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4cd4:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    4cd8:	f1 2c       	mov	r15, r1
    4cda:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3914
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    4cdc:	3b 01       	movw	r6, r22
    4cde:	62 0e       	add	r6, r18
    4ce0:	73 1e       	adc	r7, r19
    4ce2:	4c 01       	movw	r8, r24
    4ce4:	84 0e       	add	r8, r20
    4ce6:	95 1e       	adc	r9, r21
    4ce8:	93 01       	movw	r18, r6
    4cea:	2e 19       	sub	r18, r14
    4cec:	3f 09       	sbc	r19, r15
    4cee:	a4 01       	movw	r20, r8
    4cf0:	4e 19       	sub	r20, r14
    4cf2:	5f 09       	sbc	r21, r15
    4cf4:	b7 01       	movw	r22, r14
    4cf6:	6c 0d       	add	r22, r12
    4cf8:	7d 1d       	adc	r23, r13
    4cfa:	c7 01       	movw	r24, r14
    4cfc:	8c 0f       	add	r24, r28
    4cfe:	9d 1f       	adc	r25, r29
    4d00:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    4d04:	8f ef       	ldi	r24, 0xFF	; 255
    4d06:	e8 1a       	sub	r14, r24
    4d08:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    4d0a:	83 e0       	ldi	r24, 0x03	; 3
    4d0c:	e8 16       	cp	r14, r24
    4d0e:	f1 04       	cpc	r15, r1
    4d10:	59 f7       	brne	.-42     	; 0x4ce8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4d12:	8f ef       	ldi	r24, 0xFF	; 255
    4d14:	9f ef       	ldi	r25, 0xFF	; 255
    4d16:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    4d1a:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    4d1e:	83 e0       	ldi	r24, 0x03	; 3
    4d20:	48 1a       	sub	r4, r24
    4d22:	51 08       	sbc	r5, r1
    4d24:	4c 0e       	add	r4, r28
    4d26:	5d 1e       	adc	r5, r29
    4d28:	23 96       	adiw	r28, 0x03	; 3
    4d2a:	95 01       	movw	r18, r10
    4d2c:	23 50       	subi	r18, 0x03	; 3
    4d2e:	31 09       	sbc	r19, r1
    4d30:	2c 0d       	add	r18, r12
    4d32:	3d 1d       	adc	r19, r13
    4d34:	b6 01       	movw	r22, r12
    4d36:	6d 5f       	subi	r22, 0xFD	; 253
    4d38:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3a:	a2 01       	movw	r20, r4
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	0e 94 20 72 	call	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    4d42:	60 91 ca 08 	lds	r22, 0x08CA	; 0x8008ca <menu_slider_data_max>
    4d46:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <menu_slider_data_max_element>
    4d4a:	68 1b       	sub	r22, r24
    4d4c:	77 0b       	sbc	r23, r23
    4d4e:	6f 5f       	subi	r22, 0xFF	; 255
    4d50:	7f 4f       	sbci	r23, 0xFF	; 255
    4d52:	c5 01       	movw	r24, r10
    4d54:	0e 94 30 a2 	call	0x14460	; 0x14460 <__udivmodhi4>
    4d58:	e0 2f       	mov	r30, r16
    4d5a:	f0 e0       	ldi	r31, 0x00	; 0
    4d5c:	ed 53       	subi	r30, 0x3D	; 61
    4d5e:	f7 4f       	sbci	r31, 0xF7	; 247
    4d60:	80 81       	ld	r24, Z
    4d62:	86 9f       	mul	r24, r22
    4d64:	60 2d       	mov	r22, r0
    4d66:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4d68:	8a e9       	ldi	r24, 0x9A	; 154
    4d6a:	96 ed       	ldi	r25, 0xD6	; 214
    4d6c:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    4d70:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    4d74:	6c 0d       	add	r22, r12
    4d76:	7d 2d       	mov	r23, r13
    4d78:	71 1d       	adc	r23, r1
    4d7a:	9b 01       	movw	r18, r22
    4d7c:	26 5f       	subi	r18, 0xF6	; 246
    4d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d80:	6b 5f       	subi	r22, 0xFB	; 251
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	a2 01       	movw	r20, r4
    4d86:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
}
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	0f 91       	pop	r16
    4d8e:	ff 90       	pop	r15
    4d90:	ef 90       	pop	r14
    4d92:	df 90       	pop	r13
    4d94:	cf 90       	pop	r12
    4d96:	bf 90       	pop	r11
    4d98:	af 90       	pop	r10
    4d9a:	9f 90       	pop	r9
    4d9c:	8f 90       	pop	r8
    4d9e:	7f 90       	pop	r7
    4da0:	6f 90       	pop	r6
    4da2:	5f 90       	pop	r5
    4da4:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    4da6:	0c 94 20 72 	jmp	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>

00004daa <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3888
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    4daa:	6f 92       	push	r6
    4dac:	7f 92       	push	r7
    4dae:	8f 92       	push	r8
    4db0:	9f 92       	push	r9
    4db2:	af 92       	push	r10
    4db4:	bf 92       	push	r11
    4db6:	cf 92       	push	r12
    4db8:	df 92       	push	r13
    4dba:	ef 92       	push	r14
    4dbc:	ff 92       	push	r15
    4dbe:	0f 93       	push	r16
    4dc0:	1f 93       	push	r17
    4dc2:	cf 93       	push	r28
    4dc4:	df 93       	push	r29
    4dc6:	6c 01       	movw	r12, r24
    4dc8:	8b 01       	movw	r16, r22
    4dca:	3a 01       	movw	r6, r20
    4dcc:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4dce:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4dd2:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    4dd6:	f1 2c       	mov	r15, r1
    4dd8:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    4dda:	4b 01       	movw	r8, r22
    4ddc:	82 0e       	add	r8, r18
    4dde:	93 1e       	adc	r9, r19
    4de0:	5c 01       	movw	r10, r24
    4de2:	a4 0e       	add	r10, r20
    4de4:	b5 1e       	adc	r11, r21
    4de6:	94 01       	movw	r18, r8
    4de8:	2e 19       	sub	r18, r14
    4dea:	3f 09       	sbc	r19, r15
    4dec:	a5 01       	movw	r20, r10
    4dee:	4e 19       	sub	r20, r14
    4df0:	5f 09       	sbc	r21, r15
    4df2:	b7 01       	movw	r22, r14
    4df4:	60 0f       	add	r22, r16
    4df6:	71 1f       	adc	r23, r17
    4df8:	c7 01       	movw	r24, r14
    4dfa:	8c 0d       	add	r24, r12
    4dfc:	9d 1d       	adc	r25, r13
    4dfe:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    4e02:	2f ef       	ldi	r18, 0xFF	; 255
    4e04:	e2 1a       	sub	r14, r18
    4e06:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3891
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    4e08:	83 e0       	ldi	r24, 0x03	; 3
    4e0a:	e8 16       	cp	r14, r24
    4e0c:	f1 04       	cpc	r15, r1
    4e0e:	59 f7       	brne	.-42     	; 0x4de6 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4e10:	8f ef       	ldi	r24, 0xFF	; 255
    4e12:	9f ef       	ldi	r25, 0xFF	; 255
    4e14:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    4e18:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    4e1c:	9e 01       	movw	r18, r28
    4e1e:	23 50       	subi	r18, 0x03	; 3
    4e20:	31 09       	sbc	r19, r1
    4e22:	20 0f       	add	r18, r16
    4e24:	31 1f       	adc	r19, r17
    4e26:	a3 01       	movw	r20, r6
    4e28:	43 50       	subi	r20, 0x03	; 3
    4e2a:	51 09       	sbc	r21, r1
    4e2c:	4c 0d       	add	r20, r12
    4e2e:	5d 1d       	adc	r21, r13
    4e30:	b8 01       	movw	r22, r16
    4e32:	6d 5f       	subi	r22, 0xFD	; 253
    4e34:	7f 4f       	sbci	r23, 0xFF	; 255
    4e36:	c6 01       	movw	r24, r12
    4e38:	03 96       	adiw	r24, 0x03	; 3
    4e3a:	0e 94 20 72 	call	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4e3e:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4e42:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    4e46:	82 ef       	ldi	r24, 0xF2	; 242
    4e48:	98 e0       	ldi	r25, 0x08	; 8
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	01 90       	ld	r0, Z+
    4e4e:	00 20       	and	r0, r0
    4e50:	e9 f7       	brne	.-6      	; 0x4e4c <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    4e52:	cf 01       	movw	r24, r30
    4e54:	83 5f       	subi	r24, 0xF3	; 243
    4e56:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    4e58:	ae 01       	movw	r20, r28
    4e5a:	4c 50       	subi	r20, 0x0C	; 12
    4e5c:	51 09       	sbc	r21, r1
    4e5e:	56 95       	lsr	r21
    4e60:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    4e62:	01 50       	subi	r16, 0x01	; 1
    4e64:	11 09       	sbc	r17, r1
    4e66:	40 0f       	add	r20, r16
    4e68:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    4e6a:	f6 e0       	ldi	r31, 0x06	; 6
    4e6c:	8f 9f       	mul	r24, r31
    4e6e:	c0 01       	movw	r24, r0
    4e70:	11 24       	eor	r1, r1
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3898
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    4e76:	b3 01       	movw	r22, r6
    4e78:	68 1b       	sub	r22, r24
    4e7a:	79 0b       	sbc	r23, r25
    4e7c:	76 95       	lsr	r23
    4e7e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    4e80:	6c 0d       	add	r22, r12
    4e82:	7d 1d       	adc	r23, r13
    4e84:	ee 24       	eor	r14, r14
    4e86:	ea 94       	dec	r14
    4e88:	fe 2c       	mov	r15, r14
    4e8a:	10 e0       	ldi	r17, 0x00	; 0
    4e8c:	00 e0       	ldi	r16, 0x00	; 0
    4e8e:	22 e0       	ldi	r18, 0x02	; 2
    4e90:	82 ef       	ldi	r24, 0xF2	; 242
    4e92:	98 e0       	ldi	r25, 0x08	; 8
    4e94:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
}
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	ff 90       	pop	r15
    4ea2:	ef 90       	pop	r14
    4ea4:	df 90       	pop	r13
    4ea6:	cf 90       	pop	r12
    4ea8:	bf 90       	pop	r11
    4eaa:	af 90       	pop	r10
    4eac:	9f 90       	pop	r9
    4eae:	8f 90       	pop	r8
    4eb0:	7f 90       	pop	r7
    4eb2:	6f 90       	pop	r6
    4eb4:	08 95       	ret

00004eb6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    4eb6:	4f 92       	push	r4
    4eb8:	5f 92       	push	r5
    4eba:	6f 92       	push	r6
    4ebc:	7f 92       	push	r7
    4ebe:	8f 92       	push	r8
    4ec0:	9f 92       	push	r9
    4ec2:	af 92       	push	r10
    4ec4:	bf 92       	push	r11
    4ec6:	cf 92       	push	r12
    4ec8:	df 92       	push	r13
    4eca:	ef 92       	push	r14
    4ecc:	ff 92       	push	r15
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	cf 93       	push	r28
    4ed4:	df 93       	push	r29
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x22>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x24>
    4eda:	1f 92       	push	r1
    4edc:	1f 92       	push	r1
    4ede:	cd b7       	in	r28, 0x3d	; 61
    4ee0:	de b7       	in	r29, 0x3e	; 62
    4ee2:	6c 01       	movw	r12, r24
    4ee4:	8b 01       	movw	r16, r22
    4ee6:	2a 01       	movw	r4, r20
    4ee8:	39 01       	movw	r6, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4eea:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4eee:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    4ef2:	f1 2c       	mov	r15, r1
    4ef4:	e1 2c       	mov	r14, r1
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
  uint16_t tmp1, posx1, posy1;
  char line1[8];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    4ef6:	4b 01       	movw	r8, r22
    4ef8:	82 0e       	add	r8, r18
    4efa:	93 1e       	adc	r9, r19
    4efc:	5c 01       	movw	r10, r24
    4efe:	a4 0e       	add	r10, r20
    4f00:	b5 1e       	adc	r11, r21
    4f02:	94 01       	movw	r18, r8
    4f04:	2e 19       	sub	r18, r14
    4f06:	3f 09       	sbc	r19, r15
    4f08:	a5 01       	movw	r20, r10
    4f0a:	4e 19       	sub	r20, r14
    4f0c:	5f 09       	sbc	r21, r15
    4f0e:	b7 01       	movw	r22, r14
    4f10:	60 0f       	add	r22, r16
    4f12:	71 1f       	adc	r23, r17
    4f14:	c7 01       	movw	r24, r14
    4f16:	8c 0d       	add	r24, r12
    4f18:	9d 1d       	adc	r25, r13
    4f1a:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    4f1e:	8f ef       	ldi	r24, 0xFF	; 255
    4f20:	e8 1a       	sub	r14, r24
    4f22:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  char line1[8];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    4f24:	93 e0       	ldi	r25, 0x03	; 3
    4f26:	e9 16       	cp	r14, r25
    4f28:	f1 04       	cpc	r15, r1
    4f2a:	59 f7       	brne	.-42     	; 0x4f02 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4f2c:	8f ef       	ldi	r24, 0xFF	; 255
    4f2e:	9f ef       	ldi	r25, 0xFF	; 255
    4f30:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    4f34:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    4f38:	93 01       	movw	r18, r6
    4f3a:	23 50       	subi	r18, 0x03	; 3
    4f3c:	31 09       	sbc	r19, r1
    4f3e:	20 0f       	add	r18, r16
    4f40:	31 1f       	adc	r19, r17
    4f42:	a2 01       	movw	r20, r4
    4f44:	43 50       	subi	r20, 0x03	; 3
    4f46:	51 09       	sbc	r21, r1
    4f48:	4c 0d       	add	r20, r12
    4f4a:	5d 1d       	adc	r21, r13
    4f4c:	b8 01       	movw	r22, r16
    4f4e:	6d 5f       	subi	r22, 0xFD	; 253
    4f50:	7f 4f       	sbci	r23, 0xFF	; 255
    4f52:	c6 01       	movw	r24, r12
    4f54:	03 96       	adiw	r24, 0x03	; 3
    4f56:	0e 94 20 72 	call	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    4f5a:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    4f5e:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    4f62:	4a e0       	ldi	r20, 0x0A	; 10
    4f64:	ce 01       	movw	r24, r28
    4f66:	01 96       	adiw	r24, 0x01	; 1
    4f68:	5c 01       	movw	r10, r24
    4f6a:	bc 01       	movw	r22, r24
    4f6c:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <menu_dialog_set_variable_now>
    4f70:	90 91 c2 08 	lds	r25, 0x08C2	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    4f74:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881

  my_lcd.Set_Draw_color(BLACK);
  itoa(menu_dialog_set_variable_now, line1, 10);
  tmp1 = show_string_size_width(strlen(line1), 2);
    4f78:	f5 01       	movw	r30, r10
    4f7a:	01 90       	ld	r0, Z+
    4f7c:	00 20       	and	r0, r0
    4f7e:	e9 f7       	brne	.-6      	; 0x4f7a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    4f80:	31 97       	sbiw	r30, 0x01	; 1
    4f82:	ea 19       	sub	r30, r10
    4f84:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    4f86:	a3 01       	movw	r20, r6
    4f88:	4c 50       	subi	r20, 0x0C	; 12
    4f8a:	51 09       	sbc	r21, r1
    4f8c:	56 95       	lsr	r21
    4f8e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    4f90:	01 50       	subi	r16, 0x01	; 1
    4f92:	11 09       	sbc	r17, r1
    4f94:	40 0f       	add	r20, r16
    4f96:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    4f98:	96 e0       	ldi	r25, 0x06	; 6
    4f9a:	e9 9f       	mul	r30, r25
    4f9c:	f0 01       	movw	r30, r0
    4f9e:	11 24       	eor	r1, r1
    4fa0:	ee 0f       	add	r30, r30
    4fa2:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  itoa(menu_dialog_set_variable_now, line1, 10);
  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    4fa4:	b2 01       	movw	r22, r4
    4fa6:	6e 1b       	sub	r22, r30
    4fa8:	7f 0b       	sbc	r23, r31
    4faa:	76 95       	lsr	r23
    4fac:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    4fae:	6c 0d       	add	r22, r12
    4fb0:	7d 1d       	adc	r23, r13
    4fb2:	ee 24       	eor	r14, r14
    4fb4:	ea 94       	dec	r14
    4fb6:	fe 2c       	mov	r15, r14
    4fb8:	10 e0       	ldi	r17, 0x00	; 0
    4fba:	00 e0       	ldi	r16, 0x00	; 0
    4fbc:	22 e0       	ldi	r18, 0x02	; 2
    4fbe:	c5 01       	movw	r24, r10
    4fc0:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
}
    4fc4:	28 96       	adiw	r28, 0x08	; 8
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	df 91       	pop	r29
    4fd2:	cf 91       	pop	r28
    4fd4:	1f 91       	pop	r17
    4fd6:	0f 91       	pop	r16
    4fd8:	ff 90       	pop	r15
    4fda:	ef 90       	pop	r14
    4fdc:	df 90       	pop	r13
    4fde:	cf 90       	pop	r12
    4fe0:	bf 90       	pop	r11
    4fe2:	af 90       	pop	r10
    4fe4:	9f 90       	pop	r9
    4fe6:	8f 90       	pop	r8
    4fe8:	7f 90       	pop	r7
    4fea:	6f 90       	pop	r6
    4fec:	5f 90       	pop	r5
    4fee:	4f 90       	pop	r4
    4ff0:	08 95       	ret

00004ff2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    4ff2:	af 92       	push	r10
    4ff4:	bf 92       	push	r11
    4ff6:	cf 92       	push	r12
    4ff8:	df 92       	push	r13
    4ffa:	ef 92       	push	r14
    4ffc:	ff 92       	push	r15
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	cd b7       	in	r28, 0x3d	; 61
    5008:	de b7       	in	r29, 0x3e	; 62
    500a:	60 97       	sbiw	r28, 0x10	; 16
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	de bf       	out	0x3e, r29	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	cd bf       	out	0x3d, r28	; 61
    5016:	5c 01       	movw	r10, r24
    5018:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    501a:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    501e:	9e 01       	movw	r18, r28
    5020:	2f 5f       	subi	r18, 0xFF	; 255
    5022:	3f 4f       	sbci	r19, 0xFF	; 255
    5024:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    5026:	80 fd       	sbrc	r24, 0
    5028:	4e c0       	rjmp	.+156    	; 0x50c6 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    502a:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <now>
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	80 53       	subi	r24, 0x30	; 48
    5032:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    5034:	9f 93       	push	r25
    5036:	8f 93       	push	r24
    5038:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <now+0x1>
    503c:	1f 92       	push	r1
    503e:	8f 93       	push	r24
    5040:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <now+0x2>
    5044:	1f 92       	push	r1
    5046:	8f 93       	push	r24
    5048:	88 e3       	ldi	r24, 0x38	; 56
    504a:	93 e0       	ldi	r25, 0x03	; 3
    504c:	9f 93       	push	r25
    504e:	8f 93       	push	r24
    5050:	3f 93       	push	r19
    5052:	2f 93       	push	r18
    5054:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
    5058:	0f b6       	in	r0, 0x3f	; 63
    505a:	f8 94       	cli
    505c:	de bf       	out	0x3e, r29	; 62
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5062:	8f ef       	ldi	r24, 0xFF	; 255
    5064:	9f ef       	ldi	r25, 0xFF	; 255
    5066:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    506a:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    506e:	4e e8       	ldi	r20, 0x8E	; 142
    5070:	50 e0       	ldi	r21, 0x00	; 0
    5072:	b8 01       	movw	r22, r16
    5074:	c5 01       	movw	r24, r10
    5076:	0e 94 b1 71 	call	0xe362	; 0xe362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    507a:	b8 01       	movw	r22, r16
    507c:	6f 5f       	subi	r22, 0xFF	; 255
    507e:	7f 4f       	sbci	r23, 0xFF	; 255
    5080:	4e e8       	ldi	r20, 0x8E	; 142
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	c5 01       	movw	r24, r10
    5086:	0e 94 b1 71 	call	0xe362	; 0xe362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    508a:	a8 01       	movw	r20, r16
    508c:	4e 5f       	subi	r20, 0xFE	; 254
    508e:	5f 4f       	sbci	r21, 0xFF	; 255
    5090:	ee 24       	eor	r14, r14
    5092:	ea 94       	dec	r14
    5094:	fe 2c       	mov	r15, r14
    5096:	10 e0       	ldi	r17, 0x00	; 0
    5098:	00 e0       	ldi	r16, 0x00	; 0
    509a:	23 e0       	ldi	r18, 0x03	; 3
    509c:	b5 01       	movw	r22, r10
    509e:	c6 01       	movw	r24, r12
    50a0:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
}
    50a4:	60 96       	adiw	r28, 0x10	; 16
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	ff 90       	pop	r15
    50ba:	ef 90       	pop	r14
    50bc:	df 90       	pop	r13
    50be:	cf 90       	pop	r12
    50c0:	bf 90       	pop	r11
    50c2:	af 90       	pop	r10
    50c4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    50c6:	67 e4       	ldi	r22, 0x47	; 71
    50c8:	73 e0       	ldi	r23, 0x03	; 3
    50ca:	c9 01       	movw	r24, r18
    50cc:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
    50d0:	c8 cf       	rjmp	.-112    	; 0x5062 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

000050d2 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    50d2:	8f 92       	push	r8
    50d4:	9f 92       	push	r9
    50d6:	af 92       	push	r10
    50d8:	bf 92       	push	r11
    50da:	cf 92       	push	r12
    50dc:	df 92       	push	r13
    50de:	ef 92       	push	r14
    50e0:	ff 92       	push	r15
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1293
  uint16_t size_y;
  uint16_t color_background;
  uint8_t args;
  Menu1 *current;

  current = MenuHistoryGetMenu();
    50ea:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <MenuHistoryGetMenu()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1294
  attr = pgm_read_byte(&current->atributes);
    50ee:	fc 01       	movw	r30, r24
    50f0:	ee 50       	subi	r30, 0x0E	; 14
    50f2:	fe 4f       	sbci	r31, 0xFE	; 254
    50f4:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1295
  x = pgm_read_word(&current->x);
    50f6:	38 97       	sbiw	r30, 0x08	; 8
    50f8:	05 91       	lpm	r16, Z+
    50fa:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1296
  y = pgm_read_word(&current->y);
    50fc:	fc 01       	movw	r30, r24
    50fe:	e4 51       	subi	r30, 0x14	; 20
    5100:	fe 4f       	sbci	r31, 0xFE	; 254
    5102:	c5 91       	lpm	r28, Z+
    5104:	d4 91       	lpm	r29, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1297
  size_x = pgm_read_word(&current->size_x);
    5106:	fc 01       	movw	r30, r24
    5108:	e2 51       	subi	r30, 0x12	; 18
    510a:	fe 4f       	sbci	r31, 0xFE	; 254
    510c:	c5 90       	lpm	r12, Z+
    510e:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1298
  size_y = pgm_read_word(&current->size_y);
    5110:	fc 01       	movw	r30, r24
    5112:	e0 51       	subi	r30, 0x10	; 16
    5114:	fe 4f       	sbci	r31, 0xFE	; 254
    5116:	e5 90       	lpm	r14, Z+
    5118:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1299
  color_background = pgm_read_word(&current->color_background);
    511a:	8d 50       	subi	r24, 0x0D	; 13
    511c:	9e 4f       	sbci	r25, 0xFE	; 254
    511e:	fc 01       	movw	r30, r24
    5120:	a5 90       	lpm	r10, Z+
    5122:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1301

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    5124:	90 fe       	sbrs	r9, 0
    5126:	03 c0       	rjmp	.+6      	; 0x512e <MenuPrepareStyle()+0x5c>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380

}
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    5128:	c5 01       	movw	r24, r10
    512a:	0e 94 5a 72 	call	0xe4b4	; 0xe4b4 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.169]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    512e:	91 fe       	sbrs	r9, 1
    5130:	0e c0       	rjmp	.+28     	; 0x514e <MenuPrepareStyle()+0x7c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5132:	b0 92 d4 0d 	sts	0x0DD4, r11	; 0x800dd4 <my_lcd+0xb>
    5136:	a0 92 d3 0d 	sts	0x0DD3, r10	; 0x800dd3 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    513a:	9e 01       	movw	r18, r28
    513c:	2e 0d       	add	r18, r14
    513e:	3f 1d       	adc	r19, r15
    5140:	a8 01       	movw	r20, r16
    5142:	4c 0d       	add	r20, r12
    5144:	5d 1d       	adc	r21, r13
    5146:	be 01       	movw	r22, r28
    5148:	c8 01       	movw	r24, r16
    514a:	0e 94 20 72 	call	0xe440	; 0xe440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    514e:	92 fe       	sbrs	r9, 2
    5150:	28 c0       	rjmp	.+80     	; 0x51a2 <MenuPrepareStyle()+0xd0>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5152:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    5156:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    515a:	b1 2c       	mov	r11, r1
    515c:	a1 2c       	mov	r10, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1317
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    515e:	ec 0e       	add	r14, r28
    5160:	fd 1e       	adc	r15, r29
    5162:	48 01       	movw	r8, r16
    5164:	8c 0c       	add	r8, r12
    5166:	9d 1c       	adc	r9, r13
    5168:	97 01       	movw	r18, r14
    516a:	2a 19       	sub	r18, r10
    516c:	3b 09       	sbc	r19, r11
    516e:	a4 01       	movw	r20, r8
    5170:	4a 19       	sub	r20, r10
    5172:	5b 09       	sbc	r21, r11
    5174:	be 01       	movw	r22, r28
    5176:	c8 01       	movw	r24, r16
    5178:	8a 0d       	add	r24, r10
    517a:	9b 1d       	adc	r25, r11
    517c:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1318
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    5180:	a6 01       	movw	r20, r12
    5182:	4a 19       	sub	r20, r10
    5184:	5b 09       	sbc	r21, r11
    5186:	be 01       	movw	r22, r28
    5188:	69 5e       	subi	r22, 0xE9	; 233
    518a:	7f 4f       	sbci	r23, 0xFF	; 255
    518c:	c8 01       	movw	r24, r16
    518e:	0e 94 b1 71 	call	0xe362	; 0xe362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
    5192:	8f ef       	ldi	r24, 0xFF	; 255
    5194:	a8 1a       	sub	r10, r24
    5196:	b8 0a       	sbc	r11, r24
    5198:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    519a:	84 e0       	ldi	r24, 0x04	; 4
    519c:	a8 16       	cp	r10, r24
    519e:	b1 04       	cpc	r11, r1
    51a0:	19 f7       	brne	.-58     	; 0x5168 <MenuPrepareStyle()+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1322
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }

}
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	1f 91       	pop	r17
    51a8:	0f 91       	pop	r16
    51aa:	ff 90       	pop	r15
    51ac:	ef 90       	pop	r14
    51ae:	df 90       	pop	r13
    51b0:	cf 90       	pop	r12
    51b2:	bf 90       	pop	r11
    51b4:	af 90       	pop	r10
    51b6:	9f 90       	pop	r9
    51b8:	8f 90       	pop	r8
    51ba:	08 95       	ret

000051bc <MenuHistoryNextMenu(unsigned char)>:
_Z19MenuHistoryNextMenuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1343
  }
}
///
void MenuHistoryNextMenu(uint8_t id)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    51bc:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <MenuHistoryIndex>
    51c0:	ea 30       	cpi	r30, 0x0A	; 10
    51c2:	48 f4       	brcc	.+18     	; 0x51d6 <MenuHistoryNextMenu(unsigned char)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
  {
    MenuHistoryIndex++;
    51c4:	ef 5f       	subi	r30, 0xFF	; 255
    51c6:	e0 93 84 08 	sts	0x0884, r30	; 0x800884 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
    MenuHistory[MenuHistoryIndex] = id;
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	e6 58       	subi	r30, 0x86	; 134
    51ce:	f7 4f       	sbci	r31, 0xF7	; 247
    51d0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1347
    MenuPrepareStyle();
    51d2:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1349
  }
}
    51d6:	08 95       	ret

000051d8 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t idx)
{
    51d8:	ef 92       	push	r14
    51da:	ff 92       	push	r15
    51dc:	1f 93       	push	r17
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4170
  printf("%d %d\n", args1, idx);
    51e4:	e6 2e       	mov	r14, r22
    51e6:	f1 2c       	mov	r15, r1
    51e8:	1f 92       	push	r1
    51ea:	6f 93       	push	r22
    51ec:	1f 92       	push	r1
    51ee:	8f 93       	push	r24
    51f0:	82 e4       	ldi	r24, 0x42	; 66
    51f2:	94 e0       	ldi	r25, 0x04	; 4
    51f4:	9f 93       	push	r25
    51f6:	8f 93       	push	r24
    51f8:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
  if (w_rom[idx].tds_idx == 255)
    51fc:	8b e0       	ldi	r24, 0x0B	; 11
    51fe:	8e 9d       	mul	r24, r14
    5200:	e0 01       	movw	r28, r0
    5202:	8f 9d       	mul	r24, r15
    5204:	d0 0d       	add	r29, r0
    5206:	11 24       	eor	r1, r1
    5208:	cf 52       	subi	r28, 0x2F	; 47
    520a:	d6 4f       	sbci	r29, 0xF6	; 246
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	0f 90       	pop	r0
    5214:	0f 90       	pop	r0
    5216:	0f 90       	pop	r0
    5218:	8a 85       	ldd	r24, Y+10	; 0x0a
    521a:	8f 3f       	cpi	r24, 0xFF	; 255
    521c:	b1 f4       	brne	.+44     	; 0x524a <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4173
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO);
    521e:	84 e6       	ldi	r24, 0x64	; 100
    5220:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4174
    dialog_yes_function = &tds_associate;
    5224:	8c ee       	ldi	r24, 0xEC	; 236
    5226:	96 e4       	ldi	r25, 0x46	; 70
    5228:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <dialog_yes_function+0x1>
    522c:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4175
    dialog_yes_args1 = idx;
    5230:	10 93 eb 08 	sts	0x08EB, r17	; 0x8008eb <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4176
    strcpy_P(dialog_text, text_associovat_tds);
    5234:	6f e7       	ldi	r22, 0x7F	; 127
    5236:	78 e2       	ldi	r23, 0x28	; 40
    5238:	8b ec       	ldi	r24, 0xCB	; 203
    523a:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4183
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS);
    menu_tds_args = w_rom[idx].tds_idx;
  }
}
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	ff 90       	pop	r15
    5244:	ef 90       	pop	r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4176
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    5246:	0c 94 69 98 	jmp	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS);
    524a:	84 e0       	ldi	r24, 0x04	; 4
    524c:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
    menu_tds_args = w_rom[idx].tds_idx;
    5250:	8a 85       	ldd	r24, Y+10	; 0x0a
    5252:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <menu_tds_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4183
  }
}
    5256:	df 91       	pop	r29
    5258:	cf 91       	pop	r28
    525a:	1f 91       	pop	r17
    525c:	ff 90       	pop	r15
    525e:	ef 90       	pop	r14
    5260:	08 95       	ret

00005262 <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333

/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{

  if (MenuHistoryIndex > 0)
    5262:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <MenuHistoryIndex>
    5266:	88 23       	and	r24, r24
    5268:	29 f0       	breq	.+10     	; 0x5274 <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1335
  {
    MenuHistoryIndex--;
    526a:	81 50       	subi	r24, 0x01	; 1
    526c:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
    MenuPrepareStyle();
    5270:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339

  }
}
    5274:	08 95       	ret

00005276 <dialog_set_variable_button_click(unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1616
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2)
{
  dialog_save_variable_function(args1, args2);
    5276:	70 e0       	ldi	r23, 0x00	; 0
    5278:	e0 91 f0 08 	lds	r30, 0x08F0	; 0x8008f0 <dialog_save_variable_function>
    527c:	f0 91 f1 08 	lds	r31, 0x08F1	; 0x8008f1 <dialog_save_variable_function+0x1>
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1617
  MenuHistoryPrevMenu();
    5284:	0c 94 31 29 	jmp	0x5262	; 0x5262 <MenuHistoryPrevMenu()>

00005288 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1610
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0);
    5288:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <dialog_yes_args1>
    528c:	e0 91 ec 08 	lds	r30, 0x08EC	; 0x8008ec <dialog_yes_function>
    5290:	f0 91 ed 08 	lds	r31, 0x08ED	; 0x8008ed <dialog_yes_function+0x1>
    5294:	70 e0       	ldi	r23, 0x00	; 0
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1611
  MenuHistoryPrevMenu();
    529c:	0c 94 31 29 	jmp	0x5262	; 0x5262 <MenuHistoryPrevMenu()>

000052a0 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    52a0:	cf 93       	push	r28
    52a2:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    52a4:	68 2f       	mov	r22, r24
    52a6:	8c e7       	ldi	r24, 0x7C	; 124
    52a8:	9b e0       	ldi	r25, 0x0B	; 11
    52aa:	0e 94 f8 6c 	call	0xd9f0	; 0xd9f0 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    52ae:	8c 2f       	mov	r24, r28
    52b0:	cc 0f       	add	r28, r28
    52b2:	99 0b       	sbc	r25, r25
    52b4:	cf 91       	pop	r28
    52b6:	08 95       	ret

000052b8 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    52b8:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    52ba:	82 95       	swap	r24
    52bc:	88 0f       	add	r24, r24
    52be:	80 7e       	andi	r24, 0xE0	; 224
    52c0:	68 e0       	ldi	r22, 0x08	; 8
    52c2:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    52c4:	c9 01       	movw	r24, r18
    52c6:	0c 94 c2 84 	jmp	0x10984	; 0x10984 <W5500Class::read(unsigned int, unsigned char)>

000052ca <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    52ca:	df 92       	push	r13
    52cc:	ef 92       	push	r14
    52ce:	ff 92       	push	r15
    52d0:	0f 93       	push	r16
    52d2:	1f 93       	push	r17
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    52d8:	fc 01       	movw	r30, r24
    52da:	24 85       	ldd	r18, Z+12	; 0x0c
    52dc:	28 30       	cpi	r18, 0x08	; 8
    52de:	51 f0       	breq	.+20     	; 0x52f4 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    52e4:	df 91       	pop	r29
    52e6:	cf 91       	pop	r28
    52e8:	1f 91       	pop	r17
    52ea:	0f 91       	pop	r16
    52ec:	ff 90       	pop	r15
    52ee:	ef 90       	pop	r14
    52f0:	df 90       	pop	r13
    52f2:	08 95       	ret
    52f4:	7a 01       	movw	r14, r20
    52f6:	eb 01       	movw	r28, r22
    52f8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    52fa:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    52fc:	63 e0       	ldi	r22, 0x03	; 3
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	8d 2d       	mov	r24, r13
    5302:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5306:	81 11       	cpse	r24, r1
    5308:	28 c0       	rjmp	.+80     	; 0x535a <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    530a:	f8 01       	movw	r30, r16
    530c:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    530e:	f8 01       	movw	r30, r16
    5310:	84 85       	ldd	r24, Z+12	; 0x0c
    5312:	88 30       	cpi	r24, 0x08	; 8
    5314:	29 f3       	breq	.-54     	; 0x52e0 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    5316:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    531a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    531e:	2f 5f       	subi	r18, 0xFF	; 255
    5320:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    5322:	19 f1       	breq	.+70     	; 0x536a <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    5324:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    5328:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    532c:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    5330:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    5334:	61 e0       	ldi	r22, 0x01	; 1
    5336:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    533a:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    533c:	8f 3f       	cpi	r24, 0xFF	; 255
    533e:	c1 f4       	brne	.+48     	; 0x5370 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    5340:	8b 81       	ldd	r24, Y+3	; 0x03
    5342:	8f 3f       	cpi	r24, 0xFF	; 255
    5344:	01 f5       	brne	.+64     	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5346:	8c 81       	ldd	r24, Y+4	; 0x04
    5348:	8f 3f       	cpi	r24, 0xFF	; 255
    534a:	e9 f4       	brne	.+58     	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    534c:	8d 81       	ldd	r24, Y+5	; 0x05
    534e:	8f 3f       	cpi	r24, 0xFF	; 255
    5350:	d1 f4       	brne	.+52     	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    5352:	88 e0       	ldi	r24, 0x08	; 8
    5354:	f8 01       	movw	r30, r16
    5356:	84 87       	std	Z+12, r24	; 0x0c
    5358:	c3 cf       	rjmp	.-122    	; 0x52e0 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    535a:	8b 7f       	andi	r24, 0xFB	; 251
    535c:	88 31       	cpi	r24, 0x18	; 24
    535e:	a9 f2       	breq	.-86     	; 0x530a <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    5360:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5362:	f8 e0       	ldi	r31, 0x08	; 8
    5364:	df 12       	cpse	r13, r31
    5366:	ca cf       	rjmp	.-108    	; 0x52fc <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    5368:	d2 cf       	rjmp	.-92     	; 0x530e <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    536a:	20 e0       	ldi	r18, 0x00	; 0
    536c:	34 e0       	ldi	r19, 0x04	; 4
    536e:	da cf       	rjmp	.-76     	; 0x5324 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    5370:	81 11       	cpse	r24, r1
    5372:	09 c0       	rjmp	.+18     	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	81 11       	cpse	r24, r1
    5378:	06 c0       	rjmp	.+12     	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    537a:	8c 81       	ldd	r24, Y+4	; 0x04
    537c:	81 11       	cpse	r24, r1
    537e:	03 c0       	rjmp	.+6      	; 0x5386 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    5380:	8d 81       	ldd	r24, Y+5	; 0x05
    5382:	88 23       	and	r24, r24
    5384:	31 f3       	breq	.-52     	; 0x5352 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    5386:	e1 14       	cp	r14, r1
    5388:	f1 04       	cpc	r15, r1
    538a:	19 f3       	breq	.-58     	; 0x5352 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    538c:	f8 01       	movw	r30, r16
    538e:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5390:	ae 01       	movw	r20, r28
    5392:	4e 5f       	subi	r20, 0xFE	; 254
    5394:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    5396:	6d 2d       	mov	r22, r13
    5398:	62 95       	swap	r22
    539a:	66 0f       	add	r22, r22
    539c:	60 7e       	andi	r22, 0xE0	; 224
    539e:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    53a0:	24 e0       	ldi	r18, 0x04	; 4
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	8c e0       	ldi	r24, 0x0C	; 12
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    53ac:	4f 2d       	mov	r20, r15
    53ae:	60 e1       	ldi	r22, 0x10	; 16
    53b0:	70 e0       	ldi	r23, 0x00	; 0
    53b2:	8d 2d       	mov	r24, r13
    53b4:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    53b8:	4e 2d       	mov	r20, r14
    53ba:	61 e1       	ldi	r22, 0x11	; 17
    53bc:	70 e0       	ldi	r23, 0x00	; 0
    53be:	8d 2d       	mov	r24, r13
    53c0:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    53c4:	64 e0       	ldi	r22, 0x04	; 4
    53c6:	70 e0       	ldi	r23, 0x00	; 0
    53c8:	8d 2d       	mov	r24, r13
    53ca:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    53ce:	c8 01       	movw	r24, r16
    53d0:	0e 94 07 89 	call	0x1120e	; 0x1120e <EthernetClient::status()>
    53d4:	87 31       	cpi	r24, 0x17	; 23
    53d6:	61 f0       	breq	.+24     	; 0x53f0 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    53d8:	61 e0       	ldi	r22, 0x01	; 1
    53da:	70 e0       	ldi	r23, 0x00	; 0
    53dc:	80 e0       	ldi	r24, 0x00	; 0
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    53e4:	c8 01       	movw	r24, r16
    53e6:	0e 94 07 89 	call	0x1120e	; 0x1120e <EthernetClient::status()>
    53ea:	81 11       	cpse	r24, r1
    53ec:	f0 cf       	rjmp	.-32     	; 0x53ce <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    53ee:	b1 cf       	rjmp	.-158    	; 0x5352 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	77 cf       	rjmp	.-274    	; 0x52e4 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

000053f6 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    53f6:	4f 92       	push	r4
    53f8:	5f 92       	push	r5
    53fa:	6f 92       	push	r6
    53fc:	7f 92       	push	r7
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	cf 92       	push	r12
    5408:	df 92       	push	r13
    540a:	ef 92       	push	r14
    540c:	ff 92       	push	r15
    540e:	0f 93       	push	r16
    5410:	1f 93       	push	r17
    5412:	cf 93       	push	r28
    5414:	df 93       	push	r29
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	63 97       	sbiw	r28, 0x13	; 19
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	de bf       	out	0x3e, r29	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	cd bf       	out	0x3d, r28	; 61
    5426:	7c 01       	movw	r14, r24
    5428:	6b 01       	movw	r12, r22
    542a:	3a 01       	movw	r6, r20
    542c:	fb 01       	movw	r30, r22
    542e:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    5430:	8d 91       	ld	r24, X+
    5432:	81 11       	cpse	r24, r1
    5434:	fd cf       	rjmp	.-6      	; 0x5430 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    543e:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    5440:	41 91       	ld	r20, Z+
    5442:	44 23       	and	r20, r20
    5444:	01 f1       	breq	.+64     	; 0x5486 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    5446:	84 30       	cpi	r24, 0x04	; 4
    5448:	91 05       	cpc	r25, r1
    544a:	0c f0       	brlt	.+2      	; 0x544e <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    544c:	42 c0       	rjmp	.+132    	; 0x54d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    544e:	4e 32       	cpi	r20, 0x2E	; 46
    5450:	69 f4       	brne	.+26     	; 0x546c <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    5452:	2f 3f       	cpi	r18, 0xFF	; 255
    5454:	31 05       	cpc	r19, r1
    5456:	09 f0       	breq	.+2      	; 0x545a <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    5458:	e4 f5       	brge	.+120    	; 0x54d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    545a:	d3 01       	movw	r26, r6
    545c:	a8 0f       	add	r26, r24
    545e:	b9 1f       	adc	r27, r25
    5460:	12 96       	adiw	r26, 0x02	; 2
    5462:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    5464:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	ea cf       	rjmp	.-44     	; 0x5440 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    546c:	52 9f       	mul	r21, r18
    546e:	b0 01       	movw	r22, r0
    5470:	53 9f       	mul	r21, r19
    5472:	70 0d       	add	r23, r0
    5474:	11 24       	eor	r1, r1
    5476:	24 2f       	mov	r18, r20
    5478:	44 0f       	add	r20, r20
    547a:	33 0b       	sbc	r19, r19
    547c:	20 53       	subi	r18, 0x30	; 48
    547e:	31 09       	sbc	r19, r1
    5480:	26 0f       	add	r18, r22
    5482:	37 1f       	adc	r19, r23
    5484:	dd cf       	rjmp	.-70     	; 0x5440 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    5486:	2f 3f       	cpi	r18, 0xFF	; 255
    5488:	31 05       	cpc	r19, r1
    548a:	09 f0       	breq	.+2      	; 0x548e <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    548c:	14 f5       	brge	.+68     	; 0x54d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    548e:	84 30       	cpi	r24, 0x04	; 4
    5490:	91 05       	cpc	r25, r1
    5492:	fc f4       	brge	.+62     	; 0x54d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    5494:	68 0e       	add	r6, r24
    5496:	79 1e       	adc	r7, r25
    5498:	f3 01       	movw	r30, r6
    549a:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    549c:	cc 24       	eor	r12, r12
    549e:	c3 94       	inc	r12
    54a0:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    54a2:	c6 01       	movw	r24, r12
    54a4:	63 96       	adiw	r28, 0x13	; 19
    54a6:	0f b6       	in	r0, 0x3f	; 63
    54a8:	f8 94       	cli
    54aa:	de bf       	out	0x3e, r29	; 62
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	cd bf       	out	0x3d, r28	; 61
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	cf 90       	pop	r12
    54c0:	bf 90       	pop	r11
    54c2:	af 90       	pop	r10
    54c4:	9f 90       	pop	r9
    54c6:	8f 90       	pop	r8
    54c8:	7f 90       	pop	r7
    54ca:	6f 90       	pop	r6
    54cc:	5f 90       	pop	r5
    54ce:	4f 90       	pop	r4
    54d0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    54d2:	f7 01       	movw	r30, r14
    54d4:	42 81       	ldd	r20, Z+2	; 0x02
    54d6:	53 81       	ldd	r21, Z+3	; 0x03
    54d8:	64 81       	ldd	r22, Z+4	; 0x04
    54da:	75 81       	ldd	r23, Z+5	; 0x05
    54dc:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <_ZL11INADDR_NONE.lto_priv.195+0x2>
    54e0:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <_ZL11INADDR_NONE.lto_priv.195+0x3>
    54e4:	a0 91 2a 0c 	lds	r26, 0x0C2A	; 0x800c2a <_ZL11INADDR_NONE.lto_priv.195+0x4>
    54e8:	b0 91 2b 0c 	lds	r27, 0x0C2B	; 0x800c2b <_ZL11INADDR_NONE.lto_priv.195+0x5>
    54ec:	48 17       	cp	r20, r24
    54ee:	59 07       	cpc	r21, r25
    54f0:	6a 07       	cpc	r22, r26
    54f2:	7b 07       	cpc	r23, r27
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    54f6:	00 c2       	rjmp	.+1024   	; 0x58f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    54f8:	87 01       	movw	r16, r14
    54fa:	08 5f       	subi	r16, 0xF8	; 248
    54fc:	1f 4f       	sbci	r17, 0xFF	; 255
    54fe:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    5502:	6f 70       	andi	r22, 0x0F	; 15
    5504:	77 27       	eor	r23, r23
    5506:	7c 5f       	subi	r23, 0xFC	; 252
    5508:	c8 01       	movw	r24, r16
    550a:	0e 94 fd 87 	call	0x10ffa	; 0x10ffa <EthernetUDP::begin(unsigned int)>
    550e:	81 30       	cpi	r24, 0x01	; 1
    5510:	09 f0       	breq	.+2      	; 0x5514 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    5512:	f7 c1       	rjmp	.+1006   	; 0x5902 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5514:	82 ee       	ldi	r24, 0xE2	; 226
    5516:	92 e0       	ldi	r25, 0x02	; 2
    5518:	9a 83       	std	Y+2, r25	; 0x02
    551a:	89 83       	std	Y+1, r24	; 0x01
    551c:	f7 01       	movw	r30, r14
    551e:	82 81       	ldd	r24, Z+2	; 0x02
    5520:	93 81       	ldd	r25, Z+3	; 0x03
    5522:	a4 81       	ldd	r26, Z+4	; 0x04
    5524:	b5 81       	ldd	r27, Z+5	; 0x05
    5526:	8b 83       	std	Y+3, r24	; 0x03
    5528:	9c 83       	std	Y+4, r25	; 0x04
    552a:	ad 83       	std	Y+5, r26	; 0x05
    552c:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    552e:	45 e3       	ldi	r20, 0x35	; 53
    5530:	50 e0       	ldi	r21, 0x00	; 0
    5532:	be 01       	movw	r22, r28
    5534:	6f 5f       	subi	r22, 0xFF	; 255
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	c8 01       	movw	r24, r16
    553a:	0e 94 c8 88 	call	0x11190	; 0x11190 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    553e:	89 2b       	or	r24, r25
    5540:	31 f4       	brne	.+12     	; 0x554e <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    5542:	d1 2c       	mov	r13, r1
    5544:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    5546:	c8 01       	movw	r24, r16
    5548:	0e 94 2b 88 	call	0x11056	; 0x11056 <EthernetUDP::stop()>
    554c:	aa cf       	rjmp	.-172    	; 0x54a2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    554e:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    5552:	f7 01       	movw	r30, r14
    5554:	77 83       	std	Z+7, r23	; 0x07
    5556:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    5558:	42 e0       	ldi	r20, 0x02	; 2
    555a:	50 e0       	ldi	r21, 0x00	; 0
    555c:	b7 01       	movw	r22, r14
    555e:	6a 5f       	subi	r22, 0xFA	; 250
    5560:	7f 4f       	sbci	r23, 0xFF	; 255
    5562:	c8 01       	movw	r24, r16
    5564:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	9a 83       	std	Y+2, r25	; 0x02
    556e:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5570:	42 e0       	ldi	r20, 0x02	; 2
    5572:	50 e0       	ldi	r21, 0x00	; 0
    5574:	be 01       	movw	r22, r28
    5576:	6f 5f       	subi	r22, 0xFF	; 255
    5578:	7f 4f       	sbci	r23, 0xFF	; 255
    557a:	c8 01       	movw	r24, r16
    557c:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	91 e0       	ldi	r25, 0x01	; 1
    5584:	9a 83       	std	Y+2, r25	; 0x02
    5586:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5588:	42 e0       	ldi	r20, 0x02	; 2
    558a:	50 e0       	ldi	r21, 0x00	; 0
    558c:	be 01       	movw	r22, r28
    558e:	6f 5f       	subi	r22, 0xFF	; 255
    5590:	7f 4f       	sbci	r23, 0xFF	; 255
    5592:	c8 01       	movw	r24, r16
    5594:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    5598:	1a 82       	std	Y+2, r1	; 0x02
    559a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    559c:	42 e0       	ldi	r20, 0x02	; 2
    559e:	50 e0       	ldi	r21, 0x00	; 0
    55a0:	be 01       	movw	r22, r28
    55a2:	6f 5f       	subi	r22, 0xFF	; 255
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	c8 01       	movw	r24, r16
    55a8:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    55ac:	42 e0       	ldi	r20, 0x02	; 2
    55ae:	50 e0       	ldi	r21, 0x00	; 0
    55b0:	be 01       	movw	r22, r28
    55b2:	6f 5f       	subi	r22, 0xFF	; 255
    55b4:	7f 4f       	sbci	r23, 0xFF	; 255
    55b6:	c8 01       	movw	r24, r16
    55b8:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    55bc:	42 e0       	ldi	r20, 0x02	; 2
    55be:	50 e0       	ldi	r21, 0x00	; 0
    55c0:	be 01       	movw	r22, r28
    55c2:	6f 5f       	subi	r22, 0xFF	; 255
    55c4:	7f 4f       	sbci	r23, 0xFF	; 255
    55c6:	c8 01       	movw	r24, r16
    55c8:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    55cc:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    55ce:	f6 01       	movw	r30, r12
    55d0:	80 81       	ld	r24, Z
    55d2:	88 23       	and	r24, r24
    55d4:	01 f1       	breq	.+64     	; 0x5616 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    55d6:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    55d8:	f6 01       	movw	r30, r12
    55da:	81 91       	ld	r24, Z+
    55dc:	2f 01       	movw	r4, r30
    55de:	88 23       	and	r24, r24
    55e0:	11 f0       	breq	.+4      	; 0x55e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    55e2:	8e 32       	cpi	r24, 0x2E	; 46
    55e4:	b1 f4       	brne	.+44     	; 0x5612 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    55e6:	46 01       	movw	r8, r12
    55e8:	8a 18       	sub	r8, r10
    55ea:	9b 08       	sbc	r9, r11
    55ec:	18 14       	cp	r1, r8
    55ee:	19 04       	cpc	r1, r9
    55f0:	74 f4       	brge	.+28     	; 0x560e <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    55f2:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    55f4:	41 e0       	ldi	r20, 0x01	; 1
    55f6:	50 e0       	ldi	r21, 0x00	; 0
    55f8:	be 01       	movw	r22, r28
    55fa:	63 5f       	subi	r22, 0xF3	; 243
    55fc:	7f 4f       	sbci	r23, 0xFF	; 255
    55fe:	c8 01       	movw	r24, r16
    5600:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    5604:	a4 01       	movw	r20, r8
    5606:	b5 01       	movw	r22, r10
    5608:	c8 01       	movw	r24, r16
    560a:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    560e:	52 01       	movw	r10, r4
    5610:	de cf       	rjmp	.-68     	; 0x55ce <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    5612:	62 01       	movw	r12, r4
    5614:	e1 cf       	rjmp	.-62     	; 0x55d8 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    5616:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    5618:	41 e0       	ldi	r20, 0x01	; 1
    561a:	50 e0       	ldi	r21, 0x00	; 0
    561c:	be 01       	movw	r22, r28
    561e:	63 5f       	subi	r22, 0xF3	; 243
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
    5622:	c8 01       	movw	r24, r16
    5624:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    5628:	c1 2c       	mov	r12, r1
    562a:	dd 24       	eor	r13, r13
    562c:	d3 94       	inc	r13
    562e:	da 82       	std	Y+2, r13	; 0x02
    5630:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5632:	42 e0       	ldi	r20, 0x02	; 2
    5634:	50 e0       	ldi	r21, 0x00	; 0
    5636:	be 01       	movw	r22, r28
    5638:	6f 5f       	subi	r22, 0xFF	; 255
    563a:	7f 4f       	sbci	r23, 0xFF	; 255
    563c:	c8 01       	movw	r24, r16
    563e:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    5642:	da 82       	std	Y+2, r13	; 0x02
    5644:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5646:	42 e0       	ldi	r20, 0x02	; 2
    5648:	50 e0       	ldi	r21, 0x00	; 0
    564a:	be 01       	movw	r22, r28
    564c:	6f 5f       	subi	r22, 0xFF	; 255
    564e:	7f 4f       	sbci	r23, 0xFF	; 255
    5650:	c8 01       	movw	r24, r16
    5652:	0e 94 de 85 	call	0x10bbc	; 0x10bbc <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    5656:	c8 01       	movw	r24, r16
    5658:	0e 94 9f 88 	call	0x1113e	; 0x1113e <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    565c:	89 2b       	or	r24, r25
    565e:	09 f4       	brne	.+2      	; 0x5662 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    5660:	70 cf       	rjmp	.-288    	; 0x5542 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    5662:	f3 e0       	ldi	r31, 0x03	; 3
    5664:	af 2e       	mov	r10, r31
    5666:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5668:	23 01       	movw	r4, r6
    566a:	22 e0       	ldi	r18, 0x02	; 2
    566c:	42 0e       	add	r4, r18
    566e:	51 1c       	adc	r5, r1
    5670:	43 c0       	rjmp	.+134    	; 0x56f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    5672:	f7 01       	movw	r30, r14
    5674:	42 81       	ldd	r20, Z+2	; 0x02
    5676:	53 81       	ldd	r21, Z+3	; 0x03
    5678:	64 81       	ldd	r22, Z+4	; 0x04
    567a:	75 81       	ldd	r23, Z+5	; 0x05
    567c:	81 8d       	ldd	r24, Z+25	; 0x19
    567e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5680:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5682:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5684:	48 17       	cp	r20, r24
    5686:	59 07       	cpc	r21, r25
    5688:	6a 07       	cpc	r22, r26
    568a:	7b 07       	cpc	r23, r27
    568c:	09 f0       	breq	.+2      	; 0x5690 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    568e:	2a c1       	rjmp	.+596    	; 0x58e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    5690:	85 8d       	ldd	r24, Z+29	; 0x1d
    5692:	96 8d       	ldd	r25, Z+30	; 0x1e
    5694:	c5 97       	sbiw	r24, 0x35	; 53
    5696:	09 f0       	breq	.+2      	; 0x569a <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    5698:	25 c1       	rjmp	.+586    	; 0x58e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    569a:	81 a1       	ldd	r24, Z+33	; 0x21
    569c:	92 a1       	ldd	r25, Z+34	; 0x22
    569e:	0c 97       	sbiw	r24, 0x0c	; 12
    56a0:	0c f4       	brge	.+2      	; 0x56a4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    56a2:	25 c1       	rjmp	.+586    	; 0x58ee <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    56a4:	4c e0       	ldi	r20, 0x0C	; 12
    56a6:	50 e0       	ldi	r21, 0x00	; 0
    56a8:	be 01       	movw	r22, r28
    56aa:	6f 5f       	subi	r22, 0xFF	; 255
    56ac:	7f 4f       	sbci	r23, 0xFF	; 255
    56ae:	c8 01       	movw	r24, r16
    56b0:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	9c 81       	ldd	r25, Y+4	; 0x04
    56b8:	98 27       	eor	r25, r24
    56ba:	89 27       	eor	r24, r25
    56bc:	98 27       	eor	r25, r24
    56be:	9a 8b       	std	Y+18, r25	; 0x12
    56c0:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    56c2:	f7 01       	movw	r30, r14
    56c4:	46 81       	ldd	r20, Z+6	; 0x06
    56c6:	57 81       	ldd	r21, Z+7	; 0x07
    56c8:	29 81       	ldd	r18, Y+1	; 0x01
    56ca:	3a 81       	ldd	r19, Y+2	; 0x02
    56cc:	42 17       	cp	r20, r18
    56ce:	53 07       	cpc	r21, r19
    56d0:	11 f4       	brne	.+4      	; 0x56d6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    56d2:	97 fd       	sbrc	r25, 7
    56d4:	2f c0       	rjmp	.+94     	; 0x5734 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    56d6:	c8 01       	movw	r24, r16
    56d8:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    56dc:	ec ef       	ldi	r30, 0xFC	; 252
    56de:	ce 2e       	mov	r12, r30
    56e0:	dd 24       	eor	r13, r13
    56e2:	da 94       	dec	r13
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	a8 1a       	sub	r10, r24
    56e8:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    56ea:	09 f4       	brne	.+2      	; 0x56ee <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    56ec:	2c cf       	rjmp	.-424    	; 0x5546 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    56ee:	ff ef       	ldi	r31, 0xFF	; 255
    56f0:	cf 16       	cp	r12, r31
    56f2:	df 06       	cpc	r13, r31
    56f4:	09 f0       	breq	.+2      	; 0x56f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    56f6:	27 cf       	rjmp	.-434    	; 0x5546 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    56f8:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    56fc:	3b 01       	movw	r6, r22
    56fe:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    5700:	c8 01       	movw	r24, r16
    5702:	0e 94 0c 87 	call	0x10e18	; 0x10e18 <EthernetUDP::parsePacket()>
    5706:	18 16       	cp	r1, r24
    5708:	19 06       	cpc	r1, r25
    570a:	0c f4       	brge	.+2      	; 0x570e <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    570c:	b2 cf       	rjmp	.-156    	; 0x5672 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    570e:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    5712:	66 19       	sub	r22, r6
    5714:	77 09       	sbc	r23, r7
    5716:	88 09       	sbc	r24, r8
    5718:	99 09       	sbc	r25, r9
    571a:	69 38       	cpi	r22, 0x89	; 137
    571c:	73 41       	sbci	r23, 0x13	; 19
    571e:	81 05       	cpc	r24, r1
    5720:	91 05       	cpc	r25, r1
    5722:	08 f0       	brcs	.+2      	; 0x5726 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    5724:	db c0       	rjmp	.+438    	; 0x58dc <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    5726:	62 e3       	ldi	r22, 0x32	; 50
    5728:	70 e0       	ldi	r23, 0x00	; 0
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
    5732:	e6 cf       	rjmp	.-52     	; 0x5700 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    5734:	8f 70       	andi	r24, 0x0F	; 15
    5736:	92 70       	andi	r25, 0x02	; 2
    5738:	89 2b       	or	r24, r25
    573a:	41 f0       	breq	.+16     	; 0x574c <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    573c:	c8 01       	movw	r24, r16
    573e:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    5742:	7b ef       	ldi	r23, 0xFB	; 251
    5744:	c7 2e       	mov	r12, r23
    5746:	dd 24       	eor	r13, r13
    5748:	da 94       	dec	r13
    574a:	cc cf       	rjmp	.-104    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    574c:	6f 80       	ldd	r6, Y+7	; 0x07
    574e:	78 84       	ldd	r7, Y+8	; 0x08
    5750:	76 24       	eor	r7, r6
    5752:	67 24       	eor	r6, r7
    5754:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    5756:	d1 2c       	mov	r13, r1
    5758:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    575a:	61 14       	cp	r6, r1
    575c:	71 04       	cpc	r7, r1
    575e:	d1 f4       	brne	.+52     	; 0x5794 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    5760:	c8 01       	movw	r24, r16
    5762:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    5766:	6a ef       	ldi	r22, 0xFA	; 250
    5768:	c6 2e       	mov	r12, r22
    576a:	dd 24       	eor	r13, r13
    576c:	da 94       	dec	r13
    576e:	ba cf       	rjmp	.-140    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    5770:	8d 85       	ldd	r24, Y+13	; 0x0d
    5772:	81 11       	cpse	r24, r1
    5774:	17 c0       	rjmp	.+46     	; 0x57a4 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    5776:	c8 01       	movw	r24, r16
    5778:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    577c:	c8 01       	movw	r24, r16
    577e:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    5782:	c8 01       	movw	r24, r16
    5784:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    5788:	c8 01       	movw	r24, r16
    578a:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    578e:	ff ef       	ldi	r31, 0xFF	; 255
    5790:	cf 1a       	sub	r12, r31
    5792:	df 0a       	sbc	r13, r31
    5794:	8d 81       	ldd	r24, Y+5	; 0x05
    5796:	9e 81       	ldd	r25, Y+6	; 0x06
    5798:	98 27       	eor	r25, r24
    579a:	89 27       	eor	r24, r25
    579c:	98 27       	eor	r25, r24
    579e:	c8 16       	cp	r12, r24
    57a0:	d9 06       	cpc	r13, r25
    57a2:	a8 f4       	brcc	.+42     	; 0x57ce <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    57a4:	41 e0       	ldi	r20, 0x01	; 1
    57a6:	50 e0       	ldi	r21, 0x00	; 0
    57a8:	be 01       	movw	r22, r28
    57aa:	63 5f       	subi	r22, 0xF3	; 243
    57ac:	7f 4f       	sbci	r23, 0xFF	; 255
    57ae:	c8 01       	movw	r24, r16
    57b0:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    57b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    57b6:	88 23       	and	r24, r24
    57b8:	d9 f2       	breq	.-74     	; 0x5770 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    57ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    57bc:	9f ef       	ldi	r25, 0xFF	; 255
    57be:	98 0f       	add	r25, r24
    57c0:	9d 87       	std	Y+13, r25	; 0x0d
    57c2:	88 23       	and	r24, r24
    57c4:	a9 f2       	breq	.-86     	; 0x5770 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    57c6:	c8 01       	movw	r24, r16
    57c8:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    57cc:	f6 cf       	rjmp	.-20     	; 0x57ba <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    57ce:	91 2c       	mov	r9, r1
    57d0:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    57d2:	41 e0       	ldi	r20, 0x01	; 1
    57d4:	50 e0       	ldi	r21, 0x00	; 0
    57d6:	be 01       	movw	r22, r28
    57d8:	6d 5e       	subi	r22, 0xED	; 237
    57da:	7f 4f       	sbci	r23, 0xFF	; 255
    57dc:	c8 01       	movw	r24, r16
    57de:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    57e2:	8b 89       	ldd	r24, Y+19	; 0x13
    57e4:	98 2f       	mov	r25, r24
    57e6:	90 7c       	andi	r25, 0xC0	; 192
    57e8:	61 f4       	brne	.+24     	; 0x5802 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    57ea:	88 23       	and	r24, r24
    57ec:	89 f0       	breq	.+34     	; 0x5810 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    57ee:	8b 89       	ldd	r24, Y+19	; 0x13
    57f0:	9f ef       	ldi	r25, 0xFF	; 255
    57f2:	98 0f       	add	r25, r24
    57f4:	9b 8b       	std	Y+19, r25	; 0x13
    57f6:	88 23       	and	r24, r24
    57f8:	41 f0       	breq	.+16     	; 0x580a <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    57fa:	c8 01       	movw	r24, r16
    57fc:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    5800:	f6 cf       	rjmp	.-20     	; 0x57ee <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    5802:	c8 01       	movw	r24, r16
    5804:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    5808:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    580a:	8b 89       	ldd	r24, Y+19	; 0x13
    580c:	81 11       	cpse	r24, r1
    580e:	e1 cf       	rjmp	.-62     	; 0x57d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    5810:	42 e0       	ldi	r20, 0x02	; 2
    5812:	50 e0       	ldi	r21, 0x00	; 0
    5814:	be 01       	movw	r22, r28
    5816:	61 5f       	subi	r22, 0xF1	; 241
    5818:	7f 4f       	sbci	r23, 0xFF	; 255
    581a:	c8 01       	movw	r24, r16
    581c:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    5820:	42 e0       	ldi	r20, 0x02	; 2
    5822:	50 e0       	ldi	r21, 0x00	; 0
    5824:	be 01       	movw	r22, r28
    5826:	63 5f       	subi	r22, 0xF3	; 243
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	c8 01       	movw	r24, r16
    582c:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    5830:	c8 01       	movw	r24, r16
    5832:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    5836:	c8 01       	movw	r24, r16
    5838:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    583c:	c8 01       	movw	r24, r16
    583e:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
    5842:	c8 01       	movw	r24, r16
    5844:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    5848:	42 e0       	ldi	r20, 0x02	; 2
    584a:	50 e0       	ldi	r21, 0x00	; 0
    584c:	be 01       	movw	r22, r28
    584e:	6f 5e       	subi	r22, 0xEF	; 239
    5850:	7f 4f       	sbci	r23, 0xFF	; 255
    5852:	c8 01       	movw	r24, r16
    5854:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    5858:	8f 85       	ldd	r24, Y+15	; 0x0f
    585a:	98 89       	ldd	r25, Y+16	; 0x10
    585c:	81 15       	cp	r24, r1
    585e:	91 40       	sbci	r25, 0x01	; 1
    5860:	e9 f4       	brne	.+58     	; 0x589c <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    5862:	cd 84       	ldd	r12, Y+13	; 0x0d
    5864:	de 84       	ldd	r13, Y+14	; 0x0e
    5866:	dc 24       	eor	r13, r12
    5868:	cd 24       	eor	r12, r13
    586a:	dc 24       	eor	r13, r12
    586c:	81 e0       	ldi	r24, 0x01	; 1
    586e:	c8 16       	cp	r12, r24
    5870:	d1 04       	cpc	r13, r1
    5872:	a1 f4       	brne	.+40     	; 0x589c <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    5874:	89 89       	ldd	r24, Y+17	; 0x11
    5876:	9a 89       	ldd	r25, Y+18	; 0x12
    5878:	81 15       	cp	r24, r1
    587a:	94 40       	sbci	r25, 0x04	; 4
    587c:	41 f0       	breq	.+16     	; 0x588e <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    587e:	c8 01       	movw	r24, r16
    5880:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    5884:	57 ef       	ldi	r21, 0xF7	; 247
    5886:	c5 2e       	mov	r12, r21
    5888:	dd 24       	eor	r13, r13
    588a:	da 94       	dec	r13
    588c:	2b cf       	rjmp	.-426    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    588e:	44 e0       	ldi	r20, 0x04	; 4
    5890:	50 e0       	ldi	r21, 0x00	; 0
    5892:	b2 01       	movw	r22, r4
    5894:	c8 01       	movw	r24, r16
    5896:	0e 94 c3 86 	call	0x10d86	; 0x10d86 <EthernetUDP::read(unsigned char*, unsigned int)>
    589a:	24 cf       	rjmp	.-440    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    589c:	d1 2c       	mov	r13, r1
    589e:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    58a0:	89 89       	ldd	r24, Y+17	; 0x11
    58a2:	9a 89       	ldd	r25, Y+18	; 0x12
    58a4:	98 27       	eor	r25, r24
    58a6:	89 27       	eor	r24, r25
    58a8:	98 27       	eor	r25, r24
    58aa:	c8 16       	cp	r12, r24
    58ac:	d9 06       	cpc	r13, r25
    58ae:	38 f4       	brcc	.+14     	; 0x58be <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    58b0:	c8 01       	movw	r24, r16
    58b2:	0e 94 e2 86 	call	0x10dc4	; 0x10dc4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    58b6:	ff ef       	ldi	r31, 0xFF	; 255
    58b8:	cf 1a       	sub	r12, r31
    58ba:	df 0a       	sbc	r13, r31
    58bc:	f1 cf       	rjmp	.-30     	; 0x58a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    58be:	2f ef       	ldi	r18, 0xFF	; 255
    58c0:	82 1a       	sub	r8, r18
    58c2:	92 0a       	sbc	r9, r18
    58c4:	68 14       	cp	r6, r8
    58c6:	79 04       	cpc	r7, r9
    58c8:	09 f0       	breq	.+2      	; 0x58cc <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    58ca:	83 cf       	rjmp	.-250    	; 0x57d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    58cc:	c8 01       	movw	r24, r16
    58ce:	0e 94 7a 6e 	call	0xdcf4	; 0xdcf4 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    58d2:	46 ef       	ldi	r20, 0xF6	; 246
    58d4:	c4 2e       	mov	r12, r20
    58d6:	dd 24       	eor	r13, r13
    58d8:	da 94       	dec	r13
    58da:	04 cf       	rjmp	.-504    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    58dc:	cc 24       	eor	r12, r12
    58de:	ca 94       	dec	r12
    58e0:	dc 2c       	mov	r13, r12
    58e2:	00 cf       	rjmp	.-512    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    58e4:	2e ef       	ldi	r18, 0xFE	; 254
    58e6:	c2 2e       	mov	r12, r18
    58e8:	dd 24       	eor	r13, r13
    58ea:	da 94       	dec	r13
    58ec:	fb ce       	rjmp	.-522    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    58ee:	9d ef       	ldi	r25, 0xFD	; 253
    58f0:	c9 2e       	mov	r12, r25
    58f2:	dd 24       	eor	r13, r13
    58f4:	da 94       	dec	r13
    58f6:	f6 ce       	rjmp	.-532    	; 0x56e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    58f8:	8e ef       	ldi	r24, 0xFE	; 254
    58fa:	c8 2e       	mov	r12, r24
    58fc:	dd 24       	eor	r13, r13
    58fe:	da 94       	dec	r13
    5900:	d0 cd       	rjmp	.-1120   	; 0x54a2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    5902:	d1 2c       	mov	r13, r1
    5904:	c1 2c       	mov	r12, r1
    5906:	cd cd       	rjmp	.-1126   	; 0x54a2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00005908 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    5908:	cf 92       	push	r12
    590a:	df 92       	push	r13
    590c:	ef 92       	push	r14
    590e:	ff 92       	push	r15
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
    5918:	cd b7       	in	r28, 0x3d	; 61
    591a:	de b7       	in	r29, 0x3e	; 62
    591c:	af 97       	sbiw	r28, 0x2f	; 47
    591e:	0f b6       	in	r0, 0x3f	; 63
    5920:	f8 94       	cli
    5922:	de bf       	out	0x3e, r29	; 62
    5924:	0f be       	out	0x3f, r0	; 63
    5926:	cd bf       	out	0x3d, r28	; 61
    5928:	7c 01       	movw	r14, r24
    592a:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    592c:	02 ee       	ldi	r16, 0xE2	; 226
    592e:	12 e0       	ldi	r17, 0x02	; 2
    5930:	1a 83       	std	Y+2, r17	; 0x02
    5932:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5934:	1c 86       	std	Y+12, r1	; 0x0c
    5936:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5938:	88 ee       	ldi	r24, 0xE8	; 232
    593a:	93 e0       	ldi	r25, 0x03	; 3
    593c:	a0 e0       	ldi	r26, 0x00	; 0
    593e:	b0 e0       	ldi	r27, 0x00	; 0
    5940:	8d 87       	std	Y+13, r24	; 0x0d
    5942:	9e 87       	std	Y+14, r25	; 0x0e
    5944:	af 87       	std	Y+15, r26	; 0x0f
    5946:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    5948:	88 e9       	ldi	r24, 0x98	; 152
    594a:	92 e0       	ldi	r25, 0x02	; 2
    594c:	9a 87       	std	Y+10, r25	; 0x0a
    594e:	89 87       	std	Y+9, r24	; 0x09
    5950:	88 e0       	ldi	r24, 0x08	; 8
    5952:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    5954:	19 8f       	std	Y+25, r17	; 0x19
    5956:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    5958:	1a 8e       	std	Y+26, r1	; 0x1a
    595a:	1b 8e       	std	Y+27, r1	; 0x1b
    595c:	1c 8e       	std	Y+28, r1	; 0x1c
    595e:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    5960:	1b a7       	std	Y+43, r17	; 0x2b
    5962:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    5964:	1c a6       	std	Y+44, r1	; 0x2c
    5966:	1d a6       	std	Y+45, r1	; 0x2d
    5968:	1e a6       	std	Y+46, r1	; 0x2e
    596a:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    596c:	80 91 1b 0c 	lds	r24, 0x0C1B	; 0x800c1b <Ethernet+0x2>
    5970:	90 91 1c 0c 	lds	r25, 0x0C1C	; 0x800c1c <Ethernet+0x3>
    5974:	a0 91 1d 0c 	lds	r26, 0x0C1D	; 0x800c1d <Ethernet+0x4>
    5978:	b0 91 1e 0c 	lds	r27, 0x0C1E	; 0x800c1e <Ethernet+0x5>
    597c:	8e a3       	std	Y+38, r24	; 0x26
    597e:	9f a3       	std	Y+39, r25	; 0x27
    5980:	a8 a7       	std	Y+40, r26	; 0x28
    5982:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    5984:	8b 83       	std	Y+3, r24	; 0x03
    5986:	9c 83       	std	Y+4, r25	; 0x04
    5988:	ad 83       	std	Y+5, r26	; 0x05
    598a:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    598c:	18 86       	std	Y+8, r1	; 0x08
    598e:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    5990:	ae 01       	movw	r20, r28
    5992:	46 5d       	subi	r20, 0xD6	; 214
    5994:	5f 4f       	sbci	r21, 0xFF	; 255
    5996:	ce 01       	movw	r24, r28
    5998:	01 96       	adiw	r24, 0x01	; 1
    599a:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    599e:	81 30       	cpi	r24, 0x01	; 1
    59a0:	91 05       	cpc	r25, r1
    59a2:	b1 f4       	brne	.+44     	; 0x59d0 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    59a4:	d7 01       	movw	r26, r14
    59a6:	ed 91       	ld	r30, X+
    59a8:	fc 91       	ld	r31, X
    59aa:	06 84       	ldd	r0, Z+14	; 0x0e
    59ac:	f7 85       	ldd	r31, Z+15	; 0x0f
    59ae:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    59b0:	1d a3       	std	Y+37, r17	; 0x25
    59b2:	0c a3       	std	Y+36, r16	; 0x24
    59b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    59b6:	9d a5       	ldd	r25, Y+45	; 0x2d
    59b8:	ae a5       	ldd	r26, Y+46	; 0x2e
    59ba:	bf a5       	ldd	r27, Y+47	; 0x2f
    59bc:	8e a3       	std	Y+38, r24	; 0x26
    59be:	9f a3       	std	Y+39, r25	; 0x27
    59c0:	a8 a7       	std	Y+40, r26	; 0x28
    59c2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    59c4:	a6 01       	movw	r20, r12
    59c6:	be 01       	movw	r22, r28
    59c8:	6c 5d       	subi	r22, 0xDC	; 220
    59ca:	7f 4f       	sbci	r23, 0xFF	; 255
    59cc:	c7 01       	movw	r24, r14
    59ce:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    59d0:	af 96       	adiw	r28, 0x2f	; 47
    59d2:	0f b6       	in	r0, 0x3f	; 63
    59d4:	f8 94       	cli
    59d6:	de bf       	out	0x3e, r29	; 62
    59d8:	0f be       	out	0x3f, r0	; 63
    59da:	cd bf       	out	0x3d, r28	; 61
    59dc:	df 91       	pop	r29
    59de:	cf 91       	pop	r28
    59e0:	1f 91       	pop	r17
    59e2:	0f 91       	pop	r16
    59e4:	ff 90       	pop	r15
    59e6:	ef 90       	pop	r14
    59e8:	df 90       	pop	r13
    59ea:	cf 90       	pop	r12
    59ec:	08 95       	ret

000059ee <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    59ee:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    59f0:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    59f2:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    59f4:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <SPIClass::initialized>
    59f8:	81 11       	cpse	r24, r1
    59fa:	27 c0       	rjmp	.+78     	; 0x5a4a <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    59fc:	ee e9       	ldi	r30, 0x9E	; 158
    59fe:	fe e2       	ldi	r31, 0x2E	; 46
    5a00:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    5a02:	e8 e5       	ldi	r30, 0x58	; 88
    5a04:	fe e2       	ldi	r31, 0x2E	; 46
    5a06:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    5a08:	e8 2f       	mov	r30, r24
    5a0a:	f0 e0       	ldi	r31, 0x00	; 0
    5a0c:	ee 0f       	add	r30, r30
    5a0e:	ff 1f       	adc	r31, r31
    5a10:	e1 50       	subi	r30, 0x01	; 1
    5a12:	f7 4d       	sbci	r31, 0xD7	; 215
    5a14:	a5 91       	lpm	r26, Z+
    5a16:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5a18:	ec 91       	ld	r30, X
    5a1a:	e9 23       	and	r30, r25
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    5a1e:	61 e0       	ldi	r22, 0x01	; 1
    5a20:	88 e0       	ldi	r24, 0x08	; 8
    5a22:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5a26:	61 e0       	ldi	r22, 0x01	; 1
    5a28:	88 e0       	ldi	r24, 0x08	; 8
    5a2a:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5a2e:	8c b5       	in	r24, 0x2c	; 44
    5a30:	80 61       	ori	r24, 0x10	; 16
    5a32:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    5a34:	8c b5       	in	r24, 0x2c	; 44
    5a36:	80 64       	ori	r24, 0x40	; 64
    5a38:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5a3a:	61 e0       	ldi	r22, 0x01	; 1
    5a3c:	89 e0       	ldi	r24, 0x09	; 9
    5a3e:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    5a42:	61 e0       	ldi	r22, 0x01	; 1
    5a44:	8a e0       	ldi	r24, 0x0A	; 10
    5a46:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    5a4a:	80 91 ca 09 	lds	r24, 0x09CA	; 0x8009ca <SPIClass::initialized>
    5a4e:	8f 5f       	subi	r24, 0xFF	; 255
    5a50:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    5a54:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    5a56:	cf 91       	pop	r28
    5a58:	08 95       	ret

00005a5a <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    5a5a:	7f 92       	push	r7
    5a5c:	8f 92       	push	r8
    5a5e:	9f 92       	push	r9
    5a60:	af 92       	push	r10
    5a62:	bf 92       	push	r11
    5a64:	cf 92       	push	r12
    5a66:	df 92       	push	r13
    5a68:	ef 92       	push	r14
    5a6a:	ff 92       	push	r15
    5a6c:	0f 93       	push	r16
    5a6e:	1f 93       	push	r17
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    5a76:	fc 01       	movw	r30, r24
    5a78:	86 81       	ldd	r24, Z+6	; 0x06
    5a7a:	81 11       	cpse	r24, r1
    5a7c:	35 c0       	rjmp	.+106    	; 0x5ae8 <SoftSPIB::transfer(unsigned char)+0x8e>
    5a7e:	86 2f       	mov	r24, r22
    5a80:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    5a82:	ec 01       	movw	r28, r24
    5a84:	d6 95       	lsr	r29
    5a86:	dc 2f       	mov	r29, r28
    5a88:	cc 27       	eor	r28, r28
    5a8a:	d7 95       	ror	r29
    5a8c:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    5a8e:	66 1f       	adc	r22, r22
    5a90:	66 27       	eor	r22, r22
    5a92:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    5a94:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    5a96:	ec 01       	movw	r28, r24
    5a98:	55 e0       	ldi	r21, 0x05	; 5
    5a9a:	cc 0f       	add	r28, r28
    5a9c:	dd 1f       	adc	r29, r29
    5a9e:	5a 95       	dec	r21
    5aa0:	e1 f7       	brne	.-8      	; 0x5a9a <SoftSPIB::transfer(unsigned char)+0x40>
    5aa2:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    5aa4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    5aa6:	ec 01       	movw	r28, r24
    5aa8:	73 e0       	ldi	r23, 0x03	; 3
    5aaa:	cc 0f       	add	r28, r28
    5aac:	dd 1f       	adc	r29, r29
    5aae:	7a 95       	dec	r23
    5ab0:	e1 f7       	brne	.-8      	; 0x5aaa <SoftSPIB::transfer(unsigned char)+0x50>
    5ab2:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    5ab4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    5ab6:	ec 01       	movw	r28, r24
    5ab8:	cc 0f       	add	r28, r28
    5aba:	dd 1f       	adc	r29, r29
    5abc:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    5abe:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    5ac0:	ec 01       	movw	r28, r24
    5ac2:	d5 95       	asr	r29
    5ac4:	c7 95       	ror	r28
    5ac6:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    5ac8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    5aca:	ec 01       	movw	r28, r24
    5acc:	a3 e0       	ldi	r26, 0x03	; 3
    5ace:	d5 95       	asr	r29
    5ad0:	c7 95       	ror	r28
    5ad2:	aa 95       	dec	r26
    5ad4:	e1 f7       	brne	.-8      	; 0x5ace <SoftSPIB::transfer(unsigned char)+0x74>
    5ad6:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    5ad8:	6c 2b       	or	r22, r28
    5ada:	b5 e0       	ldi	r27, 0x05	; 5
    5adc:	95 95       	asr	r25
    5ade:	87 95       	ror	r24
    5ae0:	ba 95       	dec	r27
    5ae2:	e1 f7       	brne	.-8      	; 0x5adc <SoftSPIB::transfer(unsigned char)+0x82>
    5ae4:	82 70       	andi	r24, 0x02	; 2
    5ae6:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    5ae8:	91 e0       	ldi	r25, 0x01	; 1
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	f8 01       	movw	r30, r16
    5aee:	21 81       	ldd	r18, Z+1	; 0x01
    5af0:	21 11       	cpse	r18, r1
    5af2:	01 c0       	rjmp	.+2      	; 0x5af6 <SoftSPIB::transfer(unsigned char)+0x9c>
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	e9 2e       	mov	r14, r25
    5af8:	f8 2e       	mov	r15, r24
    5afa:	d1 2c       	mov	r13, r1
    5afc:	c1 2c       	mov	r12, r1
    5afe:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    5b00:	c6 2f       	mov	r28, r22
    5b02:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    5b04:	f8 01       	movw	r30, r16
    5b06:	80 81       	ld	r24, Z
    5b08:	88 23       	and	r24, r24
    5b0a:	39 f0       	breq	.+14     	; 0x5b1a <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    5b0c:	f1 e0       	ldi	r31, 0x01	; 1
    5b0e:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    5b10:	6e 2d       	mov	r22, r14
    5b12:	f8 01       	movw	r30, r16
    5b14:	85 81       	ldd	r24, Z+5	; 0x05
    5b16:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    5b1a:	be 01       	movw	r22, r28
    5b1c:	0c 2c       	mov	r0, r12
    5b1e:	02 c0       	rjmp	.+4      	; 0x5b24 <SoftSPIB::transfer(unsigned char)+0xca>
    5b20:	75 95       	asr	r23
    5b22:	67 95       	ror	r22
    5b24:	0a 94       	dec	r0
    5b26:	e2 f7       	brpl	.-8      	; 0x5b20 <SoftSPIB::transfer(unsigned char)+0xc6>
    5b28:	61 70       	andi	r22, 0x01	; 1
    5b2a:	f8 01       	movw	r30, r16
    5b2c:	84 81       	ldd	r24, Z+4	; 0x04
    5b2e:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    5b32:	57 01       	movw	r10, r14
    5b34:	f1 e0       	ldi	r31, 0x01	; 1
    5b36:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    5b38:	6a 2d       	mov	r22, r10
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	85 81       	ldd	r24, Z+5	; 0x05
    5b3e:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    5b42:	f8 01       	movw	r30, r16
    5b44:	23 81       	ldd	r18, Z+3	; 0x03
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	f9 01       	movw	r30, r18
    5b4a:	e1 5f       	subi	r30, 0xF1	; 241
    5b4c:	f6 4d       	sbci	r31, 0xD6	; 214
    5b4e:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    5b50:	f9 01       	movw	r30, r18
    5b52:	e0 5b       	subi	r30, 0xB0	; 176
    5b54:	f1 4d       	sbci	r31, 0xD1	; 209
    5b56:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    5b58:	f9 01       	movw	r30, r18
    5b5a:	ea 56       	subi	r30, 0x6A	; 106
    5b5c:	f1 4d       	sbci	r31, 0xD1	; 209
    5b5e:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    5b60:	77 20       	and	r7, r7
    5b62:	a9 f1       	breq	.+106    	; 0x5bce <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5b64:	81 11       	cpse	r24, r1
    5b66:	0e 94 18 77 	call	0xee30	; 0xee30 <turnOffPWM.lto_priv.232>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    5b6a:	e7 2d       	mov	r30, r7
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	ee 0f       	add	r30, r30
    5b70:	ff 1f       	adc	r31, r31
    5b72:	e0 5c       	subi	r30, 0xC0	; 192
    5b74:	f1 4d       	sbci	r31, 0xD1	; 209
    5b76:	a5 91       	lpm	r26, Z+
    5b78:	b4 91       	lpm	r27, Z
    5b7a:	ec 91       	ld	r30, X
    5b7c:	8e 22       	and	r8, r30
    5b7e:	31 e0       	ldi	r19, 0x01	; 1
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	09 f4       	brne	.+2      	; 0x5b86 <SoftSPIB::transfer(unsigned char)+0x12c>
    5b84:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    5b86:	83 2f       	mov	r24, r19
    5b88:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	26 81       	ldd	r18, Z+6	; 0x06
    5b8e:	21 11       	cpse	r18, r1
    5b90:	21 c0       	rjmp	.+66     	; 0x5bd4 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    5b92:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    5b94:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    5b96:	f8 01       	movw	r30, r16
    5b98:	80 81       	ld	r24, Z
    5b9a:	88 23       	and	r24, r24
    5b9c:	11 f1       	breq	.+68     	; 0x5be2 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    5b9e:	75 01       	movw	r14, r10
    5ba0:	ff ef       	ldi	r31, 0xFF	; 255
    5ba2:	cf 1a       	sub	r12, r31
    5ba4:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    5ba6:	28 e0       	ldi	r18, 0x08	; 8
    5ba8:	c2 16       	cp	r12, r18
    5baa:	d1 04       	cpc	r13, r1
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <SoftSPIB::transfer(unsigned char)+0x156>
    5bae:	aa cf       	rjmp	.-172    	; 0x5b04 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    5bb0:	89 2d       	mov	r24, r9
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	1f 91       	pop	r17
    5bb8:	0f 91       	pop	r16
    5bba:	ff 90       	pop	r15
    5bbc:	ef 90       	pop	r14
    5bbe:	df 90       	pop	r13
    5bc0:	cf 90       	pop	r12
    5bc2:	bf 90       	pop	r11
    5bc4:	af 90       	pop	r10
    5bc6:	9f 90       	pop	r9
    5bc8:	8f 90       	pop	r8
    5bca:	7f 90       	pop	r7
    5bcc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	db cf       	rjmp	.-74     	; 0x5b8a <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    5bd4:	96 95       	lsr	r25
    5bd6:	98 2f       	mov	r25, r24
    5bd8:	88 27       	eor	r24, r24
    5bda:	97 95       	ror	r25
    5bdc:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    5bde:	96 94       	lsr	r9
    5be0:	d9 cf       	rjmp	.-78     	; 0x5b94 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    5be2:	6e 2d       	mov	r22, r14
    5be4:	85 81       	ldd	r24, Z+5	; 0x05
    5be6:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
    5bea:	da cf       	rjmp	.-76     	; 0x5ba0 <SoftSPIB::transfer(unsigned char)+0x146>

00005bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    5bf0:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    5bf2:	a6 a5       	ldd	r26, Z+46	; 0x2e
    5bf4:	b7 a5       	ldd	r27, Z+47	; 0x2f
    5bf6:	8c 91       	ld	r24, X
    5bf8:	92 ad       	ldd	r25, Z+58	; 0x3a
    5bfa:	89 23       	and	r24, r25
    5bfc:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    5bfe:	a0 a9       	ldd	r26, Z+48	; 0x30
    5c00:	b1 a9       	ldd	r27, Z+49	; 0x31
    5c02:	8c 91       	ld	r24, X
    5c04:	93 ad       	ldd	r25, Z+59	; 0x3b
    5c06:	89 23       	and	r24, r25
    5c08:	8c 93       	st	X, r24
    5c0a:	72 b9       	out	0x02, r23	; 2
    5c0c:	a2 a9       	ldd	r26, Z+50	; 0x32
    5c0e:	b3 a9       	ldd	r27, Z+51	; 0x33
    5c10:	8c 91       	ld	r24, X
    5c12:	94 ad       	ldd	r25, Z+60	; 0x3c
    5c14:	89 23       	and	r24, r25
    5c16:	8c 93       	st	X, r24
    5c18:	a2 a9       	ldd	r26, Z+50	; 0x32
    5c1a:	b3 a9       	ldd	r27, Z+51	; 0x33
    5c1c:	8c 91       	ld	r24, X
    5c1e:	90 ad       	ldd	r25, Z+56	; 0x38
    5c20:	89 2b       	or	r24, r25
    5c22:	8c 93       	st	X, r24
    5c24:	62 b9       	out	0x02, r22	; 2
    5c26:	a2 a9       	ldd	r26, Z+50	; 0x32
    5c28:	b3 a9       	ldd	r27, Z+51	; 0x33
    5c2a:	8c 91       	ld	r24, X
    5c2c:	94 ad       	ldd	r25, Z+60	; 0x3c
    5c2e:	89 23       	and	r24, r25
    5c30:	8c 93       	st	X, r24
    5c32:	a2 a9       	ldd	r26, Z+50	; 0x32
    5c34:	b3 a9       	ldd	r27, Z+51	; 0x33
    5c36:	8c 91       	ld	r24, X
    5c38:	90 ad       	ldd	r25, Z+56	; 0x38
    5c3a:	89 2b       	or	r24, r25
    5c3c:	8c 93       	st	X, r24
    5c3e:	a0 a9       	ldd	r26, Z+48	; 0x30
    5c40:	b1 a9       	ldd	r27, Z+49	; 0x31
    5c42:	8c 91       	ld	r24, X
    5c44:	97 a9       	ldd	r25, Z+55	; 0x37
    5c46:	89 2b       	or	r24, r25
    5c48:	8c 93       	st	X, r24
    5c4a:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    5c4c:	9f ef       	ldi	r25, 0xFF	; 255
    5c4e:	92 0f       	add	r25, r18
    5c50:	12 16       	cp	r1, r18
    5c52:	0c f0       	brlt	.+2      	; 0x5c56 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    5c54:	3f c0       	rjmp	.+126    	; 0x5cd4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    5c56:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    5c58:	82 b9       	out	0x02, r24	; 2
    5c5a:	c2 a9       	ldd	r28, Z+50	; 0x32
    5c5c:	d3 a9       	ldd	r29, Z+51	; 0x33
    5c5e:	88 81       	ld	r24, Y
    5c60:	24 ad       	ldd	r18, Z+60	; 0x3c
    5c62:	82 23       	and	r24, r18
    5c64:	88 83       	st	Y, r24
    5c66:	c2 a9       	ldd	r28, Z+50	; 0x32
    5c68:	d3 a9       	ldd	r29, Z+51	; 0x33
    5c6a:	88 81       	ld	r24, Y
    5c6c:	20 ad       	ldd	r18, Z+56	; 0x38
    5c6e:	82 2b       	or	r24, r18
    5c70:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    5c72:	99 23       	and	r25, r25
    5c74:	69 f1       	breq	.+90     	; 0x5cd0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    5c76:	20 8d       	ldd	r18, Z+24	; 0x18
    5c78:	31 8d       	ldd	r19, Z+25	; 0x19
    5c7a:	21 30       	cpi	r18, 0x01	; 1
    5c7c:	31 05       	cpc	r19, r1
    5c7e:	41 f5       	brne	.+80     	; 0x5cd0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    5c80:	6f 5f       	subi	r22, 0xFF	; 255
    5c82:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    5c84:	c0 a9       	ldd	r28, Z+48	; 0x30
    5c86:	d1 a9       	ldd	r29, Z+49	; 0x31
    5c88:	88 81       	ld	r24, Y
    5c8a:	23 ad       	ldd	r18, Z+59	; 0x3b
    5c8c:	82 23       	and	r24, r18
    5c8e:	88 83       	st	Y, r24
    5c90:	72 b9       	out	0x02, r23	; 2
    5c92:	c2 a9       	ldd	r28, Z+50	; 0x32
    5c94:	d3 a9       	ldd	r29, Z+51	; 0x33
    5c96:	88 81       	ld	r24, Y
    5c98:	24 ad       	ldd	r18, Z+60	; 0x3c
    5c9a:	82 23       	and	r24, r18
    5c9c:	88 83       	st	Y, r24
    5c9e:	c2 a9       	ldd	r28, Z+50	; 0x32
    5ca0:	d3 a9       	ldd	r29, Z+51	; 0x33
    5ca2:	88 81       	ld	r24, Y
    5ca4:	20 ad       	ldd	r18, Z+56	; 0x38
    5ca6:	82 2b       	or	r24, r18
    5ca8:	88 83       	st	Y, r24
    5caa:	62 b9       	out	0x02, r22	; 2
    5cac:	c2 a9       	ldd	r28, Z+50	; 0x32
    5cae:	d3 a9       	ldd	r29, Z+51	; 0x33
    5cb0:	88 81       	ld	r24, Y
    5cb2:	24 ad       	ldd	r18, Z+60	; 0x3c
    5cb4:	82 23       	and	r24, r18
    5cb6:	88 83       	st	Y, r24
    5cb8:	c2 a9       	ldd	r28, Z+50	; 0x32
    5cba:	d3 a9       	ldd	r29, Z+51	; 0x33
    5cbc:	88 81       	ld	r24, Y
    5cbe:	20 ad       	ldd	r18, Z+56	; 0x38
    5cc0:	82 2b       	or	r24, r18
    5cc2:	88 83       	st	Y, r24
    5cc4:	c0 a9       	ldd	r28, Z+48	; 0x30
    5cc6:	d1 a9       	ldd	r29, Z+49	; 0x31
    5cc8:	88 81       	ld	r24, Y
    5cca:	27 a9       	ldd	r18, Z+55	; 0x37
    5ccc:	82 2b       	or	r24, r18
    5cce:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    5cd0:	29 2f       	mov	r18, r25
    5cd2:	bc cf       	rjmp	.-136    	; 0x5c4c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    5cd4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    5cd6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    5cd8:	8c 91       	ld	r24, X
    5cda:	96 a9       	ldd	r25, Z+54	; 0x36
    5cdc:	89 2b       	or	r24, r25
    5cde:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    5ce0:	df 91       	pop	r29
    5ce2:	cf 91       	pop	r28
    5ce4:	08 95       	ret

00005ce6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    5ce6:	af 92       	push	r10
    5ce8:	bf 92       	push	r11
    5cea:	cf 92       	push	r12
    5cec:	df 92       	push	r13
    5cee:	ef 92       	push	r14
    5cf0:	ff 92       	push	r15
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	00 d0       	rcall	.+0      	; 0x5cfc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    5cfc:	00 d0       	rcall	.+0      	; 0x5cfe <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    5cfe:	1f 92       	push	r1
    5d00:	1f 92       	push	r1
    5d02:	cd b7       	in	r28, 0x3d	; 61
    5d04:	de b7       	in	r29, 0x3e	; 62
    5d06:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    5d08:	dc 01       	movw	r26, r24
    5d0a:	9e 96       	adiw	r26, 0x2e	; 46
    5d0c:	ed 91       	ld	r30, X+
    5d0e:	fc 91       	ld	r31, X
    5d10:	9f 97       	sbiw	r26, 0x2f	; 47
    5d12:	80 81       	ld	r24, Z
    5d14:	da 96       	adiw	r26, 0x3a	; 58
    5d16:	9c 91       	ld	r25, X
    5d18:	da 97       	sbiw	r26, 0x3a	; 58
    5d1a:	89 23       	and	r24, r25
    5d1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    5d1e:	58 96       	adiw	r26, 0x18	; 24
    5d20:	8d 91       	ld	r24, X+
    5d22:	9c 91       	ld	r25, X
    5d24:	59 97       	sbiw	r26, 0x19	; 25
    5d26:	00 97       	sbiw	r24, 0x00	; 0
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    5d2a:	44 c3       	rjmp	.+1672   	; 0x63b4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    5d2c:	56 96       	adiw	r26, 0x16	; 22
    5d2e:	8d 91       	ld	r24, X+
    5d30:	9c 91       	ld	r25, X
    5d32:	57 97       	sbiw	r26, 0x17	; 23
    5d34:	82 30       	cpi	r24, 0x02	; 2
    5d36:	91 05       	cpc	r25, r1
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    5d3a:	0b c3       	rjmp	.+1558   	; 0x6352 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    5d3c:	83 30       	cpi	r24, 0x03	; 3
    5d3e:	91 05       	cpc	r25, r1
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    5d42:	23 c3       	rjmp	.+1606   	; 0x638a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    5d44:	01 97       	sbiw	r24, 0x01	; 1
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    5d48:	32 c3       	rjmp	.+1636   	; 0x63ae <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    5d4a:	1e 96       	adiw	r26, 0x0e	; 14
    5d4c:	0d 90       	ld	r0, X+
    5d4e:	bc 91       	ld	r27, X
    5d50:	a0 2d       	mov	r26, r0
    5d52:	68 01       	movw	r12, r16
    5d54:	c0 94       	com	r12
    5d56:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    5d58:	40 95       	com	r20
    5d5a:	50 95       	com	r21
    5d5c:	fa 01       	movw	r30, r20
    5d5e:	ea 0f       	add	r30, r26
    5d60:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    5d62:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    5d64:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    5d66:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    5d68:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    5d6a:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    5d6c:	6a 0f       	add	r22, r26
    5d6e:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    5d70:	d7 01       	movw	r26, r14
    5d72:	d0 96       	adiw	r26, 0x30	; 48
    5d74:	cd 90       	ld	r12, X+
    5d76:	dc 90       	ld	r13, X
    5d78:	d6 01       	movw	r26, r12
    5d7a:	bc 90       	ld	r11, X
    5d7c:	d7 01       	movw	r26, r14
    5d7e:	db 96       	adiw	r26, 0x3b	; 59
    5d80:	ac 90       	ld	r10, X
    5d82:	ba 20       	and	r11, r10
    5d84:	d6 01       	movw	r26, r12
    5d86:	bc 92       	st	X, r11
    5d88:	12 b8       	out	0x02, r1	; 2
    5d8a:	d7 01       	movw	r26, r14
    5d8c:	d2 96       	adiw	r26, 0x32	; 50
    5d8e:	cd 90       	ld	r12, X+
    5d90:	dc 90       	ld	r13, X
    5d92:	d6 01       	movw	r26, r12
    5d94:	bc 90       	ld	r11, X
    5d96:	d7 01       	movw	r26, r14
    5d98:	dc 96       	adiw	r26, 0x3c	; 60
    5d9a:	ac 90       	ld	r10, X
    5d9c:	ba 20       	and	r11, r10
    5d9e:	d6 01       	movw	r26, r12
    5da0:	bc 92       	st	X, r11
    5da2:	d7 01       	movw	r26, r14
    5da4:	d2 96       	adiw	r26, 0x32	; 50
    5da6:	cd 90       	ld	r12, X+
    5da8:	dc 90       	ld	r13, X
    5daa:	d6 01       	movw	r26, r12
    5dac:	bc 90       	ld	r11, X
    5dae:	d7 01       	movw	r26, r14
    5db0:	d8 96       	adiw	r26, 0x38	; 56
    5db2:	ac 90       	ld	r10, X
    5db4:	ba 28       	or	r11, r10
    5db6:	d6 01       	movw	r26, r12
    5db8:	bc 92       	st	X, r11
    5dba:	a0 e5       	ldi	r26, 0x50	; 80
    5dbc:	a2 b9       	out	0x02, r26	; 2
    5dbe:	d7 01       	movw	r26, r14
    5dc0:	d2 96       	adiw	r26, 0x32	; 50
    5dc2:	cd 90       	ld	r12, X+
    5dc4:	dc 90       	ld	r13, X
    5dc6:	d6 01       	movw	r26, r12
    5dc8:	bc 90       	ld	r11, X
    5dca:	d7 01       	movw	r26, r14
    5dcc:	dc 96       	adiw	r26, 0x3c	; 60
    5dce:	ac 90       	ld	r10, X
    5dd0:	ba 20       	and	r11, r10
    5dd2:	d6 01       	movw	r26, r12
    5dd4:	bc 92       	st	X, r11
    5dd6:	d7 01       	movw	r26, r14
    5dd8:	d2 96       	adiw	r26, 0x32	; 50
    5dda:	cd 90       	ld	r12, X+
    5ddc:	dc 90       	ld	r13, X
    5dde:	d6 01       	movw	r26, r12
    5de0:	bc 90       	ld	r11, X
    5de2:	d7 01       	movw	r26, r14
    5de4:	d8 96       	adiw	r26, 0x38	; 56
    5de6:	ac 90       	ld	r10, X
    5de8:	ba 28       	or	r11, r10
    5dea:	d6 01       	movw	r26, r12
    5dec:	bc 92       	st	X, r11
    5dee:	d7 01       	movw	r26, r14
    5df0:	d0 96       	adiw	r26, 0x30	; 48
    5df2:	cd 90       	ld	r12, X+
    5df4:	dc 90       	ld	r13, X
    5df6:	d6 01       	movw	r26, r12
    5df8:	bc 90       	ld	r11, X
    5dfa:	d7 01       	movw	r26, r14
    5dfc:	d7 96       	adiw	r26, 0x37	; 55
    5dfe:	ac 90       	ld	r10, X
    5e00:	ba 28       	or	r11, r10
    5e02:	d6 01       	movw	r26, r12
    5e04:	bc 92       	st	X, r11
    5e06:	72 b9       	out	0x02, r23	; 2
    5e08:	d7 01       	movw	r26, r14
    5e0a:	d2 96       	adiw	r26, 0x32	; 50
    5e0c:	ad 90       	ld	r10, X+
    5e0e:	bc 90       	ld	r11, X
    5e10:	d5 01       	movw	r26, r10
    5e12:	7c 91       	ld	r23, X
    5e14:	d7 01       	movw	r26, r14
    5e16:	dc 96       	adiw	r26, 0x3c	; 60
    5e18:	dc 90       	ld	r13, X
    5e1a:	7d 21       	and	r23, r13
    5e1c:	d5 01       	movw	r26, r10
    5e1e:	7c 93       	st	X, r23
    5e20:	d7 01       	movw	r26, r14
    5e22:	d2 96       	adiw	r26, 0x32	; 50
    5e24:	ad 90       	ld	r10, X+
    5e26:	bc 90       	ld	r11, X
    5e28:	d5 01       	movw	r26, r10
    5e2a:	7c 91       	ld	r23, X
    5e2c:	d7 01       	movw	r26, r14
    5e2e:	d8 96       	adiw	r26, 0x38	; 56
    5e30:	dc 90       	ld	r13, X
    5e32:	7d 29       	or	r23, r13
    5e34:	d5 01       	movw	r26, r10
    5e36:	7c 93       	st	X, r23
    5e38:	62 b9       	out	0x02, r22	; 2
    5e3a:	d7 01       	movw	r26, r14
    5e3c:	d2 96       	adiw	r26, 0x32	; 50
    5e3e:	cd 90       	ld	r12, X+
    5e40:	dc 90       	ld	r13, X
    5e42:	d6 01       	movw	r26, r12
    5e44:	6c 91       	ld	r22, X
    5e46:	d7 01       	movw	r26, r14
    5e48:	dc 96       	adiw	r26, 0x3c	; 60
    5e4a:	7c 91       	ld	r23, X
    5e4c:	67 23       	and	r22, r23
    5e4e:	d6 01       	movw	r26, r12
    5e50:	6c 93       	st	X, r22
    5e52:	d7 01       	movw	r26, r14
    5e54:	d2 96       	adiw	r26, 0x32	; 50
    5e56:	cd 90       	ld	r12, X+
    5e58:	dc 90       	ld	r13, X
    5e5a:	d6 01       	movw	r26, r12
    5e5c:	6c 91       	ld	r22, X
    5e5e:	d7 01       	movw	r26, r14
    5e60:	d8 96       	adiw	r26, 0x38	; 56
    5e62:	7c 91       	ld	r23, X
    5e64:	67 2b       	or	r22, r23
    5e66:	d6 01       	movw	r26, r12
    5e68:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    5e6a:	d7 01       	movw	r26, r14
    5e6c:	d0 96       	adiw	r26, 0x30	; 48
    5e6e:	cd 90       	ld	r12, X+
    5e70:	dc 90       	ld	r13, X
    5e72:	d6 01       	movw	r26, r12
    5e74:	6c 91       	ld	r22, X
    5e76:	d7 01       	movw	r26, r14
    5e78:	db 96       	adiw	r26, 0x3b	; 59
    5e7a:	7c 91       	ld	r23, X
    5e7c:	67 23       	and	r22, r23
    5e7e:	d6 01       	movw	r26, r12
    5e80:	6c 93       	st	X, r22
    5e82:	12 b8       	out	0x02, r1	; 2
    5e84:	d7 01       	movw	r26, r14
    5e86:	d2 96       	adiw	r26, 0x32	; 50
    5e88:	cd 90       	ld	r12, X+
    5e8a:	dc 90       	ld	r13, X
    5e8c:	d6 01       	movw	r26, r12
    5e8e:	6c 91       	ld	r22, X
    5e90:	d7 01       	movw	r26, r14
    5e92:	dc 96       	adiw	r26, 0x3c	; 60
    5e94:	7c 91       	ld	r23, X
    5e96:	67 23       	and	r22, r23
    5e98:	d6 01       	movw	r26, r12
    5e9a:	6c 93       	st	X, r22
    5e9c:	d7 01       	movw	r26, r14
    5e9e:	d2 96       	adiw	r26, 0x32	; 50
    5ea0:	cd 90       	ld	r12, X+
    5ea2:	dc 90       	ld	r13, X
    5ea4:	d6 01       	movw	r26, r12
    5ea6:	6c 91       	ld	r22, X
    5ea8:	d7 01       	movw	r26, r14
    5eaa:	d8 96       	adiw	r26, 0x38	; 56
    5eac:	7c 91       	ld	r23, X
    5eae:	67 2b       	or	r22, r23
    5eb0:	d6 01       	movw	r26, r12
    5eb2:	6c 93       	st	X, r22
    5eb4:	61 e5       	ldi	r22, 0x51	; 81
    5eb6:	62 b9       	out	0x02, r22	; 2
    5eb8:	d7 01       	movw	r26, r14
    5eba:	d2 96       	adiw	r26, 0x32	; 50
    5ebc:	cd 90       	ld	r12, X+
    5ebe:	dc 90       	ld	r13, X
    5ec0:	d6 01       	movw	r26, r12
    5ec2:	6c 91       	ld	r22, X
    5ec4:	d7 01       	movw	r26, r14
    5ec6:	dc 96       	adiw	r26, 0x3c	; 60
    5ec8:	7c 91       	ld	r23, X
    5eca:	67 23       	and	r22, r23
    5ecc:	d6 01       	movw	r26, r12
    5ece:	6c 93       	st	X, r22
    5ed0:	d7 01       	movw	r26, r14
    5ed2:	d2 96       	adiw	r26, 0x32	; 50
    5ed4:	cd 90       	ld	r12, X+
    5ed6:	dc 90       	ld	r13, X
    5ed8:	d6 01       	movw	r26, r12
    5eda:	6c 91       	ld	r22, X
    5edc:	d7 01       	movw	r26, r14
    5ede:	d8 96       	adiw	r26, 0x38	; 56
    5ee0:	7c 91       	ld	r23, X
    5ee2:	67 2b       	or	r22, r23
    5ee4:	d6 01       	movw	r26, r12
    5ee6:	6c 93       	st	X, r22
    5ee8:	d7 01       	movw	r26, r14
    5eea:	d0 96       	adiw	r26, 0x30	; 48
    5eec:	cd 90       	ld	r12, X+
    5eee:	dc 90       	ld	r13, X
    5ef0:	d6 01       	movw	r26, r12
    5ef2:	6c 91       	ld	r22, X
    5ef4:	d7 01       	movw	r26, r14
    5ef6:	d7 96       	adiw	r26, 0x37	; 55
    5ef8:	7c 91       	ld	r23, X
    5efa:	67 2b       	or	r22, r23
    5efc:	d6 01       	movw	r26, r12
    5efe:	6c 93       	st	X, r22
    5f00:	32 b9       	out	0x02, r19	; 2
    5f02:	d7 01       	movw	r26, r14
    5f04:	d2 96       	adiw	r26, 0x32	; 50
    5f06:	cd 90       	ld	r12, X+
    5f08:	dc 90       	ld	r13, X
    5f0a:	d6 01       	movw	r26, r12
    5f0c:	3c 91       	ld	r19, X
    5f0e:	d7 01       	movw	r26, r14
    5f10:	dc 96       	adiw	r26, 0x3c	; 60
    5f12:	6c 91       	ld	r22, X
    5f14:	36 23       	and	r19, r22
    5f16:	d6 01       	movw	r26, r12
    5f18:	3c 93       	st	X, r19
    5f1a:	d7 01       	movw	r26, r14
    5f1c:	d2 96       	adiw	r26, 0x32	; 50
    5f1e:	cd 90       	ld	r12, X+
    5f20:	dc 90       	ld	r13, X
    5f22:	d6 01       	movw	r26, r12
    5f24:	3c 91       	ld	r19, X
    5f26:	d7 01       	movw	r26, r14
    5f28:	d8 96       	adiw	r26, 0x38	; 56
    5f2a:	6c 91       	ld	r22, X
    5f2c:	36 2b       	or	r19, r22
    5f2e:	d6 01       	movw	r26, r12
    5f30:	3c 93       	st	X, r19
    5f32:	22 b9       	out	0x02, r18	; 2
    5f34:	d7 01       	movw	r26, r14
    5f36:	d2 96       	adiw	r26, 0x32	; 50
    5f38:	6d 91       	ld	r22, X+
    5f3a:	7c 91       	ld	r23, X
    5f3c:	db 01       	movw	r26, r22
    5f3e:	2c 91       	ld	r18, X
    5f40:	d7 01       	movw	r26, r14
    5f42:	dc 96       	adiw	r26, 0x3c	; 60
    5f44:	3c 91       	ld	r19, X
    5f46:	23 23       	and	r18, r19
    5f48:	db 01       	movw	r26, r22
    5f4a:	2c 93       	st	X, r18
    5f4c:	d7 01       	movw	r26, r14
    5f4e:	d2 96       	adiw	r26, 0x32	; 50
    5f50:	6d 91       	ld	r22, X+
    5f52:	7c 91       	ld	r23, X
    5f54:	db 01       	movw	r26, r22
    5f56:	2c 91       	ld	r18, X
    5f58:	d7 01       	movw	r26, r14
    5f5a:	d8 96       	adiw	r26, 0x38	; 56
    5f5c:	3c 91       	ld	r19, X
    5f5e:	23 2b       	or	r18, r19
    5f60:	db 01       	movw	r26, r22
    5f62:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    5f64:	d7 01       	movw	r26, r14
    5f66:	d0 96       	adiw	r26, 0x30	; 48
    5f68:	6d 91       	ld	r22, X+
    5f6a:	7c 91       	ld	r23, X
    5f6c:	db 01       	movw	r26, r22
    5f6e:	2c 91       	ld	r18, X
    5f70:	d7 01       	movw	r26, r14
    5f72:	db 96       	adiw	r26, 0x3b	; 59
    5f74:	3c 91       	ld	r19, X
    5f76:	23 23       	and	r18, r19
    5f78:	db 01       	movw	r26, r22
    5f7a:	2c 93       	st	X, r18
    5f7c:	12 b8       	out	0x02, r1	; 2
    5f7e:	d7 01       	movw	r26, r14
    5f80:	d2 96       	adiw	r26, 0x32	; 50
    5f82:	6d 91       	ld	r22, X+
    5f84:	7c 91       	ld	r23, X
    5f86:	db 01       	movw	r26, r22
    5f88:	2c 91       	ld	r18, X
    5f8a:	d7 01       	movw	r26, r14
    5f8c:	dc 96       	adiw	r26, 0x3c	; 60
    5f8e:	3c 91       	ld	r19, X
    5f90:	23 23       	and	r18, r19
    5f92:	db 01       	movw	r26, r22
    5f94:	2c 93       	st	X, r18
    5f96:	d7 01       	movw	r26, r14
    5f98:	d2 96       	adiw	r26, 0x32	; 50
    5f9a:	6d 91       	ld	r22, X+
    5f9c:	7c 91       	ld	r23, X
    5f9e:	db 01       	movw	r26, r22
    5fa0:	2c 91       	ld	r18, X
    5fa2:	d7 01       	movw	r26, r14
    5fa4:	d8 96       	adiw	r26, 0x38	; 56
    5fa6:	3c 91       	ld	r19, X
    5fa8:	23 2b       	or	r18, r19
    5faa:	db 01       	movw	r26, r22
    5fac:	2c 93       	st	X, r18
    5fae:	22 e5       	ldi	r18, 0x52	; 82
    5fb0:	22 b9       	out	0x02, r18	; 2
    5fb2:	d7 01       	movw	r26, r14
    5fb4:	d2 96       	adiw	r26, 0x32	; 50
    5fb6:	6d 91       	ld	r22, X+
    5fb8:	7c 91       	ld	r23, X
    5fba:	db 01       	movw	r26, r22
    5fbc:	2c 91       	ld	r18, X
    5fbe:	d7 01       	movw	r26, r14
    5fc0:	dc 96       	adiw	r26, 0x3c	; 60
    5fc2:	3c 91       	ld	r19, X
    5fc4:	23 23       	and	r18, r19
    5fc6:	db 01       	movw	r26, r22
    5fc8:	2c 93       	st	X, r18
    5fca:	d7 01       	movw	r26, r14
    5fcc:	d2 96       	adiw	r26, 0x32	; 50
    5fce:	6d 91       	ld	r22, X+
    5fd0:	7c 91       	ld	r23, X
    5fd2:	db 01       	movw	r26, r22
    5fd4:	2c 91       	ld	r18, X
    5fd6:	d7 01       	movw	r26, r14
    5fd8:	d8 96       	adiw	r26, 0x38	; 56
    5fda:	3c 91       	ld	r19, X
    5fdc:	23 2b       	or	r18, r19
    5fde:	db 01       	movw	r26, r22
    5fe0:	2c 93       	st	X, r18
    5fe2:	d7 01       	movw	r26, r14
    5fe4:	d0 96       	adiw	r26, 0x30	; 48
    5fe6:	6d 91       	ld	r22, X+
    5fe8:	7c 91       	ld	r23, X
    5fea:	db 01       	movw	r26, r22
    5fec:	2c 91       	ld	r18, X
    5fee:	d7 01       	movw	r26, r14
    5ff0:	d7 96       	adiw	r26, 0x37	; 55
    5ff2:	3c 91       	ld	r19, X
    5ff4:	23 2b       	or	r18, r19
    5ff6:	db 01       	movw	r26, r22
    5ff8:	2c 93       	st	X, r18
    5ffa:	52 b9       	out	0x02, r21	; 2
    5ffc:	d7 01       	movw	r26, r14
    5ffe:	d2 96       	adiw	r26, 0x32	; 50
    6000:	6d 91       	ld	r22, X+
    6002:	7c 91       	ld	r23, X
    6004:	db 01       	movw	r26, r22
    6006:	2c 91       	ld	r18, X
    6008:	d7 01       	movw	r26, r14
    600a:	dc 96       	adiw	r26, 0x3c	; 60
    600c:	3c 91       	ld	r19, X
    600e:	23 23       	and	r18, r19
    6010:	db 01       	movw	r26, r22
    6012:	2c 93       	st	X, r18
    6014:	d7 01       	movw	r26, r14
    6016:	d2 96       	adiw	r26, 0x32	; 50
    6018:	6d 91       	ld	r22, X+
    601a:	7c 91       	ld	r23, X
    601c:	db 01       	movw	r26, r22
    601e:	2c 91       	ld	r18, X
    6020:	d7 01       	movw	r26, r14
    6022:	d8 96       	adiw	r26, 0x38	; 56
    6024:	3c 91       	ld	r19, X
    6026:	23 2b       	or	r18, r19
    6028:	db 01       	movw	r26, r22
    602a:	2c 93       	st	X, r18
    602c:	42 b9       	out	0x02, r20	; 2
    602e:	d7 01       	movw	r26, r14
    6030:	d2 96       	adiw	r26, 0x32	; 50
    6032:	4d 91       	ld	r20, X+
    6034:	5c 91       	ld	r21, X
    6036:	da 01       	movw	r26, r20
    6038:	2c 91       	ld	r18, X
    603a:	d7 01       	movw	r26, r14
    603c:	dc 96       	adiw	r26, 0x3c	; 60
    603e:	3c 91       	ld	r19, X
    6040:	23 23       	and	r18, r19
    6042:	da 01       	movw	r26, r20
    6044:	2c 93       	st	X, r18
    6046:	d7 01       	movw	r26, r14
    6048:	d2 96       	adiw	r26, 0x32	; 50
    604a:	4d 91       	ld	r20, X+
    604c:	5c 91       	ld	r21, X
    604e:	da 01       	movw	r26, r20
    6050:	2c 91       	ld	r18, X
    6052:	d7 01       	movw	r26, r14
    6054:	d8 96       	adiw	r26, 0x38	; 56
    6056:	3c 91       	ld	r19, X
    6058:	23 2b       	or	r18, r19
    605a:	da 01       	movw	r26, r20
    605c:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    605e:	d7 01       	movw	r26, r14
    6060:	d0 96       	adiw	r26, 0x30	; 48
    6062:	4d 91       	ld	r20, X+
    6064:	5c 91       	ld	r21, X
    6066:	da 01       	movw	r26, r20
    6068:	2c 91       	ld	r18, X
    606a:	d7 01       	movw	r26, r14
    606c:	db 96       	adiw	r26, 0x3b	; 59
    606e:	3c 91       	ld	r19, X
    6070:	23 23       	and	r18, r19
    6072:	da 01       	movw	r26, r20
    6074:	2c 93       	st	X, r18
    6076:	12 b8       	out	0x02, r1	; 2
    6078:	d7 01       	movw	r26, r14
    607a:	d2 96       	adiw	r26, 0x32	; 50
    607c:	4d 91       	ld	r20, X+
    607e:	5c 91       	ld	r21, X
    6080:	da 01       	movw	r26, r20
    6082:	2c 91       	ld	r18, X
    6084:	d7 01       	movw	r26, r14
    6086:	dc 96       	adiw	r26, 0x3c	; 60
    6088:	3c 91       	ld	r19, X
    608a:	23 23       	and	r18, r19
    608c:	da 01       	movw	r26, r20
    608e:	2c 93       	st	X, r18
    6090:	d7 01       	movw	r26, r14
    6092:	d2 96       	adiw	r26, 0x32	; 50
    6094:	4d 91       	ld	r20, X+
    6096:	5c 91       	ld	r21, X
    6098:	da 01       	movw	r26, r20
    609a:	2c 91       	ld	r18, X
    609c:	d7 01       	movw	r26, r14
    609e:	d8 96       	adiw	r26, 0x38	; 56
    60a0:	3c 91       	ld	r19, X
    60a2:	23 2b       	or	r18, r19
    60a4:	da 01       	movw	r26, r20
    60a6:	2c 93       	st	X, r18
    60a8:	23 e5       	ldi	r18, 0x53	; 83
    60aa:	22 b9       	out	0x02, r18	; 2
    60ac:	d7 01       	movw	r26, r14
    60ae:	d2 96       	adiw	r26, 0x32	; 50
    60b0:	4d 91       	ld	r20, X+
    60b2:	5c 91       	ld	r21, X
    60b4:	da 01       	movw	r26, r20
    60b6:	2c 91       	ld	r18, X
    60b8:	d7 01       	movw	r26, r14
    60ba:	dc 96       	adiw	r26, 0x3c	; 60
    60bc:	3c 91       	ld	r19, X
    60be:	23 23       	and	r18, r19
    60c0:	da 01       	movw	r26, r20
    60c2:	2c 93       	st	X, r18
    60c4:	d7 01       	movw	r26, r14
    60c6:	d2 96       	adiw	r26, 0x32	; 50
    60c8:	4d 91       	ld	r20, X+
    60ca:	5c 91       	ld	r21, X
    60cc:	da 01       	movw	r26, r20
    60ce:	2c 91       	ld	r18, X
    60d0:	d7 01       	movw	r26, r14
    60d2:	d8 96       	adiw	r26, 0x38	; 56
    60d4:	3c 91       	ld	r19, X
    60d6:	23 2b       	or	r18, r19
    60d8:	da 01       	movw	r26, r20
    60da:	2c 93       	st	X, r18
    60dc:	d7 01       	movw	r26, r14
    60de:	d0 96       	adiw	r26, 0x30	; 48
    60e0:	4d 91       	ld	r20, X+
    60e2:	5c 91       	ld	r21, X
    60e4:	da 01       	movw	r26, r20
    60e6:	2c 91       	ld	r18, X
    60e8:	d7 01       	movw	r26, r14
    60ea:	d7 96       	adiw	r26, 0x37	; 55
    60ec:	3c 91       	ld	r19, X
    60ee:	23 2b       	or	r18, r19
    60f0:	da 01       	movw	r26, r20
    60f2:	2c 93       	st	X, r18
    60f4:	12 b9       	out	0x02, r17	; 2
    60f6:	d7 01       	movw	r26, r14
    60f8:	d2 96       	adiw	r26, 0x32	; 50
    60fa:	4d 91       	ld	r20, X+
    60fc:	5c 91       	ld	r21, X
    60fe:	da 01       	movw	r26, r20
    6100:	2c 91       	ld	r18, X
    6102:	d7 01       	movw	r26, r14
    6104:	dc 96       	adiw	r26, 0x3c	; 60
    6106:	3c 91       	ld	r19, X
    6108:	23 23       	and	r18, r19
    610a:	da 01       	movw	r26, r20
    610c:	2c 93       	st	X, r18
    610e:	d7 01       	movw	r26, r14
    6110:	d2 96       	adiw	r26, 0x32	; 50
    6112:	4d 91       	ld	r20, X+
    6114:	5c 91       	ld	r21, X
    6116:	da 01       	movw	r26, r20
    6118:	2c 91       	ld	r18, X
    611a:	d7 01       	movw	r26, r14
    611c:	d8 96       	adiw	r26, 0x38	; 56
    611e:	3c 91       	ld	r19, X
    6120:	23 2b       	or	r18, r19
    6122:	da 01       	movw	r26, r20
    6124:	2c 93       	st	X, r18
    6126:	02 b9       	out	0x02, r16	; 2
    6128:	d7 01       	movw	r26, r14
    612a:	d2 96       	adiw	r26, 0x32	; 50
    612c:	4d 91       	ld	r20, X+
    612e:	5c 91       	ld	r21, X
    6130:	da 01       	movw	r26, r20
    6132:	2c 91       	ld	r18, X
    6134:	d7 01       	movw	r26, r14
    6136:	dc 96       	adiw	r26, 0x3c	; 60
    6138:	3c 91       	ld	r19, X
    613a:	23 23       	and	r18, r19
    613c:	da 01       	movw	r26, r20
    613e:	2c 93       	st	X, r18
    6140:	d7 01       	movw	r26, r14
    6142:	d2 96       	adiw	r26, 0x32	; 50
    6144:	4d 91       	ld	r20, X+
    6146:	5c 91       	ld	r21, X
    6148:	da 01       	movw	r26, r20
    614a:	2c 91       	ld	r18, X
    614c:	d7 01       	movw	r26, r14
    614e:	d8 96       	adiw	r26, 0x38	; 56
    6150:	3c 91       	ld	r19, X
    6152:	23 2b       	or	r18, r19
    6154:	da 01       	movw	r26, r20
    6156:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    6158:	d7 01       	movw	r26, r14
    615a:	d0 96       	adiw	r26, 0x30	; 48
    615c:	4d 91       	ld	r20, X+
    615e:	5c 91       	ld	r21, X
    6160:	da 01       	movw	r26, r20
    6162:	2c 91       	ld	r18, X
    6164:	d7 01       	movw	r26, r14
    6166:	db 96       	adiw	r26, 0x3b	; 59
    6168:	3c 91       	ld	r19, X
    616a:	23 23       	and	r18, r19
    616c:	da 01       	movw	r26, r20
    616e:	2c 93       	st	X, r18
    6170:	12 b8       	out	0x02, r1	; 2
    6172:	d7 01       	movw	r26, r14
    6174:	d2 96       	adiw	r26, 0x32	; 50
    6176:	4d 91       	ld	r20, X+
    6178:	5c 91       	ld	r21, X
    617a:	da 01       	movw	r26, r20
    617c:	2c 91       	ld	r18, X
    617e:	d7 01       	movw	r26, r14
    6180:	dc 96       	adiw	r26, 0x3c	; 60
    6182:	3c 91       	ld	r19, X
    6184:	23 23       	and	r18, r19
    6186:	da 01       	movw	r26, r20
    6188:	2c 93       	st	X, r18
    618a:	d7 01       	movw	r26, r14
    618c:	d2 96       	adiw	r26, 0x32	; 50
    618e:	4d 91       	ld	r20, X+
    6190:	5c 91       	ld	r21, X
    6192:	da 01       	movw	r26, r20
    6194:	2c 91       	ld	r18, X
    6196:	d7 01       	movw	r26, r14
    6198:	d8 96       	adiw	r26, 0x38	; 56
    619a:	3c 91       	ld	r19, X
    619c:	23 2b       	or	r18, r19
    619e:	da 01       	movw	r26, r20
    61a0:	2c 93       	st	X, r18
    61a2:	20 e2       	ldi	r18, 0x20	; 32
    61a4:	22 b9       	out	0x02, r18	; 2
    61a6:	d7 01       	movw	r26, r14
    61a8:	d2 96       	adiw	r26, 0x32	; 50
    61aa:	4d 91       	ld	r20, X+
    61ac:	5c 91       	ld	r21, X
    61ae:	da 01       	movw	r26, r20
    61b0:	2c 91       	ld	r18, X
    61b2:	d7 01       	movw	r26, r14
    61b4:	dc 96       	adiw	r26, 0x3c	; 60
    61b6:	3c 91       	ld	r19, X
    61b8:	23 23       	and	r18, r19
    61ba:	da 01       	movw	r26, r20
    61bc:	2c 93       	st	X, r18
    61be:	d7 01       	movw	r26, r14
    61c0:	d2 96       	adiw	r26, 0x32	; 50
    61c2:	4d 91       	ld	r20, X+
    61c4:	5c 91       	ld	r21, X
    61c6:	da 01       	movw	r26, r20
    61c8:	2c 91       	ld	r18, X
    61ca:	d7 01       	movw	r26, r14
    61cc:	d8 96       	adiw	r26, 0x38	; 56
    61ce:	3c 91       	ld	r19, X
    61d0:	23 2b       	or	r18, r19
    61d2:	da 01       	movw	r26, r20
    61d4:	2c 93       	st	X, r18
    61d6:	d7 01       	movw	r26, r14
    61d8:	d0 96       	adiw	r26, 0x30	; 48
    61da:	4d 91       	ld	r20, X+
    61dc:	5c 91       	ld	r21, X
    61de:	da 01       	movw	r26, r20
    61e0:	2c 91       	ld	r18, X
    61e2:	d7 01       	movw	r26, r14
    61e4:	d7 96       	adiw	r26, 0x37	; 55
    61e6:	3c 91       	ld	r19, X
    61e8:	23 2b       	or	r18, r19
    61ea:	da 01       	movw	r26, r20
    61ec:	2c 93       	st	X, r18
    61ee:	f2 b9       	out	0x02, r31	; 2
    61f0:	d7 01       	movw	r26, r14
    61f2:	d2 96       	adiw	r26, 0x32	; 50
    61f4:	4d 91       	ld	r20, X+
    61f6:	5c 91       	ld	r21, X
    61f8:	da 01       	movw	r26, r20
    61fa:	2c 91       	ld	r18, X
    61fc:	d7 01       	movw	r26, r14
    61fe:	dc 96       	adiw	r26, 0x3c	; 60
    6200:	3c 91       	ld	r19, X
    6202:	23 23       	and	r18, r19
    6204:	da 01       	movw	r26, r20
    6206:	2c 93       	st	X, r18
    6208:	d7 01       	movw	r26, r14
    620a:	d2 96       	adiw	r26, 0x32	; 50
    620c:	4d 91       	ld	r20, X+
    620e:	5c 91       	ld	r21, X
    6210:	da 01       	movw	r26, r20
    6212:	2c 91       	ld	r18, X
    6214:	d7 01       	movw	r26, r14
    6216:	d8 96       	adiw	r26, 0x38	; 56
    6218:	3c 91       	ld	r19, X
    621a:	23 2b       	or	r18, r19
    621c:	da 01       	movw	r26, r20
    621e:	2c 93       	st	X, r18
    6220:	e2 b9       	out	0x02, r30	; 2
    6222:	d7 01       	movw	r26, r14
    6224:	d2 96       	adiw	r26, 0x32	; 50
    6226:	ed 91       	ld	r30, X+
    6228:	fc 91       	ld	r31, X
    622a:	d3 97       	sbiw	r26, 0x33	; 51
    622c:	20 81       	ld	r18, Z
    622e:	dc 96       	adiw	r26, 0x3c	; 60
    6230:	3c 91       	ld	r19, X
    6232:	dc 97       	sbiw	r26, 0x3c	; 60
    6234:	23 23       	and	r18, r19
    6236:	20 83       	st	Z, r18
    6238:	d2 96       	adiw	r26, 0x32	; 50
    623a:	ed 91       	ld	r30, X+
    623c:	fc 91       	ld	r31, X
    623e:	d3 97       	sbiw	r26, 0x33	; 51
    6240:	20 81       	ld	r18, Z
    6242:	d8 96       	adiw	r26, 0x38	; 56
    6244:	3c 91       	ld	r19, X
    6246:	d8 97       	sbiw	r26, 0x38	; 56
    6248:	23 2b       	or	r18, r19
    624a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    624c:	d0 96       	adiw	r26, 0x30	; 48
    624e:	ed 91       	ld	r30, X+
    6250:	fc 91       	ld	r31, X
    6252:	d1 97       	sbiw	r26, 0x31	; 49
    6254:	20 81       	ld	r18, Z
    6256:	db 96       	adiw	r26, 0x3b	; 59
    6258:	3c 91       	ld	r19, X
    625a:	db 97       	sbiw	r26, 0x3b	; 59
    625c:	23 23       	and	r18, r19
    625e:	20 83       	st	Z, r18
    6260:	12 b8       	out	0x02, r1	; 2
    6262:	d2 96       	adiw	r26, 0x32	; 50
    6264:	ed 91       	ld	r30, X+
    6266:	fc 91       	ld	r31, X
    6268:	d3 97       	sbiw	r26, 0x33	; 51
    626a:	20 81       	ld	r18, Z
    626c:	dc 96       	adiw	r26, 0x3c	; 60
    626e:	3c 91       	ld	r19, X
    6270:	dc 97       	sbiw	r26, 0x3c	; 60
    6272:	23 23       	and	r18, r19
    6274:	20 83       	st	Z, r18
    6276:	d2 96       	adiw	r26, 0x32	; 50
    6278:	ed 91       	ld	r30, X+
    627a:	fc 91       	ld	r31, X
    627c:	d3 97       	sbiw	r26, 0x33	; 51
    627e:	20 81       	ld	r18, Z
    6280:	d8 96       	adiw	r26, 0x38	; 56
    6282:	3c 91       	ld	r19, X
    6284:	d8 97       	sbiw	r26, 0x38	; 56
    6286:	23 2b       	or	r18, r19
    6288:	20 83       	st	Z, r18
    628a:	21 e2       	ldi	r18, 0x21	; 33
    628c:	22 b9       	out	0x02, r18	; 2
    628e:	d2 96       	adiw	r26, 0x32	; 50
    6290:	ed 91       	ld	r30, X+
    6292:	fc 91       	ld	r31, X
    6294:	d3 97       	sbiw	r26, 0x33	; 51
    6296:	20 81       	ld	r18, Z
    6298:	dc 96       	adiw	r26, 0x3c	; 60
    629a:	3c 91       	ld	r19, X
    629c:	dc 97       	sbiw	r26, 0x3c	; 60
    629e:	23 23       	and	r18, r19
    62a0:	20 83       	st	Z, r18
    62a2:	d2 96       	adiw	r26, 0x32	; 50
    62a4:	ed 91       	ld	r30, X+
    62a6:	fc 91       	ld	r31, X
    62a8:	d3 97       	sbiw	r26, 0x33	; 51
    62aa:	20 81       	ld	r18, Z
    62ac:	d8 96       	adiw	r26, 0x38	; 56
    62ae:	3c 91       	ld	r19, X
    62b0:	d8 97       	sbiw	r26, 0x38	; 56
    62b2:	23 2b       	or	r18, r19
    62b4:	20 83       	st	Z, r18
    62b6:	d0 96       	adiw	r26, 0x30	; 48
    62b8:	ed 91       	ld	r30, X+
    62ba:	fc 91       	ld	r31, X
    62bc:	d1 97       	sbiw	r26, 0x31	; 49
    62be:	20 81       	ld	r18, Z
    62c0:	d7 96       	adiw	r26, 0x37	; 55
    62c2:	3c 91       	ld	r19, X
    62c4:	d7 97       	sbiw	r26, 0x37	; 55
    62c6:	23 2b       	or	r18, r19
    62c8:	20 83       	st	Z, r18
    62ca:	92 b9       	out	0x02, r25	; 2
    62cc:	d2 96       	adiw	r26, 0x32	; 50
    62ce:	ed 91       	ld	r30, X+
    62d0:	fc 91       	ld	r31, X
    62d2:	d3 97       	sbiw	r26, 0x33	; 51
    62d4:	90 81       	ld	r25, Z
    62d6:	dc 96       	adiw	r26, 0x3c	; 60
    62d8:	2c 91       	ld	r18, X
    62da:	dc 97       	sbiw	r26, 0x3c	; 60
    62dc:	92 23       	and	r25, r18
    62de:	90 83       	st	Z, r25
    62e0:	d2 96       	adiw	r26, 0x32	; 50
    62e2:	ed 91       	ld	r30, X+
    62e4:	fc 91       	ld	r31, X
    62e6:	d3 97       	sbiw	r26, 0x33	; 51
    62e8:	90 81       	ld	r25, Z
    62ea:	d8 96       	adiw	r26, 0x38	; 56
    62ec:	2c 91       	ld	r18, X
    62ee:	d8 97       	sbiw	r26, 0x38	; 56
    62f0:	92 2b       	or	r25, r18
    62f2:	90 83       	st	Z, r25
    62f4:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    62f6:	d2 96       	adiw	r26, 0x32	; 50
    62f8:	ed 91       	ld	r30, X+
    62fa:	fc 91       	ld	r31, X
    62fc:	d3 97       	sbiw	r26, 0x33	; 51
    62fe:	80 81       	ld	r24, Z
    6300:	dc 96       	adiw	r26, 0x3c	; 60
    6302:	9c 91       	ld	r25, X
    6304:	dc 97       	sbiw	r26, 0x3c	; 60
    6306:	89 23       	and	r24, r25
    6308:	80 83       	st	Z, r24
    630a:	d2 96       	adiw	r26, 0x32	; 50
    630c:	ed 91       	ld	r30, X+
    630e:	fc 91       	ld	r31, X
    6310:	d3 97       	sbiw	r26, 0x33	; 51
    6312:	80 81       	ld	r24, Z
    6314:	d8 96       	adiw	r26, 0x38	; 56
    6316:	9c 91       	ld	r25, X
    6318:	89 2b       	or	r24, r25
    631a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    631c:	d7 01       	movw	r26, r14
    631e:	9e 96       	adiw	r26, 0x2e	; 46
    6320:	ed 91       	ld	r30, X+
    6322:	fc 91       	ld	r31, X
    6324:	9f 97       	sbiw	r26, 0x2f	; 47
    6326:	80 81       	ld	r24, Z
    6328:	d6 96       	adiw	r26, 0x36	; 54
    632a:	9c 91       	ld	r25, X
    632c:	89 2b       	or	r24, r25
    632e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    6330:	28 96       	adiw	r28, 0x08	; 8
    6332:	0f b6       	in	r0, 0x3f	; 63
    6334:	f8 94       	cli
    6336:	de bf       	out	0x3e, r29	; 62
    6338:	0f be       	out	0x3f, r0	; 63
    633a:	cd bf       	out	0x3d, r28	; 61
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	1f 91       	pop	r17
    6342:	0f 91       	pop	r16
    6344:	ff 90       	pop	r15
    6346:	ef 90       	pop	r14
    6348:	df 90       	pop	r13
    634a:	cf 90       	pop	r12
    634c:	bf 90       	pop	r11
    634e:	af 90       	pop	r10
    6350:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6352:	f7 01       	movw	r30, r14
    6354:	a6 85       	ldd	r26, Z+14	; 0x0e
    6356:	b7 85       	ldd	r27, Z+15	; 0x0f
    6358:	59 01       	movw	r10, r18
    635a:	a0 94       	com	r10
    635c:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    635e:	9d 01       	movw	r18, r26
    6360:	26 1b       	sub	r18, r22
    6362:	37 0b       	sbc	r19, r23
    6364:	21 50       	subi	r18, 0x01	; 1
    6366:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    6368:	60 89       	ldd	r22, Z+16	; 0x10
    636a:	71 89       	ldd	r23, Z+17	; 0x11
    636c:	68 01       	movw	r12, r16
    636e:	c0 94       	com	r12
    6370:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    6372:	8a 01       	movw	r16, r20
    6374:	00 95       	com	r16
    6376:	10 95       	com	r17
    6378:	06 0f       	add	r16, r22
    637a:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    637c:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    637e:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    6380:	a6 01       	movw	r20, r12
    6382:	46 0f       	add	r20, r22
    6384:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6386:	b5 01       	movw	r22, r10
    6388:	f1 cc       	rjmp	.-1566   	; 0x5d6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    638a:	f7 01       	movw	r30, r14
    638c:	a0 89       	ldd	r26, Z+16	; 0x10
    638e:	b1 89       	ldd	r27, Z+17	; 0x11
    6390:	69 01       	movw	r12, r18
    6392:	c0 94       	com	r12
    6394:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    6396:	cd 01       	movw	r24, r26
    6398:	86 1b       	sub	r24, r22
    639a:	97 0b       	sbc	r25, r23
    639c:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    639e:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    63a0:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    63a2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    63a4:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    63a6:	a6 01       	movw	r20, r12
    63a8:	4a 0f       	add	r20, r26
    63aa:	5b 1f       	adc	r21, r27
    63ac:	e1 cc       	rjmp	.-1598   	; 0x5d70 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    63ae:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    63b0:	fb 01       	movw	r30, r22
    63b2:	de cc       	rjmp	.-1604   	; 0x5d70 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    63b4:	01 97       	sbiw	r24, 0x01	; 1
    63b6:	09 f0       	breq	.+2      	; 0x63ba <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    63b8:	e5 c1       	rjmp	.+970    	; 0x6784 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    63ba:	d0 96       	adiw	r26, 0x30	; 48
    63bc:	ed 91       	ld	r30, X+
    63be:	fc 91       	ld	r31, X
    63c0:	d1 97       	sbiw	r26, 0x31	; 49
    63c2:	80 81       	ld	r24, Z
    63c4:	db 96       	adiw	r26, 0x3b	; 59
    63c6:	9c 91       	ld	r25, X
    63c8:	db 97       	sbiw	r26, 0x3b	; 59
    63ca:	89 23       	and	r24, r25
    63cc:	80 83       	st	Z, r24
    63ce:	82 e0       	ldi	r24, 0x02	; 2
    63d0:	82 b9       	out	0x02, r24	; 2
    63d2:	d2 96       	adiw	r26, 0x32	; 50
    63d4:	ed 91       	ld	r30, X+
    63d6:	fc 91       	ld	r31, X
    63d8:	d3 97       	sbiw	r26, 0x33	; 51
    63da:	80 81       	ld	r24, Z
    63dc:	dc 96       	adiw	r26, 0x3c	; 60
    63de:	9c 91       	ld	r25, X
    63e0:	dc 97       	sbiw	r26, 0x3c	; 60
    63e2:	89 23       	and	r24, r25
    63e4:	80 83       	st	Z, r24
    63e6:	d2 96       	adiw	r26, 0x32	; 50
    63e8:	ed 91       	ld	r30, X+
    63ea:	fc 91       	ld	r31, X
    63ec:	d3 97       	sbiw	r26, 0x33	; 51
    63ee:	80 81       	ld	r24, Z
    63f0:	d8 96       	adiw	r26, 0x38	; 56
    63f2:	9c 91       	ld	r25, X
    63f4:	d8 97       	sbiw	r26, 0x38	; 56
    63f6:	89 2b       	or	r24, r25
    63f8:	80 83       	st	Z, r24
    63fa:	d0 96       	adiw	r26, 0x30	; 48
    63fc:	ed 91       	ld	r30, X+
    63fe:	fc 91       	ld	r31, X
    6400:	d1 97       	sbiw	r26, 0x31	; 49
    6402:	80 81       	ld	r24, Z
    6404:	d7 96       	adiw	r26, 0x37	; 55
    6406:	9c 91       	ld	r25, X
    6408:	d7 97       	sbiw	r26, 0x37	; 55
    640a:	89 2b       	or	r24, r25
    640c:	80 83       	st	Z, r24
    640e:	72 b9       	out	0x02, r23	; 2
    6410:	d2 96       	adiw	r26, 0x32	; 50
    6412:	ed 91       	ld	r30, X+
    6414:	fc 91       	ld	r31, X
    6416:	d3 97       	sbiw	r26, 0x33	; 51
    6418:	80 81       	ld	r24, Z
    641a:	dc 96       	adiw	r26, 0x3c	; 60
    641c:	9c 91       	ld	r25, X
    641e:	dc 97       	sbiw	r26, 0x3c	; 60
    6420:	89 23       	and	r24, r25
    6422:	80 83       	st	Z, r24
    6424:	d2 96       	adiw	r26, 0x32	; 50
    6426:	ed 91       	ld	r30, X+
    6428:	fc 91       	ld	r31, X
    642a:	d3 97       	sbiw	r26, 0x33	; 51
    642c:	80 81       	ld	r24, Z
    642e:	d8 96       	adiw	r26, 0x38	; 56
    6430:	9c 91       	ld	r25, X
    6432:	d8 97       	sbiw	r26, 0x38	; 56
    6434:	89 2b       	or	r24, r25
    6436:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    6438:	d0 96       	adiw	r26, 0x30	; 48
    643a:	ed 91       	ld	r30, X+
    643c:	fc 91       	ld	r31, X
    643e:	d1 97       	sbiw	r26, 0x31	; 49
    6440:	80 81       	ld	r24, Z
    6442:	db 96       	adiw	r26, 0x3b	; 59
    6444:	9c 91       	ld	r25, X
    6446:	db 97       	sbiw	r26, 0x3b	; 59
    6448:	89 23       	and	r24, r25
    644a:	80 83       	st	Z, r24
    644c:	83 e0       	ldi	r24, 0x03	; 3
    644e:	82 b9       	out	0x02, r24	; 2
    6450:	d2 96       	adiw	r26, 0x32	; 50
    6452:	ed 91       	ld	r30, X+
    6454:	fc 91       	ld	r31, X
    6456:	d3 97       	sbiw	r26, 0x33	; 51
    6458:	80 81       	ld	r24, Z
    645a:	dc 96       	adiw	r26, 0x3c	; 60
    645c:	9c 91       	ld	r25, X
    645e:	dc 97       	sbiw	r26, 0x3c	; 60
    6460:	89 23       	and	r24, r25
    6462:	80 83       	st	Z, r24
    6464:	d2 96       	adiw	r26, 0x32	; 50
    6466:	ed 91       	ld	r30, X+
    6468:	fc 91       	ld	r31, X
    646a:	d3 97       	sbiw	r26, 0x33	; 51
    646c:	80 81       	ld	r24, Z
    646e:	d8 96       	adiw	r26, 0x38	; 56
    6470:	9c 91       	ld	r25, X
    6472:	d8 97       	sbiw	r26, 0x38	; 56
    6474:	89 2b       	or	r24, r25
    6476:	80 83       	st	Z, r24
    6478:	d0 96       	adiw	r26, 0x30	; 48
    647a:	ed 91       	ld	r30, X+
    647c:	fc 91       	ld	r31, X
    647e:	d1 97       	sbiw	r26, 0x31	; 49
    6480:	80 81       	ld	r24, Z
    6482:	d7 96       	adiw	r26, 0x37	; 55
    6484:	9c 91       	ld	r25, X
    6486:	d7 97       	sbiw	r26, 0x37	; 55
    6488:	89 2b       	or	r24, r25
    648a:	80 83       	st	Z, r24
    648c:	62 b9       	out	0x02, r22	; 2
    648e:	d2 96       	adiw	r26, 0x32	; 50
    6490:	ed 91       	ld	r30, X+
    6492:	fc 91       	ld	r31, X
    6494:	d3 97       	sbiw	r26, 0x33	; 51
    6496:	80 81       	ld	r24, Z
    6498:	dc 96       	adiw	r26, 0x3c	; 60
    649a:	9c 91       	ld	r25, X
    649c:	dc 97       	sbiw	r26, 0x3c	; 60
    649e:	89 23       	and	r24, r25
    64a0:	80 83       	st	Z, r24
    64a2:	d2 96       	adiw	r26, 0x32	; 50
    64a4:	ed 91       	ld	r30, X+
    64a6:	fc 91       	ld	r31, X
    64a8:	d3 97       	sbiw	r26, 0x33	; 51
    64aa:	80 81       	ld	r24, Z
    64ac:	d8 96       	adiw	r26, 0x38	; 56
    64ae:	9c 91       	ld	r25, X
    64b0:	d8 97       	sbiw	r26, 0x38	; 56
    64b2:	89 2b       	or	r24, r25
    64b4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    64b6:	d0 96       	adiw	r26, 0x30	; 48
    64b8:	ed 91       	ld	r30, X+
    64ba:	fc 91       	ld	r31, X
    64bc:	d1 97       	sbiw	r26, 0x31	; 49
    64be:	80 81       	ld	r24, Z
    64c0:	db 96       	adiw	r26, 0x3b	; 59
    64c2:	9c 91       	ld	r25, X
    64c4:	db 97       	sbiw	r26, 0x3b	; 59
    64c6:	89 23       	and	r24, r25
    64c8:	80 83       	st	Z, r24
    64ca:	86 e0       	ldi	r24, 0x06	; 6
    64cc:	82 b9       	out	0x02, r24	; 2
    64ce:	d2 96       	adiw	r26, 0x32	; 50
    64d0:	ed 91       	ld	r30, X+
    64d2:	fc 91       	ld	r31, X
    64d4:	d3 97       	sbiw	r26, 0x33	; 51
    64d6:	80 81       	ld	r24, Z
    64d8:	dc 96       	adiw	r26, 0x3c	; 60
    64da:	9c 91       	ld	r25, X
    64dc:	dc 97       	sbiw	r26, 0x3c	; 60
    64de:	89 23       	and	r24, r25
    64e0:	80 83       	st	Z, r24
    64e2:	d2 96       	adiw	r26, 0x32	; 50
    64e4:	ed 91       	ld	r30, X+
    64e6:	fc 91       	ld	r31, X
    64e8:	d3 97       	sbiw	r26, 0x33	; 51
    64ea:	80 81       	ld	r24, Z
    64ec:	d8 96       	adiw	r26, 0x38	; 56
    64ee:	9c 91       	ld	r25, X
    64f0:	d8 97       	sbiw	r26, 0x38	; 56
    64f2:	89 2b       	or	r24, r25
    64f4:	80 83       	st	Z, r24
    64f6:	d0 96       	adiw	r26, 0x30	; 48
    64f8:	ed 91       	ld	r30, X+
    64fa:	fc 91       	ld	r31, X
    64fc:	d1 97       	sbiw	r26, 0x31	; 49
    64fe:	80 81       	ld	r24, Z
    6500:	d7 96       	adiw	r26, 0x37	; 55
    6502:	9c 91       	ld	r25, X
    6504:	d7 97       	sbiw	r26, 0x37	; 55
    6506:	89 2b       	or	r24, r25
    6508:	80 83       	st	Z, r24
    650a:	52 b9       	out	0x02, r21	; 2
    650c:	d2 96       	adiw	r26, 0x32	; 50
    650e:	ed 91       	ld	r30, X+
    6510:	fc 91       	ld	r31, X
    6512:	d3 97       	sbiw	r26, 0x33	; 51
    6514:	80 81       	ld	r24, Z
    6516:	dc 96       	adiw	r26, 0x3c	; 60
    6518:	9c 91       	ld	r25, X
    651a:	dc 97       	sbiw	r26, 0x3c	; 60
    651c:	89 23       	and	r24, r25
    651e:	80 83       	st	Z, r24
    6520:	d2 96       	adiw	r26, 0x32	; 50
    6522:	ed 91       	ld	r30, X+
    6524:	fc 91       	ld	r31, X
    6526:	d3 97       	sbiw	r26, 0x33	; 51
    6528:	80 81       	ld	r24, Z
    652a:	d8 96       	adiw	r26, 0x38	; 56
    652c:	9c 91       	ld	r25, X
    652e:	d8 97       	sbiw	r26, 0x38	; 56
    6530:	89 2b       	or	r24, r25
    6532:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    6534:	d0 96       	adiw	r26, 0x30	; 48
    6536:	ed 91       	ld	r30, X+
    6538:	fc 91       	ld	r31, X
    653a:	d1 97       	sbiw	r26, 0x31	; 49
    653c:	80 81       	ld	r24, Z
    653e:	db 96       	adiw	r26, 0x3b	; 59
    6540:	9c 91       	ld	r25, X
    6542:	db 97       	sbiw	r26, 0x3b	; 59
    6544:	89 23       	and	r24, r25
    6546:	80 83       	st	Z, r24
    6548:	87 e0       	ldi	r24, 0x07	; 7
    654a:	82 b9       	out	0x02, r24	; 2
    654c:	d2 96       	adiw	r26, 0x32	; 50
    654e:	ed 91       	ld	r30, X+
    6550:	fc 91       	ld	r31, X
    6552:	d3 97       	sbiw	r26, 0x33	; 51
    6554:	80 81       	ld	r24, Z
    6556:	dc 96       	adiw	r26, 0x3c	; 60
    6558:	9c 91       	ld	r25, X
    655a:	dc 97       	sbiw	r26, 0x3c	; 60
    655c:	89 23       	and	r24, r25
    655e:	80 83       	st	Z, r24
    6560:	d2 96       	adiw	r26, 0x32	; 50
    6562:	ed 91       	ld	r30, X+
    6564:	fc 91       	ld	r31, X
    6566:	d3 97       	sbiw	r26, 0x33	; 51
    6568:	80 81       	ld	r24, Z
    656a:	d8 96       	adiw	r26, 0x38	; 56
    656c:	9c 91       	ld	r25, X
    656e:	d8 97       	sbiw	r26, 0x38	; 56
    6570:	89 2b       	or	r24, r25
    6572:	80 83       	st	Z, r24
    6574:	d0 96       	adiw	r26, 0x30	; 48
    6576:	ed 91       	ld	r30, X+
    6578:	fc 91       	ld	r31, X
    657a:	d1 97       	sbiw	r26, 0x31	; 49
    657c:	80 81       	ld	r24, Z
    657e:	d7 96       	adiw	r26, 0x37	; 55
    6580:	9c 91       	ld	r25, X
    6582:	d7 97       	sbiw	r26, 0x37	; 55
    6584:	89 2b       	or	r24, r25
    6586:	80 83       	st	Z, r24
    6588:	42 b9       	out	0x02, r20	; 2
    658a:	d2 96       	adiw	r26, 0x32	; 50
    658c:	ed 91       	ld	r30, X+
    658e:	fc 91       	ld	r31, X
    6590:	d3 97       	sbiw	r26, 0x33	; 51
    6592:	80 81       	ld	r24, Z
    6594:	dc 96       	adiw	r26, 0x3c	; 60
    6596:	9c 91       	ld	r25, X
    6598:	dc 97       	sbiw	r26, 0x3c	; 60
    659a:	89 23       	and	r24, r25
    659c:	80 83       	st	Z, r24
    659e:	d2 96       	adiw	r26, 0x32	; 50
    65a0:	ed 91       	ld	r30, X+
    65a2:	fc 91       	ld	r31, X
    65a4:	d3 97       	sbiw	r26, 0x33	; 51
    65a6:	80 81       	ld	r24, Z
    65a8:	d8 96       	adiw	r26, 0x38	; 56
    65aa:	9c 91       	ld	r25, X
    65ac:	d8 97       	sbiw	r26, 0x38	; 56
    65ae:	89 2b       	or	r24, r25
    65b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    65b2:	d0 96       	adiw	r26, 0x30	; 48
    65b4:	ed 91       	ld	r30, X+
    65b6:	fc 91       	ld	r31, X
    65b8:	d1 97       	sbiw	r26, 0x31	; 49
    65ba:	80 81       	ld	r24, Z
    65bc:	db 96       	adiw	r26, 0x3b	; 59
    65be:	9c 91       	ld	r25, X
    65c0:	db 97       	sbiw	r26, 0x3b	; 59
    65c2:	89 23       	and	r24, r25
    65c4:	80 83       	st	Z, r24
    65c6:	84 e0       	ldi	r24, 0x04	; 4
    65c8:	82 b9       	out	0x02, r24	; 2
    65ca:	d2 96       	adiw	r26, 0x32	; 50
    65cc:	ed 91       	ld	r30, X+
    65ce:	fc 91       	ld	r31, X
    65d0:	d3 97       	sbiw	r26, 0x33	; 51
    65d2:	80 81       	ld	r24, Z
    65d4:	dc 96       	adiw	r26, 0x3c	; 60
    65d6:	9c 91       	ld	r25, X
    65d8:	dc 97       	sbiw	r26, 0x3c	; 60
    65da:	89 23       	and	r24, r25
    65dc:	80 83       	st	Z, r24
    65de:	d2 96       	adiw	r26, 0x32	; 50
    65e0:	ed 91       	ld	r30, X+
    65e2:	fc 91       	ld	r31, X
    65e4:	d3 97       	sbiw	r26, 0x33	; 51
    65e6:	80 81       	ld	r24, Z
    65e8:	d8 96       	adiw	r26, 0x38	; 56
    65ea:	9c 91       	ld	r25, X
    65ec:	d8 97       	sbiw	r26, 0x38	; 56
    65ee:	89 2b       	or	r24, r25
    65f0:	80 83       	st	Z, r24
    65f2:	d0 96       	adiw	r26, 0x30	; 48
    65f4:	ed 91       	ld	r30, X+
    65f6:	fc 91       	ld	r31, X
    65f8:	d1 97       	sbiw	r26, 0x31	; 49
    65fa:	80 81       	ld	r24, Z
    65fc:	d7 96       	adiw	r26, 0x37	; 55
    65fe:	9c 91       	ld	r25, X
    6600:	d7 97       	sbiw	r26, 0x37	; 55
    6602:	89 2b       	or	r24, r25
    6604:	80 83       	st	Z, r24
    6606:	32 b9       	out	0x02, r19	; 2
    6608:	d2 96       	adiw	r26, 0x32	; 50
    660a:	ed 91       	ld	r30, X+
    660c:	fc 91       	ld	r31, X
    660e:	d3 97       	sbiw	r26, 0x33	; 51
    6610:	80 81       	ld	r24, Z
    6612:	dc 96       	adiw	r26, 0x3c	; 60
    6614:	9c 91       	ld	r25, X
    6616:	dc 97       	sbiw	r26, 0x3c	; 60
    6618:	89 23       	and	r24, r25
    661a:	80 83       	st	Z, r24
    661c:	d2 96       	adiw	r26, 0x32	; 50
    661e:	ed 91       	ld	r30, X+
    6620:	fc 91       	ld	r31, X
    6622:	d3 97       	sbiw	r26, 0x33	; 51
    6624:	80 81       	ld	r24, Z
    6626:	d8 96       	adiw	r26, 0x38	; 56
    6628:	9c 91       	ld	r25, X
    662a:	d8 97       	sbiw	r26, 0x38	; 56
    662c:	89 2b       	or	r24, r25
    662e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    6630:	d0 96       	adiw	r26, 0x30	; 48
    6632:	ed 91       	ld	r30, X+
    6634:	fc 91       	ld	r31, X
    6636:	d1 97       	sbiw	r26, 0x31	; 49
    6638:	80 81       	ld	r24, Z
    663a:	db 96       	adiw	r26, 0x3b	; 59
    663c:	9c 91       	ld	r25, X
    663e:	db 97       	sbiw	r26, 0x3b	; 59
    6640:	89 23       	and	r24, r25
    6642:	80 83       	st	Z, r24
    6644:	85 e0       	ldi	r24, 0x05	; 5
    6646:	82 b9       	out	0x02, r24	; 2
    6648:	d2 96       	adiw	r26, 0x32	; 50
    664a:	ed 91       	ld	r30, X+
    664c:	fc 91       	ld	r31, X
    664e:	d3 97       	sbiw	r26, 0x33	; 51
    6650:	80 81       	ld	r24, Z
    6652:	dc 96       	adiw	r26, 0x3c	; 60
    6654:	9c 91       	ld	r25, X
    6656:	dc 97       	sbiw	r26, 0x3c	; 60
    6658:	89 23       	and	r24, r25
    665a:	80 83       	st	Z, r24
    665c:	d2 96       	adiw	r26, 0x32	; 50
    665e:	ed 91       	ld	r30, X+
    6660:	fc 91       	ld	r31, X
    6662:	d3 97       	sbiw	r26, 0x33	; 51
    6664:	80 81       	ld	r24, Z
    6666:	d8 96       	adiw	r26, 0x38	; 56
    6668:	9c 91       	ld	r25, X
    666a:	d8 97       	sbiw	r26, 0x38	; 56
    666c:	89 2b       	or	r24, r25
    666e:	80 83       	st	Z, r24
    6670:	d0 96       	adiw	r26, 0x30	; 48
    6672:	ed 91       	ld	r30, X+
    6674:	fc 91       	ld	r31, X
    6676:	d1 97       	sbiw	r26, 0x31	; 49
    6678:	80 81       	ld	r24, Z
    667a:	d7 96       	adiw	r26, 0x37	; 55
    667c:	9c 91       	ld	r25, X
    667e:	d7 97       	sbiw	r26, 0x37	; 55
    6680:	89 2b       	or	r24, r25
    6682:	80 83       	st	Z, r24
    6684:	22 b9       	out	0x02, r18	; 2
    6686:	d2 96       	adiw	r26, 0x32	; 50
    6688:	ed 91       	ld	r30, X+
    668a:	fc 91       	ld	r31, X
    668c:	d3 97       	sbiw	r26, 0x33	; 51
    668e:	80 81       	ld	r24, Z
    6690:	dc 96       	adiw	r26, 0x3c	; 60
    6692:	9c 91       	ld	r25, X
    6694:	dc 97       	sbiw	r26, 0x3c	; 60
    6696:	89 23       	and	r24, r25
    6698:	80 83       	st	Z, r24
    669a:	d2 96       	adiw	r26, 0x32	; 50
    669c:	ed 91       	ld	r30, X+
    669e:	fc 91       	ld	r31, X
    66a0:	d3 97       	sbiw	r26, 0x33	; 51
    66a2:	80 81       	ld	r24, Z
    66a4:	d8 96       	adiw	r26, 0x38	; 56
    66a6:	9c 91       	ld	r25, X
    66a8:	d8 97       	sbiw	r26, 0x38	; 56
    66aa:	89 2b       	or	r24, r25
    66ac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    66ae:	d0 96       	adiw	r26, 0x30	; 48
    66b0:	ed 91       	ld	r30, X+
    66b2:	fc 91       	ld	r31, X
    66b4:	d1 97       	sbiw	r26, 0x31	; 49
    66b6:	80 81       	ld	r24, Z
    66b8:	db 96       	adiw	r26, 0x3b	; 59
    66ba:	9c 91       	ld	r25, X
    66bc:	db 97       	sbiw	r26, 0x3b	; 59
    66be:	89 23       	and	r24, r25
    66c0:	80 83       	st	Z, r24
    66c2:	88 e0       	ldi	r24, 0x08	; 8
    66c4:	82 b9       	out	0x02, r24	; 2
    66c6:	d2 96       	adiw	r26, 0x32	; 50
    66c8:	ed 91       	ld	r30, X+
    66ca:	fc 91       	ld	r31, X
    66cc:	d3 97       	sbiw	r26, 0x33	; 51
    66ce:	80 81       	ld	r24, Z
    66d0:	dc 96       	adiw	r26, 0x3c	; 60
    66d2:	9c 91       	ld	r25, X
    66d4:	dc 97       	sbiw	r26, 0x3c	; 60
    66d6:	89 23       	and	r24, r25
    66d8:	80 83       	st	Z, r24
    66da:	d2 96       	adiw	r26, 0x32	; 50
    66dc:	ed 91       	ld	r30, X+
    66de:	fc 91       	ld	r31, X
    66e0:	d3 97       	sbiw	r26, 0x33	; 51
    66e2:	80 81       	ld	r24, Z
    66e4:	d8 96       	adiw	r26, 0x38	; 56
    66e6:	9c 91       	ld	r25, X
    66e8:	d8 97       	sbiw	r26, 0x38	; 56
    66ea:	89 2b       	or	r24, r25
    66ec:	80 83       	st	Z, r24
    66ee:	d0 96       	adiw	r26, 0x30	; 48
    66f0:	ed 91       	ld	r30, X+
    66f2:	fc 91       	ld	r31, X
    66f4:	d1 97       	sbiw	r26, 0x31	; 49
    66f6:	80 81       	ld	r24, Z
    66f8:	d7 96       	adiw	r26, 0x37	; 55
    66fa:	9c 91       	ld	r25, X
    66fc:	d7 97       	sbiw	r26, 0x37	; 55
    66fe:	89 2b       	or	r24, r25
    6700:	80 83       	st	Z, r24
    6702:	12 b9       	out	0x02, r17	; 2
    6704:	d2 96       	adiw	r26, 0x32	; 50
    6706:	ed 91       	ld	r30, X+
    6708:	fc 91       	ld	r31, X
    670a:	d3 97       	sbiw	r26, 0x33	; 51
    670c:	80 81       	ld	r24, Z
    670e:	dc 96       	adiw	r26, 0x3c	; 60
    6710:	9c 91       	ld	r25, X
    6712:	dc 97       	sbiw	r26, 0x3c	; 60
    6714:	89 23       	and	r24, r25
    6716:	80 83       	st	Z, r24
    6718:	d2 96       	adiw	r26, 0x32	; 50
    671a:	ed 91       	ld	r30, X+
    671c:	fc 91       	ld	r31, X
    671e:	d3 97       	sbiw	r26, 0x33	; 51
    6720:	80 81       	ld	r24, Z
    6722:	d8 96       	adiw	r26, 0x38	; 56
    6724:	9c 91       	ld	r25, X
    6726:	d8 97       	sbiw	r26, 0x38	; 56
    6728:	89 2b       	or	r24, r25
    672a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    672c:	d0 96       	adiw	r26, 0x30	; 48
    672e:	ed 91       	ld	r30, X+
    6730:	fc 91       	ld	r31, X
    6732:	d1 97       	sbiw	r26, 0x31	; 49
    6734:	80 81       	ld	r24, Z
    6736:	db 96       	adiw	r26, 0x3b	; 59
    6738:	9c 91       	ld	r25, X
    673a:	db 97       	sbiw	r26, 0x3b	; 59
    673c:	89 23       	and	r24, r25
    673e:	80 83       	st	Z, r24
    6740:	89 e0       	ldi	r24, 0x09	; 9
    6742:	82 b9       	out	0x02, r24	; 2
    6744:	d2 96       	adiw	r26, 0x32	; 50
    6746:	ed 91       	ld	r30, X+
    6748:	fc 91       	ld	r31, X
    674a:	d3 97       	sbiw	r26, 0x33	; 51
    674c:	80 81       	ld	r24, Z
    674e:	dc 96       	adiw	r26, 0x3c	; 60
    6750:	9c 91       	ld	r25, X
    6752:	dc 97       	sbiw	r26, 0x3c	; 60
    6754:	89 23       	and	r24, r25
    6756:	80 83       	st	Z, r24
    6758:	d2 96       	adiw	r26, 0x32	; 50
    675a:	ed 91       	ld	r30, X+
    675c:	fc 91       	ld	r31, X
    675e:	d3 97       	sbiw	r26, 0x33	; 51
    6760:	80 81       	ld	r24, Z
    6762:	d8 96       	adiw	r26, 0x38	; 56
    6764:	9c 91       	ld	r25, X
    6766:	d8 97       	sbiw	r26, 0x38	; 56
    6768:	89 2b       	or	r24, r25
    676a:	80 83       	st	Z, r24
    676c:	d0 96       	adiw	r26, 0x30	; 48
    676e:	ed 91       	ld	r30, X+
    6770:	fc 91       	ld	r31, X
    6772:	d1 97       	sbiw	r26, 0x31	; 49
    6774:	80 81       	ld	r24, Z
    6776:	d7 96       	adiw	r26, 0x37	; 55
    6778:	9c 91       	ld	r25, X
    677a:	d7 97       	sbiw	r26, 0x37	; 55
    677c:	89 2b       	or	r24, r25
    677e:	80 83       	st	Z, r24
    6780:	02 b9       	out	0x02, r16	; 2
    6782:	b9 cd       	rjmp	.-1166   	; 0x62f6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    6784:	7d 83       	std	Y+5, r23	; 0x05
    6786:	6e 83       	std	Y+6, r22	; 0x06
    6788:	3f 83       	std	Y+7, r19	; 0x07
    678a:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    678c:	59 83       	std	Y+1, r21	; 0x01
    678e:	4a 83       	std	Y+2, r20	; 0x02
    6790:	1b 83       	std	Y+3, r17	; 0x03
    6792:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    6794:	f7 01       	movw	r30, r14
    6796:	64 8d       	ldd	r22, Z+28	; 0x1c
    6798:	75 8d       	ldd	r23, Z+29	; 0x1d
    679a:	24 e0       	ldi	r18, 0x04	; 4
    679c:	ae 01       	movw	r20, r28
    679e:	4b 5f       	subi	r20, 0xFB	; 251
    67a0:	5f 4f       	sbci	r21, 0xFF	; 255
    67a2:	c7 01       	movw	r24, r14
    67a4:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    67a8:	d7 01       	movw	r26, r14
    67aa:	5e 96       	adiw	r26, 0x1e	; 30
    67ac:	6d 91       	ld	r22, X+
    67ae:	7c 91       	ld	r23, X
    67b0:	24 e0       	ldi	r18, 0x04	; 4
    67b2:	ae 01       	movw	r20, r28
    67b4:	4f 5f       	subi	r20, 0xFF	; 255
    67b6:	5f 4f       	sbci	r21, 0xFF	; 255
    67b8:	c7 01       	movw	r24, r14
    67ba:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    67be:	ae cd       	rjmp	.-1188   	; 0x631c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000067c0 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:933




bool draw_menu(bool redraw)
{
    67c0:	2f 92       	push	r2
    67c2:	3f 92       	push	r3
    67c4:	4f 92       	push	r4
    67c6:	5f 92       	push	r5
    67c8:	6f 92       	push	r6
    67ca:	7f 92       	push	r7
    67cc:	8f 92       	push	r8
    67ce:	9f 92       	push	r9
    67d0:	af 92       	push	r10
    67d2:	bf 92       	push	r11
    67d4:	cf 92       	push	r12
    67d6:	df 92       	push	r13
    67d8:	ef 92       	push	r14
    67da:	ff 92       	push	r15
    67dc:	0f 93       	push	r16
    67de:	1f 93       	push	r17
    67e0:	cf 93       	push	r28
    67e2:	df 93       	push	r29
    67e4:	cd b7       	in	r28, 0x3d	; 61
    67e6:	de b7       	in	r29, 0x3e	; 62
    67e8:	c6 5d       	subi	r28, 0xD6	; 214
    67ea:	d1 09       	sbc	r29, r1
    67ec:	0f b6       	in	r0, 0x3f	; 63
    67ee:	f8 94       	cli
    67f0:	de bf       	out	0x3e, r29	; 62
    67f2:	0f be       	out	0x3f, r0	; 63
    67f4:	cd bf       	out	0x3d, r28	; 61
    67f6:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:963
  uint8_t rdr;
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu();
    67f8:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <MenuHistoryGetMenu()>
    67fc:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    67fe:	e0 91 c2 0d 	lds	r30, 0x0DC2	; 0x800dc2 <my_touch+0x17>
    6802:	f0 91 c3 0d 	lds	r31, 0x0DC3	; 0x800dc3 <my_touch+0x18>
    6806:	80 81       	ld	r24, Z
    6808:	90 91 c8 0d 	lds	r25, 0x0DC8	; 0x800dc8 <my_touch+0x1d>
    680c:	89 23       	and	r24, r25
    680e:	09 f0       	breq	.+2      	; 0x6812 <draw_menu(bool)+0x52>
    6810:	af c2       	rjmp	.+1374   	; 0x6d70 <draw_menu(bool)+0x5b0>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    6812:	80 ed       	ldi	r24, 0xD0	; 208
    6814:	0e 94 5b 73 	call	0xe6b6	; 0xe6b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]>
    6818:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    681a:	80 e9       	ldi	r24, 0x90	; 144
    681c:	0e 94 5b 73 	call	0xe6b6	; 0xe6b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]>
    6820:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    6822:	80 ed       	ldi	r24, 0xD0	; 208
    6824:	0e 94 5b 73 	call	0xe6b6	; 0xe6b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]>
    6828:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    682a:	80 e9       	ldi	r24, 0x90	; 144
    682c:	0e 94 5b 73 	call	0xe6b6	; 0xe6b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]>
    6830:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    6832:	08 15       	cp	r16, r8
    6834:	19 05       	cpc	r17, r9
    6836:	48 f0       	brcs	.+18     	; 0x684a <draw_menu(bool)+0x8a>
    6838:	c4 01       	movw	r24, r8
    683a:	c2 96       	adiw	r24, 0x32	; 50
    683c:	08 17       	cp	r16, r24
    683e:	19 07       	cpc	r17, r25
    6840:	50 f0       	brcs	.+20     	; 0x6856 <draw_menu(bool)+0x96>
    6842:	80 16       	cp	r8, r16
    6844:	91 06       	cpc	r9, r17
    6846:	08 f4       	brcc	.+2      	; 0x684a <draw_menu(bool)+0x8a>
    6848:	51 c0       	rjmp	.+162    	; 0x68ec <draw_menu(bool)+0x12c>
    684a:	c8 01       	movw	r24, r16
    684c:	c2 96       	adiw	r24, 0x32	; 50
    684e:	88 16       	cp	r8, r24
    6850:	99 06       	cpc	r9, r25
    6852:	08 f0       	brcs	.+2      	; 0x6856 <draw_menu(bool)+0x96>
    6854:	4b c0       	rjmp	.+150    	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    6856:	ec 14       	cp	r14, r12
    6858:	fd 04       	cpc	r15, r13
    685a:	48 f0       	brcs	.+18     	; 0x686e <draw_menu(bool)+0xae>
    685c:	c6 01       	movw	r24, r12
    685e:	c2 96       	adiw	r24, 0x32	; 50
    6860:	e8 16       	cp	r14, r24
    6862:	f9 06       	cpc	r15, r25
    6864:	48 f0       	brcs	.+18     	; 0x6878 <draw_menu(bool)+0xb8>
    6866:	ce 14       	cp	r12, r14
    6868:	df 04       	cpc	r13, r15
    686a:	08 f4       	brcc	.+2      	; 0x686e <draw_menu(bool)+0xae>
    686c:	3f c0       	rjmp	.+126    	; 0x68ec <draw_menu(bool)+0x12c>
    686e:	c7 01       	movw	r24, r14
    6870:	c2 96       	adiw	r24, 0x32	; 50
    6872:	c8 16       	cp	r12, r24
    6874:	d9 06       	cpc	r13, r25
    6876:	d0 f5       	brcc	.+116    	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    6878:	98 01       	movw	r18, r16
    687a:	28 0d       	add	r18, r8
    687c:	39 1d       	adc	r19, r9
    687e:	36 95       	lsr	r19
    6880:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    6882:	a4 e5       	ldi	r26, 0x54	; 84
    6884:	b3 e0       	ldi	r27, 0x03	; 3
    6886:	0e 94 a4 a2 	call	0x14548	; 0x14548 <__umulhisi3>
    688a:	a0 e1       	ldi	r26, 0x10	; 16
    688c:	2a 2e       	mov	r2, r26
    688e:	a7 e2       	ldi	r26, 0x27	; 39
    6890:	3a 2e       	mov	r3, r26
    6892:	41 2c       	mov	r4, r1
    6894:	51 2c       	mov	r5, r1
    6896:	a2 01       	movw	r20, r4
    6898:	91 01       	movw	r18, r2
    689a:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
    689e:	89 01       	movw	r16, r18
    68a0:	0e 50       	subi	r16, 0x0E	; 14
    68a2:	11 09       	sbc	r17, r1
    68a4:	10 93 b0 0d 	sts	0x0DB0, r17	; 0x800db0 <my_touch+0x5>
    68a8:	00 93 af 0d 	sts	0x0DAF, r16	; 0x800daf <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    68ac:	97 01       	movw	r18, r14
    68ae:	2c 0d       	add	r18, r12
    68b0:	3d 1d       	adc	r19, r13
    68b2:	36 95       	lsr	r19
    68b4:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    68b6:	a4 e0       	ldi	r26, 0x04	; 4
    68b8:	b5 e0       	ldi	r27, 0x05	; 5
    68ba:	0e 94 a4 a2 	call	0x14548	; 0x14548 <__umulhisi3>
    68be:	a2 01       	movw	r20, r4
    68c0:	91 01       	movw	r18, r2
    68c2:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
    68c6:	2e 51       	subi	r18, 0x1E	; 30
    68c8:	31 09       	sbc	r19, r1
    68ca:	30 93 b2 0d 	sts	0x0DB2, r19	; 0x800db2 <my_touch+0x7>
    68ce:	20 93 b1 0d 	sts	0x0DB1, r18	; 0x800db1 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    68d2:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <my_touch+0xd>
    68d6:	81 30       	cpi	r24, 0x01	; 1
    68d8:	09 f4       	brne	.+2      	; 0x68dc <draw_menu(bool)+0x11c>
    68da:	00 c2       	rjmp	.+1024   	; 0x6cdc <draw_menu(bool)+0x51c>
    68dc:	08 f4       	brcc	.+2      	; 0x68e0 <draw_menu(bool)+0x120>
    68de:	cd c1       	rjmp	.+922    	; 0x6c7a <draw_menu(bool)+0x4ba>
    68e0:	82 30       	cpi	r24, 0x02	; 2
    68e2:	09 f4       	brne	.+2      	; 0x68e6 <draw_menu(bool)+0x126>
    68e4:	2c c2       	rjmp	.+1112   	; 0x6d3e <draw_menu(bool)+0x57e>
    68e6:	83 30       	cpi	r24, 0x03	; 3
    68e8:	09 f4       	brne	.+2      	; 0x68ec <draw_menu(bool)+0x12c>
    68ea:	35 c2       	rjmp	.+1130   	; 0x6d56 <draw_menu(bool)+0x596>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    68ec:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <my_touch+0xc>
    68f0:	87 fd       	sbrc	r24, 7
    68f2:	13 c0       	rjmp	.+38     	; 0x691a <draw_menu(bool)+0x15a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    68f4:	80 ec       	ldi	r24, 0xC0	; 192
    68f6:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    68fa:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <my_touch+0x4>
    68fe:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <my_touch+0x5>
    6902:	90 93 ac 0d 	sts	0x0DAC, r25	; 0x800dac <my_touch+0x1>
    6906:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    690a:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <my_touch+0x6>
    690e:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x7>
    6912:	90 93 ae 0d 	sts	0x0DAE, r25	; 0x800dae <my_touch+0x3>
    6916:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:969

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    691a:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <my_touch+0xc>
    691e:	87 ff       	sbrs	r24, 7
    6920:	42 c2       	rjmp	.+1156   	; 0x6da6 <draw_menu(bool)+0x5e6>
    6922:	b1 10       	cpse	r11, r1
    6924:	40 c2       	rjmp	.+1152   	; 0x6da6 <draw_menu(bool)+0x5e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
  {
    click_x = my_touch.x;
    6926:	20 91 af 0d 	lds	r18, 0x0DAF	; 0x800daf <my_touch+0x4>
    692a:	30 91 b0 0d 	lds	r19, 0x0DB0	; 0x800db0 <my_touch+0x5>
    692e:	c7 54       	subi	r28, 0x47	; 71
    6930:	df 4f       	sbci	r29, 0xFF	; 255
    6932:	39 83       	std	Y+1, r19	; 0x01
    6934:	28 83       	st	Y, r18
    6936:	c9 5b       	subi	r28, 0xB9	; 185
    6938:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
    click_y = my_touch.y;
    693a:	40 91 b1 0d 	lds	r20, 0x0DB1	; 0x800db1 <my_touch+0x6>
    693e:	50 91 b2 0d 	lds	r21, 0x0DB2	; 0x800db2 <my_touch+0x7>
    6942:	c5 54       	subi	r28, 0x45	; 69
    6944:	df 4f       	sbci	r29, 0xFF	; 255
    6946:	59 83       	std	Y+1, r21	; 0x01
    6948:	48 83       	st	Y, r20
    694a:	cb 5b       	subi	r28, 0xBB	; 187
    694c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975
  }

  global_x = pgm_read_word(&current->x);
    694e:	73 01       	movw	r14, r6
    6950:	56 e1       	ldi	r21, 0x16	; 22
    6952:	e5 1a       	sub	r14, r21
    6954:	5e ef       	ldi	r21, 0xFE	; 254
    6956:	f5 0a       	sbc	r15, r21
    6958:	f7 01       	movw	r30, r14
    695a:	65 91       	lpm	r22, Z+
    695c:	74 91       	lpm	r23, Z
    695e:	c1 54       	subi	r28, 0x41	; 65
    6960:	df 4f       	sbci	r29, 0xFF	; 255
    6962:	79 83       	std	Y+1, r23	; 0x01
    6964:	68 83       	st	Y, r22
    6966:	cf 5b       	subi	r28, 0xBF	; 191
    6968:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:976
  global_y = pgm_read_word(&current->y);
    696a:	63 01       	movw	r12, r6
    696c:	74 e1       	ldi	r23, 0x14	; 20
    696e:	c7 1a       	sub	r12, r23
    6970:	7e ef       	ldi	r23, 0xFE	; 254
    6972:	d7 0a       	sbc	r13, r23
    6974:	f6 01       	movw	r30, r12
    6976:	85 91       	lpm	r24, Z+
    6978:	94 91       	lpm	r25, Z
    697a:	cf 53       	subi	r28, 0x3F	; 63
    697c:	df 4f       	sbci	r29, 0xFF	; 255
    697e:	99 83       	std	Y+1, r25	; 0x01
    6980:	88 83       	st	Y, r24
    6982:	c1 5c       	subi	r28, 0xC1	; 193
    6984:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:978

  menu_args1 = (current->args);
    6986:	f3 01       	movw	r30, r6
    6988:	eb 50       	subi	r30, 0x0B	; 11
    698a:	fe 4f       	sbci	r31, 0xFE	; 254
    698c:	20 81       	ld	r18, Z
    698e:	31 81       	ldd	r19, Z+1	; 0x01
    6990:	cd 52       	subi	r28, 0x2D	; 45
    6992:	df 4f       	sbci	r29, 0xFF	; 255
    6994:	39 83       	std	Y+1, r19	; 0x01
    6996:	28 83       	st	Y, r18
    6998:	c3 5d       	subi	r28, 0xD3	; 211
    699a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:981
  

  rfnt = pgm_read_word(&current->redraw_class_0);
    699c:	33 96       	adiw	r30, 0x03	; 3
    699e:	25 91       	lpm	r18, Z+
    69a0:	34 91       	lpm	r19, Z
    69a2:	cd 52       	subi	r28, 0x2D	; 45
    69a4:	df 4f       	sbci	r29, 0xFF	; 255
    69a6:	48 81       	ld	r20, Y
    69a8:	59 81       	ldd	r21, Y+1	; 0x01
    69aa:	c3 5d       	subi	r28, 0xD3	; 211
    69ac:	d0 40       	sbci	r29, 0x00	; 0
    69ae:	55 27       	eor	r21, r21
    69b0:	cd 53       	subi	r28, 0x3D	; 61
    69b2:	df 4f       	sbci	r29, 0xFF	; 255
    69b4:	59 83       	std	Y+1, r21	; 0x01
    69b6:	48 83       	st	Y, r20
    69b8:	c3 5c       	subi	r28, 0xC3	; 195
    69ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:982
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    69bc:	83 01       	movw	r16, r6
    69be:	07 51       	subi	r16, 0x17	; 23
    69c0:	1e 4f       	sbci	r17, 0xFE	; 254
    69c2:	f8 01       	movw	r30, r16
    69c4:	85 91       	lpm	r24, Z+
    69c6:	94 91       	lpm	r25, Z
    69c8:	ba 01       	movw	r22, r20
    69ca:	f9 01       	movw	r30, r18
    69cc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:984
  if (rdr == 0)
    cbi(redraw_class, 0);
    69ce:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:983
  menu_args1 = (current->args);
  

  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    69d0:	88 23       	and	r24, r24
    69d2:	11 f0       	breq	.+4      	; 0x69d8 <draw_menu(bool)+0x218>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:986
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    69d4:	aa 24       	eor	r10, r10
    69d6:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:988
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    69d8:	f3 01       	movw	r30, r6
    69da:	e6 50       	subi	r30, 0x06	; 6
    69dc:	fe 4f       	sbci	r31, 0xFE	; 254
    69de:	25 91       	lpm	r18, Z+
    69e0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    69e2:	f8 01       	movw	r30, r16
    69e4:	85 91       	lpm	r24, Z+
    69e6:	94 91       	lpm	r25, Z
    69e8:	cd 53       	subi	r28, 0x3D	; 61
    69ea:	df 4f       	sbci	r29, 0xFF	; 255
    69ec:	68 81       	ld	r22, Y
    69ee:	79 81       	ldd	r23, Y+1	; 0x01
    69f0:	c3 5c       	subi	r28, 0xC3	; 195
    69f2:	d0 40       	sbci	r29, 0x00	; 0
    69f4:	f9 01       	movw	r30, r18
    69f6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:990
  if (rdr == 0)
    69f8:	81 11       	cpse	r24, r1
    69fa:	e2 c1       	rjmp	.+964    	; 0x6dc0 <draw_menu(bool)+0x600>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:991
    cbi(redraw_class, 1);
    69fc:	e8 94       	clt
    69fe:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    6a00:	f3 01       	movw	r30, r6
    6a02:	e4 50       	subi	r30, 0x04	; 4
    6a04:	fe 4f       	sbci	r31, 0xFE	; 254
    6a06:	25 91       	lpm	r18, Z+
    6a08:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
    6a0a:	f8 01       	movw	r30, r16
    6a0c:	85 91       	lpm	r24, Z+
    6a0e:	94 91       	lpm	r25, Z
    6a10:	cd 53       	subi	r28, 0x3D	; 61
    6a12:	df 4f       	sbci	r29, 0xFF	; 255
    6a14:	68 81       	ld	r22, Y
    6a16:	79 81       	ldd	r23, Y+1	; 0x01
    6a18:	c3 5c       	subi	r28, 0xC3	; 195
    6a1a:	d0 40       	sbci	r29, 0x00	; 0
    6a1c:	f9 01       	movw	r30, r18
    6a1e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
  if (rdr == 0)
    6a20:	81 11       	cpse	r24, r1
    6a22:	d1 c1       	rjmp	.+930    	; 0x6dc6 <draw_menu(bool)+0x606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:998
    cbi(redraw_class, 2);
    6a24:	8a 2d       	mov	r24, r10
    6a26:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1002
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    6a28:	b1 10       	cpse	r11, r1
    6a2a:	d0 c1       	rjmp	.+928    	; 0x6dcc <draw_menu(bool)+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1003
    cbi(redraw_class, 3);
    6a2c:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
  else
    sbi(redraw_class, 3);
    6a2e:	c4 53       	subi	r28, 0x34	; 52
    6a30:	df 4f       	sbci	r29, 0xFF	; 255
    6a32:	88 83       	st	Y, r24
    6a34:	cc 5c       	subi	r28, 0xCC	; 204
    6a36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1008
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    6a38:	f3 01       	movw	r30, r6
    6a3a:	e9 50       	subi	r30, 0x09	; 9
    6a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a3e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1009
  if (enable_redraw(rdr, redraw_class) == true)
    6a40:	c4 53       	subi	r28, 0x34	; 52
    6a42:	df 4f       	sbci	r29, 0xFF	; 255
    6a44:	68 81       	ld	r22, Y
    6a46:	cc 5c       	subi	r28, 0xCC	; 204
    6a48:	d0 40       	sbci	r29, 0x00	; 0
    6a4a:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    6a4e:	88 23       	and	r24, r24
    6a50:	d9 f0       	breq	.+54     	; 0x6a88 <draw_menu(bool)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1011
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    6a52:	f3 01       	movw	r30, r6
    6a54:	65 91       	lpm	r22, Z+
    6a56:	74 91       	lpm	r23, Z
    6a58:	ce 01       	movw	r24, r28
    6a5a:	01 96       	adiw	r24, 0x01	; 1
    6a5c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1012
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    6a60:	f6 01       	movw	r30, r12
    6a62:	45 91       	lpm	r20, Z+
    6a64:	54 91       	lpm	r21, Z
    6a66:	f7 01       	movw	r30, r14
    6a68:	65 91       	lpm	r22, Z+
    6a6a:	74 91       	lpm	r23, Z
    6a6c:	4b 5f       	subi	r20, 0xFB	; 251
    6a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a70:	6b 5f       	subi	r22, 0xFB	; 251
    6a72:	7f 4f       	sbci	r23, 0xFF	; 255
    6a74:	ee 24       	eor	r14, r14
    6a76:	ea 94       	dec	r14
    6a78:	fe 2c       	mov	r15, r14
    6a7a:	10 e0       	ldi	r17, 0x00	; 0
    6a7c:	00 e0       	ldi	r16, 0x00	; 0
    6a7e:	22 e0       	ldi	r18, 0x02	; 2
    6a80:	ce 01       	movw	r24, r28
    6a82:	01 96       	adiw	r24, 0x01	; 1
    6a84:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:965
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu();

  click_x = 0;
    6a88:	10 e0       	ldi	r17, 0x00	; 0
    6a8a:	c9 53       	subi	r28, 0x39	; 57
    6a8c:	df 4f       	sbci	r29, 0xFF	; 255
    6a8e:	18 82       	st	Y, r1
    6a90:	c7 5c       	subi	r28, 0xC7	; 199
    6a92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1016
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    6a94:	93 01       	movw	r18, r6
    6a96:	2e 51       	subi	r18, 0x1E	; 30
    6a98:	3e 4f       	sbci	r19, 0xFE	; 254
    6a9a:	cb 54       	subi	r28, 0x4B	; 75
    6a9c:	df 4f       	sbci	r29, 0xFF	; 255
    6a9e:	39 83       	std	Y+1, r19	; 0x01
    6aa0:	28 83       	st	Y, r18
    6aa2:	c5 5b       	subi	r28, 0xB5	; 181
    6aa4:	d0 40       	sbci	r29, 0x00	; 0
    6aa6:	2f e0       	ldi	r18, 0x0F	; 15
    6aa8:	f2 2e       	mov	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1029
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str2, str1, 0);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
      {
        printf("menu args1: %d\n", menu_args1);
    6aaa:	32 e5       	ldi	r19, 0x52	; 82
    6aac:	23 2e       	mov	r2, r19
    6aae:	33 e0       	ldi	r19, 0x03	; 3
    6ab0:	33 2e       	mov	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1016
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    6ab2:	cb 54       	subi	r28, 0x4B	; 75
    6ab4:	df 4f       	sbci	r29, 0xFF	; 255
    6ab6:	e8 81       	ld	r30, Y
    6ab8:	f9 81       	ldd	r31, Y+1	; 0x01
    6aba:	c5 5b       	subi	r28, 0xB5	; 181
    6abc:	d0 40       	sbci	r29, 0x00	; 0
    6abe:	84 91       	lpm	r24, Z
    6ac0:	18 17       	cp	r17, r24
    6ac2:	08 f0       	brcs	.+2      	; 0x6ac6 <draw_menu(bool)+0x306>
    6ac4:	85 c1       	rjmp	.+778    	; 0x6dd0 <draw_menu(bool)+0x610>
    6ac6:	1f 9d       	mul	r17, r15
    6ac8:	20 01       	movw	r4, r0
    6aca:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1019
  {
    button_1 = &current->button_1[idx];
    rdr = pgm_read_byte(&button_1->redraw_class);
    6acc:	f2 01       	movw	r30, r4
    6ace:	70 96       	adiw	r30, 0x10	; 16
    6ad0:	e6 0d       	add	r30, r6
    6ad2:	f7 1d       	adc	r31, r7
    6ad4:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1020
    if (enable_redraw(rdr, redraw_class) == true)
    6ad6:	c4 53       	subi	r28, 0x34	; 52
    6ad8:	df 4f       	sbci	r29, 0xFF	; 255
    6ada:	68 81       	ld	r22, Y
    6adc:	cc 5c       	subi	r28, 0xCC	; 204
    6ade:	d0 40       	sbci	r29, 0x00	; 0
    6ae0:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    6ae4:	88 23       	and	r24, r24
    6ae6:	09 f4       	brne	.+2      	; 0x6aea <draw_menu(bool)+0x32a>
    6ae8:	45 c0       	rjmp	.+138    	; 0x6b74 <draw_menu(bool)+0x3b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1022
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    6aea:	f2 01       	movw	r30, r4
    6aec:	32 96       	adiw	r30, 0x02	; 2
    6aee:	e6 0d       	add	r30, r6
    6af0:	f7 1d       	adc	r31, r7
    6af2:	65 91       	lpm	r22, Z+
    6af4:	74 91       	lpm	r23, Z
    6af6:	ce 01       	movw	r24, r28
    6af8:	8f 57       	subi	r24, 0x7F	; 127
    6afa:	9f 4f       	sbci	r25, 0xFF	; 255
    6afc:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
      str1[0] = 0;
    6b00:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1024
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str2, str1, 0);
    6b02:	e8 e0       	ldi	r30, 0x08	; 8
    6b04:	f0 e0       	ldi	r31, 0x00	; 0
    6b06:	e4 90       	lpm	r14, Z
    6b08:	f2 01       	movw	r30, r4
    6b0a:	3c 96       	adiw	r30, 0x0c	; 12
    6b0c:	e6 0d       	add	r30, r6
    6b0e:	f7 1d       	adc	r31, r7
    6b10:	04 91       	lpm	r16, Z
    6b12:	f2 01       	movw	r30, r4
    6b14:	3a 96       	adiw	r30, 0x0a	; 10
    6b16:	e6 0d       	add	r30, r6
    6b18:	f7 1d       	adc	r31, r7
    6b1a:	25 91       	lpm	r18, Z+
    6b1c:	34 91       	lpm	r19, Z
    6b1e:	f2 01       	movw	r30, r4
    6b20:	38 96       	adiw	r30, 0x08	; 8
    6b22:	e6 0d       	add	r30, r6
    6b24:	f7 1d       	adc	r31, r7
    6b26:	45 91       	lpm	r20, Z+
    6b28:	54 91       	lpm	r21, Z
    6b2a:	f2 01       	movw	r30, r4
    6b2c:	36 96       	adiw	r30, 0x06	; 6
    6b2e:	e6 0d       	add	r30, r6
    6b30:	f7 1d       	adc	r31, r7
    6b32:	65 91       	lpm	r22, Z+
    6b34:	74 91       	lpm	r23, Z
    6b36:	f2 01       	movw	r30, r4
    6b38:	34 96       	adiw	r30, 0x04	; 4
    6b3a:	e6 0d       	add	r30, r6
    6b3c:	f7 1d       	adc	r31, r7
    6b3e:	85 91       	lpm	r24, Z+
    6b40:	94 91       	lpm	r25, Z
    6b42:	cf 53       	subi	r28, 0x3F	; 63
    6b44:	df 4f       	sbci	r29, 0xFF	; 255
    6b46:	a8 80       	ld	r10, Y
    6b48:	b9 80       	ldd	r11, Y+1	; 0x01
    6b4a:	c1 5c       	subi	r28, 0xC1	; 193
    6b4c:	d0 40       	sbci	r29, 0x00	; 0
    6b4e:	6a 0d       	add	r22, r10
    6b50:	7b 1d       	adc	r23, r11
    6b52:	81 2c       	mov	r8, r1
    6b54:	fe 01       	movw	r30, r28
    6b56:	31 96       	adiw	r30, 0x01	; 1
    6b58:	5f 01       	movw	r10, r30
    6b5a:	e0 58       	subi	r30, 0x80	; 128
    6b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b5e:	6f 01       	movw	r12, r30
    6b60:	c1 54       	subi	r28, 0x41	; 65
    6b62:	df 4f       	sbci	r29, 0xFF	; 255
    6b64:	e8 81       	ld	r30, Y
    6b66:	f9 81       	ldd	r31, Y+1	; 0x01
    6b68:	cf 5b       	subi	r28, 0xBF	; 191
    6b6a:	d0 40       	sbci	r29, 0x00	; 0
    6b6c:	8e 0f       	add	r24, r30
    6b6e:	9f 1f       	adc	r25, r31
    6b70:	0e 94 6e 25 	call	0x4adc	; 0x4adc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1026
    }
    if (click_x > 0 && click_y > 0)
    6b74:	c7 54       	subi	r28, 0x47	; 71
    6b76:	df 4f       	sbci	r29, 0xFF	; 255
    6b78:	a8 80       	ld	r10, Y
    6b7a:	b9 80       	ldd	r11, Y+1	; 0x01
    6b7c:	c9 5b       	subi	r28, 0xB9	; 185
    6b7e:	d0 40       	sbci	r29, 0x00	; 0
    6b80:	a1 14       	cp	r10, r1
    6b82:	b1 04       	cpc	r11, r1
    6b84:	09 f4       	brne	.+2      	; 0x6b88 <draw_menu(bool)+0x3c8>
    6b86:	77 c0       	rjmp	.+238    	; 0x6c76 <draw_menu(bool)+0x4b6>
    6b88:	c5 54       	subi	r28, 0x45	; 69
    6b8a:	df 4f       	sbci	r29, 0xFF	; 255
    6b8c:	28 81       	ld	r18, Y
    6b8e:	39 81       	ldd	r19, Y+1	; 0x01
    6b90:	cb 5b       	subi	r28, 0xBB	; 187
    6b92:	d0 40       	sbci	r29, 0x00	; 0
    6b94:	23 2b       	or	r18, r19
    6b96:	09 f4       	brne	.+2      	; 0x6b9a <draw_menu(bool)+0x3da>
    6b98:	6e c0       	rjmp	.+220    	; 0x6c76 <draw_menu(bool)+0x4b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1027
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    6b9a:	f2 01       	movw	r30, r4
    6b9c:	3a 96       	adiw	r30, 0x0a	; 10
    6b9e:	e6 0d       	add	r30, r6
    6ba0:	f7 1d       	adc	r31, r7
    6ba2:	45 91       	lpm	r20, Z+
    6ba4:	54 91       	lpm	r21, Z
    6ba6:	f2 01       	movw	r30, r4
    6ba8:	38 96       	adiw	r30, 0x08	; 8
    6baa:	e6 0d       	add	r30, r6
    6bac:	f7 1d       	adc	r31, r7
    6bae:	65 91       	lpm	r22, Z+
    6bb0:	74 91       	lpm	r23, Z
    6bb2:	f2 01       	movw	r30, r4
    6bb4:	36 96       	adiw	r30, 0x06	; 6
    6bb6:	e6 0d       	add	r30, r6
    6bb8:	f7 1d       	adc	r31, r7
    6bba:	85 91       	lpm	r24, Z+
    6bbc:	94 91       	lpm	r25, Z
    6bbe:	f2 01       	movw	r30, r4
    6bc0:	34 96       	adiw	r30, 0x04	; 4
    6bc2:	e6 0d       	add	r30, r6
    6bc4:	f7 1d       	adc	r31, r7
    6bc6:	25 91       	lpm	r18, Z+
    6bc8:	34 91       	lpm	r19, Z
    6bca:	c1 54       	subi	r28, 0x41	; 65
    6bcc:	df 4f       	sbci	r29, 0xFF	; 255
    6bce:	e8 81       	ld	r30, Y
    6bd0:	f9 81       	ldd	r31, Y+1	; 0x01
    6bd2:	cf 5b       	subi	r28, 0xBF	; 191
    6bd4:	d0 40       	sbci	r29, 0x00	; 0
    6bd6:	2e 0f       	add	r18, r30
    6bd8:	3f 1f       	adc	r19, r31
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6bda:	2a 15       	cp	r18, r10
    6bdc:	3b 05       	cpc	r19, r11
    6bde:	0c f0       	brlt	.+2      	; 0x6be2 <draw_menu(bool)+0x422>
    6be0:	4a c0       	rjmp	.+148    	; 0x6c76 <draw_menu(bool)+0x4b6>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6be2:	26 0f       	add	r18, r22
    6be4:	37 1f       	adc	r19, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6be6:	a2 16       	cp	r10, r18
    6be8:	b3 06       	cpc	r11, r19
    6bea:	0c f0       	brlt	.+2      	; 0x6bee <draw_menu(bool)+0x42e>
    6bec:	44 c0       	rjmp	.+136    	; 0x6c76 <draw_menu(bool)+0x4b6>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1027
      strcpy_P(str2, pgm_read_word(&button_1->name));
      str1[0] = 0;
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str2, str1, 0);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    6bee:	cf 53       	subi	r28, 0x3F	; 63
    6bf0:	df 4f       	sbci	r29, 0xFF	; 255
    6bf2:	a8 80       	ld	r10, Y
    6bf4:	b9 80       	ldd	r11, Y+1	; 0x01
    6bf6:	c1 5c       	subi	r28, 0xC1	; 193
    6bf8:	d0 40       	sbci	r29, 0x00	; 0
    6bfa:	8a 0d       	add	r24, r10
    6bfc:	9b 1d       	adc	r25, r11
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6bfe:	c5 54       	subi	r28, 0x45	; 69
    6c00:	df 4f       	sbci	r29, 0xFF	; 255
    6c02:	28 81       	ld	r18, Y
    6c04:	39 81       	ldd	r19, Y+1	; 0x01
    6c06:	cb 5b       	subi	r28, 0xBB	; 187
    6c08:	d0 40       	sbci	r29, 0x00	; 0
    6c0a:	82 17       	cp	r24, r18
    6c0c:	93 07       	cpc	r25, r19
    6c0e:	9c f5       	brge	.+102    	; 0x6c76 <draw_menu(bool)+0x4b6>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6c10:	84 0f       	add	r24, r20
    6c12:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6c14:	28 17       	cp	r18, r24
    6c16:	39 07       	cpc	r19, r25
    6c18:	74 f5       	brge	.+92     	; 0x6c76 <draw_menu(bool)+0x4b6>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1029
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str2, str1, 0);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
      {
        printf("menu args1: %d\n", menu_args1);
    6c1a:	cc 53       	subi	r28, 0x3C	; 60
    6c1c:	df 4f       	sbci	r29, 0xFF	; 255
    6c1e:	38 81       	ld	r19, Y
    6c20:	c4 5c       	subi	r28, 0xC4	; 196
    6c22:	d0 40       	sbci	r29, 0x00	; 0
    6c24:	3f 93       	push	r19
    6c26:	cd 53       	subi	r28, 0x3D	; 61
    6c28:	df 4f       	sbci	r29, 0xFF	; 255
    6c2a:	48 81       	ld	r20, Y
    6c2c:	c3 5c       	subi	r28, 0xC3	; 195
    6c2e:	d0 40       	sbci	r29, 0x00	; 0
    6c30:	4f 93       	push	r20
    6c32:	3f 92       	push	r3
    6c34:	2f 92       	push	r2
    6c36:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1030
        fntargs =  pgm_read_word(&button_1->onclick);
    6c3a:	f2 01       	movw	r30, r4
    6c3c:	3e 96       	adiw	r30, 0x0e	; 14
    6c3e:	e6 0d       	add	r30, r6
    6c40:	f7 1d       	adc	r31, r7
    6c42:	25 91       	lpm	r18, Z+
    6c44:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
    6c46:	f2 01       	movw	r30, r4
    6c48:	3d 96       	adiw	r30, 0x0d	; 13
    6c4a:	e6 0d       	add	r30, r6
    6c4c:	f7 1d       	adc	r31, r7
    6c4e:	84 91       	lpm	r24, Z
    6c50:	cd 53       	subi	r28, 0x3D	; 61
    6c52:	df 4f       	sbci	r29, 0xFF	; 255
    6c54:	68 81       	ld	r22, Y
    6c56:	79 81       	ldd	r23, Y+1	; 0x01
    6c58:	c3 5c       	subi	r28, 0xC3	; 195
    6c5a:	d0 40       	sbci	r29, 0x00	; 0
    6c5c:	90 e0       	ldi	r25, 0x00	; 0
    6c5e:	f9 01       	movw	r30, r18
    6c60:	19 95       	eicall
    6c62:	0f 90       	pop	r0
    6c64:	0f 90       	pop	r0
    6c66:	0f 90       	pop	r0
    6c68:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1032
        ret = true;
    6c6a:	f1 e0       	ldi	r31, 0x01	; 1
    6c6c:	c9 53       	subi	r28, 0x39	; 57
    6c6e:	df 4f       	sbci	r29, 0xFF	; 255
    6c70:	f8 83       	st	Y, r31
    6c72:	c7 5c       	subi	r28, 0xC7	; 199
    6c74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1016
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    6c76:	1f 5f       	subi	r17, 0xFF	; 255
    6c78:	1c cf       	rjmp	.-456    	; 0x6ab2 <draw_menu(bool)+0x2f2>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    6c7a:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <my_touch+0xe>
    6c7e:	88 23       	and	r24, r24
    6c80:	09 f4       	brne	.+2      	; 0x6c84 <draw_menu(bool)+0x4c4>
    6c82:	34 ce       	rjmp	.-920    	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    6c84:	81 30       	cpi	r24, 0x01	; 1
    6c86:	59 f4       	brne	.+22     	; 0x6c9e <draw_menu(bool)+0x4de>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    6c88:	30 93 b0 0d 	sts	0x0DB0, r19	; 0x800db0 <my_touch+0x5>
    6c8c:	20 93 af 0d 	sts	0x0DAF, r18	; 0x800daf <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    6c90:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <my_touch+0xa>
    6c94:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0xb>
    6c98:	80 1b       	sub	r24, r16
    6c9a:	91 0b       	sbc	r25, r17
    6c9c:	3d c0       	rjmp	.+122    	; 0x6d18 <draw_menu(bool)+0x558>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    6c9e:	82 30       	cpi	r24, 0x02	; 2
    6ca0:	59 f4       	brne	.+22     	; 0x6cb8 <draw_menu(bool)+0x4f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    6ca2:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <my_touch+0x8>
    6ca6:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x9>
    6caa:	80 1b       	sub	r24, r16
    6cac:	91 0b       	sbc	r25, r17
    6cae:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x5>
    6cb2:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x4>
    6cb6:	2a c0       	rjmp	.+84     	; 0x6d0c <draw_menu(bool)+0x54c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    6cb8:	83 30       	cpi	r24, 0x03	; 3
    6cba:	09 f0       	breq	.+2      	; 0x6cbe <draw_menu(bool)+0x4fe>
    6cbc:	17 ce       	rjmp	.-978    	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    6cbe:	10 93 b2 0d 	sts	0x0DB2, r17	; 0x800db2 <my_touch+0x7>
    6cc2:	00 93 b1 0d 	sts	0x0DB1, r16	; 0x800db1 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    6cc6:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <my_touch+0x8>
    6cca:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x9>
    6cce:	82 1b       	sub	r24, r18
    6cd0:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    6cd2:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x5>
    6cd6:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x4>
    6cda:	08 ce       	rjmp	.-1008   	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    6cdc:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <my_touch+0xe>
    6ce0:	81 11       	cpse	r24, r1
    6ce2:	07 c0       	rjmp	.+14     	; 0x6cf2 <draw_menu(bool)+0x532>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    6ce4:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <my_touch+0x8>
    6ce8:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x9>
    6cec:	80 1b       	sub	r24, r16
    6cee:	91 0b       	sbc	r25, r17
    6cf0:	f0 cf       	rjmp	.-32     	; 0x6cd2 <draw_menu(bool)+0x512>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    6cf2:	81 30       	cpi	r24, 0x01	; 1
    6cf4:	49 f4       	brne	.+18     	; 0x6d08 <draw_menu(bool)+0x548>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    6cf6:	30 93 b0 0d 	sts	0x0DB0, r19	; 0x800db0 <my_touch+0x5>
    6cfa:	20 93 af 0d 	sts	0x0DAF, r18	; 0x800daf <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    6cfe:	10 93 b2 0d 	sts	0x0DB2, r17	; 0x800db2 <my_touch+0x7>
    6d02:	00 93 b1 0d 	sts	0x0DB1, r16	; 0x800db1 <my_touch+0x6>
    6d06:	f2 cd       	rjmp	.-1052   	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    6d08:	82 30       	cpi	r24, 0x02	; 2
    6d0a:	59 f4       	brne	.+22     	; 0x6d22 <draw_menu(bool)+0x562>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    6d0c:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <my_touch+0xa>
    6d10:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0xb>
    6d14:	82 1b       	sub	r24, r18
    6d16:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    6d18:	90 93 b2 0d 	sts	0x0DB2, r25	; 0x800db2 <my_touch+0x7>
    6d1c:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <my_touch+0x6>
    6d20:	e5 cd       	rjmp	.-1078   	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    6d22:	83 30       	cpi	r24, 0x03	; 3
    6d24:	09 f0       	breq	.+2      	; 0x6d28 <draw_menu(bool)+0x568>
    6d26:	e2 cd       	rjmp	.-1084   	; 0x68ec <draw_menu(bool)+0x12c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    6d28:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <my_touch+0x8>
    6d2c:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x9>
    6d30:	82 1b       	sub	r24, r18
    6d32:	93 0b       	sbc	r25, r19
    6d34:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x5>
    6d38:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x4>
    6d3c:	a9 cf       	rjmp	.-174    	; 0x6c90 <draw_menu(bool)+0x4d0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    6d3e:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <my_touch+0xe>
    6d42:	88 23       	and	r24, r24
    6d44:	09 f4       	brne	.+2      	; 0x6d48 <draw_menu(bool)+0x588>
    6d46:	ad cf       	rjmp	.-166    	; 0x6ca2 <draw_menu(bool)+0x4e2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    6d48:	81 30       	cpi	r24, 0x01	; 1
    6d4a:	09 f4       	brne	.+2      	; 0x6d4e <draw_menu(bool)+0x58e>
    6d4c:	b8 cf       	rjmp	.-144    	; 0x6cbe <draw_menu(bool)+0x4fe>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    6d4e:	83 30       	cpi	r24, 0x03	; 3
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <draw_menu(bool)+0x594>
    6d52:	cc cd       	rjmp	.-1128   	; 0x68ec <draw_menu(bool)+0x12c>
    6d54:	99 cf       	rjmp	.-206    	; 0x6c88 <draw_menu(bool)+0x4c8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    6d56:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <my_touch+0xe>
    6d5a:	88 23       	and	r24, r24
    6d5c:	b9 f2       	breq	.-82     	; 0x6d0c <draw_menu(bool)+0x54c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    6d5e:	81 30       	cpi	r24, 0x01	; 1
    6d60:	19 f3       	breq	.-58     	; 0x6d28 <draw_menu(bool)+0x568>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    6d62:	82 30       	cpi	r24, 0x02	; 2
    6d64:	09 f4       	brne	.+2      	; 0x6d68 <draw_menu(bool)+0x5a8>
    6d66:	be cf       	rjmp	.-132    	; 0x6ce4 <draw_menu(bool)+0x524>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    6d68:	83 30       	cpi	r24, 0x03	; 3
    6d6a:	09 f0       	breq	.+2      	; 0x6d6e <draw_menu(bool)+0x5ae>
    6d6c:	bf cd       	rjmp	.-1154   	; 0x68ec <draw_menu(bool)+0x12c>
    6d6e:	c3 cf       	rjmp	.-122    	; 0x6cf6 <draw_menu(bool)+0x536>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    6d70:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <my_touch+0xc>
    6d74:	87 ff       	sbrs	r24, 7
    6d76:	04 c0       	rjmp	.+8      	; 0x6d80 <draw_menu(bool)+0x5c0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    6d78:	8f 77       	andi	r24, 0x7F	; 127
    6d7a:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <my_touch+0xc>
    6d7e:	cd cd       	rjmp	.-1126   	; 0x691a <draw_menu(bool)+0x15a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    6d80:	10 92 ac 0d 	sts	0x0DAC, r1	; 0x800dac <my_touch+0x1>
    6d84:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    6d88:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <my_touch+0x3>
    6d8c:	10 92 ad 0d 	sts	0x0DAD, r1	; 0x800dad <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    6d90:	8f ef       	ldi	r24, 0xFF	; 255
    6d92:	9f ef       	ldi	r25, 0xFF	; 255
    6d94:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x5>
    6d98:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    6d9c:	90 93 b2 0d 	sts	0x0DB2, r25	; 0x800db2 <my_touch+0x7>
    6da0:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <my_touch+0x6>
    6da4:	ba cd       	rjmp	.-1164   	; 0x691a <draw_menu(bool)+0x15a>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:966
  uint8_t active = 0;

  current = MenuHistoryGetMenu();

  click_x = 0;
  click_y = 0;
    6da6:	c5 54       	subi	r28, 0x45	; 69
    6da8:	df 4f       	sbci	r29, 0xFF	; 255
    6daa:	19 82       	std	Y+1, r1	; 0x01
    6dac:	18 82       	st	Y, r1
    6dae:	cb 5b       	subi	r28, 0xBB	; 187
    6db0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:965
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu();

  click_x = 0;
    6db2:	c7 54       	subi	r28, 0x47	; 71
    6db4:	df 4f       	sbci	r29, 0xFF	; 255
    6db6:	19 82       	std	Y+1, r1	; 0x01
    6db8:	18 82       	st	Y, r1
    6dba:	c9 5b       	subi	r28, 0xB9	; 185
    6dbc:	d0 40       	sbci	r29, 0x00	; 0
    6dbe:	c7 cd       	rjmp	.-1138   	; 0x694e <draw_menu(bool)+0x18e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:993
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    6dc0:	68 94       	set
    6dc2:	a1 f8       	bld	r10, 1
    6dc4:	1d ce       	rjmp	.-966    	; 0x6a00 <draw_menu(bool)+0x240>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_word(&current->idx), menu_args1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    6dc6:	8a 2d       	mov	r24, r10
    6dc8:	84 60       	ori	r24, 0x04	; 4
    6dca:	2e ce       	rjmp	.-932    	; 0x6a28 <draw_menu(bool)+0x268>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    6dcc:	88 60       	ori	r24, 0x08	; 8
    6dce:	2f ce       	rjmp	.-930    	; 0x6a2e <draw_menu(bool)+0x26e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1035
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    6dd0:	c9 53       	subi	r28, 0x39	; 57
    6dd2:	df 4f       	sbci	r29, 0xFF	; 255
    6dd4:	a8 80       	ld	r10, Y
    6dd6:	c7 5c       	subi	r28, 0xC7	; 199
    6dd8:	d0 40       	sbci	r29, 0x00	; 0
    6dda:	a1 10       	cpse	r10, r1
    6ddc:	0c 94 bb 42 	jmp	0x8576	; 0x8576 <draw_menu(bool)+0x1db6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    6de0:	c8 53       	subi	r28, 0x38	; 56
    6de2:	df 4f       	sbci	r29, 0xFF	; 255
    6de4:	18 82       	st	Y, r1
    6de6:	c8 5c       	subi	r28, 0xC8	; 200
    6de8:	d0 40       	sbci	r29, 0x00	; 0
    6dea:	93 01       	movw	r18, r6
    6dec:	2d 51       	subi	r18, 0x1D	; 29
    6dee:	3e 4f       	sbci	r19, 0xFE	; 254
    6df0:	cb 52       	subi	r28, 0x2B	; 43
    6df2:	df 4f       	sbci	r29, 0xFF	; 255
    6df4:	39 83       	std	Y+1, r19	; 0x01
    6df6:	28 83       	st	Y, r18
    6df8:	c5 5d       	subi	r28, 0xD5	; 213
    6dfa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
  {
    button_2 = &current->button_2[idx];
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    6dfc:	ae 01       	movw	r20, r28
    6dfe:	4f 57       	subi	r20, 0x7F	; 127
    6e00:	5f 4f       	sbci	r21, 0xFF	; 255
    6e02:	cd 54       	subi	r28, 0x4D	; 77
    6e04:	df 4f       	sbci	r29, 0xFF	; 255
    6e06:	59 83       	std	Y+1, r21	; 0x01
    6e08:	48 83       	st	Y, r20
    6e0a:	c3 5b       	subi	r28, 0xB3	; 179
    6e0c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    6e0e:	cb 52       	subi	r28, 0x2B	; 43
    6e10:	df 4f       	sbci	r29, 0xFF	; 255
    6e12:	e8 81       	ld	r30, Y
    6e14:	f9 81       	ldd	r31, Y+1	; 0x01
    6e16:	c5 5d       	subi	r28, 0xD5	; 213
    6e18:	d0 40       	sbci	r29, 0x00	; 0
    6e1a:	84 91       	lpm	r24, Z
    6e1c:	c8 53       	subi	r28, 0x38	; 56
    6e1e:	df 4f       	sbci	r29, 0xFF	; 255
    6e20:	a8 80       	ld	r10, Y
    6e22:	c8 5c       	subi	r28, 0xC8	; 200
    6e24:	d0 40       	sbci	r29, 0x00	; 0
    6e26:	a8 16       	cp	r10, r24
    6e28:	08 f0       	brcs	.+2      	; 0x6e2c <draw_menu(bool)+0x66c>
    6e2a:	70 c2       	rjmp	.+1248   	; 0x730c <draw_menu(bool)+0xb4c>
    6e2c:	95 e1       	ldi	r25, 0x15	; 21
    6e2e:	b9 2e       	mov	r11, r25
    6e30:	ab 9c       	mul	r10, r11
    6e32:	10 01       	movw	r2, r0
    6e34:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
  {
    button_2 = &current->button_2[idx];
    rdr = pgm_read_byte(&button_2->redraw_class);
    6e36:	f1 01       	movw	r30, r2
    6e38:	e4 55       	subi	r30, 0x54	; 84
    6e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3c:	e6 0d       	add	r30, r6
    6e3e:	f7 1d       	adc	r31, r7
    6e40:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1041
    if (enable_redraw(rdr, redraw_class) == true)
    6e42:	c4 53       	subi	r28, 0x34	; 52
    6e44:	df 4f       	sbci	r29, 0xFF	; 255
    6e46:	68 81       	ld	r22, Y
    6e48:	cc 5c       	subi	r28, 0xCC	; 204
    6e4a:	d0 40       	sbci	r29, 0x00	; 0
    6e4c:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    6e50:	88 23       	and	r24, r24
    6e52:	09 f4       	brne	.+2      	; 0x6e56 <draw_menu(bool)+0x696>
    6e54:	d9 c1       	rjmp	.+946    	; 0x7208 <draw_menu(bool)+0xa48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    6e56:	f1 01       	movw	r30, r2
    6e58:	e8 56       	subi	r30, 0x68	; 104
    6e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e5c:	e6 0d       	add	r30, r6
    6e5e:	f7 1d       	adc	r31, r7
    6e60:	65 91       	lpm	r22, Z+
    6e62:	74 91       	lpm	r23, Z
    6e64:	ce 01       	movw	r24, r28
    6e66:	8f 57       	subi	r24, 0x7F	; 127
    6e68:	9f 4f       	sbci	r25, 0xFF	; 255
    6e6a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1044
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    6e6e:	f1 01       	movw	r30, r2
    6e70:	e6 55       	subi	r30, 0x56	; 86
    6e72:	ff 4f       	sbci	r31, 0xFF	; 255
    6e74:	e6 0d       	add	r30, r6
    6e76:	f7 1d       	adc	r31, r7
    6e78:	25 91       	lpm	r18, Z+
    6e7a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1045
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
    6e7c:	f1 01       	movw	r30, r2
    6e7e:	e9 55       	subi	r30, 0x59	; 89
    6e80:	ff 4f       	sbci	r31, 0xFF	; 255
    6e82:	e6 0d       	add	r30, r6
    6e84:	f7 1d       	adc	r31, r7
    6e86:	84 91       	lpm	r24, Z
    6e88:	cd 53       	subi	r28, 0x3D	; 61
    6e8a:	df 4f       	sbci	r29, 0xFF	; 255
    6e8c:	68 81       	ld	r22, Y
    6e8e:	79 81       	ldd	r23, Y+1	; 0x01
    6e90:	c3 5c       	subi	r28, 0xC3	; 195
    6e92:	d0 40       	sbci	r29, 0x00	; 0
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	f9 01       	movw	r30, r18
    6e98:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1050
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2);
    6e9a:	f1 01       	movw	r30, r2
    6e9c:	eb 55       	subi	r30, 0x5B	; 91
    6e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6ea0:	e6 0d       	add	r30, r6
    6ea2:	f7 1d       	adc	r31, r7
    6ea4:	45 91       	lpm	r20, Z+
    6ea6:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1049
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                      pgm_read_word(&button_2->color_active), \
    6ea8:	f1 01       	movw	r30, r2
    6eaa:	ed 55       	subi	r30, 0x5D	; 93
    6eac:	ff 4f       	sbci	r31, 0xFF	; 255
    6eae:	e6 0d       	add	r30, r6
    6eb0:	f7 1d       	adc	r31, r7
    6eb2:	25 91       	lpm	r18, Z+
    6eb4:	34 91       	lpm	r19, Z
    6eb6:	cb 54       	subi	r28, 0x4B	; 75
    6eb8:	df 4f       	sbci	r29, 0xFF	; 255
    6eba:	28 83       	st	Y, r18
    6ebc:	c5 5b       	subi	r28, 0xB5	; 181
    6ebe:	d0 40       	sbci	r29, 0x00	; 0
    6ec0:	43 2e       	mov	r4, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1048
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
    6ec2:	f1 01       	movw	r30, r2
    6ec4:	ee 55       	subi	r30, 0x5E	; 94
    6ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ec8:	e6 0d       	add	r30, r6
    6eca:	f7 1d       	adc	r31, r7
    6ecc:	a4 90       	lpm	r10, Z
    6ece:	c6 53       	subi	r28, 0x36	; 54
    6ed0:	df 4f       	sbci	r29, 0xFF	; 255
    6ed2:	a8 82       	st	Y, r10
    6ed4:	ca 5c       	subi	r28, 0xCA	; 202
    6ed6:	d0 40       	sbci	r29, 0x00	; 0
    6ed8:	f1 01       	movw	r30, r2
    6eda:	e0 56       	subi	r30, 0x60	; 96
    6edc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ede:	e6 0d       	add	r30, r6
    6ee0:	f7 1d       	adc	r31, r7
    6ee2:	05 91       	lpm	r16, Z+
    6ee4:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1047
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    6ee6:	f1 01       	movw	r30, r2
    6ee8:	e2 56       	subi	r30, 0x62	; 98
    6eea:	ff 4f       	sbci	r31, 0xFF	; 255
    6eec:	e6 0d       	add	r30, r6
    6eee:	f7 1d       	adc	r31, r7
    6ef0:	25 91       	lpm	r18, Z+
    6ef2:	34 91       	lpm	r19, Z
    6ef4:	f1 01       	movw	r30, r2
    6ef6:	e4 56       	subi	r30, 0x64	; 100
    6ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    6efa:	e6 0d       	add	r30, r6
    6efc:	f7 1d       	adc	r31, r7
    6efe:	a5 90       	lpm	r10, Z+
    6f00:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1046
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1);
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    6f02:	cf 53       	subi	r28, 0x3F	; 63
    6f04:	df 4f       	sbci	r29, 0xFF	; 255
    6f06:	68 81       	ld	r22, Y
    6f08:	79 81       	ldd	r23, Y+1	; 0x01
    6f0a:	c1 5c       	subi	r28, 0xC1	; 193
    6f0c:	d0 40       	sbci	r29, 0x00	; 0
    6f0e:	6a 0d       	add	r22, r10
    6f10:	7b 1d       	adc	r23, r11
    6f12:	c9 54       	subi	r28, 0x49	; 73
    6f14:	df 4f       	sbci	r29, 0xFF	; 255
    6f16:	79 83       	std	Y+1, r23	; 0x01
    6f18:	68 83       	st	Y, r22
    6f1a:	c7 5b       	subi	r28, 0xB7	; 183
    6f1c:	d0 40       	sbci	r29, 0x00	; 0
    6f1e:	f1 01       	movw	r30, r2
    6f20:	e6 56       	subi	r30, 0x66	; 102
    6f22:	ff 4f       	sbci	r31, 0xFF	; 255
    6f24:	e6 0d       	add	r30, r6
    6f26:	f7 1d       	adc	r31, r7
    6f28:	85 90       	lpm	r8, Z+
    6f2a:	94 90       	lpm	r9, Z
    6f2c:	c1 54       	subi	r28, 0x41	; 65
    6f2e:	df 4f       	sbci	r29, 0xFF	; 255
    6f30:	e8 81       	ld	r30, Y
    6f32:	f9 81       	ldd	r31, Y+1	; 0x01
    6f34:	cf 5b       	subi	r28, 0xBF	; 191
    6f36:	d0 40       	sbci	r29, 0x00	; 0
    6f38:	e8 0d       	add	r30, r8
    6f3a:	f9 1d       	adc	r31, r9
    6f3c:	cb 53       	subi	r28, 0x3B	; 59
    6f3e:	df 4f       	sbci	r29, 0xFF	; 255
    6f40:	f9 83       	std	Y+1, r31	; 0x01
    6f42:	e8 83       	st	Y, r30
    6f44:	c5 5c       	subi	r28, 0xC5	; 197
    6f46:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *text)
{
  uint8_t posx, posy, tmpy, tmpx;
  uint16_t back_color;
  back_color = color_inactive;
  if (state == 1)
    6f48:	81 11       	cpse	r24, r1
    6f4a:	06 c0       	rjmp	.+12     	; 0x6f58 <draw_menu(bool)+0x798>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *text)
{
  uint8_t posx, posy, tmpy, tmpx;
  uint16_t back_color;
  back_color = color_inactive;
    6f4c:	cb 54       	subi	r28, 0x4B	; 75
    6f4e:	df 4f       	sbci	r29, 0xFF	; 255
    6f50:	48 83       	st	Y, r20
    6f52:	c5 5b       	subi	r28, 0xB5	; 181
    6f54:	d0 40       	sbci	r29, 0x00	; 0
    6f56:	45 2e       	mov	r4, r21
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6f58:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    6f5c:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    6f60:	b1 2c       	mov	r11, r1
    6f62:	a1 2c       	mov	r10, r1
    6f64:	11 27       	eor	r17, r17
    6f66:	a9 01       	movw	r20, r18
    6f68:	55 27       	eor	r21, r21
    6f6a:	c3 53       	subi	r28, 0x33	; 51
    6f6c:	df 4f       	sbci	r29, 0xFF	; 255
    6f6e:	59 83       	std	Y+1, r21	; 0x01
    6f70:	48 83       	st	Y, r20
    6f72:	cd 5c       	subi	r28, 0xCD	; 205
    6f74:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6f76:	c9 54       	subi	r28, 0x49	; 73
    6f78:	df 4f       	sbci	r29, 0xFF	; 255
    6f7a:	88 80       	ld	r8, Y
    6f7c:	99 80       	ldd	r9, Y+1	; 0x01
    6f7e:	c7 5b       	subi	r28, 0xB7	; 183
    6f80:	d0 40       	sbci	r29, 0x00	; 0
    6f82:	80 0e       	add	r8, r16
    6f84:	91 1e       	adc	r9, r17
    6f86:	cb 53       	subi	r28, 0x3B	; 59
    6f88:	df 4f       	sbci	r29, 0xFF	; 255
    6f8a:	c8 80       	ld	r12, Y
    6f8c:	d9 80       	ldd	r13, Y+1	; 0x01
    6f8e:	c5 5c       	subi	r28, 0xC5	; 197
    6f90:	d0 40       	sbci	r29, 0x00	; 0
    6f92:	c4 0e       	add	r12, r20
    6f94:	d5 1e       	adc	r13, r21
    6f96:	94 01       	movw	r18, r8
    6f98:	2a 19       	sub	r18, r10
    6f9a:	3b 09       	sbc	r19, r11
    6f9c:	a6 01       	movw	r20, r12
    6f9e:	4a 19       	sub	r20, r10
    6fa0:	5b 09       	sbc	r21, r11
    6fa2:	c9 54       	subi	r28, 0x49	; 73
    6fa4:	df 4f       	sbci	r29, 0xFF	; 255
    6fa6:	68 81       	ld	r22, Y
    6fa8:	79 81       	ldd	r23, Y+1	; 0x01
    6faa:	c7 5b       	subi	r28, 0xB7	; 183
    6fac:	d0 40       	sbci	r29, 0x00	; 0
    6fae:	6a 0d       	add	r22, r10
    6fb0:	7b 1d       	adc	r23, r11
    6fb2:	cb 53       	subi	r28, 0x3B	; 59
    6fb4:	df 4f       	sbci	r29, 0xFF	; 255
    6fb6:	88 81       	ld	r24, Y
    6fb8:	99 81       	ldd	r25, Y+1	; 0x01
    6fba:	c5 5c       	subi	r28, 0xC5	; 197
    6fbc:	d0 40       	sbci	r29, 0x00	; 0
    6fbe:	8a 0d       	add	r24, r10
    6fc0:	9b 1d       	adc	r25, r11
    6fc2:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    6fc6:	5f ef       	ldi	r21, 0xFF	; 255
    6fc8:	a5 1a       	sub	r10, r21
    6fca:	b5 0a       	sbc	r11, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4008
  uint16_t back_color;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6fcc:	63 e0       	ldi	r22, 0x03	; 3
    6fce:	a6 16       	cp	r10, r22
    6fd0:	b1 04       	cpc	r11, r1
    6fd2:	09 f7       	brne	.-62     	; 0x6f96 <draw_menu(bool)+0x7d6>
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    6fd4:	c6 53       	subi	r28, 0x36	; 54
    6fd6:	df 4f       	sbci	r29, 0xFF	; 255
    6fd8:	58 80       	ld	r5, Y
    6fda:	ca 5c       	subi	r28, 0xCA	; 202
    6fdc:	d0 40       	sbci	r29, 0x00	; 0
    6fde:	55 0c       	add	r5, r5
    6fe0:	c6 53       	subi	r28, 0x36	; 54
    6fe2:	df 4f       	sbci	r29, 0xFF	; 255
    6fe4:	a8 80       	ld	r10, Y
    6fe6:	ca 5c       	subi	r28, 0xCA	; 202
    6fe8:	d0 40       	sbci	r29, 0x00	; 0
    6fea:	5a 0c       	add	r5, r10
    6fec:	55 0c       	add	r5, r5
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    6fee:	cd 54       	subi	r28, 0x4D	; 77
    6ff0:	df 4f       	sbci	r29, 0xFF	; 255
    6ff2:	e8 81       	ld	r30, Y
    6ff4:	f9 81       	ldd	r31, Y+1	; 0x01
    6ff6:	c3 5b       	subi	r28, 0xB3	; 179
    6ff8:	d0 40       	sbci	r29, 0x00	; 0
    6ffa:	01 90       	ld	r0, Z+
    6ffc:	00 20       	and	r0, r0
    6ffe:	e9 f7       	brne	.-6      	; 0x6ffa <draw_menu(bool)+0x83a>
    7000:	31 97       	sbiw	r30, 0x01	; 1
    7002:	cd 54       	subi	r28, 0x4D	; 77
    7004:	df 4f       	sbci	r29, 0xFF	; 255
    7006:	a8 80       	ld	r10, Y
    7008:	b9 80       	ldd	r11, Y+1	; 0x01
    700a:	c3 5b       	subi	r28, 0xB3	; 179
    700c:	d0 40       	sbci	r29, 0x00	; 0
    700e:	ea 19       	sub	r30, r10
    7010:	fb 09       	sbc	r31, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7012:	86 e0       	ldi	r24, 0x06	; 6
    7014:	b8 2e       	mov	r11, r24
    7016:	eb 9d       	mul	r30, r11
    7018:	f0 01       	movw	r30, r0
    701a:	11 24       	eor	r1, r1
    701c:	c6 53       	subi	r28, 0x36	; 54
    701e:	df 4f       	sbci	r29, 0xFF	; 255
    7020:	a8 80       	ld	r10, Y
    7022:	ca 5c       	subi	r28, 0xCA	; 202
    7024:	d0 40       	sbci	r29, 0x00	; 0
    7026:	ae 9e       	mul	r10, r30
    7028:	b0 01       	movw	r22, r0
    702a:	af 9e       	mul	r10, r31
    702c:	70 0d       	add	r23, r0
    702e:	11 24       	eor	r1, r1
    7030:	9b 01       	movw	r18, r22
    7032:	33 27       	eor	r19, r19
    7034:	cf 52       	subi	r28, 0x2F	; 47
    7036:	df 4f       	sbci	r29, 0xFF	; 255
    7038:	39 83       	std	Y+1, r19	; 0x01
    703a:	28 83       	st	Y, r18
    703c:	c1 5d       	subi	r28, 0xD1	; 209
    703e:	d0 40       	sbci	r29, 0x00	; 0
button_click_2():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 2;
    7040:	a5 2c       	mov	r10, r5
    7042:	b1 2c       	mov	r11, r1
    7044:	c3 54       	subi	r28, 0x43	; 67
    7046:	df 4f       	sbci	r29, 0xFF	; 255
    7048:	b9 82       	std	Y+1, r11	; 0x01
    704a:	a8 82       	st	Y, r10
    704c:	cd 5b       	subi	r28, 0xBD	; 189
    704e:	d0 40       	sbci	r29, 0x00	; 0
    7050:	68 01       	movw	r12, r16
    7052:	ca 18       	sub	r12, r10
    7054:	db 08       	sbc	r13, r11
    7056:	56 01       	movw	r10, r12
    7058:	d7 fe       	sbrs	r13, 7
    705a:	03 c0       	rjmp	.+6      	; 0x7062 <draw_menu(bool)+0x8a2>
    705c:	2f ef       	ldi	r18, 0xFF	; 255
    705e:	a2 1a       	sub	r10, r18
    7060:	b2 0a       	sbc	r11, r18
    7062:	b5 94       	asr	r11
    7064:	a7 94       	ror	r10
    7066:	bb 24       	eor	r11, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4015
  /// horni vybarveni
  my_lcd.Fill_Rect(x + 3, y + 3, size_x - 5, posy - 3, back_color );
    7068:	cb 53       	subi	r28, 0x3B	; 59
    706a:	df 4f       	sbci	r29, 0xFF	; 255
    706c:	88 80       	ld	r8, Y
    706e:	99 80       	ldd	r9, Y+1	; 0x01
    7070:	c5 5c       	subi	r28, 0xC5	; 197
    7072:	d0 40       	sbci	r29, 0x00	; 0
    7074:	33 e0       	ldi	r19, 0x03	; 3
    7076:	83 0e       	add	r8, r19
    7078:	91 1c       	adc	r9, r1
    707a:	85 01       	movw	r16, r10
    707c:	03 50       	subi	r16, 0x03	; 3
    707e:	11 09       	sbc	r17, r1
    7080:	cb 54       	subi	r28, 0x4B	; 75
    7082:	df 4f       	sbci	r29, 0xFF	; 255
    7084:	e8 80       	ld	r14, Y
    7086:	c5 5b       	subi	r28, 0xB5	; 181
    7088:	d0 40       	sbci	r29, 0x00	; 0
    708a:	f4 2c       	mov	r15, r4
    708c:	c3 53       	subi	r28, 0x33	; 51
    708e:	df 4f       	sbci	r29, 0xFF	; 255
    7090:	48 81       	ld	r20, Y
    7092:	59 81       	ldd	r21, Y+1	; 0x01
    7094:	cd 5c       	subi	r28, 0xCD	; 205
    7096:	d0 40       	sbci	r29, 0x00	; 0
    7098:	45 50       	subi	r20, 0x05	; 5
    709a:	51 09       	sbc	r21, r1
    709c:	c1 53       	subi	r28, 0x31	; 49
    709e:	df 4f       	sbci	r29, 0xFF	; 255
    70a0:	59 83       	std	Y+1, r21	; 0x01
    70a2:	48 83       	st	Y, r20
    70a4:	cf 5c       	subi	r28, 0xCF	; 207
    70a6:	d0 40       	sbci	r29, 0x00	; 0
    70a8:	9a 01       	movw	r18, r20
    70aa:	c9 54       	subi	r28, 0x49	; 73
    70ac:	df 4f       	sbci	r29, 0xFF	; 255
    70ae:	48 81       	ld	r20, Y
    70b0:	59 81       	ldd	r21, Y+1	; 0x01
    70b2:	c7 5b       	subi	r28, 0xB7	; 183
    70b4:	d0 40       	sbci	r29, 0x00	; 0
    70b6:	4d 5f       	subi	r20, 0xFD	; 253
    70b8:	5f 4f       	sbci	r21, 0xFF	; 255
    70ba:	b4 01       	movw	r22, r8
    70bc:	89 ec       	ldi	r24, 0xC9	; 201
    70be:	9d e0       	ldi	r25, 0x0D	; 13
    70c0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
  /// spodni vybarveni
  my_lcd.Fill_Rect(x + 3, y + tmpy + posy + 6, size_x - 5, size_y - tmpy - posy - 8, back_color );
    70c4:	86 01       	movw	r16, r12
    70c6:	0a 19       	sub	r16, r10
    70c8:	1b 09       	sbc	r17, r11
    70ca:	08 50       	subi	r16, 0x08	; 8
    70cc:	11 09       	sbc	r17, r1
    70ce:	c9 54       	subi	r28, 0x49	; 73
    70d0:	df 4f       	sbci	r29, 0xFF	; 255
    70d2:	48 81       	ld	r20, Y
    70d4:	59 81       	ldd	r21, Y+1	; 0x01
    70d6:	c7 5b       	subi	r28, 0xB7	; 183
    70d8:	d0 40       	sbci	r29, 0x00	; 0
    70da:	4a 5f       	subi	r20, 0xFA	; 250
    70dc:	5f 4f       	sbci	r21, 0xFF	; 255
    70de:	45 0d       	add	r20, r5
    70e0:	51 1d       	adc	r21, r1
    70e2:	4a 0d       	add	r20, r10
    70e4:	5b 1d       	adc	r21, r11
    70e6:	cb 54       	subi	r28, 0x4B	; 75
    70e8:	df 4f       	sbci	r29, 0xFF	; 255
    70ea:	e8 80       	ld	r14, Y
    70ec:	c5 5b       	subi	r28, 0xB5	; 181
    70ee:	d0 40       	sbci	r29, 0x00	; 0
    70f0:	c1 53       	subi	r28, 0x31	; 49
    70f2:	df 4f       	sbci	r29, 0xFF	; 255
    70f4:	28 81       	ld	r18, Y
    70f6:	39 81       	ldd	r19, Y+1	; 0x01
    70f8:	cf 5c       	subi	r28, 0xCF	; 207
    70fa:	d0 40       	sbci	r29, 0x00	; 0
    70fc:	b4 01       	movw	r22, r8
    70fe:	89 ec       	ldi	r24, 0xC9	; 201
    7100:	9d e0       	ldi	r25, 0x0D	; 13
    7102:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
  /// leve vybarveni
  my_lcd.Fill_Rect(x + 3, y + posy, posx - 3, tmpy + 6, back_color);
    7106:	c3 54       	subi	r28, 0x43	; 67
    7108:	df 4f       	sbci	r29, 0xFF	; 255
    710a:	68 81       	ld	r22, Y
    710c:	79 81       	ldd	r23, Y+1	; 0x01
    710e:	cd 5b       	subi	r28, 0xBD	; 189
    7110:	d0 40       	sbci	r29, 0x00	; 0
    7112:	6a 5f       	subi	r22, 0xFA	; 250
    7114:	7f 4f       	sbci	r23, 0xFF	; 255
    7116:	c3 54       	subi	r28, 0x43	; 67
    7118:	df 4f       	sbci	r29, 0xFF	; 255
    711a:	79 83       	std	Y+1, r23	; 0x01
    711c:	68 83       	st	Y, r22
    711e:	cd 5b       	subi	r28, 0xBD	; 189
    7120:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    7122:	c3 53       	subi	r28, 0x33	; 51
    7124:	df 4f       	sbci	r29, 0xFF	; 255
    7126:	c8 80       	ld	r12, Y
    7128:	d9 80       	ldd	r13, Y+1	; 0x01
    712a:	cd 5c       	subi	r28, 0xCD	; 205
    712c:	d0 40       	sbci	r29, 0x00	; 0
    712e:	cf 52       	subi	r28, 0x2F	; 47
    7130:	df 4f       	sbci	r29, 0xFF	; 255
    7132:	88 81       	ld	r24, Y
    7134:	99 81       	ldd	r25, Y+1	; 0x01
    7136:	c1 5d       	subi	r28, 0xD1	; 209
    7138:	d0 40       	sbci	r29, 0x00	; 0
    713a:	c8 1a       	sub	r12, r24
    713c:	d9 0a       	sbc	r13, r25
    713e:	d7 fe       	sbrs	r13, 7
    7140:	03 c0       	rjmp	.+6      	; 0x7148 <draw_menu(bool)+0x988>
    7142:	9f ef       	ldi	r25, 0xFF	; 255
    7144:	c9 1a       	sub	r12, r25
    7146:	d9 0a       	sbc	r13, r25
    7148:	d5 94       	asr	r13
    714a:	c7 94       	ror	r12
    714c:	dd 24       	eor	r13, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
  /// horni vybarveni
  my_lcd.Fill_Rect(x + 3, y + 3, size_x - 5, posy - 3, back_color );
  /// spodni vybarveni
  my_lcd.Fill_Rect(x + 3, y + tmpy + posy + 6, size_x - 5, size_y - tmpy - posy - 8, back_color );
  /// leve vybarveni
  my_lcd.Fill_Rect(x + 3, y + posy, posx - 3, tmpy + 6, back_color);
    714e:	c9 54       	subi	r28, 0x49	; 73
    7150:	df 4f       	sbci	r29, 0xFF	; 255
    7152:	e8 81       	ld	r30, Y
    7154:	f9 81       	ldd	r31, Y+1	; 0x01
    7156:	c7 5b       	subi	r28, 0xB7	; 183
    7158:	d0 40       	sbci	r29, 0x00	; 0
    715a:	ae 0e       	add	r10, r30
    715c:	bf 1e       	adc	r11, r31
    715e:	96 01       	movw	r18, r12
    7160:	23 50       	subi	r18, 0x03	; 3
    7162:	31 09       	sbc	r19, r1
    7164:	cb 54       	subi	r28, 0x4B	; 75
    7166:	df 4f       	sbci	r29, 0xFF	; 255
    7168:	e8 80       	ld	r14, Y
    716a:	c5 5b       	subi	r28, 0xB5	; 181
    716c:	d0 40       	sbci	r29, 0x00	; 0
    716e:	f4 2c       	mov	r15, r4
    7170:	c3 54       	subi	r28, 0x43	; 67
    7172:	df 4f       	sbci	r29, 0xFF	; 255
    7174:	08 81       	ld	r16, Y
    7176:	19 81       	ldd	r17, Y+1	; 0x01
    7178:	cd 5b       	subi	r28, 0xBD	; 189
    717a:	d0 40       	sbci	r29, 0x00	; 0
    717c:	a5 01       	movw	r20, r10
    717e:	b4 01       	movw	r22, r8
    7180:	89 ec       	ldi	r24, 0xC9	; 201
    7182:	9d e0       	ldi	r25, 0x0D	; 13
    7184:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
  /// prave vybarveni
  my_lcd.Fill_Rect(x + posx + tmpx, y + posy, size_x - posx - tmpx - 2, tmpy + 6, back_color );
    7188:	cb 53       	subi	r28, 0x3B	; 59
    718a:	df 4f       	sbci	r29, 0xFF	; 255
    718c:	88 80       	ld	r8, Y
    718e:	99 80       	ldd	r9, Y+1	; 0x01
    7190:	c5 5c       	subi	r28, 0xC5	; 197
    7192:	d0 40       	sbci	r29, 0x00	; 0
    7194:	8c 0c       	add	r8, r12
    7196:	9d 1c       	adc	r9, r13
    7198:	c3 53       	subi	r28, 0x33	; 51
    719a:	df 4f       	sbci	r29, 0xFF	; 255
    719c:	28 81       	ld	r18, Y
    719e:	39 81       	ldd	r19, Y+1	; 0x01
    71a0:	cd 5c       	subi	r28, 0xCD	; 205
    71a2:	d0 40       	sbci	r29, 0x00	; 0
    71a4:	2c 19       	sub	r18, r12
    71a6:	3d 09       	sbc	r19, r13
    71a8:	cf 52       	subi	r28, 0x2F	; 47
    71aa:	df 4f       	sbci	r29, 0xFF	; 255
    71ac:	48 81       	ld	r20, Y
    71ae:	59 81       	ldd	r21, Y+1	; 0x01
    71b0:	c1 5d       	subi	r28, 0xD1	; 209
    71b2:	d0 40       	sbci	r29, 0x00	; 0
    71b4:	24 1b       	sub	r18, r20
    71b6:	35 0b       	sbc	r19, r21
    71b8:	22 50       	subi	r18, 0x02	; 2
    71ba:	31 09       	sbc	r19, r1
    71bc:	ba 01       	movw	r22, r20
    71be:	68 0d       	add	r22, r8
    71c0:	79 1d       	adc	r23, r9
    71c2:	cb 54       	subi	r28, 0x4B	; 75
    71c4:	df 4f       	sbci	r29, 0xFF	; 255
    71c6:	e8 80       	ld	r14, Y
    71c8:	c5 5b       	subi	r28, 0xB5	; 181
    71ca:	d0 40       	sbci	r29, 0x00	; 0
    71cc:	c3 54       	subi	r28, 0x43	; 67
    71ce:	df 4f       	sbci	r29, 0xFF	; 255
    71d0:	08 81       	ld	r16, Y
    71d2:	19 81       	ldd	r17, Y+1	; 0x01
    71d4:	cd 5b       	subi	r28, 0xBD	; 189
    71d6:	d0 40       	sbci	r29, 0x00	; 0
    71d8:	a5 01       	movw	r20, r10
    71da:	89 ec       	ldi	r24, 0xC9	; 201
    71dc:	9d e0       	ldi	r25, 0x0D	; 13
    71de:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
  show_string(text, x + posx, y + posy, font_size, BLACK, back_color, 0);
    71e2:	cb 54       	subi	r28, 0x4B	; 75
    71e4:	df 4f       	sbci	r29, 0xFF	; 255
    71e6:	e8 80       	ld	r14, Y
    71e8:	c5 5b       	subi	r28, 0xB5	; 181
    71ea:	d0 40       	sbci	r29, 0x00	; 0
    71ec:	10 e0       	ldi	r17, 0x00	; 0
    71ee:	00 e0       	ldi	r16, 0x00	; 0
    71f0:	c6 53       	subi	r28, 0x36	; 54
    71f2:	df 4f       	sbci	r29, 0xFF	; 255
    71f4:	28 81       	ld	r18, Y
    71f6:	ca 5c       	subi	r28, 0xCA	; 202
    71f8:	d0 40       	sbci	r29, 0x00	; 0
    71fa:	a5 01       	movw	r20, r10
    71fc:	b4 01       	movw	r22, r8
    71fe:	ce 01       	movw	r24, r28
    7200:	8f 57       	subi	r24, 0x7F	; 127
    7202:	9f 4f       	sbci	r25, 0xFF	; 255
    7204:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1052
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2);
    }
    if (click_x > 0 && click_y > 0)
    7208:	c7 54       	subi	r28, 0x47	; 71
    720a:	df 4f       	sbci	r29, 0xFF	; 255
    720c:	68 81       	ld	r22, Y
    720e:	79 81       	ldd	r23, Y+1	; 0x01
    7210:	c9 5b       	subi	r28, 0xB9	; 185
    7212:	d0 40       	sbci	r29, 0x00	; 0
    7214:	67 2b       	or	r22, r23
    7216:	09 f4       	brne	.+2      	; 0x721a <draw_menu(bool)+0xa5a>
    7218:	6d c0       	rjmp	.+218    	; 0x72f4 <draw_menu(bool)+0xb34>
    721a:	c5 54       	subi	r28, 0x45	; 69
    721c:	df 4f       	sbci	r29, 0xFF	; 255
    721e:	88 81       	ld	r24, Y
    7220:	99 81       	ldd	r25, Y+1	; 0x01
    7222:	cb 5b       	subi	r28, 0xBB	; 187
    7224:	d0 40       	sbci	r29, 0x00	; 0
    7226:	89 2b       	or	r24, r25
    7228:	09 f4       	brne	.+2      	; 0x722c <draw_menu(bool)+0xa6c>
    722a:	64 c0       	rjmp	.+200    	; 0x72f4 <draw_menu(bool)+0xb34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1053
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    722c:	f1 01       	movw	r30, r2
    722e:	e0 56       	subi	r30, 0x60	; 96
    7230:	ff 4f       	sbci	r31, 0xFF	; 255
    7232:	e6 0d       	add	r30, r6
    7234:	f7 1d       	adc	r31, r7
    7236:	25 91       	lpm	r18, Z+
    7238:	34 91       	lpm	r19, Z
    723a:	f1 01       	movw	r30, r2
    723c:	e2 56       	subi	r30, 0x62	; 98
    723e:	ff 4f       	sbci	r31, 0xFF	; 255
    7240:	e6 0d       	add	r30, r6
    7242:	f7 1d       	adc	r31, r7
    7244:	45 91       	lpm	r20, Z+
    7246:	54 91       	lpm	r21, Z
    7248:	f1 01       	movw	r30, r2
    724a:	e4 56       	subi	r30, 0x64	; 100
    724c:	ff 4f       	sbci	r31, 0xFF	; 255
    724e:	e6 0d       	add	r30, r6
    7250:	f7 1d       	adc	r31, r7
    7252:	85 91       	lpm	r24, Z+
    7254:	94 91       	lpm	r25, Z
    7256:	f1 01       	movw	r30, r2
    7258:	e6 56       	subi	r30, 0x66	; 102
    725a:	ff 4f       	sbci	r31, 0xFF	; 255
    725c:	e6 0d       	add	r30, r6
    725e:	f7 1d       	adc	r31, r7
    7260:	65 91       	lpm	r22, Z+
    7262:	74 91       	lpm	r23, Z
    7264:	c1 54       	subi	r28, 0x41	; 65
    7266:	df 4f       	sbci	r29, 0xFF	; 255
    7268:	e8 81       	ld	r30, Y
    726a:	f9 81       	ldd	r31, Y+1	; 0x01
    726c:	cf 5b       	subi	r28, 0xBF	; 191
    726e:	d0 40       	sbci	r29, 0x00	; 0
    7270:	6e 0f       	add	r22, r30
    7272:	7f 1f       	adc	r23, r31
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7274:	c7 54       	subi	r28, 0x47	; 71
    7276:	df 4f       	sbci	r29, 0xFF	; 255
    7278:	a8 80       	ld	r10, Y
    727a:	b9 80       	ldd	r11, Y+1	; 0x01
    727c:	c9 5b       	subi	r28, 0xB9	; 185
    727e:	d0 40       	sbci	r29, 0x00	; 0
    7280:	6a 15       	cp	r22, r10
    7282:	7b 05       	cpc	r23, r11
    7284:	bc f5       	brge	.+110    	; 0x72f4 <draw_menu(bool)+0xb34>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7286:	46 0f       	add	r20, r22
    7288:	57 1f       	adc	r21, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    728a:	a4 16       	cp	r10, r20
    728c:	b5 06       	cpc	r11, r21
    728e:	94 f5       	brge	.+100    	; 0x72f4 <draw_menu(bool)+0xb34>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1053
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    7290:	cf 53       	subi	r28, 0x3F	; 63
    7292:	df 4f       	sbci	r29, 0xFF	; 255
    7294:	48 81       	ld	r20, Y
    7296:	59 81       	ldd	r21, Y+1	; 0x01
    7298:	c1 5c       	subi	r28, 0xC1	; 193
    729a:	d0 40       	sbci	r29, 0x00	; 0
    729c:	84 0f       	add	r24, r20
    729e:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    72a0:	c5 54       	subi	r28, 0x45	; 69
    72a2:	df 4f       	sbci	r29, 0xFF	; 255
    72a4:	68 81       	ld	r22, Y
    72a6:	79 81       	ldd	r23, Y+1	; 0x01
    72a8:	cb 5b       	subi	r28, 0xBB	; 187
    72aa:	d0 40       	sbci	r29, 0x00	; 0
    72ac:	86 17       	cp	r24, r22
    72ae:	97 07       	cpc	r25, r23
    72b0:	0c f5       	brge	.+66     	; 0x72f4 <draw_menu(bool)+0xb34>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    72b2:	82 0f       	add	r24, r18
    72b4:	93 1f       	adc	r25, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    72b6:	68 17       	cp	r22, r24
    72b8:	79 07       	cpc	r23, r25
    72ba:	e4 f4       	brge	.+56     	; 0x72f4 <draw_menu(bool)+0xb34>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
                      pgm_read_word(&button_2->color_inactive), state,  str2);
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
      {
        fntargs =  pgm_read_word(&button_2->onclick); //saric
    72bc:	f1 01       	movw	r30, r2
    72be:	e8 55       	subi	r30, 0x58	; 88
    72c0:	ff 4f       	sbci	r31, 0xFF	; 255
    72c2:	e6 0d       	add	r30, r6
    72c4:	f7 1d       	adc	r31, r7
    72c6:	25 91       	lpm	r18, Z+
    72c8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
    72ca:	f1 01       	movw	r30, r2
    72cc:	e9 55       	subi	r30, 0x59	; 89
    72ce:	ff 4f       	sbci	r31, 0xFF	; 255
    72d0:	e6 0d       	add	r30, r6
    72d2:	f7 1d       	adc	r31, r7
    72d4:	84 91       	lpm	r24, Z
    72d6:	cd 53       	subi	r28, 0x3D	; 61
    72d8:	df 4f       	sbci	r29, 0xFF	; 255
    72da:	68 81       	ld	r22, Y
    72dc:	79 81       	ldd	r23, Y+1	; 0x01
    72de:	c3 5c       	subi	r28, 0xC3	; 195
    72e0:	d0 40       	sbci	r29, 0x00	; 0
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	f9 01       	movw	r30, r18
    72e6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
        ret = true;
    72e8:	f1 e0       	ldi	r31, 0x01	; 1
    72ea:	c9 53       	subi	r28, 0x39	; 57
    72ec:	df 4f       	sbci	r29, 0xFF	; 255
    72ee:	f8 83       	st	Y, r31
    72f0:	c7 5c       	subi	r28, 0xC7	; 199
    72f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    72f4:	c8 53       	subi	r28, 0x38	; 56
    72f6:	df 4f       	sbci	r29, 0xFF	; 255
    72f8:	28 81       	ld	r18, Y
    72fa:	c8 5c       	subi	r28, 0xC8	; 200
    72fc:	d0 40       	sbci	r29, 0x00	; 0
    72fe:	2f 5f       	subi	r18, 0xFF	; 255
    7300:	c8 53       	subi	r28, 0x38	; 56
    7302:	df 4f       	sbci	r29, 0xFF	; 255
    7304:	28 83       	st	Y, r18
    7306:	c8 5c       	subi	r28, 0xC8	; 200
    7308:	d0 40       	sbci	r29, 0x00	; 0
    730a:	81 cd       	rjmp	.-1278   	; 0x6e0e <draw_menu(bool)+0x64e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
        fntargs =  pgm_read_word(&button_2->onclick); //saric
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    730c:	c9 53       	subi	r28, 0x39	; 57
    730e:	df 4f       	sbci	r29, 0xFF	; 255
    7310:	38 81       	ld	r19, Y
    7312:	c7 5c       	subi	r28, 0xC7	; 199
    7314:	d0 40       	sbci	r29, 0x00	; 0
    7316:	31 11       	cpse	r19, r1
    7318:	0c 94 bb 42 	jmp	0x8576	; 0x8576 <draw_menu(bool)+0x1db6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1062
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    731c:	b1 2c       	mov	r11, r1
    731e:	43 01       	movw	r8, r6
    7320:	4c e1       	ldi	r20, 0x1C	; 28
    7322:	84 1a       	sub	r8, r20
    7324:	4e ef       	ldi	r20, 0xFE	; 254
    7326:	94 0a       	sbc	r9, r20
    7328:	1c e0       	ldi	r17, 0x0C	; 12
    732a:	f4 01       	movw	r30, r8
    732c:	84 91       	lpm	r24, Z
    732e:	b8 16       	cp	r11, r24
    7330:	08 f0       	brcs	.+2      	; 0x7334 <draw_menu(bool)+0xb74>
    7332:	59 c0       	rjmp	.+178    	; 0x73e6 <draw_menu(bool)+0xc26>
    7334:	b1 9e       	mul	r11, r17
    7336:	60 01       	movw	r12, r0
    7338:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1065
  {
    function_1 = &current->function_1[idx];
    rdr = pgm_read_byte(&function_1->redraw_class);
    733a:	f6 01       	movw	r30, r12
    733c:	e4 5f       	subi	r30, 0xF4	; 244
    733e:	fe 4f       	sbci	r31, 0xFE	; 254
    7340:	e6 0d       	add	r30, r6
    7342:	f7 1d       	adc	r31, r7
    7344:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1066
    if (enable_redraw(rdr, redraw_class) == true)
    7346:	c4 53       	subi	r28, 0x34	; 52
    7348:	df 4f       	sbci	r29, 0xFF	; 255
    734a:	68 81       	ld	r22, Y
    734c:	cc 5c       	subi	r28, 0xCC	; 204
    734e:	d0 40       	sbci	r29, 0x00	; 0
    7350:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    7354:	88 23       	and	r24, r24
    7356:	09 f4       	brne	.+2      	; 0x735a <draw_menu(bool)+0xb9a>
    7358:	44 c0       	rjmp	.+136    	; 0x73e2 <draw_menu(bool)+0xc22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
    {
      fnt_coordinate_xy =  pgm_read_dword(&function_1->fnt_coordinate_xy);
    735a:	f6 01       	movw	r30, r12
    735c:	ea 5f       	subi	r30, 0xFA	; 250
    735e:	fe 4f       	sbci	r31, 0xFE	; 254
    7360:	e6 0d       	add	r30, r6
    7362:	f7 1d       	adc	r31, r7
    7364:	25 90       	lpm	r2, Z+
    7366:	35 90       	lpm	r3, Z+
    7368:	45 90       	lpm	r4, Z+
    736a:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1070
      //args = pgm_read_byte(pgm_read_word(&current->args));
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    736c:	f6 01       	movw	r30, r12
    736e:	eb 5f       	subi	r30, 0xFB	; 251
    7370:	fe 4f       	sbci	r31, 0xFE	; 254
    7372:	e6 0d       	add	r30, r6
    7374:	f7 1d       	adc	r31, r7
    7376:	a5 91       	lpm	r26, Z+
    7378:	b4 91       	lpm	r27, Z
    737a:	f6 01       	movw	r30, r12
    737c:	e6 5f       	subi	r30, 0xF6	; 246
    737e:	fe 4f       	sbci	r31, 0xFE	; 254
    7380:	e6 0d       	add	r30, r6
    7382:	f7 1d       	adc	r31, r7
    7384:	25 91       	lpm	r18, Z+
    7386:	34 91       	lpm	r19, Z
    7388:	f6 01       	movw	r30, r12
    738a:	e8 5f       	subi	r30, 0xF8	; 248
    738c:	fe 4f       	sbci	r31, 0xFE	; 254
    738e:	e6 0d       	add	r30, r6
    7390:	f7 1d       	adc	r31, r7
    7392:	45 91       	lpm	r20, Z+
    7394:	54 91       	lpm	r21, Z
    7396:	f6 01       	movw	r30, r12
    7398:	ed 5f       	subi	r30, 0xFD	; 253
    739a:	fe 4f       	sbci	r31, 0xFE	; 254
    739c:	e6 0d       	add	r30, r6
    739e:	f7 1d       	adc	r31, r7
    73a0:	65 91       	lpm	r22, Z+
    73a2:	74 91       	lpm	r23, Z
    73a4:	f6 01       	movw	r30, r12
    73a6:	ef 5f       	subi	r30, 0xFF	; 255
    73a8:	fe 4f       	sbci	r31, 0xFE	; 254
    73aa:	e6 0d       	add	r30, r6
    73ac:	f7 1d       	adc	r31, r7
    73ae:	85 91       	lpm	r24, Z+
    73b0:	94 91       	lpm	r25, Z
    73b2:	cf 53       	subi	r28, 0x3F	; 63
    73b4:	df 4f       	sbci	r29, 0xFF	; 255
    73b6:	e8 81       	ld	r30, Y
    73b8:	f9 81       	ldd	r31, Y+1	; 0x01
    73ba:	c1 5c       	subi	r28, 0xC1	; 193
    73bc:	d0 40       	sbci	r29, 0x00	; 0
    73be:	6e 0f       	add	r22, r30
    73c0:	7f 1f       	adc	r23, r31
    73c2:	cd 52       	subi	r28, 0x2D	; 45
    73c4:	df 4f       	sbci	r29, 0xFF	; 255
    73c6:	e8 80       	ld	r14, Y
    73c8:	c3 5d       	subi	r28, 0xD3	; 211
    73ca:	d0 40       	sbci	r29, 0x00	; 0
    73cc:	0a 2f       	mov	r16, r26
    73ce:	c1 54       	subi	r28, 0x41	; 65
    73d0:	df 4f       	sbci	r29, 0xFF	; 255
    73d2:	e8 81       	ld	r30, Y
    73d4:	f9 81       	ldd	r31, Y+1	; 0x01
    73d6:	cf 5b       	subi	r28, 0xBF	; 191
    73d8:	d0 40       	sbci	r29, 0x00	; 0
    73da:	8e 0f       	add	r24, r30
    73dc:	9f 1f       	adc	r25, r31
    73de:	f1 01       	movw	r30, r2
    73e0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1062
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    73e2:	b3 94       	inc	r11
    73e4:	a2 cf       	rjmp	.-188    	; 0x732a <draw_menu(bool)+0xb6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    73e6:	cb 54       	subi	r28, 0x4B	; 75
    73e8:	df 4f       	sbci	r29, 0xFF	; 255
    73ea:	18 82       	st	Y, r1
    73ec:	c5 5b       	subi	r28, 0xB5	; 181
    73ee:	d0 40       	sbci	r29, 0x00	; 0
    73f0:	93 01       	movw	r18, r6
    73f2:	2b 51       	subi	r18, 0x1B	; 27
    73f4:	3e 4f       	sbci	r19, 0xFE	; 254
    73f6:	cb 53       	subi	r28, 0x3B	; 59
    73f8:	df 4f       	sbci	r29, 0xFF	; 255
    73fa:	39 83       	std	Y+1, r19	; 0x01
    73fc:	28 83       	st	Y, r18
    73fe:	c5 5c       	subi	r28, 0xC5	; 197
    7400:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    7402:	4e 01       	movw	r8, r28
    7404:	31 e8       	ldi	r19, 0x81	; 129
    7406:	83 0e       	add	r8, r19
    7408:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
    740a:	a3 01       	movw	r20, r6
    740c:	4b 50       	subi	r20, 0x0B	; 11
    740e:	5e 4f       	sbci	r21, 0xFE	; 254
    7410:	c6 53       	subi	r28, 0x36	; 54
    7412:	df 4f       	sbci	r29, 0xFF	; 255
    7414:	59 83       	std	Y+1, r21	; 0x01
    7416:	48 83       	st	Y, r20
    7418:	ca 5c       	subi	r28, 0xCA	; 202
    741a:	d0 40       	sbci	r29, 0x00	; 0
    741c:	be 01       	movw	r22, r28
    741e:	6f 5f       	subi	r22, 0xFF	; 255
    7420:	7f 4f       	sbci	r23, 0xFF	; 255
    7422:	cd 54       	subi	r28, 0x4D	; 77
    7424:	df 4f       	sbci	r29, 0xFF	; 255
    7426:	79 83       	std	Y+1, r23	; 0x01
    7428:	68 83       	st	Y, r22
    742a:	c3 5b       	subi	r28, 0xB3	; 179
    742c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    742e:	cb 53       	subi	r28, 0x3B	; 59
    7430:	df 4f       	sbci	r29, 0xFF	; 255
    7432:	e8 81       	ld	r30, Y
    7434:	f9 81       	ldd	r31, Y+1	; 0x01
    7436:	c5 5c       	subi	r28, 0xC5	; 197
    7438:	d0 40       	sbci	r29, 0x00	; 0
    743a:	84 91       	lpm	r24, Z
    743c:	cb 54       	subi	r28, 0x4B	; 75
    743e:	df 4f       	sbci	r29, 0xFF	; 255
    7440:	a8 80       	ld	r10, Y
    7442:	c5 5b       	subi	r28, 0xB5	; 181
    7444:	d0 40       	sbci	r29, 0x00	; 0
    7446:	a8 16       	cp	r10, r24
    7448:	08 f0       	brcs	.+2      	; 0x744c <draw_menu(bool)+0xc8c>
    744a:	d6 c1       	rjmp	.+940    	; 0x77f8 <draw_menu(bool)+0x1038>
    744c:	b7 e1       	ldi	r27, 0x17	; 23
    744e:	bb 2e       	mov	r11, r27
    7450:	ab 9c       	mul	r10, r11
    7452:	60 01       	movw	r12, r0
    7454:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    7456:	f6 01       	movw	r30, r12
    7458:	e5 5c       	subi	r30, 0xC5	; 197
    745a:	fe 4f       	sbci	r31, 0xFE	; 254
    745c:	e6 0d       	add	r30, r6
    745e:	f7 1d       	adc	r31, r7
    7460:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1079
    if (enable_redraw(rdr, redraw_class) == true)
    7462:	c4 53       	subi	r28, 0x34	; 52
    7464:	df 4f       	sbci	r29, 0xFF	; 255
    7466:	68 81       	ld	r22, Y
    7468:	cc 5c       	subi	r28, 0xCC	; 204
    746a:	d0 40       	sbci	r29, 0x00	; 0
    746c:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    7470:	88 23       	and	r24, r24
    7472:	09 f4       	brne	.+2      	; 0x7476 <draw_menu(bool)+0xcb6>
    7474:	3f c1       	rjmp	.+638    	; 0x76f4 <draw_menu(bool)+0xf34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    7476:	f6 01       	movw	r30, r12
    7478:	eb 5d       	subi	r30, 0xDB	; 219
    747a:	fe 4f       	sbci	r31, 0xFE	; 254
    747c:	e6 0d       	add	r30, r6
    747e:	f7 1d       	adc	r31, r7
    7480:	65 91       	lpm	r22, Z+
    7482:	74 91       	lpm	r23, Z
    7484:	c4 01       	movw	r24, r8
    7486:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    748a:	f6 01       	movw	r30, r12
    748c:	e9 5c       	subi	r30, 0xC9	; 201
    748e:	fe 4f       	sbci	r31, 0xFE	; 254
    7490:	e6 0d       	add	r30, r6
    7492:	f7 1d       	adc	r31, r7
    7494:	25 91       	lpm	r18, Z+
    7496:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1083
      gss = pgm_read_word(&switch_1->get_status_string);
    7498:	f6 01       	movw	r30, r12
    749a:	e7 5c       	subi	r30, 0xC7	; 199
    749c:	fe 4f       	sbci	r31, 0xFE	; 254
    749e:	e6 0d       	add	r30, r6
    74a0:	f7 1d       	adc	r31, r7
    74a2:	e5 90       	lpm	r14, Z+
    74a4:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
    74a6:	86 01       	movw	r16, r12
    74a8:	0c 5c       	subi	r16, 0xCC	; 204
    74aa:	1e 4f       	sbci	r17, 0xFE	; 254
    74ac:	06 0d       	add	r16, r6
    74ae:	17 1d       	adc	r17, r7
    74b0:	f8 01       	movw	r30, r16
    74b2:	84 91       	lpm	r24, Z
    74b4:	cd 53       	subi	r28, 0x3D	; 61
    74b6:	df 4f       	sbci	r29, 0xFF	; 255
    74b8:	68 81       	ld	r22, Y
    74ba:	79 81       	ldd	r23, Y+1	; 0x01
    74bc:	c3 5c       	subi	r28, 0xC3	; 195
    74be:	d0 40       	sbci	r29, 0x00	; 0
    74c0:	90 e0       	ldi	r25, 0x00	; 0
    74c2:	f9 01       	movw	r30, r18
    74c4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
      str3[0] = 0;
    74c6:	cf 55       	subi	r28, 0x5F	; 95
    74c8:	df 4f       	sbci	r29, 0xFF	; 255
    74ca:	18 82       	st	Y, r1
    74cc:	c1 5a       	subi	r28, 0xA1	; 161
    74ce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
    74d0:	c6 53       	subi	r28, 0x36	; 54
    74d2:	df 4f       	sbci	r29, 0xFF	; 255
    74d4:	e8 81       	ld	r30, Y
    74d6:	f9 81       	ldd	r31, Y+1	; 0x01
    74d8:	ca 5c       	subi	r28, 0xCA	; 202
    74da:	d0 40       	sbci	r29, 0x00	; 0
    74dc:	65 91       	lpm	r22, Z+
    74de:	74 91       	lpm	r23, Z
    74e0:	f8 01       	movw	r30, r16
    74e2:	84 91       	lpm	r24, Z
    74e4:	9e 01       	movw	r18, r28
    74e6:	2f 55       	subi	r18, 0x5F	; 95
    74e8:	3f 4f       	sbci	r19, 0xFF	; 255
    74ea:	ae 01       	movw	r20, r28
    74ec:	4f 5f       	subi	r20, 0xFF	; 255
    74ee:	5f 4f       	sbci	r21, 0xFF	; 255
    74f0:	f7 01       	movw	r30, r14
    74f2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1091
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    74f4:	f6 01       	movw	r30, r12
    74f6:	e1 5d       	subi	r30, 0xD1	; 209
    74f8:	fe 4f       	sbci	r31, 0xFE	; 254
    74fa:	e6 0d       	add	r30, r6
    74fc:	f7 1d       	adc	r31, r7
    74fe:	a5 90       	lpm	r10, Z+
    7500:	b4 90       	lpm	r11, Z
    7502:	c9 54       	subi	r28, 0x49	; 73
    7504:	df 4f       	sbci	r29, 0xFF	; 255
    7506:	b9 82       	std	Y+1, r11	; 0x01
    7508:	a8 82       	st	Y, r10
    750a:	c7 5b       	subi	r28, 0xB7	; 183
    750c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    750e:	f6 01       	movw	r30, r12
    7510:	e3 5d       	subi	r30, 0xD3	; 211
    7512:	fe 4f       	sbci	r31, 0xFE	; 254
    7514:	e6 0d       	add	r30, r6
    7516:	f7 1d       	adc	r31, r7
    7518:	45 90       	lpm	r4, Z+
    751a:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    751c:	f6 01       	movw	r30, r12
    751e:	e5 5d       	subi	r30, 0xD5	; 213
    7520:	fe 4f       	sbci	r31, 0xFE	; 254
    7522:	e6 0d       	add	r30, r6
    7524:	f7 1d       	adc	r31, r7
    7526:	85 91       	lpm	r24, Z+
    7528:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1088
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    752a:	f6 01       	movw	r30, r12
    752c:	e7 5d       	subi	r30, 0xD7	; 215
    752e:	fe 4f       	sbci	r31, 0xFE	; 254
    7530:	e6 0d       	add	r30, r6
    7532:	f7 1d       	adc	r31, r7
    7534:	25 90       	lpm	r2, Z+
    7536:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), pgm_read_word(&current->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    7538:	cf 53       	subi	r28, 0x3F	; 63
    753a:	df 4f       	sbci	r29, 0xFF	; 255
    753c:	28 81       	ld	r18, Y
    753e:	39 81       	ldd	r19, Y+1	; 0x01
    7540:	c1 5c       	subi	r28, 0xC1	; 193
    7542:	d0 40       	sbci	r29, 0x00	; 0
    7544:	22 0e       	add	r2, r18
    7546:	33 1e       	adc	r3, r19
    7548:	f6 01       	movw	r30, r12
    754a:	e9 5d       	subi	r30, 0xD9	; 217
    754c:	fe 4f       	sbci	r31, 0xFE	; 254
    754e:	e6 0d       	add	r30, r6
    7550:	f7 1d       	adc	r31, r7
    7552:	a5 90       	lpm	r10, Z+
    7554:	b4 90       	lpm	r11, Z
    7556:	c1 54       	subi	r28, 0x41	; 65
    7558:	df 4f       	sbci	r29, 0xFF	; 255
    755a:	48 81       	ld	r20, Y
    755c:	59 81       	ldd	r21, Y+1	; 0x01
    755e:	cf 5b       	subi	r28, 0xBF	; 191
    7560:	d0 40       	sbci	r29, 0x00	; 0
    7562:	a4 0e       	add	r10, r20
    7564:	b5 1e       	adc	r11, r21
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    7566:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    756a:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
    756e:	10 e0       	ldi	r17, 0x00	; 0
    7570:	00 e0       	ldi	r16, 0x00	; 0
    7572:	55 24       	eor	r5, r5
    7574:	bc 01       	movw	r22, r24
    7576:	77 27       	eor	r23, r23
    7578:	c3 54       	subi	r28, 0x43	; 67
    757a:	df 4f       	sbci	r29, 0xFF	; 255
    757c:	79 83       	std	Y+1, r23	; 0x01
    757e:	68 83       	st	Y, r22
    7580:	cd 5b       	subi	r28, 0xBD	; 189
    7582:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    7584:	c1 01       	movw	r24, r2
    7586:	84 0d       	add	r24, r4
    7588:	95 1d       	adc	r25, r5
    758a:	c8 53       	subi	r28, 0x38	; 56
    758c:	df 4f       	sbci	r29, 0xFF	; 255
    758e:	99 83       	std	Y+1, r25	; 0x01
    7590:	88 83       	st	Y, r24
    7592:	c8 5c       	subi	r28, 0xC8	; 200
    7594:	d0 40       	sbci	r29, 0x00	; 0
    7596:	7b 01       	movw	r14, r22
    7598:	ea 0c       	add	r14, r10
    759a:	fb 1c       	adc	r15, r11
    759c:	c8 53       	subi	r28, 0x38	; 56
    759e:	df 4f       	sbci	r29, 0xFF	; 255
    75a0:	28 81       	ld	r18, Y
    75a2:	39 81       	ldd	r19, Y+1	; 0x01
    75a4:	c8 5c       	subi	r28, 0xC8	; 200
    75a6:	d0 40       	sbci	r29, 0x00	; 0
    75a8:	20 1b       	sub	r18, r16
    75aa:	31 0b       	sbc	r19, r17
    75ac:	a7 01       	movw	r20, r14
    75ae:	40 1b       	sub	r20, r16
    75b0:	51 0b       	sbc	r21, r17
    75b2:	b1 01       	movw	r22, r2
    75b4:	60 0f       	add	r22, r16
    75b6:	71 1f       	adc	r23, r17
    75b8:	c5 01       	movw	r24, r10
    75ba:	80 0f       	add	r24, r16
    75bc:	91 1f       	adc	r25, r17
    75be:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
    75c2:	0f 5f       	subi	r16, 0xFF	; 255
    75c4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4030
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    75c6:	03 30       	cpi	r16, 0x03	; 3
    75c8:	11 05       	cpc	r17, r1
    75ca:	41 f7       	brne	.-48     	; 0x759c <draw_menu(bool)+0xddc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    75cc:	f4 01       	movw	r30, r8
    75ce:	01 90       	ld	r0, Z+
    75d0:	00 20       	and	r0, r0
    75d2:	e9 f7       	brne	.-6      	; 0x75ce <draw_menu(bool)+0xe0e>
    75d4:	31 97       	sbiw	r30, 0x01	; 1
    75d6:	e8 19       	sub	r30, r8
    75d8:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    75da:	c9 54       	subi	r28, 0x49	; 73
    75dc:	df 4f       	sbci	r29, 0xFF	; 255
    75de:	88 81       	ld	r24, Y
    75e0:	c7 5b       	subi	r28, 0xB7	; 183
    75e2:	d0 40       	sbci	r29, 0x00	; 0
    75e4:	88 0f       	add	r24, r24
    75e6:	c9 54       	subi	r28, 0x49	; 73
    75e8:	df 4f       	sbci	r29, 0xFF	; 255
    75ea:	98 81       	ld	r25, Y
    75ec:	c7 5b       	subi	r28, 0xB7	; 183
    75ee:	d0 40       	sbci	r29, 0x00	; 0
    75f0:	89 0f       	add	r24, r25
    75f2:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    75f4:	a2 01       	movw	r20, r4
    75f6:	48 1b       	sub	r20, r24
    75f8:	51 09       	sbc	r21, r1
    75fa:	57 ff       	sbrs	r21, 7
    75fc:	02 c0       	rjmp	.+4      	; 0x7602 <draw_menu(bool)+0xe42>
    75fe:	4d 5f       	subi	r20, 0xFD	; 253
    7600:	5f 4f       	sbci	r21, 0xFF	; 255
    7602:	55 95       	asr	r21
    7604:	47 95       	ror	r20
    7606:	55 95       	asr	r21
    7608:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    760a:	42 0d       	add	r20, r2
    760c:	53 2d       	mov	r21, r3
    760e:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    7610:	26 e0       	ldi	r18, 0x06	; 6
    7612:	e2 9f       	mul	r30, r18
    7614:	f0 01       	movw	r30, r0
    7616:	11 24       	eor	r1, r1
    7618:	c9 54       	subi	r28, 0x49	; 73
    761a:	df 4f       	sbci	r29, 0xFF	; 255
    761c:	38 81       	ld	r19, Y
    761e:	c7 5b       	subi	r28, 0xB7	; 183
    7620:	d0 40       	sbci	r29, 0x00	; 0
    7622:	3e 9f       	mul	r19, r30
    7624:	c0 01       	movw	r24, r0
    7626:	3f 9f       	mul	r19, r31
    7628:	90 0d       	add	r25, r0
    762a:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    762c:	99 27       	eor	r25, r25
    762e:	c3 54       	subi	r28, 0x43	; 67
    7630:	df 4f       	sbci	r29, 0xFF	; 255
    7632:	68 81       	ld	r22, Y
    7634:	79 81       	ldd	r23, Y+1	; 0x01
    7636:	cd 5b       	subi	r28, 0xBD	; 189
    7638:	d0 40       	sbci	r29, 0x00	; 0
    763a:	68 1b       	sub	r22, r24
    763c:	79 0b       	sbc	r23, r25
    763e:	77 ff       	sbrs	r23, 7
    7640:	02 c0       	rjmp	.+4      	; 0x7646 <draw_menu(bool)+0xe86>
    7642:	6f 5f       	subi	r22, 0xFF	; 255
    7644:	7f 4f       	sbci	r23, 0xFF	; 255
    7646:	75 95       	asr	r23
    7648:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    764a:	6a 0d       	add	r22, r10
    764c:	7b 2d       	mov	r23, r11
    764e:	71 1d       	adc	r23, r1
    7650:	ee 24       	eor	r14, r14
    7652:	ea 94       	dec	r14
    7654:	fe 2c       	mov	r15, r14
    7656:	10 e0       	ldi	r17, 0x00	; 0
    7658:	00 e0       	ldi	r16, 0x00	; 0
    765a:	c9 54       	subi	r28, 0x49	; 73
    765c:	df 4f       	sbci	r29, 0xFF	; 255
    765e:	28 81       	ld	r18, Y
    7660:	c7 5b       	subi	r28, 0xB7	; 183
    7662:	d0 40       	sbci	r29, 0x00	; 0
    7664:	c4 01       	movw	r24, r8
    7666:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    766a:	cd 54       	subi	r28, 0x4D	; 77
    766c:	df 4f       	sbci	r29, 0xFF	; 255
    766e:	e8 81       	ld	r30, Y
    7670:	f9 81       	ldd	r31, Y+1	; 0x01
    7672:	c3 5b       	subi	r28, 0xB3	; 179
    7674:	d0 40       	sbci	r29, 0x00	; 0
    7676:	01 90       	ld	r0, Z+
    7678:	00 20       	and	r0, r0
    767a:	e9 f7       	brne	.-6      	; 0x7676 <draw_menu(bool)+0xeb6>
    767c:	31 97       	sbiw	r30, 0x01	; 1
    767e:	cd 54       	subi	r28, 0x4D	; 77
    7680:	df 4f       	sbci	r29, 0xFF	; 255
    7682:	48 81       	ld	r20, Y
    7684:	59 81       	ldd	r21, Y+1	; 0x01
    7686:	c3 5b       	subi	r28, 0xB3	; 179
    7688:	d0 40       	sbci	r29, 0x00	; 0
    768a:	e4 1b       	sub	r30, r20
    768c:	f5 0b       	sbc	r31, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    768e:	a2 01       	movw	r20, r4
    7690:	46 50       	subi	r20, 0x06	; 6
    7692:	51 09       	sbc	r21, r1
    7694:	57 ff       	sbrs	r21, 7
    7696:	02 c0       	rjmp	.+4      	; 0x769c <draw_menu(bool)+0xedc>
    7698:	4d 5f       	subi	r20, 0xFD	; 253
    769a:	5f 4f       	sbci	r21, 0xFF	; 255
    769c:	55 95       	asr	r21
    769e:	47 95       	ror	r20
    76a0:	55 95       	asr	r21
    76a2:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    76a4:	55 27       	eor	r21, r21
    76a6:	ca 01       	movw	r24, r20
    76a8:	88 0f       	add	r24, r24
    76aa:	99 1f       	adc	r25, r25
    76ac:	48 0f       	add	r20, r24
    76ae:	59 1f       	adc	r21, r25
    76b0:	42 0d       	add	r20, r2
    76b2:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    76b4:	66 e0       	ldi	r22, 0x06	; 6
    76b6:	e6 9f       	mul	r30, r22
    76b8:	f0 01       	movw	r30, r0
    76ba:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4039
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    76bc:	ff 27       	eor	r31, r31
    76be:	c3 54       	subi	r28, 0x43	; 67
    76c0:	df 4f       	sbci	r29, 0xFF	; 255
    76c2:	68 81       	ld	r22, Y
    76c4:	79 81       	ldd	r23, Y+1	; 0x01
    76c6:	cd 5b       	subi	r28, 0xBD	; 189
    76c8:	d0 40       	sbci	r29, 0x00	; 0
    76ca:	6e 1b       	sub	r22, r30
    76cc:	7f 0b       	sbc	r23, r31
    76ce:	77 ff       	sbrs	r23, 7
    76d0:	02 c0       	rjmp	.+4      	; 0x76d6 <draw_menu(bool)+0xf16>
    76d2:	6f 5f       	subi	r22, 0xFF	; 255
    76d4:	7f 4f       	sbci	r23, 0xFF	; 255
    76d6:	75 95       	asr	r23
    76d8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    76da:	6a 0d       	add	r22, r10
    76dc:	7b 2d       	mov	r23, r11
    76de:	71 1d       	adc	r23, r1
    76e0:	ee 24       	eor	r14, r14
    76e2:	ea 94       	dec	r14
    76e4:	fe 2c       	mov	r15, r14
    76e6:	10 e0       	ldi	r17, 0x00	; 0
    76e8:	00 e0       	ldi	r16, 0x00	; 0
    76ea:	21 e0       	ldi	r18, 0x01	; 1
    76ec:	ce 01       	movw	r24, r28
    76ee:	01 96       	adiw	r24, 0x01	; 1
    76f0:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1094
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    76f4:	c7 54       	subi	r28, 0x47	; 71
    76f6:	df 4f       	sbci	r29, 0xFF	; 255
    76f8:	88 81       	ld	r24, Y
    76fa:	99 81       	ldd	r25, Y+1	; 0x01
    76fc:	c9 5b       	subi	r28, 0xB9	; 185
    76fe:	d0 40       	sbci	r29, 0x00	; 0
    7700:	89 2b       	or	r24, r25
    7702:	09 f4       	brne	.+2      	; 0x7706 <draw_menu(bool)+0xf46>
    7704:	6d c0       	rjmp	.+218    	; 0x77e0 <draw_menu(bool)+0x1020>
    7706:	c5 54       	subi	r28, 0x45	; 69
    7708:	df 4f       	sbci	r29, 0xFF	; 255
    770a:	e8 81       	ld	r30, Y
    770c:	f9 81       	ldd	r31, Y+1	; 0x01
    770e:	cb 5b       	subi	r28, 0xBB	; 187
    7710:	d0 40       	sbci	r29, 0x00	; 0
    7712:	ef 2b       	or	r30, r31
    7714:	09 f4       	brne	.+2      	; 0x7718 <draw_menu(bool)+0xf58>
    7716:	64 c0       	rjmp	.+200    	; 0x77e0 <draw_menu(bool)+0x1020>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    7718:	f6 01       	movw	r30, r12
    771a:	e3 5d       	subi	r30, 0xD3	; 211
    771c:	fe 4f       	sbci	r31, 0xFE	; 254
    771e:	e6 0d       	add	r30, r6
    7720:	f7 1d       	adc	r31, r7
    7722:	25 91       	lpm	r18, Z+
    7724:	34 91       	lpm	r19, Z
    7726:	f6 01       	movw	r30, r12
    7728:	e5 5d       	subi	r30, 0xD5	; 213
    772a:	fe 4f       	sbci	r31, 0xFE	; 254
    772c:	e6 0d       	add	r30, r6
    772e:	f7 1d       	adc	r31, r7
    7730:	45 91       	lpm	r20, Z+
    7732:	54 91       	lpm	r21, Z
    7734:	f6 01       	movw	r30, r12
    7736:	e7 5d       	subi	r30, 0xD7	; 215
    7738:	fe 4f       	sbci	r31, 0xFE	; 254
    773a:	e6 0d       	add	r30, r6
    773c:	f7 1d       	adc	r31, r7
    773e:	85 91       	lpm	r24, Z+
    7740:	94 91       	lpm	r25, Z
    7742:	f6 01       	movw	r30, r12
    7744:	e9 5d       	subi	r30, 0xD9	; 217
    7746:	fe 4f       	sbci	r31, 0xFE	; 254
    7748:	e6 0d       	add	r30, r6
    774a:	f7 1d       	adc	r31, r7
    774c:	65 91       	lpm	r22, Z+
    774e:	74 91       	lpm	r23, Z
    7750:	c1 54       	subi	r28, 0x41	; 65
    7752:	df 4f       	sbci	r29, 0xFF	; 255
    7754:	a8 80       	ld	r10, Y
    7756:	b9 80       	ldd	r11, Y+1	; 0x01
    7758:	cf 5b       	subi	r28, 0xBF	; 191
    775a:	d0 40       	sbci	r29, 0x00	; 0
    775c:	6a 0d       	add	r22, r10
    775e:	7b 1d       	adc	r23, r11
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7760:	c7 54       	subi	r28, 0x47	; 71
    7762:	df 4f       	sbci	r29, 0xFF	; 255
    7764:	e8 81       	ld	r30, Y
    7766:	f9 81       	ldd	r31, Y+1	; 0x01
    7768:	c9 5b       	subi	r28, 0xB9	; 185
    776a:	d0 40       	sbci	r29, 0x00	; 0
    776c:	6e 17       	cp	r22, r30
    776e:	7f 07       	cpc	r23, r31
    7770:	bc f5       	brge	.+110    	; 0x77e0 <draw_menu(bool)+0x1020>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7772:	46 0f       	add	r20, r22
    7774:	57 1f       	adc	r21, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7776:	e4 17       	cp	r30, r20
    7778:	f5 07       	cpc	r31, r21
    777a:	94 f5       	brge	.+100    	; 0x77e0 <draw_menu(bool)+0x1020>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    777c:	cf 53       	subi	r28, 0x3F	; 63
    777e:	df 4f       	sbci	r29, 0xFF	; 255
    7780:	a8 80       	ld	r10, Y
    7782:	b9 80       	ldd	r11, Y+1	; 0x01
    7784:	c1 5c       	subi	r28, 0xC1	; 193
    7786:	d0 40       	sbci	r29, 0x00	; 0
    7788:	8a 0d       	add	r24, r10
    778a:	9b 1d       	adc	r25, r11
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    778c:	c5 54       	subi	r28, 0x45	; 69
    778e:	df 4f       	sbci	r29, 0xFF	; 255
    7790:	48 81       	ld	r20, Y
    7792:	59 81       	ldd	r21, Y+1	; 0x01
    7794:	cb 5b       	subi	r28, 0xBB	; 187
    7796:	d0 40       	sbci	r29, 0x00	; 0
    7798:	84 17       	cp	r24, r20
    779a:	95 07       	cpc	r25, r21
    779c:	0c f5       	brge	.+66     	; 0x77e0 <draw_menu(bool)+0x1020>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    779e:	82 0f       	add	r24, r18
    77a0:	93 1f       	adc	r25, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    77a2:	48 17       	cp	r20, r24
    77a4:	59 07       	cpc	r21, r25
    77a6:	e4 f4       	brge	.+56     	; 0x77e0 <draw_menu(bool)+0x1020>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1097

    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    77a8:	f6 01       	movw	r30, r12
    77aa:	eb 5c       	subi	r30, 0xCB	; 203
    77ac:	fe 4f       	sbci	r31, 0xFE	; 254
    77ae:	e6 0d       	add	r30, r6
    77b0:	f7 1d       	adc	r31, r7
    77b2:	25 91       	lpm	r18, Z+
    77b4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1099
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
    77b6:	f6 01       	movw	r30, r12
    77b8:	ec 5c       	subi	r30, 0xCC	; 204
    77ba:	fe 4f       	sbci	r31, 0xFE	; 254
    77bc:	e6 0d       	add	r30, r6
    77be:	f7 1d       	adc	r31, r7
    77c0:	84 91       	lpm	r24, Z
    77c2:	cd 53       	subi	r28, 0x3D	; 61
    77c4:	df 4f       	sbci	r29, 0xFF	; 255
    77c6:	68 81       	ld	r22, Y
    77c8:	79 81       	ldd	r23, Y+1	; 0x01
    77ca:	c3 5c       	subi	r28, 0xC3	; 195
    77cc:	d0 40       	sbci	r29, 0x00	; 0
    77ce:	90 e0       	ldi	r25, 0x00	; 0
    77d0:	f9 01       	movw	r30, r18
    77d2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1100
        ret = true;
    77d4:	f1 e0       	ldi	r31, 0x01	; 1
    77d6:	c9 53       	subi	r28, 0x39	; 57
    77d8:	df 4f       	sbci	r29, 0xFF	; 255
    77da:	f8 83       	st	Y, r31
    77dc:	c7 5c       	subi	r28, 0xC7	; 199
    77de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    77e0:	cb 54       	subi	r28, 0x4B	; 75
    77e2:	df 4f       	sbci	r29, 0xFF	; 255
    77e4:	28 81       	ld	r18, Y
    77e6:	c5 5b       	subi	r28, 0xB5	; 181
    77e8:	d0 40       	sbci	r29, 0x00	; 0
    77ea:	2f 5f       	subi	r18, 0xFF	; 255
    77ec:	cb 54       	subi	r28, 0x4B	; 75
    77ee:	df 4f       	sbci	r29, 0xFF	; 255
    77f0:	28 83       	st	Y, r18
    77f2:	c5 5b       	subi	r28, 0xB5	; 181
    77f4:	d0 40       	sbci	r29, 0x00	; 0
    77f6:	1b ce       	rjmp	.-970    	; 0x742e <draw_menu(bool)+0xc6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1103
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    77f8:	c9 53       	subi	r28, 0x39	; 57
    77fa:	df 4f       	sbci	r29, 0xFF	; 255
    77fc:	38 81       	ld	r19, Y
    77fe:	c7 5c       	subi	r28, 0xC7	; 199
    7800:	d0 40       	sbci	r29, 0x00	; 0
    7802:	31 11       	cpse	r19, r1
    7804:	0c 94 bb 42 	jmp	0x8576	; 0x8576 <draw_menu(bool)+0x1db6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    7808:	10 e0       	ldi	r17, 0x00	; 0
    780a:	53 01       	movw	r10, r6
    780c:	49 e1       	ldi	r20, 0x19	; 25
    780e:	a4 1a       	sub	r10, r20
    7810:	4e ef       	ldi	r20, 0xFE	; 254
    7812:	b4 0a       	sbc	r11, r20
    7814:	8e e0       	ldi	r24, 0x0E	; 14
    7816:	f8 2e       	mov	r15, r24
    7818:	f5 01       	movw	r30, r10
    781a:	84 91       	lpm	r24, Z
    781c:	18 17       	cp	r17, r24
    781e:	08 f0       	brcs	.+2      	; 0x7822 <draw_menu(bool)+0x1062>
    7820:	c9 c0       	rjmp	.+402    	; 0x79b4 <draw_menu(bool)+0x11f4>
    7822:	1f 9d       	mul	r17, r15
    7824:	60 01       	movw	r12, r0
    7826:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1108
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    7828:	f6 01       	movw	r30, r12
    782a:	e2 57       	subi	r30, 0x72	; 114
    782c:	fe 4f       	sbci	r31, 0xFE	; 254
    782e:	e6 0d       	add	r30, r6
    7830:	f7 1d       	adc	r31, r7
    7832:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1109
    if (enable_redraw(rdr, redraw_class) == true)
    7834:	c4 53       	subi	r28, 0x34	; 52
    7836:	df 4f       	sbci	r29, 0xFF	; 255
    7838:	68 81       	ld	r22, Y
    783a:	cc 5c       	subi	r28, 0xCC	; 204
    783c:	d0 40       	sbci	r29, 0x00	; 0
    783e:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    7842:	88 23       	and	r24, r24
    7844:	09 f4       	brne	.+2      	; 0x7848 <draw_menu(bool)+0x1088>
    7846:	3e c0       	rjmp	.+124    	; 0x78c4 <draw_menu(bool)+0x1104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1113
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    7848:	f6 01       	movw	r30, r12
    784a:	ef 57       	subi	r30, 0x7F	; 127
    784c:	fe 4f       	sbci	r31, 0xFE	; 254
    784e:	e6 0d       	add	r30, r6
    7850:	f7 1d       	adc	r31, r7
    7852:	85 90       	lpm	r8, Z+
    7854:	94 90       	lpm	r9, Z
    7856:	f6 01       	movw	r30, r12
    7858:	e6 57       	subi	r30, 0x76	; 118
    785a:	fe 4f       	sbci	r31, 0xFE	; 254
    785c:	e6 0d       	add	r30, r6
    785e:	f7 1d       	adc	r31, r7
    7860:	a5 91       	lpm	r26, Z+
    7862:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1112
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    7864:	f6 01       	movw	r30, r12
    7866:	e8 57       	subi	r30, 0x78	; 120
    7868:	fe 4f       	sbci	r31, 0xFE	; 254
    786a:	e6 0d       	add	r30, r6
    786c:	f7 1d       	adc	r31, r7
    786e:	25 91       	lpm	r18, Z+
    7870:	34 91       	lpm	r19, Z
    7872:	f6 01       	movw	r30, r12
    7874:	ea 57       	subi	r30, 0x7A	; 122
    7876:	fe 4f       	sbci	r31, 0xFE	; 254
    7878:	e6 0d       	add	r30, r6
    787a:	f7 1d       	adc	r31, r7
    787c:	45 91       	lpm	r20, Z+
    787e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    7880:	f6 01       	movw	r30, r12
    7882:	ec 57       	subi	r30, 0x7C	; 124
    7884:	fe 4f       	sbci	r31, 0xFE	; 254
    7886:	e6 0d       	add	r30, r6
    7888:	f7 1d       	adc	r31, r7
    788a:	65 91       	lpm	r22, Z+
    788c:	74 91       	lpm	r23, Z
    788e:	f6 01       	movw	r30, r12
    7890:	ee 57       	subi	r30, 0x7E	; 126
    7892:	fe 4f       	sbci	r31, 0xFE	; 254
    7894:	e6 0d       	add	r30, r6
    7896:	f7 1d       	adc	r31, r7
    7898:	85 91       	lpm	r24, Z+
    789a:	94 91       	lpm	r25, Z
    789c:	cf 53       	subi	r28, 0x3F	; 63
    789e:	df 4f       	sbci	r29, 0xFF	; 255
    78a0:	e8 81       	ld	r30, Y
    78a2:	f9 81       	ldd	r31, Y+1	; 0x01
    78a4:	c1 5c       	subi	r28, 0xC1	; 193
    78a6:	d0 40       	sbci	r29, 0x00	; 0
    78a8:	6e 0f       	add	r22, r30
    78aa:	7f 1f       	adc	r23, r31
    78ac:	e8 2c       	mov	r14, r8
    78ae:	0a 2f       	mov	r16, r26
    78b0:	c1 54       	subi	r28, 0x41	; 65
    78b2:	df 4f       	sbci	r29, 0xFF	; 255
    78b4:	e8 81       	ld	r30, Y
    78b6:	f9 81       	ldd	r31, Y+1	; 0x01
    78b8:	cf 5b       	subi	r28, 0xBF	; 191
    78ba:	d0 40       	sbci	r29, 0x00	; 0
    78bc:	8e 0f       	add	r24, r30
    78be:	9f 1f       	adc	r25, r31
    78c0:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1115
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    78c4:	c7 54       	subi	r28, 0x47	; 71
    78c6:	df 4f       	sbci	r29, 0xFF	; 255
    78c8:	28 81       	ld	r18, Y
    78ca:	39 81       	ldd	r19, Y+1	; 0x01
    78cc:	c9 5b       	subi	r28, 0xB9	; 185
    78ce:	d0 40       	sbci	r29, 0x00	; 0
    78d0:	23 2b       	or	r18, r19
    78d2:	09 f4       	brne	.+2      	; 0x78d6 <draw_menu(bool)+0x1116>
    78d4:	6d c0       	rjmp	.+218    	; 0x79b0 <draw_menu(bool)+0x11f0>
    78d6:	c5 54       	subi	r28, 0x45	; 69
    78d8:	df 4f       	sbci	r29, 0xFF	; 255
    78da:	48 81       	ld	r20, Y
    78dc:	59 81       	ldd	r21, Y+1	; 0x01
    78de:	cb 5b       	subi	r28, 0xBB	; 187
    78e0:	d0 40       	sbci	r29, 0x00	; 0
    78e2:	45 2b       	or	r20, r21
    78e4:	09 f4       	brne	.+2      	; 0x78e8 <draw_menu(bool)+0x1128>
    78e6:	64 c0       	rjmp	.+200    	; 0x79b0 <draw_menu(bool)+0x11f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1116
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    78e8:	f6 01       	movw	r30, r12
    78ea:	e8 57       	subi	r30, 0x78	; 120
    78ec:	fe 4f       	sbci	r31, 0xFE	; 254
    78ee:	e6 0d       	add	r30, r6
    78f0:	f7 1d       	adc	r31, r7
    78f2:	45 91       	lpm	r20, Z+
    78f4:	54 91       	lpm	r21, Z
    78f6:	f6 01       	movw	r30, r12
    78f8:	ea 57       	subi	r30, 0x7A	; 122
    78fa:	fe 4f       	sbci	r31, 0xFE	; 254
    78fc:	e6 0d       	add	r30, r6
    78fe:	f7 1d       	adc	r31, r7
    7900:	65 91       	lpm	r22, Z+
    7902:	74 91       	lpm	r23, Z
    7904:	f6 01       	movw	r30, r12
    7906:	ec 57       	subi	r30, 0x7C	; 124
    7908:	fe 4f       	sbci	r31, 0xFE	; 254
    790a:	e6 0d       	add	r30, r6
    790c:	f7 1d       	adc	r31, r7
    790e:	85 91       	lpm	r24, Z+
    7910:	94 91       	lpm	r25, Z
    7912:	f6 01       	movw	r30, r12
    7914:	ee 57       	subi	r30, 0x7E	; 126
    7916:	fe 4f       	sbci	r31, 0xFE	; 254
    7918:	e6 0d       	add	r30, r6
    791a:	f7 1d       	adc	r31, r7
    791c:	25 91       	lpm	r18, Z+
    791e:	34 91       	lpm	r19, Z
    7920:	c1 54       	subi	r28, 0x41	; 65
    7922:	df 4f       	sbci	r29, 0xFF	; 255
    7924:	e8 81       	ld	r30, Y
    7926:	f9 81       	ldd	r31, Y+1	; 0x01
    7928:	cf 5b       	subi	r28, 0xBF	; 191
    792a:	d0 40       	sbci	r29, 0x00	; 0
    792c:	2e 0f       	add	r18, r30
    792e:	3f 1f       	adc	r19, r31
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7930:	c7 54       	subi	r28, 0x47	; 71
    7932:	df 4f       	sbci	r29, 0xFF	; 255
    7934:	e8 81       	ld	r30, Y
    7936:	f9 81       	ldd	r31, Y+1	; 0x01
    7938:	c9 5b       	subi	r28, 0xB9	; 185
    793a:	d0 40       	sbci	r29, 0x00	; 0
    793c:	2e 17       	cp	r18, r30
    793e:	3f 07       	cpc	r19, r31
    7940:	bc f5       	brge	.+110    	; 0x79b0 <draw_menu(bool)+0x11f0>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7942:	26 0f       	add	r18, r22
    7944:	37 1f       	adc	r19, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7946:	e2 17       	cp	r30, r18
    7948:	f3 07       	cpc	r31, r19
    794a:	94 f5       	brge	.+100    	; 0x79b0 <draw_menu(bool)+0x11f0>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1116
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    794c:	cf 53       	subi	r28, 0x3F	; 63
    794e:	df 4f       	sbci	r29, 0xFF	; 255
    7950:	28 81       	ld	r18, Y
    7952:	39 81       	ldd	r19, Y+1	; 0x01
    7954:	c1 5c       	subi	r28, 0xC1	; 193
    7956:	d0 40       	sbci	r29, 0x00	; 0
    7958:	82 0f       	add	r24, r18
    795a:	93 1f       	adc	r25, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    795c:	c5 54       	subi	r28, 0x45	; 69
    795e:	df 4f       	sbci	r29, 0xFF	; 255
    7960:	68 81       	ld	r22, Y
    7962:	79 81       	ldd	r23, Y+1	; 0x01
    7964:	cb 5b       	subi	r28, 0xBB	; 187
    7966:	d0 40       	sbci	r29, 0x00	; 0
    7968:	86 17       	cp	r24, r22
    796a:	97 07       	cpc	r25, r23
    796c:	0c f5       	brge	.+66     	; 0x79b0 <draw_menu(bool)+0x11f0>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    796e:	84 0f       	add	r24, r20
    7970:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7972:	68 17       	cp	r22, r24
    7974:	79 07       	cpc	r23, r25
    7976:	e4 f4       	brge	.+56     	; 0x79b0 <draw_menu(bool)+0x11f0>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1118
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    7978:	f6 01       	movw	r30, r12
    797a:	e4 57       	subi	r30, 0x74	; 116
    797c:	fe 4f       	sbci	r31, 0xFE	; 254
    797e:	e6 0d       	add	r30, r6
    7980:	f7 1d       	adc	r31, r7
    7982:	25 91       	lpm	r18, Z+
    7984:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1120
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
    7986:	f6 01       	movw	r30, r12
    7988:	e5 57       	subi	r30, 0x75	; 117
    798a:	fe 4f       	sbci	r31, 0xFE	; 254
    798c:	e6 0d       	add	r30, r6
    798e:	f7 1d       	adc	r31, r7
    7990:	84 91       	lpm	r24, Z
    7992:	cd 53       	subi	r28, 0x3D	; 61
    7994:	df 4f       	sbci	r29, 0xFF	; 255
    7996:	68 81       	ld	r22, Y
    7998:	79 81       	ldd	r23, Y+1	; 0x01
    799a:	c3 5c       	subi	r28, 0xC3	; 195
    799c:	d0 40       	sbci	r29, 0x00	; 0
    799e:	90 e0       	ldi	r25, 0x00	; 0
    79a0:	f9 01       	movw	r30, r18
    79a2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1121
        ret = true;
    79a4:	f1 e0       	ldi	r31, 0x01	; 1
    79a6:	c9 53       	subi	r28, 0x39	; 57
    79a8:	df 4f       	sbci	r29, 0xFF	; 255
    79aa:	f8 83       	st	Y, r31
    79ac:	c7 5c       	subi	r28, 0xC7	; 199
    79ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    79b0:	1f 5f       	subi	r17, 0xFF	; 255
    79b2:	32 cf       	rjmp	.-412    	; 0x7818 <draw_menu(bool)+0x1058>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1124
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    79b4:	c9 53       	subi	r28, 0x39	; 57
    79b6:	df 4f       	sbci	r29, 0xFF	; 255
    79b8:	a8 80       	ld	r10, Y
    79ba:	c7 5c       	subi	r28, 0xC7	; 199
    79bc:	d0 40       	sbci	r29, 0x00	; 0
    79be:	a1 10       	cpse	r10, r1
    79c0:	da c5       	rjmp	.+2996   	; 0x8576 <draw_menu(bool)+0x1db6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1126
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    79c2:	10 e0       	ldi	r17, 0x00	; 0
    79c4:	93 01       	movw	r18, r6
    79c6:	28 51       	subi	r18, 0x18	; 24
    79c8:	3e 4f       	sbci	r19, 0xFE	; 254
    79ca:	c1 53       	subi	r28, 0x31	; 49
    79cc:	df 4f       	sbci	r29, 0xFF	; 255
    79ce:	39 83       	std	Y+1, r19	; 0x01
    79d0:	28 83       	st	Y, r18
    79d2:	cf 5c       	subi	r28, 0xCF	; 207
    79d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1163
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
    79d6:	a3 01       	movw	r20, r6
    79d8:	4b 50       	subi	r20, 0x0B	; 11
    79da:	5e 4f       	sbci	r21, 0xFE	; 254
    79dc:	cd 52       	subi	r28, 0x2D	; 45
    79de:	df 4f       	sbci	r29, 0xFF	; 255
    79e0:	59 83       	std	Y+1, r21	; 0x01
    79e2:	48 83       	st	Y, r20
    79e4:	c3 5d       	subi	r28, 0xD3	; 211
    79e6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1126
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    79e8:	c1 53       	subi	r28, 0x31	; 49
    79ea:	df 4f       	sbci	r29, 0xFF	; 255
    79ec:	e8 81       	ld	r30, Y
    79ee:	f9 81       	ldd	r31, Y+1	; 0x01
    79f0:	cf 5c       	subi	r28, 0xCF	; 207
    79f2:	d0 40       	sbci	r29, 0x00	; 0
    79f4:	84 91       	lpm	r24, Z
    79f6:	18 17       	cp	r17, r24
    79f8:	08 f0       	brcs	.+2      	; 0x79fc <draw_menu(bool)+0x123c>
    79fa:	dc c2       	rjmp	.+1464   	; 0x7fb4 <draw_menu(bool)+0x17f4>
    79fc:	f7 e1       	ldi	r31, 0x17	; 23
    79fe:	1f 9f       	mul	r17, r31
    7a00:	60 01       	movw	r12, r0
    7a02:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1129
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    7a04:	f6 01       	movw	r30, r12
    7a06:	ed 54       	subi	r30, 0x4D	; 77
    7a08:	fe 4f       	sbci	r31, 0xFE	; 254
    7a0a:	e6 0d       	add	r30, r6
    7a0c:	f7 1d       	adc	r31, r7
    7a0e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1130
    if (enable_redraw(rdr, redraw_class) == true)
    7a10:	c4 53       	subi	r28, 0x34	; 52
    7a12:	df 4f       	sbci	r29, 0xFF	; 255
    7a14:	68 81       	ld	r22, Y
    7a16:	cc 5c       	subi	r28, 0xCC	; 204
    7a18:	d0 40       	sbci	r29, 0x00	; 0
    7a1a:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    7a1e:	88 23       	and	r24, r24
    7a20:	09 f4       	brne	.+2      	; 0x7a24 <draw_menu(bool)+0x1264>
    7a22:	77 c1       	rjmp	.+750    	; 0x7d12 <draw_menu(bool)+0x1552>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1132
    {
      loop_i = 0;
    7a24:	ce 54       	subi	r28, 0x4E	; 78
    7a26:	df 4f       	sbci	r29, 0xFF	; 255
    7a28:	18 82       	st	Y, r1
    7a2a:	c2 5b       	subi	r28, 0xB2	; 178
    7a2c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1135
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    7a2e:	f6 01       	movw	r30, r12
    7a30:	e1 55       	subi	r30, 0x51	; 81
    7a32:	fe 4f       	sbci	r31, 0xFE	; 254
    7a34:	e6 0d       	add	r30, r6
    7a36:	f7 1d       	adc	r31, r7
    7a38:	25 91       	lpm	r18, Z+
    7a3a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1136
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
    7a3c:	f6 01       	movw	r30, r12
    7a3e:	e6 55       	subi	r30, 0x56	; 86
    7a40:	fe 4f       	sbci	r31, 0xFE	; 254
    7a42:	e6 0d       	add	r30, r6
    7a44:	f7 1d       	adc	r31, r7
    7a46:	85 91       	lpm	r24, Z+
    7a48:	94 91       	lpm	r25, Z
    7a4a:	cd 53       	subi	r28, 0x3D	; 61
    7a4c:	df 4f       	sbci	r29, 0xFF	; 255
    7a4e:	68 81       	ld	r22, Y
    7a50:	79 81       	ldd	r23, Y+1	; 0x01
    7a52:	c3 5c       	subi	r28, 0xC3	; 195
    7a54:	d0 40       	sbci	r29, 0x00	; 0
    7a56:	f9 01       	movw	r30, r18
    7a58:	19 95       	eicall
    7a5a:	cf 54       	subi	r28, 0x4F	; 79
    7a5c:	df 4f       	sbci	r29, 0xFF	; 255
    7a5e:	88 83       	st	Y, r24
    7a60:	c1 5b       	subi	r28, 0xB1	; 177
    7a62:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    7a64:	f6 01       	movw	r30, r12
    7a66:	e5 55       	subi	r30, 0x55	; 85
    7a68:	fe 4f       	sbci	r31, 0xFE	; 254
    7a6a:	e6 0d       	add	r30, r6
    7a6c:	f7 1d       	adc	r31, r7
    7a6e:	a5 90       	lpm	r10, Z+
    7a70:	b4 90       	lpm	r11, Z
    7a72:	cf 52       	subi	r28, 0x2F	; 47
    7a74:	df 4f       	sbci	r29, 0xFF	; 255
    7a76:	b9 82       	std	Y+1, r11	; 0x01
    7a78:	a8 82       	st	Y, r10
    7a7a:	c1 5d       	subi	r28, 0xD1	; 209
    7a7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7a7e:	16 01       	movw	r2, r12
    7a80:	23 e6       	ldi	r18, 0x63	; 99
    7a82:	22 1a       	sub	r2, r18
    7a84:	2e ef       	ldi	r18, 0xFE	; 254
    7a86:	32 0a       	sbc	r3, r18
    7a88:	26 0c       	add	r2, r6
    7a8a:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7a8c:	26 01       	movw	r4, r12
    7a8e:	31 e6       	ldi	r19, 0x61	; 97
    7a90:	43 1a       	sub	r4, r19
    7a92:	3e ef       	ldi	r19, 0xFE	; 254
    7a94:	53 0a       	sbc	r5, r19
    7a96:	46 0c       	add	r4, r6
    7a98:	57 1c       	adc	r5, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1142
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    7a9a:	c6 01       	movw	r24, r12
    7a9c:	89 55       	subi	r24, 0x59	; 89
    7a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    7aa0:	53 01       	movw	r10, r6
    7aa2:	a8 0e       	add	r10, r24
    7aa4:	b9 1e       	adc	r11, r25
    7aa6:	c3 54       	subi	r28, 0x43	; 67
    7aa8:	df 4f       	sbci	r29, 0xFF	; 255
    7aaa:	b9 82       	std	Y+1, r11	; 0x01
    7aac:	a8 82       	st	Y, r10
    7aae:	cd 5b       	subi	r28, 0xBD	; 189
    7ab0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1144
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7ab2:	01 97       	sbiw	r24, 0x01	; 1
    7ab4:	53 01       	movw	r10, r6
    7ab6:	a8 0e       	add	r10, r24
    7ab8:	b9 1e       	adc	r11, r25
    7aba:	cb 54       	subi	r28, 0x4B	; 75
    7abc:	df 4f       	sbci	r29, 0xFF	; 255
    7abe:	b9 82       	std	Y+1, r11	; 0x01
    7ac0:	a8 82       	st	Y, r10
    7ac2:	c5 5b       	subi	r28, 0xB5	; 181
    7ac4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1157
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
          loop_t++;
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
    7ac6:	02 96       	adiw	r24, 0x02	; 2
    7ac8:	53 01       	movw	r10, r6
    7aca:	a8 0e       	add	r10, r24
    7acc:	b9 1e       	adc	r11, r25
    7ace:	cb 53       	subi	r28, 0x3B	; 59
    7ad0:	df 4f       	sbci	r29, 0xFF	; 255
    7ad2:	b9 82       	std	Y+1, r11	; 0x01
    7ad4:	a8 82       	st	Y, r10
    7ad6:	c5 5c       	subi	r28, 0xC5	; 197
    7ad8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    7ada:	03 97       	sbiw	r24, 0x03	; 3
    7adc:	53 01       	movw	r10, r6
    7ade:	a8 0e       	add	r10, r24
    7ae0:	b9 1e       	adc	r11, r25
    7ae2:	c8 53       	subi	r28, 0x38	; 56
    7ae4:	df 4f       	sbci	r29, 0xFF	; 255
    7ae6:	b9 82       	std	Y+1, r11	; 0x01
    7ae8:	a8 82       	st	Y, r10
    7aea:	c8 5c       	subi	r28, 0xC8	; 200
    7aec:	d0 40       	sbci	r29, 0x00	; 0
    7aee:	02 97       	sbiw	r24, 0x02	; 2
    7af0:	53 01       	movw	r10, r6
    7af2:	a8 0e       	add	r10, r24
    7af4:	b9 1e       	adc	r11, r25
    7af6:	c6 53       	subi	r28, 0x36	; 54
    7af8:	df 4f       	sbci	r29, 0xFF	; 255
    7afa:	b9 82       	std	Y+1, r11	; 0x01
    7afc:	a8 82       	st	Y, r10
    7afe:	ca 5c       	subi	r28, 0xCA	; 202
    7b00:	d0 40       	sbci	r29, 0x00	; 0
    7b02:	02 97       	sbiw	r24, 0x02	; 2
    7b04:	53 01       	movw	r10, r6
    7b06:	a8 0e       	add	r10, r24
    7b08:	b9 1e       	adc	r11, r25
    7b0a:	c3 53       	subi	r28, 0x33	; 51
    7b0c:	df 4f       	sbci	r29, 0xFF	; 255
    7b0e:	b9 82       	std	Y+1, r11	; 0x01
    7b10:	a8 82       	st	Y, r10
    7b12:	cd 5c       	subi	r28, 0xCD	; 205
    7b14:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1134
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    7b16:	c9 54       	subi	r28, 0x49	; 73
    7b18:	df 4f       	sbci	r29, 0xFF	; 255
    7b1a:	18 82       	st	Y, r1
    7b1c:	c7 5b       	subi	r28, 0xB7	; 183
    7b1e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1133
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    7b20:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    7b22:	ce 54       	subi	r28, 0x4E	; 78
    7b24:	df 4f       	sbci	r29, 0xFF	; 255
    7b26:	88 81       	ld	r24, Y
    7b28:	c2 5b       	subi	r28, 0xB2	; 178
    7b2a:	d0 40       	sbci	r29, 0x00	; 0
    7b2c:	cf 54       	subi	r28, 0x4F	; 79
    7b2e:	df 4f       	sbci	r29, 0xFF	; 255
    7b30:	98 81       	ld	r25, Y
    7b32:	c1 5b       	subi	r28, 0xB1	; 177
    7b34:	d0 40       	sbci	r29, 0x00	; 0
    7b36:	89 17       	cp	r24, r25
    7b38:	08 f0       	brcs	.+2      	; 0x7b3c <draw_menu(bool)+0x137c>
    7b3a:	eb c0       	rjmp	.+470    	; 0x7d12 <draw_menu(bool)+0x1552>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7b3c:	f1 01       	movw	r30, r2
    7b3e:	a5 90       	lpm	r10, Z+
    7b40:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7b42:	f2 01       	movw	r30, r4
    7b44:	85 90       	lpm	r8, Z+
    7b46:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1142
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    7b48:	c3 54       	subi	r28, 0x43	; 67
    7b4a:	df 4f       	sbci	r29, 0xFF	; 255
    7b4c:	e8 81       	ld	r30, Y
    7b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    7b50:	cd 5b       	subi	r28, 0xBD	; 189
    7b52:	d0 40       	sbci	r29, 0x00	; 0
    7b54:	94 91       	lpm	r25, Z
    7b56:	99 23       	and	r25, r25
    7b58:	09 f4       	brne	.+2      	; 0x7b5c <draw_menu(bool)+0x139c>
    7b5a:	ab c0       	rjmp	.+342    	; 0x7cb2 <draw_menu(bool)+0x14f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7b5c:	cf 53       	subi	r28, 0x3F	; 63
    7b5e:	df 4f       	sbci	r29, 0xFF	; 255
    7b60:	28 81       	ld	r18, Y
    7b62:	39 81       	ldd	r19, Y+1	; 0x01
    7b64:	c1 5c       	subi	r28, 0xC1	; 193
    7b66:	d0 40       	sbci	r29, 0x00	; 0
    7b68:	82 0e       	add	r8, r18
    7b6a:	93 1e       	adc	r9, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1147
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    7b6c:	c3 54       	subi	r28, 0x43	; 67
    7b6e:	df 4f       	sbci	r29, 0xFF	; 255
    7b70:	e8 81       	ld	r30, Y
    7b72:	f9 81       	ldd	r31, Y+1	; 0x01
    7b74:	cd 5b       	subi	r28, 0xBD	; 189
    7b76:	d0 40       	sbci	r29, 0x00	; 0
    7b78:	94 91       	lpm	r25, Z
    7b7a:	91 30       	cpi	r25, 0x01	; 1
    7b7c:	09 f4       	brne	.+2      	; 0x7b80 <draw_menu(bool)+0x13c0>
    7b7e:	b1 c0       	rjmp	.+354    	; 0x7ce2 <draw_menu(bool)+0x1522>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7b80:	c1 54       	subi	r28, 0x41	; 65
    7b82:	df 4f       	sbci	r29, 0xFF	; 255
    7b84:	28 81       	ld	r18, Y
    7b86:	39 81       	ldd	r19, Y+1	; 0x01
    7b88:	cf 5b       	subi	r28, 0xBF	; 191
    7b8a:	d0 40       	sbci	r29, 0x00	; 0
    7b8c:	a2 0e       	add	r10, r18
    7b8e:	b3 1e       	adc	r11, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1152
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    7b90:	c3 54       	subi	r28, 0x43	; 67
    7b92:	df 4f       	sbci	r29, 0xFF	; 255
    7b94:	e8 81       	ld	r30, Y
    7b96:	f9 81       	ldd	r31, Y+1	; 0x01
    7b98:	cd 5b       	subi	r28, 0xBD	; 189
    7b9a:	d0 40       	sbci	r29, 0x00	; 0
    7b9c:	94 91       	lpm	r25, Z
    7b9e:	92 30       	cpi	r25, 0x02	; 2
    7ba0:	09 f0       	breq	.+2      	; 0x7ba4 <draw_menu(bool)+0x13e4>
    7ba2:	4a c0       	rjmp	.+148    	; 0x7c38 <draw_menu(bool)+0x1478>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1154
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7ba4:	f1 01       	movw	r30, r2
    7ba6:	a5 90       	lpm	r10, Z+
    7ba8:	b4 90       	lpm	r11, Z
    7baa:	cb 54       	subi	r28, 0x4B	; 75
    7bac:	df 4f       	sbci	r29, 0xFF	; 255
    7bae:	e8 81       	ld	r30, Y
    7bb0:	f9 81       	ldd	r31, Y+1	; 0x01
    7bb2:	c5 5b       	subi	r28, 0xB5	; 181
    7bb4:	d0 40       	sbci	r29, 0x00	; 0
    7bb6:	94 91       	lpm	r25, Z
    7bb8:	c1 54       	subi	r28, 0x41	; 65
    7bba:	df 4f       	sbci	r29, 0xFF	; 255
    7bbc:	28 81       	ld	r18, Y
    7bbe:	39 81       	ldd	r19, Y+1	; 0x01
    7bc0:	cf 5b       	subi	r28, 0xBF	; 191
    7bc2:	d0 40       	sbci	r29, 0x00	; 0
    7bc4:	a2 0e       	add	r10, r18
    7bc6:	b3 1e       	adc	r11, r19
    7bc8:	9f 9d       	mul	r25, r15
    7bca:	a0 0c       	add	r10, r0
    7bcc:	b1 1c       	adc	r11, r1
    7bce:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1155
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
    7bd0:	f2 01       	movw	r30, r4
    7bd2:	85 90       	lpm	r8, Z+
    7bd4:	94 90       	lpm	r9, Z
    7bd6:	cb 54       	subi	r28, 0x4B	; 75
    7bd8:	df 4f       	sbci	r29, 0xFF	; 255
    7bda:	e8 81       	ld	r30, Y
    7bdc:	f9 81       	ldd	r31, Y+1	; 0x01
    7bde:	c5 5b       	subi	r28, 0xB5	; 181
    7be0:	d0 40       	sbci	r29, 0x00	; 0
    7be2:	94 91       	lpm	r25, Z
    7be4:	cf 53       	subi	r28, 0x3F	; 63
    7be6:	df 4f       	sbci	r29, 0xFF	; 255
    7be8:	28 81       	ld	r18, Y
    7bea:	39 81       	ldd	r19, Y+1	; 0x01
    7bec:	c1 5c       	subi	r28, 0xC1	; 193
    7bee:	d0 40       	sbci	r29, 0x00	; 0
    7bf0:	82 0e       	add	r8, r18
    7bf2:	93 1e       	adc	r9, r19
    7bf4:	c9 54       	subi	r28, 0x49	; 73
    7bf6:	df 4f       	sbci	r29, 0xFF	; 255
    7bf8:	38 81       	ld	r19, Y
    7bfa:	c7 5b       	subi	r28, 0xB7	; 183
    7bfc:	d0 40       	sbci	r29, 0x00	; 0
    7bfe:	93 9f       	mul	r25, r19
    7c00:	80 0c       	add	r8, r0
    7c02:	91 1c       	adc	r9, r1
    7c04:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1156
          loop_t++;
    7c06:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1157
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
    7c08:	cb 53       	subi	r28, 0x3B	; 59
    7c0a:	df 4f       	sbci	r29, 0xFF	; 255
    7c0c:	e8 81       	ld	r30, Y
    7c0e:	f9 81       	ldd	r31, Y+1	; 0x01
    7c10:	c5 5c       	subi	r28, 0xC5	; 197
    7c12:	d0 40       	sbci	r29, 0x00	; 0
    7c14:	25 91       	lpm	r18, Z+
    7c16:	34 91       	lpm	r19, Z
    7c18:	f2 16       	cp	r15, r18
    7c1a:	13 06       	cpc	r1, r19
    7c1c:	69 f0       	breq	.+26     	; 0x7c38 <draw_menu(bool)+0x1478>
    7c1e:	60 f0       	brcs	.+24     	; 0x7c38 <draw_menu(bool)+0x1478>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1160
          {
            loop_t = 0;
            loop_r++;
    7c20:	c9 54       	subi	r28, 0x49	; 73
    7c22:	df 4f       	sbci	r29, 0xFF	; 255
    7c24:	48 81       	ld	r20, Y
    7c26:	c7 5b       	subi	r28, 0xB7	; 183
    7c28:	d0 40       	sbci	r29, 0x00	; 0
    7c2a:	4f 5f       	subi	r20, 0xFF	; 255
    7c2c:	c9 54       	subi	r28, 0x49	; 73
    7c2e:	df 4f       	sbci	r29, 0xFF	; 255
    7c30:	48 83       	st	Y, r20
    7c32:	c7 5b       	subi	r28, 0xB7	; 183
    7c34:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1159
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
          loop_t++;
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
          {
            loop_t = 0;
    7c36:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1163
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
    7c38:	cd 52       	subi	r28, 0x2D	; 45
    7c3a:	df 4f       	sbci	r29, 0xFF	; 255
    7c3c:	e8 81       	ld	r30, Y
    7c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    7c40:	c3 5d       	subi	r28, 0xD3	; 211
    7c42:	d0 40       	sbci	r29, 0x00	; 0
    7c44:	65 91       	lpm	r22, Z+
    7c46:	74 91       	lpm	r23, Z
    7c48:	9e 01       	movw	r18, r28
    7c4a:	2f 57       	subi	r18, 0x7F	; 127
    7c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c4e:	ae 01       	movw	r20, r28
    7c50:	4f 5f       	subi	r20, 0xFF	; 255
    7c52:	5f 4f       	sbci	r21, 0xFF	; 255
    7c54:	cf 52       	subi	r28, 0x2F	; 47
    7c56:	df 4f       	sbci	r29, 0xFF	; 255
    7c58:	e8 81       	ld	r30, Y
    7c5a:	f9 81       	ldd	r31, Y+1	; 0x01
    7c5c:	c1 5d       	subi	r28, 0xD1	; 209
    7c5e:	d0 40       	sbci	r29, 0x00	; 0
    7c60:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    7c62:	c8 53       	subi	r28, 0x38	; 56
    7c64:	df 4f       	sbci	r29, 0xFF	; 255
    7c66:	e8 81       	ld	r30, Y
    7c68:	f9 81       	ldd	r31, Y+1	; 0x01
    7c6a:	c8 5c       	subi	r28, 0xC8	; 200
    7c6c:	d0 40       	sbci	r29, 0x00	; 0
    7c6e:	04 91       	lpm	r16, Z
    7c70:	c6 53       	subi	r28, 0x36	; 54
    7c72:	df 4f       	sbci	r29, 0xFF	; 255
    7c74:	e8 81       	ld	r30, Y
    7c76:	f9 81       	ldd	r31, Y+1	; 0x01
    7c78:	ca 5c       	subi	r28, 0xCA	; 202
    7c7a:	d0 40       	sbci	r29, 0x00	; 0
    7c7c:	25 91       	lpm	r18, Z+
    7c7e:	34 91       	lpm	r19, Z
    7c80:	c3 53       	subi	r28, 0x33	; 51
    7c82:	df 4f       	sbci	r29, 0xFF	; 255
    7c84:	e8 81       	ld	r30, Y
    7c86:	f9 81       	ldd	r31, Y+1	; 0x01
    7c88:	cd 5c       	subi	r28, 0xCD	; 205
    7c8a:	d0 40       	sbci	r29, 0x00	; 0
    7c8c:	45 91       	lpm	r20, Z+
    7c8e:	54 91       	lpm	r21, Z
    7c90:	e9 80       	ldd	r14, Y+1	; 0x01
    7c92:	b4 01       	movw	r22, r8
    7c94:	c5 01       	movw	r24, r10
    7c96:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1166
        loop_i++;
    7c9a:	ce 54       	subi	r28, 0x4E	; 78
    7c9c:	df 4f       	sbci	r29, 0xFF	; 255
    7c9e:	88 81       	ld	r24, Y
    7ca0:	c2 5b       	subi	r28, 0xB2	; 178
    7ca2:	d0 40       	sbci	r29, 0x00	; 0
    7ca4:	8f 5f       	subi	r24, 0xFF	; 255
    7ca6:	ce 54       	subi	r28, 0x4E	; 78
    7ca8:	df 4f       	sbci	r29, 0xFF	; 255
    7caa:	88 83       	st	Y, r24
    7cac:	c2 5b       	subi	r28, 0xB2	; 178
    7cae:	d0 40       	sbci	r29, 0x00	; 0
    7cb0:	38 cf       	rjmp	.-400    	; 0x7b22 <draw_menu(bool)+0x1362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1144
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7cb2:	f2 01       	movw	r30, r4
    7cb4:	85 90       	lpm	r8, Z+
    7cb6:	94 90       	lpm	r9, Z
    7cb8:	cb 54       	subi	r28, 0x4B	; 75
    7cba:	df 4f       	sbci	r29, 0xFF	; 255
    7cbc:	e8 81       	ld	r30, Y
    7cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    7cc0:	c5 5b       	subi	r28, 0xB5	; 181
    7cc2:	d0 40       	sbci	r29, 0x00	; 0
    7cc4:	94 91       	lpm	r25, Z
    7cc6:	cf 53       	subi	r28, 0x3F	; 63
    7cc8:	df 4f       	sbci	r29, 0xFF	; 255
    7cca:	28 81       	ld	r18, Y
    7ccc:	39 81       	ldd	r19, Y+1	; 0x01
    7cce:	c1 5c       	subi	r28, 0xC1	; 193
    7cd0:	d0 40       	sbci	r29, 0x00	; 0
    7cd2:	82 0e       	add	r8, r18
    7cd4:	93 1e       	adc	r9, r19
    7cd6:	9f 9d       	mul	r25, r15
    7cd8:	80 0c       	add	r8, r0
    7cda:	91 1c       	adc	r9, r1
    7cdc:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1145
          loop_t++;
    7cde:	f3 94       	inc	r15
    7ce0:	45 cf       	rjmp	.-374    	; 0x7b6c <draw_menu(bool)+0x13ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7ce2:	f1 01       	movw	r30, r2
    7ce4:	a5 90       	lpm	r10, Z+
    7ce6:	b4 90       	lpm	r11, Z
    7ce8:	cb 54       	subi	r28, 0x4B	; 75
    7cea:	df 4f       	sbci	r29, 0xFF	; 255
    7cec:	e8 81       	ld	r30, Y
    7cee:	f9 81       	ldd	r31, Y+1	; 0x01
    7cf0:	c5 5b       	subi	r28, 0xB5	; 181
    7cf2:	d0 40       	sbci	r29, 0x00	; 0
    7cf4:	94 91       	lpm	r25, Z
    7cf6:	c1 54       	subi	r28, 0x41	; 65
    7cf8:	df 4f       	sbci	r29, 0xFF	; 255
    7cfa:	28 81       	ld	r18, Y
    7cfc:	39 81       	ldd	r19, Y+1	; 0x01
    7cfe:	cf 5b       	subi	r28, 0xBF	; 191
    7d00:	d0 40       	sbci	r29, 0x00	; 0
    7d02:	a2 0e       	add	r10, r18
    7d04:	b3 1e       	adc	r11, r19
    7d06:	9f 9d       	mul	r25, r15
    7d08:	a0 0c       	add	r10, r0
    7d0a:	b1 1c       	adc	r11, r1
    7d0c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1150
          loop_t++;
    7d0e:	f3 94       	inc	r15
    7d10:	3f cf       	rjmp	.-386    	; 0x7b90 <draw_menu(bool)+0x13d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1169
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    7d12:	c7 54       	subi	r28, 0x47	; 71
    7d14:	df 4f       	sbci	r29, 0xFF	; 255
    7d16:	a8 80       	ld	r10, Y
    7d18:	b9 80       	ldd	r11, Y+1	; 0x01
    7d1a:	c9 5b       	subi	r28, 0xB9	; 185
    7d1c:	d0 40       	sbci	r29, 0x00	; 0
    7d1e:	ab 28       	or	r10, r11
    7d20:	09 f4       	brne	.+2      	; 0x7d24 <draw_menu(bool)+0x1564>
    7d22:	46 c1       	rjmp	.+652    	; 0x7fb0 <draw_menu(bool)+0x17f0>
    7d24:	c5 54       	subi	r28, 0x45	; 69
    7d26:	df 4f       	sbci	r29, 0xFF	; 255
    7d28:	28 81       	ld	r18, Y
    7d2a:	39 81       	ldd	r19, Y+1	; 0x01
    7d2c:	cb 5b       	subi	r28, 0xBB	; 187
    7d2e:	d0 40       	sbci	r29, 0x00	; 0
    7d30:	23 2b       	or	r18, r19
    7d32:	09 f4       	brne	.+2      	; 0x7d36 <draw_menu(bool)+0x1576>
    7d34:	3d c1       	rjmp	.+634    	; 0x7fb0 <draw_menu(bool)+0x17f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1171
    {
      loop_i = 0;
    7d36:	ce 54       	subi	r28, 0x4E	; 78
    7d38:	df 4f       	sbci	r29, 0xFF	; 255
    7d3a:	18 82       	st	Y, r1
    7d3c:	c2 5b       	subi	r28, 0xB2	; 178
    7d3e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    7d40:	f6 01       	movw	r30, r12
    7d42:	e1 55       	subi	r30, 0x51	; 81
    7d44:	fe 4f       	sbci	r31, 0xFE	; 254
    7d46:	e6 0d       	add	r30, r6
    7d48:	f7 1d       	adc	r31, r7
    7d4a:	25 91       	lpm	r18, Z+
    7d4c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1175
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
    7d4e:	46 01       	movw	r8, r12
    7d50:	46 e5       	ldi	r20, 0x56	; 86
    7d52:	84 1a       	sub	r8, r20
    7d54:	4e ef       	ldi	r20, 0xFE	; 254
    7d56:	94 0a       	sbc	r9, r20
    7d58:	86 0c       	add	r8, r6
    7d5a:	97 1c       	adc	r9, r7
    7d5c:	f4 01       	movw	r30, r8
    7d5e:	85 91       	lpm	r24, Z+
    7d60:	94 91       	lpm	r25, Z
    7d62:	cd 53       	subi	r28, 0x3D	; 61
    7d64:	df 4f       	sbci	r29, 0xFF	; 255
    7d66:	68 81       	ld	r22, Y
    7d68:	79 81       	ldd	r23, Y+1	; 0x01
    7d6a:	c3 5c       	subi	r28, 0xC3	; 195
    7d6c:	d0 40       	sbci	r29, 0x00	; 0
    7d6e:	f9 01       	movw	r30, r18
    7d70:	19 95       	eicall
    7d72:	cf 54       	subi	r28, 0x4F	; 79
    7d74:	df 4f       	sbci	r29, 0xFF	; 255
    7d76:	88 83       	st	Y, r24
    7d78:	c1 5b       	subi	r28, 0xB1	; 177
    7d7a:	d0 40       	sbci	r29, 0x00	; 0
    7d7c:	ce 54       	subi	r28, 0x4E	; 78
    7d7e:	df 4f       	sbci	r29, 0xFF	; 255
    7d80:	68 81       	ld	r22, Y
    7d82:	c2 5b       	subi	r28, 0xB2	; 178
    7d84:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7d86:	76 01       	movw	r14, r12
    7d88:	f3 e6       	ldi	r31, 0x63	; 99
    7d8a:	ef 1a       	sub	r14, r31
    7d8c:	fe ef       	ldi	r31, 0xFE	; 254
    7d8e:	ff 0a       	sbc	r15, r31
    7d90:	e6 0c       	add	r14, r6
    7d92:	f7 1c       	adc	r15, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1179
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7d94:	16 01       	movw	r2, r12
    7d96:	21 e6       	ldi	r18, 0x61	; 97
    7d98:	22 1a       	sub	r2, r18
    7d9a:	2e ef       	ldi	r18, 0xFE	; 254
    7d9c:	32 0a       	sbc	r3, r18
    7d9e:	26 0c       	add	r2, r6
    7da0:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    7da2:	26 01       	movw	r4, r12
    7da4:	39 e5       	ldi	r19, 0x59	; 89
    7da6:	43 1a       	sub	r4, r19
    7da8:	3e ef       	ldi	r19, 0xFE	; 254
    7daa:	53 0a       	sbc	r5, r19
    7dac:	46 0c       	add	r4, r6
    7dae:	57 1c       	adc	r5, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1182
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7db0:	d6 01       	movw	r26, r12
    7db2:	aa 55       	subi	r26, 0x5A	; 90
    7db4:	be 4f       	sbci	r27, 0xFE	; 254
    7db6:	a6 0d       	add	r26, r6
    7db8:	b7 1d       	adc	r27, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
          loop_t++;
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
    7dba:	96 01       	movw	r18, r12
    7dbc:	28 55       	subi	r18, 0x58	; 88
    7dbe:	3e 4f       	sbci	r19, 0xFE	; 254
    7dc0:	a3 01       	movw	r20, r6
    7dc2:	42 0f       	add	r20, r18
    7dc4:	53 1f       	adc	r21, r19
    7dc6:	cb 54       	subi	r28, 0x4B	; 75
    7dc8:	df 4f       	sbci	r29, 0xFF	; 255
    7dca:	59 83       	std	Y+1, r21	; 0x01
    7dcc:	48 83       	st	Y, r20
    7dce:	c5 5b       	subi	r28, 0xB5	; 181
    7dd0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1201
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    7dd2:	25 50       	subi	r18, 0x05	; 5
    7dd4:	31 09       	sbc	r19, r1
    7dd6:	53 01       	movw	r10, r6
    7dd8:	a2 0e       	add	r10, r18
    7dda:	b3 1e       	adc	r11, r19
    7ddc:	c9 54       	subi	r28, 0x49	; 73
    7dde:	df 4f       	sbci	r29, 0xFF	; 255
    7de0:	b9 82       	std	Y+1, r11	; 0x01
    7de2:	a8 82       	st	Y, r10
    7de4:	c7 5b       	subi	r28, 0xB7	; 183
    7de6:	d0 40       	sbci	r29, 0x00	; 0
    7de8:	22 50       	subi	r18, 0x02	; 2
    7dea:	31 09       	sbc	r19, r1
    7dec:	a3 01       	movw	r20, r6
    7dee:	42 0f       	add	r20, r18
    7df0:	53 1f       	adc	r21, r19
    7df2:	c3 54       	subi	r28, 0x43	; 67
    7df4:	df 4f       	sbci	r29, 0xFF	; 255
    7df6:	59 83       	std	Y+1, r21	; 0x01
    7df8:	48 83       	st	Y, r20
    7dfa:	cd 5b       	subi	r28, 0xBD	; 189
    7dfc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1173
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    7dfe:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1172
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    7e00:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1176
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
    7e02:	68 17       	cp	r22, r24
    7e04:	08 f0       	brcs	.+2      	; 0x7e08 <draw_menu(bool)+0x1648>
    7e06:	d4 c0       	rjmp	.+424    	; 0x7fb0 <draw_menu(bool)+0x17f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7e08:	f7 01       	movw	r30, r14
    7e0a:	45 91       	lpm	r20, Z+
    7e0c:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1179
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7e0e:	f1 01       	movw	r30, r2
    7e10:	25 91       	lpm	r18, Z+
    7e12:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    7e14:	f2 01       	movw	r30, r4
    7e16:	04 91       	lpm	r16, Z
    7e18:	00 23       	and	r16, r16
    7e1a:	09 f4       	brne	.+2      	; 0x7e1e <draw_menu(bool)+0x165e>
    7e1c:	8b c0       	rjmp	.+278    	; 0x7f34 <draw_menu(bool)+0x1774>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1179
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    7e1e:	cf 53       	subi	r28, 0x3F	; 63
    7e20:	df 4f       	sbci	r29, 0xFF	; 255
    7e22:	a8 80       	ld	r10, Y
    7e24:	b9 80       	ldd	r11, Y+1	; 0x01
    7e26:	c1 5c       	subi	r28, 0xC1	; 193
    7e28:	d0 40       	sbci	r29, 0x00	; 0
    7e2a:	2a 0d       	add	r18, r10
    7e2c:	3b 1d       	adc	r19, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1185
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    7e2e:	f2 01       	movw	r30, r4
    7e30:	04 91       	lpm	r16, Z
    7e32:	01 30       	cpi	r16, 0x01	; 1
    7e34:	09 f4       	brne	.+2      	; 0x7e38 <draw_menu(bool)+0x1678>
    7e36:	91 c0       	rjmp	.+290    	; 0x7f5a <draw_menu(bool)+0x179a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    7e38:	c1 54       	subi	r28, 0x41	; 65
    7e3a:	df 4f       	sbci	r29, 0xFF	; 255
    7e3c:	a8 80       	ld	r10, Y
    7e3e:	b9 80       	ldd	r11, Y+1	; 0x01
    7e40:	cf 5b       	subi	r28, 0xBF	; 191
    7e42:	d0 40       	sbci	r29, 0x00	; 0
    7e44:	4a 0d       	add	r20, r10
    7e46:	5b 1d       	adc	r21, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    7e48:	f2 01       	movw	r30, r4
    7e4a:	04 91       	lpm	r16, Z
    7e4c:	02 30       	cpi	r16, 0x02	; 2
    7e4e:	09 f0       	breq	.+2      	; 0x7e52 <draw_menu(bool)+0x1692>
    7e50:	31 c0       	rjmp	.+98     	; 0x7eb4 <draw_menu(bool)+0x16f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1192
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7e52:	f7 01       	movw	r30, r14
    7e54:	45 91       	lpm	r20, Z+
    7e56:	54 91       	lpm	r21, Z
    7e58:	fd 01       	movw	r30, r26
    7e5a:	24 91       	lpm	r18, Z
    7e5c:	c1 54       	subi	r28, 0x41	; 65
    7e5e:	df 4f       	sbci	r29, 0xFF	; 255
    7e60:	a8 80       	ld	r10, Y
    7e62:	b9 80       	ldd	r11, Y+1	; 0x01
    7e64:	cf 5b       	subi	r28, 0xBF	; 191
    7e66:	d0 40       	sbci	r29, 0x00	; 0
    7e68:	4a 0d       	add	r20, r10
    7e6a:	5b 1d       	adc	r21, r11
    7e6c:	29 9f       	mul	r18, r25
    7e6e:	40 0d       	add	r20, r0
    7e70:	51 1d       	adc	r21, r1
    7e72:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
    7e74:	f1 01       	movw	r30, r2
    7e76:	25 91       	lpm	r18, Z+
    7e78:	34 91       	lpm	r19, Z
    7e7a:	fd 01       	movw	r30, r26
    7e7c:	04 91       	lpm	r16, Z
    7e7e:	cf 53       	subi	r28, 0x3F	; 63
    7e80:	df 4f       	sbci	r29, 0xFF	; 255
    7e82:	a8 80       	ld	r10, Y
    7e84:	b9 80       	ldd	r11, Y+1	; 0x01
    7e86:	c1 5c       	subi	r28, 0xC1	; 193
    7e88:	d0 40       	sbci	r29, 0x00	; 0
    7e8a:	2a 0d       	add	r18, r10
    7e8c:	3b 1d       	adc	r19, r11
    7e8e:	07 9f       	mul	r16, r23
    7e90:	20 0d       	add	r18, r0
    7e92:	31 1d       	adc	r19, r1
    7e94:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
          loop_t++;
    7e96:	9f 5f       	subi	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
    7e98:	cb 54       	subi	r28, 0x4B	; 75
    7e9a:	df 4f       	sbci	r29, 0xFF	; 255
    7e9c:	e8 81       	ld	r30, Y
    7e9e:	f9 81       	ldd	r31, Y+1	; 0x01
    7ea0:	c5 5b       	subi	r28, 0xB5	; 181
    7ea2:	d0 40       	sbci	r29, 0x00	; 0
    7ea4:	a5 90       	lpm	r10, Z+
    7ea6:	b4 90       	lpm	r11, Z
    7ea8:	9a 15       	cp	r25, r10
    7eaa:	1b 04       	cpc	r1, r11
    7eac:	19 f0       	breq	.+6      	; 0x7eb4 <draw_menu(bool)+0x16f4>
    7eae:	10 f0       	brcs	.+4      	; 0x7eb4 <draw_menu(bool)+0x16f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
          {
            loop_t = 0;
            loop_r++;
    7eb0:	7f 5f       	subi	r23, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1197
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_r);
          loop_t++;
          if (loop_t > pgm_read_word(&dyn_symbol_1->max_button_count))
          {
            loop_t = 0;
    7eb2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1201
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    7eb4:	c9 54       	subi	r28, 0x49	; 73
    7eb6:	df 4f       	sbci	r29, 0xFF	; 255
    7eb8:	e8 81       	ld	r30, Y
    7eba:	f9 81       	ldd	r31, Y+1	; 0x01
    7ebc:	c7 5b       	subi	r28, 0xB7	; 183
    7ebe:	d0 40       	sbci	r29, 0x00	; 0
    7ec0:	a5 90       	lpm	r10, Z+
    7ec2:	b4 90       	lpm	r11, Z
    7ec4:	c8 53       	subi	r28, 0x38	; 56
    7ec6:	df 4f       	sbci	r29, 0xFF	; 255
    7ec8:	b9 82       	std	Y+1, r11	; 0x01
    7eca:	a8 82       	st	Y, r10
    7ecc:	c8 5c       	subi	r28, 0xC8	; 200
    7ece:	d0 40       	sbci	r29, 0x00	; 0
    7ed0:	c3 54       	subi	r28, 0x43	; 67
    7ed2:	df 4f       	sbci	r29, 0xFF	; 255
    7ed4:	e8 81       	ld	r30, Y
    7ed6:	f9 81       	ldd	r31, Y+1	; 0x01
    7ed8:	cd 5b       	subi	r28, 0xBD	; 189
    7eda:	d0 40       	sbci	r29, 0x00	; 0
    7edc:	a5 90       	lpm	r10, Z+
    7ede:	b4 90       	lpm	r11, Z
    7ee0:	cb 53       	subi	r28, 0x3B	; 59
    7ee2:	df 4f       	sbci	r29, 0xFF	; 255
    7ee4:	b9 82       	std	Y+1, r11	; 0x01
    7ee6:	a8 82       	st	Y, r10
    7ee8:	c5 5c       	subi	r28, 0xC5	; 197
    7eea:	d0 40       	sbci	r29, 0x00	; 0
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7eec:	c7 54       	subi	r28, 0x47	; 71
    7eee:	df 4f       	sbci	r29, 0xFF	; 255
    7ef0:	e8 81       	ld	r30, Y
    7ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    7ef4:	c9 5b       	subi	r28, 0xB9	; 185
    7ef6:	d0 40       	sbci	r29, 0x00	; 0
    7ef8:	4e 17       	cp	r20, r30
    7efa:	5f 07       	cpc	r21, r31
    7efc:	cc f4       	brge	.+50     	; 0x7f30 <draw_menu(bool)+0x1770>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7efe:	4a 0d       	add	r20, r10
    7f00:	5b 1d       	adc	r21, r11
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7f02:	e4 17       	cp	r30, r20
    7f04:	f5 07       	cpc	r31, r21
    7f06:	a4 f4       	brge	.+40     	; 0x7f30 <draw_menu(bool)+0x1770>
    7f08:	c5 54       	subi	r28, 0x45	; 69
    7f0a:	df 4f       	sbci	r29, 0xFF	; 255
    7f0c:	a8 80       	ld	r10, Y
    7f0e:	b9 80       	ldd	r11, Y+1	; 0x01
    7f10:	cb 5b       	subi	r28, 0xBB	; 187
    7f12:	d0 40       	sbci	r29, 0x00	; 0
    7f14:	2a 15       	cp	r18, r10
    7f16:	3b 05       	cpc	r19, r11
    7f18:	5c f4       	brge	.+22     	; 0x7f30 <draw_menu(bool)+0x1770>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    7f1a:	c8 53       	subi	r28, 0x38	; 56
    7f1c:	df 4f       	sbci	r29, 0xFF	; 255
    7f1e:	48 81       	ld	r20, Y
    7f20:	59 81       	ldd	r21, Y+1	; 0x01
    7f22:	c8 5c       	subi	r28, 0xC8	; 200
    7f24:	d0 40       	sbci	r29, 0x00	; 0
    7f26:	24 0f       	add	r18, r20
    7f28:	35 1f       	adc	r19, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    7f2a:	a2 16       	cp	r10, r18
    7f2c:	b3 06       	cpc	r11, r19
    7f2e:	44 f1       	brlt	.+80     	; 0x7f80 <draw_menu(bool)+0x17c0>
    7f30:	6f 5f       	subi	r22, 0xFF	; 255
    7f32:	67 cf       	rjmp	.-306    	; 0x7e02 <draw_menu(bool)+0x1642>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1182
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7f34:	f1 01       	movw	r30, r2
    7f36:	25 91       	lpm	r18, Z+
    7f38:	34 91       	lpm	r19, Z
    7f3a:	fd 01       	movw	r30, r26
    7f3c:	04 91       	lpm	r16, Z
    7f3e:	cf 53       	subi	r28, 0x3F	; 63
    7f40:	df 4f       	sbci	r29, 0xFF	; 255
    7f42:	a8 80       	ld	r10, Y
    7f44:	b9 80       	ldd	r11, Y+1	; 0x01
    7f46:	c1 5c       	subi	r28, 0xC1	; 193
    7f48:	d0 40       	sbci	r29, 0x00	; 0
    7f4a:	2a 0d       	add	r18, r10
    7f4c:	3b 1d       	adc	r19, r11
    7f4e:	09 9f       	mul	r16, r25
    7f50:	20 0d       	add	r18, r0
    7f52:	31 1d       	adc	r19, r1
    7f54:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1183
          loop_t++;
    7f56:	9f 5f       	subi	r25, 0xFF	; 255
    7f58:	6a cf       	rjmp	.-300    	; 0x7e2e <draw_menu(bool)+0x166e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_xy) * loop_t);
    7f5a:	f7 01       	movw	r30, r14
    7f5c:	45 91       	lpm	r20, Z+
    7f5e:	54 91       	lpm	r21, Z
    7f60:	fd 01       	movw	r30, r26
    7f62:	04 91       	lpm	r16, Z
    7f64:	c1 54       	subi	r28, 0x41	; 65
    7f66:	df 4f       	sbci	r29, 0xFF	; 255
    7f68:	a8 80       	ld	r10, Y
    7f6a:	b9 80       	ldd	r11, Y+1	; 0x01
    7f6c:	cf 5b       	subi	r28, 0xBF	; 191
    7f6e:	d0 40       	sbci	r29, 0x00	; 0
    7f70:	4a 0d       	add	r20, r10
    7f72:	5b 1d       	adc	r21, r11
    7f74:	09 9f       	mul	r16, r25
    7f76:	40 0d       	add	r20, r0
    7f78:	51 1d       	adc	r21, r1
    7f7a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1188
          loop_t++;
    7f7c:	9f 5f       	subi	r25, 0xFF	; 255
    7f7e:	64 cf       	rjmp	.-312    	; 0x7e48 <draw_menu(bool)+0x1688>
    7f80:	ce 54       	subi	r28, 0x4E	; 78
    7f82:	df 4f       	sbci	r29, 0xFF	; 255
    7f84:	68 83       	st	Y, r22
    7f86:	c2 5b       	subi	r28, 0xB2	; 178
    7f88:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    7f8a:	f6 01       	movw	r30, r12
    7f8c:	e3 55       	subi	r30, 0x53	; 83
    7f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    7f90:	e6 0d       	add	r30, r6
    7f92:	f7 1d       	adc	r31, r7
    7f94:	25 91       	lpm	r18, Z+
    7f96:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1204
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), loop_i);
    7f98:	f4 01       	movw	r30, r8
    7f9a:	84 91       	lpm	r24, Z
    7f9c:	70 e0       	ldi	r23, 0x00	; 0
    7f9e:	90 e0       	ldi	r25, 0x00	; 0
    7fa0:	f9 01       	movw	r30, r18
    7fa2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1205
          ret = true;
    7fa4:	f1 e0       	ldi	r31, 0x01	; 1
    7fa6:	c9 53       	subi	r28, 0x39	; 57
    7fa8:	df 4f       	sbci	r29, 0xFF	; 255
    7faa:	f8 83       	st	Y, r31
    7fac:	c7 5c       	subi	r28, 0xC7	; 199
    7fae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1126
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    7fb0:	1f 5f       	subi	r17, 0xFF	; 255
    7fb2:	1a cd       	rjmp	.-1484   	; 0x79e8 <draw_menu(bool)+0x1228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    7fb4:	c9 53       	subi	r28, 0x39	; 57
    7fb6:	df 4f       	sbci	r29, 0xFF	; 255
    7fb8:	a8 80       	ld	r10, Y
    7fba:	c7 5c       	subi	r28, 0xC7	; 199
    7fbc:	d0 40       	sbci	r29, 0x00	; 0
    7fbe:	a1 10       	cpse	r10, r1
    7fc0:	da c2       	rjmp	.+1460   	; 0x8576 <draw_menu(bool)+0x1db6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    7fc2:	91 2c       	mov	r9, r1
    7fc4:	93 01       	movw	r18, r6
    7fc6:	2a 51       	subi	r18, 0x1A	; 26
    7fc8:	3e 4f       	sbci	r19, 0xFE	; 254
    7fca:	cf 52       	subi	r28, 0x2F	; 47
    7fcc:	df 4f       	sbci	r29, 0xFF	; 255
    7fce:	39 83       	std	Y+1, r19	; 0x01
    7fd0:	28 83       	st	Y, r18
    7fd2:	c1 5d       	subi	r28, 0xD1	; 209
    7fd4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1236
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
    7fd6:	a3 01       	movw	r20, r6
    7fd8:	4b 50       	subi	r20, 0x0B	; 11
    7fda:	5e 4f       	sbci	r21, 0xFE	; 254
    7fdc:	cb 52       	subi	r28, 0x2B	; 43
    7fde:	df 4f       	sbci	r29, 0xFF	; 255
    7fe0:	59 83       	std	Y+1, r21	; 0x01
    7fe2:	48 83       	st	Y, r20
    7fe4:	c5 5d       	subi	r28, 0xD5	; 213
    7fe6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    7fe8:	cf 52       	subi	r28, 0x2F	; 47
    7fea:	df 4f       	sbci	r29, 0xFF	; 255
    7fec:	e8 81       	ld	r30, Y
    7fee:	f9 81       	ldd	r31, Y+1	; 0x01
    7ff0:	c1 5d       	subi	r28, 0xD1	; 209
    7ff2:	d0 40       	sbci	r29, 0x00	; 0
    7ff4:	84 91       	lpm	r24, Z
    7ff6:	98 16       	cp	r9, r24
    7ff8:	08 f0       	brcs	.+2      	; 0x7ffc <draw_menu(bool)+0x183c>
    7ffa:	c3 c2       	rjmp	.+1414   	; 0x8582 <draw_menu(bool)+0x1dc2>
    7ffc:	f7 e1       	ldi	r31, 0x17	; 23
    7ffe:	9f 9e       	mul	r9, r31
    8000:	20 01       	movw	r4, r0
    8002:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1217
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    8004:	f2 01       	movw	r30, r4
    8006:	e0 58       	subi	r30, 0x80	; 128
    8008:	fe 4f       	sbci	r31, 0xFE	; 254
    800a:	e6 0d       	add	r30, r6
    800c:	f7 1d       	adc	r31, r7
    800e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
    if (enable_redraw(rdr, redraw_class) == true)
    8010:	c4 53       	subi	r28, 0x34	; 52
    8012:	df 4f       	sbci	r29, 0xFF	; 255
    8014:	68 81       	ld	r22, Y
    8016:	cc 5c       	subi	r28, 0xCC	; 204
    8018:	d0 40       	sbci	r29, 0x00	; 0
    801a:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <enable_redraw(unsigned char, unsigned char)>
    801e:	88 23       	and	r24, r24
    8020:	09 f4       	brne	.+2      	; 0x8024 <draw_menu(bool)+0x1864>
    8022:	5e c1       	rjmp	.+700    	; 0x82e0 <draw_menu(bool)+0x1b20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
    {
      loop_i = 0;
    8024:	ce 54       	subi	r28, 0x4E	; 78
    8026:	df 4f       	sbci	r29, 0xFF	; 255
    8028:	18 82       	st	Y, r1
    802a:	c2 5b       	subi	r28, 0xB2	; 178
    802c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1222
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    802e:	f2 01       	movw	r30, r4
    8030:	e4 58       	subi	r30, 0x84	; 132
    8032:	fe 4f       	sbci	r31, 0xFE	; 254
    8034:	e6 0d       	add	r30, r6
    8036:	f7 1d       	adc	r31, r7
    8038:	25 91       	lpm	r18, Z+
    803a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1223
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
    803c:	f2 01       	movw	r30, r4
    803e:	e9 58       	subi	r30, 0x89	; 137
    8040:	fe 4f       	sbci	r31, 0xFE	; 254
    8042:	e6 0d       	add	r30, r6
    8044:	f7 1d       	adc	r31, r7
    8046:	85 91       	lpm	r24, Z+
    8048:	94 91       	lpm	r25, Z
    804a:	cd 53       	subi	r28, 0x3D	; 61
    804c:	df 4f       	sbci	r29, 0xFF	; 255
    804e:	68 81       	ld	r22, Y
    8050:	79 81       	ldd	r23, Y+1	; 0x01
    8052:	c3 5c       	subi	r28, 0xC3	; 195
    8054:	d0 40       	sbci	r29, 0x00	; 0
    8056:	f9 01       	movw	r30, r18
    8058:	19 95       	eicall
    805a:	cf 54       	subi	r28, 0x4F	; 79
    805c:	df 4f       	sbci	r29, 0xFF	; 255
    805e:	88 83       	st	Y, r24
    8060:	c1 5b       	subi	r28, 0xB1	; 177
    8062:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1224
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    8064:	f2 01       	movw	r30, r4
    8066:	e8 58       	subi	r30, 0x88	; 136
    8068:	fe 4f       	sbci	r31, 0xFE	; 254
    806a:	e6 0d       	add	r30, r6
    806c:	f7 1d       	adc	r31, r7
    806e:	a5 90       	lpm	r10, Z+
    8070:	b4 90       	lpm	r11, Z
    8072:	cd 52       	subi	r28, 0x2D	; 45
    8074:	df 4f       	sbci	r29, 0xFF	; 255
    8076:	b9 82       	std	Y+1, r11	; 0x01
    8078:	a8 82       	st	Y, r10
    807a:	c3 5d       	subi	r28, 0xD3	; 211
    807c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1226
      //rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
    807e:	f2 01       	movw	r30, r4
    8080:	eb 58       	subi	r30, 0x8B	; 139
    8082:	fe 4f       	sbci	r31, 0xFE	; 254
    8084:	e6 0d       	add	r30, r6
    8086:	f7 1d       	adc	r31, r7
    8088:	25 91       	lpm	r18, Z+
    808a:	34 91       	lpm	r19, Z
    808c:	f2 01       	movw	r30, r4
    808e:	ea 58       	subi	r30, 0x8A	; 138
    8090:	fe 4f       	sbci	r31, 0xFE	; 254
    8092:	e6 0d       	add	r30, r6
    8094:	f7 1d       	adc	r31, r7
    8096:	45 91       	lpm	r20, Z+
    8098:	54 91       	lpm	r21, Z
    809a:	be 01       	movw	r22, r28
    809c:	6f 54       	subi	r22, 0x4F	; 79
    809e:	7f 4f       	sbci	r23, 0xFF	; 255
    80a0:	ce 01       	movw	r24, r28
    80a2:	8e 54       	subi	r24, 0x4E	; 78
    80a4:	9f 4f       	sbci	r25, 0xFF	; 255
    80a6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
      while (loop_i < loop_cnt)
      {
        //active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    80aa:	c2 01       	movw	r24, r4
    80ac:	86 59       	subi	r24, 0x96	; 150
    80ae:	9e 4f       	sbci	r25, 0xFE	; 254
    80b0:	93 01       	movw	r18, r6
    80b2:	28 0f       	add	r18, r24
    80b4:	39 1f       	adc	r19, r25
    80b6:	c9 54       	subi	r28, 0x49	; 73
    80b8:	df 4f       	sbci	r29, 0xFF	; 255
    80ba:	39 83       	std	Y+1, r19	; 0x01
    80bc:	28 83       	st	Y, r18
    80be:	c7 5b       	subi	r28, 0xB7	; 183
    80c0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    80c2:	02 96       	adiw	r24, 0x02	; 2
    80c4:	a3 01       	movw	r20, r6
    80c6:	48 0f       	add	r20, r24
    80c8:	59 1f       	adc	r21, r25
    80ca:	c3 54       	subi	r28, 0x43	; 67
    80cc:	df 4f       	sbci	r29, 0xFF	; 255
    80ce:	59 83       	std	Y+1, r21	; 0x01
    80d0:	48 83       	st	Y, r20
    80d2:	cd 5b       	subi	r28, 0xBD	; 189
    80d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    80d6:	08 96       	adiw	r24, 0x08	; 8
    80d8:	b3 01       	movw	r22, r6
    80da:	68 0f       	add	r22, r24
    80dc:	79 1f       	adc	r23, r25
    80de:	cb 53       	subi	r28, 0x3B	; 59
    80e0:	df 4f       	sbci	r29, 0xFF	; 255
    80e2:	79 83       	std	Y+1, r23	; 0x01
    80e4:	68 83       	st	Y, r22
    80e6:	c5 5c       	subi	r28, 0xC5	; 197
    80e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1233
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    80ea:	01 97       	sbiw	r24, 0x01	; 1
    80ec:	f3 01       	movw	r30, r6
    80ee:	e8 0f       	add	r30, r24
    80f0:	f9 1f       	adc	r31, r25
    80f2:	c8 53       	subi	r28, 0x38	; 56
    80f4:	df 4f       	sbci	r29, 0xFF	; 255
    80f6:	f9 83       	std	Y+1, r31	; 0x01
    80f8:	e8 83       	st	Y, r30
    80fa:	c8 5c       	subi	r28, 0xC8	; 200
    80fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    80fe:	01 97       	sbiw	r24, 0x01	; 1
    8100:	53 01       	movw	r10, r6
    8102:	a8 0e       	add	r10, r24
    8104:	b9 1e       	adc	r11, r25
    8106:	c6 53       	subi	r28, 0x36	; 54
    8108:	df 4f       	sbci	r29, 0xFF	; 255
    810a:	b9 82       	std	Y+1, r11	; 0x01
    810c:	a8 82       	st	Y, r10
    810e:	ca 5c       	subi	r28, 0xCA	; 202
    8110:	d0 40       	sbci	r29, 0x00	; 0
    8112:	02 97       	sbiw	r24, 0x02	; 2
    8114:	93 01       	movw	r18, r6
    8116:	28 0f       	add	r18, r24
    8118:	39 1f       	adc	r19, r25
    811a:	c3 53       	subi	r28, 0x33	; 51
    811c:	df 4f       	sbci	r29, 0xFF	; 255
    811e:	39 83       	std	Y+1, r19	; 0x01
    8120:	28 83       	st	Y, r18
    8122:	cd 5c       	subi	r28, 0xCD	; 205
    8124:	d0 40       	sbci	r29, 0x00	; 0
    8126:	02 97       	sbiw	r24, 0x02	; 2
    8128:	a3 01       	movw	r20, r6
    812a:	48 0f       	add	r20, r24
    812c:	59 1f       	adc	r21, r25
    812e:	c1 53       	subi	r28, 0x31	; 49
    8130:	df 4f       	sbci	r29, 0xFF	; 255
    8132:	59 83       	std	Y+1, r21	; 0x01
    8134:	48 83       	st	Y, r20
    8136:	cf 5c       	subi	r28, 0xCF	; 207
    8138:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    813a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      //rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
    813c:	ce 54       	subi	r28, 0x4E	; 78
    813e:	df 4f       	sbci	r29, 0xFF	; 255
    8140:	88 81       	ld	r24, Y
    8142:	c2 5b       	subi	r28, 0xB2	; 178
    8144:	d0 40       	sbci	r29, 0x00	; 0
    8146:	cf 54       	subi	r28, 0x4F	; 79
    8148:	df 4f       	sbci	r29, 0xFF	; 255
    814a:	98 81       	ld	r25, Y
    814c:	c1 5b       	subi	r28, 0xB1	; 177
    814e:	d0 40       	sbci	r29, 0x00	; 0
    8150:	89 17       	cp	r24, r25
    8152:	08 f0       	brcs	.+2      	; 0x8156 <draw_menu(bool)+0x1996>
    8154:	c5 c0       	rjmp	.+394    	; 0x82e0 <draw_menu(bool)+0x1b20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
      {
        //active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8156:	c9 54       	subi	r28, 0x49	; 73
    8158:	df 4f       	sbci	r29, 0xFF	; 255
    815a:	e8 81       	ld	r30, Y
    815c:	f9 81       	ldd	r31, Y+1	; 0x01
    815e:	c7 5b       	subi	r28, 0xB7	; 183
    8160:	d0 40       	sbci	r29, 0x00	; 0
    8162:	25 90       	lpm	r2, Z+
    8164:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8166:	c3 54       	subi	r28, 0x43	; 67
    8168:	df 4f       	sbci	r29, 0xFF	; 255
    816a:	e8 81       	ld	r30, Y
    816c:	f9 81       	ldd	r31, Y+1	; 0x01
    816e:	cd 5b       	subi	r28, 0xBD	; 189
    8170:	d0 40       	sbci	r29, 0x00	; 0
    8172:	25 91       	lpm	r18, Z+
    8174:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1232
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8176:	cb 53       	subi	r28, 0x3B	; 59
    8178:	df 4f       	sbci	r29, 0xFF	; 255
    817a:	e8 81       	ld	r30, Y
    817c:	f9 81       	ldd	r31, Y+1	; 0x01
    817e:	c5 5c       	subi	r28, 0xC5	; 197
    8180:	d0 40       	sbci	r29, 0x00	; 0
    8182:	94 91       	lpm	r25, Z
    8184:	99 23       	and	r25, r25
    8186:	09 f4       	brne	.+2      	; 0x818a <draw_menu(bool)+0x19ca>
    8188:	6c c0       	rjmp	.+216    	; 0x8262 <draw_menu(bool)+0x1aa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        //active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    818a:	cf 53       	subi	r28, 0x3F	; 63
    818c:	df 4f       	sbci	r29, 0xFF	; 255
    818e:	a8 80       	ld	r10, Y
    8190:	b9 80       	ldd	r11, Y+1	; 0x01
    8192:	c1 5c       	subi	r28, 0xC1	; 193
    8194:	d0 40       	sbci	r29, 0x00	; 0
    8196:	a2 0e       	add	r10, r18
    8198:	b3 1e       	adc	r11, r19
    819a:	cb 54       	subi	r28, 0x4B	; 75
    819c:	df 4f       	sbci	r29, 0xFF	; 255
    819e:	b9 82       	std	Y+1, r11	; 0x01
    81a0:	a8 82       	st	Y, r10
    81a2:	c5 5b       	subi	r28, 0xB5	; 181
    81a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1234
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    81a6:	cb 53       	subi	r28, 0x3B	; 59
    81a8:	df 4f       	sbci	r29, 0xFF	; 255
    81aa:	e8 81       	ld	r30, Y
    81ac:	f9 81       	ldd	r31, Y+1	; 0x01
    81ae:	c5 5c       	subi	r28, 0xC5	; 197
    81b0:	d0 40       	sbci	r29, 0x00	; 0
    81b2:	94 91       	lpm	r25, Z
    81b4:	91 30       	cpi	r25, 0x01	; 1
    81b6:	09 f4       	brne	.+2      	; 0x81ba <draw_menu(bool)+0x19fa>
    81b8:	77 c0       	rjmp	.+238    	; 0x82a8 <draw_menu(bool)+0x1ae8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
      //rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
      while (loop_i < loop_cnt)
      {
        //active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    81ba:	c1 54       	subi	r28, 0x41	; 65
    81bc:	df 4f       	sbci	r29, 0xFF	; 255
    81be:	a8 80       	ld	r10, Y
    81c0:	b9 80       	ldd	r11, Y+1	; 0x01
    81c2:	cf 5b       	subi	r28, 0xBF	; 191
    81c4:	d0 40       	sbci	r29, 0x00	; 0
    81c6:	2a 0c       	add	r2, r10
    81c8:	3b 1c       	adc	r3, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1236
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        ((ret_string_fptr)gss)(loop_i, pgm_read_word(&current->args), str1, str2);
    81ca:	cb 52       	subi	r28, 0x2B	; 43
    81cc:	df 4f       	sbci	r29, 0xFF	; 255
    81ce:	e8 81       	ld	r30, Y
    81d0:	f9 81       	ldd	r31, Y+1	; 0x01
    81d2:	c5 5d       	subi	r28, 0xD5	; 213
    81d4:	d0 40       	sbci	r29, 0x00	; 0
    81d6:	65 91       	lpm	r22, Z+
    81d8:	74 91       	lpm	r23, Z
    81da:	9e 01       	movw	r18, r28
    81dc:	2f 57       	subi	r18, 0x7F	; 127
    81de:	3f 4f       	sbci	r19, 0xFF	; 255
    81e0:	ae 01       	movw	r20, r28
    81e2:	4f 5f       	subi	r20, 0xFF	; 255
    81e4:	5f 4f       	sbci	r21, 0xFF	; 255
    81e6:	cd 52       	subi	r28, 0x2D	; 45
    81e8:	df 4f       	sbci	r29, 0xFF	; 255
    81ea:	e8 81       	ld	r30, Y
    81ec:	f9 81       	ldd	r31, Y+1	; 0x01
    81ee:	c3 5d       	subi	r28, 0xD3	; 211
    81f0:	d0 40       	sbci	r29, 0x00	; 0
    81f2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    81f4:	c6 53       	subi	r28, 0x36	; 54
    81f6:	df 4f       	sbci	r29, 0xFF	; 255
    81f8:	e8 81       	ld	r30, Y
    81fa:	f9 81       	ldd	r31, Y+1	; 0x01
    81fc:	ca 5c       	subi	r28, 0xCA	; 202
    81fe:	d0 40       	sbci	r29, 0x00	; 0
    8200:	e4 90       	lpm	r14, Z
    8202:	04 91       	lpm	r16, Z
    8204:	c3 53       	subi	r28, 0x33	; 51
    8206:	df 4f       	sbci	r29, 0xFF	; 255
    8208:	e8 81       	ld	r30, Y
    820a:	f9 81       	ldd	r31, Y+1	; 0x01
    820c:	cd 5c       	subi	r28, 0xCD	; 205
    820e:	d0 40       	sbci	r29, 0x00	; 0
    8210:	25 91       	lpm	r18, Z+
    8212:	34 91       	lpm	r19, Z
    8214:	c1 53       	subi	r28, 0x31	; 49
    8216:	df 4f       	sbci	r29, 0xFF	; 255
    8218:	e8 81       	ld	r30, Y
    821a:	f9 81       	ldd	r31, Y+1	; 0x01
    821c:	cf 5c       	subi	r28, 0xCF	; 207
    821e:	d0 40       	sbci	r29, 0x00	; 0
    8220:	45 91       	lpm	r20, Z+
    8222:	54 91       	lpm	r21, Z
    8224:	88 24       	eor	r8, r8
    8226:	83 94       	inc	r8
    8228:	be 01       	movw	r22, r28
    822a:	6f 57       	subi	r22, 0x7F	; 127
    822c:	7f 4f       	sbci	r23, 0xFF	; 255
    822e:	5b 01       	movw	r10, r22
    8230:	ce 01       	movw	r24, r28
    8232:	01 96       	adiw	r24, 0x01	; 1
    8234:	6c 01       	movw	r12, r24
    8236:	cb 54       	subi	r28, 0x4B	; 75
    8238:	df 4f       	sbci	r29, 0xFF	; 255
    823a:	68 81       	ld	r22, Y
    823c:	79 81       	ldd	r23, Y+1	; 0x01
    823e:	c5 5b       	subi	r28, 0xB5	; 181
    8240:	d0 40       	sbci	r29, 0x00	; 0
    8242:	c1 01       	movw	r24, r2
    8244:	0e 94 6e 25 	call	0x4adc	; 0x4adc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
        loop_t++;
    8248:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1239
        loop_i++;
    824a:	ce 54       	subi	r28, 0x4E	; 78
    824c:	df 4f       	sbci	r29, 0xFF	; 255
    824e:	88 81       	ld	r24, Y
    8250:	c2 5b       	subi	r28, 0xB2	; 178
    8252:	d0 40       	sbci	r29, 0x00	; 0
    8254:	8f 5f       	subi	r24, 0xFF	; 255
    8256:	ce 54       	subi	r28, 0x4E	; 78
    8258:	df 4f       	sbci	r29, 0xFF	; 255
    825a:	88 83       	st	Y, r24
    825c:	c2 5b       	subi	r28, 0xB2	; 178
    825e:	d0 40       	sbci	r29, 0x00	; 0
    8260:	6d cf       	rjmp	.-294    	; 0x813c <draw_menu(bool)+0x197c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1233
      {
        //active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    8262:	c3 54       	subi	r28, 0x43	; 67
    8264:	df 4f       	sbci	r29, 0xFF	; 255
    8266:	e8 81       	ld	r30, Y
    8268:	f9 81       	ldd	r31, Y+1	; 0x01
    826a:	cd 5b       	subi	r28, 0xBD	; 189
    826c:	d0 40       	sbci	r29, 0x00	; 0
    826e:	25 91       	lpm	r18, Z+
    8270:	34 91       	lpm	r19, Z
    8272:	c8 53       	subi	r28, 0x38	; 56
    8274:	df 4f       	sbci	r29, 0xFF	; 255
    8276:	e8 81       	ld	r30, Y
    8278:	f9 81       	ldd	r31, Y+1	; 0x01
    827a:	c8 5c       	subi	r28, 0xC8	; 200
    827c:	d0 40       	sbci	r29, 0x00	; 0
    827e:	94 91       	lpm	r25, Z
    8280:	cf 53       	subi	r28, 0x3F	; 63
    8282:	df 4f       	sbci	r29, 0xFF	; 255
    8284:	a8 80       	ld	r10, Y
    8286:	b9 80       	ldd	r11, Y+1	; 0x01
    8288:	c1 5c       	subi	r28, 0xC1	; 193
    828a:	d0 40       	sbci	r29, 0x00	; 0
    828c:	2a 0d       	add	r18, r10
    828e:	3b 1d       	adc	r19, r11
    8290:	a9 01       	movw	r20, r18
    8292:	91 9f       	mul	r25, r17
    8294:	40 0d       	add	r20, r0
    8296:	51 1d       	adc	r21, r1
    8298:	11 24       	eor	r1, r1
    829a:	cb 54       	subi	r28, 0x4B	; 75
    829c:	df 4f       	sbci	r29, 0xFF	; 255
    829e:	59 83       	std	Y+1, r21	; 0x01
    82a0:	48 83       	st	Y, r20
    82a2:	c5 5b       	subi	r28, 0xB5	; 181
    82a4:	d0 40       	sbci	r29, 0x00	; 0
    82a6:	7f cf       	rjmp	.-258    	; 0x81a6 <draw_menu(bool)+0x19e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    82a8:	c9 54       	subi	r28, 0x49	; 73
    82aa:	df 4f       	sbci	r29, 0xFF	; 255
    82ac:	e8 81       	ld	r30, Y
    82ae:	f9 81       	ldd	r31, Y+1	; 0x01
    82b0:	c7 5b       	subi	r28, 0xB7	; 183
    82b2:	d0 40       	sbci	r29, 0x00	; 0
    82b4:	25 90       	lpm	r2, Z+
    82b6:	34 90       	lpm	r3, Z
    82b8:	c8 53       	subi	r28, 0x38	; 56
    82ba:	df 4f       	sbci	r29, 0xFF	; 255
    82bc:	e8 81       	ld	r30, Y
    82be:	f9 81       	ldd	r31, Y+1	; 0x01
    82c0:	c8 5c       	subi	r28, 0xC8	; 200
    82c2:	d0 40       	sbci	r29, 0x00	; 0
    82c4:	94 91       	lpm	r25, Z
    82c6:	c1 54       	subi	r28, 0x41	; 65
    82c8:	df 4f       	sbci	r29, 0xFF	; 255
    82ca:	a8 80       	ld	r10, Y
    82cc:	b9 80       	ldd	r11, Y+1	; 0x01
    82ce:	cf 5b       	subi	r28, 0xBF	; 191
    82d0:	d0 40       	sbci	r29, 0x00	; 0
    82d2:	2a 0c       	add	r2, r10
    82d4:	3b 1c       	adc	r3, r11
    82d6:	91 9f       	mul	r25, r17
    82d8:	20 0c       	add	r2, r0
    82da:	31 1c       	adc	r3, r1
    82dc:	11 24       	eor	r1, r1
    82de:	75 cf       	rjmp	.-278    	; 0x81ca <draw_menu(bool)+0x1a0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1242
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    82e0:	c7 54       	subi	r28, 0x47	; 71
    82e2:	df 4f       	sbci	r29, 0xFF	; 255
    82e4:	e8 81       	ld	r30, Y
    82e6:	f9 81       	ldd	r31, Y+1	; 0x01
    82e8:	c9 5b       	subi	r28, 0xB9	; 185
    82ea:	d0 40       	sbci	r29, 0x00	; 0
    82ec:	ef 2b       	or	r30, r31
    82ee:	09 f4       	brne	.+2      	; 0x82f2 <draw_menu(bool)+0x1b32>
    82f0:	40 c1       	rjmp	.+640    	; 0x8572 <draw_menu(bool)+0x1db2>
    82f2:	c5 54       	subi	r28, 0x45	; 69
    82f4:	df 4f       	sbci	r29, 0xFF	; 255
    82f6:	a8 80       	ld	r10, Y
    82f8:	b9 80       	ldd	r11, Y+1	; 0x01
    82fa:	cb 5b       	subi	r28, 0xBB	; 187
    82fc:	d0 40       	sbci	r29, 0x00	; 0
    82fe:	ab 28       	or	r10, r11
    8300:	09 f4       	brne	.+2      	; 0x8304 <draw_menu(bool)+0x1b44>
    8302:	37 c1       	rjmp	.+622    	; 0x8572 <draw_menu(bool)+0x1db2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1244
    {
      loop_i = 0;
    8304:	ce 54       	subi	r28, 0x4E	; 78
    8306:	df 4f       	sbci	r29, 0xFF	; 255
    8308:	18 82       	st	Y, r1
    830a:	c2 5b       	subi	r28, 0xB2	; 178
    830c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1246
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    830e:	f2 01       	movw	r30, r4
    8310:	e4 58       	subi	r30, 0x84	; 132
    8312:	fe 4f       	sbci	r31, 0xFE	; 254
    8314:	e6 0d       	add	r30, r6
    8316:	f7 1d       	adc	r31, r7
    8318:	25 91       	lpm	r18, Z+
    831a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
    831c:	82 01       	movw	r16, r4
    831e:	09 58       	subi	r16, 0x89	; 137
    8320:	1e 4f       	sbci	r17, 0xFE	; 254
    8322:	06 0d       	add	r16, r6
    8324:	17 1d       	adc	r17, r7
    8326:	f8 01       	movw	r30, r16
    8328:	85 91       	lpm	r24, Z+
    832a:	94 91       	lpm	r25, Z
    832c:	cd 53       	subi	r28, 0x3D	; 61
    832e:	df 4f       	sbci	r29, 0xFF	; 255
    8330:	68 81       	ld	r22, Y
    8332:	79 81       	ldd	r23, Y+1	; 0x01
    8334:	c3 5c       	subi	r28, 0xC3	; 195
    8336:	d0 40       	sbci	r29, 0x00	; 0
    8338:	f9 01       	movw	r30, r18
    833a:	19 95       	eicall
    833c:	cf 54       	subi	r28, 0x4F	; 79
    833e:	df 4f       	sbci	r29, 0xFF	; 255
    8340:	88 83       	st	Y, r24
    8342:	c1 5b       	subi	r28, 0xB1	; 177
    8344:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1248
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
    8346:	f2 01       	movw	r30, r4
    8348:	eb 58       	subi	r30, 0x8B	; 139
    834a:	fe 4f       	sbci	r31, 0xFE	; 254
    834c:	e6 0d       	add	r30, r6
    834e:	f7 1d       	adc	r31, r7
    8350:	25 91       	lpm	r18, Z+
    8352:	34 91       	lpm	r19, Z
    8354:	f2 01       	movw	r30, r4
    8356:	ea 58       	subi	r30, 0x8A	; 138
    8358:	fe 4f       	sbci	r31, 0xFE	; 254
    835a:	e6 0d       	add	r30, r6
    835c:	f7 1d       	adc	r31, r7
    835e:	45 91       	lpm	r20, Z+
    8360:	54 91       	lpm	r21, Z
    8362:	be 01       	movw	r22, r28
    8364:	6f 54       	subi	r22, 0x4F	; 79
    8366:	7f 4f       	sbci	r23, 0xFF	; 255
    8368:	ce 01       	movw	r24, r28
    836a:	8e 54       	subi	r24, 0x4E	; 78
    836c:	9f 4f       	sbci	r25, 0xFF	; 255
    836e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1249
      rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
    8372:	f2 01       	movw	r30, r4
    8374:	e2 58       	subi	r30, 0x82	; 130
    8376:	fe 4f       	sbci	r31, 0xFE	; 254
    8378:	e6 0d       	add	r30, r6
    837a:	f7 1d       	adc	r31, r7
    837c:	a5 90       	lpm	r10, Z+
    837e:	b4 90       	lpm	r11, Z
    8380:	cb 53       	subi	r28, 0x3B	; 59
    8382:	df 4f       	sbci	r29, 0xFF	; 255
    8384:	b9 82       	std	Y+1, r11	; 0x01
    8386:	a8 82       	st	Y, r10
    8388:	c5 5c       	subi	r28, 0xC5	; 197
    838a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    838c:	52 01       	movw	r10, r4
    838e:	26 e9       	ldi	r18, 0x96	; 150
    8390:	a2 1a       	sub	r10, r18
    8392:	2e ef       	ldi	r18, 0xFE	; 254
    8394:	b2 0a       	sbc	r11, r18
    8396:	a6 0c       	add	r10, r6
    8398:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    839a:	62 01       	movw	r12, r4
    839c:	34 e9       	ldi	r19, 0x94	; 148
    839e:	c3 1a       	sub	r12, r19
    83a0:	3e ef       	ldi	r19, 0xFE	; 254
    83a2:	d3 0a       	sbc	r13, r19
    83a4:	c6 0c       	add	r12, r6
    83a6:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1255
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    83a8:	c2 01       	movw	r24, r4
    83aa:	8c 58       	subi	r24, 0x8C	; 140
    83ac:	9e 4f       	sbci	r25, 0xFE	; 254
    83ae:	a3 01       	movw	r20, r6
    83b0:	48 0f       	add	r20, r24
    83b2:	59 1f       	adc	r21, r25
    83b4:	cb 54       	subi	r28, 0x4B	; 75
    83b6:	df 4f       	sbci	r29, 0xFF	; 255
    83b8:	59 83       	std	Y+1, r21	; 0x01
    83ba:	48 83       	st	Y, r20
    83bc:	c5 5b       	subi	r28, 0xB5	; 181
    83be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    83c0:	01 97       	sbiw	r24, 0x01	; 1
    83c2:	b3 01       	movw	r22, r6
    83c4:	68 0f       	add	r22, r24
    83c6:	79 1f       	adc	r23, r25
    83c8:	c9 54       	subi	r28, 0x49	; 73
    83ca:	df 4f       	sbci	r29, 0xFF	; 255
    83cc:	79 83       	std	Y+1, r23	; 0x01
    83ce:	68 83       	st	Y, r22
    83d0:	c7 5b       	subi	r28, 0xB7	; 183
    83d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1259
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    83d4:	03 97       	sbiw	r24, 0x03	; 3
    83d6:	f3 01       	movw	r30, r6
    83d8:	e8 0f       	add	r30, r24
    83da:	f9 1f       	adc	r31, r25
    83dc:	c3 54       	subi	r28, 0x43	; 67
    83de:	df 4f       	sbci	r29, 0xFF	; 255
    83e0:	f9 83       	std	Y+1, r31	; 0x01
    83e2:	e8 83       	st	Y, r30
    83e4:	cd 5b       	subi	r28, 0xBD	; 189
    83e6:	d0 40       	sbci	r29, 0x00	; 0
    83e8:	12 01       	movw	r2, r4
    83ea:	f2 e9       	ldi	r31, 0x92	; 146
    83ec:	2f 1a       	sub	r2, r31
    83ee:	fe ef       	ldi	r31, 0xFE	; 254
    83f0:	3f 0a       	sbc	r3, r31
    83f2:	26 0c       	add	r2, r6
    83f4:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1245
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    83f6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
      rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      while (loop_i < loop_cnt)
    83f8:	ce 54       	subi	r28, 0x4E	; 78
    83fa:	df 4f       	sbci	r29, 0xFF	; 255
    83fc:	68 81       	ld	r22, Y
    83fe:	c2 5b       	subi	r28, 0xB2	; 178
    8400:	d0 40       	sbci	r29, 0x00	; 0
    8402:	cf 54       	subi	r28, 0x4F	; 79
    8404:	df 4f       	sbci	r29, 0xFF	; 255
    8406:	88 81       	ld	r24, Y
    8408:	c1 5b       	subi	r28, 0xB1	; 177
    840a:	d0 40       	sbci	r29, 0x00	; 0
    840c:	68 17       	cp	r22, r24
    840e:	08 f0       	brcs	.+2      	; 0x8412 <draw_menu(bool)+0x1c52>
    8410:	b0 c0       	rjmp	.+352    	; 0x8572 <draw_menu(bool)+0x1db2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1252
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
    8412:	f8 01       	movw	r30, r16
    8414:	85 91       	lpm	r24, Z+
    8416:	94 91       	lpm	r25, Z
    8418:	70 e0       	ldi	r23, 0x00	; 0
    841a:	cb 53       	subi	r28, 0x3B	; 59
    841c:	df 4f       	sbci	r29, 0xFF	; 255
    841e:	e8 81       	ld	r30, Y
    8420:	f9 81       	ldd	r31, Y+1	; 0x01
    8422:	c5 5c       	subi	r28, 0xC5	; 197
    8424:	d0 40       	sbci	r29, 0x00	; 0
    8426:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8428:	f5 01       	movw	r30, r10
    842a:	85 91       	lpm	r24, Z+
    842c:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    842e:	f6 01       	movw	r30, r12
    8430:	25 91       	lpm	r18, Z+
    8432:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1255
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8434:	cb 54       	subi	r28, 0x4B	; 75
    8436:	df 4f       	sbci	r29, 0xFF	; 255
    8438:	e8 81       	ld	r30, Y
    843a:	f9 81       	ldd	r31, Y+1	; 0x01
    843c:	c5 5b       	subi	r28, 0xB5	; 181
    843e:	d0 40       	sbci	r29, 0x00	; 0
    8440:	44 91       	lpm	r20, Z
    8442:	44 23       	and	r20, r20
    8444:	09 f4       	brne	.+2      	; 0x8448 <draw_menu(bool)+0x1c88>
    8446:	4f c0       	rjmp	.+158    	; 0x84e6 <draw_menu(bool)+0x1d26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
      rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8448:	cf 53       	subi	r28, 0x3F	; 63
    844a:	df 4f       	sbci	r29, 0xFF	; 255
    844c:	48 81       	ld	r20, Y
    844e:	59 81       	ldd	r21, Y+1	; 0x01
    8450:	c1 5c       	subi	r28, 0xC1	; 193
    8452:	d0 40       	sbci	r29, 0x00	; 0
    8454:	24 0f       	add	r18, r20
    8456:	35 1f       	adc	r19, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1257
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    8458:	cb 54       	subi	r28, 0x4B	; 75
    845a:	df 4f       	sbci	r29, 0xFF	; 255
    845c:	e8 81       	ld	r30, Y
    845e:	f9 81       	ldd	r31, Y+1	; 0x01
    8460:	c5 5b       	subi	r28, 0xB5	; 181
    8462:	d0 40       	sbci	r29, 0x00	; 0
    8464:	44 91       	lpm	r20, Z
    8466:	41 30       	cpi	r20, 0x01	; 1
    8468:	09 f4       	brne	.+2      	; 0x846c <draw_menu(bool)+0x1cac>
    846a:	54 c0       	rjmp	.+168    	; 0x8514 <draw_menu(bool)+0x1d54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_word(&dyn_button_1->slider_args), pgm_read_word(&dyn_button_1->max_button_count));
      rfnt = pgm_read_word(&dyn_button_1->dyn_button_active);
      while (loop_i < loop_cnt)
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    846c:	c1 54       	subi	r28, 0x41	; 65
    846e:	df 4f       	sbci	r29, 0xFF	; 255
    8470:	48 81       	ld	r20, Y
    8472:	59 81       	ldd	r21, Y+1	; 0x01
    8474:	cf 5b       	subi	r28, 0xBF	; 191
    8476:	d0 40       	sbci	r29, 0x00	; 0
    8478:	84 0f       	add	r24, r20
    847a:	95 1f       	adc	r25, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1259
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    847c:	c3 54       	subi	r28, 0x43	; 67
    847e:	df 4f       	sbci	r29, 0xFF	; 255
    8480:	e8 81       	ld	r30, Y
    8482:	f9 81       	ldd	r31, Y+1	; 0x01
    8484:	cd 5b       	subi	r28, 0xBD	; 189
    8486:	d0 40       	sbci	r29, 0x00	; 0
    8488:	45 91       	lpm	r20, Z+
    848a:	54 91       	lpm	r21, Z
    848c:	f1 01       	movw	r30, r2
    848e:	65 91       	lpm	r22, Z+
    8490:	74 91       	lpm	r23, Z
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    8492:	c7 54       	subi	r28, 0x47	; 71
    8494:	df 4f       	sbci	r29, 0xFF	; 255
    8496:	e8 81       	ld	r30, Y
    8498:	f9 81       	ldd	r31, Y+1	; 0x01
    849a:	c9 5b       	subi	r28, 0xB9	; 185
    849c:	d0 40       	sbci	r29, 0x00	; 0
    849e:	8e 17       	cp	r24, r30
    84a0:	9f 07       	cpc	r25, r31
    84a2:	a4 f4       	brge	.+40     	; 0x84cc <draw_menu(bool)+0x1d0c>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    84a4:	86 0f       	add	r24, r22
    84a6:	97 1f       	adc	r25, r23
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    84a8:	e8 17       	cp	r30, r24
    84aa:	f9 07       	cpc	r31, r25
    84ac:	7c f4       	brge	.+30     	; 0x84cc <draw_menu(bool)+0x1d0c>
    84ae:	c5 54       	subi	r28, 0x45	; 69
    84b0:	df 4f       	sbci	r29, 0xFF	; 255
    84b2:	68 81       	ld	r22, Y
    84b4:	79 81       	ldd	r23, Y+1	; 0x01
    84b6:	cb 5b       	subi	r28, 0xBB	; 187
    84b8:	d0 40       	sbci	r29, 0x00	; 0
    84ba:	26 17       	cp	r18, r22
    84bc:	37 07       	cpc	r19, r23
    84be:	34 f4       	brge	.+12     	; 0x84cc <draw_menu(bool)+0x1d0c>
button_click_touch():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    84c0:	24 0f       	add	r18, r20
    84c2:	35 1f       	adc	r19, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    84c4:	62 17       	cp	r22, r18
    84c6:	73 07       	cpc	r23, r19
    84c8:	0c f4       	brge	.+2      	; 0x84cc <draw_menu(bool)+0x1d0c>
    84ca:	3b c0       	rjmp	.+118    	; 0x8542 <draw_menu(bool)+0x1d82>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1266
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
          ret = true;
          break;
        }
        loop_t++;
    84cc:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
        loop_i++;
    84ce:	ce 54       	subi	r28, 0x4E	; 78
    84d0:	df 4f       	sbci	r29, 0xFF	; 255
    84d2:	88 81       	ld	r24, Y
    84d4:	c2 5b       	subi	r28, 0xB2	; 178
    84d6:	d0 40       	sbci	r29, 0x00	; 0
    84d8:	8f 5f       	subi	r24, 0xFF	; 255
    84da:	ce 54       	subi	r28, 0x4E	; 78
    84dc:	df 4f       	sbci	r29, 0xFF	; 255
    84de:	88 83       	st	Y, r24
    84e0:	c2 5b       	subi	r28, 0xB2	; 178
    84e2:	d0 40       	sbci	r29, 0x00	; 0
    84e4:	89 cf       	rjmp	.-238    	; 0x83f8 <draw_menu(bool)+0x1c38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
      {
        active = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), loop_i);
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    84e6:	f6 01       	movw	r30, r12
    84e8:	25 91       	lpm	r18, Z+
    84ea:	34 91       	lpm	r19, Z
    84ec:	c9 54       	subi	r28, 0x49	; 73
    84ee:	df 4f       	sbci	r29, 0xFF	; 255
    84f0:	e8 81       	ld	r30, Y
    84f2:	f9 81       	ldd	r31, Y+1	; 0x01
    84f4:	c7 5b       	subi	r28, 0xB7	; 183
    84f6:	d0 40       	sbci	r29, 0x00	; 0
    84f8:	44 91       	lpm	r20, Z
    84fa:	cf 53       	subi	r28, 0x3F	; 63
    84fc:	df 4f       	sbci	r29, 0xFF	; 255
    84fe:	68 81       	ld	r22, Y
    8500:	79 81       	ldd	r23, Y+1	; 0x01
    8502:	c1 5c       	subi	r28, 0xC1	; 193
    8504:	d0 40       	sbci	r29, 0x00	; 0
    8506:	26 0f       	add	r18, r22
    8508:	37 1f       	adc	r19, r23
    850a:	4f 9d       	mul	r20, r15
    850c:	20 0d       	add	r18, r0
    850e:	31 1d       	adc	r19, r1
    8510:	11 24       	eor	r1, r1
    8512:	a2 cf       	rjmp	.-188    	; 0x8458 <draw_menu(bool)+0x1c98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1258
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
    8514:	f5 01       	movw	r30, r10
    8516:	85 91       	lpm	r24, Z+
    8518:	94 91       	lpm	r25, Z
    851a:	c9 54       	subi	r28, 0x49	; 73
    851c:	df 4f       	sbci	r29, 0xFF	; 255
    851e:	e8 81       	ld	r30, Y
    8520:	f9 81       	ldd	r31, Y+1	; 0x01
    8522:	c7 5b       	subi	r28, 0xB7	; 183
    8524:	d0 40       	sbci	r29, 0x00	; 0
    8526:	44 91       	lpm	r20, Z
    8528:	c1 54       	subi	r28, 0x41	; 65
    852a:	df 4f       	sbci	r29, 0xFF	; 255
    852c:	68 81       	ld	r22, Y
    852e:	79 81       	ldd	r23, Y+1	; 0x01
    8530:	cf 5b       	subi	r28, 0xBF	; 191
    8532:	d0 40       	sbci	r29, 0x00	; 0
    8534:	86 0f       	add	r24, r22
    8536:	97 1f       	adc	r25, r23
    8538:	4f 9d       	mul	r20, r15
    853a:	80 0d       	add	r24, r0
    853c:	91 1d       	adc	r25, r1
    853e:	11 24       	eor	r1, r1
    8540:	9d cf       	rjmp	.-198    	; 0x847c <draw_menu(bool)+0x1cbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    8542:	f2 01       	movw	r30, r4
    8544:	e6 58       	subi	r30, 0x86	; 134
    8546:	fe 4f       	sbci	r31, 0xFE	; 254
    8548:	e6 0d       	add	r30, r6
    854a:	f7 1d       	adc	r31, r7
    854c:	25 91       	lpm	r18, Z+
    854e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
    8550:	f8 01       	movw	r30, r16
    8552:	84 91       	lpm	r24, Z
    8554:	ce 54       	subi	r28, 0x4E	; 78
    8556:	df 4f       	sbci	r29, 0xFF	; 255
    8558:	68 81       	ld	r22, Y
    855a:	c2 5b       	subi	r28, 0xB2	; 178
    855c:	d0 40       	sbci	r29, 0x00	; 0
    855e:	70 e0       	ldi	r23, 0x00	; 0
    8560:	90 e0       	ldi	r25, 0x00	; 0
    8562:	f9 01       	movw	r30, r18
    8564:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
          ret = true;
    8566:	f1 e0       	ldi	r31, 0x01	; 1
    8568:	c9 53       	subi	r28, 0x39	; 57
    856a:	df 4f       	sbci	r29, 0xFF	; 255
    856c:	f8 83       	st	Y, r31
    856e:	c7 5c       	subi	r28, 0xC7	; 199
    8570:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    8572:	93 94       	inc	r9
    8574:	39 cd       	rjmp	.-1422   	; 0x7fe8 <draw_menu(bool)+0x1828>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_xy) * loop_t);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
          ret = true;
    8576:	21 e0       	ldi	r18, 0x01	; 1
    8578:	c9 53       	subi	r28, 0x39	; 57
    857a:	df 4f       	sbci	r29, 0xFF	; 255
    857c:	28 83       	st	Y, r18
    857e:	c7 5c       	subi	r28, 0xC7	; 199
    8580:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
    }
  }

draw_menu_end:
  return ret;
}
    8582:	c9 53       	subi	r28, 0x39	; 57
    8584:	df 4f       	sbci	r29, 0xFF	; 255
    8586:	88 81       	ld	r24, Y
    8588:	c7 5c       	subi	r28, 0xC7	; 199
    858a:	d0 40       	sbci	r29, 0x00	; 0
    858c:	ca 52       	subi	r28, 0x2A	; 42
    858e:	df 4f       	sbci	r29, 0xFF	; 255
    8590:	0f b6       	in	r0, 0x3f	; 63
    8592:	f8 94       	cli
    8594:	de bf       	out	0x3e, r29	; 62
    8596:	0f be       	out	0x3f, r0	; 63
    8598:	cd bf       	out	0x3d, r28	; 61
    859a:	df 91       	pop	r29
    859c:	cf 91       	pop	r28
    859e:	1f 91       	pop	r17
    85a0:	0f 91       	pop	r16
    85a2:	ff 90       	pop	r15
    85a4:	ef 90       	pop	r14
    85a6:	df 90       	pop	r13
    85a8:	cf 90       	pop	r12
    85aa:	bf 90       	pop	r11
    85ac:	af 90       	pop	r10
    85ae:	9f 90       	pop	r9
    85b0:	8f 90       	pop	r8
    85b2:	7f 90       	pop	r7
    85b4:	6f 90       	pop	r6
    85b6:	5f 90       	pop	r5
    85b8:	4f 90       	pop	r4
    85ba:	3f 90       	pop	r3
    85bc:	2f 90       	pop	r2
    85be:	08 95       	ret

000085c0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:372
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    85c0:	2d e4       	ldi	r18, 0x4D	; 77
    85c2:	82 9f       	mul	r24, r18
    85c4:	c0 01       	movw	r24, r0
    85c6:	11 24       	eor	r1, r1
    85c8:	26 e0       	ldi	r18, 0x06	; 6
    85ca:	62 9f       	mul	r22, r18
    85cc:	80 0d       	add	r24, r0
    85ce:	91 1d       	adc	r25, r1
    85d0:	11 24       	eor	r1, r1
    85d2:	64 2f       	mov	r22, r20
    85d4:	8e 50       	subi	r24, 0x0E	; 14
    85d6:	9e 4f       	sbci	r25, 0xFE	; 254
    85d8:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

000085dc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:331
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    85dc:	1f 93       	push	r17
    85de:	cf 93       	push	r28
    85e0:	df 93       	push	r29
    85e2:	14 2f       	mov	r17, r20
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    85e4:	9d e4       	ldi	r25, 0x4D	; 77
    85e6:	89 9f       	mul	r24, r25
    85e8:	e0 01       	movw	r28, r0
    85ea:	11 24       	eor	r1, r1
    85ec:	cf 50       	subi	r28, 0x0F	; 15
    85ee:	de 4f       	sbci	r29, 0xFE	; 254
    85f0:	86 e0       	ldi	r24, 0x06	; 6
    85f2:	68 9f       	mul	r22, r24
    85f4:	c0 0d       	add	r28, r0
    85f6:	d1 1d       	adc	r29, r1
    85f8:	11 24       	eor	r1, r1
    85fa:	65 2f       	mov	r22, r21
    85fc:	ce 01       	movw	r24, r28
    85fe:	05 96       	adiw	r24, 0x05	; 5
    8600:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:333
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    8604:	61 2f       	mov	r22, r17
    8606:	ce 01       	movw	r24, r28
    8608:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:334
}
    860a:	df 91       	pop	r29
    860c:	cf 91       	pop	r28
    860e:	1f 91       	pop	r17
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:333
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    8610:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00008614 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:313
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    8614:	cf 92       	push	r12
    8616:	ef 92       	push	r14
    8618:	0f 93       	push	r16
    861a:	1f 93       	push	r17
    861c:	cf 93       	push	r28
    861e:	df 93       	push	r29
    8620:	c8 2f       	mov	r28, r24
    8622:	56 2f       	mov	r21, r22
    8624:	8e 2d       	mov	r24, r14
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:316
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    8626:	3f e0       	ldi	r19, 0x0F	; 15
    8628:	63 2f       	mov	r22, r19
    862a:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
    862e:	83 70       	andi	r24, 0x03	; 3
    8630:	98 e0       	ldi	r25, 0x08	; 8
    8632:	09 9f       	mul	r16, r25
    8634:	80 01       	movw	r16, r0
    8636:	11 24       	eor	r1, r1
    8638:	08 0f       	add	r16, r24
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    863a:	8d e4       	ldi	r24, 0x4D	; 77
    863c:	c8 9f       	mul	r28, r24
    863e:	e0 01       	movw	r28, r0
    8640:	11 24       	eor	r1, r1
    8642:	cf 50       	subi	r28, 0x0F	; 15
    8644:	de 4f       	sbci	r29, 0xFE	; 254
    8646:	96 e0       	ldi	r25, 0x06	; 6
    8648:	59 9f       	mul	r21, r25
    864a:	c0 0d       	add	r28, r0
    864c:	d1 1d       	adc	r29, r1
    864e:	11 24       	eor	r1, r1
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:315
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    8650:	82 2f       	mov	r24, r18
    8652:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
    8656:	68 2f       	mov	r22, r24
    8658:	66 0f       	add	r22, r22
    865a:	66 70       	andi	r22, 0x06	; 6
    865c:	88 e0       	ldi	r24, 0x08	; 8
    865e:	48 9f       	mul	r20, r24
    8660:	a0 01       	movw	r20, r0
    8662:	11 24       	eor	r1, r1
    8664:	9c 2d       	mov	r25, r12
    8666:	91 70       	andi	r25, 0x01	; 1
    8668:	c9 2e       	mov	r12, r25
    866a:	c4 0e       	add	r12, r20
    866c:	6c 0d       	add	r22, r12
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:317
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    866e:	ce 01       	movw	r24, r28
    8670:	02 96       	adiw	r24, 0x02	; 2
    8672:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:318
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    8676:	60 2f       	mov	r22, r16
    8678:	ce 01       	movw	r24, r28
    867a:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:319
}
    867c:	df 91       	pop	r29
    867e:	cf 91       	pop	r28
    8680:	1f 91       	pop	r17
    8682:	0f 91       	pop	r16
    8684:	ef 90       	pop	r14
    8686:	cf 90       	pop	r12
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:318
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    8688:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

0000868c <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:282
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    868c:	ef 92       	push	r14
    868e:	ff 92       	push	r15
    8690:	0f 93       	push	r16
    8692:	1f 93       	push	r17
    8694:	cf 93       	push	r28
    8696:	df 93       	push	r29
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:285
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    8698:	9d e4       	ldi	r25, 0x4D	; 77
    869a:	89 9f       	mul	r24, r25
    869c:	80 01       	movw	r16, r0
    869e:	11 24       	eor	r1, r1
    86a0:	eb 01       	movw	r28, r22
    86a2:	78 01       	movw	r14, r16
    86a4:	8c ec       	ldi	r24, 0xCC	; 204
    86a6:	e8 1a       	sub	r14, r24
    86a8:	8d ef       	ldi	r24, 0xFD	; 253
    86aa:	f8 0a       	sbc	r15, r24
    86ac:	02 5c       	subi	r16, 0xC2	; 194
    86ae:	1d 4f       	sbci	r17, 0xFD	; 253
    86b0:	69 91       	ld	r22, Y+
    86b2:	c7 01       	movw	r24, r14
    86b4:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:286
    if (name[i] == 0) break;
    86b8:	fe 01       	movw	r30, r28
    86ba:	31 97       	sbiw	r30, 0x01	; 1
    86bc:	80 81       	ld	r24, Z
    86be:	88 23       	and	r24, r24
    86c0:	31 f0       	breq	.+12     	; 0x86ce <thermostat_program_set_name(unsigned char, char*)+0x42>
    86c2:	9f ef       	ldi	r25, 0xFF	; 255
    86c4:	e9 1a       	sub	r14, r25
    86c6:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:283
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    86c8:	e0 16       	cp	r14, r16
    86ca:	f1 06       	cpc	r15, r17
    86cc:	89 f7       	brne	.-30     	; 0x86b0 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:288
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    86ce:	df 91       	pop	r29
    86d0:	cf 91       	pop	r28
    86d2:	1f 91       	pop	r17
    86d4:	0f 91       	pop	r16
    86d6:	ff 90       	pop	r15
    86d8:	ef 90       	pop	r14
    86da:	08 95       	ret

000086dc <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:233
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    86dc:	ef 92       	push	r14
    86de:	ff 92       	push	r15
    86e0:	0f 93       	push	r16
    86e2:	1f 93       	push	r17
    86e4:	cf 93       	push	r28
    86e6:	df 93       	push	r29
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    86e8:	e8 2e       	mov	r14, r24
    86ea:	f1 2c       	mov	r15, r1
    86ec:	91 e2       	ldi	r25, 0x21	; 33
    86ee:	89 9f       	mul	r24, r25
    86f0:	e0 01       	movw	r28, r0
    86f2:	11 24       	eor	r1, r1
    86f4:	87 01       	movw	r16, r14
    86f6:	00 0f       	add	r16, r16
    86f8:	11 1f       	adc	r17, r17
    86fa:	00 0f       	add	r16, r16
    86fc:	11 1f       	adc	r17, r17
    86fe:	f8 01       	movw	r30, r16
    8700:	e7 57       	subi	r30, 0x77	; 119
    8702:	f6 4f       	sbci	r31, 0xF6	; 246
    8704:	40 81       	ld	r20, Z
    8706:	51 81       	ldd	r21, Z+1	; 0x01
    8708:	62 81       	ldd	r22, Z+2	; 0x02
    870a:	73 81       	ldd	r23, Z+3	; 0x03
    870c:	ce 01       	movw	r24, r28
    870e:	80 5a       	subi	r24, 0xA0	; 160
    8710:	9e 4f       	sbci	r25, 0xFE	; 254
    8712:	0e 94 60 84 	call	0x108c0	; 0x108c0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    8716:	f8 01       	movw	r30, r16
    8718:	e3 56       	subi	r30, 0x63	; 99
    871a:	f6 4f       	sbci	r31, 0xF6	; 246
    871c:	40 81       	ld	r20, Z
    871e:	51 81       	ldd	r21, Z+1	; 0x01
    8720:	62 81       	ldd	r22, Z+2	; 0x02
    8722:	73 81       	ldd	r23, Z+3	; 0x03
    8724:	ce 01       	movw	r24, r28
    8726:	8c 59       	subi	r24, 0x9C	; 156
    8728:	9e 4f       	sbci	r25, 0xFE	; 254
    872a:	0e 94 60 84 	call	0x108c0	; 0x108c0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:236
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    872e:	f8 01       	movw	r30, r16
    8730:	ef 54       	subi	r30, 0x4F	; 79
    8732:	f6 4f       	sbci	r31, 0xF6	; 246
    8734:	40 81       	ld	r20, Z
    8736:	51 81       	ldd	r21, Z+1	; 0x01
    8738:	62 81       	ldd	r22, Z+2	; 0x02
    873a:	73 81       	ldd	r23, Z+3	; 0x03
    873c:	ce 01       	movw	r24, r28
    873e:	88 59       	subi	r24, 0x98	; 152
    8740:	9e 4f       	sbci	r25, 0xFE	; 254
    8742:	0e 94 60 84 	call	0x108c0	; 0x108c0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:237
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    8746:	f7 01       	movw	r30, r14
    8748:	eb 53       	subi	r30, 0x3B	; 59
    874a:	f6 4f       	sbci	r31, 0xF6	; 246
    874c:	60 81       	ld	r22, Z
    874e:	ce 01       	movw	r24, r28
    8750:	84 59       	subi	r24, 0x94	; 148
    8752:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:238
}
    8754:	df 91       	pop	r29
    8756:	cf 91       	pop	r28
    8758:	1f 91       	pop	r17
    875a:	0f 91       	pop	r16
    875c:	ff 90       	pop	r15
    875e:	ef 90       	pop	r14
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:237
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    8760:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00008764 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    8764:	1f 93       	push	r17
    8766:	cf 93       	push	r28
    8768:	df 93       	push	r29
    876a:	16 2f       	mov	r17, r22
    876c:	67 2f       	mov	r22, r23
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    876e:	91 e2       	ldi	r25, 0x21	; 33
    8770:	89 9f       	mul	r24, r25
    8772:	e0 01       	movw	r28, r0
    8774:	11 24       	eor	r1, r1
    8776:	ce 01       	movw	r24, r28
    8778:	8a 5a       	subi	r24, 0xAA	; 170
    877a:	9e 4f       	sbci	r25, 0xFE	; 254
    877c:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    8780:	61 2f       	mov	r22, r17
    8782:	ce 01       	movw	r24, r28
    8784:	89 5a       	subi	r24, 0xA9	; 169
    8786:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:160
}
    8788:	df 91       	pop	r29
    878a:	cf 91       	pop	r28
    878c:	1f 91       	pop	r17
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    878e:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00008792 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    8792:	df 92       	push	r13
    8794:	ef 92       	push	r14
    8796:	ff 92       	push	r15
    8798:	0f 93       	push	r16
    879a:	1f 93       	push	r17
    879c:	cf 93       	push	r28
    879e:	df 93       	push	r29
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    87a0:	91 e2       	ldi	r25, 0x21	; 33
    87a2:	89 9f       	mul	r24, r25
    87a4:	e0 01       	movw	r28, r0
    87a6:	11 24       	eor	r1, r1
    87a8:	7b 01       	movw	r14, r22
    87aa:	8e 01       	movw	r16, r28
    87ac:	04 5b       	subi	r16, 0xB4	; 180
    87ae:	1e 4f       	sbci	r17, 0xFE	; 254
    87b0:	cb 5a       	subi	r28, 0xAB	; 171
    87b2:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    87b4:	f7 01       	movw	r30, r14
    87b6:	d1 90       	ld	r13, Z+
    87b8:	7f 01       	movw	r14, r30
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    87ba:	6d 2d       	mov	r22, r13
    87bc:	c8 01       	movw	r24, r16
    87be:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    87c2:	dd 20       	and	r13, r13
    87c4:	29 f0       	breq	.+10     	; 0x87d0 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    87c6:	0f 5f       	subi	r16, 0xFF	; 255
    87c8:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    87ca:	0c 17       	cp	r16, r28
    87cc:	1d 07       	cpc	r17, r29
    87ce:	91 f7       	brne	.-28     	; 0x87b4 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    87d0:	df 91       	pop	r29
    87d2:	cf 91       	pop	r28
    87d4:	1f 91       	pop	r17
    87d6:	0f 91       	pop	r16
    87d8:	ff 90       	pop	r15
    87da:	ef 90       	pop	r14
    87dc:	df 90       	pop	r13
    87de:	08 95       	ret

000087e0 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:419
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    87e0:	8f 92       	push	r8
    87e2:	9f 92       	push	r9
    87e4:	af 92       	push	r10
    87e6:	bf 92       	push	r11
    87e8:	ef 92       	push	r14
    87ea:	ff 92       	push	r15
    87ec:	0f 93       	push	r16
    87ee:	1f 93       	push	r17
    87f0:	cf 93       	push	r28
    87f2:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    87f4:	e8 2e       	mov	r14, r24
    87f6:	f1 2c       	mov	r15, r1
    87f8:	87 01       	movw	r16, r14
    87fa:	00 0f       	add	r16, r16
    87fc:	11 1f       	adc	r17, r17
    87fe:	00 0f       	add	r16, r16
    8800:	11 1f       	adc	r17, r17
    8802:	f8 01       	movw	r30, r16
    8804:	e7 57       	subi	r30, 0x77	; 119
    8806:	f6 4f       	sbci	r31, 0xF6	; 246
    8808:	81 2c       	mov	r8, r1
    880a:	91 2c       	mov	r9, r1
    880c:	90 e8       	ldi	r25, 0x80	; 128
    880e:	a9 2e       	mov	r10, r25
    8810:	9f e3       	ldi	r25, 0x3F	; 63
    8812:	b9 2e       	mov	r11, r25
    8814:	80 82       	st	Z, r8
    8816:	91 82       	std	Z+1, r9	; 0x01
    8818:	a2 82       	std	Z+2, r10	; 0x02
    881a:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    881c:	8c 2f       	mov	r24, r28
    881e:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    8822:	8c 2f       	mov	r24, r28
    8824:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    8828:	f8 01       	movw	r30, r16
    882a:	e3 56       	subi	r30, 0x63	; 99
    882c:	f6 4f       	sbci	r31, 0xF6	; 246
    882e:	80 e0       	ldi	r24, 0x00	; 0
    8830:	90 e0       	ldi	r25, 0x00	; 0
    8832:	a0 e0       	ldi	r26, 0x00	; 0
    8834:	bf e3       	ldi	r27, 0x3F	; 63
    8836:	80 83       	st	Z, r24
    8838:	91 83       	std	Z+1, r25	; 0x01
    883a:	a2 83       	std	Z+2, r26	; 0x02
    883c:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    883e:	8c 2f       	mov	r24, r28
    8840:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    8844:	8c 2f       	mov	r24, r28
    8846:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    884a:	f8 01       	movw	r30, r16
    884c:	ef 54       	subi	r30, 0x4F	; 79
    884e:	f6 4f       	sbci	r31, 0xF6	; 246
    8850:	80 82       	st	Z, r8
    8852:	91 82       	std	Z+1, r9	; 0x01
    8854:	a2 82       	std	Z+2, r10	; 0x02
    8856:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    8858:	8c 2f       	mov	r24, r28
    885a:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    885e:	8c 2f       	mov	r24, r28
    8860:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    8864:	f7 01       	movw	r30, r14
    8866:	eb 53       	subi	r30, 0x3B	; 59
    8868:	f6 4f       	sbci	r31, 0xF6	; 246
    886a:	8c e3       	ldi	r24, 0x3C	; 60
    886c:	80 83       	st	Z, r24
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    886e:	8c 2f       	mov	r24, r28
    8870:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    8874:	8c 2f       	mov	r24, r28
    8876:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    887a:	81 e2       	ldi	r24, 0x21	; 33
    887c:	c8 9f       	mul	r28, r24
    887e:	80 01       	movw	r16, r0
    8880:	11 24       	eor	r1, r1
    8882:	6f ef       	ldi	r22, 0xFF	; 255
    8884:	c8 01       	movw	r24, r16
    8886:	84 5a       	subi	r24, 0xA4	; 164
    8888:	9e 4f       	sbci	r25, 0xFE	; 254
    888a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:425
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    888e:	6c ed       	ldi	r22, 0xDC	; 220
    8890:	70 e0       	ldi	r23, 0x00	; 0
    8892:	8c 2f       	mov	r24, r28
    8894:	0e 94 b2 43 	call	0x8764	; 0x8764 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    8898:	6f ef       	ldi	r22, 0xFF	; 255
    889a:	c8 01       	movw	r24, r16
    889c:	85 5a       	subi	r24, 0xA5	; 165
    889e:	9e 4f       	sbci	r25, 0xFE	; 254
    88a0:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_state():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    88a4:	f7 01       	movw	r30, r14
    88a6:	ef 5d       	subi	r30, 0xDF	; 223
    88a8:	f5 4f       	sbci	r31, 0xF5	; 245
    88aa:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    88ac:	6f ef       	ldi	r22, 0xFF	; 255
    88ae:	c8 01       	movw	r24, r16
    88b0:	83 5a       	subi	r24, 0xA3	; 163
    88b2:	9e 4f       	sbci	r25, 0xFE	; 254
    88b4:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_output():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    88b8:	6f ef       	ldi	r22, 0xFF	; 255
    88ba:	c8 01       	movw	r24, r16
    88bc:	81 5a       	subi	r24, 0xA1	; 161
    88be:	9e 4f       	sbci	r25, 0xFE	; 254
    88c0:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
thermostat_ring_set_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    88c4:	60 e0       	ldi	r22, 0x00	; 0
    88c6:	c8 01       	movw	r24, r16
    88c8:	82 5a       	subi	r24, 0xA2	; 162
    88ca:	9e 4f       	sbci	r25, 0xFE	; 254
    88cc:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
    88d0:	62 e6       	ldi	r22, 0x62	; 98
    88d2:	73 e0       	ldi	r23, 0x03	; 3
    88d4:	8c 2f       	mov	r24, r28
    88d6:	0e 94 c9 43 	call	0x8792	; 0x8792 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    88da:	60 e0       	ldi	r22, 0x00	; 0
    88dc:	c8 01       	movw	r24, r16
    88de:	88 5a       	subi	r24, 0xA8	; 168
    88e0:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:434
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    88e2:	cf 91       	pop	r28
    88e4:	1f 91       	pop	r17
    88e6:	0f 91       	pop	r16
    88e8:	ff 90       	pop	r15
    88ea:	ef 90       	pop	r14
    88ec:	bf 90       	pop	r11
    88ee:	af 90       	pop	r10
    88f0:	9f 90       	pop	r9
    88f2:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    88f4:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

000088f8 <click_thermostat_default_ring_set_mode(unsigned char)>:
_Z38click_thermostat_default_ring_set_modeh():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    88f8:	20 91 20 0a 	lds	r18, 0x0A20	; 0x800a20 <default_ring>
    88fc:	91 e2       	ldi	r25, 0x21	; 33
    88fe:	29 9f       	mul	r18, r25
    8900:	90 01       	movw	r18, r0
    8902:	11 24       	eor	r1, r1
    8904:	68 2f       	mov	r22, r24
    8906:	c9 01       	movw	r24, r18
    8908:	82 5a       	subi	r24, 0xA2	; 162
    890a:	9e 4f       	sbci	r25, 0xFE	; 254
    890c:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
  return ret;
}
uint8_t click_thermostat_default_ring_set_mode(uint8_t args)
{
  thermostat_ring_set_mode(default_ring, args);
  change_term_mode = 1;
    8910:	81 e0       	ldi	r24, 0x01	; 1
    8912:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
}
    8916:	08 95       	ret

00008918 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:46
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    8918:	af 92       	push	r10
    891a:	bf 92       	push	r11
    891c:	cf 92       	push	r12
    891e:	df 92       	push	r13
    8920:	ef 92       	push	r14
    8922:	ff 92       	push	r15
    8924:	0f 93       	push	r16
    8926:	1f 93       	push	r17
    8928:	cf 93       	push	r28
    892a:	df 93       	push	r29
    892c:	7b 01       	movw	r14, r22
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:47
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    892e:	96 e1       	ldi	r25, 0x16	; 22
    8930:	89 9f       	mul	r24, r25
    8932:	e0 01       	movw	r28, r0
    8934:	11 24       	eor	r1, r1
    8936:	f7 01       	movw	r30, r14
    8938:	61 91       	ld	r22, Z+
    893a:	6f 01       	movw	r12, r30
    893c:	ce 01       	movw	r24, r28
    893e:	88 53       	subi	r24, 0x38	; 56
    8940:	9f 4f       	sbci	r25, 0xFF	; 255
    8942:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8946:	8e 01       	movw	r16, r28
    8948:	07 53       	subi	r16, 0x37	; 55
    894a:	1f 4f       	sbci	r17, 0xFF	; 255
    894c:	5e 01       	movw	r10, r28
    894e:	f1 ed       	ldi	r31, 0xD1	; 209
    8950:	af 0e       	add	r10, r31
    8952:	b1 1c       	adc	r11, r1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:50
  for (uint8_t m = 0; m < 8; m++)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    8954:	f6 01       	movw	r30, r12
    8956:	61 91       	ld	r22, Z+
    8958:	6f 01       	movw	r12, r30
    895a:	c8 01       	movw	r24, r16
    895c:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:51
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    8960:	f6 01       	movw	r30, r12
    8962:	62 85       	ldd	r22, Z+10	; 0x0a
    8964:	c8 01       	movw	r24, r16
    8966:	0b 96       	adiw	r24, 0x0b	; 11
    8968:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    896c:	0f 5f       	subi	r16, 0xFF	; 255
    896e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:48
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
  for (uint8_t m = 0; m < 8; m++)
    8970:	0a 15       	cp	r16, r10
    8972:	1b 05       	cpc	r17, r11
    8974:	79 f7       	brne	.-34     	; 0x8954 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x3c>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:53
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
  }
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    8976:	f7 01       	movw	r30, r14
    8978:	61 85       	ldd	r22, Z+9	; 0x09
    897a:	c8 01       	movw	r24, r16
    897c:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:54
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    8980:	f7 01       	movw	r30, r14
    8982:	63 85       	ldd	r22, Z+11	; 0x0b
    8984:	ce 01       	movw	r24, r28
    8986:	8e 52       	subi	r24, 0x2E	; 46
    8988:	9f 4f       	sbci	r25, 0xFF	; 255
    898a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:55
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    898e:	f7 01       	movw	r30, r14
    8990:	62 85       	ldd	r22, Z+10	; 0x0a
    8992:	ce 01       	movw	r24, r28
    8994:	8d 52       	subi	r24, 0x2D	; 45
    8996:	9f 4f       	sbci	r25, 0xFF	; 255
    8998:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:56
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    899c:	f7 01       	movw	r30, r14
    899e:	64 89       	ldd	r22, Z+20	; 0x14
    89a0:	ce 01       	movw	r24, r28
    89a2:	84 52       	subi	r24, 0x24	; 36
    89a4:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:57
}
    89a6:	df 91       	pop	r29
    89a8:	cf 91       	pop	r28
    89aa:	1f 91       	pop	r17
    89ac:	0f 91       	pop	r16
    89ae:	ff 90       	pop	r15
    89b0:	ef 90       	pop	r14
    89b2:	df 90       	pop	r13
    89b4:	cf 90       	pop	r12
    89b6:	bf 90       	pop	r11
    89b8:	af 90       	pop	r10
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:56
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
  }
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
  EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    89ba:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

000089be <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    89be:	ff 92       	push	r15
    89c0:	0f 93       	push	r16
    89c2:	1f 93       	push	r17
    89c4:	cf 93       	push	r28
    89c6:	df 93       	push	r29
    89c8:	8c 01       	movw	r16, r24
    89ca:	d0 e0       	ldi	r29, 0x00	; 0
    89cc:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    89ce:	f8 01       	movw	r30, r16
    89d0:	f1 90       	ld	r15, Z+
    89d2:	8f 01       	movw	r16, r30
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    89d4:	6f 2d       	mov	r22, r15
    89d6:	ce 01       	movw	r24, r28
    89d8:	8c 59       	subi	r24, 0x9C	; 156
    89da:	9f 4f       	sbci	r25, 0xFF	; 255
    89dc:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    89e0:	f1 10       	cpse	r15, r1
    89e2:	0b c0       	rjmp	.+22     	; 0x89fa <device_set_name(char*)+0x3c>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    89e4:	60 e0       	ldi	r22, 0x00	; 0
    89e6:	ce 01       	movw	r24, r28
    89e8:	8b 59       	subi	r24, 0x9B	; 155
    89ea:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    89ec:	df 91       	pop	r29
    89ee:	cf 91       	pop	r28
    89f0:	1f 91       	pop	r17
    89f2:	0f 91       	pop	r16
    89f4:	ff 90       	pop	r15
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    89f6:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    89fa:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    89fc:	c9 30       	cpi	r28, 0x09	; 9
    89fe:	d1 05       	cpc	r29, r1
    8a00:	31 f7       	brne	.-52     	; 0x89ce <device_set_name(char*)+0x10>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    8a02:	df 91       	pop	r29
    8a04:	cf 91       	pop	r28
    8a06:	1f 91       	pop	r17
    8a08:	0f 91       	pop	r16
    8a0a:	ff 90       	pop	r15
    8a0c:	08 95       	ret

00008a0e <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    8a0e:	ef 92       	push	r14
    8a10:	ff 92       	push	r15
    8a12:	0f 93       	push	r16
    8a14:	1f 93       	push	r17
    8a16:	cf 93       	push	r28
    8a18:	df 93       	push	r29
    8a1a:	0e e2       	ldi	r16, 0x2E	; 46
    8a1c:	1c e0       	ldi	r17, 0x0C	; 12
    8a1e:	ce e6       	ldi	r28, 0x6E	; 110
    8a20:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    8a22:	f8 01       	movw	r30, r16
    8a24:	61 91       	ld	r22, Z+
    8a26:	8f 01       	movw	r16, r30
    8a28:	ce 01       	movw	r24, r28
    8a2a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8a2e:	21 96       	adiw	r28, 0x01	; 1
    8a30:	c4 37       	cpi	r28, 0x74	; 116
    8a32:	d1 05       	cpc	r29, r1
    8a34:	b1 f7       	brne	.-20     	; 0x8a22 <save_setup_network()+0x14>
    8a36:	04 e3       	ldi	r16, 0x34	; 52
    8a38:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    8a3a:	f8 01       	movw	r30, r16
    8a3c:	61 91       	ld	r22, Z+
    8a3e:	8f 01       	movw	r16, r30
    8a40:	ce 01       	movw	r24, r28
    8a42:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8a46:	21 96       	adiw	r28, 0x01	; 1
    8a48:	c8 37       	cpi	r28, 0x78	; 120
    8a4a:	d1 05       	cpc	r29, r1
    8a4c:	b1 f7       	brne	.-20     	; 0x8a3a <save_setup_network()+0x2c>
    8a4e:	08 e3       	ldi	r16, 0x38	; 56
    8a50:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    8a52:	f8 01       	movw	r30, r16
    8a54:	61 91       	ld	r22, Z+
    8a56:	8f 01       	movw	r16, r30
    8a58:	ce 01       	movw	r24, r28
    8a5a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8a5e:	21 96       	adiw	r28, 0x01	; 1
    8a60:	cc 37       	cpi	r28, 0x7C	; 124
    8a62:	d1 05       	cpc	r29, r1
    8a64:	b1 f7       	brne	.-20     	; 0x8a52 <save_setup_network()+0x44>
    8a66:	20 e4       	ldi	r18, 0x40	; 64
    8a68:	e2 2e       	mov	r14, r18
    8a6a:	2c e0       	ldi	r18, 0x0C	; 12
    8a6c:	f2 2e       	mov	r15, r18
    8a6e:	00 e8       	ldi	r16, 0x80	; 128
    8a70:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    8a72:	f7 01       	movw	r30, r14
    8a74:	61 91       	ld	r22, Z+
    8a76:	7f 01       	movw	r14, r30
    8a78:	c8 01       	movw	r24, r16
    8a7a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8a7e:	0f 5f       	subi	r16, 0xFF	; 255
    8a80:	1f 4f       	sbci	r17, 0xFF	; 255
    8a82:	04 38       	cpi	r16, 0x84	; 132
    8a84:	11 05       	cpc	r17, r1
    8a86:	a9 f7       	brne	.-22     	; 0x8a72 <save_setup_network()+0x64>
    8a88:	9c e3       	ldi	r25, 0x3C	; 60
    8a8a:	e9 2e       	mov	r14, r25
    8a8c:	9c e0       	ldi	r25, 0x0C	; 12
    8a8e:	f9 2e       	mov	r15, r25
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    8a90:	f7 01       	movw	r30, r14
    8a92:	61 91       	ld	r22, Z+
    8a94:	7f 01       	movw	r14, r30
    8a96:	ce 01       	movw	r24, r28
    8a98:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8a9c:	21 96       	adiw	r28, 0x01	; 1
    8a9e:	c0 38       	cpi	r28, 0x80	; 128
    8aa0:	d1 05       	cpc	r29, r1
    8aa2:	b1 f7       	brne	.-20     	; 0x8a90 <save_setup_network()+0x82>
    8aa4:	84 e4       	ldi	r24, 0x44	; 68
    8aa6:	e8 2e       	mov	r14, r24
    8aa8:	8c e0       	ldi	r24, 0x0C	; 12
    8aaa:	f8 2e       	mov	r15, r24
    8aac:	c4 e6       	ldi	r28, 0x64	; 100
    8aae:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    8ab0:	f7 01       	movw	r30, r14
    8ab2:	61 91       	ld	r22, Z+
    8ab4:	7f 01       	movw	r14, r30
    8ab6:	ce 01       	movw	r24, r28
    8ab8:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8abc:	21 96       	adiw	r28, 0x01	; 1
    8abe:	cd 36       	cpi	r28, 0x6D	; 109
    8ac0:	d1 05       	cpc	r29, r1
    8ac2:	b1 f7       	brne	.-20     	; 0x8ab0 <save_setup_network()+0xa2>
    8ac4:	ce e4       	ldi	r28, 0x4E	; 78
    8ac6:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    8ac8:	69 91       	ld	r22, Y+
    8aca:	c8 01       	movw	r24, r16
    8acc:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8ad0:	0f 5f       	subi	r16, 0xFF	; 255
    8ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ad4:	08 38       	cpi	r16, 0x88	; 136
    8ad6:	11 05       	cpc	r17, r1
    8ad8:	b9 f7       	brne	.-18     	; 0x8ac8 <save_setup_network()+0xba>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    8ada:	60 91 53 0c 	lds	r22, 0x0C53	; 0x800c53 <device+0x25>
    8ade:	88 e8       	ldi	r24, 0x88	; 136
    8ae0:	90 e0       	ldi	r25, 0x00	; 0
    8ae2:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    8ae6:	60 91 52 0c 	lds	r22, 0x0C52	; 0x800c52 <device+0x24>
    8aea:	89 e8       	ldi	r24, 0x89	; 137
    8aec:	90 e0       	ldi	r25, 0x00	; 0
    8aee:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8af2:	04 e5       	ldi	r16, 0x54	; 84
    8af4:	1c e0       	ldi	r17, 0x0C	; 12
    8af6:	ca e8       	ldi	r28, 0x8A	; 138
    8af8:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    8afa:	f8 01       	movw	r30, r16
    8afc:	61 91       	ld	r22, Z+
    8afe:	8f 01       	movw	r16, r30
    8b00:	ce 01       	movw	r24, r28
    8b02:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8b06:	21 96       	adiw	r28, 0x01	; 1
    8b08:	ce 39       	cpi	r28, 0x9E	; 158
    8b0a:	d1 05       	cpc	r29, r1
    8b0c:	b1 f7       	brne	.-20     	; 0x8afa <save_setup_network()+0xec>
    8b0e:	08 e6       	ldi	r16, 0x68	; 104
    8b10:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    8b12:	f8 01       	movw	r30, r16
    8b14:	61 91       	ld	r22, Z+
    8b16:	8f 01       	movw	r16, r30
    8b18:	ce 01       	movw	r24, r28
    8b1a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8b1e:	21 96       	adiw	r28, 0x01	; 1
    8b20:	c2 3b       	cpi	r28, 0xB2	; 178
    8b22:	d1 05       	cpc	r29, r1
    8b24:	b1 f7       	brne	.-20     	; 0x8b12 <save_setup_network()+0x104>
    8b26:	0c e7       	ldi	r16, 0x7C	; 124
    8b28:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    8b2a:	f8 01       	movw	r30, r16
    8b2c:	61 91       	ld	r22, Z+
    8b2e:	8f 01       	movw	r16, r30
    8b30:	ce 01       	movw	r24, r28
    8b32:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    8b36:	21 96       	adiw	r28, 0x01	; 1
    8b38:	c6 3b       	cpi	r28, 0xB6	; 182
    8b3a:	d1 05       	cpc	r29, r1
    8b3c:	b1 f7       	brne	.-20     	; 0x8b2a <save_setup_network()+0x11c>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:54
}
    8b3e:	df 91       	pop	r29
    8b40:	cf 91       	pop	r28
    8b42:	1f 91       	pop	r17
    8b44:	0f 91       	pop	r16
    8b46:	ff 90       	pop	r15
    8b48:	ef 90       	pop	r14
    8b4a:	08 95       	ret

00008b4c <remote_tds_set_name(unsigned char, char*) [clone .part.15]>:
_Z19remote_tds_set_namehPc.part.15():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    8b4c:	df 92       	push	r13
    8b4e:	ef 92       	push	r14
    8b50:	ff 92       	push	r15
    8b52:	0f 93       	push	r16
    8b54:	1f 93       	push	r17
    8b56:	cf 93       	push	r28
    8b58:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
  {
    t = name[i];
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    8b5a:	94 e1       	ldi	r25, 0x14	; 20
    8b5c:	89 9f       	mul	r24, r25
    8b5e:	e0 01       	movw	r28, r0
    8b60:	11 24       	eor	r1, r1
    8b62:	7b 01       	movw	r14, r22
    8b64:	8e 01       	movw	r16, r28
    8b66:	06 55       	subi	r16, 0x56	; 86
    8b68:	1a 4f       	sbci	r17, 0xFA	; 250
    8b6a:	c3 54       	subi	r28, 0x43	; 67
    8b6c:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1740
{
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
  {
    t = name[i];
    8b6e:	f7 01       	movw	r30, r14
    8b70:	d1 90       	ld	r13, Z+
    8b72:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    8b74:	6d 2d       	mov	r22, r13
    8b76:	c8 01       	movw	r24, r16
    8b78:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
    if (t == 0) break;
    8b7c:	dd 20       	and	r13, r13
    8b7e:	29 f0       	breq	.+10     	; 0x8b8a <remote_tds_set_name(unsigned char, char*) [clone .part.15]+0x3e>
    8b80:	0f 5f       	subi	r16, 0xFF	; 255
    8b82:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char tmp2[64];
  char t;
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    8b84:	0c 17       	cp	r16, r28
    8b86:	1d 07       	cpc	r17, r29
    8b88:	91 f7       	brne	.-28     	; 0x8b6e <remote_tds_set_name(unsigned char, char*) [clone .part.15]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
  {
    t = name[i];
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    if (t == 0) break;
  }
}
    8b8a:	df 91       	pop	r29
    8b8c:	cf 91       	pop	r28
    8b8e:	1f 91       	pop	r17
    8b90:	0f 91       	pop	r16
    8b92:	ff 90       	pop	r15
    8b94:	ef 90       	pop	r14
    8b96:	df 90       	pop	r13
    8b98:	08 95       	ret

00008b9a <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
    remote_tds_subscibe_topic(idx);
  }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    8b9a:	1f 93       	push	r17
    8b9c:	cf 93       	push	r28
    8b9e:	df 93       	push	r29
    8ba0:	cd b7       	in	r28, 0x3d	; 61
    8ba2:	de b7       	in	r29, 0x3e	; 62
    8ba4:	63 97       	sbiw	r28, 0x13	; 19
    8ba6:	0f b6       	in	r0, 0x3f	; 63
    8ba8:	f8 94       	cli
    8baa:	de bf       	out	0x3e, r29	; 62
    8bac:	0f be       	out	0x3f, r0	; 63
    8bae:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1430
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    8bb0:	10 91 02 09 	lds	r17, 0x0902	; 0x800902 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    8bb4:	62 ef       	ldi	r22, 0xF2	; 242
    8bb6:	78 e0       	ldi	r23, 0x08	; 8
    8bb8:	ce 01       	movw	r24, r28
    8bba:	01 96       	adiw	r24, 0x01	; 1
    8bbc:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  if (strlen(name) > 0)
    8bc0:	89 81       	ldd	r24, Y+1	; 0x01
    8bc2:	88 23       	and	r24, r24
    8bc4:	31 f0       	breq	.+12     	; 0x8bd2 <menu_rtds_update_name(unsigned char, unsigned char)+0x38>
remote_tds_set_name():
    8bc6:	be 01       	movw	r22, r28
    8bc8:	6f 5f       	subi	r22, 0xFF	; 255
    8bca:	7f 4f       	sbci	r23, 0xFF	; 255
    8bcc:	81 2f       	mov	r24, r17
    8bce:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <remote_tds_set_name(unsigned char, char*) [clone .part.15]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
  {
    remote_tds_set_name(idx, name);
  }
}
    8bd2:	63 96       	adiw	r28, 0x13	; 19
    8bd4:	0f b6       	in	r0, 0x3f	; 63
    8bd6:	f8 94       	cli
    8bd8:	de bf       	out	0x3e, r29	; 62
    8bda:	0f be       	out	0x3f, r0	; 63
    8bdc:	cd bf       	out	0x3d, r28	; 61
    8bde:	df 91       	pop	r29
    8be0:	cf 91       	pop	r28
    8be2:	1f 91       	pop	r17
    8be4:	08 95       	ret

00008be6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
  }
  *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    8be6:	cf 93       	push	r28
    8be8:	df 93       	push	r29
    8bea:	c8 2f       	mov	r28, r24
    8bec:	d6 2f       	mov	r29, r22
remote_tds_set_name():
    8bee:	ba 01       	movw	r22, r20
    8bf0:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <remote_tds_set_name(unsigned char, char*) [clone .part.15]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1754
  *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    8bf4:	24 e1       	ldi	r18, 0x14	; 20
    8bf6:	c2 9f       	mul	r28, r18
    8bf8:	c0 01       	movw	r24, r0
    8bfa:	11 24       	eor	r1, r1
    8bfc:	6d 2f       	mov	r22, r29
    8bfe:	83 54       	subi	r24, 0x43	; 67
    8c00:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1732
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    8c02:	df 91       	pop	r29
    8c04:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1754
  *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    8c06:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>

00008c0a <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1758
}
///
void remote_tds_clear(uint8_t idx)
{
    8c0a:	cf 93       	push	r28
    8c0c:	df 93       	push	r29
    8c0e:	cd b7       	in	r28, 0x3d	; 61
    8c10:	de b7       	in	r29, 0x3e	; 62
    8c12:	63 97       	sbiw	r28, 0x13	; 19
    8c14:	0f b6       	in	r0, 0x3f	; 63
    8c16:	f8 94       	cli
    8c18:	de bf       	out	0x3e, r29	; 62
    8c1a:	0f be       	out	0x3f, r0	; 63
    8c1c:	cd bf       	out	0x3d, r28	; 61
    8c1e:	e1 e0       	ldi	r30, 0x01	; 1
    8c20:	f0 e0       	ldi	r31, 0x00	; 0
    8c22:	ec 0f       	add	r30, r28
    8c24:	fd 1f       	adc	r31, r29
    8c26:	e8 0f       	add	r30, r24
    8c28:	f1 1d       	adc	r31, r1
    8c2a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
  char rtds_name[RTDS_DEVICE_ACTIVE_BYTE_POS];
  for (uint8_t i = 0; i < RTDS_DEVICE_ACTIVE_BYTE_POS; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    8c2c:	ae 01       	movw	r20, r28
    8c2e:	4f 5f       	subi	r20, 0xFF	; 255
    8c30:	5f 4f       	sbci	r21, 0xFF	; 255
    8c32:	60 e0       	ldi	r22, 0x00	; 0
    8c34:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1763
}
    8c38:	63 96       	adiw	r28, 0x13	; 19
    8c3a:	0f b6       	in	r0, 0x3f	; 63
    8c3c:	f8 94       	cli
    8c3e:	de bf       	out	0x3e, r29	; 62
    8c40:	0f be       	out	0x3f, r0	; 63
    8c42:	cd bf       	out	0x3d, r28	; 61
    8c44:	df 91       	pop	r29
    8c46:	cf 91       	pop	r28
    8c48:	08 95       	ret

00008c4a <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    8c4a:	cf 93       	push	r28
    8c4c:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120
  printf("mazu rtds args1:%d args2:%d\n", args1, args2);
    8c4e:	1f 92       	push	r1
    8c50:	6f 93       	push	r22
    8c52:	1f 92       	push	r1
    8c54:	8f 93       	push	r24
    8c56:	87 e6       	ldi	r24, 0x67	; 103
    8c58:	93 e0       	ldi	r25, 0x03	; 3
    8c5a:	9f 93       	push	r25
    8c5c:	8f 93       	push	r24
    8c5e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
  remote_tds_clear(args2);
    8c62:	8c 2f       	mov	r24, r28
    8c64:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
  MenuHistoryPrevMenu();
    8c68:	0f 90       	pop	r0
    8c6a:	0f 90       	pop	r0
    8c6c:	0f 90       	pop	r0
    8c6e:	0f 90       	pop	r0
    8c70:	0f 90       	pop	r0
    8c72:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
}
    8c74:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
  printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
    8c76:	0c 94 31 29 	jmp	0x5262	; 0x5262 <MenuHistoryPrevMenu()>

00008c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:26
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
  return cnt;
}
/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    8c7a:	af 92       	push	r10
    8c7c:	bf 92       	push	r11
    8c7e:	cf 92       	push	r12
    8c80:	df 92       	push	r13
    8c82:	ef 92       	push	r14
    8c84:	ff 92       	push	r15
    8c86:	0f 93       	push	r16
    8c88:	1f 93       	push	r17
    8c8a:	cf 93       	push	r28
    8c8c:	df 93       	push	r29
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:28
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    8c8e:	86 30       	cpi	r24, 0x06	; 6
    8c90:	08 f0       	brcs	.+2      	; 0x8c94 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    8c92:	56 c0       	rjmp	.+172    	; 0x8d40 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    8c94:	8b 01       	movw	r16, r22
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:30
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    8c96:	96 e1       	ldi	r25, 0x16	; 22
    8c98:	89 9f       	mul	r24, r25
    8c9a:	e0 01       	movw	r28, r0
    8c9c:	11 24       	eor	r1, r1
    8c9e:	ce 01       	movw	r24, r28
    8ca0:	88 53       	subi	r24, 0x38	; 56
    8ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ca4:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8ca8:	f8 01       	movw	r30, r16
    8caa:	81 93       	st	Z+, r24
    8cac:	6f 01       	movw	r12, r30
    8cae:	7e 01       	movw	r14, r28
    8cb0:	f9 ec       	ldi	r31, 0xC9	; 201
    8cb2:	ef 0e       	add	r14, r31
    8cb4:	f1 1c       	adc	r15, r1
    8cb6:	5e 01       	movw	r10, r28
    8cb8:	81 ed       	ldi	r24, 0xD1	; 209
    8cba:	a8 0e       	add	r10, r24
    8cbc:	b1 1c       	adc	r11, r1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:33
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    8cbe:	c7 01       	movw	r24, r14
    8cc0:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8cc4:	f6 01       	movw	r30, r12
    8cc6:	81 93       	st	Z+, r24
    8cc8:	6f 01       	movw	r12, r30
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:34
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    8cca:	c7 01       	movw	r24, r14
    8ccc:	0b 96       	adiw	r24, 0x0b	; 11
    8cce:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8cd2:	f6 01       	movw	r30, r12
    8cd4:	82 87       	std	Z+10, r24	; 0x0a
    8cd6:	ff ef       	ldi	r31, 0xFF	; 255
    8cd8:	ef 1a       	sub	r14, r31
    8cda:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:31
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    8cdc:	ea 14       	cp	r14, r10
    8cde:	fb 04       	cpc	r15, r11
    8ce0:	71 f7       	brne	.-36     	; 0x8cbe <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:36
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    8ce2:	f8 01       	movw	r30, r16
    8ce4:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:37
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    8ce6:	c7 01       	movw	r24, r14
    8ce8:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8cec:	f8 01       	movw	r30, r16
    8cee:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:38
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    8cf0:	ce 01       	movw	r24, r28
    8cf2:	8e 52       	subi	r24, 0x2E	; 46
    8cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    8cf6:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8cfa:	f8 2e       	mov	r15, r24
    8cfc:	ce 01       	movw	r24, r28
    8cfe:	8d 52       	subi	r24, 0x2D	; 45
    8d00:	9f 4f       	sbci	r25, 0xFF	; 255
    8d02:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8d06:	2f 2d       	mov	r18, r15
    8d08:	30 e0       	ldi	r19, 0x00	; 0
    8d0a:	32 2f       	mov	r19, r18
    8d0c:	22 27       	eor	r18, r18
    8d0e:	82 0f       	add	r24, r18
    8d10:	93 2f       	mov	r25, r19
    8d12:	91 1d       	adc	r25, r1
    8d14:	f8 01       	movw	r30, r16
    8d16:	93 87       	std	Z+11, r25	; 0x0b
    8d18:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:39
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    8d1a:	ce 01       	movw	r24, r28
    8d1c:	84 52       	subi	r24, 0x24	; 36
    8d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8d20:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    8d24:	f8 01       	movw	r30, r16
    8d26:	84 8b       	std	Z+20, r24	; 0x14
    8d28:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:43
    ret = 1;
  }
  return ret;
}
    8d2a:	df 91       	pop	r29
    8d2c:	cf 91       	pop	r28
    8d2e:	1f 91       	pop	r17
    8d30:	0f 91       	pop	r16
    8d32:	ff 90       	pop	r15
    8d34:	ef 90       	pop	r14
    8d36:	df 90       	pop	r13
    8d38:	cf 90       	pop	r12
    8d3a:	bf 90       	pop	r11
    8d3c:	af 90       	pop	r10
    8d3e:	08 95       	ret
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:27
  return cnt;
}
/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    8d40:	80 e0       	ldi	r24, 0x00	; 0
    8d42:	f3 cf       	rjmp	.-26     	; 0x8d2a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

00008d44 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:129
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    8d44:	ef 92       	push	r14
    8d46:	ff 92       	push	r15
    8d48:	0f 93       	push	r16
    8d4a:	1f 93       	push	r17
    8d4c:	cf 93       	push	r28
    8d4e:	df 93       	push	r29
    8d50:	cd b7       	in	r28, 0x3d	; 61
    8d52:	de b7       	in	r29, 0x3e	; 62
    8d54:	6e 97       	sbiw	r28, 0x1e	; 30
    8d56:	0f b6       	in	r0, 0x3f	; 63
    8d58:	f8 94       	cli
    8d5a:	de bf       	out	0x3e, r29	; 62
    8d5c:	0f be       	out	0x3f, r0	; 63
    8d5e:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:132
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    8d60:	1f 8a       	std	Y+23, r1	; 0x17
    8d62:	18 8e       	std	Y+24, r1	; 0x18
    8d64:	19 8e       	std	Y+25, r1	; 0x19
    8d66:	1a 8e       	std	Y+26, r1	; 0x1a
    8d68:	1b 8e       	std	Y+27, r1	; 0x1b
    8d6a:	1c 8e       	std	Y+28, r1	; 0x1c
    8d6c:	1d 8e       	std	Y+29, r1	; 0x1d
    8d6e:	1e 8e       	std	Y+30, r1	; 0x1e
    8d70:	01 ed       	ldi	r16, 0xD1	; 209
    8d72:	19 e0       	ldi	r17, 0x09	; 9
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:136

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    8d74:	ee 24       	eor	r14, r14
    8d76:	ea 94       	dec	r14
    8d78:	f8 01       	movw	r30, r16
    8d7a:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:137
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    8d7c:	b8 01       	movw	r22, r16
    8d7e:	ce 01       	movw	r24, r28
    8d80:	47 96       	adiw	r24, 0x17	; 23
    8d82:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <tds_compare_rom(unsigned char*, unsigned char*)>
    8d86:	81 11       	cpse	r24, r1
    8d88:	14 c0       	rjmp	.+40     	; 0x8db2 <tds_update_associate()+0x6e>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:140
      continue;
    
    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    8d8a:	f1 2c       	mov	r15, r1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:142
    {
    get_tds18s20(tds_id, &tds);
    8d8c:	be 01       	movw	r22, r28
    8d8e:	6f 5f       	subi	r22, 0xFF	; 255
    8d90:	7f 4f       	sbci	r23, 0xFF	; 255
    8d92:	8f 2d       	mov	r24, r15
    8d94:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:143
    if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    8d98:	b8 01       	movw	r22, r16
    8d9a:	ce 01       	movw	r24, r28
    8d9c:	02 96       	adiw	r24, 0x02	; 2
    8d9e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <tds_compare_rom(unsigned char*, unsigned char*)>
    8da2:	88 23       	and	r24, r24
    8da4:	11 f0       	breq	.+4      	; 0x8daa <tds_update_associate()+0x66>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:144
        w_rom[wrom_id].tds_idx = tds_id;
    8da6:	f8 01       	movw	r30, r16
    8da8:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:140
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;
    
    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    8daa:	f3 94       	inc	r15
    8dac:	f6 e0       	ldi	r31, 0x06	; 6
    8dae:	ff 12       	cpse	r15, r31
    8db0:	ed cf       	rjmp	.-38     	; 0x8d8c <tds_update_associate()+0x48>
    8db2:	05 5f       	subi	r16, 0xF5	; 245
    8db4:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:134
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    8db6:	8a e0       	ldi	r24, 0x0A	; 10
    8db8:	03 31       	cpi	r16, 0x13	; 19
    8dba:	18 07       	cpc	r17, r24
    8dbc:	e9 f6       	brne	.-70     	; 0x8d78 <tds_update_associate()+0x34>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:147
    get_tds18s20(tds_id, &tds);
    if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    8dbe:	6e 96       	adiw	r28, 0x1e	; 30
    8dc0:	0f b6       	in	r0, 0x3f	; 63
    8dc2:	f8 94       	cli
    8dc4:	de bf       	out	0x3e, r29	; 62
    8dc6:	0f be       	out	0x3f, r0	; 63
    8dc8:	cd bf       	out	0x3d, r28	; 61
    8dca:	df 91       	pop	r29
    8dcc:	cf 91       	pop	r28
    8dce:	1f 91       	pop	r17
    8dd0:	0f 91       	pop	r16
    8dd2:	ff 90       	pop	r15
    8dd4:	ef 90       	pop	r14
    8dd6:	08 95       	ret

00008dd8 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:190
{
return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    8dd8:	af 92       	push	r10
    8dda:	bf 92       	push	r11
    8ddc:	cf 92       	push	r12
    8dde:	df 92       	push	r13
    8de0:	ef 92       	push	r14
    8de2:	ff 92       	push	r15
    8de4:	1f 93       	push	r17
    8de6:	cf 93       	push	r28
    8de8:	df 93       	push	r29
    8dea:	cd b7       	in	r28, 0x3d	; 61
    8dec:	de b7       	in	r29, 0x3e	; 62
    8dee:	66 97       	sbiw	r28, 0x16	; 22
    8df0:	0f b6       	in	r0, 0x3f	; 63
    8df2:	f8 94       	cli
    8df4:	de bf       	out	0x3e, r29	; 62
    8df6:	0f be       	out	0x3f, r0	; 63
    8df8:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:167
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    8dfa:	90 91 13 0a 	lds	r25, 0x0A13	; 0x800a13 <Global_HWwirenum>
    8dfe:	89 17       	cp	r24, r25
    8e00:	a0 f0       	brcs	.+40     	; 0x8e2a <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:191
return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    8e02:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:212
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    8e04:	0e 94 a2 46 	call	0x8d44	; 0x8d44 <tds_update_associate()>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:214
  return ret;
}
    8e08:	81 2f       	mov	r24, r17
    8e0a:	66 96       	adiw	r28, 0x16	; 22
    8e0c:	0f b6       	in	r0, 0x3f	; 63
    8e0e:	f8 94       	cli
    8e10:	de bf       	out	0x3e, r29	; 62
    8e12:	0f be       	out	0x3f, r0	; 63
    8e14:	cd bf       	out	0x3d, r28	; 61
    8e16:	df 91       	pop	r29
    8e18:	cf 91       	pop	r28
    8e1a:	1f 91       	pop	r17
    8e1c:	ff 90       	pop	r15
    8e1e:	ef 90       	pop	r14
    8e20:	df 90       	pop	r13
    8e22:	cf 90       	pop	r12
    8e24:	bf 90       	pop	r11
    8e26:	af 90       	pop	r10
    8e28:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:172
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    8e2a:	a8 2e       	mov	r10, r24
    8e2c:	b1 2c       	mov	r11, r1
    8e2e:	2b e0       	ldi	r18, 0x0B	; 11
    8e30:	82 9f       	mul	r24, r18
    8e32:	c0 01       	movw	r24, r0
    8e34:	11 24       	eor	r1, r1
    8e36:	fc 01       	movw	r30, r24
    8e38:	ef 52       	subi	r30, 0x2F	; 47
    8e3a:	f6 4f       	sbci	r31, 0xF6	; 246
    8e3c:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:169
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    8e3e:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:171
    {
      get_tds18s20(idx, &tds);
    8e40:	be 01       	movw	r22, r28
    8e42:	6f 5f       	subi	r22, 0xFF	; 255
    8e44:	7f 4f       	sbci	r23, 0xFF	; 255
    8e46:	81 2f       	mov	r24, r17
    8e48:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:172
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    8e4c:	b7 01       	movw	r22, r14
    8e4e:	ce 01       	movw	r24, r28
    8e50:	02 96       	adiw	r24, 0x02	; 2
    8e52:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <tds_compare_rom(unsigned char*, unsigned char*)>
    8e56:	81 11       	cpse	r24, r1
    8e58:	d4 cf       	rjmp	.-88     	; 0x8e02 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:169
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    8e5a:	1f 5f       	subi	r17, 0xFF	; 255
    8e5c:	16 30       	cpi	r17, 0x06	; 6
    8e5e:	81 f7       	brne	.-32     	; 0x8e40 <tds_associate(unsigned char)+0x68>
    8e60:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:198
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    8e62:	2b e0       	ldi	r18, 0x0B	; 11
    8e64:	2a 9d       	mul	r18, r10
    8e66:	c0 01       	movw	r24, r0
    8e68:	2b 9d       	mul	r18, r11
    8e6a:	90 0d       	add	r25, r0
    8e6c:	11 24       	eor	r1, r1
    8e6e:	fc 01       	movw	r30, r24
    8e70:	e6 52       	subi	r30, 0x26	; 38
    8e72:	f6 4f       	sbci	r31, 0xF6	; 246
    8e74:	6f 01       	movw	r12, r30
    8e76:	03 c0       	rjmp	.+6      	; 0x8e7e <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:195
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    8e78:	1f 5f       	subi	r17, 0xFF	; 255
    8e7a:	16 30       	cpi	r17, 0x06	; 6
    8e7c:	11 f2       	breq	.-124    	; 0x8e02 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:197
    {
      get_tds18s20(idx, &tds);
    8e7e:	be 01       	movw	r22, r28
    8e80:	6f 5f       	subi	r22, 0xFF	; 255
    8e82:	7f 4f       	sbci	r23, 0xFF	; 255
    8e84:	81 2f       	mov	r24, r17
    8e86:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:198
      if (tds.used == 0 && w_rom[id].used == 1)
    8e8a:	89 81       	ldd	r24, Y+1	; 0x01
    8e8c:	81 11       	cpse	r24, r1
    8e8e:	f4 cf       	rjmp	.-24     	; 0x8e78 <tds_associate(unsigned char)+0xa0>
    8e90:	f6 01       	movw	r30, r12
    8e92:	80 81       	ld	r24, Z
    8e94:	81 30       	cpi	r24, 0x01	; 1
    8e96:	81 f7       	brne	.-32     	; 0x8e78 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:200
      {
        tds.used = 1;
    8e98:	89 83       	std	Y+1, r24	; 0x01
    8e9a:	fe 01       	movw	r30, r28
    8e9c:	32 96       	adiw	r30, 0x02	; 2
    8e9e:	90 e0       	ldi	r25, 0x00	; 0
    8ea0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:202
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    8ea2:	d7 01       	movw	r26, r14
    8ea4:	a8 0f       	add	r26, r24
    8ea6:	b9 1f       	adc	r27, r25
    8ea8:	2c 91       	ld	r18, X
    8eaa:	21 93       	st	Z+, r18
    8eac:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:201
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    8eae:	88 30       	cpi	r24, 0x08	; 8
    8eb0:	91 05       	cpc	r25, r1
    8eb2:	b9 f7       	brne	.-18     	; 0x8ea2 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:203
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    8eb4:	2b e0       	ldi	r18, 0x0B	; 11
    8eb6:	12 9f       	mul	r17, r18
    8eb8:	f0 01       	movw	r30, r0
    8eba:	11 24       	eor	r1, r1
    8ebc:	ef 52       	subi	r30, 0x2F	; 47
    8ebe:	f6 4f       	sbci	r31, 0xF6	; 246
    8ec0:	e0 85       	ldd	r30, Z+8	; 0x08
    8ec2:	f0 e0       	ldi	r31, 0x00	; 0
    8ec4:	ee 0f       	add	r30, r30
    8ec6:	ff 1f       	adc	r31, r31
    8ec8:	e9 57       	subi	r30, 0x79	; 121
    8eca:	f6 4f       	sbci	r31, 0xF6	; 246
    8ecc:	80 81       	ld	r24, Z
    8ece:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:204
        set_tds18s20(idx, &tds);
    8ed0:	be 01       	movw	r22, r28
    8ed2:	6f 5f       	subi	r22, 0xFF	; 255
    8ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed6:	81 2f       	mov	r24, r17
    8ed8:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    8edc:	3e e1       	ldi	r19, 0x1E	; 30
    8ede:	13 9f       	mul	r17, r19
    8ee0:	a0 01       	movw	r20, r0
    8ee2:	11 24       	eor	r1, r1
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:206
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    8ee8:	20 e2       	ldi	r18, 0x20	; 32
    8eea:	3e e4       	ldi	r19, 0x4E	; 78
    8eec:	fc 01       	movw	r30, r24
    8eee:	ee 0f       	add	r30, r30
    8ef0:	ff 1f       	adc	r31, r31
    8ef2:	e4 0f       	add	r30, r20
    8ef4:	f5 1f       	adc	r31, r21
    8ef6:	e5 5d       	subi	r30, 0xD5	; 213
    8ef8:	f5 4f       	sbci	r31, 0xF5	; 245
    8efa:	30 87       	std	Z+8, r19	; 0x08
    8efc:	27 83       	std	Z+7, r18	; 0x07
    8efe:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:205
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    8f00:	8a 30       	cpi	r24, 0x0A	; 10
    8f02:	91 05       	cpc	r25, r1
    8f04:	99 f7       	brne	.-26     	; 0x8eec <tds_associate(unsigned char)+0x114>
    8f06:	7e cf       	rjmp	.-260    	; 0x8e04 <tds_associate(unsigned char)+0x2c>

00008f08 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:108
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    8f08:	1f 93       	push	r17
    8f0a:	cf 93       	push	r28
    8f0c:	df 93       	push	r29
    8f0e:	cd b7       	in	r28, 0x3d	; 61
    8f10:	de b7       	in	r29, 0x3e	; 62
    8f12:	66 97       	sbiw	r28, 0x16	; 22
    8f14:	0f b6       	in	r0, 0x3f	; 63
    8f16:	f8 94       	cli
    8f18:	de bf       	out	0x3e, r29	; 62
    8f1a:	0f be       	out	0x3f, r0	; 63
    8f1c:	cd bf       	out	0x3d, r28	; 61
    8f1e:	18 2f       	mov	r17, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:110
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    8f20:	be 01       	movw	r22, r28
    8f22:	6f 5f       	subi	r22, 0xFF	; 255
    8f24:	7f 4f       	sbci	r23, 0xFF	; 255
    8f26:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:111
  tds.used = 0;
    8f2a:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:112
  strcpy(tds.name, "FREE");
    8f2c:	62 e6       	ldi	r22, 0x62	; 98
    8f2e:	73 e0       	ldi	r23, 0x03	; 3
    8f30:	ce 01       	movw	r24, r28
    8f32:	0d 96       	adiw	r24, 0x0d	; 13
    8f34:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:113
  tds.offset = 0;
    8f38:	1c 86       	std	Y+12, r1	; 0x0c
    8f3a:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:114
  tds.period = 10;
    8f3c:	8a e0       	ldi	r24, 0x0A	; 10
    8f3e:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:116
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    8f40:	1a 82       	std	Y+2, r1	; 0x02
    8f42:	1b 82       	std	Y+3, r1	; 0x03
    8f44:	1c 82       	std	Y+4, r1	; 0x04
    8f46:	1d 82       	std	Y+5, r1	; 0x05
    8f48:	1e 82       	std	Y+6, r1	; 0x06
    8f4a:	1f 82       	std	Y+7, r1	; 0x07
    8f4c:	18 86       	std	Y+8, r1	; 0x08
    8f4e:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:117
  tds.assigned_ds2482 = 0;
    8f50:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:118
  set_tds18s20(idx, &tds);
    8f52:	be 01       	movw	r22, r28
    8f54:	6f 5f       	subi	r22, 0xFF	; 255
    8f56:	7f 4f       	sbci	r23, 0xFF	; 255
    8f58:	81 2f       	mov	r24, r17
    8f5a:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:119
  tds_update_associate();
    8f5e:	0e 94 a2 46 	call	0x8d44	; 0x8d44 <tds_update_associate()>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:120
}
    8f62:	66 96       	adiw	r28, 0x16	; 22
    8f64:	0f b6       	in	r0, 0x3f	; 63
    8f66:	f8 94       	cli
    8f68:	de bf       	out	0x3e, r29	; 62
    8f6a:	0f be       	out	0x3f, r0	; 63
    8f6c:	cd bf       	out	0x3d, r28	; 61
    8f6e:	df 91       	pop	r29
    8f70:	cf 91       	pop	r28
    8f72:	1f 91       	pop	r17
    8f74:	08 95       	ret

00008f76 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:124

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    8f76:	8b e0       	ldi	r24, 0x0B	; 11
    8f78:	68 9f       	mul	r22, r24
    8f7a:	f0 01       	movw	r30, r0
    8f7c:	11 24       	eor	r1, r1
    8f7e:	ef 52       	subi	r30, 0x2F	; 47
    8f80:	f6 4f       	sbci	r31, 0xF6	; 246
    8f82:	82 85       	ldd	r24, Z+10	; 0x0a
    8f84:	0e 94 84 47 	call	0x8f08	; 0x8f08 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4189
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    8f88:	0c 94 31 29 	jmp	0x5262	; 0x5262 <MenuHistoryPrevMenu()>

00008f8c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , char *line1, char *line2)
{
    8f8c:	8f 92       	push	r8
    8f8e:	9f 92       	push	r9
    8f90:	af 92       	push	r10
    8f92:	bf 92       	push	r11
    8f94:	cf 92       	push	r12
    8f96:	df 92       	push	r13
    8f98:	ef 92       	push	r14
    8f9a:	ff 92       	push	r15
    8f9c:	0f 93       	push	r16
    8f9e:	1f 93       	push	r17
    8fa0:	cf 93       	push	r28
    8fa2:	df 93       	push	r29
    8fa4:	cd b7       	in	r28, 0x3d	; 61
    8fa6:	de b7       	in	r29, 0x3e	; 62
    8fa8:	e0 97       	sbiw	r28, 0x30	; 48
    8faa:	0f b6       	in	r0, 0x3f	; 63
    8fac:	f8 94       	cli
    8fae:	de bf       	out	0x3e, r29	; 62
    8fb0:	0f be       	out	0x3f, r0	; 63
    8fb2:	cd bf       	out	0x3d, r28	; 61
    8fb4:	18 2f       	mov	r17, r24
    8fb6:	94 2e       	mov	r9, r20
    8fb8:	85 2e       	mov	r8, r21
    8fba:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  char str2[26];
  strcpy_P(line1, text_not_used);
    8fbc:	62 e7       	ldi	r22, 0x72	; 114
    8fbe:	78 e2       	ldi	r23, 0x28	; 40
    8fc0:	84 2f       	mov	r24, r20
    8fc2:	95 2f       	mov	r25, r21
    8fc4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4141
  strcpy(line2, "-");
    8fc8:	60 e5       	ldi	r22, 0x50	; 80
    8fca:	73 e0       	ldi	r23, 0x03	; 3
    8fcc:	c7 01       	movw	r24, r14
    8fce:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4142
  if (w_rom[args1].used == 1)
    8fd2:	4b e0       	ldi	r20, 0x0B	; 11
    8fd4:	41 9f       	mul	r20, r17
    8fd6:	c0 01       	movw	r24, r0
    8fd8:	11 24       	eor	r1, r1
    8fda:	9c 01       	movw	r18, r24
    8fdc:	2f 52       	subi	r18, 0x2F	; 47
    8fde:	36 4f       	sbci	r19, 0xF6	; 246
    8fe0:	69 01       	movw	r12, r18
    8fe2:	f9 01       	movw	r30, r18
    8fe4:	81 85       	ldd	r24, Z+9	; 0x09
    8fe6:	81 30       	cpi	r24, 0x01	; 1
    8fe8:	c9 f5       	brne	.+114    	; 0x905c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    8fea:	a9 01       	movw	r20, r18
    8fec:	00 e1       	ldi	r16, 0x10	; 16
    8fee:	28 e0       	ldi	r18, 0x08	; 8
    8ff0:	6a e3       	ldi	r22, 0x3A	; 58
    8ff2:	ce 01       	movw	r24, r28
    8ff4:	01 96       	adiw	r24, 0x01	; 1
    8ff6:	5c 01       	movw	r10, r24
    8ff8:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4145
    sprintf(line1, "%d: %s", args1, str2);
    8ffc:	bf 92       	push	r11
    8ffe:	af 92       	push	r10
    9000:	1f 92       	push	r1
    9002:	1f 93       	push	r17
    9004:	84 e8       	ldi	r24, 0x84	; 132
    9006:	93 e0       	ldi	r25, 0x03	; 3
    9008:	9f 93       	push	r25
    900a:	8f 93       	push	r24
    900c:	8f 92       	push	r8
    900e:	9f 92       	push	r9
    9010:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147

    if (w_rom[args1].tds_idx != 255)
    9014:	0f b6       	in	r0, 0x3f	; 63
    9016:	f8 94       	cli
    9018:	de bf       	out	0x3e, r29	; 62
    901a:	0f be       	out	0x3f, r0	; 63
    901c:	cd bf       	out	0x3d, r28	; 61
    901e:	f6 01       	movw	r30, r12
    9020:	82 85       	ldd	r24, Z+10	; 0x0a
    9022:	8f 3f       	cpi	r24, 0xFF	; 255
    9024:	71 f1       	breq	.+92     	; 0x9082 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4149
    {
      strcpy_P(line2, text_nastavit_tds);
    9026:	6f e5       	ldi	r22, 0x5F	; 95
    9028:	78 e2       	ldi	r23, 0x28	; 40
    902a:	c7 01       	movw	r24, r14
    902c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
tds_get_name():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:63

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    9030:	be 01       	movw	r22, r28
    9032:	65 5e       	subi	r22, 0xE5	; 229
    9034:	7f 4f       	sbci	r23, 0xFF	; 255
    9036:	f6 01       	movw	r30, r12
    9038:	82 85       	ldd	r24, Z+10	; 0x0a
    903a:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:64
  strcpy(name, tds.name);
    903e:	be 01       	movw	r22, r28
    9040:	69 5d       	subi	r22, 0xD9	; 217
    9042:	7f 4f       	sbci	r23, 0xFF	; 255
    9044:	c5 01       	movw	r24, r10
    9046:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4151
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    904a:	61 ea       	ldi	r22, 0xA1	; 161
    904c:	76 e0       	ldi	r23, 0x06	; 6
    904e:	c7 01       	movw	r24, r14
    9050:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
      strcat(line2, str2);
    9054:	b5 01       	movw	r22, r10
    9056:	c7 01       	movw	r24, r14
    9058:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    905c:	e0 96       	adiw	r28, 0x30	; 48
    905e:	0f b6       	in	r0, 0x3f	; 63
    9060:	f8 94       	cli
    9062:	de bf       	out	0x3e, r29	; 62
    9064:	0f be       	out	0x3f, r0	; 63
    9066:	cd bf       	out	0x3d, r28	; 61
    9068:	df 91       	pop	r29
    906a:	cf 91       	pop	r28
    906c:	1f 91       	pop	r17
    906e:	0f 91       	pop	r16
    9070:	ff 90       	pop	r15
    9072:	ef 90       	pop	r14
    9074:	df 90       	pop	r13
    9076:	cf 90       	pop	r12
    9078:	bf 90       	pop	r11
    907a:	af 90       	pop	r10
    907c:	9f 90       	pop	r9
    907e:	8f 90       	pop	r8
    9080:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    9082:	6f e7       	ldi	r22, 0x7F	; 127
    9084:	78 e2       	ldi	r23, 0x28	; 40
    9086:	c7 01       	movw	r24, r14
    9088:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
    908c:	e7 cf       	rjmp	.-50     	; 0x905c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>

0000908e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}

void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    908e:	3f 92       	push	r3
    9090:	4f 92       	push	r4
    9092:	5f 92       	push	r5
    9094:	6f 92       	push	r6
    9096:	7f 92       	push	r7
    9098:	8f 92       	push	r8
    909a:	9f 92       	push	r9
    909c:	af 92       	push	r10
    909e:	bf 92       	push	r11
    90a0:	cf 92       	push	r12
    90a2:	df 92       	push	r13
    90a4:	ef 92       	push	r14
    90a6:	ff 92       	push	r15
    90a8:	0f 93       	push	r16
    90aa:	1f 93       	push	r17
    90ac:	cf 93       	push	r28
    90ae:	df 93       	push	r29
    90b0:	cd b7       	in	r28, 0x3d	; 61
    90b2:	de b7       	in	r29, 0x3e	; 62
    90b4:	ca 54       	subi	r28, 0x4A	; 74
    90b6:	d1 09       	sbc	r29, r1
    90b8:	0f b6       	in	r0, 0x3f	; 63
    90ba:	f8 94       	cli
    90bc:	de bf       	out	0x3e, r29	; 62
    90be:	0f be       	out	0x3f, r0	; 63
    90c0:	cd bf       	out	0x3d, r28	; 61
    90c2:	5c 01       	movw	r10, r24
    90c4:	4b 01       	movw	r8, r22
    90c6:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    90c8:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    90cc:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    90d0:	26 0f       	add	r18, r22
    90d2:	37 1f       	adc	r19, r23
    90d4:	48 0f       	add	r20, r24
    90d6:	59 1f       	adc	r21, r25
    90d8:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
  if (get_tds18s20(args2, &tds) == 1)
    90dc:	be 01       	movw	r22, r28
    90de:	6b 5c       	subi	r22, 0xCB	; 203
    90e0:	7f 4f       	sbci	r23, 0xFF	; 255
    90e2:	8e 2d       	mov	r24, r14
    90e4:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    90e8:	24 01       	movw	r4, r8
    90ea:	28 e2       	ldi	r18, 0x28	; 40
    90ec:	42 0e       	add	r4, r18
    90ee:	51 1c       	adc	r5, r1
    90f0:	9e 01       	movw	r18, r28
    90f2:	2f 5f       	subi	r18, 0xFF	; 255
    90f4:	3f 4f       	sbci	r19, 0xFF	; 255
    90f6:	69 01       	movw	r12, r18
    90f8:	81 30       	cpi	r24, 0x01	; 1
    90fa:	09 f0       	breq	.+2      	; 0x90fe <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    90fc:	b5 c0       	rjmp	.+362    	; 0x9268 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
  {
    createString(str2, ':', tds.rom, 8, 16);
    90fe:	3e 01       	movw	r6, r28
    9100:	3b e1       	ldi	r19, 0x1B	; 27
    9102:	63 0e       	add	r6, r19
    9104:	71 1c       	adc	r7, r1
    9106:	00 e1       	ldi	r16, 0x10	; 16
    9108:	28 e0       	ldi	r18, 0x08	; 8
    910a:	ae 01       	movw	r20, r28
    910c:	4a 5c       	subi	r20, 0xCA	; 202
    910e:	5f 4f       	sbci	r21, 0xFF	; 255
    9110:	6a e3       	ldi	r22, 0x3A	; 58
    9112:	c3 01       	movw	r24, r6
    9114:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
    sprintf(str1, "rom: %s", str2);
    9118:	7f 92       	push	r7
    911a:	6f 92       	push	r6
    911c:	8b e8       	ldi	r24, 0x8B	; 139
    911e:	93 e0       	ldi	r25, 0x03	; 3
    9120:	9f 93       	push	r25
    9122:	8f 93       	push	r24
    9124:	df 92       	push	r13
    9126:	cf 92       	push	r12
    9128:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    912c:	8a e0       	ldi	r24, 0x0A	; 10
    912e:	a8 0e       	add	r10, r24
    9130:	b1 1c       	adc	r11, r1
    9132:	a4 01       	movw	r20, r8
    9134:	4b 5a       	subi	r20, 0xAB	; 171
    9136:	5f 4f       	sbci	r21, 0xFF	; 255
    9138:	ee 24       	eor	r14, r14
    913a:	ea 94       	dec	r14
    913c:	fe 2c       	mov	r15, r14
    913e:	10 e0       	ldi	r17, 0x00	; 0
    9140:	00 e0       	ldi	r16, 0x00	; 0
    9142:	21 e0       	ldi	r18, 0x01	; 1
    9144:	b5 01       	movw	r22, r10
    9146:	c6 01       	movw	r24, r12
    9148:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
    ///
    sprintf(str1, "nazev: %s", tds.name);
    914c:	85 e3       	ldi	r24, 0x35	; 53
    914e:	90 e0       	ldi	r25, 0x00	; 0
    9150:	8c 0f       	add	r24, r28
    9152:	9d 1f       	adc	r25, r29
    9154:	0c 96       	adiw	r24, 0x0c	; 12
    9156:	9f 93       	push	r25
    9158:	8f 93       	push	r24
    915a:	83 e9       	ldi	r24, 0x93	; 147
    915c:	93 e0       	ldi	r25, 0x03	; 3
    915e:	9f 93       	push	r25
    9160:	8f 93       	push	r24
    9162:	df 92       	push	r13
    9164:	cf 92       	push	r12
    9166:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    916a:	22 e0       	ldi	r18, 0x02	; 2
    916c:	a2 01       	movw	r20, r4
    916e:	b5 01       	movw	r22, r10
    9170:	c6 01       	movw	r24, r12
    9172:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    9176:	21 96       	adiw	r28, 0x01	; 1
    9178:	6e ad       	ldd	r22, Y+62	; 0x3e
    917a:	7f ad       	ldd	r23, Y+63	; 0x3f
    917c:	21 97       	sbiw	r28, 0x01	; 1
    917e:	07 2e       	mov	r0, r23
    9180:	00 0c       	add	r0, r0
    9182:	88 0b       	sbc	r24, r24
    9184:	99 0b       	sbc	r25, r25
    9186:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
    918a:	20 e0       	ldi	r18, 0x00	; 0
    918c:	30 e0       	ldi	r19, 0x00	; 0
    918e:	4a e7       	ldi	r20, 0x7A	; 122
    9190:	54 e4       	ldi	r21, 0x44	; 68
    9192:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
    dtostrf(te, 4, 2, str1);
    9196:	86 01       	movw	r16, r12
    9198:	22 e0       	ldi	r18, 0x02	; 2
    919a:	44 e0       	ldi	r20, 0x04	; 4
    919c:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
    strcat(str1, "C");
    91a0:	6c e0       	ldi	r22, 0x0C	; 12
    91a2:	74 e0       	ldi	r23, 0x04	; 4
    91a4:	c6 01       	movw	r24, r12
    91a6:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851
    strcpy_P(str2, temp_offset_short);
    91aa:	67 e5       	ldi	r22, 0x57	; 87
    91ac:	78 e2       	ldi	r23, 0x28	; 40
    91ae:	c3 01       	movw	r24, r6
    91b0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852
    strcat(str2, str1);
    91b4:	b6 01       	movw	r22, r12
    91b6:	c3 01       	movw	r24, r6
    91b8:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    91bc:	a4 01       	movw	r20, r8
    91be:	44 5c       	subi	r20, 0xC4	; 196
    91c0:	5f 4f       	sbci	r21, 0xFF	; 255
    91c2:	10 e0       	ldi	r17, 0x00	; 0
    91c4:	00 e0       	ldi	r16, 0x00	; 0
    91c6:	22 e0       	ldi	r18, 0x02	; 2
    91c8:	b5 01       	movw	r22, r10
    91ca:	c3 01       	movw	r24, r6
    91cc:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
    ///
    sprintf(str1, "merici perioda: %ds", tds.period);
    91d0:	2a 96       	adiw	r28, 0x0a	; 10
    91d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    91d4:	2a 97       	sbiw	r28, 0x0a	; 10
    91d6:	1f 92       	push	r1
    91d8:	8f 93       	push	r24
    91da:	8d e9       	ldi	r24, 0x9D	; 157
    91dc:	93 e0       	ldi	r25, 0x03	; 3
    91de:	9f 93       	push	r25
    91e0:	8f 93       	push	r24
    91e2:	df 92       	push	r13
    91e4:	cf 92       	push	r12
    91e6:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    91ea:	a4 01       	movw	r20, r8
    91ec:	4c 59       	subi	r20, 0x9C	; 156
    91ee:	5f 4f       	sbci	r21, 0xFF	; 255
    91f0:	22 e0       	ldi	r18, 0x02	; 2
    91f2:	b5 01       	movw	r22, r10
    91f4:	c6 01       	movw	r24, r12
    91f6:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859

    ///
    sprintf(str1, "online: %d", status_tds18s20[args2].online);
    91fa:	9e e1       	ldi	r25, 0x1E	; 30
    91fc:	39 9e       	mul	r3, r25
    91fe:	f0 01       	movw	r30, r0
    9200:	11 24       	eor	r1, r1
    9202:	e5 5d       	subi	r30, 0xD5	; 213
    9204:	f5 4f       	sbci	r31, 0xF5	; 245
    9206:	83 8d       	ldd	r24, Z+27	; 0x1b
    9208:	1f 92       	push	r1
    920a:	8f 93       	push	r24
    920c:	81 eb       	ldi	r24, 0xB1	; 177
    920e:	93 e0       	ldi	r25, 0x03	; 3
    9210:	9f 93       	push	r25
    9212:	8f 93       	push	r24
    9214:	df 92       	push	r13
    9216:	cf 92       	push	r12
    9218:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    921c:	a4 01       	movw	r20, r8
    921e:	48 58       	subi	r20, 0x88	; 136
    9220:	5f 4f       	sbci	r21, 0xFF	; 255
    9222:	22 e0       	ldi	r18, 0x02	; 2
    9224:	b5 01       	movw	r22, r10
    9226:	c6 01       	movw	r24, r12
    9228:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    922c:	0f b6       	in	r0, 0x3f	; 63
    922e:	f8 94       	cli
    9230:	de bf       	out	0x3e, r29	; 62
    9232:	0f be       	out	0x3f, r0	; 63
    9234:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
  else
  {
    strcpy(str1, "ERR");
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    9236:	c6 5b       	subi	r28, 0xB6	; 182
    9238:	df 4f       	sbci	r29, 0xFF	; 255
    923a:	0f b6       	in	r0, 0x3f	; 63
    923c:	f8 94       	cli
    923e:	de bf       	out	0x3e, r29	; 62
    9240:	0f be       	out	0x3f, r0	; 63
    9242:	cd bf       	out	0x3d, r28	; 61
    9244:	df 91       	pop	r29
    9246:	cf 91       	pop	r28
    9248:	1f 91       	pop	r17
    924a:	0f 91       	pop	r16
    924c:	ff 90       	pop	r15
    924e:	ef 90       	pop	r14
    9250:	df 90       	pop	r13
    9252:	cf 90       	pop	r12
    9254:	bf 90       	pop	r11
    9256:	af 90       	pop	r10
    9258:	9f 90       	pop	r9
    925a:	8f 90       	pop	r8
    925c:	7f 90       	pop	r7
    925e:	6f 90       	pop	r6
    9260:	5f 90       	pop	r5
    9262:	4f 90       	pop	r4
    9264:	3f 90       	pop	r3
    9266:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
    sprintf(str1, "online: %d", status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy(str1, "ERR");
    9268:	6c eb       	ldi	r22, 0xBC	; 188
    926a:	73 e0       	ldi	r23, 0x03	; 3
    926c:	c9 01       	movw	r24, r18
    926e:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    9272:	b5 01       	movw	r22, r10
    9274:	67 5e       	subi	r22, 0xE7	; 231
    9276:	7f 4f       	sbci	r23, 0xFF	; 255
    9278:	ee 24       	eor	r14, r14
    927a:	ea 94       	dec	r14
    927c:	fe 2c       	mov	r15, r14
    927e:	00 e0       	ldi	r16, 0x00	; 0
    9280:	18 ef       	ldi	r17, 0xF8	; 248
    9282:	24 e0       	ldi	r18, 0x04	; 4
    9284:	a2 01       	movw	r20, r4
    9286:	c6 01       	movw	r24, r12
    9288:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    928c:	d4 cf       	rjmp	.-88     	; 0x9236 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>

0000928e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    928e:	af 92       	push	r10
    9290:	bf 92       	push	r11
    9292:	cf 92       	push	r12
    9294:	df 92       	push	r13
    9296:	ef 92       	push	r14
    9298:	ff 92       	push	r15
    929a:	0f 93       	push	r16
    929c:	1f 93       	push	r17
    929e:	cf 93       	push	r28
    92a0:	df 93       	push	r29
    92a2:	cd b7       	in	r28, 0x3d	; 61
    92a4:	de b7       	in	r29, 0x3e	; 62
    92a6:	ca 54       	subi	r28, 0x4A	; 74
    92a8:	d1 09       	sbc	r29, r1
    92aa:	0f b6       	in	r0, 0x3f	; 63
    92ac:	f8 94       	cli
    92ae:	de bf       	out	0x3e, r29	; 62
    92b0:	0f be       	out	0x3f, r0	; 63
    92b2:	cd bf       	out	0x3d, r28	; 61
    92b4:	6c 01       	movw	r12, r24
    92b6:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    92b8:	be 01       	movw	r22, r28
    92ba:	6b 5c       	subi	r22, 0xCB	; 203
    92bc:	7f 4f       	sbci	r23, 0xFF	; 255
    92be:	8e 2d       	mov	r24, r14
    92c0:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    92c4:	81 30       	cpi	r24, 0x01	; 1
    92c6:	d9 f5       	brne	.+118    	; 0x933e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    92c8:	8e e1       	ldi	r24, 0x1E	; 30
    92ca:	e8 9e       	mul	r14, r24
    92cc:	f0 01       	movw	r30, r0
    92ce:	11 24       	eor	r1, r1
    92d0:	e5 5d       	subi	r30, 0xD5	; 213
    92d2:	f5 4f       	sbci	r31, 0xF5	; 245
    92d4:	65 81       	ldd	r22, Z+5	; 0x05
    92d6:	76 81       	ldd	r23, Z+6	; 0x06
    92d8:	07 2e       	mov	r0, r23
    92da:	00 0c       	add	r0, r0
    92dc:	88 0b       	sbc	r24, r24
    92de:	99 0b       	sbc	r25, r25
    92e0:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
    92e4:	20 e0       	ldi	r18, 0x00	; 0
    92e6:	30 e0       	ldi	r19, 0x00	; 0
    92e8:	4a e7       	ldi	r20, 0x7A	; 122
    92ea:	54 e4       	ldi	r21, 0x44	; 68
    92ec:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
    dtostrf(te, 4, 2, str1);
    92f0:	8e 01       	movw	r16, r28
    92f2:	05 5e       	subi	r16, 0xE5	; 229
    92f4:	1f 4f       	sbci	r17, 0xFF	; 255
    92f6:	22 e0       	ldi	r18, 0x02	; 2
    92f8:	44 e0       	ldi	r20, 0x04	; 4
    92fa:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
    strcat(str1, "C");
    92fe:	6c e0       	ldi	r22, 0x0C	; 12
    9300:	74 e0       	ldi	r23, 0x04	; 4
    9302:	c8 01       	movw	r24, r16
    9304:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
    strcpy_P(str2, current_temp_short);
    9308:	6e e4       	ldi	r22, 0x4E	; 78
    930a:	78 e2       	ldi	r23, 0x28	; 40
    930c:	ce 01       	movw	r24, r28
    930e:	01 96       	adiw	r24, 0x01	; 1
    9310:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826
    strcat(str2, str1);
    9314:	b8 01       	movw	r22, r16
    9316:	ce 01       	movw	r24, r28
    9318:	01 96       	adiw	r24, 0x01	; 1
    931a:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    931e:	a5 01       	movw	r20, r10
    9320:	44 57       	subi	r20, 0x74	; 116
    9322:	5f 4f       	sbci	r21, 0xFF	; 255
    9324:	b6 01       	movw	r22, r12
    9326:	66 5f       	subi	r22, 0xF6	; 246
    9328:	7f 4f       	sbci	r23, 0xFF	; 255
    932a:	ee 24       	eor	r14, r14
    932c:	ea 94       	dec	r14
    932e:	fe 2c       	mov	r15, r14
    9330:	10 e0       	ldi	r17, 0x00	; 0
    9332:	00 e0       	ldi	r16, 0x00	; 0
    9334:	22 e0       	ldi	r18, 0x02	; 2
    9336:	ce 01       	movw	r24, r28
    9338:	01 96       	adiw	r24, 0x01	; 1
    933a:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3829
  }
}
    933e:	c6 5b       	subi	r28, 0xB6	; 182
    9340:	df 4f       	sbci	r29, 0xFF	; 255
    9342:	0f b6       	in	r0, 0x3f	; 63
    9344:	f8 94       	cli
    9346:	de bf       	out	0x3e, r29	; 62
    9348:	0f be       	out	0x3f, r0	; 63
    934a:	cd bf       	out	0x3d, r28	; 61
    934c:	df 91       	pop	r29
    934e:	cf 91       	pop	r28
    9350:	1f 91       	pop	r17
    9352:	0f 91       	pop	r16
    9354:	ff 90       	pop	r15
    9356:	ef 90       	pop	r14
    9358:	df 90       	pop	r13
    935a:	cf 90       	pop	r12
    935c:	bf 90       	pop	r11
    935e:	af 90       	pop	r10
    9360:	08 95       	ret

00009362 <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1500
  dialog_save_variable_function = &menu_tds_save_period;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    9362:	1f 93       	push	r17
    9364:	cf 93       	push	r28
    9366:	df 93       	push	r29
    9368:	cd b7       	in	r28, 0x3d	; 61
    936a:	de b7       	in	r29, 0x3e	; 62
    936c:	a0 97       	sbiw	r28, 0x20	; 32
    936e:	0f b6       	in	r0, 0x3f	; 63
    9370:	f8 94       	cli
    9372:	de bf       	out	0x3e, r29	; 62
    9374:	0f be       	out	0x3f, r0	; 63
    9376:	cd bf       	out	0x3d, r28	; 61
    9378:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:63

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    937a:	be 01       	movw	r22, r28
    937c:	6f 5f       	subi	r22, 0xFF	; 255
    937e:	7f 4f       	sbci	r23, 0xFF	; 255
    9380:	81 2f       	mov	r24, r17
    9382:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:64
  strcpy(name, tds.name);
    9386:	be 01       	movw	r22, r28
    9388:	63 5f       	subi	r22, 0xF3	; 243
    938a:	7f 4f       	sbci	r23, 0xFF	; 255
    938c:	ce 01       	movw	r24, r28
    938e:	47 96       	adiw	r24, 0x17	; 23
    9390:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1503
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
    9394:	87 e6       	ldi	r24, 0x67	; 103
    9396:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    939a:	be 01       	movw	r22, r28
    939c:	69 5e       	subi	r22, 0xE9	; 233
    939e:	7f 4f       	sbci	r23, 0xFF	; 255
    93a0:	82 ef       	ldi	r24, 0xF2	; 242
    93a2:	98 e0       	ldi	r25, 0x08	; 8
    93a4:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
  dialog_set_string_max_length = max_length;
    93a8:	88 e0       	ldi	r24, 0x08	; 8
    93aa:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
  dialog_set_string_args = idx;
    93ae:	10 93 02 09 	sts	0x0902, r17	; 0x800902 <dialog_set_string_args>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1505
{
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
    93b2:	81 e6       	ldi	r24, 0x61	; 97
    93b4:	9a e4       	ldi	r25, 0x4A	; 74
    93b6:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <dialog_save_variable_function+0x1>
    93ba:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1506
}
    93be:	a0 96       	adiw	r28, 0x20	; 32
    93c0:	0f b6       	in	r0, 0x3f	; 63
    93c2:	f8 94       	cli
    93c4:	de bf       	out	0x3e, r29	; 62
    93c6:	0f be       	out	0x3f, r0	; 63
    93c8:	cd bf       	out	0x3d, r28	; 61
    93ca:	df 91       	pop	r29
    93cc:	cf 91       	pop	r28
    93ce:	1f 91       	pop	r17
    93d0:	08 95       	ret

000093d2 <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1492
  dialog_save_variable_function = &menu_tds_save_offset;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    93d2:	1f 93       	push	r17
    93d4:	cf 93       	push	r28
    93d6:	df 93       	push	r29
    93d8:	cd b7       	in	r28, 0x3d	; 61
    93da:	de b7       	in	r29, 0x3e	; 62
    93dc:	66 97       	sbiw	r28, 0x16	; 22
    93de:	0f b6       	in	r0, 0x3f	; 63
    93e0:	f8 94       	cli
    93e2:	de bf       	out	0x3e, r29	; 62
    93e4:	0f be       	out	0x3f, r0	; 63
    93e6:	cd bf       	out	0x3d, r28	; 61
    93e8:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1493
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE);
    93ea:	86 e6       	ldi	r24, 0x66	; 102
    93ec:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
tds_get_period():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:102
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    93f0:	be 01       	movw	r22, r28
    93f2:	6f 5f       	subi	r22, 0xFF	; 255
    93f4:	7f 4f       	sbci	r23, 0xFF	; 255
    93f6:	81 2f       	mov	r24, r17
    93f8:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:103
  return tds.period;
    93fc:	8d 89       	ldd	r24, Y+21	; 0x15
    93fe:	90 e0       	ldi	r25, 0x00	; 0
display_element_dialog_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1414
    //menu_redraw_dialog_now = 1;
  }
}
void display_element_dialog_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t idx)
{
  menu_dialog_set_variable_now = now;
    9400:	90 93 c2 08 	sts	0x08C2, r25	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    9404:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
  menu_dialog_set_variable_min = min;
    9408:	81 e0       	ldi	r24, 0x01	; 1
    940a:	90 e0       	ldi	r25, 0x00	; 0
    940c:	90 93 77 08 	sts	0x0877, r25	; 0x800877 <menu_dialog_set_variable_min+0x1>
    9410:	80 93 76 08 	sts	0x0876, r24	; 0x800876 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1416
  menu_dialog_set_variable_max = max;
    9414:	8f ef       	ldi	r24, 0xFF	; 255
    9416:	90 e0       	ldi	r25, 0x00	; 0
    9418:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <menu_dialog_set_variable_max+0x1>
    941c:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
  menu_dialog_set_variable_step = step;
    9420:	81 e0       	ldi	r24, 0x01	; 1
    9422:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
  menu_dialog_set_variable_args = idx;
    9426:	10 93 72 08 	sts	0x0872, r17	; 0x800872 <__data_end>
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1495
/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE);
  display_element_dialog_set_variable(tds_get_period(args2), 1, 255, 1, args2);
  dialog_save_variable_function = &menu_tds_save_period;
    942a:	84 e9       	ldi	r24, 0x94	; 148
    942c:	9a e4       	ldi	r25, 0x4A	; 74
    942e:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <dialog_save_variable_function+0x1>
    9432:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1496
}
    9436:	66 96       	adiw	r28, 0x16	; 22
    9438:	0f b6       	in	r0, 0x3f	; 63
    943a:	f8 94       	cli
    943c:	de bf       	out	0x3e, r29	; 62
    943e:	0f be       	out	0x3f, r0	; 63
    9440:	cd bf       	out	0x3d, r28	; 61
    9442:	df 91       	pop	r29
    9444:	cf 91       	pop	r28
    9446:	1f 91       	pop	r17
    9448:	08 95       	ret

0000944a <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1484
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    944a:	1f 93       	push	r17
    944c:	cf 93       	push	r28
    944e:	df 93       	push	r29
    9450:	cd b7       	in	r28, 0x3d	; 61
    9452:	de b7       	in	r29, 0x3e	; 62
    9454:	66 97       	sbiw	r28, 0x16	; 22
    9456:	0f b6       	in	r0, 0x3f	; 63
    9458:	f8 94       	cli
    945a:	de bf       	out	0x3e, r29	; 62
    945c:	0f be       	out	0x3f, r0	; 63
    945e:	cd bf       	out	0x3d, r28	; 61
    9460:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1485
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE);
    9462:	86 e6       	ldi	r24, 0x66	; 102
    9464:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
tds_get_offset():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:86
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    9468:	be 01       	movw	r22, r28
    946a:	6f 5f       	subi	r22, 0xFF	; 255
    946c:	7f 4f       	sbci	r23, 0xFF	; 255
    946e:	81 2f       	mov	r24, r17
    9470:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:87
  return tds.offset;
    9474:	8b 85       	ldd	r24, Y+11	; 0x0b
    9476:	9c 85       	ldd	r25, Y+12	; 0x0c
display_element_dialog_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1414
    //menu_redraw_dialog_now = 1;
  }
}
void display_element_dialog_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t idx)
{
  menu_dialog_set_variable_now = now;
    9478:	90 93 c2 08 	sts	0x08C2, r25	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
    947c:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
  menu_dialog_set_variable_min = min;
    9480:	80 ef       	ldi	r24, 0xF0	; 240
    9482:	98 ed       	ldi	r25, 0xD8	; 216
    9484:	90 93 77 08 	sts	0x0877, r25	; 0x800877 <menu_dialog_set_variable_min+0x1>
    9488:	80 93 76 08 	sts	0x0876, r24	; 0x800876 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1416
  menu_dialog_set_variable_max = max;
    948c:	80 e1       	ldi	r24, 0x10	; 16
    948e:	97 e2       	ldi	r25, 0x27	; 39
    9490:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <menu_dialog_set_variable_max+0x1>
    9494:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
  menu_dialog_set_variable_step = step;
    9498:	84 e6       	ldi	r24, 0x64	; 100
    949a:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
  menu_dialog_set_variable_args = idx;
    949e:	10 93 72 08 	sts	0x0872, r17	; 0x800872 <__data_end>
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1487
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE);
  display_element_dialog_set_variable(tds_get_offset(args2), -10000, 10000, 100, args2);
  dialog_save_variable_function = &menu_tds_save_offset;
    94a2:	8c eb       	ldi	r24, 0xBC	; 188
    94a4:	9a e4       	ldi	r25, 0x4A	; 74
    94a6:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <dialog_save_variable_function+0x1>
    94aa:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1488
}
    94ae:	66 96       	adiw	r28, 0x16	; 22
    94b0:	0f b6       	in	r0, 0x3f	; 63
    94b2:	f8 94       	cli
    94b4:	de bf       	out	0x3e, r29	; 62
    94b6:	0f be       	out	0x3f, r0	; 63
    94b8:	cd bf       	out	0x3d, r28	; 61
    94ba:	df 91       	pop	r29
    94bc:	cf 91       	pop	r28
    94be:	1f 91       	pop	r17
    94c0:	08 95       	ret

000094c2 <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
{
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    94c2:	1f 93       	push	r17
    94c4:	cf 93       	push	r28
    94c6:	df 93       	push	r29
    94c8:	cd b7       	in	r28, 0x3d	; 61
    94ca:	de b7       	in	r29, 0x3e	; 62
    94cc:	a0 97       	sbiw	r28, 0x20	; 32
    94ce:	0f b6       	in	r0, 0x3f	; 63
    94d0:	f8 94       	cli
    94d2:	de bf       	out	0x3e, r29	; 62
    94d4:	0f be       	out	0x3f, r0	; 63
    94d6:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    94d8:	62 ef       	ldi	r22, 0xF2	; 242
    94da:	78 e0       	ldi	r23, 0x08	; 8
    94dc:	ce 01       	movw	r24, r28
    94de:	47 96       	adiw	r24, 0x17	; 23
    94e0:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1470
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    94e4:	8f 89       	ldd	r24, Y+23	; 0x17
    94e6:	88 23       	and	r24, r24
    94e8:	a9 f0       	breq	.+42     	; 0x9514 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1430
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    94ea:	10 91 02 09 	lds	r17, 0x0902	; 0x800902 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:70
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    94ee:	be 01       	movw	r22, r28
    94f0:	6f 5f       	subi	r22, 0xFF	; 255
    94f2:	7f 4f       	sbci	r23, 0xFF	; 255
    94f4:	81 2f       	mov	r24, r17
    94f6:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:71
  strcpy(tds.name, name);
    94fa:	be 01       	movw	r22, r28
    94fc:	69 5e       	subi	r22, 0xE9	; 233
    94fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9500:	ce 01       	movw	r24, r28
    9502:	0d 96       	adiw	r24, 0x0d	; 13
    9504:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:72
  set_tds18s20(idx, &tds);
    9508:	be 01       	movw	r22, r28
    950a:	6f 5f       	subi	r22, 0xFF	; 255
    950c:	7f 4f       	sbci	r23, 0xFF	; 255
    950e:	81 2f       	mov	r24, r17
    9510:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1472
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    9514:	a0 96       	adiw	r28, 0x20	; 32
    9516:	0f b6       	in	r0, 0x3f	; 63
    9518:	f8 94       	cli
    951a:	de bf       	out	0x3e, r29	; 62
    951c:	0f be       	out	0x3f, r0	; 63
    951e:	cd bf       	out	0x3d, r28	; 61
    9520:	df 91       	pop	r29
    9522:	cf 91       	pop	r28
    9524:	1f 91       	pop	r17
    9526:	08 95       	ret

00009528 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1462
{
  tds_set_offset(display_element_get_variable_args(), display_element_get_variable());
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    9528:	0f 93       	push	r16
    952a:	1f 93       	push	r17
    952c:	cf 93       	push	r28
    952e:	df 93       	push	r29
    9530:	cd b7       	in	r28, 0x3d	; 61
    9532:	de b7       	in	r29, 0x3e	; 62
    9534:	66 97       	sbiw	r28, 0x16	; 22
    9536:	0f b6       	in	r0, 0x3f	; 63
    9538:	f8 94       	cli
    953a:	de bf       	out	0x3e, r29	; 62
    953c:	0f be       	out	0x3f, r0	; 63
    953e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
    9540:	00 91 c1 08 	lds	r16, 0x08C1	; 0x8008c1 <menu_dialog_set_variable_now>
display_element_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388



uint8_t display_element_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    9544:	10 91 72 08 	lds	r17, 0x0872	; 0x800872 <__data_end>
tds_set_period():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:94
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    9548:	be 01       	movw	r22, r28
    954a:	6f 5f       	subi	r22, 0xFF	; 255
    954c:	7f 4f       	sbci	r23, 0xFF	; 255
    954e:	81 2f       	mov	r24, r17
    9550:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:95
  tds.period = period;
    9554:	0d 8b       	std	Y+21, r16	; 0x15
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:96
  set_tds18s20(idx, &tds);
    9556:	be 01       	movw	r22, r28
    9558:	6f 5f       	subi	r22, 0xFF	; 255
    955a:	7f 4f       	sbci	r23, 0xFF	; 255
    955c:	81 2f       	mov	r24, r17
    955e:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1464
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_element_get_variable_args(), display_element_get_variable());
}
    9562:	66 96       	adiw	r28, 0x16	; 22
    9564:	0f b6       	in	r0, 0x3f	; 63
    9566:	f8 94       	cli
    9568:	de bf       	out	0x3e, r29	; 62
    956a:	0f be       	out	0x3f, r0	; 63
    956c:	cd bf       	out	0x3d, r28	; 61
    956e:	df 91       	pop	r29
    9570:	cf 91       	pop	r28
    9572:	1f 91       	pop	r17
    9574:	0f 91       	pop	r16
    9576:	08 95       	ret

00009578 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1457
    dialog_set_string[len - 1] = 0;
}

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    9578:	ef 92       	push	r14
    957a:	ff 92       	push	r15
    957c:	1f 93       	push	r17
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	cd b7       	in	r28, 0x3d	; 61
    9584:	de b7       	in	r29, 0x3e	; 62
    9586:	66 97       	sbiw	r28, 0x16	; 22
    9588:	0f b6       	in	r0, 0x3f	; 63
    958a:	f8 94       	cli
    958c:	de bf       	out	0x3e, r29	; 62
    958e:	0f be       	out	0x3f, r0	; 63
    9590:	cd bf       	out	0x3d, r28	; 61
display_element_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
  return menu_dialog_set_variable_args;
}

uint16_t display_element_get_variable(void)
{
  return menu_dialog_set_variable_now;
    9592:	e0 90 c1 08 	lds	r14, 0x08C1	; 0x8008c1 <menu_dialog_set_variable_now>
    9596:	f0 90 c2 08 	lds	r15, 0x08C2	; 0x8008c2 <menu_dialog_set_variable_now+0x1>
display_element_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388



uint8_t display_element_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    959a:	10 91 72 08 	lds	r17, 0x0872	; 0x800872 <__data_end>
tds_set_offset():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:78
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    959e:	be 01       	movw	r22, r28
    95a0:	6f 5f       	subi	r22, 0xFF	; 255
    95a2:	7f 4f       	sbci	r23, 0xFF	; 255
    95a4:	81 2f       	mov	r24, r17
    95a6:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:79
  tds.offset = offset;
    95aa:	fc 86       	std	Y+12, r15	; 0x0c
    95ac:	eb 86       	std	Y+11, r14	; 0x0b
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:80
  set_tds18s20(idx, &tds);
    95ae:	be 01       	movw	r22, r28
    95b0:	6f 5f       	subi	r22, 0xFF	; 255
    95b2:	7f 4f       	sbci	r23, 0xFF	; 255
    95b4:	81 2f       	mov	r24, r17
    95b6:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1459

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_element_get_variable_args(), display_element_get_variable());
}
    95ba:	66 96       	adiw	r28, 0x16	; 22
    95bc:	0f b6       	in	r0, 0x3f	; 63
    95be:	f8 94       	cli
    95c0:	de bf       	out	0x3e, r29	; 62
    95c2:	0f be       	out	0x3f, r0	; 63
    95c4:	cd bf       	out	0x3d, r28	; 61
    95c6:	df 91       	pop	r29
    95c8:	cf 91       	pop	r28
    95ca:	1f 91       	pop	r17
    95cc:	ff 90       	pop	r15
    95ce:	ef 90       	pop	r14
    95d0:	08 95       	ret

000095d2 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    95d2:	0f 93       	push	r16
    95d4:	1f 93       	push	r17
    95d6:	cf 93       	push	r28
    95d8:	df 93       	push	r29
    95da:	8c 01       	movw	r16, r24
    95dc:	c4 e6       	ldi	r28, 0x64	; 100
    95de:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    95e0:	ce 01       	movw	r24, r28
    95e2:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    95e6:	f8 01       	movw	r30, r16
    95e8:	81 93       	st	Z+, r24
    95ea:	8f 01       	movw	r16, r30
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    95ec:	10 82       	st	Z, r1
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    95ee:	88 23       	and	r24, r24
    95f0:	21 f0       	breq	.+8      	; 0x95fa <device_get_name(char*)+0x28>
    95f2:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    95f4:	cd 36       	cpi	r28, 0x6D	; 109
    95f6:	d1 05       	cpc	r29, r1
    95f8:	99 f7       	brne	.-26     	; 0x95e0 <device_get_name(char*)+0xe>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    95fa:	df 91       	pop	r29
    95fc:	cf 91       	pop	r28
    95fe:	1f 91       	pop	r17
    9600:	0f 91       	pop	r16
    9602:	08 95       	ret

00009604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    9604:	cf 92       	push	r12
    9606:	df 92       	push	r13
    9608:	ef 92       	push	r14
    960a:	ff 92       	push	r15
    960c:	0f 93       	push	r16
    960e:	1f 93       	push	r17
    9610:	cf 93       	push	r28
    9612:	df 93       	push	r29
    9614:	cd b7       	in	r28, 0x3d	; 61
    9616:	de b7       	in	r29, 0x3e	; 62
    9618:	ca 54       	subi	r28, 0x4A	; 74
    961a:	d1 09       	sbc	r29, r1
    961c:	0f b6       	in	r0, 0x3f	; 63
    961e:	f8 94       	cli
    9620:	de bf       	out	0x3e, r29	; 62
    9622:	0f be       	out	0x3f, r0	; 63
    9624:	cd bf       	out	0x3d, r28	; 61
    9626:	8c 01       	movw	r16, r24
    9628:	6b 01       	movw	r12, r22
    962a:	7a 01       	movw	r14, r20
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    962c:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
    9630:	88 23       	and	r24, r24
    9632:	89 f1       	breq	.+98     	; 0x9696 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    9634:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <mqtt_send_message>
    9638:	90 91 79 0b 	lds	r25, 0x0B79	; 0x800b79 <mqtt_send_message+0x1>
    963c:	01 96       	adiw	r24, 0x01	; 1
    963e:	90 93 79 0b 	sts	0x0B79, r25	; 0x800b79 <mqtt_send_message+0x1>
    9642:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <mqtt_send_message>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    9646:	ce 01       	movw	r24, r28
    9648:	8f 5b       	subi	r24, 0xBF	; 191
    964a:	9f 4f       	sbci	r25, 0xFF	; 255
    964c:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <device_get_name(char*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    9650:	60 91 76 0b 	lds	r22, 0x0B76	; 0x800b76 <header_out>
    9654:	70 91 77 0b 	lds	r23, 0x0B77	; 0x800b77 <header_out+0x1>
    9658:	ce 01       	movw	r24, r28
    965a:	01 96       	adiw	r24, 0x01	; 1
    965c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    9660:	be 01       	movw	r22, r28
    9662:	6f 5b       	subi	r22, 0xBF	; 191
    9664:	7f 4f       	sbci	r23, 0xFF	; 255
    9666:	ce 01       	movw	r24, r28
    9668:	01 96       	adiw	r24, 0x01	; 1
    966a:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    966e:	66 e7       	ldi	r22, 0x76	; 118
    9670:	74 e0       	ldi	r23, 0x04	; 4
    9672:	ce 01       	movw	r24, r28
    9674:	01 96       	adiw	r24, 0x01	; 1
    9676:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    967a:	b6 01       	movw	r22, r12
    967c:	ce 01       	movw	r24, r28
    967e:	01 96       	adiw	r24, 0x01	; 1
    9680:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    9684:	a7 01       	movw	r20, r14
    9686:	be 01       	movw	r22, r28
    9688:	6f 5f       	subi	r22, 0xFF	; 255
    968a:	7f 4f       	sbci	r23, 0xFF	; 255
    968c:	c8 01       	movw	r24, r16
    968e:	0e 94 10 83 	call	0x10620	; 0x10620 <PubSubClient::publish(char const*, char const*)>
    9692:	81 11       	cpse	r24, r1
    9694:	09 c0       	rjmp	.+18     	; 0x96a8 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    9696:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_error>
    969a:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_error+0x1>
    969e:	01 96       	adiw	r24, 0x01	; 1
    96a0:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_error+0x1>
    96a4:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_error>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:232
}
    96a8:	c6 5b       	subi	r28, 0xB6	; 182
    96aa:	df 4f       	sbci	r29, 0xFF	; 255
    96ac:	0f b6       	in	r0, 0x3f	; 63
    96ae:	f8 94       	cli
    96b0:	de bf       	out	0x3e, r29	; 62
    96b2:	0f be       	out	0x3f, r0	; 63
    96b4:	cd bf       	out	0x3d, r28	; 61
    96b6:	df 91       	pop	r29
    96b8:	cf 91       	pop	r28
    96ba:	1f 91       	pop	r17
    96bc:	0f 91       	pop	r16
    96be:	ff 90       	pop	r15
    96c0:	ef 90       	pop	r14
    96c2:	df 90       	pop	r13
    96c4:	cf 90       	pop	r12
    96c6:	08 95       	ret

000096c8 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    96c8:	cf 93       	push	r28
    96ca:	df 93       	push	r29
    96cc:	cd b7       	in	r28, 0x3d	; 61
    96ce:	de b7       	in	r29, 0x3e	; 62
    96d0:	60 97       	sbiw	r28, 0x10	; 16
    96d2:	0f b6       	in	r0, 0x3f	; 63
    96d4:	f8 94       	cli
    96d6:	de bf       	out	0x3e, r29	; 62
    96d8:	0f be       	out	0x3f, r0	; 63
    96da:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    96dc:	90 91 86 09 	lds	r25, 0x0986	; 0x800986 <mqtt_log_cnt>
    96e0:	e9 2f       	mov	r30, r25
    96e2:	f0 e0       	ldi	r31, 0x00	; 0
    96e4:	ea 5f       	subi	r30, 0xFA	; 250
    96e6:	f6 4f       	sbci	r31, 0xF6	; 246
    96e8:	80 83       	st	Z, r24
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    96ea:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    96ec:	9f 5f       	subi	r25, 0xFF	; 255
    96ee:	90 93 86 09 	sts	0x0986, r25	; 0x800986 <mqtt_log_cnt>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    96f2:	97 fd       	sbrc	r25, 7
    96f4:	04 c0       	rjmp	.+8      	; 0x96fe <printf_via_mqtt(char, __file*)+0x36>
    96f6:	8a 30       	cpi	r24, 0x0A	; 10
    96f8:	11 f0       	breq	.+4      	; 0x96fe <printf_via_mqtt(char, __file*)+0x36>
    96fa:	81 11       	cpse	r24, r1
    96fc:	13 c0       	rjmp	.+38     	; 0x9724 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    96fe:	60 ec       	ldi	r22, 0xC0	; 192
    9700:	73 e0       	ldi	r23, 0x03	; 3
    9702:	ce 01       	movw	r24, r28
    9704:	01 96       	adiw	r24, 0x01	; 1
    9706:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    970a:	46 e0       	ldi	r20, 0x06	; 6
    970c:	59 e0       	ldi	r21, 0x09	; 9
    970e:	be 01       	movw	r22, r28
    9710:	6f 5f       	subi	r22, 0xFF	; 255
    9712:	7f 4f       	sbci	r23, 0xFF	; 255
    9714:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <pub_mqtt_client>
    9718:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <pub_mqtt_client+0x1>
    971c:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    9720:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <mqtt_log_cnt>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:448
  }
}
    9724:	60 96       	adiw	r28, 0x10	; 16
    9726:	0f b6       	in	r0, 0x3f	; 63
    9728:	f8 94       	cli
    972a:	de bf       	out	0x3e, r29	; 62
    972c:	0f be       	out	0x3f, r0	; 63
    972e:	cd bf       	out	0x3d, r28	; 61
    9730:	df 91       	pop	r29
    9732:	cf 91       	pop	r28
    9734:	08 95       	ret

00009736 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488

}
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    9736:	0f 93       	push	r16
    9738:	1f 93       	push	r17
    973a:	cf 93       	push	r28
    973c:	df 93       	push	r29
    973e:	cd b7       	in	r28, 0x3d	; 61
    9740:	de b7       	in	r29, 0x3e	; 62
    9742:	a5 97       	sbiw	r28, 0x25	; 37
    9744:	0f b6       	in	r0, 0x3f	; 63
    9746:	f8 94       	cli
    9748:	de bf       	out	0x3e, r29	; 62
    974a:	0f be       	out	0x3f, r0	; 63
    974c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    974e:	ce 01       	movw	r24, r28
    9750:	4b 96       	adiw	r24, 0x1b	; 27
    9752:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
  if (!mqtt_client.connected())
    9756:	81 e2       	ldi	r24, 0x21	; 33
    9758:	9e e0       	ldi	r25, 0x0E	; 14
    975a:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
    975e:	81 11       	cpse	r24, r1
    9760:	97 c0       	rjmp	.+302    	; 0x9890 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    9762:	81 e2       	ldi	r24, 0x21	; 33
    9764:	9e e0       	ldi	r25, 0x0E	; 14
    9766:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
    976a:	81 11       	cpse	r24, r1
    976c:	d0 c0       	rjmp	.+416    	; 0x990e <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    976e:	60 91 36 10 	lds	r22, 0x1036	; 0x801036 <mqtt_client+0x215>
    9772:	70 91 37 10 	lds	r23, 0x1037	; 0x801037 <mqtt_client+0x216>
    9776:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
    977a:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
    977e:	dc 01       	movw	r26, r24
    9780:	ed 91       	ld	r30, X+
    9782:	fc 91       	ld	r31, X
    9784:	40 91 38 10 	lds	r20, 0x1038	; 0x801038 <mqtt_client+0x217>
    9788:	50 91 39 10 	lds	r21, 0x1039	; 0x801039 <mqtt_client+0x218>
    978c:	61 15       	cp	r22, r1
    978e:	71 05       	cpc	r23, r1
    9790:	09 f4       	brne	.+2      	; 0x9794 <mqtt_reconnect()+0x5e>
    9792:	8b c0       	rjmp	.+278    	; 0x98aa <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    9794:	00 88       	ldd	r0, Z+16	; 0x10
    9796:	f1 89       	ldd	r31, Z+17	; 0x11
    9798:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    979a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    979c:	81 30       	cpi	r24, 0x01	; 1
    979e:	91 05       	cpc	r25, r1
    97a0:	09 f0       	breq	.+2      	; 0x97a4 <mqtt_reconnect()+0x6e>
    97a2:	0b c1       	rjmp	.+534    	; 0x99ba <mqtt_reconnect()+0x284>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    97a4:	90 93 24 10 	sts	0x1024, r25	; 0x801024 <mqtt_client+0x203>
    97a8:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    97ac:	87 e0       	ldi	r24, 0x07	; 7
    97ae:	e6 e1       	ldi	r30, 0x16	; 22
    97b0:	f2 e0       	ldi	r31, 0x02	; 2
    97b2:	de 01       	movw	r26, r28
    97b4:	11 96       	adiw	r26, 0x01	; 1
    97b6:	01 90       	ld	r0, Z+
    97b8:	0d 92       	st	X+, r0
    97ba:	8a 95       	dec	r24
    97bc:	e1 f7       	brne	.-8      	; 0x97b6 <mqtt_reconnect()+0x80>
    97be:	fe 01       	movw	r30, r28
    97c0:	31 96       	adiw	r30, 0x01	; 1
    97c2:	a8 e2       	ldi	r26, 0x28	; 40
    97c4:	be e0       	ldi	r27, 0x0E	; 14
    97c6:	ce 01       	movw	r24, r28
    97c8:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    97ca:	21 91       	ld	r18, Z+
    97cc:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    97ce:	8e 17       	cp	r24, r30
    97d0:	9f 07       	cpc	r25, r31
    97d2:	d9 f7       	brne	.-10     	; 0x97ca <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    97d4:	82 e0       	ldi	r24, 0x02	; 2
    97d6:	80 93 2f 0e 	sts	0x0E2F, r24	; 0x800e2f <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    97da:	10 92 30 0e 	sts	0x0E30, r1	; 0x800e30 <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    97de:	8f e0       	ldi	r24, 0x0F	; 15
    97e0:	80 93 31 0e 	sts	0x0E31, r24	; 0x800e31 <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    97e4:	4f e0       	ldi	r20, 0x0F	; 15
    97e6:	50 e0       	ldi	r21, 0x00	; 0
    97e8:	63 e2       	ldi	r22, 0x23	; 35
    97ea:	7e e0       	ldi	r23, 0x0E	; 14
    97ec:	ce 01       	movw	r24, r28
    97ee:	4b 96       	adiw	r24, 0x1b	; 27
    97f0:	0e 94 e0 72 	call	0xe5c0	; 0xe5c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    97f4:	9c 01       	movw	r18, r24
    97f6:	25 50       	subi	r18, 0x05	; 5
    97f8:	31 09       	sbc	r19, r1
    97fa:	43 e2       	ldi	r20, 0x23	; 35
    97fc:	5e e0       	ldi	r21, 0x0E	; 14
    97fe:	60 e1       	ldi	r22, 0x10	; 16
    9800:	81 e2       	ldi	r24, 0x21	; 33
    9802:	9e e0       	ldi	r25, 0x0E	; 14
    9804:	0e 94 5d 82 	call	0x104ba	; 0x104ba <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    9808:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    980c:	60 93 25 10 	sts	0x1025, r22	; 0x801025 <mqtt_client+0x204>
    9810:	70 93 26 10 	sts	0x1026, r23	; 0x801026 <mqtt_client+0x205>
    9814:	80 93 27 10 	sts	0x1027, r24	; 0x801027 <mqtt_client+0x206>
    9818:	90 93 28 10 	sts	0x1028, r25	; 0x801028 <mqtt_client+0x207>
    981c:	60 93 29 10 	sts	0x1029, r22	; 0x801029 <mqtt_client+0x208>
    9820:	70 93 2a 10 	sts	0x102A, r23	; 0x80102a <mqtt_client+0x209>
    9824:	80 93 2b 10 	sts	0x102B, r24	; 0x80102b <mqtt_client+0x20a>
    9828:	90 93 2c 10 	sts	0x102C, r25	; 0x80102c <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    982c:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
    9830:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
    9834:	dc 01       	movw	r26, r24
    9836:	ed 91       	ld	r30, X+
    9838:	fc 91       	ld	r31, X
    983a:	00 84       	ldd	r0, Z+8	; 0x08
    983c:	f1 85       	ldd	r31, Z+9	; 0x09
    983e:	e0 2d       	mov	r30, r0
    9840:	19 95       	eicall
    9842:	89 2b       	or	r24, r25
    9844:	09 f0       	breq	.+2      	; 0x9848 <mqtt_reconnect()+0x112>
    9846:	48 c0       	rjmp	.+144    	; 0x98d8 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    9848:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    984c:	00 91 29 10 	lds	r16, 0x1029	; 0x801029 <mqtt_client+0x208>
    9850:	10 91 2a 10 	lds	r17, 0x102A	; 0x80102a <mqtt_client+0x209>
    9854:	20 91 2b 10 	lds	r18, 0x102B	; 0x80102b <mqtt_client+0x20a>
    9858:	30 91 2c 10 	lds	r19, 0x102C	; 0x80102c <mqtt_client+0x20b>
    985c:	60 1b       	sub	r22, r16
    985e:	71 0b       	sbc	r23, r17
    9860:	82 0b       	sbc	r24, r18
    9862:	93 0b       	sbc	r25, r19
    9864:	64 36       	cpi	r22, 0x64	; 100
    9866:	71 05       	cpc	r23, r1
    9868:	81 05       	cpc	r24, r1
    986a:	91 05       	cpc	r25, r1
    986c:	f8 f2       	brcs	.-66     	; 0x982c <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    986e:	8c ef       	ldi	r24, 0xFC	; 252
    9870:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    9872:	90 93 3d 10 	sts	0x103D, r25	; 0x80103d <mqtt_client+0x21c>
    9876:	80 93 3c 10 	sts	0x103C, r24	; 0x80103c <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    987a:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
    987e:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
    9882:	dc 01       	movw	r26, r24
    9884:	ed 91       	ld	r30, X+
    9886:	fc 91       	ld	r31, X
    9888:	04 88       	ldd	r0, Z+20	; 0x14
    988a:	f5 89       	ldd	r31, Z+21	; 0x15
    988c:	e0 2d       	mov	r30, r0
    988e:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    9890:	80 91 3c 10 	lds	r24, 0x103C	; 0x80103c <mqtt_client+0x21b>
    9894:	a5 96       	adiw	r28, 0x25	; 37
    9896:	0f b6       	in	r0, 0x3f	; 63
    9898:	f8 94       	cli
    989a:	de bf       	out	0x3e, r29	; 62
    989c:	0f be       	out	0x3f, r0	; 63
    989e:	cd bf       	out	0x3d, r28	; 61
    98a0:	df 91       	pop	r29
    98a2:	cf 91       	pop	r28
    98a4:	1f 91       	pop	r17
    98a6:	0f 91       	pop	r16
    98a8:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    98aa:	06 84       	ldd	r0, Z+14	; 0x0e
    98ac:	f7 85       	ldd	r31, Z+15	; 0x0f
    98ae:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    98b0:	22 ee       	ldi	r18, 0xE2	; 226
    98b2:	32 e0       	ldi	r19, 0x02	; 2
    98b4:	3a 83       	std	Y+2, r19	; 0x02
    98b6:	29 83       	std	Y+1, r18	; 0x01
    98b8:	00 91 32 10 	lds	r16, 0x1032	; 0x801032 <mqtt_client+0x211>
    98bc:	10 91 33 10 	lds	r17, 0x1033	; 0x801033 <mqtt_client+0x212>
    98c0:	20 91 34 10 	lds	r18, 0x1034	; 0x801034 <mqtt_client+0x213>
    98c4:	30 91 35 10 	lds	r19, 0x1035	; 0x801035 <mqtt_client+0x214>
    98c8:	0b 83       	std	Y+3, r16	; 0x03
    98ca:	1c 83       	std	Y+4, r17	; 0x04
    98cc:	2d 83       	std	Y+5, r18	; 0x05
    98ce:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    98d0:	be 01       	movw	r22, r28
    98d2:	6f 5f       	subi	r22, 0xFF	; 255
    98d4:	7f 4f       	sbci	r23, 0xFF	; 255
    98d6:	61 cf       	rjmp	.-318    	; 0x979a <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    98d8:	ce 01       	movw	r24, r28
    98da:	85 96       	adiw	r24, 0x25	; 37
    98dc:	0e 94 11 7a 	call	0xf422	; 0xf422 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    98e0:	04 97       	sbiw	r24, 0x04	; 4
    98e2:	59 f6       	brne	.-106    	; 0x987a <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    98e4:	80 91 26 0e 	lds	r24, 0x0E26	; 0x800e26 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    98e8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    98ea:	81 11       	cpse	r24, r1
    98ec:	c2 cf       	rjmp	.-124    	; 0x9872 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    98ee:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    98f2:	60 93 29 10 	sts	0x1029, r22	; 0x801029 <mqtt_client+0x208>
    98f6:	70 93 2a 10 	sts	0x102A, r23	; 0x80102a <mqtt_client+0x209>
    98fa:	80 93 2b 10 	sts	0x102B, r24	; 0x80102b <mqtt_client+0x20a>
    98fe:	90 93 2c 10 	sts	0x102C, r25	; 0x80102c <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    9902:	10 92 2d 10 	sts	0x102D, r1	; 0x80102d <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    9906:	10 92 3d 10 	sts	0x103D, r1	; 0x80103d <mqtt_client+0x21c>
    990a:	10 92 3c 10 	sts	0x103C, r1	; 0x80103c <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    990e:	6e e8       	ldi	r22, 0x8E	; 142
    9910:	76 e2       	ldi	r23, 0x26	; 38
    9912:	ce 01       	movw	r24, r28
    9914:	01 96       	adiw	r24, 0x01	; 1
    9916:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
      strcat(topic, nazev);
    991a:	be 01       	movw	r22, r28
    991c:	65 5e       	subi	r22, 0xE5	; 229
    991e:	7f 4f       	sbci	r23, 0xFF	; 255
    9920:	ce 01       	movw	r24, r28
    9922:	01 96       	adiw	r24, 0x01	; 1
    9924:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500
      strcat(topic, "/#");
    9928:	61 ed       	ldi	r22, 0xD1	; 209
    992a:	73 e0       	ldi	r23, 0x03	; 3
    992c:	ce 01       	movw	r24, r28
    992e:	01 96       	adiw	r24, 0x01	; 1
    9930:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
      mqtt_client.subscribe(topic);
    9934:	ce 01       	movw	r24, r28
    9936:	01 96       	adiw	r24, 0x01	; 1
    9938:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
      strcpy_P(topic, thermctl_header_in);
    993c:	6e e8       	ldi	r22, 0x8E	; 142
    993e:	76 e2       	ldi	r23, 0x26	; 38
    9940:	ce 01       	movw	r24, r28
    9942:	01 96       	adiw	r24, 0x01	; 1
    9944:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
      strcat(topic, "global/#");
    9948:	6b ec       	ldi	r22, 0xCB	; 203
    994a:	73 e0       	ldi	r23, 0x03	; 3
    994c:	ce 01       	movw	r24, r28
    994e:	01 96       	adiw	r24, 0x01	; 1
    9950:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
      mqtt_client.subscribe(topic);
    9954:	ce 01       	movw	r24, r28
    9956:	01 96       	adiw	r24, 0x01	; 1
    9958:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < 5; idx++)
        remote_tds_subscibe_topic(idx);
      */
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    995c:	6f e7       	ldi	r22, 0x7F	; 127
    995e:	76 e2       	ldi	r23, 0x26	; 38
    9960:	ce 01       	movw	r24, r28
    9962:	01 96       	adiw	r24, 0x01	; 1
    9964:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
      strcat(topic, "/#");
    9968:	61 ed       	ldi	r22, 0xD1	; 209
    996a:	73 e0       	ldi	r23, 0x03	; 3
    996c:	ce 01       	movw	r24, r28
    996e:	01 96       	adiw	r24, 0x01	; 1
    9970:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
      mqtt_client.subscribe(topic);
    9974:	ce 01       	movw	r24, r28
    9976:	01 96       	adiw	r24, 0x01	; 1
    9978:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    997c:	67 e6       	ldi	r22, 0x67	; 103
    997e:	76 e2       	ldi	r23, 0x26	; 38
    9980:	ce 01       	movw	r24, r28
    9982:	01 96       	adiw	r24, 0x01	; 1
    9984:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
      mqtt_client.subscribe(topic);
    9988:	ce 01       	movw	r24, r28
    998a:	01 96       	adiw	r24, 0x01	; 1
    998c:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    9990:	60 e5       	ldi	r22, 0x50	; 80
    9992:	76 e2       	ldi	r23, 0x26	; 38
    9994:	ce 01       	movw	r24, r28
    9996:	01 96       	adiw	r24, 0x01	; 1
    9998:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
      mqtt_client.subscribe(topic);
    999c:	ce 01       	movw	r24, r28
    999e:	01 96       	adiw	r24, 0x01	; 1
    99a0:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    99a4:	62 e4       	ldi	r22, 0x42	; 66
    99a6:	76 e2       	ldi	r23, 0x26	; 38
    99a8:	ce 01       	movw	r24, r28
    99aa:	01 96       	adiw	r24, 0x01	; 1
    99ac:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
      mqtt_client.subscribe(topic);
    99b0:	ce 01       	movw	r24, r28
    99b2:	01 96       	adiw	r24, 0x01	; 1
    99b4:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
    99b8:	6b cf       	rjmp	.-298    	; 0x9890 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    99ba:	8e ef       	ldi	r24, 0xFE	; 254
    99bc:	9f ef       	ldi	r25, 0xFF	; 255
    99be:	90 93 3d 10 	sts	0x103D, r25	; 0x80103d <mqtt_client+0x21c>
    99c2:	80 93 3c 10 	sts	0x103C, r24	; 0x80103c <mqtt_client+0x21b>
    99c6:	64 cf       	rjmp	.-312    	; 0x9890 <mqtt_reconnect()+0x15a>

000099c8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    99c8:	5f 92       	push	r5
    99ca:	6f 92       	push	r6
    99cc:	7f 92       	push	r7
    99ce:	8f 92       	push	r8
    99d0:	9f 92       	push	r9
    99d2:	af 92       	push	r10
    99d4:	bf 92       	push	r11
    99d6:	cf 92       	push	r12
    99d8:	df 92       	push	r13
    99da:	ef 92       	push	r14
    99dc:	ff 92       	push	r15
    99de:	0f 93       	push	r16
    99e0:	1f 93       	push	r17
    99e2:	cf 93       	push	r28
    99e4:	df 93       	push	r29
    99e6:	cd b7       	in	r28, 0x3d	; 61
    99e8:	de b7       	in	r29, 0x3e	; 62
    99ea:	af 97       	sbiw	r28, 0x2f	; 47
    99ec:	0f b6       	in	r0, 0x3f	; 63
    99ee:	f8 94       	cli
    99f0:	de bf       	out	0x3e, r29	; 62
    99f2:	0f be       	out	0x3f, r0	; 63
    99f4:	cd bf       	out	0x3d, r28	; 61
    99f6:	6c 01       	movw	r12, r24
    99f8:	5b 01       	movw	r10, r22
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    99fa:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <default_ring>
    99fe:	21 e2       	ldi	r18, 0x21	; 33
    9a00:	82 9f       	mul	r24, r18
    9a02:	c0 01       	movw	r24, r0
    9a04:	11 24       	eor	r1, r1
    9a06:	84 5a       	subi	r24, 0xA4	; 164
    9a08:	9e 4f       	sbci	r25, 0xFE	; 254
    9a0a:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    9a0e:	58 2e       	mov	r5, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3768
  uint8_t idx;
  char str1[25];
  float te;

  idx = thermostat_ring_get_asociate_tds(default_ring);
  strcpy_P(str1, current_temp);
    9a10:	6c e3       	ldi	r22, 0x3C	; 60
    9a12:	78 e2       	ldi	r23, 0x28	; 40
    9a14:	ce 01       	movw	r24, r28
    9a16:	01 96       	adiw	r24, 0x01	; 1
    9a18:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
  if (get_tds18s20(idx, &tds) == 1)
    9a1c:	be 01       	movw	r22, r28
    9a1e:	66 5e       	subi	r22, 0xE6	; 230
    9a20:	7f 4f       	sbci	r23, 0xFF	; 255
    9a22:	85 2d       	mov	r24, r5
    9a24:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    9a28:	81 30       	cpi	r24, 0x01	; 1
    9a2a:	09 f0       	breq	.+2      	; 0x9a2e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x66>
    9a2c:	70 c0       	rjmp	.+224    	; 0x9b0e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
  {
    strcat(str1, tds.name);
    9a2e:	be 01       	movw	r22, r28
    9a30:	6a 5d       	subi	r22, 0xDA	; 218
    9a32:	7f 4f       	sbci	r23, 0xFF	; 255
    9a34:	ce 01       	movw	r24, r28
    9a36:	01 96       	adiw	r24, 0x01	; 1
    9a38:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
  }
  else
  {
    strcat_P(str1, text_err);
  }
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    9a3c:	ee 24       	eor	r14, r14
    9a3e:	ea 94       	dec	r14
    9a40:	fe 2c       	mov	r15, r14
    9a42:	10 e0       	ldi	r17, 0x00	; 0
    9a44:	00 e0       	ldi	r16, 0x00	; 0
    9a46:	21 e0       	ldi	r18, 0x01	; 1
    9a48:	a5 01       	movw	r20, r10
    9a4a:	4b 5f       	subi	r20, 0xFB	; 251
    9a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    9a4e:	b6 01       	movw	r22, r12
    9a50:	6b 5f       	subi	r22, 0xFB	; 251
    9a52:	7f 4f       	sbci	r23, 0xFF	; 255
    9a54:	ce 01       	movw	r24, r28
    9a56:	01 96       	adiw	r24, 0x01	; 1
    9a58:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    9a5c:	35 01       	movw	r6, r10
    9a5e:	84 e1       	ldi	r24, 0x14	; 20
    9a60:	68 0e       	add	r6, r24
    9a62:	71 1c       	adc	r7, r1
    9a64:	46 01       	movw	r8, r12
    9a66:	24 e0       	ldi	r18, 0x04	; 4
    9a68:	82 0e       	add	r8, r18
    9a6a:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
  if (status_tds18s20[idx].online == True)
    9a6c:	8e e1       	ldi	r24, 0x1E	; 30
    9a6e:	58 9e       	mul	r5, r24
    9a70:	f0 01       	movw	r30, r0
    9a72:	11 24       	eor	r1, r1
    9a74:	e5 5d       	subi	r30, 0xD5	; 213
    9a76:	f5 4f       	sbci	r31, 0xF5	; 245
    9a78:	83 8d       	ldd	r24, Z+27	; 0x1b
    9a7a:	81 30       	cpi	r24, 0x01	; 1
    9a7c:	09 f0       	breq	.+2      	; 0x9a80 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb8>
    9a7e:	4e c0       	rjmp	.+156    	; 0x9b1c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x154>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
  {
    te = status_tds18s20[idx].temp / 1000.0;
    9a80:	65 81       	ldd	r22, Z+5	; 0x05
    9a82:	76 81       	ldd	r23, Z+6	; 0x06
    9a84:	07 2e       	mov	r0, r23
    9a86:	00 0c       	add	r0, r0
    9a88:	88 0b       	sbc	r24, r24
    9a8a:	99 0b       	sbc	r25, r25
    9a8c:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
    9a90:	20 e0       	ldi	r18, 0x00	; 0
    9a92:	30 e0       	ldi	r19, 0x00	; 0
    9a94:	4a e7       	ldi	r20, 0x7A	; 122
    9a96:	54 e4       	ldi	r21, 0x44	; 68
    9a98:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3781
    dtostrf(te, 4, 2, str1);
    9a9c:	8e 01       	movw	r16, r28
    9a9e:	0f 5f       	subi	r16, 0xFF	; 255
    9aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa2:	22 e0       	ldi	r18, 0x02	; 2
    9aa4:	44 e0       	ldi	r20, 0x04	; 4
    9aa6:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3782
    strcat(str1, "C");
    9aaa:	6c e0       	ldi	r22, 0x0C	; 12
    9aac:	74 e0       	ldi	r23, 0x04	; 4
    9aae:	c8 01       	movw	r24, r16
    9ab0:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    9ab4:	10 e0       	ldi	r17, 0x00	; 0
    9ab6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    9ab8:	28 e0       	ldi	r18, 0x08	; 8
    9aba:	a3 01       	movw	r20, r6
    9abc:	b4 01       	movw	r22, r8
    9abe:	ce 01       	movw	r24, r28
    9ac0:	01 96       	adiw	r24, 0x01	; 1
    9ac2:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9ac6:	10 92 d4 0d 	sts	0x0DD4, r1	; 0x800dd4 <my_lcd+0xb>
    9aca:	10 92 d3 0d 	sts	0x0DD3, r1	; 0x800dd3 <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    9ace:	95 01       	movw	r18, r10
    9ad0:	2c 5a       	subi	r18, 0xAC	; 172
    9ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    9ad4:	a6 01       	movw	r20, r12
    9ad6:	4c 50       	subi	r20, 0x0C	; 12
    9ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    9ada:	b5 01       	movw	r22, r10
    9adc:	c6 01       	movw	r24, r12
    9ade:	0e 94 c7 71 	call	0xe38e	; 0xe38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
}
    9ae2:	af 96       	adiw	r28, 0x2f	; 47
    9ae4:	0f b6       	in	r0, 0x3f	; 63
    9ae6:	f8 94       	cli
    9ae8:	de bf       	out	0x3e, r29	; 62
    9aea:	0f be       	out	0x3f, r0	; 63
    9aec:	cd bf       	out	0x3d, r28	; 61
    9aee:	df 91       	pop	r29
    9af0:	cf 91       	pop	r28
    9af2:	1f 91       	pop	r17
    9af4:	0f 91       	pop	r16
    9af6:	ff 90       	pop	r15
    9af8:	ef 90       	pop	r14
    9afa:	df 90       	pop	r13
    9afc:	cf 90       	pop	r12
    9afe:	bf 90       	pop	r11
    9b00:	af 90       	pop	r10
    9b02:	9f 90       	pop	r9
    9b04:	8f 90       	pop	r8
    9b06:	7f 90       	pop	r7
    9b08:	6f 90       	pop	r6
    9b0a:	5f 90       	pop	r5
    9b0c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
  {
    strcat(str1, tds.name);
  }
  else
  {
    strcat_P(str1, text_err);
    9b0e:	66 e3       	ldi	r22, 0x36	; 54
    9b10:	78 e2       	ldi	r23, 0x28	; 40
    9b12:	ce 01       	movw	r24, r28
    9b14:	01 96       	adiw	r24, 0x01	; 1
    9b16:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
    9b1a:	90 cf       	rjmp	.-224    	; 0x9a3c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3787
    strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    9b1c:	66 e3       	ldi	r22, 0x36	; 54
    9b1e:	78 e2       	ldi	r23, 0x28	; 40
    9b20:	ce 01       	movw	r24, r28
    9b22:	01 96       	adiw	r24, 0x01	; 1
    9b24:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    9b28:	ee 24       	eor	r14, r14
    9b2a:	ea 94       	dec	r14
    9b2c:	fe 2c       	mov	r15, r14
    9b2e:	00 e0       	ldi	r16, 0x00	; 0
    9b30:	18 ef       	ldi	r17, 0xF8	; 248
    9b32:	c2 cf       	rjmp	.-124    	; 0x9ab8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf0>

00009b34 <get_function_thermostat_default_ring_has_mode(unsigned char)>:
_Z45get_function_thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
   funkce pro zjisteni, zda mode v args je aktivni a nebo ne
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_default_ring_has_mode(uint8_t args)
{
    9b34:	cf 93       	push	r28
    9b36:	c8 2f       	mov	r28, r24
thermostat_ring_get_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    9b38:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <default_ring>
    9b3c:	21 e2       	ldi	r18, 0x21	; 33
    9b3e:	82 9f       	mul	r24, r18
    9b40:	c0 01       	movw	r24, r0
    9b42:	11 24       	eor	r1, r1
    9b44:	82 5a       	subi	r24, 0xA2	; 162
    9b46:	9e 4f       	sbci	r25, 0xFE	; 254
    9b48:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
thermostat_ring_get_mode_1():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    9b4c:	91 e0       	ldi	r25, 0x01	; 1
    9b4e:	c8 13       	cpse	r28, r24
    9b50:	90 e0       	ldi	r25, 0x00	; 0
_Z45get_function_thermostat_default_ring_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1841
  uint8_t ret = 0;
  if (thermostat_ring_get_mode_1(default_ring, args) == true)
    ret = 1;
  return ret;
}
    9b52:	89 2f       	mov	r24, r25
    9b54:	cf 91       	pop	r28
    9b56:	08 95       	ret

00009b58 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3188
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    9b58:	2f 92       	push	r2
    9b5a:	3f 92       	push	r3
    9b5c:	4f 92       	push	r4
    9b5e:	5f 92       	push	r5
    9b60:	6f 92       	push	r6
    9b62:	7f 92       	push	r7
    9b64:	8f 92       	push	r8
    9b66:	9f 92       	push	r9
    9b68:	af 92       	push	r10
    9b6a:	bf 92       	push	r11
    9b6c:	cf 92       	push	r12
    9b6e:	df 92       	push	r13
    9b70:	ef 92       	push	r14
    9b72:	ff 92       	push	r15
    9b74:	0f 93       	push	r16
    9b76:	1f 93       	push	r17
    9b78:	cf 93       	push	r28
    9b7a:	df 93       	push	r29
    9b7c:	cd b7       	in	r28, 0x3d	; 61
    9b7e:	de b7       	in	r29, 0x3e	; 62
    9b80:	cd 54       	subi	r28, 0x4D	; 77
    9b82:	d1 40       	sbci	r29, 0x01	; 1
    9b84:	0f b6       	in	r0, 0x3f	; 63
    9b86:	f8 94       	cli
    9b88:	de bf       	out	0x3e, r29	; 62
    9b8a:	0f be       	out	0x3f, r0	; 63
    9b8c:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    9b8e:	1b 82       	std	Y+3, r1	; 0x03
    9b90:	84 ed       	ldi	r24, 0xD4	; 212
    9b92:	93 e0       	ldi	r25, 0x03	; 3
    9b94:	9d 83       	std	Y+5, r25	; 0x05
    9b96:	8c 83       	std	Y+4, r24	; 0x04
    9b98:	89 e3       	ldi	r24, 0x39	; 57
    9b9a:	95 e0       	ldi	r25, 0x05	; 5
    9b9c:	9f 83       	std	Y+7, r25	; 0x07
    9b9e:	8e 83       	std	Y+6, r24	; 0x06
    9ba0:	18 86       	std	Y+8, r1	; 0x08
    9ba2:	19 86       	std	Y+9, r1	; 0x09
    9ba4:	1a 86       	std	Y+10, r1	; 0x0a
    9ba6:	1b 86       	std	Y+11, r1	; 0x0b
    9ba8:	80 e6       	ldi	r24, 0x60	; 96
    9baa:	9a ee       	ldi	r25, 0xEA	; 234
    9bac:	a0 e0       	ldi	r26, 0x00	; 0
    9bae:	b0 e0       	ldi	r27, 0x00	; 0
    9bb0:	8c 87       	std	Y+12, r24	; 0x0c
    9bb2:	9d 87       	std	Y+13, r25	; 0x0d
    9bb4:	ae 87       	std	Y+14, r26	; 0x0e
    9bb6:	bf 87       	std	Y+15, r27	; 0x0f
    9bb8:	18 8a       	std	Y+16, r1	; 0x10
    9bba:	19 8a       	std	Y+17, r1	; 0x11
    9bbc:	1a 8a       	std	Y+18, r1	; 0x12
    9bbe:	1b 8a       	std	Y+19, r1	; 0x13
    9bc0:	1c 8a       	std	Y+20, r1	; 0x14
    9bc2:	1d 8a       	std	Y+21, r1	; 0x15
    9bc4:	1e 8a       	std	Y+22, r1	; 0x16
    9bc6:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    9bc8:	8e e3       	ldi	r24, 0x3E	; 62
    9bca:	90 e1       	ldi	r25, 0x10	; 16
    9bcc:	9a 83       	std	Y+2, r25	; 0x02
    9bce:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    9bd0:	61 e0       	ldi	r22, 0x01	; 1
    9bd2:	86 e0       	ldi	r24, 0x06	; 6
    9bd4:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
  pinMode(ETH_CS, OUTPUT);
    9bd8:	61 e0       	ldi	r22, 0x01	; 1
    9bda:	8f e0       	ldi	r24, 0x0F	; 15
    9bdc:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
  pinMode(LED, OUTPUT);
    9be0:	61 e0       	ldi	r22, 0x01	; 1
    9be2:	88 e0       	ldi	r24, 0x08	; 8
    9be4:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
  pinMode(PIEZO, OUTPUT);
    9be8:	61 e0       	ldi	r22, 0x01	; 1
    9bea:	8c e0       	ldi	r24, 0x0C	; 12
    9bec:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
  pinMode(STORAGE_RAM_CS, OUTPUT);
    9bf0:	61 e0       	ldi	r22, 0x01	; 1
    9bf2:	86 e1       	ldi	r24, 0x16	; 22
    9bf4:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    9bf8:	61 e0       	ldi	r22, 0x01	; 1
    9bfa:	87 e1       	ldi	r24, 0x17	; 23
    9bfc:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
  pinMode(JUMPER, INPUT_PULLUP);
    9c00:	62 e0       	ldi	r22, 0x02	; 2
    9c02:	8e e0       	ldi	r24, 0x0E	; 14
    9c04:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997

  digitalWrite(PIEZO, LOW);
    9c08:	60 e0       	ldi	r22, 0x00	; 0
    9c0a:	8c e0       	ldi	r24, 0x0C	; 12
    9c0c:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
  delay(1000);
    9c10:	68 ee       	ldi	r22, 0xE8	; 232
    9c12:	73 e0       	ldi	r23, 0x03	; 3
    9c14:	80 e0       	ldi	r24, 0x00	; 0
    9c16:	90 e0       	ldi	r25, 0x00	; 0
    9c18:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2999
  digitalWrite(PIEZO, HIGH);
    9c1c:	61 e0       	ldi	r22, 0x01	; 1
    9c1e:	8c e0       	ldi	r24, 0x0C	; 12
    9c20:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3204

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    9c24:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
  SPI.begin();
    9c26:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
  Wire.begin();
    9c2a:	0e 94 0b 78 	call	0xf016	; 0xf016 <TwoWire::begin() [clone .constprop.39]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    9c2e:	0e 94 0b 78 	call	0xf016	; 0xf016 <TwoWire::begin() [clone .constprop.39]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    9c32:	81 e2       	ldi	r24, 0x21	; 33
    9c34:	9e e0       	ldi	r25, 0x0E	; 14
    9c36:	90 93 05 09 	sts	0x0905, r25	; 0x800905 <pub_mqtt_client+0x1>
    9c3a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    9c3e:	70 e0       	ldi	r23, 0x00	; 0
    9c40:	60 e0       	ldi	r22, 0x00	; 0
    9c42:	84 e6       	ldi	r24, 0x64	; 100
    9c44:	9b e4       	ldi	r25, 0x4B	; 75
    9c46:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    9c4a:	70 e0       	ldi	r23, 0x00	; 0
    9c4c:	60 e0       	ldi	r22, 0x00	; 0
    9c4e:	80 e5       	ldi	r24, 0x50	; 80
    9c50:	99 e2       	ldi	r25, 0x29	; 41
    9c52:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  printf_begin();

  swSPI.begin();
    9c56:	80 e6       	ldi	r24, 0x60	; 96
    9c58:	90 e1       	ldi	r25, 0x10	; 16
    9c5a:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1353
  }
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    9c5e:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <MenuHistoryIndex>
    9c62:	f0 e0       	ldi	r31, 0x00	; 0
    9c64:	e6 58       	subi	r30, 0x86	; 134
    9c66:	f7 4f       	sbci	r31, 0xF7	; 247
    9c68:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    9c6a:	0e 94 d7 78 	call	0xf1ae	; 0xf1ae <LCDWIKI_KBV::reset() [clone .constprop.47]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    9c6e:	80 91 e3 0d 	lds	r24, 0x0DE3	; 0x800de3 <my_lcd+0x1a>
    9c72:	90 91 e4 0d 	lds	r25, 0x0DE4	; 0x800de4 <my_lcd+0x1b>
    9c76:	01 96       	adiw	r24, 0x01	; 1
    9c78:	09 f0       	breq	.+2      	; 0x9c7c <setup+0x124>
    9c7a:	4c c0       	rjmp	.+152    	; 0x9d14 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    9c7c:	60 e0       	ldi	r22, 0x00	; 0
    9c7e:	84 e0       	ldi	r24, 0x04	; 4
    9c80:	90 e0       	ldi	r25, 0x00	; 0
    9c82:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
    9c86:	89 2b       	or	r24, r25
    9c88:	39 f5       	brne	.+78     	; 0x9cd8 <setup+0x180>
    9c8a:	61 e0       	ldi	r22, 0x01	; 1
    9c8c:	84 e0       	ldi	r24, 0x04	; 4
    9c8e:	90 e0       	ldi	r25, 0x00	; 0
    9c90:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
    9c94:	81 15       	cp	r24, r1
    9c96:	90 48       	sbci	r25, 0x80	; 128
    9c98:	f9 f4       	brne	.+62     	; 0x9cd8 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    9c9a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    9c9e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    9ca2:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    9ca6:	2b 96       	adiw	r28, 0x0b	; 11
    9ca8:	8d af       	std	Y+61, r24	; 0x3d
    9caa:	9e af       	std	Y+62, r25	; 0x3e
    9cac:	af af       	std	Y+63, r26	; 0x3f
    9cae:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    9cb0:	23 e0       	ldi	r18, 0x03	; 3
    9cb2:	ae 01       	movw	r20, r28
    9cb4:	48 5b       	subi	r20, 0xB8	; 184
    9cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    9cb8:	69 eb       	ldi	r22, 0xB9	; 185
    9cba:	70 e0       	ldi	r23, 0x00	; 0
    9cbc:	89 ec       	ldi	r24, 0xC9	; 201
    9cbe:	9d e0       	ldi	r25, 0x0D	; 13
    9cc0:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    9cc4:	60 e0       	ldi	r22, 0x00	; 0
    9cc6:	80 ed       	ldi	r24, 0xD0	; 208
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
    9cce:	61 e0       	ldi	r22, 0x01	; 1
    9cd0:	80 ed       	ldi	r24, 0xD0	; 208
    9cd2:	90 e0       	ldi	r25, 0x00	; 0
    9cd4:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    9cd8:	61 e0       	ldi	r22, 0x01	; 1
    9cda:	83 ed       	ldi	r24, 0xD3	; 211
    9cdc:	90 e0       	ldi	r25, 0x00	; 0
    9cde:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    9ce2:	81 34       	cpi	r24, 0x41	; 65
    9ce4:	a3 e9       	ldi	r26, 0x93	; 147
    9ce6:	9a 07       	cpc	r25, r26
    9ce8:	89 f0       	breq	.+34     	; 0x9d0c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    9cea:	86 38       	cpi	r24, 0x86	; 134
    9cec:	b4 e9       	ldi	r27, 0x94	; 148
    9cee:	9b 07       	cpc	r25, r27
    9cf0:	69 f0       	breq	.+26     	; 0x9d0c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    9cf2:	88 38       	cpi	r24, 0x88	; 136
    9cf4:	e4 e9       	ldi	r30, 0x94	; 148
    9cf6:	9e 07       	cpc	r25, r30
    9cf8:	49 f0       	breq	.+18     	; 0x9d0c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    9cfa:	86 39       	cpi	r24, 0x96	; 150
    9cfc:	f7 e7       	ldi	r31, 0x77	; 119
    9cfe:	9f 07       	cpc	r25, r31
    9d00:	29 f0       	breq	.+10     	; 0x9d0c <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    9d02:	60 e0       	ldi	r22, 0x00	; 0
    9d04:	90 e0       	ldi	r25, 0x00	; 0
    9d06:	80 e0       	ldi	r24, 0x00	; 0
    9d08:	0e 94 48 79 	call	0xf290	; 0xf290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    9d0c:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <my_lcd+0x1b>
    9d10:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    9d14:	00 91 e3 0d 	lds	r16, 0x0DE3	; 0x800de3 <my_lcd+0x1a>
    9d18:	10 91 e4 0d 	lds	r17, 0x0DE4	; 0x800de4 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    9d1c:	0e 94 d7 78 	call	0xf1ae	; 0xf1ae <LCDWIKI_KBV::reset() [clone .constprop.47]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    9d20:	68 ec       	ldi	r22, 0xC8	; 200
    9d22:	70 e0       	ldi	r23, 0x00	; 0
    9d24:	80 e0       	ldi	r24, 0x00	; 0
    9d26:	90 e0       	ldi	r25, 0x00	; 0
    9d28:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    9d2c:	06 39       	cpi	r16, 0x96	; 150
    9d2e:	17 47       	sbci	r17, 0x77	; 119
    9d30:	09 f0       	breq	.+2      	; 0x9d34 <setup+0x1dc>
    9d32:	35 c3       	rjmp	.+1642   	; 0xa39e <setup+0x846>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    9d34:	89 e0       	ldi	r24, 0x09	; 9
    9d36:	90 e0       	ldi	r25, 0x00	; 0
    9d38:	90 93 e2 0d 	sts	0x0DE2, r25	; 0x800de2 <my_lcd+0x19>
    9d3c:	80 93 e1 0d 	sts	0x0DE1, r24	; 0x800de1 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    9d40:	8a e2       	ldi	r24, 0x2A	; 42
    9d42:	90 e0       	ldi	r25, 0x00	; 0
    9d44:	90 93 e6 0d 	sts	0x0DE6, r25	; 0x800de6 <my_lcd+0x1d>
    9d48:	80 93 e5 0d 	sts	0x0DE5, r24	; 0x800de5 <my_lcd+0x1c>
    9d4c:	8b e2       	ldi	r24, 0x2B	; 43
    9d4e:	90 e0       	ldi	r25, 0x00	; 0
    9d50:	90 93 e8 0d 	sts	0x0DE8, r25	; 0x800de8 <my_lcd+0x1f>
    9d54:	80 93 e7 0d 	sts	0x0DE7, r24	; 0x800de7 <my_lcd+0x1e>
    9d58:	8c e2       	ldi	r24, 0x2C	; 44
    9d5a:	90 e0       	ldi	r25, 0x00	; 0
    9d5c:	90 93 ea 0d 	sts	0x0DEA, r25	; 0x800dea <my_lcd+0x21>
    9d60:	80 93 e9 0d 	sts	0x0DE9, r24	; 0x800de9 <my_lcd+0x20>
    9d64:	8e e2       	ldi	r24, 0x2E	; 46
    9d66:	90 e0       	ldi	r25, 0x00	; 0
    9d68:	90 93 ec 0d 	sts	0x0DEC, r25	; 0x800dec <my_lcd+0x23>
    9d6c:	80 93 eb 0d 	sts	0x0DEB, r24	; 0x800deb <my_lcd+0x22>
    9d70:	83 e3       	ldi	r24, 0x33	; 51
    9d72:	90 e0       	ldi	r25, 0x00	; 0
    9d74:	90 93 ee 0d 	sts	0x0DEE, r25	; 0x800dee <my_lcd+0x25>
    9d78:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <my_lcd+0x24>
    9d7c:	87 e3       	ldi	r24, 0x37	; 55
    9d7e:	90 e0       	ldi	r25, 0x00	; 0
    9d80:	90 93 f0 0d 	sts	0x0DF0, r25	; 0x800df0 <my_lcd+0x27>
    9d84:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <my_lcd+0x26>
    9d88:	86 e3       	ldi	r24, 0x36	; 54
    9d8a:	90 e0       	ldi	r25, 0x00	; 0
    9d8c:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <my_lcd+0x29>
    9d90:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <my_lcd+0x28>
    9d94:	10 92 f4 0d 	sts	0x0DF4, r1	; 0x800df4 <my_lcd+0x2b>
    9d98:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <my_lcd+0x2a>
    9d9c:	10 92 f6 0d 	sts	0x0DF6, r1	; 0x800df6 <my_lcd+0x2d>
    9da0:	10 92 f5 0d 	sts	0x0DF5, r1	; 0x800df5 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    9da4:	2c e9       	ldi	r18, 0x9C	; 156
    9da6:	e2 2e       	mov	r14, r18
    9da8:	26 e2       	ldi	r18, 0x26	; 38
    9daa:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    9dac:	3c e6       	ldi	r19, 0x6C	; 108
    9dae:	c3 2e       	mov	r12, r19
    9db0:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    9db2:	f7 01       	movw	r30, r14
    9db4:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    9db6:	31 96       	adiw	r30, 0x01	; 1
    9db8:	14 91       	lpm	r17, Z
    9dba:	f2 e0       	ldi	r31, 0x02	; 2
    9dbc:	ef 0e       	add	r14, r31
    9dbe:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    9dc0:	6f 37       	cpi	r22, 0x7F	; 127
    9dc2:	89 f0       	breq	.+34     	; 0x9de6 <setup+0x28e>
    9dc4:	de 01       	movw	r26, r28
    9dc6:	a8 5b       	subi	r26, 0xB8	; 184
    9dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    9dca:	30 e0       	ldi	r19, 0x00	; 0
    9dcc:	20 e0       	ldi	r18, 0x00	; 0
    9dce:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    9dd0:	21 17       	cp	r18, r17
    9dd2:	08 f0       	brcs	.+2      	; 0x9dd6 <setup+0x27e>
    9dd4:	db c2       	rjmp	.+1462   	; 0xa38c <setup+0x834>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    9dd6:	f7 01       	movw	r30, r14
    9dd8:	e2 0f       	add	r30, r18
    9dda:	f3 1f       	adc	r31, r19
    9ddc:	e4 91       	lpm	r30, Z
    9dde:	ed 93       	st	X+, r30
    9de0:	2f 5f       	subi	r18, 0xFF	; 255
    9de2:	3f 4f       	sbci	r19, 0xFF	; 255
    9de4:	f5 cf       	rjmp	.-22     	; 0x9dd0 <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    9de6:	61 2f       	mov	r22, r17
    9de8:	70 e0       	ldi	r23, 0x00	; 0
    9dea:	90 e0       	ldi	r25, 0x00	; 0
    9dec:	80 e0       	ldi	r24, 0x00	; 0
    9dee:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    9df2:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    9df4:	61 2f       	mov	r22, r17
    9df6:	70 e0       	ldi	r23, 0x00	; 0
    9df8:	6e 5f       	subi	r22, 0xFE	; 254
    9dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    9dfc:	c6 1a       	sub	r12, r22
    9dfe:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    9e00:	1c 14       	cp	r1, r12
    9e02:	1d 04       	cpc	r1, r13
    9e04:	b4 f2       	brlt	.-84     	; 0x9db2 <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    9e06:	80 91 df 0d 	lds	r24, 0x0DDF	; 0x800ddf <my_lcd+0x16>
    9e0a:	0e 94 77 74 	call	0xe8ee	; 0xe8ee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    9e0e:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    9e12:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    9e16:	80 81       	ld	r24, Z
    9e18:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <my_lcd+0x3a>
    9e1c:	89 23       	and	r24, r25
    9e1e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    9e20:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    9e24:	20 91 e1 0d 	lds	r18, 0x0DE1	; 0x800de1 <my_lcd+0x18>
    9e28:	30 91 e2 0d 	lds	r19, 0x0DE2	; 0x800de2 <my_lcd+0x19>
    9e2c:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    9e30:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    9e34:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    9e38:	21 15       	cp	r18, r1
    9e3a:	31 05       	cpc	r19, r1
    9e3c:	09 f0       	breq	.+2      	; 0x9e40 <setup+0x2e8>
    9e3e:	b6 c2       	rjmp	.+1388   	; 0xa3ac <setup+0x854>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    9e40:	20 81       	ld	r18, Z
    9e42:	82 23       	and	r24, r18
    9e44:	80 83       	st	Z, r24
    9e46:	81 e6       	ldi	r24, 0x61	; 97
    9e48:	82 b9       	out	0x02, r24	; 2
    9e4a:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    9e4e:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    9e52:	80 81       	ld	r24, Z
    9e54:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    9e58:	82 23       	and	r24, r18
    9e5a:	80 83       	st	Z, r24
    9e5c:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    9e60:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    9e64:	80 81       	ld	r24, Z
    9e66:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    9e6a:	82 2b       	or	r24, r18
    9e6c:	80 83       	st	Z, r24
    9e6e:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    9e72:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    9e76:	80 81       	ld	r24, Z
    9e78:	20 91 00 0e 	lds	r18, 0x0E00	; 0x800e00 <my_lcd+0x37>
    9e7c:	82 2b       	or	r24, r18
    9e7e:	80 83       	st	Z, r24
    9e80:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    9e82:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    9e86:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    9e8a:	80 81       	ld	r24, Z
    9e8c:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    9e90:	89 23       	and	r24, r25
    9e92:	80 83       	st	Z, r24
    9e94:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    9e98:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    9e9c:	80 81       	ld	r24, Z
    9e9e:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    9ea2:	89 2b       	or	r24, r25
    9ea4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    9ea6:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    9eaa:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    9eae:	80 81       	ld	r24, Z
    9eb0:	90 91 ff 0d 	lds	r25, 0x0DFF	; 0x800dff <my_lcd+0x36>
    9eb4:	89 2b       	or	r24, r25
    9eb6:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    9eb8:	83 e0       	ldi	r24, 0x03	; 3
    9eba:	0e 94 77 74 	call	0xe8ee	; 0xe8ee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    9ebe:	83 e0       	ldi	r24, 0x03	; 3
    9ec0:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    9ec4:	20 91 dd 0d 	lds	r18, 0x0DDD	; 0x800ddd <my_lcd+0x14>
    9ec8:	30 91 de 0d 	lds	r19, 0x0DDE	; 0x800dde <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    9ecc:	40 91 db 0d 	lds	r20, 0x0DDB	; 0x800ddb <my_lcd+0x12>
    9ed0:	50 91 dc 0d 	lds	r21, 0x0DDC	; 0x800ddc <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    9ed4:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    9ed8:	e0 91 c0 0d 	lds	r30, 0x0DC0	; 0x800dc0 <my_touch+0x15>
    9edc:	f0 91 c1 0d 	lds	r31, 0x0DC1	; 0x800dc1 <my_touch+0x16>
    9ee0:	80 81       	ld	r24, Z
    9ee2:	60 91 c7 0d 	lds	r22, 0x0DC7	; 0x800dc7 <my_touch+0x1c>
    9ee6:	86 2b       	or	r24, r22
    9ee8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    9eea:	e0 91 bc 0d 	lds	r30, 0x0DBC	; 0x800dbc <my_touch+0x11>
    9eee:	f0 91 bd 0d 	lds	r31, 0x0DBD	; 0x800dbd <my_touch+0x12>
    9ef2:	80 81       	ld	r24, Z
    9ef4:	60 91 c5 0d 	lds	r22, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    9ef8:	86 2b       	or	r24, r22
    9efa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    9efc:	e0 91 ba 0d 	lds	r30, 0x0DBA	; 0x800dba <my_touch+0xf>
    9f00:	f0 91 bb 0d 	lds	r31, 0x0DBB	; 0x800dbb <my_touch+0x10>
    9f04:	80 81       	ld	r24, Z
    9f06:	60 91 c4 0d 	lds	r22, 0x0DC4	; 0x800dc4 <my_touch+0x19>
    9f0a:	86 2b       	or	r24, r22
    9f0c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    9f0e:	50 93 b4 0d 	sts	0x0DB4, r21	; 0x800db4 <my_touch+0x9>
    9f12:	40 93 b3 0d 	sts	0x0DB3, r20	; 0x800db3 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    9f16:	30 93 b6 0d 	sts	0x0DB6, r19	; 0x800db6 <my_touch+0xb>
    9f1a:	20 93 b5 0d 	sts	0x0DB5, r18	; 0x800db5 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    9f1e:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3221
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    9f22:	8f ef       	ldi	r24, 0xFF	; 255
    9f24:	9f ef       	ldi	r25, 0xFF	; 255
    9f26:	0e 94 5a 72 	call	0xe4b4	; 0xe4b4 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.169]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    9f2a:	8f e1       	ldi	r24, 0x1F	; 31
    9f2c:	90 e0       	ldi	r25, 0x00	; 0
    9f2e:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
    9f32:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3223
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    9f36:	1e 01       	movw	r2, r28
    9f38:	28 e4       	ldi	r18, 0x48	; 72
    9f3a:	22 0e       	add	r2, r18
    9f3c:	31 1c       	adc	r3, r1
    9f3e:	63 e1       	ldi	r22, 0x13	; 19
    9f40:	78 e2       	ldi	r23, 0x28	; 40
    9f42:	c1 01       	movw	r24, r2
    9f44:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3224
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    9f48:	ee 24       	eor	r14, r14
    9f4a:	ea 94       	dec	r14
    9f4c:	fe 2c       	mov	r15, r14
    9f4e:	0f e1       	ldi	r16, 0x1F	; 31
    9f50:	10 e0       	ldi	r17, 0x00	; 0
    9f52:	22 e0       	ldi	r18, 0x02	; 2
    9f54:	4a e0       	ldi	r20, 0x0A	; 10
    9f56:	50 e0       	ldi	r21, 0x00	; 0
    9f58:	6e e1       	ldi	r22, 0x1E	; 30
    9f5a:	70 e0       	ldi	r23, 0x00	; 0
    9f5c:	c1 01       	movw	r24, r2
    9f5e:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    9f62:	8e e1       	ldi	r24, 0x1E	; 30
    9f64:	90 e0       	ldi	r25, 0x00	; 0
    9f66:	c0 5c       	subi	r28, 0xC0	; 192
    9f68:	de 4f       	sbci	r29, 0xFE	; 254
    9f6a:	99 83       	std	Y+1, r25	; 0x01
    9f6c:	88 83       	st	Y, r24
    9f6e:	c0 54       	subi	r28, 0x40	; 64
    9f70:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
  ///
  for (uint8_t init = 0;  init < 16; init++)
    9f72:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    9f74:	d2 2c       	mov	r13, r2
    9f76:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    9f78:	a2 e3       	ldi	r26, 0x32	; 50
    9f7a:	b1 e0       	ldi	r27, 0x01	; 1
    9f7c:	ac 0f       	add	r26, r28
    9f7e:	bd 1f       	adc	r27, r29
    9f80:	12 96       	adiw	r26, 0x02	; 2
    9f82:	cc 5b       	subi	r28, 0xBC	; 188
    9f84:	de 4f       	sbci	r29, 0xFE	; 254
    9f86:	b9 83       	std	Y+1, r27	; 0x01
    9f88:	a8 83       	st	Y, r26
    9f8a:	c4 54       	subi	r28, 0x44	; 68
    9f8c:	d1 40       	sbci	r29, 0x01	; 1
    9f8e:	ec e2       	ldi	r30, 0x2C	; 44
    9f90:	f1 e0       	ldi	r31, 0x01	; 1
    9f92:	ec 0f       	add	r30, r28
    9f94:	fd 1f       	adc	r31, r29
    9f96:	32 96       	adiw	r30, 0x02	; 2
    9f98:	ca 5b       	subi	r28, 0xBA	; 186
    9f9a:	de 4f       	sbci	r29, 0xFE	; 254
    9f9c:	f9 83       	std	Y+1, r31	; 0x01
    9f9e:	e8 83       	st	Y, r30
    9fa0:	c6 54       	subi	r28, 0x46	; 70
    9fa2:	d1 40       	sbci	r29, 0x01	; 1
    9fa4:	26 e2       	ldi	r18, 0x26	; 38
    9fa6:	31 e0       	ldi	r19, 0x01	; 1
    9fa8:	2c 0f       	add	r18, r28
    9faa:	3d 1f       	adc	r19, r29
    9fac:	2e 5f       	subi	r18, 0xFE	; 254
    9fae:	3f 4f       	sbci	r19, 0xFF	; 255
    9fb0:	c8 5b       	subi	r28, 0xB8	; 184
    9fb2:	de 4f       	sbci	r29, 0xFE	; 254
    9fb4:	39 83       	std	Y+1, r19	; 0x01
    9fb6:	28 83       	st	Y, r18
    9fb8:	c8 54       	subi	r28, 0x48	; 72
    9fba:	d1 40       	sbci	r29, 0x01	; 1
    9fbc:	8e ed       	ldi	r24, 0xDE	; 222
    9fbe:	90 e0       	ldi	r25, 0x00	; 0
    9fc0:	8c 0f       	add	r24, r28
    9fc2:	9d 1f       	adc	r25, r29
    9fc4:	02 96       	adiw	r24, 0x02	; 2
    9fc6:	c6 5b       	subi	r28, 0xB6	; 182
    9fc8:	de 4f       	sbci	r29, 0xFE	; 254
    9fca:	99 83       	std	Y+1, r25	; 0x01
    9fcc:	88 83       	st	Y, r24
    9fce:	ca 54       	subi	r28, 0x4A	; 74
    9fd0:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    9fd2:	a8 ec       	ldi	r26, 0xC8	; 200
    9fd4:	b0 e0       	ldi	r27, 0x00	; 0
    9fd6:	ac 0f       	add	r26, r28
    9fd8:	bd 1f       	adc	r27, r29
    9fda:	1c 96       	adiw	r26, 0x0c	; 12
    9fdc:	c4 5b       	subi	r28, 0xB4	; 180
    9fde:	de 4f       	sbci	r29, 0xFE	; 254
    9fe0:	b9 83       	std	Y+1, r27	; 0x01
    9fe2:	a8 83       	st	Y, r26
    9fe4:	cc 54       	subi	r28, 0x4C	; 76
    9fe6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3228
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    9fe8:	ee 24       	eor	r14, r14
    9fea:	ea 94       	dec	r14
    9fec:	fe 2c       	mov	r15, r14
    9fee:	00 e0       	ldi	r16, 0x00	; 0
    9ff0:	18 ef       	ldi	r17, 0xF8	; 248
    9ff2:	21 e0       	ldi	r18, 0x01	; 1
    9ff4:	4e e1       	ldi	r20, 0x1E	; 30
    9ff6:	50 e0       	ldi	r21, 0x00	; 0
    9ff8:	c0 5c       	subi	r28, 0xC0	; 192
    9ffa:	de 4f       	sbci	r29, 0xFE	; 254
    9ffc:	68 81       	ld	r22, Y
    9ffe:	79 81       	ldd	r23, Y+1	; 0x01
    a000:	c0 54       	subi	r28, 0x40	; 64
    a002:	d1 40       	sbci	r29, 0x01	; 1
    a004:	81 ee       	ldi	r24, 0xE1	; 225
    a006:	93 e0       	ldi	r25, 0x03	; 3
    a008:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3230
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    a00c:	a1 10       	cpse	r10, r1
    a00e:	19 c2       	rjmp	.+1074   	; 0xa442 <setup+0x8ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    a010:	63 e0       	ldi	r22, 0x03	; 3
    a012:	78 e2       	ldi	r23, 0x28	; 40
    a014:	c1 01       	movw	r24, r2
    a016:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
      strcat(str1, ":1");
    a01a:	63 ee       	ldi	r22, 0xE3	; 227
    a01c:	73 e0       	ldi	r23, 0x03	; 3
    a01e:	c1 01       	movw	r24, r2
    a020:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a024:	00 ee       	ldi	r16, 0xE0	; 224
    a026:	17 e0       	ldi	r17, 0x07	; 7
    a028:	21 e0       	ldi	r18, 0x01	; 1
    a02a:	42 e3       	ldi	r20, 0x32	; 50
    a02c:	50 e0       	ldi	r21, 0x00	; 0
    a02e:	6e e1       	ldi	r22, 0x1E	; 30
    a030:	70 e0       	ldi	r23, 0x00	; 0
    a032:	c1 01       	movw	r24, r2
    a034:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236

      tritri = 0;
    a038:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <tritri+0x1>
    a03c:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
      petnula = 0;
    a040:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <petnula+0x1>
    a044:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
      dvanact = 0;
    a048:	10 92 1b 0a 	sts	0x0A1B, r1	; 0x800a1b <dvanact+0x1>
    a04c:	10 92 1a 0a 	sts	0x0A1A, r1	; 0x800a1a <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3240
      dvanact = 0;
      light_curr = 0;
    a050:	10 92 e3 0a 	sts	0x0AE3, r1	; 0x800ae3 <light_curr+0x1>
    a054:	10 92 e2 0a 	sts	0x0AE2, r1	; 0x800ae2 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    a058:	88 ef       	ldi	r24, 0xF8	; 248
    a05a:	80 93 e0 0a 	sts	0x0AE0, r24	; 0x800ae0 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    a05e:	83 e0       	ldi	r24, 0x03	; 3
    a060:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    a064:	10 92 e1 0a 	sts	0x0AE1, r1	; 0x800ae1 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    a068:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    a06c:	8e e8       	ldi	r24, 0x8E	; 142
    a06e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    a072:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    a076:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <a2d_reference>
    a07a:	b0 e4       	ldi	r27, 0x40	; 64
    a07c:	8b 9f       	mul	r24, r27
    a07e:	c0 01       	movw	r24, r0
    a080:	11 24       	eor	r1, r1
    a082:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    a086:	82 e8       	ldi	r24, 0x82	; 130
    a088:	9e e1       	ldi	r25, 0x1E	; 30
    a08a:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <_ZL17a2d_interupt_func.lto_priv.227+0x1>
    a08e:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <_ZL17a2d_interupt_func.lto_priv.227>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    a092:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
      a2d_start_first(A_PROUD);
    a096:	83 e0       	ldi	r24, 0x03	; 3
    a098:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
      milis = millis();
    a09c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a0a0:	2b 01       	movw	r4, r22
    a0a2:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3249
      while (a2d_run_now == 0 && millis() - milis < 10);
    a0a4:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
    a0a8:	81 11       	cpse	r24, r1
    a0aa:	0b c0       	rjmp	.+22     	; 0xa0c2 <setup+0x56a>
    a0ac:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a0b0:	64 19       	sub	r22, r4
    a0b2:	75 09       	sbc	r23, r5
    a0b4:	86 09       	sbc	r24, r6
    a0b6:	97 09       	sbc	r25, r7
    a0b8:	6a 30       	cpi	r22, 0x0A	; 10
    a0ba:	71 05       	cpc	r23, r1
    a0bc:	81 05       	cpc	r24, r1
    a0be:	91 05       	cpc	r25, r1
    a0c0:	88 f3       	brcs	.-30     	; 0xa0a4 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3251
      /// regulator 3.3V
      a2d_run_now = 0;
    a0c2:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3252
      a2d_start_first(A_TRIV);
    a0c6:	86 e0       	ldi	r24, 0x06	; 6
    a0c8:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3253
      milis = millis();
    a0cc:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a0d0:	2b 01       	movw	r4, r22
    a0d2:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3254
      while (a2d_run_now == 0 && millis() - milis < 10);
    a0d4:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
    a0d8:	81 11       	cpse	r24, r1
    a0da:	0b c0       	rjmp	.+22     	; 0xa0f2 <setup+0x59a>
    a0dc:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a0e0:	64 19       	sub	r22, r4
    a0e2:	75 09       	sbc	r23, r5
    a0e4:	86 09       	sbc	r24, r6
    a0e6:	97 09       	sbc	r25, r7
    a0e8:	6a 30       	cpi	r22, 0x0A	; 10
    a0ea:	71 05       	cpc	r23, r1
    a0ec:	81 05       	cpc	r24, r1
    a0ee:	91 05       	cpc	r25, r1
    a0f0:	88 f3       	brcs	.-30     	; 0xa0d4 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3256
      /// regulator 5.0V
      a2d_run_now = 0;
    a0f2:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3257
      a2d_start_first(A_PETV);
    a0f6:	85 e0       	ldi	r24, 0x05	; 5
    a0f8:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3258
      milis = millis();
    a0fc:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a100:	2b 01       	movw	r4, r22
    a102:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3259
      while (a2d_run_now == 0 && millis() - milis < 10);
    a104:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
    a108:	81 11       	cpse	r24, r1
    a10a:	0b c0       	rjmp	.+22     	; 0xa122 <setup+0x5ca>
    a10c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a110:	64 19       	sub	r22, r4
    a112:	75 09       	sbc	r23, r5
    a114:	86 09       	sbc	r24, r6
    a116:	97 09       	sbc	r25, r7
    a118:	6a 30       	cpi	r22, 0x0A	; 10
    a11a:	71 05       	cpc	r23, r1
    a11c:	81 05       	cpc	r24, r1
    a11e:	91 05       	cpc	r25, r1
    a120:	88 f3       	brcs	.-30     	; 0xa104 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3261
      /// vstupni napeti 12V
      a2d_run_now = 0;
    a122:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3262
      a2d_start_first(A_DVANACTV);
    a126:	84 e0       	ldi	r24, 0x04	; 4
    a128:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3263
      milis = millis();
    a12c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a130:	2b 01       	movw	r4, r22
    a132:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3264
      while (a2d_run_now == 0 && millis() - milis < 10);
    a134:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
    a138:	81 11       	cpse	r24, r1
    a13a:	0b c0       	rjmp	.+22     	; 0xa152 <setup+0x5fa>
    a13c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a140:	64 19       	sub	r22, r4
    a142:	75 09       	sbc	r23, r5
    a144:	86 09       	sbc	r24, r6
    a146:	97 09       	sbc	r25, r7
    a148:	6a 30       	cpi	r22, 0x0A	; 10
    a14a:	71 05       	cpc	r23, r1
    a14c:	81 05       	cpc	r24, r1
    a14e:	91 05       	cpc	r25, r1
    a150:	88 f3       	brcs	.-30     	; 0xa134 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3266
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    a152:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
      a2d_start_first(A_LIGHT);
    a156:	87 e0       	ldi	r24, 0x07	; 7
    a158:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3268
      milis = millis();
    a15c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a160:	2b 01       	movw	r4, r22
    a162:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3269
      while (a2d_run_now == 0 && millis() - milis < 10);
    a164:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
    a168:	81 11       	cpse	r24, r1
    a16a:	0b c0       	rjmp	.+22     	; 0xa182 <setup+0x62a>
    a16c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    a170:	64 19       	sub	r22, r4
    a172:	75 09       	sbc	r23, r5
    a174:	86 09       	sbc	r24, r6
    a176:	97 09       	sbc	r25, r7
    a178:	6a 30       	cpi	r22, 0x0A	; 10
    a17a:	71 05       	cpc	r23, r1
    a17c:	81 05       	cpc	r24, r1
    a17e:	91 05       	cpc	r25, r1
    a180:	88 f3       	brcs	.-30     	; 0xa164 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3271
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    a182:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3273
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    a186:	4e 01       	movw	r8, r28
    a188:	ea ef       	ldi	r30, 0xFA	; 250
    a18a:	8e 1a       	sub	r8, r30
    a18c:	ee ef       	ldi	r30, 0xFE	; 254
    a18e:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a190:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <tritri>
    a194:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <tritri+0x1>
    a198:	25 e0       	ldi	r18, 0x05	; 5
    a19a:	28 9f       	mul	r18, r24
    a19c:	b0 01       	movw	r22, r0
    a19e:	29 9f       	mul	r18, r25
    a1a0:	70 0d       	add	r23, r0
    a1a2:	11 24       	eor	r1, r1
    a1a4:	90 e0       	ldi	r25, 0x00	; 0
    a1a6:	80 e0       	ldi	r24, 0x00	; 0
    a1a8:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
    a1ac:	20 e0       	ldi	r18, 0x00	; 0
    a1ae:	30 e0       	ldi	r19, 0x00	; 0
    a1b0:	4a e7       	ldi	r20, 0x7A	; 122
    a1b2:	54 e4       	ldi	r21, 0x44	; 68
    a1b4:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3273
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    a1b8:	84 01       	movw	r16, r8
    a1ba:	22 e0       	ldi	r18, 0x02	; 2
    a1bc:	44 e0       	ldi	r20, 0x04	; 4
    a1be:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3274
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    a1c2:	7e 01       	movw	r14, r28
    a1c4:	f2 ef       	ldi	r31, 0xF2	; 242
    a1c6:	ef 1a       	sub	r14, r31
    a1c8:	fe ef       	ldi	r31, 0xFE	; 254
    a1ca:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a1cc:	60 91 1c 0a 	lds	r22, 0x0A1C	; 0x800a1c <petnula>
    a1d0:	70 91 1d 0a 	lds	r23, 0x0A1D	; 0x800a1d <petnula+0x1>
    a1d4:	13 e0       	ldi	r17, 0x03	; 3
    a1d6:	66 0f       	add	r22, r22
    a1d8:	77 1f       	adc	r23, r23
    a1da:	1a 95       	dec	r17
    a1dc:	e1 f7       	brne	.-8      	; 0xa1d6 <setup+0x67e>
    a1de:	90 e0       	ldi	r25, 0x00	; 0
    a1e0:	80 e0       	ldi	r24, 0x00	; 0
    a1e2:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
    a1e6:	20 e0       	ldi	r18, 0x00	; 0
    a1e8:	30 e0       	ldi	r19, 0x00	; 0
    a1ea:	4a e7       	ldi	r20, 0x7A	; 122
    a1ec:	54 e4       	ldi	r21, 0x44	; 68
    a1ee:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3274
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    a1f2:	87 01       	movw	r16, r14
    a1f4:	22 e0       	ldi	r18, 0x02	; 2
    a1f6:	44 e0       	ldi	r20, 0x04	; 4
    a1f8:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3275
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    a1fc:	3e 01       	movw	r6, r28
    a1fe:	2a ee       	ldi	r18, 0xEA	; 234
    a200:	62 1a       	sub	r6, r18
    a202:	2e ef       	ldi	r18, 0xFE	; 254
    a204:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a206:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <dvanact>
    a20a:	90 91 1b 0a 	lds	r25, 0x0A1B	; 0x800a1b <dvanact+0x1>
    a20e:	29 e3       	ldi	r18, 0x39	; 57
    a210:	28 9f       	mul	r18, r24
    a212:	b0 01       	movw	r22, r0
    a214:	29 9f       	mul	r18, r25
    a216:	70 0d       	add	r23, r0
    a218:	11 24       	eor	r1, r1
    a21a:	90 e0       	ldi	r25, 0x00	; 0
    a21c:	80 e0       	ldi	r24, 0x00	; 0
    a21e:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
    a222:	20 e0       	ldi	r18, 0x00	; 0
    a224:	30 e0       	ldi	r19, 0x00	; 0
    a226:	4a e7       	ldi	r20, 0x7A	; 122
    a228:	54 e4       	ldi	r21, 0x44	; 68
    a22a:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3275
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    a22e:	83 01       	movw	r16, r6
    a230:	22 e0       	ldi	r18, 0x02	; 2
    a232:	44 e0       	ldi	r20, 0x04	; 4
    a234:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    a238:	2e 01       	movw	r4, r28
    a23a:	32 ee       	ldi	r19, 0xE2	; 226
    a23c:	43 1a       	sub	r4, r19
    a23e:	3e ef       	ldi	r19, 0xFE	; 254
    a240:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    a242:	60 91 18 0a 	lds	r22, 0x0A18	; 0x800a18 <proud>
    a246:	70 91 19 0a 	lds	r23, 0x0A19	; 0x800a19 <proud+0x1>
    a24a:	90 e0       	ldi	r25, 0x00	; 0
    a24c:	80 e0       	ldi	r24, 0x00	; 0
    a24e:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    a252:	82 01       	movw	r16, r4
    a254:	22 e0       	ldi	r18, 0x02	; 2
    a256:	44 e0       	ldi	r20, 0x04	; 4
    a258:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3277
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    a25c:	5f 92       	push	r5
    a25e:	4f 92       	push	r4
    a260:	7f 92       	push	r7
    a262:	6f 92       	push	r6
    a264:	ff 92       	push	r15
    a266:	ef 92       	push	r14
    a268:	9f 92       	push	r9
    a26a:	8f 92       	push	r8
    a26c:	86 ee       	ldi	r24, 0xE6	; 230
    a26e:	93 e0       	ldi	r25, 0x03	; 3
    a270:	9f 93       	push	r25
    a272:	8f 93       	push	r24
    a274:	4e 01       	movw	r8, r28
    a276:	88 e8       	ldi	r24, 0x88	; 136
    a278:	88 0e       	add	r8, r24
    a27a:	91 1c       	adc	r9, r1
    a27c:	9f 92       	push	r9
    a27e:	8f 92       	push	r8
    a280:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a284:	ee 24       	eor	r14, r14
    a286:	ea 94       	dec	r14
    a288:	fe 2c       	mov	r15, r14
    a28a:	00 ee       	ldi	r16, 0xE0	; 224
    a28c:	17 e0       	ldi	r17, 0x07	; 7
    a28e:	21 e0       	ldi	r18, 0x01	; 1
    a290:	42 e3       	ldi	r20, 0x32	; 50
    a292:	50 e0       	ldi	r21, 0x00	; 0
    a294:	60 ea       	ldi	r22, 0xA0	; 160
    a296:	70 e0       	ldi	r23, 0x00	; 0
    a298:	c4 01       	movw	r24, r8
    a29a:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    a29e:	0f b6       	in	r0, 0x3f	; 63
    a2a0:	f8 94       	cli
    a2a2:	de bf       	out	0x3e, r29	; 62
    a2a4:	0f be       	out	0x3f, r0	; 63
    a2a6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
      }
      default_ring = get_default_ring();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    a2a8:	2e e0       	ldi	r18, 0x0E	; 14
    a2aa:	a2 12       	cpse	r10, r18
    a2ac:	0c 94 c7 59 	jmp	0xb38e	; 0xb38e <setup+0x1836>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
    {
      strcpy_P(str1, text_ntp_cas);
    a2b0:	6b e1       	ldi	r22, 0x1B	; 27
    a2b2:	77 e2       	ldi	r23, 0x27	; 39
    a2b4:	c1 01       	movw	r24, r2
    a2b6:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a2ba:	ee 24       	eor	r14, r14
    a2bc:	ea 94       	dec	r14
    a2be:	fe 2c       	mov	r15, r14
    a2c0:	00 ee       	ldi	r16, 0xE0	; 224
    a2c2:	17 e0       	ldi	r17, 0x07	; 7
    a2c4:	21 e0       	ldi	r18, 0x01	; 1
    a2c6:	4e eb       	ldi	r20, 0xBE	; 190
    a2c8:	50 e0       	ldi	r21, 0x00	; 0
    a2ca:	6e e1       	ldi	r22, 0x1E	; 30
    a2cc:	70 e0       	ldi	r23, 0x00	; 0
    a2ce:	c1 01       	movw	r24, r2
    a2d0:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
ntp_check():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    a2d4:	c2 52       	subi	r28, 0x22	; 34
    a2d6:	df 4f       	sbci	r29, 0xFF	; 255
    a2d8:	18 82       	st	Y, r1
    a2da:	ce 5d       	subi	r28, 0xDE	; 222
    a2dc:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    a2de:	0a e0       	ldi	r16, 0x0A	; 10
    a2e0:	24 e0       	ldi	r18, 0x04	; 4
    a2e2:	4c e7       	ldi	r20, 0x7C	; 124
    a2e4:	5c e0       	ldi	r21, 0x0C	; 12
    a2e6:	6e e2       	ldi	r22, 0x2E	; 46
    a2e8:	ce 01       	movw	r24, r28
    a2ea:	82 52       	subi	r24, 0x22	; 34
    a2ec:	9f 4f       	sbci	r25, 0xFF	; 255
    a2ee:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    a2f2:	89 e3       	ldi	r24, 0x39	; 57
    a2f4:	95 e0       	ldi	r25, 0x05	; 5
    a2f6:	9f 83       	std	Y+7, r25	; 0x07
    a2f8:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    a2fa:	89 81       	ldd	r24, Y+1	; 0x01
    a2fc:	9a 81       	ldd	r25, Y+2	; 0x02
    a2fe:	dc 01       	movw	r26, r24
    a300:	ed 91       	ld	r30, X+
    a302:	fc 91       	ld	r31, X
    a304:	06 84       	ldd	r0, Z+14	; 0x0e
    a306:	f7 85       	ldd	r31, Z+15	; 0x0f
    a308:	e0 2d       	mov	r30, r0
    a30a:	69 e3       	ldi	r22, 0x39	; 57
    a30c:	75 e0       	ldi	r23, 0x05	; 5
    a30e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    a310:	81 e0       	ldi	r24, 0x01	; 1
    a312:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    a314:	80 e1       	ldi	r24, 0x10	; 16
    a316:	9e e0       	ldi	r25, 0x0E	; 14
    a318:	a0 e0       	ldi	r26, 0x00	; 0
    a31a:	b0 e0       	ldi	r27, 0x00	; 0
    a31c:	88 87       	std	Y+8, r24	; 0x08
    a31e:	99 87       	std	Y+9, r25	; 0x09
    a320:	aa 87       	std	Y+10, r26	; 0x0a
    a322:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    a324:	ee ed       	ldi	r30, 0xDE	; 222
    a326:	f0 e0       	ldi	r31, 0x00	; 0
    a328:	ec 0f       	add	r30, r28
    a32a:	fd 1f       	adc	r31, r29
    a32c:	fd 83       	std	Y+5, r31	; 0x05
    a32e:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    a330:	81 e0       	ldi	r24, 0x01	; 1
    a332:	90 e0       	ldi	r25, 0x00	; 0
    a334:	a0 e0       	ldi	r26, 0x00	; 0
    a336:	b0 e0       	ldi	r27, 0x00	; 0
    a338:	8c 87       	std	Y+12, r24	; 0x0c
    a33a:	9d 87       	std	Y+13, r25	; 0x0d
    a33c:	ae 87       	std	Y+14, r26	; 0x0e
    a33e:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    a340:	ce 01       	movw	r24, r28
    a342:	01 96       	adiw	r24, 0x01	; 1
    a344:	0e 94 51 7c 	call	0xf8a2	; 0xf8a2 <NTPClient::update()>
    a348:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    a34a:	89 81       	ldd	r24, Y+1	; 0x01
    a34c:	9a 81       	ldd	r25, Y+2	; 0x02
    a34e:	dc 01       	movw	r26, r24
    a350:	ed 91       	ld	r30, X+
    a352:	fc 91       	ld	r31, X
    a354:	02 88       	ldd	r0, Z+18	; 0x12
    a356:	f3 89       	ldd	r31, Z+19	; 0x13
    a358:	e0 2d       	mov	r30, r0
    a35a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    a35c:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
      if (ntp_check(&timeClient) == 0)
    a35e:	11 11       	cpse	r17, r1
    a360:	0c 94 b1 59 	jmp	0xb362	; 0xb362 <setup+0x180a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3571
      {
        strcpy_P(str1, text_err);
    a364:	66 e3       	ldi	r22, 0x36	; 54
    a366:	78 e2       	ldi	r23, 0x28	; 40
    a368:	c1 01       	movw	r24, r2
    a36a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    a36e:	00 e0       	ldi	r16, 0x00	; 0
    a370:	18 ef       	ldi	r17, 0xF8	; 248
    a372:	21 e0       	ldi	r18, 0x01	; 1
    a374:	4e eb       	ldi	r20, 0xBE	; 190
    a376:	50 e0       	ldi	r21, 0x00	; 0
    a378:	60 ea       	ldi	r22, 0xA0	; 160
    a37a:	70 e0       	ldi	r23, 0x00	; 0
    a37c:	c1 01       	movw	r24, r2
    a37e:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    a382:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    a386:	82 60       	ori	r24, 0x02	; 2
    a388:	0c 94 5f 5a 	jmp	0xb4be	; 0xb4be <setup+0x1966>
    a38c:	e1 0e       	add	r14, r17
    a38e:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    a390:	70 e0       	ldi	r23, 0x00	; 0
    a392:	21 2f       	mov	r18, r17
    a394:	89 ec       	ldi	r24, 0xC9	; 201
    a396:	9d e0       	ldi	r25, 0x0D	; 13
    a398:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    a39c:	2b cd       	rjmp	.-1450   	; 0x9df4 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    a39e:	8f ef       	ldi	r24, 0xFF	; 255
    a3a0:	90 e0       	ldi	r25, 0x00	; 0
    a3a2:	90 93 e2 0d 	sts	0x0DE2, r25	; 0x800de2 <my_lcd+0x19>
    a3a6:	80 93 e1 0d 	sts	0x0DE1, r24	; 0x800de1 <my_lcd+0x18>
    a3aa:	2d cd       	rjmp	.-1446   	; 0x9e06 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    a3ac:	21 30       	cpi	r18, 0x01	; 1
    a3ae:	31 05       	cpc	r19, r1
    a3b0:	31 f5       	brne	.+76     	; 0xa3fe <setup+0x8a6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    a3b2:	20 81       	ld	r18, Z
    a3b4:	82 23       	and	r24, r18
    a3b6:	80 83       	st	Z, r24
    a3b8:	81 e0       	ldi	r24, 0x01	; 1
    a3ba:	82 b9       	out	0x02, r24	; 2
    a3bc:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    a3c0:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    a3c4:	80 81       	ld	r24, Z
    a3c6:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    a3ca:	82 23       	and	r24, r18
    a3cc:	80 83       	st	Z, r24
    a3ce:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    a3d2:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    a3d6:	80 81       	ld	r24, Z
    a3d8:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    a3dc:	82 2b       	or	r24, r18
    a3de:	80 83       	st	Z, r24
    a3e0:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    a3e4:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    a3e8:	80 81       	ld	r24, Z
    a3ea:	20 91 00 0e 	lds	r18, 0x0E00	; 0x800e00 <my_lcd+0x37>
    a3ee:	82 2b       	or	r24, r18
    a3f0:	80 83       	st	Z, r24
setup():
    a3f2:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    a3f4:	91 11       	cpse	r25, r1
    a3f6:	01 c0       	rjmp	.+2      	; 0xa3fa <setup+0x8a2>
setup():
    a3f8:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    a3fa:	82 b9       	out	0x02, r24	; 2
    a3fc:	42 cd       	rjmp	.-1404   	; 0x9e82 <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    a3fe:	20 81       	ld	r18, Z
    a400:	82 23       	and	r24, r18
    a402:	80 83       	st	Z, r24
setup():
    a404:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    a406:	91 11       	cpse	r25, r1
    a408:	01 c0       	rjmp	.+2      	; 0xa40c <setup+0x8b4>
setup():
    a40a:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    a40c:	82 b9       	out	0x02, r24	; 2
    a40e:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    a412:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    a416:	80 81       	ld	r24, Z
    a418:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    a41c:	89 23       	and	r24, r25
    a41e:	80 83       	st	Z, r24
    a420:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    a424:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    a428:	80 81       	ld	r24, Z
    a42a:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    a42e:	89 2b       	or	r24, r25
    a430:	80 83       	st	Z, r24
    a432:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    a436:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    a43a:	80 81       	ld	r24, Z
    a43c:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    a440:	30 cd       	rjmp	.-1440   	; 0x9ea2 <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    a442:	b1 e0       	ldi	r27, 0x01	; 1
    a444:	ab 12       	cpse	r10, r27
    a446:	c3 c0       	rjmp	.+390    	; 0xa5ce <setup+0xa76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    a448:	63 e0       	ldi	r22, 0x03	; 3
    a44a:	78 e2       	ldi	r23, 0x28	; 40
    a44c:	c1 01       	movw	r24, r2
    a44e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3285
      strcat(str1, ":2");
    a452:	64 e0       	ldi	r22, 0x04	; 4
    a454:	74 e0       	ldi	r23, 0x04	; 4
    a456:	c1 01       	movw	r24, r2
    a458:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a45c:	ee 24       	eor	r14, r14
    a45e:	ea 94       	dec	r14
    a460:	fe 2c       	mov	r15, r14
    a462:	00 ee       	ldi	r16, 0xE0	; 224
    a464:	17 e0       	ldi	r17, 0x07	; 7
    a466:	21 e0       	ldi	r18, 0x01	; 1
    a468:	4c e3       	ldi	r20, 0x3C	; 60
    a46a:	50 e0       	ldi	r21, 0x00	; 0
    a46c:	6e e1       	ldi	r22, 0x1E	; 30
    a46e:	70 e0       	ldi	r23, 0x00	; 0
    a470:	c1 01       	movw	r24, r2
    a472:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    a476:	e0 91 1f 0e 	lds	r30, 0x0E1F	; 0x800e1f <lm75_temp+0xb>
    a47a:	f0 91 20 0e 	lds	r31, 0x0E20	; 0x800e20 <lm75_temp+0xc>
    a47e:	04 80       	ldd	r0, Z+4	; 0x04
    a480:	f5 81       	ldd	r31, Z+5	; 0x05
    a482:	e0 2d       	mov	r30, r0
    a484:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    a486:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <lm75_temp+0x2>
    a48a:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    a48e:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a492:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a496:	dc 01       	movw	r26, r24
    a498:	ed 91       	ld	r30, X+
    a49a:	fc 91       	ld	r31, X
    a49c:	01 90       	ld	r0, Z+
    a49e:	f0 81       	ld	r31, Z
    a4a0:	e0 2d       	mov	r30, r0
    a4a2:	61 2f       	mov	r22, r17
    a4a4:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    a4a6:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a4aa:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a4ae:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    a4b2:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a4b6:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a4ba:	20 91 17 0e 	lds	r18, 0x0E17	; 0x800e17 <lm75_temp+0x3>
setup():
    a4be:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    a4c0:	29 30       	cpi	r18, 0x09	; 9
    a4c2:	08 f0       	brcs	.+2      	; 0xa4c6 <setup+0x96e>
setup():
    a4c4:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    a4c6:	60 91 16 0e 	lds	r22, 0x0E16	; 0x800e16 <lm75_temp+0x2>
    a4ca:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    a4ce:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a4d2:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a4d6:	dc 01       	movw	r26, r24
    a4d8:	ed 91       	ld	r30, X+
    a4da:	fc 91       	ld	r31, X
    a4dc:	02 84       	ldd	r0, Z+10	; 0x0a
    a4de:	f3 85       	ldd	r31, Z+11	; 0x0b
    a4e0:	e0 2d       	mov	r30, r0
    a4e2:	19 95       	eicall
    a4e4:	c1 5c       	subi	r28, 0xC1	; 193
    a4e6:	de 4f       	sbci	r29, 0xFE	; 254
    a4e8:	88 83       	st	Y, r24
    a4ea:	cf 53       	subi	r28, 0x3F	; 63
    a4ec:	d1 40       	sbci	r29, 0x01	; 1
    a4ee:	c2 5c       	subi	r28, 0xC2	; 194
    a4f0:	de 4f       	sbci	r29, 0xFE	; 254
    a4f2:	18 82       	st	Y, r1
    a4f4:	ce 53       	subi	r28, 0x3E	; 62
    a4f6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    a4f8:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <lm75_temp+0x3>
    a4fc:	89 30       	cpi	r24, 0x09	; 9
    a4fe:	c8 f0       	brcs	.+50     	; 0xa532 <setup+0x9da>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    a500:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a504:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a508:	dc 01       	movw	r26, r24
    a50a:	ed 91       	ld	r30, X+
    a50c:	fc 91       	ld	r31, X
    a50e:	02 84       	ldd	r0, Z+10	; 0x0a
    a510:	f3 85       	ldd	r31, Z+11	; 0x0b
    a512:	e0 2d       	mov	r30, r0
    a514:	19 95       	eicall
    a516:	c2 5c       	subi	r28, 0xC2	; 194
    a518:	de 4f       	sbci	r29, 0xFE	; 254
    a51a:	e8 81       	ld	r30, Y
    a51c:	f9 81       	ldd	r31, Y+1	; 0x01
    a51e:	ce 53       	subi	r28, 0x3E	; 62
    a520:	d1 40       	sbci	r29, 0x01	; 1
    a522:	e8 2b       	or	r30, r24
    a524:	f9 2b       	or	r31, r25
    a526:	c2 5c       	subi	r28, 0xC2	; 194
    a528:	de 4f       	sbci	r29, 0xFE	; 254
    a52a:	f9 83       	std	Y+1, r31	; 0x01
    a52c:	e8 83       	st	Y, r30
    a52e:	ce 53       	subi	r28, 0x3E	; 62
    a530:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    a532:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <lm75_temp>
    a536:	90 91 15 0e 	lds	r25, 0x0E15	; 0x800e15 <lm75_temp+0x1>
    a53a:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    a53e:	7e 01       	movw	r14, r28
    a540:	f2 ee       	ldi	r31, 0xE2	; 226
    a542:	ef 1a       	sub	r14, r31
    a544:	fe ef       	ldi	r31, 0xFE	; 254
    a546:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    a548:	60 91 18 0e 	lds	r22, 0x0E18	; 0x800e18 <lm75_temp+0x4>
    a54c:	70 91 19 0e 	lds	r23, 0x0E19	; 0x800e19 <lm75_temp+0x5>
    a550:	c2 5c       	subi	r28, 0xC2	; 194
    a552:	de 4f       	sbci	r29, 0xFE	; 254
    a554:	28 81       	ld	r18, Y
    a556:	39 81       	ldd	r19, Y+1	; 0x01
    a558:	ce 53       	subi	r28, 0x3E	; 62
    a55a:	d1 40       	sbci	r29, 0x01	; 1
    a55c:	62 23       	and	r22, r18
    a55e:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    a560:	07 2e       	mov	r0, r23
    a562:	00 0c       	add	r0, r0
    a564:	88 0b       	sbc	r24, r24
    a566:	99 0b       	sbc	r25, r25
    a568:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
    a56c:	20 91 1b 0e 	lds	r18, 0x0E1B	; 0x800e1b <lm75_temp+0x7>
    a570:	30 91 1c 0e 	lds	r19, 0x0E1C	; 0x800e1c <lm75_temp+0x8>
    a574:	40 91 1d 0e 	lds	r20, 0x0E1D	; 0x800e1d <lm75_temp+0x9>
    a578:	50 91 1e 0e 	lds	r21, 0x0E1E	; 0x800e1e <lm75_temp+0xa>
    a57c:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
    a580:	87 01       	movw	r16, r14
    a582:	22 e0       	ldi	r18, 0x02	; 2
    a584:	44 e0       	ldi	r20, 0x04	; 4
    a586:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
      sprintf(str2, "iT=%sC", s_current);
    a58a:	ff 92       	push	r15
    a58c:	ef 92       	push	r14
    a58e:	87 e0       	ldi	r24, 0x07	; 7
    a590:	94 e0       	ldi	r25, 0x04	; 4
    a592:	9f 93       	push	r25
    a594:	8f 93       	push	r24
    a596:	4e 01       	movw	r8, r28
    a598:	38 e8       	ldi	r19, 0x88	; 136
    a59a:	83 0e       	add	r8, r19
    a59c:	91 1c       	adc	r9, r1
    a59e:	9f 92       	push	r9
    a5a0:	8f 92       	push	r8
    a5a2:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a5a6:	ee 24       	eor	r14, r14
    a5a8:	ea 94       	dec	r14
    a5aa:	fe 2c       	mov	r15, r14
    a5ac:	00 ee       	ldi	r16, 0xE0	; 224
    a5ae:	17 e0       	ldi	r17, 0x07	; 7
    a5b0:	21 e0       	ldi	r18, 0x01	; 1
    a5b2:	4c e3       	ldi	r20, 0x3C	; 60
    a5b4:	50 e0       	ldi	r21, 0x00	; 0
    a5b6:	60 ea       	ldi	r22, 0xA0	; 160
    a5b8:	70 e0       	ldi	r23, 0x00	; 0
    a5ba:	c4 01       	movw	r24, r8
    a5bc:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    a5c0:	0f 90       	pop	r0
    a5c2:	0f 90       	pop	r0
    a5c4:	0f 90       	pop	r0
    a5c6:	0f 90       	pop	r0
    a5c8:	0f 90       	pop	r0
    a5ca:	0f 90       	pop	r0
    a5cc:	6d ce       	rjmp	.-806    	; 0xa2a8 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    a5ce:	82 e0       	ldi	r24, 0x02	; 2
    a5d0:	a8 12       	cpse	r10, r24
    a5d2:	87 c1       	rjmp	.+782    	; 0xa8e2 <setup+0xd8a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3295
    {
      if (EEPROM.read(set_default_values) == 255)
    a5d4:	8a e5       	ldi	r24, 0x5A	; 90
    a5d6:	90 e0       	ldi	r25, 0x00	; 0
    a5d8:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    a5dc:	8f 3f       	cpi	r24, 0xFF	; 255
    a5de:	09 f0       	breq	.+2      	; 0xa5e2 <setup+0xa8a>
    a5e0:	6f c1       	rjmp	.+734    	; 0xa8c0 <setup+0xd68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3297
      {
        EEPROM.write(set_default_values, 0);
    a5e2:	60 e0       	ldi	r22, 0x00	; 0
    a5e4:	8a e5       	ldi	r24, 0x5A	; 90
    a5e6:	90 e0       	ldi	r25, 0x00	; 0
    a5e8:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3298
        strcpy_P(str1, text_vychozi_nastaveni);
    a5ec:	61 ef       	ldi	r22, 0xF1	; 241
    a5ee:	77 e2       	ldi	r23, 0x27	; 39
    a5f0:	8d 2d       	mov	r24, r13
    a5f2:	9b 2d       	mov	r25, r11
    a5f4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3299
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    a5f8:	ee 24       	eor	r14, r14
    a5fa:	ea 94       	dec	r14
    a5fc:	fe 2c       	mov	r15, r14
    a5fe:	00 e0       	ldi	r16, 0x00	; 0
    a600:	18 ef       	ldi	r17, 0xF8	; 248
    a602:	21 e0       	ldi	r18, 0x01	; 1
    a604:	46 e4       	ldi	r20, 0x46	; 70
    a606:	50 e0       	ldi	r21, 0x00	; 0
    a608:	6e e1       	ldi	r22, 0x1E	; 30
    a60a:	70 e0       	ldi	r23, 0x00	; 0
    a60c:	8d 2d       	mov	r24, r13
    a60e:	9b 2d       	mov	r25, r11
    a610:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3302

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    a614:	80 e0       	ldi	r24, 0x00	; 0
    a616:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
    a61a:	81 e0       	ldi	r24, 0x01	; 1
    a61c:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
    a620:	82 e0       	ldi	r24, 0x02	; 2
    a622:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
    a626:	83 e0       	ldi	r24, 0x03	; 3
    a628:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
    a62c:	84 e0       	ldi	r24, 0x04	; 4
    a62e:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    a632:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
        {
          strcpy(tmp1, "");
    a634:	62 ef       	ldi	r22, 0xF2	; 242
    a636:	72 e0       	ldi	r23, 0x02	; 2
    a638:	ce 01       	movw	r24, r28
    a63a:	8e 50       	subi	r24, 0x0E	; 14
    a63c:	9f 4f       	sbci	r25, 0xFF	; 255
    a63e:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
          remote_tds_clear(idx);
    a642:	81 2f       	mov	r24, r17
    a644:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    a648:	1f 5f       	subi	r17, 0xFF	; 255
    a64a:	1a 30       	cpi	r17, 0x0A	; 10
    a64c:	99 f7       	brne	.-26     	; 0xa634 <setup+0xadc>
    a64e:	e1 ef       	ldi	r30, 0xF1	; 241
    a650:	8e 2e       	mov	r8, r30
    a652:	99 24       	eor	r9, r9
    a654:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    a656:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
        {
          strcpy(str2, "PROG");
    a658:	6e e0       	ldi	r22, 0x0E	; 14
    a65a:	74 e0       	ldi	r23, 0x04	; 4
    a65c:	ce 01       	movw	r24, r28
    a65e:	88 57       	subi	r24, 0x78	; 120
    a660:	9f 4f       	sbci	r25, 0xFF	; 255
    a662:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3313
          thermostat_program_set_name(idx, str2);
    a666:	be 01       	movw	r22, r28
    a668:	68 57       	subi	r22, 0x78	; 120
    a66a:	7f 4f       	sbci	r23, 0xFF	; 255
    a66c:	81 2f       	mov	r24, r17
    a66e:	0e 94 46 43 	call	0x868c	; 0x868c <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    a672:	60 e0       	ldi	r22, 0x00	; 0
    a674:	c4 01       	movw	r24, r8
    a676:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    a67a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    a67c:	c1 2c       	mov	r12, r1
    a67e:	e1 2c       	mov	r14, r1
    a680:	00 e0       	ldi	r16, 0x00	; 0
    a682:	20 e0       	ldi	r18, 0x00	; 0
    a684:	40 e0       	ldi	r20, 0x00	; 0
    a686:	6f 2d       	mov	r22, r15
    a688:	81 2f       	mov	r24, r17
    a68a:	0e 94 0a 43 	call	0x8614	; 0x8614 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
            thermostat_program_set_threshold(idx, interval_id, 220);
    a68e:	4c ed       	ldi	r20, 0xDC	; 220
    a690:	50 e0       	ldi	r21, 0x00	; 0
    a692:	6f 2d       	mov	r22, r15
    a694:	81 2f       	mov	r24, r17
    a696:	0e 94 ee 42 	call	0x85dc	; 0x85dc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
            thermostat_program_set_week(idx, interval_id, 0);
    a69a:	40 e0       	ldi	r20, 0x00	; 0
    a69c:	6f 2d       	mov	r22, r15
    a69e:	81 2f       	mov	r24, r17
    a6a0:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    a6a4:	f3 94       	inc	r15
    a6a6:	9b e0       	ldi	r25, 0x0B	; 11
    a6a8:	f9 12       	cpse	r15, r25
    a6aa:	e8 cf       	rjmp	.-48     	; 0xa67c <setup+0xb24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    a6ac:	1f 5f       	subi	r17, 0xFF	; 255
    a6ae:	ad e4       	ldi	r26, 0x4D	; 77
    a6b0:	8a 0e       	add	r8, r26
    a6b2:	91 1c       	adc	r9, r1
    a6b4:	18 30       	cpi	r17, 0x08	; 8
    a6b6:	81 f6       	brne	.-96     	; 0xa658 <setup+0xb00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    a6b8:	7a e0       	ldi	r23, 0x0A	; 10
    a6ba:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    a6bc:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    a6be:	be 01       	movw	r22, r28
    a6c0:	68 53       	subi	r22, 0x38	; 56
    a6c2:	7f 4f       	sbci	r23, 0xFF	; 255
    a6c4:	80 2f       	mov	r24, r16
    a6c6:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
          strcpy(tds.name, "FREE");
    a6ca:	62 e6       	ldi	r22, 0x62	; 98
    a6cc:	73 e0       	ldi	r23, 0x03	; 3
    a6ce:	c4 5b       	subi	r28, 0xB4	; 180
    a6d0:	de 4f       	sbci	r29, 0xFE	; 254
    a6d2:	88 81       	ld	r24, Y
    a6d4:	99 81       	ldd	r25, Y+1	; 0x01
    a6d6:	cc 54       	subi	r28, 0x4C	; 76
    a6d8:	d1 40       	sbci	r29, 0x01	; 1
    a6da:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
          tds.used = 0;
    a6de:	c8 53       	subi	r28, 0x38	; 56
    a6e0:	df 4f       	sbci	r29, 0xFF	; 255
    a6e2:	18 82       	st	Y, r1
    a6e4:	c8 5c       	subi	r28, 0xC8	; 200
    a6e6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3328
          tds.offset = 0;
    a6e8:	ce 52       	subi	r28, 0x2E	; 46
    a6ea:	df 4f       	sbci	r29, 0xFF	; 255
    a6ec:	19 82       	std	Y+1, r1	; 0x01
    a6ee:	18 82       	st	Y, r1
    a6f0:	c2 5d       	subi	r28, 0xD2	; 210
    a6f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3329
          tds.assigned_ds2482 = 0;
    a6f4:	cf 52       	subi	r28, 0x2F	; 47
    a6f6:	df 4f       	sbci	r29, 0xFF	; 255
    a6f8:	18 82       	st	Y, r1
    a6fa:	c1 5d       	subi	r28, 0xD1	; 209
    a6fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
          tds.period = 10;
    a6fe:	c4 52       	subi	r28, 0x24	; 36
    a700:	df 4f       	sbci	r29, 0xFF	; 255
    a702:	f8 82       	st	Y, r15
    a704:	cc 5d       	subi	r28, 0xDC	; 220
    a706:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    a708:	c7 53       	subi	r28, 0x37	; 55
    a70a:	df 4f       	sbci	r29, 0xFF	; 255
    a70c:	18 83       	st	Y, r17
    a70e:	c9 5c       	subi	r28, 0xC9	; 201
    a710:	d0 40       	sbci	r29, 0x00	; 0
    a712:	c6 53       	subi	r28, 0x36	; 54
    a714:	df 4f       	sbci	r29, 0xFF	; 255
    a716:	18 83       	st	Y, r17
    a718:	ca 5c       	subi	r28, 0xCA	; 202
    a71a:	d0 40       	sbci	r29, 0x00	; 0
    a71c:	c5 53       	subi	r28, 0x35	; 53
    a71e:	df 4f       	sbci	r29, 0xFF	; 255
    a720:	18 83       	st	Y, r17
    a722:	cb 5c       	subi	r28, 0xCB	; 203
    a724:	d0 40       	sbci	r29, 0x00	; 0
    a726:	c4 53       	subi	r28, 0x34	; 52
    a728:	df 4f       	sbci	r29, 0xFF	; 255
    a72a:	18 83       	st	Y, r17
    a72c:	cc 5c       	subi	r28, 0xCC	; 204
    a72e:	d0 40       	sbci	r29, 0x00	; 0
    a730:	c3 53       	subi	r28, 0x33	; 51
    a732:	df 4f       	sbci	r29, 0xFF	; 255
    a734:	18 83       	st	Y, r17
    a736:	cd 5c       	subi	r28, 0xCD	; 205
    a738:	d0 40       	sbci	r29, 0x00	; 0
    a73a:	c2 53       	subi	r28, 0x32	; 50
    a73c:	df 4f       	sbci	r29, 0xFF	; 255
    a73e:	18 83       	st	Y, r17
    a740:	ce 5c       	subi	r28, 0xCE	; 206
    a742:	d0 40       	sbci	r29, 0x00	; 0
    a744:	c1 53       	subi	r28, 0x31	; 49
    a746:	df 4f       	sbci	r29, 0xFF	; 255
    a748:	18 83       	st	Y, r17
    a74a:	cf 5c       	subi	r28, 0xCF	; 207
    a74c:	d0 40       	sbci	r29, 0x00	; 0
    a74e:	c0 53       	subi	r28, 0x30	; 48
    a750:	df 4f       	sbci	r29, 0xFF	; 255
    a752:	18 83       	st	Y, r17
    a754:	c0 5d       	subi	r28, 0xD0	; 208
    a756:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
          set_tds18s20(idx, &tds);
    a758:	be 01       	movw	r22, r28
    a75a:	68 53       	subi	r22, 0x38	; 56
    a75c:	7f 4f       	sbci	r23, 0xFF	; 255
    a75e:	80 2f       	mov	r24, r16
    a760:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a764:	0f 5f       	subi	r16, 0xFF	; 255
    a766:	06 30       	cpi	r16, 0x06	; 6
    a768:	09 f0       	breq	.+2      	; 0xa76c <setup+0xc14>
    a76a:	a9 cf       	rjmp	.-174    	; 0xa6be <setup+0xb66>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    a76c:	84 e1       	ldi	r24, 0x14	; 20
    a76e:	c2 52       	subi	r28, 0x22	; 34
    a770:	df 4f       	sbci	r29, 0xFF	; 255
    a772:	88 83       	st	Y, r24
    a774:	ce 5d       	subi	r28, 0xDE	; 222
    a776:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    a778:	8c e0       	ldi	r24, 0x0C	; 12
    a77a:	c1 52       	subi	r28, 0x21	; 33
    a77c:	df 4f       	sbci	r29, 0xFF	; 255
    a77e:	88 83       	st	Y, r24
    a780:	cf 5d       	subi	r28, 0xDF	; 223
    a782:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    a784:	8e e0       	ldi	r24, 0x0E	; 14
    a786:	c0 52       	subi	r28, 0x20	; 32
    a788:	df 4f       	sbci	r29, 0xFF	; 255
    a78a:	88 83       	st	Y, r24
    a78c:	c0 5e       	subi	r28, 0xE0	; 224
    a78e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    a790:	91 e1       	ldi	r25, 0x11	; 17
    a792:	cf 51       	subi	r28, 0x1F	; 31
    a794:	df 4f       	sbci	r29, 0xFF	; 255
    a796:	98 83       	st	Y, r25
    a798:	c1 5e       	subi	r28, 0xE1	; 225
    a79a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    a79c:	ce 51       	subi	r28, 0x1E	; 30
    a79e:	df 4f       	sbci	r29, 0xFF	; 255
    a7a0:	88 83       	st	Y, r24
    a7a2:	c2 5e       	subi	r28, 0xE2	; 226
    a7a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    a7a6:	cd 51       	subi	r28, 0x1D	; 29
    a7a8:	df 4f       	sbci	r29, 0xFF	; 255
    a7aa:	18 82       	st	Y, r1
    a7ac:	c3 5e       	subi	r28, 0xE3	; 227
    a7ae:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    a7b0:	ce 01       	movw	r24, r28
    a7b2:	82 52       	subi	r24, 0x22	; 34
    a7b4:	9f 4f       	sbci	r25, 0xFF	; 255
    a7b6:	0e 94 56 80 	call	0x100ac	; 0x100ac <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    a7ba:	61 e0       	ldi	r22, 0x01	; 1
    a7bc:	81 e0       	ldi	r24, 0x01	; 1
    a7be:	90 e0       	ldi	r25, 0x00	; 0
    a7c0:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    a7c4:	82 e0       	ldi	r24, 0x02	; 2
    a7c6:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <device>
    a7ca:	91 e0       	ldi	r25, 0x01	; 1
    a7cc:	90 93 2f 0c 	sts	0x0C2F, r25	; 0x800c2f <device+0x1>
    a7d0:	80 93 30 0c 	sts	0x0C30, r24	; 0x800c30 <device+0x2>
    a7d4:	20 91 1a 0a 	lds	r18, 0x0A1A	; 0x800a1a <dvanact>
    a7d8:	30 91 1b 0a 	lds	r19, 0x0A1B	; 0x800a1b <dvanact+0x1>
    a7dc:	36 95       	lsr	r19
    a7de:	27 95       	ror	r18
    a7e0:	20 93 31 0c 	sts	0x0C31, r18	; 0x800c31 <device+0x3>
    a7e4:	20 91 e2 0a 	lds	r18, 0x0AE2	; 0x800ae2 <light_curr>
    a7e8:	30 91 e3 0a 	lds	r19, 0x0AE3	; 0x800ae3 <light_curr+0x1>
    a7ec:	36 95       	lsr	r19
    a7ee:	27 95       	ror	r18
    a7f0:	20 93 32 0c 	sts	0x0C32, r18	; 0x800c32 <device+0x4>
    a7f4:	20 91 18 0a 	lds	r18, 0x0A18	; 0x800a18 <proud>
    a7f8:	30 91 19 0a 	lds	r19, 0x0A19	; 0x800a19 <proud+0x1>
    a7fc:	36 95       	lsr	r19
    a7fe:	27 95       	ror	r18
    a800:	20 93 33 0c 	sts	0x0C33, r18	; 0x800c33 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3339
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    a804:	30 ec       	ldi	r19, 0xC0	; 192
    a806:	30 93 34 0c 	sts	0x0C34, r19	; 0x800c34 <device+0x6>
    a80a:	28 ea       	ldi	r18, 0xA8	; 168
    a80c:	20 93 35 0c 	sts	0x0C35, r18	; 0x800c35 <device+0x7>
    a810:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <device+0x8>
    a814:	4e e6       	ldi	r20, 0x6E	; 110
    a816:	40 93 37 0c 	sts	0x0C37, r20	; 0x800c37 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    a81a:	10 93 38 0c 	sts	0x0C38, r17	; 0x800c38 <device+0xa>
    a81e:	10 93 39 0c 	sts	0x0C39, r17	; 0x800c39 <device+0xb>
    a822:	10 93 3a 0c 	sts	0x0C3A, r17	; 0x800c3a <device+0xc>
    a826:	10 92 3b 0c 	sts	0x0C3B, r1	; 0x800c3b <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    a82a:	30 93 40 0c 	sts	0x0C40, r19	; 0x800c40 <device+0x12>
    a82e:	20 93 41 0c 	sts	0x0C41, r18	; 0x800c41 <device+0x13>
    a832:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <device+0x14>
    a836:	90 93 43 0c 	sts	0x0C43, r25	; 0x800c43 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    a83a:	30 93 3c 0c 	sts	0x0C3C, r19	; 0x800c3c <device+0xe>
    a83e:	20 93 3d 0c 	sts	0x0C3D, r18	; 0x800c3d <device+0xf>
    a842:	80 93 3e 0c 	sts	0x0C3E, r24	; 0x800c3e <device+0x10>
    a846:	90 93 3f 0c 	sts	0x0C3F, r25	; 0x800c3f <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    a84a:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <device+0x20>
    a84e:	20 93 4f 0c 	sts	0x0C4F, r18	; 0x800c4f <device+0x21>
    a852:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <device+0x22>
    a856:	90 93 51 0c 	sts	0x0C51, r25	; 0x800c51 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    a85a:	30 93 7c 0c 	sts	0x0C7C, r19	; 0x800c7c <device+0x4e>
    a85e:	20 93 7d 0c 	sts	0x0C7D, r18	; 0x800c7d <device+0x4f>
    a862:	80 93 7e 0c 	sts	0x0C7E, r24	; 0x800c7e <device+0x50>
    a866:	90 93 7f 0c 	sts	0x0C7F, r25	; 0x800c7f <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
        device.mqtt_port = 1883;
    a86a:	8b e5       	ldi	r24, 0x5B	; 91
    a86c:	97 e0       	ldi	r25, 0x07	; 7
    a86e:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <device+0x25>
    a872:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
        strcpy(device.mqtt_user, "saric");
    a876:	63 e1       	ldi	r22, 0x13	; 19
    a878:	74 e0       	ldi	r23, 0x04	; 4
    a87a:	84 e5       	ldi	r24, 0x54	; 84
    a87c:	9c e0       	ldi	r25, 0x0C	; 12
    a87e:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3348
        strcpy(device.mqtt_key, "no");
    a882:	69 e1       	ldi	r22, 0x19	; 25
    a884:	74 e0       	ldi	r23, 0x04	; 4
    a886:	88 e6       	ldi	r24, 0x68	; 104
    a888:	9c e0       	ldi	r25, 0x0C	; 12
    a88a:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3349
        save_setup_network();
    a88e:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3350
        strcpy(str1, "TERM D1");
    a892:	6c e1       	ldi	r22, 0x1C	; 28
    a894:	74 e0       	ldi	r23, 0x04	; 4
    a896:	8d 2d       	mov	r24, r13
    a898:	9b 2d       	mov	r25, r11
    a89a:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
        device_set_name(str1);
    a89e:	8d 2d       	mov	r24, r13
    a8a0:	9b 2d       	mov	r25, r11
    a8a2:	0e 94 df 44 	call	0x89be	; 0x89be <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
        char hostname[10];
        device_get_name(hostname);
    a8a6:	ce 01       	movw	r24, r28
    a8a8:	82 52       	subi	r24, 0x22	; 34
    a8aa:	9f 4f       	sbci	r25, 0xFF	; 255
    a8ac:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3354
        default_ring = 0;
    a8b0:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    a8b4:	60 e0       	ldi	r22, 0x00	; 0
    a8b6:	8c e5       	ldi	r24, 0x5C	; 92
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    a8be:	f4 cc       	rjmp	.-1560   	; 0xa2a8 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    a8c0:	65 ee       	ldi	r22, 0xE5	; 229
    a8c2:	77 e2       	ldi	r23, 0x27	; 39
    a8c4:	8d 2d       	mov	r24, r13
    a8c6:	9b 2d       	mov	r25, r11
    a8c8:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a8cc:	ee 24       	eor	r14, r14
    a8ce:	ea 94       	dec	r14
    a8d0:	fe 2c       	mov	r15, r14
    a8d2:	00 ee       	ldi	r16, 0xE0	; 224
    a8d4:	17 e0       	ldi	r17, 0x07	; 7
    a8d6:	21 e0       	ldi	r18, 0x01	; 1
    a8d8:	46 e4       	ldi	r20, 0x46	; 70
    a8da:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    a8dc:	6e e1       	ldi	r22, 0x1E	; 30
    a8de:	70 e0       	ldi	r23, 0x00	; 0
    a8e0:	a0 c0       	rjmp	.+320    	; 0xaa22 <setup+0xeca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3365
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    a8e2:	b3 e0       	ldi	r27, 0x03	; 3
    a8e4:	ab 12       	cpse	r10, r27
    a8e6:	b7 c0       	rjmp	.+366    	; 0xaa56 <setup+0xefe>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    a8e8:	61 e0       	ldi	r22, 0x01	; 1
    a8ea:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a8ee:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    a8f2:	61 e0       	ldi	r22, 0x01	; 1
    a8f4:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a8f8:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    a8fc:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a900:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a904:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    a908:	60 e0       	ldi	r22, 0x00	; 0
    a90a:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a90e:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    a912:	61 e0       	ldi	r22, 0x01	; 1
    a914:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a918:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a91c:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    a920:	60 e4       	ldi	r22, 0x40	; 64
    a922:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a926:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a92a:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    a92e:	61 e0       	ldi	r22, 0x01	; 1
    a930:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a934:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
writeByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    a938:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <SRAM+0x4>
    a93c:	90 91 94 0c 	lds	r25, 0x0C94	; 0x800c94 <SRAM+0x5>
    a940:	a0 91 95 0c 	lds	r26, 0x0C95	; 0x800c95 <SRAM+0x6>
    a944:	b0 91 96 0c 	lds	r27, 0x0C96	; 0x800c96 <SRAM+0x7>
    a948:	89 2b       	or	r24, r25
    a94a:	8a 2b       	or	r24, r26
    a94c:	8b 2b       	or	r24, r27
    a94e:	d1 f0       	breq	.+52     	; 0xa984 <setup+0xe2c>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    a950:	60 e0       	ldi	r22, 0x00	; 0
    a952:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a956:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    a95a:	62 e0       	ldi	r22, 0x02	; 2
    a95c:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a960:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a964:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
    a968:	0e 94 56 74 	call	0xe8ac	; 0xe8ac <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.62]>
writeByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
    a96c:	6b ea       	ldi	r22, 0xAB	; 171
    a96e:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a972:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a976:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    a97a:	61 e0       	ldi	r22, 0x01	; 1
    a97c:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a980:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
readByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    a984:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <SRAM+0x4>
    a988:	90 91 94 0c 	lds	r25, 0x0C94	; 0x800c94 <SRAM+0x5>
    a98c:	a0 91 95 0c 	lds	r26, 0x0C95	; 0x800c95 <SRAM+0x6>
    a990:	b0 91 96 0c 	lds	r27, 0x0C96	; 0x800c96 <SRAM+0x7>
    a994:	89 2b       	or	r24, r25
    a996:	8a 2b       	or	r24, r26
    a998:	8b 2b       	or	r24, r27
    a99a:	09 f4       	brne	.+2      	; 0xa99e <setup+0xe46>
    a99c:	47 c0       	rjmp	.+142    	; 0xaa2c <setup+0xed4>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    a99e:	60 e0       	ldi	r22, 0x00	; 0
    a9a0:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a9a4:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    a9a8:	63 e0       	ldi	r22, 0x03	; 3
    a9aa:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a9ae:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a9b2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
    a9b6:	0e 94 56 74 	call	0xe8ac	; 0xe8ac <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.62]>
readByte():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
    a9ba:	6f ef       	ldi	r22, 0xFF	; 255
    a9bc:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    a9c0:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    a9c4:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
    a9c8:	18 2f       	mov	r17, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    a9ca:	61 e0       	ldi	r22, 0x01	; 1
    a9cc:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SRAM+0x8>
    a9d0:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    a9d4:	1b 3a       	cpi	r17, 0xAB	; 171
    a9d6:	51 f5       	brne	.+84     	; 0xaa2c <setup+0xed4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3371
      {
        strcpy_P(str1, text_test_ram);
    a9d8:	68 ed       	ldi	r22, 0xD8	; 216
    a9da:	77 e2       	ldi	r23, 0x27	; 39
    a9dc:	8d 2d       	mov	r24, r13
    a9de:	9b 2d       	mov	r25, r11
    a9e0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3372
        strcat(str1, " init ...");
    a9e4:	64 e2       	ldi	r22, 0x24	; 36
    a9e6:	74 e0       	ldi	r23, 0x04	; 4
    a9e8:	8d 2d       	mov	r24, r13
    a9ea:	9b 2d       	mov	r25, r11
    a9ec:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3373
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    a9f0:	ee 24       	eor	r14, r14
    a9f2:	ea 94       	dec	r14
    a9f4:	fe 2c       	mov	r15, r14
    a9f6:	00 ee       	ldi	r16, 0xE0	; 224
    a9f8:	17 e0       	ldi	r17, 0x07	; 7
    a9fa:	21 e0       	ldi	r18, 0x01	; 1
    a9fc:	40 e5       	ldi	r20, 0x50	; 80
    a9fe:	50 e0       	ldi	r21, 0x00	; 0
    aa00:	6e e1       	ldi	r22, 0x1E	; 30
    aa02:	70 e0       	ldi	r23, 0x00	; 0
    aa04:	8d 2d       	mov	r24, r13
    aa06:	9b 2d       	mov	r25, r11
    aa08:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3386
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    aa0c:	65 ed       	ldi	r22, 0xD5	; 213
    aa0e:	77 e2       	ldi	r23, 0x27	; 39
    aa10:	8d 2d       	mov	r24, r13
    aa12:	9b 2d       	mov	r25, r11
    aa14:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3387
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    aa18:	21 e0       	ldi	r18, 0x01	; 1
    aa1a:	40 e5       	ldi	r20, 0x50	; 80
    aa1c:	50 e0       	ldi	r21, 0x00	; 0
    aa1e:	62 ed       	ldi	r22, 0xD2	; 210
    aa20:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    aa22:	8d 2d       	mov	r24, r13
    aa24:	9b 2d       	mov	r25, r11
    aa26:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    aa2a:	3e cc       	rjmp	.-1924   	; 0xa2a8 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    aa2c:	68 ed       	ldi	r22, 0xD8	; 216
    aa2e:	77 e2       	ldi	r23, 0x27	; 39
    aa30:	8d 2d       	mov	r24, r13
    aa32:	9b 2d       	mov	r25, r11
    aa34:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
        strcat_P(str1, text_err);
    aa38:	66 e3       	ldi	r22, 0x36	; 54
    aa3a:	78 e2       	ldi	r23, 0x28	; 40
    aa3c:	8d 2d       	mov	r24, r13
    aa3e:	9b 2d       	mov	r25, r11
    aa40:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    aa44:	ee 24       	eor	r14, r14
    aa46:	ea 94       	dec	r14
    aa48:	fe 2c       	mov	r15, r14
    aa4a:	00 e0       	ldi	r16, 0x00	; 0
    aa4c:	18 ef       	ldi	r17, 0xF8	; 248
    aa4e:	21 e0       	ldi	r18, 0x01	; 1
    aa50:	40 e5       	ldi	r20, 0x50	; 80
    aa52:	50 e0       	ldi	r21, 0x00	; 0
    aa54:	43 cf       	rjmp	.-378    	; 0xa8dc <setup+0xd84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3398
      }
    }

    //// init EEPROMKY
    if (init == 4)
    aa56:	e4 e0       	ldi	r30, 0x04	; 4
    aa58:	ae 12       	cpse	r10, r30
    aa5a:	df c4       	rjmp	.+2494   	; 0xb41a <setup+0x18c2>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    aa5c:	61 e0       	ldi	r22, 0x01	; 1
    aa5e:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <SROM+0xa>
    aa62:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    aa66:	61 e0       	ldi	r22, 0x01	; 1
    aa68:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <SROM+0xa>
    aa6c:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    aa70:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    aa74:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    aa78:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    aa7c:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SROM+0x4>
    aa80:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <SROM+0x5>
    aa84:	a0 91 86 0c 	lds	r26, 0x0C86	; 0x800c86 <SROM+0x6>
    aa88:	b0 91 87 0c 	lds	r27, 0x0C87	; 0x800c87 <SROM+0x7>
    aa8c:	89 2b       	or	r24, r25
    aa8e:	8a 2b       	or	r24, r26
    aa90:	8b 2b       	or	r24, r27
    aa92:	a9 f0       	breq	.+42     	; 0xaabe <setup+0xf66>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    aa94:	0e 94 fa 77 	call	0xeff4	; 0xeff4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.70]>
    aa98:	80 fd       	sbrc	r24, 0
    aa9a:	fc cf       	rjmp	.-8      	; 0xaa94 <setup+0xf3c>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    aa9c:	86 e0       	ldi	r24, 0x06	; 6
    aa9e:	0e 94 b2 77 	call	0xef64	; 0xef64 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    aaa2:	0e 94 ad 77 	call	0xef5a	; 0xef5a <EEPROM_CAT25::endCommand() [clone .constprop.73]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    aaa6:	82 e0       	ldi	r24, 0x02	; 2
    aaa8:	0e 94 b2 77 	call	0xef64	; 0xef64 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    aaac:	6a eb       	ldi	r22, 0xBA	; 186
    aaae:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    aab2:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    aab6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    aaba:	0e 94 ad 77 	call	0xef5a	; 0xef5a <EEPROM_CAT25::endCommand() [clone .constprop.73]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    aabe:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SROM+0x4>
    aac2:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <SROM+0x5>
    aac6:	a0 91 86 0c 	lds	r26, 0x0C86	; 0x800c86 <SROM+0x6>
    aaca:	b0 91 87 0c 	lds	r27, 0x0C87	; 0x800c87 <SROM+0x7>
    aace:	89 2b       	or	r24, r25
    aad0:	8a 2b       	or	r24, r26
    aad2:	8b 2b       	or	r24, r27
    aad4:	71 f1       	breq	.+92     	; 0xab32 <setup+0xfda>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    aad6:	0e 94 fa 77 	call	0xeff4	; 0xeff4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.70]>
    aada:	80 fd       	sbrc	r24, 0
    aadc:	fc cf       	rjmp	.-8      	; 0xaad6 <setup+0xf7e>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    aade:	83 e0       	ldi	r24, 0x03	; 3
    aae0:	0e 94 b2 77 	call	0xef64	; 0xef64 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    aae4:	6f ef       	ldi	r22, 0xFF	; 255
    aae6:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    aaea:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    aaee:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
    aaf2:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    aaf4:	0e 94 ad 77 	call	0xef5a	; 0xef5a <EEPROM_CAT25::endCommand() [clone .constprop.73]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3402
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    aaf8:	1a 3b       	cpi	r17, 0xBA	; 186
    aafa:	d9 f4       	brne	.+54     	; 0xab32 <setup+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405

      {
        strcpy_P(str1, text_test_eeprom);
    aafc:	65 ec       	ldi	r22, 0xC5	; 197
    aafe:	77 e2       	ldi	r23, 0x27	; 39
    ab00:	8d 2d       	mov	r24, r13
    ab02:	9b 2d       	mov	r25, r11
    ab04:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3406
        strcat_P(str1, text_ok);
    ab08:	65 ed       	ldi	r22, 0xD5	; 213
    ab0a:	77 e2       	ldi	r23, 0x27	; 39
    ab0c:	8d 2d       	mov	r24, r13
    ab0e:	9b 2d       	mov	r25, r11
    ab10:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3407
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ab14:	ee 24       	eor	r14, r14
    ab16:	ea 94       	dec	r14
    ab18:	fe 2c       	mov	r15, r14
    ab1a:	00 ee       	ldi	r16, 0xE0	; 224
    ab1c:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ab1e:	21 e0       	ldi	r18, 0x01	; 1
    ab20:	4a e5       	ldi	r20, 0x5A	; 90
    ab22:	50 e0       	ldi	r21, 0x00	; 0
    ab24:	6e e1       	ldi	r22, 0x1E	; 30
    ab26:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ab28:	8d 2d       	mov	r24, r13
    ab2a:	9b 2d       	mov	r25, r11
    ab2c:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    ab30:	fc c0       	rjmp	.+504    	; 0xad2a <setup+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3411
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    ab32:	65 ec       	ldi	r22, 0xC5	; 197
    ab34:	77 e2       	ldi	r23, 0x27	; 39
    ab36:	8d 2d       	mov	r24, r13
    ab38:	9b 2d       	mov	r25, r11
    ab3a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3412
        strcat_P(str1, text_err);
    ab3e:	66 e3       	ldi	r22, 0x36	; 54
    ab40:	78 e2       	ldi	r23, 0x28	; 40
    ab42:	8d 2d       	mov	r24, r13
    ab44:	9b 2d       	mov	r25, r11
    ab46:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ab4a:	ee 24       	eor	r14, r14
    ab4c:	ea 94       	dec	r14
    ab4e:	fe 2c       	mov	r15, r14
    ab50:	00 e0       	ldi	r16, 0x00	; 0
    ab52:	18 ef       	ldi	r17, 0xF8	; 248
    ab54:	e4 cf       	rjmp	.-56     	; 0xab1e <setup+0xfc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3420
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    ab56:	63 eb       	ldi	r22, 0xB3	; 179
    ab58:	77 e2       	ldi	r23, 0x27	; 39
    ab5a:	8d 2d       	mov	r24, r13
    ab5c:	9b 2d       	mov	r25, r11
    ab5e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3421
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ab62:	ee 24       	eor	r14, r14
    ab64:	ea 94       	dec	r14
    ab66:	fe 2c       	mov	r15, r14
    ab68:	00 ee       	ldi	r16, 0xE0	; 224
    ab6a:	17 e0       	ldi	r17, 0x07	; 7
    ab6c:	21 e0       	ldi	r18, 0x01	; 1
    ab6e:	44 e6       	ldi	r20, 0x64	; 100
    ab70:	50 e0       	ldi	r21, 0x00	; 0
    ab72:	6e e1       	ldi	r22, 0x1E	; 30
    ab74:	70 e0       	ldi	r23, 0x00	; 0
    ab76:	8d 2d       	mov	r24, r13
    ab78:	9b 2d       	mov	r25, r11
    ab7a:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    ab7e:	ae e2       	ldi	r26, 0x2E	; 46
    ab80:	ea 2e       	mov	r14, r26
    ab82:	ac e0       	ldi	r26, 0x0C	; 12
    ab84:	fa 2e       	mov	r15, r26
    ab86:	0e e6       	ldi	r16, 0x6E	; 110
    ab88:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    ab8a:	c8 01       	movw	r24, r16
    ab8c:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ab90:	d7 01       	movw	r26, r14
    ab92:	8d 93       	st	X+, r24
    ab94:	7d 01       	movw	r14, r26
    ab96:	0f 5f       	subi	r16, 0xFF	; 255
    ab98:	1f 4f       	sbci	r17, 0xFF	; 255
    ab9a:	04 37       	cpi	r16, 0x74	; 116
    ab9c:	11 05       	cpc	r17, r1
    ab9e:	a9 f7       	brne	.-22     	; 0xab8a <setup+0x1032>
    aba0:	e4 e3       	ldi	r30, 0x34	; 52
    aba2:	ee 2e       	mov	r14, r30
    aba4:	ec e0       	ldi	r30, 0x0C	; 12
    aba6:	fe 2e       	mov	r15, r30
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    aba8:	c8 01       	movw	r24, r16
    abaa:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    abae:	f7 01       	movw	r30, r14
    abb0:	81 93       	st	Z+, r24
    abb2:	7f 01       	movw	r14, r30
    abb4:	0f 5f       	subi	r16, 0xFF	; 255
    abb6:	1f 4f       	sbci	r17, 0xFF	; 255
    abb8:	08 37       	cpi	r16, 0x78	; 120
    abba:	11 05       	cpc	r17, r1
    abbc:	a9 f7       	brne	.-22     	; 0xaba8 <setup+0x1050>
    abbe:	78 e3       	ldi	r23, 0x38	; 56
    abc0:	e7 2e       	mov	r14, r23
    abc2:	7c e0       	ldi	r23, 0x0C	; 12
    abc4:	f7 2e       	mov	r15, r23
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    abc6:	c8 01       	movw	r24, r16
    abc8:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    abcc:	d7 01       	movw	r26, r14
    abce:	8d 93       	st	X+, r24
    abd0:	7d 01       	movw	r14, r26
    abd2:	0f 5f       	subi	r16, 0xFF	; 255
    abd4:	1f 4f       	sbci	r17, 0xFF	; 255
    abd6:	0c 37       	cpi	r16, 0x7C	; 124
    abd8:	11 05       	cpc	r17, r1
    abda:	a9 f7       	brne	.-22     	; 0xabc6 <setup+0x106e>
    abdc:	50 e4       	ldi	r21, 0x40	; 64
    abde:	85 2e       	mov	r8, r21
    abe0:	5c e0       	ldi	r21, 0x0C	; 12
    abe2:	95 2e       	mov	r9, r21
    abe4:	60 e8       	ldi	r22, 0x80	; 128
    abe6:	e6 2e       	mov	r14, r22
    abe8:	f1 2c       	mov	r15, r1
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    abea:	c7 01       	movw	r24, r14
    abec:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    abf0:	f4 01       	movw	r30, r8
    abf2:	81 93       	st	Z+, r24
    abf4:	4f 01       	movw	r8, r30
    abf6:	ff ef       	ldi	r31, 0xFF	; 255
    abf8:	ef 1a       	sub	r14, r31
    abfa:	ff 0a       	sbc	r15, r31
    abfc:	24 e8       	ldi	r18, 0x84	; 132
    abfe:	e2 16       	cp	r14, r18
    ac00:	f1 04       	cpc	r15, r1
    ac02:	99 f7       	brne	.-26     	; 0xabea <setup+0x1092>
    ac04:	4c e3       	ldi	r20, 0x3C	; 60
    ac06:	84 2e       	mov	r8, r20
    ac08:	4c e0       	ldi	r20, 0x0C	; 12
    ac0a:	94 2e       	mov	r9, r20
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    ac0c:	c8 01       	movw	r24, r16
    ac0e:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac12:	d4 01       	movw	r26, r8
    ac14:	8d 93       	st	X+, r24
    ac16:	4d 01       	movw	r8, r26
    ac18:	0f 5f       	subi	r16, 0xFF	; 255
    ac1a:	1f 4f       	sbci	r17, 0xFF	; 255
    ac1c:	00 38       	cpi	r16, 0x80	; 128
    ac1e:	11 05       	cpc	r17, r1
    ac20:	a9 f7       	brne	.-22     	; 0xac0c <setup+0x10b4>
    ac22:	34 e4       	ldi	r19, 0x44	; 68
    ac24:	83 2e       	mov	r8, r19
    ac26:	3c e0       	ldi	r19, 0x0C	; 12
    ac28:	93 2e       	mov	r9, r19
    ac2a:	04 e6       	ldi	r16, 0x64	; 100
    ac2c:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    ac2e:	c8 01       	movw	r24, r16
    ac30:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac34:	f4 01       	movw	r30, r8
    ac36:	81 93       	st	Z+, r24
    ac38:	4f 01       	movw	r8, r30
    ac3a:	0f 5f       	subi	r16, 0xFF	; 255
    ac3c:	1f 4f       	sbci	r17, 0xFF	; 255
    ac3e:	0d 36       	cpi	r16, 0x6D	; 109
    ac40:	11 05       	cpc	r17, r1
    ac42:	a9 f7       	brne	.-22     	; 0xac2e <setup+0x10d6>
    ac44:	0e e4       	ldi	r16, 0x4E	; 78
    ac46:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    ac48:	c7 01       	movw	r24, r14
    ac4a:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac4e:	d8 01       	movw	r26, r16
    ac50:	8d 93       	st	X+, r24
    ac52:	8d 01       	movw	r16, r26
    ac54:	bf ef       	ldi	r27, 0xFF	; 255
    ac56:	eb 1a       	sub	r14, r27
    ac58:	fb 0a       	sbc	r15, r27
    ac5a:	e8 e8       	ldi	r30, 0x88	; 136
    ac5c:	ee 16       	cp	r14, r30
    ac5e:	f1 04       	cpc	r15, r1
    ac60:	99 f7       	brne	.-26     	; 0xac48 <setup+0x10f0>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    ac62:	88 e8       	ldi	r24, 0x88	; 136
    ac64:	90 e0       	ldi	r25, 0x00	; 0
    ac66:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac6a:	18 2f       	mov	r17, r24
    ac6c:	89 e8       	ldi	r24, 0x89	; 137
    ac6e:	90 e0       	ldi	r25, 0x00	; 0
    ac70:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac74:	21 2f       	mov	r18, r17
    ac76:	30 e0       	ldi	r19, 0x00	; 0
    ac78:	32 2f       	mov	r19, r18
    ac7a:	22 27       	eor	r18, r18
    ac7c:	82 0f       	add	r24, r18
    ac7e:	93 2f       	mov	r25, r19
    ac80:	91 1d       	adc	r25, r1
    ac82:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <device+0x25>
    ac86:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <device+0x24>
    ac8a:	24 e5       	ldi	r18, 0x54	; 84
    ac8c:	e2 2e       	mov	r14, r18
    ac8e:	2c e0       	ldi	r18, 0x0C	; 12
    ac90:	f2 2e       	mov	r15, r18
    ac92:	0a e8       	ldi	r16, 0x8A	; 138
    ac94:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    ac96:	c8 01       	movw	r24, r16
    ac98:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    ac9c:	d7 01       	movw	r26, r14
    ac9e:	8d 93       	st	X+, r24
    aca0:	7d 01       	movw	r14, r26
    aca2:	0f 5f       	subi	r16, 0xFF	; 255
    aca4:	1f 4f       	sbci	r17, 0xFF	; 255
    aca6:	0e 39       	cpi	r16, 0x9E	; 158
    aca8:	11 05       	cpc	r17, r1
    acaa:	a9 f7       	brne	.-22     	; 0xac96 <setup+0x113e>
    acac:	88 e6       	ldi	r24, 0x68	; 104
    acae:	e8 2e       	mov	r14, r24
    acb0:	8c e0       	ldi	r24, 0x0C	; 12
    acb2:	f8 2e       	mov	r15, r24
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    acb4:	c8 01       	movw	r24, r16
    acb6:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    acba:	f7 01       	movw	r30, r14
    acbc:	81 93       	st	Z+, r24
    acbe:	7f 01       	movw	r14, r30
    acc0:	0f 5f       	subi	r16, 0xFF	; 255
    acc2:	1f 4f       	sbci	r17, 0xFF	; 255
    acc4:	02 3b       	cpi	r16, 0xB2	; 178
    acc6:	11 05       	cpc	r17, r1
    acc8:	a9 f7       	brne	.-22     	; 0xacb4 <setup+0x115c>
    acca:	bc e7       	ldi	r27, 0x7C	; 124
    accc:	eb 2e       	mov	r14, r27
    acce:	bc e0       	ldi	r27, 0x0C	; 12
    acd0:	fb 2e       	mov	r15, r27
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    acd2:	c8 01       	movw	r24, r16
    acd4:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    acd8:	d7 01       	movw	r26, r14
    acda:	8d 93       	st	X+, r24
    acdc:	7d 01       	movw	r14, r26
    acde:	0f 5f       	subi	r16, 0xFF	; 255
    ace0:	1f 4f       	sbci	r17, 0xFF	; 255
    ace2:	06 3b       	cpi	r16, 0xB6	; 182
    ace4:	11 05       	cpc	r17, r1
    ace6:	a9 f7       	brne	.-22     	; 0xacd2 <setup+0x117a>
    ace8:	4b e2       	ldi	r20, 0x2B	; 43
    acea:	5a e0       	ldi	r21, 0x0A	; 10
    acec:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3427
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    acee:	60 e2       	ldi	r22, 0x20	; 32
    acf0:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:35
    acf2:	90 e0       	ldi	r25, 0x00	; 0
    acf4:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3427
    acf6:	fc 01       	movw	r30, r24
    acf8:	ee 0f       	add	r30, r30
    acfa:	ff 1f       	adc	r31, r31
    acfc:	e4 0f       	add	r30, r20
    acfe:	f5 1f       	adc	r31, r21
    ad00:	70 87       	std	Z+8, r23	; 0x08
    ad02:	67 83       	std	Z+7, r22	; 0x07
    ad04:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ad06:	8a 30       	cpi	r24, 0x0A	; 10
    ad08:	91 05       	cpc	r25, r1
    ad0a:	a9 f7       	brne	.-22     	; 0xacf6 <setup+0x119e>
    ad0c:	21 50       	subi	r18, 0x01	; 1
    ad0e:	42 5e       	subi	r20, 0xE2	; 226
    ad10:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ad12:	21 11       	cpse	r18, r1
    ad14:	ee cf       	rjmp	.-36     	; 0xacf2 <setup+0x119a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    ad16:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <last_output_update>
    ad1a:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <last_output_update+0x1>
    ad1e:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <last_output_update+0x2>
    ad22:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <last_output_update+0x3>
    ad26:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    ad2a:	a3 94       	inc	r10
    ad2c:	c0 5c       	subi	r28, 0xC0	; 192
    ad2e:	de 4f       	sbci	r29, 0xFE	; 254
    ad30:	e8 81       	ld	r30, Y
    ad32:	f9 81       	ldd	r31, Y+1	; 0x01
    ad34:	c0 54       	subi	r28, 0x40	; 64
    ad36:	d1 40       	sbci	r29, 0x01	; 1
    ad38:	3f 96       	adiw	r30, 0x0f	; 15
    ad3a:	c0 5c       	subi	r28, 0xC0	; 192
    ad3c:	de 4f       	sbci	r29, 0xFE	; 254
    ad3e:	f9 83       	std	Y+1, r31	; 0x01
    ad40:	e8 83       	st	Y, r30
    ad42:	c0 54       	subi	r28, 0x40	; 64
    ad44:	d1 40       	sbci	r29, 0x01	; 1
    ad46:	f0 e1       	ldi	r31, 0x10	; 16
    ad48:	af 12       	cpse	r10, r31
    ad4a:	4e c9       	rjmp	.-3428   	; 0x9fe8 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    ad4c:	64 ef       	ldi	r22, 0xF4	; 244
    ad4e:	71 e0       	ldi	r23, 0x01	; 1
    ad50:	80 e0       	ldi	r24, 0x00	; 0
    ad52:	90 e0       	ldi	r25, 0x00	; 0
    ad54:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604
  MenuPrepareStyle();
    ad58:	0e 94 69 28 	call	0x50d2	; 0x50d2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
  draw_menu(true);
    ad5c:	81 e0       	ldi	r24, 0x01	; 1
    ad5e:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
  a2d_run_now = 1;
    ad62:	81 e0       	ldi	r24, 0x01	; 1
    ad64:	80 93 e4 0a 	sts	0x0AE4, r24	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608

}
    ad68:	c3 5b       	subi	r28, 0xB3	; 179
    ad6a:	de 4f       	sbci	r29, 0xFE	; 254
    ad6c:	0f b6       	in	r0, 0x3f	; 63
    ad6e:	f8 94       	cli
    ad70:	de bf       	out	0x3e, r29	; 62
    ad72:	0f be       	out	0x3f, r0	; 63
    ad74:	cd bf       	out	0x3d, r28	; 61
    ad76:	df 91       	pop	r29
    ad78:	cf 91       	pop	r28
    ad7a:	1f 91       	pop	r17
    ad7c:	0f 91       	pop	r16
    ad7e:	ff 90       	pop	r15
    ad80:	ef 90       	pop	r14
    ad82:	df 90       	pop	r13
    ad84:	cf 90       	pop	r12
    ad86:	bf 90       	pop	r11
    ad88:	af 90       	pop	r10
    ad8a:	9f 90       	pop	r9
    ad8c:	8f 90       	pop	r8
    ad8e:	7f 90       	pop	r7
    ad90:	6f 90       	pop	r6
    ad92:	5f 90       	pop	r5
    ad94:	4f 90       	pop	r4
    ad96:	3f 90       	pop	r3
    ad98:	2f 90       	pop	r2
    ad9a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    ad9c:	67 ea       	ldi	r22, 0xA7	; 167
    ad9e:	77 e2       	ldi	r23, 0x27	; 39
    ada0:	c1 01       	movw	r24, r2
    ada2:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ada6:	ee 24       	eor	r14, r14
    ada8:	ea 94       	dec	r14
    adaa:	fe 2c       	mov	r15, r14
    adac:	00 ee       	ldi	r16, 0xE0	; 224
    adae:	17 e0       	ldi	r17, 0x07	; 7
    adb0:	21 e0       	ldi	r18, 0x01	; 1
    adb2:	4e e6       	ldi	r20, 0x6E	; 110
    adb4:	50 e0       	ldi	r21, 0x00	; 0
    adb6:	6e e1       	ldi	r22, 0x1E	; 30
    adb8:	70 e0       	ldi	r23, 0x00	; 0
    adba:	c1 01       	movw	r24, r2
    adbc:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    adc0:	20 91 dd 0d 	lds	r18, 0x0DDD	; 0x800ddd <my_lcd+0x14>
    adc4:	30 91 de 0d 	lds	r19, 0x0DDE	; 0x800dde <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    adc8:	40 91 db 0d 	lds	r20, 0x0DDB	; 0x800ddb <my_lcd+0x12>
    adcc:	50 91 dc 0d 	lds	r21, 0x0DDC	; 0x800ddc <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    add0:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    add4:	e0 91 c0 0d 	lds	r30, 0x0DC0	; 0x800dc0 <my_touch+0x15>
    add8:	f0 91 c1 0d 	lds	r31, 0x0DC1	; 0x800dc1 <my_touch+0x16>
    addc:	80 81       	ld	r24, Z
    adde:	60 91 c7 0d 	lds	r22, 0x0DC7	; 0x800dc7 <my_touch+0x1c>
    ade2:	86 2b       	or	r24, r22
    ade4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    ade6:	e0 91 bc 0d 	lds	r30, 0x0DBC	; 0x800dbc <my_touch+0x11>
    adea:	f0 91 bd 0d 	lds	r31, 0x0DBD	; 0x800dbd <my_touch+0x12>
    adee:	80 81       	ld	r24, Z
    adf0:	60 91 c5 0d 	lds	r22, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    adf4:	86 2b       	or	r24, r22
    adf6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    adf8:	e0 91 ba 0d 	lds	r30, 0x0DBA	; 0x800dba <my_touch+0xf>
    adfc:	f0 91 bb 0d 	lds	r31, 0x0DBB	; 0x800dbb <my_touch+0x10>
    ae00:	80 81       	ld	r24, Z
    ae02:	60 91 c4 0d 	lds	r22, 0x0DC4	; 0x800dc4 <my_touch+0x19>
    ae06:	86 2b       	or	r24, r22
    ae08:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    ae0a:	50 93 b4 0d 	sts	0x0DB4, r21	; 0x800db4 <my_touch+0x9>
    ae0e:	40 93 b3 0d 	sts	0x0DB3, r20	; 0x800db3 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    ae12:	30 93 b6 0d 	sts	0x0DB6, r19	; 0x800db6 <my_touch+0xb>
    ae16:	20 93 b5 0d 	sts	0x0DB5, r18	; 0x800db5 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    ae1a:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <my_touch+0xe>
    ae1e:	85 cf       	rjmp	.-246    	; 0xad2a <setup+0x11d2>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    ae20:	66 e3       	ldi	r22, 0x36	; 54
    ae22:	78 e2       	ldi	r23, 0x28	; 40
    ae24:	8d 2d       	mov	r24, r13
    ae26:	9b 2d       	mov	r25, r11
    ae28:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    ae2c:	ee 24       	eor	r14, r14
    ae2e:	ea 94       	dec	r14
    ae30:	fe 2c       	mov	r15, r14
    ae32:	00 e0       	ldi	r16, 0x00	; 0
    ae34:	18 ef       	ldi	r17, 0xF8	; 248
    ae36:	21 e0       	ldi	r18, 0x01	; 1
    ae38:	48 e7       	ldi	r20, 0x78	; 120
    ae3a:	50 e0       	ldi	r21, 0x00	; 0
    ae3c:	60 ea       	ldi	r22, 0xA0	; 160
    ae3e:	70 e0       	ldi	r23, 0x00	; 0
    ae40:	8d 2d       	mov	r24, r13
    ae42:	9b 2d       	mov	r25, r11
    ae44:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    ae48:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    ae4c:	84 60       	ori	r24, 0x04	; 4
    ae4e:	37 c3       	rjmp	.+1646   	; 0xb4be <setup+0x1966>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    ae50:	e8 e0       	ldi	r30, 0x08	; 8
    ae52:	ae 12       	cpse	r10, r30
    ae54:	9d c0       	rjmp	.+314    	; 0xaf90 <setup+0x1438>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
    {
      strcpy_P(str1, text_onewire_hledam);
    ae56:	6b e8       	ldi	r22, 0x8B	; 139
    ae58:	77 e2       	ldi	r23, 0x27	; 39
    ae5a:	8d 2d       	mov	r24, r13
    ae5c:	9b 2d       	mov	r25, r11
    ae5e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ae62:	ee 24       	eor	r14, r14
    ae64:	ea 94       	dec	r14
    ae66:	fe 2c       	mov	r15, r14
    ae68:	00 ee       	ldi	r16, 0xE0	; 224
    ae6a:	17 e0       	ldi	r17, 0x07	; 7
    ae6c:	21 e0       	ldi	r18, 0x01	; 1
    ae6e:	42 e8       	ldi	r20, 0x82	; 130
    ae70:	50 e0       	ldi	r21, 0x00	; 0
    ae72:	6e e1       	ldi	r22, 0x1E	; 30
    ae74:	70 e0       	ldi	r23, 0x00	; 0
    ae76:	8d 2d       	mov	r24, r13
    ae78:	9b 2d       	mov	r25, r11
    ae7a:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
      Global_HWwirenum = 0;
    ae7e:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:222
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    ae82:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <ds2482_address+0x1>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:223
  ds2482init(ds2482_address[idx].i2c_addr);
    ae86:	10 91 87 09 	lds	r17, 0x0987	; 0x800987 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    ae8a:	81 2f       	mov	r24, r17
    ae8c:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    ae90:	88 e0       	ldi	r24, 0x08	; 8
    ae92:	9e e0       	ldi	r25, 0x0E	; 14
    ae94:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    ae98:	81 11       	cpse	r24, r1
    ae9a:	10 c0       	rjmp	.+32     	; 0xaebc <setup+0x1364>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    ae9c:	81 2f       	mov	r24, r17
    ae9e:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    aea2:	82 ed       	ldi	r24, 0xD2	; 210
    aea4:	90 e0       	ldi	r25, 0x00	; 0
    aea6:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    aeaa:	60 e0       	ldi	r22, 0x00	; 0
    aeac:	88 e0       	ldi	r24, 0x08	; 8
    aeae:	9e e0       	ldi	r25, 0x0E	; 14
    aeb0:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    aeb4:	88 e0       	ldi	r24, 0x08	; 8
    aeb6:	9e e0       	ldi	r25, 0x0E	; 14
    aeb8:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:224
  ds2482reset(ds2482_address[idx].i2c_addr);
    aebc:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <ds2482_address>
    aec0:	0e 94 b4 7e 	call	0xfd68	; 0xfd68 <ds2482reset(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:225
  ds2482owReset(ds2482_address[idx].i2c_addr);
    aec4:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <ds2482_address>
    aec8:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <ds2482owReset(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:226
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
    aecc:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    aed0:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <lastDevice>
    aed4:	10 92 ea 0a 	sts	0x0AEA, r1	; 0x800aea <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    aed8:	0e 94 b4 7f 	call	0xff68	; 0xff68 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]>
one_hw_search_device():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:234
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    aedc:	81 11       	cpse	r24, r1
    aede:	35 c0       	rjmp	.+106    	; 0xaf4a <setup+0x13f2>
    aee0:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:239
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    aee2:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:236
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    aee4:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <ds2482_address+0x1>
    aee8:	86 30       	cpi	r24, 0x06	; 6
    aeea:	78 f5       	brcc	.+94     	; 0xaf4a <setup+0x13f2>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:237
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    aeec:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <Global_HWwirenum>
    aef0:	42 2f       	mov	r20, r18
    aef2:	50 e0       	ldi	r21, 0x00	; 0
    aef4:	ab ee       	ldi	r26, 0xEB	; 235
    aef6:	ba e0       	ldi	r27, 0x0A	; 10
    aef8:	21 9f       	mul	r18, r17
    aefa:	90 01       	movw	r18, r0
    aefc:	11 24       	eor	r1, r1
    aefe:	90 e0       	ldi	r25, 0x00	; 0
    af00:	80 e0       	ldi	r24, 0x00	; 0
    af02:	6d 91       	ld	r22, X+
    af04:	fc 01       	movw	r30, r24
    af06:	e2 0f       	add	r30, r18
    af08:	f3 1f       	adc	r31, r19
    af0a:	ef 52       	subi	r30, 0x2F	; 47
    af0c:	f6 4f       	sbci	r31, 0xF6	; 246
    af0e:	60 83       	st	Z, r22
    af10:	01 96       	adiw	r24, 0x01	; 1
    af12:	88 30       	cpi	r24, 0x08	; 8
    af14:	91 05       	cpc	r25, r1
    af16:	a9 f7       	brne	.-22     	; 0xaf02 <setup+0x13aa>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:238
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    af18:	14 9f       	mul	r17, r20
    af1a:	f0 01       	movw	r30, r0
    af1c:	15 9f       	mul	r17, r21
    af1e:	f0 0d       	add	r31, r0
    af20:	11 24       	eor	r1, r1
    af22:	ef 52       	subi	r30, 0x2F	; 47
    af24:	f6 4f       	sbci	r31, 0xF6	; 246
    af26:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:239
      w_rom[Global_HWwirenum].used = 1;
    af28:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:240
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    af2a:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <ds2482_address>
    af2e:	0e 94 b4 7f 	call	0xff68	; 0xff68 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:242
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    af32:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <ds2482_address+0x1>
    af36:	9f 5f       	subi	r25, 0xFF	; 255
    af38:	90 93 88 09 	sts	0x0988, r25	; 0x800988 <ds2482_address+0x1>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:243
      Global_HWwirenum++;
    af3c:	90 91 13 0a 	lds	r25, 0x0A13	; 0x800a13 <Global_HWwirenum>
    af40:	9f 5f       	subi	r25, 0xFF	; 255
    af42:	90 93 13 0a 	sts	0x0A13, r25	; 0x800a13 <Global_HWwirenum>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:244
      if (r == DS2482_ERR_NO_DEVICE)
    af46:	85 30       	cpi	r24, 0x05	; 5
    af48:	69 f6       	brne	.-102    	; 0xaee4 <setup+0x138c>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
      one_hw_search_device(0);
      tds_update_associate();
    af4a:	0e 94 a2 46 	call	0x8d44	; 0x8d44 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3477
      strcpy (str1, "Nalezeno: ");
    af4e:	6e e2       	ldi	r22, 0x2E	; 46
    af50:	74 e0       	ldi	r23, 0x04	; 4
    af52:	8d 2d       	mov	r24, r13
    af54:	9b 2d       	mov	r25, r11
    af56:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
      itoa(Global_HWwirenum, str2, 10);
    af5a:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    af5e:	4a e0       	ldi	r20, 0x0A	; 10
    af60:	be 01       	movw	r22, r28
    af62:	68 57       	subi	r22, 0x78	; 120
    af64:	7f 4f       	sbci	r23, 0xFF	; 255
    af66:	90 e0       	ldi	r25, 0x00	; 0
    af68:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3479
      strcat(str1, str2);
    af6c:	be 01       	movw	r22, r28
    af6e:	68 57       	subi	r22, 0x78	; 120
    af70:	7f 4f       	sbci	r23, 0xFF	; 255
    af72:	8d 2d       	mov	r24, r13
    af74:	9b 2d       	mov	r25, r11
    af76:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    af7a:	ee 24       	eor	r14, r14
    af7c:	ea 94       	dec	r14
    af7e:	fe 2c       	mov	r15, r14
    af80:	00 ee       	ldi	r16, 0xE0	; 224
    af82:	17 e0       	ldi	r17, 0x07	; 7
    af84:	21 e0       	ldi	r18, 0x01	; 1
    af86:	42 e8       	ldi	r20, 0x82	; 130
    af88:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    af8a:	60 ea       	ldi	r22, 0xA0	; 160
    af8c:	70 e0       	ldi	r23, 0x00	; 0
    af8e:	cc cd       	rjmp	.-1128   	; 0xab28 <setup+0xfd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    af90:	f9 e0       	ldi	r31, 0x09	; 9
    af92:	af 12       	cpse	r10, r31
    af94:	97 c2       	rjmp	.+1326   	; 0xb4c4 <setup+0x196c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3486
    {
      digitalWrite(ETH_RST, HIGH);
    af96:	61 e0       	ldi	r22, 0x01	; 1
    af98:	86 e0       	ldi	r24, 0x06	; 6
    af9a:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3487
      delay(10);
    af9e:	6a e0       	ldi	r22, 0x0A	; 10
    afa0:	70 e0       	ldi	r23, 0x00	; 0
    afa2:	80 e0       	ldi	r24, 0x00	; 0
    afa4:	90 e0       	ldi	r25, 0x00	; 0
    afa6:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
      digitalWrite(ETH_RST, LOW);
    afaa:	60 e0       	ldi	r22, 0x00	; 0
    afac:	86 e0       	ldi	r24, 0x06	; 6
    afae:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
      delay(10);
    afb2:	6a e0       	ldi	r22, 0x0A	; 10
    afb4:	70 e0       	ldi	r23, 0x00	; 0
    afb6:	80 e0       	ldi	r24, 0x00	; 0
    afb8:	90 e0       	ldi	r25, 0x00	; 0
    afba:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3490
      digitalWrite(ETH_RST, HIGH);
    afbe:	61 e0       	ldi	r22, 0x01	; 1
    afc0:	86 e0       	ldi	r24, 0x06	; 6
    afc2:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
      delay(100);
    afc6:	64 e6       	ldi	r22, 0x64	; 100
    afc8:	70 e0       	ldi	r23, 0x00	; 0
    afca:	80 e0       	ldi	r24, 0x00	; 0
    afcc:	90 e0       	ldi	r25, 0x00	; 0
    afce:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    afd2:	8f e0       	ldi	r24, 0x0F	; 15
    afd4:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    afd8:	82 ee       	ldi	r24, 0xE2	; 226
    afda:	92 e0       	ldi	r25, 0x02	; 2
    afdc:	ce 5c       	subi	r28, 0xCE	; 206
    afde:	de 4f       	sbci	r29, 0xFE	; 254
    afe0:	99 83       	std	Y+1, r25	; 0x01
    afe2:	88 83       	st	Y, r24
    afe4:	c2 53       	subi	r28, 0x32	; 50
    afe6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    afe8:	24 e0       	ldi	r18, 0x04	; 4
    afea:	e8 e3       	ldi	r30, 0x38	; 56
    afec:	fc e0       	ldi	r31, 0x0C	; 12
    afee:	cc 5b       	subi	r28, 0xBC	; 188
    aff0:	de 4f       	sbci	r29, 0xFE	; 254
    aff2:	a8 81       	ld	r26, Y
    aff4:	b9 81       	ldd	r27, Y+1	; 0x01
    aff6:	c4 54       	subi	r28, 0x44	; 68
    aff8:	d1 40       	sbci	r29, 0x01	; 1
    affa:	01 90       	ld	r0, Z+
    affc:	0d 92       	st	X+, r0
    affe:	2a 95       	dec	r18
    b000:	e1 f7       	brne	.-8      	; 0xaffa <setup+0x14a2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    b002:	c4 5d       	subi	r28, 0xD4	; 212
    b004:	de 4f       	sbci	r29, 0xFE	; 254
    b006:	99 83       	std	Y+1, r25	; 0x01
    b008:	88 83       	st	Y, r24
    b00a:	cc 52       	subi	r28, 0x2C	; 44
    b00c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    b00e:	24 e0       	ldi	r18, 0x04	; 4
    b010:	e0 e4       	ldi	r30, 0x40	; 64
    b012:	fc e0       	ldi	r31, 0x0C	; 12
    b014:	ca 5b       	subi	r28, 0xBA	; 186
    b016:	de 4f       	sbci	r29, 0xFE	; 254
    b018:	a8 81       	ld	r26, Y
    b01a:	b9 81       	ldd	r27, Y+1	; 0x01
    b01c:	c6 54       	subi	r28, 0x46	; 70
    b01e:	d1 40       	sbci	r29, 0x01	; 1
    b020:	01 90       	ld	r0, Z+
    b022:	0d 92       	st	X+, r0
    b024:	2a 95       	dec	r18
    b026:	e1 f7       	brne	.-8      	; 0xb020 <setup+0x14c8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    b028:	ca 5d       	subi	r28, 0xDA	; 218
    b02a:	de 4f       	sbci	r29, 0xFE	; 254
    b02c:	99 83       	std	Y+1, r25	; 0x01
    b02e:	88 83       	st	Y, r24
    b030:	c6 52       	subi	r28, 0x26	; 38
    b032:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    b034:	24 e0       	ldi	r18, 0x04	; 4
    b036:	ec e3       	ldi	r30, 0x3C	; 60
    b038:	fc e0       	ldi	r31, 0x0C	; 12
    b03a:	c8 5b       	subi	r28, 0xB8	; 184
    b03c:	de 4f       	sbci	r29, 0xFE	; 254
    b03e:	a8 81       	ld	r26, Y
    b040:	b9 81       	ldd	r27, Y+1	; 0x01
    b042:	c8 54       	subi	r28, 0x48	; 72
    b044:	d1 40       	sbci	r29, 0x01	; 1
    b046:	01 90       	ld	r0, Z+
    b048:	0d 92       	st	X+, r0
    b04a:	2a 95       	dec	r18
    b04c:	e1 f7       	brne	.-8      	; 0xb046 <setup+0x14ee>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    b04e:	c2 52       	subi	r28, 0x22	; 34
    b050:	df 4f       	sbci	r29, 0xFF	; 255
    b052:	99 83       	std	Y+1, r25	; 0x01
    b054:	88 83       	st	Y, r24
    b056:	ce 5d       	subi	r28, 0xDE	; 222
    b058:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    b05a:	84 e0       	ldi	r24, 0x04	; 4
    b05c:	e4 e3       	ldi	r30, 0x34	; 52
    b05e:	fc e0       	ldi	r31, 0x0C	; 12
    b060:	c6 5b       	subi	r28, 0xB6	; 182
    b062:	de 4f       	sbci	r29, 0xFE	; 254
    b064:	a8 81       	ld	r26, Y
    b066:	b9 81       	ldd	r27, Y+1	; 0x01
    b068:	ca 54       	subi	r28, 0x4A	; 74
    b06a:	d1 40       	sbci	r29, 0x01	; 1
    b06c:	01 90       	ld	r0, Z+
    b06e:	0d 92       	st	X+, r0
    b070:	8a 95       	dec	r24
    b072:	e1 f7       	brne	.-8      	; 0xb06c <setup+0x1514>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    b074:	9e 01       	movw	r18, r28
    b076:	2e 5c       	subi	r18, 0xCE	; 206
    b078:	3e 4f       	sbci	r19, 0xFE	; 254
    b07a:	ae 01       	movw	r20, r28
    b07c:	44 5d       	subi	r20, 0xD4	; 212
    b07e:	5e 4f       	sbci	r21, 0xFE	; 254
    b080:	be 01       	movw	r22, r28
    b082:	6a 5d       	subi	r22, 0xDA	; 218
    b084:	7e 4f       	sbci	r23, 0xFE	; 254
    b086:	ce 01       	movw	r24, r28
    b088:	82 52       	subi	r24, 0x22	; 34
    b08a:	9f 4f       	sbci	r25, 0xFF	; 255
    b08c:	0e 94 13 85 	call	0x10a26	; 0x10a26 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.83]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3494
      strcpy_P(str1, text_ethernet_rozhrani);
    b090:	69 e7       	ldi	r22, 0x79	; 121
    b092:	77 e2       	ldi	r23, 0x27	; 39
    b094:	8d 2d       	mov	r24, r13
    b096:	9b 2d       	mov	r25, r11
    b098:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b09c:	ee 24       	eor	r14, r14
    b09e:	ea 94       	dec	r14
    b0a0:	fe 2c       	mov	r15, r14
    b0a2:	00 ee       	ldi	r16, 0xE0	; 224
    b0a4:	17 e0       	ldi	r17, 0x07	; 7
    b0a6:	21 e0       	ldi	r18, 0x01	; 1
    b0a8:	4c e8       	ldi	r20, 0x8C	; 140
    b0aa:	50 e0       	ldi	r21, 0x00	; 0
    b0ac:	6e e1       	ldi	r22, 0x1E	; 30
    b0ae:	70 e0       	ldi	r23, 0x00	; 0
    b0b0:	8d 2d       	mov	r24, r13
    b0b2:	9b 2d       	mov	r25, r11
    b0b4:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3496
      delay(100);
    b0b8:	64 e6       	ldi	r22, 0x64	; 100
    b0ba:	70 e0       	ldi	r23, 0x00	; 0
    b0bc:	80 e0       	ldi	r24, 0x00	; 0
    b0be:	90 e0       	ldi	r25, 0x00	; 0
    b0c0:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
    b0c4:	32 ce       	rjmp	.-924    	; 0xad2a <setup+0x11d2>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    b0c6:	90 62       	ori	r25, 0x20	; 32
    b0c8:	90 93 df 0a 	sts	0x0ADF, r25	; 0x800adf <selftest_data>
    b0cc:	3c c2       	rjmp	.+1144   	; 0xb546 <setup+0x19ee>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    b0ce:	65 ed       	ldi	r22, 0xD5	; 213
    b0d0:	77 e2       	ldi	r23, 0x27	; 39
    b0d2:	8d 2d       	mov	r24, r13
    b0d4:	9b 2d       	mov	r25, r11
    b0d6:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b0da:	ee 24       	eor	r14, r14
    b0dc:	ea 94       	dec	r14
    b0de:	fe 2c       	mov	r15, r14
    b0e0:	00 ee       	ldi	r16, 0xE0	; 224
    b0e2:	17 e0       	ldi	r17, 0x07	; 7
    b0e4:	55 c2       	rjmp	.+1194   	; 0xb590 <setup+0x1a38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    b0e6:	3b e0       	ldi	r19, 0x0B	; 11
    b0e8:	a3 12       	cpse	r10, r19
    b0ea:	0f c0       	rjmp	.+30     	; 0xb10a <setup+0x15b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
    {
      strcpy_P(str1, text_rest_rozhrani);
    b0ec:	6a e4       	ldi	r22, 0x4A	; 74
    b0ee:	77 e2       	ldi	r23, 0x27	; 39
    b0f0:	8d 2d       	mov	r24, r13
    b0f2:	9b 2d       	mov	r25, r11
    b0f4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3537
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b0f8:	ee 24       	eor	r14, r14
    b0fa:	ea 94       	dec	r14
    b0fc:	fe 2c       	mov	r15, r14
    b0fe:	00 ee       	ldi	r16, 0xE0	; 224
    b100:	17 e0       	ldi	r17, 0x07	; 7
    b102:	21 e0       	ldi	r18, 0x01	; 1
    b104:	40 ea       	ldi	r20, 0xA0	; 160
    b106:	50 e0       	ldi	r21, 0x00	; 0
    b108:	0d cd       	rjmp	.-1510   	; 0xab24 <setup+0xfcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3541
    }
    ///
    /// inicializace nrf
    if (init == 12)
    b10a:	8c e0       	ldi	r24, 0x0C	; 12
    b10c:	a8 12       	cpse	r10, r24
    b10e:	44 c2       	rjmp	.+1160   	; 0xb598 <setup+0x1a40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3543
    {
      strcpy_P(str1, text_nrf_rozhrani);
    b110:	6d e3       	ldi	r22, 0x3D	; 61
    b112:	77 e2       	ldi	r23, 0x27	; 39
    b114:	8d 2d       	mov	r24, r13
    b116:	9b 2d       	mov	r25, r11
    b118:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b11c:	ee 24       	eor	r14, r14
    b11e:	ea 94       	dec	r14
    b120:	fe 2c       	mov	r15, r14
    b122:	00 ee       	ldi	r16, 0xE0	; 224
    b124:	17 e0       	ldi	r17, 0x07	; 7
    b126:	21 e0       	ldi	r18, 0x01	; 1
    b128:	4a ea       	ldi	r20, 0xAA	; 170
    b12a:	50 e0       	ldi	r21, 0x00	; 0
    b12c:	fb cc       	rjmp	.-1546   	; 0xab24 <setup+0xfcc>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    b12e:	d8 01       	movw	r26, r16
    b130:	d2 96       	adiw	r26, 0x32	; 50
    b132:	8d 91       	ld	r24, X+
    b134:	9d 91       	ld	r25, X+
    b136:	0d 90       	ld	r0, X+
    b138:	bc 91       	ld	r27, X
    b13a:	a0 2d       	mov	r26, r0
    b13c:	c8 5c       	subi	r28, 0xC8	; 200
    b13e:	de 4f       	sbci	r29, 0xFE	; 254
    b140:	88 83       	st	Y, r24
    b142:	99 83       	std	Y+1, r25	; 0x01
    b144:	aa 83       	std	Y+2, r26	; 0x02
    b146:	bb 83       	std	Y+3, r27	; 0x03
    b148:	c8 53       	subi	r28, 0x38	; 56
    b14a:	d1 40       	sbci	r29, 0x01	; 1
    b14c:	9c 01       	movw	r18, r24
    b14e:	ad 01       	movw	r20, r26
    b150:	c3 01       	movw	r24, r6
    b152:	b2 01       	movw	r22, r4
    b154:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    b158:	87 fd       	sbrc	r24, 7
    b15a:	0d c3       	rjmp	.+1562   	; 0xb776 <setup+0x1c1e>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    b15c:	d8 01       	movw	r26, r16
    b15e:	da 96       	adiw	r26, 0x3a	; 58
    b160:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    b162:	f8 01       	movw	r30, r16
    b164:	12 aa       	std	Z+50, r1	; 0x32
    b166:	13 aa       	std	Z+51, r1	; 0x33
    b168:	14 aa       	std	Z+52, r1	; 0x34
    b16a:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    b16c:	80 e0       	ldi	r24, 0x00	; 0
    b16e:	90 e0       	ldi	r25, 0x00	; 0
    b170:	af e7       	ldi	r26, 0x7F	; 127
    b172:	b3 e4       	ldi	r27, 0x43	; 67
    b174:	86 ab       	std	Z+54, r24	; 0x36
    b176:	97 ab       	std	Z+55, r25	; 0x37
    b178:	a0 af       	std	Z+56, r26	; 0x38
    b17a:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    b17c:	26 8d       	ldd	r18, Z+30	; 0x1e
    b17e:	37 8d       	ldd	r19, Z+31	; 0x1f
    b180:	c8 5c       	subi	r28, 0xC8	; 200
    b182:	de 4f       	sbci	r29, 0xFE	; 254
    b184:	39 83       	std	Y+1, r19	; 0x01
    b186:	28 83       	st	Y, r18
    b188:	c8 53       	subi	r28, 0x38	; 56
    b18a:	d1 40       	sbci	r29, 0x01	; 1
    b18c:	d9 01       	movw	r26, r18
    b18e:	4d 90       	ld	r4, X+
    b190:	5d 90       	ld	r5, X+
    b192:	6d 90       	ld	r6, X+
    b194:	7c 90       	ld	r7, X
    b196:	20 e0       	ldi	r18, 0x00	; 0
    b198:	30 e0       	ldi	r19, 0x00	; 0
    b19a:	4f e7       	ldi	r20, 0x7F	; 127
    b19c:	53 e4       	ldi	r21, 0x43	; 67
    b19e:	c3 01       	movw	r24, r6
    b1a0:	b2 01       	movw	r22, r4
    b1a2:	0e 94 c8 a3 	call	0x14790	; 0x14790 <__gesf2>
    b1a6:	18 16       	cp	r1, r24
    b1a8:	94 f5       	brge	.+100    	; 0xb20e <setup+0x16b6>
    b1aa:	80 e0       	ldi	r24, 0x00	; 0
    b1ac:	90 e0       	ldi	r25, 0x00	; 0
    b1ae:	af e7       	ldi	r26, 0x7F	; 127
    b1b0:	b3 e4       	ldi	r27, 0x43	; 67
    b1b2:	c8 5c       	subi	r28, 0xC8	; 200
    b1b4:	de 4f       	sbci	r29, 0xFE	; 254
    b1b6:	e8 81       	ld	r30, Y
    b1b8:	f9 81       	ldd	r31, Y+1	; 0x01
    b1ba:	c8 53       	subi	r28, 0x38	; 56
    b1bc:	d1 40       	sbci	r29, 0x01	; 1
    b1be:	80 83       	st	Z, r24
    b1c0:	91 83       	std	Z+1, r25	; 0x01
    b1c2:	a2 83       	std	Z+2, r26	; 0x02
    b1c4:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    b1c6:	d8 01       	movw	r26, r16
    b1c8:	96 96       	adiw	r26, 0x26	; 38
    b1ca:	8d 91       	ld	r24, X+
    b1cc:	9d 91       	ld	r25, X+
    b1ce:	0d 90       	ld	r0, X+
    b1d0:	bc 91       	ld	r27, X
    b1d2:	a0 2d       	mov	r26, r0
    b1d4:	c8 5c       	subi	r28, 0xC8	; 200
    b1d6:	de 4f       	sbci	r29, 0xFE	; 254
    b1d8:	88 83       	st	Y, r24
    b1da:	99 83       	std	Y+1, r25	; 0x01
    b1dc:	aa 83       	std	Y+2, r26	; 0x02
    b1de:	bb 83       	std	Y+3, r27	; 0x03
    b1e0:	c8 53       	subi	r28, 0x38	; 56
    b1e2:	d1 40       	sbci	r29, 0x01	; 1
    b1e4:	f8 01       	movw	r30, r16
    b1e6:	46 a8       	ldd	r4, Z+54	; 0x36
    b1e8:	57 a8       	ldd	r5, Z+55	; 0x37
    b1ea:	60 ac       	ldd	r6, Z+56	; 0x38
    b1ec:	71 ac       	ldd	r7, Z+57	; 0x39
    b1ee:	a3 01       	movw	r20, r6
    b1f0:	92 01       	movw	r18, r4
    b1f2:	bc 01       	movw	r22, r24
    b1f4:	cd 01       	movw	r24, r26
    b1f6:	0e 94 c8 a3 	call	0x14790	; 0x14790 <__gesf2>
    b1fa:	18 16       	cp	r1, r24
    b1fc:	ec f4       	brge	.+58     	; 0xb238 <setup+0x16e0>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    b1fe:	d8 01       	movw	r26, r16
    b200:	96 96       	adiw	r26, 0x26	; 38
    b202:	4d 92       	st	X+, r4
    b204:	5d 92       	st	X+, r5
    b206:	6d 92       	st	X+, r6
    b208:	7c 92       	st	X, r7
    b20a:	99 97       	sbiw	r26, 0x29	; 41
    b20c:	28 c0       	rjmp	.+80     	; 0xb25e <setup+0x1706>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    b20e:	20 e0       	ldi	r18, 0x00	; 0
    b210:	30 e0       	ldi	r19, 0x00	; 0
    b212:	a9 01       	movw	r20, r18
    b214:	c3 01       	movw	r24, r6
    b216:	b2 01       	movw	r22, r4
    b218:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    b21c:	87 ff       	sbrs	r24, 7
    b21e:	d3 cf       	rjmp	.-90     	; 0xb1c6 <setup+0x166e>
    b220:	c8 5c       	subi	r28, 0xC8	; 200
    b222:	de 4f       	sbci	r29, 0xFE	; 254
    b224:	a8 81       	ld	r26, Y
    b226:	b9 81       	ldd	r27, Y+1	; 0x01
    b228:	c8 53       	subi	r28, 0x38	; 56
    b22a:	d1 40       	sbci	r29, 0x01	; 1
    b22c:	1d 92       	st	X+, r1
    b22e:	1d 92       	st	X+, r1
    b230:	1d 92       	st	X+, r1
    b232:	1c 92       	st	X, r1
    b234:	13 97       	sbiw	r26, 0x03	; 3
    b236:	c7 cf       	rjmp	.-114    	; 0xb1c6 <setup+0x166e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    b238:	f8 01       	movw	r30, r16
    b23a:	42 a8       	ldd	r4, Z+50	; 0x32
    b23c:	53 a8       	ldd	r5, Z+51	; 0x33
    b23e:	64 a8       	ldd	r6, Z+52	; 0x34
    b240:	75 a8       	ldd	r7, Z+53	; 0x35
    b242:	a3 01       	movw	r20, r6
    b244:	92 01       	movw	r18, r4
    b246:	c8 5c       	subi	r28, 0xC8	; 200
    b248:	de 4f       	sbci	r29, 0xFE	; 254
    b24a:	68 81       	ld	r22, Y
    b24c:	79 81       	ldd	r23, Y+1	; 0x01
    b24e:	8a 81       	ldd	r24, Y+2	; 0x02
    b250:	9b 81       	ldd	r25, Y+3	; 0x03
    b252:	c8 53       	subi	r28, 0x38	; 56
    b254:	d1 40       	sbci	r29, 0x01	; 1
    b256:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
    b25a:	87 fd       	sbrc	r24, 7
    b25c:	d0 cf       	rjmp	.-96     	; 0xb1fe <setup+0x16a6>
    b25e:	ce 5b       	subi	r28, 0xBE	; 190
    b260:	de 4f       	sbci	r29, 0xFE	; 254
    b262:	e8 81       	ld	r30, Y
    b264:	f9 81       	ldd	r31, Y+1	; 0x01
    b266:	c2 54       	subi	r28, 0x42	; 66
    b268:	d1 40       	sbci	r29, 0x01	; 1
    b26a:	34 96       	adiw	r30, 0x04	; 4
    b26c:	ce 5b       	subi	r28, 0xBE	; 190
    b26e:	de 4f       	sbci	r29, 0xFE	; 254
    b270:	f9 83       	std	Y+1, r31	; 0x01
    b272:	e8 83       	st	Y, r30
    b274:	c2 54       	subi	r28, 0x42	; 66
    b276:	d1 40       	sbci	r29, 0x01	; 1
    b278:	c4 5c       	subi	r28, 0xC4	; 196
    b27a:	de 4f       	sbci	r29, 0xFE	; 254
    b27c:	28 81       	ld	r18, Y
    b27e:	39 81       	ldd	r19, Y+1	; 0x01
    b280:	cc 53       	subi	r28, 0x3C	; 60
    b282:	d1 40       	sbci	r29, 0x01	; 1
    b284:	2c 5f       	subi	r18, 0xFC	; 252
    b286:	3f 4f       	sbci	r19, 0xFF	; 255
    b288:	c4 5c       	subi	r28, 0xC4	; 196
    b28a:	de 4f       	sbci	r29, 0xFE	; 254
    b28c:	39 83       	std	Y+1, r19	; 0x01
    b28e:	28 83       	st	Y, r18
    b290:	cc 53       	subi	r28, 0x3C	; 60
    b292:	d1 40       	sbci	r29, 0x01	; 1
    b294:	34 e0       	ldi	r19, 0x04	; 4
    b296:	e3 0e       	add	r14, r19
    b298:	f1 1c       	adc	r15, r1
    b29a:	82 e0       	ldi	r24, 0x02	; 2
    b29c:	88 0e       	add	r8, r24
    b29e:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    b2a0:	9a e0       	ldi	r25, 0x0A	; 10
    b2a2:	89 16       	cp	r8, r25
    b2a4:	91 04       	cpc	r9, r1
    b2a6:	09 f0       	breq	.+2      	; 0xb2aa <setup+0x1752>
    b2a8:	a7 c1       	rjmp	.+846    	; 0xb5f8 <setup+0x1aa0>
    b2aa:	a1 e2       	ldi	r26, 0x21	; 33
    b2ac:	ba e0       	ldi	r27, 0x0A	; 10
    b2ae:	c4 5c       	subi	r28, 0xC4	; 196
    b2b0:	de 4f       	sbci	r29, 0xFE	; 254
    b2b2:	b9 83       	std	Y+1, r27	; 0x01
    b2b4:	a8 83       	st	Y, r26
    b2b6:	cc 53       	subi	r28, 0x3C	; 60
    b2b8:	d1 40       	sbci	r29, 0x01	; 1
    b2ba:	49 e8       	ldi	r20, 0x89	; 137
    b2bc:	44 2e       	mov	r4, r20
    b2be:	49 e0       	ldi	r20, 0x09	; 9
    b2c0:	54 2e       	mov	r5, r20
    b2c2:	5d e9       	ldi	r21, 0x9D	; 157
    b2c4:	65 2e       	mov	r6, r21
    b2c6:	59 e0       	ldi	r21, 0x09	; 9
    b2c8:	75 2e       	mov	r7, r21
    b2ca:	61 eb       	ldi	r22, 0xB1	; 177
    b2cc:	86 2e       	mov	r8, r22
    b2ce:	69 e0       	ldi	r22, 0x09	; 9
    b2d0:	96 2e       	mov	r9, r22
    b2d2:	75 ec       	ldi	r23, 0xC5	; 197
    b2d4:	e7 2e       	mov	r14, r23
    b2d6:	79 e0       	ldi	r23, 0x09	; 9
    b2d8:	f7 2e       	mov	r15, r23
    b2da:	00 e6       	ldi	r16, 0x60	; 96
    b2dc:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    b2de:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    b2e0:	c4 5c       	subi	r28, 0xC4	; 196
    b2e2:	de 4f       	sbci	r29, 0xFE	; 254
    b2e4:	e8 81       	ld	r30, Y
    b2e6:	f9 81       	ldd	r31, Y+1	; 0x01
    b2e8:	cc 53       	subi	r28, 0x3C	; 60
    b2ea:	d1 40       	sbci	r29, 0x01	; 1
    b2ec:	11 92       	st	Z+, r1
    b2ee:	c4 5c       	subi	r28, 0xC4	; 196
    b2f0:	de 4f       	sbci	r29, 0xFE	; 254
    b2f2:	f9 83       	std	Y+1, r31	; 0x01
    b2f4:	e8 83       	st	Y, r30
    b2f6:	cc 53       	subi	r28, 0x3C	; 60
    b2f8:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:226
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    b2fa:	c8 01       	movw	r24, r16
    b2fc:	0e 94 90 84 	call	0x10920	; 0x10920 <EEPROMreadFloat(unsigned int)>
    b300:	d2 01       	movw	r26, r4
    b302:	6d 93       	st	X+, r22
    b304:	7d 93       	st	X+, r23
    b306:	8d 93       	st	X+, r24
    b308:	9d 93       	st	X+, r25
    b30a:	2d 01       	movw	r4, r26
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:227
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    b30c:	c8 01       	movw	r24, r16
    b30e:	04 96       	adiw	r24, 0x04	; 4
    b310:	0e 94 90 84 	call	0x10920	; 0x10920 <EEPROMreadFloat(unsigned int)>
    b314:	f3 01       	movw	r30, r6
    b316:	61 93       	st	Z+, r22
    b318:	71 93       	st	Z+, r23
    b31a:	81 93       	st	Z+, r24
    b31c:	91 93       	st	Z+, r25
    b31e:	3f 01       	movw	r6, r30
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:228
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    b320:	c8 01       	movw	r24, r16
    b322:	08 96       	adiw	r24, 0x08	; 8
    b324:	0e 94 90 84 	call	0x10920	; 0x10920 <EEPROMreadFloat(unsigned int)>
    b328:	d4 01       	movw	r26, r8
    b32a:	6d 93       	st	X+, r22
    b32c:	7d 93       	st	X+, r23
    b32e:	8d 93       	st	X+, r24
    b330:	9d 93       	st	X+, r25
    b332:	4d 01       	movw	r8, r26
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:229
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    b334:	c8 01       	movw	r24, r16
    b336:	0c 96       	adiw	r24, 0x0c	; 12
    b338:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    b33c:	f7 01       	movw	r30, r14
    b33e:	81 93       	st	Z+, r24
    b340:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3559
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    b342:	8c 2d       	mov	r24, r12
    b344:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    b348:	c3 94       	inc	r12
    b34a:	0f 5d       	subi	r16, 0xDF	; 223
    b34c:	1f 4f       	sbci	r17, 0xFF	; 255
    b34e:	f5 e0       	ldi	r31, 0x05	; 5
    b350:	cf 12       	cpse	r12, r31
    b352:	c6 cf       	rjmp	.-116    	; 0xb2e0 <setup+0x1788>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1828
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    b354:	8c e5       	ldi	r24, 0x5C	; 92
    b356:	90 e0       	ldi	r25, 0x00	; 0
    b358:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3561
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    b35c:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <default_ring>
    b360:	e4 cc       	rjmp	.-1592   	; 0xad2a <setup+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3577
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    b362:	65 ed       	ldi	r22, 0xD5	; 213
    b364:	77 e2       	ldi	r23, 0x27	; 39
    b366:	c1 01       	movw	r24, r2
    b368:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3578
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b36c:	ee 24       	eor	r14, r14
    b36e:	ea 94       	dec	r14
    b370:	fe 2c       	mov	r15, r14
    b372:	00 ee       	ldi	r16, 0xE0	; 224
    b374:	17 e0       	ldi	r17, 0x07	; 7
    b376:	21 e0       	ldi	r18, 0x01	; 1
    b378:	4e eb       	ldi	r20, 0xBE	; 190
    b37a:	50 e0       	ldi	r21, 0x00	; 0
    b37c:	60 ea       	ldi	r22, 0xA0	; 160
    b37e:	70 e0       	ldi	r23, 0x00	; 0
    b380:	c1 01       	movw	r24, r2
    b382:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    b386:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    b38a:	8d 7f       	andi	r24, 0xFD	; 253
    b38c:	98 c0       	rjmp	.+304    	; 0xb4be <setup+0x1966>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    b38e:	bf e0       	ldi	r27, 0x0F	; 15
    b390:	ab 12       	cpse	r10, r27
    b392:	cb cc       	rjmp	.-1642   	; 0xad2a <setup+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
    {
      strcpy_P(str1, text_rtc_cas);
    b394:	68 e0       	ldi	r22, 0x08	; 8
    b396:	77 e2       	ldi	r23, 0x27	; 39
    b398:	8d 2d       	mov	r24, r13
    b39a:	9b 2d       	mov	r25, r11
    b39c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b3a0:	ee 24       	eor	r14, r14
    b3a2:	ea 94       	dec	r14
    b3a4:	fe 2c       	mov	r15, r14
    b3a6:	00 ee       	ldi	r16, 0xE0	; 224
    b3a8:	17 e0       	ldi	r17, 0x07	; 7
    b3aa:	21 e0       	ldi	r18, 0x01	; 1
    b3ac:	48 ec       	ldi	r20, 0xC8	; 200
    b3ae:	50 e0       	ldi	r21, 0x00	; 0
    b3b0:	6e e1       	ldi	r22, 0x1E	; 30
    b3b2:	70 e0       	ldi	r23, 0x00	; 0
    b3b4:	8d 2d       	mov	r24, r13
    b3b6:	9b 2d       	mov	r25, r11
    b3b8:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
      if (rtc.isrunning())
    b3bc:	0e 94 9d 7e 	call	0xfd3a	; 0xfd3a <RTC_DS1307::isrunning() [clone .constprop.135]>
    b3c0:	88 23       	and	r24, r24
    b3c2:	99 f0       	breq	.+38     	; 0xb3ea <setup+0x1892>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3590
      {
        strcpy_P(str1, text_ok);
    b3c4:	65 ed       	ldi	r22, 0xD5	; 213
    b3c6:	77 e2       	ldi	r23, 0x27	; 39
    b3c8:	8d 2d       	mov	r24, r13
    b3ca:	9b 2d       	mov	r25, r11
    b3cc:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b3d0:	21 e0       	ldi	r18, 0x01	; 1
    b3d2:	48 ec       	ldi	r20, 0xC8	; 200
    b3d4:	50 e0       	ldi	r21, 0x00	; 0
    b3d6:	60 ea       	ldi	r22, 0xA0	; 160
    b3d8:	70 e0       	ldi	r23, 0x00	; 0
    b3da:	8d 2d       	mov	r24, r13
    b3dc:	9b 2d       	mov	r25, r11
    b3de:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    b3e2:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    b3e6:	8e 7f       	andi	r24, 0xFE	; 254
    b3e8:	6a c0       	rjmp	.+212    	; 0xb4be <setup+0x1966>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
    b3ea:	66 e3       	ldi	r22, 0x36	; 54
    b3ec:	78 e2       	ldi	r23, 0x28	; 40
    b3ee:	8d 2d       	mov	r24, r13
    b3f0:	9b 2d       	mov	r25, r11
    b3f2:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3597
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    b3f6:	ee 24       	eor	r14, r14
    b3f8:	ea 94       	dec	r14
    b3fa:	fe 2c       	mov	r15, r14
    b3fc:	00 e0       	ldi	r16, 0x00	; 0
    b3fe:	18 ef       	ldi	r17, 0xF8	; 248
    b400:	21 e0       	ldi	r18, 0x01	; 1
    b402:	48 ec       	ldi	r20, 0xC8	; 200
    b404:	50 e0       	ldi	r21, 0x00	; 0
    b406:	60 ea       	ldi	r22, 0xA0	; 160
    b408:	70 e0       	ldi	r23, 0x00	; 0
    b40a:	8d 2d       	mov	r24, r13
    b40c:	9b 2d       	mov	r25, r11
    b40e:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    b412:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    b416:	81 60       	ori	r24, 0x01	; 1
    b418:	52 c0       	rjmp	.+164    	; 0xb4be <setup+0x1966>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    b41a:	25 e0       	ldi	r18, 0x05	; 5
    b41c:	a2 16       	cp	r10, r18
    b41e:	09 f4       	brne	.+2      	; 0xb422 <setup+0x18ca>
    b420:	9a cb       	rjmp	.-2252   	; 0xab56 <setup+0xffe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3434
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    b422:	36 e0       	ldi	r19, 0x06	; 6
    b424:	a3 16       	cp	r10, r19
    b426:	09 f4       	brne	.+2      	; 0xb42a <setup+0x18d2>
    b428:	b9 cc       	rjmp	.-1678   	; 0xad9c <setup+0x1244>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    b42a:	87 e0       	ldi	r24, 0x07	; 7
    b42c:	a8 12       	cpse	r10, r24
    b42e:	10 cd       	rjmp	.-1504   	; 0xae50 <setup+0x12f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
    {
      strcpy_P(str1, text_onewire_rozhrani);
    b430:	68 e9       	ldi	r22, 0x98	; 152
    b432:	77 e2       	ldi	r23, 0x27	; 39
    b434:	8d 2d       	mov	r24, r13
    b436:	9b 2d       	mov	r25, r11
    b438:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b43c:	ee 24       	eor	r14, r14
    b43e:	ea 94       	dec	r14
    b440:	fe 2c       	mov	r15, r14
    b442:	00 ee       	ldi	r16, 0xE0	; 224
    b444:	17 e0       	ldi	r17, 0x07	; 7
    b446:	21 e0       	ldi	r18, 0x01	; 1
    b448:	48 e7       	ldi	r20, 0x78	; 120
    b44a:	50 e0       	ldi	r21, 0x00	; 0
    b44c:	6e e1       	ldi	r22, 0x1E	; 30
    b44e:	70 e0       	ldi	r23, 0x00	; 0
    b450:	8d 2d       	mov	r24, r13
    b452:	9b 2d       	mov	r25, r11
    b454:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
      ds2482_address[0].i2c_addr = 0b0011000;
    b458:	88 e1       	ldi	r24, 0x18	; 24
    b45a:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3447
      ds2482_address[0].HWwirenum = 0;
    b45e:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <ds2482_address+0x1>
    b462:	eb e2       	ldi	r30, 0x2B	; 43
    b464:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3451
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    b466:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3452
        status_tds18s20[idx].period_now = 0;
    b468:	14 8e       	std	Z+28, r1	; 0x1c
    b46a:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3449
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    b46c:	ba e0       	ldi	r27, 0x0A	; 10
    b46e:	ef 3d       	cpi	r30, 0xDF	; 223
    b470:	fb 07       	cpc	r31, r27
    b472:	c9 f7       	brne	.-14     	; 0xb466 <setup+0x190e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b474:	4a e0       	ldi	r20, 0x0A	; 10
    b476:	be 01       	movw	r22, r28
    b478:	6e 50       	subi	r22, 0x0E	; 14
    b47a:	7f 4f       	sbci	r23, 0xFF	; 255
    b47c:	88 e1       	ldi	r24, 0x18	; 24
    b47e:	90 e0       	ldi	r25, 0x00	; 0
    b480:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    b484:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <ds2482_address>
    b488:	0e 94 b4 7e 	call	0xfd68	; 0xfd68 <ds2482reset(unsigned char)>
    b48c:	81 11       	cpse	r24, r1
    b48e:	c8 cc       	rjmp	.-1648   	; 0xae20 <setup+0x12c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3457
      {
        strcpy_P(str1, text_ok);
    b490:	65 ed       	ldi	r22, 0xD5	; 213
    b492:	77 e2       	ldi	r23, 0x27	; 39
    b494:	8d 2d       	mov	r24, r13
    b496:	9b 2d       	mov	r25, r11
    b498:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b49c:	ee 24       	eor	r14, r14
    b49e:	ea 94       	dec	r14
    b4a0:	fe 2c       	mov	r15, r14
    b4a2:	00 ee       	ldi	r16, 0xE0	; 224
    b4a4:	17 e0       	ldi	r17, 0x07	; 7
    b4a6:	21 e0       	ldi	r18, 0x01	; 1
    b4a8:	48 e7       	ldi	r20, 0x78	; 120
    b4aa:	50 e0       	ldi	r21, 0x00	; 0
    b4ac:	60 ea       	ldi	r22, 0xA0	; 160
    b4ae:	70 e0       	ldi	r23, 0x00	; 0
    b4b0:	8d 2d       	mov	r24, r13
    b4b2:	9b 2d       	mov	r25, r11
    b4b4:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    b4b8:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    b4bc:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    b4be:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <selftest_data>
    b4c2:	33 cc       	rjmp	.-1946   	; 0xad2a <setup+0x11d2>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    b4c4:	9a e0       	ldi	r25, 0x0A	; 10
    b4c6:	a9 12       	cpse	r10, r25
    b4c8:	0e ce       	rjmp	.-996    	; 0xb0e6 <setup+0x158e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    b4ca:	6b e6       	ldi	r22, 0x6B	; 107
    b4cc:	77 e2       	ldi	r23, 0x27	; 39
    b4ce:	c1 01       	movw	r24, r2
    b4d0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3503
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b4d4:	ee 24       	eor	r14, r14
    b4d6:	ea 94       	dec	r14
    b4d8:	fe 2c       	mov	r15, r14
    b4da:	00 ee       	ldi	r16, 0xE0	; 224
    b4dc:	17 e0       	ldi	r17, 0x07	; 7
    b4de:	21 e0       	ldi	r18, 0x01	; 1
    b4e0:	46 e9       	ldi	r20, 0x96	; 150
    b4e2:	50 e0       	ldi	r21, 0x00	; 0
    b4e4:	6e e1       	ldi	r22, 0x1E	; 30
    b4e6:	70 e0       	ldi	r23, 0x00	; 0
    b4e8:	c1 01       	movw	r24, r2
    b4ea:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3504
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    b4ee:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <device+0x24>
    b4f2:	90 91 53 0c 	lds	r25, 0x0C53	; 0x800c53 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    b4f6:	20 91 51 0c 	lds	r18, 0x0C51	; 0x800c51 <device+0x23>
    b4fa:	30 91 50 0c 	lds	r19, 0x0C50	; 0x800c50 <device+0x22>
    b4fe:	40 91 4f 0c 	lds	r20, 0x0C4F	; 0x800c4f <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    b502:	50 91 4e 0c 	lds	r21, 0x0C4E	; 0x800c4e <device+0x20>
    b506:	50 93 32 10 	sts	0x1032, r21	; 0x801032 <mqtt_client+0x211>
    b50a:	40 93 33 10 	sts	0x1033, r20	; 0x801033 <mqtt_client+0x212>
    b50e:	30 93 34 10 	sts	0x1034, r19	; 0x801034 <mqtt_client+0x213>
    b512:	20 93 35 10 	sts	0x1035, r18	; 0x801035 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    b516:	90 93 39 10 	sts	0x1039, r25	; 0x801039 <mqtt_client+0x218>
    b51a:	80 93 38 10 	sts	0x1038, r24	; 0x801038 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    b51e:	10 92 37 10 	sts	0x1037, r1	; 0x801037 <mqtt_client+0x216>
    b522:	10 92 36 10 	sts	0x1036, r1	; 0x801036 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    b526:	86 e7       	ldi	r24, 0x76	; 118
    b528:	9d e5       	ldi	r25, 0x5D	; 93
    b52a:	90 93 2f 10 	sts	0x102F, r25	; 0x80102f <mqtt_client+0x20e>
    b52e:	80 93 2e 10 	sts	0x102E, r24	; 0x80102e <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    b532:	8c e5       	ldi	r24, 0x5C	; 92
    b534:	97 e2       	ldi	r25, 0x27	; 39
    b536:	90 93 77 0b 	sts	0x0B77, r25	; 0x800b77 <header_out+0x1>
    b53a:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3507
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    b53e:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    b542:	2b 01       	movw	r4, r22
    b544:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
      while ((millis() - milis) < 3000 )
    b546:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    b54a:	64 19       	sub	r22, r4
    b54c:	75 09       	sbc	r23, r5
    b54e:	86 09       	sbc	r24, r6
    b550:	97 09       	sbc	r25, r7
    b552:	68 3b       	cpi	r22, 0xB8	; 184
    b554:	7b 40       	sbci	r23, 0x0B	; 11
    b556:	81 05       	cpc	r24, r1
    b558:	91 05       	cpc	r25, r1
    b55a:	58 f4       	brcc	.+22     	; 0xb572 <setup+0x1a1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
      {
        mqtt_client.loop();
    b55c:	0e 94 f9 80 	call	0x101f2	; 0x101f2 <PubSubClient::loop() [clone .constprop.89]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
        if (mqtt_reconnect() == 0)
    b560:	0e 94 9b 4b 	call	0x9736	; 0x9736 <mqtt_reconnect()>
    b564:	90 91 df 0a 	lds	r25, 0x0ADF	; 0x800adf <selftest_data>
    b568:	81 11       	cpse	r24, r1
    b56a:	ad cd       	rjmp	.-1190   	; 0xb0c6 <setup+0x156e>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    b56c:	9f 7d       	andi	r25, 0xDF	; 223
    b56e:	90 93 df 0a 	sts	0x0ADF, r25	; 0x800adf <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    b572:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    b576:	85 ff       	sbrs	r24, 5
    b578:	aa cd       	rjmp	.-1196   	; 0xb0ce <setup+0x1576>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
      {
        strcpy_P(str1, text_err);
    b57a:	66 e3       	ldi	r22, 0x36	; 54
    b57c:	78 e2       	ldi	r23, 0x28	; 40
    b57e:	8d 2d       	mov	r24, r13
    b580:	9b 2d       	mov	r25, r11
    b582:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    b586:	ee 24       	eor	r14, r14
    b588:	ea 94       	dec	r14
    b58a:	fe 2c       	mov	r15, r14
    b58c:	00 e0       	ldi	r16, 0x00	; 0
    b58e:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b590:	21 e0       	ldi	r18, 0x01	; 1
    b592:	46 e9       	ldi	r20, 0x96	; 150
    b594:	50 e0       	ldi	r21, 0x00	; 0
    b596:	f9 cc       	rjmp	.-1550   	; 0xaf8a <setup+0x1432>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3548
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    b598:	ad e0       	ldi	r26, 0x0D	; 13
    b59a:	aa 12       	cpse	r10, r26
    b59c:	0c 94 54 51 	jmp	0xa2a8	; 0xa2a8 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
    {
      strcpy_P(str1, text_pid_regulator);
    b5a0:	6f e2       	ldi	r22, 0x2F	; 47
    b5a2:	77 e2       	ldi	r23, 0x27	; 39
    b5a4:	8d 2d       	mov	r24, r13
    b5a6:	9b 2d       	mov	r25, r11
    b5a8:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3551
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    b5ac:	ee 24       	eor	r14, r14
    b5ae:	ea 94       	dec	r14
    b5b0:	fe 2c       	mov	r15, r14
    b5b2:	00 ee       	ldi	r16, 0xE0	; 224
    b5b4:	17 e0       	ldi	r17, 0x07	; 7
    b5b6:	21 e0       	ldi	r18, 0x01	; 1
    b5b8:	44 eb       	ldi	r20, 0xB4	; 180
    b5ba:	50 e0       	ldi	r21, 0x00	; 0
    b5bc:	6e e1       	ldi	r22, 0x1E	; 30
    b5be:	70 e0       	ldi	r23, 0x00	; 0
    b5c0:	8d 2d       	mov	r24, r13
    b5c2:	9b 2d       	mov	r25, r11
    b5c4:	0e 94 71 72 	call	0xe4e2	; 0xe4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>
    b5c8:	a9 e9       	ldi	r26, 0x99	; 153
    b5ca:	b8 e0       	ldi	r27, 0x08	; 8
    b5cc:	ce 5b       	subi	r28, 0xBE	; 190
    b5ce:	de 4f       	sbci	r29, 0xFE	; 254
    b5d0:	b9 83       	std	Y+1, r27	; 0x01
    b5d2:	a8 83       	st	Y, r26
    b5d4:	c2 54       	subi	r28, 0x42	; 66
    b5d6:	d1 40       	sbci	r29, 0x01	; 1
    b5d8:	e5 e8       	ldi	r30, 0x85	; 133
    b5da:	f8 e0       	ldi	r31, 0x08	; 8
    b5dc:	c4 5c       	subi	r28, 0xC4	; 196
    b5de:	de 4f       	sbci	r29, 0xFE	; 254
    b5e0:	f9 83       	std	Y+1, r31	; 0x01
    b5e2:	e8 83       	st	Y, r30
    b5e4:	cc 53       	subi	r28, 0x3C	; 60
    b5e6:	d1 40       	sbci	r29, 0x01	; 1
    b5e8:	fd ea       	ldi	r31, 0xAD	; 173
    b5ea:	ef 2e       	mov	r14, r31
    b5ec:	f8 e0       	ldi	r31, 0x08	; 8
    b5ee:	ff 2e       	mov	r15, r31
    b5f0:	91 2c       	mov	r9, r1
    b5f2:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    b5f4:	cc 24       	eor	r12, r12
    b5f6:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    b5f8:	8c e3       	ldi	r24, 0x3C	; 60
    b5fa:	90 e0       	ldi	r25, 0x00	; 0
    b5fc:	0e 94 b5 9c 	call	0x1396a	; 0x1396a <malloc>
    b600:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    b602:	ce 5b       	subi	r28, 0xBE	; 190
    b604:	de 4f       	sbci	r29, 0xFE	; 254
    b606:	e8 81       	ld	r30, Y
    b608:	f9 81       	ldd	r31, Y+1	; 0x01
    b60a:	c2 54       	subi	r28, 0x42	; 66
    b60c:	d1 40       	sbci	r29, 0x01	; 1
    b60e:	dc 01       	movw	r26, r24
    b610:	5f 96       	adiw	r26, 0x1f	; 31
    b612:	fc 93       	st	X, r31
    b614:	ee 93       	st	-X, r30
    b616:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    b618:	c4 5c       	subi	r28, 0xC4	; 196
    b61a:	de 4f       	sbci	r29, 0xFE	; 254
    b61c:	28 81       	ld	r18, Y
    b61e:	39 81       	ldd	r19, Y+1	; 0x01
    b620:	cc 53       	subi	r28, 0x3C	; 60
    b622:	d1 40       	sbci	r29, 0x01	; 1
    b624:	5d 96       	adiw	r26, 0x1d	; 29
    b626:	3c 93       	st	X, r19
    b628:	2e 93       	st	-X, r18
    b62a:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    b62c:	91 96       	adiw	r26, 0x21	; 33
    b62e:	fc 92       	st	X, r15
    b630:	ee 92       	st	-X, r14
    b632:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    b634:	da 96       	adiw	r26, 0x3a	; 58
    b636:	1c 92       	st	X, r1
    b638:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    b63a:	d2 96       	adiw	r26, 0x32	; 50
    b63c:	1d 92       	st	X+, r1
    b63e:	1d 92       	st	X+, r1
    b640:	1d 92       	st	X+, r1
    b642:	1c 92       	st	X, r1
    b644:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    b646:	80 e0       	ldi	r24, 0x00	; 0
    b648:	90 e0       	ldi	r25, 0x00	; 0
    b64a:	af e7       	ldi	r26, 0x7F	; 127
    b64c:	b3 e4       	ldi	r27, 0x43	; 67
    b64e:	f8 01       	movw	r30, r16
    b650:	86 ab       	std	Z+54, r24	; 0x36
    b652:	97 ab       	std	Z+55, r25	; 0x37
    b654:	a0 af       	std	Z+56, r26	; 0x38
    b656:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    b658:	84 e6       	ldi	r24, 0x64	; 100
    b65a:	90 e0       	ldi	r25, 0x00	; 0
    b65c:	a0 e0       	ldi	r26, 0x00	; 0
    b65e:	b0 e0       	ldi	r27, 0x00	; 0
    b660:	86 a7       	std	Z+46, r24	; 0x2e
    b662:	97 a7       	std	Z+47, r25	; 0x2f
    b664:	a0 ab       	std	Z+48, r26	; 0x30
    b666:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    b668:	11 8e       	std	Z+25, r1	; 0x19
    b66a:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    b66c:	21 e0       	ldi	r18, 0x01	; 1
    b66e:	30 e0       	ldi	r19, 0x00	; 0
    b670:	33 8f       	std	Z+27, r19	; 0x1b
    b672:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    b674:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    b676:	80 e0       	ldi	r24, 0x00	; 0
    b678:	90 e0       	ldi	r25, 0x00	; 0
    b67a:	a0 e0       	ldi	r26, 0x00	; 0
    b67c:	b0 e4       	ldi	r27, 0x40	; 64
    b67e:	80 83       	st	Z, r24
    b680:	91 83       	std	Z+1, r25	; 0x01
    b682:	a2 83       	std	Z+2, r26	; 0x02
    b684:	b3 83       	std	Z+3, r27	; 0x03
    b686:	80 e0       	ldi	r24, 0x00	; 0
    b688:	90 e0       	ldi	r25, 0x00	; 0
    b68a:	a0 ea       	ldi	r26, 0xA0	; 160
    b68c:	b0 e4       	ldi	r27, 0x40	; 64
    b68e:	84 83       	std	Z+4, r24	; 0x04
    b690:	95 83       	std	Z+5, r25	; 0x05
    b692:	a6 83       	std	Z+6, r26	; 0x06
    b694:	b7 83       	std	Z+7, r27	; 0x07
    b696:	80 e0       	ldi	r24, 0x00	; 0
    b698:	90 e0       	ldi	r25, 0x00	; 0
    b69a:	a0 e8       	ldi	r26, 0x80	; 128
    b69c:	bf e3       	ldi	r27, 0x3F	; 63
    b69e:	80 87       	std	Z+8, r24	; 0x08
    b6a0:	91 87       	std	Z+9, r25	; 0x09
    b6a2:	a2 87       	std	Z+10, r26	; 0x0a
    b6a4:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    b6a6:	80 e0       	ldi	r24, 0x00	; 0
    b6a8:	90 e0       	ldi	r25, 0x00	; 0
    b6aa:	a0 e0       	ldi	r26, 0x00	; 0
    b6ac:	b0 e4       	ldi	r27, 0x40	; 64
    b6ae:	84 87       	std	Z+12, r24	; 0x0c
    b6b0:	95 87       	std	Z+13, r25	; 0x0d
    b6b2:	a6 87       	std	Z+14, r26	; 0x0e
    b6b4:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    b6b6:	80 e0       	ldi	r24, 0x00	; 0
    b6b8:	90 e0       	ldi	r25, 0x00	; 0
    b6ba:	a0 e0       	ldi	r26, 0x00	; 0
    b6bc:	bf e3       	ldi	r27, 0x3F	; 63
    b6be:	80 8b       	std	Z+16, r24	; 0x10
    b6c0:	91 8b       	std	Z+17, r25	; 0x11
    b6c2:	a2 8b       	std	Z+18, r26	; 0x12
    b6c4:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    b6c6:	80 e0       	ldi	r24, 0x00	; 0
    b6c8:	90 e0       	ldi	r25, 0x00	; 0
    b6ca:	a0 e2       	ldi	r26, 0x20	; 32
    b6cc:	b1 e4       	ldi	r27, 0x41	; 65
    b6ce:	84 8b       	std	Z+20, r24	; 0x14
    b6d0:	95 8b       	std	Z+21, r25	; 0x15
    b6d2:	a6 8b       	std	Z+22, r26	; 0x16
    b6d4:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    b6d6:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    b6da:	28 ee       	ldi	r18, 0xE8	; 232
    b6dc:	33 e0       	ldi	r19, 0x03	; 3
    b6de:	40 e0       	ldi	r20, 0x00	; 0
    b6e0:	50 e0       	ldi	r21, 0x00	; 0
    b6e2:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    b6e6:	f8 01       	movw	r30, r16
    b6e8:	86 a5       	ldd	r24, Z+46	; 0x2e
    b6ea:	97 a5       	ldd	r25, Z+47	; 0x2f
    b6ec:	a0 a9       	ldd	r26, Z+48	; 0x30
    b6ee:	b1 a9       	ldd	r27, Z+49	; 0x31
    b6f0:	28 1b       	sub	r18, r24
    b6f2:	39 0b       	sbc	r19, r25
    b6f4:	4a 0b       	sbc	r20, r26
    b6f6:	5b 0b       	sbc	r21, r27
    b6f8:	d8 01       	movw	r26, r16
    b6fa:	22 a3       	std	Z+34, r18	; 0x22
    b6fc:	33 a3       	std	Z+35, r19	; 0x23
    b6fe:	44 a3       	std	Z+36, r20	; 0x24
    b700:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    b702:	e0 91 2c 0c 	lds	r30, 0x0C2C	; 0x800c2c <array_pids>
    b706:	f0 91 2d 0c 	lds	r31, 0x0C2D	; 0x800c2d <array_pids+0x1>
    b70a:	e8 0d       	add	r30, r8
    b70c:	f9 1d       	adc	r31, r9
    b70e:	11 83       	std	Z+1, r17	; 0x01
    b710:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    b712:	da 96       	adiw	r26, 0x3a	; 58
    b714:	8c 91       	ld	r24, X
    b716:	da 97       	sbiw	r26, 0x3a	; 58
    b718:	81 11       	cpse	r24, r1
    b71a:	20 cd       	rjmp	.-1472   	; 0xb15c <setup+0x1604>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    b71c:	5e 96       	adiw	r26, 0x1e	; 30
    b71e:	ed 91       	ld	r30, X+
    b720:	fc 91       	ld	r31, X
    b722:	40 80       	ld	r4, Z
    b724:	51 80       	ldd	r5, Z+1	; 0x01
    b726:	62 80       	ldd	r6, Z+2	; 0x02
    b728:	73 80       	ldd	r7, Z+3	; 0x03
    b72a:	f8 01       	movw	r30, r16
    b72c:	46 a2       	std	Z+38, r4	; 0x26
    b72e:	57 a2       	std	Z+39, r5	; 0x27
    b730:	60 a6       	std	Z+40, r6	; 0x28
    b732:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    b734:	04 8c       	ldd	r0, Z+28	; 0x1c
    b736:	f5 8d       	ldd	r31, Z+29	; 0x1d
    b738:	e0 2d       	mov	r30, r0
    b73a:	80 81       	ld	r24, Z
    b73c:	91 81       	ldd	r25, Z+1	; 0x01
    b73e:	a2 81       	ldd	r26, Z+2	; 0x02
    b740:	b3 81       	ldd	r27, Z+3	; 0x03
    b742:	f8 01       	movw	r30, r16
    b744:	82 a7       	std	Z+42, r24	; 0x2a
    b746:	93 a7       	std	Z+43, r25	; 0x2b
    b748:	a4 a7       	std	Z+44, r26	; 0x2c
    b74a:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    b74c:	86 a9       	ldd	r24, Z+54	; 0x36
    b74e:	97 a9       	ldd	r25, Z+55	; 0x37
    b750:	a0 ad       	ldd	r26, Z+56	; 0x38
    b752:	b1 ad       	ldd	r27, Z+57	; 0x39
    b754:	c8 5c       	subi	r28, 0xC8	; 200
    b756:	de 4f       	sbci	r29, 0xFE	; 254
    b758:	88 83       	st	Y, r24
    b75a:	99 83       	std	Y+1, r25	; 0x01
    b75c:	aa 83       	std	Y+2, r26	; 0x02
    b75e:	bb 83       	std	Y+3, r27	; 0x03
    b760:	c8 53       	subi	r28, 0x38	; 56
    b762:	d1 40       	sbci	r29, 0x01	; 1
    b764:	9c 01       	movw	r18, r24
    b766:	ad 01       	movw	r20, r26
    b768:	c3 01       	movw	r24, r6
    b76a:	b2 01       	movw	r22, r4
    b76c:	0e 94 c8 a3 	call	0x14790	; 0x14790 <__gesf2>
    b770:	18 16       	cp	r1, r24
    b772:	0c f0       	brlt	.+2      	; 0xb776 <setup+0x1c1e>
    b774:	dc cc       	rjmp	.-1608   	; 0xb12e <setup+0x15d6>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    b776:	c8 5c       	subi	r28, 0xC8	; 200
    b778:	de 4f       	sbci	r29, 0xFE	; 254
    b77a:	88 81       	ld	r24, Y
    b77c:	99 81       	ldd	r25, Y+1	; 0x01
    b77e:	aa 81       	ldd	r26, Y+2	; 0x02
    b780:	bb 81       	ldd	r27, Y+3	; 0x03
    b782:	c8 53       	subi	r28, 0x38	; 56
    b784:	d1 40       	sbci	r29, 0x01	; 1
    b786:	f8 01       	movw	r30, r16
    b788:	86 a3       	std	Z+38, r24	; 0x26
    b78a:	97 a3       	std	Z+39, r25	; 0x27
    b78c:	a0 a7       	std	Z+40, r26	; 0x28
    b78e:	b1 a7       	std	Z+41, r27	; 0x29
    b790:	e5 cc       	rjmp	.-1590   	; 0xb15c <setup+0x1604>

0000b792 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1748
  }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    b792:	cf 93       	push	r28
    b794:	df 93       	push	r29
    b796:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1749
  *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b798:	24 e1       	ldi	r18, 0x14	; 20
    b79a:	82 9f       	mul	r24, r18
    b79c:	c0 01       	movw	r24, r0
    b79e:	11 24       	eor	r1, r1
    b7a0:	83 54       	subi	r24, 0x43	; 67
    b7a2:	9a 4f       	sbci	r25, 0xFA	; 250
    b7a4:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    b7a8:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1750
}
    b7aa:	df 91       	pop	r29
    b7ac:	cf 91       	pop	r28
    b7ae:	08 95       	ret

0000b7b0 <click_rtds_setting_sensor(unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
/*
 *  args1 - parametr z globalniho nastaveni tlacitek
 *  loop_idx - polozka z menu
 */
void click_rtds_setting_sensor(uint8_t args1, uint8_t loop_idx)
{
    b7b0:	1f 93       	push	r17
    b7b2:	cf 93       	push	r28
    b7b4:	df 93       	push	r29
    b7b6:	1f 92       	push	r1
    b7b8:	cd b7       	in	r28, 0x3d	; 61
    b7ba:	de b7       	in	r29, 0x3e	; 62
    b7bc:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4254
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  printf("set rtds %d %d\n", args1, loop_idx);
    b7be:	1f 92       	push	r1
    b7c0:	6f 93       	push	r22
    b7c2:	1f 92       	push	r1
    b7c4:	8f 93       	push	r24
    b7c6:	89 e3       	ldi	r24, 0x39	; 57
    b7c8:	94 e0       	ldi	r25, 0x04	; 4
    b7ca:	9f 93       	push	r25
    b7cc:	8f 93       	push	r24
    b7ce:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4255
  remote_tds_get_active(loop_idx, &active);
    b7d2:	be 01       	movw	r22, r28
    b7d4:	6f 5f       	subi	r22, 0xFF	; 255
    b7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7d8:	81 2f       	mov	r24, r17
    b7da:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4257

  if (active == 1)
    b7de:	0f 90       	pop	r0
    b7e0:	0f 90       	pop	r0
    b7e2:	0f 90       	pop	r0
    b7e4:	0f 90       	pop	r0
    b7e6:	0f 90       	pop	r0
    b7e8:	0f 90       	pop	r0
    b7ea:	89 81       	ldd	r24, Y+1	; 0x01
    b7ec:	81 30       	cpi	r24, 0x01	; 1
    b7ee:	29 f4       	brne	.+10     	; 0xb7fa <click_rtds_setting_sensor(unsigned char, unsigned char)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4259
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL);
    b7f0:	87 e0       	ldi	r24, 0x07	; 7
    b7f2:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4260
    menu_rtds_args = loop_idx;
    b7f6:	10 93 03 09 	sts	0x0903, r17	; 0x800903 <menu_rtds_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  }

}
    b7fa:	0f 90       	pop	r0
    b7fc:	df 91       	pop	r29
    b7fe:	cf 91       	pop	r28
    b800:	1f 91       	pop	r17
    b802:	08 95       	ret

0000b804 <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4208
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    b804:	1f 93       	push	r17
    b806:	cf 93       	push	r28
    b808:	df 93       	push	r29
    b80a:	00 d0       	rcall	.+0      	; 0xb80c <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    b80c:	1f 92       	push	r1
    b80e:	1f 92       	push	r1
    b810:	cd b7       	in	r28, 0x3d	; 61
    b812:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
///
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b814:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_find_free():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
  {
    remote_tds_get_active(idx, &active);
    b816:	be 01       	movw	r22, r28
    b818:	6f 5f       	subi	r22, 0xFF	; 255
    b81a:	7f 4f       	sbci	r23, 0xFF	; 255
    b81c:	81 2f       	mov	r24, r17
    b81e:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1804
    if (active == 0)
    b822:	89 81       	ldd	r24, Y+1	; 0x01
    b824:	88 23       	and	r24, r24
    b826:	61 f0       	breq	.+24     	; 0xb840 <click_rtds_add_sensor(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
///
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b828:	1f 5f       	subi	r17, 0xFF	; 255
    b82a:	1a 30       	cpi	r17, 0x0A	; 10
    b82c:	a1 f7       	brne	.-24     	; 0xb816 <click_rtds_add_sensor(unsigned char, unsigned char)+0x12>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4220
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
  }

}
    b82e:	0f 90       	pop	r0
    b830:	0f 90       	pop	r0
    b832:	0f 90       	pop	r0
    b834:	0f 90       	pop	r0
    b836:	0f 90       	pop	r0
    b838:	df 91       	pop	r29
    b83a:	cf 91       	pop	r28
    b83c:	1f 91       	pop	r17
    b83e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4214
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    b840:	63 e9       	ldi	r22, 0x93	; 147
    b842:	78 e2       	ldi	r23, 0x28	; 40
    b844:	ce 01       	movw	r24, r28
    b846:	01 96       	adiw	r24, 0x01	; 1
    b848:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4215
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
    b84c:	87 e6       	ldi	r24, 0x67	; 103
    b84e:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b852:	be 01       	movw	r22, r28
    b854:	6f 5f       	subi	r22, 0xFF	; 255
    b856:	7f 4f       	sbci	r23, 0xFF	; 255
    b858:	82 ef       	ldi	r24, 0xF2	; 242
    b85a:	98 e0       	ldi	r25, 0x08	; 8
    b85c:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
  dialog_set_string_max_length = max_length;
    b860:	83 e1       	ldi	r24, 0x13	; 19
    b862:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
  dialog_set_string_args = idx;
    b866:	10 93 02 09 	sts	0x0902, r17	; 0x800902 <dialog_set_string_args>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4217
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
    b86a:	8c e4       	ldi	r24, 0x4C	; 76
    b86c:	9d e5       	ldi	r25, 0x5D	; 93
    b86e:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <dialog_save_variable_function+0x1>
    b872:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <dialog_save_variable_function>
    b876:	db cf       	rjmp	.-74     	; 0xb82e <click_rtds_add_sensor(unsigned char, unsigned char)+0x2a>

0000b878 <get_function_active_rtds_button(unsigned char, unsigned char)>:
_Z31get_function_active_rtds_buttonhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096
}

//args1 - args
//args2 - index polozky menu
uint8_t get_function_active_rtds_button(uint8_t args1, uint8_t args2)
{
    b878:	cf 93       	push	r28
    b87a:	df 93       	push	r29
    b87c:	1f 92       	push	r1
    b87e:	cd b7       	in	r28, 0x3d	; 61
    b880:	de b7       	in	r29, 0x3e	; 62
    b882:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4098
  uint8_t active;
  remote_tds_get_active(args2, &active);
    b884:	be 01       	movw	r22, r28
    b886:	6f 5f       	subi	r22, 0xFF	; 255
    b888:	7f 4f       	sbci	r23, 0xFF	; 255
    b88a:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4100
  return active;
}
    b88e:	89 81       	ldd	r24, Y+1	; 0x01
    b890:	0f 90       	pop	r0
    b892:	df 91       	pop	r29
    b894:	cf 91       	pop	r28
    b896:	08 95       	ret

0000b898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1717
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    b898:	cf 92       	push	r12
    b89a:	df 92       	push	r13
    b89c:	ef 92       	push	r14
    b89e:	ff 92       	push	r15
    b8a0:	0f 93       	push	r16
    b8a2:	1f 93       	push	r17
    b8a4:	cf 93       	push	r28
    b8a6:	df 93       	push	r29
    b8a8:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
  char t;
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
  {
    t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    b8aa:	94 e1       	ldi	r25, 0x14	; 20
    b8ac:	89 9f       	mul	r24, r25
    b8ae:	e0 01       	movw	r28, r0
    b8b0:	11 24       	eor	r1, r1
    b8b2:	8e 01       	movw	r16, r28
    b8b4:	06 55       	subi	r16, 0x56	; 86
    b8b6:	1a 4f       	sbci	r17, 0xFA	; 250
    b8b8:	7a 01       	movw	r14, r20
    b8ba:	c3 54       	subi	r28, 0x43	; 67
    b8bc:	da 4f       	sbci	r29, 0xFA	; 250
    b8be:	c8 01       	movw	r24, r16
    b8c0:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
    name[i] = t;
    b8c4:	f7 01       	movw	r30, r14
    b8c6:	81 93       	st	Z+, r24
    b8c8:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1723
    if (t == 0) break;
    b8ca:	88 23       	and	r24, r24
    b8cc:	29 f0       	breq	.+10     	; 0xb8d8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x40>
    b8ce:	0f 5f       	subi	r16, 0xFF	; 255
    b8d0:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1719
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    b8d2:	0c 17       	cp	r16, r28
    b8d4:	1d 07       	cpc	r17, r29
    b8d6:	99 f7       	brne	.-26     	; 0xb8be <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
  {
    t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    name[i] = t;
    if (t == 0) break;
  }
  *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b8d8:	ce 01       	movw	r24, r28
    b8da:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    b8de:	f6 01       	movw	r30, r12
    b8e0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
}
    b8e2:	df 91       	pop	r29
    b8e4:	cf 91       	pop	r28
    b8e6:	1f 91       	pop	r17
    b8e8:	0f 91       	pop	r16
    b8ea:	ff 90       	pop	r15
    b8ec:	ef 90       	pop	r14
    b8ee:	df 90       	pop	r13
    b8f0:	cf 90       	pop	r12
    b8f2:	08 95       	ret

0000b8f4 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4103
  remote_tds_get_active(args2, &active);
  return active;
}

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b8f4:	cf 92       	push	r12
    b8f6:	df 92       	push	r13
    b8f8:	ef 92       	push	r14
    b8fa:	ff 92       	push	r15
    b8fc:	0f 93       	push	r16
    b8fe:	1f 93       	push	r17
    b900:	cf 93       	push	r28
    b902:	df 93       	push	r29
    b904:	1f 92       	push	r1
    b906:	cd b7       	in	r28, 0x3d	; 61
    b908:	de b7       	in	r29, 0x3e	; 62
    b90a:	18 2f       	mov	r17, r24
    b90c:	c6 2e       	mov	r12, r22
    b90e:	7a 01       	movw	r14, r20
    b910:	02 2f       	mov	r16, r18
    b912:	d3 2e       	mov	r13, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
  uint8_t active;
  strcpy_P(line1, text_not_used);
    b914:	62 e7       	ldi	r22, 0x72	; 114
    b916:	78 e2       	ldi	r23, 0x28	; 40
    b918:	ca 01       	movw	r24, r20
    b91a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4106
  sprintf(line2, "%d %d", args1, args2);
    b91e:	1f 92       	push	r1
    b920:	cf 92       	push	r12
    b922:	1f 92       	push	r1
    b924:	1f 93       	push	r17
    b926:	89 e4       	ldi	r24, 0x49	; 73
    b928:	94 e0       	ldi	r25, 0x04	; 4
    b92a:	9f 93       	push	r25
    b92c:	8f 93       	push	r24
    b92e:	df 92       	push	r13
    b930:	0f 93       	push	r16
    b932:	0e 94 27 a5 	call	0x14a4e	; 0x14a4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
  remote_tds_get_active(args1, &active);
    b936:	be 01       	movw	r22, r28
    b938:	6f 5f       	subi	r22, 0xFF	; 255
    b93a:	7f 4f       	sbci	r23, 0xFF	; 255
    b93c:	81 2f       	mov	r24, r17
    b93e:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4108
  if (active == 1)
    b942:	0f b6       	in	r0, 0x3f	; 63
    b944:	f8 94       	cli
    b946:	de bf       	out	0x3e, r29	; 62
    b948:	0f be       	out	0x3f, r0	; 63
    b94a:	cd bf       	out	0x3d, r28	; 61
    b94c:	89 81       	ldd	r24, Y+1	; 0x01
    b94e:	81 30       	cpi	r24, 0x01	; 1
    b950:	39 f4       	brne	.+14     	; 0xb960 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4110
  {
    remote_tds_get_complete(args1, &active, line1);
    b952:	a7 01       	movw	r20, r14
    b954:	be 01       	movw	r22, r28
    b956:	6f 5f       	subi	r22, 0xFF	; 255
    b958:	7f 4f       	sbci	r23, 0xFF	; 255
    b95a:	81 2f       	mov	r24, r17
    b95c:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
  }
}
    b960:	0f 90       	pop	r0
    b962:	df 91       	pop	r29
    b964:	cf 91       	pop	r28
    b966:	1f 91       	pop	r17
    b968:	0f 91       	pop	r16
    b96a:	ff 90       	pop	r15
    b96c:	ef 90       	pop	r14
    b96e:	df 90       	pop	r13
    b970:	cf 90       	pop	r12
    b972:	08 95       	ret

0000b974 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    b974:	1f 93       	push	r17
    b976:	cf 93       	push	r28
    b978:	df 93       	push	r29
    b97a:	00 d0       	rcall	.+0      	; 0xb97c <send_mqtt_remote_tds_status()+0x8>
    b97c:	00 d0       	rcall	.+0      	; 0xb97e <send_mqtt_remote_tds_status()+0xa>
    b97e:	00 d0       	rcall	.+0      	; 0xb980 <send_mqtt_remote_tds_status()+0xc>
    b980:	1f 92       	push	r1
    b982:	1f 92       	push	r1
    b984:	cd b7       	in	r28, 0x3d	; 61
    b986:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
  uint8_t active = 0;
    b988:	1b 86       	std	Y+11, r1	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
  char payload[10];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b98a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
  {
    remote_tds_get_complete(idx, &active, payload);
    b98c:	ae 01       	movw	r20, r28
    b98e:	4f 5f       	subi	r20, 0xFF	; 255
    b990:	5f 4f       	sbci	r21, 0xFF	; 255
    b992:	be 01       	movw	r22, r28
    b994:	65 5f       	subi	r22, 0xF5	; 245
    b996:	7f 4f       	sbci	r23, 0xFF	; 255
    b998:	81 2f       	mov	r24, r17
    b99a:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    b99e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b9a0:	81 30       	cpi	r24, 0x01	; 1
    b9a2:	81 f5       	brne	.+96     	; 0xba04 <send_mqtt_remote_tds_status()+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    b9a4:	9e 01       	movw	r18, r28
    b9a6:	2f 5f       	subi	r18, 0xFF	; 255
    b9a8:	3f 4f       	sbci	r19, 0xFF	; 255
    b9aa:	4f e4       	ldi	r20, 0x4F	; 79
    b9ac:	54 e0       	ldi	r21, 0x04	; 4
    b9ae:	61 2f       	mov	r22, r17
    b9b0:	84 e5       	ldi	r24, 0x54	; 84
    b9b2:	94 e0       	ldi	r25, 0x04	; 4
    b9b4:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
      itoa(active, payload, 10);
    b9b8:	8b 85       	ldd	r24, Y+11	; 0x0b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b9ba:	4a e0       	ldi	r20, 0x0A	; 10
    b9bc:	be 01       	movw	r22, r28
    b9be:	6f 5f       	subi	r22, 0xFF	; 255
    b9c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b9c2:	90 e0       	ldi	r25, 0x00	; 0
    b9c4:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    b9c8:	9e 01       	movw	r18, r28
    b9ca:	2f 5f       	subi	r18, 0xFF	; 255
    b9cc:	3f 4f       	sbci	r19, 0xFF	; 255
    b9ce:	49 e5       	ldi	r20, 0x59	; 89
    b9d0:	54 e0       	ldi	r21, 0x04	; 4
    b9d2:	61 2f       	mov	r22, r17
    b9d4:	84 e5       	ldi	r24, 0x54	; 84
    b9d6:	94 e0       	ldi	r25, 0x04	; 4
    b9d8:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
      /// itoa(remote_tds[idx], payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    b9dc:	9e 01       	movw	r18, r28
    b9de:	2f 5f       	subi	r18, 0xFF	; 255
    b9e0:	3f 4f       	sbci	r19, 0xFF	; 255
    b9e2:	40 e6       	ldi	r20, 0x60	; 96
    b9e4:	54 e0       	ldi	r21, 0x04	; 4
    b9e6:	61 2f       	mov	r22, r17
    b9e8:	84 e5       	ldi	r24, 0x54	; 84
    b9ea:	94 e0       	ldi	r25, 0x04	; 4
    b9ec:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
      /// itoa(remote_tds_last_update[idx], payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    b9f0:	9e 01       	movw	r18, r28
    b9f2:	2f 5f       	subi	r18, 0xFF	; 255
    b9f4:	3f 4f       	sbci	r19, 0xFF	; 255
    b9f6:	45 e6       	ldi	r20, 0x65	; 101
    b9f8:	54 e0       	ldi	r21, 0x04	; 4
    b9fa:	61 2f       	mov	r22, r17
    b9fc:	84 e5       	ldi	r24, 0x54	; 84
    b9fe:	94 e0       	ldi	r25, 0x04	; 4
    ba00:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[10];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ba04:	1f 5f       	subi	r17, 0xFF	; 255
    ba06:	1a 30       	cpi	r17, 0x0A	; 10
    ba08:	09 f6       	brne	.-126    	; 0xb98c <send_mqtt_remote_tds_status()+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      /// itoa(remote_tds_last_update[idx], payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    ba0a:	2b 96       	adiw	r28, 0x0b	; 11
    ba0c:	0f b6       	in	r0, 0x3f	; 63
    ba0e:	f8 94       	cli
    ba10:	de bf       	out	0x3e, r29	; 62
    ba12:	0f be       	out	0x3f, r0	; 63
    ba14:	cd bf       	out	0x3d, r28	; 61
    ba16:	df 91       	pop	r29
    ba18:	cf 91       	pop	r28
    ba1a:	1f 91       	pop	r17
    ba1c:	08 95       	ret

0000ba1e <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1769
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    ba1e:	cf 93       	push	r28
    ba20:	df 93       	push	r29
    ba22:	cd b7       	in	r28, 0x3d	; 61
    ba24:	de b7       	in	r29, 0x3e	; 62
    ba26:	c1 58       	subi	r28, 0x81	; 129
    ba28:	d1 09       	sbc	r29, r1
    ba2a:	0f b6       	in	r0, 0x3f	; 63
    ba2c:	f8 94       	cli
    ba2e:	de bf       	out	0x3e, r29	; 62
    ba30:	0f be       	out	0x3f, r0	; 63
    ba32:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ba34:	cf 57       	subi	r28, 0x7F	; 127
    ba36:	df 4f       	sbci	r29, 0xFF	; 255
    ba38:	18 82       	st	Y, r1
    ba3a:	c1 58       	subi	r28, 0x81	; 129
    ba3c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
  remote_tds_get_complete(idx, &active, tmp1);
    ba3e:	ae 01       	movw	r20, r28
    ba40:	4f 5f       	subi	r20, 0xFF	; 255
    ba42:	5f 4f       	sbci	r21, 0xFF	; 255
    ba44:	be 01       	movw	r22, r28
    ba46:	6f 57       	subi	r22, 0x7F	; 127
    ba48:	7f 4f       	sbci	r23, 0xFF	; 255
    ba4a:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
  if (active == 1)
    ba4e:	cf 57       	subi	r28, 0x7F	; 127
    ba50:	df 4f       	sbci	r29, 0xFF	; 255
    ba52:	88 81       	ld	r24, Y
    ba54:	c1 58       	subi	r28, 0x81	; 129
    ba56:	d0 40       	sbci	r29, 0x00	; 0
    ba58:	81 30       	cpi	r24, 0x01	; 1
    ba5a:	a1 f4       	brne	.+40     	; 0xba84 <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
  {
    strcpy(tmp2, "/rtds/");
    ba5c:	61 e7       	ldi	r22, 0x71	; 113
    ba5e:	74 e0       	ldi	r23, 0x04	; 4
    ba60:	ce 01       	movw	r24, r28
    ba62:	8f 5b       	subi	r24, 0xBF	; 191
    ba64:	9f 4f       	sbci	r25, 0xFF	; 255
    ba66:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
    strcat(tmp2, tmp1);
    ba6a:	be 01       	movw	r22, r28
    ba6c:	6f 5f       	subi	r22, 0xFF	; 255
    ba6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba70:	ce 01       	movw	r24, r28
    ba72:	8f 5b       	subi	r24, 0xBF	; 191
    ba74:	9f 4f       	sbci	r25, 0xFF	; 255
    ba76:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
    mqtt_client.subscribe(tmp2);
    ba7a:	ce 01       	movw	r24, r28
    ba7c:	8f 5b       	subi	r24, 0xBF	; 191
    ba7e:	9f 4f       	sbci	r25, 0xFF	; 255
    ba80:	0e 94 cb 82 	call	0x10596	; 0x10596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
  }
}
    ba84:	cf 57       	subi	r28, 0x7F	; 127
    ba86:	df 4f       	sbci	r29, 0xFF	; 255
    ba88:	0f b6       	in	r0, 0x3f	; 63
    ba8a:	f8 94       	cli
    ba8c:	de bf       	out	0x3e, r29	; 62
    ba8e:	0f be       	out	0x3f, r0	; 63
    ba90:	cd bf       	out	0x3d, r28	; 61
    ba92:	df 91       	pop	r29
    ba94:	cf 91       	pop	r28
    ba96:	08 95       	ret

0000ba98 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4224

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    ba98:	1f 93       	push	r17
    ba9a:	cf 93       	push	r28
    ba9c:	df 93       	push	r29
    ba9e:	cd b7       	in	r28, 0x3d	; 61
    baa0:	de b7       	in	r29, 0x3e	; 62
    baa2:	63 97       	sbiw	r28, 0x13	; 19
    baa4:	0f b6       	in	r0, 0x3f	; 63
    baa6:	f8 94       	cli
    baa8:	de bf       	out	0x3e, r29	; 62
    baaa:	0f be       	out	0x3f, r0	; 63
    baac:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1430
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    baae:	10 91 02 09 	lds	r17, 0x0902	; 0x800902 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    bab2:	62 ef       	ldi	r22, 0xF2	; 242
    bab4:	78 e0       	ldi	r23, 0x08	; 8
    bab6:	ce 01       	movw	r24, r28
    bab8:	01 96       	adiw	r24, 0x01	; 1
    baba:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  if (strlen(name) > 0)
    babe:	89 81       	ldd	r24, Y+1	; 0x01
    bac0:	88 23       	and	r24, r24
    bac2:	51 f0       	breq	.+20     	; 0xbad8 <menu_rtds_create_name(unsigned char, unsigned char)+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4230
  {
    remote_tds_set_complete(idx, 1, name);
    bac4:	ae 01       	movw	r20, r28
    bac6:	4f 5f       	subi	r20, 0xFF	; 255
    bac8:	5f 4f       	sbci	r21, 0xFF	; 255
    baca:	61 e0       	ldi	r22, 0x01	; 1
    bacc:	81 2f       	mov	r24, r17
    bace:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4231
    remote_tds_subscibe_topic(idx);
    bad2:	81 2f       	mov	r24, r17
    bad4:	0e 94 0f 5d 	call	0xba1e	; 0xba1e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4233
  }
}
    bad8:	63 96       	adiw	r28, 0x13	; 19
    bada:	0f b6       	in	r0, 0x3f	; 63
    badc:	f8 94       	cli
    bade:	de bf       	out	0x3e, r29	; 62
    bae0:	0f be       	out	0x3f, r0	; 63
    bae2:	cd bf       	out	0x3d, r28	; 61
    bae4:	df 91       	pop	r29
    bae6:	cf 91       	pop	r28
    bae8:	1f 91       	pop	r17
    baea:	08 95       	ret

0000baec <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1873
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte* payload, unsigned int length)
{
    baec:	2f 92       	push	r2
    baee:	3f 92       	push	r3
    baf0:	4f 92       	push	r4
    baf2:	5f 92       	push	r5
    baf4:	6f 92       	push	r6
    baf6:	7f 92       	push	r7
    baf8:	8f 92       	push	r8
    bafa:	9f 92       	push	r9
    bafc:	af 92       	push	r10
    bafe:	bf 92       	push	r11
    bb00:	cf 92       	push	r12
    bb02:	df 92       	push	r13
    bb04:	ef 92       	push	r14
    bb06:	ff 92       	push	r15
    bb08:	0f 93       	push	r16
    bb0a:	1f 93       	push	r17
    bb0c:	cf 93       	push	r28
    bb0e:	df 93       	push	r29
    bb10:	cd b7       	in	r28, 0x3d	; 61
    bb12:	de b7       	in	r29, 0x3e	; 62
    bb14:	c8 52       	subi	r28, 0x28	; 40
    bb16:	d1 40       	sbci	r29, 0x01	; 1
    bb18:	0f b6       	in	r0, 0x3f	; 63
    bb1a:	f8 94       	cli
    bb1c:	de bf       	out	0x3e, r29	; 62
    bb1e:	0f be       	out	0x3f, r0	; 63
    bb20:	cd bf       	out	0x3d, r28	; 61
    bb22:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    bb24:	1b 82       	std	Y+3, r1	; 0x03
    bb26:	84 ed       	ldi	r24, 0xD4	; 212
    bb28:	93 e0       	ldi	r25, 0x03	; 3
    bb2a:	9d 83       	std	Y+5, r25	; 0x05
    bb2c:	8c 83       	std	Y+4, r24	; 0x04
    bb2e:	89 e3       	ldi	r24, 0x39	; 57
    bb30:	95 e0       	ldi	r25, 0x05	; 5
    bb32:	9f 83       	std	Y+7, r25	; 0x07
    bb34:	8e 83       	std	Y+6, r24	; 0x06
    bb36:	18 86       	std	Y+8, r1	; 0x08
    bb38:	19 86       	std	Y+9, r1	; 0x09
    bb3a:	1a 86       	std	Y+10, r1	; 0x0a
    bb3c:	1b 86       	std	Y+11, r1	; 0x0b
    bb3e:	80 e6       	ldi	r24, 0x60	; 96
    bb40:	9a ee       	ldi	r25, 0xEA	; 234
    bb42:	a0 e0       	ldi	r26, 0x00	; 0
    bb44:	b0 e0       	ldi	r27, 0x00	; 0
    bb46:	8c 87       	std	Y+12, r24	; 0x0c
    bb48:	9d 87       	std	Y+13, r25	; 0x0d
    bb4a:	ae 87       	std	Y+14, r26	; 0x0e
    bb4c:	bf 87       	std	Y+15, r27	; 0x0f
    bb4e:	18 8a       	std	Y+16, r1	; 0x10
    bb50:	19 8a       	std	Y+17, r1	; 0x11
    bb52:	1a 8a       	std	Y+18, r1	; 0x12
    bb54:	1b 8a       	std	Y+19, r1	; 0x13
    bb56:	1c 8a       	std	Y+20, r1	; 0x14
    bb58:	1d 8a       	std	Y+21, r1	; 0x15
    bb5a:	1e 8a       	std	Y+22, r1	; 0x16
    bb5c:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    bb5e:	8e e3       	ldi	r24, 0x3E	; 62
    bb60:	90 e1       	ldi	r25, 0x10	; 16
    bb62:	9a 83       	std	Y+2, r25	; 0x02
    bb64:	89 83       	std	Y+1, r24	; 0x01
    bb66:	e5 ef       	ldi	r30, 0xF5	; 245
    bb68:	fa e0       	ldi	r31, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    bb6a:	80 e0       	ldi	r24, 0x00	; 0
    bb6c:	11 92       	st	Z+, r1
    bb6e:	8f 5f       	subi	r24, 0xFF	; 255
    bb70:	80 38       	cpi	r24, 0x80	; 128
    bb72:	e1 f7       	brne	.-8      	; 0xbb6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1889
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    bb74:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <mqtt_receive_message>
    bb78:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <mqtt_receive_message+0x1>
    bb7c:	01 96       	adiw	r24, 0x01	; 1
    bb7e:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <mqtt_receive_message+0x1>
    bb82:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
  strncpy(my_payload, (char*) payload, length);
    bb86:	85 ef       	ldi	r24, 0xF5	; 245
    bb88:	9a e0       	ldi	r25, 0x0A	; 10
    bb8a:	0e 94 04 a5 	call	0x14a08	; 0x14a08 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    bb8e:	5e 01       	movw	r10, r28
    bb90:	28 ec       	ldi	r18, 0xC8	; 200
    bb92:	a2 0e       	add	r10, r18
    bb94:	b1 1c       	adc	r11, r1
    bb96:	60 e5       	ldi	r22, 0x50	; 80
    bb98:	76 e2       	ldi	r23, 0x26	; 38
    bb9a:	c5 01       	movw	r24, r10
    bb9c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
  if (strcmp(str1, topic) == 0)
    bba0:	b4 01       	movw	r22, r8
    bba2:	c5 01       	movw	r24, r10
    bba4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    bba8:	89 2b       	or	r24, r25
    bbaa:	49 f4       	brne	.+18     	; 0xbbbe <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    bbac:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bbb0:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bbb4:	01 96       	adiw	r24, 0x01	; 1
    bbb6:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bbba:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    bbbe:	67 e6       	ldi	r22, 0x67	; 103
    bbc0:	76 e2       	ldi	r23, 0x26	; 38
    bbc2:	c5 01       	movw	r24, r10
    bbc4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
  if (strcmp(str1, topic) == 0)
    bbc8:	b4 01       	movw	r22, r8
    bbca:	c5 01       	movw	r24, r10
    bbcc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    bbd0:	89 2b       	or	r24, r25
    bbd2:	49 f4       	brne	.+18     	; 0xbbe6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
  {
    mqtt_process_message++;
    bbd4:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bbd8:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bbdc:	01 96       	adiw	r24, 0x01	; 1
    bbde:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bbe2:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1908
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    bbe6:	6e e8       	ldi	r22, 0x8E	; 142
    bbe8:	76 e2       	ldi	r23, 0x26	; 38
    bbea:	c5 01       	movw	r24, r10
    bbec:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
  strcat_P(str1, global_time_set);
    bbf0:	62 e3       	ldi	r22, 0x32	; 50
    bbf2:	76 e2       	ldi	r23, 0x26	; 38
    bbf4:	c5 01       	movw	r24, r10
    bbf6:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
  if (strcmp(str1, topic) == 0)
    bbfa:	b4 01       	movw	r22, r8
    bbfc:	c5 01       	movw	r24, r10
    bbfe:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    bc02:	89 2b       	or	r24, r25
    bc04:	09 f0       	breq	.+2      	; 0xbc08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    bc06:	bb c0       	rjmp	.+374    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1912
  {
    mqtt_process_message++;
    bc08:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bc0c:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bc10:	01 96       	adiw	r24, 0x01	; 1
    bc12:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bc16:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    bc1a:	20 91 9c 0c 	lds	r18, 0x0C9C	; 0x800c9c <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    bc1e:	85 ef       	ldi	r24, 0xF5	; 245
    bc20:	9a e0       	ldi	r25, 0x0A	; 10
    bc22:	89 2b       	or	r24, r25
    bc24:	09 f0       	breq	.+2      	; 0xbc28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    bc26:	3a c2       	rjmp	.+1140   	; 0xc09c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    bc28:	82 ef       	ldi	r24, 0xF2	; 242
    bc2a:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    bc2c:	4d e9       	ldi	r20, 0x9D	; 157
    bc2e:	5c e0       	ldi	r21, 0x0C	; 12
    bc30:	2a 96       	adiw	r28, 0x0a	; 10
    bc32:	5f af       	std	Y+63, r21	; 0x3f
    bc34:	4e af       	std	Y+62, r20	; 0x3e
    bc36:	2a 97       	sbiw	r28, 0x0a	; 10
    bc38:	2c 96       	adiw	r28, 0x0c	; 12
    bc3a:	9f af       	std	Y+63, r25	; 0x3f
    bc3c:	8e af       	std	Y+62, r24	; 0x3e
    bc3e:	2c 97       	sbiw	r28, 0x0c	; 12
    bc40:	85 ef       	ldi	r24, 0xF5	; 245
    bc42:	9a e0       	ldi	r25, 0x0A	; 10
    bc44:	2e 96       	adiw	r28, 0x0e	; 14
    bc46:	9f af       	std	Y+63, r25	; 0x3f
    bc48:	8e af       	std	Y+62, r24	; 0x3e
    bc4a:	2e 97       	sbiw	r28, 0x0e	; 14
    bc4c:	2f 96       	adiw	r28, 0x0f	; 15
    bc4e:	2f af       	std	Y+63, r18	; 0x3f
    bc50:	2f 97       	sbiw	r28, 0x0f	; 15
    bc52:	61 96       	adiw	r28, 0x11	; 17
    bc54:	1f ae       	std	Y+63, r1	; 0x3f
    bc56:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    bc58:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <doc+0x8>
    bc5c:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    bc60:	85 ea       	ldi	r24, 0xA5	; 165
    bc62:	9d e0       	ldi	r25, 0x0D	; 13
    bc64:	89 2b       	or	r24, r25
    bc66:	09 f4       	brne	.+2      	; 0xbc6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    bc68:	1c c2       	rjmp	.+1080   	; 0xc0a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    bc6a:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <doc+0x10a>
    bc6e:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    bc72:	ca 01       	movw	r24, r20
    bc74:	ac 01       	movw	r20, r24
    bc76:	65 ea       	ldi	r22, 0xA5	; 165
    bc78:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    bc7a:	ce 01       	movw	r24, r28
    bc7c:	88 5b       	subi	r24, 0xB8	; 184
    bc7e:	9f 4f       	sbci	r25, 0xFF	; 255
    bc80:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    bc84:	85 ea       	ldi	r24, 0xA5	; 165
    bc86:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    bc88:	05 ea       	ldi	r16, 0xA5	; 165
    bc8a:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    bc8c:	89 2b       	or	r24, r25
    bc8e:	51 f0       	breq	.+20     	; 0xbca4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    bc90:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <doc+0x109>
    bc94:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    bc98:	07 ea       	ldi	r16, 0xA7	; 167
    bc9a:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    bc9c:	09 97       	sbiw	r24, 0x09	; 9
    bc9e:	11 f0       	breq	.+4      	; 0xbca4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    bca0:	10 e0       	ldi	r17, 0x00	; 0
    bca2:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    bca4:	68 e7       	ldi	r22, 0x78	; 120
    bca6:	74 e0       	ldi	r23, 0x04	; 4
    bca8:	c8 01       	movw	r24, r16
    bcaa:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
    bcae:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    bcb0:	89 2b       	or	r24, r25
    bcb2:	09 f4       	brne	.+2      	; 0xbcb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    bcb4:	64 c0       	rjmp	.+200    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bcb6:	6d e7       	ldi	r22, 0x7D	; 125
    bcb8:	74 e0       	ldi	r23, 0x04	; 4
    bcba:	c8 01       	movw	r24, r16
    bcbc:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
    bcc0:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
    bcc2:	89 2b       	or	r24, r25
    bcc4:	09 f4       	brne	.+2      	; 0xbcc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    bcc6:	5b c0       	rjmp	.+182    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bcc8:	63 e8       	ldi	r22, 0x83	; 131
    bcca:	74 e0       	ldi	r23, 0x04	; 4
    bccc:	c8 01       	movw	r24, r16
    bcce:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
    bcd2:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
    bcd4:	89 2b       	or	r24, r25
    bcd6:	09 f4       	brne	.+2      	; 0xbcda <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    bcd8:	52 c0       	rjmp	.+164    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bcda:	68 e8       	ldi	r22, 0x88	; 136
    bcdc:	74 e0       	ldi	r23, 0x04	; 4
    bcde:	c8 01       	movw	r24, r16
    bce0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
    bce4:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
    bce6:	89 2b       	or	r24, r25
    bce8:	09 f4       	brne	.+2      	; 0xbcec <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    bcea:	49 c0       	rjmp	.+146    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bcec:	6f e8       	ldi	r22, 0x8F	; 143
    bcee:	74 e0       	ldi	r23, 0x04	; 4
    bcf0:	c8 01       	movw	r24, r16
    bcf2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
    bcf6:	00 97       	sbiw	r24, 0x00	; 0
    bcf8:	09 f4       	brne	.+2      	; 0xbcfc <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    bcfa:	41 c0       	rjmp	.+130    	; 0xbd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    bcfc:	0e 94 9e 8a 	call	0x1153c	; 0x1153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd00:	38 2e       	mov	r3, r24
    bd02:	c6 01       	movw	r24, r12
    bd04:	0e 94 9e 8a 	call	0x1153c	; 0x1153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd08:	d8 2e       	mov	r13, r24
    bd0a:	c3 01       	movw	r24, r6
    bd0c:	0e 94 9e 8a 	call	0x1153c	; 0x1153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd10:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd12:	66 e9       	ldi	r22, 0x96	; 150
    bd14:	74 e0       	ldi	r23, 0x04	; 4
    bd16:	c8 01       	movw	r24, r16
    bd18:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.20]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    bd1c:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    bd1e:	00 97       	sbiw	r24, 0x00	; 0
    bd20:	19 f0       	breq	.+6      	; 0xbd28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    bd22:	0e 94 9e 8a 	call	0x1153c	; 0x1153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd26:	18 2f       	mov	r17, r24
    bd28:	c2 01       	movw	r24, r4
    bd2a:	0e 94 9e 8a 	call	0x1153c	; 0x1153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd2e:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    bd30:	d7 01       	movw	r26, r14
    bd32:	8d 91       	ld	r24, X+
    bd34:	9c 91       	ld	r25, X
    bd36:	11 97       	sbiw	r26, 0x01	; 1
    bd38:	87 30       	cpi	r24, 0x07	; 7
    bd3a:	91 05       	cpc	r25, r1
    bd3c:	08 f0       	brcs	.+2      	; 0xbd40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    bd3e:	b4 c1       	rjmp	.+872    	; 0xc0a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    bd40:	85 30       	cpi	r24, 0x05	; 5
    bd42:	91 05       	cpc	r25, r1
    bd44:	08 f0       	brcs	.+2      	; 0xbd48 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    bd46:	be c1       	rjmp	.+892    	; 0xc0c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    bd48:	03 97       	sbiw	r24, 0x03	; 3
    bd4a:	08 f0       	brcs	.+2      	; 0xbd4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    bd4c:	cd c1       	rjmp	.+922    	; 0xc0e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    bd4e:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    bd50:	29 96       	adiw	r28, 0x09	; 9
    bd52:	6f af       	std	Y+63, r22	; 0x3f
    bd54:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    bd56:	2a 96       	adiw	r28, 0x0a	; 10
    bd58:	0f af       	std	Y+63, r16	; 0x3f
    bd5a:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bd5c:	2b 96       	adiw	r28, 0x0b	; 11
    bd5e:	1f af       	std	Y+63, r17	; 0x3f
    bd60:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    bd62:	2c 96       	adiw	r28, 0x0c	; 12
    bd64:	cf ae       	std	Y+63, r12	; 0x3f
    bd66:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bd68:	2d 96       	adiw	r28, 0x0d	; 13
    bd6a:	df ae       	std	Y+63, r13	; 0x3f
    bd6c:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bd6e:	2e 96       	adiw	r28, 0x0e	; 14
    bd70:	3f ae       	std	Y+63, r3	; 0x3f
    bd72:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    bd74:	ce 01       	movw	r24, r28
    bd76:	88 5b       	subi	r24, 0xB8	; 184
    bd78:	9f 4f       	sbci	r25, 0xFF	; 255
    bd7a:	0e 94 56 80 	call	0x100ac	; 0x100ac <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    bd7e:	6e e8       	ldi	r22, 0x8E	; 142
    bd80:	76 e2       	ldi	r23, 0x26	; 38
    bd82:	c5 01       	movw	r24, r10
    bd84:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
  strcat_P(str1, global_time_ntp);
    bd88:	62 e2       	ldi	r22, 0x22	; 34
    bd8a:	76 e2       	ldi	r23, 0x26	; 38
    bd8c:	c5 01       	movw	r24, r10
    bd8e:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
  if (strcmp(str1, topic) == 0)
    bd92:	b4 01       	movw	r22, r8
    bd94:	c5 01       	movw	r24, r10
    bd96:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    bd9a:	89 2b       	or	r24, r25
    bd9c:	09 f0       	breq	.+2      	; 0xbda0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    bd9e:	e5 c0       	rjmp	.+458    	; 0xbf6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
  {
    mqtt_process_message++;
    bda0:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bda4:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bda8:	01 96       	adiw	r24, 0x01	; 1
    bdaa:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bdae:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    bdb2:	81 e0       	ldi	r24, 0x01	; 1
    bdb4:	90 e0       	ldi	r25, 0x00	; 0
    bdb6:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    bdba:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    bdbc:	7e 01       	movw	r14, r28
    bdbe:	28 e4       	ldi	r18, 0x48	; 72
    bdc0:	e2 0e       	add	r14, r18
    bdc2:	f1 1c       	adc	r15, r1
    bdc4:	d7 01       	movw	r26, r14
    bdc6:	1c 92       	st	X, r1
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    bdc8:	0a e0       	ldi	r16, 0x0A	; 10
    bdca:	24 e0       	ldi	r18, 0x04	; 4
    bdcc:	4c e7       	ldi	r20, 0x7C	; 124
    bdce:	5c e0       	ldi	r21, 0x0C	; 12
    bdd0:	6e e2       	ldi	r22, 0x2E	; 46
    bdd2:	c7 01       	movw	r24, r14
    bdd4:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    bdd8:	ce 01       	movw	r24, r28
    bdda:	01 96       	adiw	r24, 0x01	; 1
    bddc:	0e 94 3a 7c 	call	0xf874	; 0xf874 <NTPClient::begin()>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    bde0:	20 e1       	ldi	r18, 0x10	; 16
    bde2:	3e e0       	ldi	r19, 0x0E	; 14
    bde4:	12 9f       	mul	r17, r18
    bde6:	c0 01       	movw	r24, r0
    bde8:	13 9f       	mul	r17, r19
    bdea:	90 0d       	add	r25, r0
    bdec:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    bdee:	09 2e       	mov	r0, r25
    bdf0:	00 0c       	add	r0, r0
    bdf2:	aa 0b       	sbc	r26, r26
    bdf4:	bb 0b       	sbc	r27, r27
    bdf6:	88 87       	std	Y+8, r24	; 0x08
    bdf8:	99 87       	std	Y+9, r25	; 0x09
    bdfa:	aa 87       	std	Y+10, r26	; 0x0a
    bdfc:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    bdfe:	fd 82       	std	Y+5, r15	; 0x05
    be00:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    be02:	ce 01       	movw	r24, r28
    be04:	01 96       	adiw	r24, 0x01	; 1
    be06:	0e 94 51 7c 	call	0xf8a2	; 0xf8a2 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    be0a:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    be0c:	88 23       	and	r24, r24
    be0e:	09 f4       	brne	.+2      	; 0xbe12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    be10:	9a c0       	rjmp	.+308    	; 0xbf46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    be12:	ce 01       	movw	r24, r28
    be14:	01 96       	adiw	r24, 0x01	; 1
    be16:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    be1a:	1c e3       	ldi	r17, 0x3C	; 60
    be1c:	c1 2e       	mov	r12, r17
    be1e:	d1 2c       	mov	r13, r1
    be20:	e1 2c       	mov	r14, r1
    be22:	f1 2c       	mov	r15, r1
    be24:	a7 01       	movw	r20, r14
    be26:	96 01       	movw	r18, r12
    be28:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    be2c:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    be2e:	ce 01       	movw	r24, r28
    be30:	01 96       	adiw	r24, 0x01	; 1
    be32:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    be36:	00 e1       	ldi	r16, 0x10	; 16
    be38:	40 2e       	mov	r4, r16
    be3a:	0e e0       	ldi	r16, 0x0E	; 14
    be3c:	50 2e       	mov	r5, r16
    be3e:	61 2c       	mov	r6, r1
    be40:	71 2c       	mov	r7, r1
    be42:	a3 01       	movw	r20, r6
    be44:	92 01       	movw	r18, r4
    be46:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    be4a:	a7 01       	movw	r20, r14
    be4c:	96 01       	movw	r18, r12
    be4e:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    be52:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    be54:	ce 01       	movw	r24, r28
    be56:	01 96       	adiw	r24, 0x01	; 1
    be58:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    be5c:	20 e8       	ldi	r18, 0x80	; 128
    be5e:	31 e5       	ldi	r19, 0x51	; 81
    be60:	41 e0       	ldi	r20, 0x01	; 1
    be62:	50 e0       	ldi	r21, 0x00	; 0
    be64:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    be68:	a3 01       	movw	r20, r6
    be6a:	92 01       	movw	r18, r4
    be6c:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    be70:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    be72:	ce 01       	movw	r24, r28
    be74:	01 96       	adiw	r24, 0x01	; 1
    be76:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    be7a:	c8 57       	subi	r28, 0x78	; 120
    be7c:	df 4f       	sbci	r29, 0xFF	; 255
    be7e:	68 83       	st	Y, r22
    be80:	79 83       	std	Y+1, r23	; 0x01
    be82:	8a 83       	std	Y+2, r24	; 0x02
    be84:	9b 83       	std	Y+3, r25	; 0x03
    be86:	c8 58       	subi	r28, 0x88	; 136
    be88:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    be8a:	ce 01       	movw	r24, r28
    be8c:	88 57       	subi	r24, 0x78	; 120
    be8e:	9f 4f       	sbci	r25, 0xFF	; 255
    be90:	0e 94 6e 89 	call	0x112dc	; 0x112dc <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    be94:	fc 01       	movw	r30, r24
    be96:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    be98:	ce 01       	movw	r24, r28
    be9a:	01 96       	adiw	r24, 0x01	; 1
    be9c:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    bea0:	c8 57       	subi	r28, 0x78	; 120
    bea2:	df 4f       	sbci	r29, 0xFF	; 255
    bea4:	68 83       	st	Y, r22
    bea6:	79 83       	std	Y+1, r23	; 0x01
    bea8:	8a 83       	std	Y+2, r24	; 0x02
    beaa:	9b 83       	std	Y+3, r25	; 0x03
    beac:	c8 58       	subi	r28, 0x88	; 136
    beae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    beb0:	ce 01       	movw	r24, r28
    beb2:	88 57       	subi	r24, 0x78	; 120
    beb4:	9f 4f       	sbci	r25, 0xFF	; 255
    beb6:	0e 94 6e 89 	call	0x112dc	; 0x112dc <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    beba:	dc 01       	movw	r26, r24
    bebc:	15 96       	adiw	r26, 0x05	; 5
    bebe:	0c 91       	ld	r16, X
    bec0:	00 2e       	mov	r0, r16
    bec2:	00 0c       	add	r0, r0
    bec4:	11 0b       	sbc	r17, r17
    bec6:	0f 5f       	subi	r16, 0xFF	; 255
    bec8:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    beca:	ce 01       	movw	r24, r28
    becc:	01 96       	adiw	r24, 0x01	; 1
    bece:	0e 94 1e 7c 	call	0xf83c	; 0xf83c <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    bed2:	80 3d       	cpi	r24, 0xD0	; 208
    bed4:	b7 e0       	ldi	r27, 0x07	; 7
    bed6:	9b 07       	cpc	r25, r27
    bed8:	10 f0       	brcs	.+4      	; 0xbede <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    beda:	80 5d       	subi	r24, 0xD0	; 208
    bedc:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    bede:	c8 57       	subi	r28, 0x78	; 120
    bee0:	df 4f       	sbci	r29, 0xFF	; 255
    bee2:	88 83       	st	Y, r24
    bee4:	c8 58       	subi	r28, 0x88	; 136
    bee6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    bee8:	c7 57       	subi	r28, 0x77	; 119
    beea:	df 4f       	sbci	r29, 0xFF	; 255
    beec:	08 83       	st	Y, r16
    beee:	c9 58       	subi	r28, 0x89	; 137
    bef0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bef2:	c6 57       	subi	r28, 0x76	; 118
    bef4:	df 4f       	sbci	r29, 0xFF	; 255
    bef6:	c8 82       	st	Y, r12
    bef8:	ca 58       	subi	r28, 0x8A	; 138
    befa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    befc:	c5 57       	subi	r28, 0x75	; 117
    befe:	df 4f       	sbci	r29, 0xFF	; 255
    bf00:	d8 82       	st	Y, r13
    bf02:	cb 58       	subi	r28, 0x8B	; 139
    bf04:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bf06:	c4 57       	subi	r28, 0x74	; 116
    bf08:	df 4f       	sbci	r29, 0xFF	; 255
    bf0a:	e8 82       	st	Y, r14
    bf0c:	cc 58       	subi	r28, 0x8C	; 140
    bf0e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bf10:	c3 57       	subi	r28, 0x73	; 115
    bf12:	df 4f       	sbci	r29, 0xFF	; 255
    bf14:	38 82       	st	Y, r3
    bf16:	cd 58       	subi	r28, 0x8D	; 141
    bf18:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:409
    bf1a:	ce 01       	movw	r24, r28
    bf1c:	88 57       	subi	r24, 0x78	; 120
    bf1e:	9f 4f       	sbci	r25, 0xFF	; 255
    bf20:	0e 94 56 80 	call	0x100ac	; 0x100ac <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    bf24:	ce 01       	movw	r24, r28
    bf26:	01 96       	adiw	r24, 0x01	; 1
    bf28:	0e 94 1e 7c 	call	0xf83c	; 0xf83c <NTPClient::getYear() const>
    bf2c:	9f 93       	push	r25
    bf2e:	8f 93       	push	r24
    bf30:	8a e9       	ldi	r24, 0x9A	; 154
    bf32:	94 e0       	ldi	r25, 0x04	; 4
    bf34:	9f 93       	push	r25
    bf36:	8f 93       	push	r24
    bf38:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <printf>
    bf3c:	0f 90       	pop	r0
    bf3e:	0f 90       	pop	r0
    bf40:	0f 90       	pop	r0
    bf42:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    bf44:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    bf46:	89 81       	ldd	r24, Y+1	; 0x01
    bf48:	9a 81       	ldd	r25, Y+2	; 0x02
    bf4a:	dc 01       	movw	r26, r24
    bf4c:	ed 91       	ld	r30, X+
    bf4e:	fc 91       	ld	r31, X
    bf50:	02 88       	ldd	r0, Z+18	; 0x12
    bf52:	f3 89       	ldd	r31, Z+19	; 0x13
    bf54:	e0 2d       	mov	r30, r0
    bf56:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    bf58:	1b 82       	std	Y+3, r1	; 0x03
    bf5a:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    bf5e:	11 30       	cpi	r17, 0x01	; 1
    bf60:	09 f0       	breq	.+2      	; 0xbf64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    bf62:	ef c0       	rjmp	.+478    	; 0xc142 <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    bf64:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    bf66:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    bf6a:	6e e8       	ldi	r22, 0x8E	; 142
    bf6c:	76 e2       	ldi	r23, 0x26	; 38
    bf6e:	c5 01       	movw	r24, r10
    bf70:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
  strcat_P(str1, global_time_offset);
    bf74:	6b e0       	ldi	r22, 0x0B	; 11
    bf76:	76 e2       	ldi	r23, 0x26	; 38
    bf78:	c5 01       	movw	r24, r10
    bf7a:	0e 94 5e 98 	call	0x130bc	; 0x130bc <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
  if (strcmp(str1, topic) == 0)
    bf7e:	b4 01       	movw	r22, r8
    bf80:	c5 01       	movw	r24, r10
    bf82:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    bf86:	89 2b       	or	r24, r25
    bf88:	91 f4       	brne	.+36     	; 0xbfae <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  {
    mqtt_process_message++;
    bf8a:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bf8e:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bf92:	01 96       	adiw	r24, 0x01	; 1
    bf94:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bf98:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
    time_set_offset(atoi(my_payload));
    bf9c:	85 ef       	ldi	r24, 0xF5	; 245
    bf9e:	9a e0       	ldi	r25, 0x0A	; 10
    bfa0:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    bfa4:	68 2f       	mov	r22, r24
    bfa6:	81 e0       	ldi	r24, 0x01	; 1
    bfa8:	90 e0       	ldi	r25, 0x00	; 0
    bfaa:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    bfae:	6e e8       	ldi	r22, 0x8E	; 142
    bfb0:	76 e2       	ldi	r23, 0x26	; 38
    bfb2:	c5 01       	movw	r24, r10
    bfb4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
  strcat(str1, device.nazev);
    bfb8:	64 e4       	ldi	r22, 0x44	; 68
    bfba:	7c e0       	ldi	r23, 0x0C	; 12
    bfbc:	c5 01       	movw	r24, r10
    bfbe:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
  strcat(str1, "/tds/associate");
    bfc2:	6f e9       	ldi	r22, 0x9F	; 159
    bfc4:	74 e0       	ldi	r23, 0x04	; 4
    bfc6:	c5 01       	movw	r24, r10
    bfc8:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
  if (strcmp(str1, topic) == 0)
    bfcc:	b4 01       	movw	r22, r8
    bfce:	c5 01       	movw	r24, r10
    bfd0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
  const char tmp1[16];
  char tmp2[16];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    bfd4:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    bfd6:	89 2b       	or	r24, r25
    bfd8:	b1 f4       	brne	.+44     	; 0xc006 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1944
  {
    mqtt_process_message++;
    bfda:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    bfde:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    bfe2:	01 96       	adiw	r24, 0x01	; 1
    bfe4:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    bfe8:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1945
    id = atoi(my_payload);
    bfec:	85 ef       	ldi	r24, 0xF5	; 245
    bfee:	9a e0       	ldi	r25, 0x0A	; 10
    bff0:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    bff4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
    if (tds_associate(id) == 255)
    bff6:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <tds_associate(unsigned char)>
    bffa:	8f 3f       	cpi	r24, 0xFF	; 255
    bffc:	21 f4       	brne	.+8      	; 0xc006 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
      log_error(&mqtt_client, "tds/associate full or bad id");
    bffe:	8e ea       	ldi	r24, 0xAE	; 174
    c000:	94 e0       	ldi	r25, 0x04	; 4
    c002:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1953
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    c006:	6e e8       	ldi	r22, 0x8E	; 142
    c008:	76 e2       	ldi	r23, 0x26	; 38
    c00a:	c5 01       	movw	r24, r10
    c00c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
  strcat(str1, device.nazev);
    c010:	64 e4       	ldi	r22, 0x44	; 68
    c012:	7c e0       	ldi	r23, 0x0C	; 12
    c014:	c5 01       	movw	r24, r10
    c016:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1955
  strcat(str1, "/tds/set/");
    c01a:	6b ec       	ldi	r22, 0xCB	; 203
    c01c:	74 e0       	ldi	r23, 0x04	; 4
    c01e:	c5 01       	movw	r24, r10
    c020:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c024:	f5 01       	movw	r30, r10
    c026:	01 90       	ld	r0, Z+
    c028:	00 20       	and	r0, r0
    c02a:	e9 f7       	brne	.-6      	; 0xc026 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    c02c:	31 97       	sbiw	r30, 0x01	; 1
    c02e:	af 01       	movw	r20, r30
    c030:	4a 19       	sub	r20, r10
    c032:	5b 09       	sbc	r21, r11
    c034:	b4 01       	movw	r22, r8
    c036:	c5 01       	movw	r24, r10
    c038:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c03c:	89 2b       	or	r24, r25
    c03e:	09 f0       	breq	.+2      	; 0xc042 <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    c040:	02 c1       	rjmp	.+516    	; 0xc246 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1958
  {
    mqtt_process_message++;
    c042:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c046:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c04a:	01 96       	adiw	r24, 0x01	; 1
    c04c:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c050:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c054:	f5 01       	movw	r30, r10
    c056:	01 90       	ld	r0, Z+
    c058:	00 20       	and	r0, r0
    c05a:	e9 f7       	brne	.-6      	; 0xc056 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    c05c:	31 97       	sbiw	r30, 0x01	; 1
    c05e:	ea 19       	sub	r30, r10
    c060:	fb 09       	sbc	r31, r11
    c062:	9e 2f       	mov	r25, r30
    c064:	4e 2f       	mov	r20, r30
    c066:	84 2f       	mov	r24, r20
    c068:	89 1b       	sub	r24, r25
    c06a:	24 2f       	mov	r18, r20
    c06c:	30 e0       	ldi	r19, 0x00	; 0
    c06e:	d4 01       	movw	r26, r8
    c070:	0d 90       	ld	r0, X+
    c072:	00 20       	and	r0, r0
    c074:	e9 f7       	brne	.-6      	; 0xc070 <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    c076:	11 97       	sbiw	r26, 0x01	; 1
    c078:	a8 19       	sub	r26, r8
    c07a:	b9 09       	sbc	r27, r9
    c07c:	2a 17       	cp	r18, r26
    c07e:	3b 07       	cpc	r19, r27
    c080:	08 f0       	brcs	.+2      	; 0xc084 <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    c082:	61 c0       	rjmp	.+194    	; 0xc146 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1962
    {
      str1[cnt] = topic[f];
    c084:	d5 01       	movw	r26, r10
    c086:	a8 0f       	add	r26, r24
    c088:	b1 1d       	adc	r27, r1
    c08a:	28 0d       	add	r18, r8
    c08c:	39 1d       	adc	r19, r9
    c08e:	f9 01       	movw	r30, r18
    c090:	80 81       	ld	r24, Z
    c092:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1963
      str1[cnt + 1] = 0;
    c094:	11 96       	adiw	r26, 0x01	; 1
    c096:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c098:	4f 5f       	subi	r20, 0xFF	; 255
    c09a:	e5 cf       	rjmp	.-54     	; 0xc066 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    c09c:	85 ef       	ldi	r24, 0xF5	; 245
    c09e:	9a e0       	ldi	r25, 0x0A	; 10
    c0a0:	c5 cd       	rjmp	.-1142   	; 0xbc2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c0a2:	85 ea       	ldi	r24, 0xA5	; 165
    c0a4:	9d e0       	ldi	r25, 0x0D	; 13
    c0a6:	e6 cd       	rjmp	.-1076   	; 0xbc74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    c0a8:	87 30       	cpi	r24, 0x07	; 7
    c0aa:	91 05       	cpc	r25, r1
    c0ac:	b1 f0       	breq	.+44     	; 0xc0da <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    c0ae:	0a 97       	sbiw	r24, 0x0a	; 10
    c0b0:	09 f0       	breq	.+2      	; 0xc0b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    c0b2:	4d ce       	rjmp	.-870    	; 0xbd4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    c0b4:	f7 01       	movw	r30, r14
    c0b6:	62 81       	ldd	r22, Z+2	; 0x02
    c0b8:	73 81       	ldd	r23, Z+3	; 0x03
    c0ba:	84 81       	ldd	r24, Z+4	; 0x04
    c0bc:	95 81       	ldd	r25, Z+5	; 0x05
    c0be:	0e 94 99 a3 	call	0x14732	; 0x14732 <__fixunssfsi>
    c0c2:	03 c0       	rjmp	.+6      	; 0xc0ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    c0c4:	f7 01       	movw	r30, r14
    c0c6:	62 81       	ldd	r22, Z+2	; 0x02
    c0c8:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c0ca:	60 3d       	cpi	r22, 0xD0	; 208
    c0cc:	f7 e0       	ldi	r31, 0x07	; 7
    c0ce:	7f 07       	cpc	r23, r31
    c0d0:	08 f4       	brcc	.+2      	; 0xc0d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    c0d2:	3e ce       	rjmp	.-900    	; 0xbd50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c0d4:	60 5d       	subi	r22, 0xD0	; 208
    c0d6:	77 40       	sbci	r23, 0x07	; 7
    c0d8:	3b ce       	rjmp	.-906    	; 0xbd50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    c0da:	12 96       	adiw	r26, 0x02	; 2
    c0dc:	6d 91       	ld	r22, X+
    c0de:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c0e0:	71 95       	neg	r23
    c0e2:	61 95       	neg	r22
    c0e4:	71 09       	sbc	r23, r1
    c0e6:	f1 cf       	rjmp	.-30     	; 0xc0ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    c0e8:	12 96       	adiw	r26, 0x02	; 2
    c0ea:	ed 91       	ld	r30, X+
    c0ec:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c0ee:	30 97       	sbiw	r30, 0x00	; 0
    c0f0:	09 f4       	brne	.+2      	; 0xc0f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    c0f2:	2d ce       	rjmp	.-934    	; 0xbd4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    c0f4:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    c0f6:	61 e0       	ldi	r22, 0x01	; 1
    c0f8:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    c0fa:	84 37       	cpi	r24, 0x74	; 116
    c0fc:	09 f4       	brne	.+2      	; 0xc100 <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    c0fe:	28 ce       	rjmp	.-944    	; 0xbd50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    c100:	8b 32       	cpi	r24, 0x2B	; 43
    c102:	c9 f0       	breq	.+50     	; 0xc136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    c104:	8d 32       	cpi	r24, 0x2D	; 45
    c106:	c1 f4       	brne	.+48     	; 0xc138 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    c108:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    c10a:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    c10c:	70 e0       	ldi	r23, 0x00	; 0
    c10e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    c110:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    c112:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    c114:	20 ed       	ldi	r18, 0xD0	; 208
    c116:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    c118:	2a 30       	cpi	r18, 0x0A	; 10
    c11a:	80 f4       	brcc	.+32     	; 0xc13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    c11c:	46 9f       	mul	r20, r22
    c11e:	90 01       	movw	r18, r0
    c120:	47 9f       	mul	r20, r23
    c122:	30 0d       	add	r19, r0
    c124:	11 24       	eor	r1, r1
    c126:	b9 01       	movw	r22, r18
    c128:	60 53       	subi	r22, 0x30	; 48
    c12a:	71 09       	sbc	r23, r1
    c12c:	69 0f       	add	r22, r25
    c12e:	71 1d       	adc	r23, r1
    c130:	97 fd       	sbrc	r25, 7
    c132:	7a 95       	dec	r23
    c134:	ee cf       	rjmp	.-36     	; 0xc112 <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    c136:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    c138:	80 e0       	ldi	r24, 0x00	; 0
    c13a:	e8 cf       	rjmp	.-48     	; 0xc10c <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c13c:	81 11       	cpse	r24, r1
    c13e:	d0 cf       	rjmp	.-96     	; 0xc0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    c140:	c4 cf       	rjmp	.-120    	; 0xc0ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c142:	82 60       	ori	r24, 0x02	; 2
    c144:	10 cf       	rjmp	.-480    	; 0xbf66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c146:	66 e7       	ldi	r22, 0x76	; 118
    c148:	74 e0       	ldi	r23, 0x04	; 4
    c14a:	c5 01       	movw	r24, r10
    c14c:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    c150:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c152:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:71
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    c154:	b8 e4       	ldi	r27, 0x48	; 72
    c156:	eb 2e       	mov	r14, r27
    c158:	f1 2c       	mov	r15, r1
    c15a:	ec 0e       	add	r14, r28
    c15c:	fd 1e       	adc	r15, r29
    c15e:	fc e0       	ldi	r31, 0x0C	; 12
    c160:	ef 0e       	add	r14, r31
    c162:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1968
    pch = strtok (str1, "/");
    while (pch != NULL)
    c164:	01 15       	cp	r16, r1
    c166:	11 05       	cpc	r17, r1
    c168:	09 f4       	brne	.+2      	; 0xc16c <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    c16a:	6d c0       	rjmp	.+218    	; 0xc246 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
    {
      if (cnt == 0) id = atoi(pch);
    c16c:	61 10       	cpse	r6, r1
    c16e:	0d c0       	rjmp	.+26     	; 0xc18a <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    c170:	c8 01       	movw	r24, r16
    c172:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c176:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
      if (id < HW_ONEWIRE_MAXROMS)
    c178:	25 e0       	ldi	r18, 0x05	; 5
    c17a:	28 17       	cp	r18, r24
    c17c:	08 f0       	brcs	.+2      	; 0xc180 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    c17e:	5a c0       	rjmp	.+180    	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    c180:	8c ee       	ldi	r24, 0xEC	; 236
    c182:	94 e0       	ldi	r25, 0x04	; 4
    c184:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c188:	55 c0       	rjmp	.+170    	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    c18a:	85 e0       	ldi	r24, 0x05	; 5
    c18c:	87 15       	cp	r24, r7
    c18e:	c0 f3       	brcs	.-16     	; 0xc180 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    c190:	a1 e0       	ldi	r26, 0x01	; 1
    c192:	6a 12       	cpse	r6, r26
    c194:	4f c0       	rjmp	.+158    	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c196:	6f e4       	ldi	r22, 0x4F	; 79
    c198:	74 e0       	ldi	r23, 0x04	; 4
    c19a:	c8 01       	movw	r24, r16
    c19c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c1a0:	89 2b       	or	r24, r25
    c1a2:	89 f4       	brne	.+34     	; 0xc1c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:70
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c1a4:	be 01       	movw	r22, r28
    c1a6:	68 5b       	subi	r22, 0xB8	; 184
    c1a8:	7f 4f       	sbci	r23, 0xFF	; 255
    c1aa:	87 2d       	mov	r24, r7
    c1ac:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:71
  strcpy(tds.name, name);
    c1b0:	65 ef       	ldi	r22, 0xF5	; 245
    c1b2:	7a e0       	ldi	r23, 0x0A	; 10
    c1b4:	c7 01       	movw	r24, r14
    c1b6:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:72
  set_tds18s20(idx, &tds);
    c1ba:	be 01       	movw	r22, r28
    c1bc:	68 5b       	subi	r22, 0xB8	; 184
    c1be:	7f 4f       	sbci	r23, 0xFF	; 255
    c1c0:	87 2d       	mov	r24, r7
    c1c2:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1974
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    c1c6:	6c ed       	ldi	r22, 0xDC	; 220
    c1c8:	77 e0       	ldi	r23, 0x07	; 7
    c1ca:	c8 01       	movw	r24, r16
    c1cc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c1d0:	89 2b       	or	r24, r25
    c1d2:	a9 f4       	brne	.+42     	; 0xc1fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    c1d4:	85 ef       	ldi	r24, 0xF5	; 245
    c1d6:	9a e0       	ldi	r25, 0x0A	; 10
    c1d8:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c1dc:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:78
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c1de:	be 01       	movw	r22, r28
    c1e0:	68 5b       	subi	r22, 0xB8	; 184
    c1e2:	7f 4f       	sbci	r23, 0xFF	; 255
    c1e4:	87 2d       	mov	r24, r7
    c1e6:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:79
  tds.offset = offset;
    c1ea:	64 96       	adiw	r28, 0x14	; 20
    c1ec:	df ae       	std	Y+63, r13	; 0x3f
    c1ee:	ce ae       	std	Y+62, r12	; 0x3e
    c1f0:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:80
  set_tds18s20(idx, &tds);
    c1f2:	be 01       	movw	r22, r28
    c1f4:	68 5b       	subi	r22, 0xB8	; 184
    c1f6:	7f 4f       	sbci	r23, 0xFF	; 255
    c1f8:	87 2d       	mov	r24, r7
    c1fa:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    c1fe:	61 ec       	ldi	r22, 0xC1	; 193
    c200:	76 e0       	ldi	r23, 0x06	; 6
    c202:	c8 01       	movw	r24, r16
    c204:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c208:	89 2b       	or	r24, r25
    c20a:	a1 f4       	brne	.+40     	; 0xc234 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c20c:	85 ef       	ldi	r24, 0xF5	; 245
    c20e:	9a e0       	ldi	r25, 0x0A	; 10
    c210:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c214:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:94
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c216:	be 01       	movw	r22, r28
    c218:	68 5b       	subi	r22, 0xB8	; 184
    c21a:	7f 4f       	sbci	r23, 0xFF	; 255
    c21c:	87 2d       	mov	r24, r7
    c21e:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
    c222:	6d 96       	adiw	r28, 0x1d	; 29
    c224:	1f af       	std	Y+63, r17	; 0x3f
    c226:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:96
  tds.period = period;
  set_tds18s20(idx, &tds);
    c228:	be 01       	movw	r22, r28
    c22a:	68 5b       	subi	r22, 0xB8	; 184
    c22c:	7f 4f       	sbci	r23, 0xFF	; 255
    c22e:	87 2d       	mov	r24, r7
    c230:	0e 94 8c 44 	call	0x8918	; 0x8918 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    c234:	66 e7       	ldi	r22, 0x76	; 118
    c236:	74 e0       	ldi	r23, 0x04	; 4
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	80 e0       	ldi	r24, 0x00	; 0
    c23c:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    c240:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
      cnt++;
    c242:	63 94       	inc	r6
    c244:	8f cf       	rjmp	.-226    	; 0xc164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    c246:	6e e8       	ldi	r22, 0x8E	; 142
    c248:	76 e2       	ldi	r23, 0x26	; 38
    c24a:	c5 01       	movw	r24, r10
    c24c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1988
  strcat(str1, device.nazev);
    c250:	64 e4       	ldi	r22, 0x44	; 68
    c252:	7c e0       	ldi	r23, 0x0C	; 12
    c254:	c5 01       	movw	r24, r10
    c256:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
  strcat(str1, "/tds/clear");
    c25a:	65 ed       	ldi	r22, 0xD5	; 213
    c25c:	74 e0       	ldi	r23, 0x04	; 4
    c25e:	c5 01       	movw	r24, r10
    c260:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1990
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c264:	f5 01       	movw	r30, r10
    c266:	01 90       	ld	r0, Z+
    c268:	00 20       	and	r0, r0
    c26a:	e9 f7       	brne	.-6      	; 0xc266 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    c26c:	31 97       	sbiw	r30, 0x01	; 1
    c26e:	af 01       	movw	r20, r30
    c270:	4a 19       	sub	r20, r10
    c272:	5b 09       	sbc	r21, r11
    c274:	b4 01       	movw	r22, r8
    c276:	c5 01       	movw	r24, r10
    c278:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c27c:	89 2b       	or	r24, r25
    c27e:	a1 f4       	brne	.+40     	; 0xc2a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
  {
    mqtt_process_message++;
    c280:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c284:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c288:	01 96       	adiw	r24, 0x01	; 1
    c28a:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c28e:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
    id = atoi(my_payload);
    c292:	85 ef       	ldi	r24, 0xF5	; 245
    c294:	9a e0       	ldi	r25, 0x0A	; 10
    c296:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c29a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
    if (id < HW_ONEWIRE_MAXROMS)
    c29c:	b5 e0       	ldi	r27, 0x05	; 5
    c29e:	b8 17       	cp	r27, r24
    c2a0:	08 f4       	brcc	.+2      	; 0xc2a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    c2a2:	4c c0       	rjmp	.+152    	; 0xc33c <mqtt_callback(char*, unsigned char*, unsigned int)+0x850>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1995
      tds_set_clear(id);
    c2a4:	0e 94 84 47 	call	0x8f08	; 0x8f08 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
  }
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - 8 znaku nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    c2a8:	6e e8       	ldi	r22, 0x8E	; 142
    c2aa:	76 e2       	ldi	r23, 0x26	; 38
    c2ac:	c5 01       	movw	r24, r10
    c2ae:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2004
  strcat(str1, device.nazev);
    c2b2:	64 e4       	ldi	r22, 0x44	; 68
    c2b4:	7c e0       	ldi	r23, 0x0C	; 12
    c2b6:	c5 01       	movw	r24, r10
    c2b8:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005
  strcat(str1, "/rtds/set/");
    c2bc:	60 ee       	ldi	r22, 0xE0	; 224
    c2be:	74 e0       	ldi	r23, 0x04	; 4
    c2c0:	c5 01       	movw	r24, r10
    c2c2:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c2c6:	f5 01       	movw	r30, r10
    c2c8:	01 90       	ld	r0, Z+
    c2ca:	00 20       	and	r0, r0
    c2cc:	e9 f7       	brne	.-6      	; 0xc2c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    c2ce:	31 97       	sbiw	r30, 0x01	; 1
    c2d0:	af 01       	movw	r20, r30
    c2d2:	4a 19       	sub	r20, r10
    c2d4:	5b 09       	sbc	r21, r11
    c2d6:	b4 01       	movw	r22, r8
    c2d8:	c5 01       	movw	r24, r10
    c2da:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c2de:	89 2b       	or	r24, r25
    c2e0:	09 f0       	breq	.+2      	; 0xc2e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7f8>
    c2e2:	6f c0       	rjmp	.+222    	; 0xc3c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
  {
    mqtt_process_message++;
    c2e4:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c2e8:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c2ec:	01 96       	adiw	r24, 0x01	; 1
    c2ee:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c2f2:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c2f6:	f5 01       	movw	r30, r10
    c2f8:	01 90       	ld	r0, Z+
    c2fa:	00 20       	and	r0, r0
    c2fc:	e9 f7       	brne	.-6      	; 0xc2f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80c>
    c2fe:	31 97       	sbiw	r30, 0x01	; 1
    c300:	ea 19       	sub	r30, r10
    c302:	fb 09       	sbc	r31, r11
    c304:	9e 2f       	mov	r25, r30
    c306:	4e 2f       	mov	r20, r30
    c308:	84 2f       	mov	r24, r20
    c30a:	89 1b       	sub	r24, r25
    c30c:	24 2f       	mov	r18, r20
    c30e:	30 e0       	ldi	r19, 0x00	; 0
    c310:	d4 01       	movw	r26, r8
    c312:	0d 90       	ld	r0, X+
    c314:	00 20       	and	r0, r0
    c316:	e9 f7       	brne	.-6      	; 0xc312 <mqtt_callback(char*, unsigned char*, unsigned int)+0x826>
    c318:	11 97       	sbiw	r26, 0x01	; 1
    c31a:	a8 19       	sub	r26, r8
    c31c:	b9 09       	sbc	r27, r9
    c31e:	2a 17       	cp	r18, r26
    c320:	3b 07       	cpc	r19, r27
    c322:	88 f4       	brcc	.+34     	; 0xc346 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
    {
      str1[cnt] = topic[f];
    c324:	d5 01       	movw	r26, r10
    c326:	a8 0f       	add	r26, r24
    c328:	b1 1d       	adc	r27, r1
    c32a:	28 0d       	add	r18, r8
    c32c:	39 1d       	adc	r19, r9
    c32e:	f9 01       	movw	r30, r18
    c330:	80 81       	ld	r24, Z
    c332:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
      str1[cnt + 1] = 0;
    c334:	11 96       	adiw	r26, 0x01	; 1
    c336:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c338:	4f 5f       	subi	r20, 0xFF	; 255
    c33a:	e6 cf       	rjmp	.-52     	; 0xc308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x81c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    c33c:	88 e0       	ldi	r24, 0x08	; 8
    c33e:	95 e0       	ldi	r25, 0x05	; 5
    c340:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c344:	b1 cf       	rjmp	.-158    	; 0xc2a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c346:	66 e7       	ldi	r22, 0x76	; 118
    c348:	74 e0       	ldi	r23, 0x04	; 4
    c34a:	c5 01       	movw	r24, r10
    c34c:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c350:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
    pch = strtok (str1, "/");
    while (pch != NULL)
    c352:	00 97       	sbiw	r24, 0x00	; 0
    c354:	b1 f1       	breq	.+108    	; 0xc3c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
    {
      if (cnt == 0) id = atoi(pch);
    c356:	11 11       	cpse	r17, r1
    c358:	0b c0       	rjmp	.+22     	; 0xc370 <mqtt_callback(char*, unsigned char*, unsigned int)+0x884>
    c35a:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c35e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
      if (id < MAX_RTDS)
    c360:	f9 e0       	ldi	r31, 0x09	; 9
    c362:	f8 17       	cp	r31, r24
    c364:	30 f5       	brcc	.+76     	; 0xc3b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2035
          }
        }
      }
      else
      {
        log_error(&mqtt_client, "rtds/set bad id");
    c366:	8b ee       	ldi	r24, 0xEB	; 235
    c368:	94 e0       	ldi	r25, 0x04	; 4
    c36a:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c36e:	21 c0       	rjmp	.+66     	; 0xc3b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_RTDS)
    c370:	29 e0       	ldi	r18, 0x09	; 9
    c372:	27 15       	cp	r18, r7
    c374:	c0 f3       	brcs	.-16     	; 0xc366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2023
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))
    c376:	11 30       	cpi	r17, 0x01	; 1
    c378:	e1 f4       	brne	.+56     	; 0xc3b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c6>
    c37a:	6f e4       	ldi	r22, 0x4F	; 79
    c37c:	74 e0       	ldi	r23, 0x04	; 4
    c37e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c382:	89 2b       	or	r24, r25
    c384:	b1 f4       	brne	.+44     	; 0xc3b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
        {
          remote_tds_get_active(id, &active);
    c386:	be 01       	movw	r22, r28
    c388:	68 5d       	subi	r22, 0xD8	; 216
    c38a:	7e 4f       	sbci	r23, 0xFE	; 254
    c38c:	87 2d       	mov	r24, r7
    c38e:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
          if (active == 0)
    c392:	c8 5d       	subi	r28, 0xD8	; 216
    c394:	de 4f       	sbci	r29, 0xFE	; 254
    c396:	88 81       	ld	r24, Y
    c398:	c8 52       	subi	r28, 0x28	; 40
    c39a:	d1 40       	sbci	r29, 0x01	; 1
    c39c:	81 11       	cpse	r24, r1
    c39e:	09 c0       	rjmp	.+18     	; 0xc3b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
          {
            remote_tds_set_complete(id, 1, my_payload);
    c3a0:	45 ef       	ldi	r20, 0xF5	; 245
    c3a2:	5a e0       	ldi	r21, 0x0A	; 10
    c3a4:	61 e0       	ldi	r22, 0x01	; 1
    c3a6:	87 2d       	mov	r24, r7
    c3a8:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
            remote_tds_subscibe_topic(id);
    c3ac:	87 2d       	mov	r24, r7
    c3ae:	0e 94 0f 5d 	call	0xba1e	; 0xba1e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2037
      }
      else
      {
        log_error(&mqtt_client, "rtds/set bad id");
      }
      pch = strtok (NULL, "/");
    c3b2:	66 e7       	ldi	r22, 0x76	; 118
    c3b4:	74 e0       	ldi	r23, 0x04	; 4
    c3b6:	90 e0       	ldi	r25, 0x00	; 0
    c3b8:	80 e0       	ldi	r24, 0x00	; 0
    c3ba:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
      cnt++;
    c3be:	1f 5f       	subi	r17, 0xFF	; 255
    c3c0:	c8 cf       	rjmp	.-112    	; 0xc352 <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
    }
  }
  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    c3c2:	6e e8       	ldi	r22, 0x8E	; 142
    c3c4:	76 e2       	ldi	r23, 0x26	; 38
    c3c6:	c5 01       	movw	r24, r10
    c3c8:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
  strcat(str1, device.nazev);
    c3cc:	64 e4       	ldi	r22, 0x44	; 68
    c3ce:	7c e0       	ldi	r23, 0x0C	; 12
    c3d0:	c5 01       	movw	r24, r10
    c3d2:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2045
  strcat(str1, "/rtds/clear");
    c3d6:	6b ef       	ldi	r22, 0xFB	; 251
    c3d8:	74 e0       	ldi	r23, 0x04	; 4
    c3da:	c5 01       	movw	r24, r10
    c3dc:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c3e0:	f5 01       	movw	r30, r10
    c3e2:	01 90       	ld	r0, Z+
    c3e4:	00 20       	and	r0, r0
    c3e6:	e9 f7       	brne	.-6      	; 0xc3e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f6>
    c3e8:	31 97       	sbiw	r30, 0x01	; 1
    c3ea:	af 01       	movw	r20, r30
    c3ec:	4a 19       	sub	r20, r10
    c3ee:	5b 09       	sbc	r21, r11
    c3f0:	b4 01       	movw	r22, r8
    c3f2:	c5 01       	movw	r24, r10
    c3f4:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c3f8:	89 2b       	or	r24, r25
    c3fa:	09 f0       	breq	.+2      	; 0xc3fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x912>
    c3fc:	74 c0       	rjmp	.+232    	; 0xc4e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2048
  {
    mqtt_process_message++;
    c3fe:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c402:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c406:	01 96       	adiw	r24, 0x01	; 1
    c408:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c40c:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2049
    id = atoi(my_payload);
    c410:	85 ef       	ldi	r24, 0xF5	; 245
    c412:	9a e0       	ldi	r25, 0x0A	; 10
    c414:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c418:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2050
    if (id < MAX_RTDS)
    c41a:	89 e0       	ldi	r24, 0x09	; 9
    c41c:	87 15       	cp	r24, r7
    c41e:	08 f4       	brcc	.+2      	; 0xc422 <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
    c420:	c1 c0       	rjmp	.+386    	; 0xc5a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xab8>
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    c422:	c8 5f       	subi	r28, 0xF8	; 248
    c424:	de 4f       	sbci	r29, 0xFE	; 254
    c426:	18 82       	st	Y, r1
    c428:	c8 50       	subi	r28, 0x08	; 8
    c42a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
  remote_tds_get_complete(idx, &active, tmp1);
    c42c:	ae 01       	movw	r20, r28
    c42e:	48 57       	subi	r20, 0x78	; 120
    c430:	5f 4f       	sbci	r21, 0xFF	; 255
    c432:	be 01       	movw	r22, r28
    c434:	68 5f       	subi	r22, 0xF8	; 248
    c436:	7e 4f       	sbci	r23, 0xFE	; 254
    c438:	87 2d       	mov	r24, r7
    c43a:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
  if (active == 1)
    c43e:	c8 5f       	subi	r28, 0xF8	; 248
    c440:	de 4f       	sbci	r29, 0xFE	; 254
    c442:	88 81       	ld	r24, Y
    c444:	c8 50       	subi	r28, 0x08	; 8
    c446:	d1 40       	sbci	r29, 0x01	; 1
    c448:	81 30       	cpi	r24, 0x01	; 1
    c44a:	09 f0       	breq	.+2      	; 0xc44e <mqtt_callback(char*, unsigned char*, unsigned int)+0x962>
    c44c:	49 c0       	rjmp	.+146    	; 0xc4e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
  {
    strcpy(tmp2, "/rtds/");
    c44e:	8e 01       	movw	r16, r28
    c450:	08 5b       	subi	r16, 0xB8	; 184
    c452:	1f 4f       	sbci	r17, 0xFF	; 255
    c454:	61 e7       	ldi	r22, 0x71	; 113
    c456:	74 e0       	ldi	r23, 0x04	; 4
    c458:	c8 01       	movw	r24, r16
    c45a:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1792
    strcat(tmp2, tmp1);
    c45e:	be 01       	movw	r22, r28
    c460:	68 57       	subi	r22, 0x78	; 120
    c462:	7f 4f       	sbci	r23, 0xFF	; 255
    c464:	c8 01       	movw	r24, r16
    c466:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    c46a:	d8 01       	movw	r26, r16
    c46c:	0d 90       	ld	r0, X+
    c46e:	00 20       	and	r0, r0
    c470:	e9 f7       	brne	.-6      	; 0xc46c <mqtt_callback(char*, unsigned char*, unsigned int)+0x980>
    c472:	cd 01       	movw	r24, r26
    c474:	80 1b       	sub	r24, r16
    c476:	91 0b       	sbc	r25, r17
    c478:	08 96       	adiw	r24, 0x08	; 8
    c47a:	81 30       	cpi	r24, 0x01	; 1
    c47c:	92 40       	sbci	r25, 0x02	; 2
    c47e:	80 f5       	brcc	.+96     	; 0xc4e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    c480:	81 e2       	ldi	r24, 0x21	; 33
    c482:	9e e0       	ldi	r25, 0x0E	; 14
    c484:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
    c488:	88 23       	and	r24, r24
    c48a:	51 f1       	breq	.+84     	; 0xc4e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    c48c:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <mqtt_client+0x202>
    c490:	90 91 24 10 	lds	r25, 0x1024	; 0x801024 <mqtt_client+0x203>
    c494:	01 96       	adiw	r24, 0x01	; 1
    c496:	90 93 24 10 	sts	0x1024, r25	; 0x801024 <mqtt_client+0x203>
    c49a:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    c49e:	89 2b       	or	r24, r25
    c4a0:	31 f4       	brne	.+12     	; 0xc4ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x9c2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    c4a2:	81 e0       	ldi	r24, 0x01	; 1
    c4a4:	90 e0       	ldi	r25, 0x00	; 0
    c4a6:	90 93 24 10 	sts	0x1024, r25	; 0x801024 <mqtt_client+0x203>
    c4aa:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    c4ae:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <mqtt_client+0x202>
    c4b2:	90 91 24 10 	lds	r25, 0x1024	; 0x801024 <mqtt_client+0x203>
    c4b6:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    c4ba:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    c4be:	47 e0       	ldi	r20, 0x07	; 7
    c4c0:	50 e0       	ldi	r21, 0x00	; 0
    c4c2:	63 e2       	ldi	r22, 0x23	; 35
    c4c4:	7e e0       	ldi	r23, 0x0E	; 14
    c4c6:	c8 01       	movw	r24, r16
    c4c8:	0e 94 e0 72 	call	0xe5c0	; 0xe5c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    c4cc:	9c 01       	movw	r18, r24
    c4ce:	25 50       	subi	r18, 0x05	; 5
    c4d0:	31 09       	sbc	r19, r1
    c4d2:	43 e2       	ldi	r20, 0x23	; 35
    c4d4:	5e e0       	ldi	r21, 0x0E	; 14
    c4d6:	62 ea       	ldi	r22, 0xA2	; 162
    c4d8:	81 e2       	ldi	r24, 0x21	; 33
    c4da:	9e e0       	ldi	r25, 0x0E	; 14
    c4dc:	0e 94 5d 82 	call	0x104ba	; 0x104ba <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < MAX_RTDS)
    {
      remote_tds_unsubscibe_topic(id);
      remote_tds_clear(id);
    c4e0:	87 2d       	mov	r24, r7
    c4e2:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2061
    {
      log_error(&mqtt_client, "rtds/clear bad id");
    }
  }
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    c4e6:	6e e8       	ldi	r22, 0x8E	; 142
    c4e8:	76 e2       	ldi	r23, 0x26	; 38
    c4ea:	c5 01       	movw	r24, r10
    c4ec:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
  strcat(str1, device.nazev);
    c4f0:	64 e4       	ldi	r22, 0x44	; 68
    c4f2:	7c e0       	ldi	r23, 0x0C	; 12
    c4f4:	c5 01       	movw	r24, r10
    c4f6:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
  strcat(str1, "/rtds/get");
    c4fa:	69 e1       	ldi	r22, 0x19	; 25
    c4fc:	75 e0       	ldi	r23, 0x05	; 5
    c4fe:	c5 01       	movw	r24, r10
    c500:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2064
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c504:	f5 01       	movw	r30, r10
    c506:	01 90       	ld	r0, Z+
    c508:	00 20       	and	r0, r0
    c50a:	e9 f7       	brne	.-6      	; 0xc506 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1a>
    c50c:	31 97       	sbiw	r30, 0x01	; 1
    c50e:	af 01       	movw	r20, r30
    c510:	4a 19       	sub	r20, r10
    c512:	5b 09       	sbc	r21, r11
    c514:	b4 01       	movw	r22, r8
    c516:	c5 01       	movw	r24, r10
    c518:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c51c:	89 2b       	or	r24, r25
    c51e:	11 f4       	brne	.+4      	; 0xc524 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
  {
    send_mqtt_remote_tds_status();
    c520:	0e 94 ba 5c 	call	0xb974	; 0xb974 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    c524:	61 e7       	ldi	r22, 0x71	; 113
    c526:	74 e0       	ldi	r23, 0x04	; 4
    c528:	c5 01       	movw	r24, r10
    c52a:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c52e:	f5 01       	movw	r30, r10
    c530:	01 90       	ld	r0, Z+
    c532:	00 20       	and	r0, r0
    c534:	e9 f7       	brne	.-6      	; 0xc530 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa44>
    c536:	31 97       	sbiw	r30, 0x01	; 1
    c538:	af 01       	movw	r20, r30
    c53a:	4a 19       	sub	r20, r10
    c53c:	5b 09       	sbc	r21, r11
    c53e:	b4 01       	movw	r22, r8
    c540:	c5 01       	movw	r24, r10
    c542:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c546:	89 2b       	or	r24, r25
    c548:	09 f0       	breq	.+2      	; 0xc54c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa60>
    c54a:	41 c0       	rjmp	.+130    	; 0xc5ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xae2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2073
  {
    mqtt_process_message++;
    c54c:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c550:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c554:	01 96       	adiw	r24, 0x01	; 1
    c556:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c55a:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c55e:	f5 01       	movw	r30, r10
    c560:	01 90       	ld	r0, Z+
    c562:	00 20       	and	r0, r0
    c564:	e9 f7       	brne	.-6      	; 0xc560 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    c566:	31 97       	sbiw	r30, 0x01	; 1
    c568:	ea 19       	sub	r30, r10
    c56a:	fb 09       	sbc	r31, r11
    c56c:	9e 2f       	mov	r25, r30
    c56e:	4e 2f       	mov	r20, r30
    c570:	84 2f       	mov	r24, r20
    c572:	89 1b       	sub	r24, r25
    c574:	24 2f       	mov	r18, r20
    c576:	30 e0       	ldi	r19, 0x00	; 0
    c578:	d4 01       	movw	r26, r8
    c57a:	0d 90       	ld	r0, X+
    c57c:	00 20       	and	r0, r0
    c57e:	e9 f7       	brne	.-6      	; 0xc57a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa8e>
    c580:	11 97       	sbiw	r26, 0x01	; 1
    c582:	a8 19       	sub	r26, r8
    c584:	b9 09       	sbc	r27, r9
    c586:	2a 17       	cp	r18, r26
    c588:	3b 07       	cpc	r19, r27
    c58a:	88 f4       	brcc	.+34     	; 0xc5ae <mqtt_callback(char*, unsigned char*, unsigned int)+0xac2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
    {
      str1[cnt] = topic[f];
    c58c:	d5 01       	movw	r26, r10
    c58e:	a8 0f       	add	r26, r24
    c590:	b1 1d       	adc	r27, r1
    c592:	28 0d       	add	r18, r8
    c594:	39 1d       	adc	r19, r9
    c596:	f9 01       	movw	r30, r18
    c598:	80 81       	ld	r24, Z
    c59a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
      str1[cnt + 1] = 0;
    c59c:	11 96       	adiw	r26, 0x01	; 1
    c59e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c5a0:	4f 5f       	subi	r20, 0xFF	; 255
    c5a2:	e6 cf       	rjmp	.-52     	; 0xc570 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
      remote_tds_unsubscibe_topic(id);
      remote_tds_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "rtds/clear bad id");
    c5a4:	87 e0       	ldi	r24, 0x07	; 7
    c5a6:	95 e0       	ldi	r25, 0x05	; 5
    c5a8:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c5ac:	9c cf       	rjmp	.-200    	; 0xc4e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c5ae:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
    {
      uint8_t active = 0;
    c5b0:	29 96       	adiw	r28, 0x09	; 9
    c5b2:	1f ae       	std	Y+63, r1	; 0x3f
    c5b4:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
      remote_tds_get_complete(idx, &active, tmp1);
    c5b6:	ae 01       	movw	r20, r28
    c5b8:	48 5f       	subi	r20, 0xF8	; 248
    c5ba:	5e 4f       	sbci	r21, 0xFE	; 254
    c5bc:	be 01       	movw	r22, r28
    c5be:	68 5b       	subi	r22, 0xB8	; 184
    c5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c2:	81 2f       	mov	r24, r17
    c5c4:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c5c8:	1f 5f       	subi	r17, 0xFF	; 255
    c5ca:	1a 30       	cpi	r17, 0x0A	; 10
    c5cc:	89 f7       	brne	.-30     	; 0xc5b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xac4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
        //remote_tds[idx] = atoi(my_payload);
        //remote_tds_last_update[idx] = 0;
      }
    }
  }
  strcpy(str1, "/rtds/list");
    c5ce:	63 e2       	ldi	r22, 0x23	; 35
    c5d0:	75 e0       	ldi	r23, 0x05	; 5
    c5d2:	c5 01       	movw	r24, r10
    c5d4:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    c5d8:	6e e8       	ldi	r22, 0x8E	; 142
    c5da:	76 e2       	ldi	r23, 0x26	; 38
    c5dc:	c5 01       	movw	r24, r10
    c5de:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
  strcat(str1, device.nazev);
    c5e2:	64 e4       	ldi	r22, 0x44	; 68
    c5e4:	7c e0       	ldi	r23, 0x0C	; 12
    c5e6:	c5 01       	movw	r24, r10
    c5e8:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
  strcat(str1, "/prog/set/");
    c5ec:	6e e2       	ldi	r22, 0x2E	; 46
    c5ee:	75 e0       	ldi	r23, 0x05	; 5
    c5f0:	c5 01       	movw	r24, r10
    c5f2:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c5f6:	f5 01       	movw	r30, r10
    c5f8:	01 90       	ld	r0, Z+
    c5fa:	00 20       	and	r0, r0
    c5fc:	e9 f7       	brne	.-6      	; 0xc5f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb0c>
    c5fe:	31 97       	sbiw	r30, 0x01	; 1
    c600:	af 01       	movw	r20, r30
    c602:	4a 19       	sub	r20, r10
    c604:	5b 09       	sbc	r21, r11
    c606:	b4 01       	movw	r22, r8
    c608:	c5 01       	movw	r24, r10
    c60a:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c60e:	89 2b       	or	r24, r25
    c610:	09 f0       	breq	.+2      	; 0xc614 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb28>
    c612:	75 c0       	rjmp	.+234    	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xc12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
  {
    mqtt_process_message++;
    c614:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c618:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c61c:	01 96       	adiw	r24, 0x01	; 1
    c61e:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c622:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c626:	f5 01       	movw	r30, r10
    c628:	01 90       	ld	r0, Z+
    c62a:	00 20       	and	r0, r0
    c62c:	e9 f7       	brne	.-6      	; 0xc628 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
    c62e:	31 97       	sbiw	r30, 0x01	; 1
    c630:	ea 19       	sub	r30, r10
    c632:	fb 09       	sbc	r31, r11
    c634:	9e 2f       	mov	r25, r30
    c636:	4e 2f       	mov	r20, r30
    c638:	84 2f       	mov	r24, r20
    c63a:	89 1b       	sub	r24, r25
    c63c:	24 2f       	mov	r18, r20
    c63e:	30 e0       	ldi	r19, 0x00	; 0
    c640:	d4 01       	movw	r26, r8
    c642:	0d 90       	ld	r0, X+
    c644:	00 20       	and	r0, r0
    c646:	e9 f7       	brne	.-6      	; 0xc642 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb56>
    c648:	11 97       	sbiw	r26, 0x01	; 1
    c64a:	a8 19       	sub	r26, r8
    c64c:	b9 09       	sbc	r27, r9
    c64e:	2a 17       	cp	r18, r26
    c650:	3b 07       	cpc	r19, r27
    c652:	60 f4       	brcc	.+24     	; 0xc66c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
    {
      str1[cnt] = topic[f];
    c654:	d5 01       	movw	r26, r10
    c656:	a8 0f       	add	r26, r24
    c658:	b1 1d       	adc	r27, r1
    c65a:	28 0d       	add	r18, r8
    c65c:	39 1d       	adc	r19, r9
    c65e:	f9 01       	movw	r30, r18
    c660:	80 81       	ld	r24, Z
    c662:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
      str1[cnt + 1] = 0;
    c664:	11 96       	adiw	r26, 0x01	; 1
    c666:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c668:	4f 5f       	subi	r20, 0xFF	; 255
    c66a:	e6 cf       	rjmp	.-52     	; 0xc638 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c66c:	66 e7       	ldi	r22, 0x76	; 118
    c66e:	74 e0       	ldi	r23, 0x04	; 4
    c670:	c5 01       	movw	r24, r10
    c672:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    c676:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c678:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:296
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    c67a:	ad e4       	ldi	r26, 0x4D	; 77
    c67c:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
    pch = strtok (str1, "/");
    while (pch != NULL)
    c67e:	01 15       	cp	r16, r1
    c680:	11 05       	cpc	r17, r1
    c682:	e9 f1       	breq	.+122    	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xc12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2124
    {
      if (cnt == 0) id = atoi(pch);
    c684:	f1 10       	cpse	r15, r1
    c686:	0c c0       	rjmp	.+24     	; 0xc6a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb4>
    c688:	c8 01       	movw	r24, r16
    c68a:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c68e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
      if (id < AVAILABLE_PROGRAM)
    c690:	f7 e0       	ldi	r31, 0x07	; 7
    c692:	f8 17       	cp	r31, r24
    c694:	58 f5       	brcc	.+86     	; 0xc6ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xc00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    c696:	89 e3       	ldi	r24, 0x39	; 57
    c698:	95 e0       	ldi	r25, 0x05	; 5
    c69a:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c69e:	26 c0       	rjmp	.+76     	; 0xc6ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xc00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    c6a0:	27 e0       	ldi	r18, 0x07	; 7
    c6a2:	27 15       	cp	r18, r7
    c6a4:	c0 f3       	brcs	.-16     	; 0xc696 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2127
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    c6a6:	81 e0       	ldi	r24, 0x01	; 1
    c6a8:	f8 12       	cpse	r15, r24
    c6aa:	20 c0       	rjmp	.+64     	; 0xc6ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xc00>
    c6ac:	6f e4       	ldi	r22, 0x4F	; 79
    c6ae:	74 e0       	ldi	r23, 0x04	; 4
    c6b0:	c8 01       	movw	r24, r16
    c6b2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c6b6:	89 2b       	or	r24, r25
    c6b8:	29 f4       	brne	.+10     	; 0xc6c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbd8>
    c6ba:	65 ef       	ldi	r22, 0xF5	; 245
    c6bc:	7a e0       	ldi	r23, 0x0A	; 10
    c6be:	87 2d       	mov	r24, r7
    c6c0:	0e 94 46 43 	call	0x868c	; 0x868c <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    c6c4:	69 e5       	ldi	r22, 0x59	; 89
    c6c6:	74 e0       	ldi	r23, 0x04	; 4
    c6c8:	c8 01       	movw	r24, r16
    c6ca:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c6ce:	89 2b       	or	r24, r25
    c6d0:	69 f4       	brne	.+26     	; 0xc6ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xc00>
    c6d2:	85 ef       	ldi	r24, 0xF5	; 245
    c6d4:	9a e0       	ldi	r25, 0x0A	; 10
    c6d6:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
thermostat_program_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:296
    c6da:	7e 9c       	mul	r7, r14
    c6dc:	90 01       	movw	r18, r0
    c6de:	11 24       	eor	r1, r1
    c6e0:	68 2f       	mov	r22, r24
    c6e2:	c9 01       	movw	r24, r18
    c6e4:	8f 50       	subi	r24, 0x0F	; 15
    c6e6:	9e 4f       	sbci	r25, 0xFE	; 254
    c6e8:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    c6ec:	66 e7       	ldi	r22, 0x76	; 118
    c6ee:	74 e0       	ldi	r23, 0x04	; 4
    c6f0:	90 e0       	ldi	r25, 0x00	; 0
    c6f2:	80 e0       	ldi	r24, 0x00	; 0
    c6f4:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    c6f8:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
      cnt++;
    c6fa:	f3 94       	inc	r15
    c6fc:	c0 cf       	rjmp	.-128    	; 0xc67e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    c6fe:	6e e8       	ldi	r22, 0x8E	; 142
    c700:	76 e2       	ldi	r23, 0x26	; 38
    c702:	c5 01       	movw	r24, r10
    c704:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
  strcat(str1, device.nazev);
    c708:	64 e4       	ldi	r22, 0x44	; 68
    c70a:	7c e0       	ldi	r23, 0x0C	; 12
    c70c:	c5 01       	movw	r24, r10
    c70e:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2141
  strcat(str1, "/prog/clear");
    c712:	69 e4       	ldi	r22, 0x49	; 73
    c714:	75 e0       	ldi	r23, 0x05	; 5
    c716:	c5 01       	movw	r24, r10
    c718:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c71c:	f5 01       	movw	r30, r10
    c71e:	01 90       	ld	r0, Z+
    c720:	00 20       	and	r0, r0
    c722:	e9 f7       	brne	.-6      	; 0xc71e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc32>
    c724:	31 97       	sbiw	r30, 0x01	; 1
    c726:	af 01       	movw	r20, r30
    c728:	4a 19       	sub	r20, r10
    c72a:	5b 09       	sbc	r21, r11
    c72c:	b4 01       	movw	r22, r8
    c72e:	c5 01       	movw	r24, r10
    c730:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c734:	89 2b       	or	r24, r25
    c736:	09 f0       	breq	.+2      	; 0xc73a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc4e>
    c738:	52 c0       	rjmp	.+164    	; 0xc7de <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
  {
    mqtt_process_message++;
    c73a:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c73e:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c742:	01 96       	adiw	r24, 0x01	; 1
    c744:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c748:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2145
    id = atoi(my_payload);
    c74c:	85 ef       	ldi	r24, 0xF5	; 245
    c74e:	9a e0       	ldi	r25, 0x0A	; 10
    c750:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c754:	18 2f       	mov	r17, r24
    c756:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
    if (id < AVAILABLE_PROGRAM)
    c758:	a7 e0       	ldi	r26, 0x07	; 7
    c75a:	a8 17       	cp	r26, r24
    c75c:	08 f4       	brcc	.+2      	; 0xc760 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    c75e:	89 c0       	rjmp	.+274    	; 0xc872 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
    {
      strcpy(tmp2, "PROG");
    c760:	6e e0       	ldi	r22, 0x0E	; 14
    c762:	74 e0       	ldi	r23, 0x04	; 4
    c764:	ce 01       	movw	r24, r28
    c766:	88 5e       	subi	r24, 0xE8	; 232
    c768:	9e 4f       	sbci	r25, 0xFE	; 254
    c76a:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
      thermostat_program_set_name(id, tmp2);
    c76e:	be 01       	movw	r22, r28
    c770:	68 5e       	subi	r22, 0xE8	; 232
    c772:	7e 4f       	sbci	r23, 0xFE	; 254
    c774:	81 2f       	mov	r24, r17
    c776:	0e 94 46 43 	call	0x868c	; 0x868c <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:296
    c77a:	bd e4       	ldi	r27, 0x4D	; 77
    c77c:	1b 9f       	mul	r17, r27
    c77e:	c0 01       	movw	r24, r0
    c780:	11 24       	eor	r1, r1
    c782:	60 e0       	ldi	r22, 0x00	; 0
    c784:	8f 50       	subi	r24, 0x0F	; 15
    c786:	9e 4f       	sbci	r25, 0xFE	; 254
    c788:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    c78c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    c78e:	c1 2c       	mov	r12, r1
    c790:	e1 2c       	mov	r14, r1
    c792:	00 e0       	ldi	r16, 0x00	; 0
    c794:	20 e0       	ldi	r18, 0x00	; 0
    c796:	40 e0       	ldi	r20, 0x00	; 0
    c798:	61 2f       	mov	r22, r17
    c79a:	87 2d       	mov	r24, r7
    c79c:	0e 94 0a 43 	call	0x8614	; 0x8614 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2154
        thermostat_program_set_threshold(id, progid, 220);
    c7a0:	4c ed       	ldi	r20, 0xDC	; 220
    c7a2:	50 e0       	ldi	r21, 0x00	; 0
    c7a4:	61 2f       	mov	r22, r17
    c7a6:	87 2d       	mov	r24, r7
    c7a8:	0e 94 ee 42 	call	0x85dc	; 0x85dc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155
        thermostat_program_set_week(id, progid, 0);
    c7ac:	40 e0       	ldi	r20, 0x00	; 0
    c7ae:	61 2f       	mov	r22, r17
    c7b0:	87 2d       	mov	r24, r7
    c7b2:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    c7b6:	1f 5f       	subi	r17, 0xFF	; 255
    c7b8:	1b 30       	cpi	r17, 0x0B	; 11
    c7ba:	49 f7       	brne	.-46     	; 0xc78e <mqtt_callback(char*, unsigned char*, unsigned int)+0xca2>
    c7bc:	0b e5       	ldi	r16, 0x5B	; 91
    c7be:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    c7c0:	c8 01       	movw	r24, r16
    c7c2:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    c7c6:	78 12       	cpse	r7, r24
    c7c8:	04 c0       	rjmp	.+8      	; 0xc7d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xce6>
thermostat_ring_set_program_id():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    c7ca:	6f ef       	ldi	r22, 0xFF	; 255
    c7cc:	c8 01       	movw	r24, r16
    c7ce:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
    c7d2:	0f 5d       	subi	r16, 0xDF	; 223
    c7d4:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    c7d6:	01 15       	cp	r16, r1
    c7d8:	e2 e0       	ldi	r30, 0x02	; 2
    c7da:	1e 07       	cpc	r17, r30
    c7dc:	89 f7       	brne	.-30     	; 0xc7c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    c7de:	6e e8       	ldi	r22, 0x8E	; 142
    c7e0:	76 e2       	ldi	r23, 0x26	; 38
    c7e2:	c5 01       	movw	r24, r10
    c7e4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
  strcat(str1, device.nazev);
    c7e8:	64 e4       	ldi	r22, 0x44	; 68
    c7ea:	7c e0       	ldi	r23, 0x0C	; 12
    c7ec:	c5 01       	movw	r24, r10
    c7ee:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173
  strcat(str1, "/prog_interval/set/");
    c7f2:	67 e6       	ldi	r22, 0x67	; 103
    c7f4:	75 e0       	ldi	r23, 0x05	; 5
    c7f6:	c5 01       	movw	r24, r10
    c7f8:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c7fc:	f5 01       	movw	r30, r10
    c7fe:	01 90       	ld	r0, Z+
    c800:	00 20       	and	r0, r0
    c802:	e9 f7       	brne	.-6      	; 0xc7fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xd12>
    c804:	31 97       	sbiw	r30, 0x01	; 1
    c806:	af 01       	movw	r20, r30
    c808:	4a 19       	sub	r20, r10
    c80a:	5b 09       	sbc	r21, r11
    c80c:	b4 01       	movw	r22, r8
    c80e:	c5 01       	movw	r24, r10
    c810:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    c814:	89 2b       	or	r24, r25
    c816:	09 f0       	breq	.+2      	; 0xc81a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2e>
    c818:	04 c1       	rjmp	.+520    	; 0xca22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
  {
    mqtt_process_message++;
    c81a:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    c81e:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    c822:	01 96       	adiw	r24, 0x01	; 1
    c824:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    c828:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2178
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c82c:	f5 01       	movw	r30, r10
    c82e:	01 90       	ld	r0, Z+
    c830:	00 20       	and	r0, r0
    c832:	e9 f7       	brne	.-6      	; 0xc82e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd42>
    c834:	31 97       	sbiw	r30, 0x01	; 1
    c836:	ea 19       	sub	r30, r10
    c838:	fb 09       	sbc	r31, r11
    c83a:	9e 2f       	mov	r25, r30
    c83c:	4e 2f       	mov	r20, r30
    c83e:	84 2f       	mov	r24, r20
    c840:	89 1b       	sub	r24, r25
    c842:	24 2f       	mov	r18, r20
    c844:	30 e0       	ldi	r19, 0x00	; 0
    c846:	d4 01       	movw	r26, r8
    c848:	0d 90       	ld	r0, X+
    c84a:	00 20       	and	r0, r0
    c84c:	e9 f7       	brne	.-6      	; 0xc848 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5c>
    c84e:	11 97       	sbiw	r26, 0x01	; 1
    c850:	a8 19       	sub	r26, r8
    c852:	b9 09       	sbc	r27, r9
    c854:	2a 17       	cp	r18, r26
    c856:	3b 07       	cpc	r19, r27
    c858:	88 f4       	brcc	.+34     	; 0xc87c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
    {
      str1[cnt] = topic[f];
    c85a:	d5 01       	movw	r26, r10
    c85c:	a8 0f       	add	r26, r24
    c85e:	b1 1d       	adc	r27, r1
    c860:	28 0d       	add	r18, r8
    c862:	39 1d       	adc	r19, r9
    c864:	f9 01       	movw	r30, r18
    c866:	80 81       	ld	r24, Z
    c868:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
      str1[cnt + 1] = 0;
    c86a:	11 96       	adiw	r26, 0x01	; 1
    c86c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2178
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c86e:	4f 5f       	subi	r20, 0xFF	; 255
    c870:	e6 cf       	rjmp	.-52     	; 0xc83e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    c872:	85 e5       	ldi	r24, 0x55	; 85
    c874:	95 e0       	ldi	r25, 0x05	; 5
    c876:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    c87a:	b1 cf       	rjmp	.-158    	; 0xc7de <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c87c:	66 e7       	ldi	r22, 0x76	; 118
    c87e:	74 e0       	ldi	r23, 0x04	; 4
    c880:	c5 01       	movw	r24, r10
    c882:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    c886:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1881
  char tmp2[16];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    c888:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c88a:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    c88c:	e6 e0       	ldi	r30, 0x06	; 6
    c88e:	3e 2e       	mov	r3, r30
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:306
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    c890:	ff e0       	ldi	r31, 0x0F	; 15
    c892:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
    pch = strtok (str1, "/");
    while (pch != NULL)
    c894:	41 14       	cp	r4, r1
    c896:	51 04       	cpc	r5, r1
    c898:	09 f4       	brne	.+2      	; 0xc89c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb0>
    c89a:	c3 c0       	rjmp	.+390    	; 0xca22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
    {
      if (cnt == 0) id = atoi(pch);
    c89c:	d1 10       	cpse	r13, r1
    c89e:	7f c0       	rjmp	.+254    	; 0xc99e <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb2>
    c8a0:	c2 01       	movw	r24, r4
    c8a2:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c8a6:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    c8a8:	27 e0       	ldi	r18, 0x07	; 7
    c8aa:	27 15       	cp	r18, r7
    c8ac:	08 f4       	brcc	.+2      	; 0xc8b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdc4>
    c8ae:	b4 c0       	rjmp	.+360    	; 0xca18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2c>
    c8b0:	1b 30       	cpi	r17, 0x0B	; 11
    c8b2:	08 f0       	brcs	.+2      	; 0xc8b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdca>
    c8b4:	b1 c0       	rjmp	.+354    	; 0xca18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    c8b6:	82 e0       	ldi	r24, 0x02	; 2
    c8b8:	d8 12       	cpse	r13, r24
    c8ba:	a5 c0       	rjmp	.+330    	; 0xca06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1a>
    c8bc:	69 e5       	ldi	r22, 0x59	; 89
    c8be:	74 e0       	ldi	r23, 0x04	; 4
    c8c0:	c2 01       	movw	r24, r4
    c8c2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c8c6:	89 2b       	or	r24, r25
    c8c8:	b1 f5       	brne	.+108    	; 0xc936 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
    c8ca:	85 ef       	ldi	r24, 0xF5	; 245
    c8cc:	9a e0       	ldi	r25, 0x0A	; 10
    c8ce:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c8d2:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:303


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    c8d4:	ad e4       	ldi	r26, 0x4D	; 77
    c8d6:	7a 9e       	mul	r7, r26
    c8d8:	70 01       	movw	r14, r0
    c8da:	11 24       	eor	r1, r1
    c8dc:	bf e0       	ldi	r27, 0x0F	; 15
    c8de:	eb 1a       	sub	r14, r27
    c8e0:	be ef       	ldi	r27, 0xFE	; 254
    c8e2:	fb 0a       	sbc	r15, r27
    c8e4:	13 9d       	mul	r17, r3
    c8e6:	e0 0c       	add	r14, r0
    c8e8:	f1 1c       	adc	r15, r1
    c8ea:	11 24       	eor	r1, r1
    c8ec:	c7 01       	movw	r24, r14
    c8ee:	02 96       	adiw	r24, 0x02	; 2
    c8f0:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
    c8f4:	28 2e       	mov	r2, r24
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:304
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    c8f6:	c7 01       	movw	r24, r14
    c8f8:	03 96       	adiw	r24, 0x03	; 3
    c8fa:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:305
  *start_hour = (start >> 3) & 0b00011111;
    c8fe:	42 2d       	mov	r20, r2
    c900:	46 95       	lsr	r20
    c902:	46 95       	lsr	r20
    c904:	46 95       	lsr	r20
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:306
  *start_min = (start >> 1 & 0b00000011) * 15;
    c906:	22 2d       	mov	r18, r2
    c908:	30 e0       	ldi	r19, 0x00	; 0
    c90a:	35 95       	asr	r19
    c90c:	27 95       	ror	r18
    c90e:	23 70       	andi	r18, 0x03	; 3
    c910:	26 9d       	mul	r18, r6
    c912:	20 2d       	mov	r18, r0
    c914:	11 24       	eor	r1, r1
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:307
  *stop_hour = (stop >> 3) & 0b00011111;
    c916:	08 2f       	mov	r16, r24
    c918:	06 95       	lsr	r16
    c91a:	06 95       	lsr	r16
    c91c:	06 95       	lsr	r16
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:308
  *stop_min = (stop & 0b00000011) * 15;
    c91e:	83 70       	andi	r24, 0x03	; 3
    c920:	86 9d       	mul	r24, r6
    c922:	e0 2c       	mov	r14, r0
    c924:	11 24       	eor	r1, r1
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:309
  *active = start & 0b00000001;
    c926:	82 2d       	mov	r24, r2
    c928:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:381
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    c92a:	c8 16       	cp	r12, r24
    c92c:	21 f0       	breq	.+8      	; 0xc936 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4a>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:382
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    c92e:	61 2f       	mov	r22, r17
    c930:	87 2d       	mov	r24, r7
    c932:	0e 94 0a 43 	call	0x8614	; 0x8614 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    c936:	68 ec       	ldi	r22, 0xC8	; 200
    c938:	76 e0       	ldi	r23, 0x06	; 6
    c93a:	c2 01       	movw	r24, r4
    c93c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c940:	89 2b       	or	r24, r25
    c942:	49 f4       	brne	.+18     	; 0xc956 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe6a>
    c944:	85 ef       	ldi	r24, 0xF5	; 245
    c946:	9a e0       	ldi	r25, 0x0A	; 10
    c948:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c94c:	ac 01       	movw	r20, r24
    c94e:	61 2f       	mov	r22, r17
    c950:	87 2d       	mov	r24, r7
    c952:	0e 94 ee 42 	call	0x85dc	; 0x85dc <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    c956:	60 e1       	ldi	r22, 0x10	; 16
    c958:	77 e0       	ldi	r23, 0x07	; 7
    c95a:	c2 01       	movw	r24, r4
    c95c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    c960:	89 2b       	or	r24, r25
    c962:	09 f0       	breq	.+2      	; 0xc966 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7a>
    c964:	50 c0       	rjmp	.+160    	; 0xca06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1a>
thermostat_program_set_parse_interval():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:344
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    c966:	6b e7       	ldi	r22, 0x7B	; 123
    c968:	75 e0       	ldi	r23, 0x05	; 5
    c96a:	85 ef       	ldi	r24, 0xF5	; 245
    c96c:	9a e0       	ldi	r25, 0x0A	; 10
    c96e:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:341

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    c972:	f1 2c       	mov	r15, r1
    c974:	c1 2c       	mov	r12, r1
    c976:	e1 2c       	mov	r14, r1
    c978:	21 2c       	mov	r2, r1
    c97a:	41 2c       	mov	r4, r1
    c97c:	51 2c       	mov	r5, r1
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:343
  char *pch;
  cnt = 0;
    c97e:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:345
  pch = strtok (str, ",");
  while (pch != NULL)
    c980:	00 97       	sbiw	r24, 0x00	; 0
    c982:	99 f1       	breq	.+102    	; 0xc9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0xefe>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    c984:	01 11       	cpse	r16, r1
    c986:	13 c0       	rjmp	.+38     	; 0xc9ae <mqtt_callback(char*, unsigned char*, unsigned int)+0xec2>
    c988:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c98c:	58 2e       	mov	r5, r24
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:354
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    c98e:	6b e7       	ldi	r22, 0x7B	; 123
    c990:	75 e0       	ldi	r23, 0x05	; 5
    c992:	90 e0       	ldi	r25, 0x00	; 0
    c994:	80 e0       	ldi	r24, 0x00	; 0
    c996:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:355
    cnt++;
    c99a:	0f 5f       	subi	r16, 0xFF	; 255
    c99c:	f1 cf       	rjmp	.-30     	; 0xc980 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe94>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    c99e:	f1 e0       	ldi	r31, 0x01	; 1
    c9a0:	df 12       	cpse	r13, r31
    c9a2:	82 cf       	rjmp	.-252    	; 0xc8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdbc>
    c9a4:	c2 01       	movw	r24, r4
    c9a6:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9aa:	18 2f       	mov	r17, r24
    c9ac:	7d cf       	rjmp	.-262    	; 0xc8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdbc>
thermostat_program_set_parse_interval():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:348
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    c9ae:	01 30       	cpi	r16, 0x01	; 1
    c9b0:	21 f4       	brne	.+8      	; 0xc9ba <mqtt_callback(char*, unsigned char*, unsigned int)+0xece>
    c9b2:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9b6:	48 2e       	mov	r4, r24
    c9b8:	ea cf       	rjmp	.-44     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:349
    if (cnt == 2) stop_hour = atoi(pch);
    c9ba:	02 30       	cpi	r16, 0x02	; 2
    c9bc:	21 f4       	brne	.+8      	; 0xc9c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeda>
    c9be:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9c2:	28 2e       	mov	r2, r24
    c9c4:	e4 cf       	rjmp	.-56     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:350
    if (cnt == 3) stop_min = atoi(pch);
    c9c6:	03 30       	cpi	r16, 0x03	; 3
    c9c8:	21 f4       	brne	.+8      	; 0xc9d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xee6>
    c9ca:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9ce:	e8 2e       	mov	r14, r24
    c9d0:	de cf       	rjmp	.-68     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:351
    if (cnt == 4) week = atoi(pch);
    c9d2:	04 30       	cpi	r16, 0x04	; 4
    c9d4:	21 f4       	brne	.+8      	; 0xc9de <mqtt_callback(char*, unsigned char*, unsigned int)+0xef2>
    c9d6:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9da:	f8 2e       	mov	r15, r24
    c9dc:	d8 cf       	rjmp	.-80     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:352
    if (cnt == 5) active = atoi(pch);
    c9de:	05 30       	cpi	r16, 0x05	; 5
    c9e0:	b1 f6       	brne	.-84     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
    c9e2:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    c9e6:	c8 2e       	mov	r12, r24
    c9e8:	d2 cf       	rjmp	.-92     	; 0xc98e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:357

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    c9ea:	06 30       	cpi	r16, 0x06	; 6
    c9ec:	61 f4       	brne	.+24     	; 0xca06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1a>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:359
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    c9ee:	02 2d       	mov	r16, r2
    c9f0:	24 2d       	mov	r18, r4
    c9f2:	45 2d       	mov	r20, r5
    c9f4:	61 2f       	mov	r22, r17
    c9f6:	87 2d       	mov	r24, r7
    c9f8:	0e 94 0a 43 	call	0x8614	; 0x8614 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:360
    thermostat_program_set_week(program_id, interval_id, week);
    c9fc:	4f 2d       	mov	r20, r15
    c9fe:	61 2f       	mov	r22, r17
    ca00:	87 2d       	mov	r24, r7
    ca02:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2200
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    ca06:	66 e7       	ldi	r22, 0x76	; 118
    ca08:	74 e0       	ldi	r23, 0x04	; 4
    ca0a:	90 e0       	ldi	r25, 0x00	; 0
    ca0c:	80 e0       	ldi	r24, 0x00	; 0
    ca0e:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    ca12:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2201
      cnt++;
    ca14:	d3 94       	inc	r13
    ca16:	3e cf       	rjmp	.-388    	; 0xc894 <mqtt_callback(char*, unsigned char*, unsigned int)+0xda8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2198
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    ca18:	8d e7       	ldi	r24, 0x7D	; 125
    ca1a:	95 e0       	ldi	r25, 0x05	; 5
    ca1c:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    ca20:	f2 cf       	rjmp	.-28     	; 0xca06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    ca22:	6e e8       	ldi	r22, 0x8E	; 142
    ca24:	76 e2       	ldi	r23, 0x26	; 38
    ca26:	c5 01       	movw	r24, r10
    ca28:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
  strcat(str1, device.nazev);
    ca2c:	64 e4       	ldi	r22, 0x44	; 68
    ca2e:	7c e0       	ldi	r23, 0x0C	; 12
    ca30:	c5 01       	movw	r24, r10
    ca32:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
  strcat(str1, "/ring/default");
    ca36:	66 e9       	ldi	r22, 0x96	; 150
    ca38:	75 e0       	ldi	r23, 0x05	; 5
    ca3a:	c5 01       	movw	r24, r10
    ca3c:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
  if (strcmp(str1, topic) == 0)
    ca40:	b4 01       	movw	r22, r8
    ca42:	c5 01       	movw	r24, r10
    ca44:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ca48:	89 2b       	or	r24, r25
    ca4a:	a1 f4       	brne	.+40     	; 0xca74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
  {
    mqtt_process_message++;
    ca4c:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    ca50:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    ca54:	01 96       	adiw	r24, 0x01	; 1
    ca56:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    ca5a:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
    default_ring = atoi(my_payload);
    ca5e:	85 ef       	ldi	r24, 0xF5	; 245
    ca60:	9a e0       	ldi	r25, 0x0A	; 10
    ca62:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    ca66:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    ca6a:	68 2f       	mov	r22, r24
    ca6c:	8c e5       	ldi	r24, 0x5C	; 92
    ca6e:	90 e0       	ldi	r25, 0x00	; 0
    ca70:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    ca74:	6e e8       	ldi	r22, 0x8E	; 142
    ca76:	76 e2       	ldi	r23, 0x26	; 38
    ca78:	c5 01       	movw	r24, r10
    ca7a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
  strcat(str1, device.nazev);
    ca7e:	64 e4       	ldi	r22, 0x44	; 68
    ca80:	7c e0       	ldi	r23, 0x0C	; 12
    ca82:	c5 01       	movw	r24, r10
    ca84:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
  strcat(str1, "/ring/get/");
    ca88:	64 ea       	ldi	r22, 0xA4	; 164
    ca8a:	75 e0       	ldi	r23, 0x05	; 5
    ca8c:	c5 01       	movw	r24, r10
    ca8e:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ca92:	f5 01       	movw	r30, r10
    ca94:	01 90       	ld	r0, Z+
    ca96:	00 20       	and	r0, r0
    ca98:	e9 f7       	brne	.-6      	; 0xca94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa8>
    ca9a:	31 97       	sbiw	r30, 0x01	; 1
    ca9c:	8f 01       	movw	r16, r30
    ca9e:	0a 19       	sub	r16, r10
    caa0:	1b 09       	sbc	r17, r11
    caa2:	a8 01       	movw	r20, r16
    caa4:	b4 01       	movw	r22, r8
    caa6:	c5 01       	movw	r24, r10
    caa8:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    caac:	89 2b       	or	r24, r25
    caae:	09 f0       	breq	.+2      	; 0xcab2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc6>
    cab0:	9c c0       	rjmp	.+312    	; 0xcbea <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2223
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cab2:	90 2f       	mov	r25, r16
    cab4:	80 2f       	mov	r24, r16
    cab6:	89 1b       	sub	r24, r25
    cab8:	20 2f       	mov	r18, r16
    caba:	30 e0       	ldi	r19, 0x00	; 0
    cabc:	f4 01       	movw	r30, r8
    cabe:	01 90       	ld	r0, Z+
    cac0:	00 20       	and	r0, r0
    cac2:	e9 f7       	brne	.-6      	; 0xcabe <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd2>
    cac4:	31 97       	sbiw	r30, 0x01	; 1
    cac6:	e8 19       	sub	r30, r8
    cac8:	f9 09       	sbc	r31, r9
    caca:	2e 17       	cp	r18, r30
    cacc:	3f 07       	cpc	r19, r31
    cace:	58 f4       	brcc	.+22     	; 0xcae6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xffa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
    {
      str1[cnt] = topic[f];
    cad0:	f5 01       	movw	r30, r10
    cad2:	e8 0f       	add	r30, r24
    cad4:	f1 1d       	adc	r31, r1
    cad6:	28 0d       	add	r18, r8
    cad8:	39 1d       	adc	r19, r9
    cada:	d9 01       	movw	r26, r18
    cadc:	8c 91       	ld	r24, X
    cade:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2226
      str1[cnt + 1] = 0;
    cae0:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2223
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cae2:	0f 5f       	subi	r16, 0xFF	; 255
    cae4:	e7 cf       	rjmp	.-50     	; 0xcab4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2230
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cae6:	66 e7       	ldi	r22, 0x76	; 118
    cae8:	74 e0       	ldi	r23, 0x04	; 4
    caea:	c5 01       	movw	r24, r10
    caec:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    caf0:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2231
    pch = strtok (str1, "/");
    while (pch != NULL)
    caf2:	00 97       	sbiw	r24, 0x00	; 0
    caf4:	09 f4       	brne	.+2      	; 0xcaf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x100c>
    caf6:	79 c0       	rjmp	.+242    	; 0xcbea <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2233
    {
      if (cnt == 0) id = atoi(my_payload);
    caf8:	61 10       	cpse	r6, r1
    cafa:	0e c0       	rjmp	.+28     	; 0xcb18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x102c>
    cafc:	85 ef       	ldi	r24, 0xF5	; 245
    cafe:	9a e0       	ldi	r25, 0x0A	; 10
    cb00:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    cb04:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
      if (id < MAX_THERMOSTAT)
    cb06:	b4 e0       	ldi	r27, 0x04	; 4
    cb08:	b8 17       	cp	r27, r24
    cb0a:	08 f0       	brcs	.+2      	; 0xcb0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1022>
    cb0c:	66 c0       	rjmp	.+204    	; 0xcbda <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    cb0e:	83 eb       	ldi	r24, 0xB3	; 179
    cb10:	95 e0       	ldi	r25, 0x05	; 5
    cb12:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    cb16:	61 c0       	rjmp	.+194    	; 0xcbda <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    cb18:	e4 e0       	ldi	r30, 0x04	; 4
    cb1a:	e7 15       	cp	r30, r7
    cb1c:	c0 f3       	brcs	.-16     	; 0xcb0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1022>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    cb1e:	f1 e0       	ldi	r31, 0x01	; 1
    cb20:	6f 12       	cpse	r6, r31
    cb22:	5b c0       	rjmp	.+182    	; 0xcbda <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ee>
    cb24:	6f ea       	ldi	r22, 0xAF	; 175
    cb26:	75 e0       	ldi	r23, 0x05	; 5
    cb28:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cb2c:	89 2b       	or	r24, r25
    cb2e:	09 f0       	breq	.+2      	; 0xcb32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1046>
    cb30:	54 c0       	rjmp	.+168    	; 0xcbda <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ee>
thermostat_get_pid_p():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    cb32:	c7 2c       	mov	r12, r7
    cb34:	d1 2c       	mov	r13, r1
    cb36:	76 01       	movw	r14, r12
    cb38:	ee 0c       	add	r14, r14
    cb3a:	ff 1c       	adc	r15, r15
    cb3c:	ee 0c       	add	r14, r14
    cb3e:	ff 1c       	adc	r15, r15
    cb40:	f7 01       	movw	r30, r14
    cb42:	e7 57       	subi	r30, 0x77	; 119
    cb44:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    cb46:	60 81       	ld	r22, Z
    cb48:	71 81       	ldd	r23, Z+1	; 0x01
    cb4a:	82 81       	ldd	r24, Z+2	; 0x02
    cb4c:	93 81       	ldd	r25, Z+3	; 0x03
    cb4e:	8e 01       	movw	r16, r28
    cb50:	08 5b       	subi	r16, 0xB8	; 184
    cb52:	1f 4f       	sbci	r17, 0xFF	; 255
    cb54:	22 e0       	ldi	r18, 0x02	; 2
    cb56:	47 e0       	ldi	r20, 0x07	; 7
    cb58:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    cb5c:	98 01       	movw	r18, r16
    cb5e:	4b ef       	ldi	r20, 0xFB	; 251
    cb60:	56 e0       	ldi	r21, 0x06	; 6
    cb62:	67 2d       	mov	r22, r7
    cb64:	8f ea       	ldi	r24, 0xAF	; 175
    cb66:	95 e0       	ldi	r25, 0x05	; 5
    cb68:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_get_pid_i():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    cb6c:	f7 01       	movw	r30, r14
    cb6e:	e3 56       	subi	r30, 0x63	; 99
    cb70:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    cb72:	60 81       	ld	r22, Z
    cb74:	71 81       	ldd	r23, Z+1	; 0x01
    cb76:	82 81       	ldd	r24, Z+2	; 0x02
    cb78:	93 81       	ldd	r25, Z+3	; 0x03
    cb7a:	22 e0       	ldi	r18, 0x02	; 2
    cb7c:	47 e0       	ldi	r20, 0x07	; 7
    cb7e:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    cb82:	98 01       	movw	r18, r16
    cb84:	42 e0       	ldi	r20, 0x02	; 2
    cb86:	57 e0       	ldi	r21, 0x07	; 7
    cb88:	67 2d       	mov	r22, r7
    cb8a:	8f ea       	ldi	r24, 0xAF	; 175
    cb8c:	95 e0       	ldi	r25, 0x05	; 5
    cb8e:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_get_pid_d():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    cb92:	f7 01       	movw	r30, r14
    cb94:	ef 54       	subi	r30, 0x4F	; 79
    cb96:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    cb98:	60 81       	ld	r22, Z
    cb9a:	71 81       	ldd	r23, Z+1	; 0x01
    cb9c:	82 81       	ldd	r24, Z+2	; 0x02
    cb9e:	93 81       	ldd	r25, Z+3	; 0x03
    cba0:	22 e0       	ldi	r18, 0x02	; 2
    cba2:	47 e0       	ldi	r20, 0x07	; 7
    cba4:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    cba8:	98 01       	movw	r18, r16
    cbaa:	49 e0       	ldi	r20, 0x09	; 9
    cbac:	57 e0       	ldi	r21, 0x07	; 7
    cbae:	67 2d       	mov	r22, r7
    cbb0:	8f ea       	ldi	r24, 0xAF	; 175
    cbb2:	95 e0       	ldi	r25, 0x05	; 5
    cbb4:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_get_pid_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    cbb8:	f6 01       	movw	r30, r12
    cbba:	eb 53       	subi	r30, 0x3B	; 59
    cbbc:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
  itoa(thermostat_get_pid_time(idx), payload, 10);
    cbbe:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cbc0:	4a e0       	ldi	r20, 0x0A	; 10
    cbc2:	b8 01       	movw	r22, r16
    cbc4:	90 e0       	ldi	r25, 0x00	; 0
    cbc6:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    cbca:	98 01       	movw	r18, r16
    cbcc:	40 e1       	ldi	r20, 0x10	; 16
    cbce:	57 e0       	ldi	r21, 0x07	; 7
    cbd0:	67 2d       	mov	r22, r7
    cbd2:	8f ea       	ldi	r24, 0xAF	; 175
    cbd4:	95 e0       	ldi	r25, 0x05	; 5
    cbd6:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2242
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    cbda:	66 e7       	ldi	r22, 0x76	; 118
    cbdc:	74 e0       	ldi	r23, 0x04	; 4
    cbde:	90 e0       	ldi	r25, 0x00	; 0
    cbe0:	80 e0       	ldi	r24, 0x00	; 0
    cbe2:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
      cnt++;
    cbe6:	63 94       	inc	r6
    cbe8:	84 cf       	rjmp	.-248    	; 0xcaf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1006>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    cbea:	6e e8       	ldi	r22, 0x8E	; 142
    cbec:	76 e2       	ldi	r23, 0x26	; 38
    cbee:	c5 01       	movw	r24, r10
    cbf0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
  strcat(str1, device.nazev);
    cbf4:	64 e4       	ldi	r22, 0x44	; 68
    cbf6:	7c e0       	ldi	r23, 0x0C	; 12
    cbf8:	c5 01       	movw	r24, r10
    cbfa:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
  strcat(str1, "/ring/set/");
    cbfe:	63 ec       	ldi	r22, 0xC3	; 195
    cc00:	75 e0       	ldi	r23, 0x05	; 5
    cc02:	c5 01       	movw	r24, r10
    cc04:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cc08:	f5 01       	movw	r30, r10
    cc0a:	01 90       	ld	r0, Z+
    cc0c:	00 20       	and	r0, r0
    cc0e:	e9 f7       	brne	.-6      	; 0xcc0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x111e>
    cc10:	31 97       	sbiw	r30, 0x01	; 1
    cc12:	8f 01       	movw	r16, r30
    cc14:	0a 19       	sub	r16, r10
    cc16:	1b 09       	sbc	r17, r11
    cc18:	a8 01       	movw	r20, r16
    cc1a:	b4 01       	movw	r22, r8
    cc1c:	c5 01       	movw	r24, r10
    cc1e:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    cc22:	89 2b       	or	r24, r25
    cc24:	09 f0       	breq	.+2      	; 0xcc28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x113c>
    cc26:	d1 c1       	rjmp	.+930    	; 0xcfca <mqtt_callback(char*, unsigned char*, unsigned int)+0x14de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc28:	90 2f       	mov	r25, r16
    cc2a:	80 2f       	mov	r24, r16
    cc2c:	89 1b       	sub	r24, r25
    cc2e:	20 2f       	mov	r18, r16
    cc30:	30 e0       	ldi	r19, 0x00	; 0
    cc32:	f4 01       	movw	r30, r8
    cc34:	01 90       	ld	r0, Z+
    cc36:	00 20       	and	r0, r0
    cc38:	e9 f7       	brne	.-6      	; 0xcc34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1148>
    cc3a:	31 97       	sbiw	r30, 0x01	; 1
    cc3c:	e8 19       	sub	r30, r8
    cc3e:	f9 09       	sbc	r31, r9
    cc40:	2e 17       	cp	r18, r30
    cc42:	3f 07       	cpc	r19, r31
    cc44:	58 f4       	brcc	.+22     	; 0xcc5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1170>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
    {
      str1[cnt] = topic[f];
    cc46:	f5 01       	movw	r30, r10
    cc48:	e8 0f       	add	r30, r24
    cc4a:	f1 1d       	adc	r31, r1
    cc4c:	28 0d       	add	r18, r8
    cc4e:	39 1d       	adc	r19, r9
    cc50:	d9 01       	movw	r26, r18
    cc52:	8c 91       	ld	r24, X
    cc54:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
      str1[cnt + 1] = 0;
    cc56:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc58:	0f 5f       	subi	r16, 0xFF	; 255
    cc5a:	e7 cf       	rjmp	.-50     	; 0xcc2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x113e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cc5c:	66 e7       	ldi	r22, 0x76	; 118
    cc5e:	74 e0       	ldi	r23, 0x04	; 4
    cc60:	c5 01       	movw	r24, r10
    cc62:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    cc66:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cc68:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    cc6a:	51 e2       	ldi	r21, 0x21	; 33
    cc6c:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
    pch = strtok (str1, "/");
    while (pch != NULL)
    cc6e:	01 15       	cp	r16, r1
    cc70:	11 05       	cpc	r17, r1
    cc72:	09 f4       	brne	.+2      	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118a>
    cc74:	aa c1       	rjmp	.+852    	; 0xcfca <mqtt_callback(char*, unsigned char*, unsigned int)+0x14de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
    {
      if (cnt == 0) id = atoi(pch);
    cc76:	d1 10       	cpse	r13, r1
    cc78:	0d c0       	rjmp	.+26     	; 0xcc94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a8>
    cc7a:	c8 01       	movw	r24, r16
    cc7c:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    cc80:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
      if (id < MAX_THERMOSTAT)
    cc82:	b4 e0       	ldi	r27, 0x04	; 4
    cc84:	b8 17       	cp	r27, r24
    cc86:	08 f0       	brcs	.+2      	; 0xcc8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x119e>
    cc88:	97 c1       	rjmp	.+814    	; 0xcfb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    cc8a:	83 eb       	ldi	r24, 0xB3	; 179
    cc8c:	95 e0       	ldi	r25, 0x05	; 5
    cc8e:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    cc92:	92 c1       	rjmp	.+804    	; 0xcfb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    cc94:	e4 e0       	ldi	r30, 0x04	; 4
    cc96:	e7 15       	cp	r30, r7
    cc98:	c0 f3       	brcs	.-16     	; 0xcc8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x119e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    cc9a:	f1 e0       	ldi	r31, 0x01	; 1
    cc9c:	df 12       	cpse	r13, r31
    cc9e:	8c c1       	rjmp	.+792    	; 0xcfb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
    cca0:	6f e4       	ldi	r22, 0x4F	; 79
    cca2:	74 e0       	ldi	r23, 0x04	; 4
    cca4:	c8 01       	movw	r24, r16
    cca6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ccaa:	89 2b       	or	r24, r25
    ccac:	29 f4       	brne	.+10     	; 0xccb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11cc>
    ccae:	65 ef       	ldi	r22, 0xF5	; 245
    ccb0:	7a e0       	ldi	r23, 0x0A	; 10
    ccb2:	87 2d       	mov	r24, r7
    ccb4:	0e 94 c9 43 	call	0x8792	; 0x8792 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    ccb8:	62 ed       	ldi	r22, 0xD2	; 210
    ccba:	76 e0       	ldi	r23, 0x06	; 6
    ccbc:	c8 01       	movw	r24, r16
    ccbe:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ccc2:	89 2b       	or	r24, r25
    ccc4:	81 f4       	brne	.+32     	; 0xcce6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    ccc6:	85 ef       	ldi	r24, 0xF5	; 245
    ccc8:	9a e0       	ldi	r25, 0x0A	; 10
    ccca:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    ccce:	88 30       	cpi	r24, 0x08	; 8
    ccd0:	91 05       	cpc	r25, r1
    ccd2:	4c f4       	brge	.+18     	; 0xcce6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fa>
thermostat_ring_set_program_id():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    ccd4:	7e 9c       	mul	r7, r14
    ccd6:	90 01       	movw	r18, r0
    ccd8:	11 24       	eor	r1, r1
    ccda:	68 2f       	mov	r22, r24
    ccdc:	c9 01       	movw	r24, r18
    ccde:	85 5a       	subi	r24, 0xA5	; 165
    cce0:	9e 4f       	sbci	r25, 0xFE	; 254
    cce2:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    cce6:	6a ed       	ldi	r22, 0xDA	; 218
    cce8:	76 e0       	ldi	r23, 0x06	; 6
    ccea:	c8 01       	movw	r24, r16
    ccec:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ccf0:	89 2b       	or	r24, r25
    ccf2:	79 f4       	brne	.+30     	; 0xcd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1226>
    ccf4:	85 ef       	ldi	r24, 0xF5	; 245
    ccf6:	9a e0       	ldi	r25, 0x0A	; 10
    ccf8:	0e 94 33 98 	call	0x13066	; 0x13066 <atof>
    ccfc:	20 e0       	ldi	r18, 0x00	; 0
    ccfe:	30 e0       	ldi	r19, 0x00	; 0
    cd00:	40 e2       	ldi	r20, 0x20	; 32
    cd02:	51 e4       	ldi	r21, 0x41	; 65
    cd04:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
    cd08:	0e 94 92 a3 	call	0x14724	; 0x14724 <__fixsfsi>
    cd0c:	87 2d       	mov	r24, r7
    cd0e:	0e 94 b2 43 	call	0x8764	; 0x8764 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    cd12:	68 ec       	ldi	r22, 0xC8	; 200
    cd14:	76 e0       	ldi	r23, 0x06	; 6
    cd16:	c8 01       	movw	r24, r16
    cd18:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd1c:	89 2b       	or	r24, r25
    cd1e:	41 f4       	brne	.+16     	; 0xcd30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1244>
    cd20:	85 ef       	ldi	r24, 0xF5	; 245
    cd22:	9a e0       	ldi	r25, 0x0A	; 10
    cd24:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    cd28:	bc 01       	movw	r22, r24
    cd2a:	87 2d       	mov	r24, r7
    cd2c:	0e 94 b2 43 	call	0x8764	; 0x8764 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    cd30:	66 ee       	ldi	r22, 0xE6	; 230
    cd32:	76 e0       	ldi	r23, 0x06	; 6
    cd34:	c8 01       	movw	r24, r16
    cd36:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd3a:	89 2b       	or	r24, r25
    cd3c:	09 f0       	breq	.+2      	; 0xcd40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1254>
    cd3e:	56 c0       	rjmp	.+172    	; 0xcdec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1300>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    cd40:	6e ec       	ldi	r22, 0xCE	; 206
    cd42:	75 e0       	ldi	r23, 0x05	; 5
    cd44:	85 ef       	ldi	r24, 0xF5	; 245
    cd46:	9a e0       	ldi	r25, 0x0A	; 10
    cd48:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd4c:	ff 24       	eor	r15, r15
    cd4e:	f3 94       	inc	r15
    cd50:	89 2b       	or	r24, r25
    cd52:	09 f0       	breq	.+2      	; 0xcd56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126a>
    cd54:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3012
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    cd56:	63 ed       	ldi	r22, 0xD3	; 211
    cd58:	75 e0       	ldi	r23, 0x05	; 5
    cd5a:	85 ef       	ldi	r24, 0xF5	; 245
    cd5c:	9a e0       	ldi	r25, 0x0A	; 10
    cd5e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd62:	89 2b       	or	r24, r25
    cd64:	11 f4       	brne	.+4      	; 0xcd6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x127e>
_Z13mqtt_callbackPcPhj():
    cd66:	43 e0       	ldi	r20, 0x03	; 3
    cd68:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    cd6a:	6a ed       	ldi	r22, 0xDA	; 218
    cd6c:	75 e0       	ldi	r23, 0x05	; 5
    cd6e:	85 ef       	ldi	r24, 0xF5	; 245
    cd70:	9a e0       	ldi	r25, 0x0A	; 10
    cd72:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd76:	89 2b       	or	r24, r25
    cd78:	11 f4       	brne	.+4      	; 0xcd7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1292>
_Z13mqtt_callbackPcPhj():
    cd7a:	32 e0       	ldi	r19, 0x02	; 2
    cd7c:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3014
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    cd7e:	6f ed       	ldi	r22, 0xDF	; 223
    cd80:	75 e0       	ldi	r23, 0x05	; 5
    cd82:	85 ef       	ldi	r24, 0xF5	; 245
    cd84:	9a e0       	ldi	r25, 0x0A	; 10
    cd86:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd8a:	89 2b       	or	r24, r25
    cd8c:	11 f4       	brne	.+4      	; 0xcd92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12a6>
_Z13mqtt_callbackPcPhj():
    cd8e:	24 e0       	ldi	r18, 0x04	; 4
    cd90:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    cd92:	64 ee       	ldi	r22, 0xE4	; 228
    cd94:	75 e0       	ldi	r23, 0x05	; 5
    cd96:	85 ef       	ldi	r24, 0xF5	; 245
    cd98:	9a e0       	ldi	r25, 0x0A	; 10
    cd9a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cd9e:	89 2b       	or	r24, r25
    cda0:	11 f4       	brne	.+4      	; 0xcda6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
_Z13mqtt_callbackPcPhj():
    cda2:	96 e0       	ldi	r25, 0x06	; 6
    cda4:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    cda6:	c8 5d       	subi	r28, 0xD8	; 216
    cda8:	de 4f       	sbci	r29, 0xFE	; 254
    cdaa:	f8 82       	st	Y, r15
    cdac:	c8 52       	subi	r28, 0x28	; 40
    cdae:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    cdb0:	7e 9c       	mul	r7, r14
    cdb2:	c0 01       	movw	r24, r0
    cdb4:	11 24       	eor	r1, r1
    cdb6:	6f 2d       	mov	r22, r15
    cdb8:	82 5a       	subi	r24, 0xA2	; 162
    cdba:	9e 4f       	sbci	r25, 0xFE	; 254
    cdbc:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2291
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    cdc0:	c8 5d       	subi	r28, 0xD8	; 216
    cdc2:	de 4f       	sbci	r29, 0xFE	; 254
    cdc4:	88 81       	ld	r24, Y
    cdc6:	c8 52       	subi	r28, 0x28	; 40
    cdc8:	d1 40       	sbci	r29, 0x01	; 1
    cdca:	83 30       	cpi	r24, 0x03	; 3
    cdcc:	21 f4       	brne	.+8      	; 0xcdd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    cdce:	60 e0       	ldi	r22, 0x00	; 0
    cdd0:	87 2d       	mov	r24, r7
    cdd2:	0e 94 f9 96 	call	0x12df2	; 0x12df2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
          if (active == TERM_MODE_MAN_COOL)
    cdd6:	c8 5d       	subi	r28, 0xD8	; 216
    cdd8:	de 4f       	sbci	r29, 0xFE	; 254
    cdda:	88 81       	ld	r24, Y
    cddc:	c8 52       	subi	r28, 0x28	; 40
    cdde:	d1 40       	sbci	r29, 0x01	; 1
    cde0:	85 30       	cpi	r24, 0x05	; 5
    cde2:	21 f4       	brne	.+8      	; 0xcdec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1300>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    cde4:	61 e0       	ldi	r22, 0x01	; 1
    cde6:	87 2d       	mov	r24, r7
    cde8:	0e 94 f9 96 	call	0x12df2	; 0x12df2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    cdec:	6b ee       	ldi	r22, 0xEB	; 235
    cdee:	76 e0       	ldi	r23, 0x06	; 6
    cdf0:	c8 01       	movw	r24, r16
    cdf2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cdf6:	89 2b       	or	r24, r25
    cdf8:	41 f5       	brne	.+80     	; 0xce4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
        {
          active = atoi(my_payload);
    cdfa:	85 ef       	ldi	r24, 0xF5	; 245
    cdfc:	9a e0       	ldi	r25, 0x0A	; 10
    cdfe:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    ce02:	c8 5d       	subi	r28, 0xD8	; 216
    ce04:	de 4f       	sbci	r29, 0xFE	; 254
    ce06:	88 83       	st	Y, r24
    ce08:	c8 52       	subi	r28, 0x28	; 40
    ce0a:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:180
    ce0c:	7e 9c       	mul	r7, r14
    ce0e:	90 01       	movw	r18, r0
    ce10:	11 24       	eor	r1, r1
    ce12:	68 2f       	mov	r22, r24
    ce14:	c9 01       	movw	r24, r18
    ce16:	82 5a       	subi	r24, 0xA2	; 162
    ce18:	9e 4f       	sbci	r25, 0xFE	; 254
    ce1a:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    ce1e:	c8 5d       	subi	r28, 0xD8	; 216
    ce20:	de 4f       	sbci	r29, 0xFE	; 254
    ce22:	88 81       	ld	r24, Y
    ce24:	c8 52       	subi	r28, 0x28	; 40
    ce26:	d1 40       	sbci	r29, 0x01	; 1
    ce28:	83 30       	cpi	r24, 0x03	; 3
    ce2a:	21 f4       	brne	.+8      	; 0xce34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2301
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    ce2c:	60 e0       	ldi	r22, 0x00	; 0
    ce2e:	87 2d       	mov	r24, r7
    ce30:	0e 94 f9 96 	call	0x12df2	; 0x12df2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
          if (active == TERM_MODE_MAN_COOL)
    ce34:	c8 5d       	subi	r28, 0xD8	; 216
    ce36:	de 4f       	sbci	r29, 0xFE	; 254
    ce38:	88 81       	ld	r24, Y
    ce3a:	c8 52       	subi	r28, 0x28	; 40
    ce3c:	d1 40       	sbci	r29, 0x01	; 1
    ce3e:	85 30       	cpi	r24, 0x05	; 5
    ce40:	21 f4       	brne	.+8      	; 0xce4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    ce42:	61 e0       	ldi	r22, 0x01	; 1
    ce44:	87 2d       	mov	r24, r7
    ce46:	0e 94 f9 96 	call	0x12df2	; 0x12df2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    ce4a:	65 e5       	ldi	r22, 0x55	; 85
    ce4c:	74 e0       	ldi	r23, 0x04	; 4
    ce4e:	c8 01       	movw	r24, r16
    ce50:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ce54:	89 2b       	or	r24, r25
    ce56:	69 f4       	brne	.+26     	; 0xce72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1386>
    ce58:	85 ef       	ldi	r24, 0xF5	; 245
    ce5a:	9a e0       	ldi	r25, 0x0A	; 10
    ce5c:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    ce60:	7e 9c       	mul	r7, r14
    ce62:	90 01       	movw	r18, r0
    ce64:	11 24       	eor	r1, r1
    ce66:	68 2f       	mov	r22, r24
    ce68:	c9 01       	movw	r24, r18
    ce6a:	84 5a       	subi	r24, 0xA4	; 164
    ce6c:	9e 4f       	sbci	r25, 0xFE	; 254
    ce6e:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    ce72:	64 e5       	ldi	r22, 0x54	; 84
    ce74:	74 e0       	ldi	r23, 0x04	; 4
    ce76:	c8 01       	movw	r24, r16
    ce78:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    ce7c:	89 2b       	or	r24, r25
    ce7e:	69 f4       	brne	.+26     	; 0xce9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ae>
    ce80:	85 ef       	ldi	r24, 0xF5	; 245
    ce82:	9a e0       	ldi	r25, 0x0A	; 10
    ce84:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    ce88:	60 e1       	ldi	r22, 0x10	; 16
    ce8a:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:170
    ce8c:	7e 9c       	mul	r7, r14
    ce8e:	c0 01       	movw	r24, r0
    ce90:	11 24       	eor	r1, r1
    ce92:	84 5a       	subi	r24, 0xA4	; 164
    ce94:	9e 4f       	sbci	r25, 0xFE	; 254
    ce96:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    ce9a:	69 e5       	ldi	r22, 0x59	; 89
    ce9c:	74 e0       	ldi	r23, 0x04	; 4
    ce9e:	c8 01       	movw	r24, r16
    cea0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cea4:	89 2b       	or	r24, r25
    cea6:	69 f4       	brne	.+26     	; 0xcec2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13d6>
    cea8:	85 ef       	ldi	r24, 0xF5	; 245
    ceaa:	9a e0       	ldi	r25, 0x0A	; 10
    ceac:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    ceb0:	7e 9c       	mul	r7, r14
    ceb2:	90 01       	movw	r18, r0
    ceb4:	11 24       	eor	r1, r1
    ceb6:	68 2f       	mov	r22, r24
    ceb8:	c9 01       	movw	r24, r18
    ceba:	83 5a       	subi	r24, 0xA3	; 163
    cebc:	9e 4f       	sbci	r25, 0xFE	; 254
    cebe:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    cec2:	60 ef       	ldi	r22, 0xF0	; 240
    cec4:	76 e0       	ldi	r23, 0x06	; 6
    cec6:	c8 01       	movw	r24, r16
    cec8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cecc:	89 2b       	or	r24, r25
    cece:	69 f4       	brne	.+26     	; 0xceea <mqtt_callback(char*, unsigned char*, unsigned int)+0x13fe>
    ced0:	85 ef       	ldi	r24, 0xF5	; 245
    ced2:	9a e0       	ldi	r25, 0x0A	; 10
    ced4:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    ced8:	7e 9c       	mul	r7, r14
    ceda:	90 01       	movw	r18, r0
    cedc:	11 24       	eor	r1, r1
    cede:	68 2f       	mov	r22, r24
    cee0:	c9 01       	movw	r24, r18
    cee2:	81 5a       	subi	r24, 0xA1	; 161
    cee4:	9e 4f       	sbci	r25, 0xFE	; 254
    cee6:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    ceea:	67 ef       	ldi	r22, 0xF7	; 247
    ceec:	76 e0       	ldi	r23, 0x06	; 6
    ceee:	c8 01       	movw	r24, r16
    cef0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cef4:	89 2b       	or	r24, r25
    cef6:	a1 f4       	brne	.+40     	; 0xcf20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1434>
    cef8:	85 ef       	ldi	r24, 0xF5	; 245
    cefa:	9a e0       	ldi	r25, 0x0A	; 10
    cefc:	0e 94 33 98 	call	0x13066	; 0x13066 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:242
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    cf00:	24 e0       	ldi	r18, 0x04	; 4
    cf02:	72 9e       	mul	r7, r18
    cf04:	f0 01       	movw	r30, r0
    cf06:	11 24       	eor	r1, r1
    cf08:	e7 57       	subi	r30, 0x77	; 119
    cf0a:	f6 4f       	sbci	r31, 0xF6	; 246
    cf0c:	60 83       	st	Z, r22
    cf0e:	71 83       	std	Z+1, r23	; 0x01
    cf10:	82 83       	std	Z+2, r24	; 0x02
    cf12:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:243
  thermostat_ring_update_pid_parameters(id);
    cf14:	87 2d       	mov	r24, r7
    cf16:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:244
  thermostat_ring_set_pid_eeprom(id);
    cf1a:	87 2d       	mov	r24, r7
    cf1c:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    cf20:	6e ef       	ldi	r22, 0xFE	; 254
    cf22:	76 e0       	ldi	r23, 0x06	; 6
    cf24:	c8 01       	movw	r24, r16
    cf26:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cf2a:	89 2b       	or	r24, r25
    cf2c:	a1 f4       	brne	.+40     	; 0xcf56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x146a>
    cf2e:	85 ef       	ldi	r24, 0xF5	; 245
    cf30:	9a e0       	ldi	r25, 0x0A	; 10
    cf32:	0e 94 33 98 	call	0x13066	; 0x13066 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:248
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    cf36:	a4 e0       	ldi	r26, 0x04	; 4
    cf38:	7a 9e       	mul	r7, r26
    cf3a:	f0 01       	movw	r30, r0
    cf3c:	11 24       	eor	r1, r1
    cf3e:	e3 56       	subi	r30, 0x63	; 99
    cf40:	f6 4f       	sbci	r31, 0xF6	; 246
    cf42:	60 83       	st	Z, r22
    cf44:	71 83       	std	Z+1, r23	; 0x01
    cf46:	82 83       	std	Z+2, r24	; 0x02
    cf48:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:249
  thermostat_ring_update_pid_parameters(id);
    cf4a:	87 2d       	mov	r24, r7
    cf4c:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:250
  thermostat_ring_set_pid_eeprom(id);
    cf50:	87 2d       	mov	r24, r7
    cf52:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    cf56:	65 e0       	ldi	r22, 0x05	; 5
    cf58:	77 e0       	ldi	r23, 0x07	; 7
    cf5a:	c8 01       	movw	r24, r16
    cf5c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cf60:	89 2b       	or	r24, r25
    cf62:	a1 f4       	brne	.+40     	; 0xcf8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a0>
    cf64:	85 ef       	ldi	r24, 0xF5	; 245
    cf66:	9a e0       	ldi	r25, 0x0A	; 10
    cf68:	0e 94 33 98 	call	0x13066	; 0x13066 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:254
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    cf6c:	b4 e0       	ldi	r27, 0x04	; 4
    cf6e:	7b 9e       	mul	r7, r27
    cf70:	f0 01       	movw	r30, r0
    cf72:	11 24       	eor	r1, r1
    cf74:	ef 54       	subi	r30, 0x4F	; 79
    cf76:	f6 4f       	sbci	r31, 0xF6	; 246
    cf78:	60 83       	st	Z, r22
    cf7a:	71 83       	std	Z+1, r23	; 0x01
    cf7c:	82 83       	std	Z+2, r24	; 0x02
    cf7e:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:255
  thermostat_ring_update_pid_parameters(id);
    cf80:	87 2d       	mov	r24, r7
    cf82:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:256
  thermostat_ring_set_pid_eeprom(id);
    cf86:	87 2d       	mov	r24, r7
    cf88:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    cf8c:	6c e0       	ldi	r22, 0x0C	; 12
    cf8e:	77 e0       	ldi	r23, 0x07	; 7
    cf90:	c8 01       	movw	r24, r16
    cf92:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    cf96:	89 2b       	or	r24, r25
    cf98:	79 f4       	brne	.+30     	; 0xcfb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
    cf9a:	85 ef       	ldi	r24, 0xF5	; 245
    cf9c:	9a e0       	ldi	r25, 0x0A	; 10
    cf9e:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:261
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    cfa2:	e7 2d       	mov	r30, r7
    cfa4:	f0 e0       	ldi	r31, 0x00	; 0
    cfa6:	eb 53       	subi	r30, 0x3B	; 59
    cfa8:	f6 4f       	sbci	r31, 0xF6	; 246
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
    cfaa:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:262
  thermostat_ring_update_pid_parameters(id);
    cfac:	87 2d       	mov	r24, r7
    cfae:	0e 94 1f 1c 	call	0x383e	; 0x383e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:263
  thermostat_ring_set_pid_eeprom(id);
    cfb2:	87 2d       	mov	r24, r7
    cfb4:	0e 94 6e 43 	call	0x86dc	; 0x86dc <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    cfb8:	66 e7       	ldi	r22, 0x76	; 118
    cfba:	74 e0       	ldi	r23, 0x04	; 4
    cfbc:	90 e0       	ldi	r25, 0x00	; 0
    cfbe:	80 e0       	ldi	r24, 0x00	; 0
    cfc0:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    cfc4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
      cnt++;
    cfc6:	d3 94       	inc	r13
    cfc8:	52 ce       	rjmp	.-860    	; 0xcc6e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1182>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    cfca:	6e e8       	ldi	r22, 0x8E	; 142
    cfcc:	76 e2       	ldi	r23, 0x26	; 38
    cfce:	c5 01       	movw	r24, r10
    cfd0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
  strcat(str1, device.nazev);
    cfd4:	64 e4       	ldi	r22, 0x44	; 68
    cfd6:	7c e0       	ldi	r23, 0x0C	; 12
    cfd8:	c5 01       	movw	r24, r10
    cfda:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  strcat(str1, "/ring/clear");
    cfde:	6d ee       	ldi	r22, 0xED	; 237
    cfe0:	75 e0       	ldi	r23, 0x05	; 5
    cfe2:	c5 01       	movw	r24, r10
    cfe4:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cfe8:	f5 01       	movw	r30, r10
    cfea:	01 90       	ld	r0, Z+
    cfec:	00 20       	and	r0, r0
    cfee:	e9 f7       	brne	.-6      	; 0xcfea <mqtt_callback(char*, unsigned char*, unsigned int)+0x14fe>
    cff0:	31 97       	sbiw	r30, 0x01	; 1
    cff2:	af 01       	movw	r20, r30
    cff4:	4a 19       	sub	r20, r10
    cff6:	5b 09       	sbc	r21, r11
    cff8:	b4 01       	movw	r22, r8
    cffa:	c5 01       	movw	r24, r10
    cffc:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    d000:	89 2b       	or	r24, r25
    d002:	a1 f4       	brne	.+40     	; 0xd02c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
  {
    mqtt_process_message++;
    d004:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d008:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d00c:	01 96       	adiw	r24, 0x01	; 1
    d00e:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d012:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
    id = atoi(my_payload);
    d016:	85 ef       	ldi	r24, 0xF5	; 245
    d018:	9a e0       	ldi	r25, 0x0A	; 10
    d01a:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    d01e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
    if (id < MAX_THERMOSTAT)
    d020:	e4 e0       	ldi	r30, 0x04	; 4
    d022:	e8 17       	cp	r30, r24
    d024:	08 f4       	brcc	.+2      	; 0xd028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x153c>
    d026:	99 c1       	rjmp	.+818    	; 0xd35a <mqtt_callback(char*, unsigned char*, unsigned int)+0x186e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
    {
      thermostat_ring_clear(id);
    d028:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    d02c:	6e e8       	ldi	r22, 0x8E	; 142
    d02e:	76 e2       	ldi	r23, 0x26	; 38
    d030:	c5 01       	movw	r24, r10
    d032:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
  strcat(str1, device.nazev);
    d036:	64 e4       	ldi	r22, 0x44	; 68
    d038:	7c e0       	ldi	r23, 0x0C	; 12
    d03a:	c5 01       	movw	r24, r10
    d03c:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
  strcat(str1, "/network/get/config");
    d040:	6b e0       	ldi	r22, 0x0B	; 11
    d042:	76 e0       	ldi	r23, 0x06	; 6
    d044:	c5 01       	movw	r24, r10
    d046:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d04a:	f5 01       	movw	r30, r10
    d04c:	01 90       	ld	r0, Z+
    d04e:	00 20       	and	r0, r0
    d050:	e9 f7       	brne	.-6      	; 0xd04c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1560>
    d052:	31 97       	sbiw	r30, 0x01	; 1
    d054:	af 01       	movw	r20, r30
    d056:	4a 19       	sub	r20, r10
    d058:	5b 09       	sbc	r21, r11
    d05a:	b4 01       	movw	r22, r8
    d05c:	c5 01       	movw	r24, r10
    d05e:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    d062:	89 2b       	or	r24, r25
    d064:	09 f0       	breq	.+2      	; 0xd068 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157c>
    d066:	2f c1       	rjmp	.+606    	; 0xd2c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
  {
    mqtt_process_message++;
    d068:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d06c:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d070:	01 96       	adiw	r24, 0x01	; 1
    d072:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d076:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    d07a:	c8 57       	subi	r28, 0x78	; 120
    d07c:	df 4f       	sbci	r29, 0xFF	; 255
    d07e:	18 82       	st	Y, r1
    d080:	c8 58       	subi	r28, 0x88	; 136
    d082:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    d084:	00 e1       	ldi	r16, 0x10	; 16
    d086:	26 e0       	ldi	r18, 0x06	; 6
    d088:	4e e2       	ldi	r20, 0x2E	; 46
    d08a:	5c e0       	ldi	r21, 0x0C	; 12
    d08c:	6a e3       	ldi	r22, 0x3A	; 58
    d08e:	ce 01       	movw	r24, r28
    d090:	88 57       	subi	r24, 0x78	; 120
    d092:	9f 4f       	sbci	r25, 0xFF	; 255
    d094:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    d098:	6f ef       	ldi	r22, 0xFF	; 255
    d09a:	75 e2       	ldi	r23, 0x25	; 37
    d09c:	ce 01       	movw	r24, r28
    d09e:	88 5b       	subi	r24, 0xB8	; 184
    d0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a2:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d0a6:	ae 01       	movw	r20, r28
    d0a8:	48 57       	subi	r20, 0x78	; 120
    d0aa:	5f 4f       	sbci	r21, 0xFF	; 255
    d0ac:	be 01       	movw	r22, r28
    d0ae:	68 5b       	subi	r22, 0xB8	; 184
    d0b0:	7f 4f       	sbci	r23, 0xFF	; 255
    d0b2:	81 e2       	ldi	r24, 0x21	; 33
    d0b4:	9e e0       	ldi	r25, 0x0E	; 14
    d0b6:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    d0ba:	c8 57       	subi	r28, 0x78	; 120
    d0bc:	df 4f       	sbci	r29, 0xFF	; 255
    d0be:	18 82       	st	Y, r1
    d0c0:	c8 58       	subi	r28, 0x88	; 136
    d0c2:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    d0c4:	0a e0       	ldi	r16, 0x0A	; 10
    d0c6:	24 e0       	ldi	r18, 0x04	; 4
    d0c8:	44 e3       	ldi	r20, 0x34	; 52
    d0ca:	5c e0       	ldi	r21, 0x0C	; 12
    d0cc:	6e e2       	ldi	r22, 0x2E	; 46
    d0ce:	ce 01       	movw	r24, r28
    d0d0:	88 57       	subi	r24, 0x78	; 120
    d0d2:	9f 4f       	sbci	r25, 0xFF	; 255
    d0d4:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    d0d8:	69 ea       	ldi	r22, 0xA9	; 169
    d0da:	78 e2       	ldi	r23, 0x28	; 40
    d0dc:	ce 01       	movw	r24, r28
    d0de:	88 5b       	subi	r24, 0xB8	; 184
    d0e0:	9f 4f       	sbci	r25, 0xFF	; 255
    d0e2:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d0e6:	ae 01       	movw	r20, r28
    d0e8:	48 57       	subi	r20, 0x78	; 120
    d0ea:	5f 4f       	sbci	r21, 0xFF	; 255
    d0ec:	be 01       	movw	r22, r28
    d0ee:	68 5b       	subi	r22, 0xB8	; 184
    d0f0:	7f 4f       	sbci	r23, 0xFF	; 255
    d0f2:	81 e2       	ldi	r24, 0x21	; 33
    d0f4:	9e e0       	ldi	r25, 0x0E	; 14
    d0f6:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    d0fa:	c8 57       	subi	r28, 0x78	; 120
    d0fc:	df 4f       	sbci	r29, 0xFF	; 255
    d0fe:	18 82       	st	Y, r1
    d100:	c8 58       	subi	r28, 0x88	; 136
    d102:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    d104:	24 e0       	ldi	r18, 0x04	; 4
    d106:	48 e3       	ldi	r20, 0x38	; 56
    d108:	5c e0       	ldi	r21, 0x0C	; 12
    d10a:	6e e2       	ldi	r22, 0x2E	; 46
    d10c:	ce 01       	movw	r24, r28
    d10e:	88 57       	subi	r24, 0x78	; 120
    d110:	9f 4f       	sbci	r25, 0xFF	; 255
    d112:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    d116:	6f ee       	ldi	r22, 0xEF	; 239
    d118:	75 e2       	ldi	r23, 0x25	; 37
    d11a:	ce 01       	movw	r24, r28
    d11c:	88 5b       	subi	r24, 0xB8	; 184
    d11e:	9f 4f       	sbci	r25, 0xFF	; 255
    d120:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d124:	ae 01       	movw	r20, r28
    d126:	48 57       	subi	r20, 0x78	; 120
    d128:	5f 4f       	sbci	r21, 0xFF	; 255
    d12a:	be 01       	movw	r22, r28
    d12c:	68 5b       	subi	r22, 0xB8	; 184
    d12e:	7f 4f       	sbci	r23, 0xFF	; 255
    d130:	81 e2       	ldi	r24, 0x21	; 33
    d132:	9e e0       	ldi	r25, 0x0E	; 14
    d134:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    d138:	c8 57       	subi	r28, 0x78	; 120
    d13a:	df 4f       	sbci	r29, 0xFF	; 255
    d13c:	18 82       	st	Y, r1
    d13e:	c8 58       	subi	r28, 0x88	; 136
    d140:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    d142:	24 e0       	ldi	r18, 0x04	; 4
    d144:	40 e4       	ldi	r20, 0x40	; 64
    d146:	5c e0       	ldi	r21, 0x0C	; 12
    d148:	6e e2       	ldi	r22, 0x2E	; 46
    d14a:	ce 01       	movw	r24, r28
    d14c:	88 57       	subi	r24, 0x78	; 120
    d14e:	9f 4f       	sbci	r25, 0xFF	; 255
    d150:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    d154:	64 ee       	ldi	r22, 0xE4	; 228
    d156:	75 e2       	ldi	r23, 0x25	; 37
    d158:	ce 01       	movw	r24, r28
    d15a:	88 5b       	subi	r24, 0xB8	; 184
    d15c:	9f 4f       	sbci	r25, 0xFF	; 255
    d15e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d162:	ae 01       	movw	r20, r28
    d164:	48 57       	subi	r20, 0x78	; 120
    d166:	5f 4f       	sbci	r21, 0xFF	; 255
    d168:	be 01       	movw	r22, r28
    d16a:	68 5b       	subi	r22, 0xB8	; 184
    d16c:	7f 4f       	sbci	r23, 0xFF	; 255
    d16e:	81 e2       	ldi	r24, 0x21	; 33
    d170:	9e e0       	ldi	r25, 0x0E	; 14
    d172:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    d176:	c8 57       	subi	r28, 0x78	; 120
    d178:	df 4f       	sbci	r29, 0xFF	; 255
    d17a:	18 82       	st	Y, r1
    d17c:	c8 58       	subi	r28, 0x88	; 136
    d17e:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    d180:	24 e0       	ldi	r18, 0x04	; 4
    d182:	4c e3       	ldi	r20, 0x3C	; 60
    d184:	5c e0       	ldi	r21, 0x0C	; 12
    d186:	6e e2       	ldi	r22, 0x2E	; 46
    d188:	ce 01       	movw	r24, r28
    d18a:	88 57       	subi	r24, 0x78	; 120
    d18c:	9f 4f       	sbci	r25, 0xFF	; 255
    d18e:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    d192:	68 ed       	ldi	r22, 0xD8	; 216
    d194:	75 e2       	ldi	r23, 0x25	; 37
    d196:	ce 01       	movw	r24, r28
    d198:	88 5b       	subi	r24, 0xB8	; 184
    d19a:	9f 4f       	sbci	r25, 0xFF	; 255
    d19c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d1a0:	ae 01       	movw	r20, r28
    d1a2:	48 57       	subi	r20, 0x78	; 120
    d1a4:	5f 4f       	sbci	r21, 0xFF	; 255
    d1a6:	be 01       	movw	r22, r28
    d1a8:	68 5b       	subi	r22, 0xB8	; 184
    d1aa:	7f 4f       	sbci	r23, 0xFF	; 255
    d1ac:	81 e2       	ldi	r24, 0x21	; 33
    d1ae:	9e e0       	ldi	r25, 0x0E	; 14
    d1b0:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    d1b4:	c8 57       	subi	r28, 0x78	; 120
    d1b6:	df 4f       	sbci	r29, 0xFF	; 255
    d1b8:	18 82       	st	Y, r1
    d1ba:	c8 58       	subi	r28, 0x88	; 136
    d1bc:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    d1be:	24 e0       	ldi	r18, 0x04	; 4
    d1c0:	4c e7       	ldi	r20, 0x7C	; 124
    d1c2:	5c e0       	ldi	r21, 0x0C	; 12
    d1c4:	6e e2       	ldi	r22, 0x2E	; 46
    d1c6:	ce 01       	movw	r24, r28
    d1c8:	88 57       	subi	r24, 0x78	; 120
    d1ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d1cc:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    d1d0:	6c ec       	ldi	r22, 0xCC	; 204
    d1d2:	75 e2       	ldi	r23, 0x25	; 37
    d1d4:	ce 01       	movw	r24, r28
    d1d6:	88 5b       	subi	r24, 0xB8	; 184
    d1d8:	9f 4f       	sbci	r25, 0xFF	; 255
    d1da:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d1de:	ae 01       	movw	r20, r28
    d1e0:	48 57       	subi	r20, 0x78	; 120
    d1e2:	5f 4f       	sbci	r21, 0xFF	; 255
    d1e4:	be 01       	movw	r22, r28
    d1e6:	68 5b       	subi	r22, 0xB8	; 184
    d1e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d1ea:	81 e2       	ldi	r24, 0x21	; 33
    d1ec:	9e e0       	ldi	r25, 0x0E	; 14
    d1ee:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    d1f2:	c8 57       	subi	r28, 0x78	; 120
    d1f4:	df 4f       	sbci	r29, 0xFF	; 255
    d1f6:	18 82       	st	Y, r1
    d1f8:	c8 58       	subi	r28, 0x88	; 136
    d1fa:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    d1fc:	24 e0       	ldi	r18, 0x04	; 4
    d1fe:	4e e4       	ldi	r20, 0x4E	; 78
    d200:	5c e0       	ldi	r21, 0x0C	; 12
    d202:	6e e2       	ldi	r22, 0x2E	; 46
    d204:	ce 01       	movw	r24, r28
    d206:	88 57       	subi	r24, 0x78	; 120
    d208:	9f 4f       	sbci	r25, 0xFF	; 255
    d20a:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    d20e:	6a eb       	ldi	r22, 0xBA	; 186
    d210:	75 e2       	ldi	r23, 0x25	; 37
    d212:	ce 01       	movw	r24, r28
    d214:	88 5b       	subi	r24, 0xB8	; 184
    d216:	9f 4f       	sbci	r25, 0xFF	; 255
    d218:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d21c:	ae 01       	movw	r20, r28
    d21e:	48 57       	subi	r20, 0x78	; 120
    d220:	5f 4f       	sbci	r21, 0xFF	; 255
    d222:	be 01       	movw	r22, r28
    d224:	68 5b       	subi	r22, 0xB8	; 184
    d226:	7f 4f       	sbci	r23, 0xFF	; 255
    d228:	81 e2       	ldi	r24, 0x21	; 33
    d22a:	9e e0       	ldi	r25, 0x0E	; 14
    d22c:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d230:	4a e0       	ldi	r20, 0x0A	; 10
    d232:	be 01       	movw	r22, r28
    d234:	68 57       	subi	r22, 0x78	; 120
    d236:	7f 4f       	sbci	r23, 0xFF	; 255
    d238:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <device+0x24>
    d23c:	90 91 53 0c 	lds	r25, 0x0C53	; 0x800c53 <device+0x25>
    d240:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    d244:	68 ea       	ldi	r22, 0xA8	; 168
    d246:	75 e2       	ldi	r23, 0x25	; 37
    d248:	ce 01       	movw	r24, r28
    d24a:	88 5b       	subi	r24, 0xB8	; 184
    d24c:	9f 4f       	sbci	r25, 0xFF	; 255
    d24e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d252:	ae 01       	movw	r20, r28
    d254:	48 57       	subi	r20, 0x78	; 120
    d256:	5f 4f       	sbci	r21, 0xFF	; 255
    d258:	be 01       	movw	r22, r28
    d25a:	68 5b       	subi	r22, 0xB8	; 184
    d25c:	7f 4f       	sbci	r23, 0xFF	; 255
    d25e:	81 e2       	ldi	r24, 0x21	; 33
    d260:	9e e0       	ldi	r25, 0x0E	; 14
    d262:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    d266:	66 e9       	ldi	r22, 0x96	; 150
    d268:	75 e2       	ldi	r23, 0x25	; 37
    d26a:	ce 01       	movw	r24, r28
    d26c:	88 5b       	subi	r24, 0xB8	; 184
    d26e:	9f 4f       	sbci	r25, 0xFF	; 255
    d270:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    d274:	44 e5       	ldi	r20, 0x54	; 84
    d276:	5c e0       	ldi	r21, 0x0C	; 12
    d278:	be 01       	movw	r22, r28
    d27a:	68 5b       	subi	r22, 0xB8	; 184
    d27c:	7f 4f       	sbci	r23, 0xFF	; 255
    d27e:	81 e2       	ldi	r24, 0x21	; 33
    d280:	9e e0       	ldi	r25, 0x0E	; 14
    d282:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    d286:	65 e8       	ldi	r22, 0x85	; 133
    d288:	75 e2       	ldi	r23, 0x25	; 37
    d28a:	ce 01       	movw	r24, r28
    d28c:	88 5b       	subi	r24, 0xB8	; 184
    d28e:	9f 4f       	sbci	r25, 0xFF	; 255
    d290:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    d294:	48 e6       	ldi	r20, 0x68	; 104
    d296:	5c e0       	ldi	r21, 0x0C	; 12
    d298:	be 01       	movw	r22, r28
    d29a:	68 5b       	subi	r22, 0xB8	; 184
    d29c:	7f 4f       	sbci	r23, 0xFF	; 255
    d29e:	81 e2       	ldi	r24, 0x21	; 33
    d2a0:	9e e0       	ldi	r25, 0x0E	; 14
    d2a2:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    d2a6:	68 e7       	ldi	r22, 0x78	; 120
    d2a8:	75 e2       	ldi	r23, 0x25	; 37
    d2aa:	ce 01       	movw	r24, r28
    d2ac:	88 5b       	subi	r24, 0xB8	; 184
    d2ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d2b0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    d2b4:	44 e4       	ldi	r20, 0x44	; 68
    d2b6:	5c e0       	ldi	r21, 0x0C	; 12
    d2b8:	be 01       	movw	r22, r28
    d2ba:	68 5b       	subi	r22, 0xB8	; 184
    d2bc:	7f 4f       	sbci	r23, 0xFF	; 255
    d2be:	81 e2       	ldi	r24, 0x21	; 33
    d2c0:	9e e0       	ldi	r25, 0x0E	; 14
    d2c2:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    d2c6:	6e e8       	ldi	r22, 0x8E	; 142
    d2c8:	76 e2       	ldi	r23, 0x26	; 38
    d2ca:	c5 01       	movw	r24, r10
    d2cc:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
  strcat(str1, device.nazev);
    d2d0:	64 e4       	ldi	r22, 0x44	; 68
    d2d2:	7c e0       	ldi	r23, 0x0C	; 12
    d2d4:	c5 01       	movw	r24, r10
    d2d6:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2366
  strcat(str1, "/network/set/");
    d2da:	6f e1       	ldi	r22, 0x1F	; 31
    d2dc:	76 e0       	ldi	r23, 0x06	; 6
    d2de:	c5 01       	movw	r24, r10
    d2e0:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d2e4:	f5 01       	movw	r30, r10
    d2e6:	01 90       	ld	r0, Z+
    d2e8:	00 20       	and	r0, r0
    d2ea:	e9 f7       	brne	.-6      	; 0xd2e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17fa>
    d2ec:	31 97       	sbiw	r30, 0x01	; 1
    d2ee:	af 01       	movw	r20, r30
    d2f0:	4a 19       	sub	r20, r10
    d2f2:	5b 09       	sbc	r21, r11
    d2f4:	b4 01       	movw	r22, r8
    d2f6:	c5 01       	movw	r24, r10
    d2f8:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    d2fc:	89 2b       	or	r24, r25
    d2fe:	09 f0       	breq	.+2      	; 0xd302 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1816>
    d300:	f1 c0       	rjmp	.+482    	; 0xd4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
  {
    mqtt_process_message++;
    d302:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d306:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d30a:	01 96       	adiw	r24, 0x01	; 1
    d30c:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d310:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d314:	f5 01       	movw	r30, r10
    d316:	01 90       	ld	r0, Z+
    d318:	00 20       	and	r0, r0
    d31a:	e9 f7       	brne	.-6      	; 0xd316 <mqtt_callback(char*, unsigned char*, unsigned int)+0x182a>
    d31c:	31 97       	sbiw	r30, 0x01	; 1
    d31e:	ea 19       	sub	r30, r10
    d320:	fb 09       	sbc	r31, r11
    d322:	9e 2f       	mov	r25, r30
    d324:	4e 2f       	mov	r20, r30
    d326:	84 2f       	mov	r24, r20
    d328:	89 1b       	sub	r24, r25
    d32a:	24 2f       	mov	r18, r20
    d32c:	30 e0       	ldi	r19, 0x00	; 0
    d32e:	d4 01       	movw	r26, r8
    d330:	0d 90       	ld	r0, X+
    d332:	00 20       	and	r0, r0
    d334:	e9 f7       	brne	.-6      	; 0xd330 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1844>
    d336:	11 97       	sbiw	r26, 0x01	; 1
    d338:	a8 19       	sub	r26, r8
    d33a:	b9 09       	sbc	r27, r9
    d33c:	2a 17       	cp	r18, r26
    d33e:	3b 07       	cpc	r19, r27
    d340:	88 f4       	brcc	.+34     	; 0xd364 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1878>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
    {
      str1[cnt] = topic[f];
    d342:	d5 01       	movw	r26, r10
    d344:	a8 0f       	add	r26, r24
    d346:	b1 1d       	adc	r27, r1
    d348:	28 0d       	add	r18, r8
    d34a:	39 1d       	adc	r19, r9
    d34c:	f9 01       	movw	r30, r18
    d34e:	80 81       	ld	r24, Z
    d350:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
      str1[cnt + 1] = 0;
    d352:	11 96       	adiw	r26, 0x01	; 1
    d354:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d356:	4f 5f       	subi	r20, 0xFF	; 255
    d358:	e6 cf       	rjmp	.-52     	; 0xd326 <mqtt_callback(char*, unsigned char*, unsigned int)+0x183a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    d35a:	89 ef       	ldi	r24, 0xF9	; 249
    d35c:	95 e0       	ldi	r25, 0x05	; 5
    d35e:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
    d362:	64 ce       	rjmp	.-824    	; 0xd02c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1540>
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    d364:	66 e7       	ldi	r22, 0x76	; 118
    d366:	74 e0       	ldi	r23, 0x04	; 4
    d368:	c5 01       	movw	r24, r10
    d36a:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    d36e:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    d370:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    d372:	e1 14       	cp	r14, r1
    d374:	f1 04       	cpc	r15, r1
    d376:	09 f4       	brne	.+2      	; 0xd37a <mqtt_callback(char*, unsigned char*, unsigned int)+0x188e>
    d378:	a9 c0       	rjmp	.+338    	; 0xd4cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e0>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    d37a:	6d e2       	ldi	r22, 0x2D	; 45
    d37c:	76 e0       	ldi	r23, 0x06	; 6
    d37e:	c7 01       	movw	r24, r14
    d380:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d384:	89 2b       	or	r24, r25
    d386:	41 f4       	brne	.+16     	; 0xd398 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ac>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    d388:	46 e0       	ldi	r20, 0x06	; 6
    d38a:	50 e0       	ldi	r21, 0x00	; 0
    d38c:	6e e2       	ldi	r22, 0x2E	; 46
    d38e:	7c e0       	ldi	r23, 0x0C	; 12
    d390:	8a e3       	ldi	r24, 0x3A	; 58
    d392:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    d396:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    d398:	61 e3       	ldi	r22, 0x31	; 49
    d39a:	76 e0       	ldi	r23, 0x06	; 6
    d39c:	c7 01       	movw	r24, r14
    d39e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d3a2:	89 2b       	or	r24, r25
    d3a4:	41 f4       	brne	.+16     	; 0xd3b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ca>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    d3a6:	44 e0       	ldi	r20, 0x04	; 4
    d3a8:	50 e0       	ldi	r21, 0x00	; 0
    d3aa:	64 e3       	ldi	r22, 0x34	; 52
    d3ac:	7c e0       	ldi	r23, 0x0C	; 12
    d3ae:	8e e2       	ldi	r24, 0x2E	; 46
    d3b0:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    d3b4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    d3b6:	64 e3       	ldi	r22, 0x34	; 52
    d3b8:	76 e0       	ldi	r23, 0x06	; 6
    d3ba:	c7 01       	movw	r24, r14
    d3bc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d3c0:	89 2b       	or	r24, r25
    d3c2:	41 f4       	brne	.+16     	; 0xd3d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e8>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    d3c4:	44 e0       	ldi	r20, 0x04	; 4
    d3c6:	50 e0       	ldi	r21, 0x00	; 0
    d3c8:	68 e3       	ldi	r22, 0x38	; 56
    d3ca:	7c e0       	ldi	r23, 0x0C	; 12
    d3cc:	8e e2       	ldi	r24, 0x2E	; 46
    d3ce:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    d3d2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    d3d4:	6c e3       	ldi	r22, 0x3C	; 60
    d3d6:	76 e0       	ldi	r23, 0x06	; 6
    d3d8:	c7 01       	movw	r24, r14
    d3da:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d3de:	89 2b       	or	r24, r25
    d3e0:	41 f4       	brne	.+16     	; 0xd3f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    d3e2:	44 e0       	ldi	r20, 0x04	; 4
    d3e4:	50 e0       	ldi	r21, 0x00	; 0
    d3e6:	60 e4       	ldi	r22, 0x40	; 64
    d3e8:	7c e0       	ldi	r23, 0x0C	; 12
    d3ea:	8e e2       	ldi	r24, 0x2E	; 46
    d3ec:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    d3f0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    d3f2:	6f e3       	ldi	r22, 0x3F	; 63
    d3f4:	76 e0       	ldi	r23, 0x06	; 6
    d3f6:	c7 01       	movw	r24, r14
    d3f8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d3fc:	89 2b       	or	r24, r25
    d3fe:	41 f4       	brne	.+16     	; 0xd410 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1924>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    d400:	44 e0       	ldi	r20, 0x04	; 4
    d402:	50 e0       	ldi	r21, 0x00	; 0
    d404:	6c e3       	ldi	r22, 0x3C	; 60
    d406:	7c e0       	ldi	r23, 0x0C	; 12
    d408:	8e e2       	ldi	r24, 0x2E	; 46
    d40a:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    d40e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    d410:	63 e4       	ldi	r22, 0x43	; 67
    d412:	76 e0       	ldi	r23, 0x06	; 6
    d414:	c7 01       	movw	r24, r14
    d416:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d41a:	89 2b       	or	r24, r25
    d41c:	41 f4       	brne	.+16     	; 0xd42e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1942>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    d41e:	44 e0       	ldi	r20, 0x04	; 4
    d420:	50 e0       	ldi	r21, 0x00	; 0
    d422:	6c e7       	ldi	r22, 0x7C	; 124
    d424:	7c e0       	ldi	r23, 0x0C	; 12
    d426:	8e e2       	ldi	r24, 0x2E	; 46
    d428:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    d42c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    d42e:	67 e4       	ldi	r22, 0x47	; 71
    d430:	76 e0       	ldi	r23, 0x06	; 6
    d432:	c7 01       	movw	r24, r14
    d434:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d438:	89 2b       	or	r24, r25
    d43a:	41 f4       	brne	.+16     	; 0xd44c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1960>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    d43c:	44 e0       	ldi	r20, 0x04	; 4
    d43e:	50 e0       	ldi	r21, 0x00	; 0
    d440:	6e e4       	ldi	r22, 0x4E	; 78
    d442:	7c e0       	ldi	r23, 0x0C	; 12
    d444:	8e e2       	ldi	r24, 0x2E	; 46
    d446:	0e 94 28 73 	call	0xe650	; 0xe650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    d44a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    d44c:	61 e5       	ldi	r22, 0x51	; 81
    d44e:	76 e0       	ldi	r23, 0x06	; 6
    d450:	c7 01       	movw	r24, r14
    d452:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d456:	89 2b       	or	r24, r25
    d458:	49 f4       	brne	.+18     	; 0xd46c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1980>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    d45a:	85 ef       	ldi	r24, 0xF5	; 245
    d45c:	9a e0       	ldi	r25, 0x0A	; 10
    d45e:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    d462:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <device+0x25>
    d466:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    d46a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    d46c:	6b e5       	ldi	r22, 0x5B	; 91
    d46e:	76 e0       	ldi	r23, 0x06	; 6
    d470:	c7 01       	movw	r24, r14
    d472:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d476:	89 2b       	or	r24, r25
    d478:	39 f4       	brne	.+14     	; 0xd488 <mqtt_callback(char*, unsigned char*, unsigned int)+0x199c>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    d47a:	65 ef       	ldi	r22, 0xF5	; 245
    d47c:	7a e0       	ldi	r23, 0x0A	; 10
    d47e:	84 e5       	ldi	r24, 0x54	; 84
    d480:	9c e0       	ldi	r25, 0x0C	; 12
    d482:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    d486:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    d488:	65 e6       	ldi	r22, 0x65	; 101
    d48a:	76 e0       	ldi	r23, 0x06	; 6
    d48c:	c7 01       	movw	r24, r14
    d48e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d492:	89 2b       	or	r24, r25
    d494:	39 f4       	brne	.+14     	; 0xd4a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b8>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    d496:	65 ef       	ldi	r22, 0xF5	; 245
    d498:	7a e0       	ldi	r23, 0x0A	; 10
    d49a:	88 e6       	ldi	r24, 0x68	; 104
    d49c:	9c e0       	ldi	r25, 0x0C	; 12
    d49e:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    d4a2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    d4a4:	6f e4       	ldi	r22, 0x4F	; 79
    d4a6:	74 e0       	ldi	r23, 0x04	; 4
    d4a8:	c7 01       	movw	r24, r14
    d4aa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d4ae:	89 2b       	or	r24, r25
    d4b0:	29 f4       	brne	.+10     	; 0xd4bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d0>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    d4b2:	85 ef       	ldi	r24, 0xF5	; 245
    d4b4:	9a e0       	ldi	r25, 0x0A	; 10
    d4b6:	0e 94 df 44 	call	0x89be	; 0x89be <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    d4ba:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    d4bc:	66 e7       	ldi	r22, 0x76	; 118
    d4be:	74 e0       	ldi	r23, 0x04	; 4
    d4c0:	90 e0       	ldi	r25, 0x00	; 0
    d4c2:	80 e0       	ldi	r24, 0x00	; 0
    d4c4:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    d4c8:	7c 01       	movw	r14, r24
    d4ca:	53 cf       	rjmp	.-346    	; 0xd372 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1886>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    d4cc:	11 30       	cpi	r17, 0x01	; 1
    d4ce:	41 f4       	brne	.+16     	; 0xd4e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
    {
      save_setup_network();
    d4d0:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    d4d4:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
    d4d8:	80 68       	ori	r24, 0x80	; 128
    d4da:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <selftest_data>
    d4de:	02 c0       	rjmp	.+4      	; 0xd4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    d4e0:	12 30       	cpi	r17, 0x02	; 2
    d4e2:	c1 f3       	breq	.-16     	; 0xd4d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    d4e4:	6e e8       	ldi	r22, 0x8E	; 142
    d4e6:	76 e2       	ldi	r23, 0x26	; 38
    d4e8:	c5 01       	movw	r24, r10
    d4ea:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
  strcat(str1, device.nazev);
    d4ee:	64 e4       	ldi	r22, 0x44	; 68
    d4f0:	7c e0       	ldi	r23, 0x0C	; 12
    d4f2:	c5 01       	movw	r24, r10
    d4f4:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
  strcat(str1, "/light/set/");
    d4f8:	6f e6       	ldi	r22, 0x6F	; 111
    d4fa:	76 e0       	ldi	r23, 0x06	; 6
    d4fc:	c5 01       	movw	r24, r10
    d4fe:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d502:	f5 01       	movw	r30, r10
    d504:	01 90       	ld	r0, Z+
    d506:	00 20       	and	r0, r0
    d508:	e9 f7       	brne	.-6      	; 0xd504 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a18>
    d50a:	31 97       	sbiw	r30, 0x01	; 1
    d50c:	af 01       	movw	r20, r30
    d50e:	4a 19       	sub	r20, r10
    d510:	5b 09       	sbc	r21, r11
    d512:	b4 01       	movw	r22, r8
    d514:	c5 01       	movw	r24, r10
    d516:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    d51a:	89 2b       	or	r24, r25
    d51c:	09 f0       	breq	.+2      	; 0xd520 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a34>
    d51e:	41 c0       	rjmp	.+130    	; 0xd5a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
  {
    mqtt_process_message++;
    d520:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d524:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d528:	01 96       	adiw	r24, 0x01	; 1
    d52a:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d52e:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d532:	f5 01       	movw	r30, r10
    d534:	01 90       	ld	r0, Z+
    d536:	00 20       	and	r0, r0
    d538:	e9 f7       	brne	.-6      	; 0xd534 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a48>
    d53a:	31 97       	sbiw	r30, 0x01	; 1
    d53c:	ea 19       	sub	r30, r10
    d53e:	fb 09       	sbc	r31, r11
    d540:	9e 2f       	mov	r25, r30
    d542:	4e 2f       	mov	r20, r30
    d544:	84 2f       	mov	r24, r20
    d546:	89 1b       	sub	r24, r25
    d548:	24 2f       	mov	r18, r20
    d54a:	30 e0       	ldi	r19, 0x00	; 0
    d54c:	d4 01       	movw	r26, r8
    d54e:	0d 90       	ld	r0, X+
    d550:	00 20       	and	r0, r0
    d552:	e9 f7       	brne	.-6      	; 0xd54e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a62>
    d554:	11 97       	sbiw	r26, 0x01	; 1
    d556:	a8 19       	sub	r26, r8
    d558:	b9 09       	sbc	r27, r9
    d55a:	2a 17       	cp	r18, r26
    d55c:	3b 07       	cpc	r19, r27
    d55e:	60 f4       	brcc	.+24     	; 0xd578 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
    {
      str1[cnt] = topic[f];
    d560:	d5 01       	movw	r26, r10
    d562:	a8 0f       	add	r26, r24
    d564:	b1 1d       	adc	r27, r1
    d566:	28 0d       	add	r18, r8
    d568:	39 1d       	adc	r19, r9
    d56a:	f9 01       	movw	r30, r18
    d56c:	80 81       	ld	r24, Z
    d56e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
      str1[cnt + 1] = 0;
    d570:	11 96       	adiw	r26, 0x01	; 1
    d572:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d574:	4f 5f       	subi	r20, 0xFF	; 255
    d576:	e6 cf       	rjmp	.-52     	; 0xd544 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d578:	66 e7       	ldi	r22, 0x76	; 118
    d57a:	74 e0       	ldi	r23, 0x04	; 4
    d57c:	c5 01       	movw	r24, r10
    d57e:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d582:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
    pch = strtok (str1, "/");
    while (pch != NULL)
    d584:	00 97       	sbiw	r24, 0x00	; 0
    d586:	69 f0       	breq	.+26     	; 0xd5a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
    {
      if (cnt == 0) id = atoi(pch);
    d588:	11 11       	cpse	r17, r1
    d58a:	03 c0       	rjmp	.+6      	; 0xd592 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
    d58c:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    d590:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    d592:	66 e7       	ldi	r22, 0x76	; 118
    d594:	74 e0       	ldi	r23, 0x04	; 4
    d596:	90 e0       	ldi	r25, 0x00	; 0
    d598:	80 e0       	ldi	r24, 0x00	; 0
    d59a:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
      cnt++;
    d59e:	1f 5f       	subi	r17, 0xFF	; 255
    d5a0:	f1 cf       	rjmp	.-30     	; 0xd584 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    d5a2:	62 e4       	ldi	r22, 0x42	; 66
    d5a4:	76 e2       	ldi	r23, 0x26	; 38
    d5a6:	c5 01       	movw	r24, r10
    d5a8:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
  strcat(str1, "output/");
    d5ac:	6b e7       	ldi	r22, 0x7B	; 123
    d5ae:	76 e0       	ldi	r23, 0x06	; 6
    d5b0:	c5 01       	movw	r24, r10
    d5b2:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d5b6:	f5 01       	movw	r30, r10
    d5b8:	01 90       	ld	r0, Z+
    d5ba:	00 20       	and	r0, r0
    d5bc:	e9 f7       	brne	.-6      	; 0xd5b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1acc>
    d5be:	31 97       	sbiw	r30, 0x01	; 1
    d5c0:	af 01       	movw	r20, r30
    d5c2:	4a 19       	sub	r20, r10
    d5c4:	5b 09       	sbc	r21, r11
    d5c6:	b4 01       	movw	r22, r8
    d5c8:	c5 01       	movw	r24, r10
    d5ca:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <strncmp>
    d5ce:	89 2b       	or	r24, r25
    d5d0:	09 f0       	breq	.+2      	; 0xd5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ae8>
    d5d2:	73 c0       	rjmp	.+230    	; 0xd6ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
  {
    mqtt_process_message++;
    d5d4:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d5d8:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d5dc:	01 96       	adiw	r24, 0x01	; 1
    d5de:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d5e2:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d5e6:	f5 01       	movw	r30, r10
    d5e8:	01 90       	ld	r0, Z+
    d5ea:	00 20       	and	r0, r0
    d5ec:	e9 f7       	brne	.-6      	; 0xd5e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1afc>
    d5ee:	31 97       	sbiw	r30, 0x01	; 1
    d5f0:	ea 19       	sub	r30, r10
    d5f2:	fb 09       	sbc	r31, r11
    d5f4:	9e 2f       	mov	r25, r30
    d5f6:	4e 2f       	mov	r20, r30
    d5f8:	84 2f       	mov	r24, r20
    d5fa:	89 1b       	sub	r24, r25
    d5fc:	24 2f       	mov	r18, r20
    d5fe:	30 e0       	ldi	r19, 0x00	; 0
    d600:	d4 01       	movw	r26, r8
    d602:	0d 90       	ld	r0, X+
    d604:	00 20       	and	r0, r0
    d606:	e9 f7       	brne	.-6      	; 0xd602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b16>
    d608:	11 97       	sbiw	r26, 0x01	; 1
    d60a:	a8 19       	sub	r26, r8
    d60c:	b9 09       	sbc	r27, r9
    d60e:	2a 17       	cp	r18, r26
    d610:	3b 07       	cpc	r19, r27
    d612:	60 f4       	brcc	.+24     	; 0xd62c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
    {
      str1[cnt] = topic[f];
    d614:	d5 01       	movw	r26, r10
    d616:	a8 0f       	add	r26, r24
    d618:	b1 1d       	adc	r27, r1
    d61a:	28 0d       	add	r18, r8
    d61c:	39 1d       	adc	r19, r9
    d61e:	f9 01       	movw	r30, r18
    d620:	80 81       	ld	r24, Z
    d622:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
      str1[cnt + 1] = 0;
    d624:	11 96       	adiw	r26, 0x01	; 1
    d626:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d628:	4f 5f       	subi	r20, 0xFF	; 255
    d62a:	e6 cf       	rjmp	.-52     	; 0xd5f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d62c:	66 e7       	ldi	r22, 0x76	; 118
    d62e:	74 e0       	ldi	r23, 0x04	; 4
    d630:	c5 01       	movw	r24, r10
    d632:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    d636:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d638:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
    pch = strtok (str1, "/");
    while (pch != NULL)
    d63a:	01 15       	cp	r16, r1
    d63c:	11 05       	cpc	r17, r1
    d63e:	e9 f1       	breq	.+122    	; 0xd6ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    {
      if (cnt == 0) id = atoi(pch);
    d640:	f1 10       	cpse	r15, r1
    d642:	0d c0       	rjmp	.+26     	; 0xd65e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b72>
    d644:	c8 01       	movw	r24, r16
    d646:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    d64a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    d64c:	66 e7       	ldi	r22, 0x76	; 118
    d64e:	74 e0       	ldi	r23, 0x04	; 4
    d650:	90 e0       	ldi	r25, 0x00	; 0
    d652:	80 e0       	ldi	r24, 0x00	; 0
    d654:	0e 94 70 98 	call	0x130e0	; 0x130e0 <strtok>
    d658:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
      cnt++;
    d65a:	f3 94       	inc	r15
    d65c:	ee cf       	rjmp	.-36     	; 0xd63a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    d65e:	f1 e0       	ldi	r31, 0x01	; 1
    d660:	ff 12       	cpse	r15, r31
    d662:	f4 cf       	rjmp	.-24     	; 0xd64c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    d664:	8f e5       	ldi	r24, 0x5F	; 95
    d666:	c8 2e       	mov	r12, r24
    d668:	dd 24       	eor	r13, r13
    d66a:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    d66c:	c6 01       	movw	r24, r12
    d66e:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    d672:	78 12       	cpse	r7, r24
    d674:	19 c0       	rjmp	.+50     	; 0xd6a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    d676:	63 e8       	ldi	r22, 0x83	; 131
    d678:	76 e0       	ldi	r23, 0x06	; 6
    d67a:	c8 01       	movw	r24, r16
    d67c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d680:	89 2b       	or	r24, r25
    d682:	29 f0       	breq	.+10     	; 0xd68e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba2>
    d684:	e7 2d       	mov	r30, r7
    d686:	f0 e0       	ldi	r31, 0x00	; 0
    d688:	ea 5d       	subi	r30, 0xDA	; 218
    d68a:	f5 4f       	sbci	r31, 0xF5	; 245
    d68c:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    d68e:	67 e8       	ldi	r22, 0x87	; 135
    d690:	76 e0       	ldi	r23, 0x06	; 6
    d692:	c8 01       	movw	r24, r16
    d694:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d698:	89 2b       	or	r24, r25
    d69a:	c1 f2       	breq	.-80     	; 0xd64c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    d69c:	e7 2d       	mov	r30, r7
    d69e:	f0 e0       	ldi	r31, 0x00	; 0
    d6a0:	ea 5d       	subi	r30, 0xDA	; 218
    d6a2:	f5 4f       	sbci	r31, 0xF5	; 245
    d6a4:	10 82       	st	Z, r1
    d6a6:	d2 cf       	rjmp	.-92     	; 0xd64c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    d6a8:	21 e2       	ldi	r18, 0x21	; 33
    d6aa:	c2 0e       	add	r12, r18
    d6ac:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    d6ae:	84 e0       	ldi	r24, 0x04	; 4
    d6b0:	c8 16       	cp	r12, r24
    d6b2:	82 e0       	ldi	r24, 0x02	; 2
    d6b4:	d8 06       	cpc	r13, r24
    d6b6:	d1 f6       	brne	.-76     	; 0xd66c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b80>
    d6b8:	c9 cf       	rjmp	.-110    	; 0xd64c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    d6ba:	6e e8       	ldi	r22, 0x8E	; 142
    d6bc:	76 e2       	ldi	r23, 0x26	; 38
    d6be:	c5 01       	movw	r24, r10
    d6c0:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  strcat(str1, device.nazev);
    d6c4:	64 e4       	ldi	r22, 0x44	; 68
    d6c6:	7c e0       	ldi	r23, 0x0C	; 12
    d6c8:	c5 01       	movw	r24, r10
    d6ca:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
  strcat(str1, "/reload");
    d6ce:	6d e8       	ldi	r22, 0x8D	; 141
    d6d0:	76 e0       	ldi	r23, 0x06	; 6
    d6d2:	c5 01       	movw	r24, r10
    d6d4:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  if (strcmp(str1, topic) == 0)
    d6d8:	b4 01       	movw	r22, r8
    d6da:	c5 01       	movw	r24, r10
    d6dc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d6e0:	8c 01       	movw	r16, r24
    d6e2:	89 2b       	or	r24, r25
    d6e4:	79 f4       	brne	.+30     	; 0xd704 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
  {
    mqtt_process_message++;
    d6e6:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d6ea:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d6ee:	01 96       	adiw	r24, 0x01	; 1
    d6f0:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d6f4:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456
    log_error(&mqtt_client, "reload ..... ");
    d6f8:	85 e9       	ldi	r24, 0x95	; 149
    d6fa:	96 e0       	ldi	r25, 0x06	; 6
    d6fc:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
    resetFunc();
    d700:	f8 01       	movw	r30, r16
    d702:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2461
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    d704:	6e e8       	ldi	r22, 0x8E	; 142
    d706:	76 e2       	ldi	r23, 0x26	; 38
    d708:	c5 01       	movw	r24, r10
    d70a:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462
  strcat(str1, device.nazev);
    d70e:	64 e4       	ldi	r22, 0x44	; 68
    d710:	7c e0       	ldi	r23, 0x0C	; 12
    d712:	c5 01       	movw	r24, r10
    d714:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2463
  strcat(str1, "/bootloader");
    d718:	63 ea       	ldi	r22, 0xA3	; 163
    d71a:	76 e0       	ldi	r23, 0x06	; 6
    d71c:	c5 01       	movw	r24, r10
    d71e:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
  if (strcmp(str1, topic) == 0)
    d722:	b4 01       	movw	r22, r8
    d724:	c5 01       	movw	r24, r10
    d726:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d72a:	89 2b       	or	r24, r25
    d72c:	e9 f4       	brne	.+58     	; 0xd768 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
  {
    mqtt_process_message++;
    d72e:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d732:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d736:	01 96       	adiw	r24, 0x01	; 1
    d738:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d73c:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
    log_error(&mqtt_client, "bootloader ..... ");
    d740:	8f ea       	ldi	r24, 0xAF	; 175
    d742:	96 e0       	ldi	r25, 0x06	; 6
    d744:	0e 94 02 73 	call	0xe604	; 0xe604 <log_error(PubSubClient*, char*) [clone .constprop.116]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
    EEPROM.write(bootloader_tag, 255);
    d748:	6f ef       	ldi	r22, 0xFF	; 255
    d74a:	90 e0       	ldi	r25, 0x00	; 0
    d74c:	80 e0       	ldi	r24, 0x00	; 0
    d74e:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    d752:	88 e1       	ldi	r24, 0x18	; 24
    d754:	9e e0       	ldi	r25, 0x0E	; 14
    d756:	0f b6       	in	r0, 0x3f	; 63
    d758:	f8 94       	cli
    d75a:	a8 95       	wdr
    d75c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    d760:	0f be       	out	0x3f, r0	; 63
    d762:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    d766:	ff cf       	rjmp	.-2      	; 0xd766 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    d768:	6e e8       	ldi	r22, 0x8E	; 142
    d76a:	76 e2       	ldi	r23, 0x26	; 38
    d76c:	c5 01       	movw	r24, r10
    d76e:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
  strcat(str1, device.nazev);
    d772:	64 e4       	ldi	r22, 0x44	; 68
    d774:	7c e0       	ldi	r23, 0x0C	; 12
    d776:	c5 01       	movw	r24, r10
    d778:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  strcat(str1, "/default");
    d77c:	6b e9       	ldi	r22, 0x9B	; 155
    d77e:	75 e0       	ldi	r23, 0x05	; 5
    d780:	c5 01       	movw	r24, r10
    d782:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
  if (strcmp(str1, topic) == 0)
    d786:	b4 01       	movw	r22, r8
    d788:	c5 01       	movw	r24, r10
    d78a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <strcmp>
    d78e:	89 2b       	or	r24, r25
    d790:	91 f4       	brne	.+36     	; 0xd7b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
  {
    mqtt_process_message++;
    d792:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
    d796:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
    d79a:	01 96       	adiw	r24, 0x01	; 1
    d79c:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <mqtt_process_message+0x1>
    d7a0:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    d7a4:	85 ef       	ldi	r24, 0xF5	; 245
    d7a6:	9a e0       	ldi	r25, 0x0A	; 10
    d7a8:	0e 94 37 98 	call	0x1306e	; 0x1306e <atoi>
    d7ac:	68 2f       	mov	r22, r24
    d7ae:	8a e5       	ldi	r24, 0x5A	; 90
    d7b0:	90 e0       	ldi	r25, 0x00	; 0
    d7b2:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
  }

}
    d7b6:	c8 5d       	subi	r28, 0xD8	; 216
    d7b8:	de 4f       	sbci	r29, 0xFE	; 254
    d7ba:	0f b6       	in	r0, 0x3f	; 63
    d7bc:	f8 94       	cli
    d7be:	de bf       	out	0x3e, r29	; 62
    d7c0:	0f be       	out	0x3f, r0	; 63
    d7c2:	cd bf       	out	0x3d, r28	; 61
    d7c4:	df 91       	pop	r29
    d7c6:	cf 91       	pop	r28
    d7c8:	1f 91       	pop	r17
    d7ca:	0f 91       	pop	r16
    d7cc:	ff 90       	pop	r15
    d7ce:	ef 90       	pop	r14
    d7d0:	df 90       	pop	r13
    d7d2:	cf 90       	pop	r12
    d7d4:	bf 90       	pop	r11
    d7d6:	af 90       	pop	r10
    d7d8:	9f 90       	pop	r9
    d7da:	8f 90       	pop	r8
    d7dc:	7f 90       	pop	r7
    d7de:	6f 90       	pop	r6
    d7e0:	5f 90       	pop	r5
    d7e2:	4f 90       	pop	r4
    d7e4:	3f 90       	pop	r3
    d7e6:	2f 90       	pop	r2
    d7e8:	08 95       	ret

0000d7ea <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1509
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    d7ea:	1f 93       	push	r17
    d7ec:	cf 93       	push	r28
    d7ee:	df 93       	push	r29
    d7f0:	cd b7       	in	r28, 0x3d	; 61
    d7f2:	de b7       	in	r29, 0x3e	; 62
    d7f4:	64 97       	sbiw	r28, 0x14	; 20
    d7f6:	0f b6       	in	r0, 0x3f	; 63
    d7f8:	f8 94       	cli
    d7fa:	de bf       	out	0x3e, r29	; 62
    d7fc:	0f be       	out	0x3f, r0	; 63
    d7fe:	cd bf       	out	0x3d, r28	; 61
    d800:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1512
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    d802:	ae 01       	movw	r20, r28
    d804:	4f 5f       	subi	r20, 0xFF	; 255
    d806:	5f 4f       	sbci	r21, 0xFF	; 255
    d808:	be 01       	movw	r22, r28
    d80a:	6c 5e       	subi	r22, 0xEC	; 236
    d80c:	7f 4f       	sbci	r23, 0xFF	; 255
    d80e:	81 2f       	mov	r24, r17
    d810:	0e 94 4c 5c 	call	0xb898	; 0xb898 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
    d814:	87 e6       	ldi	r24, 0x67	; 103
    d816:	0e 94 de 28 	call	0x51bc	; 0x51bc <MenuHistoryNextMenu(unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
  menu_dialog_set_variable_args = idx;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    d81a:	be 01       	movw	r22, r28
    d81c:	6f 5f       	subi	r22, 0xFF	; 255
    d81e:	7f 4f       	sbci	r23, 0xFF	; 255
    d820:	82 ef       	ldi	r24, 0xF2	; 242
    d822:	98 e0       	ldi	r25, 0x08	; 8
    d824:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
  dialog_set_string_max_length = max_length;
    d828:	83 e1       	ldi	r24, 0x13	; 19
    d82a:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
  dialog_set_string_args = idx;
    d82e:	10 93 02 09 	sts	0x0902, r17	; 0x800902 <dialog_set_string_args>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2);
  dialog_save_variable_function = &menu_rtds_update_name;
    d832:	8d ec       	ldi	r24, 0xCD	; 205
    d834:	95 e4       	ldi	r25, 0x45	; 69
    d836:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <dialog_save_variable_function+0x1>
    d83a:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1516
}
    d83e:	64 96       	adiw	r28, 0x14	; 20
    d840:	0f b6       	in	r0, 0x3f	; 63
    d842:	f8 94       	cli
    d844:	de bf       	out	0x3e, r29	; 62
    d846:	0f be       	out	0x3f, r0	; 63
    d848:	cd bf       	out	0x3d, r28	; 61
    d84a:	df 91       	pop	r29
    d84c:	cf 91       	pop	r28
    d84e:	1f 91       	pop	r17
    d850:	08 95       	ret

0000d852 <twi_readFrom.part.0.constprop.177>:
twi_readFrom.part.0.constprop.177():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    d852:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <twi_state>
    d856:	91 11       	cpse	r25, r1
    d858:	fc cf       	rjmp	.-8      	; 0xd852 <twi_readFrom.part.0.constprop.177>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    d85a:	91 e0       	ldi	r25, 0x01	; 1
    d85c:	90 93 3f 11 	sts	0x113F, r25	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    d860:	90 93 3e 11 	sts	0x113E, r25	; 0x80113e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    d864:	2f ef       	ldi	r18, 0xFF	; 255
    d866:	20 93 3d 11 	sts	0x113D, r18	; 0x80113d <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    d86a:	10 92 3c 11 	sts	0x113C, r1	; 0x80113c <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    d86e:	26 0f       	add	r18, r22
    d870:	20 93 3b 11 	sts	0x113B, r18	; 0x80113b <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    d874:	90 93 3a 11 	sts	0x113A, r25	; 0x80113a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    d878:	90 91 3a 11 	lds	r25, 0x113A	; 0x80113a <twi_slarw>
    d87c:	88 0f       	add	r24, r24
    d87e:	89 2b       	or	r24, r25
    d880:	80 93 3a 11 	sts	0x113A, r24	; 0x80113a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    d884:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <twi_inRepStart>
    d888:	81 30       	cpi	r24, 0x01	; 1
    d88a:	f9 f4       	brne	.+62     	; 0xd8ca <twi_readFrom.part.0.constprop.177+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    d88c:	10 92 39 11 	sts	0x1139, r1	; 0x801139 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    d890:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <twi_slarw>
    d894:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    d898:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    d89c:	83 fd       	sbrc	r24, 3
    d89e:	f8 cf       	rjmp	.-16     	; 0xd890 <twi_readFrom.part.0.constprop.177+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    d8a0:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    d8a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    d8a6:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <twi_state>
    d8aa:	81 30       	cpi	r24, 0x01	; 1
    d8ac:	e1 f3       	breq	.-8      	; 0xd8a6 <twi_readFrom.part.0.constprop.177+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    d8ae:	80 91 3c 11 	lds	r24, 0x113C	; 0x80113c <twi_masterBufferIndex>
    d8b2:	86 17       	cp	r24, r22
    d8b4:	10 f4       	brcc	.+4      	; 0xd8ba <twi_readFrom.part.0.constprop.177+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    d8b6:	60 91 3c 11 	lds	r22, 0x113C	; 0x80113c <twi_masterBufferIndex>
    d8ba:	a9 e1       	ldi	r26, 0x19	; 25
    d8bc:	b1 e1       	ldi	r27, 0x11	; 17
    d8be:	e9 ef       	ldi	r30, 0xF9	; 249
    d8c0:	f0 e1       	ldi	r31, 0x10	; 16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    d8c2:	80 e0       	ldi	r24, 0x00	; 0
    d8c4:	86 13       	cpse	r24, r22
    d8c6:	03 c0       	rjmp	.+6      	; 0xd8ce <twi_readFrom.part.0.constprop.177+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    d8c8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    d8ca:	85 ee       	ldi	r24, 0xE5	; 229
    d8cc:	ea cf       	rjmp	.-44     	; 0xd8a2 <twi_readFrom.part.0.constprop.177+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    d8ce:	9d 91       	ld	r25, X+
    d8d0:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    d8d2:	8f 5f       	subi	r24, 0xFF	; 255
    d8d4:	f7 cf       	rjmp	.-18     	; 0xd8c4 <twi_readFrom.part.0.constprop.177+0x72>

0000d8d6 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    d8d6:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    d8da:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    d8de:	2f ef       	ldi	r18, 0xFF	; 255
    d8e0:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    d8e2:	98 17       	cp	r25, r24
    d8e4:	48 f4       	brcc	.+18     	; 0xd8f8 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    d8e6:	e9 2f       	mov	r30, r25
    d8e8:	f0 e0       	ldi	r31, 0x00	; 0
    d8ea:	e7 50       	subi	r30, 0x07	; 7
    d8ec:	ff 4e       	sbci	r31, 0xEF	; 239
    d8ee:	20 81       	ld	r18, Z
    d8f0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    d8f2:	9f 5f       	subi	r25, 0xFF	; 255
    d8f4:	90 93 f4 10 	sts	0x10F4, r25	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    d8f8:	c9 01       	movw	r24, r18
    d8fa:	08 95       	ret

0000d8fc <TwoWire::read() [clone .constprop.138]>:
_ZN7TwoWire4readEv.constprop.138():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    d8fc:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    d900:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    d904:	2f ef       	ldi	r18, 0xFF	; 255
    d906:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    d908:	98 17       	cp	r25, r24
    d90a:	48 f4       	brcc	.+18     	; 0xd91e <TwoWire::read() [clone .constprop.138]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    d90c:	e9 2f       	mov	r30, r25
    d90e:	f0 e0       	ldi	r31, 0x00	; 0
    d910:	e7 50       	subi	r30, 0x07	; 7
    d912:	ff 4e       	sbci	r31, 0xEF	; 239
    d914:	20 81       	ld	r18, Z
    d916:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    d918:	9f 5f       	subi	r25, 0xFF	; 255
    d91a:	90 93 f4 10 	sts	0x10F4, r25	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    d91e:	c9 01       	movw	r24, r18
    d920:	08 95       	ret

0000d922 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    d922:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    d926:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    d92a:	89 1b       	sub	r24, r25
    d92c:	99 0b       	sbc	r25, r25
    d92e:	08 95       	ret

0000d930 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    d930:	08 95       	ret

0000d932 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    d932:	08 95       	ret

0000d934 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    d934:	fc 01       	movw	r30, r24
    d936:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    d938:	44 8d       	ldd	r20, Z+28	; 0x1c
    d93a:	25 2f       	mov	r18, r21
    d93c:	30 e0       	ldi	r19, 0x00	; 0
    d93e:	84 2f       	mov	r24, r20
    d940:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    d942:	82 1b       	sub	r24, r18
    d944:	93 0b       	sbc	r25, r19
    d946:	54 17       	cp	r21, r20
    d948:	10 f0       	brcs	.+4      	; 0xd94e <HardwareSerial::availableForWrite()+0x1a>
    d94a:	cf 96       	adiw	r24, 0x3f	; 63
    d94c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    d94e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    d950:	08 95       	ret

0000d952 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    d952:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    d954:	91 8d       	ldd	r25, Z+25	; 0x19
    d956:	82 8d       	ldd	r24, Z+26	; 0x1a
    d958:	98 17       	cp	r25, r24
    d95a:	61 f0       	breq	.+24     	; 0xd974 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    d95c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    d95e:	ae 0f       	add	r26, r30
    d960:	bf 2f       	mov	r27, r31
    d962:	b1 1d       	adc	r27, r1
    d964:	5d 96       	adiw	r26, 0x1d	; 29
    d966:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    d968:	92 8d       	ldd	r25, Z+26	; 0x1a
    d96a:	9f 5f       	subi	r25, 0xFF	; 255
    d96c:	9f 73       	andi	r25, 0x3F	; 63
    d96e:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    d970:	90 e0       	ldi	r25, 0x00	; 0
    d972:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    d974:	8f ef       	ldi	r24, 0xFF	; 255
    d976:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    d978:	08 95       	ret

0000d97a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    d97a:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    d97c:	91 8d       	ldd	r25, Z+25	; 0x19
    d97e:	82 8d       	ldd	r24, Z+26	; 0x1a
    d980:	98 17       	cp	r25, r24
    d982:	31 f0       	breq	.+12     	; 0xd990 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    d984:	82 8d       	ldd	r24, Z+26	; 0x1a
    d986:	e8 0f       	add	r30, r24
    d988:	f1 1d       	adc	r31, r1
    d98a:	85 8d       	ldd	r24, Z+29	; 0x1d
    d98c:	90 e0       	ldi	r25, 0x00	; 0
    d98e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    d990:	8f ef       	ldi	r24, 0xFF	; 255
    d992:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    d994:	08 95       	ret

0000d996 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    d996:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    d998:	91 8d       	ldd	r25, Z+25	; 0x19
    d99a:	22 8d       	ldd	r18, Z+26	; 0x1a
    d99c:	89 2f       	mov	r24, r25
    d99e:	90 e0       	ldi	r25, 0x00	; 0
    d9a0:	80 5c       	subi	r24, 0xC0	; 192
    d9a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d9a4:	82 1b       	sub	r24, r18
    d9a6:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    d9a8:	8f 73       	andi	r24, 0x3F	; 63
    d9aa:	99 27       	eor	r25, r25
    d9ac:	08 95       	ret

0000d9ae <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    d9ae:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    d9b0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    d9b2:	a8 0f       	add	r26, r24
    d9b4:	b9 2f       	mov	r27, r25
    d9b6:	b1 1d       	adc	r27, r1
    d9b8:	a3 5a       	subi	r26, 0xA3	; 163
    d9ba:	bf 4f       	sbci	r27, 0xFF	; 255
    d9bc:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    d9be:	84 8d       	ldd	r24, Z+28	; 0x1c
    d9c0:	90 e0       	ldi	r25, 0x00	; 0
    d9c2:	01 96       	adiw	r24, 0x01	; 1
    d9c4:	8f 73       	andi	r24, 0x3F	; 63
    d9c6:	99 27       	eor	r25, r25
    d9c8:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    d9ca:	a6 89       	ldd	r26, Z+22	; 0x16
    d9cc:	b7 89       	ldd	r27, Z+23	; 0x17
    d9ce:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    d9d0:	a0 89       	ldd	r26, Z+16	; 0x10
    d9d2:	b1 89       	ldd	r27, Z+17	; 0x11
    d9d4:	8c 91       	ld	r24, X
    d9d6:	80 64       	ori	r24, 0x40	; 64
    d9d8:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    d9da:	93 8d       	ldd	r25, Z+27	; 0x1b
    d9dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    d9de:	98 13       	cpse	r25, r24
    d9e0:	06 c0       	rjmp	.+12     	; 0xd9ee <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    d9e2:	02 88       	ldd	r0, Z+18	; 0x12
    d9e4:	f3 89       	ldd	r31, Z+19	; 0x13
    d9e6:	e0 2d       	mov	r30, r0
    d9e8:	80 81       	ld	r24, Z
    d9ea:	8f 7d       	andi	r24, 0xDF	; 223
    d9ec:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    d9ee:	08 95       	ret

0000d9f0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    d9f0:	ef 92       	push	r14
    d9f2:	ff 92       	push	r15
    d9f4:	0f 93       	push	r16
    d9f6:	1f 93       	push	r17
    d9f8:	cf 93       	push	r28
    d9fa:	df 93       	push	r29
    d9fc:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    d9fe:	81 e0       	ldi	r24, 0x01	; 1
    da00:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    da02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    da04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    da06:	98 13       	cpse	r25, r24
    da08:	16 c0       	rjmp	.+44     	; 0xda36 <HardwareSerial::write(unsigned char)+0x46>
    da0a:	e8 89       	ldd	r30, Y+16	; 0x10
    da0c:	f9 89       	ldd	r31, Y+17	; 0x11
    da0e:	80 81       	ld	r24, Z
    da10:	85 ff       	sbrs	r24, 5
    da12:	11 c0       	rjmp	.+34     	; 0xda36 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    da14:	ee 89       	ldd	r30, Y+22	; 0x16
    da16:	ff 89       	ldd	r31, Y+23	; 0x17
    da18:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    da1a:	e8 89       	ldd	r30, Y+16	; 0x10
    da1c:	f9 89       	ldd	r31, Y+17	; 0x11
    da1e:	80 81       	ld	r24, Z
    da20:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    da22:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    da24:	81 e0       	ldi	r24, 0x01	; 1
    da26:	90 e0       	ldi	r25, 0x00	; 0
    da28:	df 91       	pop	r29
    da2a:	cf 91       	pop	r28
    da2c:	1f 91       	pop	r17
    da2e:	0f 91       	pop	r16
    da30:	ff 90       	pop	r15
    da32:	ef 90       	pop	r14
    da34:	08 95       	ret
    da36:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    da38:	0b 8d       	ldd	r16, Y+27	; 0x1b
    da3a:	10 e0       	ldi	r17, 0x00	; 0
    da3c:	0f 5f       	subi	r16, 0xFF	; 255
    da3e:	1f 4f       	sbci	r17, 0xFF	; 255
    da40:	0f 73       	andi	r16, 0x3F	; 63
    da42:	11 27       	eor	r17, r17
    da44:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    da46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    da48:	8e 11       	cpse	r24, r14
    da4a:	0c c0       	rjmp	.+24     	; 0xda64 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    da4c:	0f b6       	in	r0, 0x3f	; 63
    da4e:	07 fc       	sbrc	r0, 7
    da50:	fa cf       	rjmp	.-12     	; 0xda46 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    da52:	e8 89       	ldd	r30, Y+16	; 0x10
    da54:	f9 89       	ldd	r31, Y+17	; 0x11
    da56:	80 81       	ld	r24, Z
    da58:	85 ff       	sbrs	r24, 5
    da5a:	f5 cf       	rjmp	.-22     	; 0xda46 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    da5c:	ce 01       	movw	r24, r28
    da5e:	0e 94 d7 6c 	call	0xd9ae	; 0xd9ae <HardwareSerial::_tx_udr_empty_irq()>
    da62:	f1 cf       	rjmp	.-30     	; 0xda46 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    da64:	eb 8d       	ldd	r30, Y+27	; 0x1b
    da66:	ec 0f       	add	r30, r28
    da68:	fd 2f       	mov	r31, r29
    da6a:	f1 1d       	adc	r31, r1
    da6c:	e3 5a       	subi	r30, 0xA3	; 163
    da6e:	ff 4f       	sbci	r31, 0xFF	; 255
    da70:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    da72:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    da74:	ea 89       	ldd	r30, Y+18	; 0x12
    da76:	fb 89       	ldd	r31, Y+19	; 0x13
    da78:	80 81       	ld	r24, Z
    da7a:	80 62       	ori	r24, 0x20	; 32
    da7c:	d2 cf       	rjmp	.-92     	; 0xda22 <HardwareSerial::write(unsigned char)+0x32>

0000da7e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    da7e:	cf 93       	push	r28
    da80:	df 93       	push	r29
    da82:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    da84:	88 8d       	ldd	r24, Y+24	; 0x18
    da86:	88 23       	and	r24, r24
    da88:	b9 f0       	breq	.+46     	; 0xdab8 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    da8a:	aa 89       	ldd	r26, Y+18	; 0x12
    da8c:	bb 89       	ldd	r27, Y+19	; 0x13
    da8e:	e8 89       	ldd	r30, Y+16	; 0x10
    da90:	f9 89       	ldd	r31, Y+17	; 0x11
    da92:	8c 91       	ld	r24, X
    da94:	85 fd       	sbrc	r24, 5
    da96:	03 c0       	rjmp	.+6      	; 0xda9e <HardwareSerial::flush()+0x20>
    da98:	80 81       	ld	r24, Z
    da9a:	86 fd       	sbrc	r24, 6
    da9c:	0d c0       	rjmp	.+26     	; 0xdab8 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    da9e:	0f b6       	in	r0, 0x3f	; 63
    daa0:	07 fc       	sbrc	r0, 7
    daa2:	f7 cf       	rjmp	.-18     	; 0xda92 <HardwareSerial::flush()+0x14>
    daa4:	8c 91       	ld	r24, X
    daa6:	85 ff       	sbrs	r24, 5
    daa8:	f2 cf       	rjmp	.-28     	; 0xda8e <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    daaa:	80 81       	ld	r24, Z
    daac:	85 ff       	sbrs	r24, 5
    daae:	ed cf       	rjmp	.-38     	; 0xda8a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    dab0:	ce 01       	movw	r24, r28
    dab2:	0e 94 d7 6c 	call	0xd9ae	; 0xd9ae <HardwareSerial::_tx_udr_empty_irq()>
    dab6:	e9 cf       	rjmp	.-46     	; 0xda8a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    dab8:	df 91       	pop	r29
    daba:	cf 91       	pop	r28
    dabc:	08 95       	ret

0000dabe <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    dabe:	8c e7       	ldi	r24, 0x7C	; 124
    dac0:	9b e0       	ldi	r25, 0x0B	; 11
    dac2:	0e 94 cb 6c 	call	0xd996	; 0xd996 <HardwareSerial::available()>
    dac6:	21 e0       	ldi	r18, 0x01	; 1
    dac8:	89 2b       	or	r24, r25
    daca:	09 f4       	brne	.+2      	; 0xdace <Serial0_available()+0x10>
    dacc:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    dace:	82 2f       	mov	r24, r18
    dad0:	08 95       	ret

0000dad2 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    dad2:	80 e0       	ldi	r24, 0x00	; 0
    dad4:	90 e0       	ldi	r25, 0x00	; 0
    dad6:	89 2b       	or	r24, r25
    dad8:	29 f0       	breq	.+10     	; 0xdae4 <serialEventRun()+0x12>
    dada:	0e 94 5f 6d 	call	0xdabe	; 0xdabe <Serial0_available()>
    dade:	81 11       	cpse	r24, r1
    dae0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    dae4:	80 e0       	ldi	r24, 0x00	; 0
    dae6:	90 e0       	ldi	r25, 0x00	; 0
    dae8:	89 2b       	or	r24, r25
    daea:	49 f0       	breq	.+18     	; 0xdafe <serialEventRun()+0x2c>
    daec:	80 e0       	ldi	r24, 0x00	; 0
    daee:	90 e0       	ldi	r25, 0x00	; 0
    daf0:	89 2b       	or	r24, r25
    daf2:	29 f0       	breq	.+10     	; 0xdafe <serialEventRun()+0x2c>
    daf4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    daf8:	81 11       	cpse	r24, r1
    dafa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    dafe:	08 95       	ret

0000db00 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    db00:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    db02:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    db04:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <timer0_overflow_count>
    db08:	90 91 e9 10 	lds	r25, 0x10E9	; 0x8010e9 <timer0_overflow_count+0x1>
    db0c:	a0 91 ea 10 	lds	r26, 0x10EA	; 0x8010ea <timer0_overflow_count+0x2>
    db10:	b0 91 eb 10 	lds	r27, 0x10EB	; 0x8010eb <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    db14:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    db16:	a8 9b       	sbis	0x15, 0	; 21
    db18:	05 c0       	rjmp	.+10     	; 0xdb24 <micros+0x24>
    db1a:	2f 3f       	cpi	r18, 0xFF	; 255
    db1c:	19 f0       	breq	.+6      	; 0xdb24 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    db1e:	01 96       	adiw	r24, 0x01	; 1
    db20:	a1 1d       	adc	r26, r1
    db22:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    db24:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    db26:	ba 2f       	mov	r27, r26
    db28:	a9 2f       	mov	r26, r25
    db2a:	98 2f       	mov	r25, r24
    db2c:	88 27       	eor	r24, r24
    db2e:	bc 01       	movw	r22, r24
    db30:	cd 01       	movw	r24, r26
    db32:	62 0f       	add	r22, r18
    db34:	71 1d       	adc	r23, r1
    db36:	81 1d       	adc	r24, r1
    db38:	91 1d       	adc	r25, r1
    db3a:	42 e0       	ldi	r20, 0x02	; 2
    db3c:	66 0f       	add	r22, r22
    db3e:	77 1f       	adc	r23, r23
    db40:	88 1f       	adc	r24, r24
    db42:	99 1f       	adc	r25, r25
    db44:	4a 95       	dec	r20
    db46:	d1 f7       	brne	.-12     	; 0xdb3c <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    db48:	08 95       	ret

0000db4a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    db4a:	af 92       	push	r10
    db4c:	bf 92       	push	r11
    db4e:	cf 92       	push	r12
    db50:	df 92       	push	r13
    db52:	ef 92       	push	r14
    db54:	ff 92       	push	r15
    db56:	0f 93       	push	r16
    db58:	1f 93       	push	r17
    db5a:	cf 93       	push	r28
    db5c:	df 93       	push	r29
    db5e:	6c 01       	movw	r12, r24
    db60:	7b 01       	movw	r14, r22
    db62:	8b 01       	movw	r16, r22
    db64:	04 0f       	add	r16, r20
    db66:	15 1f       	adc	r17, r21
    db68:	eb 01       	movw	r28, r22
    db6a:	5e 01       	movw	r10, r28
    db6c:	ae 18       	sub	r10, r14
    db6e:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    db70:	c0 17       	cp	r28, r16
    db72:	d1 07       	cpc	r29, r17
    db74:	59 f0       	breq	.+22     	; 0xdb8c <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    db76:	69 91       	ld	r22, Y+
    db78:	d6 01       	movw	r26, r12
    db7a:	ed 91       	ld	r30, X+
    db7c:	fc 91       	ld	r31, X
    db7e:	01 90       	ld	r0, Z+
    db80:	f0 81       	ld	r31, Z
    db82:	e0 2d       	mov	r30, r0
    db84:	c6 01       	movw	r24, r12
    db86:	19 95       	eicall
    db88:	89 2b       	or	r24, r25
    db8a:	79 f7       	brne	.-34     	; 0xdb6a <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    db8c:	c5 01       	movw	r24, r10
    db8e:	df 91       	pop	r29
    db90:	cf 91       	pop	r28
    db92:	1f 91       	pop	r17
    db94:	0f 91       	pop	r16
    db96:	ff 90       	pop	r15
    db98:	ef 90       	pop	r14
    db9a:	df 90       	pop	r13
    db9c:	cf 90       	pop	r12
    db9e:	bf 90       	pop	r11
    dba0:	af 90       	pop	r10
    dba2:	08 95       	ret

0000dba4 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    dba4:	85 ed       	ldi	r24, 0xD5	; 213
    dba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    dbaa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    dbae:	84 fd       	sbrc	r24, 4
    dbb0:	fc cf       	rjmp	.-8      	; 0xdbaa <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    dbb2:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
    dbb6:	08 95       	ret

0000dbb8 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    dbb8:	20 91 a7 10 	lds	r18, 0x10A7	; 0x8010a7 <twi_txBufferLength>
    dbbc:	26 0f       	add	r18, r22
    dbbe:	33 27       	eor	r19, r19
    dbc0:	33 1f       	adc	r19, r19
    dbc2:	21 32       	cpi	r18, 0x21	; 33
    dbc4:	31 05       	cpc	r19, r1
    dbc6:	ec f4       	brge	.+58     	; 0xdc02 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    dbc8:	20 91 3f 11 	lds	r18, 0x113F	; 0x80113f <twi_state>
    dbcc:	fc 01       	movw	r30, r24
    dbce:	90 e0       	ldi	r25, 0x00	; 0
    dbd0:	80 e0       	ldi	r24, 0x00	; 0
    dbd2:	24 30       	cpi	r18, 0x04	; 4
    dbd4:	69 f0       	breq	.+26     	; 0xdbf0 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
    dbd6:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    dbd8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    dbda:	a0 91 a7 10 	lds	r26, 0x10A7	; 0x8010a7 <twi_txBufferLength>
    dbde:	21 91       	ld	r18, Z+
    dbe0:	ac 01       	movw	r20, r24
    dbe2:	49 57       	subi	r20, 0x79	; 121
    dbe4:	5f 4e       	sbci	r21, 0xEF	; 239
    dbe6:	a4 0f       	add	r26, r20
    dbe8:	b5 2f       	mov	r27, r21
    dbea:	b1 1d       	adc	r27, r1
    dbec:	2c 93       	st	X, r18
    dbee:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    dbf0:	86 17       	cp	r24, r22
    dbf2:	98 f3       	brcs	.-26     	; 0xdbda <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    dbf4:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <twi_txBufferLength>
    dbf8:	68 0f       	add	r22, r24
    dbfa:	60 93 a7 10 	sts	0x10A7, r22	; 0x8010a7 <twi_txBufferLength>
    dbfe:	80 e0       	ldi	r24, 0x00	; 0
    dc00:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    dc02:	81 e0       	ldi	r24, 0x01	; 1
    dc04:	08 95       	ret

0000dc06 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    dc06:	08 95       	ret

0000dc08 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    dc08:	e0 91 f4 10 	lds	r30, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    dc0c:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    dc10:	e8 17       	cp	r30, r24
    dc12:	30 f4       	brcc	.+12     	; 0xdc20 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    dc14:	f0 e0       	ldi	r31, 0x00	; 0
    dc16:	e7 50       	subi	r30, 0x07	; 7
    dc18:	ff 4e       	sbci	r31, 0xEF	; 239
    dc1a:	80 81       	ld	r24, Z
    dc1c:	90 e0       	ldi	r25, 0x00	; 0
    dc1e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    dc20:	8f ef       	ldi	r24, 0xFF	; 255
    dc22:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    dc24:	08 95       	ret

0000dc26 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    dc26:	cf 92       	push	r12
    dc28:	df 92       	push	r13
    dc2a:	ef 92       	push	r14
    dc2c:	ff 92       	push	r15
    dc2e:	0f 93       	push	r16
    dc30:	1f 93       	push	r17
    dc32:	cf 93       	push	r28
    dc34:	df 93       	push	r29
    dc36:	7c 01       	movw	r14, r24
    dc38:	cb 01       	movw	r24, r22
    dc3a:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    dc3c:	20 91 f8 10 	lds	r18, 0x10F8	; 0x8010f8 <TwoWire::transmitting>
    dc40:	22 23       	and	r18, r18
    dc42:	89 f0       	breq	.+34     	; 0xdc66 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    dc44:	eb 01       	movw	r28, r22
    dc46:	6b 01       	movw	r12, r22
    dc48:	c4 0e       	add	r12, r20
    dc4a:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    dc4c:	cc 15       	cp	r28, r12
    dc4e:	dd 05       	cpc	r29, r13
    dc50:	69 f0       	breq	.+26     	; 0xdc6c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    dc52:	69 91       	ld	r22, Y+
    dc54:	d7 01       	movw	r26, r14
    dc56:	ed 91       	ld	r30, X+
    dc58:	fc 91       	ld	r31, X
    dc5a:	01 90       	ld	r0, Z+
    dc5c:	f0 81       	ld	r31, Z
    dc5e:	e0 2d       	mov	r30, r0
    dc60:	c7 01       	movw	r24, r14
    dc62:	19 95       	eicall
    dc64:	f3 cf       	rjmp	.-26     	; 0xdc4c <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    dc66:	64 2f       	mov	r22, r20
    dc68:	0e 94 dc 6d 	call	0xdbb8	; 0xdbb8 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    dc6c:	c8 01       	movw	r24, r16
    dc6e:	df 91       	pop	r29
    dc70:	cf 91       	pop	r28
    dc72:	1f 91       	pop	r17
    dc74:	0f 91       	pop	r16
    dc76:	ff 90       	pop	r15
    dc78:	ef 90       	pop	r14
    dc7a:	df 90       	pop	r13
    dc7c:	cf 90       	pop	r12
    dc7e:	08 95       	ret

0000dc80 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    dc80:	cf 93       	push	r28
    dc82:	df 93       	push	r29
    dc84:	1f 92       	push	r1
    dc86:	cd b7       	in	r28, 0x3d	; 61
    dc88:	de b7       	in	r29, 0x3e	; 62
    dc8a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    dc8c:	20 91 f8 10 	lds	r18, 0x10F8	; 0x8010f8 <TwoWire::transmitting>
    dc90:	22 23       	and	r18, r18
    dc92:	f9 f0       	breq	.+62     	; 0xdcd2 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    dc94:	20 91 f5 10 	lds	r18, 0x10F5	; 0x8010f5 <TwoWire::txBufferLength>
    dc98:	20 32       	cpi	r18, 0x20	; 32
    dc9a:	58 f0       	brcs	.+22     	; 0xdcb2 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    dc9c:	21 e0       	ldi	r18, 0x01	; 1
    dc9e:	30 e0       	ldi	r19, 0x00	; 0
    dca0:	fc 01       	movw	r30, r24
    dca2:	33 83       	std	Z+3, r19	; 0x03
    dca4:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    dca6:	90 e0       	ldi	r25, 0x00	; 0
    dca8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    dcaa:	0f 90       	pop	r0
    dcac:	df 91       	pop	r29
    dcae:	cf 91       	pop	r28
    dcb0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    dcb2:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <TwoWire::txBufferIndex>
    dcb6:	e8 2f       	mov	r30, r24
    dcb8:	f0 e0       	ldi	r31, 0x00	; 0
    dcba:	e9 59       	subi	r30, 0x99	; 153
    dcbc:	ff 4e       	sbci	r31, 0xEF	; 239
    dcbe:	99 81       	ldd	r25, Y+1	; 0x01
    dcc0:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    dcc2:	8f 5f       	subi	r24, 0xFF	; 255
    dcc4:	80 93 f6 10 	sts	0x10F6, r24	; 0x8010f6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    dcc8:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    dccc:	81 e0       	ldi	r24, 0x01	; 1
    dcce:	90 e0       	ldi	r25, 0x00	; 0
    dcd0:	ec cf       	rjmp	.-40     	; 0xdcaa <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    dcd2:	61 e0       	ldi	r22, 0x01	; 1
    dcd4:	ce 01       	movw	r24, r28
    dcd6:	01 96       	adiw	r24, 0x01	; 1
    dcd8:	0e 94 dc 6d 	call	0xdbb8	; 0xdbb8 <twi_transmit>
    dcdc:	f7 cf       	rjmp	.-18     	; 0xdccc <TwoWire::write(unsigned char)+0x4c>

0000dcde <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    dcde:	08 95       	ret

0000dce0 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    dce0:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    dce2:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    dce4:	0d b4       	in	r0, 0x2d	; 45
    dce6:	07 fe       	sbrs	r0, 7
    dce8:	fd cf       	rjmp	.-6      	; 0xdce4 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
    dcea:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
    dcec:	08 95       	ret

0000dcee <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    dcee:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    dcf0:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
    dcf2:	08 95       	ret

0000dcf4 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    dcf4:	cf 93       	push	r28
    dcf6:	df 93       	push	r29
    dcf8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    dcfa:	89 8d       	ldd	r24, Y+25	; 0x19
    dcfc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    dcfe:	89 2b       	or	r24, r25
    dd00:	41 f0       	breq	.+16     	; 0xdd12 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    dd02:	e8 81       	ld	r30, Y
    dd04:	f9 81       	ldd	r31, Y+1	; 0x01
    dd06:	02 84       	ldd	r0, Z+10	; 0x0a
    dd08:	f3 85       	ldd	r31, Z+11	; 0x0b
    dd0a:	e0 2d       	mov	r30, r0
    dd0c:	ce 01       	movw	r24, r28
    dd0e:	19 95       	eicall
    dd10:	f4 cf       	rjmp	.-24     	; 0xdcfa <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    dd12:	df 91       	pop	r29
    dd14:	cf 91       	pop	r28
    dd16:	08 95       	ret

0000dd18 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    dd18:	cf 93       	push	r28
    dd1a:	df 93       	push	r29
    dd1c:	1f 92       	push	r1
    dd1e:	cd b7       	in	r28, 0x3d	; 61
    dd20:	de b7       	in	r29, 0x3e	; 62
    dd22:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    dd24:	dc 01       	movw	r26, r24
    dd26:	ed 91       	ld	r30, X+
    dd28:	fc 91       	ld	r31, X
    dd2a:	02 80       	ldd	r0, Z+2	; 0x02
    dd2c:	f3 81       	ldd	r31, Z+3	; 0x03
    dd2e:	e0 2d       	mov	r30, r0
    dd30:	41 e0       	ldi	r20, 0x01	; 1
    dd32:	50 e0       	ldi	r21, 0x00	; 0
    dd34:	be 01       	movw	r22, r28
    dd36:	6f 5f       	subi	r22, 0xFF	; 255
    dd38:	7f 4f       	sbci	r23, 0xFF	; 255
    dd3a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    dd3c:	0f 90       	pop	r0
    dd3e:	df 91       	pop	r29
    dd40:	cf 91       	pop	r28
    dd42:	08 95       	ret

0000dd44 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    dd44:	fc 01       	movw	r30, r24
    dd46:	81 8d       	ldd	r24, Z+25	; 0x19
    dd48:	92 8d       	ldd	r25, Z+26	; 0x1a
    dd4a:	08 95       	ret

0000dd4c <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    dd4c:	fc 01       	movw	r30, r24
    dd4e:	85 89       	ldd	r24, Z+21	; 0x15
    dd50:	96 89       	ldd	r25, Z+22	; 0x16
    dd52:	08 95       	ret

0000dd54 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    dd54:	22 ee       	ldi	r18, 0xE2	; 226
    dd56:	32 e0       	ldi	r19, 0x02	; 2
    dd58:	fc 01       	movw	r30, r24
    dd5a:	31 83       	std	Z+1, r19	; 0x01
    dd5c:	20 83       	st	Z, r18
    dd5e:	fb 01       	movw	r30, r22
    dd60:	41 89       	ldd	r20, Z+17	; 0x11
    dd62:	52 89       	ldd	r21, Z+18	; 0x12
    dd64:	63 89       	ldd	r22, Z+19	; 0x13
    dd66:	74 89       	ldd	r23, Z+20	; 0x14
    dd68:	fc 01       	movw	r30, r24
    dd6a:	42 83       	std	Z+2, r20	; 0x02
    dd6c:	53 83       	std	Z+3, r21	; 0x03
    dd6e:	64 83       	std	Z+4, r22	; 0x04
    dd70:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    dd72:	08 95       	ret

0000dd74 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    dd74:	80 e0       	ldi	r24, 0x00	; 0
    dd76:	08 95       	ret

0000dd78 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    dd78:	fc 01       	movw	r30, r24
    dd7a:	94 85       	ldd	r25, Z+12	; 0x0c
    dd7c:	fb 01       	movw	r30, r22
    dd7e:	84 85       	ldd	r24, Z+12	; 0x0c
    dd80:	98 13       	cpse	r25, r24
    dd82:	03 c0       	rjmp	.+6      	; 0xdd8a <EthernetClient::operator==(EthernetClient const&)+0x12>
    dd84:	81 e0       	ldi	r24, 0x01	; 1
    dd86:	98 30       	cpi	r25, 0x08	; 8
    dd88:	09 f4       	brne	.+2      	; 0xdd8c <EthernetClient::operator==(EthernetClient const&)+0x14>
    dd8a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    dd8c:	08 95       	ret

0000dd8e <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    dd8e:	21 e0       	ldi	r18, 0x01	; 1
    dd90:	fc 01       	movw	r30, r24
    dd92:	84 85       	ldd	r24, Z+12	; 0x0c
    dd94:	88 30       	cpi	r24, 0x08	; 8
    dd96:	09 f4       	brne	.+2      	; 0xdd9a <EthernetClient::operator bool()+0xc>
    dd98:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    dd9a:	82 2f       	mov	r24, r18
    dd9c:	08 95       	ret

0000dd9e <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    dd9e:	08 95       	ret

0000dda0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
    dda0:	2f 92       	push	r2
    dda2:	3f 92       	push	r3
    dda4:	4f 92       	push	r4
    dda6:	5f 92       	push	r5
    dda8:	6f 92       	push	r6
    ddaa:	7f 92       	push	r7
    ddac:	8f 92       	push	r8
    ddae:	9f 92       	push	r9
    ddb0:	af 92       	push	r10
    ddb2:	bf 92       	push	r11
    ddb4:	cf 92       	push	r12
    ddb6:	df 92       	push	r13
    ddb8:	ef 92       	push	r14
    ddba:	ff 92       	push	r15
    ddbc:	0f 93       	push	r16
    ddbe:	1f 93       	push	r17
    ddc0:	cf 93       	push	r28
    ddc2:	df 93       	push	r29
    ddc4:	cd b7       	in	r28, 0x3d	; 61
    ddc6:	de b7       	in	r29, 0x3e	; 62
    ddc8:	2d 97       	sbiw	r28, 0x0d	; 13
    ddca:	0f b6       	in	r0, 0x3f	; 63
    ddcc:	f8 94       	cli
    ddce:	de bf       	out	0x3e, r29	; 62
    ddd0:	0f be       	out	0x3f, r0	; 63
    ddd2:	cd bf       	out	0x3d, r28	; 61
    ddd4:	fc 01       	movw	r30, r24
    ddd6:	a0 81       	ld	r26, Z
    ddd8:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
    ddda:	cb 01       	movw	r24, r22
    dddc:	8e 50       	subi	r24, 0x0E	; 14
    ddde:	97 42       	sbci	r25, 0x27	; 39
    dde0:	02 97       	sbiw	r24, 0x02	; 2
    dde2:	20 f5       	brcc	.+72     	; 0xde2c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
    dde4:	fd 01       	movw	r30, r26
    dde6:	01 90       	ld	r0, Z+
    dde8:	00 20       	and	r0, r0
    ddea:	e9 f7       	brne	.-6      	; 0xdde6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x46>
    ddec:	31 97       	sbiw	r30, 0x01	; 1
    ddee:	ea 1b       	sub	r30, r26
    ddf0:	fb 0b       	sbc	r31, r27
    ddf2:	80 91 d5 0d 	lds	r24, 0x0DD5	; 0x800dd5 <my_lcd+0xc>
    ddf6:	26 e0       	ldi	r18, 0x06	; 6
    ddf8:	82 9f       	mul	r24, r18
    ddfa:	c0 01       	movw	r24, r0
    ddfc:	11 24       	eor	r1, r1
    ddfe:	8e 9f       	mul	r24, r30
    de00:	90 01       	movw	r18, r0
    de02:	8f 9f       	mul	r24, r31
    de04:	30 0d       	add	r19, r0
    de06:	9e 9f       	mul	r25, r30
    de08:	30 0d       	add	r19, r0
    de0a:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
    de0c:	80 91 db 0d 	lds	r24, 0x0DDB	; 0x800ddb <my_lcd+0x12>
    de10:	90 91 dc 0d 	lds	r25, 0x0DDC	; 0x800ddc <my_lcd+0x13>
    de14:	82 1b       	sub	r24, r18
    de16:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
    de18:	6e 30       	cpi	r22, 0x0E	; 14
    de1a:	77 42       	sbci	r23, 0x27	; 39
    de1c:	89 f5       	brne	.+98     	; 0xde80 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
    de1e:	bc 01       	movw	r22, r24
    de20:	97 ff       	sbrs	r25, 7
    de22:	02 c0       	rjmp	.+4      	; 0xde28 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x88>
    de24:	6f 5f       	subi	r22, 0xFF	; 255
    de26:	7f 4f       	sbci	r23, 0xFF	; 255
    de28:	75 95       	asr	r23
    de2a:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
    de2c:	70 93 cc 0d 	sts	0x0DCC, r23	; 0x800dcc <my_lcd+0x3>
    de30:	60 93 cb 0d 	sts	0x0DCB, r22	; 0x800dcb <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
    de34:	50 93 ce 0d 	sts	0x0DCE, r21	; 0x800dce <my_lcd+0x5>
    de38:	40 93 cd 0d 	sts	0x0DCD, r20	; 0x800dcd <my_lcd+0x4>
    de3c:	be 83       	std	Y+6, r27	; 0x06
    de3e:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
    de40:	ed 81       	ldd	r30, Y+5	; 0x05
    de42:	fe 81       	ldd	r31, Y+6	; 0x06
    de44:	91 91       	ld	r25, Z+
    de46:	fe 83       	std	Y+6, r31	; 0x06
    de48:	ed 83       	std	Y+5, r30	; 0x05
    de4a:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
    de4c:	99 23       	and	r25, r25
    de4e:	09 f4       	brne	.+2      	; 0xde52 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xb2>
    de50:	dd c0       	rjmp	.+442    	; 0xe00c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
    de52:	9a 30       	cpi	r25, 0x0A	; 10
    de54:	c9 f4       	brne	.+50     	; 0xde88 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
    de56:	80 91 d5 0d 	lds	r24, 0x0DD5	; 0x800dd5 <my_lcd+0xc>
    de5a:	f8 e0       	ldi	r31, 0x08	; 8
    de5c:	8f 9f       	mul	r24, r31
    de5e:	c0 01       	movw	r24, r0
    de60:	11 24       	eor	r1, r1
    de62:	20 91 cd 0d 	lds	r18, 0x0DCD	; 0x800dcd <my_lcd+0x4>
    de66:	30 91 ce 0d 	lds	r19, 0x0DCE	; 0x800dce <my_lcd+0x5>
    de6a:	82 0f       	add	r24, r18
    de6c:	93 1f       	adc	r25, r19
    de6e:	90 93 ce 0d 	sts	0x0DCE, r25	; 0x800dce <my_lcd+0x5>
    de72:	80 93 cd 0d 	sts	0x0DCD, r24	; 0x800dcd <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
    de76:	10 92 cc 0d 	sts	0x0DCC, r1	; 0x800dcc <my_lcd+0x3>
    de7a:	10 92 cb 0d 	sts	0x0DCB, r1	; 0x800dcb <my_lcd+0x2>
    de7e:	e0 cf       	rjmp	.-64     	; 0xde40 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
    de80:	bc 01       	movw	r22, r24
    de82:	61 50       	subi	r22, 0x01	; 1
    de84:	71 09       	sbc	r23, r1
    de86:	d2 cf       	rjmp	.-92     	; 0xde2c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
    de88:	9d 30       	cpi	r25, 0x0D	; 13
    de8a:	d1 f2       	breq	.-76     	; 0xde40 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    de8c:	20 91 cb 0d 	lds	r18, 0x0DCB	; 0x800dcb <my_lcd+0x2>
    de90:	30 91 cc 0d 	lds	r19, 0x0DCC	; 0x800dcc <my_lcd+0x3>
    de94:	39 87       	std	Y+9, r19	; 0x09
    de96:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    de98:	20 91 db 0d 	lds	r18, 0x0DDB	; 0x800ddb <my_lcd+0x12>
    de9c:	30 91 dc 0d 	lds	r19, 0x0DDC	; 0x800ddc <my_lcd+0x13>
    dea0:	48 85       	ldd	r20, Y+8	; 0x08
    dea2:	59 85       	ldd	r21, Y+9	; 0x09
    dea4:	42 17       	cp	r20, r18
    dea6:	53 07       	cpc	r21, r19
    dea8:	0c f0       	brlt	.+2      	; 0xdeac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x10c>
    deaa:	88 c0       	rjmp	.+272    	; 0xdfbc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    deac:	60 90 cd 0d 	lds	r6, 0x0DCD	; 0x800dcd <my_lcd+0x4>
    deb0:	70 90 ce 0d 	lds	r7, 0x0DCE	; 0x800dce <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    deb4:	20 91 dd 0d 	lds	r18, 0x0DDD	; 0x800ddd <my_lcd+0x14>
    deb8:	30 91 de 0d 	lds	r19, 0x0DDE	; 0x800dde <my_lcd+0x15>
    debc:	62 16       	cp	r6, r18
    debe:	73 06       	cpc	r7, r19
    dec0:	0c f0       	brlt	.+2      	; 0xdec4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x124>
    dec2:	7c c0       	rjmp	.+248    	; 0xdfbc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    dec4:	50 91 d5 0d 	lds	r21, 0x0DD5	; 0x800dd5 <my_lcd+0xc>
    dec8:	5a 83       	std	Y+2, r21	; 0x02
    deca:	c5 2e       	mov	r12, r21
    decc:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    dece:	28 85       	ldd	r18, Y+8	; 0x08
    ded0:	39 85       	ldd	r19, Y+9	; 0x09
    ded2:	e6 e0       	ldi	r30, 0x06	; 6
    ded4:	5e 9f       	mul	r21, r30
    ded6:	20 0d       	add	r18, r0
    ded8:	31 1d       	adc	r19, r1
    deda:	11 24       	eor	r1, r1
    dedc:	12 16       	cp	r1, r18
    dede:	13 06       	cpc	r1, r19
    dee0:	0c f0       	brlt	.+2      	; 0xdee4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x144>
    dee2:	6c c0       	rjmp	.+216    	; 0xdfbc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x21c>
    dee4:	96 01       	movw	r18, r12
    dee6:	93 e0       	ldi	r25, 0x03	; 3
    dee8:	22 0f       	add	r18, r18
    deea:	33 1f       	adc	r19, r19
    deec:	9a 95       	dec	r25
    deee:	e1 f7       	brne	.-8      	; 0xdee8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x148>
    def0:	26 0d       	add	r18, r6
    def2:	37 1d       	adc	r19, r7
    def4:	12 16       	cp	r1, r18
    def6:	13 06       	cpc	r1, r19
    def8:	0c f0       	brlt	.+2      	; 0xdefc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x15c>
    defa:	60 c0       	rjmp	.+192    	; 0xdfbc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
    defc:	80 3b       	cpi	r24, 0xB0	; 176
    defe:	08 f0       	brcs	.+2      	; 0xdf02 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
    df00:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    df02:	f0 91 d6 0d 	lds	r31, 0x0DD6	; 0x800dd6 <my_lcd+0xd>
    df06:	ff 83       	std	Y+7, r31	; 0x07
    df08:	20 90 d1 0d 	lds	r2, 0x0DD1	; 0x800dd1 <my_lcd+0x8>
    df0c:	30 90 d2 0d 	lds	r3, 0x0DD2	; 0x800dd2 <my_lcd+0x9>
    df10:	20 91 cf 0d 	lds	r18, 0x0DCF	; 0x800dcf <my_lcd+0x6>
    df14:	30 91 d0 0d 	lds	r19, 0x0DD0	; 0x800dd0 <my_lcd+0x7>
    df18:	3c 83       	std	Y+4, r19	; 0x04
    df1a:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    df1c:	48 85       	ldd	r20, Y+8	; 0x08
    df1e:	59 85       	ldd	r21, Y+9	; 0x09
    df20:	5d 87       	std	Y+13, r21	; 0x0d
    df22:	4c 87       	std	Y+12, r20	; 0x0c
    df24:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    df26:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    df28:	25 e4       	ldi	r18, 0x45	; 69
    df2a:	39 e2       	ldi	r19, 0x29	; 41
    df2c:	24 1b       	sub	r18, r20
    df2e:	35 0b       	sbc	r19, r21
    df30:	f9 01       	movw	r30, r18
    df32:	45 e0       	ldi	r20, 0x05	; 5
    df34:	84 9f       	mul	r24, r20
    df36:	e0 0d       	add	r30, r0
    df38:	f1 1d       	adc	r31, r1
    df3a:	11 24       	eor	r1, r1
    df3c:	fb 87       	std	Y+11, r31	; 0x0b
    df3e:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    df40:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
    df42:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    df44:	55 30       	cpi	r21, 0x05	; 5
    df46:	29 f0       	breq	.+10     	; 0xdf52 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    df48:	ea 85       	ldd	r30, Y+10	; 0x0a
    df4a:	fb 85       	ldd	r31, Y+11	; 0x0b
    df4c:	ea 0d       	add	r30, r10
    df4e:	fb 1d       	adc	r31, r11
    df50:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
    df52:	23 01       	movw	r4, r6
    df54:	91 2c       	mov	r9, r1
    df56:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
    df58:	8e 2f       	mov	r24, r30
    df5a:	90 e0       	ldi	r25, 0x00	; 0
    df5c:	99 87       	std	Y+9, r25	; 0x09
    df5e:	88 87       	std	Y+8, r24	; 0x08
    df60:	e0 ff       	sbrs	r30, 0
    df62:	3c c0       	rjmp	.+120    	; 0xdfdc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
    df64:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
    df66:	2b 81       	ldd	r18, Y+3	; 0x03
    df68:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
    df6a:	eb 80       	ldd	r14, Y+3	; 0x03
    df6c:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
    df6e:	91 30       	cpi	r25, 0x01	; 1
    df70:	09 f0       	breq	.+2      	; 0xdf74 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1d4>
    df72:	42 c0       	rjmp	.+132    	; 0xdff8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    df74:	a3 01       	movw	r20, r6
    df76:	48 0d       	add	r20, r8
    df78:	59 1d       	adc	r21, r9
    df7a:	b5 01       	movw	r22, r10
    df7c:	89 ec       	ldi	r24, 0xC9	; 201
    df7e:	9d e0       	ldi	r25, 0x0D	; 13
    df80:	0e 94 85 19 	call	0x330a	; 0x330a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
    df84:	e8 85       	ldd	r30, Y+8	; 0x08
    df86:	f9 85       	ldd	r31, Y+9	; 0x09
    df88:	f5 95       	asr	r31
    df8a:	e7 95       	ror	r30
    df8c:	3f ef       	ldi	r19, 0xFF	; 255
    df8e:	83 1a       	sub	r8, r19
    df90:	93 0a       	sbc	r9, r19
    df92:	4c 0c       	add	r4, r12
    df94:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
    df96:	48 e0       	ldi	r20, 0x08	; 8
    df98:	84 16       	cp	r8, r20
    df9a:	91 04       	cpc	r9, r1
    df9c:	e9 f6       	brne	.-70     	; 0xdf58 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1b8>
    df9e:	5f ef       	ldi	r21, 0xFF	; 255
    dfa0:	a5 1a       	sub	r10, r21
    dfa2:	b5 0a       	sbc	r11, r21
    dfa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    dfa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    dfa8:	8c 0d       	add	r24, r12
    dfaa:	9d 1d       	adc	r25, r13
    dfac:	9d 87       	std	Y+13, r25	; 0x0d
    dfae:	8c 87       	std	Y+12, r24	; 0x0c
    dfb0:	99 81       	ldd	r25, Y+1	; 0x01
    dfb2:	9f 5f       	subi	r25, 0xFF	; 255
    dfb4:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    dfb6:	96 30       	cpi	r25, 0x06	; 6
    dfb8:	09 f0       	breq	.+2      	; 0xdfbc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x21c>
    dfba:	c2 cf       	rjmp	.-124    	; 0xdf40 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
    dfbc:	20 91 d5 0d 	lds	r18, 0x0DD5	; 0x800dd5 <my_lcd+0xc>
    dfc0:	80 91 cb 0d 	lds	r24, 0x0DCB	; 0x800dcb <my_lcd+0x2>
    dfc4:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <my_lcd+0x3>
    dfc8:	e6 e0       	ldi	r30, 0x06	; 6
    dfca:	2e 9f       	mul	r18, r30
    dfcc:	80 0d       	add	r24, r0
    dfce:	91 1d       	adc	r25, r1
    dfd0:	11 24       	eor	r1, r1
    dfd2:	90 93 cc 0d 	sts	0x0DCC, r25	; 0x800dcc <my_lcd+0x3>
    dfd6:	80 93 cb 0d 	sts	0x0DCB, r24	; 0x800dcb <my_lcd+0x2>
    dfda:	32 cf       	rjmp	.-412    	; 0xde40 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
    dfdc:	eb 81       	ldd	r30, Y+3	; 0x03
    dfde:	fc 81       	ldd	r31, Y+4	; 0x04
    dfe0:	2e 16       	cp	r2, r30
    dfe2:	3f 06       	cpc	r3, r31
    dfe4:	79 f2       	breq	.-98     	; 0xdf84 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
    dfe6:	ff 81       	ldd	r31, Y+7	; 0x07
    dfe8:	f1 11       	cpse	r31, r1
    dfea:	cc cf       	rjmp	.-104    	; 0xdf84 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
    dfec:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    dfee:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
    dff0:	21 30       	cpi	r18, 0x01	; 1
    dff2:	11 f4       	brne	.+4      	; 0xdff8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    dff4:	91 01       	movw	r18, r2
    dff6:	be cf       	rjmp	.-132    	; 0xdf74 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    dff8:	86 01       	movw	r16, r12
    dffa:	96 01       	movw	r18, r12
    dffc:	a2 01       	movw	r20, r4
    dffe:	6c 85       	ldd	r22, Y+12	; 0x0c
    e000:	7d 85       	ldd	r23, Y+13	; 0x0d
    e002:	89 ec       	ldi	r24, 0xC9	; 201
    e004:	9d e0       	ldi	r25, 0x0D	; 13
    e006:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    e00a:	bc cf       	rjmp	.-136    	; 0xdf84 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.162():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
    e00c:	2d 96       	adiw	r28, 0x0d	; 13
    e00e:	0f b6       	in	r0, 0x3f	; 63
    e010:	f8 94       	cli
    e012:	de bf       	out	0x3e, r29	; 62
    e014:	0f be       	out	0x3f, r0	; 63
    e016:	cd bf       	out	0x3d, r28	; 61
    e018:	df 91       	pop	r29
    e01a:	cf 91       	pop	r28
    e01c:	1f 91       	pop	r17
    e01e:	0f 91       	pop	r16
    e020:	ff 90       	pop	r15
    e022:	ef 90       	pop	r14
    e024:	df 90       	pop	r13
    e026:	cf 90       	pop	r12
    e028:	bf 90       	pop	r11
    e02a:	af 90       	pop	r10
    e02c:	9f 90       	pop	r9
    e02e:	8f 90       	pop	r8
    e030:	7f 90       	pop	r7
    e032:	6f 90       	pop	r6
    e034:	5f 90       	pop	r5
    e036:	4f 90       	pop	r4
    e038:	3f 90       	pop	r3
    e03a:	2f 90       	pop	r2
    e03c:	08 95       	ret

0000e03e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e03e:	8f 92       	push	r8
    e040:	9f 92       	push	r9
    e042:	af 92       	push	r10
    e044:	bf 92       	push	r11
    e046:	ef 92       	push	r14
    e048:	ff 92       	push	r15
    e04a:	0f 93       	push	r16
    e04c:	1f 93       	push	r17
    e04e:	cf 93       	push	r28
    e050:	df 93       	push	r29
    e052:	cd b7       	in	r28, 0x3d	; 61
    e054:	de b7       	in	r29, 0x3e	; 62
    e056:	a1 97       	sbiw	r28, 0x21	; 33
    e058:	0f b6       	in	r0, 0x3f	; 63
    e05a:	f8 94       	cli
    e05c:	de bf       	out	0x3e, r29	; 62
    e05e:	0f be       	out	0x3f, r0	; 63
    e060:	cd bf       	out	0x3d, r28	; 61
    e062:	7c 01       	movw	r14, r24
    e064:	fa 01       	movw	r30, r20
    e066:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    e068:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e06a:	22 30       	cpi	r18, 0x02	; 2
    e06c:	08 f4       	brcc	.+2      	; 0xe070 <Print::printNumber(unsigned long, unsigned char)+0x32>
    e06e:	2a e0       	ldi	r18, 0x0A	; 10
    e070:	8e 01       	movw	r16, r28
    e072:	0f 5d       	subi	r16, 0xDF	; 223
    e074:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    e076:	82 2e       	mov	r8, r18
    e078:	91 2c       	mov	r9, r1
    e07a:	b1 2c       	mov	r11, r1
    e07c:	a1 2c       	mov	r10, r1
    e07e:	bf 01       	movw	r22, r30
    e080:	a5 01       	movw	r20, r10
    e082:	94 01       	movw	r18, r8
    e084:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    e088:	f9 01       	movw	r30, r18
    e08a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e08c:	6a 30       	cpi	r22, 0x0A	; 10
    e08e:	74 f5       	brge	.+92     	; 0xe0ec <Print::printNumber(unsigned long, unsigned char)+0xae>
    e090:	60 5d       	subi	r22, 0xD0	; 208
    e092:	d8 01       	movw	r26, r16
    e094:	6e 93       	st	-X, r22
    e096:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    e098:	23 2b       	or	r18, r19
    e09a:	24 2b       	or	r18, r20
    e09c:	25 2b       	or	r18, r21
    e09e:	79 f7       	brne	.-34     	; 0xe07e <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    e0a0:	90 e0       	ldi	r25, 0x00	; 0
    e0a2:	80 e0       	ldi	r24, 0x00	; 0
write():
    e0a4:	10 97       	sbiw	r26, 0x00	; 0
    e0a6:	89 f0       	breq	.+34     	; 0xe0ca <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    e0a8:	fd 01       	movw	r30, r26
    e0aa:	01 90       	ld	r0, Z+
    e0ac:	00 20       	and	r0, r0
    e0ae:	e9 f7       	brne	.-6      	; 0xe0aa <Print::printNumber(unsigned long, unsigned char)+0x6c>
    e0b0:	31 97       	sbiw	r30, 0x01	; 1
    e0b2:	af 01       	movw	r20, r30
    e0b4:	4a 1b       	sub	r20, r26
    e0b6:	5b 0b       	sbc	r21, r27
    e0b8:	d7 01       	movw	r26, r14
    e0ba:	ed 91       	ld	r30, X+
    e0bc:	fc 91       	ld	r31, X
    e0be:	02 80       	ldd	r0, Z+2	; 0x02
    e0c0:	f3 81       	ldd	r31, Z+3	; 0x03
    e0c2:	e0 2d       	mov	r30, r0
    e0c4:	b8 01       	movw	r22, r16
    e0c6:	c7 01       	movw	r24, r14
    e0c8:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    e0ca:	a1 96       	adiw	r28, 0x21	; 33
    e0cc:	0f b6       	in	r0, 0x3f	; 63
    e0ce:	f8 94       	cli
    e0d0:	de bf       	out	0x3e, r29	; 62
    e0d2:	0f be       	out	0x3f, r0	; 63
    e0d4:	cd bf       	out	0x3d, r28	; 61
    e0d6:	df 91       	pop	r29
    e0d8:	cf 91       	pop	r28
    e0da:	1f 91       	pop	r17
    e0dc:	0f 91       	pop	r16
    e0de:	ff 90       	pop	r15
    e0e0:	ef 90       	pop	r14
    e0e2:	bf 90       	pop	r11
    e0e4:	af 90       	pop	r10
    e0e6:	9f 90       	pop	r9
    e0e8:	8f 90       	pop	r8
    e0ea:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e0ec:	69 5c       	subi	r22, 0xC9	; 201
    e0ee:	d1 cf       	rjmp	.-94     	; 0xe092 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000e0f0 <TwoWire::requestFrom(int, int) [clone .constprop.137]>:
_ZN7TwoWire11requestFromEii.constprop.137():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
    e0f0:	68 2f       	mov	r22, r24
    e0f2:	88 e6       	ldi	r24, 0x68	; 104
    e0f4:	0e 94 29 6c 	call	0xd852	; 0xd852 <twi_readFrom.part.0.constprop.177>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    e0f8:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    e0fc:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    e100:	08 95       	ret

0000e102 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    e102:	8f 92       	push	r8
    e104:	9f 92       	push	r9
    e106:	af 92       	push	r10
    e108:	bf 92       	push	r11
    e10a:	cf 92       	push	r12
    e10c:	df 92       	push	r13
    e10e:	ef 92       	push	r14
    e110:	ff 92       	push	r15
    e112:	0f 93       	push	r16
    e114:	1f 93       	push	r17
    e116:	cf 93       	push	r28
    e118:	df 93       	push	r29
    e11a:	7c 01       	movw	r14, r24
    e11c:	eb 01       	movw	r28, r22
    e11e:	6c 01       	movw	r12, r24
    e120:	82 e0       	ldi	r24, 0x02	; 2
    e122:	c8 0e       	add	r12, r24
    e124:	d1 1c       	adc	r13, r1
    e126:	47 01       	movw	r8, r14
    e128:	e5 e0       	ldi	r30, 0x05	; 5
    e12a:	8e 0e       	add	r8, r30
    e12c:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    e12e:	10 e0       	ldi	r17, 0x00	; 0
    e130:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    e132:	f6 01       	movw	r30, r12
    e134:	41 91       	ld	r20, Z+
    e136:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    e138:	50 e0       	ldi	r21, 0x00	; 0
    e13a:	70 e0       	ldi	r23, 0x00	; 0
    e13c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    e13e:	2a e0       	ldi	r18, 0x0A	; 10
    e140:	ce 01       	movw	r24, r28
    e142:	0e 94 1f 70 	call	0xe03e	; 0xe03e <Print::printNumber(unsigned long, unsigned char)>
    e146:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    e148:	e8 81       	ld	r30, Y
    e14a:	f9 81       	ldd	r31, Y+1	; 0x01
    e14c:	01 90       	ld	r0, Z+
    e14e:	f0 81       	ld	r31, Z
    e150:	e0 2d       	mov	r30, r0
    e152:	6e e2       	ldi	r22, 0x2E	; 46
    e154:	ce 01       	movw	r24, r28
    e156:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    e158:	8a 0d       	add	r24, r10
    e15a:	9b 1d       	adc	r25, r11
    e15c:	08 0f       	add	r16, r24
    e15e:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    e160:	c8 14       	cp	r12, r8
    e162:	d9 04       	cpc	r13, r9
    e164:	31 f7       	brne	.-52     	; 0xe132 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    e166:	f7 01       	movw	r30, r14
    e168:	45 81       	ldd	r20, Z+5	; 0x05
    e16a:	50 e0       	ldi	r21, 0x00	; 0
    e16c:	70 e0       	ldi	r23, 0x00	; 0
    e16e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    e170:	2a e0       	ldi	r18, 0x0A	; 10
    e172:	ce 01       	movw	r24, r28
    e174:	0e 94 1f 70 	call	0xe03e	; 0xe03e <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    e178:	80 0f       	add	r24, r16
    e17a:	91 1f       	adc	r25, r17
    e17c:	df 91       	pop	r29
    e17e:	cf 91       	pop	r28
    e180:	1f 91       	pop	r17
    e182:	0f 91       	pop	r16
    e184:	ff 90       	pop	r15
    e186:	ef 90       	pop	r14
    e188:	df 90       	pop	r13
    e18a:	cf 90       	pop	r12
    e18c:	bf 90       	pop	r11
    e18e:	af 90       	pop	r10
    e190:	9f 90       	pop	r9
    e192:	8f 90       	pop	r8
    e194:	08 95       	ret

0000e196 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    e196:	1f 93       	push	r17
    e198:	cf 93       	push	r28
    e19a:	df 93       	push	r29
    e19c:	18 2f       	mov	r17, r24
    e19e:	66 e2       	ldi	r22, 0x26	; 38
    e1a0:	70 e0       	ldi	r23, 0x00	; 0
    e1a2:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
    e1a6:	c8 2f       	mov	r28, r24
    e1a8:	d0 e0       	ldi	r29, 0x00	; 0
    e1aa:	dc 2f       	mov	r29, r28
    e1ac:	cc 27       	eor	r28, r28
    e1ae:	67 e2       	ldi	r22, 0x27	; 39
    e1b0:	70 e0       	ldi	r23, 0x00	; 0
    e1b2:	81 2f       	mov	r24, r17
    e1b4:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
    e1b8:	8c 0f       	add	r24, r28
    e1ba:	9d 2f       	mov	r25, r29
    e1bc:	91 1d       	adc	r25, r1
    e1be:	df 91       	pop	r29
    e1c0:	cf 91       	pop	r28
    e1c2:	1f 91       	pop	r17
    e1c4:	08 95       	ret

0000e1c6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
    e1c6:	ff 92       	push	r15
    e1c8:	0f 93       	push	r16
    e1ca:	1f 93       	push	r17
    e1cc:	cf 93       	push	r28
    e1ce:	df 93       	push	r29
    e1d0:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
    e1d2:	10 e0       	ldi	r17, 0x00	; 0
    e1d4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
    e1d6:	8f 2d       	mov	r24, r15
    e1d8:	0e 94 cb 70 	call	0xe196	; 0xe196 <W5500Class::readSnRX_RSR(unsigned char)>
    e1dc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
    e1de:	89 2b       	or	r24, r25
    e1e0:	21 f0       	breq	.+8      	; 0xe1ea <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
    e1e2:	8f 2d       	mov	r24, r15
    e1e4:	0e 94 cb 70 	call	0xe196	; 0xe196 <W5500Class::readSnRX_RSR(unsigned char)>
    e1e8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
    e1ea:	c0 17       	cp	r28, r16
    e1ec:	d1 07       	cpc	r29, r17
    e1ee:	99 f7       	brne	.-26     	; 0xe1d6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
    e1f0:	ce 01       	movw	r24, r28
    e1f2:	df 91       	pop	r29
    e1f4:	cf 91       	pop	r28
    e1f6:	1f 91       	pop	r17
    e1f8:	0f 91       	pop	r16
    e1fa:	ff 90       	pop	r15
    e1fc:	08 95       	ret

0000e1fe <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    e1fe:	fc 01       	movw	r30, r24
    e200:	84 85       	ldd	r24, Z+12	; 0x0c
    e202:	88 30       	cpi	r24, 0x08	; 8
    e204:	11 f0       	breq	.+4      	; 0xe20a <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    e206:	0c 94 e3 70 	jmp	0xe1c6	; 0xe1c6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    e20a:	90 e0       	ldi	r25, 0x00	; 0
    e20c:	80 e0       	ldi	r24, 0x00	; 0
    e20e:	08 95       	ret

0000e210 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    e210:	1f 93       	push	r17
    e212:	cf 93       	push	r28
    e214:	df 93       	push	r29
    e216:	18 2f       	mov	r17, r24
    e218:	60 e2       	ldi	r22, 0x20	; 32
    e21a:	70 e0       	ldi	r23, 0x00	; 0
    e21c:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
    e220:	c8 2f       	mov	r28, r24
    e222:	d0 e0       	ldi	r29, 0x00	; 0
    e224:	dc 2f       	mov	r29, r28
    e226:	cc 27       	eor	r28, r28
    e228:	61 e2       	ldi	r22, 0x21	; 33
    e22a:	70 e0       	ldi	r23, 0x00	; 0
    e22c:	81 2f       	mov	r24, r17
    e22e:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
    e232:	8c 0f       	add	r24, r28
    e234:	9d 2f       	mov	r25, r29
    e236:	91 1d       	adc	r25, r1
    e238:	df 91       	pop	r29
    e23a:	cf 91       	pop	r28
    e23c:	1f 91       	pop	r17
    e23e:	08 95       	ret

0000e240 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
    e240:	ff 92       	push	r15
    e242:	0f 93       	push	r16
    e244:	1f 93       	push	r17
    e246:	cf 93       	push	r28
    e248:	df 93       	push	r29
    e24a:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
    e24c:	10 e0       	ldi	r17, 0x00	; 0
    e24e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
    e250:	8f 2d       	mov	r24, r15
    e252:	0e 94 08 71 	call	0xe210	; 0xe210 <W5500Class::readSnTX_FSR(unsigned char)>
    e256:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
    e258:	89 2b       	or	r24, r25
    e25a:	21 f0       	breq	.+8      	; 0xe264 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
    e25c:	8f 2d       	mov	r24, r15
    e25e:	0e 94 08 71 	call	0xe210	; 0xe210 <W5500Class::readSnTX_FSR(unsigned char)>
    e262:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
    e264:	c0 17       	cp	r28, r16
    e266:	d1 07       	cpc	r29, r17
    e268:	99 f7       	brne	.-26     	; 0xe250 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
    e26a:	ce 01       	movw	r24, r28
    e26c:	df 91       	pop	r29
    e26e:	cf 91       	pop	r28
    e270:	1f 91       	pop	r17
    e272:	0f 91       	pop	r16
    e274:	ff 90       	pop	r15
    e276:	08 95       	ret

0000e278 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    e278:	0e 94 c2 a4 	call	0x14984	; 0x14984 <abort>

0000e27c <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    e27c:	cf 92       	push	r12
    e27e:	df 92       	push	r13
    e280:	ef 92       	push	r14
    e282:	ff 92       	push	r15
    e284:	0f 93       	push	r16
    e286:	1f 93       	push	r17
    e288:	cf 93       	push	r28
    e28a:	df 93       	push	r29
    e28c:	cd b7       	in	r28, 0x3d	; 61
    e28e:	de b7       	in	r29, 0x3e	; 62
    e290:	af 97       	sbiw	r28, 0x2f	; 47
    e292:	0f b6       	in	r0, 0x3f	; 63
    e294:	f8 94       	cli
    e296:	de bf       	out	0x3e, r29	; 62
    e298:	0f be       	out	0x3f, r0	; 63
    e29a:	cd bf       	out	0x3d, r28	; 61
    e29c:	7c 01       	movw	r14, r24
    e29e:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    e2a0:	02 ee       	ldi	r16, 0xE2	; 226
    e2a2:	12 e0       	ldi	r17, 0x02	; 2
    e2a4:	1a 83       	std	Y+2, r17	; 0x02
    e2a6:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e2a8:	1c 86       	std	Y+12, r1	; 0x0c
    e2aa:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
    e2ac:	88 ee       	ldi	r24, 0xE8	; 232
    e2ae:	93 e0       	ldi	r25, 0x03	; 3
    e2b0:	a0 e0       	ldi	r26, 0x00	; 0
    e2b2:	b0 e0       	ldi	r27, 0x00	; 0
    e2b4:	8d 87       	std	Y+13, r24	; 0x0d
    e2b6:	9e 87       	std	Y+14, r25	; 0x0e
    e2b8:	af 87       	std	Y+15, r26	; 0x0f
    e2ba:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    e2bc:	88 e9       	ldi	r24, 0x98	; 152
    e2be:	92 e0       	ldi	r25, 0x02	; 2
    e2c0:	9a 87       	std	Y+10, r25	; 0x0a
    e2c2:	89 87       	std	Y+9, r24	; 0x09
    e2c4:	88 e0       	ldi	r24, 0x08	; 8
    e2c6:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    e2c8:	19 8f       	std	Y+25, r17	; 0x19
    e2ca:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    e2cc:	1a 8e       	std	Y+26, r1	; 0x1a
    e2ce:	1b 8e       	std	Y+27, r1	; 0x1b
    e2d0:	1c 8e       	std	Y+28, r1	; 0x1c
    e2d2:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    e2d4:	1b a7       	std	Y+43, r17	; 0x2b
    e2d6:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    e2d8:	1c a6       	std	Y+44, r1	; 0x2c
    e2da:	1d a6       	std	Y+45, r1	; 0x2d
    e2dc:	1e a6       	std	Y+46, r1	; 0x2e
    e2de:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    e2e0:	80 91 1b 0c 	lds	r24, 0x0C1B	; 0x800c1b <Ethernet+0x2>
    e2e4:	90 91 1c 0c 	lds	r25, 0x0C1C	; 0x800c1c <Ethernet+0x3>
    e2e8:	a0 91 1d 0c 	lds	r26, 0x0C1D	; 0x800c1d <Ethernet+0x4>
    e2ec:	b0 91 1e 0c 	lds	r27, 0x0C1E	; 0x800c1e <Ethernet+0x5>
    e2f0:	8e a3       	std	Y+38, r24	; 0x26
    e2f2:	9f a3       	std	Y+39, r25	; 0x27
    e2f4:	a8 a7       	std	Y+40, r26	; 0x28
    e2f6:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    e2f8:	8b 83       	std	Y+3, r24	; 0x03
    e2fa:	9c 83       	std	Y+4, r25	; 0x04
    e2fc:	ad 83       	std	Y+5, r26	; 0x05
    e2fe:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
    e300:	18 86       	std	Y+8, r1	; 0x08
    e302:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    e304:	ae 01       	movw	r20, r28
    e306:	46 5d       	subi	r20, 0xD6	; 214
    e308:	5f 4f       	sbci	r21, 0xFF	; 255
    e30a:	ce 01       	movw	r24, r28
    e30c:	01 96       	adiw	r24, 0x01	; 1
    e30e:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
    e312:	81 30       	cpi	r24, 0x01	; 1
    e314:	91 05       	cpc	r25, r1
    e316:	b1 f4       	brne	.+44     	; 0xe344 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
    e318:	d7 01       	movw	r26, r14
    e31a:	ed 91       	ld	r30, X+
    e31c:	fc 91       	ld	r31, X
    e31e:	04 88       	ldd	r0, Z+20	; 0x14
    e320:	f5 89       	ldd	r31, Z+21	; 0x15
    e322:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    e324:	1d a3       	std	Y+37, r17	; 0x25
    e326:	0c a3       	std	Y+36, r16	; 0x24
    e328:	8c a5       	ldd	r24, Y+44	; 0x2c
    e32a:	9d a5       	ldd	r25, Y+45	; 0x2d
    e32c:	ae a5       	ldd	r26, Y+46	; 0x2e
    e32e:	bf a5       	ldd	r27, Y+47	; 0x2f
    e330:	8e a3       	std	Y+38, r24	; 0x26
    e332:	9f a3       	std	Y+39, r25	; 0x27
    e334:	a8 a7       	std	Y+40, r26	; 0x28
    e336:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    e338:	a6 01       	movw	r20, r12
    e33a:	be 01       	movw	r22, r28
    e33c:	6c 5d       	subi	r22, 0xDC	; 220
    e33e:	7f 4f       	sbci	r23, 0xFF	; 255
    e340:	c7 01       	movw	r24, r14
    e342:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
    e344:	af 96       	adiw	r28, 0x2f	; 47
    e346:	0f b6       	in	r0, 0x3f	; 63
    e348:	f8 94       	cli
    e34a:	de bf       	out	0x3e, r29	; 62
    e34c:	0f be       	out	0x3f, r0	; 63
    e34e:	cd bf       	out	0x3d, r28	; 61
    e350:	df 91       	pop	r29
    e352:	cf 91       	pop	r28
    e354:	1f 91       	pop	r17
    e356:	0f 91       	pop	r16
    e358:	ff 90       	pop	r15
    e35a:	ef 90       	pop	r14
    e35c:	df 90       	pop	r13
    e35e:	cf 90       	pop	r12
    e360:	08 95       	ret

0000e362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
    e362:	ef 92       	push	r14
    e364:	ff 92       	push	r15
    e366:	0f 93       	push	r16
    e368:	1f 93       	push	r17
    e36a:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
    e36c:	e0 90 d3 0d 	lds	r14, 0x0DD3	; 0x800dd3 <my_lcd+0xa>
    e370:	f0 90 d4 0d 	lds	r15, 0x0DD4	; 0x800dd4 <my_lcd+0xb>
    e374:	01 e0       	ldi	r16, 0x01	; 1
    e376:	10 e0       	ldi	r17, 0x00	; 0
    e378:	ab 01       	movw	r20, r22
    e37a:	bc 01       	movw	r22, r24
    e37c:	89 ec       	ldi	r24, 0xC9	; 201
    e37e:	9d e0       	ldi	r25, 0x0D	; 13
    e380:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
    e384:	1f 91       	pop	r17
    e386:	0f 91       	pop	r16
    e388:	ff 90       	pop	r15
    e38a:	ef 90       	pop	r14
    e38c:	08 95       	ret

0000e38e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    e38e:	8f 92       	push	r8
    e390:	9f 92       	push	r9
    e392:	af 92       	push	r10
    e394:	bf 92       	push	r11
    e396:	cf 92       	push	r12
    e398:	df 92       	push	r13
    e39a:	ef 92       	push	r14
    e39c:	ff 92       	push	r15
    e39e:	0f 93       	push	r16
    e3a0:	1f 93       	push	r17
    e3a2:	cf 93       	push	r28
    e3a4:	df 93       	push	r29
    e3a6:	6c 01       	movw	r12, r24
    e3a8:	eb 01       	movw	r28, r22
    e3aa:	4a 01       	movw	r8, r20
    e3ac:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
    e3ae:	9a 01       	movw	r18, r20
    e3b0:	28 1b       	sub	r18, r24
    e3b2:	39 0b       	sbc	r19, r25
    e3b4:	89 01       	movw	r16, r18
    e3b6:	0f 5f       	subi	r16, 0xFF	; 255
    e3b8:	1f 4f       	sbci	r17, 0xFF	; 255
    e3ba:	c7 01       	movw	r24, r14
    e3bc:	86 1b       	sub	r24, r22
    e3be:	97 0b       	sbc	r25, r23
    e3c0:	5c 01       	movw	r10, r24
    e3c2:	4f ef       	ldi	r20, 0xFF	; 255
    e3c4:	a4 1a       	sub	r10, r20
    e3c6:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
    e3c8:	17 ff       	sbrs	r17, 7
    e3ca:	04 c0       	rjmp	.+8      	; 0xe3d4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
    e3cc:	89 01       	movw	r16, r18
    e3ce:	00 95       	com	r16
    e3d0:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
    e3d2:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
    e3d4:	b7 fe       	sbrs	r11, 7
    e3d6:	04 c0       	rjmp	.+8      	; 0xe3e0 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.188]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
    e3d8:	5c 01       	movw	r10, r24
    e3da:	a0 94       	com	r10
    e3dc:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    e3de:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
    e3e0:	a8 01       	movw	r20, r16
    e3e2:	be 01       	movw	r22, r28
    e3e4:	c6 01       	movw	r24, r12
    e3e6:	0e 94 b1 71 	call	0xe362	; 0xe362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
    e3ea:	a8 01       	movw	r20, r16
    e3ec:	b7 01       	movw	r22, r14
    e3ee:	c6 01       	movw	r24, r12
    e3f0:	0e 94 b1 71 	call	0xe362	; 0xe362 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.189]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
    e3f4:	e0 90 d3 0d 	lds	r14, 0x0DD3	; 0x800dd3 <my_lcd+0xa>
    e3f8:	f0 90 d4 0d 	lds	r15, 0x0DD4	; 0x800dd4 <my_lcd+0xb>
    e3fc:	85 01       	movw	r16, r10
    e3fe:	21 e0       	ldi	r18, 0x01	; 1
    e400:	30 e0       	ldi	r19, 0x00	; 0
    e402:	ae 01       	movw	r20, r28
    e404:	b6 01       	movw	r22, r12
    e406:	89 ec       	ldi	r24, 0xC9	; 201
    e408:	9d e0       	ldi	r25, 0x0D	; 13
    e40a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    e40e:	e0 90 d3 0d 	lds	r14, 0x0DD3	; 0x800dd3 <my_lcd+0xa>
    e412:	f0 90 d4 0d 	lds	r15, 0x0DD4	; 0x800dd4 <my_lcd+0xb>
    e416:	21 e0       	ldi	r18, 0x01	; 1
    e418:	30 e0       	ldi	r19, 0x00	; 0
    e41a:	ae 01       	movw	r20, r28
    e41c:	b4 01       	movw	r22, r8
    e41e:	89 ec       	ldi	r24, 0xC9	; 201
    e420:	9d e0       	ldi	r25, 0x0D	; 13
    e422:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
    e426:	df 91       	pop	r29
    e428:	cf 91       	pop	r28
    e42a:	1f 91       	pop	r17
    e42c:	0f 91       	pop	r16
    e42e:	ff 90       	pop	r15
    e430:	ef 90       	pop	r14
    e432:	df 90       	pop	r13
    e434:	cf 90       	pop	r12
    e436:	bf 90       	pop	r11
    e438:	af 90       	pop	r10
    e43a:	9f 90       	pop	r9
    e43c:	8f 90       	pop	r8
    e43e:	08 95       	ret

0000e440 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.187():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    e440:	ef 92       	push	r14
    e442:	ff 92       	push	r15
    e444:	0f 93       	push	r16
    e446:	1f 93       	push	r17
    e448:	cf 93       	push	r28
    e44a:	df 93       	push	r29
    e44c:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
    e44e:	ea 01       	movw	r28, r20
    e450:	c8 1b       	sub	r28, r24
    e452:	d9 0b       	sbc	r29, r25
    e454:	9e 01       	movw	r18, r28
    e456:	2f 5f       	subi	r18, 0xFF	; 255
    e458:	3f 4f       	sbci	r19, 0xFF	; 255
    e45a:	df 01       	movw	r26, r30
    e45c:	a6 1b       	sub	r26, r22
    e45e:	b7 0b       	sbc	r27, r23
    e460:	8d 01       	movw	r16, r26
    e462:	0f 5f       	subi	r16, 0xFF	; 255
    e464:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
    e466:	37 ff       	sbrs	r19, 7
    e468:	04 c0       	rjmp	.+8      	; 0xe472 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
    e46a:	9e 01       	movw	r18, r28
    e46c:	20 95       	com	r18
    e46e:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
    e470:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
    e472:	17 ff       	sbrs	r17, 7
    e474:	04 c0       	rjmp	.+8      	; 0xe47e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.187]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
    e476:	8d 01       	movw	r16, r26
    e478:	00 95       	com	r16
    e47a:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    e47c:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
    e47e:	e0 90 d3 0d 	lds	r14, 0x0DD3	; 0x800dd3 <my_lcd+0xa>
    e482:	f0 90 d4 0d 	lds	r15, 0x0DD4	; 0x800dd4 <my_lcd+0xb>
    e486:	ab 01       	movw	r20, r22
    e488:	bc 01       	movw	r22, r24
    e48a:	89 ec       	ldi	r24, 0xC9	; 201
    e48c:	9d e0       	ldi	r25, 0x0D	; 13
    e48e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
    e492:	df 91       	pop	r29
    e494:	cf 91       	pop	r28
    e496:	1f 91       	pop	r17
    e498:	0f 91       	pop	r16
    e49a:	ff 90       	pop	r15
    e49c:	ef 90       	pop	r14
    e49e:	08 95       	ret

0000e4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>:
_ZN7TwoWire17beginTransmissionEh.constprop.175():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    e4a0:	91 e0       	ldi	r25, 0x01	; 1
    e4a2:	90 93 f8 10 	sts	0x10F8, r25	; 0x8010f8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
    e4a6:	80 93 f7 10 	sts	0x10F7, r24	; 0x8010f7 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    e4aa:	10 92 f6 10 	sts	0x10F6, r1	; 0x8010f6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
    e4ae:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
    e4b2:	08 95       	ret

0000e4b4 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.169]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.169():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
    e4b4:	ef 92       	push	r14
    e4b6:	ff 92       	push	r15
    e4b8:	0f 93       	push	r16
    e4ba:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    e4bc:	e9 ec       	ldi	r30, 0xC9	; 201
    e4be:	fd e0       	ldi	r31, 0x0D	; 13
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.169():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
    e4c0:	04 89       	ldd	r16, Z+20	; 0x14
    e4c2:	15 89       	ldd	r17, Z+21	; 0x15
    e4c4:	22 89       	ldd	r18, Z+18	; 0x12
    e4c6:	33 89       	ldd	r19, Z+19	; 0x13
    e4c8:	7c 01       	movw	r14, r24
    e4ca:	50 e0       	ldi	r21, 0x00	; 0
    e4cc:	40 e0       	ldi	r20, 0x00	; 0
    e4ce:	70 e0       	ldi	r23, 0x00	; 0
    e4d0:	60 e0       	ldi	r22, 0x00	; 0
    e4d2:	cf 01       	movw	r24, r30
    e4d4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
    e4d8:	1f 91       	pop	r17
    e4da:	0f 91       	pop	r16
    e4dc:	ff 90       	pop	r15
    e4de:	ef 90       	pop	r14
    e4e0:	08 95       	ret

0000e4e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]>:
_Z11show_stringPciihjjb.constprop.157():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
    e4e2:	8f 92       	push	r8
    e4e4:	9f 92       	push	r9
    e4e6:	af 92       	push	r10
    e4e8:	bf 92       	push	r11
    e4ea:	cf 92       	push	r12
    e4ec:	df 92       	push	r13
    e4ee:	ef 92       	push	r14
    e4f0:	ff 92       	push	r15
    e4f2:	0f 93       	push	r16
    e4f4:	1f 93       	push	r17
    e4f6:	cf 93       	push	r28
    e4f8:	df 93       	push	r29
    e4fa:	00 d0       	rcall	.+0      	; 0xe4fc <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x1a>
    e4fc:	00 d0       	rcall	.+0      	; 0xe4fe <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x1c>
    e4fe:	cd b7       	in	r28, 0x3d	; 61
    e500:	de b7       	in	r29, 0x3e	; 62
    e502:	6c 01       	movw	r12, r24
    e504:	5b 01       	movw	r10, r22
    e506:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
    e508:	10 92 d6 0d 	sts	0x0DD6, r1	; 0x800dd6 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
    e50c:	20 93 d5 0d 	sts	0x0DD5, r18	; 0x800dd5 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
    e510:	10 93 d0 0d 	sts	0x0DD0, r17	; 0x800dd0 <my_lcd+0x7>
    e514:	00 93 cf 0d 	sts	0x0DCF, r16	; 0x800dcf <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
    e518:	f0 92 d2 0d 	sts	0x0DD2, r15	; 0x800dd2 <my_lcd+0x9>
    e51c:	e0 92 d1 0d 	sts	0x0DD1, r14	; 0x800dd1 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    e520:	1a 82       	std	Y+2, r1	; 0x02
    e522:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
    e524:	1c 82       	std	Y+4, r1	; 0x04
    e526:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
    e528:	1e 82       	std	Y+6, r1	; 0x06
    e52a:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    e52c:	fc 01       	movw	r30, r24
    e52e:	01 90       	ld	r0, Z+
    e530:	00 20       	and	r0, r0
    e532:	e9 f7       	brne	.-6      	; 0xe52e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x4c>
    e534:	31 97       	sbiw	r30, 0x01	; 1
    e536:	8f 01       	movw	r16, r30
    e538:	08 1b       	sub	r16, r24
    e53a:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    e53c:	b8 01       	movw	r22, r16
    e53e:	6f 5f       	subi	r22, 0xFF	; 255
    e540:	7f 4f       	sbci	r23, 0xFF	; 255
    e542:	90 e0       	ldi	r25, 0x00	; 0
    e544:	80 e0       	ldi	r24, 0x00	; 0
    e546:	0e 94 e1 a3 	call	0x147c2	; 0x147c2 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
    e54a:	00 97       	sbiw	r24, 0x00	; 0
    e54c:	81 f0       	breq	.+32     	; 0xe56e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
    e54e:	9a 83       	std	Y+2, r25	; 0x02
    e550:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
    e552:	1c 83       	std	Y+4, r17	; 0x04
    e554:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    e556:	2d 81       	ldd	r18, Y+5	; 0x05
    e558:	3e 81       	ldd	r19, Y+6	; 0x06
    e55a:	23 2b       	or	r18, r19
    e55c:	11 f4       	brne	.+4      	; 0xe562 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x80>
    e55e:	fc 01       	movw	r30, r24
    e560:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    e562:	1e 83       	std	Y+6, r17	; 0x06
    e564:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
    e566:	b6 01       	movw	r22, r12
    e568:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
    e56c:	0c c0       	rjmp	.+24     	; 0xe586 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    e56e:	89 81       	ldd	r24, Y+1	; 0x01
    e570:	9a 81       	ldd	r25, Y+2	; 0x02
    e572:	00 97       	sbiw	r24, 0x00	; 0
    e574:	11 f0       	breq	.+4      	; 0xe57a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.157]+0x98>
    e576:	0e 94 51 9d 	call	0x13aa2	; 0x13aa2 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
    e57a:	1a 82       	std	Y+2, r1	; 0x02
    e57c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
    e57e:	1e 82       	std	Y+6, r1	; 0x06
    e580:	1d 82       	std	Y+5, r1	; 0x05
    e582:	1c 82       	std	Y+4, r1	; 0x04
    e584:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.157():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
    e586:	a4 01       	movw	r20, r8
    e588:	b5 01       	movw	r22, r10
    e58a:	ce 01       	movw	r24, r28
    e58c:	01 96       	adiw	r24, 0x01	; 1
    e58e:	0e 94 d0 6e 	call	0xdda0	; 0xdda0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.162]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
    e592:	89 81       	ldd	r24, Y+1	; 0x01
    e594:	9a 81       	ldd	r25, Y+2	; 0x02
    e596:	0e 94 51 9d 	call	0x13aa2	; 0x13aa2 <free>
_Z11show_stringPciihjjb.constprop.157():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1673
}
    e59a:	26 96       	adiw	r28, 0x06	; 6
    e59c:	0f b6       	in	r0, 0x3f	; 63
    e59e:	f8 94       	cli
    e5a0:	de bf       	out	0x3e, r29	; 62
    e5a2:	0f be       	out	0x3f, r0	; 63
    e5a4:	cd bf       	out	0x3d, r28	; 61
    e5a6:	df 91       	pop	r29
    e5a8:	cf 91       	pop	r28
    e5aa:	1f 91       	pop	r17
    e5ac:	0f 91       	pop	r16
    e5ae:	ff 90       	pop	r15
    e5b0:	ef 90       	pop	r14
    e5b2:	df 90       	pop	r13
    e5b4:	cf 90       	pop	r12
    e5b6:	bf 90       	pop	r11
    e5b8:	af 90       	pop	r10
    e5ba:	9f 90       	pop	r9
    e5bc:	8f 90       	pop	r8
    e5be:	08 95       	ret

0000e5c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.156():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    e5c0:	cf 93       	push	r28
    e5c2:	df 93       	push	r29
    e5c4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    e5c6:	fa 01       	movw	r30, r20
    e5c8:	32 96       	adiw	r30, 0x02	; 2
    e5ca:	e6 0f       	add	r30, r22
    e5cc:	f7 1f       	adc	r31, r23
    e5ce:	dc 01       	movw	r26, r24
    e5d0:	9d 01       	movw	r18, r26
    e5d2:	2c 1b       	sub	r18, r28
    e5d4:	3d 0b       	sbc	r19, r29
    e5d6:	cf 01       	movw	r24, r30
    e5d8:	86 1b       	sub	r24, r22
    e5da:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
    e5dc:	4d 91       	ld	r20, X+
    e5de:	44 23       	and	r20, r20
    e5e0:	11 f0       	breq	.+4      	; 0xe5e6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
    e5e2:	41 93       	st	Z+, r20
    e5e4:	f5 cf       	rjmp	.-22     	; 0xe5d0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
    e5e6:	ac 01       	movw	r20, r24
    e5e8:	42 1b       	sub	r20, r18
    e5ea:	53 0b       	sbc	r21, r19
    e5ec:	64 0f       	add	r22, r20
    e5ee:	75 1f       	adc	r23, r21
    e5f0:	fb 01       	movw	r30, r22
    e5f2:	32 97       	sbiw	r30, 0x02	; 2
    e5f4:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
    e5f6:	61 50       	subi	r22, 0x01	; 1
    e5f8:	71 09       	sbc	r23, r1
    e5fa:	fb 01       	movw	r30, r22
    e5fc:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
    e5fe:	df 91       	pop	r29
    e600:	cf 91       	pop	r28
    e602:	08 95       	ret

0000e604 <log_error(PubSubClient*, char*) [clone .constprop.116]>:
_Z9log_errorP12PubSubClientPc.constprop.116():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
    e604:	0f 93       	push	r16
    e606:	1f 93       	push	r17
    e608:	cf 93       	push	r28
    e60a:	df 93       	push	r29
    e60c:	cd b7       	in	r28, 0x3d	; 61
    e60e:	de b7       	in	r29, 0x3e	; 62
    e610:	60 97       	sbiw	r28, 0x10	; 16
    e612:	0f b6       	in	r0, 0x3f	; 63
    e614:	f8 94       	cli
    e616:	de bf       	out	0x3e, r29	; 62
    e618:	0f be       	out	0x3f, r0	; 63
    e61a:	cd bf       	out	0x3d, r28	; 61
    e61c:	8c 01       	movw	r16, r24
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
    e61e:	65 e1       	ldi	r22, 0x15	; 21
    e620:	77 e0       	ldi	r23, 0x07	; 7
    e622:	ce 01       	movw	r24, r28
    e624:	01 96       	adiw	r24, 0x01	; 1
    e626:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
    e62a:	a8 01       	movw	r20, r16
    e62c:	be 01       	movw	r22, r28
    e62e:	6f 5f       	subi	r22, 0xFF	; 255
    e630:	7f 4f       	sbci	r23, 0xFF	; 255
    e632:	81 e2       	ldi	r24, 0x21	; 33
    e634:	9e e0       	ldi	r25, 0x0E	; 14
    e636:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:455
}
    e63a:	60 96       	adiw	r28, 0x10	; 16
    e63c:	0f b6       	in	r0, 0x3f	; 63
    e63e:	f8 94       	cli
    e640:	de bf       	out	0x3e, r29	; 62
    e642:	0f be       	out	0x3f, r0	; 63
    e644:	cd bf       	out	0x3d, r28	; 61
    e646:	df 91       	pop	r29
    e648:	cf 91       	pop	r28
    e64a:	1f 91       	pop	r17
    e64c:	0f 91       	pop	r16
    e64e:	08 95       	ret

0000e650 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]>:
_Z10parseBytesPKccPhii.constprop.115():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
    e650:	cf 92       	push	r12
    e652:	df 92       	push	r13
    e654:	ef 92       	push	r14
    e656:	ff 92       	push	r15
    e658:	0f 93       	push	r16
    e65a:	1f 93       	push	r17
    e65c:	cf 93       	push	r28
    e65e:	df 93       	push	r29
    e660:	8b 01       	movw	r16, r22
    e662:	7b 01       	movw	r14, r22
    e664:	e4 0e       	add	r14, r20
    e666:	f5 1e       	adc	r15, r21
    e668:	c5 ef       	ldi	r28, 0xF5	; 245
    e66a:	da e0       	ldi	r29, 0x0A	; 10
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
    e66c:	c8 2e       	mov	r12, r24
    e66e:	88 0f       	add	r24, r24
    e670:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    e672:	4a e0       	ldi	r20, 0x0A	; 10
    e674:	50 e0       	ldi	r21, 0x00	; 0
    e676:	70 e0       	ldi	r23, 0x00	; 0
    e678:	60 e0       	ldi	r22, 0x00	; 0
    e67a:	ce 01       	movw	r24, r28
    e67c:	0e 94 30 97 	call	0x12e60	; 0x12e60 <strtoul>
    e680:	f8 01       	movw	r30, r16
    e682:	61 93       	st	Z+, r22
    e684:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
    e686:	b6 01       	movw	r22, r12
    e688:	ce 01       	movw	r24, r28
    e68a:	0e 94 db a4 	call	0x149b6	; 0x149b6 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
    e68e:	00 97       	sbiw	r24, 0x00	; 0
    e690:	49 f0       	breq	.+18     	; 0xe6a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]+0x54>
    e692:	fc 01       	movw	r30, r24
    e694:	20 81       	ld	r18, Z
    e696:	22 23       	and	r18, r18
    e698:	29 f0       	breq	.+10     	; 0xe6a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    e69a:	ec 01       	movw	r28, r24
    e69c:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    e69e:	0e 15       	cp	r16, r14
    e6a0:	1f 05       	cpc	r17, r15
    e6a2:	39 f7       	brne	.-50     	; 0xe672 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.115]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
    e6a4:	df 91       	pop	r29
    e6a6:	cf 91       	pop	r28
    e6a8:	1f 91       	pop	r17
    e6aa:	0f 91       	pop	r16
    e6ac:	ff 90       	pop	r15
    e6ae:	ef 90       	pop	r14
    e6b0:	df 90       	pop	r13
    e6b2:	cf 90       	pop	r12
    e6b4:	08 95       	ret

0000e6b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.103():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
    e6b6:	ef 92       	push	r14
    e6b8:	ff 92       	push	r15
    e6ba:	0f 93       	push	r16
    e6bc:	1f 93       	push	r17
    e6be:	cf 93       	push	r28
    e6c0:	df 93       	push	r29
    e6c2:	00 d0       	rcall	.+0      	; 0xe6c4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0xe>
    e6c4:	00 d0       	rcall	.+0      	; 0xe6c6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x10>
    e6c6:	00 d0       	rcall	.+0      	; 0xe6c8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x12>
    e6c8:	1f 92       	push	r1
    e6ca:	cd b7       	in	r28, 0x3d	; 61
    e6cc:	de b7       	in	r29, 0x3e	; 62
    e6ce:	fe 01       	movw	r30, r28
    e6d0:	31 96       	adiw	r30, 0x01	; 1
    e6d2:	ae 01       	movw	r20, r28
    e6d4:	45 5f       	subi	r20, 0xF5	; 245
    e6d6:	5f 4f       	sbci	r21, 0xFF	; 255
    e6d8:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
    e6da:	20 91 ba 0d 	lds	r18, 0x0DBA	; 0x800dba <my_touch+0xf>
    e6de:	30 91 bb 0d 	lds	r19, 0x0DBB	; 0x800dbb <my_touch+0x10>
    e6e2:	d9 01       	movw	r26, r18
    e6e4:	6c 91       	ld	r22, X
    e6e6:	90 91 c4 0d 	lds	r25, 0x0DC4	; 0x800dc4 <my_touch+0x19>
    e6ea:	90 95       	com	r25
    e6ec:	96 23       	and	r25, r22
    e6ee:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
    e6f0:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e6f4:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e6f8:	d9 01       	movw	r26, r18
    e6fa:	6c 91       	ld	r22, X
    e6fc:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e700:	90 95       	com	r25
    e702:	96 23       	and	r25, r22
    e704:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
    e706:	20 91 c0 0d 	lds	r18, 0x0DC0	; 0x800dc0 <my_touch+0x15>
    e70a:	30 91 c1 0d 	lds	r19, 0x0DC1	; 0x800dc1 <my_touch+0x16>
    e70e:	d9 01       	movw	r26, r18
    e710:	6c 91       	ld	r22, X
    e712:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_touch+0x1c>
    e716:	90 95       	com	r25
    e718:	96 23       	and	r25, r22
    e71a:	9c 93       	st	X, r25
    e71c:	28 e0       	ldi	r18, 0x08	; 8
    e71e:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.103():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
    e720:	10 e8       	ldi	r17, 0x80	; 128
    e722:	60 91 c0 0d 	lds	r22, 0x0DC0	; 0x800dc0 <my_touch+0x15>
    e726:	70 91 c1 0d 	lds	r23, 0x0DC1	; 0x800dc1 <my_touch+0x16>
    e72a:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
    e72e:	08 2f       	mov	r16, r24
    e730:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    e732:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
    e734:	09 f4       	brne	.+2      	; 0xe738 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x82>
    e736:	b1 c0       	rjmp	.+354    	; 0xe89a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
    e738:	0c 91       	ld	r16, X
    e73a:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
    e73c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
    e73e:	60 91 bc 0d 	lds	r22, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e742:	70 91 bd 0d 	lds	r23, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e746:	db 01       	movw	r26, r22
    e748:	0c 91       	ld	r16, X
    e74a:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e74e:	90 95       	com	r25
    e750:	90 23       	and	r25, r16
    e752:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
    e754:	60 91 bc 0d 	lds	r22, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e758:	70 91 bd 0d 	lds	r23, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e75c:	db 01       	movw	r26, r22
    e75e:	9c 91       	ld	r25, X
    e760:	00 91 c5 0d 	lds	r16, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e764:	90 2b       	or	r25, r16
    e766:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
    e768:	16 95       	lsr	r17
    e76a:	21 50       	subi	r18, 0x01	; 1
    e76c:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
    e76e:	c9 f6       	brne	.-78     	; 0xe722 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
    e770:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e774:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e778:	d9 01       	movw	r26, r18
    e77a:	6c 91       	ld	r22, X
    e77c:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e780:	90 95       	com	r25
    e782:	96 23       	and	r25, r22
    e784:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
    e786:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e78a:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e78e:	d9 01       	movw	r26, r18
    e790:	9c 91       	ld	r25, X
    e792:	60 91 c5 0d 	lds	r22, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e796:	96 2b       	or	r25, r22
    e798:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
    e79a:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e79e:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e7a2:	d9 01       	movw	r26, r18
    e7a4:	6c 91       	ld	r22, X
    e7a6:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e7aa:	90 95       	com	r25
    e7ac:	96 23       	and	r25, r22
    e7ae:	9c 93       	st	X, r25
    e7b0:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.103():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    e7b2:	30 e0       	ldi	r19, 0x00	; 0
    e7b4:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
    e7b6:	22 0f       	add	r18, r18
    e7b8:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
    e7ba:	00 91 bc 0d 	lds	r16, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e7be:	10 91 bd 0d 	lds	r17, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e7c2:	d8 01       	movw	r26, r16
    e7c4:	7c 91       	ld	r23, X
    e7c6:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e7ca:	90 95       	com	r25
    e7cc:	97 23       	and	r25, r23
    e7ce:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
    e7d0:	00 91 bc 0d 	lds	r16, 0x0DBC	; 0x800dbc <my_touch+0x11>
    e7d4:	10 91 bd 0d 	lds	r17, 0x0DBD	; 0x800dbd <my_touch+0x12>
    e7d8:	d8 01       	movw	r26, r16
    e7da:	9c 91       	ld	r25, X
    e7dc:	70 91 c5 0d 	lds	r23, 0x0DC5	; 0x800dc5 <my_touch+0x1a>
    e7e0:	97 2b       	or	r25, r23
    e7e2:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
    e7e4:	00 91 be 0d 	lds	r16, 0x0DBE	; 0x800dbe <my_touch+0x13>
    e7e8:	10 91 bf 0d 	lds	r17, 0x0DBF	; 0x800dbf <my_touch+0x14>
    e7ec:	d8 01       	movw	r26, r16
    e7ee:	9c 91       	ld	r25, X
    e7f0:	70 91 c6 0d 	lds	r23, 0x0DC6	; 0x800dc6 <my_touch+0x1b>
    e7f4:	97 23       	and	r25, r23
    e7f6:	11 f0       	breq	.+4      	; 0xe7fc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
    e7f8:	2f 5f       	subi	r18, 0xFF	; 255
    e7fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e7fc:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
    e7fe:	d9 f6       	brne	.-74     	; 0xe7b6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
    e800:	60 91 ba 0d 	lds	r22, 0x0DBA	; 0x800dba <my_touch+0xf>
    e804:	70 91 bb 0d 	lds	r23, 0x0DBB	; 0x800dbb <my_touch+0x10>
    e808:	db 01       	movw	r26, r22
    e80a:	9c 91       	ld	r25, X
    e80c:	10 91 c4 0d 	lds	r17, 0x0DC4	; 0x800dc4 <my_touch+0x19>
    e810:	91 2b       	or	r25, r17
    e812:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    e814:	94 e0       	ldi	r25, 0x04	; 4
    e816:	36 95       	lsr	r19
    e818:	27 95       	ror	r18
    e81a:	9a 95       	dec	r25
    e81c:	e1 f7       	brne	.-8      	; 0xe816 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.103():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    e81e:	d7 01       	movw	r26, r14
    e820:	2d 93       	st	X+, r18
    e822:	3d 93       	st	X+, r19
    e824:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
    e826:	a4 17       	cp	r26, r20
    e828:	b5 07       	cpc	r27, r21
    e82a:	09 f0       	breq	.+2      	; 0xe82e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x178>
    e82c:	56 cf       	rjmp	.-340    	; 0xe6da <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x24>
    e82e:	cf 01       	movw	r24, r30
    e830:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
    e832:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
    e834:	20 81       	ld	r18, Z
    e836:	31 81       	ldd	r19, Z+1	; 0x01
    e838:	12 96       	adiw	r26, 0x02	; 2
    e83a:	4d 91       	ld	r20, X+
    e83c:	5c 91       	ld	r21, X
    e83e:	13 97       	sbiw	r26, 0x03	; 3
    e840:	42 17       	cp	r20, r18
    e842:	53 07       	cpc	r21, r19
    e844:	30 f4       	brcc	.+12     	; 0xe852 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
    e846:	51 83       	std	Z+1, r21	; 0x01
    e848:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
    e84a:	13 96       	adiw	r26, 0x03	; 3
    e84c:	3c 93       	st	X, r19
    e84e:	2e 93       	st	-X, r18
    e850:	12 97       	sbiw	r26, 0x02	; 2
    e852:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
    e854:	8a 17       	cp	r24, r26
    e856:	9b 07       	cpc	r25, r27
    e858:	69 f7       	brne	.-38     	; 0xe834 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x17e>
    e85a:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
    e85c:	e8 17       	cp	r30, r24
    e85e:	f9 07       	cpc	r31, r25
    e860:	41 f7       	brne	.-48     	; 0xe832 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
    e862:	8b 81       	ldd	r24, Y+3	; 0x03
    e864:	9c 81       	ldd	r25, Y+4	; 0x04
    e866:	2d 81       	ldd	r18, Y+5	; 0x05
    e868:	3e 81       	ldd	r19, Y+6	; 0x06
    e86a:	82 0f       	add	r24, r18
    e86c:	93 1f       	adc	r25, r19
    e86e:	2f 81       	ldd	r18, Y+7	; 0x07
    e870:	38 85       	ldd	r19, Y+8	; 0x08
    e872:	82 0f       	add	r24, r18
    e874:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
    e876:	63 e0       	ldi	r22, 0x03	; 3
    e878:	70 e0       	ldi	r23, 0x00	; 0
    e87a:	0e 94 30 a2 	call	0x14460	; 0x14460 <__udivmodhi4>
    e87e:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
    e880:	2a 96       	adiw	r28, 0x0a	; 10
    e882:	0f b6       	in	r0, 0x3f	; 63
    e884:	f8 94       	cli
    e886:	de bf       	out	0x3e, r29	; 62
    e888:	0f be       	out	0x3f, r0	; 63
    e88a:	cd bf       	out	0x3d, r28	; 61
    e88c:	df 91       	pop	r29
    e88e:	cf 91       	pop	r28
    e890:	1f 91       	pop	r17
    e892:	0f 91       	pop	r16
    e894:	ff 90       	pop	r15
    e896:	ef 90       	pop	r14
    e898:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
    e89a:	0c 91       	ld	r16, X
    e89c:	90 95       	com	r25
    e89e:	90 23       	and	r25, r16
    e8a0:	4d cf       	rjmp	.-358    	; 0xe73c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.103]+0x86>

0000e8a2 <TwoWire::write(int) [clone .constprop.82]>:
_ZN7TwoWire5writeEi.constprop.82():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    e8a2:	68 2f       	mov	r22, r24
    e8a4:	88 e0       	ldi	r24, 0x08	; 8
    e8a6:	9e e0       	ldi	r25, 0x0E	; 14
    e8a8:	0c 94 40 6e 	jmp	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>

0000e8ac <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.62]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.62():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
    e8ac:	80 91 93 0c 	lds	r24, 0x0C93	; 0x800c93 <SRAM+0x4>
    e8b0:	90 91 94 0c 	lds	r25, 0x0C94	; 0x800c94 <SRAM+0x5>
    e8b4:	a0 91 95 0c 	lds	r26, 0x0C95	; 0x800c95 <SRAM+0x6>
    e8b8:	b0 91 96 0c 	lds	r27, 0x0C96	; 0x800c96 <SRAM+0x7>
    e8bc:	01 97       	sbiw	r24, 0x01	; 1
    e8be:	a1 40       	sbci	r26, 0x01	; 1
    e8c0:	b1 05       	cpc	r27, r1
    e8c2:	38 f0       	brcs	.+14     	; 0xe8d2 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.62]+0x26>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
    e8c4:	60 e0       	ldi	r22, 0x00	; 0
    e8c6:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    e8ca:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    e8ce:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
    e8d2:	60 e0       	ldi	r22, 0x00	; 0
    e8d4:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    e8d8:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    e8dc:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
    e8e0:	60 e0       	ldi	r22, 0x00	; 0
    e8e2:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SRAM>
    e8e6:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SRAM+0x1>
    e8ea:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>

0000e8ee <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.50():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
    e8ee:	0f 93       	push	r16
    e8f0:	1f 93       	push	r17
    e8f2:	cf 93       	push	r28
    e8f4:	df 93       	push	r29
    e8f6:	00 d0       	rcall	.+0      	; 0xe8f8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0xa>
    e8f8:	00 d0       	rcall	.+0      	; 0xe8fa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0xc>
    e8fa:	cd b7       	in	r28, 0x3d	; 61
    e8fc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    e8fe:	48 2f       	mov	r20, r24
    e900:	43 70       	andi	r20, 0x03	; 3
    e902:	50 e0       	ldi	r21, 0x00	; 0
    e904:	50 93 e0 0d 	sts	0x0DE0, r21	; 0x800de0 <my_lcd+0x17>
    e908:	40 93 df 0d 	sts	0x0DDF, r20	; 0x800ddf <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
    e90c:	28 2f       	mov	r18, r24
    e90e:	21 70       	andi	r18, 0x01	; 1
    e910:	80 ff       	sbrs	r24, 0
    e912:	3d c1       	rjmp	.+634    	; 0xeb8e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2a0>
    e914:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <my_lcd+0x10>
    e918:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <my_lcd+0x11>
    e91c:	90 93 dc 0d 	sts	0x0DDC, r25	; 0x800ddc <my_lcd+0x13>
    e920:	80 93 db 0d 	sts	0x0DDB, r24	; 0x800ddb <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
    e924:	80 91 d7 0d 	lds	r24, 0x0DD7	; 0x800dd7 <my_lcd+0xe>
    e928:	90 91 d8 0d 	lds	r25, 0x0DD8	; 0x800dd8 <my_lcd+0xf>
    e92c:	21 11       	cpse	r18, r1
    e92e:	04 c0       	rjmp	.+8      	; 0xe938 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4a>
    e930:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <my_lcd+0x10>
    e934:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <my_lcd+0x11>
    e938:	90 93 de 0d 	sts	0x0DDE, r25	; 0x800dde <my_lcd+0x15>
    e93c:	80 93 dd 0d 	sts	0x0DDD, r24	; 0x800ddd <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
    e940:	a0 91 f7 0d 	lds	r26, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    e944:	b0 91 f8 0d 	lds	r27, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    e948:	8c 91       	ld	r24, X
    e94a:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <my_lcd+0x3a>
    e94e:	89 23       	and	r24, r25
    e950:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
    e952:	40 91 e1 0d 	lds	r20, 0x0DE1	; 0x800de1 <my_lcd+0x18>
    e956:	50 91 e2 0d 	lds	r21, 0x0DE2	; 0x800de2 <my_lcd+0x19>
    e95a:	80 91 df 0d 	lds	r24, 0x0DDF	; 0x800ddf <my_lcd+0x16>
    e95e:	90 91 e0 0d 	lds	r25, 0x0DE0	; 0x800de0 <my_lcd+0x17>
    e962:	a0 91 f9 0d 	lds	r26, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    e966:	b0 91 fa 0d 	lds	r27, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    e96a:	20 91 04 0e 	lds	r18, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    e96e:	41 15       	cp	r20, r1
    e970:	51 05       	cpc	r21, r1
    e972:	09 f0       	breq	.+2      	; 0xe976 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x88>
    e974:	13 c1       	rjmp	.+550    	; 0xeb9c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2ae>
    e976:	01 97       	sbiw	r24, 0x01	; 1
    e978:	83 30       	cpi	r24, 0x03	; 3
    e97a:	91 05       	cpc	r25, r1
    e97c:	08 f0       	brcs	.+2      	; 0xe980 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x92>
    e97e:	0c c1       	rjmp	.+536    	; 0xeb98 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2aa>
    e980:	88 0f       	add	r24, r24
    e982:	99 1f       	adc	r25, r25
    e984:	fc 01       	movw	r30, r24
    e986:	e0 5b       	subi	r30, 0xB0	; 176
    e988:	fd 4f       	sbci	r31, 0xFD	; 253
    e98a:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
    e98c:	30 91 f1 0d 	lds	r19, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    e990:	40 91 f2 0d 	lds	r20, 0x0DF2	; 0x800df2 <my_lcd+0x29>
    e994:	8c 91       	ld	r24, X
    e996:	28 23       	and	r18, r24
    e998:	2c 93       	st	X, r18
    e99a:	42 b9       	out	0x02, r20	; 2
    e99c:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    e9a0:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    e9a4:	80 81       	ld	r24, Z
    e9a6:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    e9aa:	82 23       	and	r24, r18
    e9ac:	80 83       	st	Z, r24
    e9ae:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    e9b2:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    e9b6:	80 81       	ld	r24, Z
    e9b8:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    e9bc:	82 2b       	or	r24, r18
    e9be:	80 83       	st	Z, r24
    e9c0:	32 b9       	out	0x02, r19	; 2
    e9c2:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    e9c6:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    e9ca:	80 81       	ld	r24, Z
    e9cc:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    e9d0:	82 23       	and	r24, r18
    e9d2:	80 83       	st	Z, r24
    e9d4:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    e9d8:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    e9dc:	80 81       	ld	r24, Z
    e9de:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    e9e2:	82 2b       	or	r24, r18
    e9e4:	80 83       	st	Z, r24
    e9e6:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    e9ea:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    e9ee:	80 81       	ld	r24, Z
    e9f0:	20 91 00 0e 	lds	r18, 0x0E00	; 0x800e00 <my_lcd+0x37>
    e9f4:	82 2b       	or	r24, r18
    e9f6:	80 83       	st	Z, r24
    e9f8:	80 e1       	ldi	r24, 0x10	; 16
    e9fa:	82 b9       	out	0x02, r24	; 2
    e9fc:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ea00:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ea04:	80 81       	ld	r24, Z
    ea06:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ea0a:	82 23       	and	r24, r18
    ea0c:	80 83       	st	Z, r24
    ea0e:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ea12:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ea16:	80 81       	ld	r24, Z
    ea18:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ea1c:	82 2b       	or	r24, r18
    ea1e:	80 83       	st	Z, r24
    ea20:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    ea22:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ea26:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ea2a:	80 81       	ld	r24, Z
    ea2c:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ea30:	89 23       	and	r24, r25
    ea32:	80 83       	st	Z, r24
    ea34:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ea38:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ea3c:	80 81       	ld	r24, Z
    ea3e:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ea42:	89 2b       	or	r24, r25
    ea44:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
    ea46:	00 91 dd 0d 	lds	r16, 0x0DDD	; 0x800ddd <my_lcd+0x14>
    ea4a:	10 91 de 0d 	lds	r17, 0x0DDE	; 0x800dde <my_lcd+0x15>
    ea4e:	01 50       	subi	r16, 0x01	; 1
    ea50:	11 09       	sbc	r17, r1
    ea52:	20 91 db 0d 	lds	r18, 0x0DDB	; 0x800ddb <my_lcd+0x12>
    ea56:	30 91 dc 0d 	lds	r19, 0x0DDC	; 0x800ddc <my_lcd+0x13>
    ea5a:	21 50       	subi	r18, 0x01	; 1
    ea5c:	31 09       	sbc	r19, r1
    ea5e:	50 e0       	ldi	r21, 0x00	; 0
    ea60:	40 e0       	ldi	r20, 0x00	; 0
    ea62:	70 e0       	ldi	r23, 0x00	; 0
    ea64:	60 e0       	ldi	r22, 0x00	; 0
    ea66:	89 ec       	ldi	r24, 0xC9	; 201
    ea68:	9d e0       	ldi	r25, 0x0D	; 13
    ea6a:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
    ea6e:	80 91 e1 0d 	lds	r24, 0x0DE1	; 0x800de1 <my_lcd+0x18>
    ea72:	90 91 e2 0d 	lds	r25, 0x0DE2	; 0x800de2 <my_lcd+0x19>
    ea76:	89 2b       	or	r24, r25
    ea78:	09 f0       	breq	.+2      	; 0xea7c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x18e>
    ea7a:	9e c1       	rjmp	.+828    	; 0xedb8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
    ea7c:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ea80:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ea84:	80 81       	ld	r24, Z
    ea86:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    ea8a:	89 23       	and	r24, r25
    ea8c:	80 83       	st	Z, r24
    ea8e:	80 91 ed 0d 	lds	r24, 0x0DED	; 0x800ded <my_lcd+0x24>
    ea92:	82 b9       	out	0x02, r24	; 2
    ea94:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ea98:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ea9c:	80 81       	ld	r24, Z
    ea9e:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    eaa2:	89 23       	and	r24, r25
    eaa4:	80 83       	st	Z, r24
    eaa6:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eaaa:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eaae:	80 81       	ld	r24, Z
    eab0:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    eab4:	89 2b       	or	r24, r25
    eab6:	80 83       	st	Z, r24
    eab8:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    eabc:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    eac0:	80 81       	ld	r24, Z
    eac2:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    eac6:	89 2b       	or	r24, r25
    eac8:	80 83       	st	Z, r24
    eaca:	83 e0       	ldi	r24, 0x03	; 3
    eacc:	82 b9       	out	0x02, r24	; 2
    eace:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ead2:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ead6:	80 81       	ld	r24, Z
    ead8:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    eadc:	89 23       	and	r24, r25
    eade:	80 83       	st	Z, r24
    eae0:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eae4:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eae8:	80 81       	ld	r24, Z
    eaea:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    eaee:	89 2b       	or	r24, r25
    eaf0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
    eaf2:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    eaf6:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    eafa:	80 81       	ld	r24, Z
    eafc:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    eb00:	89 23       	and	r24, r25
    eb02:	80 83       	st	Z, r24
    eb04:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <my_lcd+0x26>
    eb08:	82 b9       	out	0x02, r24	; 2
    eb0a:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eb0e:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eb12:	80 81       	ld	r24, Z
    eb14:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    eb18:	89 23       	and	r24, r25
    eb1a:	80 83       	st	Z, r24
    eb1c:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eb20:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eb24:	80 81       	ld	r24, Z
    eb26:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    eb2a:	89 2b       	or	r24, r25
    eb2c:	80 83       	st	Z, r24
    eb2e:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    eb32:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    eb36:	80 81       	ld	r24, Z
    eb38:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    eb3c:	89 2b       	or	r24, r25
    eb3e:	80 83       	st	Z, r24
    eb40:	12 b8       	out	0x02, r1	; 2
    eb42:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eb46:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eb4a:	80 81       	ld	r24, Z
    eb4c:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    eb50:	89 23       	and	r24, r25
    eb52:	80 83       	st	Z, r24
    eb54:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    eb58:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eb5c:	80 81       	ld	r24, Z
    eb5e:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    eb62:	89 2b       	or	r24, r25
    eb64:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.50():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
    eb66:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    eb6a:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    eb6e:	80 81       	ld	r24, Z
    eb70:	90 91 ff 0d 	lds	r25, 0x0DFF	; 0x800dff <my_lcd+0x36>
    eb74:	89 2b       	or	r24, r25
    eb76:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
    eb78:	26 96       	adiw	r28, 0x06	; 6
    eb7a:	0f b6       	in	r0, 0x3f	; 63
    eb7c:	f8 94       	cli
    eb7e:	de bf       	out	0x3e, r29	; 62
    eb80:	0f be       	out	0x3f, r0	; 63
    eb82:	cd bf       	out	0x3d, r28	; 61
    eb84:	df 91       	pop	r29
    eb86:	cf 91       	pop	r28
    eb88:	1f 91       	pop	r17
    eb8a:	0f 91       	pop	r16
    eb8c:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
    eb8e:	80 91 d7 0d 	lds	r24, 0x0DD7	; 0x800dd7 <my_lcd+0xe>
    eb92:	90 91 d8 0d 	lds	r25, 0x0DD8	; 0x800dd8 <my_lcd+0xf>
    eb96:	c2 ce       	rjmp	.-636    	; 0xe91c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
    eb98:	90 e3       	ldi	r25, 0x30	; 48
    eb9a:	f8 ce       	rjmp	.-528    	; 0xe98c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
    eb9c:	46 30       	cpi	r20, 0x06	; 6
    eb9e:	51 05       	cpc	r21, r1
    eba0:	99 f5       	brne	.+102    	; 0xec08 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
    eba2:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    eba4:	81 30       	cpi	r24, 0x01	; 1
    eba6:	91 05       	cpc	r25, r1
    eba8:	51 f0       	breq	.+20     	; 0xebbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
    ebaa:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    ebac:	81 30       	cpi	r24, 0x01	; 1
    ebae:	91 05       	cpc	r25, r1
    ebb0:	30 f0       	brcs	.+12     	; 0xebbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
    ebb2:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
    ebb4:	82 30       	cpi	r24, 0x02	; 2
    ebb6:	91 05       	cpc	r25, r1
    ebb8:	11 f0       	breq	.+4      	; 0xebbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2d0>
    ebba:	03 97       	sbiw	r24, 0x03	; 3
    ebbc:	19 f1       	breq	.+70     	; 0xec04 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
    ebbe:	8c 91       	ld	r24, X
    ebc0:	28 23       	and	r18, r24
    ebc2:	2c 93       	st	X, r18
    ebc4:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    ebc8:	82 b9       	out	0x02, r24	; 2
    ebca:	a0 91 fb 0d 	lds	r26, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ebce:	b0 91 fc 0d 	lds	r27, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ebd2:	8c 91       	ld	r24, X
    ebd4:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ebd8:	89 23       	and	r24, r25
    ebda:	8c 93       	st	X, r24
    ebdc:	a0 91 fb 0d 	lds	r26, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ebe0:	b0 91 fc 0d 	lds	r27, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ebe4:	8c 91       	ld	r24, X
    ebe6:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ebea:	89 2b       	or	r24, r25
    ebec:	8c 93       	st	X, r24
    ebee:	a0 91 f9 0d 	lds	r26, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ebf2:	b0 91 fa 0d 	lds	r27, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ebf6:	8c 91       	ld	r24, X
    ebf8:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    ebfc:	89 2b       	or	r24, r25
    ebfe:	8c 93       	st	X, r24
    ec00:	f2 b9       	out	0x02, r31	; 2
    ec02:	0f cf       	rjmp	.-482    	; 0xea22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
    ec04:	f0 e6       	ldi	r31, 0x60	; 96
    ec06:	db cf       	rjmp	.-74     	; 0xebbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
    ec08:	48 30       	cpi	r20, 0x08	; 8
    ec0a:	51 05       	cpc	r21, r1
    ec0c:	99 f5       	brne	.+102    	; 0xec74 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
    ec0e:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    ec10:	81 30       	cpi	r24, 0x01	; 1
    ec12:	91 05       	cpc	r25, r1
    ec14:	51 f0       	breq	.+20     	; 0xec2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
    ec16:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    ec18:	81 30       	cpi	r24, 0x01	; 1
    ec1a:	91 05       	cpc	r25, r1
    ec1c:	30 f0       	brcs	.+12     	; 0xec2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
    ec1e:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
    ec20:	82 30       	cpi	r24, 0x02	; 2
    ec22:	91 05       	cpc	r25, r1
    ec24:	11 f0       	breq	.+4      	; 0xec2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x33c>
    ec26:	03 97       	sbiw	r24, 0x03	; 3
    ec28:	19 f1       	breq	.+70     	; 0xec70 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
    ec2a:	8c 91       	ld	r24, X
    ec2c:	28 23       	and	r18, r24
    ec2e:	2c 93       	st	X, r18
    ec30:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    ec34:	82 b9       	out	0x02, r24	; 2
    ec36:	a0 91 fb 0d 	lds	r26, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ec3a:	b0 91 fc 0d 	lds	r27, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ec3e:	8c 91       	ld	r24, X
    ec40:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ec44:	89 23       	and	r24, r25
    ec46:	8c 93       	st	X, r24
    ec48:	a0 91 fb 0d 	lds	r26, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ec4c:	b0 91 fc 0d 	lds	r27, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ec50:	8c 91       	ld	r24, X
    ec52:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ec56:	89 2b       	or	r24, r25
    ec58:	8c 93       	st	X, r24
    ec5a:	a0 91 f9 0d 	lds	r26, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ec5e:	b0 91 fa 0d 	lds	r27, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ec62:	8c 91       	ld	r24, X
    ec64:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    ec68:	89 2b       	or	r24, r25
    ec6a:	8c 93       	st	X, r24
    ec6c:	e2 b9       	out	0x02, r30	; 2
    ec6e:	d9 ce       	rjmp	.-590    	; 0xea22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
    ec70:	e8 e2       	ldi	r30, 0x28	; 40
    ec72:	db cf       	rjmp	.-74     	; 0xec2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
    ec74:	45 30       	cpi	r20, 0x05	; 5
    ec76:	51 05       	cpc	r21, r1
    ec78:	a1 f5       	brne	.+104    	; 0xece2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
    ec7a:	81 30       	cpi	r24, 0x01	; 1
    ec7c:	91 05       	cpc	r25, r1
    ec7e:	49 f1       	breq	.+82     	; 0xecd2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x3e4>
    ec80:	70 f1       	brcs	.+92     	; 0xecde <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x3f0>
    ec82:	82 30       	cpi	r24, 0x02	; 2
    ec84:	91 05       	cpc	r25, r1
    ec86:	39 f1       	breq	.+78     	; 0xecd6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x3e8>
    ec88:	03 97       	sbiw	r24, 0x03	; 3
    ec8a:	39 f1       	breq	.+78     	; 0xecda <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    ec8c:	8c 91       	ld	r24, X
    ec8e:	28 23       	and	r18, r24
    ec90:	2c 93       	st	X, r18
    ec92:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    ec96:	82 b9       	out	0x02, r24	; 2
    ec98:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ec9c:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    eca0:	80 81       	ld	r24, Z
    eca2:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    eca6:	89 23       	and	r24, r25
    eca8:	80 83       	st	Z, r24
    ecaa:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ecae:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ecb2:	80 81       	ld	r24, Z
    ecb4:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ecb8:	89 2b       	or	r24, r25
    ecba:	80 83       	st	Z, r24
    ecbc:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ecc0:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ecc4:	80 81       	ld	r24, Z
    ecc6:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    ecca:	89 2b       	or	r24, r25
    eccc:	80 83       	st	Z, r24
    ecce:	72 b9       	out	0x02, r23	; 2
    ecd0:	a8 ce       	rjmp	.-688    	; 0xea22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
    ecd2:	78 e7       	ldi	r23, 0x78	; 120
    ecd4:	db cf       	rjmp	.-74     	; 0xec8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
    ecd6:	78 ec       	ldi	r23, 0xC8	; 200
    ecd8:	d9 cf       	rjmp	.-78     	; 0xec8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    ecda:	78 ea       	ldi	r23, 0xA8	; 168
    ecdc:	d7 cf       	rjmp	.-82     	; 0xec8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
    ecde:	78 e0       	ldi	r23, 0x08	; 8
    ece0:	d5 cf       	rjmp	.-86     	; 0xec8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
    ece2:	47 30       	cpi	r20, 0x07	; 7
    ece4:	51 05       	cpc	r21, r1
    ece6:	a1 f5       	brne	.+104    	; 0xed50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
    ece8:	81 30       	cpi	r24, 0x01	; 1
    ecea:	91 05       	cpc	r25, r1
    ecec:	49 f1       	breq	.+82     	; 0xed40 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x452>
    ecee:	70 f1       	brcs	.+92     	; 0xed4c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x45e>
    ecf0:	82 30       	cpi	r24, 0x02	; 2
    ecf2:	91 05       	cpc	r25, r1
    ecf4:	39 f1       	breq	.+78     	; 0xed44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x456>
    ecf6:	03 97       	sbiw	r24, 0x03	; 3
    ecf8:	39 f1       	breq	.+78     	; 0xed48 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    ecfa:	8c 91       	ld	r24, X
    ecfc:	28 23       	and	r18, r24
    ecfe:	2c 93       	st	X, r18
    ed00:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    ed04:	82 b9       	out	0x02, r24	; 2
    ed06:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ed0a:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ed0e:	80 81       	ld	r24, Z
    ed10:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ed14:	89 23       	and	r24, r25
    ed16:	80 83       	st	Z, r24
    ed18:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ed1c:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ed20:	80 81       	ld	r24, Z
    ed22:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ed26:	89 2b       	or	r24, r25
    ed28:	80 83       	st	Z, r24
    ed2a:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ed2e:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ed32:	80 81       	ld	r24, Z
    ed34:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    ed38:	89 2b       	or	r24, r25
    ed3a:	80 83       	st	Z, r24
    ed3c:	62 b9       	out	0x02, r22	; 2
    ed3e:	71 ce       	rjmp	.-798    	; 0xea22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
    ed40:	68 ea       	ldi	r22, 0xA8	; 168
    ed42:	db cf       	rjmp	.-74     	; 0xecfa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
    ed44:	68 e1       	ldi	r22, 0x18	; 24
    ed46:	d9 cf       	rjmp	.-78     	; 0xecfa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    ed48:	68 e7       	ldi	r22, 0x78	; 120
    ed4a:	d7 cf       	rjmp	.-82     	; 0xecfa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
    ed4c:	68 ec       	ldi	r22, 0xC8	; 200
    ed4e:	d5 cf       	rjmp	.-86     	; 0xecfa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
    ed50:	81 30       	cpi	r24, 0x01	; 1
    ed52:	91 05       	cpc	r25, r1
    ed54:	49 f1       	breq	.+82     	; 0xeda8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4ba>
    ed56:	70 f1       	brcs	.+92     	; 0xedb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4c6>
    ed58:	82 30       	cpi	r24, 0x02	; 2
    ed5a:	91 05       	cpc	r25, r1
    ed5c:	39 f1       	breq	.+78     	; 0xedac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4be>
    ed5e:	03 97       	sbiw	r24, 0x03	; 3
    ed60:	39 f1       	breq	.+78     	; 0xedb0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    ed62:	8c 91       	ld	r24, X
    ed64:	28 23       	and	r18, r24
    ed66:	2c 93       	st	X, r18
    ed68:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x28>
    ed6c:	82 b9       	out	0x02, r24	; 2
    ed6e:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ed72:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ed76:	80 81       	ld	r24, Z
    ed78:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    ed7c:	89 23       	and	r24, r25
    ed7e:	80 83       	st	Z, r24
    ed80:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    ed84:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    ed88:	80 81       	ld	r24, Z
    ed8a:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    ed8e:	89 2b       	or	r24, r25
    ed90:	80 83       	st	Z, r24
    ed92:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    ed96:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    ed9a:	80 81       	ld	r24, Z
    ed9c:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    eda0:	89 2b       	or	r24, r25
    eda2:	80 83       	st	Z, r24
    eda4:	32 b9       	out	0x02, r19	; 2
    eda6:	3d ce       	rjmp	.-902    	; 0xea22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
    eda8:	38 e2       	ldi	r19, 0x28	; 40
    edaa:	db cf       	rjmp	.-74     	; 0xed62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
    edac:	38 e9       	ldi	r19, 0x98	; 152
    edae:	d9 cf       	rjmp	.-78     	; 0xed62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    edb0:	38 ef       	ldi	r19, 0xF8	; 248
    edb2:	d7 cf       	rjmp	.-82     	; 0xed62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
    edb4:	38 e4       	ldi	r19, 0x48	; 72
    edb6:	d5 cf       	rjmp	.-86     	; 0xed62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
    edb8:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <my_lcd+0x10>
    edbc:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
    edc0:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
    edc2:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
    edc4:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
    edc6:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
    edc8:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
    edca:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
    edcc:	60 91 ed 0d 	lds	r22, 0x0DED	; 0x800ded <my_lcd+0x24>
    edd0:	70 91 ee 0d 	lds	r23, 0x0DEE	; 0x800dee <my_lcd+0x25>
    edd4:	26 e0       	ldi	r18, 0x06	; 6
    edd6:	ae 01       	movw	r20, r28
    edd8:	4f 5f       	subi	r20, 0xFF	; 255
    edda:	5f 4f       	sbci	r21, 0xFF	; 255
    eddc:	89 ec       	ldi	r24, 0xC9	; 201
    edde:	9d e0       	ldi	r25, 0x0D	; 13
    ede0:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
    ede4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
    ede6:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
    ede8:	60 91 ef 0d 	lds	r22, 0x0DEF	; 0x800def <my_lcd+0x26>
    edec:	70 91 f0 0d 	lds	r23, 0x0DF0	; 0x800df0 <my_lcd+0x27>
    edf0:	22 e0       	ldi	r18, 0x02	; 2
    edf2:	ae 01       	movw	r20, r28
    edf4:	4f 5f       	subi	r20, 0xFF	; 255
    edf6:	5f 4f       	sbci	r21, 0xFF	; 255
    edf8:	89 ec       	ldi	r24, 0xC9	; 201
    edfa:	9d e0       	ldi	r25, 0x0D	; 13
    edfc:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
    ee00:	80 91 e1 0d 	lds	r24, 0x0DE1	; 0x800de1 <my_lcd+0x18>
    ee04:	90 91 e2 0d 	lds	r25, 0x0DE2	; 0x800de2 <my_lcd+0x19>
    ee08:	01 97       	sbiw	r24, 0x01	; 1
    ee0a:	61 f4       	brne	.+24     	; 0xee24 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
    ee0c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
    ee0e:	21 e0       	ldi	r18, 0x01	; 1
    ee10:	ae 01       	movw	r20, r28
    ee12:	4f 5f       	subi	r20, 0xFF	; 255
    ee14:	5f 4f       	sbci	r21, 0xFF	; 255
    ee16:	61 e0       	ldi	r22, 0x01	; 1
    ee18:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
    ee1a:	89 ec       	ldi	r24, 0xC9	; 201
    ee1c:	9d e0       	ldi	r25, 0x0D	; 13
    ee1e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    ee22:	a1 ce       	rjmp	.-702    	; 0xeb66 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x278>
    ee24:	20 e0       	ldi	r18, 0x00	; 0
    ee26:	50 e0       	ldi	r21, 0x00	; 0
    ee28:	40 e0       	ldi	r20, 0x00	; 0
    ee2a:	63 e1       	ldi	r22, 0x13	; 19
    ee2c:	70 e0       	ldi	r23, 0x00	; 0
    ee2e:	f5 cf       	rjmp	.-22     	; 0xee1a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.50]+0x52c>

0000ee30 <turnOffPWM.lto_priv.232>:
turnOffPWM.lto_priv.232():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    ee30:	82 50       	subi	r24, 0x02	; 2
    ee32:	82 31       	cpi	r24, 0x12	; 18
    ee34:	08 f0       	brcs	.+2      	; 0xee38 <turnOffPWM.lto_priv.232+0x8>
    ee36:	5f c0       	rjmp	.+190    	; 0xeef6 <turnOffPWM.lto_priv.232+0xc6>
    ee38:	e8 2f       	mov	r30, r24
    ee3a:	f0 e0       	ldi	r31, 0x00	; 0
    ee3c:	88 27       	eor	r24, r24
    ee3e:	ec 5d       	subi	r30, 0xDC	; 220
    ee40:	f8 48       	sbci	r31, 0x88	; 136
    ee42:	8f 4f       	sbci	r24, 0xFF	; 255
    ee44:	0c 94 d9 a3 	jmp	0x147b2	; 0x147b2 <__tablejump2__>
    ee48:	78 77       	andi	r23, 0x78	; 120
    ee4a:	7c 77       	andi	r23, 0x7C	; 124
    ee4c:	36 77       	andi	r19, 0x76	; 118
    ee4e:	3c 77       	andi	r19, 0x7C	; 124
    ee50:	40 77       	andi	r20, 0x70	; 112
    ee52:	7b 77       	andi	r23, 0x7B	; 123
    ee54:	44 77       	andi	r20, 0x74	; 116
    ee56:	4a 77       	andi	r20, 0x7A	; 122
    ee58:	4e 77       	andi	r20, 0x7E	; 126
    ee5a:	54 77       	andi	r21, 0x74	; 116
    ee5c:	58 77       	andi	r21, 0x78	; 120
    ee5e:	5c 77       	andi	r21, 0x7C	; 124
    ee60:	62 77       	andi	r22, 0x72	; 114
    ee62:	66 77       	andi	r22, 0x76	; 118
    ee64:	7b 77       	andi	r23, 0x7B	; 123
    ee66:	6a 77       	andi	r22, 0x7A	; 122
    ee68:	70 77       	andi	r23, 0x70	; 112
    ee6a:	74 77       	andi	r23, 0x74	; 116
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    ee6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    ee70:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    ee72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    ee76:	08 95       	ret
    ee78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    ee7c:	8f 7d       	andi	r24, 0xDF	; 223
    ee7e:	f9 cf       	rjmp	.-14     	; 0xee72 <turnOffPWM.lto_priv.232+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    ee80:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    ee84:	87 7f       	andi	r24, 0xF7	; 247
    ee86:	f5 cf       	rjmp	.-22     	; 0xee72 <turnOffPWM.lto_priv.232+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    ee88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    ee8c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    ee8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    ee92:	08 95       	ret
    ee94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    ee98:	8f 7d       	andi	r24, 0xDF	; 223
    ee9a:	f9 cf       	rjmp	.-14     	; 0xee8e <turnOffPWM.lto_priv.232+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    ee9c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    eea0:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    eea2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    eea6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    eea8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    eeac:	8f 7d       	andi	r24, 0xDF	; 223
    eeae:	f9 cf       	rjmp	.-14     	; 0xeea2 <turnOffPWM.lto_priv.232+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    eeb0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    eeb4:	87 7f       	andi	r24, 0xF7	; 247
    eeb6:	f5 cf       	rjmp	.-22     	; 0xeea2 <turnOffPWM.lto_priv.232+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    eeb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    eebc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    eebe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    eec2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    eec4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    eec8:	8f 7d       	andi	r24, 0xDF	; 223
    eeca:	f9 cf       	rjmp	.-14     	; 0xeebe <turnOffPWM.lto_priv.232+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    eecc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    eed0:	87 7f       	andi	r24, 0xF7	; 247
    eed2:	f5 cf       	rjmp	.-22     	; 0xeebe <turnOffPWM.lto_priv.232+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    eed4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    eed8:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    eeda:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    eede:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    eee0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    eee4:	8f 7d       	andi	r24, 0xDF	; 223
    eee6:	f9 cf       	rjmp	.-14     	; 0xeeda <turnOffPWM.lto_priv.232+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    eee8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    eeec:	87 7f       	andi	r24, 0xF7	; 247
    eeee:	f5 cf       	rjmp	.-22     	; 0xeeda <turnOffPWM.lto_priv.232+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    eef0:	84 b5       	in	r24, 0x24	; 36
    eef2:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    eef4:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    eef6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    eef8:	84 b5       	in	r24, 0x24	; 36
    eefa:	8f 7d       	andi	r24, 0xDF	; 223
    eefc:	fb cf       	rjmp	.-10     	; 0xeef4 <turnOffPWM.lto_priv.232+0xc4>

0000eefe <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    eefe:	1f 93       	push	r17
    ef00:	cf 93       	push	r28
    ef02:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    ef04:	28 2f       	mov	r18, r24
    ef06:	30 e0       	ldi	r19, 0x00	; 0
    ef08:	f9 01       	movw	r30, r18
    ef0a:	e1 5f       	subi	r30, 0xF1	; 241
    ef0c:	f6 4d       	sbci	r31, 0xD6	; 214
    ef0e:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    ef10:	f9 01       	movw	r30, r18
    ef12:	e0 5b       	subi	r30, 0xB0	; 176
    ef14:	f1 4d       	sbci	r31, 0xD1	; 209
    ef16:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    ef18:	f9 01       	movw	r30, r18
    ef1a:	ea 56       	subi	r30, 0x6A	; 106
    ef1c:	f1 4d       	sbci	r31, 0xD1	; 209
    ef1e:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    ef20:	cc 23       	and	r28, r28
    ef22:	a9 f0       	breq	.+42     	; 0xef4e <digitalWrite+0x50>
    ef24:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    ef26:	81 11       	cpse	r24, r1
    ef28:	0e 94 18 77 	call	0xee30	; 0xee30 <turnOffPWM.lto_priv.232>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    ef2c:	ec 2f       	mov	r30, r28
    ef2e:	f0 e0       	ldi	r31, 0x00	; 0
    ef30:	ee 0f       	add	r30, r30
    ef32:	ff 1f       	adc	r31, r31
    ef34:	ea 57       	subi	r30, 0x7A	; 122
    ef36:	f1 4d       	sbci	r31, 0xD1	; 209
    ef38:	a5 91       	lpm	r26, Z+
    ef3a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    ef3c:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    ef3e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    ef40:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    ef42:	11 11       	cpse	r17, r1
    ef44:	08 c0       	rjmp	.+16     	; 0xef56 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    ef46:	d0 95       	com	r29
    ef48:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    ef4a:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    ef4c:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
    ef4e:	df 91       	pop	r29
    ef50:	cf 91       	pop	r28
    ef52:	1f 91       	pop	r17
    ef54:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    ef56:	de 2b       	or	r29, r30
    ef58:	f8 cf       	rjmp	.-16     	; 0xef4a <digitalWrite+0x4c>

0000ef5a <EEPROM_CAT25::endCommand() [clone .constprop.73]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.73():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    ef5a:	61 e0       	ldi	r22, 0x01	; 1
    ef5c:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <SROM+0xa>
    ef60:	0c 94 7f 77 	jmp	0xeefe	; 0xeefe <digitalWrite>

0000ef64 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.71():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
    ef64:	cf 93       	push	r28
    ef66:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
    ef68:	60 e0       	ldi	r22, 0x00	; 0
    ef6a:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <SROM+0xa>
    ef6e:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
    ef72:	6c 2f       	mov	r22, r28
    ef74:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    ef78:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    ef7c:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    ef80:	c2 50       	subi	r28, 0x02	; 2
    ef82:	c2 30       	cpi	r28, 0x02	; 2
    ef84:	a8 f5       	brcc	.+106    	; 0xeff0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
    ef86:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SROM+0x4>
    ef8a:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <SROM+0x5>
    ef8e:	a0 91 86 0c 	lds	r26, 0x0C86	; 0x800c86 <SROM+0x6>
    ef92:	b0 91 87 0c 	lds	r27, 0x0C87	; 0x800c87 <SROM+0x7>
    ef96:	01 97       	sbiw	r24, 0x01	; 1
    ef98:	a1 40       	sbci	r26, 0x01	; 1
    ef9a:	b1 05       	cpc	r27, r1
    ef9c:	38 f0       	brcs	.+14     	; 0xefac <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
    ef9e:	60 e0       	ldi	r22, 0x00	; 0
    efa0:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    efa4:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    efa8:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    efac:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SROM+0x4>
    efb0:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <SROM+0x5>
    efb4:	a0 91 86 0c 	lds	r26, 0x0C86	; 0x800c86 <SROM+0x6>
    efb8:	b0 91 87 0c 	lds	r27, 0x0C87	; 0x800c87 <SROM+0x7>
    efbc:	81 30       	cpi	r24, 0x01	; 1
    efbe:	91 40       	sbci	r25, 0x01	; 1
    efc0:	a1 05       	cpc	r26, r1
    efc2:	b1 05       	cpc	r27, r1
    efc4:	68 f0       	brcs	.+26     	; 0xefe0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]+0x7c>
    efc6:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <SROM+0x2>
    efca:	90 91 83 0c 	lds	r25, 0x0C83	; 0x800c83 <SROM+0x3>
    efce:	0b 97       	sbiw	r24, 0x0b	; 11
    efd0:	39 f0       	breq	.+14     	; 0xefe0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
    efd2:	60 e0       	ldi	r22, 0x00	; 0
    efd4:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    efd8:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    efdc:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
    efe0:	60 e0       	ldi	r22, 0x00	; 0
    efe2:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    efe6:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.71():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
    efea:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
    efec:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.71():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
    eff0:	cf 91       	pop	r28
    eff2:	08 95       	ret

0000eff4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.70]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.70():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
    eff4:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
    eff6:	85 e0       	ldi	r24, 0x05	; 5
    eff8:	0e 94 b2 77 	call	0xef64	; 0xef64 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.71]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    effc:	6f ef       	ldi	r22, 0xFF	; 255
    effe:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SROM>
    f002:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SROM+0x1>
    f006:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <SoftSPIB::transfer(unsigned char)>
    f00a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
    f00c:	0e 94 ad 77 	call	0xef5a	; 0xef5a <EEPROM_CAT25::endCommand() [clone .constprop.73]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
    f010:	8c 2f       	mov	r24, r28
    f012:	cf 91       	pop	r28
    f014:	08 95       	ret

0000f016 <TwoWire::begin() [clone .constprop.39]>:
_ZN7TwoWire5beginEv.constprop.39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    f016:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
    f01a:	10 92 f3 10 	sts	0x10F3, r1	; 0x8010f3 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
    f01e:	10 92 f6 10 	sts	0x10F6, r1	; 0x8010f6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
    f022:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    f026:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
    f02a:	81 e0       	ldi	r24, 0x01	; 1
    f02c:	80 93 3e 11 	sts	0x113E, r24	; 0x80113e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
    f030:	10 92 39 11 	sts	0x1139, r1	; 0x801139 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    f034:	61 e0       	ldi	r22, 0x01	; 1
    f036:	83 e1       	ldi	r24, 0x13	; 19
    f038:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
    f03c:	61 e0       	ldi	r22, 0x01	; 1
    f03e:	82 e1       	ldi	r24, 0x12	; 18
    f040:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    f044:	e9 eb       	ldi	r30, 0xB9	; 185
    f046:	f0 e0       	ldi	r31, 0x00	; 0
    f048:	80 81       	ld	r24, Z
    f04a:	8e 7f       	andi	r24, 0xFE	; 254
    f04c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
    f04e:	80 81       	ld	r24, Z
    f050:	8d 7f       	andi	r24, 0xFD	; 253
    f052:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    f054:	88 e4       	ldi	r24, 0x48	; 72
    f056:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    f05a:	85 e4       	ldi	r24, 0x45	; 69
    f05c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    f060:	88 e9       	ldi	r24, 0x98	; 152
    f062:	9c e6       	ldi	r25, 0x6C	; 108
    f064:	90 93 f1 10 	sts	0x10F1, r25	; 0x8010f1 <twi_onSlaveTransmit+0x1>
    f068:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    f06c:	89 e9       	ldi	r24, 0x99	; 153
    f06e:	9c e6       	ldi	r25, 0x6C	; 108
    f070:	90 93 ef 10 	sts	0x10EF, r25	; 0x8010ef <twi_onSlaveReceive+0x1>
    f074:	80 93 ee 10 	sts	0x10EE, r24	; 0x8010ee <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
    f078:	08 95       	ret

0000f07a <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
    f07a:	61 e0       	ldi	r22, 0x01	; 1
    f07c:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <SPI_CS>
    f080:	0c 94 7f 77 	jmp	0xeefe	; 0xeefe <digitalWrite>

0000f084 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
    f084:	60 e0       	ldi	r22, 0x00	; 0
    f086:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <SPI_CS>
    f08a:	0c 94 7f 77 	jmp	0xeefe	; 0xeefe <digitalWrite>

0000f08e <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
    f08e:	1f 93       	push	r17
    f090:	cf 93       	push	r28
    f092:	df 93       	push	r29
    f094:	18 2f       	mov	r17, r24
    f096:	d6 2f       	mov	r29, r22
    f098:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
    f09a:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <wiznet_SPI_settings>
    f09e:	90 91 4d 11 	lds	r25, 0x114D	; 0x80114d <wiznet_SPI_settings+0x1>
    f0a2:	0e 94 77 6e 	call	0xdcee	; 0xdcee <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
    f0a6:	0e 94 42 78 	call	0xf084	; 0xf084 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
    f0aa:	80 e0       	ldi	r24, 0x00	; 0
    f0ac:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
    f0b0:	81 2f       	mov	r24, r17
    f0b2:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
    f0b6:	8d 2f       	mov	r24, r29
    f0b8:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
    f0bc:	8c 2f       	mov	r24, r28
    f0be:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
    f0c2:	0e 94 3d 78 	call	0xf07a	; 0xf07a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
    f0c6:	81 e0       	ldi	r24, 0x01	; 1
    f0c8:	df 91       	pop	r29
    f0ca:	cf 91       	pop	r28
    f0cc:	1f 91       	pop	r17
    f0ce:	08 95       	ret

0000f0d0 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    f0d0:	cf 93       	push	r28
    f0d2:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    f0d4:	90 e0       	ldi	r25, 0x00	; 0
    f0d6:	fc 01       	movw	r30, r24
    f0d8:	e0 5b       	subi	r30, 0xB0	; 176
    f0da:	f1 4d       	sbci	r31, 0xD1	; 209
    f0dc:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    f0de:	8a 56       	subi	r24, 0x6A	; 106
    f0e0:	91 4d       	sbci	r25, 0xD1	; 209
    f0e2:	fc 01       	movw	r30, r24
    f0e4:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    f0e6:	88 23       	and	r24, r24
    f0e8:	c9 f0       	breq	.+50     	; 0xf11c <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    f0ea:	90 e0       	ldi	r25, 0x00	; 0
    f0ec:	88 0f       	add	r24, r24
    f0ee:	99 1f       	adc	r25, r25
    f0f0:	fc 01       	movw	r30, r24
    f0f2:	e1 50       	subi	r30, 0x01	; 1
    f0f4:	f7 4d       	sbci	r31, 0xD7	; 215
    f0f6:	a5 91       	lpm	r26, Z+
    f0f8:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    f0fa:	fc 01       	movw	r30, r24
    f0fc:	ea 57       	subi	r30, 0x7A	; 122
    f0fe:	f1 4d       	sbci	r31, 0xD1	; 209
    f100:	c5 91       	lpm	r28, Z+
    f102:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    f104:	61 11       	cpse	r22, r1
    f106:	0d c0       	rjmp	.+26     	; 0xf122 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    f108:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    f10a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    f10c:	8c 91       	ld	r24, X
    f10e:	20 95       	com	r18
    f110:	82 23       	and	r24, r18
    f112:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    f114:	88 81       	ld	r24, Y
    f116:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    f118:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    f11a:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    f11c:	df 91       	pop	r29
    f11e:	cf 91       	pop	r28
    f120:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    f122:	62 30       	cpi	r22, 0x02	; 2
    f124:	51 f4       	brne	.+20     	; 0xf13a <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    f126:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    f128:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    f12a:	3c 91       	ld	r19, X
    f12c:	82 2f       	mov	r24, r18
    f12e:	80 95       	com	r24
    f130:	83 23       	and	r24, r19
    f132:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    f134:	e8 81       	ld	r30, Y
    f136:	2e 2b       	or	r18, r30
    f138:	ef cf       	rjmp	.-34     	; 0xf118 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    f13a:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    f13c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    f13e:	ec 91       	ld	r30, X
    f140:	2e 2b       	or	r18, r30
    f142:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    f144:	8f bf       	out	0x3f, r24	; 63
    f146:	ea cf       	rjmp	.-44     	; 0xf11c <pinMode+0x4c>

0000f148 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
    f148:	8f 92       	push	r8
    f14a:	9f 92       	push	r9
    f14c:	af 92       	push	r10
    f14e:	bf 92       	push	r11
    f150:	cf 92       	push	r12
    f152:	df 92       	push	r13
    f154:	ef 92       	push	r14
    f156:	ff 92       	push	r15
    f158:	6b 01       	movw	r12, r22
    f15a:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
    f15c:	0e 94 80 6d 	call	0xdb00	; 0xdb00 <micros>
    f160:	4b 01       	movw	r8, r22
    f162:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
    f164:	c1 14       	cp	r12, r1
    f166:	d1 04       	cpc	r13, r1
    f168:	e1 04       	cpc	r14, r1
    f16a:	f1 04       	cpc	r15, r1
    f16c:	b9 f0       	breq	.+46     	; 0xf19c <delay+0x54>
    f16e:	0e 94 80 6d 	call	0xdb00	; 0xdb00 <micros>
    f172:	68 19       	sub	r22, r8
    f174:	79 09       	sbc	r23, r9
    f176:	8a 09       	sbc	r24, r10
    f178:	9b 09       	sbc	r25, r11
    f17a:	68 3e       	cpi	r22, 0xE8	; 232
    f17c:	73 40       	sbci	r23, 0x03	; 3
    f17e:	81 05       	cpc	r24, r1
    f180:	91 05       	cpc	r25, r1
    f182:	80 f3       	brcs	.-32     	; 0xf164 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
    f184:	21 e0       	ldi	r18, 0x01	; 1
    f186:	c2 1a       	sub	r12, r18
    f188:	d1 08       	sbc	r13, r1
    f18a:	e1 08       	sbc	r14, r1
    f18c:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
    f18e:	88 ee       	ldi	r24, 0xE8	; 232
    f190:	88 0e       	add	r8, r24
    f192:	83 e0       	ldi	r24, 0x03	; 3
    f194:	98 1e       	adc	r9, r24
    f196:	a1 1c       	adc	r10, r1
    f198:	b1 1c       	adc	r11, r1
    f19a:	e4 cf       	rjmp	.-56     	; 0xf164 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
    f19c:	ff 90       	pop	r15
    f19e:	ef 90       	pop	r14
    f1a0:	df 90       	pop	r13
    f1a2:	cf 90       	pop	r12
    f1a4:	bf 90       	pop	r11
    f1a6:	af 90       	pop	r10
    f1a8:	9f 90       	pop	r9
    f1aa:	8f 90       	pop	r8
    f1ac:	08 95       	ret

0000f1ae <LCDWIKI_KBV::reset() [clone .constprop.47]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.47():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
    f1ae:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    f1b2:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    f1b6:	80 81       	ld	r24, Z
    f1b8:	90 91 ff 0d 	lds	r25, 0x0DFF	; 0x800dff <my_lcd+0x36>
    f1bc:	89 2b       	or	r24, r25
    f1be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
    f1c0:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
    f1c4:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
    f1c8:	80 81       	ld	r24, Z
    f1ca:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <my_lcd+0x39>
    f1ce:	89 2b       	or	r24, r25
    f1d0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
    f1d2:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f1d6:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f1da:	80 81       	ld	r24, Z
    f1dc:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    f1e0:	89 2b       	or	r24, r25
    f1e2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
    f1e4:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <my_lcd+0x3e>
    f1e8:	88 23       	and	r24, r24
    f1ea:	71 f0       	breq	.+28     	; 0xf208 <LCDWIKI_KBV::reset() [clone .constprop.47]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
    f1ec:	60 e0       	ldi	r22, 0x00	; 0
    f1ee:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
    f1f2:	62 e0       	ldi	r22, 0x02	; 2
    f1f4:	70 e0       	ldi	r23, 0x00	; 0
    f1f6:	80 e0       	ldi	r24, 0x00	; 0
    f1f8:	90 e0       	ldi	r25, 0x00	; 0
    f1fa:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
    f1fe:	61 e0       	ldi	r22, 0x01	; 1
    f200:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <my_lcd+0x3e>
    f204:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
    f208:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    f20c:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    f210:	80 81       	ld	r24, Z
    f212:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <my_lcd+0x3a>
    f216:	89 23       	and	r24, r25
    f218:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
    f21a:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    f21e:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    f222:	80 81       	ld	r24, Z
    f224:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    f228:	89 23       	and	r24, r25
    f22a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
    f22c:	12 b8       	out	0x02, r1	; 2
    f22e:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f232:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f236:	80 81       	ld	r24, Z
    f238:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    f23c:	89 23       	and	r24, r25
    f23e:	80 83       	st	Z, r24
    f240:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f244:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f248:	80 81       	ld	r24, Z
    f24a:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    f24e:	89 2b       	or	r24, r25
    f250:	80 83       	st	Z, r24
    f252:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
    f254:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f258:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f25c:	90 81       	ld	r25, Z
    f25e:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    f262:	92 23       	and	r25, r18
    f264:	90 83       	st	Z, r25
    f266:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f26a:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f26e:	90 81       	ld	r25, Z
    f270:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    f274:	92 2b       	or	r25, r18
    f276:	90 83       	st	Z, r25
    f278:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
    f27a:	61 f7       	brne	.-40     	; 0xf254 <LCDWIKI_KBV::reset() [clone .constprop.47]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
    f27c:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    f280:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    f284:	80 81       	ld	r24, Z
    f286:	90 91 ff 0d 	lds	r25, 0x0DFF	; 0x800dff <my_lcd+0x36>
    f28a:	89 2b       	or	r24, r25
    f28c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
    f28e:	08 95       	ret

0000f290 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.45():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
    f290:	cf 93       	push	r28
    f292:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
    f294:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    f298:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    f29c:	90 81       	ld	r25, Z
    f29e:	20 91 03 0e 	lds	r18, 0x0E03	; 0x800e03 <my_lcd+0x3a>
    f2a2:	92 23       	and	r25, r18
    f2a4:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
    f2a6:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    f2aa:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    f2ae:	90 81       	ld	r25, Z
    f2b0:	20 91 04 0e 	lds	r18, 0x0E04	; 0x800e04 <my_lcd+0x3b>
    f2b4:	92 23       	and	r25, r18
    f2b6:	90 83       	st	Z, r25
    f2b8:	12 b8       	out	0x02, r1	; 2
    f2ba:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f2be:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f2c2:	90 81       	ld	r25, Z
    f2c4:	20 91 05 0e 	lds	r18, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    f2c8:	92 23       	and	r25, r18
    f2ca:	90 83       	st	Z, r25
    f2cc:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f2d0:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f2d4:	90 81       	ld	r25, Z
    f2d6:	20 91 01 0e 	lds	r18, 0x0E01	; 0x800e01 <my_lcd+0x38>
    f2da:	92 2b       	or	r25, r18
    f2dc:	90 83       	st	Z, r25
    f2de:	82 b9       	out	0x02, r24	; 2
    f2e0:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f2e4:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f2e8:	80 81       	ld	r24, Z
    f2ea:	90 91 05 0e 	lds	r25, 0x0E05	; 0x800e05 <my_lcd+0x3c>
    f2ee:	89 23       	and	r24, r25
    f2f0:	80 83       	st	Z, r24
    f2f2:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
    f2f6:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
    f2fa:	80 81       	ld	r24, Z
    f2fc:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
    f300:	89 2b       	or	r24, r25
    f302:	80 83       	st	Z, r24
    f304:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
    f308:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
    f30c:	80 81       	ld	r24, Z
    f30e:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
    f312:	89 2b       	or	r24, r25
    f314:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
    f316:	81 b1       	in	r24, 0x01	; 1
    f318:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
    f31a:	61 e0       	ldi	r22, 0x01	; 1
    f31c:	70 e0       	ldi	r23, 0x00	; 0
    f31e:	80 e0       	ldi	r24, 0x00	; 0
    f320:	90 e0       	ldi	r25, 0x00	; 0
    f322:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
    f326:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
    f32a:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
    f32e:	80 81       	ld	r24, Z
    f330:	90 91 06 0e 	lds	r25, 0x0E06	; 0x800e06 <my_lcd+0x3d>
    f334:	89 23       	and	r24, r25
    f336:	80 83       	st	Z, r24
    f338:	20 b1       	in	r18, 0x00	; 0
    f33a:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
    f33e:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
    f342:	90 81       	ld	r25, Z
    f344:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <my_lcd+0x39>
    f348:	98 2b       	or	r25, r24
    f34a:	90 83       	st	Z, r25
    f34c:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
    f350:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
    f354:	90 81       	ld	r25, Z
    f356:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <my_lcd+0x3d>
    f35a:	98 23       	and	r25, r24
    f35c:	90 83       	st	Z, r25
    f35e:	80 b1       	in	r24, 0x00	; 0
    f360:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
    f364:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
    f368:	90 81       	ld	r25, Z
    f36a:	30 91 02 0e 	lds	r19, 0x0E02	; 0x800e02 <my_lcd+0x39>
    f36e:	93 2b       	or	r25, r19
    f370:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
    f372:	c1 30       	cpi	r28, 0x01	; 1
    f374:	79 f0       	breq	.+30     	; 0xf394 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
    f376:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <my_lcd+0x2e>
    f37a:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <my_lcd+0x2f>
    f37e:	90 81       	ld	r25, Z
    f380:	30 91 ff 0d 	lds	r19, 0x0DFF	; 0x800dff <my_lcd+0x36>
    f384:	93 2b       	or	r25, r19
    f386:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
    f388:	91 b1       	in	r25, 0x01	; 1
    f38a:	9f ef       	ldi	r25, 0xFF	; 255
    f38c:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
    f38e:	92 2f       	mov	r25, r18
    f390:	cf 91       	pop	r28
    f392:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
    f394:	c0 e0       	ldi	r28, 0x00	; 0
    f396:	c7 cf       	rjmp	.-114    	; 0xf326 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.45]+0x96>

0000f398 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    f398:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    f39a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
    f39c:	60 91 e4 10 	lds	r22, 0x10E4	; 0x8010e4 <timer0_millis>
    f3a0:	70 91 e5 10 	lds	r23, 0x10E5	; 0x8010e5 <timer0_millis+0x1>
    f3a4:	80 91 e6 10 	lds	r24, 0x10E6	; 0x8010e6 <timer0_millis+0x2>
    f3a8:	90 91 e7 10 	lds	r25, 0x10E7	; 0x8010e7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
    f3ac:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
    f3ae:	08 95       	ret

0000f3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>:
_ZN12PubSubClient8readByteEPh.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
    f3b0:	cf 92       	push	r12
    f3b2:	df 92       	push	r13
    f3b4:	ef 92       	push	r14
    f3b6:	ff 92       	push	r15
    f3b8:	cf 93       	push	r28
    f3ba:	df 93       	push	r29
    f3bc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
    f3be:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    f3c2:	6b 01       	movw	r12, r22
    f3c4:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
    f3c6:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
    f3ca:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
    f3ce:	dc 01       	movw	r26, r24
    f3d0:	ed 91       	ld	r30, X+
    f3d2:	fc 91       	ld	r31, X
    f3d4:	00 84       	ldd	r0, Z+8	; 0x08
    f3d6:	f1 85       	ldd	r31, Z+9	; 0x09
    f3d8:	e0 2d       	mov	r30, r0
    f3da:	19 95       	eicall
    f3dc:	89 2b       	or	r24, r25
    f3de:	69 f4       	brne	.+26     	; 0xf3fa <PubSubClient::readByte(unsigned char*) [clone .constprop.148]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
    f3e0:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
    f3e4:	6c 19       	sub	r22, r12
    f3e6:	7d 09       	sbc	r23, r13
    f3e8:	8e 09       	sbc	r24, r14
    f3ea:	9f 09       	sbc	r25, r15
    f3ec:	64 36       	cpi	r22, 0x64	; 100
    f3ee:	71 05       	cpc	r23, r1
    f3f0:	81 05       	cpc	r24, r1
    f3f2:	91 05       	cpc	r25, r1
    f3f4:	40 f3       	brcs	.-48     	; 0xf3c6 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
    f3f6:	80 e0       	ldi	r24, 0x00	; 0
    f3f8:	0d c0       	rjmp	.+26     	; 0xf414 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
    f3fa:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
    f3fe:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
    f402:	dc 01       	movw	r26, r24
    f404:	ed 91       	ld	r30, X+
    f406:	fc 91       	ld	r31, X
    f408:	02 84       	ldd	r0, Z+10	; 0x0a
    f40a:	f3 85       	ldd	r31, Z+11	; 0x0b
    f40c:	e0 2d       	mov	r30, r0
    f40e:	19 95       	eicall
    f410:	88 83       	st	Y, r24
    f412:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
    f414:	df 91       	pop	r29
    f416:	cf 91       	pop	r28
    f418:	ff 90       	pop	r15
    f41a:	ef 90       	pop	r14
    f41c:	df 90       	pop	r13
    f41e:	cf 90       	pop	r12
    f420:	08 95       	ret

0000f422 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]>:
_ZN12PubSubClient10readPacketEPh.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    f422:	3f 92       	push	r3
    f424:	4f 92       	push	r4
    f426:	5f 92       	push	r5
    f428:	6f 92       	push	r6
    f42a:	7f 92       	push	r7
    f42c:	8f 92       	push	r8
    f42e:	9f 92       	push	r9
    f430:	af 92       	push	r10
    f432:	bf 92       	push	r11
    f434:	cf 92       	push	r12
    f436:	df 92       	push	r13
    f438:	ef 92       	push	r14
    f43a:	ff 92       	push	r15
    f43c:	0f 93       	push	r16
    f43e:	1f 93       	push	r17
    f440:	cf 93       	push	r28
    f442:	df 93       	push	r29
    f444:	1f 92       	push	r1
    f446:	cd b7       	in	r28, 0x3d	; 61
    f448:	de b7       	in	r29, 0x3e	; 62
    f44a:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    f44c:	83 e2       	ldi	r24, 0x23	; 35
    f44e:	9e e0       	ldi	r25, 0x0E	; 14
    f450:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>
    f454:	81 11       	cpse	r24, r1
    f456:	16 c0       	rjmp	.+44     	; 0xf484 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    f458:	10 e0       	ldi	r17, 0x00	; 0
    f45a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
    f45c:	c8 01       	movw	r24, r16
    f45e:	0f 90       	pop	r0
    f460:	df 91       	pop	r29
    f462:	cf 91       	pop	r28
    f464:	1f 91       	pop	r17
    f466:	0f 91       	pop	r16
    f468:	ff 90       	pop	r15
    f46a:	ef 90       	pop	r14
    f46c:	df 90       	pop	r13
    f46e:	cf 90       	pop	r12
    f470:	bf 90       	pop	r11
    f472:	af 90       	pop	r10
    f474:	9f 90       	pop	r9
    f476:	8f 90       	pop	r8
    f478:	7f 90       	pop	r7
    f47a:	6f 90       	pop	r6
    f47c:	5f 90       	pop	r5
    f47e:	4f 90       	pop	r4
    f480:	3f 90       	pop	r3
    f482:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    f484:	30 90 23 0e 	lds	r3, 0x0E23	; 0x800e23 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    f488:	19 82       	std	Y+1, r1	; 0x01
    f48a:	34 e2       	ldi	r19, 0x24	; 36
    f48c:	83 2e       	mov	r8, r19
    f48e:	3e e0       	ldi	r19, 0x0E	; 14
    f490:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
    f492:	ee 24       	eor	r14, r14
    f494:	e3 94       	inc	r14
    f496:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    f498:	d1 2c       	mov	r13, r1
    f49a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    f49c:	41 2c       	mov	r4, r1
    f49e:	51 2c       	mov	r5, r1
    f4a0:	32 01       	movw	r6, r4
    f4a2:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
    f4a4:	ce 01       	movw	r24, r28
    f4a6:	01 96       	adiw	r24, 0x01	; 1
    f4a8:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>
    f4ac:	88 23       	and	r24, r24
    f4ae:	a1 f2       	breq	.-88     	; 0xf458 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
    f4b0:	87 01       	movw	r16, r14
    f4b2:	0f 5f       	subi	r16, 0xFF	; 255
    f4b4:	1f 4f       	sbci	r17, 0xFF	; 255
    f4b6:	89 81       	ldd	r24, Y+1	; 0x01
    f4b8:	d4 01       	movw	r26, r8
    f4ba:	8d 93       	st	X+, r24
    f4bc:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
    f4be:	28 2f       	mov	r18, r24
    f4c0:	2f 77       	andi	r18, 0x7F	; 127
    f4c2:	30 e0       	ldi	r19, 0x00	; 0
    f4c4:	24 9d       	mul	r18, r4
    f4c6:	a0 01       	movw	r20, r0
    f4c8:	25 9d       	mul	r18, r5
    f4ca:	50 0d       	add	r21, r0
    f4cc:	34 9d       	mul	r19, r4
    f4ce:	50 0d       	add	r21, r0
    f4d0:	11 24       	eor	r1, r1
    f4d2:	c4 0e       	add	r12, r20
    f4d4:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
    f4d6:	27 e0       	ldi	r18, 0x07	; 7
    f4d8:	44 0c       	add	r4, r4
    f4da:	55 1c       	adc	r5, r5
    f4dc:	66 1c       	adc	r6, r6
    f4de:	77 1c       	adc	r7, r7
    f4e0:	2a 95       	dec	r18
    f4e2:	d1 f7       	brne	.-12     	; 0xf4d8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
    f4e4:	87 fd       	sbrc	r24, 7
    f4e6:	31 c0       	rjmp	.+98     	; 0xf54a <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x128>
    f4e8:	b3 2d       	mov	r27, r3
    f4ea:	b0 7f       	andi	r27, 0xF0	; 240
    f4ec:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
    f4ee:	8f ef       	ldi	r24, 0xFF	; 255
    f4f0:	80 0f       	add	r24, r16
    f4f2:	f5 01       	movw	r30, r10
    f4f4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
    f4f6:	f0 e3       	ldi	r31, 0x30	; 48
    f4f8:	bf 13       	cpse	r27, r31
    f4fa:	29 c0       	rjmp	.+82     	; 0xf54e <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    f4fc:	c8 01       	movw	r24, r16
    f4fe:	8d 5d       	subi	r24, 0xDD	; 221
    f500:	91 4f       	sbci	r25, 0xF1	; 241
    f502:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>
    f506:	88 23       	and	r24, r24
    f508:	09 f4       	brne	.+2      	; 0xf50c <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0xea>
    f50a:	a6 cf       	rjmp	.-180    	; 0xf458 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x36>
    f50c:	c7 01       	movw	r24, r14
    f50e:	8b 5d       	subi	r24, 0xDB	; 219
    f510:	91 4f       	sbci	r25, 0xF1	; 241
    f512:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>
    f516:	88 23       	and	r24, r24
    f518:	09 f4       	brne	.+2      	; 0xf51c <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0xfa>
    f51a:	9e cf       	rjmp	.-196    	; 0xf458 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
    f51c:	0e 5f       	subi	r16, 0xFE	; 254
    f51e:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.146():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
    f520:	d5 01       	movw	r26, r10
    f522:	ec 91       	ld	r30, X
    f524:	f0 e0       	ldi	r31, 0x00	; 0
    f526:	ef 5d       	subi	r30, 0xDF	; 223
    f528:	f1 4f       	sbci	r31, 0xF1	; 241
    f52a:	e3 80       	ldd	r14, Z+3	; 0x03
    f52c:	f1 2c       	mov	r15, r1
    f52e:	fe 2c       	mov	r15, r14
    f530:	ee 24       	eor	r14, r14
    f532:	84 81       	ldd	r24, Z+4	; 0x04
    f534:	e8 0e       	add	r14, r24
    f536:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
    f538:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <mqtt_client+0x2>
    f53c:	81 ff       	sbrs	r24, 1
    f53e:	03 c0       	rjmp	.+6      	; 0xf546 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
    f540:	b2 e0       	ldi	r27, 0x02	; 2
    f542:	eb 0e       	add	r14, r27
    f544:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
    f546:	92 e0       	ldi	r25, 0x02	; 2
    f548:	05 c0       	rjmp	.+10     	; 0xf554 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
    f54a:	78 01       	movw	r14, r16
    f54c:	ab cf       	rjmp	.-170    	; 0xf4a4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
    f54e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    f550:	f1 2c       	mov	r15, r1
    f552:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
    f554:	69 2e       	mov	r6, r25
    f556:	71 2c       	mov	r7, r1
    f558:	60 1a       	sub	r6, r16
    f55a:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
    f55c:	8e ef       	ldi	r24, 0xFE	; 254
    f55e:	88 2e       	mov	r8, r24
    f560:	99 24       	eor	r9, r9
    f562:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
    f564:	c3 01       	movw	r24, r6
    f566:	80 0f       	add	r24, r16
    f568:	91 1f       	adc	r25, r17
    f56a:	8c 15       	cp	r24, r12
    f56c:	9d 05       	cpc	r25, r13
    f56e:	78 f5       	brcc	.+94     	; 0xf5ce <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
    f570:	ce 01       	movw	r24, r28
    f572:	01 96       	adiw	r24, 0x01	; 1
    f574:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <PubSubClient::readByte(unsigned char*) [clone .constprop.148]>
    f578:	88 23       	and	r24, r24
    f57a:	09 f4       	brne	.+2      	; 0xf57e <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x15c>
    f57c:	6d cf       	rjmp	.-294    	; 0xf458 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
    f57e:	80 91 3a 10 	lds	r24, 0x103A	; 0x80103a <mqtt_client+0x219>
    f582:	90 91 3b 10 	lds	r25, 0x103B	; 0x80103b <mqtt_client+0x21a>
    f586:	00 97       	sbiw	r24, 0x00	; 0
    f588:	b1 f0       	breq	.+44     	; 0xf5b6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
    f58a:	e0 e3       	ldi	r30, 0x30	; 48
    f58c:	3e 12       	cpse	r3, r30
    f58e:	13 c0       	rjmp	.+38     	; 0xf5b6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x194>
    f590:	d5 01       	movw	r26, r10
    f592:	2c 91       	ld	r18, X
    f594:	f4 01       	movw	r30, r8
    f596:	e2 1b       	sub	r30, r18
    f598:	f1 09       	sbc	r31, r1
    f59a:	9f 01       	movw	r18, r30
    f59c:	20 0f       	add	r18, r16
    f59e:	31 1f       	adc	r19, r17
    f5a0:	e2 16       	cp	r14, r18
    f5a2:	f3 06       	cpc	r15, r19
    f5a4:	40 f4       	brcc	.+16     	; 0xf5b6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
    f5a6:	dc 01       	movw	r26, r24
    f5a8:	ed 91       	ld	r30, X+
    f5aa:	fc 91       	ld	r31, X
    f5ac:	01 90       	ld	r0, Z+
    f5ae:	f0 81       	ld	r31, Z
    f5b0:	e0 2d       	mov	r30, r0
    f5b2:	69 81       	ldd	r22, Y+1	; 0x01
    f5b4:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
    f5b6:	01 15       	cp	r16, r1
    f5b8:	b2 e0       	ldi	r27, 0x02	; 2
    f5ba:	1b 07       	cpc	r17, r27
    f5bc:	28 f4       	brcc	.+10     	; 0xf5c8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
    f5be:	89 81       	ldd	r24, Y+1	; 0x01
    f5c0:	f8 01       	movw	r30, r16
    f5c2:	ef 5d       	subi	r30, 0xDF	; 223
    f5c4:	f1 4f       	sbci	r31, 0xF1	; 241
    f5c6:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
    f5c8:	0f 5f       	subi	r16, 0xFF	; 255
    f5ca:	1f 4f       	sbci	r17, 0xFF	; 255
    f5cc:	cb cf       	rjmp	.-106    	; 0xf564 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
    f5ce:	80 91 3a 10 	lds	r24, 0x103A	; 0x80103a <mqtt_client+0x219>
    f5d2:	90 91 3b 10 	lds	r25, 0x103B	; 0x80103b <mqtt_client+0x21a>
    f5d6:	89 2b       	or	r24, r25
    f5d8:	09 f0       	breq	.+2      	; 0xf5dc <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x1ba>
    f5da:	40 cf       	rjmp	.-384    	; 0xf45c <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x3a>
    f5dc:	01 30       	cpi	r16, 0x01	; 1
    f5de:	e2 e0       	ldi	r30, 0x02	; 2
    f5e0:	1e 07       	cpc	r17, r30
    f5e2:	08 f0       	brcs	.+2      	; 0xf5e6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x1c4>
    f5e4:	39 cf       	rjmp	.-398    	; 0xf458 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x36>
    f5e6:	3a cf       	rjmp	.-396    	; 0xf45c <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]+0x3a>

0000f5e8 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    f5e8:	1f 92       	push	r1
    f5ea:	0f 92       	push	r0
    f5ec:	0f b6       	in	r0, 0x3f	; 63
    f5ee:	0f 92       	push	r0
    f5f0:	11 24       	eor	r1, r1
    f5f2:	2f 93       	push	r18
    f5f4:	3f 93       	push	r19
    f5f6:	8f 93       	push	r24
    f5f8:	9f 93       	push	r25
    f5fa:	af 93       	push	r26
    f5fc:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    f5fe:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <timer0_millis>
    f602:	90 91 e5 10 	lds	r25, 0x10E5	; 0x8010e5 <timer0_millis+0x1>
    f606:	a0 91 e6 10 	lds	r26, 0x10E6	; 0x8010e6 <timer0_millis+0x2>
    f60a:	b0 91 e7 10 	lds	r27, 0x10E7	; 0x8010e7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
    f60e:	30 91 e3 10 	lds	r19, 0x10E3	; 0x8010e3 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
    f612:	23 e0       	ldi	r18, 0x03	; 3
    f614:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
    f616:	2d 37       	cpi	r18, 0x7D	; 125
    f618:	58 f5       	brcc	.+86     	; 0xf670 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
    f61a:	01 96       	adiw	r24, 0x01	; 1
    f61c:	a1 1d       	adc	r26, r1
    f61e:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
    f620:	20 93 e3 10 	sts	0x10E3, r18	; 0x8010e3 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
    f624:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <timer0_millis>
    f628:	90 93 e5 10 	sts	0x10E5, r25	; 0x8010e5 <timer0_millis+0x1>
    f62c:	a0 93 e6 10 	sts	0x10E6, r26	; 0x8010e6 <timer0_millis+0x2>
    f630:	b0 93 e7 10 	sts	0x10E7, r27	; 0x8010e7 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
    f634:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <timer0_overflow_count>
    f638:	90 91 e9 10 	lds	r25, 0x10E9	; 0x8010e9 <timer0_overflow_count+0x1>
    f63c:	a0 91 ea 10 	lds	r26, 0x10EA	; 0x8010ea <timer0_overflow_count+0x2>
    f640:	b0 91 eb 10 	lds	r27, 0x10EB	; 0x8010eb <timer0_overflow_count+0x3>
    f644:	01 96       	adiw	r24, 0x01	; 1
    f646:	a1 1d       	adc	r26, r1
    f648:	b1 1d       	adc	r27, r1
    f64a:	80 93 e8 10 	sts	0x10E8, r24	; 0x8010e8 <timer0_overflow_count>
    f64e:	90 93 e9 10 	sts	0x10E9, r25	; 0x8010e9 <timer0_overflow_count+0x1>
    f652:	a0 93 ea 10 	sts	0x10EA, r26	; 0x8010ea <timer0_overflow_count+0x2>
    f656:	b0 93 eb 10 	sts	0x10EB, r27	; 0x8010eb <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
    f65a:	bf 91       	pop	r27
    f65c:	af 91       	pop	r26
    f65e:	9f 91       	pop	r25
    f660:	8f 91       	pop	r24
    f662:	3f 91       	pop	r19
    f664:	2f 91       	pop	r18
    f666:	0f 90       	pop	r0
    f668:	0f be       	out	0x3f, r0	; 63
    f66a:	0f 90       	pop	r0
    f66c:	1f 90       	pop	r1
    f66e:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    f670:	26 e8       	ldi	r18, 0x86	; 134
    f672:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
    f674:	02 96       	adiw	r24, 0x02	; 2
    f676:	a1 1d       	adc	r26, r1
    f678:	b1 1d       	adc	r27, r1
    f67a:	d2 cf       	rjmp	.-92     	; 0xf620 <__vector_23+0x38>

0000f67c <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    f67c:	1f 92       	push	r1
    f67e:	0f 92       	push	r0
    f680:	0f b6       	in	r0, 0x3f	; 63
    f682:	0f 92       	push	r0
    f684:	11 24       	eor	r1, r1
    f686:	0b b6       	in	r0, 0x3b	; 59
    f688:	0f 92       	push	r0
    f68a:	2f 93       	push	r18
    f68c:	3f 93       	push	r19
    f68e:	4f 93       	push	r20
    f690:	5f 93       	push	r21
    f692:	6f 93       	push	r22
    f694:	7f 93       	push	r23
    f696:	8f 93       	push	r24
    f698:	9f 93       	push	r25
    f69a:	af 93       	push	r26
    f69c:	bf 93       	push	r27
    f69e:	ef 93       	push	r30
    f6a0:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    f6a2:	8c e7       	ldi	r24, 0x7C	; 124
    f6a4:	9b e0       	ldi	r25, 0x0B	; 11
    f6a6:	0e 94 d7 6c 	call	0xd9ae	; 0xd9ae <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    f6aa:	ff 91       	pop	r31
    f6ac:	ef 91       	pop	r30
    f6ae:	bf 91       	pop	r27
    f6b0:	af 91       	pop	r26
    f6b2:	9f 91       	pop	r25
    f6b4:	8f 91       	pop	r24
    f6b6:	7f 91       	pop	r23
    f6b8:	6f 91       	pop	r22
    f6ba:	5f 91       	pop	r21
    f6bc:	4f 91       	pop	r20
    f6be:	3f 91       	pop	r19
    f6c0:	2f 91       	pop	r18
    f6c2:	0f 90       	pop	r0
    f6c4:	0b be       	out	0x3b, r0	; 59
    f6c6:	0f 90       	pop	r0
    f6c8:	0f be       	out	0x3f, r0	; 63
    f6ca:	0f 90       	pop	r0
    f6cc:	1f 90       	pop	r1
    f6ce:	18 95       	reti

0000f6d0 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    f6d0:	1f 92       	push	r1
    f6d2:	0f 92       	push	r0
    f6d4:	0f b6       	in	r0, 0x3f	; 63
    f6d6:	0f 92       	push	r0
    f6d8:	11 24       	eor	r1, r1
    f6da:	0b b6       	in	r0, 0x3b	; 59
    f6dc:	0f 92       	push	r0
    f6de:	2f 93       	push	r18
    f6e0:	8f 93       	push	r24
    f6e2:	9f 93       	push	r25
    f6e4:	ef 93       	push	r30
    f6e6:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    f6e8:	e0 91 8c 0b 	lds	r30, 0x0B8C	; 0x800b8c <Serial+0x10>
    f6ec:	f0 91 8d 0b 	lds	r31, 0x0B8D	; 0x800b8d <Serial+0x11>
    f6f0:	80 81       	ld	r24, Z
    f6f2:	e0 91 92 0b 	lds	r30, 0x0B92	; 0x800b92 <Serial+0x16>
    f6f6:	f0 91 93 0b 	lds	r31, 0x0B93	; 0x800b93 <Serial+0x17>
    f6fa:	82 fd       	sbrc	r24, 2
    f6fc:	1d c0       	rjmp	.+58     	; 0xf738 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    f6fe:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    f700:	80 91 95 0b 	lds	r24, 0x0B95	; 0x800b95 <Serial+0x19>
    f704:	8f 5f       	subi	r24, 0xFF	; 255
    f706:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    f708:	20 91 96 0b 	lds	r18, 0x0B96	; 0x800b96 <Serial+0x1a>
    f70c:	82 17       	cp	r24, r18
    f70e:	41 f0       	breq	.+16     	; 0xf720 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    f710:	e0 91 95 0b 	lds	r30, 0x0B95	; 0x800b95 <Serial+0x19>
    f714:	f0 e0       	ldi	r31, 0x00	; 0
    f716:	e4 58       	subi	r30, 0x84	; 132
    f718:	f4 4f       	sbci	r31, 0xF4	; 244
    f71a:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    f71c:	80 93 95 0b 	sts	0x0B95, r24	; 0x800b95 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    f720:	ff 91       	pop	r31
    f722:	ef 91       	pop	r30
    f724:	9f 91       	pop	r25
    f726:	8f 91       	pop	r24
    f728:	2f 91       	pop	r18
    f72a:	0f 90       	pop	r0
    f72c:	0b be       	out	0x3b, r0	; 59
    f72e:	0f 90       	pop	r0
    f730:	0f be       	out	0x3f, r0	; 63
    f732:	0f 90       	pop	r0
    f734:	1f 90       	pop	r1
    f736:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    f738:	80 81       	ld	r24, Z
    f73a:	f2 cf       	rjmp	.-28     	; 0xf720 <__vector_25+0x50>

0000f73c <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
    f73c:	1f 92       	push	r1
    f73e:	0f 92       	push	r0
    f740:	0f b6       	in	r0, 0x3f	; 63
    f742:	0f 92       	push	r0
    f744:	11 24       	eor	r1, r1
    f746:	0b b6       	in	r0, 0x3b	; 59
    f748:	0f 92       	push	r0
    f74a:	2f 93       	push	r18
    f74c:	3f 93       	push	r19
    f74e:	4f 93       	push	r20
    f750:	5f 93       	push	r21
    f752:	6f 93       	push	r22
    f754:	7f 93       	push	r23
    f756:	8f 93       	push	r24
    f758:	9f 93       	push	r25
    f75a:	af 93       	push	r26
    f75c:	bf 93       	push	r27
    f75e:	cf 93       	push	r28
    f760:	ef 93       	push	r30
    f762:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
    f764:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
    f766:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    f76a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    f76e:	e0 91 cd 09 	lds	r30, 0x09CD	; 0x8009cd <_ZL17a2d_interupt_func.lto_priv.227>
    f772:	f0 91 ce 09 	lds	r31, 0x09CE	; 0x8009ce <_ZL17a2d_interupt_func.lto_priv.227+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
    f776:	68 2f       	mov	r22, r24
    f778:	70 e0       	ldi	r23, 0x00	; 0
    f77a:	76 2f       	mov	r23, r22
    f77c:	66 27       	eor	r22, r22
    f77e:	69 0f       	add	r22, r25
    f780:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    f782:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <a2d_input>
    f786:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
    f788:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
    f78a:	ff 91       	pop	r31
    f78c:	ef 91       	pop	r30
    f78e:	cf 91       	pop	r28
    f790:	bf 91       	pop	r27
    f792:	af 91       	pop	r26
    f794:	9f 91       	pop	r25
    f796:	8f 91       	pop	r24
    f798:	7f 91       	pop	r23
    f79a:	6f 91       	pop	r22
    f79c:	5f 91       	pop	r21
    f79e:	4f 91       	pop	r20
    f7a0:	3f 91       	pop	r19
    f7a2:	2f 91       	pop	r18
    f7a4:	0f 90       	pop	r0
    f7a6:	0b be       	out	0x3b, r0	; 59
    f7a8:	0f 90       	pop	r0
    f7aa:	0f be       	out	0x3f, r0	; 63
    f7ac:	0f 90       	pop	r0
    f7ae:	1f 90       	pop	r1
    f7b0:	18 95       	reti

0000f7b2 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
    f7b2:	20 91 cb 09 	lds	r18, 0x09CB	; 0x8009cb <a2d_reference>
    f7b6:	90 e4       	ldi	r25, 0x40	; 64
    f7b8:	29 9f       	mul	r18, r25
    f7ba:	90 01       	movw	r18, r0
    f7bc:	11 24       	eor	r1, r1
    f7be:	28 0f       	add	r18, r24
    f7c0:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
    f7c4:	80 93 cc 09 	sts	0x09CC, r24	; 0x8009cc <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
    f7c8:	ea e7       	ldi	r30, 0x7A	; 122
    f7ca:	f0 e0       	ldi	r31, 0x00	; 0
    f7cc:	80 81       	ld	r24, Z
    f7ce:	80 64       	ori	r24, 0x40	; 64
    f7d0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
    f7d2:	08 95       	ret

0000f7d4 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
    f7d4:	cf 92       	push	r12
    f7d6:	df 92       	push	r13
    f7d8:	ef 92       	push	r14
    f7da:	ff 92       	push	r15
    f7dc:	0f 93       	push	r16
    f7de:	1f 93       	push	r17
    f7e0:	cf 93       	push	r28
    f7e2:	df 93       	push	r29
    f7e4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
    f7e6:	cf 80       	ldd	r12, Y+7	; 0x07
    f7e8:	d8 84       	ldd	r13, Y+8	; 0x08
    f7ea:	e9 84       	ldd	r14, Y+9	; 0x09
    f7ec:	fa 84       	ldd	r15, Y+10	; 0x0a
    f7ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    f7f0:	98 89       	ldd	r25, Y+16	; 0x10
    f7f2:	a9 89       	ldd	r26, Y+17	; 0x11
    f7f4:	ba 89       	ldd	r27, Y+18	; 0x12
    f7f6:	c8 0e       	add	r12, r24
    f7f8:	d9 1e       	adc	r13, r25
    f7fa:	ea 1e       	adc	r14, r26
    f7fc:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
    f7fe:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    f802:	0b 89       	ldd	r16, Y+19	; 0x13
    f804:	1c 89       	ldd	r17, Y+20	; 0x14
    f806:	2d 89       	ldd	r18, Y+21	; 0x15
    f808:	3e 89       	ldd	r19, Y+22	; 0x16
    f80a:	60 1b       	sub	r22, r16
    f80c:	71 0b       	sbc	r23, r17
    f80e:	82 0b       	sbc	r24, r18
    f810:	93 0b       	sbc	r25, r19
    f812:	28 ee       	ldi	r18, 0xE8	; 232
    f814:	33 e0       	ldi	r19, 0x03	; 3
    f816:	40 e0       	ldi	r20, 0x00	; 0
    f818:	50 e0       	ldi	r21, 0x00	; 0
    f81a:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
    f81e:	ca 01       	movw	r24, r20
    f820:	b9 01       	movw	r22, r18
    f822:	6c 0d       	add	r22, r12
    f824:	7d 1d       	adc	r23, r13
    f826:	8e 1d       	adc	r24, r14
    f828:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
    f82a:	df 91       	pop	r29
    f82c:	cf 91       	pop	r28
    f82e:	1f 91       	pop	r17
    f830:	0f 91       	pop	r16
    f832:	ff 90       	pop	r15
    f834:	ef 90       	pop	r14
    f836:	df 90       	pop	r13
    f838:	cf 90       	pop	r12
    f83a:	08 95       	ret

0000f83c <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
    f83c:	cf 93       	push	r28
    f83e:	df 93       	push	r29
    f840:	00 d0       	rcall	.+0      	; 0xf842 <NTPClient::getYear() const+0x6>
    f842:	1f 92       	push	r1
    f844:	cd b7       	in	r28, 0x3d	; 61
    f846:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
    f848:	0e 94 ea 7b 	call	0xf7d4	; 0xf7d4 <NTPClient::getEpochTime() const>
    f84c:	69 83       	std	Y+1, r22	; 0x01
    f84e:	7a 83       	std	Y+2, r23	; 0x02
    f850:	8b 83       	std	Y+3, r24	; 0x03
    f852:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
    f854:	ce 01       	movw	r24, r28
    f856:	01 96       	adiw	r24, 0x01	; 1
    f858:	0e 94 6e 89 	call	0x112dc	; 0x112dc <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
    f85c:	fc 01       	movw	r30, r24
    f85e:	86 81       	ldd	r24, Z+6	; 0x06
    f860:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
    f862:	84 59       	subi	r24, 0x94	; 148
    f864:	98 4f       	sbci	r25, 0xF8	; 248
    f866:	0f 90       	pop	r0
    f868:	0f 90       	pop	r0
    f86a:	0f 90       	pop	r0
    f86c:	0f 90       	pop	r0
    f86e:	df 91       	pop	r29
    f870:	cf 91       	pop	r28
    f872:	08 95       	ret

0000f874 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
    f874:	cf 93       	push	r28
    f876:	df 93       	push	r29
    f878:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    f87a:	89 e3       	ldi	r24, 0x39	; 57
    f87c:	95 e0       	ldi	r25, 0x05	; 5
    f87e:	9e 83       	std	Y+6, r25	; 0x06
    f880:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    f882:	88 81       	ld	r24, Y
    f884:	99 81       	ldd	r25, Y+1	; 0x01
    f886:	dc 01       	movw	r26, r24
    f888:	ed 91       	ld	r30, X+
    f88a:	fc 91       	ld	r31, X
    f88c:	06 84       	ldd	r0, Z+14	; 0x0e
    f88e:	f7 85       	ldd	r31, Z+15	; 0x0f
    f890:	e0 2d       	mov	r30, r0
    f892:	69 e3       	ldi	r22, 0x39	; 57
    f894:	75 e0       	ldi	r23, 0x05	; 5
    f896:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    f898:	81 e0       	ldi	r24, 0x01	; 1
    f89a:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
    f89c:	df 91       	pop	r29
    f89e:	cf 91       	pop	r28
    f8a0:	08 95       	ret

0000f8a2 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
    f8a2:	cf 92       	push	r12
    f8a4:	df 92       	push	r13
    f8a6:	ef 92       	push	r14
    f8a8:	ff 92       	push	r15
    f8aa:	0f 93       	push	r16
    f8ac:	1f 93       	push	r17
    f8ae:	cf 93       	push	r28
    f8b0:	df 93       	push	r29
    f8b2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    f8b4:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    f8b8:	0b 89       	ldd	r16, Y+19	; 0x13
    f8ba:	1c 89       	ldd	r17, Y+20	; 0x14
    f8bc:	2d 89       	ldd	r18, Y+21	; 0x15
    f8be:	3e 89       	ldd	r19, Y+22	; 0x16
    f8c0:	60 1b       	sub	r22, r16
    f8c2:	71 0b       	sbc	r23, r17
    f8c4:	82 0b       	sbc	r24, r18
    f8c6:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    f8c8:	cb 84       	ldd	r12, Y+11	; 0x0b
    f8ca:	dc 84       	ldd	r13, Y+12	; 0x0c
    f8cc:	ed 84       	ldd	r14, Y+13	; 0x0d
    f8ce:	fe 84       	ldd	r15, Y+14	; 0x0e
    f8d0:	6c 15       	cp	r22, r12
    f8d2:	7d 05       	cpc	r23, r13
    f8d4:	8e 05       	cpc	r24, r14
    f8d6:	9f 05       	cpc	r25, r15
    f8d8:	28 f4       	brcc	.+10     	; 0xf8e4 <NTPClient::update()+0x42>
    f8da:	01 2b       	or	r16, r17
    f8dc:	02 2b       	or	r16, r18
    f8de:	03 2b       	or	r16, r19
    f8e0:	09 f0       	breq	.+2      	; 0xf8e4 <NTPClient::update()+0x42>
    f8e2:	9e c0       	rjmp	.+316    	; 0xfa20 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    f8e4:	8a 81       	ldd	r24, Y+2	; 0x02
    f8e6:	81 11       	cpse	r24, r1
    f8e8:	03 c0       	rjmp	.+6      	; 0xf8f0 <NTPClient::update()+0x4e>
    f8ea:	ce 01       	movw	r24, r28
    f8ec:	0e 94 3a 7c 	call	0xf874	; 0xf874 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
    f8f0:	7e 01       	movw	r14, r28
    f8f2:	87 e1       	ldi	r24, 0x17	; 23
    f8f4:	e8 0e       	add	r14, r24
    f8f6:	f1 1c       	adc	r15, r1
    f8f8:	8c e2       	ldi	r24, 0x2C	; 44
    f8fa:	fe 01       	movw	r30, r28
    f8fc:	7b 96       	adiw	r30, 0x1b	; 27
    f8fe:	df 01       	movw	r26, r30
    f900:	1d 92       	st	X+, r1
    f902:	8a 95       	dec	r24
    f904:	e9 f7       	brne	.-6      	; 0xf900 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    f906:	83 ee       	ldi	r24, 0xE3	; 227
    f908:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
    f90a:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
    f90c:	86 e0       	ldi	r24, 0x06	; 6
    f90e:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
    f910:	8c ee       	ldi	r24, 0xEC	; 236
    f912:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
    f914:	81 e3       	ldi	r24, 0x31	; 49
    f916:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
    f918:	9e e4       	ldi	r25, 0x4E	; 78
    f91a:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
    f91c:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
    f91e:	84 e3       	ldi	r24, 0x34	; 52
    f920:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
    f922:	88 81       	ld	r24, Y
    f924:	99 81       	ldd	r25, Y+1	; 0x01
    f926:	6b 81       	ldd	r22, Y+3	; 0x03
    f928:	7c 81       	ldd	r23, Y+4	; 0x04
    f92a:	dc 01       	movw	r26, r24
    f92c:	ed 91       	ld	r30, X+
    f92e:	fc 91       	ld	r31, X
    f930:	06 88       	ldd	r0, Z+22	; 0x16
    f932:	f7 89       	ldd	r31, Z+23	; 0x17
    f934:	e0 2d       	mov	r30, r0
    f936:	4b e7       	ldi	r20, 0x7B	; 123
    f938:	50 e0       	ldi	r21, 0x00	; 0
    f93a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
    f93c:	88 81       	ld	r24, Y
    f93e:	99 81       	ldd	r25, Y+1	; 0x01
    f940:	dc 01       	movw	r26, r24
    f942:	ed 91       	ld	r30, X+
    f944:	fc 91       	ld	r31, X
    f946:	02 80       	ldd	r0, Z+2	; 0x02
    f948:	f3 81       	ldd	r31, Z+3	; 0x03
    f94a:	e0 2d       	mov	r30, r0
    f94c:	40 e3       	ldi	r20, 0x30	; 48
    f94e:	50 e0       	ldi	r21, 0x00	; 0
    f950:	b7 01       	movw	r22, r14
    f952:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
    f954:	88 81       	ld	r24, Y
    f956:	99 81       	ldd	r25, Y+1	; 0x01
    f958:	dc 01       	movw	r26, r24
    f95a:	ed 91       	ld	r30, X+
    f95c:	fc 91       	ld	r31, X
    f95e:	00 8c       	ldd	r0, Z+24	; 0x18
    f960:	f1 8d       	ldd	r31, Z+25	; 0x19
    f962:	e0 2d       	mov	r30, r0
    f964:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
    f966:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
    f968:	6a e0       	ldi	r22, 0x0A	; 10
    f96a:	70 e0       	ldi	r23, 0x00	; 0
    f96c:	80 e0       	ldi	r24, 0x00	; 0
    f96e:	90 e0       	ldi	r25, 0x00	; 0
    f970:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
    f974:	88 81       	ld	r24, Y
    f976:	99 81       	ldd	r25, Y+1	; 0x01
    f978:	dc 01       	movw	r26, r24
    f97a:	ed 91       	ld	r30, X+
    f97c:	fc 91       	ld	r31, X
    f97e:	02 8c       	ldd	r0, Z+26	; 0x1a
    f980:	f3 8d       	ldd	r31, Z+27	; 0x1b
    f982:	e0 2d       	mov	r30, r0
    f984:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
    f986:	15 36       	cpi	r17, 0x65	; 101
    f988:	09 f4       	brne	.+2      	; 0xf98c <NTPClient::update()+0xea>
    f98a:	54 c0       	rjmp	.+168    	; 0xfa34 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
    f98c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
    f98e:	89 2b       	or	r24, r25
    f990:	59 f3       	breq	.-42     	; 0xf968 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
    f992:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
    f996:	21 2f       	mov	r18, r17
    f998:	30 e0       	ldi	r19, 0x00	; 0
    f99a:	a9 01       	movw	r20, r18
    f99c:	4f 5f       	subi	r20, 0xFF	; 255
    f99e:	5f 4f       	sbci	r21, 0xFF	; 255
    f9a0:	ea e0       	ldi	r30, 0x0A	; 10
    f9a2:	e4 9f       	mul	r30, r20
    f9a4:	90 01       	movw	r18, r0
    f9a6:	e5 9f       	mul	r30, r21
    f9a8:	30 0d       	add	r19, r0
    f9aa:	11 24       	eor	r1, r1
    f9ac:	89 01       	movw	r16, r18
    f9ae:	33 0f       	add	r19, r19
    f9b0:	22 0b       	sbc	r18, r18
    f9b2:	33 0b       	sbc	r19, r19
    f9b4:	ab 01       	movw	r20, r22
    f9b6:	bc 01       	movw	r22, r24
    f9b8:	40 1b       	sub	r20, r16
    f9ba:	51 0b       	sbc	r21, r17
    f9bc:	62 0b       	sbc	r22, r18
    f9be:	73 0b       	sbc	r23, r19
    f9c0:	4b 8b       	std	Y+19, r20	; 0x13
    f9c2:	5c 8b       	std	Y+20, r21	; 0x14
    f9c4:	6d 8b       	std	Y+21, r22	; 0x15
    f9c6:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
    f9c8:	88 81       	ld	r24, Y
    f9ca:	99 81       	ldd	r25, Y+1	; 0x01
    f9cc:	dc 01       	movw	r26, r24
    f9ce:	ed 91       	ld	r30, X+
    f9d0:	fc 91       	ld	r31, X
    f9d2:	04 8c       	ldd	r0, Z+28	; 0x1c
    f9d4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    f9d6:	e0 2d       	mov	r30, r0
    f9d8:	40 e3       	ldi	r20, 0x30	; 48
    f9da:	50 e0       	ldi	r21, 0x00	; 0
    f9dc:	b7 01       	movw	r22, r14
    f9de:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
    f9e0:	fe 01       	movw	r30, r28
    f9e2:	ff 96       	adiw	r30, 0x3f	; 63
    f9e4:	80 81       	ld	r24, Z
    f9e6:	91 81       	ldd	r25, Z+1	; 0x01
    f9e8:	98 27       	eor	r25, r24
    f9ea:	89 27       	eor	r24, r25
    f9ec:	98 27       	eor	r25, r24
    f9ee:	b0 e0       	ldi	r27, 0x00	; 0
    f9f0:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    f9f2:	dc 01       	movw	r26, r24
    f9f4:	99 27       	eor	r25, r25
    f9f6:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
    f9f8:	32 96       	adiw	r30, 0x02	; 2
    f9fa:	40 81       	ld	r20, Z
    f9fc:	51 81       	ldd	r21, Z+1	; 0x01
    f9fe:	54 27       	eor	r21, r20
    fa00:	45 27       	eor	r20, r21
    fa02:	54 27       	eor	r21, r20
    fa04:	70 e0       	ldi	r23, 0x00	; 0
    fa06:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    fa08:	84 2b       	or	r24, r20
    fa0a:	95 2b       	or	r25, r21
    fa0c:	a6 2b       	or	r26, r22
    fa0e:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
    fa10:	80 58       	subi	r24, 0x80	; 128
    fa12:	9e 47       	sbci	r25, 0x7E	; 126
    fa14:	aa 4a       	sbci	r26, 0xAA	; 170
    fa16:	b3 48       	sbci	r27, 0x83	; 131
    fa18:	8f 87       	std	Y+15, r24	; 0x0f
    fa1a:	98 8b       	std	Y+16, r25	; 0x10
    fa1c:	a9 8b       	std	Y+17, r26	; 0x11
    fa1e:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
    fa20:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
    fa22:	df 91       	pop	r29
    fa24:	cf 91       	pop	r28
    fa26:	1f 91       	pop	r17
    fa28:	0f 91       	pop	r16
    fa2a:	ff 90       	pop	r15
    fa2c:	ef 90       	pop	r14
    fa2e:	df 90       	pop	r13
    fa30:	cf 90       	pop	r12
    fa32:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
    fa34:	80 e0       	ldi	r24, 0x00	; 0
    fa36:	f5 cf       	rjmp	.-22     	; 0xfa22 <NTPClient::update()+0x180>

0000fa38 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    fa38:	1f 92       	push	r1
    fa3a:	0f 92       	push	r0
    fa3c:	0f b6       	in	r0, 0x3f	; 63
    fa3e:	0f 92       	push	r0
    fa40:	11 24       	eor	r1, r1
    fa42:	0b b6       	in	r0, 0x3b	; 59
    fa44:	0f 92       	push	r0
    fa46:	2f 93       	push	r18
    fa48:	3f 93       	push	r19
    fa4a:	4f 93       	push	r20
    fa4c:	5f 93       	push	r21
    fa4e:	6f 93       	push	r22
    fa50:	7f 93       	push	r23
    fa52:	8f 93       	push	r24
    fa54:	9f 93       	push	r25
    fa56:	af 93       	push	r26
    fa58:	bf 93       	push	r27
    fa5a:	ef 93       	push	r30
    fa5c:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    fa5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    fa62:	88 7f       	andi	r24, 0xF8	; 248
    fa64:	80 36       	cpi	r24, 0x60	; 96
    fa66:	09 f4       	brne	.+2      	; 0xfa6a <__vector_39+0x32>
    fa68:	4d c0       	rjmp	.+154    	; 0xfb04 <__vector_39+0xcc>
    fa6a:	08 f0       	brcs	.+2      	; 0xfa6e <__vector_39+0x36>
    fa6c:	40 c0       	rjmp	.+128    	; 0xfaee <__vector_39+0xb6>
    fa6e:	88 32       	cpi	r24, 0x28	; 40
    fa70:	09 f4       	brne	.+2      	; 0xfa74 <__vector_39+0x3c>
    fa72:	a9 c0       	rjmp	.+338    	; 0xfbc6 <__vector_39+0x18e>
    fa74:	28 f5       	brcc	.+74     	; 0xfac0 <__vector_39+0x88>
    fa76:	80 31       	cpi	r24, 0x10	; 16
    fa78:	09 f4       	brne	.+2      	; 0xfa7c <__vector_39+0x44>
    fa7a:	9d c0       	rjmp	.+314    	; 0xfbb6 <__vector_39+0x17e>
    fa7c:	c8 f4       	brcc	.+50     	; 0xfab0 <__vector_39+0x78>
    fa7e:	88 23       	and	r24, r24
    fa80:	09 f4       	brne	.+2      	; 0xfa84 <__vector_39+0x4c>
    fa82:	fb c0       	rjmp	.+502    	; 0xfc7a <__vector_39+0x242>
    fa84:	88 30       	cpi	r24, 0x08	; 8
    fa86:	09 f4       	brne	.+2      	; 0xfa8a <__vector_39+0x52>
    fa88:	96 c0       	rjmp	.+300    	; 0xfbb6 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    fa8a:	ff 91       	pop	r31
    fa8c:	ef 91       	pop	r30
    fa8e:	bf 91       	pop	r27
    fa90:	af 91       	pop	r26
    fa92:	9f 91       	pop	r25
    fa94:	8f 91       	pop	r24
    fa96:	7f 91       	pop	r23
    fa98:	6f 91       	pop	r22
    fa9a:	5f 91       	pop	r21
    fa9c:	4f 91       	pop	r20
    fa9e:	3f 91       	pop	r19
    faa0:	2f 91       	pop	r18
    faa2:	0f 90       	pop	r0
    faa4:	0b be       	out	0x3b, r0	; 59
    faa6:	0f 90       	pop	r0
    faa8:	0f be       	out	0x3f, r0	; 63
    faaa:	0f 90       	pop	r0
    faac:	1f 90       	pop	r1
    faae:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fab0:	88 31       	cpi	r24, 0x18	; 24
    fab2:	09 f4       	brne	.+2      	; 0xfab6 <__vector_39+0x7e>
    fab4:	88 c0       	rjmp	.+272    	; 0xfbc6 <__vector_39+0x18e>
    fab6:	80 32       	cpi	r24, 0x20	; 32
    fab8:	41 f7       	brne	.-48     	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    faba:	80 93 3d 11 	sts	0x113D, r24	; 0x80113d <twi_error>
    fabe:	14 c0       	rjmp	.+40     	; 0xfae8 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fac0:	80 34       	cpi	r24, 0x40	; 64
    fac2:	09 f4       	brne	.+2      	; 0xfac6 <__vector_39+0x8e>
    fac4:	9d c0       	rjmp	.+314    	; 0xfc00 <__vector_39+0x1c8>
    fac6:	40 f4       	brcc	.+16     	; 0xfad8 <__vector_39+0xa0>
    fac8:	80 33       	cpi	r24, 0x30	; 48
    faca:	b9 f3       	breq	.-18     	; 0xfaba <__vector_39+0x82>
    facc:	88 33       	cpi	r24, 0x38	; 56
    face:	e9 f6       	brne	.-70     	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    fad0:	80 93 3d 11 	sts	0x113D, r24	; 0x80113d <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    fad4:	85 ec       	ldi	r24, 0xC5	; 197
    fad6:	b0 c0       	rjmp	.+352    	; 0xfc38 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fad8:	80 35       	cpi	r24, 0x50	; 80
    fada:	09 f4       	brne	.+2      	; 0xfade <__vector_39+0xa6>
    fadc:	85 c0       	rjmp	.+266    	; 0xfbe8 <__vector_39+0x1b0>
    fade:	88 35       	cpi	r24, 0x58	; 88
    fae0:	09 f4       	brne	.+2      	; 0xfae4 <__vector_39+0xac>
    fae2:	96 c0       	rjmp	.+300    	; 0xfc10 <__vector_39+0x1d8>
    fae4:	88 34       	cpi	r24, 0x48	; 72
    fae6:	89 f6       	brne	.-94     	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    fae8:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <twi_stop>
    faec:	ce cf       	rjmp	.-100    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    faee:	88 39       	cpi	r24, 0x98	; 152
    faf0:	09 f4       	brne	.+2      	; 0xfaf4 <__vector_39+0xbc>
    faf2:	8c c0       	rjmp	.+280    	; 0xfc0c <__vector_39+0x1d4>
    faf4:	38 f5       	brcc	.+78     	; 0xfb44 <__vector_39+0x10c>
    faf6:	88 37       	cpi	r24, 0x78	; 120
    faf8:	29 f0       	breq	.+10     	; 0xfb04 <__vector_39+0xcc>
    fafa:	50 f4       	brcc	.+20     	; 0xfb10 <__vector_39+0xd8>
    fafc:	88 36       	cpi	r24, 0x68	; 104
    fafe:	11 f0       	breq	.+4      	; 0xfb04 <__vector_39+0xcc>
    fb00:	80 37       	cpi	r24, 0x70	; 112
    fb02:	19 f6       	brne	.-122    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    fb04:	83 e0       	ldi	r24, 0x03	; 3
    fb06:	80 93 3f 11 	sts	0x113F, r24	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    fb0a:	10 92 c9 10 	sts	0x10C9, r1	; 0x8010c9 <twi_rxBufferIndex>
    fb0e:	57 c0       	rjmp	.+174    	; 0xfbbe <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fb10:	88 38       	cpi	r24, 0x88	; 136
    fb12:	09 f4       	brne	.+2      	; 0xfb16 <__vector_39+0xde>
    fb14:	7b c0       	rjmp	.+246    	; 0xfc0c <__vector_39+0x1d4>
    fb16:	80 39       	cpi	r24, 0x90	; 144
    fb18:	19 f0       	breq	.+6      	; 0xfb20 <__vector_39+0xe8>
    fb1a:	80 38       	cpi	r24, 0x80	; 128
    fb1c:	09 f0       	breq	.+2      	; 0xfb20 <__vector_39+0xe8>
    fb1e:	b5 cf       	rjmp	.-150    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    fb20:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <twi_rxBufferIndex>
    fb24:	80 32       	cpi	r24, 0x20	; 32
    fb26:	08 f0       	brcs	.+2      	; 0xfb2a <__vector_39+0xf2>
    fb28:	71 c0       	rjmp	.+226    	; 0xfc0c <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    fb2a:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <twi_rxBufferIndex>
    fb2e:	81 e0       	ldi	r24, 0x01	; 1
    fb30:	8e 0f       	add	r24, r30
    fb32:	80 93 c9 10 	sts	0x10C9, r24	; 0x8010c9 <twi_rxBufferIndex>
    fb36:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    fb3a:	f0 e0       	ldi	r31, 0x00	; 0
    fb3c:	e7 55       	subi	r30, 0x57	; 87
    fb3e:	ff 4e       	sbci	r31, 0xEF	; 239
    fb40:	80 83       	st	Z, r24
    fb42:	3d c0       	rjmp	.+122    	; 0xfbbe <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fb44:	80 3b       	cpi	r24, 0xB0	; 176
    fb46:	39 f0       	breq	.+14     	; 0xfb56 <__vector_39+0x11e>
    fb48:	e0 f4       	brcc	.+56     	; 0xfb82 <__vector_39+0x14a>
    fb4a:	80 3a       	cpi	r24, 0xA0	; 160
    fb4c:	09 f4       	brne	.+2      	; 0xfb50 <__vector_39+0x118>
    fb4e:	79 c0       	rjmp	.+242    	; 0xfc42 <__vector_39+0x20a>
    fb50:	88 3a       	cpi	r24, 0xA8	; 168
    fb52:	09 f0       	breq	.+2      	; 0xfb56 <__vector_39+0x11e>
    fb54:	9a cf       	rjmp	.-204    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    fb56:	84 e0       	ldi	r24, 0x04	; 4
    fb58:	80 93 3f 11 	sts	0x113F, r24	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    fb5c:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    fb60:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    fb64:	e0 91 f0 10 	lds	r30, 0x10F0	; 0x8010f0 <twi_onSlaveTransmit>
    fb68:	f0 91 f1 10 	lds	r31, 0x10F1	; 0x8010f1 <twi_onSlaveTransmit+0x1>
    fb6c:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    fb6e:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <twi_txBufferLength>
    fb72:	81 11       	cpse	r24, r1
    fb74:	0f c0       	rjmp	.+30     	; 0xfb94 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    fb76:	81 e0       	ldi	r24, 0x01	; 1
    fb78:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    fb7c:	10 92 87 10 	sts	0x1087, r1	; 0x801087 <twi_txBuffer>
    fb80:	09 c0       	rjmp	.+18     	; 0xfb94 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    fb82:	80 3c       	cpi	r24, 0xC0	; 192
    fb84:	09 f4       	brne	.+2      	; 0xfb88 <__vector_39+0x150>
    fb86:	a6 cf       	rjmp	.-180    	; 0xfad4 <__vector_39+0x9c>
    fb88:	88 3c       	cpi	r24, 0xC8	; 200
    fb8a:	09 f4       	brne	.+2      	; 0xfb8e <__vector_39+0x156>
    fb8c:	a3 cf       	rjmp	.-186    	; 0xfad4 <__vector_39+0x9c>
    fb8e:	88 3b       	cpi	r24, 0xB8	; 184
    fb90:	09 f0       	breq	.+2      	; 0xfb94 <__vector_39+0x15c>
    fb92:	7b cf       	rjmp	.-266    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    fb94:	e0 91 a8 10 	lds	r30, 0x10A8	; 0x8010a8 <twi_txBufferIndex>
    fb98:	81 e0       	ldi	r24, 0x01	; 1
    fb9a:	8e 0f       	add	r24, r30
    fb9c:	80 93 a8 10 	sts	0x10A8, r24	; 0x8010a8 <twi_txBufferIndex>
    fba0:	f0 e0       	ldi	r31, 0x00	; 0
    fba2:	e9 57       	subi	r30, 0x79	; 121
    fba4:	ff 4e       	sbci	r31, 0xEF	; 239
    fba6:	80 81       	ld	r24, Z
    fba8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    fbac:	90 91 a8 10 	lds	r25, 0x10A8	; 0x8010a8 <twi_txBufferIndex>
    fbb0:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <twi_txBufferLength>
    fbb4:	29 c0       	rjmp	.+82     	; 0xfc08 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    fbb6:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    fbba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    fbbe:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    fbc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    fbc4:	62 cf       	rjmp	.-316    	; 0xfa8a <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    fbc6:	90 91 3c 11 	lds	r25, 0x113C	; 0x80113c <twi_masterBufferIndex>
    fbca:	80 91 3b 11 	lds	r24, 0x113B	; 0x80113b <twi_masterBufferLength>
    fbce:	98 17       	cp	r25, r24
    fbd0:	58 f5       	brcc	.+86     	; 0xfc28 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    fbd2:	e0 91 3c 11 	lds	r30, 0x113C	; 0x80113c <twi_masterBufferIndex>
    fbd6:	81 e0       	ldi	r24, 0x01	; 1
    fbd8:	8e 0f       	add	r24, r30
    fbda:	80 93 3c 11 	sts	0x113C, r24	; 0x80113c <twi_masterBufferIndex>
    fbde:	f0 e0       	ldi	r31, 0x00	; 0
    fbe0:	e7 5e       	subi	r30, 0xE7	; 231
    fbe2:	fe 4e       	sbci	r31, 0xEE	; 238
    fbe4:	80 81       	ld	r24, Z
    fbe6:	e9 cf       	rjmp	.-46     	; 0xfbba <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    fbe8:	e0 91 3c 11 	lds	r30, 0x113C	; 0x80113c <twi_masterBufferIndex>
    fbec:	81 e0       	ldi	r24, 0x01	; 1
    fbee:	8e 0f       	add	r24, r30
    fbf0:	80 93 3c 11 	sts	0x113C, r24	; 0x80113c <twi_masterBufferIndex>
    fbf4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    fbf8:	f0 e0       	ldi	r31, 0x00	; 0
    fbfa:	e7 5e       	subi	r30, 0xE7	; 231
    fbfc:	fe 4e       	sbci	r31, 0xEE	; 238
    fbfe:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    fc00:	90 91 3c 11 	lds	r25, 0x113C	; 0x80113c <twi_masterBufferIndex>
    fc04:	80 91 3b 11 	lds	r24, 0x113B	; 0x80113b <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    fc08:	98 17       	cp	r25, r24
    fc0a:	c8 f2       	brcs	.-78     	; 0xfbbe <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    fc0c:	85 e8       	ldi	r24, 0x85	; 133
    fc0e:	d8 cf       	rjmp	.-80     	; 0xfbc0 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    fc10:	e0 91 3c 11 	lds	r30, 0x113C	; 0x80113c <twi_masterBufferIndex>
    fc14:	81 e0       	ldi	r24, 0x01	; 1
    fc16:	8e 0f       	add	r24, r30
    fc18:	80 93 3c 11 	sts	0x113C, r24	; 0x80113c <twi_masterBufferIndex>
    fc1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    fc20:	f0 e0       	ldi	r31, 0x00	; 0
    fc22:	e7 5e       	subi	r30, 0xE7	; 231
    fc24:	fe 4e       	sbci	r31, 0xEE	; 238
    fc26:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    fc28:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <twi_sendStop>
    fc2c:	81 11       	cpse	r24, r1
    fc2e:	5c cf       	rjmp	.-328    	; 0xfae8 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    fc30:	81 e0       	ldi	r24, 0x01	; 1
    fc32:	80 93 39 11 	sts	0x1139, r24	; 0x801139 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    fc36:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    fc38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    fc3c:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <twi_state>
    fc40:	24 cf       	rjmp	.-440    	; 0xfa8a <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    fc42:	85 ec       	ldi	r24, 0xC5	; 197
    fc44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    fc48:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    fc4c:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <twi_rxBufferIndex>
    fc50:	80 32       	cpi	r24, 0x20	; 32
    fc52:	30 f4       	brcc	.+12     	; 0xfc60 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    fc54:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <twi_rxBufferIndex>
    fc58:	f0 e0       	ldi	r31, 0x00	; 0
    fc5a:	e7 55       	subi	r30, 0x57	; 87
    fc5c:	ff 4e       	sbci	r31, 0xEF	; 239
    fc5e:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    fc60:	60 91 c9 10 	lds	r22, 0x10C9	; 0x8010c9 <twi_rxBufferIndex>
    fc64:	70 e0       	ldi	r23, 0x00	; 0
    fc66:	e0 91 ee 10 	lds	r30, 0x10EE	; 0x8010ee <twi_onSlaveReceive>
    fc6a:	f0 91 ef 10 	lds	r31, 0x10EF	; 0x8010ef <twi_onSlaveReceive+0x1>
    fc6e:	89 ea       	ldi	r24, 0xA9	; 169
    fc70:	90 e1       	ldi	r25, 0x10	; 16
    fc72:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    fc74:	10 92 c9 10 	sts	0x10C9, r1	; 0x8010c9 <twi_rxBufferIndex>
    fc78:	08 cf       	rjmp	.-496    	; 0xfa8a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    fc7a:	10 92 3d 11 	sts	0x113D, r1	; 0x80113d <twi_error>
    fc7e:	34 cf       	rjmp	.-408    	; 0xfae8 <__vector_39+0xb0>

0000fc80 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    fc80:	20 91 f5 10 	lds	r18, 0x10F5	; 0x8010f5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    fc84:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    fc86:	21 32       	cpi	r18, 0x21	; 33
    fc88:	08 f0       	brcs	.+2      	; 0xfc8c <TwoWire::endTransmission()+0xc>
    fc8a:	44 c0       	rjmp	.+136    	; 0xfd14 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    fc8c:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <twi_state>
    fc90:	81 11       	cpse	r24, r1
    fc92:	fc cf       	rjmp	.-8      	; 0xfc8c <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
    fc94:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    fc98:	92 e0       	ldi	r25, 0x02	; 2
    fc9a:	90 93 3f 11 	sts	0x113F, r25	; 0x80113f <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    fc9e:	91 e0       	ldi	r25, 0x01	; 1
    fca0:	90 93 3e 11 	sts	0x113E, r25	; 0x80113e <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    fca4:	9f ef       	ldi	r25, 0xFF	; 255
    fca6:	90 93 3d 11 	sts	0x113D, r25	; 0x80113d <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    fcaa:	10 92 3c 11 	sts	0x113C, r1	; 0x80113c <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    fcae:	20 93 3b 11 	sts	0x113B, r18	; 0x80113b <twi_masterBufferLength>
    fcb2:	a7 e6       	ldi	r26, 0x67	; 103
    fcb4:	b0 e1       	ldi	r27, 0x10	; 16
    fcb6:	e9 e1       	ldi	r30, 0x19	; 25
    fcb8:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    fcba:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    fcbc:	29 13       	cpse	r18, r25
    fcbe:	31 c0       	rjmp	.+98     	; 0xfd22 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    fcc0:	10 92 3a 11 	sts	0x113A, r1	; 0x80113a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    fcc4:	90 91 3a 11 	lds	r25, 0x113A	; 0x80113a <twi_slarw>
    fcc8:	88 0f       	add	r24, r24
    fcca:	89 2b       	or	r24, r25
    fccc:	80 93 3a 11 	sts	0x113A, r24	; 0x80113a <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    fcd0:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <twi_inRepStart>
    fcd4:	81 30       	cpi	r24, 0x01	; 1
    fcd6:	49 f5       	brne	.+82     	; 0xfd2a <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    fcd8:	10 92 39 11 	sts	0x1139, r1	; 0x801139 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    fcdc:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <twi_slarw>
    fce0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    fce4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    fce8:	83 fd       	sbrc	r24, 3
    fcea:	f8 cf       	rjmp	.-16     	; 0xfcdc <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    fcec:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    fcee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    fcf2:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <twi_state>
    fcf6:	82 30       	cpi	r24, 0x02	; 2
    fcf8:	e1 f3       	breq	.-8      	; 0xfcf2 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    fcfa:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <twi_error>
    fcfe:	8f 3f       	cpi	r24, 0xFF	; 255
    fd00:	b1 f0       	breq	.+44     	; 0xfd2e <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    fd02:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <twi_error>
    fd06:	80 32       	cpi	r24, 0x20	; 32
    fd08:	a1 f0       	breq	.+40     	; 0xfd32 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    fd0a:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <twi_error>
    fd0e:	80 33       	cpi	r24, 0x30	; 48
    fd10:	91 f0       	breq	.+36     	; 0xfd36 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    fd12:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    fd14:	10 92 f6 10 	sts	0x10F6, r1	; 0x8010f6 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    fd18:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    fd1c:	10 92 f8 10 	sts	0x10F8, r1	; 0x8010f8 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    fd20:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    fd22:	3d 91       	ld	r19, X+
    fd24:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    fd26:	9f 5f       	subi	r25, 0xFF	; 255
    fd28:	c9 cf       	rjmp	.-110    	; 0xfcbc <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    fd2a:	85 ee       	ldi	r24, 0xE5	; 229
    fd2c:	e0 cf       	rjmp	.-64     	; 0xfcee <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    fd2e:	80 e0       	ldi	r24, 0x00	; 0
    fd30:	f1 cf       	rjmp	.-30     	; 0xfd14 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    fd32:	82 e0       	ldi	r24, 0x02	; 2
    fd34:	ef cf       	rjmp	.-34     	; 0xfd14 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    fd36:	83 e0       	ldi	r24, 0x03	; 3
    fd38:	ed cf       	rjmp	.-38     	; 0xfd14 <TwoWire::endTransmission()+0x94>

0000fd3a <RTC_DS1307::isrunning() [clone .constprop.135]>:
_ZN10RTC_DS13079isrunningEv.constprop.135():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    fd3a:	88 e6       	ldi	r24, 0x68	; 104
    fd3c:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    fd40:	60 e0       	ldi	r22, 0x00	; 0
    fd42:	88 e0       	ldi	r24, 0x08	; 8
    fd44:	9e e0       	ldi	r25, 0x0E	; 14
    fd46:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
    fd4a:	88 e0       	ldi	r24, 0x08	; 8
    fd4c:	9e e0       	ldi	r25, 0x0E	; 14
    fd4e:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
    fd52:	81 e0       	ldi	r24, 0x01	; 1
    fd54:	90 e0       	ldi	r25, 0x00	; 0
    fd56:	0e 94 78 70 	call	0xe0f0	; 0xe0f0 <TwoWire::requestFrom(int, int) [clone .constprop.137]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
    fd5a:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
    fd5e:	80 58       	subi	r24, 0x80	; 128
    fd60:	87 fb       	bst	r24, 7
    fd62:	88 27       	eor	r24, r24
    fd64:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
    fd66:	08 95       	ret

0000fd68 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    fd68:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    fd6c:	80 ef       	ldi	r24, 0xF0	; 240
    fd6e:	90 e0       	ldi	r25, 0x00	; 0
    fd70:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    fd74:	88 e0       	ldi	r24, 0x08	; 8
    fd76:	9e e0       	ldi	r25, 0x0E	; 14
    fd78:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    fd7c:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    fd7e:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    fd80:	08 95       	ret

0000fd82 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    fd82:	86 2f       	mov	r24, r22
twi_readFrom():
    fd84:	64 2f       	mov	r22, r20
    fd86:	0e 94 29 6c 	call	0xd852	; 0xd852 <twi_readFrom.part.0.constprop.177>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    fd8a:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    fd8e:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    fd92:	08 95       	ret

0000fd94 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    fd94:	ff 92       	push	r15
    fd96:	0f 93       	push	r16
    fd98:	1f 93       	push	r17
    fd9a:	cf 93       	push	r28
    fd9c:	df 93       	push	r29
    fd9e:	d8 2f       	mov	r29, r24
    fda0:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    fda2:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    fda6:	86 e9       	ldi	r24, 0x96	; 150
    fda8:	90 e0       	ldi	r25, 0x00	; 0
    fdaa:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    fdae:	88 e0       	ldi	r24, 0x08	; 8
    fdb0:	9e e0       	ldi	r25, 0x0E	; 14
    fdb2:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    fdb6:	ce ef       	ldi	r28, 0xFE	; 254
    fdb8:	88 23       	and	r24, r24
    fdba:	41 f0       	breq	.+16     	; 0xfdcc <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    fdbc:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    fdbe:	8c 2f       	mov	r24, r28
    fdc0:	df 91       	pop	r29
    fdc2:	cf 91       	pop	r28
    fdc4:	1f 91       	pop	r17
    fdc6:	0f 91       	pop	r16
    fdc8:	ff 90       	pop	r15
    fdca:	08 95       	ret
    fdcc:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    fdce:	e1 f1       	breq	.+120    	; 0xfe48 <__DATA_REGION_LENGTH__+0x48>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    fdd0:	41 e0       	ldi	r20, 0x01	; 1
    fdd2:	6d 2f       	mov	r22, r29
    fdd4:	88 e0       	ldi	r24, 0x08	; 8
    fdd6:	9e e0       	ldi	r25, 0x0E	; 14
    fdd8:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    fddc:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    fde0:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    fde4:	89 1b       	sub	r24, r25
    fde6:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    fde8:	18 16       	cp	r1, r24
    fdea:	19 06       	cpc	r1, r25
    fdec:	1c f4       	brge	.+6      	; 0xfdf4 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    fdee:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
    fdf2:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    fdf4:	f0 fc       	sbrc	r15, 0
    fdf6:	ea cf       	rjmp	.-44     	; 0xfdcc <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    fdf8:	8d 2f       	mov	r24, r29
    fdfa:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    fdfe:	81 ee       	ldi	r24, 0xE1	; 225
    fe00:	90 e0       	ldi	r25, 0x00	; 0
    fe02:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    fe06:	61 ee       	ldi	r22, 0xE1	; 225
    fe08:	88 e0       	ldi	r24, 0x08	; 8
    fe0a:	9e e0       	ldi	r25, 0x0E	; 14
    fe0c:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    fe10:	88 e0       	ldi	r24, 0x08	; 8
    fe12:	9e e0       	ldi	r25, 0x0E	; 14
    fe14:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    fe18:	c8 2f       	mov	r28, r24
    fe1a:	81 11       	cpse	r24, r1
    fe1c:	cf cf       	rjmp	.-98     	; 0xfdbc <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    fe1e:	41 e0       	ldi	r20, 0x01	; 1
    fe20:	6d 2f       	mov	r22, r29
    fe22:	88 e0       	ldi	r24, 0x08	; 8
    fe24:	9e e0       	ldi	r25, 0x0E	; 14
    fe26:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    fe2a:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    fe2e:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    fe32:	89 1b       	sub	r24, r25
    fe34:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    fe36:	18 16       	cp	r1, r24
    fe38:	19 06       	cpc	r1, r25
    fe3a:	0c f0       	brlt	.+2      	; 0xfe3e <__DATA_REGION_LENGTH__+0x3e>
    fe3c:	c0 cf       	rjmp	.-128    	; 0xfdbe <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    fe3e:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
    fe42:	f8 01       	movw	r30, r16
    fe44:	80 83       	st	Z, r24
    fe46:	bb cf       	rjmp	.-138    	; 0xfdbe <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    fe48:	c4 e0       	ldi	r28, 0x04	; 4
    fe4a:	b9 cf       	rjmp	.-142    	; 0xfdbe <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0000fe4c <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    fe4c:	0f 93       	push	r16
    fe4e:	1f 93       	push	r17
    fe50:	cf 93       	push	r28
    fe52:	df 93       	push	r29
    fe54:	08 2f       	mov	r16, r24
    fe56:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    fe58:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    fe5c:	85 ea       	ldi	r24, 0xA5	; 165
    fe5e:	90 e0       	ldi	r25, 0x00	; 0
    fe60:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    fe64:	6d 2f       	mov	r22, r29
    fe66:	88 e0       	ldi	r24, 0x08	; 8
    fe68:	9e e0       	ldi	r25, 0x0E	; 14
    fe6a:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    fe6e:	88 e0       	ldi	r24, 0x08	; 8
    fe70:	9e e0       	ldi	r25, 0x0E	; 14
    fe72:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    fe76:	c8 2f       	mov	r28, r24
    fe78:	81 11       	cpse	r24, r1
    fe7a:	1d c0       	rjmp	.+58     	; 0xfeb6 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    fe7c:	1e ef       	ldi	r17, 0xFE	; 254
    fe7e:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    fe80:	e1 f0       	breq	.+56     	; 0xfeba <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    fe82:	41 e0       	ldi	r20, 0x01	; 1
    fe84:	60 2f       	mov	r22, r16
    fe86:	88 e0       	ldi	r24, 0x08	; 8
    fe88:	9e e0       	ldi	r25, 0x0E	; 14
    fe8a:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    fe8e:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    fe92:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    fe96:	89 1b       	sub	r24, r25
    fe98:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    fe9a:	18 16       	cp	r1, r24
    fe9c:	19 06       	cpc	r1, r25
    fe9e:	1c f4       	brge	.+6      	; 0xfea6 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    fea0:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
    fea4:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    fea6:	d0 fd       	sbrc	r29, 0
    fea8:	ea cf       	rjmp	.-44     	; 0xfe7e <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    feaa:	8c 2f       	mov	r24, r28
    feac:	df 91       	pop	r29
    feae:	cf 91       	pop	r28
    feb0:	1f 91       	pop	r17
    feb2:	0f 91       	pop	r16
    feb4:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    feb6:	c3 e0       	ldi	r28, 0x03	; 3
    feb8:	f8 cf       	rjmp	.-16     	; 0xfeaa <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    feba:	c4 e0       	ldi	r28, 0x04	; 4
    febc:	f6 cf       	rjmp	.-20     	; 0xfeaa <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0000febe <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    febe:	ef 92       	push	r14
    fec0:	ff 92       	push	r15
    fec2:	1f 93       	push	r17
    fec4:	cf 93       	push	r28
    fec6:	df 93       	push	r29
    fec8:	18 2f       	mov	r17, r24
    feca:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    fecc:	65 e5       	ldi	r22, 0x55	; 85
    fece:	0e 94 26 7f 	call	0xfe4c	; 0xfe4c <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    fed2:	81 11       	cpse	r24, r1
    fed4:	0d c0       	rjmp	.+26     	; 0xfef0 <owMatchRom(unsigned char, unsigned char*)+0x32>
    fed6:	e7 01       	movw	r28, r14
    fed8:	88 e0       	ldi	r24, 0x08	; 8
    feda:	e8 0e       	add	r14, r24
    fedc:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    fede:	69 91       	ld	r22, Y+
    fee0:	81 2f       	mov	r24, r17
    fee2:	0e 94 26 7f 	call	0xfe4c	; 0xfe4c <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    fee6:	81 11       	cpse	r24, r1
    fee8:	03 c0       	rjmp	.+6      	; 0xfef0 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    feea:	ec 16       	cp	r14, r28
    feec:	fd 06       	cpc	r15, r29
    feee:	b9 f7       	brne	.-18     	; 0xfede <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    fef0:	df 91       	pop	r29
    fef2:	cf 91       	pop	r28
    fef4:	1f 91       	pop	r17
    fef6:	ff 90       	pop	r15
    fef8:	ef 90       	pop	r14
    fefa:	08 95       	ret

0000fefc <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    fefc:	0f 93       	push	r16
    fefe:	1f 93       	push	r17
    ff00:	cf 93       	push	r28
    ff02:	df 93       	push	r29
    ff04:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    ff06:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    ff0a:	84 eb       	ldi	r24, 0xB4	; 180
    ff0c:	90 e0       	ldi	r25, 0x00	; 0
    ff0e:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    ff12:	88 e0       	ldi	r24, 0x08	; 8
    ff14:	9e e0       	ldi	r25, 0x0E	; 14
    ff16:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    ff1a:	c8 2f       	mov	r28, r24
    ff1c:	81 11       	cpse	r24, r1
    ff1e:	1b c0       	rjmp	.+54     	; 0xff56 <ds2482owReset(unsigned char)+0x5a>
    ff20:	de ef       	ldi	r29, 0xFE	; 254
    ff22:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    ff24:	f9 f0       	breq	.+62     	; 0xff64 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    ff26:	41 e0       	ldi	r20, 0x01	; 1
    ff28:	60 2f       	mov	r22, r16
    ff2a:	88 e0       	ldi	r24, 0x08	; 8
    ff2c:	9e e0       	ldi	r25, 0x0E	; 14
    ff2e:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
    ff32:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
    ff36:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
    ff3a:	89 1b       	sub	r24, r25
    ff3c:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    ff3e:	18 16       	cp	r1, r24
    ff40:	19 06       	cpc	r1, r25
    ff42:	1c f4       	brge	.+6      	; 0xff4a <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    ff44:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
    ff48:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    ff4a:	10 fd       	sbrc	r17, 0
    ff4c:	ea cf       	rjmp	.-44     	; 0xff22 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    ff4e:	11 fd       	sbrc	r17, 1
    ff50:	03 c0       	rjmp	.+6      	; 0xff58 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    ff52:	c5 e0       	ldi	r28, 0x05	; 5
    ff54:	01 c0       	rjmp	.+2      	; 0xff58 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    ff56:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    ff58:	8c 2f       	mov	r24, r28
    ff5a:	df 91       	pop	r29
    ff5c:	cf 91       	pop	r28
    ff5e:	1f 91       	pop	r17
    ff60:	0f 91       	pop	r16
    ff62:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    ff64:	c4 e0       	ldi	r28, 0x04	; 4
    ff66:	f8 cf       	rjmp	.-16     	; 0xff58 <ds2482owReset(unsigned char)+0x5c>

0000ff68 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]>:
_Z11owMatchNexthPh.constprop.80():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
    ff68:	df 92       	push	r13
    ff6a:	ef 92       	push	r14
    ff6c:	ff 92       	push	r15
    ff6e:	0f 93       	push	r16
    ff70:	1f 93       	push	r17
    ff72:	cf 93       	push	r28
    ff74:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
    ff76:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <lastDevice>
    ff7a:	99 23       	and	r25, r25
    ff7c:	51 f0       	breq	.+20     	; 0xff92 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
    ff7e:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
    ff80:	8d 2f       	mov	r24, r29
    ff82:	df 91       	pop	r29
    ff84:	cf 91       	pop	r28
    ff86:	1f 91       	pop	r17
    ff88:	0f 91       	pop	r16
    ff8a:	ff 90       	pop	r15
    ff8c:	ef 90       	pop	r14
    ff8e:	df 90       	pop	r13
    ff90:	08 95       	ret
    ff92:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
    ff94:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <ds2482owReset(unsigned char)>
    ff98:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
    ff9a:	81 11       	cpse	r24, r1
    ff9c:	f1 cf       	rjmp	.-30     	; 0xff80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
    ff9e:	60 ef       	ldi	r22, 0xF0	; 240
    ffa0:	8f 2d       	mov	r24, r15
    ffa2:	0e 94 26 7f 	call	0xfe4c	; 0xfe4c <ds2482owWriteByte(unsigned char, unsigned char)>
    ffa6:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
    ffa8:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
    ffaa:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
    ffac:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
    ffae:	81 11       	cpse	r24, r1
    ffb0:	e7 cf       	rjmp	.-50     	; 0xff80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
    ffb2:	80 91 ea 0a 	lds	r24, 0x0AEA	; 0x800aea <lastDiscrepancy>
    ffb6:	08 17       	cp	r16, r24
    ffb8:	50 f4       	brcc	.+20     	; 0xffce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
    ffba:	ee 2d       	mov	r30, r14
    ffbc:	f0 e0       	ldi	r31, 0x00	; 0
    ffbe:	e5 51       	subi	r30, 0x15	; 21
    ffc0:	f5 4f       	sbci	r31, 0xF5	; 245
    ffc2:	80 81       	ld	r24, Z
    ffc4:	81 23       	and	r24, r17
    ffc6:	c1 e0       	ldi	r28, 0x01	; 1
    ffc8:	29 f4       	brne	.+10     	; 0xffd4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
    ffca:	c0 e0       	ldi	r28, 0x00	; 0
    ffcc:	03 c0       	rjmp	.+6      	; 0xffd4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x6c>
    ffce:	c1 e0       	ldi	r28, 0x01	; 1
    ffd0:	80 13       	cpse	r24, r16
    ffd2:	fb cf       	rjmp	.-10     	; 0xffca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    ffd4:	8f 2d       	mov	r24, r15
    ffd6:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
    ffda:	88 e7       	ldi	r24, 0x78	; 120
    ffdc:	90 e0       	ldi	r25, 0x00	; 0
    ffde:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
_Z11owMatchNexthPh.constprop.80():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
    ffe2:	90 e0       	ldi	r25, 0x00	; 0
    ffe4:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
    ffe6:	cc 23       	and	r28, r28
    ffe8:	11 f0       	breq	.+4      	; 0xffee <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x86>
_Z11owMatchNexthPh.constprop.80():
    ffea:	80 e8       	ldi	r24, 0x80	; 128
    ffec:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
    ffee:	0e 94 51 74 	call	0xe8a2	; 0xe8a2 <TwoWire::write(int) [clone .constprop.82]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
    fff2:	88 e0       	ldi	r24, 0x08	; 8
    fff4:	9e e0       	ldi	r25, 0x0E	; 14
    fff6:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
    fffa:	81 11       	cpse	r24, r1
    fffc:	53 c0       	rjmp	.+166    	; 0x100a4 <__EEPROM_REGION_LENGTH__+0xa4>
    fffe:	6e ef       	ldi	r22, 0xFE	; 254
   10000:	d6 2e       	mov	r13, r22
   10002:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   10004:	dd 20       	and	r13, r13
   10006:	09 f4       	brne	.+2      	; 0x1000a <__EEPROM_REGION_LENGTH__+0xa>
   10008:	4f c0       	rjmp	.+158    	; 0x100a8 <__EEPROM_REGION_LENGTH__+0xa8>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1000a:	41 e0       	ldi	r20, 0x01	; 1
   1000c:	6f 2d       	mov	r22, r15
   1000e:	88 e0       	ldi	r24, 0x08	; 8
   10010:	9e e0       	ldi	r25, 0x0E	; 14
   10012:	0e 94 c1 7e 	call	0xfd82	; 0xfd82 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   10016:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <TwoWire::rxBufferLength>
   1001a:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <TwoWire::rxBufferIndex>
   1001e:	89 1b       	sub	r24, r25
   10020:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   10022:	18 16       	cp	r1, r24
   10024:	19 06       	cpc	r1, r25
   10026:	1c f4       	brge	.+6      	; 0x1002e <__EEPROM_REGION_LENGTH__+0x2e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   10028:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
   1002c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   1002e:	c0 fd       	sbrc	r28, 0
   10030:	e8 cf       	rjmp	.-48     	; 0x10002 <__EEPROM_REGION_LENGTH__+0x2>
_Z11owMatchNexthPh.constprop.80():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   10032:	2c 2f       	mov	r18, r28
   10034:	30 e0       	ldi	r19, 0x00	; 0
   10036:	c9 01       	movw	r24, r18
   10038:	45 e0       	ldi	r20, 0x05	; 5
   1003a:	95 95       	asr	r25
   1003c:	87 95       	ror	r24
   1003e:	4a 95       	dec	r20
   10040:	e1 f7       	brne	.-8      	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
   10042:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   10044:	22 0f       	add	r18, r18
   10046:	23 2f       	mov	r18, r19
   10048:	22 1f       	adc	r18, r18
   1004a:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   1004c:	83 30       	cpi	r24, 0x03	; 3
   1004e:	99 f0       	breq	.+38     	; 0x10076 <__EEPROM_REGION_LENGTH__+0x76>
   10050:	ee 2d       	mov	r30, r14
   10052:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   10054:	81 11       	cpse	r24, r1
   10056:	1b c0       	rjmp	.+54     	; 0x1008e <__EEPROM_REGION_LENGTH__+0x8e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   10058:	22 23       	and	r18, r18
   1005a:	11 f1       	breq	.+68     	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   1005c:	e5 51       	subi	r30, 0x15	; 21
   1005e:	f5 4f       	sbci	r31, 0xF5	; 245
   10060:	80 81       	ld	r24, Z
   10062:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   10064:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   10066:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   10068:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1006a:	11 f4       	brne	.+4      	; 0x10070 <__EEPROM_REGION_LENGTH__+0x70>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1006c:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   1006e:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   10070:	88 e0       	ldi	r24, 0x08	; 8
   10072:	e8 12       	cpse	r14, r24
   10074:	9e cf       	rjmp	.-196    	; 0xffb2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   10076:	01 34       	cpi	r16, 0x41	; 65
   10078:	08 f4       	brcc	.+2      	; 0x1007c <__EEPROM_REGION_LENGTH__+0x7c>
   1007a:	81 cf       	rjmp	.-254    	; 0xff7e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1007c:	d0 93 ea 0a 	sts	0x0AEA, r29	; 0x800aea <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   10080:	81 e0       	ldi	r24, 0x01	; 1
   10082:	d1 11       	cpse	r29, r1
   10084:	80 e0       	ldi	r24, 0x00	; 0
   10086:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1008a:	d0 e0       	ldi	r29, 0x00	; 0
   1008c:	79 cf       	rjmp	.-270    	; 0xff80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   1008e:	21 11       	cpse	r18, r1
   10090:	e5 cf       	rjmp	.-54     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   10092:	e5 51       	subi	r30, 0x15	; 21
   10094:	f5 4f       	sbci	r31, 0xF5	; 245
   10096:	80 81       	ld	r24, Z
   10098:	91 2f       	mov	r25, r17
   1009a:	90 95       	com	r25
   1009c:	89 23       	and	r24, r25
   1009e:	e2 cf       	rjmp	.-60     	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   100a0:	d0 2f       	mov	r29, r16
   100a2:	f7 cf       	rjmp	.-18     	; 0x10092 <__EEPROM_REGION_LENGTH__+0x92>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   100a4:	d3 e0       	ldi	r29, 0x03	; 3
   100a6:	6c cf       	rjmp	.-296    	; 0xff80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   100a8:	d4 e0       	ldi	r29, 0x04	; 4
   100aa:	6a cf       	rjmp	.-300    	; 0xff80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.80]+0x18>

000100ac <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   100ac:	1f 93       	push	r17
   100ae:	cf 93       	push	r28
   100b0:	df 93       	push	r29
   100b2:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   100b4:	88 e6       	ldi	r24, 0x68	; 104
   100b6:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   100ba:	60 e0       	ldi	r22, 0x00	; 0
   100bc:	88 e0       	ldi	r24, 0x08	; 8
   100be:	9e e0       	ldi	r25, 0x0E	; 14
   100c0:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   100c4:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   100c6:	1a e0       	ldi	r17, 0x0A	; 10
   100c8:	82 2f       	mov	r24, r18
   100ca:	61 2f       	mov	r22, r17
   100cc:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   100d0:	68 2f       	mov	r22, r24
   100d2:	66 0f       	add	r22, r22
   100d4:	68 0f       	add	r22, r24
   100d6:	66 0f       	add	r22, r22
   100d8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   100da:	88 e0       	ldi	r24, 0x08	; 8
   100dc:	9e e0       	ldi	r25, 0x0E	; 14
   100de:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   100e2:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   100e4:	82 2f       	mov	r24, r18
   100e6:	61 2f       	mov	r22, r17
   100e8:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   100ec:	68 2f       	mov	r22, r24
   100ee:	66 0f       	add	r22, r22
   100f0:	68 0f       	add	r22, r24
   100f2:	66 0f       	add	r22, r22
   100f4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   100f6:	88 e0       	ldi	r24, 0x08	; 8
   100f8:	9e e0       	ldi	r25, 0x0E	; 14
   100fa:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   100fe:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   10100:	82 2f       	mov	r24, r18
   10102:	61 2f       	mov	r22, r17
   10104:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   10108:	68 2f       	mov	r22, r24
   1010a:	66 0f       	add	r22, r22
   1010c:	68 0f       	add	r22, r24
   1010e:	66 0f       	add	r22, r22
   10110:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   10112:	88 e0       	ldi	r24, 0x08	; 8
   10114:	9e e0       	ldi	r25, 0x0E	; 14
   10116:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   1011a:	60 e0       	ldi	r22, 0x00	; 0
   1011c:	88 e0       	ldi	r24, 0x08	; 8
   1011e:	9e e0       	ldi	r25, 0x0E	; 14
   10120:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   10124:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   10126:	82 2f       	mov	r24, r18
   10128:	61 2f       	mov	r22, r17
   1012a:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   1012e:	68 2f       	mov	r22, r24
   10130:	66 0f       	add	r22, r22
   10132:	68 0f       	add	r22, r24
   10134:	66 0f       	add	r22, r22
   10136:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   10138:	88 e0       	ldi	r24, 0x08	; 8
   1013a:	9e e0       	ldi	r25, 0x0E	; 14
   1013c:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   10140:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   10142:	82 2f       	mov	r24, r18
   10144:	61 2f       	mov	r22, r17
   10146:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   1014a:	68 2f       	mov	r22, r24
   1014c:	66 0f       	add	r22, r22
   1014e:	68 0f       	add	r22, r24
   10150:	66 0f       	add	r22, r22
   10152:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   10154:	88 e0       	ldi	r24, 0x08	; 8
   10156:	9e e0       	ldi	r25, 0x0E	; 14
   10158:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
   1015c:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1015e:	82 2f       	mov	r24, r18
   10160:	61 2f       	mov	r22, r17
   10162:	0e 94 cd a3 	call	0x1479a	; 0x1479a <__udivmodqi4>
   10166:	68 2f       	mov	r22, r24
   10168:	66 0f       	add	r22, r22
   1016a:	68 0f       	add	r22, r24
   1016c:	66 0f       	add	r22, r22
   1016e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   10170:	88 e0       	ldi	r24, 0x08	; 8
   10172:	9e e0       	ldi	r25, 0x0E	; 14
   10174:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   10178:	88 e0       	ldi	r24, 0x08	; 8
   1017a:	9e e0       	ldi	r25, 0x0E	; 14
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   1017c:	df 91       	pop	r29
   1017e:	cf 91       	pop	r28
   10180:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   10182:	0c 94 40 7e 	jmp	0xfc80	; 0xfc80 <TwoWire::endTransmission()>

00010186 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   10186:	cf 93       	push	r28
   10188:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   1018a:	fc 01       	movw	r30, r24
   1018c:	a0 81       	ld	r26, Z
   1018e:	b1 81       	ldd	r27, Z+1	; 0x01
   10190:	10 97       	sbiw	r26, 0x00	; 0
   10192:	21 f4       	brne	.+8      	; 0x1019c <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   10194:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   10196:	df 91       	pop	r29
   10198:	cf 91       	pop	r28
   1019a:	08 95       	ret
   1019c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   1019e:	ed 91       	ld	r30, X+
   101a0:	fc 91       	ld	r31, X
   101a2:	11 97       	sbiw	r26, 0x01	; 1
   101a4:	06 88       	ldd	r0, Z+22	; 0x16
   101a6:	f7 89       	ldd	r31, Z+23	; 0x17
   101a8:	e0 2d       	mov	r30, r0
   101aa:	cd 01       	movw	r24, r26
   101ac:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   101ae:	81 11       	cpse	r24, r1
   101b0:	1e c0       	rjmp	.+60     	; 0x101ee <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   101b2:	fe 01       	movw	r30, r28
   101b4:	e5 5e       	subi	r30, 0xE5	; 229
   101b6:	fd 4f       	sbci	r31, 0xFD	; 253
   101b8:	80 81       	ld	r24, Z
   101ba:	91 81       	ldd	r25, Z+1	; 0x01
   101bc:	89 2b       	or	r24, r25
   101be:	51 f7       	brne	.-44     	; 0x10194 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   101c0:	8d ef       	ldi	r24, 0xFD	; 253
   101c2:	9f ef       	ldi	r25, 0xFF	; 255
   101c4:	91 83       	std	Z+1, r25	; 0x01
   101c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   101c8:	88 81       	ld	r24, Y
   101ca:	99 81       	ldd	r25, Y+1	; 0x01
   101cc:	dc 01       	movw	r26, r24
   101ce:	ed 91       	ld	r30, X+
   101d0:	fc 91       	ld	r31, X
   101d2:	06 80       	ldd	r0, Z+6	; 0x06
   101d4:	f7 81       	ldd	r31, Z+7	; 0x07
   101d6:	e0 2d       	mov	r30, r0
   101d8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   101da:	88 81       	ld	r24, Y
   101dc:	99 81       	ldd	r25, Y+1	; 0x01
   101de:	dc 01       	movw	r26, r24
   101e0:	ed 91       	ld	r30, X+
   101e2:	fc 91       	ld	r31, X
   101e4:	04 88       	ldd	r0, Z+20	; 0x14
   101e6:	f5 89       	ldd	r31, Z+21	; 0x15
   101e8:	e0 2d       	mov	r30, r0
   101ea:	19 95       	eicall
   101ec:	d3 cf       	rjmp	.-90     	; 0x10194 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   101ee:	81 e0       	ldi	r24, 0x01	; 1
   101f0:	d2 cf       	rjmp	.-92     	; 0x10196 <PubSubClient::connected()+0x10>

000101f2 <PubSubClient::loop() [clone .constprop.89]>:
_ZN12PubSubClient4loopEv.constprop.89():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   101f2:	3f 92       	push	r3
   101f4:	4f 92       	push	r4
   101f6:	5f 92       	push	r5
   101f8:	6f 92       	push	r6
   101fa:	7f 92       	push	r7
   101fc:	8f 92       	push	r8
   101fe:	9f 92       	push	r9
   10200:	af 92       	push	r10
   10202:	bf 92       	push	r11
   10204:	cf 92       	push	r12
   10206:	df 92       	push	r13
   10208:	ef 92       	push	r14
   1020a:	ff 92       	push	r15
   1020c:	0f 93       	push	r16
   1020e:	1f 93       	push	r17
   10210:	cf 93       	push	r28
   10212:	df 93       	push	r29
   10214:	1f 92       	push	r1
   10216:	cd b7       	in	r28, 0x3d	; 61
   10218:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1021a:	4d b6       	in	r4, 0x3d	; 61
   1021c:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   1021e:	81 e2       	ldi	r24, 0x21	; 33
   10220:	9e e0       	ldi	r25, 0x0E	; 14
   10222:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   10226:	98 2e       	mov	r9, r24
   10228:	88 23       	and	r24, r24
   1022a:	09 f4       	brne	.+2      	; 0x1022e <PubSubClient::loop() [clone .constprop.89]+0x3c>
   1022c:	45 c0       	rjmp	.+138    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   1022e:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   10232:	6b 01       	movw	r12, r22
   10234:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   10236:	80 91 29 10 	lds	r24, 0x1029	; 0x801029 <mqtt_client+0x208>
   1023a:	90 91 2a 10 	lds	r25, 0x102A	; 0x80102a <mqtt_client+0x209>
   1023e:	a0 91 2b 10 	lds	r26, 0x102B	; 0x80102b <mqtt_client+0x20a>
   10242:	b0 91 2c 10 	lds	r27, 0x102C	; 0x80102c <mqtt_client+0x20b>
   10246:	a7 01       	movw	r20, r14
   10248:	96 01       	movw	r18, r12
   1024a:	28 1b       	sub	r18, r24
   1024c:	39 0b       	sbc	r19, r25
   1024e:	4a 0b       	sbc	r20, r26
   10250:	5b 0b       	sbc	r21, r27
   10252:	da 01       	movw	r26, r20
   10254:	c9 01       	movw	r24, r18
   10256:	89 39       	cpi	r24, 0x99	; 153
   10258:	9a 43       	sbci	r25, 0x3A	; 58
   1025a:	a1 05       	cpc	r26, r1
   1025c:	b1 05       	cpc	r27, r1
   1025e:	b0 f4       	brcc	.+44     	; 0x1028c <PubSubClient::loop() [clone .constprop.89]+0x9a>
   10260:	80 91 25 10 	lds	r24, 0x1025	; 0x801025 <mqtt_client+0x204>
   10264:	90 91 26 10 	lds	r25, 0x1026	; 0x801026 <mqtt_client+0x205>
   10268:	a0 91 27 10 	lds	r26, 0x1027	; 0x801027 <mqtt_client+0x206>
   1026c:	b0 91 28 10 	lds	r27, 0x1028	; 0x801028 <mqtt_client+0x207>
   10270:	a7 01       	movw	r20, r14
   10272:	96 01       	movw	r18, r12
   10274:	28 1b       	sub	r18, r24
   10276:	39 0b       	sbc	r19, r25
   10278:	4a 0b       	sbc	r20, r26
   1027a:	5b 0b       	sbc	r21, r27
   1027c:	da 01       	movw	r26, r20
   1027e:	c9 01       	movw	r24, r18
   10280:	89 39       	cpi	r24, 0x99	; 153
   10282:	9a 43       	sbci	r25, 0x3A	; 58
   10284:	a1 05       	cpc	r26, r1
   10286:	b1 05       	cpc	r27, r1
   10288:	08 f4       	brcc	.+2      	; 0x1028c <PubSubClient::loop() [clone .constprop.89]+0x9a>
   1028a:	52 c0       	rjmp	.+164    	; 0x10330 <PubSubClient::loop() [clone .constprop.89]+0x13e>
   1028c:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
   10290:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   10294:	20 91 2d 10 	lds	r18, 0x102D	; 0x80102d <mqtt_client+0x20c>
   10298:	22 23       	and	r18, r18
   1029a:	39 f1       	breq	.+78     	; 0x102ea <PubSubClient::loop() [clone .constprop.89]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1029c:	2c ef       	ldi	r18, 0xFC	; 252
   1029e:	3f ef       	ldi	r19, 0xFF	; 255
   102a0:	30 93 3d 10 	sts	0x103D, r19	; 0x80103d <mqtt_client+0x21c>
   102a4:	20 93 3c 10 	sts	0x103C, r18	; 0x80103c <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   102a8:	dc 01       	movw	r26, r24
   102aa:	ed 91       	ld	r30, X+
   102ac:	fc 91       	ld	r31, X
   102ae:	04 88       	ldd	r0, Z+20	; 0x14
   102b0:	f5 89       	ldd	r31, Z+21	; 0x15
   102b2:	e0 2d       	mov	r30, r0
   102b4:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   102b6:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   102b8:	89 2d       	mov	r24, r9
   102ba:	0f b6       	in	r0, 0x3f	; 63
   102bc:	f8 94       	cli
   102be:	5e be       	out	0x3e, r5	; 62
   102c0:	0f be       	out	0x3f, r0	; 63
   102c2:	4d be       	out	0x3d, r4	; 61
   102c4:	0f 90       	pop	r0
   102c6:	df 91       	pop	r29
   102c8:	cf 91       	pop	r28
   102ca:	1f 91       	pop	r17
   102cc:	0f 91       	pop	r16
   102ce:	ff 90       	pop	r15
   102d0:	ef 90       	pop	r14
   102d2:	df 90       	pop	r13
   102d4:	cf 90       	pop	r12
   102d6:	bf 90       	pop	r11
   102d8:	af 90       	pop	r10
   102da:	9f 90       	pop	r9
   102dc:	8f 90       	pop	r8
   102de:	7f 90       	pop	r7
   102e0:	6f 90       	pop	r6
   102e2:	5f 90       	pop	r5
   102e4:	4f 90       	pop	r4
   102e6:	3f 90       	pop	r3
   102e8:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   102ea:	20 ec       	ldi	r18, 0xC0	; 192
   102ec:	20 93 23 0e 	sts	0x0E23, r18	; 0x800e23 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   102f0:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   102f4:	dc 01       	movw	r26, r24
   102f6:	ed 91       	ld	r30, X+
   102f8:	fc 91       	ld	r31, X
   102fa:	02 80       	ldd	r0, Z+2	; 0x02
   102fc:	f3 81       	ldd	r31, Z+3	; 0x03
   102fe:	e0 2d       	mov	r30, r0
   10300:	42 e0       	ldi	r20, 0x02	; 2
   10302:	50 e0       	ldi	r21, 0x00	; 0
   10304:	63 e2       	ldi	r22, 0x23	; 35
   10306:	7e e0       	ldi	r23, 0x0E	; 14
   10308:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1030a:	c0 92 25 10 	sts	0x1025, r12	; 0x801025 <mqtt_client+0x204>
   1030e:	d0 92 26 10 	sts	0x1026, r13	; 0x801026 <mqtt_client+0x205>
   10312:	e0 92 27 10 	sts	0x1027, r14	; 0x801027 <mqtt_client+0x206>
   10316:	f0 92 28 10 	sts	0x1028, r15	; 0x801028 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1031a:	c0 92 29 10 	sts	0x1029, r12	; 0x801029 <mqtt_client+0x208>
   1031e:	d0 92 2a 10 	sts	0x102A, r13	; 0x80102a <mqtt_client+0x209>
   10322:	e0 92 2b 10 	sts	0x102B, r14	; 0x80102b <mqtt_client+0x20a>
   10326:	f0 92 2c 10 	sts	0x102C, r15	; 0x80102c <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1032a:	81 e0       	ldi	r24, 0x01	; 1
   1032c:	80 93 2d 10 	sts	0x102D, r24	; 0x80102d <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   10330:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
   10334:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
   10338:	dc 01       	movw	r26, r24
   1033a:	ed 91       	ld	r30, X+
   1033c:	fc 91       	ld	r31, X
   1033e:	00 84       	ldd	r0, Z+8	; 0x08
   10340:	f1 85       	ldd	r31, Z+9	; 0x09
   10342:	e0 2d       	mov	r30, r0
   10344:	19 95       	eicall
   10346:	89 2b       	or	r24, r25
   10348:	09 f4       	brne	.+2      	; 0x1034c <PubSubClient::loop() [clone .constprop.89]+0x15a>
   1034a:	b6 cf       	rjmp	.-148    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   1034c:	ce 01       	movw	r24, r28
   1034e:	01 96       	adiw	r24, 0x01	; 1
   10350:	0e 94 11 7a 	call	0xf422	; 0xf422 <PubSubClient::readPacket(unsigned char*) [clone .constprop.146]>
   10354:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   10356:	89 2b       	or	r24, r25
   10358:	09 f4       	brne	.+2      	; 0x1035c <PubSubClient::loop() [clone .constprop.89]+0x16a>
   1035a:	ae cf       	rjmp	.-164    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   1035c:	c0 92 29 10 	sts	0x1029, r12	; 0x801029 <mqtt_client+0x208>
   10360:	d0 92 2a 10 	sts	0x102A, r13	; 0x80102a <mqtt_client+0x209>
   10364:	e0 92 2b 10 	sts	0x102B, r14	; 0x80102b <mqtt_client+0x20a>
   10368:	f0 92 2c 10 	sts	0x102C, r15	; 0x80102c <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   1036c:	80 90 23 0e 	lds	r8, 0x0E23	; 0x800e23 <mqtt_client+0x2>
   10370:	88 2d       	mov	r24, r8
   10372:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   10374:	80 33       	cpi	r24, 0x30	; 48
   10376:	09 f0       	breq	.+2      	; 0x1037a <PubSubClient::loop() [clone .constprop.89]+0x188>
   10378:	83 c0       	rjmp	.+262    	; 0x10480 <PubSubClient::loop() [clone .constprop.89]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   1037a:	a0 90 2e 10 	lds	r10, 0x102E	; 0x80102e <mqtt_client+0x20d>
   1037e:	b0 90 2f 10 	lds	r11, 0x102F	; 0x80102f <mqtt_client+0x20e>
   10382:	a1 14       	cp	r10, r1
   10384:	b1 04       	cpc	r11, r1
   10386:	09 f4       	brne	.+2      	; 0x1038a <PubSubClient::loop() [clone .constprop.89]+0x198>
   10388:	97 cf       	rjmp	.-210    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   1038a:	6d b6       	in	r6, 0x3d	; 61
   1038c:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   1038e:	69 81       	ldd	r22, Y+1	; 0x01
   10390:	70 e0       	ldi	r23, 0x00	; 0
   10392:	fb 01       	movw	r30, r22
   10394:	ef 5d       	subi	r30, 0xDF	; 223
   10396:	f1 4f       	sbci	r31, 0xF1	; 241
   10398:	23 81       	ldd	r18, Z+3	; 0x03
   1039a:	30 e0       	ldi	r19, 0x00	; 0
   1039c:	32 2f       	mov	r19, r18
   1039e:	22 27       	eor	r18, r18
   103a0:	84 81       	ldd	r24, Z+4	; 0x04
   103a2:	28 0f       	add	r18, r24
   103a4:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   103a6:	c9 01       	movw	r24, r18
   103a8:	01 96       	adiw	r24, 0x01	; 1
   103aa:	ed b7       	in	r30, 0x3d	; 61
   103ac:	fe b7       	in	r31, 0x3e	; 62
   103ae:	e8 1b       	sub	r30, r24
   103b0:	f9 0b       	sbc	r31, r25
   103b2:	0f b6       	in	r0, 0x3f	; 63
   103b4:	f8 94       	cli
   103b6:	fe bf       	out	0x3e, r31	; 62
   103b8:	0f be       	out	0x3f, r0	; 63
   103ba:	ed bf       	out	0x3d, r30	; 61
   103bc:	8d b7       	in	r24, 0x3d	; 61
   103be:	9e b7       	in	r25, 0x3e	; 62
   103c0:	01 96       	adiw	r24, 0x01	; 1
   103c2:	db 01       	movw	r26, r22
   103c4:	aa 5d       	subi	r26, 0xDA	; 218
   103c6:	b1 4f       	sbci	r27, 0xF1	; 241
   103c8:	fc 01       	movw	r30, r24
   103ca:	8c 01       	movw	r16, r24
   103cc:	02 0f       	add	r16, r18
   103ce:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   103d0:	e0 17       	cp	r30, r16
   103d2:	f1 07       	cpc	r31, r17
   103d4:	19 f0       	breq	.+6      	; 0x103dc <PubSubClient::loop() [clone .constprop.89]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   103d6:	3d 90       	ld	r3, X+
   103d8:	31 92       	st	Z+, r3
   103da:	fa cf       	rjmp	.-12     	; 0x103d0 <PubSubClient::loop() [clone .constprop.89]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   103dc:	10 82       	st	Z, r1
   103de:	da 01       	movw	r26, r20
   103e0:	a6 1b       	sub	r26, r22
   103e2:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   103e4:	f8 2d       	mov	r31, r8
   103e6:	f6 70       	andi	r31, 0x06	; 6
   103e8:	8f 2e       	mov	r8, r31
   103ea:	42 e0       	ldi	r20, 0x02	; 2
   103ec:	f4 13       	cpse	r31, r20
   103ee:	3c c0       	rjmp	.+120    	; 0x10468 <PubSubClient::loop() [clone .constprop.89]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   103f0:	62 0f       	add	r22, r18
   103f2:	73 1f       	adc	r23, r19
   103f4:	fb 01       	movw	r30, r22
   103f6:	ef 5d       	subi	r30, 0xDF	; 223
   103f8:	f1 4f       	sbci	r31, 0xF1	; 241
   103fa:	45 81       	ldd	r20, Z+5	; 0x05
   103fc:	50 e0       	ldi	r21, 0x00	; 0
   103fe:	54 2f       	mov	r21, r20
   10400:	44 27       	eor	r20, r20
   10402:	06 81       	ldd	r16, Z+6	; 0x06
   10404:	04 0f       	add	r16, r20
   10406:	15 2f       	mov	r17, r21
   10408:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1040a:	ad 01       	movw	r20, r26
   1040c:	42 1b       	sub	r20, r18
   1040e:	53 0b       	sbc	r21, r19
   10410:	45 50       	subi	r20, 0x05	; 5
   10412:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   10414:	68 5d       	subi	r22, 0xD8	; 216
   10416:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   10418:	f5 01       	movw	r30, r10
   1041a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   1041c:	80 e4       	ldi	r24, 0x40	; 64
   1041e:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   10422:	80 92 24 0e 	sts	0x0E24, r8	; 0x800e24 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   10426:	10 93 25 0e 	sts	0x0E25, r17	; 0x800e25 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1042a:	00 93 26 0e 	sts	0x0E26, r16	; 0x800e26 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   1042e:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
   10432:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
   10436:	dc 01       	movw	r26, r24
   10438:	ed 91       	ld	r30, X+
   1043a:	fc 91       	ld	r31, X
   1043c:	02 80       	ldd	r0, Z+2	; 0x02
   1043e:	f3 81       	ldd	r31, Z+3	; 0x03
   10440:	e0 2d       	mov	r30, r0
   10442:	44 e0       	ldi	r20, 0x04	; 4
   10444:	50 e0       	ldi	r21, 0x00	; 0
   10446:	63 e2       	ldi	r22, 0x23	; 35
   10448:	7e e0       	ldi	r23, 0x0E	; 14
   1044a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   1044c:	c0 92 25 10 	sts	0x1025, r12	; 0x801025 <mqtt_client+0x204>
   10450:	d0 92 26 10 	sts	0x1026, r13	; 0x801026 <mqtt_client+0x205>
   10454:	e0 92 27 10 	sts	0x1027, r14	; 0x801027 <mqtt_client+0x206>
   10458:	f0 92 28 10 	sts	0x1028, r15	; 0x801028 <mqtt_client+0x207>
   1045c:	0f b6       	in	r0, 0x3f	; 63
   1045e:	f8 94       	cli
   10460:	7e be       	out	0x3e, r7	; 62
   10462:	0f be       	out	0x3f, r0	; 63
   10464:	6d be       	out	0x3d, r6	; 61
   10466:	28 cf       	rjmp	.-432    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   10468:	ad 01       	movw	r20, r26
   1046a:	42 1b       	sub	r20, r18
   1046c:	53 0b       	sbc	r21, r19
   1046e:	43 50       	subi	r20, 0x03	; 3
   10470:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   10472:	62 0f       	add	r22, r18
   10474:	73 1f       	adc	r23, r19
   10476:	6a 5d       	subi	r22, 0xDA	; 218
   10478:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   1047a:	f5 01       	movw	r30, r10
   1047c:	19 95       	eicall
   1047e:	ee cf       	rjmp	.-36     	; 0x1045c <PubSubClient::loop() [clone .constprop.89]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   10480:	80 3c       	cpi	r24, 0xC0	; 192
   10482:	a9 f4       	brne	.+42     	; 0x104ae <PubSubClient::loop() [clone .constprop.89]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   10484:	80 ed       	ldi	r24, 0xD0	; 208
   10486:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   1048a:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   1048e:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <mqtt_client>
   10492:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <mqtt_client+0x1>
   10496:	dc 01       	movw	r26, r24
   10498:	ed 91       	ld	r30, X+
   1049a:	fc 91       	ld	r31, X
   1049c:	02 80       	ldd	r0, Z+2	; 0x02
   1049e:	f3 81       	ldd	r31, Z+3	; 0x03
   104a0:	e0 2d       	mov	r30, r0
   104a2:	42 e0       	ldi	r20, 0x02	; 2
   104a4:	50 e0       	ldi	r21, 0x00	; 0
   104a6:	63 e2       	ldi	r22, 0x23	; 35
   104a8:	7e e0       	ldi	r23, 0x0E	; 14
   104aa:	19 95       	eicall
   104ac:	05 cf       	rjmp	.-502    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   104ae:	80 3d       	cpi	r24, 0xD0	; 208
   104b0:	09 f0       	breq	.+2      	; 0x104b4 <PubSubClient::loop() [clone .constprop.89]+0x2c2>
   104b2:	02 cf       	rjmp	.-508    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   104b4:	10 92 2d 10 	sts	0x102D, r1	; 0x80102d <mqtt_client+0x20c>
   104b8:	ff ce       	rjmp	.-514    	; 0x102b8 <PubSubClient::loop() [clone .constprop.89]+0xc6>

000104ba <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   104ba:	bf 92       	push	r11
   104bc:	cf 92       	push	r12
   104be:	df 92       	push	r13
   104c0:	ef 92       	push	r14
   104c2:	ff 92       	push	r15
   104c4:	0f 93       	push	r16
   104c6:	1f 93       	push	r17
   104c8:	cf 93       	push	r28
   104ca:	df 93       	push	r29
   104cc:	00 d0       	rcall	.+0      	; 0x104ce <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   104ce:	1f 92       	push	r1
   104d0:	cd b7       	in	r28, 0x3d	; 61
   104d2:	de b7       	in	r29, 0x3e	; 62
   104d4:	7c 01       	movw	r14, r24
   104d6:	b6 2e       	mov	r11, r22
   104d8:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   104da:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   104dc:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   104de:	be 01       	movw	r22, r28
   104e0:	6f 5f       	subi	r22, 0xFF	; 255
   104e2:	7f 4f       	sbci	r23, 0xFF	; 255
   104e4:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   104e6:	28 2f       	mov	r18, r24
   104e8:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   104ea:	88 0f       	add	r24, r24
   104ec:	89 2f       	mov	r24, r25
   104ee:	88 1f       	adc	r24, r24
   104f0:	99 0b       	sbc	r25, r25
   104f2:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   104f4:	00 97       	sbiw	r24, 0x00	; 0
   104f6:	09 f0       	breq	.+2      	; 0x104fa <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   104f8:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   104fa:	f6 01       	movw	r30, r12
   104fc:	e3 0f       	add	r30, r19
   104fe:	f1 1d       	adc	r31, r1
   10500:	20 83       	st	Z, r18
   10502:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   10504:	00 97       	sbiw	r24, 0x00	; 0
   10506:	79 f7       	brne	.-34     	; 0x104e6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   10508:	e3 2f       	mov	r30, r19
   1050a:	f0 e0       	ldi	r31, 0x00	; 0
   1050c:	ba 01       	movw	r22, r20
   1050e:	6e 1b       	sub	r22, r30
   10510:	7f 0b       	sbc	r23, r31
   10512:	6c 5f       	subi	r22, 0xFC	; 252
   10514:	7f 4f       	sbci	r23, 0xFF	; 255
   10516:	db 01       	movw	r26, r22
   10518:	bc 92       	st	X, r11
   1051a:	4e 1b       	sub	r20, r30
   1051c:	5f 0b       	sbc	r21, r31
   1051e:	4b 5f       	subi	r20, 0xFB	; 251
   10520:	5f 4f       	sbci	r21, 0xFF	; 255
   10522:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   10524:	9c 01       	movw	r18, r24
   10526:	2c 19       	sub	r18, r12
   10528:	3d 09       	sbc	r19, r13
   1052a:	2e 17       	cp	r18, r30
   1052c:	3f 07       	cpc	r19, r31
   1052e:	3c f4       	brge	.+14     	; 0x1053e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   10530:	dc 01       	movw	r26, r24
   10532:	2d 91       	ld	r18, X+
   10534:	cd 01       	movw	r24, r26
   10536:	da 01       	movw	r26, r20
   10538:	2d 93       	st	X+, r18
   1053a:	ad 01       	movw	r20, r26
   1053c:	f3 cf       	rjmp	.-26     	; 0x10524 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   1053e:	d7 01       	movw	r26, r14
   10540:	8d 91       	ld	r24, X+
   10542:	9c 91       	ld	r25, X
   10544:	0f 5f       	subi	r16, 0xFF	; 255
   10546:	1f 4f       	sbci	r17, 0xFF	; 255
   10548:	0e 0f       	add	r16, r30
   1054a:	1f 1f       	adc	r17, r31
   1054c:	dc 01       	movw	r26, r24
   1054e:	ed 91       	ld	r30, X+
   10550:	fc 91       	ld	r31, X
   10552:	02 80       	ldd	r0, Z+2	; 0x02
   10554:	f3 81       	ldd	r31, Z+3	; 0x03
   10556:	e0 2d       	mov	r30, r0
   10558:	a8 01       	movw	r20, r16
   1055a:	19 95       	eicall
   1055c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   1055e:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   10562:	f7 01       	movw	r30, r14
   10564:	ec 5f       	subi	r30, 0xFC	; 252
   10566:	fd 4f       	sbci	r31, 0xFD	; 253
   10568:	60 83       	st	Z, r22
   1056a:	71 83       	std	Z+1, r23	; 0x01
   1056c:	82 83       	std	Z+2, r24	; 0x02
   1056e:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   10570:	81 e0       	ldi	r24, 0x01	; 1
   10572:	0c 15       	cp	r16, r12
   10574:	1d 05       	cpc	r17, r13
   10576:	09 f0       	breq	.+2      	; 0x1057a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   10578:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   1057a:	0f 90       	pop	r0
   1057c:	0f 90       	pop	r0
   1057e:	0f 90       	pop	r0
   10580:	0f 90       	pop	r0
   10582:	df 91       	pop	r29
   10584:	cf 91       	pop	r28
   10586:	1f 91       	pop	r17
   10588:	0f 91       	pop	r16
   1058a:	ff 90       	pop	r15
   1058c:	ef 90       	pop	r14
   1058e:	df 90       	pop	r13
   10590:	cf 90       	pop	r12
   10592:	bf 90       	pop	r11
   10594:	08 95       	ret

00010596 <PubSubClient::subscribe(char const*) [clone .constprop.153]>:
_ZN12PubSubClient9subscribeEPKc.constprop.153():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   10596:	cf 93       	push	r28
   10598:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   1059a:	fc 01       	movw	r30, r24
   1059c:	01 90       	ld	r0, Z+
   1059e:	00 20       	and	r0, r0
   105a0:	e9 f7       	brne	.-6      	; 0x1059c <PubSubClient::subscribe(char const*) [clone .constprop.153]+0x6>
   105a2:	9f 01       	movw	r18, r30
   105a4:	28 1b       	sub	r18, r24
   105a6:	39 0b       	sbc	r19, r25
   105a8:	28 5f       	subi	r18, 0xF8	; 248
   105aa:	3f 4f       	sbci	r19, 0xFF	; 255
   105ac:	21 30       	cpi	r18, 0x01	; 1
   105ae:	32 40       	sbci	r19, 0x02	; 2
   105b0:	98 f5       	brcc	.+102    	; 0x10618 <PubSubClient::subscribe(char const*) [clone .constprop.153]+0x82>
   105b2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   105b4:	81 e2       	ldi	r24, 0x21	; 33
   105b6:	9e e0       	ldi	r25, 0x0E	; 14
   105b8:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   105bc:	88 23       	and	r24, r24
   105be:	61 f1       	breq	.+88     	; 0x10618 <PubSubClient::subscribe(char const*) [clone .constprop.153]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   105c0:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <mqtt_client+0x202>
   105c4:	90 91 24 10 	lds	r25, 0x1024	; 0x801024 <mqtt_client+0x203>
   105c8:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   105ca:	19 f1       	breq	.+70     	; 0x10612 <PubSubClient::subscribe(char const*) [clone .constprop.153]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   105cc:	90 93 24 10 	sts	0x1024, r25	; 0x801024 <mqtt_client+0x203>
   105d0:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   105d4:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <mqtt_client+0x202>
   105d8:	90 91 24 10 	lds	r25, 0x1024	; 0x801024 <mqtt_client+0x203>
   105dc:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   105e0:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   105e4:	47 e0       	ldi	r20, 0x07	; 7
   105e6:	50 e0       	ldi	r21, 0x00	; 0
   105e8:	63 e2       	ldi	r22, 0x23	; 35
   105ea:	7e e0       	ldi	r23, 0x0E	; 14
   105ec:	ce 01       	movw	r24, r28
   105ee:	0e 94 e0 72 	call	0xe5c0	; 0xe5c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   105f2:	fc 01       	movw	r30, r24
   105f4:	ef 5d       	subi	r30, 0xDF	; 223
   105f6:	f1 4f       	sbci	r31, 0xF1	; 241
   105f8:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   105fa:	9c 01       	movw	r18, r24
   105fc:	24 50       	subi	r18, 0x04	; 4
   105fe:	31 09       	sbc	r19, r1
   10600:	43 e2       	ldi	r20, 0x23	; 35
   10602:	5e e0       	ldi	r21, 0x0E	; 14
   10604:	62 e8       	ldi	r22, 0x82	; 130
   10606:	81 e2       	ldi	r24, 0x21	; 33
   10608:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.153():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1060a:	df 91       	pop	r29
   1060c:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   1060e:	0c 94 5d 82 	jmp	0x104ba	; 0x104ba <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   10612:	81 e0       	ldi	r24, 0x01	; 1
   10614:	90 e0       	ldi	r25, 0x00	; 0
   10616:	da cf       	rjmp	.-76     	; 0x105cc <PubSubClient::subscribe(char const*) [clone .constprop.153]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.153():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   10618:	80 e0       	ldi	r24, 0x00	; 0
   1061a:	df 91       	pop	r29
   1061c:	cf 91       	pop	r28
   1061e:	08 95       	ret

00010620 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   10620:	af 92       	push	r10
   10622:	bf 92       	push	r11
   10624:	cf 92       	push	r12
   10626:	df 92       	push	r13
   10628:	ef 92       	push	r14
   1062a:	ff 92       	push	r15
   1062c:	0f 93       	push	r16
   1062e:	1f 93       	push	r17
   10630:	cf 93       	push	r28
   10632:	df 93       	push	r29
   10634:	7c 01       	movw	r14, r24
   10636:	5b 01       	movw	r10, r22
   10638:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   1063a:	ea 01       	movw	r28, r20
   1063c:	09 90       	ld	r0, Y+
   1063e:	00 20       	and	r0, r0
   10640:	e9 f7       	brne	.-6      	; 0x1063c <PubSubClient::publish(char const*, char const*)+0x1c>
   10642:	21 97       	sbiw	r28, 0x01	; 1
   10644:	c4 1b       	sub	r28, r20
   10646:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   10648:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   1064c:	88 23       	and	r24, r24
   1064e:	c9 f1       	breq	.+114    	; 0x106c2 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   10650:	f5 01       	movw	r30, r10
   10652:	01 90       	ld	r0, Z+
   10654:	00 20       	and	r0, r0
   10656:	e9 f7       	brne	.-6      	; 0x10652 <PubSubClient::publish(char const*, char const*)+0x32>
   10658:	31 97       	sbiw	r30, 0x01	; 1
   1065a:	ea 19       	sub	r30, r10
   1065c:	fb 09       	sbc	r31, r11
   1065e:	ce 01       	movw	r24, r28
   10660:	07 96       	adiw	r24, 0x07	; 7
   10662:	e8 0f       	add	r30, r24
   10664:	f9 1f       	adc	r31, r25
   10666:	e1 30       	cpi	r30, 0x01	; 1
   10668:	f2 40       	sbci	r31, 0x02	; 2
   1066a:	58 f5       	brcc	.+86     	; 0x106c2 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   1066c:	67 01       	movw	r12, r14
   1066e:	82 e0       	ldi	r24, 0x02	; 2
   10670:	c8 0e       	add	r12, r24
   10672:	d1 1c       	adc	r13, r1
   10674:	45 e0       	ldi	r20, 0x05	; 5
   10676:	50 e0       	ldi	r21, 0x00	; 0
   10678:	b6 01       	movw	r22, r12
   1067a:	c5 01       	movw	r24, r10
   1067c:	0e 94 e0 72 	call	0xe5c0	; 0xe5c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.156]>
   10680:	f8 01       	movw	r30, r16
   10682:	dc 01       	movw	r26, r24
   10684:	12 96       	adiw	r26, 0x02	; 2
   10686:	ae 0d       	add	r26, r14
   10688:	bf 1d       	adc	r27, r15
   1068a:	a8 01       	movw	r20, r16
   1068c:	4c 0f       	add	r20, r28
   1068e:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   10690:	e4 17       	cp	r30, r20
   10692:	f5 07       	cpc	r31, r21
   10694:	19 f0       	breq	.+6      	; 0x1069c <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   10696:	21 91       	ld	r18, Z+
   10698:	2d 93       	st	X+, r18
   1069a:	fa cf       	rjmp	.-12     	; 0x10690 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   1069c:	25 97       	sbiw	r28, 0x05	; 5
   1069e:	9e 01       	movw	r18, r28
   106a0:	28 0f       	add	r18, r24
   106a2:	39 1f       	adc	r19, r25
   106a4:	a6 01       	movw	r20, r12
   106a6:	60 e3       	ldi	r22, 0x30	; 48
   106a8:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   106aa:	df 91       	pop	r29
   106ac:	cf 91       	pop	r28
   106ae:	1f 91       	pop	r17
   106b0:	0f 91       	pop	r16
   106b2:	ff 90       	pop	r15
   106b4:	ef 90       	pop	r14
   106b6:	df 90       	pop	r13
   106b8:	cf 90       	pop	r12
   106ba:	bf 90       	pop	r11
   106bc:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   106be:	0c 94 5d 82 	jmp	0x104ba	; 0x104ba <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   106c2:	80 e0       	ldi	r24, 0x00	; 0
   106c4:	df 91       	pop	r29
   106c6:	cf 91       	pop	r28
   106c8:	1f 91       	pop	r17
   106ca:	0f 91       	pop	r16
   106cc:	ff 90       	pop	r15
   106ce:	ef 90       	pop	r14
   106d0:	df 90       	pop	r13
   106d2:	cf 90       	pop	r12
   106d4:	bf 90       	pop	r11
   106d6:	af 90       	pop	r10
   106d8:	08 95       	ret

000106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.139():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   106da:	af 92       	push	r10
   106dc:	bf 92       	push	r11
   106de:	df 92       	push	r13
   106e0:	ef 92       	push	r14
   106e2:	ff 92       	push	r15
   106e4:	0f 93       	push	r16
   106e6:	1f 93       	push	r17
   106e8:	cf 93       	push	r28
   106ea:	df 93       	push	r29
   106ec:	cd b7       	in	r28, 0x3d	; 61
   106ee:	de b7       	in	r29, 0x3e	; 62
   106f0:	c6 55       	subi	r28, 0x56	; 86
   106f2:	d1 09       	sbc	r29, r1
   106f4:	0f b6       	in	r0, 0x3f	; 63
   106f6:	f8 94       	cli
   106f8:	de bf       	out	0x3e, r29	; 62
   106fa:	0f be       	out	0x3f, r0	; 63
   106fc:	cd bf       	out	0x3d, r28	; 61
   106fe:	5c 01       	movw	r10, r24
   10700:	d6 2e       	mov	r13, r22
   10702:	7a 01       	movw	r14, r20
   10704:	89 01       	movw	r16, r18
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   10706:	81 e2       	ldi	r24, 0x21	; 33
   10708:	9e e0       	ldi	r25, 0x0E	; 14
   1070a:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   1070e:	88 23       	and	r24, r24
   10710:	09 f4       	brne	.+2      	; 0x10714 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]+0x3a>
   10712:	52 c0       	rjmp	.+164    	; 0x107b8 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]+0xde>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   10714:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <mqtt_send_message>
   10718:	90 91 79 0b 	lds	r25, 0x0B79	; 0x800b79 <mqtt_send_message+0x1>
   1071c:	01 96       	adiw	r24, 0x01	; 1
   1071e:	90 93 79 0b 	sts	0x0B79, r25	; 0x800b79 <mqtt_send_message+0x1>
   10722:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <mqtt_send_message>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   10726:	ce 01       	movw	r24, r28
   10728:	83 5b       	subi	r24, 0xB3	; 179
   1072a:	9f 4f       	sbci	r25, 0xFF	; 255
   1072c:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <device_get_name(char*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   10730:	60 91 76 0b 	lds	r22, 0x0B76	; 0x800b76 <header_out>
   10734:	70 91 77 0b 	lds	r23, 0x0B77	; 0x800b77 <header_out+0x1>
   10738:	ce 01       	movw	r24, r28
   1073a:	01 96       	adiw	r24, 0x01	; 1
   1073c:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   10740:	be 01       	movw	r22, r28
   10742:	63 5b       	subi	r22, 0xB3	; 179
   10744:	7f 4f       	sbci	r23, 0xFF	; 255
   10746:	ce 01       	movw	r24, r28
   10748:	01 96       	adiw	r24, 0x01	; 1
   1074a:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   1074e:	66 e7       	ldi	r22, 0x76	; 118
   10750:	74 e0       	ldi	r23, 0x04	; 4
   10752:	ce 01       	movw	r24, r28
   10754:	01 96       	adiw	r24, 0x01	; 1
   10756:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   1075a:	b5 01       	movw	r22, r10
   1075c:	ce 01       	movw	r24, r28
   1075e:	01 96       	adiw	r24, 0x01	; 1
   10760:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   10764:	66 e7       	ldi	r22, 0x76	; 118
   10766:	74 e0       	ldi	r23, 0x04	; 4
   10768:	ce 01       	movw	r24, r28
   1076a:	01 96       	adiw	r24, 0x01	; 1
   1076c:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   10770:	4a e0       	ldi	r20, 0x0A	; 10
   10772:	be 01       	movw	r22, r28
   10774:	6f 5b       	subi	r22, 0xBF	; 191
   10776:	7f 4f       	sbci	r23, 0xFF	; 255
   10778:	8d 2d       	mov	r24, r13
   1077a:	90 e0       	ldi	r25, 0x00	; 0
   1077c:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.139():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   10780:	be 01       	movw	r22, r28
   10782:	6f 5b       	subi	r22, 0xBF	; 191
   10784:	7f 4f       	sbci	r23, 0xFF	; 255
   10786:	ce 01       	movw	r24, r28
   10788:	01 96       	adiw	r24, 0x01	; 1
   1078a:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   1078e:	66 e7       	ldi	r22, 0x76	; 118
   10790:	74 e0       	ldi	r23, 0x04	; 4
   10792:	ce 01       	movw	r24, r28
   10794:	01 96       	adiw	r24, 0x01	; 1
   10796:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   1079a:	b7 01       	movw	r22, r14
   1079c:	ce 01       	movw	r24, r28
   1079e:	01 96       	adiw	r24, 0x01	; 1
   107a0:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   107a4:	a8 01       	movw	r20, r16
   107a6:	be 01       	movw	r22, r28
   107a8:	6f 5f       	subi	r22, 0xFF	; 255
   107aa:	7f 4f       	sbci	r23, 0xFF	; 255
   107ac:	81 e2       	ldi	r24, 0x21	; 33
   107ae:	9e e0       	ldi	r25, 0x0E	; 14
   107b0:	0e 94 10 83 	call	0x10620	; 0x10620 <PubSubClient::publish(char const*, char const*)>
   107b4:	81 11       	cpse	r24, r1
   107b6:	09 c0       	rjmp	.+18     	; 0x107ca <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]+0xf0>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   107b8:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_error>
   107bc:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_error+0x1>
   107c0:	01 96       	adiw	r24, 0x01	; 1
   107c2:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_error+0x1>
   107c6:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_error>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:187
}
   107ca:	ca 5a       	subi	r28, 0xAA	; 170
   107cc:	df 4f       	sbci	r29, 0xFF	; 255
   107ce:	0f b6       	in	r0, 0x3f	; 63
   107d0:	f8 94       	cli
   107d2:	de bf       	out	0x3e, r29	; 62
   107d4:	0f be       	out	0x3f, r0	; 63
   107d6:	cd bf       	out	0x3d, r28	; 61
   107d8:	df 91       	pop	r29
   107da:	cf 91       	pop	r28
   107dc:	1f 91       	pop	r17
   107de:	0f 91       	pop	r16
   107e0:	ff 90       	pop	r15
   107e2:	ef 90       	pop	r14
   107e4:	df 90       	pop	r13
   107e6:	bf 90       	pop	r11
   107e8:	af 90       	pop	r10
   107ea:	08 95       	ret

000107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.222():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   107ec:	0c 94 12 a2 	jmp	0x14424	; 0x14424 <eeprom_write_byte>

000107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.226():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   107f0:	0c 94 0a a2 	jmp	0x14414	; 0x14414 <eeprom_read_byte>

000107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   107f4:	4f 92       	push	r4
   107f6:	5f 92       	push	r5
   107f8:	6f 92       	push	r6
   107fa:	7f 92       	push	r7
   107fc:	8f 92       	push	r8
   107fe:	9f 92       	push	r9
   10800:	af 92       	push	r10
   10802:	bf 92       	push	r11
   10804:	cf 92       	push	r12
   10806:	df 92       	push	r13
   10808:	ef 92       	push	r14
   1080a:	ff 92       	push	r15
   1080c:	0f 93       	push	r16
   1080e:	1f 93       	push	r17
   10810:	cf 93       	push	r28
   10812:	df 93       	push	r29
   10814:	00 d0       	rcall	.+0      	; 0x10816 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   10816:	00 d0       	rcall	.+0      	; 0x10818 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   10818:	1f 92       	push	r1
   1081a:	1f 92       	push	r1
   1081c:	cd b7       	in	r28, 0x3d	; 61
   1081e:	de b7       	in	r29, 0x3e	; 62
   10820:	6c 01       	movw	r12, r24
   10822:	46 2e       	mov	r4, r22
   10824:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
   10826:	fc 01       	movw	r30, r24
   10828:	10 82       	st	Z, r1
   1082a:	3a 01       	movw	r6, r20
   1082c:	f1 2c       	mov	r15, r1
   1082e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   10830:	a0 2e       	mov	r10, r16
   10832:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   10834:	8e 01       	movw	r16, r28
   10836:	0f 5f       	subi	r16, 0xFF	; 255
   10838:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   1083a:	82 2f       	mov	r24, r18
   1083c:	81 50       	subi	r24, 0x01	; 1
   1083e:	99 0b       	sbc	r25, r25
   10840:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   10842:	f3 01       	movw	r30, r6
   10844:	81 91       	ld	r24, Z+
   10846:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   10848:	a5 01       	movw	r20, r10
   1084a:	b8 01       	movw	r22, r16
   1084c:	90 e0       	ldi	r25, 0x00	; 0
   1084e:	0e 94 9b 98 	call	0x13136	; 0x13136 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
   10852:	f8 01       	movw	r30, r16
   10854:	01 90       	ld	r0, Z+
   10856:	00 20       	and	r0, r0
   10858:	e9 f7       	brne	.-6      	; 0x10854 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   1085a:	31 97       	sbiw	r30, 0x01	; 1
   1085c:	e0 1b       	sub	r30, r16
   1085e:	f1 0b       	sbc	r31, r17
   10860:	32 97       	sbiw	r30, 0x02	; 2
   10862:	28 f4       	brcc	.+10     	; 0x1086e <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
   10864:	6d e1       	ldi	r22, 0x1D	; 29
   10866:	77 e0       	ldi	r23, 0x07	; 7
   10868:	c6 01       	movw	r24, r12
   1086a:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
   1086e:	b8 01       	movw	r22, r16
   10870:	c6 01       	movw	r24, r12
   10872:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
   10876:	e8 14       	cp	r14, r8
   10878:	f9 04       	cpc	r15, r9
   1087a:	34 f4       	brge	.+12     	; 0x10888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
   1087c:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
   1087e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
   10880:	b8 01       	movw	r22, r16
   10882:	c6 01       	movw	r24, r12
   10884:	0e 94 d0 a4 	call	0x149a0	; 0x149a0 <strcat>
   10888:	ff ef       	ldi	r31, 0xFF	; 255
   1088a:	ef 1a       	sub	r14, r31
   1088c:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   1088e:	e5 14       	cp	r14, r5
   10890:	c0 f2       	brcs	.-80     	; 0x10842 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   10892:	28 96       	adiw	r28, 0x08	; 8
   10894:	0f b6       	in	r0, 0x3f	; 63
   10896:	f8 94       	cli
   10898:	de bf       	out	0x3e, r29	; 62
   1089a:	0f be       	out	0x3f, r0	; 63
   1089c:	cd bf       	out	0x3d, r28	; 61
   1089e:	df 91       	pop	r29
   108a0:	cf 91       	pop	r28
   108a2:	1f 91       	pop	r17
   108a4:	0f 91       	pop	r16
   108a6:	ff 90       	pop	r15
   108a8:	ef 90       	pop	r14
   108aa:	df 90       	pop	r13
   108ac:	cf 90       	pop	r12
   108ae:	bf 90       	pop	r11
   108b0:	af 90       	pop	r10
   108b2:	9f 90       	pop	r9
   108b4:	8f 90       	pop	r8
   108b6:	7f 90       	pop	r7
   108b8:	6f 90       	pop	r6
   108ba:	5f 90       	pop	r5
   108bc:	4f 90       	pop	r4
   108be:	08 95       	ret

000108c0 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   108c0:	cf 92       	push	r12
   108c2:	df 92       	push	r13
   108c4:	ef 92       	push	r14
   108c6:	ff 92       	push	r15
   108c8:	0f 93       	push	r16
   108ca:	1f 93       	push	r17
   108cc:	cf 93       	push	r28
   108ce:	df 93       	push	r29
   108d0:	00 d0       	rcall	.+0      	; 0x108d2 <EEPROMwriteFloat(unsigned int, float)+0x12>
   108d2:	1f 92       	push	r1
   108d4:	cd b7       	in	r28, 0x3d	; 61
   108d6:	de b7       	in	r29, 0x3e	; 62
   108d8:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   108da:	49 83       	std	Y+1, r20	; 0x01
   108dc:	5a 83       	std	Y+2, r21	; 0x02
   108de:	6b 83       	std	Y+3, r22	; 0x03
   108e0:	7c 83       	std	Y+4, r23	; 0x04
   108e2:	ce 01       	movw	r24, r28
   108e4:	01 96       	adiw	r24, 0x01	; 1
   108e6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   108e8:	10 e0       	ldi	r17, 0x00	; 0
   108ea:	00 e0       	ldi	r16, 0x00	; 0
   108ec:	f7 01       	movw	r30, r14
   108ee:	61 91       	ld	r22, Z+
   108f0:	7f 01       	movw	r14, r30
   108f2:	c8 01       	movw	r24, r16
   108f4:	8c 0d       	add	r24, r12
   108f6:	9d 1d       	adc	r25, r13
   108f8:	0e 94 f6 83 	call	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
   108fc:	0f 5f       	subi	r16, 0xFF	; 255
   108fe:	1f 4f       	sbci	r17, 0xFF	; 255
   10900:	04 30       	cpi	r16, 0x04	; 4
   10902:	11 05       	cpc	r17, r1
   10904:	99 f7       	brne	.-26     	; 0x108ec <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   10906:	0f 90       	pop	r0
   10908:	0f 90       	pop	r0
   1090a:	0f 90       	pop	r0
   1090c:	0f 90       	pop	r0
   1090e:	df 91       	pop	r29
   10910:	cf 91       	pop	r28
   10912:	1f 91       	pop	r17
   10914:	0f 91       	pop	r16
   10916:	ff 90       	pop	r15
   10918:	ef 90       	pop	r14
   1091a:	df 90       	pop	r13
   1091c:	cf 90       	pop	r12
   1091e:	08 95       	ret

00010920 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   10920:	cf 92       	push	r12
   10922:	df 92       	push	r13
   10924:	ef 92       	push	r14
   10926:	ff 92       	push	r15
   10928:	0f 93       	push	r16
   1092a:	1f 93       	push	r17
   1092c:	cf 93       	push	r28
   1092e:	df 93       	push	r29
   10930:	00 d0       	rcall	.+0      	; 0x10932 <EEPROMreadFloat(unsigned int)+0x12>
   10932:	1f 92       	push	r1
   10934:	cd b7       	in	r28, 0x3d	; 61
   10936:	de b7       	in	r29, 0x3e	; 62
   10938:	7e 01       	movw	r14, r28
   1093a:	25 e0       	ldi	r18, 0x05	; 5
   1093c:	e2 0e       	add	r14, r18
   1093e:	f1 1c       	adc	r15, r1
   10940:	8e 01       	movw	r16, r28
   10942:	0f 5f       	subi	r16, 0xFF	; 255
   10944:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   10946:	6c 01       	movw	r12, r24
   10948:	c0 1a       	sub	r12, r16
   1094a:	d1 0a       	sbc	r13, r17
   1094c:	c6 01       	movw	r24, r12
   1094e:	80 0f       	add	r24, r16
   10950:	91 1f       	adc	r25, r17
   10952:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   10956:	f8 01       	movw	r30, r16
   10958:	81 93       	st	Z+, r24
   1095a:	8f 01       	movw	r16, r30
   1095c:	ee 15       	cp	r30, r14
   1095e:	ff 05       	cpc	r31, r15
   10960:	a9 f7       	brne	.-22     	; 0x1094c <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   10962:	69 81       	ldd	r22, Y+1	; 0x01
   10964:	7a 81       	ldd	r23, Y+2	; 0x02
   10966:	8b 81       	ldd	r24, Y+3	; 0x03
   10968:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   1096a:	0f 90       	pop	r0
   1096c:	0f 90       	pop	r0
   1096e:	0f 90       	pop	r0
   10970:	0f 90       	pop	r0
   10972:	df 91       	pop	r29
   10974:	cf 91       	pop	r28
   10976:	1f 91       	pop	r17
   10978:	0f 91       	pop	r16
   1097a:	ff 90       	pop	r15
   1097c:	ef 90       	pop	r14
   1097e:	df 90       	pop	r13
   10980:	cf 90       	pop	r12
   10982:	08 95       	ret

00010984 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   10984:	cf 93       	push	r28
   10986:	df 93       	push	r29
   10988:	d8 2f       	mov	r29, r24
   1098a:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   1098c:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <wiznet_SPI_settings>
   10990:	90 91 4d 11 	lds	r25, 0x114D	; 0x80114d <wiznet_SPI_settings+0x1>
   10994:	0e 94 77 6e 	call	0xdcee	; 0xdcee <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   10998:	0e 94 42 78 	call	0xf084	; 0xf084 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   1099c:	80 e0       	ldi	r24, 0x00	; 0
   1099e:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   109a2:	8d 2f       	mov	r24, r29
   109a4:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   109a8:	8c 2f       	mov	r24, r28
   109aa:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   109ae:	80 e0       	ldi	r24, 0x00	; 0
   109b0:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
   109b4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   109b6:	0e 94 3d 78 	call	0xf07a	; 0xf07a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   109ba:	8c 2f       	mov	r24, r28
   109bc:	df 91       	pop	r29
   109be:	cf 91       	pop	r28
   109c0:	08 95       	ret

000109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   109c2:	df 92       	push	r13
   109c4:	ef 92       	push	r14
   109c6:	ff 92       	push	r15
   109c8:	0f 93       	push	r16
   109ca:	1f 93       	push	r17
   109cc:	cf 93       	push	r28
   109ce:	df 93       	push	r29
   109d0:	d8 2f       	mov	r29, r24
   109d2:	d9 2e       	mov	r13, r25
   109d4:	c6 2f       	mov	r28, r22
   109d6:	7a 01       	movw	r14, r20
   109d8:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   109da:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <wiznet_SPI_settings>
   109de:	90 91 4d 11 	lds	r25, 0x114D	; 0x80114d <wiznet_SPI_settings+0x1>
   109e2:	0e 94 77 6e 	call	0xdcee	; 0xdcee <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   109e6:	0e 94 42 78 	call	0xf084	; 0xf084 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   109ea:	8d 2d       	mov	r24, r13
   109ec:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   109f0:	8d 2f       	mov	r24, r29
   109f2:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   109f6:	8c 2f       	mov	r24, r28
   109f8:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
   109fc:	e7 01       	movw	r28, r14
   109fe:	e0 0e       	add	r14, r16
   10a00:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   10a02:	ce 15       	cp	r28, r14
   10a04:	df 05       	cpc	r29, r15
   10a06:	21 f0       	breq	.+8      	; 0x10a10 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   10a08:	89 91       	ld	r24, Y+
   10a0a:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
   10a0e:	f9 cf       	rjmp	.-14     	; 0x10a02 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   10a10:	0e 94 3d 78 	call	0xf07a	; 0xf07a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   10a14:	c8 01       	movw	r24, r16
   10a16:	df 91       	pop	r29
   10a18:	cf 91       	pop	r28
   10a1a:	1f 91       	pop	r17
   10a1c:	0f 91       	pop	r16
   10a1e:	ff 90       	pop	r15
   10a20:	ef 90       	pop	r14
   10a22:	df 90       	pop	r13
   10a24:	08 95       	ret

00010a26 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.83]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.83():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   10a26:	8f 92       	push	r8
   10a28:	9f 92       	push	r9
   10a2a:	af 92       	push	r10
   10a2c:	bf 92       	push	r11
   10a2e:	cf 92       	push	r12
   10a30:	df 92       	push	r13
   10a32:	ef 92       	push	r14
   10a34:	ff 92       	push	r15
   10a36:	0f 93       	push	r16
   10a38:	1f 93       	push	r17
   10a3a:	cf 93       	push	r28
   10a3c:	5c 01       	movw	r10, r24
   10a3e:	6b 01       	movw	r12, r22
   10a40:	7a 01       	movw	r14, r20
   10a42:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   10a44:	c0 91 25 0c 	lds	r28, 0x0C25	; 0x800c25 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   10a48:	c0 93 f2 10 	sts	0x10F2, r28	; 0x8010f2 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   10a4c:	68 ee       	ldi	r22, 0xE8	; 232
   10a4e:	73 e0       	ldi	r23, 0x03	; 3
   10a50:	80 e0       	ldi	r24, 0x00	; 0
   10a52:	90 e0       	ldi	r25, 0x00	; 0
   10a54:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   10a58:	61 e0       	ldi	r22, 0x01	; 1
   10a5a:	8c 2f       	mov	r24, r28
   10a5c:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   10a60:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   10a64:	60 e0       	ldi	r22, 0x00	; 0
   10a66:	90 e0       	ldi	r25, 0x00	; 0
   10a68:	80 e0       	ldi	r24, 0x00	; 0
   10a6a:	0e 94 c2 84 	call	0x10984	; 0x10984 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   10a6e:	48 2f       	mov	r20, r24
   10a70:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   10a72:	64 e0       	ldi	r22, 0x04	; 4
   10a74:	90 e0       	ldi	r25, 0x00	; 0
   10a76:	80 e0       	ldi	r24, 0x00	; 0
   10a78:	0e 94 47 78 	call	0xf08e	; 0xf08e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   10a7c:	cc e0       	ldi	r28, 0x0C	; 12
   10a7e:	88 e0       	ldi	r24, 0x08	; 8
   10a80:	88 2e       	mov	r8, r24
   10a82:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   10a84:	42 e0       	ldi	r20, 0x02	; 2
   10a86:	6c 2f       	mov	r22, r28
   10a88:	8e e1       	ldi	r24, 0x1E	; 30
   10a8a:	90 e0       	ldi	r25, 0x00	; 0
   10a8c:	0e 94 47 78 	call	0xf08e	; 0xf08e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   10a90:	42 e0       	ldi	r20, 0x02	; 2
   10a92:	6c 2f       	mov	r22, r28
   10a94:	8f e1       	ldi	r24, 0x1F	; 31
   10a96:	90 e0       	ldi	r25, 0x00	; 0
   10a98:	0e 94 47 78 	call	0xf08e	; 0xf08e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   10a9c:	81 e0       	ldi	r24, 0x01	; 1
   10a9e:	88 1a       	sub	r8, r24
   10aa0:	91 08       	sbc	r9, r1
   10aa2:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   10aa4:	81 14       	cp	r8, r1
   10aa6:	91 04       	cpc	r9, r1
   10aa8:	69 f7       	brne	.-38     	; 0x10a84 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.83]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   10aaa:	26 e0       	ldi	r18, 0x06	; 6
   10aac:	30 e0       	ldi	r19, 0x00	; 0
   10aae:	4e e2       	ldi	r20, 0x2E	; 46
   10ab0:	5c e0       	ldi	r21, 0x0C	; 12
   10ab2:	64 e0       	ldi	r22, 0x04	; 4
   10ab4:	89 e0       	ldi	r24, 0x09	; 9
   10ab6:	90 e0       	ldi	r25, 0x00	; 0
   10ab8:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   10abc:	a5 01       	movw	r20, r10
   10abe:	4e 5f       	subi	r20, 0xFE	; 254
   10ac0:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   10ac2:	24 e0       	ldi	r18, 0x04	; 4
   10ac4:	30 e0       	ldi	r19, 0x00	; 0
   10ac6:	64 e0       	ldi	r22, 0x04	; 4
   10ac8:	8f e0       	ldi	r24, 0x0F	; 15
   10aca:	90 e0       	ldi	r25, 0x00	; 0
   10acc:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   10ad0:	a7 01       	movw	r20, r14
   10ad2:	4e 5f       	subi	r20, 0xFE	; 254
   10ad4:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   10ad6:	24 e0       	ldi	r18, 0x04	; 4
   10ad8:	30 e0       	ldi	r19, 0x00	; 0
   10ada:	64 e0       	ldi	r22, 0x04	; 4
   10adc:	81 e0       	ldi	r24, 0x01	; 1
   10ade:	90 e0       	ldi	r25, 0x00	; 0
   10ae0:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   10ae4:	a8 01       	movw	r20, r16
   10ae6:	4e 5f       	subi	r20, 0xFE	; 254
   10ae8:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   10aea:	24 e0       	ldi	r18, 0x04	; 4
   10aec:	30 e0       	ldi	r19, 0x00	; 0
   10aee:	64 e0       	ldi	r22, 0x04	; 4
   10af0:	85 e0       	ldi	r24, 0x05	; 5
   10af2:	90 e0       	ldi	r25, 0x00	; 0
   10af4:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   10af8:	f6 01       	movw	r30, r12
   10afa:	82 81       	ldd	r24, Z+2	; 0x02
   10afc:	93 81       	ldd	r25, Z+3	; 0x03
   10afe:	a4 81       	ldd	r26, Z+4	; 0x04
   10b00:	b5 81       	ldd	r27, Z+5	; 0x05
   10b02:	80 93 1b 0c 	sts	0x0C1B, r24	; 0x800c1b <Ethernet+0x2>
   10b06:	90 93 1c 0c 	sts	0x0C1C, r25	; 0x800c1c <Ethernet+0x3>
   10b0a:	a0 93 1d 0c 	sts	0x0C1D, r26	; 0x800c1d <Ethernet+0x4>
   10b0e:	b0 93 1e 0c 	sts	0x0C1E, r27	; 0x800c1e <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.83():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   10b12:	cf 91       	pop	r28
   10b14:	1f 91       	pop	r17
   10b16:	0f 91       	pop	r16
   10b18:	ff 90       	pop	r15
   10b1a:	ef 90       	pop	r14
   10b1c:	df 90       	pop	r13
   10b1e:	cf 90       	pop	r12
   10b20:	bf 90       	pop	r11
   10b22:	af 90       	pop	r10
   10b24:	9f 90       	pop	r9
   10b26:	8f 90       	pop	r8
   10b28:	08 95       	ret

00010b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   10b2a:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   10b2c:	82 95       	swap	r24
   10b2e:	88 0f       	add	r24, r24
   10b30:	80 7e       	andi	r24, 0xE0	; 224
   10b32:	6c e0       	ldi	r22, 0x0C	; 12
   10b34:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   10b36:	c9 01       	movw	r24, r18
   10b38:	0c 94 47 78 	jmp	0xf08e	; 0xf08e <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00010b3c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   10b3c:	bf 92       	push	r11
   10b3e:	cf 92       	push	r12
   10b40:	df 92       	push	r13
   10b42:	ef 92       	push	r14
   10b44:	ff 92       	push	r15
   10b46:	0f 93       	push	r16
   10b48:	1f 93       	push	r17
   10b4a:	cf 93       	push	r28
   10b4c:	df 93       	push	r29
   10b4e:	b8 2e       	mov	r11, r24
   10b50:	6b 01       	movw	r12, r22
   10b52:	7a 01       	movw	r14, r20
   10b54:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   10b56:	64 e2       	ldi	r22, 0x24	; 36
   10b58:	70 e0       	ldi	r23, 0x00	; 0
   10b5a:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
   10b5e:	c8 2f       	mov	r28, r24
   10b60:	65 e2       	ldi	r22, 0x25	; 37
   10b62:	70 e0       	ldi	r23, 0x00	; 0
   10b64:	8b 2d       	mov	r24, r11
   10b66:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
   10b6a:	d0 e0       	ldi	r29, 0x00	; 0
   10b6c:	dc 2f       	mov	r29, r28
   10b6e:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   10b70:	8c 0d       	add	r24, r12
   10b72:	9d 2d       	mov	r25, r13
   10b74:	91 1d       	adc	r25, r1
   10b76:	c8 0f       	add	r28, r24
   10b78:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   10b7a:	6b 2d       	mov	r22, r11
   10b7c:	62 95       	swap	r22
   10b7e:	66 0f       	add	r22, r22
   10b80:	60 7e       	andi	r22, 0xE0	; 224
   10b82:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   10b84:	98 01       	movw	r18, r16
   10b86:	a7 01       	movw	r20, r14
   10b88:	ce 01       	movw	r24, r28
   10b8a:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   10b8e:	c0 0f       	add	r28, r16
   10b90:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   10b92:	4d 2f       	mov	r20, r29
   10b94:	64 e2       	ldi	r22, 0x24	; 36
   10b96:	70 e0       	ldi	r23, 0x00	; 0
   10b98:	8b 2d       	mov	r24, r11
   10b9a:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10b9e:	4c 2f       	mov	r20, r28
   10ba0:	65 e2       	ldi	r22, 0x25	; 37
   10ba2:	70 e0       	ldi	r23, 0x00	; 0
   10ba4:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   10ba6:	df 91       	pop	r29
   10ba8:	cf 91       	pop	r28
   10baa:	1f 91       	pop	r17
   10bac:	0f 91       	pop	r16
   10bae:	ff 90       	pop	r15
   10bb0:	ef 90       	pop	r14
   10bb2:	df 90       	pop	r13
   10bb4:	cf 90       	pop	r12
   10bb6:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   10bb8:	0c 94 95 85 	jmp	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00010bbc <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   10bbc:	af 92       	push	r10
   10bbe:	bf 92       	push	r11
   10bc0:	cf 92       	push	r12
   10bc2:	df 92       	push	r13
   10bc4:	ff 92       	push	r15
   10bc6:	0f 93       	push	r16
   10bc8:	1f 93       	push	r17
   10bca:	cf 93       	push	r28
   10bcc:	df 93       	push	r29
   10bce:	8c 01       	movw	r16, r24
   10bd0:	5b 01       	movw	r10, r22
   10bd2:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   10bd4:	fc 01       	movw	r30, r24
   10bd6:	c7 88       	ldd	r12, Z+23	; 0x17
   10bd8:	d0 8c       	ldd	r13, Z+24	; 0x18
   10bda:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   10bdc:	8f 2d       	mov	r24, r15
   10bde:	0e 94 20 71 	call	0xe240	; 0xe240 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   10be2:	8c 17       	cp	r24, r28
   10be4:	9d 07       	cpc	r25, r29
   10be6:	20 f4       	brcc	.+8      	; 0x10bf0 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   10be8:	8f 2d       	mov	r24, r15
   10bea:	0e 94 20 71 	call	0xe240	; 0xe240 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   10bee:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   10bf0:	9e 01       	movw	r18, r28
   10bf2:	a5 01       	movw	r20, r10
   10bf4:	b6 01       	movw	r22, r12
   10bf6:	8f 2d       	mov	r24, r15
   10bf8:	0e 94 9e 85 	call	0x10b3c	; 0x10b3c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   10bfc:	f8 01       	movw	r30, r16
   10bfe:	87 89       	ldd	r24, Z+23	; 0x17
   10c00:	90 8d       	ldd	r25, Z+24	; 0x18
   10c02:	8c 0f       	add	r24, r28
   10c04:	9d 1f       	adc	r25, r29
   10c06:	90 8f       	std	Z+24, r25	; 0x18
   10c08:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   10c0a:	ce 01       	movw	r24, r28
   10c0c:	df 91       	pop	r29
   10c0e:	cf 91       	pop	r28
   10c10:	1f 91       	pop	r17
   10c12:	0f 91       	pop	r16
   10c14:	ff 90       	pop	r15
   10c16:	df 90       	pop	r13
   10c18:	cf 90       	pop	r12
   10c1a:	bf 90       	pop	r11
   10c1c:	af 90       	pop	r10
   10c1e:	08 95       	ret

00010c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   10c20:	cf 93       	push	r28
   10c22:	c8 2f       	mov	r28, r24
   10c24:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   10c26:	61 e0       	ldi	r22, 0x01	; 1
   10c28:	70 e0       	ldi	r23, 0x00	; 0
   10c2a:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   10c2e:	61 e0       	ldi	r22, 0x01	; 1
   10c30:	70 e0       	ldi	r23, 0x00	; 0
   10c32:	8c 2f       	mov	r24, r28
   10c34:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   10c38:	81 11       	cpse	r24, r1
   10c3a:	f9 cf       	rjmp	.-14     	; 0x10c2e <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   10c3c:	cf 91       	pop	r28
   10c3e:	08 95       	ret

00010c40 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   10c40:	af 92       	push	r10
   10c42:	bf 92       	push	r11
   10c44:	cf 92       	push	r12
   10c46:	df 92       	push	r13
   10c48:	ef 92       	push	r14
   10c4a:	ff 92       	push	r15
   10c4c:	0f 93       	push	r16
   10c4e:	1f 93       	push	r17
   10c50:	cf 93       	push	r28
   10c52:	df 93       	push	r29
   10c54:	f8 2e       	mov	r15, r24
   10c56:	5b 01       	movw	r10, r22
   10c58:	6a 01       	movw	r12, r20
   10c5a:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   10c5c:	68 e2       	ldi	r22, 0x28	; 40
   10c5e:	70 e0       	ldi	r23, 0x00	; 0
   10c60:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
   10c64:	08 2f       	mov	r16, r24
   10c66:	10 e0       	ldi	r17, 0x00	; 0
   10c68:	10 2f       	mov	r17, r16
   10c6a:	00 27       	eor	r16, r16
   10c6c:	69 e2       	ldi	r22, 0x29	; 41
   10c6e:	70 e0       	ldi	r23, 0x00	; 0
   10c70:	8f 2d       	mov	r24, r15
   10c72:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
   10c76:	e8 01       	movw	r28, r16
   10c78:	c8 0f       	add	r28, r24
   10c7a:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   10c7c:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <wiznet_SPI_settings>
   10c80:	90 91 4d 11 	lds	r25, 0x114D	; 0x80114d <wiznet_SPI_settings+0x1>
   10c84:	0e 94 77 6e 	call	0xdcee	; 0xdcee <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   10c88:	0e 94 42 78 	call	0xf084	; 0xf084 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   10c8c:	8d 2f       	mov	r24, r29
   10c8e:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   10c92:	8c 2f       	mov	r24, r28
   10c94:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   10c98:	8f 2d       	mov	r24, r15
   10c9a:	82 95       	swap	r24
   10c9c:	88 0f       	add	r24, r24
   10c9e:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   10ca0:	88 5e       	subi	r24, 0xE8	; 232
   10ca2:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
   10ca6:	85 01       	movw	r16, r10
   10ca8:	ac 0c       	add	r10, r12
   10caa:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   10cac:	80 e0       	ldi	r24, 0x00	; 0
   10cae:	0e 94 70 6e 	call	0xdce0	; 0xdce0 <SPIClass::transfer(unsigned char)>
   10cb2:	f8 01       	movw	r30, r16
   10cb4:	81 93       	st	Z+, r24
   10cb6:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   10cb8:	ea 15       	cp	r30, r10
   10cba:	fb 05       	cpc	r31, r11
   10cbc:	b9 f7       	brne	.-18     	; 0x10cac <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   10cbe:	0e 94 3d 78 	call	0xf07a	; 0xf07a <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   10cc2:	e1 10       	cpse	r14, r1
   10cc4:	18 c0       	rjmp	.+48     	; 0x10cf6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   10cc6:	cc 0d       	add	r28, r12
   10cc8:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   10cca:	4d 2f       	mov	r20, r29
   10ccc:	68 e2       	ldi	r22, 0x28	; 40
   10cce:	70 e0       	ldi	r23, 0x00	; 0
   10cd0:	8f 2d       	mov	r24, r15
   10cd2:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10cd6:	4c 2f       	mov	r20, r28
   10cd8:	69 e2       	ldi	r22, 0x29	; 41
   10cda:	70 e0       	ldi	r23, 0x00	; 0
   10cdc:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   10cde:	df 91       	pop	r29
   10ce0:	cf 91       	pop	r28
   10ce2:	1f 91       	pop	r17
   10ce4:	0f 91       	pop	r16
   10ce6:	ff 90       	pop	r15
   10ce8:	ef 90       	pop	r14
   10cea:	df 90       	pop	r13
   10cec:	cf 90       	pop	r12
   10cee:	bf 90       	pop	r11
   10cf0:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   10cf2:	0c 94 95 85 	jmp	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   10cf6:	df 91       	pop	r29
   10cf8:	cf 91       	pop	r28
   10cfa:	1f 91       	pop	r17
   10cfc:	0f 91       	pop	r16
   10cfe:	ff 90       	pop	r15
   10d00:	ef 90       	pop	r14
   10d02:	df 90       	pop	r13
   10d04:	cf 90       	pop	r12
   10d06:	bf 90       	pop	r11
   10d08:	af 90       	pop	r10
   10d0a:	08 95       	ret

00010d0c <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   10d0c:	cf 92       	push	r12
   10d0e:	df 92       	push	r13
   10d10:	ef 92       	push	r14
   10d12:	ff 92       	push	r15
   10d14:	1f 93       	push	r17
   10d16:	cf 93       	push	r28
   10d18:	df 93       	push	r29
   10d1a:	18 2f       	mov	r17, r24
   10d1c:	6b 01       	movw	r12, r22
   10d1e:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   10d20:	0e 94 e3 70 	call	0xe1c6	; 0xe1c6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   10d24:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   10d26:	00 97       	sbiw	r24, 0x00	; 0
   10d28:	d9 f4       	brne	.+54     	; 0x10d60 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   10d2a:	63 e0       	ldi	r22, 0x03	; 3
   10d2c:	70 e0       	ldi	r23, 0x00	; 0
   10d2e:	81 2f       	mov	r24, r17
   10d30:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   10d34:	84 31       	cpi	r24, 0x14	; 20
   10d36:	59 f0       	breq	.+22     	; 0x10d4e <recv(unsigned char, unsigned char*, int)+0x42>
   10d38:	88 23       	and	r24, r24
   10d3a:	49 f0       	breq	.+18     	; 0x10d4e <recv(unsigned char, unsigned char*, int)+0x42>
   10d3c:	c1 e0       	ldi	r28, 0x01	; 1
   10d3e:	d0 e0       	ldi	r29, 0x00	; 0
   10d40:	8c 31       	cpi	r24, 0x1C	; 28
   10d42:	11 f4       	brne	.+4      	; 0x10d48 <recv(unsigned char, unsigned char*, int)+0x3c>
   10d44:	d0 e0       	ldi	r29, 0x00	; 0
   10d46:	c0 e0       	ldi	r28, 0x00	; 0
   10d48:	d1 95       	neg	r29
   10d4a:	c1 95       	neg	r28
   10d4c:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   10d4e:	ce 01       	movw	r24, r28
   10d50:	df 91       	pop	r29
   10d52:	cf 91       	pop	r28
   10d54:	1f 91       	pop	r17
   10d56:	ff 90       	pop	r15
   10d58:	ef 90       	pop	r14
   10d5a:	df 90       	pop	r13
   10d5c:	cf 90       	pop	r12
   10d5e:	08 95       	ret
   10d60:	e8 16       	cp	r14, r24
   10d62:	f9 06       	cpc	r15, r25
   10d64:	0c f4       	brge	.+2      	; 0x10d68 <recv(unsigned char, unsigned char*, int)+0x5c>
   10d66:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   10d68:	1c 16       	cp	r1, r28
   10d6a:	1d 06       	cpc	r1, r29
   10d6c:	84 f7       	brge	.-32     	; 0x10d4e <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   10d6e:	20 e0       	ldi	r18, 0x00	; 0
   10d70:	ae 01       	movw	r20, r28
   10d72:	b6 01       	movw	r22, r12
   10d74:	81 2f       	mov	r24, r17
   10d76:	0e 94 20 86 	call	0x10c40	; 0x10c40 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   10d7a:	60 e4       	ldi	r22, 0x40	; 64
   10d7c:	70 e0       	ldi	r23, 0x00	; 0
   10d7e:	81 2f       	mov	r24, r17
   10d80:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   10d84:	e4 cf       	rjmp	.-56     	; 0x10d4e <recv(unsigned char, unsigned char*, int)+0x42>

00010d86 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   10d86:	cf 93       	push	r28
   10d88:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   10d8a:	fc 01       	movw	r30, r24
   10d8c:	21 8d       	ldd	r18, Z+25	; 0x19
   10d8e:	32 8d       	ldd	r19, Z+26	; 0x1a
   10d90:	21 15       	cp	r18, r1
   10d92:	31 05       	cpc	r19, r1
   10d94:	29 f4       	brne	.+10     	; 0x10da0 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   10d96:	8f ef       	ldi	r24, 0xFF	; 255
   10d98:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   10d9a:	df 91       	pop	r29
   10d9c:	cf 91       	pop	r28
   10d9e:	08 95       	ret
   10da0:	ec 01       	movw	r28, r24
   10da2:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   10da4:	42 17       	cp	r20, r18
   10da6:	53 07       	cpc	r21, r19
   10da8:	08 f0       	brcs	.+2      	; 0x10dac <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   10daa:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   10dac:	0e 94 86 86 	call	0x10d0c	; 0x10d0c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   10db0:	18 16       	cp	r1, r24
   10db2:	19 06       	cpc	r1, r25
   10db4:	84 f7       	brge	.-32     	; 0x10d96 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   10db6:	29 8d       	ldd	r18, Y+25	; 0x19
   10db8:	3a 8d       	ldd	r19, Y+26	; 0x1a
   10dba:	28 1b       	sub	r18, r24
   10dbc:	39 0b       	sbc	r19, r25
   10dbe:	3a 8f       	std	Y+26, r19	; 0x1a
   10dc0:	29 8f       	std	Y+25, r18	; 0x19
   10dc2:	eb cf       	rjmp	.-42     	; 0x10d9a <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00010dc4 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   10dc4:	0f 93       	push	r16
   10dc6:	1f 93       	push	r17
   10dc8:	cf 93       	push	r28
   10dca:	df 93       	push	r29
   10dcc:	1f 92       	push	r1
   10dce:	cd b7       	in	r28, 0x3d	; 61
   10dd0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   10dd2:	fc 01       	movw	r30, r24
   10dd4:	21 8d       	ldd	r18, Z+25	; 0x19
   10dd6:	32 8d       	ldd	r19, Z+26	; 0x1a
   10dd8:	23 2b       	or	r18, r19
   10dda:	41 f4       	brne	.+16     	; 0x10dec <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   10ddc:	8f ef       	ldi	r24, 0xFF	; 255
   10dde:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   10de0:	0f 90       	pop	r0
   10de2:	df 91       	pop	r29
   10de4:	cf 91       	pop	r28
   10de6:	1f 91       	pop	r17
   10de8:	0f 91       	pop	r16
   10dea:	08 95       	ret
   10dec:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   10dee:	41 e0       	ldi	r20, 0x01	; 1
   10df0:	50 e0       	ldi	r21, 0x00	; 0
   10df2:	be 01       	movw	r22, r28
   10df4:	6f 5f       	subi	r22, 0xFF	; 255
   10df6:	7f 4f       	sbci	r23, 0xFF	; 255
   10df8:	fc 01       	movw	r30, r24
   10dfa:	84 85       	ldd	r24, Z+12	; 0x0c
   10dfc:	0e 94 86 86 	call	0x10d0c	; 0x10d0c <recv(unsigned char, unsigned char*, int)>
   10e00:	18 16       	cp	r1, r24
   10e02:	19 06       	cpc	r1, r25
   10e04:	5c f7       	brge	.-42     	; 0x10ddc <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   10e06:	f8 01       	movw	r30, r16
   10e08:	81 8d       	ldd	r24, Z+25	; 0x19
   10e0a:	92 8d       	ldd	r25, Z+26	; 0x1a
   10e0c:	01 97       	sbiw	r24, 0x01	; 1
   10e0e:	92 8f       	std	Z+26, r25	; 0x1a
   10e10:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   10e12:	89 81       	ldd	r24, Y+1	; 0x01
   10e14:	90 e0       	ldi	r25, 0x00	; 0
   10e16:	e4 cf       	rjmp	.-56     	; 0x10de0 <EthernetUDP::read()+0x1c>

00010e18 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   10e18:	0f 93       	push	r16
   10e1a:	1f 93       	push	r17
   10e1c:	cf 93       	push	r28
   10e1e:	df 93       	push	r29
   10e20:	00 d0       	rcall	.+0      	; 0x10e22 <EthernetUDP::parsePacket()+0xa>
   10e22:	00 d0       	rcall	.+0      	; 0x10e24 <EthernetUDP::parsePacket()+0xc>
   10e24:	1f 92       	push	r1
   10e26:	1f 92       	push	r1
   10e28:	cd b7       	in	r28, 0x3d	; 61
   10e2a:	de b7       	in	r29, 0x3e	; 62
   10e2c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   10e2e:	dc 01       	movw	r26, r24
   10e30:	ed 91       	ld	r30, X+
   10e32:	fc 91       	ld	r31, X
   10e34:	06 80       	ldd	r0, Z+6	; 0x06
   10e36:	f7 81       	ldd	r31, Z+7	; 0x07
   10e38:	e0 2d       	mov	r30, r0
   10e3a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   10e3c:	f8 01       	movw	r30, r16
   10e3e:	84 85       	ldd	r24, Z+12	; 0x0c
   10e40:	0e 94 e3 70 	call	0xe1c6	; 0xe1c6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   10e44:	89 2b       	or	r24, r25
   10e46:	b1 f1       	breq	.+108    	; 0x10eb4 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   10e48:	48 e0       	ldi	r20, 0x08	; 8
   10e4a:	50 e0       	ldi	r21, 0x00	; 0
   10e4c:	be 01       	movw	r22, r28
   10e4e:	6f 5f       	subi	r22, 0xFF	; 255
   10e50:	7f 4f       	sbci	r23, 0xFF	; 255
   10e52:	d8 01       	movw	r26, r16
   10e54:	1c 96       	adiw	r26, 0x0c	; 12
   10e56:	8c 91       	ld	r24, X
   10e58:	0e 94 86 86 	call	0x10d0c	; 0x10d0c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   10e5c:	18 16       	cp	r1, r24
   10e5e:	19 06       	cpc	r1, r25
   10e60:	f4 f4       	brge	.+60     	; 0x10e9e <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   10e62:	d8 01       	movw	r26, r16
   10e64:	51 96       	adiw	r26, 0x11	; 17
   10e66:	84 e0       	ldi	r24, 0x04	; 4
   10e68:	fe 01       	movw	r30, r28
   10e6a:	31 96       	adiw	r30, 0x01	; 1
   10e6c:	01 90       	ld	r0, Z+
   10e6e:	0d 92       	st	X+, r0
   10e70:	8a 95       	dec	r24
   10e72:	e1 f7       	brne	.-8      	; 0x10e6c <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   10e74:	8d 81       	ldd	r24, Y+5	; 0x05
   10e76:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   10e78:	98 2f       	mov	r25, r24
   10e7a:	88 27       	eor	r24, r24
   10e7c:	2e 81       	ldd	r18, Y+6	; 0x06
   10e7e:	82 0f       	add	r24, r18
   10e80:	91 1d       	adc	r25, r1
   10e82:	f8 01       	movw	r30, r16
   10e84:	96 8b       	std	Z+22, r25	; 0x16
   10e86:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   10e88:	8f 81       	ldd	r24, Y+7	; 0x07
   10e8a:	28 2f       	mov	r18, r24
   10e8c:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   10e8e:	32 2f       	mov	r19, r18
   10e90:	22 27       	eor	r18, r18
   10e92:	88 85       	ldd	r24, Y+8	; 0x08
   10e94:	82 0f       	add	r24, r18
   10e96:	93 2f       	mov	r25, r19
   10e98:	91 1d       	adc	r25, r1
   10e9a:	92 8f       	std	Z+26, r25	; 0x1a
   10e9c:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   10e9e:	28 96       	adiw	r28, 0x08	; 8
   10ea0:	0f b6       	in	r0, 0x3f	; 63
   10ea2:	f8 94       	cli
   10ea4:	de bf       	out	0x3e, r29	; 62
   10ea6:	0f be       	out	0x3f, r0	; 63
   10ea8:	cd bf       	out	0x3d, r28	; 61
   10eaa:	df 91       	pop	r29
   10eac:	cf 91       	pop	r28
   10eae:	1f 91       	pop	r17
   10eb0:	0f 91       	pop	r16
   10eb2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   10eb4:	90 e0       	ldi	r25, 0x00	; 0
   10eb6:	80 e0       	ldi	r24, 0x00	; 0
   10eb8:	f2 cf       	rjmp	.-28     	; 0x10e9e <EthernetUDP::parsePacket()+0x86>

00010eba <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   10eba:	fc 01       	movw	r30, r24
   10ebc:	84 85       	ldd	r24, Z+12	; 0x0c
   10ebe:	0c 94 86 86 	jmp	0x10d0c	; 0x10d0c <recv(unsigned char, unsigned char*, int)>

00010ec2 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
   10ec2:	cf 93       	push	r28
   10ec4:	df 93       	push	r29
   10ec6:	1f 92       	push	r1
   10ec8:	cd b7       	in	r28, 0x3d	; 61
   10eca:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   10ecc:	41 e0       	ldi	r20, 0x01	; 1
   10ece:	50 e0       	ldi	r21, 0x00	; 0
   10ed0:	be 01       	movw	r22, r28
   10ed2:	6f 5f       	subi	r22, 0xFF	; 255
   10ed4:	7f 4f       	sbci	r23, 0xFF	; 255
   10ed6:	fc 01       	movw	r30, r24
   10ed8:	84 85       	ldd	r24, Z+12	; 0x0c
   10eda:	0e 94 86 86 	call	0x10d0c	; 0x10d0c <recv(unsigned char, unsigned char*, int)>
   10ede:	18 16       	cp	r1, r24
   10ee0:	19 06       	cpc	r1, r25
   10ee2:	34 f4       	brge	.+12     	; 0x10ef0 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   10ee4:	89 81       	ldd	r24, Y+1	; 0x01
   10ee6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   10ee8:	0f 90       	pop	r0
   10eea:	df 91       	pop	r29
   10eec:	cf 91       	pop	r28
   10eee:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   10ef0:	8f ef       	ldi	r24, 0xFF	; 255
   10ef2:	9f ef       	ldi	r25, 0xFF	; 255
   10ef4:	f9 cf       	rjmp	.-14     	; 0x10ee8 <EthernetClient::read()+0x26>

00010ef6 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
   10ef6:	0f 93       	push	r16
   10ef8:	1f 93       	push	r17
   10efa:	cf 93       	push	r28
   10efc:	df 93       	push	r29
   10efe:	1f 92       	push	r1
   10f00:	cd b7       	in	r28, 0x3d	; 61
   10f02:	de b7       	in	r29, 0x3e	; 62
   10f04:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
   10f06:	dc 01       	movw	r26, r24
   10f08:	ed 91       	ld	r30, X+
   10f0a:	fc 91       	ld	r31, X
   10f0c:	00 84       	ldd	r0, Z+8	; 0x08
   10f0e:	f1 85       	ldd	r31, Z+9	; 0x09
   10f10:	e0 2d       	mov	r30, r0
   10f12:	19 95       	eicall
   10f14:	89 2b       	or	r24, r25
   10f16:	91 f0       	breq	.+36     	; 0x10f3c <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   10f18:	21 e0       	ldi	r18, 0x01	; 1
   10f1a:	41 e0       	ldi	r20, 0x01	; 1
   10f1c:	50 e0       	ldi	r21, 0x00	; 0
   10f1e:	be 01       	movw	r22, r28
   10f20:	6f 5f       	subi	r22, 0xFF	; 255
   10f22:	7f 4f       	sbci	r23, 0xFF	; 255
   10f24:	f8 01       	movw	r30, r16
   10f26:	84 85       	ldd	r24, Z+12	; 0x0c
   10f28:	0e 94 20 86 	call	0x10c40	; 0x10c40 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
   10f2c:	89 81       	ldd	r24, Y+1	; 0x01
   10f2e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
   10f30:	0f 90       	pop	r0
   10f32:	df 91       	pop	r29
   10f34:	cf 91       	pop	r28
   10f36:	1f 91       	pop	r17
   10f38:	0f 91       	pop	r16
   10f3a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
   10f3c:	8f ef       	ldi	r24, 0xFF	; 255
   10f3e:	9f ef       	ldi	r25, 0xFF	; 255
   10f40:	f7 cf       	rjmp	.-18     	; 0x10f30 <EthernetClient::peek()+0x3a>

00010f42 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   10f42:	cf 93       	push	r28
   10f44:	df 93       	push	r29
   10f46:	1f 92       	push	r1
   10f48:	cd b7       	in	r28, 0x3d	; 61
   10f4a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   10f4c:	fc 01       	movw	r30, r24
   10f4e:	21 8d       	ldd	r18, Z+25	; 0x19
   10f50:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   10f52:	8f ef       	ldi	r24, 0xFF	; 255
   10f54:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   10f56:	23 2b       	or	r18, r19
   10f58:	59 f0       	breq	.+22     	; 0x10f70 <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
   10f5a:	21 e0       	ldi	r18, 0x01	; 1
   10f5c:	41 e0       	ldi	r20, 0x01	; 1
   10f5e:	50 e0       	ldi	r21, 0x00	; 0
   10f60:	be 01       	movw	r22, r28
   10f62:	6f 5f       	subi	r22, 0xFF	; 255
   10f64:	7f 4f       	sbci	r23, 0xFF	; 255
   10f66:	84 85       	ldd	r24, Z+12	; 0x0c
   10f68:	0e 94 20 86 	call	0x10c40	; 0x10c40 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   10f6c:	89 81       	ldd	r24, Y+1	; 0x01
   10f6e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   10f70:	0f 90       	pop	r0
   10f72:	df 91       	pop	r29
   10f74:	cf 91       	pop	r28
   10f76:	08 95       	ret

00010f78 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   10f78:	cf 93       	push	r28
   10f7a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   10f7c:	60 e1       	ldi	r22, 0x10	; 16
   10f7e:	70 e0       	ldi	r23, 0x00	; 0
   10f80:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   10f84:	4f ef       	ldi	r20, 0xFF	; 255
   10f86:	62 e0       	ldi	r22, 0x02	; 2
   10f88:	70 e0       	ldi	r23, 0x00	; 0
   10f8a:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   10f8c:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   10f8e:	0c 94 95 85 	jmp	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00010f92 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   10f92:	0f 93       	push	r16
   10f94:	1f 93       	push	r17
   10f96:	cf 93       	push	r28
   10f98:	df 93       	push	r29
   10f9a:	c8 2f       	mov	r28, r24
   10f9c:	d6 2f       	mov	r29, r22
   10f9e:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   10fa0:	0e 94 bc 87 	call	0x10f78	; 0x10f78 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   10fa4:	4d 2f       	mov	r20, r29
   10fa6:	70 e0       	ldi	r23, 0x00	; 0
   10fa8:	60 e0       	ldi	r22, 0x00	; 0
   10faa:	8c 2f       	mov	r24, r28
   10fac:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   10fb0:	01 15       	cp	r16, r1
   10fb2:	11 05       	cpc	r17, r1
   10fb4:	b9 f0       	breq	.+46     	; 0x10fe4 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   10fb6:	41 2f       	mov	r20, r17
   10fb8:	64 e0       	ldi	r22, 0x04	; 4
   10fba:	70 e0       	ldi	r23, 0x00	; 0
   10fbc:	8c 2f       	mov	r24, r28
   10fbe:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10fc2:	40 2f       	mov	r20, r16
   10fc4:	65 e0       	ldi	r22, 0x05	; 5
   10fc6:	70 e0       	ldi	r23, 0x00	; 0
   10fc8:	8c 2f       	mov	r24, r28
   10fca:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   10fce:	61 e0       	ldi	r22, 0x01	; 1
   10fd0:	70 e0       	ldi	r23, 0x00	; 0
   10fd2:	8c 2f       	mov	r24, r28
   10fd4:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   10fd8:	81 e0       	ldi	r24, 0x01	; 1
   10fda:	df 91       	pop	r29
   10fdc:	cf 91       	pop	r28
   10fde:	1f 91       	pop	r17
   10fe0:	0f 91       	pop	r16
   10fe2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   10fe4:	00 91 ec 10 	lds	r16, 0x10EC	; 0x8010ec <local_port>
   10fe8:	10 91 ed 10 	lds	r17, 0x10ED	; 0x8010ed <local_port+0x1>
   10fec:	0f 5f       	subi	r16, 0xFF	; 255
   10fee:	1f 4f       	sbci	r17, 0xFF	; 255
   10ff0:	10 93 ed 10 	sts	0x10ED, r17	; 0x8010ed <local_port+0x1>
   10ff4:	00 93 ec 10 	sts	0x10EC, r16	; 0x8010ec <local_port>
   10ff8:	de cf       	rjmp	.-68     	; 0x10fb6 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00010ffa <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   10ffa:	ef 92       	push	r14
   10ffc:	ff 92       	push	r15
   10ffe:	1f 93       	push	r17
   11000:	cf 93       	push	r28
   11002:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   11004:	fc 01       	movw	r30, r24
   11006:	24 85       	ldd	r18, Z+12	; 0x0c
   11008:	28 30       	cpi	r18, 0x08	; 8
   1100a:	39 f0       	breq	.+14     	; 0x1101a <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   1100c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1100e:	df 91       	pop	r29
   11010:	cf 91       	pop	r28
   11012:	1f 91       	pop	r17
   11014:	ff 90       	pop	r15
   11016:	ef 90       	pop	r14
   11018:	08 95       	ret
   1101a:	7b 01       	movw	r14, r22
   1101c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   1101e:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   11020:	63 e0       	ldi	r22, 0x03	; 3
   11022:	70 e0       	ldi	r23, 0x00	; 0
   11024:	81 2f       	mov	r24, r17
   11026:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1102a:	81 11       	cpse	r24, r1
   1102c:	0e c0       	rjmp	.+28     	; 0x1104a <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1102e:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   11030:	8c 85       	ldd	r24, Y+12	; 0x0c
   11032:	88 30       	cpi	r24, 0x08	; 8
   11034:	59 f3       	breq	.-42     	; 0x1100c <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   11036:	fe 86       	std	Y+14, r15	; 0x0e
   11038:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   1103a:	1a 8e       	std	Y+26, r1	; 0x1a
   1103c:	19 8e       	std	Y+25, r1	; 0x19
socket():
   1103e:	a7 01       	movw	r20, r14
   11040:	62 e0       	ldi	r22, 0x02	; 2
   11042:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   11046:	81 e0       	ldi	r24, 0x01	; 1
   11048:	e2 cf       	rjmp	.-60     	; 0x1100e <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1104a:	88 31       	cpi	r24, 0x18	; 24
   1104c:	81 f3       	breq	.-32     	; 0x1102e <EthernetUDP::begin(unsigned int)+0x34>
   1104e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   11050:	18 30       	cpi	r17, 0x08	; 8
   11052:	31 f7       	brne	.-52     	; 0x11020 <EthernetUDP::begin(unsigned int)+0x26>
   11054:	ed cf       	rjmp	.-38     	; 0x11030 <EthernetUDP::begin(unsigned int)+0x36>

00011056 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   11056:	cf 93       	push	r28
   11058:	df 93       	push	r29
   1105a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   1105c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1105e:	88 30       	cpi	r24, 0x08	; 8
   11060:	21 f0       	breq	.+8      	; 0x1106a <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   11062:	0e 94 bc 87 	call	0x10f78	; 0x10f78 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   11066:	88 e0       	ldi	r24, 0x08	; 8
   11068:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   1106a:	df 91       	pop	r29
   1106c:	cf 91       	pop	r28
   1106e:	08 95       	ret

00011070 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   11070:	8f 92       	push	r8
   11072:	9f 92       	push	r9
   11074:	af 92       	push	r10
   11076:	bf 92       	push	r11
   11078:	cf 92       	push	r12
   1107a:	df 92       	push	r13
   1107c:	ef 92       	push	r14
   1107e:	ff 92       	push	r15
   11080:	0f 93       	push	r16
   11082:	1f 93       	push	r17
   11084:	cf 93       	push	r28
   11086:	6c 01       	movw	r12, r24
   11088:	5b 01       	movw	r10, r22
   1108a:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   1108c:	fc 01       	movw	r30, r24
   1108e:	c4 85       	ldd	r28, Z+12	; 0x0c
   11090:	c8 30       	cpi	r28, 0x08	; 8
   11092:	a1 f4       	brne	.+40     	; 0x110bc <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   11094:	81 e0       	ldi	r24, 0x01	; 1
   11096:	90 e0       	ldi	r25, 0x00	; 0
   11098:	f6 01       	movw	r30, r12
   1109a:	93 83       	std	Z+3, r25	; 0x03
   1109c:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   1109e:	f1 2c       	mov	r15, r1
   110a0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   110a2:	c7 01       	movw	r24, r14
   110a4:	cf 91       	pop	r28
   110a6:	1f 91       	pop	r17
   110a8:	0f 91       	pop	r16
   110aa:	ff 90       	pop	r15
   110ac:	ef 90       	pop	r14
   110ae:	df 90       	pop	r13
   110b0:	cf 90       	pop	r12
   110b2:	bf 90       	pop	r11
   110b4:	af 90       	pop	r10
   110b6:	9f 90       	pop	r9
   110b8:	8f 90       	pop	r8
   110ba:	08 95       	ret
   110bc:	8a 01       	movw	r16, r20
   110be:	41 30       	cpi	r20, 0x01	; 1
   110c0:	58 40       	sbci	r21, 0x08	; 8
   110c2:	10 f0       	brcs	.+4      	; 0x110c8 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
   110c4:	00 e0       	ldi	r16, 0x00	; 0
   110c6:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
   110c8:	8c 2f       	mov	r24, r28
   110ca:	0e 94 20 71 	call	0xe240	; 0xe240 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   110ce:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   110d0:	63 e0       	ldi	r22, 0x03	; 3
   110d2:	70 e0       	ldi	r23, 0x00	; 0
   110d4:	8c 2f       	mov	r24, r28
   110d6:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
   110da:	87 31       	cpi	r24, 0x17	; 23
   110dc:	11 f0       	breq	.+4      	; 0x110e2 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
   110de:	8c 31       	cpi	r24, 0x1C	; 28
   110e0:	09 f5       	brne	.+66     	; 0x11124 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
   110e2:	80 16       	cp	r8, r16
   110e4:	91 06       	cpc	r9, r17
   110e6:	80 f3       	brcs	.-32     	; 0x110c8 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
   110e8:	98 01       	movw	r18, r16
   110ea:	a5 01       	movw	r20, r10
   110ec:	70 e0       	ldi	r23, 0x00	; 0
   110ee:	60 e0       	ldi	r22, 0x00	; 0
   110f0:	8c 2f       	mov	r24, r28
   110f2:	0e 94 9e 85 	call	0x10b3c	; 0x10b3c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
   110f6:	60 e2       	ldi	r22, 0x20	; 32
   110f8:	70 e0       	ldi	r23, 0x00	; 0
   110fa:	8c 2f       	mov	r24, r28
   110fc:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   11100:	62 e0       	ldi	r22, 0x02	; 2
   11102:	70 e0       	ldi	r23, 0x00	; 0
   11104:	8c 2f       	mov	r24, r28
   11106:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   1110a:	84 fd       	sbrc	r24, 4
   1110c:	0e c0       	rjmp	.+28     	; 0x1112a <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1110e:	63 e0       	ldi	r22, 0x03	; 3
   11110:	70 e0       	ldi	r23, 0x00	; 0
   11112:	8c 2f       	mov	r24, r28
   11114:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
   11118:	81 11       	cpse	r24, r1
   1111a:	f2 cf       	rjmp	.-28     	; 0x11100 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
   1111c:	8c 2f       	mov	r24, r28
   1111e:	0e 94 bc 87 	call	0x10f78	; 0x10f78 <close(unsigned char)>
   11122:	b8 cf       	rjmp	.-144    	; 0x11094 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
   11124:	10 e0       	ldi	r17, 0x00	; 0
   11126:	00 e0       	ldi	r16, 0x00	; 0
   11128:	df cf       	rjmp	.-66     	; 0x110e8 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1112a:	40 e1       	ldi	r20, 0x10	; 16
   1112c:	62 e0       	ldi	r22, 0x02	; 2
   1112e:	70 e0       	ldi	r23, 0x00	; 0
   11130:	8c 2f       	mov	r24, r28
   11132:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   11136:	01 2b       	or	r16, r17
   11138:	09 f0       	breq	.+2      	; 0x1113c <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
   1113a:	b3 cf       	rjmp	.-154    	; 0x110a2 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
   1113c:	ab cf       	rjmp	.-170    	; 0x11094 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

0001113e <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   1113e:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   11140:	fc 01       	movw	r30, r24
   11142:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   11144:	60 e2       	ldi	r22, 0x20	; 32
   11146:	70 e0       	ldi	r23, 0x00	; 0
   11148:	8c 2f       	mov	r24, r28
   1114a:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1114e:	62 e0       	ldi	r22, 0x02	; 2
   11150:	70 e0       	ldi	r23, 0x00	; 0
   11152:	8c 2f       	mov	r24, r28
   11154:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   11158:	84 fd       	sbrc	r24, 4
   1115a:	11 c0       	rjmp	.+34     	; 0x1117e <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1115c:	62 e0       	ldi	r22, 0x02	; 2
   1115e:	70 e0       	ldi	r23, 0x00	; 0
   11160:	8c 2f       	mov	r24, r28
   11162:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   11166:	83 ff       	sbrs	r24, 3
   11168:	f2 cf       	rjmp	.-28     	; 0x1114e <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1116a:	48 e1       	ldi	r20, 0x18	; 24
   1116c:	62 e0       	ldi	r22, 0x02	; 2
   1116e:	70 e0       	ldi	r23, 0x00	; 0
   11170:	8c 2f       	mov	r24, r28
   11172:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   11176:	90 e0       	ldi	r25, 0x00	; 0
   11178:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   1117a:	cf 91       	pop	r28
   1117c:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1117e:	40 e1       	ldi	r20, 0x10	; 16
   11180:	62 e0       	ldi	r22, 0x02	; 2
   11182:	70 e0       	ldi	r23, 0x00	; 0
   11184:	8c 2f       	mov	r24, r28
   11186:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   1118a:	81 e0       	ldi	r24, 0x01	; 1
   1118c:	90 e0       	ldi	r25, 0x00	; 0
   1118e:	f5 cf       	rjmp	.-22     	; 0x1117a <EthernetUDP::endPacket()+0x3c>

00011190 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   11190:	1f 93       	push	r17
   11192:	cf 93       	push	r28
   11194:	df 93       	push	r29
   11196:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   11198:	dc 01       	movw	r26, r24
   1119a:	58 96       	adiw	r26, 0x18	; 24
   1119c:	1c 92       	st	X, r1
   1119e:	1e 92       	st	-X, r1
   111a0:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   111a2:	22 81       	ldd	r18, Z+2	; 0x02
   111a4:	21 11       	cpse	r18, r1
   111a6:	09 c0       	rjmp	.+18     	; 0x111ba <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   111a8:	23 81       	ldd	r18, Z+3	; 0x03
   111aa:	21 11       	cpse	r18, r1
   111ac:	06 c0       	rjmp	.+12     	; 0x111ba <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   111ae:	24 81       	ldd	r18, Z+4	; 0x04
   111b0:	21 11       	cpse	r18, r1
   111b2:	03 c0       	rjmp	.+6      	; 0x111ba <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   111b4:	25 81       	ldd	r18, Z+5	; 0x05
   111b6:	22 23       	and	r18, r18
   111b8:	39 f1       	breq	.+78     	; 0x11208 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   111ba:	41 15       	cp	r20, r1
   111bc:	51 05       	cpc	r21, r1
   111be:	21 f1       	breq	.+72     	; 0x11208 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   111c0:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   111c2:	dc 01       	movw	r26, r24
   111c4:	1c 96       	adiw	r26, 0x0c	; 12
   111c6:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   111c8:	af 01       	movw	r20, r30
   111ca:	4e 5f       	subi	r20, 0xFE	; 254
   111cc:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   111ce:	61 2f       	mov	r22, r17
   111d0:	62 95       	swap	r22
   111d2:	66 0f       	add	r22, r22
   111d4:	60 7e       	andi	r22, 0xE0	; 224
   111d6:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   111d8:	24 e0       	ldi	r18, 0x04	; 4
   111da:	30 e0       	ldi	r19, 0x00	; 0
   111dc:	8c e0       	ldi	r24, 0x0C	; 12
   111de:	90 e0       	ldi	r25, 0x00	; 0
   111e0:	0e 94 e1 84 	call	0x109c2	; 0x109c2 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   111e4:	4d 2f       	mov	r20, r29
   111e6:	60 e1       	ldi	r22, 0x10	; 16
   111e8:	70 e0       	ldi	r23, 0x00	; 0
   111ea:	81 2f       	mov	r24, r17
   111ec:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   111f0:	4c 2f       	mov	r20, r28
   111f2:	61 e1       	ldi	r22, 0x11	; 17
   111f4:	70 e0       	ldi	r23, 0x00	; 0
   111f6:	81 2f       	mov	r24, r17
   111f8:	0e 94 95 85 	call	0x10b2a	; 0x10b2a <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   111fc:	81 e0       	ldi	r24, 0x01	; 1
   111fe:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   11200:	df 91       	pop	r29
   11202:	cf 91       	pop	r28
   11204:	1f 91       	pop	r17
   11206:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   11208:	90 e0       	ldi	r25, 0x00	; 0
   1120a:	80 e0       	ldi	r24, 0x00	; 0
   1120c:	f9 cf       	rjmp	.-14     	; 0x11200 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001120e <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1120e:	fc 01       	movw	r30, r24
   11210:	84 85       	ldd	r24, Z+12	; 0x0c
   11212:	88 30       	cpi	r24, 0x08	; 8
   11214:	21 f0       	breq	.+8      	; 0x1121e <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   11216:	63 e0       	ldi	r22, 0x03	; 3
   11218:	70 e0       	ldi	r23, 0x00	; 0
   1121a:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1121e:	80 e0       	ldi	r24, 0x00	; 0
   11220:	08 95       	ret

00011222 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   11222:	cf 93       	push	r28
   11224:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   11226:	fc 01       	movw	r30, r24
   11228:	24 85       	ldd	r18, Z+12	; 0x0c
   1122a:	28 30       	cpi	r18, 0x08	; 8
   1122c:	d9 f0       	breq	.+54     	; 0x11264 <EthernetClient::connected()+0x42>
   1122e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   11230:	0e 94 07 89 	call	0x1120e	; 0x1120e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   11234:	84 31       	cpi	r24, 0x14	; 20
   11236:	89 f0       	breq	.+34     	; 0x1125a <EthernetClient::connected()+0x38>
   11238:	88 23       	and	r24, r24
   1123a:	79 f0       	breq	.+30     	; 0x1125a <EthernetClient::connected()+0x38>
   1123c:	88 31       	cpi	r24, 0x18	; 24
   1123e:	69 f0       	breq	.+26     	; 0x1125a <EthernetClient::connected()+0x38>
   11240:	21 e0       	ldi	r18, 0x01	; 1
   11242:	8c 31       	cpi	r24, 0x1C	; 28
   11244:	59 f4       	brne	.+22     	; 0x1125c <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   11246:	e8 81       	ld	r30, Y
   11248:	f9 81       	ldd	r31, Y+1	; 0x01
   1124a:	00 84       	ldd	r0, Z+8	; 0x08
   1124c:	f1 85       	ldd	r31, Z+9	; 0x09
   1124e:	e0 2d       	mov	r30, r0
   11250:	ce 01       	movw	r24, r28
   11252:	19 95       	eicall
   11254:	21 e0       	ldi	r18, 0x01	; 1
   11256:	89 2b       	or	r24, r25
   11258:	09 f4       	brne	.+2      	; 0x1125c <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1125a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1125c:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   1125e:	df 91       	pop	r29
   11260:	cf 91       	pop	r28
   11262:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   11264:	80 e0       	ldi	r24, 0x00	; 0
   11266:	fb cf       	rjmp	.-10     	; 0x1125e <EthernetClient::connected()+0x3c>

00011268 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   11268:	cf 92       	push	r12
   1126a:	df 92       	push	r13
   1126c:	ef 92       	push	r14
   1126e:	ff 92       	push	r15
   11270:	cf 93       	push	r28
   11272:	df 93       	push	r29
   11274:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   11276:	8c 85       	ldd	r24, Y+12	; 0x0c
   11278:	88 30       	cpi	r24, 0x08	; 8
   1127a:	49 f1       	breq	.+82     	; 0x112ce <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   1127c:	68 e0       	ldi	r22, 0x08	; 8
   1127e:	70 e0       	ldi	r23, 0x00	; 0
   11280:	0e 94 10 86 	call	0x10c20	; 0x10c20 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   11284:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   11288:	6b 01       	movw	r12, r22
   1128a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1128c:	ce 01       	movw	r24, r28
   1128e:	0e 94 07 89 	call	0x1120e	; 0x1120e <EthernetClient::status()>
   11292:	88 23       	and	r24, r24
   11294:	91 f0       	breq	.+36     	; 0x112ba <EthernetClient::stop()+0x52>
   11296:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   1129a:	6c 19       	sub	r22, r12
   1129c:	7d 09       	sbc	r23, r13
   1129e:	8e 09       	sbc	r24, r14
   112a0:	9f 09       	sbc	r25, r15
   112a2:	68 3e       	cpi	r22, 0xE8	; 232
   112a4:	73 40       	sbci	r23, 0x03	; 3
   112a6:	81 05       	cpc	r24, r1
   112a8:	91 05       	cpc	r25, r1
   112aa:	38 f4       	brcc	.+14     	; 0x112ba <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   112ac:	61 e0       	ldi	r22, 0x01	; 1
   112ae:	70 e0       	ldi	r23, 0x00	; 0
   112b0:	80 e0       	ldi	r24, 0x00	; 0
   112b2:	90 e0       	ldi	r25, 0x00	; 0
   112b4:	0e 94 a4 78 	call	0xf148	; 0xf148 <delay>
   112b8:	e9 cf       	rjmp	.-46     	; 0x1128c <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   112ba:	ce 01       	movw	r24, r28
   112bc:	0e 94 07 89 	call	0x1120e	; 0x1120e <EthernetClient::status()>
   112c0:	88 23       	and	r24, r24
   112c2:	19 f0       	breq	.+6      	; 0x112ca <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   112c4:	8c 85       	ldd	r24, Y+12	; 0x0c
   112c6:	0e 94 bc 87 	call	0x10f78	; 0x10f78 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   112ca:	88 e0       	ldi	r24, 0x08	; 8
   112cc:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   112ce:	df 91       	pop	r29
   112d0:	cf 91       	pop	r28
   112d2:	ff 90       	pop	r15
   112d4:	ef 90       	pop	r14
   112d6:	df 90       	pop	r13
   112d8:	cf 90       	pop	r12
   112da:	08 95       	ret

000112dc <localtime>:
localtime():
   112dc:	6b e3       	ldi	r22, 0x3B	; 59
   112de:	73 e1       	ldi	r23, 0x13	; 19
   112e0:	0e 94 75 89 	call	0x112ea	; 0x112ea <localtime_r>
   112e4:	8b e3       	ldi	r24, 0x3B	; 59
   112e6:	93 e1       	ldi	r25, 0x13	; 19
   112e8:	08 95       	ret

000112ea <localtime_r>:
localtime_r():
   112ea:	cf 92       	push	r12
   112ec:	df 92       	push	r13
   112ee:	ef 92       	push	r14
   112f0:	ff 92       	push	r15
   112f2:	0f 93       	push	r16
   112f4:	1f 93       	push	r17
   112f6:	cf 93       	push	r28
   112f8:	df 93       	push	r29
   112fa:	00 d0       	rcall	.+0      	; 0x112fc <localtime_r+0x12>
   112fc:	1f 92       	push	r1
   112fe:	cd b7       	in	r28, 0x3d	; 61
   11300:	de b7       	in	r29, 0x3e	; 62
   11302:	6c 01       	movw	r12, r24
   11304:	7b 01       	movw	r14, r22
   11306:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <__dst_ptr>
   1130a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <__dst_ptr+0x1>
   1130e:	0f ef       	ldi	r16, 0xFF	; 255
   11310:	1f ef       	ldi	r17, 0xFF	; 255
   11312:	30 97       	sbiw	r30, 0x00	; 0
   11314:	21 f0       	breq	.+8      	; 0x1131e <localtime_r+0x34>
   11316:	67 e4       	ldi	r22, 0x47	; 71
   11318:	73 e1       	ldi	r23, 0x13	; 19
   1131a:	19 95       	eicall
   1131c:	8c 01       	movw	r16, r24
   1131e:	f6 01       	movw	r30, r12
   11320:	80 81       	ld	r24, Z
   11322:	91 81       	ldd	r25, Z+1	; 0x01
   11324:	a2 81       	ldd	r26, Z+2	; 0x02
   11326:	b3 81       	ldd	r27, Z+3	; 0x03
   11328:	40 91 47 13 	lds	r20, 0x1347	; 0x801347 <__utc_offset>
   1132c:	50 91 48 13 	lds	r21, 0x1348	; 0x801348 <__utc_offset+0x1>
   11330:	60 91 49 13 	lds	r22, 0x1349	; 0x801349 <__utc_offset+0x2>
   11334:	70 91 4a 13 	lds	r23, 0x134A	; 0x80134a <__utc_offset+0x3>
   11338:	84 0f       	add	r24, r20
   1133a:	95 1f       	adc	r25, r21
   1133c:	a6 1f       	adc	r26, r22
   1133e:	b7 1f       	adc	r27, r23
   11340:	10 16       	cp	r1, r16
   11342:	11 06       	cpc	r1, r17
   11344:	cc f0       	brlt	.+50     	; 0x11378 <localtime_r+0x8e>
   11346:	89 83       	std	Y+1, r24	; 0x01
   11348:	9a 83       	std	Y+2, r25	; 0x02
   1134a:	ab 83       	std	Y+3, r26	; 0x03
   1134c:	bc 83       	std	Y+4, r27	; 0x04
   1134e:	b7 01       	movw	r22, r14
   11350:	ce 01       	movw	r24, r28
   11352:	01 96       	adiw	r24, 0x01	; 1
   11354:	0e 94 c6 89 	call	0x1138c	; 0x1138c <gmtime_r>
   11358:	f7 01       	movw	r30, r14
   1135a:	13 87       	std	Z+11, r17	; 0x0b
   1135c:	02 87       	std	Z+10, r16	; 0x0a
   1135e:	0f 90       	pop	r0
   11360:	0f 90       	pop	r0
   11362:	0f 90       	pop	r0
   11364:	0f 90       	pop	r0
   11366:	df 91       	pop	r29
   11368:	cf 91       	pop	r28
   1136a:	1f 91       	pop	r17
   1136c:	0f 91       	pop	r16
   1136e:	ff 90       	pop	r15
   11370:	ef 90       	pop	r14
   11372:	df 90       	pop	r13
   11374:	cf 90       	pop	r12
   11376:	08 95       	ret
   11378:	a8 01       	movw	r20, r16
   1137a:	01 2e       	mov	r0, r17
   1137c:	00 0c       	add	r0, r0
   1137e:	66 0b       	sbc	r22, r22
   11380:	77 0b       	sbc	r23, r23
   11382:	84 0f       	add	r24, r20
   11384:	95 1f       	adc	r25, r21
   11386:	a6 1f       	adc	r26, r22
   11388:	b7 1f       	adc	r27, r23
   1138a:	dd cf       	rjmp	.-70     	; 0x11346 <localtime_r+0x5c>

0001138c <gmtime_r>:
gmtime_r():
   1138c:	cf 92       	push	r12
   1138e:	df 92       	push	r13
   11390:	ef 92       	push	r14
   11392:	ff 92       	push	r15
   11394:	0f 93       	push	r16
   11396:	1f 93       	push	r17
   11398:	cf 93       	push	r28
   1139a:	df 93       	push	r29
   1139c:	00 d0       	rcall	.+0      	; 0x1139e <gmtime_r+0x12>
   1139e:	00 d0       	rcall	.+0      	; 0x113a0 <gmtime_r+0x14>
   113a0:	1f 92       	push	r1
   113a2:	1f 92       	push	r1
   113a4:	cd b7       	in	r28, 0x3d	; 61
   113a6:	de b7       	in	r29, 0x3e	; 62
   113a8:	8b 01       	movw	r16, r22
   113aa:	fc 01       	movw	r30, r24
   113ac:	60 81       	ld	r22, Z
   113ae:	71 81       	ldd	r23, Z+1	; 0x01
   113b0:	82 81       	ldd	r24, Z+2	; 0x02
   113b2:	93 81       	ldd	r25, Z+3	; 0x03
   113b4:	20 e8       	ldi	r18, 0x80	; 128
   113b6:	31 e5       	ldi	r19, 0x51	; 81
   113b8:	41 e0       	ldi	r20, 0x01	; 1
   113ba:	50 e0       	ldi	r21, 0x00	; 0
   113bc:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
   113c0:	69 01       	movw	r12, r18
   113c2:	7a 01       	movw	r14, r20
   113c4:	2c e3       	ldi	r18, 0x3C	; 60
   113c6:	30 e0       	ldi	r19, 0x00	; 0
   113c8:	40 e0       	ldi	r20, 0x00	; 0
   113ca:	50 e0       	ldi	r21, 0x00	; 0
   113cc:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
   113d0:	29 83       	std	Y+1, r18	; 0x01
   113d2:	3a 83       	std	Y+2, r19	; 0x02
   113d4:	4b 83       	std	Y+3, r20	; 0x03
   113d6:	5c 83       	std	Y+4, r21	; 0x04
   113d8:	89 81       	ldd	r24, Y+1	; 0x01
   113da:	9a 81       	ldd	r25, Y+2	; 0x02
   113dc:	ab 81       	ldd	r26, Y+3	; 0x03
   113de:	bc 81       	ldd	r27, Y+4	; 0x04
   113e0:	f8 01       	movw	r30, r16
   113e2:	60 83       	st	Z, r22
   113e4:	6c e3       	ldi	r22, 0x3C	; 60
   113e6:	70 e0       	ldi	r23, 0x00	; 0
   113e8:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   113ec:	dc 01       	movw	r26, r24
   113ee:	f8 01       	movw	r30, r16
   113f0:	a1 83       	std	Z+1, r26	; 0x01
   113f2:	62 83       	std	Z+2, r22	; 0x02
   113f4:	c6 01       	movw	r24, r12
   113f6:	06 96       	adiw	r24, 0x06	; 6
   113f8:	67 e0       	ldi	r22, 0x07	; 7
   113fa:	70 e0       	ldi	r23, 0x00	; 0
   113fc:	0e 94 30 a2 	call	0x14460	; 0x14460 <__udivmodhi4>
   11400:	84 83       	std	Z+4, r24	; 0x04
   11402:	2d ea       	ldi	r18, 0xAD	; 173
   11404:	3e e8       	ldi	r19, 0x8E	; 142
   11406:	40 e0       	ldi	r20, 0x00	; 0
   11408:	50 e0       	ldi	r21, 0x00	; 0
   1140a:	c7 01       	movw	r24, r14
   1140c:	b6 01       	movw	r22, r12
   1140e:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
   11412:	29 83       	std	Y+1, r18	; 0x01
   11414:	3a 83       	std	Y+2, r19	; 0x02
   11416:	6d 83       	std	Y+5, r22	; 0x05
   11418:	7e 83       	std	Y+6, r23	; 0x06
   1141a:	8f 83       	std	Y+7, r24	; 0x07
   1141c:	98 87       	std	Y+8, r25	; 0x08
   1141e:	89 81       	ldd	r24, Y+1	; 0x01
   11420:	9a 81       	ldd	r25, Y+2	; 0x02
   11422:	24 e6       	ldi	r18, 0x64	; 100
   11424:	28 9f       	mul	r18, r24
   11426:	60 01       	movw	r12, r0
   11428:	29 9f       	mul	r18, r25
   1142a:	d0 0c       	add	r13, r0
   1142c:	11 24       	eor	r1, r1
   1142e:	6d 81       	ldd	r22, Y+5	; 0x05
   11430:	7e 81       	ldd	r23, Y+6	; 0x06
   11432:	8f 81       	ldd	r24, Y+7	; 0x07
   11434:	98 85       	ldd	r25, Y+8	; 0x08
   11436:	25 eb       	ldi	r18, 0xB5	; 181
   11438:	35 e0       	ldi	r19, 0x05	; 5
   1143a:	40 e0       	ldi	r20, 0x00	; 0
   1143c:	50 e0       	ldi	r21, 0x00	; 0
   1143e:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
   11442:	29 83       	std	Y+1, r18	; 0x01
   11444:	3a 83       	std	Y+2, r19	; 0x02
   11446:	6d 83       	std	Y+5, r22	; 0x05
   11448:	7e 83       	std	Y+6, r23	; 0x06
   1144a:	e9 80       	ldd	r14, Y+1	; 0x01
   1144c:	fa 80       	ldd	r15, Y+2	; 0x02
   1144e:	ee 0c       	add	r14, r14
   11450:	ff 1c       	adc	r15, r15
   11452:	ee 0c       	add	r14, r14
   11454:	ff 1c       	adc	r15, r15
   11456:	ec 0c       	add	r14, r12
   11458:	fd 1c       	adc	r15, r13
   1145a:	8d 81       	ldd	r24, Y+5	; 0x05
   1145c:	9e 81       	ldd	r25, Y+6	; 0x06
   1145e:	f5 e6       	ldi	r31, 0x65	; 101
   11460:	ef 16       	cp	r14, r31
   11462:	f1 04       	cpc	r15, r1
   11464:	08 f4       	brcc	.+2      	; 0x11468 <gmtime_r+0xdc>
   11466:	3f c0       	rjmp	.+126    	; 0x114e6 <gmtime_r+0x15a>
   11468:	01 96       	adiw	r24, 0x01	; 1
   1146a:	21 e0       	ldi	r18, 0x01	; 1
   1146c:	30 e0       	ldi	r19, 0x00	; 0
   1146e:	a9 01       	movw	r20, r18
   11470:	44 59       	subi	r20, 0x94	; 148
   11472:	5e 4f       	sbci	r21, 0xFE	; 254
   11474:	48 17       	cp	r20, r24
   11476:	59 07       	cpc	r21, r25
   11478:	60 f4       	brcc	.+24     	; 0x11492 <gmtime_r+0x106>
   1147a:	6d e6       	ldi	r22, 0x6D	; 109
   1147c:	71 e0       	ldi	r23, 0x01	; 1
   1147e:	82 1b       	sub	r24, r18
   11480:	93 0b       	sbc	r25, r19
   11482:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   11486:	dc 01       	movw	r26, r24
   11488:	e6 0e       	add	r14, r22
   1148a:	f7 1e       	adc	r15, r23
   1148c:	cd 01       	movw	r24, r26
   1148e:	30 e0       	ldi	r19, 0x00	; 0
   11490:	20 e0       	ldi	r18, 0x00	; 0
   11492:	44 e6       	ldi	r20, 0x64	; 100
   11494:	e4 0e       	add	r14, r20
   11496:	f1 1c       	adc	r15, r1
   11498:	f8 01       	movw	r30, r16
   1149a:	f7 82       	std	Z+7, r15	; 0x07
   1149c:	e6 82       	std	Z+6, r14	; 0x06
   1149e:	91 87       	std	Z+9, r25	; 0x09
   114a0:	80 87       	std	Z+8, r24	; 0x08
   114a2:	25 5c       	subi	r18, 0xC5	; 197
   114a4:	3f 4f       	sbci	r19, 0xFF	; 255
   114a6:	82 17       	cp	r24, r18
   114a8:	93 07       	cpc	r25, r19
   114aa:	38 f5       	brcc	.+78     	; 0x114fa <gmtime_r+0x16e>
   114ac:	6f e1       	ldi	r22, 0x1F	; 31
   114ae:	70 e0       	ldi	r23, 0x00	; 0
   114b0:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   114b4:	dc 01       	movw	r26, r24
   114b6:	f8 01       	movw	r30, r16
   114b8:	65 83       	std	Z+5, r22	; 0x05
   114ba:	a3 83       	std	Z+3, r26	; 0x03
   114bc:	f8 01       	movw	r30, r16
   114be:	13 86       	std	Z+11, r1	; 0x0b
   114c0:	12 86       	std	Z+10, r1	; 0x0a
   114c2:	83 81       	ldd	r24, Z+3	; 0x03
   114c4:	8f 5f       	subi	r24, 0xFF	; 255
   114c6:	83 83       	std	Z+3, r24	; 0x03
   114c8:	28 96       	adiw	r28, 0x08	; 8
   114ca:	0f b6       	in	r0, 0x3f	; 63
   114cc:	f8 94       	cli
   114ce:	de bf       	out	0x3e, r29	; 62
   114d0:	0f be       	out	0x3f, r0	; 63
   114d2:	cd bf       	out	0x3d, r28	; 61
   114d4:	df 91       	pop	r29
   114d6:	cf 91       	pop	r28
   114d8:	1f 91       	pop	r17
   114da:	0f 91       	pop	r16
   114dc:	ff 90       	pop	r15
   114de:	ef 90       	pop	r14
   114e0:	df 90       	pop	r13
   114e2:	cf 90       	pop	r12
   114e4:	08 95       	ret
   114e6:	51 e0       	ldi	r21, 0x01	; 1
   114e8:	40 e0       	ldi	r20, 0x00	; 0
   114ea:	24 e6       	ldi	r18, 0x64	; 100
   114ec:	e2 16       	cp	r14, r18
   114ee:	f1 04       	cpc	r15, r1
   114f0:	09 f4       	brne	.+2      	; 0x114f4 <gmtime_r+0x168>
   114f2:	50 e0       	ldi	r21, 0x00	; 0
   114f4:	25 2f       	mov	r18, r21
   114f6:	34 2f       	mov	r19, r20
   114f8:	ba cf       	rjmp	.-140    	; 0x1146e <gmtime_r+0xe2>
   114fa:	69 e9       	ldi	r22, 0x99	; 153
   114fc:	70 e0       	ldi	r23, 0x00	; 0
   114fe:	82 1b       	sub	r24, r18
   11500:	93 0b       	sbc	r25, r19
   11502:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   11506:	dc 01       	movw	r26, r24
   11508:	26 2f       	mov	r18, r22
   1150a:	22 0f       	add	r18, r18
   1150c:	22 0f       	add	r18, r18
   1150e:	f2 2e       	mov	r15, r18
   11510:	f6 0e       	add	r15, r22
   11512:	6d e3       	ldi	r22, 0x3D	; 61
   11514:	70 e0       	ldi	r23, 0x00	; 0
   11516:	cd 01       	movw	r24, r26
   11518:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   1151c:	dc 01       	movw	r26, r24
   1151e:	e6 2e       	mov	r14, r22
   11520:	ee 0c       	add	r14, r14
   11522:	6f e1       	ldi	r22, 0x1F	; 31
   11524:	70 e0       	ldi	r23, 0x00	; 0
   11526:	cd 01       	movw	r24, r26
   11528:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   1152c:	dc 01       	movw	r26, r24
   1152e:	22 e0       	ldi	r18, 0x02	; 2
   11530:	26 0f       	add	r18, r22
   11532:	2f 0d       	add	r18, r15
   11534:	2e 0d       	add	r18, r14
   11536:	f8 01       	movw	r30, r16
   11538:	25 83       	std	Z+5, r18	; 0x05
   1153a:	bf cf       	rjmp	.-130    	; 0x114ba <gmtime_r+0x12e>

0001153c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1153c:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1153e:	80 81       	ld	r24, Z
   11540:	91 81       	ldd	r25, Z+1	; 0x01
   11542:	87 30       	cpi	r24, 0x07	; 7
   11544:	91 05       	cpc	r25, r1
   11546:	38 f4       	brcc	.+14     	; 0x11556 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   11548:	85 30       	cpi	r24, 0x05	; 5
   1154a:	91 05       	cpc	r25, r1
   1154c:	88 f4       	brcc	.+34     	; 0x11570 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1154e:	03 97       	sbiw	r24, 0x03	; 3
   11550:	a0 f4       	brcc	.+40     	; 0x1157a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   11552:	80 e0       	ldi	r24, 0x00	; 0
   11554:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   11556:	87 30       	cpi	r24, 0x07	; 7
   11558:	91 05       	cpc	r25, r1
   1155a:	61 f0       	breq	.+24     	; 0x11574 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   1155c:	0a 97       	sbiw	r24, 0x0a	; 10
   1155e:	c9 f7       	brne	.-14     	; 0x11552 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   11560:	62 81       	ldd	r22, Z+2	; 0x02
   11562:	73 81       	ldd	r23, Z+3	; 0x03
   11564:	84 81       	ldd	r24, Z+4	; 0x04
   11566:	95 81       	ldd	r25, Z+5	; 0x05
   11568:	0e 94 99 a3 	call	0x14732	; 0x14732 <__fixunssfsi>
   1156c:	86 2f       	mov	r24, r22
   1156e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   11570:	82 81       	ldd	r24, Z+2	; 0x02
   11572:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   11574:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   11576:	81 95       	neg	r24
   11578:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1157a:	02 80       	ldd	r0, Z+2	; 0x02
   1157c:	f3 81       	ldd	r31, Z+3	; 0x03
   1157e:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   11580:	30 97       	sbiw	r30, 0x00	; 0
   11582:	39 f3       	breq	.-50     	; 0x11552 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   11584:	80 81       	ld	r24, Z
   11586:	84 37       	cpi	r24, 0x74	; 116
   11588:	c9 f0       	breq	.+50     	; 0x115bc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1158a:	8b 32       	cpi	r24, 0x2B	; 43
   1158c:	89 f0       	breq	.+34     	; 0x115b0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   1158e:	8d 32       	cpi	r24, 0x2D	; 45
   11590:	81 f4       	brne	.+32     	; 0x115b2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   11592:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   11594:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   11596:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   11598:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1159a:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1159c:	30 ed       	ldi	r19, 0xD0	; 208
   1159e:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   115a0:	3a 30       	cpi	r19, 0x0A	; 10
   115a2:	48 f4       	brcc	.+18     	; 0x115b6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   115a4:	82 9f       	mul	r24, r18
   115a6:	60 0d       	add	r22, r0
   115a8:	11 24       	eor	r1, r1
   115aa:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   115ac:	80 53       	subi	r24, 0x30	; 48
   115ae:	f5 cf       	rjmp	.-22     	; 0x1159a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   115b0:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   115b2:	90 e0       	ldi	r25, 0x00	; 0
   115b4:	f0 cf       	rjmp	.-32     	; 0x11596 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   115b6:	91 11       	cpse	r25, r1
   115b8:	de cf       	rjmp	.-68     	; 0x11576 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   115ba:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   115bc:	81 e0       	ldi	r24, 0x01	; 1
   115be:	fd cf       	rjmp	.-6      	; 0x115ba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

000115c0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.6945():
   115c0:	0f 93       	push	r16
   115c2:	1f 93       	push	r17
   115c4:	cf 93       	push	r28
   115c6:	df 93       	push	r29
   115c8:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <Serial+0x3>
   115cc:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <Serial+0x2>
   115d0:	88 ee       	ldi	r24, 0xE8	; 232
   115d2:	93 e0       	ldi	r25, 0x03	; 3
   115d4:	a0 e0       	ldi	r26, 0x00	; 0
   115d6:	b0 e0       	ldi	r27, 0x00	; 0
   115d8:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <Serial+0x4>
   115dc:	90 93 81 0b 	sts	0x0B81, r25	; 0x800b81 <Serial+0x5>
   115e0:	a0 93 82 0b 	sts	0x0B82, r26	; 0x800b82 <Serial+0x6>
   115e4:	b0 93 83 0b 	sts	0x0B83, r27	; 0x800b83 <Serial+0x7>
   115e8:	2a e5       	ldi	r18, 0x5A	; 90
   115ea:	32 e0       	ldi	r19, 0x02	; 2
   115ec:	30 93 7d 0b 	sts	0x0B7D, r19	; 0x800b7d <Serial+0x1>
   115f0:	20 93 7c 0b 	sts	0x0B7C, r18	; 0x800b7c <Serial>
   115f4:	25 ec       	ldi	r18, 0xC5	; 197
   115f6:	30 e0       	ldi	r19, 0x00	; 0
   115f8:	30 93 89 0b 	sts	0x0B89, r19	; 0x800b89 <Serial+0xd>
   115fc:	20 93 88 0b 	sts	0x0B88, r18	; 0x800b88 <Serial+0xc>
   11600:	24 ec       	ldi	r18, 0xC4	; 196
   11602:	30 e0       	ldi	r19, 0x00	; 0
   11604:	30 93 8b 0b 	sts	0x0B8B, r19	; 0x800b8b <Serial+0xf>
   11608:	20 93 8a 0b 	sts	0x0B8A, r18	; 0x800b8a <Serial+0xe>
   1160c:	20 ec       	ldi	r18, 0xC0	; 192
   1160e:	30 e0       	ldi	r19, 0x00	; 0
   11610:	30 93 8d 0b 	sts	0x0B8D, r19	; 0x800b8d <Serial+0x11>
   11614:	20 93 8c 0b 	sts	0x0B8C, r18	; 0x800b8c <Serial+0x10>
   11618:	21 ec       	ldi	r18, 0xC1	; 193
   1161a:	30 e0       	ldi	r19, 0x00	; 0
   1161c:	30 93 8f 0b 	sts	0x0B8F, r19	; 0x800b8f <Serial+0x13>
   11620:	20 93 8e 0b 	sts	0x0B8E, r18	; 0x800b8e <Serial+0x12>
   11624:	22 ec       	ldi	r18, 0xC2	; 194
   11626:	30 e0       	ldi	r19, 0x00	; 0
   11628:	30 93 91 0b 	sts	0x0B91, r19	; 0x800b91 <Serial+0x15>
   1162c:	20 93 90 0b 	sts	0x0B90, r18	; 0x800b90 <Serial+0x14>
   11630:	26 ec       	ldi	r18, 0xC6	; 198
   11632:	30 e0       	ldi	r19, 0x00	; 0
   11634:	30 93 93 0b 	sts	0x0B93, r19	; 0x800b93 <Serial+0x17>
   11638:	20 93 92 0b 	sts	0x0B92, r18	; 0x800b92 <Serial+0x16>
   1163c:	10 92 95 0b 	sts	0x0B95, r1	; 0x800b95 <Serial+0x19>
   11640:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <Serial+0x1a>
   11644:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <Serial+0x1b>
   11648:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <Serial+0x1c>
   1164c:	c2 ee       	ldi	r28, 0xE2	; 226
   1164e:	d2 e0       	ldi	r29, 0x02	; 2
   11650:	d0 93 41 11 	sts	0x1141, r29	; 0x801141 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   11654:	c0 93 40 11 	sts	0x1140, r28	; 0x801140 <_ZL11INADDR_NONE.lto_priv.202>
   11658:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   1165c:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   11660:	10 92 44 11 	sts	0x1144, r1	; 0x801144 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   11664:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   11668:	10 92 0b 0e 	sts	0x0E0B, r1	; 0x800e0b <Wire+0x3>
   1166c:	10 92 0a 0e 	sts	0x0E0A, r1	; 0x800e0a <Wire+0x2>
   11670:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <Wire+0x4>
   11674:	90 93 0d 0e 	sts	0x0E0D, r25	; 0x800e0d <Wire+0x5>
   11678:	a0 93 0e 0e 	sts	0x0E0E, r26	; 0x800e0e <Wire+0x6>
   1167c:	b0 93 0f 0e 	sts	0x0E0F, r27	; 0x800e0f <Wire+0x7>
   11680:	8c e6       	ldi	r24, 0x6C	; 108
   11682:	92 e0       	ldi	r25, 0x02	; 2
   11684:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <Wire+0x1>
   11688:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <Wire>
   1168c:	d0 93 47 11 	sts	0x1147, r29	; 0x801147 <_ZL11INADDR_NONE.lto_priv.201+0x1>
   11690:	c0 93 46 11 	sts	0x1146, r28	; 0x801146 <_ZL11INADDR_NONE.lto_priv.201>
   11694:	10 92 48 11 	sts	0x1148, r1	; 0x801148 <_ZL11INADDR_NONE.lto_priv.201+0x2>
   11698:	10 92 49 11 	sts	0x1149, r1	; 0x801149 <_ZL11INADDR_NONE.lto_priv.201+0x3>
   1169c:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <_ZL11INADDR_NONE.lto_priv.201+0x4>
   116a0:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <_ZL11INADDR_NONE.lto_priv.201+0x5>
   116a4:	80 e5       	ldi	r24, 0x50	; 80
   116a6:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <wiznet_SPI_settings>
   116aa:	81 e0       	ldi	r24, 0x01	; 1
   116ac:	80 93 4d 11 	sts	0x114D, r24	; 0x80114d <wiznet_SPI_settings+0x1>
   116b0:	d0 93 4f 11 	sts	0x114F, r29	; 0x80114f <_ZL11INADDR_NONE.lto_priv.200+0x1>
   116b4:	c0 93 4e 11 	sts	0x114E, r28	; 0x80114e <_ZL11INADDR_NONE.lto_priv.200>
   116b8:	10 92 50 11 	sts	0x1150, r1	; 0x801150 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   116bc:	10 92 51 11 	sts	0x1151, r1	; 0x801151 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   116c0:	10 92 52 11 	sts	0x1152, r1	; 0x801152 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   116c4:	10 92 53 11 	sts	0x1153, r1	; 0x801153 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   116c8:	d0 93 55 11 	sts	0x1155, r29	; 0x801155 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   116cc:	c0 93 54 11 	sts	0x1154, r28	; 0x801154 <_ZL11INADDR_NONE.lto_priv.199>
   116d0:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   116d4:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   116d8:	10 92 58 11 	sts	0x1158, r1	; 0x801158 <_ZL11INADDR_NONE.lto_priv.199+0x4>
   116dc:	10 92 59 11 	sts	0x1159, r1	; 0x801159 <_ZL11INADDR_NONE.lto_priv.199+0x5>
   116e0:	d0 93 5b 11 	sts	0x115B, r29	; 0x80115b <_ZL11INADDR_NONE.lto_priv.198+0x1>
   116e4:	c0 93 5a 11 	sts	0x115A, r28	; 0x80115a <_ZL11INADDR_NONE.lto_priv.198>
   116e8:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <_ZL11INADDR_NONE.lto_priv.198+0x2>
   116ec:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <_ZL11INADDR_NONE.lto_priv.198+0x3>
   116f0:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <_ZL11INADDR_NONE.lto_priv.198+0x4>
   116f4:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <_ZL11INADDR_NONE.lto_priv.198+0x5>
   116f8:	d0 93 61 11 	sts	0x1161, r29	; 0x801161 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   116fc:	c0 93 60 11 	sts	0x1160, r28	; 0x801160 <_ZL11INADDR_NONE.lto_priv.197>
   11700:	10 92 62 11 	sts	0x1162, r1	; 0x801162 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   11704:	10 92 63 11 	sts	0x1163, r1	; 0x801163 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   11708:	10 92 64 11 	sts	0x1164, r1	; 0x801164 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   1170c:	10 92 65 11 	sts	0x1165, r1	; 0x801165 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   11710:	d0 93 67 11 	sts	0x1167, r29	; 0x801167 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   11714:	c0 93 66 11 	sts	0x1166, r28	; 0x801166 <_ZL11INADDR_NONE.lto_priv.196>
   11718:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   1171c:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   11720:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <_ZL11INADDR_NONE.lto_priv.196+0x4>
   11724:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <_ZL11INADDR_NONE.lto_priv.196+0x5>
   11728:	d0 93 1a 0c 	sts	0x0C1A, r29	; 0x800c1a <Ethernet+0x1>
   1172c:	c0 93 19 0c 	sts	0x0C19, r28	; 0x800c19 <Ethernet>
   11730:	10 92 1b 0c 	sts	0x0C1B, r1	; 0x800c1b <Ethernet+0x2>
   11734:	10 92 1c 0c 	sts	0x0C1C, r1	; 0x800c1c <Ethernet+0x3>
   11738:	10 92 1d 0c 	sts	0x0C1D, r1	; 0x800c1d <Ethernet+0x4>
   1173c:	10 92 1e 0c 	sts	0x0C1E, r1	; 0x800c1e <Ethernet+0x5>
   11740:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <Ethernet+0xb>
   11744:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <Ethernet+0xa>
   11748:	8a e0       	ldi	r24, 0x0A	; 10
   1174a:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <Ethernet+0xc>
   1174e:	d0 93 27 0c 	sts	0x0C27, r29	; 0x800c27 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   11752:	c0 93 26 0c 	sts	0x0C26, r28	; 0x800c26 <_ZL11INADDR_NONE.lto_priv.195>
   11756:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <_ZL11INADDR_NONE.lto_priv.195+0x2>
   1175a:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <_ZL11INADDR_NONE.lto_priv.195+0x3>
   1175e:	10 92 2a 0c 	sts	0x0C2A, r1	; 0x800c2a <_ZL11INADDR_NONE.lto_priv.195+0x4>
   11762:	10 92 2b 0c 	sts	0x0C2B, r1	; 0x800c2b <_ZL11INADDR_NONE.lto_priv.195+0x5>
   11766:	d0 93 6d 11 	sts	0x116D, r29	; 0x80116d <_ZL11INADDR_NONE.lto_priv.194+0x1>
   1176a:	c0 93 6c 11 	sts	0x116C, r28	; 0x80116c <_ZL11INADDR_NONE.lto_priv.194>
   1176e:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <_ZL11INADDR_NONE.lto_priv.194+0x2>
   11772:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <_ZL11INADDR_NONE.lto_priv.194+0x3>
   11776:	10 92 70 11 	sts	0x1170, r1	; 0x801170 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   1177a:	10 92 71 11 	sts	0x1171, r1	; 0x801171 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   1177e:	8a e0       	ldi	r24, 0x0A	; 10
   11780:	90 e0       	ldi	r25, 0x00	; 0
   11782:	0e 94 b5 9c 	call	0x1396a	; 0x1396a <malloc>
   11786:	90 93 2d 0c 	sts	0x0C2D, r25	; 0x800c2d <array_pids+0x1>
   1178a:	80 93 2c 0c 	sts	0x0C2C, r24	; 0x800c2c <array_pids>
   1178e:	d0 93 73 11 	sts	0x1173, r29	; 0x801173 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   11792:	c0 93 72 11 	sts	0x1172, r28	; 0x801172 <_ZL11INADDR_NONE.lto_priv.193>
   11796:	10 92 74 11 	sts	0x1174, r1	; 0x801174 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   1179a:	10 92 75 11 	sts	0x1175, r1	; 0x801175 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   1179e:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   117a2:	10 92 77 11 	sts	0x1177, r1	; 0x801177 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   117a6:	d0 93 79 11 	sts	0x1179, r29	; 0x801179 <_ZL11INADDR_NONE.lto_priv.192+0x1>
   117aa:	c0 93 78 11 	sts	0x1178, r28	; 0x801178 <_ZL11INADDR_NONE.lto_priv.192>
   117ae:	10 92 7a 11 	sts	0x117A, r1	; 0x80117a <_ZL11INADDR_NONE.lto_priv.192+0x2>
   117b2:	10 92 7b 11 	sts	0x117B, r1	; 0x80117b <_ZL11INADDR_NONE.lto_priv.192+0x3>
   117b6:	10 92 7c 11 	sts	0x117C, r1	; 0x80117c <_ZL11INADDR_NONE.lto_priv.192+0x4>
   117ba:	10 92 7d 11 	sts	0x117D, r1	; 0x80117d <_ZL11INADDR_NONE.lto_priv.192+0x5>
   117be:	8b e5       	ldi	r24, 0x5B	; 91
   117c0:	97 e0       	ldi	r25, 0x07	; 7
   117c2:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <device+0x25>
   117c6:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <device+0x24>
   117ca:	d0 93 2e 13 	sts	0x132E, r29	; 0x80132e <_ZL11INADDR_NONE.lto_priv.191+0x1>
   117ce:	c0 93 2d 13 	sts	0x132D, r28	; 0x80132d <_ZL11INADDR_NONE.lto_priv.191>
   117d2:	10 92 2f 13 	sts	0x132F, r1	; 0x80132f <_ZL11INADDR_NONE.lto_priv.191+0x2>
   117d6:	10 92 30 13 	sts	0x1330, r1	; 0x801330 <_ZL11INADDR_NONE.lto_priv.191+0x3>
   117da:	10 92 31 13 	sts	0x1331, r1	; 0x801331 <_ZL11INADDR_NONE.lto_priv.191+0x4>
   117de:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <_ZL11INADDR_NONE.lto_priv.191+0x5>
   117e2:	88 e1       	ldi	r24, 0x18	; 24
   117e4:	80 93 64 10 	sts	0x1064, r24	; 0x801064 <swSPI+0x4>
   117e8:	8a e1       	ldi	r24, 0x1A	; 26
   117ea:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <swSPI+0x3>
   117ee:	89 e1       	ldi	r24, 0x19	; 25
   117f0:	80 93 65 10 	sts	0x1065, r24	; 0x801065 <swSPI+0x5>
   117f4:	82 e0       	ldi	r24, 0x02	; 2
   117f6:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <swSPI+0x2>
   117fa:	10 92 60 10 	sts	0x1060, r1	; 0x801060 <swSPI>
   117fe:	10 92 61 10 	sts	0x1061, r1	; 0x801061 <swSPI+0x1>
   11802:	10 92 66 10 	sts	0x1066, r1	; 0x801066 <swSPI+0x6>
   11806:	60 e0       	ldi	r22, 0x00	; 0
   11808:	89 e1       	ldi	r24, 0x19	; 25
   1180a:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
   1180e:	80 e1       	ldi	r24, 0x10	; 16
   11810:	80 93 5e 10 	sts	0x105E, r24	; 0x80105e <now+0x5>
   11814:	8c e1       	ldi	r24, 0x1C	; 28
   11816:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <now+0x4>
   1181a:	86 e0       	ldi	r24, 0x06	; 6
   1181c:	80 93 5c 10 	sts	0x105C, r24	; 0x80105c <now+0x3>
   11820:	40 e0       	ldi	r20, 0x00	; 0
   11822:	81 e6       	ldi	r24, 0x61	; 97
   11824:	97 e9       	ldi	r25, 0x97	; 151
   11826:	e3 e9       	ldi	r30, 0x93	; 147
   11828:	fe ef       	ldi	r31, 0xFE	; 254
   1182a:	54 2f       	mov	r21, r20
   1182c:	53 70       	andi	r21, 0x03	; 3
   1182e:	21 e0       	ldi	r18, 0x01	; 1
   11830:	09 f0       	breq	.+2      	; 0x11834 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x274>
   11832:	20 e0       	ldi	r18, 0x00	; 0
   11834:	61 e0       	ldi	r22, 0x01	; 1
   11836:	64 0f       	add	r22, r20
   11838:	30 e0       	ldi	r19, 0x00	; 0
   1183a:	d9 01       	movw	r26, r18
   1183c:	a3 59       	subi	r26, 0x93	; 147
   1183e:	be 4f       	sbci	r27, 0xFE	; 254
   11840:	8a 17       	cp	r24, r26
   11842:	9b 07       	cpc	r25, r27
   11844:	38 f0       	brcs	.+14     	; 0x11854 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x294>
   11846:	af 01       	movw	r20, r30
   11848:	42 1b       	sub	r20, r18
   1184a:	53 0b       	sbc	r21, r19
   1184c:	84 0f       	add	r24, r20
   1184e:	95 1f       	adc	r25, r21
   11850:	46 2f       	mov	r20, r22
   11852:	eb cf       	rjmp	.-42     	; 0x1182a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x26a>
   11854:	40 93 59 10 	sts	0x1059, r20	; 0x801059 <now>
   11858:	21 e0       	ldi	r18, 0x01	; 1
   1185a:	62 2f       	mov	r22, r18
   1185c:	61 50       	subi	r22, 0x01	; 1
   1185e:	77 0b       	sbc	r23, r23
   11860:	fb 01       	movw	r30, r22
   11862:	e4 53       	subi	r30, 0x34	; 52
   11864:	f1 4d       	sbci	r31, 0xD1	; 209
   11866:	e4 91       	lpm	r30, Z
   11868:	51 11       	cpse	r21, r1
   1186a:	03 c0       	rjmp	.+6      	; 0x11872 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x2b2>
   1186c:	22 30       	cpi	r18, 0x02	; 2
   1186e:	09 f4       	brne	.+2      	; 0x11872 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x2b2>
   11870:	ef 5f       	subi	r30, 0xFF	; 255
   11872:	f0 e0       	ldi	r31, 0x00	; 0
   11874:	31 e0       	ldi	r19, 0x01	; 1
   11876:	32 0f       	add	r19, r18
   11878:	8e 17       	cp	r24, r30
   1187a:	9f 07       	cpc	r25, r31
   1187c:	20 f0       	brcs	.+8      	; 0x11886 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x2c6>
   1187e:	8e 1b       	sub	r24, r30
   11880:	9f 0b       	sbc	r25, r31
   11882:	23 2f       	mov	r18, r19
   11884:	ea cf       	rjmp	.-44     	; 0x1185a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x29a>
   11886:	20 93 5a 10 	sts	0x105A, r18	; 0x80105a <now+0x1>
   1188a:	8f 5f       	subi	r24, 0xFF	; 255
   1188c:	80 93 5b 10 	sts	0x105B, r24	; 0x80105b <now+0x2>
   11890:	10 92 23 13 	sts	0x1323, r1	; 0x801323 <ethClient+0x3>
   11894:	10 92 22 13 	sts	0x1322, r1	; 0x801322 <ethClient+0x2>
   11898:	48 ee       	ldi	r20, 0xE8	; 232
   1189a:	53 e0       	ldi	r21, 0x03	; 3
   1189c:	60 e0       	ldi	r22, 0x00	; 0
   1189e:	70 e0       	ldi	r23, 0x00	; 0
   118a0:	40 93 24 13 	sts	0x1324, r20	; 0x801324 <ethClient+0x4>
   118a4:	50 93 25 13 	sts	0x1325, r21	; 0x801325 <ethClient+0x5>
   118a8:	60 93 26 13 	sts	0x1326, r22	; 0x801326 <ethClient+0x6>
   118ac:	70 93 27 13 	sts	0x1327, r23	; 0x801327 <ethClient+0x7>
   118b0:	80 ec       	ldi	r24, 0xC0	; 192
   118b2:	92 e0       	ldi	r25, 0x02	; 2
   118b4:	90 93 21 13 	sts	0x1321, r25	; 0x801321 <ethClient+0x1>
   118b8:	80 93 20 13 	sts	0x1320, r24	; 0x801320 <ethClient>
   118bc:	88 e0       	ldi	r24, 0x08	; 8
   118be:	80 93 2c 13 	sts	0x132C, r24	; 0x80132c <ethClient+0xc>
   118c2:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <udpClient+0x3>
   118c6:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <udpClient+0x2>
   118ca:	40 93 42 10 	sts	0x1042, r20	; 0x801042 <udpClient+0x4>
   118ce:	50 93 43 10 	sts	0x1043, r21	; 0x801043 <udpClient+0x5>
   118d2:	60 93 44 10 	sts	0x1044, r22	; 0x801044 <udpClient+0x6>
   118d6:	70 93 45 10 	sts	0x1045, r23	; 0x801045 <udpClient+0x7>
   118da:	28 e9       	ldi	r18, 0x98	; 152
   118dc:	32 e0       	ldi	r19, 0x02	; 2
   118de:	30 93 3f 10 	sts	0x103F, r19	; 0x80103f <udpClient+0x1>
   118e2:	20 93 3e 10 	sts	0x103E, r18	; 0x80103e <udpClient>
   118e6:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <udpClient+0xc>
   118ea:	82 ee       	ldi	r24, 0xE2	; 226
   118ec:	92 e0       	ldi	r25, 0x02	; 2
   118ee:	90 93 4e 10 	sts	0x104E, r25	; 0x80104e <udpClient+0x10>
   118f2:	80 93 4d 10 	sts	0x104D, r24	; 0x80104d <udpClient+0xf>
   118f6:	10 92 4f 10 	sts	0x104F, r1	; 0x80104f <udpClient+0x11>
   118fa:	10 92 50 10 	sts	0x1050, r1	; 0x801050 <udpClient+0x12>
   118fe:	10 92 51 10 	sts	0x1051, r1	; 0x801051 <udpClient+0x13>
   11902:	10 92 52 10 	sts	0x1052, r1	; 0x801052 <udpClient+0x14>
   11906:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <mqtt_client+0x210>
   1190a:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <mqtt_client+0x20f>
   1190e:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <mqtt_client+0x211>
   11912:	10 92 33 10 	sts	0x1033, r1	; 0x801033 <mqtt_client+0x212>
   11916:	10 92 34 10 	sts	0x1034, r1	; 0x801034 <mqtt_client+0x213>
   1191a:	10 92 35 10 	sts	0x1035, r1	; 0x801035 <mqtt_client+0x214>
   1191e:	0f ef       	ldi	r16, 0xFF	; 255
   11920:	1f ef       	ldi	r17, 0xFF	; 255
   11922:	10 93 3d 10 	sts	0x103D, r17	; 0x80103d <mqtt_client+0x21c>
   11926:	00 93 3c 10 	sts	0x103C, r16	; 0x80103c <mqtt_client+0x21b>
   1192a:	80 e2       	ldi	r24, 0x20	; 32
   1192c:	93 e1       	ldi	r25, 0x13	; 19
   1192e:	90 93 22 0e 	sts	0x0E22, r25	; 0x800e22 <mqtt_client+0x1>
   11932:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <mqtt_client>
   11936:	10 92 3b 10 	sts	0x103B, r1	; 0x80103b <mqtt_client+0x21a>
   1193a:	10 92 3a 10 	sts	0x103A, r1	; 0x80103a <mqtt_client+0x219>
   1193e:	88 e0       	ldi	r24, 0x08	; 8
   11940:	93 e1       	ldi	r25, 0x13	; 19
   11942:	23 e0       	ldi	r18, 0x03	; 3
   11944:	30 e0       	ldi	r19, 0x00	; 0
   11946:	30 93 09 13 	sts	0x1309, r19	; 0x801309 <radio+0x1>
   1194a:	20 93 08 13 	sts	0x1308, r18	; 0x801308 <radio>
   1194e:	22 e0       	ldi	r18, 0x02	; 2
   11950:	30 e0       	ldi	r19, 0x00	; 0
   11952:	30 93 0b 13 	sts	0x130B, r19	; 0x80130b <radio+0x3>
   11956:	20 93 0a 13 	sts	0x130A, r18	; 0x80130a <radio+0x2>
   1195a:	10 92 0e 13 	sts	0x130E, r1	; 0x80130e <radio+0x6>
   1195e:	20 e2       	ldi	r18, 0x20	; 32
   11960:	20 93 0f 13 	sts	0x130F, r18	; 0x80130f <radio+0x7>
   11964:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <radio+0x8>
   11968:	25 e0       	ldi	r18, 0x05	; 5
   1196a:	20 93 16 13 	sts	0x1316, r18	; 0x801316 <radio+0xe>
   1196e:	45 e0       	ldi	r20, 0x05	; 5
   11970:	50 e0       	ldi	r21, 0x00	; 0
   11972:	60 e0       	ldi	r22, 0x00	; 0
   11974:	70 e0       	ldi	r23, 0x00	; 0
   11976:	40 93 1c 13 	sts	0x131C, r20	; 0x80131c <radio+0x14>
   1197a:	50 93 1d 13 	sts	0x131D, r21	; 0x80131d <radio+0x15>
   1197e:	60 93 1e 13 	sts	0x131E, r22	; 0x80131e <radio+0x16>
   11982:	70 93 1f 13 	sts	0x131F, r23	; 0x80131f <radio+0x17>
   11986:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <radio+0x9>
   1198a:	90 93 c6 11 	sts	0x11C6, r25	; 0x8011c6 <network+0x30>
   1198e:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <network+0x2f>
   11992:	2b ec       	ldi	r18, 0xCB	; 203
   11994:	31 e1       	ldi	r19, 0x11	; 17
   11996:	30 93 66 12 	sts	0x1266, r19	; 0x801266 <network+0xd0>
   1199a:	20 93 65 12 	sts	0x1265, r18	; 0x801265 <network+0xcf>
   1199e:	23 e7       	ldi	r18, 0x73	; 115
   119a0:	32 e1       	ldi	r19, 0x12	; 18
   119a2:	30 93 72 12 	sts	0x1272, r19	; 0x801272 <network+0xdc>
   119a6:	20 93 71 12 	sts	0x1271, r18	; 0x801271 <network+0xdb>
   119aa:	27 e6       	ldi	r18, 0x67	; 103
   119ac:	32 e1       	ldi	r19, 0x12	; 18
   119ae:	30 93 be 11 	sts	0x11BE, r19	; 0x8011be <network+0x28>
   119b2:	20 93 bd 11 	sts	0x11BD, r18	; 0x8011bd <network+0x27>
   119b6:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <network+0x2b>
   119ba:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <network+0x2c>
   119be:	10 92 c3 11 	sts	0x11C3, r1	; 0x8011c3 <network+0x2d>
   119c2:	10 92 c4 11 	sts	0x11C4, r1	; 0x8011c4 <network+0x2e>
   119c6:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <network+0x2a>
   119ca:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <network+0x29>
   119ce:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <network>
   119d2:	90 93 85 11 	sts	0x1185, r25	; 0x801185 <mesh+0x7>
   119d6:	80 93 84 11 	sts	0x1184, r24	; 0x801184 <mesh+0x6>
   119da:	86 e9       	ldi	r24, 0x96	; 150
   119dc:	91 e1       	ldi	r25, 0x11	; 17
   119de:	90 93 87 11 	sts	0x1187, r25	; 0x801187 <mesh+0x9>
   119e2:	80 93 86 11 	sts	0x1186, r24	; 0x801186 <mesh+0x8>
   119e6:	88 e0       	ldi	r24, 0x08	; 8
   119e8:	9e e0       	ldi	r25, 0x0E	; 14
   119ea:	90 93 15 0e 	sts	0x0E15, r25	; 0x800e15 <lm75_temp+0x1>
   119ee:	80 93 14 0e 	sts	0x0E14, r24	; 0x800e14 <lm75_temp>
   119f2:	88 e4       	ldi	r24, 0x48	; 72
   119f4:	80 93 16 0e 	sts	0x0E16, r24	; 0x800e16 <lm75_temp+0x2>
   119f8:	8a e0       	ldi	r24, 0x0A	; 10
   119fa:	92 e0       	ldi	r25, 0x02	; 2
   119fc:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <lm75_temp+0xc>
   11a00:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <lm75_temp+0xb>
   11a04:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   11a08:	90 93 17 0e 	sts	0x0E17, r25	; 0x800e17 <lm75_temp+0x3>
   11a0c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   11a10:	89 1b       	sub	r24, r25
   11a12:	99 0b       	sbc	r25, r25
   11a14:	c1 e0       	ldi	r28, 0x01	; 1
   11a16:	d0 e0       	ldi	r29, 0x00	; 0
   11a18:	9e 01       	movw	r18, r28
   11a1a:	02 c0       	rjmp	.+4      	; 0x11a20 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x460>
   11a1c:	22 0f       	add	r18, r18
   11a1e:	33 1f       	adc	r19, r19
   11a20:	8a 95       	dec	r24
   11a22:	e2 f7       	brpl	.-8      	; 0x11a1c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x45c>
   11a24:	c9 01       	movw	r24, r18
   11a26:	91 95       	neg	r25
   11a28:	81 95       	neg	r24
   11a2a:	91 09       	sbc	r25, r1
   11a2c:	90 93 19 0e 	sts	0x0E19, r25	; 0x800e19 <lm75_temp+0x5>
   11a30:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <lm75_temp+0x4>
   11a34:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   11a38:	80 93 1a 0e 	sts	0x0E1A, r24	; 0x800e1a <lm75_temp+0x6>
   11a3c:	be 01       	movw	r22, r28
   11a3e:	02 c0       	rjmp	.+4      	; 0x11a44 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x484>
   11a40:	66 0f       	add	r22, r22
   11a42:	77 1f       	adc	r23, r23
   11a44:	8a 95       	dec	r24
   11a46:	e2 f7       	brpl	.-8      	; 0x11a40 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.6945+0x480>
   11a48:	07 2e       	mov	r0, r23
   11a4a:	00 0c       	add	r0, r0
   11a4c:	88 0b       	sbc	r24, r24
   11a4e:	99 0b       	sbc	r25, r25
   11a50:	0e 94 ed a0 	call	0x141da	; 0x141da <__floatsisf>
   11a54:	9b 01       	movw	r18, r22
   11a56:	ac 01       	movw	r20, r24
   11a58:	60 e0       	ldi	r22, 0x00	; 0
   11a5a:	70 e0       	ldi	r23, 0x00	; 0
   11a5c:	80 e8       	ldi	r24, 0x80	; 128
   11a5e:	9f e3       	ldi	r25, 0x3F	; 63
   11a60:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
   11a64:	60 93 1b 0e 	sts	0x0E1B, r22	; 0x800e1b <lm75_temp+0x7>
   11a68:	70 93 1c 0e 	sts	0x0E1C, r23	; 0x800e1c <lm75_temp+0x8>
   11a6c:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <lm75_temp+0x9>
   11a70:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <lm75_temp+0xa>
   11a74:	80 e0       	ldi	r24, 0x00	; 0
   11a76:	98 ef       	ldi	r25, 0xF8	; 248
   11a78:	90 93 d2 0d 	sts	0x0DD2, r25	; 0x800dd2 <my_lcd+0x9>
   11a7c:	80 93 d1 0d 	sts	0x0DD1, r24	; 0x800dd1 <my_lcd+0x8>
   11a80:	20 ee       	ldi	r18, 0xE0	; 224
   11a82:	37 e0       	ldi	r19, 0x07	; 7
   11a84:	30 93 d0 0d 	sts	0x0DD0, r19	; 0x800dd0 <my_lcd+0x7>
   11a88:	20 93 cf 0d 	sts	0x0DCF, r18	; 0x800dcf <my_lcd+0x6>
   11a8c:	90 93 d4 0d 	sts	0x0DD4, r25	; 0x800dd4 <my_lcd+0xb>
   11a90:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <my_lcd+0xa>
   11a94:	81 e0       	ldi	r24, 0x01	; 1
   11a96:	80 93 d5 0d 	sts	0x0DD5, r24	; 0x800dd5 <my_lcd+0xc>
   11a9a:	10 92 d6 0d 	sts	0x0DD6, r1	; 0x800dd6 <my_lcd+0xd>
   11a9e:	84 e8       	ldi	r24, 0x84	; 132
   11aa0:	92 e0       	ldi	r25, 0x02	; 2
   11aa2:	90 93 ca 0d 	sts	0x0DCA, r25	; 0x800dca <my_lcd+0x1>
   11aa6:	80 93 c9 0d 	sts	0x0DC9, r24	; 0x800dc9 <my_lcd>
   11aaa:	82 e2       	ldi	r24, 0x22	; 34
   11aac:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <my_lcd+0x3e>
   11ab0:	e7 eb       	ldi	r30, 0xB7	; 183
   11ab2:	fe e2       	ldi	r31, 0x2E	; 46
   11ab4:	e4 91       	lpm	r30, Z
   11ab6:	f0 e0       	ldi	r31, 0x00	; 0
   11ab8:	ee 0f       	add	r30, r30
   11aba:	ff 1f       	adc	r31, r31
   11abc:	ea 57       	subi	r30, 0x7A	; 122
   11abe:	f1 4d       	sbci	r31, 0xD1	; 209
   11ac0:	a5 91       	lpm	r26, Z+
   11ac2:	b4 91       	lpm	r27, Z
   11ac4:	b0 93 f8 0d 	sts	0x0DF8, r27	; 0x800df8 <my_lcd+0x2f>
   11ac8:	a0 93 f7 0d 	sts	0x0DF7, r26	; 0x800df7 <my_lcd+0x2e>
   11acc:	e9 eb       	ldi	r30, 0xB9	; 185
   11ace:	fe e2       	ldi	r31, 0x2E	; 46
   11ad0:	e4 91       	lpm	r30, Z
   11ad2:	f0 e0       	ldi	r31, 0x00	; 0
   11ad4:	ee 0f       	add	r30, r30
   11ad6:	ff 1f       	adc	r31, r31
   11ad8:	ea 57       	subi	r30, 0x7A	; 122
   11ada:	f1 4d       	sbci	r31, 0xD1	; 209
   11adc:	85 91       	lpm	r24, Z+
   11ade:	94 91       	lpm	r25, Z
   11ae0:	90 93 fa 0d 	sts	0x0DFA, r25	; 0x800dfa <my_lcd+0x31>
   11ae4:	80 93 f9 0d 	sts	0x0DF9, r24	; 0x800df9 <my_lcd+0x30>
   11ae8:	ea eb       	ldi	r30, 0xBA	; 186
   11aea:	fe e2       	ldi	r31, 0x2E	; 46
   11aec:	e4 91       	lpm	r30, Z
   11aee:	f0 e0       	ldi	r31, 0x00	; 0
   11af0:	ee 0f       	add	r30, r30
   11af2:	ff 1f       	adc	r31, r31
   11af4:	ea 57       	subi	r30, 0x7A	; 122
   11af6:	f1 4d       	sbci	r31, 0xD1	; 209
   11af8:	85 91       	lpm	r24, Z+
   11afa:	94 91       	lpm	r25, Z
   11afc:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <my_lcd+0x33>
   11b00:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <my_lcd+0x32>
   11b04:	e6 eb       	ldi	r30, 0xB6	; 182
   11b06:	fe e2       	ldi	r31, 0x2E	; 46
   11b08:	e4 91       	lpm	r30, Z
   11b0a:	f0 e0       	ldi	r31, 0x00	; 0
   11b0c:	ee 0f       	add	r30, r30
   11b0e:	ff 1f       	adc	r31, r31
   11b10:	ea 57       	subi	r30, 0x7A	; 122
   11b12:	f1 4d       	sbci	r31, 0xD1	; 209
   11b14:	85 91       	lpm	r24, Z+
   11b16:	94 91       	lpm	r25, Z
   11b18:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <my_lcd+0x35>
   11b1c:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <my_lcd+0x34>
   11b20:	e1 e7       	ldi	r30, 0x71	; 113
   11b22:	fe e2       	ldi	r31, 0x2E	; 46
   11b24:	84 91       	lpm	r24, Z
   11b26:	80 93 ff 0d 	sts	0x0DFF, r24	; 0x800dff <my_lcd+0x36>
   11b2a:	e3 e7       	ldi	r30, 0x73	; 115
   11b2c:	fe e2       	ldi	r31, 0x2E	; 46
   11b2e:	24 91       	lpm	r18, Z
   11b30:	20 93 00 0e 	sts	0x0E00, r18	; 0x800e00 <my_lcd+0x37>
   11b34:	e4 e7       	ldi	r30, 0x74	; 116
   11b36:	fe e2       	ldi	r31, 0x2E	; 46
   11b38:	94 91       	lpm	r25, Z
   11b3a:	90 93 01 0e 	sts	0x0E01, r25	; 0x800e01 <my_lcd+0x38>
   11b3e:	e0 e7       	ldi	r30, 0x70	; 112
   11b40:	fe e2       	ldi	r31, 0x2E	; 46
   11b42:	e4 91       	lpm	r30, Z
   11b44:	e0 93 02 0e 	sts	0x0E02, r30	; 0x800e02 <my_lcd+0x39>
   11b48:	38 2f       	mov	r19, r24
   11b4a:	30 95       	com	r19
   11b4c:	30 93 03 0e 	sts	0x0E03, r19	; 0x800e03 <my_lcd+0x3a>
   11b50:	20 95       	com	r18
   11b52:	20 93 04 0e 	sts	0x0E04, r18	; 0x800e04 <my_lcd+0x3b>
   11b56:	90 95       	com	r25
   11b58:	90 93 05 0e 	sts	0x0E05, r25	; 0x800e05 <my_lcd+0x3c>
   11b5c:	e0 95       	com	r30
   11b5e:	e0 93 06 0e 	sts	0x0E06, r30	; 0x800e06 <my_lcd+0x3d>
   11b62:	ec 91       	ld	r30, X
   11b64:	e8 2b       	or	r30, r24
   11b66:	ec 93       	st	X, r30
   11b68:	e0 91 f9 0d 	lds	r30, 0x0DF9	; 0x800df9 <my_lcd+0x30>
   11b6c:	f0 91 fa 0d 	lds	r31, 0x0DFA	; 0x800dfa <my_lcd+0x31>
   11b70:	80 81       	ld	r24, Z
   11b72:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x37>
   11b76:	89 2b       	or	r24, r25
   11b78:	80 83       	st	Z, r24
   11b7a:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <my_lcd+0x32>
   11b7e:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <my_lcd+0x33>
   11b82:	80 81       	ld	r24, Z
   11b84:	90 91 01 0e 	lds	r25, 0x0E01	; 0x800e01 <my_lcd+0x38>
   11b88:	89 2b       	or	r24, r25
   11b8a:	80 83       	st	Z, r24
   11b8c:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_lcd+0x34>
   11b90:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_lcd+0x35>
   11b94:	80 81       	ld	r24, Z
   11b96:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <my_lcd+0x39>
   11b9a:	89 2b       	or	r24, r25
   11b9c:	80 83       	st	Z, r24
   11b9e:	61 e0       	ldi	r22, 0x01	; 1
   11ba0:	81 e2       	ldi	r24, 0x21	; 33
   11ba2:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11ba6:	61 e0       	ldi	r22, 0x01	; 1
   11ba8:	83 e2       	ldi	r24, 0x23	; 35
   11baa:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11bae:	61 e0       	ldi	r22, 0x01	; 1
   11bb0:	84 e2       	ldi	r24, 0x24	; 36
   11bb2:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11bb6:	61 e0       	ldi	r22, 0x01	; 1
   11bb8:	80 e2       	ldi	r24, 0x20	; 32
   11bba:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11bbe:	61 e0       	ldi	r22, 0x01	; 1
   11bc0:	82 e2       	ldi	r24, 0x22	; 34
   11bc2:	0e 94 7f 77 	call	0xeefe	; 0xeefe <digitalWrite>
   11bc6:	61 e0       	ldi	r22, 0x01	; 1
   11bc8:	82 e2       	ldi	r24, 0x22	; 34
   11bca:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11bce:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0x17>
   11bd2:	10 92 df 0d 	sts	0x0DDF, r1	; 0x800ddf <my_lcd+0x16>
   11bd6:	86 e9       	ldi	r24, 0x96	; 150
   11bd8:	97 e7       	ldi	r25, 0x77	; 119
   11bda:	90 93 e4 0d 	sts	0x0DE4, r25	; 0x800de4 <my_lcd+0x1b>
   11bde:	80 93 e3 0d 	sts	0x0DE3, r24	; 0x800de3 <my_lcd+0x1a>
   11be2:	20 e4       	ldi	r18, 0x40	; 64
   11be4:	31 e0       	ldi	r19, 0x01	; 1
   11be6:	30 93 d8 0d 	sts	0x0DD8, r19	; 0x800dd8 <my_lcd+0xf>
   11bea:	20 93 d7 0d 	sts	0x0DD7, r18	; 0x800dd7 <my_lcd+0xe>
   11bee:	80 ee       	ldi	r24, 0xE0	; 224
   11bf0:	91 e0       	ldi	r25, 0x01	; 1
   11bf2:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <my_lcd+0x11>
   11bf6:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <my_lcd+0x10>
   11bfa:	41 b1       	in	r20, 0x01	; 1
   11bfc:	4f ef       	ldi	r20, 0xFF	; 255
   11bfe:	41 b9       	out	0x01, r20	; 1
   11c00:	30 93 dc 0d 	sts	0x0DDC, r19	; 0x800ddc <my_lcd+0x13>
   11c04:	20 93 db 0d 	sts	0x0DDB, r18	; 0x800ddb <my_lcd+0x12>
   11c08:	90 93 de 0d 	sts	0x0DDE, r25	; 0x800dde <my_lcd+0x15>
   11c0c:	80 93 dd 0d 	sts	0x0DDD, r24	; 0x800ddd <my_lcd+0x14>
   11c10:	e2 eb       	ldi	r30, 0xB2	; 178
   11c12:	fe e2       	ldi	r31, 0x2E	; 46
   11c14:	e4 91       	lpm	r30, Z
   11c16:	f0 e0       	ldi	r31, 0x00	; 0
   11c18:	ee 0f       	add	r30, r30
   11c1a:	ff 1f       	adc	r31, r31
   11c1c:	ea 57       	subi	r30, 0x7A	; 122
   11c1e:	f1 4d       	sbci	r31, 0xD1	; 209
   11c20:	85 91       	lpm	r24, Z+
   11c22:	94 91       	lpm	r25, Z
   11c24:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <my_touch+0x10>
   11c28:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <my_touch+0xf>
   11c2c:	e1 eb       	ldi	r30, 0xB1	; 177
   11c2e:	fe e2       	ldi	r31, 0x2E	; 46
   11c30:	e4 91       	lpm	r30, Z
   11c32:	f0 e0       	ldi	r31, 0x00	; 0
   11c34:	ee 0f       	add	r30, r30
   11c36:	ff 1f       	adc	r31, r31
   11c38:	ea 57       	subi	r30, 0x7A	; 122
   11c3a:	f1 4d       	sbci	r31, 0xD1	; 209
   11c3c:	85 91       	lpm	r24, Z+
   11c3e:	94 91       	lpm	r25, Z
   11c40:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_touch+0x12>
   11c44:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_touch+0x11>
   11c48:	e3 eb       	ldi	r30, 0xB3	; 179
   11c4a:	fe e2       	ldi	r31, 0x2E	; 46
   11c4c:	e4 91       	lpm	r30, Z
   11c4e:	f0 e0       	ldi	r31, 0x00	; 0
   11c50:	ee 0f       	add	r30, r30
   11c52:	ff 1f       	adc	r31, r31
   11c54:	e0 5c       	subi	r30, 0xC0	; 192
   11c56:	f1 4d       	sbci	r31, 0xD1	; 209
   11c58:	85 91       	lpm	r24, Z+
   11c5a:	94 91       	lpm	r25, Z
   11c5c:	90 93 bf 0d 	sts	0x0DBF, r25	; 0x800dbf <my_touch+0x14>
   11c60:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <my_touch+0x13>
   11c64:	e4 eb       	ldi	r30, 0xB4	; 180
   11c66:	fe e2       	ldi	r31, 0x2E	; 46
   11c68:	e4 91       	lpm	r30, Z
   11c6a:	f0 e0       	ldi	r31, 0x00	; 0
   11c6c:	ee 0f       	add	r30, r30
   11c6e:	ff 1f       	adc	r31, r31
   11c70:	ea 57       	subi	r30, 0x7A	; 122
   11c72:	f1 4d       	sbci	r31, 0xD1	; 209
   11c74:	85 91       	lpm	r24, Z+
   11c76:	94 91       	lpm	r25, Z
   11c78:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_touch+0x16>
   11c7c:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_touch+0x15>
   11c80:	ed e9       	ldi	r30, 0x9D	; 157
   11c82:	fe e2       	ldi	r31, 0x2E	; 46
   11c84:	e4 91       	lpm	r30, Z
   11c86:	f0 e0       	ldi	r31, 0x00	; 0
   11c88:	ee 0f       	add	r30, r30
   11c8a:	ff 1f       	adc	r31, r31
   11c8c:	e0 5c       	subi	r30, 0xC0	; 192
   11c8e:	f1 4d       	sbci	r31, 0xD1	; 209
   11c90:	85 91       	lpm	r24, Z+
   11c92:	94 91       	lpm	r25, Z
   11c94:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_touch+0x18>
   11c98:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_touch+0x17>
   11c9c:	ec e6       	ldi	r30, 0x6C	; 108
   11c9e:	fe e2       	ldi	r31, 0x2E	; 46
   11ca0:	e4 91       	lpm	r30, Z
   11ca2:	e0 93 c4 0d 	sts	0x0DC4, r30	; 0x800dc4 <my_touch+0x19>
   11ca6:	eb e6       	ldi	r30, 0x6B	; 107
   11ca8:	fe e2       	ldi	r31, 0x2E	; 46
   11caa:	e4 91       	lpm	r30, Z
   11cac:	e0 93 c5 0d 	sts	0x0DC5, r30	; 0x800dc5 <my_touch+0x1a>
   11cb0:	ed e6       	ldi	r30, 0x6D	; 109
   11cb2:	fe e2       	ldi	r31, 0x2E	; 46
   11cb4:	e4 91       	lpm	r30, Z
   11cb6:	e0 93 c6 0d 	sts	0x0DC6, r30	; 0x800dc6 <my_touch+0x1b>
   11cba:	ee e6       	ldi	r30, 0x6E	; 110
   11cbc:	fe e2       	ldi	r31, 0x2E	; 46
   11cbe:	e4 91       	lpm	r30, Z
   11cc0:	e0 93 c7 0d 	sts	0x0DC7, r30	; 0x800dc7 <my_touch+0x1c>
   11cc4:	e7 e5       	ldi	r30, 0x57	; 87
   11cc6:	fe e2       	ldi	r31, 0x2E	; 46
   11cc8:	e4 91       	lpm	r30, Z
   11cca:	e0 93 c8 0d 	sts	0x0DC8, r30	; 0x800dc8 <my_touch+0x1d>
   11cce:	61 e0       	ldi	r22, 0x01	; 1
   11cd0:	8c e1       	ldi	r24, 0x1C	; 28
   11cd2:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11cd6:	61 e0       	ldi	r22, 0x01	; 1
   11cd8:	8b e1       	ldi	r24, 0x1B	; 27
   11cda:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11cde:	60 e0       	ldi	r22, 0x00	; 0
   11ce0:	8d e1       	ldi	r24, 0x1D	; 29
   11ce2:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11ce6:	61 e0       	ldi	r22, 0x01	; 1
   11ce8:	8e e1       	ldi	r24, 0x1E	; 30
   11cea:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11cee:	60 e0       	ldi	r22, 0x00	; 0
   11cf0:	87 e0       	ldi	r24, 0x07	; 7
   11cf2:	0e 94 68 78 	call	0xf0d0	; 0xf0d0 <pinMode>
   11cf6:	10 92 b7 0d 	sts	0x0DB7, r1	; 0x800db7 <my_touch+0xc>
   11cfa:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <my_touch+0xd>
   11cfe:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <my_touch+0xe>
   11d02:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <my_touch+0x9>
   11d06:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <my_touch+0x8>
   11d0a:	10 92 b6 0d 	sts	0x0DB6, r1	; 0x800db6 <my_touch+0xb>
   11d0e:	10 92 b5 0d 	sts	0x0DB5, r1	; 0x800db5 <my_touch+0xa>
   11d12:	10 92 ac 0d 	sts	0x0DAC, r1	; 0x800dac <my_touch+0x1>
   11d16:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <my_touch>
   11d1a:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <my_touch+0x3>
   11d1e:	10 92 ad 0d 	sts	0x0DAD, r1	; 0x800dad <my_touch+0x2>
   11d22:	10 93 b0 0d 	sts	0x0DB0, r17	; 0x800db0 <my_touch+0x5>
   11d26:	00 93 af 0d 	sts	0x0DAF, r16	; 0x800daf <my_touch+0x4>
   11d2a:	10 93 b2 0d 	sts	0x0DB2, r17	; 0x800db2 <my_touch+0x7>
   11d2e:	00 93 b1 0d 	sts	0x0DB1, r16	; 0x800db1 <my_touch+0x6>
   11d32:	8a e0       	ldi	r24, 0x0A	; 10
   11d34:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <doc>
   11d38:	85 ea       	ldi	r24, 0xA5	; 165
   11d3a:	9c e0       	ldi	r25, 0x0C	; 12
   11d3c:	90 93 a0 0c 	sts	0x0CA0, r25	; 0x800ca0 <doc+0x4>
   11d40:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <doc+0x3>
   11d44:	20 e0       	ldi	r18, 0x00	; 0
   11d46:	31 e0       	ldi	r19, 0x01	; 1
   11d48:	30 93 a2 0c 	sts	0x0CA2, r19	; 0x800ca2 <doc+0x6>
   11d4c:	20 93 a1 0c 	sts	0x0CA1, r18	; 0x800ca1 <doc+0x5>
   11d50:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <doc+0x8>
   11d54:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <doc+0x7>
   11d58:	8e e7       	ldi	r24, 0x7E	; 126
   11d5a:	92 e0       	ldi	r25, 0x02	; 2
   11d5c:	90 93 9e 0c 	sts	0x0C9E, r25	; 0x800c9e <doc+0x2>
   11d60:	80 93 9d 0c 	sts	0x0C9D, r24	; 0x800c9d <doc+0x1>
   11d64:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <doc+0x10a>
   11d68:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <doc+0x109>
   11d6c:	80 e0       	ldi	r24, 0x00	; 0
   11d6e:	90 e0       	ldi	r25, 0x00	; 0
   11d70:	a2 e0       	ldi	r26, 0x02	; 2
   11d72:	b0 e0       	ldi	r27, 0x00	; 0
   11d74:	80 93 93 0c 	sts	0x0C93, r24	; 0x800c93 <SRAM+0x4>
   11d78:	90 93 94 0c 	sts	0x0C94, r25	; 0x800c94 <SRAM+0x5>
   11d7c:	a0 93 95 0c 	sts	0x0C95, r26	; 0x800c95 <SRAM+0x6>
   11d80:	b0 93 96 0c 	sts	0x0C96, r27	; 0x800c96 <SRAM+0x7>
   11d84:	d0 93 92 0c 	sts	0x0C92, r29	; 0x800c92 <SRAM+0x3>
   11d88:	c0 93 91 0c 	sts	0x0C91, r28	; 0x800c91 <SRAM+0x2>
   11d8c:	80 e6       	ldi	r24, 0x60	; 96
   11d8e:	90 e1       	ldi	r25, 0x10	; 16
   11d90:	90 93 90 0c 	sts	0x0C90, r25	; 0x800c90 <SRAM+0x1>
   11d94:	80 93 8f 0c 	sts	0x0C8F, r24	; 0x800c8f <SRAM>
   11d98:	46 e1       	ldi	r20, 0x16	; 22
   11d9a:	40 93 97 0c 	sts	0x0C97, r20	; 0x800c97 <SRAM+0x8>
   11d9e:	40 e0       	ldi	r20, 0x00	; 0
   11da0:	50 e0       	ldi	r21, 0x00	; 0
   11da2:	64 e0       	ldi	r22, 0x04	; 4
   11da4:	70 e0       	ldi	r23, 0x00	; 0
   11da6:	40 93 84 0c 	sts	0x0C84, r20	; 0x800c84 <SROM+0x4>
   11daa:	50 93 85 0c 	sts	0x0C85, r21	; 0x800c85 <SROM+0x5>
   11dae:	60 93 86 0c 	sts	0x0C86, r22	; 0x800c86 <SROM+0x6>
   11db2:	70 93 87 0c 	sts	0x0C87, r23	; 0x800c87 <SROM+0x7>
   11db6:	30 93 89 0c 	sts	0x0C89, r19	; 0x800c89 <SROM+0x9>
   11dba:	20 93 88 0c 	sts	0x0C88, r18	; 0x800c88 <SROM+0x8>
   11dbe:	10 92 83 0c 	sts	0x0C83, r1	; 0x800c83 <SROM+0x3>
   11dc2:	10 92 82 0c 	sts	0x0C82, r1	; 0x800c82 <SROM+0x2>
   11dc6:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <SROM+0x1>
   11dca:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <SROM>
   11dce:	87 e1       	ldi	r24, 0x17	; 23
   11dd0:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <SROM+0xa>
   11dd4:	df 91       	pop	r29
   11dd6:	cf 91       	pop	r28
   11dd8:	1f 91       	pop	r17
   11dda:	0f 91       	pop	r16
   11ddc:	08 95       	ret

00011dde <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   11dde:	cf 93       	push	r28
   11de0:	df 93       	push	r29
   11de2:	cd b7       	in	r28, 0x3d	; 61
   11de4:	de b7       	in	r29, 0x3e	; 62
   11de6:	c7 58       	subi	r28, 0x87	; 135
   11de8:	d1 09       	sbc	r29, r1
   11dea:	0f b6       	in	r0, 0x3f	; 63
   11dec:	f8 94       	cli
   11dee:	de bf       	out	0x3e, r29	; 62
   11df0:	0f be       	out	0x3f, r0	; 63
   11df2:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   11df4:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   11df6:	84 b5       	in	r24, 0x24	; 36
   11df8:	83 60       	ori	r24, 0x03	; 3
   11dfa:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   11dfc:	85 b5       	in	r24, 0x25	; 37
   11dfe:	83 60       	ori	r24, 0x03	; 3
   11e00:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   11e02:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   11e06:	81 60       	ori	r24, 0x01	; 1
   11e08:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   11e0c:	82 e0       	ldi	r24, 0x02	; 2
   11e0e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   11e12:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   11e16:	81 60       	ori	r24, 0x01	; 1
   11e18:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   11e1c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11e20:	81 60       	ori	r24, 0x01	; 1
   11e22:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   11e26:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   11e2a:	84 60       	ori	r24, 0x04	; 4
   11e2c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   11e30:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   11e34:	81 60       	ori	r24, 0x01	; 1
   11e36:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   11e3a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   11e3e:	83 60       	ori	r24, 0x03	; 3
   11e40:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   11e44:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11e48:	81 60       	ori	r24, 0x01	; 1
   11e4a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   11e4e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   11e52:	83 60       	ori	r24, 0x03	; 3
   11e54:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   11e58:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   11e5c:	81 60       	ori	r24, 0x01	; 1
   11e5e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   11e62:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   11e66:	83 60       	ori	r24, 0x03	; 3
   11e68:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   11e6c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   11e70:	81 60       	ori	r24, 0x01	; 1
   11e72:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   11e76:	87 e8       	ldi	r24, 0x87	; 135
   11e78:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   11e7c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   11e80:	0e 94 ac 4d 	call	0x9b58	; 0x9b58 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   11e84:	21 e4       	ldi	r18, 0x41	; 65
   11e86:	30 e0       	ldi	r19, 0x00	; 0
   11e88:	2c 0f       	add	r18, r28
   11e8a:	3d 1f       	adc	r19, r29
   11e8c:	24 5f       	subi	r18, 0xF4	; 244
   11e8e:	3f 4f       	sbci	r19, 0xFF	; 255
   11e90:	cc 57       	subi	r28, 0x7C	; 124
   11e92:	df 4f       	sbci	r29, 0xFF	; 255
   11e94:	39 83       	std	Y+1, r19	; 0x01
   11e96:	28 83       	st	Y, r18
   11e98:	c4 58       	subi	r28, 0x84	; 132
   11e9a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   11e9c:	41 e4       	ldi	r20, 0x41	; 65
   11e9e:	50 e0       	ldi	r21, 0x00	; 0
   11ea0:	4c 0f       	add	r20, r28
   11ea2:	5d 1f       	adc	r21, r29
   11ea4:	4f 5f       	subi	r20, 0xFF	; 255
   11ea6:	5f 4f       	sbci	r21, 0xFF	; 255
   11ea8:	ca 57       	subi	r28, 0x7A	; 122
   11eaa:	df 4f       	sbci	r29, 0xFF	; 255
   11eac:	59 83       	std	Y+1, r21	; 0x01
   11eae:	48 83       	st	Y, r20
   11eb0:	c6 58       	subi	r28, 0x86	; 134
   11eb2:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   11eb4:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   11eb8:	1b 01       	movw	r2, r22
   11eba:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
  if (mqtt_reconnect() == 0)
   11ebc:	0e 94 9b 4b 	call	0x9736	; 0x9736 <mqtt_reconnect()>
   11ec0:	90 91 df 0a 	lds	r25, 0x0ADF	; 0x800adf <selftest_data>
   11ec4:	81 11       	cpse	r24, r1
   11ec6:	87 c0       	rjmp	.+270    	; 0x11fd6 <main+0x1f8>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   11ec8:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   11eca:	90 93 df 0a 	sts	0x0ADF, r25	; 0x800adf <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   11ece:	0e 94 f9 80 	call	0x101f2	; 0x101f2 <PubSubClient::loop() [clone .constprop.89]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
    //sprintf(str1, "x=%d y=%d", my_touch.x, my_touch.y);
    //show_string(str1, 0, 270, 1, BLACK, LIGHTGREY, 0);
    }
  */

  if (draw_menu(false) == true)
   11ed2:	80 e0       	ldi	r24, 0x00	; 0
   11ed4:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <draw_menu(bool)>
   11ed8:	88 23       	and	r24, r24
   11eda:	19 f0       	breq	.+6      	; 0x11ee2 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642
    draw_menu(true);
   11edc:	81 e0       	ldi	r24, 0x01	; 1
   11ede:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   11ee2:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   11ee6:	00 91 df 10 	lds	r16, 0x10DF	; 0x8010df <milis_10s>
   11eea:	10 91 e0 10 	lds	r17, 0x10E0	; 0x8010e0 <milis_10s+0x1>
   11eee:	20 91 e1 10 	lds	r18, 0x10E1	; 0x8010e1 <milis_10s+0x2>
   11ef2:	30 91 e2 10 	lds	r19, 0x10E2	; 0x8010e2 <milis_10s+0x3>
   11ef6:	60 1b       	sub	r22, r16
   11ef8:	71 0b       	sbc	r23, r17
   11efa:	82 0b       	sbc	r24, r18
   11efc:	93 0b       	sbc	r25, r19
   11efe:	61 31       	cpi	r22, 0x11	; 17
   11f00:	77 42       	sbci	r23, 0x27	; 39
   11f02:	81 05       	cpc	r24, r1
   11f04:	91 05       	cpc	r25, r1
   11f06:	08 f4       	brcc	.+2      	; 0x11f0a <main+0x12c>
   11f08:	c6 c4       	rjmp	.+2444   	; 0x12896 <main+0xab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
  {
    milis_10s = millis();
   11f0a:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   11f0e:	60 93 df 10 	sts	0x10DF, r22	; 0x8010df <milis_10s>
   11f12:	70 93 e0 10 	sts	0x10E0, r23	; 0x8010e0 <milis_10s+0x1>
   11f16:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <milis_10s+0x2>
   11f1a:	90 93 e2 10 	sts	0x10E2, r25	; 0x8010e2 <milis_10s+0x3>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   11f1e:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   11f22:	4a e0       	ldi	r20, 0x0A	; 10
   11f24:	be 01       	movw	r22, r28
   11f26:	6f 5f       	subi	r22, 0xFF	; 255
   11f28:	7f 4f       	sbci	r23, 0xFF	; 255
   11f2a:	90 e0       	ldi	r25, 0x00	; 0
   11f2c:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   11f30:	ae 01       	movw	r20, r28
   11f32:	4f 5f       	subi	r20, 0xFF	; 255
   11f34:	5f 4f       	sbci	r21, 0xFF	; 255
   11f36:	6f e1       	ldi	r22, 0x1F	; 31
   11f38:	77 e0       	ldi	r23, 0x07	; 7
   11f3a:	81 e2       	ldi	r24, 0x21	; 33
   11f3c:	9e e0       	ldi	r25, 0x0E	; 14
   11f3e:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   11f42:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   11f44:	6b e0       	ldi	r22, 0x0B	; 11
   11f46:	d6 2e       	mov	r13, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   11f48:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <Global_HWwirenum>
   11f4c:	18 17       	cp	r17, r24
   11f4e:	08 f0       	brcs	.+2      	; 0x11f52 <main+0x174>
   11f50:	44 c0       	rjmp	.+136    	; 0x11fda <main+0x1fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   11f52:	1d 9d       	mul	r17, r13
   11f54:	c0 01       	movw	r24, r0
   11f56:	11 24       	eor	r1, r1
   11f58:	dc 01       	movw	r26, r24
   11f5a:	af 52       	subi	r26, 0x2F	; 47
   11f5c:	b6 4f       	sbci	r27, 0xF6	; 246
   11f5e:	7d 01       	movw	r14, r26
   11f60:	00 e1       	ldi	r16, 0x10	; 16
   11f62:	28 e0       	ldi	r18, 0x08	; 8
   11f64:	ad 01       	movw	r20, r26
   11f66:	6a e3       	ldi	r22, 0x3A	; 58
   11f68:	ce 01       	movw	r24, r28
   11f6a:	01 96       	adiw	r24, 0x01	; 1
   11f6c:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   11f70:	9e 01       	movw	r18, r28
   11f72:	2f 5f       	subi	r18, 0xFF	; 255
   11f74:	3f 4f       	sbci	r19, 0xFF	; 255
   11f76:	4b e2       	ldi	r20, 0x2B	; 43
   11f78:	57 e0       	ldi	r21, 0x07	; 7
   11f7a:	61 2f       	mov	r22, r17
   11f7c:	8f e2       	ldi	r24, 0x2F	; 47
   11f7e:	97 e0       	ldi	r25, 0x07	; 7
   11f80:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   11f84:	f7 01       	movw	r30, r14
   11f86:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   11f88:	4a e0       	ldi	r20, 0x0A	; 10
   11f8a:	be 01       	movw	r22, r28
   11f8c:	6f 5f       	subi	r22, 0xFF	; 255
   11f8e:	7f 4f       	sbci	r23, 0xFF	; 255
   11f90:	90 e0       	ldi	r25, 0x00	; 0
   11f92:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   11f96:	9e 01       	movw	r18, r28
   11f98:	2f 5f       	subi	r18, 0xFF	; 255
   11f9a:	3f 4f       	sbci	r19, 0xFF	; 255
   11f9c:	45 e3       	ldi	r20, 0x35	; 53
   11f9e:	57 e0       	ldi	r21, 0x07	; 7
   11fa0:	61 2f       	mov	r22, r17
   11fa2:	8f e2       	ldi	r24, 0x2F	; 47
   11fa4:	97 e0       	ldi	r25, 0x07	; 7
   11fa6:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   11faa:	d7 01       	movw	r26, r14
   11fac:	1a 96       	adiw	r26, 0x0a	; 10
   11fae:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   11fb0:	4a e0       	ldi	r20, 0x0A	; 10
   11fb2:	be 01       	movw	r22, r28
   11fb4:	6f 5f       	subi	r22, 0xFF	; 255
   11fb6:	7f 4f       	sbci	r23, 0xFF	; 255
   11fb8:	90 e0       	ldi	r25, 0x00	; 0
   11fba:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   11fbe:	9e 01       	movw	r18, r28
   11fc0:	2f 5f       	subi	r18, 0xFF	; 255
   11fc2:	3f 4f       	sbci	r19, 0xFF	; 255
   11fc4:	4e e3       	ldi	r20, 0x3E	; 62
   11fc6:	57 e0       	ldi	r21, 0x07	; 7
   11fc8:	61 2f       	mov	r22, r17
   11fca:	8f e2       	ldi	r24, 0x2F	; 47
   11fcc:	97 e0       	ldi	r25, 0x07	; 7
   11fce:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   11fd2:	1f 5f       	subi	r17, 0xFF	; 255
   11fd4:	b9 cf       	rjmp	.-142    	; 0x11f48 <main+0x16a>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   11fd6:	90 62       	ori	r25, 0x20	; 32
   11fd8:	78 cf       	rjmp	.-272    	; 0x11eca <main+0xec>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   11fda:	81 e2       	ldi	r24, 0x21	; 33
   11fdc:	9e e0       	ldi	r25, 0x0E	; 14
   11fde:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   11fe2:	88 23       	and	r24, r24
   11fe4:	09 f4       	brne	.+2      	; 0x11fe8 <main+0x20a>
   11fe6:	ac c0       	rjmp	.+344    	; 0x12140 <main+0x362>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   11fe8:	6e ee       	ldi	r22, 0xEE	; 238
   11fea:	78 e2       	ldi	r23, 0x28	; 40
   11fec:	ce 01       	movw	r24, r28
   11fee:	8f 5b       	subi	r24, 0xBF	; 191
   11ff0:	9f 4f       	sbci	r25, 0xFF	; 255
   11ff2:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   11ff6:	4a e0       	ldi	r20, 0x0A	; 10
   11ff8:	be 01       	movw	r22, r28
   11ffa:	6f 5f       	subi	r22, 0xFF	; 255
   11ffc:	7f 4f       	sbci	r23, 0xFF	; 255
   11ffe:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <mqtt_send_message>
   12002:	90 91 79 0b 	lds	r25, 0x0B79	; 0x800b79 <mqtt_send_message+0x1>
   12006:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1200a:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <mqtt_send_message+0x1>
   1200e:	10 92 78 0b 	sts	0x0B78, r1	; 0x800b78 <mqtt_send_message>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12012:	ae 01       	movw	r20, r28
   12014:	4f 5f       	subi	r20, 0xFF	; 255
   12016:	5f 4f       	sbci	r21, 0xFF	; 255
   12018:	be 01       	movw	r22, r28
   1201a:	6f 5b       	subi	r22, 0xBF	; 191
   1201c:	7f 4f       	sbci	r23, 0xFF	; 255
   1201e:	81 e2       	ldi	r24, 0x21	; 33
   12020:	9e e0       	ldi	r25, 0x0E	; 14
   12022:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   12026:	6c ed       	ldi	r22, 0xDC	; 220
   12028:	78 e2       	ldi	r23, 0x28	; 40
   1202a:	ce 01       	movw	r24, r28
   1202c:	8f 5b       	subi	r24, 0xBF	; 191
   1202e:	9f 4f       	sbci	r25, 0xFF	; 255
   12030:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12034:	4a e0       	ldi	r20, 0x0A	; 10
   12036:	be 01       	movw	r22, r28
   12038:	6f 5f       	subi	r22, 0xFF	; 255
   1203a:	7f 4f       	sbci	r23, 0xFF	; 255
   1203c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_error>
   12040:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_error+0x1>
   12044:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12048:	ae 01       	movw	r20, r28
   1204a:	4f 5f       	subi	r20, 0xFF	; 255
   1204c:	5f 4f       	sbci	r21, 0xFF	; 255
   1204e:	be 01       	movw	r22, r28
   12050:	6f 5b       	subi	r22, 0xBF	; 191
   12052:	7f 4f       	sbci	r23, 0xFF	; 255
   12054:	81 e2       	ldi	r24, 0x21	; 33
   12056:	9e e0       	ldi	r25, 0x0E	; 14
   12058:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   1205c:	68 ec       	ldi	r22, 0xC8	; 200
   1205e:	78 e2       	ldi	r23, 0x28	; 40
   12060:	ce 01       	movw	r24, r28
   12062:	8f 5b       	subi	r24, 0xBF	; 191
   12064:	9f 4f       	sbci	r25, 0xFF	; 255
   12066:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1206a:	4a e0       	ldi	r20, 0x0A	; 10
   1206c:	be 01       	movw	r22, r28
   1206e:	6f 5f       	subi	r22, 0xFF	; 255
   12070:	7f 4f       	sbci	r23, 0xFF	; 255
   12072:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <mqtt_receive_message>
   12076:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <mqtt_receive_message+0x1>
   1207a:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   1207e:	10 92 17 0a 	sts	0x0A17, r1	; 0x800a17 <mqtt_receive_message+0x1>
   12082:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <mqtt_receive_message>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12086:	ae 01       	movw	r20, r28
   12088:	4f 5f       	subi	r20, 0xFF	; 255
   1208a:	5f 4f       	sbci	r21, 0xFF	; 255
   1208c:	be 01       	movw	r22, r28
   1208e:	6f 5b       	subi	r22, 0xBF	; 191
   12090:	7f 4f       	sbci	r23, 0xFF	; 255
   12092:	81 e2       	ldi	r24, 0x21	; 33
   12094:	9e e0       	ldi	r25, 0x0E	; 14
   12096:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1209a:	64 eb       	ldi	r22, 0xB4	; 180
   1209c:	78 e2       	ldi	r23, 0x28	; 40
   1209e:	ce 01       	movw	r24, r28
   120a0:	8f 5b       	subi	r24, 0xBF	; 191
   120a2:	9f 4f       	sbci	r25, 0xFF	; 255
   120a4:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   120a8:	4a e0       	ldi	r20, 0x0A	; 10
   120aa:	be 01       	movw	r22, r28
   120ac:	6f 5f       	subi	r22, 0xFF	; 255
   120ae:	7f 4f       	sbci	r23, 0xFF	; 255
   120b0:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <mqtt_process_message>
   120b4:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <mqtt_process_message+0x1>
   120b8:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   120bc:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <mqtt_process_message+0x1>
   120c0:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <mqtt_process_message>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   120c4:	ae 01       	movw	r20, r28
   120c6:	4f 5f       	subi	r20, 0xFF	; 255
   120c8:	5f 4f       	sbci	r21, 0xFF	; 255
   120ca:	be 01       	movw	r22, r28
   120cc:	6f 5b       	subi	r22, 0xBF	; 191
   120ce:	7f 4f       	sbci	r23, 0xFF	; 255
   120d0:	81 e2       	ldi	r24, 0x21	; 33
   120d2:	9e e0       	ldi	r25, 0x0E	; 14
   120d4:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   120d8:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   120da:	0a e0       	ldi	r16, 0x0A	; 10
   120dc:	24 e0       	ldi	r18, 0x04	; 4
   120de:	44 e3       	ldi	r20, 0x34	; 52
   120e0:	5c e0       	ldi	r21, 0x0C	; 12
   120e2:	6e e2       	ldi	r22, 0x2E	; 46
   120e4:	ce 01       	movw	r24, r28
   120e6:	01 96       	adiw	r24, 0x01	; 1
   120e8:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   120ec:	69 ea       	ldi	r22, 0xA9	; 169
   120ee:	78 e2       	ldi	r23, 0x28	; 40
   120f0:	ce 01       	movw	r24, r28
   120f2:	8f 5b       	subi	r24, 0xBF	; 191
   120f4:	9f 4f       	sbci	r25, 0xFF	; 255
   120f6:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   120fa:	ae 01       	movw	r20, r28
   120fc:	4f 5f       	subi	r20, 0xFF	; 255
   120fe:	5f 4f       	sbci	r21, 0xFF	; 255
   12100:	be 01       	movw	r22, r28
   12102:	6f 5b       	subi	r22, 0xBF	; 191
   12104:	7f 4f       	sbci	r23, 0xFF	; 255
   12106:	81 e2       	ldi	r24, 0x21	; 33
   12108:	9e e0       	ldi	r25, 0x0E	; 14
   1210a:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   1210e:	65 e9       	ldi	r22, 0x95	; 149
   12110:	78 e2       	ldi	r23, 0x28	; 40
   12112:	ce 01       	movw	r24, r28
   12114:	8f 5b       	subi	r24, 0xBF	; 191
   12116:	9f 4f       	sbci	r25, 0xFF	; 255
   12118:	0e 94 69 98 	call	0x130d2	; 0x130d2 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1211c:	4a e0       	ldi	r20, 0x0A	; 10
   1211e:	be 01       	movw	r22, r28
   12120:	6f 5f       	subi	r22, 0xFF	; 255
   12122:	7f 4f       	sbci	r23, 0xFF	; 255
   12124:	90 e0       	ldi	r25, 0x00	; 0
   12126:	80 e0       	ldi	r24, 0x00	; 0
   12128:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1212c:	ae 01       	movw	r20, r28
   1212e:	4f 5f       	subi	r20, 0xFF	; 255
   12130:	5f 4f       	sbci	r21, 0xFF	; 255
   12132:	be 01       	movw	r22, r28
   12134:	6f 5b       	subi	r22, 0xBF	; 191
   12136:	7f 4f       	sbci	r23, 0xFF	; 255
   12138:	81 e2       	ldi	r24, 0x21	; 33
   1213a:	9e e0       	ldi	r25, 0x0E	; 14
   1213c:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_740910/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   12140:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <mqtt_error+0x1>
   12144:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   12148:	81 e2       	ldi	r24, 0x21	; 33
   1214a:	9e e0       	ldi	r25, 0x0E	; 14
   1214c:	0e 94 c3 80 	call	0x10186	; 0x10186 <PubSubClient::connected()>
   12150:	88 23       	and	r24, r24
   12152:	09 f4       	brne	.+2      	; 0x12156 <main+0x378>
   12154:	6c c1       	rjmp	.+728    	; 0x1242e <main+0x650>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
  {
    strcpy(str_topic, "status/uptime");
   12156:	66 e4       	ldi	r22, 0x46	; 70
   12158:	77 e0       	ldi	r23, 0x07	; 7
   1215a:	ce 01       	movw	r24, r28
   1215c:	8f 5b       	subi	r24, 0xBF	; 191
   1215e:	9f 4f       	sbci	r25, 0xFF	; 255
   12160:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12164:	4a e0       	ldi	r20, 0x0A	; 10
   12166:	be 01       	movw	r22, r28
   12168:	6f 5f       	subi	r22, 0xFF	; 255
   1216a:	7f 4f       	sbci	r23, 0xFF	; 255
   1216c:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <uptime>
   12170:	90 91 e7 0a 	lds	r25, 0x0AE7	; 0x800ae7 <uptime+0x1>
   12174:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   12178:	ae 01       	movw	r20, r28
   1217a:	4f 5f       	subi	r20, 0xFF	; 255
   1217c:	5f 4f       	sbci	r21, 0xFF	; 255
   1217e:	be 01       	movw	r22, r28
   12180:	6f 5b       	subi	r22, 0xBF	; 191
   12182:	7f 4f       	sbci	r23, 0xFF	; 255
   12184:	81 e2       	ldi	r24, 0x21	; 33
   12186:	9e e0       	ldi	r25, 0x0E	; 14
   12188:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
    ///
    strcpy(str_topic, "status/brigthness");
   1218c:	64 e5       	ldi	r22, 0x54	; 84
   1218e:	77 e0       	ldi	r23, 0x07	; 7
   12190:	ce 01       	movw	r24, r28
   12192:	8f 5b       	subi	r24, 0xBF	; 191
   12194:	9f 4f       	sbci	r25, 0xFF	; 255
   12196:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1219a:	4a e0       	ldi	r20, 0x0A	; 10
   1219c:	be 01       	movw	r22, r28
   1219e:	6f 5f       	subi	r22, 0xFF	; 255
   121a0:	7f 4f       	sbci	r23, 0xFF	; 255
   121a2:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <light_curr>
   121a6:	90 91 e3 0a 	lds	r25, 0x0AE3	; 0x800ae3 <light_curr+0x1>
   121aa:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   121ae:	ae 01       	movw	r20, r28
   121b0:	4f 5f       	subi	r20, 0xFF	; 255
   121b2:	5f 4f       	sbci	r21, 0xFF	; 255
   121b4:	be 01       	movw	r22, r28
   121b6:	6f 5b       	subi	r22, 0xBF	; 191
   121b8:	7f 4f       	sbci	r23, 0xFF	; 255
   121ba:	81 e2       	ldi	r24, 0x21	; 33
   121bc:	9e e0       	ldi	r25, 0x0E	; 14
   121be:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   121c2:	66 e6       	ldi	r22, 0x66	; 102
   121c4:	77 e0       	ldi	r23, 0x07	; 7
   121c6:	ce 01       	movw	r24, r28
   121c8:	8f 5b       	subi	r24, 0xBF	; 191
   121ca:	9f 4f       	sbci	r25, 0xFF	; 255
   121cc:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   121d0:	4a e0       	ldi	r20, 0x0A	; 10
   121d2:	be 01       	movw	r22, r28
   121d4:	6f 5f       	subi	r22, 0xFF	; 255
   121d6:	7f 4f       	sbci	r23, 0xFF	; 255
   121d8:	90 e0       	ldi	r25, 0x00	; 0
   121da:	80 e0       	ldi	r24, 0x00	; 0
   121dc:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   121e0:	ae 01       	movw	r20, r28
   121e2:	4f 5f       	subi	r20, 0xFF	; 255
   121e4:	5f 4f       	sbci	r21, 0xFF	; 255
   121e6:	be 01       	movw	r22, r28
   121e8:	6f 5b       	subi	r22, 0xBF	; 191
   121ea:	7f 4f       	sbci	r23, 0xFF	; 255
   121ec:	81 e2       	ldi	r24, 0x21	; 33
   121ee:	9e e0       	ldi	r25, 0x0E	; 14
   121f0:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
    ///
    strcpy(str_topic, "status/load_min");
   121f4:	6d e7       	ldi	r22, 0x7D	; 125
   121f6:	77 e0       	ldi	r23, 0x07	; 7
   121f8:	ce 01       	movw	r24, r28
   121fa:	8f 5b       	subi	r24, 0xBF	; 191
   121fc:	9f 4f       	sbci	r25, 0xFF	; 255
   121fe:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12202:	4a e0       	ldi	r20, 0x0A	; 10
   12204:	be 01       	movw	r22, r28
   12206:	6f 5f       	subi	r22, 0xFF	; 255
   12208:	7f 4f       	sbci	r23, 0xFF	; 255
   1220a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   1220e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   12212:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   12216:	ae 01       	movw	r20, r28
   12218:	4f 5f       	subi	r20, 0xFF	; 255
   1221a:	5f 4f       	sbci	r21, 0xFF	; 255
   1221c:	be 01       	movw	r22, r28
   1221e:	6f 5b       	subi	r22, 0xBF	; 191
   12220:	7f 4f       	sbci	r23, 0xFF	; 255
   12222:	81 e2       	ldi	r24, 0x21	; 33
   12224:	9e e0       	ldi	r25, 0x0E	; 14
   12226:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
    ///
    strcpy(str_topic, "status/load_max");
   1222a:	6d e8       	ldi	r22, 0x8D	; 141
   1222c:	77 e0       	ldi	r23, 0x07	; 7
   1222e:	ce 01       	movw	r24, r28
   12230:	8f 5b       	subi	r24, 0xBF	; 191
   12232:	9f 4f       	sbci	r25, 0xFF	; 255
   12234:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12238:	4a e0       	ldi	r20, 0x0A	; 10
   1223a:	be 01       	movw	r22, r28
   1223c:	6f 5f       	subi	r22, 0xFF	; 255
   1223e:	7f 4f       	sbci	r23, 0xFF	; 255
   12240:	80 91 ce 10 	lds	r24, 0x10CE	; 0x8010ce <load_max>
   12244:	90 91 cf 10 	lds	r25, 0x10CF	; 0x8010cf <load_max+0x1>
   12248:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1224c:	ae 01       	movw	r20, r28
   1224e:	4f 5f       	subi	r20, 0xFF	; 255
   12250:	5f 4f       	sbci	r21, 0xFF	; 255
   12252:	be 01       	movw	r22, r28
   12254:	6f 5b       	subi	r22, 0xBF	; 191
   12256:	7f 4f       	sbci	r23, 0xFF	; 255
   12258:	81 e2       	ldi	r24, 0x21	; 33
   1225a:	9e e0       	ldi	r25, 0x0E	; 14
   1225c:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
    ///
    load_max = 0;
   12260:	10 92 ce 10 	sts	0x10CE, r1	; 0x8010ce <load_max>
   12264:	10 92 cf 10 	sts	0x10CF, r1	; 0x8010cf <load_max+0x1>
   12268:	10 92 d0 10 	sts	0x10D0, r1	; 0x8010d0 <load_max+0x2>
   1226c:	10 92 d1 10 	sts	0x10D1, r1	; 0x8010d1 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
    load_min = 0xffffffff;
   12270:	2f ef       	ldi	r18, 0xFF	; 255
   12272:	3f ef       	ldi	r19, 0xFF	; 255
   12274:	a9 01       	movw	r20, r18
   12276:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   1227a:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   1227e:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   12282:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    ///
    strcpy(str_topic, "status/default_ring");
   12286:	6d e9       	ldi	r22, 0x9D	; 157
   12288:	77 e0       	ldi	r23, 0x07	; 7
   1228a:	ce 01       	movw	r24, r28
   1228c:	8f 5b       	subi	r24, 0xBF	; 191
   1228e:	9f 4f       	sbci	r25, 0xFF	; 255
   12290:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
    itoa(default_ring, payload, 10);
   12294:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12298:	4a e0       	ldi	r20, 0x0A	; 10
   1229a:	be 01       	movw	r22, r28
   1229c:	6f 5f       	subi	r22, 0xFF	; 255
   1229e:	7f 4f       	sbci	r23, 0xFF	; 255
   122a0:	90 e0       	ldi	r25, 0x00	; 0
   122a2:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   122a6:	ae 01       	movw	r20, r28
   122a8:	4f 5f       	subi	r20, 0xFF	; 255
   122aa:	5f 4f       	sbci	r21, 0xFF	; 255
   122ac:	be 01       	movw	r22, r28
   122ae:	6f 5b       	subi	r22, 0xBF	; 191
   122b0:	7f 4f       	sbci	r23, 0xFF	; 255
   122b2:	81 e2       	ldi	r24, 0x21	; 33
   122b4:	9e e0       	ldi	r25, 0x0E	; 14
   122b6:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
    ///
    strcpy(str_topic, "status/selftest");
   122ba:	61 eb       	ldi	r22, 0xB1	; 177
   122bc:	77 e0       	ldi	r23, 0x07	; 7
   122be:	ce 01       	movw	r24, r28
   122c0:	8f 5b       	subi	r24, 0xBF	; 191
   122c2:	9f 4f       	sbci	r25, 0xFF	; 255
   122c4:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
    itoa(selftest_data, payload, 10);
   122c8:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   122cc:	4a e0       	ldi	r20, 0x0A	; 10
   122ce:	be 01       	movw	r22, r28
   122d0:	6f 5f       	subi	r22, 0xFF	; 255
   122d2:	7f 4f       	sbci	r23, 0xFF	; 255
   122d4:	90 e0       	ldi	r25, 0x00	; 0
   122d6:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   122da:	ae 01       	movw	r20, r28
   122dc:	4f 5f       	subi	r20, 0xFF	; 255
   122de:	5f 4f       	sbci	r21, 0xFF	; 255
   122e0:	be 01       	movw	r22, r28
   122e2:	6f 5b       	subi	r22, 0xBF	; 191
   122e4:	7f 4f       	sbci	r23, 0xFF	; 255
   122e6:	81 e2       	ldi	r24, 0x21	; 33
   122e8:	9e e0       	ldi	r25, 0x0E	; 14
   122ea:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597

    strcpy(str_topic, "status/rtds/count");
   122ee:	61 ec       	ldi	r22, 0xC1	; 193
   122f0:	77 e0       	ldi	r23, 0x07	; 7
   122f2:	ce 01       	movw	r24, r28
   122f4:	8f 5b       	subi	r24, 0xBF	; 191
   122f6:	9f 4f       	sbci	r25, 0xFF	; 255
   122f8:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
    itoa(use_rtds, payload, 10);
   122fc:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12300:	4a e0       	ldi	r20, 0x0A	; 10
   12302:	be 01       	movw	r22, r28
   12304:	6f 5f       	subi	r22, 0xFF	; 255
   12306:	7f 4f       	sbci	r23, 0xFF	; 255
   12308:	90 e0       	ldi	r25, 0x00	; 0
   1230a:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1230e:	ae 01       	movw	r20, r28
   12310:	4f 5f       	subi	r20, 0xFF	; 255
   12312:	5f 4f       	sbci	r21, 0xFF	; 255
   12314:	be 01       	movw	r22, r28
   12316:	6f 5b       	subi	r22, 0xBF	; 191
   12318:	7f 4f       	sbci	r23, 0xFF	; 255
   1231a:	81 e2       	ldi	r24, 0x21	; 33
   1231c:	9e e0       	ldi	r25, 0x0E	; 14
   1231e:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   12322:	81 e0       	ldi	r24, 0x01	; 1
   12324:	90 e0       	ldi	r25, 0x00	; 0
   12326:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1232a:	4a e0       	ldi	r20, 0x0A	; 10
   1232c:	be 01       	movw	r22, r28
   1232e:	6f 5f       	subi	r22, 0xFF	; 255
   12330:	7f 4f       	sbci	r23, 0xFF	; 255
   12332:	90 e0       	ldi	r25, 0x00	; 0
   12334:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   12338:	ae 01       	movw	r20, r28
   1233a:	4f 5f       	subi	r20, 0xFF	; 255
   1233c:	5f 4f       	sbci	r21, 0xFF	; 255
   1233e:	63 ed       	ldi	r22, 0xD3	; 211
   12340:	77 e0       	ldi	r23, 0x07	; 7
   12342:	81 e2       	ldi	r24, 0x21	; 33
   12344:	9e e0       	ldi	r25, 0x0E	; 14
   12346:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1234a:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <tritri>
   1234e:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <tritri+0x1>
   12352:	25 e0       	ldi	r18, 0x05	; 5
   12354:	28 9f       	mul	r18, r24
   12356:	b0 01       	movw	r22, r0
   12358:	29 9f       	mul	r18, r25
   1235a:	70 0d       	add	r23, r0
   1235c:	11 24       	eor	r1, r1
   1235e:	90 e0       	ldi	r25, 0x00	; 0
   12360:	80 e0       	ldi	r24, 0x00	; 0
   12362:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
   12366:	20 e0       	ldi	r18, 0x00	; 0
   12368:	30 e0       	ldi	r19, 0x00	; 0
   1236a:	4a e7       	ldi	r20, 0x7A	; 122
   1236c:	54 e4       	ldi	r21, 0x44	; 68
   1236e:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   12372:	8e 01       	movw	r16, r28
   12374:	0f 5f       	subi	r16, 0xFF	; 255
   12376:	1f 4f       	sbci	r17, 0xFF	; 255
   12378:	22 e0       	ldi	r18, 0x02	; 2
   1237a:	44 e0       	ldi	r20, 0x04	; 4
   1237c:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   12380:	a8 01       	movw	r20, r16
   12382:	63 ee       	ldi	r22, 0xE3	; 227
   12384:	77 e0       	ldi	r23, 0x07	; 7
   12386:	81 e2       	ldi	r24, 0x21	; 33
   12388:	9e e0       	ldi	r25, 0x0E	; 14
   1238a:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1238e:	60 91 1c 0a 	lds	r22, 0x0A1C	; 0x800a1c <petnula>
   12392:	70 91 1d 0a 	lds	r23, 0x0A1D	; 0x800a1d <petnula+0x1>
   12396:	53 e0       	ldi	r21, 0x03	; 3
   12398:	66 0f       	add	r22, r22
   1239a:	77 1f       	adc	r23, r23
   1239c:	5a 95       	dec	r21
   1239e:	e1 f7       	brne	.-8      	; 0x12398 <main+0x5ba>
   123a0:	90 e0       	ldi	r25, 0x00	; 0
   123a2:	80 e0       	ldi	r24, 0x00	; 0
   123a4:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
   123a8:	20 e0       	ldi	r18, 0x00	; 0
   123aa:	30 e0       	ldi	r19, 0x00	; 0
   123ac:	4a e7       	ldi	r20, 0x7A	; 122
   123ae:	54 e4       	ldi	r21, 0x44	; 68
   123b0:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   123b4:	22 e0       	ldi	r18, 0x02	; 2
   123b6:	44 e0       	ldi	r20, 0x04	; 4
   123b8:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   123bc:	a8 01       	movw	r20, r16
   123be:	66 ef       	ldi	r22, 0xF6	; 246
   123c0:	77 e0       	ldi	r23, 0x07	; 7
   123c2:	81 e2       	ldi	r24, 0x21	; 33
   123c4:	9e e0       	ldi	r25, 0x0E	; 14
   123c6:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   123ca:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <dvanact>
   123ce:	90 91 1b 0a 	lds	r25, 0x0A1B	; 0x800a1b <dvanact+0x1>
   123d2:	29 e3       	ldi	r18, 0x39	; 57
   123d4:	28 9f       	mul	r18, r24
   123d6:	b0 01       	movw	r22, r0
   123d8:	29 9f       	mul	r18, r25
   123da:	70 0d       	add	r23, r0
   123dc:	11 24       	eor	r1, r1
   123de:	90 e0       	ldi	r25, 0x00	; 0
   123e0:	80 e0       	ldi	r24, 0x00	; 0
   123e2:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
   123e6:	20 e0       	ldi	r18, 0x00	; 0
   123e8:	30 e0       	ldi	r19, 0x00	; 0
   123ea:	4a e7       	ldi	r20, 0x7A	; 122
   123ec:	54 e4       	ldi	r21, 0x44	; 68
   123ee:	0e 94 20 a3 	call	0x14640	; 0x14640 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   123f2:	22 e0       	ldi	r18, 0x02	; 2
   123f4:	44 e0       	ldi	r20, 0x04	; 4
   123f6:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   123fa:	a8 01       	movw	r20, r16
   123fc:	69 e0       	ldi	r22, 0x09	; 9
   123fe:	78 e0       	ldi	r23, 0x08	; 8
   12400:	81 e2       	ldi	r24, 0x21	; 33
   12402:	9e e0       	ldi	r25, 0x0E	; 14
   12404:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   12408:	60 91 18 0a 	lds	r22, 0x0A18	; 0x800a18 <proud>
   1240c:	70 91 19 0a 	lds	r23, 0x0A19	; 0x800a19 <proud+0x1>
   12410:	90 e0       	ldi	r25, 0x00	; 0
   12412:	80 e0       	ldi	r24, 0x00	; 0
   12414:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   12418:	22 e0       	ldi	r18, 0x02	; 2
   1241a:	44 e0       	ldi	r20, 0x04	; 4
   1241c:	0e 94 12 97 	call	0x12e24	; 0x12e24 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   12420:	a8 01       	movw	r20, r16
   12422:	6c e1       	ldi	r22, 0x1C	; 28
   12424:	78 e0       	ldi	r23, 0x08	; 8
   12426:	81 e2       	ldi	r24, 0x21	; 33
   12428:	9e e0       	ldi	r25, 0x0E	; 14
   1242a:	0e 94 02 4b 	call	0x9604	; 0x9604 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1242e:	0d e5       	ldi	r16, 0x5D	; 93
   12430:	11 e0       	ldi	r17, 0x01	; 1
   12432:	d1 2c       	mov	r13, r1
   12434:	c1 2c       	mov	r12, r1
   12436:	fc 2c       	mov	r15, r12
thermostat_ring_get_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   12438:	c8 01       	movw	r24, r16
   1243a:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   1243e:	8f 3f       	cpi	r24, 0xFF	; 255
   12440:	09 f4       	brne	.+2      	; 0x12444 <main+0x666>
   12442:	33 c1       	rjmp	.+614    	; 0x126aa <main+0x8cc>
   12444:	38 01       	movw	r6, r16
   12446:	31 e1       	ldi	r19, 0x11	; 17
   12448:	63 1a       	sub	r6, r19
   1244a:	71 08       	sbc	r7, r1
   1244c:	ae 01       	movw	r20, r28
   1244e:	4f 5f       	subi	r20, 0xFF	; 255
   12450:	5f 4f       	sbci	r21, 0xFF	; 255
   12452:	5a 01       	movw	r10, r20
   12454:	48 01       	movw	r8, r16
   12456:	58 e0       	ldi	r21, 0x08	; 8
   12458:	85 1a       	sub	r8, r21
   1245a:	91 08       	sbc	r9, r1
thermostat_ring_get_name():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:104
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   1245c:	c3 01       	movw	r24, r6
   1245e:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:105
    name[i] = t;
   12462:	d5 01       	movw	r26, r10
   12464:	8d 93       	st	X+, r24
   12466:	5d 01       	movw	r10, r26
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   12468:	88 23       	and	r24, r24
   1246a:	31 f0       	breq	.+12     	; 0x12478 <main+0x69a>
   1246c:	bf ef       	ldi	r27, 0xFF	; 255
   1246e:	6b 1a       	sub	r6, r27
   12470:	7b 0a       	sbc	r7, r27
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   12472:	68 14       	cp	r6, r8
   12474:	79 04       	cpc	r7, r9
   12476:	91 f7       	brne	.-28     	; 0x1245c <main+0x67e>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
    {
      thermostat_ring_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   12478:	9e 01       	movw	r18, r28
   1247a:	2f 5f       	subi	r18, 0xFF	; 255
   1247c:	3f 4f       	sbci	r19, 0xFF	; 255
   1247e:	4f e4       	ldi	r20, 0x4F	; 79
   12480:	54 e0       	ldi	r21, 0x04	; 4
   12482:	6f 2d       	mov	r22, r15
   12484:	8c ea       	ldi	r24, 0xAC	; 172
   12486:	97 e0       	ldi	r25, 0x07	; 7
   12488:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_active():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   1248c:	c8 01       	movw	r24, r16
   1248e:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12492:	4a e0       	ldi	r20, 0x0A	; 10
   12494:	be 01       	movw	r22, r28
   12496:	6f 5f       	subi	r22, 0xFF	; 255
   12498:	7f 4f       	sbci	r23, 0xFF	; 255
   1249a:	90 e0       	ldi	r25, 0x00	; 0
   1249c:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
      itoa(thermostat_ring_get_active(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   124a0:	9e 01       	movw	r18, r28
   124a2:	2f 5f       	subi	r18, 0xFF	; 255
   124a4:	3f 4f       	sbci	r19, 0xFF	; 255
   124a6:	49 e5       	ldi	r20, 0x59	; 89
   124a8:	54 e0       	ldi	r21, 0x04	; 4
   124aa:	6f 2d       	mov	r22, r15
   124ac:	8c ea       	ldi	r24, 0xAC	; 172
   124ae:	97 e0       	ldi	r25, 0x07	; 7
   124b0:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_program_id():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   124b4:	c8 01       	movw	r24, r16
   124b6:	02 97       	sbiw	r24, 0x02	; 2
   124b8:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   124bc:	4a e0       	ldi	r20, 0x0A	; 10
   124be:	be 01       	movw	r22, r28
   124c0:	6f 5f       	subi	r22, 0xFF	; 255
   124c2:	7f 4f       	sbci	r23, 0xFF	; 255
   124c4:	90 e0       	ldi	r25, 0x00	; 0
   124c6:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   124ca:	9e 01       	movw	r18, r28
   124cc:	2f 5f       	subi	r18, 0xFF	; 255
   124ce:	3f 4f       	sbci	r19, 0xFF	; 255
   124d0:	42 ed       	ldi	r20, 0xD2	; 210
   124d2:	56 e0       	ldi	r21, 0x06	; 6
   124d4:	6f 2d       	mov	r22, r15
   124d6:	8c ea       	ldi	r24, 0xAC	; 172
   124d8:	97 e0       	ldi	r25, 0x07	; 7
   124da:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_mezni():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:154
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
   124de:	c8 01       	movw	r24, r16
   124e0:	07 97       	sbiw	r24, 0x07	; 7
   124e2:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   124e6:	e8 2e       	mov	r14, r24
   124e8:	c8 01       	movw	r24, r16
   124ea:	06 97       	sbiw	r24, 0x06	; 6
   124ec:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   124f0:	2e 2d       	mov	r18, r14
   124f2:	30 e0       	ldi	r19, 0x00	; 0
   124f4:	32 2f       	mov	r19, r18
   124f6:	22 27       	eor	r18, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   124f8:	4a e0       	ldi	r20, 0x0A	; 10
   124fa:	be 01       	movw	r22, r28
   124fc:	6f 5f       	subi	r22, 0xFF	; 255
   124fe:	7f 4f       	sbci	r23, 0xFF	; 255
   12500:	82 0f       	add	r24, r18
   12502:	93 2f       	mov	r25, r19
   12504:	91 1d       	adc	r25, r1
   12506:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1250a:	9e 01       	movw	r18, r28
   1250c:	2f 5f       	subi	r18, 0xFF	; 255
   1250e:	3f 4f       	sbci	r19, 0xFF	; 255
   12510:	48 ec       	ldi	r20, 0xC8	; 200
   12512:	56 e0       	ldi	r21, 0x06	; 6
   12514:	6f 2d       	mov	r22, r15
   12516:	8c ea       	ldi	r24, 0xAC	; 172
   12518:	97 e0       	ldi	r25, 0x07	; 7
   1251a:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
   1251e:	58 01       	movw	r10, r16
   12520:	ef ef       	ldi	r30, 0xFF	; 255
   12522:	ae 1a       	sub	r10, r30
   12524:	be 0a       	sbc	r11, r30
thermostat_ring_get_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   12526:	c5 01       	movw	r24, r10
   12528:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1252c:	4a e0       	ldi	r20, 0x0A	; 10
   1252e:	be 01       	movw	r22, r28
   12530:	6f 5f       	subi	r22, 0xFF	; 255
   12532:	7f 4f       	sbci	r23, 0xFF	; 255
   12534:	90 e0       	ldi	r25, 0x00	; 0
   12536:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1253a:	9e 01       	movw	r18, r28
   1253c:	2f 5f       	subi	r18, 0xFF	; 255
   1253e:	3f 4f       	sbci	r19, 0xFF	; 255
   12540:	4b ee       	ldi	r20, 0xEB	; 235
   12542:	56 e0       	ldi	r21, 0x06	; 6
   12544:	6f 2d       	mov	r22, r15
   12546:	8c ea       	ldi	r24, 0xAC	; 172
   12548:	97 e0       	ldi	r25, 0x07	; 7
   1254a:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_mode():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:176
   1254e:	c5 01       	movw	r24, r10
   12550:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3021
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   12554:	63 e3       	ldi	r22, 0x33	; 51
   12556:	78 e0       	ldi	r23, 0x08	; 8
   12558:	88 23       	and	r24, r24
   1255a:	a1 f0       	breq	.+40     	; 0x12584 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1255c:	6e ec       	ldi	r22, 0xCE	; 206
   1255e:	75 e0       	ldi	r23, 0x05	; 5
   12560:	81 30       	cpi	r24, 0x01	; 1
   12562:	81 f0       	breq	.+32     	; 0x12584 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   12564:	63 ed       	ldi	r22, 0xD3	; 211
   12566:	75 e0       	ldi	r23, 0x05	; 5
   12568:	83 30       	cpi	r24, 0x03	; 3
   1256a:	61 f0       	breq	.+24     	; 0x12584 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1256c:	6a ed       	ldi	r22, 0xDA	; 218
   1256e:	75 e0       	ldi	r23, 0x05	; 5
   12570:	82 30       	cpi	r24, 0x02	; 2
   12572:	41 f0       	breq	.+16     	; 0x12584 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3025
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   12574:	6f ed       	ldi	r22, 0xDF	; 223
   12576:	75 e0       	ldi	r23, 0x05	; 5
   12578:	84 30       	cpi	r24, 0x04	; 4
   1257a:	21 f0       	breq	.+8      	; 0x12584 <main+0x7a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1257c:	86 30       	cpi	r24, 0x06	; 6
   1257e:	31 f4       	brne	.+12     	; 0x1258c <main+0x7ae>
   12580:	64 ee       	ldi	r22, 0xE4	; 228
   12582:	75 e0       	ldi	r23, 0x05	; 5
   12584:	ce 01       	movw	r24, r28
   12586:	01 96       	adiw	r24, 0x01	; 1
   12588:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1258c:	9e 01       	movw	r18, r28
   1258e:	2f 5f       	subi	r18, 0xFF	; 255
   12590:	3f 4f       	sbci	r19, 0xFF	; 255
   12592:	46 ee       	ldi	r20, 0xE6	; 230
   12594:	56 e0       	ldi	r21, 0x06	; 6
   12596:	6f 2d       	mov	r22, r15
   12598:	8c ea       	ldi	r24, 0xAC	; 172
   1259a:	97 e0       	ldi	r25, 0x07	; 7
   1259c:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_state():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   125a0:	f6 01       	movw	r30, r12
   125a2:	ef 5d       	subi	r30, 0xDF	; 223
   125a4:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
      itoa(thermostat_ring_get_state(idx), payload, 10);
   125a6:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   125a8:	4a e0       	ldi	r20, 0x0A	; 10
   125aa:	be 01       	movw	r22, r28
   125ac:	6f 5f       	subi	r22, 0xFF	; 255
   125ae:	7f 4f       	sbci	r23, 0xFF	; 255
   125b0:	90 e0       	ldi	r25, 0x00	; 0
   125b2:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   125b6:	9e 01       	movw	r18, r28
   125b8:	2f 5f       	subi	r18, 0xFF	; 255
   125ba:	3f 4f       	sbci	r19, 0xFF	; 255
   125bc:	47 e3       	ldi	r20, 0x37	; 55
   125be:	58 e0       	ldi	r21, 0x08	; 8
   125c0:	6f 2d       	mov	r22, r15
   125c2:	8c ea       	ldi	r24, 0xAC	; 172
   125c4:	97 e0       	ldi	r25, 0x07	; 7
   125c6:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   125ca:	c8 01       	movw	r24, r16
   125cc:	01 97       	sbiw	r24, 0x01	; 1
   125ce:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   125d2:	e8 2e       	mov	r14, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
   125d4:	ff e0       	ldi	r31, 0x0F	; 15
   125d6:	f8 17       	cp	r31, r24
   125d8:	88 f0       	brcs	.+34     	; 0x125fc <main+0x81e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   125da:	4a e0       	ldi	r20, 0x0A	; 10
   125dc:	be 01       	movw	r22, r28
   125de:	6f 5f       	subi	r22, 0xFF	; 255
   125e0:	7f 4f       	sbci	r23, 0xFF	; 255
   125e2:	90 e0       	ldi	r25, 0x00	; 0
   125e4:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
   125e8:	9e 01       	movw	r18, r28
   125ea:	2f 5f       	subi	r18, 0xFF	; 255
   125ec:	3f 4f       	sbci	r19, 0xFF	; 255
   125ee:	45 e5       	ldi	r20, 0x55	; 85
   125f0:	54 e0       	ldi	r21, 0x04	; 4
   125f2:	6f 2d       	mov	r22, r15
   125f4:	8c ea       	ldi	r24, 0xAC	; 172
   125f6:	97 e0       	ldi	r25, 0x07	; 7
   125f8:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
   125fc:	80 ef       	ldi	r24, 0xF0	; 240
   125fe:	8e 0d       	add	r24, r14
   12600:	8f 36       	cpi	r24, 0x6F	; 111
   12602:	a0 f4       	brcc	.+40     	; 0x1262c <main+0x84e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12604:	4a e0       	ldi	r20, 0x0A	; 10
   12606:	be 01       	movw	r22, r28
   12608:	6f 5f       	subi	r22, 0xFF	; 255
   1260a:	7f 4f       	sbci	r23, 0xFF	; 255
   1260c:	2e 2d       	mov	r18, r14
   1260e:	20 51       	subi	r18, 0x10	; 16
   12610:	33 0b       	sbc	r19, r19
   12612:	c9 01       	movw	r24, r18
   12614:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
   12618:	9e 01       	movw	r18, r28
   1261a:	2f 5f       	subi	r18, 0xFF	; 255
   1261c:	3f 4f       	sbci	r19, 0xFF	; 255
   1261e:	44 e5       	ldi	r20, 0x54	; 84
   12620:	54 e0       	ldi	r21, 0x04	; 4
   12622:	6f 2d       	mov	r22, r15
   12624:	8c ea       	ldi	r24, 0xAC	; 172
   12626:	97 e0       	ldi	r25, 0x07	; 7
   12628:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_output():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1262c:	c8 01       	movw	r24, r16
   1262e:	02 96       	adiw	r24, 0x02	; 2
   12630:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12634:	4a e0       	ldi	r20, 0x0A	; 10
   12636:	be 01       	movw	r22, r28
   12638:	6f 5f       	subi	r22, 0xFF	; 255
   1263a:	7f 4f       	sbci	r23, 0xFF	; 255
   1263c:	90 e0       	ldi	r25, 0x00	; 0
   1263e:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   12642:	9e 01       	movw	r18, r28
   12644:	2f 5f       	subi	r18, 0xFF	; 255
   12646:	3f 4f       	sbci	r19, 0xFF	; 255
   12648:	40 ef       	ldi	r20, 0xF0	; 240
   1264a:	56 e0       	ldi	r21, 0x06	; 6
   1264c:	6f 2d       	mov	r22, r15
   1264e:	8c ea       	ldi	r24, 0xAC	; 172
   12650:	97 e0       	ldi	r25, 0x07	; 7
   12652:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
thermostat_ring_get_status_data():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   12656:	c8 01       	movw	r24, r16
   12658:	05 97       	sbiw	r24, 0x05	; 5
   1265a:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1265e:	4a e0       	ldi	r20, 0x0A	; 10
   12660:	be 01       	movw	r22, r28
   12662:	6f 5f       	subi	r22, 0xFF	; 255
   12664:	7f 4f       	sbci	r23, 0xFF	; 255
   12666:	90 e0       	ldi	r25, 0x00	; 0
   12668:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   1266c:	9e 01       	movw	r18, r28
   1266e:	2f 5f       	subi	r18, 0xFF	; 255
   12670:	3f 4f       	sbci	r19, 0xFF	; 255
   12672:	4e e3       	ldi	r20, 0x3E	; 62
   12674:	58 e0       	ldi	r21, 0x08	; 8
   12676:	6f 2d       	mov	r22, r15
   12678:	8c ea       	ldi	r24, 0xAC	; 172
   1267a:	97 e0       	ldi	r25, 0x07	; 7
   1267c:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676

      itoa(last_output_update[idx], payload, 10);
   12680:	f6 01       	movw	r30, r12
   12682:	ea 5d       	subi	r30, 0xDA	; 218
   12684:	f5 4f       	sbci	r31, 0xF5	; 245
   12686:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12688:	4a e0       	ldi	r20, 0x0A	; 10
   1268a:	be 01       	movw	r22, r28
   1268c:	6f 5f       	subi	r22, 0xFF	; 255
   1268e:	7f 4f       	sbci	r23, 0xFF	; 255
   12690:	90 e0       	ldi	r25, 0x00	; 0
   12692:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   12696:	9e 01       	movw	r18, r28
   12698:	2f 5f       	subi	r18, 0xFF	; 255
   1269a:	3f 4f       	sbci	r19, 0xFF	; 255
   1269c:	4b e4       	ldi	r20, 0x4B	; 75
   1269e:	58 e0       	ldi	r21, 0x08	; 8
   126a0:	6f 2d       	mov	r22, r15
   126a2:	8c ea       	ldi	r24, 0xAC	; 172
   126a4:	97 e0       	ldi	r25, 0x07	; 7
   126a6:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
   126aa:	3f ef       	ldi	r19, 0xFF	; 255
   126ac:	c3 1a       	sub	r12, r19
   126ae:	d3 0a       	sbc	r13, r19
   126b0:	0f 5d       	subi	r16, 0xDF	; 223
   126b2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2641
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   126b4:	45 e0       	ldi	r20, 0x05	; 5
   126b6:	c4 16       	cp	r12, r20
   126b8:	d1 04       	cpc	r13, r1
   126ba:	09 f0       	breq	.+2      	; 0x126be <main+0x8e0>
   126bc:	bc ce       	rjmp	.-648    	; 0x12436 <main+0x658>
   126be:	8b e2       	ldi	r24, 0x2B	; 43
   126c0:	e8 2e       	mov	r14, r24
   126c2:	8a e0       	ldi	r24, 0x0A	; 10
   126c4:	f8 2e       	mov	r15, r24
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   126c6:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   126c8:	9a e0       	ldi	r25, 0x0A	; 10
   126ca:	c9 2e       	mov	r12, r25
   126cc:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   126ce:	be 01       	movw	r22, r28
   126d0:	6f 5b       	subi	r22, 0xBF	; 191
   126d2:	7f 4f       	sbci	r23, 0xFF	; 255
   126d4:	81 2f       	mov	r24, r17
   126d6:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
   126da:	81 30       	cpi	r24, 0x01	; 1
   126dc:	09 f0       	breq	.+2      	; 0x126e0 <main+0x902>
   126de:	d2 c0       	rjmp	.+420    	; 0x12884 <main+0xaa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   126e0:	22 96       	adiw	r28, 0x02	; 2
   126e2:	8f ad       	ldd	r24, Y+63	; 0x3f
   126e4:	22 97       	sbiw	r28, 0x02	; 2
   126e6:	81 30       	cpi	r24, 0x01	; 1
   126e8:	09 f0       	breq	.+2      	; 0x126ec <main+0x90e>
   126ea:	cc c0       	rjmp	.+408    	; 0x12884 <main+0xaa6>
   126ec:	d7 01       	movw	r26, r14
   126ee:	5b 96       	adiw	r26, 0x1b	; 27
   126f0:	8c 91       	ld	r24, X
   126f2:	5b 97       	sbiw	r26, 0x1b	; 27
   126f4:	81 30       	cpi	r24, 0x01	; 1
   126f6:	09 f0       	breq	.+2      	; 0x126fa <main+0x91c>
   126f8:	c5 c0       	rjmp	.+394    	; 0x12884 <main+0xaa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
        {
          tt = status_tds18s20[id].temp / 10;
   126fa:	15 96       	adiw	r26, 0x05	; 5
   126fc:	8d 91       	ld	r24, X+
   126fe:	9c 91       	ld	r25, X
   12700:	b6 01       	movw	r22, r12
   12702:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   12706:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12708:	4a e0       	ldi	r20, 0x0A	; 10
   1270a:	be 01       	movw	r22, r28
   1270c:	6f 5f       	subi	r22, 0xFF	; 255
   1270e:	7f 4f       	sbci	r23, 0xFF	; 255
   12710:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   12714:	9e 01       	movw	r18, r28
   12716:	2f 5f       	subi	r18, 0xFF	; 255
   12718:	3f 4f       	sbci	r19, 0xFF	; 255
   1271a:	40 e6       	ldi	r20, 0x60	; 96
   1271c:	54 e0       	ldi	r21, 0x04	; 4
   1271e:	61 2f       	mov	r22, r17
   12720:	85 e5       	ldi	r24, 0x55	; 85
   12722:	94 e0       	ldi	r25, 0x04	; 4
   12724:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
   12728:	30 e0       	ldi	r19, 0x00	; 0
   1272a:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
          avg = 0;
   1272c:	60 e0       	ldi	r22, 0x00	; 0
   1272e:	70 e0       	ldi	r23, 0x00	; 0
   12730:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2704
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   12732:	f9 01       	movw	r30, r18
   12734:	ee 0f       	add	r30, r30
   12736:	ff 1f       	adc	r31, r31
   12738:	ee 0d       	add	r30, r14
   1273a:	ff 1d       	adc	r31, r15
   1273c:	87 80       	ldd	r8, Z+7	; 0x07
   1273e:	90 84       	ldd	r9, Z+8	; 0x08
   12740:	09 2c       	mov	r0, r9
   12742:	00 0c       	add	r0, r0
   12744:	aa 08       	sbc	r10, r10
   12746:	bb 08       	sbc	r11, r11
   12748:	68 0d       	add	r22, r8
   1274a:	79 1d       	adc	r23, r9
   1274c:	8a 1d       	adc	r24, r10
   1274e:	9b 1d       	adc	r25, r11
   12750:	2f 5f       	subi	r18, 0xFF	; 255
   12752:	3f 4f       	sbci	r19, 0xFF	; 255
   12754:	2a 30       	cpi	r18, 0x0A	; 10
   12756:	31 05       	cpc	r19, r1
   12758:	61 f7       	brne	.-40     	; 0x12732 <main+0x954>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   1275a:	24 e6       	ldi	r18, 0x64	; 100
   1275c:	30 e0       	ldi	r19, 0x00	; 0
   1275e:	40 e0       	ldi	r20, 0x00	; 0
   12760:	50 e0       	ldi	r21, 0x00	; 0
   12762:	0e 94 7a a2 	call	0x144f4	; 0x144f4 <__divmodsi4>
   12766:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12768:	4a e0       	ldi	r20, 0x0A	; 10
   1276a:	be 01       	movw	r22, r28
   1276c:	6f 5f       	subi	r22, 0xFF	; 255
   1276e:	7f 4f       	sbci	r23, 0xFF	; 255
   12770:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   12774:	9e 01       	movw	r18, r28
   12776:	2f 5f       	subi	r18, 0xFF	; 255
   12778:	3f 4f       	sbci	r19, 0xFF	; 255
   1277a:	49 e5       	ldi	r20, 0x59	; 89
   1277c:	58 e0       	ldi	r21, 0x08	; 8
   1277e:	61 2f       	mov	r22, r17
   12780:	85 e5       	ldi	r24, 0x55	; 85
   12782:	94 e0       	ldi	r25, 0x04	; 4
   12784:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710

          strcpy(payload, tds.name);
   12788:	cc 57       	subi	r28, 0x7C	; 124
   1278a:	df 4f       	sbci	r29, 0xFF	; 255
   1278c:	68 81       	ld	r22, Y
   1278e:	79 81       	ldd	r23, Y+1	; 0x01
   12790:	c4 58       	subi	r28, 0x84	; 132
   12792:	d0 40       	sbci	r29, 0x00	; 0
   12794:	ce 01       	movw	r24, r28
   12796:	01 96       	adiw	r24, 0x01	; 1
   12798:	0e 94 ef a4 	call	0x149de	; 0x149de <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1279c:	9e 01       	movw	r18, r28
   1279e:	2f 5f       	subi	r18, 0xFF	; 255
   127a0:	3f 4f       	sbci	r19, 0xFF	; 255
   127a2:	4f e4       	ldi	r20, 0x4F	; 79
   127a4:	54 e0       	ldi	r21, 0x04	; 4
   127a6:	61 2f       	mov	r22, r17
   127a8:	85 e5       	ldi	r24, 0x55	; 85
   127aa:	94 e0       	ldi	r25, 0x04	; 4
   127ac:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   127b0:	4a e0       	ldi	r20, 0x0A	; 10
   127b2:	be 01       	movw	r22, r28
   127b4:	6f 5f       	subi	r22, 0xFF	; 255
   127b6:	7f 4f       	sbci	r23, 0xFF	; 255
   127b8:	2d 96       	adiw	r28, 0x0d	; 13
   127ba:	8e ad       	ldd	r24, Y+62	; 0x3e
   127bc:	9f ad       	ldd	r25, Y+63	; 0x3f
   127be:	2d 97       	sbiw	r28, 0x0d	; 13
   127c0:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   127c4:	9e 01       	movw	r18, r28
   127c6:	2f 5f       	subi	r18, 0xFF	; 255
   127c8:	3f 4f       	sbci	r19, 0xFF	; 255
   127ca:	4c ed       	ldi	r20, 0xDC	; 220
   127cc:	57 e0       	ldi	r21, 0x07	; 7
   127ce:	61 2f       	mov	r22, r17
   127d0:	85 e5       	ldi	r24, 0x55	; 85
   127d2:	94 e0       	ldi	r25, 0x04	; 4
   127d4:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
          tt = status_tds18s20[id].online;
   127d8:	f7 01       	movw	r30, r14
   127da:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   127dc:	4a e0       	ldi	r20, 0x0A	; 10
   127de:	be 01       	movw	r22, r28
   127e0:	6f 5f       	subi	r22, 0xFF	; 255
   127e2:	7f 4f       	sbci	r23, 0xFF	; 255
   127e4:	90 e0       	ldi	r25, 0x00	; 0
   127e6:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   127ea:	9e 01       	movw	r18, r28
   127ec:	2f 5f       	subi	r18, 0xFF	; 255
   127ee:	3f 4f       	sbci	r19, 0xFF	; 255
   127f0:	42 e6       	ldi	r20, 0x62	; 98
   127f2:	58 e0       	ldi	r21, 0x08	; 8
   127f4:	61 2f       	mov	r22, r17
   127f6:	85 e5       	ldi	r24, 0x55	; 85
   127f8:	94 e0       	ldi	r25, 0x04	; 4
   127fa:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
          payload[0] = 0;
   127fe:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
          createString(payload, ':', tds.rom, 8, 16);
   12800:	00 e1       	ldi	r16, 0x10	; 16
   12802:	28 e0       	ldi	r18, 0x08	; 8
   12804:	ca 57       	subi	r28, 0x7A	; 122
   12806:	df 4f       	sbci	r29, 0xFF	; 255
   12808:	48 81       	ld	r20, Y
   1280a:	59 81       	ldd	r21, Y+1	; 0x01
   1280c:	c6 58       	subi	r28, 0x86	; 134
   1280e:	d0 40       	sbci	r29, 0x00	; 0
   12810:	6a e3       	ldi	r22, 0x3A	; 58
   12812:	ce 01       	movw	r24, r28
   12814:	01 96       	adiw	r24, 0x01	; 1
   12816:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2720
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   1281a:	9e 01       	movw	r18, r28
   1281c:	2f 5f       	subi	r18, 0xFF	; 255
   1281e:	3f 4f       	sbci	r19, 0xFF	; 255
   12820:	4b e2       	ldi	r20, 0x2B	; 43
   12822:	57 e0       	ldi	r21, 0x07	; 7
   12824:	61 2f       	mov	r22, r17
   12826:	85 e5       	ldi	r24, 0x55	; 85
   12828:	94 e0       	ldi	r25, 0x04	; 4
   1282a:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
          tt = tds.period;
   1282e:	66 96       	adiw	r28, 0x16	; 22
   12830:	8f ad       	ldd	r24, Y+63	; 0x3f
   12832:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12834:	4a e0       	ldi	r20, 0x0A	; 10
   12836:	be 01       	movw	r22, r28
   12838:	6f 5f       	subi	r22, 0xFF	; 255
   1283a:	7f 4f       	sbci	r23, 0xFF	; 255
   1283c:	90 e0       	ldi	r25, 0x00	; 0
   1283e:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   12842:	9e 01       	movw	r18, r28
   12844:	2f 5f       	subi	r18, 0xFF	; 255
   12846:	3f 4f       	sbci	r19, 0xFF	; 255
   12848:	41 ec       	ldi	r20, 0xC1	; 193
   1284a:	56 e0       	ldi	r21, 0x06	; 6
   1284c:	61 2f       	mov	r22, r17
   1284e:	85 e5       	ldi	r24, 0x55	; 85
   12850:	94 e0       	ldi	r25, 0x04	; 4
   12852:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   12856:	80 91 e6 0a 	lds	r24, 0x0AE6	; 0x800ae6 <uptime>
   1285a:	d7 01       	movw	r26, r14
   1285c:	5c 96       	adiw	r26, 0x1c	; 28
   1285e:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12860:	4a e0       	ldi	r20, 0x0A	; 10
   12862:	be 01       	movw	r22, r28
   12864:	6f 5f       	subi	r22, 0xFF	; 255
   12866:	7f 4f       	sbci	r23, 0xFF	; 255
   12868:	89 1b       	sub	r24, r25
   1286a:	99 0b       	sbc	r25, r25
   1286c:	0e 94 a6 98 	call	0x1314c	; 0x1314c <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   12870:	9e 01       	movw	r18, r28
   12872:	2f 5f       	subi	r18, 0xFF	; 255
   12874:	3f 4f       	sbci	r19, 0xFF	; 255
   12876:	49 e6       	ldi	r20, 0x69	; 105
   12878:	58 e0       	ldi	r21, 0x08	; 8
   1287a:	61 2f       	mov	r22, r17
   1287c:	85 e5       	ldi	r24, 0x55	; 85
   1287e:	94 e0       	ldi	r25, 0x04	; 4
   12880:	0e 94 6d 83 	call	0x106da	; 0x106da <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.139]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   12884:	1f 5f       	subi	r17, 0xFF	; 255
   12886:	be e1       	ldi	r27, 0x1E	; 30
   12888:	eb 0e       	add	r14, r27
   1288a:	f1 1c       	adc	r15, r1
   1288c:	16 30       	cpi	r17, 0x06	; 6
   1288e:	09 f0       	breq	.+2      	; 0x12892 <main+0xab4>
   12890:	1e cf       	rjmp	.-452    	; 0x126ce <main+0x8f0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    //mqtt_send_pid_variable();
    send_mqtt_remote_tds_status();
   12892:	0e 94 ba 5c 	call	0xb974	; 0xb974 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   12896:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   1289a:	00 91 db 10 	lds	r16, 0x10DB	; 0x8010db <milis_1s>
   1289e:	10 91 dc 10 	lds	r17, 0x10DC	; 0x8010dc <milis_1s+0x1>
   128a2:	20 91 dd 10 	lds	r18, 0x10DD	; 0x8010dd <milis_1s+0x2>
   128a6:	30 91 de 10 	lds	r19, 0x10DE	; 0x8010de <milis_1s+0x3>
   128aa:	60 1b       	sub	r22, r16
   128ac:	71 0b       	sbc	r23, r17
   128ae:	82 0b       	sbc	r24, r18
   128b0:	93 0b       	sbc	r25, r19
   128b2:	69 3e       	cpi	r22, 0xE9	; 233
   128b4:	73 40       	sbci	r23, 0x03	; 3
   128b6:	81 05       	cpc	r24, r1
   128b8:	91 05       	cpc	r25, r1
   128ba:	08 f4       	brcc	.+2      	; 0x128be <main+0xae0>
   128bc:	3b c1       	rjmp	.+630    	; 0x12b34 <main+0xd56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
  {
    milis_1s = millis();
   128be:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   128c2:	60 93 db 10 	sts	0x10DB, r22	; 0x8010db <milis_1s>
   128c6:	70 93 dc 10 	sts	0x10DC, r23	; 0x8010dc <milis_1s+0x1>
   128ca:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <milis_1s+0x2>
   128ce:	90 93 de 10 	sts	0x10DE, r25	; 0x8010de <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
    uptime++;
   128d2:	80 90 e6 0a 	lds	r8, 0x0AE6	; 0x800ae6 <uptime>
   128d6:	90 90 e7 0a 	lds	r9, 0x0AE7	; 0x800ae7 <uptime+0x1>
   128da:	a0 90 e8 0a 	lds	r10, 0x0AE8	; 0x800ae8 <uptime+0x2>
   128de:	b0 90 e9 0a 	lds	r11, 0x0AE9	; 0x800ae9 <uptime+0x3>
   128e2:	ff ef       	ldi	r31, 0xFF	; 255
   128e4:	8f 1a       	sub	r8, r31
   128e6:	9f 0a       	sbc	r9, r31
   128e8:	af 0a       	sbc	r10, r31
   128ea:	bf 0a       	sbc	r11, r31
   128ec:	80 92 e6 0a 	sts	0x0AE6, r8	; 0x800ae6 <uptime>
   128f0:	90 92 e7 0a 	sts	0x0AE7, r9	; 0x800ae7 <uptime+0x1>
   128f4:	a0 92 e8 0a 	sts	0x0AE8, r10	; 0x800ae8 <uptime+0x2>
   128f8:	b0 92 e9 0a 	sts	0x0AE9, r11	; 0x800ae9 <uptime+0x3>
   128fc:	0b e2       	ldi	r16, 0x2B	; 43
   128fe:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:258
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   12900:	f1 2c       	mov	r15, r1
mereni_hwwire():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:261
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   12902:	94 01       	movw	r18, r8
   12904:	33 27       	eor	r19, r19
   12906:	ce 57       	subi	r28, 0x7E	; 126
   12908:	df 4f       	sbci	r29, 0xFF	; 255
   1290a:	39 83       	std	Y+1, r19	; 0x01
   1290c:	28 83       	st	Y, r18
   1290e:	c2 58       	subi	r28, 0x82	; 130
   12910:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:260
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   12912:	be 01       	movw	r22, r28
   12914:	6f 5f       	subi	r22, 0xFF	; 255
   12916:	7f 4f       	sbci	r23, 0xFF	; 255
   12918:	8f 2d       	mov	r24, r15
   1291a:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:261
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   1291e:	e9 80       	ldd	r14, Y+1	; 0x01
   12920:	31 e0       	ldi	r19, 0x01	; 1
   12922:	e3 12       	cpse	r14, r19
   12924:	f7 c0       	rjmp	.+494    	; 0x12b14 <main+0xd36>
   12926:	d8 01       	movw	r26, r16
   12928:	5c 96       	adiw	r26, 0x1c	; 28
   1292a:	8c 91       	ld	r24, X
   1292c:	5c 97       	sbiw	r26, 0x1c	; 28
   1292e:	ce 57       	subi	r28, 0x7E	; 126
   12930:	df 4f       	sbci	r29, 0xFF	; 255
   12932:	e8 81       	ld	r30, Y
   12934:	f9 81       	ldd	r31, Y+1	; 0x01
   12936:	c2 58       	subi	r28, 0x82	; 130
   12938:	d0 40       	sbci	r29, 0x00	; 0
   1293a:	e8 1b       	sub	r30, r24
   1293c:	f1 09       	sbc	r31, r1
   1293e:	2d 89       	ldd	r18, Y+21	; 0x15
   12940:	2e 17       	cp	r18, r30
   12942:	1f 06       	cpc	r1, r31
   12944:	08 f0       	brcs	.+2      	; 0x12948 <main+0xb6a>
   12946:	e6 c0       	rjmp	.+460    	; 0x12b14 <main+0xd36>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:263
    {
      if (status_tds18s20[w].wait == false)
   12948:	5d 96       	adiw	r26, 0x1d	; 29
   1294a:	8c 91       	ld	r24, X
   1294c:	81 11       	cpse	r24, r1
   1294e:	10 c0       	rjmp	.+32     	; 0x12970 <main+0xb92>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:265
      {
        owReset(tds.assigned_ds2482);
   12950:	8a 85       	ldd	r24, Y+10	; 0x0a
   12952:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <ds2482owReset(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:266
        owMatchRom(tds.assigned_ds2482, tds.rom);
   12956:	be 01       	movw	r22, r28
   12958:	6e 5f       	subi	r22, 0xFE	; 254
   1295a:	7f 4f       	sbci	r23, 0xFF	; 255
   1295c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1295e:	0e 94 5f 7f 	call	0xfebe	; 0xfebe <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:267
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   12962:	64 e4       	ldi	r22, 0x44	; 68
   12964:	8a 85       	ldd	r24, Y+10	; 0x0a
   12966:	0e 94 26 7f 	call	0xfe4c	; 0xfe4c <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:268
        status_tds18s20[w].wait = true;
   1296a:	d8 01       	movw	r26, r16
   1296c:	5d 96       	adiw	r26, 0x1d	; 29
   1296e:	ec 92       	st	X, r14
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:270
      }
      if (status_tds18s20[w].wait == true)
   12970:	f8 01       	movw	r30, r16
   12972:	d5 8c       	ldd	r13, Z+29	; 0x1d
   12974:	f1 e0       	ldi	r31, 0x01	; 1
   12976:	df 12       	cpse	r13, r31
   12978:	cd c0       	rjmp	.+410    	; 0x12b14 <main+0xd36>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:272
      {
        owReset(tds.assigned_ds2482);
   1297a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1297c:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <ds2482owReset(unsigned char)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:273
        owMatchRom(tds.assigned_ds2482, tds.rom);
   12980:	be 01       	movw	r22, r28
   12982:	6e 5f       	subi	r22, 0xFE	; 254
   12984:	7f 4f       	sbci	r23, 0xFF	; 255
   12986:	8a 85       	ldd	r24, Y+10	; 0x0a
   12988:	0e 94 5f 7f 	call	0xfebe	; 0xfebe <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:274
        owReadByte(tds.assigned_ds2482, &t);
   1298c:	be 01       	movw	r22, r28
   1298e:	6f 57       	subi	r22, 0x7F	; 127
   12990:	7f 4f       	sbci	r23, 0xFF	; 255
   12992:	8a 85       	ldd	r24, Y+10	; 0x0a
   12994:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:275
        if (t != 0)
   12998:	cf 57       	subi	r28, 0x7F	; 127
   1299a:	df 4f       	sbci	r29, 0xFF	; 255
   1299c:	88 81       	ld	r24, Y
   1299e:	c1 58       	subi	r28, 0x81	; 129
   129a0:	d0 40       	sbci	r29, 0x00	; 0
   129a2:	88 23       	and	r24, r24
   129a4:	09 f4       	brne	.+2      	; 0x129a8 <main+0xbca>
   129a6:	b6 c0       	rjmp	.+364    	; 0x12b14 <main+0xd36>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:277
        {
          status_tds18s20[w].wait = false;
   129a8:	d8 01       	movw	r26, r16
   129aa:	5d 96       	adiw	r26, 0x1d	; 29
   129ac:	1c 92       	st	X, r1
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:278
          status = owReset(tds.assigned_ds2482);
   129ae:	8a 85       	ldd	r24, Y+10	; 0x0a
   129b0:	0e 94 7e 7f 	call	0xfefc	; 0xfefc <ds2482owReset(unsigned char)>
   129b4:	68 2e       	mov	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:279
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   129b6:	be 01       	movw	r22, r28
   129b8:	6e 5f       	subi	r22, 0xFE	; 254
   129ba:	7f 4f       	sbci	r23, 0xFF	; 255
   129bc:	8a 85       	ldd	r24, Y+10	; 0x0a
   129be:	0e 94 5f 7f 	call	0xfebe	; 0xfebe <owMatchRom(unsigned char, unsigned char*)>
   129c2:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:280
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   129c4:	6e eb       	ldi	r22, 0xBE	; 190
   129c6:	8a 85       	ldd	r24, Y+10	; 0x0a
   129c8:	0e 94 26 7f 	call	0xfe4c	; 0xfe4c <ds2482owWriteByte(unsigned char, unsigned char)>
   129cc:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:281
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   129ce:	be 01       	movw	r22, r28
   129d0:	6f 5b       	subi	r22, 0xBF	; 191
   129d2:	7f 4f       	sbci	r23, 0xFF	; 255
   129d4:	8a 85       	ldd	r24, Y+10	; 0x0a
   129d6:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   129da:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:282
          status_tds18s20[w].tempL = e;
   129dc:	22 96       	adiw	r28, 0x02	; 2
   129de:	cf ac       	ldd	r12, Y+63	; 0x3f
   129e0:	22 97       	sbiw	r28, 0x02	; 2
   129e2:	f8 01       	movw	r30, r16
   129e4:	c0 82       	st	Z, r12
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:283
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   129e6:	be 01       	movw	r22, r28
   129e8:	6f 5b       	subi	r22, 0xBF	; 191
   129ea:	7f 4f       	sbci	r23, 0xFF	; 255
   129ec:	8a 85       	ldd	r24, Y+10	; 0x0a
   129ee:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   129f2:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:284
          status_tds18s20[w].tempH = e;
   129f4:	22 96       	adiw	r28, 0x02	; 2
   129f6:	7f ac       	ldd	r7, Y+63	; 0x3f
   129f8:	22 97       	sbiw	r28, 0x02	; 2
   129fa:	d8 01       	movw	r26, r16
   129fc:	11 96       	adiw	r26, 0x01	; 1
   129fe:	7c 92       	st	X, r7
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:285
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   12a00:	be 01       	movw	r22, r28
   12a02:	6f 5b       	subi	r22, 0xBF	; 191
   12a04:	7f 4f       	sbci	r23, 0xFF	; 255
   12a06:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a08:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a0c:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:286
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   12a0e:	be 01       	movw	r22, r28
   12a10:	6f 5b       	subi	r22, 0xBF	; 191
   12a12:	7f 4f       	sbci	r23, 0xFF	; 255
   12a14:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a16:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a1a:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:287
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   12a1c:	be 01       	movw	r22, r28
   12a1e:	6f 5b       	subi	r22, 0xBF	; 191
   12a20:	7f 4f       	sbci	r23, 0xFF	; 255
   12a22:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a24:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a28:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:288
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   12a2a:	be 01       	movw	r22, r28
   12a2c:	6f 5b       	subi	r22, 0xBF	; 191
   12a2e:	7f 4f       	sbci	r23, 0xFF	; 255
   12a30:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a32:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a36:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:289
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   12a38:	be 01       	movw	r22, r28
   12a3a:	6f 5b       	subi	r22, 0xBF	; 191
   12a3c:	7f 4f       	sbci	r23, 0xFF	; 255
   12a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a40:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a44:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:290
          status_tds18s20[w].CR = e; //count remain
   12a46:	22 96       	adiw	r28, 0x02	; 2
   12a48:	8f ad       	ldd	r24, Y+63	; 0x3f
   12a4a:	22 97       	sbiw	r28, 0x02	; 2
   12a4c:	f8 01       	movw	r30, r16
   12a4e:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:291
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   12a50:	be 01       	movw	r22, r28
   12a52:	6f 5b       	subi	r22, 0xBF	; 191
   12a54:	7f 4f       	sbci	r23, 0xFF	; 255
   12a56:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a58:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
   12a5c:	68 0e       	add	r6, r24
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:292
          status_tds18s20[w].CP = e; // count per
   12a5e:	22 96       	adiw	r28, 0x02	; 2
   12a60:	ef ac       	ldd	r14, Y+63	; 0x3f
   12a62:	22 97       	sbiw	r28, 0x02	; 2
   12a64:	d8 01       	movw	r26, r16
   12a66:	13 96       	adiw	r26, 0x03	; 3
   12a68:	ec 92       	st	X, r14
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   12a6a:	be 01       	movw	r22, r28
   12a6c:	6f 5b       	subi	r22, 0xBF	; 191
   12a6e:	7f 4f       	sbci	r23, 0xFF	; 255
   12a70:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a72:	0e 94 ca 7e 	call	0xfd94	; 0xfd94 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].CRC = e; // crc soucet
   12a76:	22 96       	adiw	r28, 0x02	; 2
   12a78:	9f ad       	ldd	r25, Y+63	; 0x3f
   12a7a:	22 97       	sbiw	r28, 0x02	; 2
   12a7c:	f8 01       	movw	r30, r16
   12a7e:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   12a80:	86 0d       	add	r24, r6
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   12a82:	09 f0       	breq	.+2      	; 0x12a86 <main+0xca8>
   12a84:	aa c1       	rjmp	.+852    	; 0x12dda <main+0xffc>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:298
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   12a86:	6e 2d       	mov	r22, r14
   12a88:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   12a8a:	27 2d       	mov	r18, r7
   12a8c:	30 e0       	ldi	r19, 0x00	; 0
   12a8e:	32 2f       	mov	r19, r18
   12a90:	22 27       	eor	r18, r18
   12a92:	33 0f       	add	r19, r19
   12a94:	33 0f       	add	r19, r19
   12a96:	33 0f       	add	r19, r19
   12a98:	f8 e0       	ldi	r31, 0x08	; 8
   12a9a:	cf 9e       	mul	r12, r31
   12a9c:	c0 01       	movw	r24, r0
   12a9e:	11 24       	eor	r1, r1
   12aa0:	28 2b       	or	r18, r24
   12aa2:	39 2b       	or	r19, r25
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:298
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   12aa4:	a3 e0       	ldi	r26, 0x03	; 3
   12aa6:	22 0f       	add	r18, r18
   12aa8:	33 1f       	adc	r19, r19
   12aaa:	aa 95       	dec	r26
   12aac:	e1 f7       	brne	.-8      	; 0x12aa6 <main+0xcc8>
   12aae:	20 78       	andi	r18, 0x80	; 128
   12ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
   12ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
   12ab4:	40 97       	sbiw	r24, 0x10	; 16
   12ab6:	28 0f       	add	r18, r24
   12ab8:	39 1f       	adc	r19, r25
   12aba:	cf 57       	subi	r28, 0x7F	; 127
   12abc:	df 4f       	sbci	r29, 0xFF	; 255
   12abe:	e8 81       	ld	r30, Y
   12ac0:	c1 58       	subi	r28, 0x81	; 129
   12ac2:	d0 40       	sbci	r29, 0x00	; 0
   12ac4:	4e e1       	ldi	r20, 0x1E	; 30
   12ac6:	4e 9f       	mul	r20, r30
   12ac8:	f0 01       	movw	r30, r0
   12aca:	11 24       	eor	r1, r1
   12acc:	e5 5d       	subi	r30, 0xD5	; 213
   12ace:	f5 4f       	sbci	r31, 0xF5	; 245
   12ad0:	82 81       	ldd	r24, Z+2	; 0x02
   12ad2:	db 01       	movw	r26, r22
   12ad4:	a8 1b       	sub	r26, r24
   12ad6:	b1 09       	sbc	r27, r1
   12ad8:	cd 01       	movw	r24, r26
   12ada:	96 95       	lsr	r25
   12adc:	98 2f       	mov	r25, r24
   12ade:	88 27       	eor	r24, r24
   12ae0:	97 95       	ror	r25
   12ae2:	87 95       	ror	r24
   12ae4:	0e 94 44 a2 	call	0x14488	; 0x14488 <__divmodhi4>
   12ae8:	26 0f       	add	r18, r22
   12aea:	37 1f       	adc	r19, r23
   12aec:	f8 01       	movw	r30, r16
   12aee:	36 83       	std	Z+6, r19	; 0x06
   12af0:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:299
            status_tds18s20[w].online = True;
   12af2:	d3 8e       	std	Z+27, r13	; 0x1b
main():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:300
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   12af4:	49 e0       	ldi	r20, 0x09	; 9
mereni_hwwire():
   12af6:	87 89       	ldd	r24, Z+23	; 0x17
   12af8:	90 8d       	ldd	r25, Z+24	; 0x18
   12afa:	92 8f       	std	Z+26, r25	; 0x1a
   12afc:	81 8f       	std	Z+25, r24	; 0x19
   12afe:	41 50       	subi	r20, 0x01	; 1
   12b00:	32 97       	sbiw	r30, 0x02	; 2
   12b02:	41 11       	cpse	r20, r1
   12b04:	f8 cf       	rjmp	.-16     	; 0x12af6 <main+0xd18>
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:301
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   12b06:	d8 01       	movw	r26, r16
   12b08:	18 96       	adiw	r26, 0x08	; 8
   12b0a:	3c 93       	st	X, r19
   12b0c:	2e 93       	st	-X, r18
   12b0e:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:302
            status_tds18s20[w].period_now = uptime & 0xff;
   12b10:	5c 96       	adiw	r26, 0x1c	; 28
   12b12:	8c 92       	st	X, r8
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:258
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   12b14:	f3 94       	inc	r15
   12b16:	02 5e       	subi	r16, 0xE2	; 226
   12b18:	1f 4f       	sbci	r17, 0xFF	; 255
   12b1a:	f6 e0       	ldi	r31, 0x06	; 6
   12b1c:	ff 12       	cpse	r15, r31
   12b1e:	f9 ce       	rjmp	.-526    	; 0x12912 <main+0xb34>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   12b20:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
    if (get_tds18s20(id, &tds) == 1)
   12b22:	be 01       	movw	r22, r28
   12b24:	6f 5f       	subi	r22, 0xFF	; 255
   12b26:	7f 4f       	sbci	r23, 0xFF	; 255
   12b28:	81 2f       	mov	r24, r17
   12b2a:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   12b2e:	1f 5f       	subi	r17, 0xFF	; 255
   12b30:	16 30       	cpi	r17, 0x06	; 6
   12b32:	b9 f7       	brne	.-18     	; 0x12b22 <main+0xd44>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
    mereni_hwwire(uptime);
    tds_extended_memory_store();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   12b34:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   12b38:	00 91 d7 10 	lds	r16, 0x10D7	; 0x8010d7 <milis_05s>
   12b3c:	10 91 d8 10 	lds	r17, 0x10D8	; 0x8010d8 <milis_05s+0x1>
   12b40:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <milis_05s+0x2>
   12b44:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <milis_05s+0x3>
   12b48:	60 1b       	sub	r22, r16
   12b4a:	71 0b       	sbc	r23, r17
   12b4c:	82 0b       	sbc	r24, r18
   12b4e:	93 0b       	sbc	r25, r19
   12b50:	65 3f       	cpi	r22, 0xF5	; 245
   12b52:	71 40       	sbci	r23, 0x01	; 1
   12b54:	81 05       	cpc	r24, r1
   12b56:	91 05       	cpc	r25, r1
   12b58:	08 f4       	brcc	.+2      	; 0x12b5c <main+0xd7e>
   12b5a:	ab c0       	rjmp	.+342    	; 0x12cb2 <main+0xed4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
  {
    milis_05s = millis();
   12b5c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   12b60:	60 93 d7 10 	sts	0x10D7, r22	; 0x8010d7 <milis_05s>
   12b64:	70 93 d8 10 	sts	0x10D8, r23	; 0x8010d8 <milis_05s+0x1>
   12b68:	80 93 d9 10 	sts	0x10D9, r24	; 0x8010d9 <milis_05s+0x2>
   12b6c:	90 93 da 10 	sts	0x10DA, r25	; 0x8010da <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   12b70:	88 e6       	ldi	r24, 0x68	; 104
   12b72:	0e 94 50 72 	call	0xe4a0	; 0xe4a0 <TwoWire::beginTransmission(unsigned char) [clone .constprop.175]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   12b76:	60 e0       	ldi	r22, 0x00	; 0
   12b78:	88 e0       	ldi	r24, 0x08	; 8
   12b7a:	9e e0       	ldi	r25, 0x0E	; 14
   12b7c:	0e 94 40 6e 	call	0xdc80	; 0xdc80 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   12b80:	88 e0       	ldi	r24, 0x08	; 8
   12b82:	9e e0       	ldi	r25, 0x0E	; 14
   12b84:	0e 94 40 7e 	call	0xfc80	; 0xfc80 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   12b88:	87 e0       	ldi	r24, 0x07	; 7
   12b8a:	90 e0       	ldi	r25, 0x00	; 0
   12b8c:	0e 94 78 70 	call	0xe0f0	; 0xe0f0 <TwoWire::requestFrom(int, int) [clone .constprop.137]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   12b90:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
   12b94:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12b96:	28 2f       	mov	r18, r24
   12b98:	30 e0       	ldi	r19, 0x00	; 0
   12b9a:	94 e0       	ldi	r25, 0x04	; 4
   12b9c:	35 95       	asr	r19
   12b9e:	27 95       	ror	r18
   12ba0:	9a 95       	dec	r25
   12ba2:	e1 f7       	brne	.-8      	; 0x12b9c <main+0xdbe>
   12ba4:	92 2f       	mov	r25, r18
   12ba6:	99 0f       	add	r25, r25
   12ba8:	99 0f       	add	r25, r25
   12baa:	12 2f       	mov	r17, r18
   12bac:	19 1b       	sub	r17, r25
   12bae:	11 0f       	add	r17, r17
   12bb0:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   12bb2:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12bb6:	9c 01       	movw	r18, r24
   12bb8:	44 e0       	ldi	r20, 0x04	; 4
   12bba:	35 95       	asr	r19
   12bbc:	27 95       	ror	r18
   12bbe:	4a 95       	dec	r20
   12bc0:	e1 f7       	brne	.-8      	; 0x12bba <main+0xddc>
   12bc2:	2f 70       	andi	r18, 0x0F	; 15
   12bc4:	33 27       	eor	r19, r19
   12bc6:	92 2f       	mov	r25, r18
   12bc8:	99 0f       	add	r25, r25
   12bca:	99 0f       	add	r25, r25
   12bcc:	02 2f       	mov	r16, r18
   12bce:	09 1b       	sub	r16, r25
   12bd0:	00 0f       	add	r16, r16
   12bd2:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   12bd4:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12bd8:	9c 01       	movw	r18, r24
   12bda:	54 e0       	ldi	r21, 0x04	; 4
   12bdc:	35 95       	asr	r19
   12bde:	27 95       	ror	r18
   12be0:	5a 95       	dec	r21
   12be2:	e1 f7       	brne	.-8      	; 0x12bdc <main+0xdfe>
   12be4:	2f 70       	andi	r18, 0x0F	; 15
   12be6:	33 27       	eor	r19, r19
   12be8:	92 2f       	mov	r25, r18
   12bea:	99 0f       	add	r25, r25
   12bec:	99 0f       	add	r25, r25
   12bee:	f2 2e       	mov	r15, r18
   12bf0:	f9 1a       	sub	r15, r25
   12bf2:	ff 0c       	add	r15, r15
   12bf4:	f8 0e       	add	r15, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   12bf6:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   12bfa:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12bfe:	9c 01       	movw	r18, r24
   12c00:	64 e0       	ldi	r22, 0x04	; 4
   12c02:	35 95       	asr	r19
   12c04:	27 95       	ror	r18
   12c06:	6a 95       	dec	r22
   12c08:	e1 f7       	brne	.-8      	; 0x12c02 <main+0xe24>
   12c0a:	2f 70       	andi	r18, 0x0F	; 15
   12c0c:	33 27       	eor	r19, r19
   12c0e:	92 2f       	mov	r25, r18
   12c10:	99 0f       	add	r25, r25
   12c12:	99 0f       	add	r25, r25
   12c14:	e2 2e       	mov	r14, r18
   12c16:	e9 1a       	sub	r14, r25
   12c18:	ee 0c       	add	r14, r14
   12c1a:	e8 0e       	add	r14, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   12c1c:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12c20:	9c 01       	movw	r18, r24
   12c22:	74 e0       	ldi	r23, 0x04	; 4
   12c24:	35 95       	asr	r19
   12c26:	27 95       	ror	r18
   12c28:	7a 95       	dec	r23
   12c2a:	e1 f7       	brne	.-8      	; 0x12c24 <main+0xe46>
   12c2c:	2f 70       	andi	r18, 0x0F	; 15
   12c2e:	33 27       	eor	r19, r19
   12c30:	92 2f       	mov	r25, r18
   12c32:	99 0f       	add	r25, r25
   12c34:	99 0f       	add	r25, r25
   12c36:	d2 2e       	mov	r13, r18
   12c38:	d9 1a       	sub	r13, r25
   12c3a:	dd 0c       	add	r13, r13
   12c3c:	d8 0e       	add	r13, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   12c3e:	0e 94 7e 6c 	call	0xd8fc	; 0xd8fc <TwoWire::read() [clone .constprop.138]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   12c42:	9c 01       	movw	r18, r24
   12c44:	e4 e0       	ldi	r30, 0x04	; 4
   12c46:	35 95       	asr	r19
   12c48:	27 95       	ror	r18
   12c4a:	ea 95       	dec	r30
   12c4c:	e1 f7       	brne	.-8      	; 0x12c46 <main+0xe68>
   12c4e:	2f 70       	andi	r18, 0x0F	; 15
   12c50:	33 27       	eor	r19, r19
   12c52:	92 2f       	mov	r25, r18
   12c54:	99 0f       	add	r25, r25
   12c56:	99 0f       	add	r25, r25
   12c58:	29 1b       	sub	r18, r25
   12c5a:	22 0f       	add	r18, r18
   12c5c:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   12c5e:	80 93 59 10 	sts	0x1059, r24	; 0x801059 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
    now = rtc.now();
   12c62:	d0 92 5a 10 	sts	0x105A, r13	; 0x80105a <now+0x1>
   12c66:	e0 92 5b 10 	sts	0x105B, r14	; 0x80105b <now+0x2>
   12c6a:	f0 92 5c 10 	sts	0x105C, r15	; 0x80105c <now+0x3>
   12c6e:	00 93 5d 10 	sts	0x105D, r16	; 0x80105d <now+0x4>
   12c72:	10 93 5e 10 	sts	0x105E, r17	; 0x80105e <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   12c76:	0e 94 9d 7e 	call	0xfd3a	; 0xfd3a <RTC_DS1307::isrunning() [clone .constprop.135]>
   12c7a:	90 91 df 0a 	lds	r25, 0x0ADF	; 0x800adf <selftest_data>
   12c7e:	81 11       	cpse	r24, r1
   12c80:	ae c0       	rjmp	.+348    	; 0x12dde <main+0x1000>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
    sbi(selftest_data, SELFTEST_ERR_RTC);
   12c82:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   12c84:	90 93 df 0a 	sts	0x0ADF, r25	; 0x800adf <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   12c88:	81 e0       	ldi	r24, 0x01	; 1
   12c8a:	80 93 e5 0a 	sts	0x0AE5, r24	; 0x800ae5 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4198
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   12c8e:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   12c90:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4199
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12c92:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
  {
    remote_tds_get_active(idx, &active);
   12c94:	be 01       	movw	r22, r28
   12c96:	6f 5f       	subi	r22, 0xFF	; 255
   12c98:	7f 4f       	sbci	r23, 0xFF	; 255
   12c9a:	81 2f       	mov	r24, r17
   12c9c:	0e 94 c9 5b 	call	0xb792	; 0xb792 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
    if (active == 1) cnt++;
   12ca0:	89 81       	ldd	r24, Y+1	; 0x01
   12ca2:	81 30       	cpi	r24, 0x01	; 1
   12ca4:	09 f4       	brne	.+2      	; 0x12ca8 <main+0xeca>
   12ca6:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4199
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12ca8:	1f 5f       	subi	r17, 0xFF	; 255
   12caa:	1a 30       	cpi	r17, 0x0A	; 10
   12cac:	99 f7       	brne	.-26     	; 0x12c94 <main+0xeb6>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   12cae:	00 93 d6 10 	sts	0x10D6, r16	; 0x8010d6 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   12cb2:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   12cb6:	00 91 d2 10 	lds	r16, 0x10D2	; 0x8010d2 <milis_005s>
   12cba:	10 91 d3 10 	lds	r17, 0x10D3	; 0x8010d3 <milis_005s+0x1>
   12cbe:	20 91 d4 10 	lds	r18, 0x10D4	; 0x8010d4 <milis_005s+0x2>
   12cc2:	30 91 d5 10 	lds	r19, 0x10D5	; 0x8010d5 <milis_005s+0x3>
   12cc6:	60 1b       	sub	r22, r16
   12cc8:	71 0b       	sbc	r23, r17
   12cca:	82 0b       	sbc	r24, r18
   12ccc:	93 0b       	sbc	r25, r19
   12cce:	63 33       	cpi	r22, 0x33	; 51
   12cd0:	71 05       	cpc	r23, r1
   12cd2:	81 05       	cpc	r24, r1
   12cd4:	91 05       	cpc	r25, r1
   12cd6:	90 f1       	brcs	.+100    	; 0x12d3c <main+0xf5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
  {
    milis_005s = millis();
   12cd8:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   12cdc:	60 93 d2 10 	sts	0x10D2, r22	; 0x8010d2 <milis_005s>
   12ce0:	70 93 d3 10 	sts	0x10D3, r23	; 0x8010d3 <milis_005s+0x1>
   12ce4:	80 93 d4 10 	sts	0x10D4, r24	; 0x8010d4 <milis_005s+0x2>
   12ce8:	90 93 d5 10 	sts	0x10D5, r25	; 0x8010d5 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   12cec:	80 91 e4 0a 	lds	r24, 0x0AE4	; 0x800ae4 <a2d_run_now>
   12cf0:	81 30       	cpi	r24, 0x01	; 1
   12cf2:	21 f5       	brne	.+72     	; 0x12d3c <main+0xf5e>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   12cf4:	30 91 e0 0a 	lds	r19, 0x0AE0	; 0x800ae0 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   12cf8:	20 91 e1 0a 	lds	r18, 0x0AE1	; 0x800ae1 <a2d_index>
   12cfc:	90 e0       	ldi	r25, 0x00	; 0
   12cfe:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   12d00:	61 e0       	ldi	r22, 0x01	; 1
   12d02:	70 e0       	ldi	r23, 0x00	; 0
   12d04:	ab 01       	movw	r20, r22
   12d06:	08 2e       	mov	r0, r24
   12d08:	01 c0       	rjmp	.+2      	; 0x12d0c <main+0xf2e>
   12d0a:	44 0f       	add	r20, r20
   12d0c:	0a 94       	dec	r0
   12d0e:	ea f7       	brpl	.-6      	; 0x12d0a <main+0xf2c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   12d10:	e3 2f       	mov	r30, r19
   12d12:	e4 23       	and	r30, r20
   12d14:	09 f4       	brne	.+2      	; 0x12d18 <main+0xf3a>
   12d16:	65 c0       	rjmp	.+202    	; 0x12de2 <main+0x1004>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   12d18:	e2 2f       	mov	r30, r18
   12d1a:	e4 23       	and	r30, r20
   12d1c:	09 f0       	breq	.+2      	; 0x12d20 <main+0xf42>
   12d1e:	61 c0       	rjmp	.+194    	; 0x12de2 <main+0x1004>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   12d20:	24 2b       	or	r18, r20
   12d22:	20 93 e1 0a 	sts	0x0AE1, r18	; 0x800ae1 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   12d26:	0e 94 d9 7b 	call	0xf7b2	; 0xf7b2 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
    {
      a2d_start_process();
      a2d_run_now = 0;
   12d2a:	10 92 e4 0a 	sts	0x0AE4, r1	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
      if (a2d_done() == 0) a2d_run_now = 1;
   12d2e:	80 91 e1 0a 	lds	r24, 0x0AE1	; 0x800ae1 <a2d_index>
   12d32:	81 11       	cpse	r24, r1
   12d34:	03 c0       	rjmp	.+6      	; 0x12d3c <main+0xf5e>
   12d36:	81 e0       	ldi	r24, 0x01	; 1
   12d38:	80 93 e4 0a 	sts	0x0AE4, r24	; 0x800ae4 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
    }
  }

  load = millis() - load_now;
   12d3c:	0e 94 cc 79 	call	0xf398	; 0xf398 <millis>
   12d40:	dc 01       	movw	r26, r24
   12d42:	cb 01       	movw	r24, r22
   12d44:	82 19       	sub	r24, r2
   12d46:	93 09       	sbc	r25, r3
   12d48:	a4 09       	sbc	r26, r4
   12d4a:	b5 09       	sbc	r27, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
  if (load < load_min) load_min = load;
   12d4c:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   12d50:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   12d54:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   12d58:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   12d5c:	80 17       	cp	r24, r16
   12d5e:	91 07       	cpc	r25, r17
   12d60:	a2 07       	cpc	r26, r18
   12d62:	b3 07       	cpc	r27, r19
   12d64:	40 f4       	brcc	.+16     	; 0x12d76 <main+0xf98>
   12d66:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   12d6a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   12d6e:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   12d72:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
  if (load > load_max) load_max = load;
   12d76:	00 91 ce 10 	lds	r16, 0x10CE	; 0x8010ce <load_max>
   12d7a:	10 91 cf 10 	lds	r17, 0x10CF	; 0x8010cf <load_max+0x1>
   12d7e:	20 91 d0 10 	lds	r18, 0x10D0	; 0x8010d0 <load_max+0x2>
   12d82:	30 91 d1 10 	lds	r19, 0x10D1	; 0x8010d1 <load_max+0x3>
   12d86:	08 17       	cp	r16, r24
   12d88:	19 07       	cpc	r17, r25
   12d8a:	2a 07       	cpc	r18, r26
   12d8c:	3b 07       	cpc	r19, r27
   12d8e:	40 f4       	brcc	.+16     	; 0x12da0 <main+0xfc2>
   12d90:	80 93 ce 10 	sts	0x10CE, r24	; 0x8010ce <load_max>
   12d94:	90 93 cf 10 	sts	0x10CF, r25	; 0x8010cf <load_max+0x1>
   12d98:	a0 93 d0 10 	sts	0x10D0, r26	; 0x8010d0 <load_max+0x2>
   12d9c:	b0 93 d1 10 	sts	0x10D1, r27	; 0x8010d1 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   12da0:	80 91 e2 0a 	lds	r24, 0x0AE2	; 0x800ae2 <light_curr>
   12da4:	90 91 e3 0a 	lds	r25, 0x0AE3	; 0x800ae3 <light_curr+0x1>
   12da8:	20 91 cc 10 	lds	r18, 0x10CC	; 0x8010cc <light_min>
   12dac:	30 91 cd 10 	lds	r19, 0x10CD	; 0x8010cd <light_min+0x1>
   12db0:	82 17       	cp	r24, r18
   12db2:	93 07       	cpc	r25, r19
   12db4:	20 f4       	brcc	.+8      	; 0x12dbe <main+0xfe0>
   12db6:	90 93 cd 10 	sts	0x10CD, r25	; 0x8010cd <light_min+0x1>
   12dba:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
  if (light_curr > light_max) light_max = light_curr;
   12dbe:	20 91 ca 10 	lds	r18, 0x10CA	; 0x8010ca <light_max>
   12dc2:	30 91 cb 10 	lds	r19, 0x10CB	; 0x8010cb <light_max+0x1>
   12dc6:	28 17       	cp	r18, r24
   12dc8:	39 07       	cpc	r19, r25
   12dca:	20 f4       	brcc	.+8      	; 0x12dd4 <main+0xff6>
   12dcc:	90 93 cb 10 	sts	0x10CB, r25	; 0x8010cb <light_max+0x1>
   12dd0:	80 93 ca 10 	sts	0x10CA, r24	; 0x8010ca <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   12dd4:	0e 94 69 6d 	call	0xdad2	; 0xdad2 <serialEventRun()>
   12dd8:	6d c8       	rjmp	.-3878   	; 0x11eb4 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_740910/sketch/saric_tds_function.cpp:306
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   12dda:	13 8e       	std	Z+27, r1	; 0x1b
   12ddc:	9b ce       	rjmp	.-714    	; 0x12b14 <main+0xd36>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   12dde:	9e 7f       	andi	r25, 0xFE	; 254
   12de0:	51 cf       	rjmp	.-350    	; 0x12c84 <main+0xea6>
   12de2:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   12de4:	88 30       	cpi	r24, 0x08	; 8
   12de6:	91 05       	cpc	r25, r1
   12de8:	09 f0       	breq	.+2      	; 0x12dec <main+0x100e>
   12dea:	8c cf       	rjmp	.-232    	; 0x12d04 <main+0xf26>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   12dec:	10 92 e1 0a 	sts	0x0AE1, r1	; 0x800ae1 <a2d_index>
   12df0:	9c cf       	rjmp	.-200    	; 0x12d2a <main+0xf4c>

00012df2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]>:
_Z28thermostat_ring_update_biteshhh.constprop.112():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   12df2:	1f 93       	push	r17
   12df4:	cf 93       	push	r28
   12df6:	df 93       	push	r29
   12df8:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   12dfa:	91 e2       	ldi	r25, 0x21	; 33
   12dfc:	89 9f       	mul	r24, r25
   12dfe:	e0 01       	movw	r28, r0
   12e00:	11 24       	eor	r1, r1
   12e02:	c8 5a       	subi	r28, 0xA8	; 168
   12e04:	de 4f       	sbci	r29, 0xFE	; 254
   12e06:	ce 01       	movw	r24, r28
   12e08:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.223] [clone .lto_priv.237]>
   12e0c:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.112():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:207
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   12e0e:	11 11       	cpse	r17, r1
   12e10:	07 c0       	rjmp	.+14     	; 0x12e20 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]+0x2e>
   12e12:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12e14:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.112():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:210
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   12e16:	df 91       	pop	r29
   12e18:	cf 91       	pop	r28
   12e1a:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:202
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12e1c:	0c 94 f6 83 	jmp	0x107ec	; 0x107ec <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.219] [clone .lto_priv.236]>
_Z28thermostat_ring_update_biteshhh.constprop.112():
/tmp/arduino_build_740910/sketch/saric_thermostat.cpp:208
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   12e20:	61 60       	ori	r22, 0x01	; 1
   12e22:	f8 cf       	rjmp	.-16     	; 0x12e14 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.112]+0x22>

00012e24 <dtostrf>:
dtostrf():
   12e24:	ef 92       	push	r14
   12e26:	0f 93       	push	r16
   12e28:	1f 93       	push	r17
   12e2a:	cf 93       	push	r28
   12e2c:	df 93       	push	r29
   12e2e:	e8 01       	movw	r28, r16
   12e30:	34 e0       	ldi	r19, 0x04	; 4
   12e32:	47 fd       	sbrc	r20, 7
   12e34:	34 e1       	ldi	r19, 0x14	; 20
   12e36:	04 2e       	mov	r0, r20
   12e38:	00 0c       	add	r0, r0
   12e3a:	55 0b       	sbc	r21, r21
   12e3c:	57 ff       	sbrs	r21, 7
   12e3e:	03 c0       	rjmp	.+6      	; 0x12e46 <dtostrf+0x22>
   12e40:	51 95       	neg	r21
   12e42:	41 95       	neg	r20
   12e44:	51 09       	sbc	r21, r1
   12e46:	e3 2e       	mov	r14, r19
   12e48:	02 2f       	mov	r16, r18
   12e4a:	24 2f       	mov	r18, r20
   12e4c:	ae 01       	movw	r20, r28
   12e4e:	0e 94 3c 9b 	call	0x13678	; 0x13678 <dtoa_prf>
   12e52:	ce 01       	movw	r24, r28
   12e54:	df 91       	pop	r29
   12e56:	cf 91       	pop	r28
   12e58:	1f 91       	pop	r17
   12e5a:	0f 91       	pop	r16
   12e5c:	ef 90       	pop	r14
   12e5e:	08 95       	ret

00012e60 <strtoul>:
strtoul():
   12e60:	3f 92       	push	r3
   12e62:	4f 92       	push	r4
   12e64:	5f 92       	push	r5
   12e66:	6f 92       	push	r6
   12e68:	7f 92       	push	r7
   12e6a:	8f 92       	push	r8
   12e6c:	9f 92       	push	r9
   12e6e:	af 92       	push	r10
   12e70:	bf 92       	push	r11
   12e72:	cf 92       	push	r12
   12e74:	df 92       	push	r13
   12e76:	ef 92       	push	r14
   12e78:	ff 92       	push	r15
   12e7a:	0f 93       	push	r16
   12e7c:	1f 93       	push	r17
   12e7e:	cf 93       	push	r28
   12e80:	df 93       	push	r29
   12e82:	5c 01       	movw	r10, r24
   12e84:	6b 01       	movw	r12, r22
   12e86:	7a 01       	movw	r14, r20
   12e88:	61 15       	cp	r22, r1
   12e8a:	71 05       	cpc	r23, r1
   12e8c:	19 f0       	breq	.+6      	; 0x12e94 <strtoul+0x34>
   12e8e:	fb 01       	movw	r30, r22
   12e90:	91 83       	std	Z+1, r25	; 0x01
   12e92:	80 83       	st	Z, r24
   12e94:	e1 14       	cp	r14, r1
   12e96:	f1 04       	cpc	r15, r1
   12e98:	49 f0       	breq	.+18     	; 0x12eac <strtoul+0x4c>
   12e9a:	c7 01       	movw	r24, r14
   12e9c:	02 97       	sbiw	r24, 0x02	; 2
   12e9e:	83 97       	sbiw	r24, 0x23	; 35
   12ea0:	28 f0       	brcs	.+10     	; 0x12eac <strtoul+0x4c>
   12ea2:	60 e0       	ldi	r22, 0x00	; 0
   12ea4:	70 e0       	ldi	r23, 0x00	; 0
   12ea6:	cb 01       	movw	r24, r22
   12ea8:	9b c0       	rjmp	.+310    	; 0x12fe0 <strtoul+0x180>
   12eaa:	5e 01       	movw	r10, r28
   12eac:	e5 01       	movw	r28, r10
   12eae:	21 96       	adiw	r28, 0x01	; 1
   12eb0:	f5 01       	movw	r30, r10
   12eb2:	10 81       	ld	r17, Z
   12eb4:	81 2f       	mov	r24, r17
   12eb6:	90 e0       	ldi	r25, 0x00	; 0
   12eb8:	0e 94 55 98 	call	0x130aa	; 0x130aa <isspace>
   12ebc:	89 2b       	or	r24, r25
   12ebe:	a9 f7       	brne	.-22     	; 0x12eaa <strtoul+0x4a>
   12ec0:	1d 32       	cpi	r17, 0x2D	; 45
   12ec2:	09 f0       	breq	.+2      	; 0x12ec6 <strtoul+0x66>
   12ec4:	5c c0       	rjmp	.+184    	; 0x12f7e <strtoul+0x11e>
   12ec6:	21 96       	adiw	r28, 0x01	; 1
   12ec8:	f5 01       	movw	r30, r10
   12eca:	11 81       	ldd	r17, Z+1	; 0x01
   12ecc:	01 e0       	ldi	r16, 0x01	; 1
   12ece:	e1 14       	cp	r14, r1
   12ed0:	f1 04       	cpc	r15, r1
   12ed2:	09 f4       	brne	.+2      	; 0x12ed6 <strtoul+0x76>
   12ed4:	bb c0       	rjmp	.+374    	; 0x1304c <strtoul+0x1ec>
   12ed6:	f0 e1       	ldi	r31, 0x10	; 16
   12ed8:	ef 16       	cp	r14, r31
   12eda:	f1 04       	cpc	r15, r1
   12edc:	09 f0       	breq	.+2      	; 0x12ee0 <strtoul+0x80>
   12ede:	9b c0       	rjmp	.+310    	; 0x13016 <strtoul+0x1b6>
   12ee0:	10 33       	cpi	r17, 0x30	; 48
   12ee2:	41 f4       	brne	.+16     	; 0x12ef4 <strtoul+0x94>
   12ee4:	88 81       	ld	r24, Y
   12ee6:	8f 7d       	andi	r24, 0xDF	; 223
   12ee8:	88 35       	cpi	r24, 0x58	; 88
   12eea:	09 f0       	breq	.+2      	; 0x12eee <strtoul+0x8e>
   12eec:	8f c0       	rjmp	.+286    	; 0x1300c <strtoul+0x1ac>
   12eee:	19 81       	ldd	r17, Y+1	; 0x01
   12ef0:	22 96       	adiw	r28, 0x02	; 2
   12ef2:	02 60       	ori	r16, 0x02	; 2
   12ef4:	e0 e1       	ldi	r30, 0x10	; 16
   12ef6:	ee 2e       	mov	r14, r30
   12ef8:	f1 2c       	mov	r15, r1
   12efa:	88 24       	eor	r8, r8
   12efc:	8a 94       	dec	r8
   12efe:	98 2c       	mov	r9, r8
   12f00:	a8 2c       	mov	r10, r8
   12f02:	ff e0       	ldi	r31, 0x0F	; 15
   12f04:	bf 2e       	mov	r11, r31
   12f06:	20 e0       	ldi	r18, 0x00	; 0
   12f08:	60 e0       	ldi	r22, 0x00	; 0
   12f0a:	70 e0       	ldi	r23, 0x00	; 0
   12f0c:	cb 01       	movw	r24, r22
   12f0e:	27 01       	movw	r4, r14
   12f10:	0f 2c       	mov	r0, r15
   12f12:	00 0c       	add	r0, r0
   12f14:	66 08       	sbc	r6, r6
   12f16:	77 08       	sbc	r7, r7
   12f18:	fe 01       	movw	r30, r28
   12f1a:	50 ed       	ldi	r21, 0xD0	; 208
   12f1c:	35 2e       	mov	r3, r21
   12f1e:	31 0e       	add	r3, r17
   12f20:	39 e0       	ldi	r19, 0x09	; 9
   12f22:	33 15       	cp	r19, r3
   12f24:	68 f4       	brcc	.+26     	; 0x12f40 <strtoul+0xe0>
   12f26:	3f eb       	ldi	r19, 0xBF	; 191
   12f28:	31 0f       	add	r19, r17
   12f2a:	49 ec       	ldi	r20, 0xC9	; 201
   12f2c:	34 2e       	mov	r3, r20
   12f2e:	3a 31       	cpi	r19, 0x1A	; 26
   12f30:	30 f0       	brcs	.+12     	; 0x12f3e <strtoul+0xde>
   12f32:	3f e9       	ldi	r19, 0x9F	; 159
   12f34:	31 0f       	add	r19, r17
   12f36:	3a 31       	cpi	r19, 0x1A	; 26
   12f38:	b0 f5       	brcc	.+108    	; 0x12fa6 <strtoul+0x146>
   12f3a:	39 ea       	ldi	r19, 0xA9	; 169
   12f3c:	33 2e       	mov	r3, r19
   12f3e:	31 0e       	add	r3, r17
   12f40:	3e 14       	cp	r3, r14
   12f42:	1f 04       	cpc	r1, r15
   12f44:	84 f5       	brge	.+96     	; 0x12fa6 <strtoul+0x146>
   12f46:	2f 3f       	cpi	r18, 0xFF	; 255
   12f48:	b9 f0       	breq	.+46     	; 0x12f78 <strtoul+0x118>
   12f4a:	86 16       	cp	r8, r22
   12f4c:	97 06       	cpc	r9, r23
   12f4e:	a8 06       	cpc	r10, r24
   12f50:	b9 06       	cpc	r11, r25
   12f52:	38 f1       	brcs	.+78     	; 0x12fa2 <strtoul+0x142>
   12f54:	a3 01       	movw	r20, r6
   12f56:	92 01       	movw	r18, r4
   12f58:	0e 94 20 a2 	call	0x14440	; 0x14440 <__mulsi3>
   12f5c:	23 2d       	mov	r18, r3
   12f5e:	30 e0       	ldi	r19, 0x00	; 0
   12f60:	50 e0       	ldi	r21, 0x00	; 0
   12f62:	40 e0       	ldi	r20, 0x00	; 0
   12f64:	62 0f       	add	r22, r18
   12f66:	73 1f       	adc	r23, r19
   12f68:	84 1f       	adc	r24, r20
   12f6a:	95 1f       	adc	r25, r21
   12f6c:	62 17       	cp	r22, r18
   12f6e:	73 07       	cpc	r23, r19
   12f70:	84 07       	cpc	r24, r20
   12f72:	95 07       	cpc	r25, r21
   12f74:	b0 f0       	brcs	.+44     	; 0x12fa2 <strtoul+0x142>
   12f76:	21 e0       	ldi	r18, 0x01	; 1
   12f78:	21 96       	adiw	r28, 0x01	; 1
   12f7a:	10 81       	ld	r17, Z
   12f7c:	cd cf       	rjmp	.-102    	; 0x12f18 <strtoul+0xb8>
   12f7e:	1b 32       	cpi	r17, 0x2B	; 43
   12f80:	21 f4       	brne	.+8      	; 0x12f8a <strtoul+0x12a>
   12f82:	e5 01       	movw	r28, r10
   12f84:	22 96       	adiw	r28, 0x02	; 2
   12f86:	f5 01       	movw	r30, r10
   12f88:	11 81       	ldd	r17, Z+1	; 0x01
   12f8a:	00 e0       	ldi	r16, 0x00	; 0
   12f8c:	a0 cf       	rjmp	.-192    	; 0x12ece <strtoul+0x6e>
   12f8e:	78 e0       	ldi	r23, 0x08	; 8
   12f90:	e7 2e       	mov	r14, r23
   12f92:	f1 2c       	mov	r15, r1
   12f94:	88 24       	eor	r8, r8
   12f96:	8a 94       	dec	r8
   12f98:	98 2c       	mov	r9, r8
   12f9a:	a8 2c       	mov	r10, r8
   12f9c:	6f e1       	ldi	r22, 0x1F	; 31
   12f9e:	b6 2e       	mov	r11, r22
   12fa0:	b2 cf       	rjmp	.-156    	; 0x12f06 <strtoul+0xa6>
   12fa2:	2f ef       	ldi	r18, 0xFF	; 255
   12fa4:	e9 cf       	rjmp	.-46     	; 0x12f78 <strtoul+0x118>
   12fa6:	c1 14       	cp	r12, r1
   12fa8:	d1 04       	cpc	r13, r1
   12faa:	31 f0       	breq	.+12     	; 0x12fb8 <strtoul+0x158>
   12fac:	22 23       	and	r18, r18
   12fae:	51 f1       	breq	.+84     	; 0x13004 <strtoul+0x1a4>
   12fb0:	21 97       	sbiw	r28, 0x01	; 1
   12fb2:	f6 01       	movw	r30, r12
   12fb4:	d1 83       	std	Z+1, r29	; 0x01
   12fb6:	c0 83       	st	Z, r28
   12fb8:	00 ff       	sbrs	r16, 0
   12fba:	07 c0       	rjmp	.+14     	; 0x12fca <strtoul+0x16a>
   12fbc:	90 95       	com	r25
   12fbe:	80 95       	com	r24
   12fc0:	70 95       	com	r23
   12fc2:	61 95       	neg	r22
   12fc4:	7f 4f       	sbci	r23, 0xFF	; 255
   12fc6:	8f 4f       	sbci	r24, 0xFF	; 255
   12fc8:	9f 4f       	sbci	r25, 0xFF	; 255
   12fca:	2f 3f       	cpi	r18, 0xFF	; 255
   12fcc:	49 f4       	brne	.+18     	; 0x12fe0 <strtoul+0x180>
   12fce:	82 e2       	ldi	r24, 0x22	; 34
   12fd0:	90 e0       	ldi	r25, 0x00	; 0
   12fd2:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <errno+0x1>
   12fd6:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <errno>
   12fda:	6f ef       	ldi	r22, 0xFF	; 255
   12fdc:	7f ef       	ldi	r23, 0xFF	; 255
   12fde:	cb 01       	movw	r24, r22
   12fe0:	df 91       	pop	r29
   12fe2:	cf 91       	pop	r28
   12fe4:	1f 91       	pop	r17
   12fe6:	0f 91       	pop	r16
   12fe8:	ff 90       	pop	r15
   12fea:	ef 90       	pop	r14
   12fec:	df 90       	pop	r13
   12fee:	cf 90       	pop	r12
   12ff0:	bf 90       	pop	r11
   12ff2:	af 90       	pop	r10
   12ff4:	9f 90       	pop	r9
   12ff6:	8f 90       	pop	r8
   12ff8:	7f 90       	pop	r7
   12ffa:	6f 90       	pop	r6
   12ffc:	5f 90       	pop	r5
   12ffe:	4f 90       	pop	r4
   13000:	3f 90       	pop	r3
   13002:	08 95       	ret
   13004:	01 ff       	sbrs	r16, 1
   13006:	d8 cf       	rjmp	.-80     	; 0x12fb8 <strtoul+0x158>
   13008:	22 97       	sbiw	r28, 0x02	; 2
   1300a:	d3 cf       	rjmp	.-90     	; 0x12fb2 <strtoul+0x152>
   1300c:	10 e3       	ldi	r17, 0x30	; 48
   1300e:	e1 14       	cp	r14, r1
   13010:	f1 04       	cpc	r15, r1
   13012:	09 f4       	brne	.+2      	; 0x13016 <strtoul+0x1b6>
   13014:	bc cf       	rjmp	.-136    	; 0x12f8e <strtoul+0x12e>
   13016:	3a e0       	ldi	r19, 0x0A	; 10
   13018:	e3 16       	cp	r14, r19
   1301a:	f1 04       	cpc	r15, r1
   1301c:	e9 f0       	breq	.+58     	; 0x13058 <strtoul+0x1f8>
   1301e:	80 e1       	ldi	r24, 0x10	; 16
   13020:	e8 16       	cp	r14, r24
   13022:	f1 04       	cpc	r15, r1
   13024:	09 f4       	brne	.+2      	; 0x13028 <strtoul+0x1c8>
   13026:	66 cf       	rjmp	.-308    	; 0x12ef4 <strtoul+0x94>
   13028:	e8 e0       	ldi	r30, 0x08	; 8
   1302a:	ee 16       	cp	r14, r30
   1302c:	f1 04       	cpc	r15, r1
   1302e:	09 f4       	brne	.+2      	; 0x13032 <strtoul+0x1d2>
   13030:	b1 cf       	rjmp	.-158    	; 0x12f94 <strtoul+0x134>
   13032:	6f ef       	ldi	r22, 0xFF	; 255
   13034:	7f ef       	ldi	r23, 0xFF	; 255
   13036:	cb 01       	movw	r24, r22
   13038:	97 01       	movw	r18, r14
   1303a:	0f 2c       	mov	r0, r15
   1303c:	00 0c       	add	r0, r0
   1303e:	44 0b       	sbc	r20, r20
   13040:	55 0b       	sbc	r21, r21
   13042:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
   13046:	49 01       	movw	r8, r18
   13048:	5a 01       	movw	r10, r20
   1304a:	5d cf       	rjmp	.-326    	; 0x12f06 <strtoul+0xa6>
   1304c:	10 33       	cpi	r17, 0x30	; 48
   1304e:	09 f4       	brne	.+2      	; 0x13052 <strtoul+0x1f2>
   13050:	49 cf       	rjmp	.-366    	; 0x12ee4 <strtoul+0x84>
   13052:	9a e0       	ldi	r25, 0x0A	; 10
   13054:	e9 2e       	mov	r14, r25
   13056:	f1 2c       	mov	r15, r1
   13058:	89 e9       	ldi	r24, 0x99	; 153
   1305a:	88 2e       	mov	r8, r24
   1305c:	98 2c       	mov	r9, r8
   1305e:	a8 2c       	mov	r10, r8
   13060:	89 e1       	ldi	r24, 0x19	; 25
   13062:	b8 2e       	mov	r11, r24
   13064:	50 cf       	rjmp	.-352    	; 0x12f06 <strtoul+0xa6>

00013066 <atof>:
atof():
   13066:	66 27       	eor	r22, r22
   13068:	77 27       	eor	r23, r23
   1306a:	0c 94 da 9d 	jmp	0x13bb4	; 0x13bb4 <strtod>

0001306e <atoi>:
atoi():
   1306e:	fc 01       	movw	r30, r24
   13070:	88 27       	eor	r24, r24
   13072:	99 27       	eor	r25, r25
   13074:	e8 94       	clt
   13076:	21 91       	ld	r18, Z+
   13078:	20 32       	cpi	r18, 0x20	; 32
   1307a:	e9 f3       	breq	.-6      	; 0x13076 <atoi+0x8>
   1307c:	29 30       	cpi	r18, 0x09	; 9
   1307e:	10 f0       	brcs	.+4      	; 0x13084 <atoi+0x16>
   13080:	2e 30       	cpi	r18, 0x0E	; 14
   13082:	c8 f3       	brcs	.-14     	; 0x13076 <atoi+0x8>
   13084:	2b 32       	cpi	r18, 0x2B	; 43
   13086:	41 f0       	breq	.+16     	; 0x13098 <atoi+0x2a>
   13088:	2d 32       	cpi	r18, 0x2D	; 45
   1308a:	39 f4       	brne	.+14     	; 0x1309a <atoi+0x2c>
   1308c:	68 94       	set
   1308e:	04 c0       	rjmp	.+8      	; 0x13098 <atoi+0x2a>
   13090:	0e 94 b1 98 	call	0x13162	; 0x13162 <__mulhi_const_10>
   13094:	82 0f       	add	r24, r18
   13096:	91 1d       	adc	r25, r1
   13098:	21 91       	ld	r18, Z+
   1309a:	20 53       	subi	r18, 0x30	; 48
   1309c:	2a 30       	cpi	r18, 0x0A	; 10
   1309e:	c0 f3       	brcs	.-16     	; 0x13090 <atoi+0x22>
   130a0:	1e f4       	brtc	.+6      	; 0x130a8 <atoi+0x3a>
   130a2:	90 95       	com	r25
   130a4:	81 95       	neg	r24
   130a6:	9f 4f       	sbci	r25, 0xFF	; 255
   130a8:	08 95       	ret

000130aa <isspace>:
isspace():
   130aa:	91 11       	cpse	r25, r1
   130ac:	0c 94 10 a0 	jmp	0x14020	; 0x14020 <__ctype_isfalse>
   130b0:	80 32       	cpi	r24, 0x20	; 32
   130b2:	19 f0       	breq	.+6      	; 0x130ba <isspace+0x10>
   130b4:	89 50       	subi	r24, 0x09	; 9
   130b6:	85 50       	subi	r24, 0x05	; 5
   130b8:	c8 f7       	brcc	.-14     	; 0x130ac <isspace+0x2>
   130ba:	08 95       	ret

000130bc <strcat_P>:
strcat_P():
   130bc:	fb 01       	movw	r30, r22
   130be:	dc 01       	movw	r26, r24
   130c0:	0d 90       	ld	r0, X+
   130c2:	00 20       	and	r0, r0
   130c4:	e9 f7       	brne	.-6      	; 0x130c0 <strcat_P+0x4>
   130c6:	11 97       	sbiw	r26, 0x01	; 1
   130c8:	05 90       	lpm	r0, Z+
   130ca:	0d 92       	st	X+, r0
   130cc:	00 20       	and	r0, r0
   130ce:	e1 f7       	brne	.-8      	; 0x130c8 <strcat_P+0xc>
   130d0:	08 95       	ret

000130d2 <strcpy_P>:
strcpy_P():
   130d2:	fb 01       	movw	r30, r22
   130d4:	dc 01       	movw	r26, r24
   130d6:	05 90       	lpm	r0, Z+
   130d8:	0d 92       	st	X+, r0
   130da:	00 20       	and	r0, r0
   130dc:	e1 f7       	brne	.-8      	; 0x130d6 <strcpy_P+0x4>
   130de:	08 95       	ret

000130e0 <strtok>:
strtok():
   130e0:	43 e3       	ldi	r20, 0x33	; 51
   130e2:	53 e1       	ldi	r21, 0x13	; 19
   130e4:	0c 94 74 98 	jmp	0x130e8	; 0x130e8 <strtok_r>

000130e8 <strtok_r>:
strtok_r():
   130e8:	fa 01       	movw	r30, r20
   130ea:	a1 91       	ld	r26, Z+
   130ec:	b0 81       	ld	r27, Z
   130ee:	00 97       	sbiw	r24, 0x00	; 0
   130f0:	19 f4       	brne	.+6      	; 0x130f8 <strtok_r+0x10>
   130f2:	10 97       	sbiw	r26, 0x00	; 0
   130f4:	e1 f0       	breq	.+56     	; 0x1312e <strtok_r+0x46>
   130f6:	cd 01       	movw	r24, r26
   130f8:	dc 01       	movw	r26, r24
   130fa:	cd 01       	movw	r24, r26
   130fc:	0d 90       	ld	r0, X+
   130fe:	00 20       	and	r0, r0
   13100:	11 f4       	brne	.+4      	; 0x13106 <strtok_r+0x1e>
   13102:	c0 01       	movw	r24, r0
   13104:	13 c0       	rjmp	.+38     	; 0x1312c <strtok_r+0x44>
   13106:	fb 01       	movw	r30, r22
   13108:	21 91       	ld	r18, Z+
   1310a:	22 23       	and	r18, r18
   1310c:	19 f0       	breq	.+6      	; 0x13114 <strtok_r+0x2c>
   1310e:	20 15       	cp	r18, r0
   13110:	d9 f7       	brne	.-10     	; 0x13108 <strtok_r+0x20>
   13112:	f3 cf       	rjmp	.-26     	; 0x130fa <strtok_r+0x12>
   13114:	fb 01       	movw	r30, r22
   13116:	21 91       	ld	r18, Z+
   13118:	20 15       	cp	r18, r0
   1311a:	19 f4       	brne	.+6      	; 0x13122 <strtok_r+0x3a>
   1311c:	1e 92       	st	-X, r1
   1311e:	11 96       	adiw	r26, 0x01	; 1
   13120:	06 c0       	rjmp	.+12     	; 0x1312e <strtok_r+0x46>
   13122:	22 23       	and	r18, r18
   13124:	c1 f7       	brne	.-16     	; 0x13116 <strtok_r+0x2e>
   13126:	0d 90       	ld	r0, X+
   13128:	00 20       	and	r0, r0
   1312a:	a1 f7       	brne	.-24     	; 0x13114 <strtok_r+0x2c>
   1312c:	d0 01       	movw	r26, r0
   1312e:	fa 01       	movw	r30, r20
   13130:	a1 93       	st	Z+, r26
   13132:	b0 83       	st	Z, r27
   13134:	08 95       	ret

00013136 <itoa>:
itoa():
   13136:	45 32       	cpi	r20, 0x25	; 37
   13138:	51 05       	cpc	r21, r1
   1313a:	20 f4       	brcc	.+8      	; 0x13144 <itoa+0xe>
   1313c:	42 30       	cpi	r20, 0x02	; 2
   1313e:	10 f0       	brcs	.+4      	; 0x13144 <itoa+0xe>
   13140:	0c 94 a6 98 	jmp	0x1314c	; 0x1314c <__itoa_ncheck>
   13144:	fb 01       	movw	r30, r22
   13146:	10 82       	st	Z, r1
   13148:	cb 01       	movw	r24, r22
   1314a:	08 95       	ret

0001314c <__itoa_ncheck>:
__itoa_ncheck():
   1314c:	bb 27       	eor	r27, r27
   1314e:	4a 30       	cpi	r20, 0x0A	; 10
   13150:	31 f4       	brne	.+12     	; 0x1315e <__itoa_ncheck+0x12>
   13152:	99 23       	and	r25, r25
   13154:	22 f4       	brpl	.+8      	; 0x1315e <__itoa_ncheck+0x12>
   13156:	bd e2       	ldi	r27, 0x2D	; 45
   13158:	90 95       	com	r25
   1315a:	81 95       	neg	r24
   1315c:	9f 4f       	sbci	r25, 0xFF	; 255
   1315e:	0c 94 ba 98 	jmp	0x13174	; 0x13174 <__utoa_common>

00013162 <__mulhi_const_10>:
__mulhi_const_10():
   13162:	7a e0       	ldi	r23, 0x0A	; 10
   13164:	97 9f       	mul	r25, r23
   13166:	90 2d       	mov	r25, r0
   13168:	87 9f       	mul	r24, r23
   1316a:	80 2d       	mov	r24, r0
   1316c:	91 0d       	add	r25, r1
   1316e:	11 24       	eor	r1, r1
   13170:	08 95       	ret

00013172 <__utoa_ncheck>:
__utoa_ncheck():
   13172:	bb 27       	eor	r27, r27

00013174 <__utoa_common>:
   13174:	fb 01       	movw	r30, r22
   13176:	55 27       	eor	r21, r21
   13178:	aa 27       	eor	r26, r26
   1317a:	88 0f       	add	r24, r24
   1317c:	99 1f       	adc	r25, r25
   1317e:	aa 1f       	adc	r26, r26
   13180:	a4 17       	cp	r26, r20
   13182:	10 f0       	brcs	.+4      	; 0x13188 <__utoa_common+0x14>
   13184:	a4 1b       	sub	r26, r20
   13186:	83 95       	inc	r24
   13188:	50 51       	subi	r21, 0x10	; 16
   1318a:	b9 f7       	brne	.-18     	; 0x1317a <__utoa_common+0x6>
   1318c:	a0 5d       	subi	r26, 0xD0	; 208
   1318e:	aa 33       	cpi	r26, 0x3A	; 58
   13190:	08 f0       	brcs	.+2      	; 0x13194 <__utoa_common+0x20>
   13192:	a9 5d       	subi	r26, 0xD9	; 217
   13194:	a1 93       	st	Z+, r26
   13196:	00 97       	sbiw	r24, 0x00	; 0
   13198:	79 f7       	brne	.-34     	; 0x13178 <__utoa_common+0x4>
   1319a:	b1 11       	cpse	r27, r1
   1319c:	b1 93       	st	Z+, r27
   1319e:	11 92       	st	Z+, r1
   131a0:	cb 01       	movw	r24, r22
   131a2:	0c 94 48 a0 	jmp	0x14090	; 0x14090 <strrev>

000131a6 <fdevopen>:
fdevopen():
   131a6:	0f 93       	push	r16
   131a8:	1f 93       	push	r17
   131aa:	cf 93       	push	r28
   131ac:	df 93       	push	r29
   131ae:	00 97       	sbiw	r24, 0x00	; 0
   131b0:	59 f4       	brne	.+22     	; 0x131c8 <fdevopen+0x22>
   131b2:	61 15       	cp	r22, r1
   131b4:	71 05       	cpc	r23, r1
   131b6:	41 f4       	brne	.+16     	; 0x131c8 <fdevopen+0x22>
   131b8:	f0 e0       	ldi	r31, 0x00	; 0
   131ba:	e0 e0       	ldi	r30, 0x00	; 0
   131bc:	cf 01       	movw	r24, r30
   131be:	df 91       	pop	r29
   131c0:	cf 91       	pop	r28
   131c2:	1f 91       	pop	r17
   131c4:	0f 91       	pop	r16
   131c6:	08 95       	ret
   131c8:	8b 01       	movw	r16, r22
   131ca:	ec 01       	movw	r28, r24
   131cc:	6e e0       	ldi	r22, 0x0E	; 14
   131ce:	70 e0       	ldi	r23, 0x00	; 0
   131d0:	81 e0       	ldi	r24, 0x01	; 1
   131d2:	90 e0       	ldi	r25, 0x00	; 0
   131d4:	0e 94 20 9b 	call	0x13640	; 0x13640 <calloc>
   131d8:	fc 01       	movw	r30, r24
   131da:	89 2b       	or	r24, r25
   131dc:	69 f3       	breq	.-38     	; 0x131b8 <fdevopen+0x12>
   131de:	80 e8       	ldi	r24, 0x80	; 128
   131e0:	83 83       	std	Z+3, r24	; 0x03
   131e2:	01 15       	cp	r16, r1
   131e4:	11 05       	cpc	r17, r1
   131e6:	71 f0       	breq	.+28     	; 0x13204 <fdevopen+0x5e>
   131e8:	13 87       	std	Z+11, r17	; 0x0b
   131ea:	02 87       	std	Z+10, r16	; 0x0a
   131ec:	81 e8       	ldi	r24, 0x81	; 129
   131ee:	83 83       	std	Z+3, r24	; 0x03
   131f0:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <__iob>
   131f4:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <__iob+0x1>
   131f8:	89 2b       	or	r24, r25
   131fa:	21 f4       	brne	.+8      	; 0x13204 <fdevopen+0x5e>
   131fc:	f0 93 36 13 	sts	0x1336, r31	; 0x801336 <__iob+0x1>
   13200:	e0 93 35 13 	sts	0x1335, r30	; 0x801335 <__iob>
   13204:	20 97       	sbiw	r28, 0x00	; 0
   13206:	d1 f2       	breq	.-76     	; 0x131bc <fdevopen+0x16>
   13208:	d1 87       	std	Z+9, r29	; 0x09
   1320a:	c0 87       	std	Z+8, r28	; 0x08
   1320c:	83 81       	ldd	r24, Z+3	; 0x03
   1320e:	82 60       	ori	r24, 0x02	; 2
   13210:	83 83       	std	Z+3, r24	; 0x03
   13212:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <__iob+0x2>
   13216:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <__iob+0x3>
   1321a:	89 2b       	or	r24, r25
   1321c:	79 f6       	brne	.-98     	; 0x131bc <fdevopen+0x16>
   1321e:	f0 93 38 13 	sts	0x1338, r31	; 0x801338 <__iob+0x3>
   13222:	e0 93 37 13 	sts	0x1337, r30	; 0x801337 <__iob+0x2>
   13226:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <__iob+0x4>
   1322a:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <__iob+0x5>
   1322e:	89 2b       	or	r24, r25
   13230:	29 f6       	brne	.-118    	; 0x131bc <fdevopen+0x16>
   13232:	f0 93 3a 13 	sts	0x133A, r31	; 0x80133a <__iob+0x5>
   13236:	e0 93 39 13 	sts	0x1339, r30	; 0x801339 <__iob+0x4>
   1323a:	c0 cf       	rjmp	.-128    	; 0x131bc <fdevopen+0x16>

0001323c <vfprintf>:
vfprintf():
   1323c:	2f 92       	push	r2
   1323e:	3f 92       	push	r3
   13240:	4f 92       	push	r4
   13242:	5f 92       	push	r5
   13244:	6f 92       	push	r6
   13246:	7f 92       	push	r7
   13248:	8f 92       	push	r8
   1324a:	9f 92       	push	r9
   1324c:	af 92       	push	r10
   1324e:	bf 92       	push	r11
   13250:	cf 92       	push	r12
   13252:	df 92       	push	r13
   13254:	ef 92       	push	r14
   13256:	ff 92       	push	r15
   13258:	0f 93       	push	r16
   1325a:	1f 93       	push	r17
   1325c:	cf 93       	push	r28
   1325e:	df 93       	push	r29
   13260:	00 d0       	rcall	.+0      	; 0x13262 <vfprintf+0x26>
   13262:	00 d0       	rcall	.+0      	; 0x13264 <vfprintf+0x28>
   13264:	00 d0       	rcall	.+0      	; 0x13266 <vfprintf+0x2a>
   13266:	1f 92       	push	r1
   13268:	1f 92       	push	r1
   1326a:	cd b7       	in	r28, 0x3d	; 61
   1326c:	de b7       	in	r29, 0x3e	; 62
   1326e:	7c 01       	movw	r14, r24
   13270:	3b 01       	movw	r6, r22
   13272:	8a 01       	movw	r16, r20
   13274:	fc 01       	movw	r30, r24
   13276:	17 82       	std	Z+7, r1	; 0x07
   13278:	16 82       	std	Z+6, r1	; 0x06
   1327a:	83 81       	ldd	r24, Z+3	; 0x03
   1327c:	81 ff       	sbrs	r24, 1
   1327e:	dd c1       	rjmp	.+954    	; 0x1363a <vfprintf+0x3fe>
   13280:	ce 01       	movw	r24, r28
   13282:	01 96       	adiw	r24, 0x01	; 1
   13284:	5c 01       	movw	r10, r24
   13286:	f7 01       	movw	r30, r14
   13288:	93 81       	ldd	r25, Z+3	; 0x03
   1328a:	f3 01       	movw	r30, r6
   1328c:	93 fd       	sbrc	r25, 3
   1328e:	85 91       	lpm	r24, Z+
   13290:	93 ff       	sbrs	r25, 3
   13292:	81 91       	ld	r24, Z+
   13294:	3f 01       	movw	r6, r30
   13296:	88 23       	and	r24, r24
   13298:	09 f4       	brne	.+2      	; 0x1329c <vfprintf+0x60>
   1329a:	53 c1       	rjmp	.+678    	; 0x13542 <vfprintf+0x306>
   1329c:	85 32       	cpi	r24, 0x25	; 37
   1329e:	39 f4       	brne	.+14     	; 0x132ae <vfprintf+0x72>
   132a0:	93 fd       	sbrc	r25, 3
   132a2:	85 91       	lpm	r24, Z+
   132a4:	93 ff       	sbrs	r25, 3
   132a6:	81 91       	ld	r24, Z+
   132a8:	3f 01       	movw	r6, r30
   132aa:	85 32       	cpi	r24, 0x25	; 37
   132ac:	29 f4       	brne	.+10     	; 0x132b8 <vfprintf+0x7c>
   132ae:	b7 01       	movw	r22, r14
   132b0:	90 e0       	ldi	r25, 0x00	; 0
   132b2:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   132b6:	e7 cf       	rjmp	.-50     	; 0x13286 <vfprintf+0x4a>
   132b8:	91 2c       	mov	r9, r1
   132ba:	21 2c       	mov	r2, r1
   132bc:	31 2c       	mov	r3, r1
   132be:	ff e1       	ldi	r31, 0x1F	; 31
   132c0:	f3 15       	cp	r31, r3
   132c2:	38 f0       	brcs	.+14     	; 0x132d2 <vfprintf+0x96>
   132c4:	8b 32       	cpi	r24, 0x2B	; 43
   132c6:	11 f1       	breq	.+68     	; 0x1330c <vfprintf+0xd0>
   132c8:	90 f4       	brcc	.+36     	; 0x132ee <vfprintf+0xb2>
   132ca:	80 32       	cpi	r24, 0x20	; 32
   132cc:	09 f1       	breq	.+66     	; 0x13310 <vfprintf+0xd4>
   132ce:	83 32       	cpi	r24, 0x23	; 35
   132d0:	29 f1       	breq	.+74     	; 0x1331c <vfprintf+0xe0>
   132d2:	37 fc       	sbrc	r3, 7
   132d4:	3c c0       	rjmp	.+120    	; 0x1334e <vfprintf+0x112>
   132d6:	20 ed       	ldi	r18, 0xD0	; 208
   132d8:	28 0f       	add	r18, r24
   132da:	2a 30       	cpi	r18, 0x0A	; 10
   132dc:	50 f5       	brcc	.+84     	; 0x13332 <vfprintf+0xf6>
   132de:	36 fe       	sbrs	r3, 6
   132e0:	20 c0       	rjmp	.+64     	; 0x13322 <vfprintf+0xe6>
   132e2:	8a e0       	ldi	r24, 0x0A	; 10
   132e4:	98 9e       	mul	r9, r24
   132e6:	20 0d       	add	r18, r0
   132e8:	11 24       	eor	r1, r1
   132ea:	92 2e       	mov	r9, r18
   132ec:	06 c0       	rjmp	.+12     	; 0x132fa <vfprintf+0xbe>
   132ee:	8d 32       	cpi	r24, 0x2D	; 45
   132f0:	91 f0       	breq	.+36     	; 0x13316 <vfprintf+0xda>
   132f2:	80 33       	cpi	r24, 0x30	; 48
   132f4:	71 f7       	brne	.-36     	; 0x132d2 <vfprintf+0x96>
   132f6:	68 94       	set
   132f8:	30 f8       	bld	r3, 0
   132fa:	f3 01       	movw	r30, r6
   132fc:	93 fd       	sbrc	r25, 3
   132fe:	85 91       	lpm	r24, Z+
   13300:	93 ff       	sbrs	r25, 3
   13302:	81 91       	ld	r24, Z+
   13304:	3f 01       	movw	r6, r30
   13306:	81 11       	cpse	r24, r1
   13308:	da cf       	rjmp	.-76     	; 0x132be <vfprintf+0x82>
   1330a:	21 c0       	rjmp	.+66     	; 0x1334e <vfprintf+0x112>
   1330c:	68 94       	set
   1330e:	31 f8       	bld	r3, 1
   13310:	68 94       	set
   13312:	32 f8       	bld	r3, 2
   13314:	f2 cf       	rjmp	.-28     	; 0x132fa <vfprintf+0xbe>
   13316:	68 94       	set
   13318:	33 f8       	bld	r3, 3
   1331a:	ef cf       	rjmp	.-34     	; 0x132fa <vfprintf+0xbe>
   1331c:	68 94       	set
   1331e:	34 f8       	bld	r3, 4
   13320:	ec cf       	rjmp	.-40     	; 0x132fa <vfprintf+0xbe>
   13322:	ea e0       	ldi	r30, 0x0A	; 10
   13324:	2e 9e       	mul	r2, r30
   13326:	20 0d       	add	r18, r0
   13328:	11 24       	eor	r1, r1
   1332a:	22 2e       	mov	r2, r18
   1332c:	68 94       	set
   1332e:	35 f8       	bld	r3, 5
   13330:	e4 cf       	rjmp	.-56     	; 0x132fa <vfprintf+0xbe>
   13332:	8e 32       	cpi	r24, 0x2E	; 46
   13334:	29 f4       	brne	.+10     	; 0x13340 <vfprintf+0x104>
   13336:	36 fc       	sbrc	r3, 6
   13338:	04 c1       	rjmp	.+520    	; 0x13542 <vfprintf+0x306>
   1333a:	68 94       	set
   1333c:	36 f8       	bld	r3, 6
   1333e:	dd cf       	rjmp	.-70     	; 0x132fa <vfprintf+0xbe>
   13340:	8c 36       	cpi	r24, 0x6C	; 108
   13342:	19 f4       	brne	.+6      	; 0x1334a <vfprintf+0x10e>
   13344:	68 94       	set
   13346:	37 f8       	bld	r3, 7
   13348:	d8 cf       	rjmp	.-80     	; 0x132fa <vfprintf+0xbe>
   1334a:	88 36       	cpi	r24, 0x68	; 104
   1334c:	b1 f2       	breq	.-84     	; 0x132fa <vfprintf+0xbe>
   1334e:	98 2f       	mov	r25, r24
   13350:	9f 7d       	andi	r25, 0xDF	; 223
   13352:	95 54       	subi	r25, 0x45	; 69
   13354:	93 30       	cpi	r25, 0x03	; 3
   13356:	e0 f0       	brcs	.+56     	; 0x13390 <vfprintf+0x154>
   13358:	83 36       	cpi	r24, 0x63	; 99
   1335a:	a1 f1       	breq	.+104    	; 0x133c4 <vfprintf+0x188>
   1335c:	83 37       	cpi	r24, 0x73	; 115
   1335e:	c1 f1       	breq	.+112    	; 0x133d0 <vfprintf+0x194>
   13360:	83 35       	cpi	r24, 0x53	; 83
   13362:	09 f0       	breq	.+2      	; 0x13366 <vfprintf+0x12a>
   13364:	63 c0       	rjmp	.+198    	; 0x1342c <vfprintf+0x1f0>
   13366:	28 01       	movw	r4, r16
   13368:	f2 e0       	ldi	r31, 0x02	; 2
   1336a:	4f 0e       	add	r4, r31
   1336c:	51 1c       	adc	r5, r1
   1336e:	f8 01       	movw	r30, r16
   13370:	c0 80       	ld	r12, Z
   13372:	d1 80       	ldd	r13, Z+1	; 0x01
   13374:	69 2d       	mov	r22, r9
   13376:	70 e0       	ldi	r23, 0x00	; 0
   13378:	36 fc       	sbrc	r3, 6
   1337a:	02 c0       	rjmp	.+4      	; 0x13380 <vfprintf+0x144>
   1337c:	6f ef       	ldi	r22, 0xFF	; 255
   1337e:	7f ef       	ldi	r23, 0xFF	; 255
   13380:	c6 01       	movw	r24, r12
   13382:	0e 94 2b a0 	call	0x14056	; 0x14056 <strnlen_P>
   13386:	4c 01       	movw	r8, r24
   13388:	68 94       	set
   1338a:	37 f8       	bld	r3, 7
   1338c:	82 01       	movw	r16, r4
   1338e:	0a c0       	rjmp	.+20     	; 0x133a4 <vfprintf+0x168>
   13390:	0c 5f       	subi	r16, 0xFC	; 252
   13392:	1f 4f       	sbci	r17, 0xFF	; 255
   13394:	ff e3       	ldi	r31, 0x3F	; 63
   13396:	f9 83       	std	Y+1, r31	; 0x01
   13398:	88 24       	eor	r8, r8
   1339a:	83 94       	inc	r8
   1339c:	91 2c       	mov	r9, r1
   1339e:	65 01       	movw	r12, r10
   133a0:	e8 94       	clt
   133a2:	37 f8       	bld	r3, 7
   133a4:	33 fe       	sbrs	r3, 3
   133a6:	2d c0       	rjmp	.+90     	; 0x13402 <vfprintf+0x1c6>
   133a8:	52 2c       	mov	r5, r2
   133aa:	81 14       	cp	r8, r1
   133ac:	91 04       	cpc	r9, r1
   133ae:	71 f5       	brne	.+92     	; 0x1340c <vfprintf+0x1d0>
   133b0:	55 20       	and	r5, r5
   133b2:	09 f4       	brne	.+2      	; 0x133b6 <vfprintf+0x17a>
   133b4:	68 cf       	rjmp	.-304    	; 0x13286 <vfprintf+0x4a>
   133b6:	b7 01       	movw	r22, r14
   133b8:	80 e2       	ldi	r24, 0x20	; 32
   133ba:	90 e0       	ldi	r25, 0x00	; 0
   133bc:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   133c0:	5a 94       	dec	r5
   133c2:	f6 cf       	rjmp	.-20     	; 0x133b0 <vfprintf+0x174>
   133c4:	f8 01       	movw	r30, r16
   133c6:	80 81       	ld	r24, Z
   133c8:	89 83       	std	Y+1, r24	; 0x01
   133ca:	0e 5f       	subi	r16, 0xFE	; 254
   133cc:	1f 4f       	sbci	r17, 0xFF	; 255
   133ce:	e4 cf       	rjmp	.-56     	; 0x13398 <vfprintf+0x15c>
   133d0:	28 01       	movw	r4, r16
   133d2:	f2 e0       	ldi	r31, 0x02	; 2
   133d4:	4f 0e       	add	r4, r31
   133d6:	51 1c       	adc	r5, r1
   133d8:	f8 01       	movw	r30, r16
   133da:	c0 80       	ld	r12, Z
   133dc:	d1 80       	ldd	r13, Z+1	; 0x01
   133de:	69 2d       	mov	r22, r9
   133e0:	70 e0       	ldi	r23, 0x00	; 0
   133e2:	36 fc       	sbrc	r3, 6
   133e4:	02 c0       	rjmp	.+4      	; 0x133ea <vfprintf+0x1ae>
   133e6:	6f ef       	ldi	r22, 0xFF	; 255
   133e8:	7f ef       	ldi	r23, 0xFF	; 255
   133ea:	c6 01       	movw	r24, r12
   133ec:	0e 94 3d a0 	call	0x1407a	; 0x1407a <strnlen>
   133f0:	4c 01       	movw	r8, r24
   133f2:	82 01       	movw	r16, r4
   133f4:	d5 cf       	rjmp	.-86     	; 0x133a0 <vfprintf+0x164>
   133f6:	b7 01       	movw	r22, r14
   133f8:	80 e2       	ldi	r24, 0x20	; 32
   133fa:	90 e0       	ldi	r25, 0x00	; 0
   133fc:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   13400:	2a 94       	dec	r2
   13402:	28 14       	cp	r2, r8
   13404:	19 04       	cpc	r1, r9
   13406:	09 f0       	breq	.+2      	; 0x1340a <vfprintf+0x1ce>
   13408:	b0 f7       	brcc	.-20     	; 0x133f6 <vfprintf+0x1ba>
   1340a:	ce cf       	rjmp	.-100    	; 0x133a8 <vfprintf+0x16c>
   1340c:	f6 01       	movw	r30, r12
   1340e:	37 fc       	sbrc	r3, 7
   13410:	85 91       	lpm	r24, Z+
   13412:	37 fe       	sbrs	r3, 7
   13414:	81 91       	ld	r24, Z+
   13416:	6f 01       	movw	r12, r30
   13418:	b7 01       	movw	r22, r14
   1341a:	90 e0       	ldi	r25, 0x00	; 0
   1341c:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   13420:	51 10       	cpse	r5, r1
   13422:	5a 94       	dec	r5
   13424:	f1 e0       	ldi	r31, 0x01	; 1
   13426:	8f 1a       	sub	r8, r31
   13428:	91 08       	sbc	r9, r1
   1342a:	bf cf       	rjmp	.-130    	; 0x133aa <vfprintf+0x16e>
   1342c:	84 36       	cpi	r24, 0x64	; 100
   1342e:	19 f0       	breq	.+6      	; 0x13436 <vfprintf+0x1fa>
   13430:	89 36       	cpi	r24, 0x69	; 105
   13432:	09 f0       	breq	.+2      	; 0x13436 <vfprintf+0x1fa>
   13434:	77 c0       	rjmp	.+238    	; 0x13524 <vfprintf+0x2e8>
   13436:	f8 01       	movw	r30, r16
   13438:	37 fe       	sbrs	r3, 7
   1343a:	6b c0       	rjmp	.+214    	; 0x13512 <vfprintf+0x2d6>
   1343c:	60 81       	ld	r22, Z
   1343e:	71 81       	ldd	r23, Z+1	; 0x01
   13440:	82 81       	ldd	r24, Z+2	; 0x02
   13442:	93 81       	ldd	r25, Z+3	; 0x03
   13444:	0c 5f       	subi	r16, 0xFC	; 252
   13446:	1f 4f       	sbci	r17, 0xFF	; 255
   13448:	f3 2d       	mov	r31, r3
   1344a:	ff 76       	andi	r31, 0x6F	; 111
   1344c:	3f 2e       	mov	r3, r31
   1344e:	97 ff       	sbrs	r25, 7
   13450:	09 c0       	rjmp	.+18     	; 0x13464 <vfprintf+0x228>
   13452:	90 95       	com	r25
   13454:	80 95       	com	r24
   13456:	70 95       	com	r23
   13458:	61 95       	neg	r22
   1345a:	7f 4f       	sbci	r23, 0xFF	; 255
   1345c:	8f 4f       	sbci	r24, 0xFF	; 255
   1345e:	9f 4f       	sbci	r25, 0xFF	; 255
   13460:	68 94       	set
   13462:	37 f8       	bld	r3, 7
   13464:	2a e0       	ldi	r18, 0x0A	; 10
   13466:	30 e0       	ldi	r19, 0x00	; 0
   13468:	a5 01       	movw	r20, r10
   1346a:	0e 94 88 a0 	call	0x14110	; 0x14110 <__ultoa_invert>
   1346e:	c8 2e       	mov	r12, r24
   13470:	ca 18       	sub	r12, r10
   13472:	8c 2c       	mov	r8, r12
   13474:	43 2c       	mov	r4, r3
   13476:	36 fe       	sbrs	r3, 6
   13478:	0c c0       	rjmp	.+24     	; 0x13492 <vfprintf+0x256>
   1347a:	e8 94       	clt
   1347c:	40 f8       	bld	r4, 0
   1347e:	c9 14       	cp	r12, r9
   13480:	40 f4       	brcc	.+16     	; 0x13492 <vfprintf+0x256>
   13482:	34 fe       	sbrs	r3, 4
   13484:	05 c0       	rjmp	.+10     	; 0x13490 <vfprintf+0x254>
   13486:	32 fc       	sbrc	r3, 2
   13488:	03 c0       	rjmp	.+6      	; 0x13490 <vfprintf+0x254>
   1348a:	f3 2d       	mov	r31, r3
   1348c:	fe 7e       	andi	r31, 0xEE	; 238
   1348e:	4f 2e       	mov	r4, r31
   13490:	89 2c       	mov	r8, r9
   13492:	44 fe       	sbrs	r4, 4
   13494:	aa c0       	rjmp	.+340    	; 0x135ea <vfprintf+0x3ae>
   13496:	fe 01       	movw	r30, r28
   13498:	ec 0d       	add	r30, r12
   1349a:	f1 1d       	adc	r31, r1
   1349c:	80 81       	ld	r24, Z
   1349e:	80 33       	cpi	r24, 0x30	; 48
   134a0:	09 f0       	breq	.+2      	; 0x134a4 <vfprintf+0x268>
   134a2:	9c c0       	rjmp	.+312    	; 0x135dc <vfprintf+0x3a0>
   134a4:	24 2d       	mov	r18, r4
   134a6:	29 7e       	andi	r18, 0xE9	; 233
   134a8:	42 2e       	mov	r4, r18
   134aa:	84 2d       	mov	r24, r4
   134ac:	88 70       	andi	r24, 0x08	; 8
   134ae:	58 2e       	mov	r5, r24
   134b0:	43 fc       	sbrc	r4, 3
   134b2:	aa c0       	rjmp	.+340    	; 0x13608 <vfprintf+0x3cc>
   134b4:	40 fe       	sbrs	r4, 0
   134b6:	a4 c0       	rjmp	.+328    	; 0x13600 <vfprintf+0x3c4>
   134b8:	9c 2c       	mov	r9, r12
   134ba:	82 14       	cp	r8, r2
   134bc:	18 f4       	brcc	.+6      	; 0x134c4 <vfprintf+0x288>
   134be:	2c 0c       	add	r2, r12
   134c0:	92 2c       	mov	r9, r2
   134c2:	98 18       	sub	r9, r8
   134c4:	44 fe       	sbrs	r4, 4
   134c6:	a6 c0       	rjmp	.+332    	; 0x13614 <vfprintf+0x3d8>
   134c8:	b7 01       	movw	r22, r14
   134ca:	80 e3       	ldi	r24, 0x30	; 48
   134cc:	90 e0       	ldi	r25, 0x00	; 0
   134ce:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   134d2:	42 fe       	sbrs	r4, 2
   134d4:	09 c0       	rjmp	.+18     	; 0x134e8 <vfprintf+0x2ac>
   134d6:	88 e7       	ldi	r24, 0x78	; 120
   134d8:	90 e0       	ldi	r25, 0x00	; 0
   134da:	41 fe       	sbrs	r4, 1
   134dc:	02 c0       	rjmp	.+4      	; 0x134e2 <vfprintf+0x2a6>
   134de:	88 e5       	ldi	r24, 0x58	; 88
   134e0:	90 e0       	ldi	r25, 0x00	; 0
   134e2:	b7 01       	movw	r22, r14
   134e4:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   134e8:	c9 14       	cp	r12, r9
   134ea:	08 f4       	brcc	.+2      	; 0x134ee <vfprintf+0x2b2>
   134ec:	9f c0       	rjmp	.+318    	; 0x1362c <vfprintf+0x3f0>
   134ee:	ca 94       	dec	r12
   134f0:	d1 2c       	mov	r13, r1
   134f2:	9f ef       	ldi	r25, 0xFF	; 255
   134f4:	c9 1a       	sub	r12, r25
   134f6:	d9 0a       	sbc	r13, r25
   134f8:	ca 0c       	add	r12, r10
   134fa:	db 1c       	adc	r13, r11
   134fc:	f6 01       	movw	r30, r12
   134fe:	82 91       	ld	r24, -Z
   13500:	6f 01       	movw	r12, r30
   13502:	b7 01       	movw	r22, r14
   13504:	90 e0       	ldi	r25, 0x00	; 0
   13506:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   1350a:	ac 14       	cp	r10, r12
   1350c:	bd 04       	cpc	r11, r13
   1350e:	b1 f7       	brne	.-20     	; 0x134fc <vfprintf+0x2c0>
   13510:	4f cf       	rjmp	.-354    	; 0x133b0 <vfprintf+0x174>
   13512:	60 81       	ld	r22, Z
   13514:	71 81       	ldd	r23, Z+1	; 0x01
   13516:	07 2e       	mov	r0, r23
   13518:	00 0c       	add	r0, r0
   1351a:	88 0b       	sbc	r24, r24
   1351c:	99 0b       	sbc	r25, r25
   1351e:	0e 5f       	subi	r16, 0xFE	; 254
   13520:	1f 4f       	sbci	r17, 0xFF	; 255
   13522:	92 cf       	rjmp	.-220    	; 0x13448 <vfprintf+0x20c>
   13524:	d3 2c       	mov	r13, r3
   13526:	e8 94       	clt
   13528:	d4 f8       	bld	r13, 4
   1352a:	2a e0       	ldi	r18, 0x0A	; 10
   1352c:	30 e0       	ldi	r19, 0x00	; 0
   1352e:	85 37       	cpi	r24, 0x75	; 117
   13530:	e1 f1       	breq	.+120    	; 0x135aa <vfprintf+0x36e>
   13532:	23 2d       	mov	r18, r3
   13534:	29 7f       	andi	r18, 0xF9	; 249
   13536:	d2 2e       	mov	r13, r18
   13538:	8f 36       	cpi	r24, 0x6F	; 111
   1353a:	a9 f1       	breq	.+106    	; 0x135a6 <vfprintf+0x36a>
   1353c:	f0 f4       	brcc	.+60     	; 0x1357a <vfprintf+0x33e>
   1353e:	88 35       	cpi	r24, 0x58	; 88
   13540:	51 f1       	breq	.+84     	; 0x13596 <vfprintf+0x35a>
   13542:	f7 01       	movw	r30, r14
   13544:	86 81       	ldd	r24, Z+6	; 0x06
   13546:	97 81       	ldd	r25, Z+7	; 0x07
   13548:	2b 96       	adiw	r28, 0x0b	; 11
   1354a:	0f b6       	in	r0, 0x3f	; 63
   1354c:	f8 94       	cli
   1354e:	de bf       	out	0x3e, r29	; 62
   13550:	0f be       	out	0x3f, r0	; 63
   13552:	cd bf       	out	0x3d, r28	; 61
   13554:	df 91       	pop	r29
   13556:	cf 91       	pop	r28
   13558:	1f 91       	pop	r17
   1355a:	0f 91       	pop	r16
   1355c:	ff 90       	pop	r15
   1355e:	ef 90       	pop	r14
   13560:	df 90       	pop	r13
   13562:	cf 90       	pop	r12
   13564:	bf 90       	pop	r11
   13566:	af 90       	pop	r10
   13568:	9f 90       	pop	r9
   1356a:	8f 90       	pop	r8
   1356c:	7f 90       	pop	r7
   1356e:	6f 90       	pop	r6
   13570:	5f 90       	pop	r5
   13572:	4f 90       	pop	r4
   13574:	3f 90       	pop	r3
   13576:	2f 90       	pop	r2
   13578:	08 95       	ret
   1357a:	80 37       	cpi	r24, 0x70	; 112
   1357c:	49 f0       	breq	.+18     	; 0x13590 <vfprintf+0x354>
   1357e:	88 37       	cpi	r24, 0x78	; 120
   13580:	01 f7       	brne	.-64     	; 0x13542 <vfprintf+0x306>
   13582:	d4 fe       	sbrs	r13, 4
   13584:	02 c0       	rjmp	.+4      	; 0x1358a <vfprintf+0x34e>
   13586:	68 94       	set
   13588:	d2 f8       	bld	r13, 2
   1358a:	20 e1       	ldi	r18, 0x10	; 16
   1358c:	30 e0       	ldi	r19, 0x00	; 0
   1358e:	0d c0       	rjmp	.+26     	; 0x135aa <vfprintf+0x36e>
   13590:	68 94       	set
   13592:	d4 f8       	bld	r13, 4
   13594:	f6 cf       	rjmp	.-20     	; 0x13582 <vfprintf+0x346>
   13596:	34 fe       	sbrs	r3, 4
   13598:	03 c0       	rjmp	.+6      	; 0x135a0 <vfprintf+0x364>
   1359a:	82 2f       	mov	r24, r18
   1359c:	86 60       	ori	r24, 0x06	; 6
   1359e:	d8 2e       	mov	r13, r24
   135a0:	20 e1       	ldi	r18, 0x10	; 16
   135a2:	32 e0       	ldi	r19, 0x02	; 2
   135a4:	02 c0       	rjmp	.+4      	; 0x135aa <vfprintf+0x36e>
   135a6:	28 e0       	ldi	r18, 0x08	; 8
   135a8:	30 e0       	ldi	r19, 0x00	; 0
   135aa:	f8 01       	movw	r30, r16
   135ac:	d7 fe       	sbrs	r13, 7
   135ae:	0f c0       	rjmp	.+30     	; 0x135ce <vfprintf+0x392>
   135b0:	60 81       	ld	r22, Z
   135b2:	71 81       	ldd	r23, Z+1	; 0x01
   135b4:	82 81       	ldd	r24, Z+2	; 0x02
   135b6:	93 81       	ldd	r25, Z+3	; 0x03
   135b8:	0c 5f       	subi	r16, 0xFC	; 252
   135ba:	1f 4f       	sbci	r17, 0xFF	; 255
   135bc:	a5 01       	movw	r20, r10
   135be:	0e 94 88 a0 	call	0x14110	; 0x14110 <__ultoa_invert>
   135c2:	c8 2e       	mov	r12, r24
   135c4:	ca 18       	sub	r12, r10
   135c6:	3d 2c       	mov	r3, r13
   135c8:	e8 94       	clt
   135ca:	37 f8       	bld	r3, 7
   135cc:	52 cf       	rjmp	.-348    	; 0x13472 <vfprintf+0x236>
   135ce:	60 81       	ld	r22, Z
   135d0:	71 81       	ldd	r23, Z+1	; 0x01
   135d2:	90 e0       	ldi	r25, 0x00	; 0
   135d4:	80 e0       	ldi	r24, 0x00	; 0
   135d6:	0e 5f       	subi	r16, 0xFE	; 254
   135d8:	1f 4f       	sbci	r17, 0xFF	; 255
   135da:	f0 cf       	rjmp	.-32     	; 0x135bc <vfprintf+0x380>
   135dc:	42 fc       	sbrc	r4, 2
   135de:	02 c0       	rjmp	.+4      	; 0x135e4 <vfprintf+0x3a8>
   135e0:	83 94       	inc	r8
   135e2:	63 cf       	rjmp	.-314    	; 0x134aa <vfprintf+0x26e>
   135e4:	83 94       	inc	r8
   135e6:	83 94       	inc	r8
   135e8:	60 cf       	rjmp	.-320    	; 0x134aa <vfprintf+0x26e>
   135ea:	84 2d       	mov	r24, r4
   135ec:	86 78       	andi	r24, 0x86	; 134
   135ee:	09 f4       	brne	.+2      	; 0x135f2 <vfprintf+0x3b6>
   135f0:	5c cf       	rjmp	.-328    	; 0x134aa <vfprintf+0x26e>
   135f2:	f6 cf       	rjmp	.-20     	; 0x135e0 <vfprintf+0x3a4>
   135f4:	b7 01       	movw	r22, r14
   135f6:	80 e2       	ldi	r24, 0x20	; 32
   135f8:	90 e0       	ldi	r25, 0x00	; 0
   135fa:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   135fe:	83 94       	inc	r8
   13600:	82 14       	cp	r8, r2
   13602:	c0 f3       	brcs	.-16     	; 0x135f4 <vfprintf+0x3b8>
   13604:	51 2c       	mov	r5, r1
   13606:	5e cf       	rjmp	.-324    	; 0x134c4 <vfprintf+0x288>
   13608:	52 2c       	mov	r5, r2
   1360a:	58 18       	sub	r5, r8
   1360c:	82 14       	cp	r8, r2
   1360e:	08 f4       	brcc	.+2      	; 0x13612 <vfprintf+0x3d6>
   13610:	59 cf       	rjmp	.-334    	; 0x134c4 <vfprintf+0x288>
   13612:	f8 cf       	rjmp	.-16     	; 0x13604 <vfprintf+0x3c8>
   13614:	84 2d       	mov	r24, r4
   13616:	86 78       	andi	r24, 0x86	; 134
   13618:	09 f4       	brne	.+2      	; 0x1361c <vfprintf+0x3e0>
   1361a:	66 cf       	rjmp	.-308    	; 0x134e8 <vfprintf+0x2ac>
   1361c:	8b e2       	ldi	r24, 0x2B	; 43
   1361e:	41 fe       	sbrs	r4, 1
   13620:	80 e2       	ldi	r24, 0x20	; 32
   13622:	47 fc       	sbrc	r4, 7
   13624:	8d e2       	ldi	r24, 0x2D	; 45
   13626:	b7 01       	movw	r22, r14
   13628:	90 e0       	ldi	r25, 0x00	; 0
   1362a:	5c cf       	rjmp	.-328    	; 0x134e4 <vfprintf+0x2a8>
   1362c:	b7 01       	movw	r22, r14
   1362e:	80 e3       	ldi	r24, 0x30	; 48
   13630:	90 e0       	ldi	r25, 0x00	; 0
   13632:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <fputc>
   13636:	9a 94       	dec	r9
   13638:	57 cf       	rjmp	.-338    	; 0x134e8 <vfprintf+0x2ac>
   1363a:	8f ef       	ldi	r24, 0xFF	; 255
   1363c:	9f ef       	ldi	r25, 0xFF	; 255
   1363e:	84 cf       	rjmp	.-248    	; 0x13548 <vfprintf+0x30c>

00013640 <calloc>:
calloc():
   13640:	0f 93       	push	r16
   13642:	1f 93       	push	r17
   13644:	cf 93       	push	r28
   13646:	df 93       	push	r29
   13648:	86 9f       	mul	r24, r22
   1364a:	80 01       	movw	r16, r0
   1364c:	87 9f       	mul	r24, r23
   1364e:	10 0d       	add	r17, r0
   13650:	96 9f       	mul	r25, r22
   13652:	10 0d       	add	r17, r0
   13654:	11 24       	eor	r1, r1
   13656:	c8 01       	movw	r24, r16
   13658:	0e 94 b5 9c 	call	0x1396a	; 0x1396a <malloc>
   1365c:	ec 01       	movw	r28, r24
   1365e:	00 97       	sbiw	r24, 0x00	; 0
   13660:	29 f0       	breq	.+10     	; 0x1366c <calloc+0x2c>
   13662:	a8 01       	movw	r20, r16
   13664:	70 e0       	ldi	r23, 0x00	; 0
   13666:	60 e0       	ldi	r22, 0x00	; 0
   13668:	0e 94 36 a0 	call	0x1406c	; 0x1406c <memset>
   1366c:	ce 01       	movw	r24, r28
   1366e:	df 91       	pop	r29
   13670:	cf 91       	pop	r28
   13672:	1f 91       	pop	r17
   13674:	0f 91       	pop	r16
   13676:	08 95       	ret

00013678 <dtoa_prf>:
dtoa_prf():
   13678:	8f 92       	push	r8
   1367a:	9f 92       	push	r9
   1367c:	af 92       	push	r10
   1367e:	bf 92       	push	r11
   13680:	cf 92       	push	r12
   13682:	df 92       	push	r13
   13684:	ef 92       	push	r14
   13686:	ff 92       	push	r15
   13688:	0f 93       	push	r16
   1368a:	1f 93       	push	r17
   1368c:	cf 93       	push	r28
   1368e:	df 93       	push	r29
   13690:	00 d0       	rcall	.+0      	; 0x13692 <dtoa_prf+0x1a>
   13692:	00 d0       	rcall	.+0      	; 0x13694 <dtoa_prf+0x1c>
   13694:	00 d0       	rcall	.+0      	; 0x13696 <dtoa_prf+0x1e>
   13696:	cd b7       	in	r28, 0x3d	; 61
   13698:	de b7       	in	r29, 0x3e	; 62
   1369a:	6a 01       	movw	r12, r20
   1369c:	f2 2e       	mov	r15, r18
   1369e:	b0 2e       	mov	r11, r16
   136a0:	10 2f       	mov	r17, r16
   136a2:	fb e3       	ldi	r31, 0x3B	; 59
   136a4:	af 2e       	mov	r10, r31
   136a6:	a0 16       	cp	r10, r16
   136a8:	08 f4       	brcc	.+2      	; 0x136ac <dtoa_prf+0x34>
   136aa:	1b e3       	ldi	r17, 0x3B	; 59
   136ac:	1f 5f       	subi	r17, 0xFF	; 255
   136ae:	01 2f       	mov	r16, r17
   136b0:	27 e0       	ldi	r18, 0x07	; 7
   136b2:	ae 01       	movw	r20, r28
   136b4:	4f 5f       	subi	r20, 0xFF	; 255
   136b6:	5f 4f       	sbci	r21, 0xFF	; 255
   136b8:	0e 94 38 9f 	call	0x13e70	; 0x13e70 <__ftoa_engine>
   136bc:	bc 01       	movw	r22, r24
   136be:	89 81       	ldd	r24, Y+1	; 0x01
   136c0:	98 2f       	mov	r25, r24
   136c2:	99 70       	andi	r25, 0x09	; 9
   136c4:	91 30       	cpi	r25, 0x01	; 1
   136c6:	09 f4       	brne	.+2      	; 0x136ca <dtoa_prf+0x52>
   136c8:	4e c0       	rjmp	.+156    	; 0x13766 <dtoa_prf+0xee>
   136ca:	9b e2       	ldi	r25, 0x2B	; 43
   136cc:	e1 fc       	sbrc	r14, 1
   136ce:	04 c0       	rjmp	.+8      	; 0x136d8 <dtoa_prf+0x60>
   136d0:	9e 2d       	mov	r25, r14
   136d2:	91 70       	andi	r25, 0x01	; 1
   136d4:	e0 fc       	sbrc	r14, 0
   136d6:	49 c0       	rjmp	.+146    	; 0x1376a <dtoa_prf+0xf2>
   136d8:	5e 2d       	mov	r21, r14
   136da:	50 71       	andi	r21, 0x10	; 16
   136dc:	e8 2f       	mov	r30, r24
   136de:	e8 70       	andi	r30, 0x08	; 8
   136e0:	83 ff       	sbrs	r24, 3
   136e2:	55 c0       	rjmp	.+170    	; 0x1378e <dtoa_prf+0x116>
   136e4:	84 e0       	ldi	r24, 0x04	; 4
   136e6:	91 11       	cpse	r25, r1
   136e8:	01 c0       	rjmp	.+2      	; 0x136ec <dtoa_prf+0x74>
   136ea:	83 e0       	ldi	r24, 0x03	; 3
   136ec:	ef 2d       	mov	r30, r15
   136ee:	e8 1b       	sub	r30, r24
   136f0:	8f 15       	cp	r24, r15
   136f2:	08 f0       	brcs	.+2      	; 0x136f6 <dtoa_prf+0x7e>
   136f4:	e0 e0       	ldi	r30, 0x00	; 0
   136f6:	d6 01       	movw	r26, r12
   136f8:	8e 2f       	mov	r24, r30
   136fa:	20 e2       	ldi	r18, 0x20	; 32
   136fc:	55 23       	and	r21, r21
   136fe:	c9 f1       	breq	.+114    	; 0x13772 <dtoa_prf+0xfa>
   13700:	99 23       	and	r25, r25
   13702:	29 f0       	breq	.+10     	; 0x1370e <dtoa_prf+0x96>
   13704:	d6 01       	movw	r26, r12
   13706:	9c 93       	st	X, r25
   13708:	c6 01       	movw	r24, r12
   1370a:	01 96       	adiw	r24, 0x01	; 1
   1370c:	6c 01       	movw	r12, r24
   1370e:	96 01       	movw	r18, r12
   13710:	2d 5f       	subi	r18, 0xFD	; 253
   13712:	3f 4f       	sbci	r19, 0xFF	; 255
   13714:	e2 fe       	sbrs	r14, 2
   13716:	33 c0       	rjmp	.+102    	; 0x1377e <dtoa_prf+0x106>
   13718:	8e e4       	ldi	r24, 0x4E	; 78
   1371a:	d6 01       	movw	r26, r12
   1371c:	8c 93       	st	X, r24
   1371e:	91 e4       	ldi	r25, 0x41	; 65
   13720:	11 96       	adiw	r26, 0x01	; 1
   13722:	9c 93       	st	X, r25
   13724:	11 97       	sbiw	r26, 0x01	; 1
   13726:	12 96       	adiw	r26, 0x02	; 2
   13728:	8c 93       	st	X, r24
   1372a:	d9 01       	movw	r26, r18
   1372c:	8e 2f       	mov	r24, r30
   1372e:	90 e2       	ldi	r25, 0x20	; 32
   13730:	81 11       	cpse	r24, r1
   13732:	2a c0       	rjmp	.+84     	; 0x13788 <dtoa_prf+0x110>
   13734:	e2 0f       	add	r30, r18
   13736:	f3 2f       	mov	r31, r19
   13738:	f1 1d       	adc	r31, r1
   1373a:	10 82       	st	Z, r1
   1373c:	8e ef       	ldi	r24, 0xFE	; 254
   1373e:	9f ef       	ldi	r25, 0xFF	; 255
   13740:	29 96       	adiw	r28, 0x09	; 9
   13742:	0f b6       	in	r0, 0x3f	; 63
   13744:	f8 94       	cli
   13746:	de bf       	out	0x3e, r29	; 62
   13748:	0f be       	out	0x3f, r0	; 63
   1374a:	cd bf       	out	0x3d, r28	; 61
   1374c:	df 91       	pop	r29
   1374e:	cf 91       	pop	r28
   13750:	1f 91       	pop	r17
   13752:	0f 91       	pop	r16
   13754:	ff 90       	pop	r15
   13756:	ef 90       	pop	r14
   13758:	df 90       	pop	r13
   1375a:	cf 90       	pop	r12
   1375c:	bf 90       	pop	r11
   1375e:	af 90       	pop	r10
   13760:	9f 90       	pop	r9
   13762:	8f 90       	pop	r8
   13764:	08 95       	ret
   13766:	9d e2       	ldi	r25, 0x2D	; 45
   13768:	b7 cf       	rjmp	.-146    	; 0x136d8 <dtoa_prf+0x60>
   1376a:	90 e2       	ldi	r25, 0x20	; 32
   1376c:	b5 cf       	rjmp	.-150    	; 0x136d8 <dtoa_prf+0x60>
   1376e:	2d 93       	st	X+, r18
   13770:	81 50       	subi	r24, 0x01	; 1
   13772:	81 11       	cpse	r24, r1
   13774:	fc cf       	rjmp	.-8      	; 0x1376e <dtoa_prf+0xf6>
   13776:	ce 0e       	add	r12, r30
   13778:	d1 1c       	adc	r13, r1
   1377a:	e0 e0       	ldi	r30, 0x00	; 0
   1377c:	c1 cf       	rjmp	.-126    	; 0x13700 <dtoa_prf+0x88>
   1377e:	8e e6       	ldi	r24, 0x6E	; 110
   13780:	d6 01       	movw	r26, r12
   13782:	8c 93       	st	X, r24
   13784:	91 e6       	ldi	r25, 0x61	; 97
   13786:	cc cf       	rjmp	.-104    	; 0x13720 <dtoa_prf+0xa8>
   13788:	9d 93       	st	X+, r25
   1378a:	81 50       	subi	r24, 0x01	; 1
   1378c:	d1 cf       	rjmp	.-94     	; 0x13730 <dtoa_prf+0xb8>
   1378e:	48 2f       	mov	r20, r24
   13790:	44 70       	andi	r20, 0x04	; 4
   13792:	82 ff       	sbrs	r24, 2
   13794:	3d c0       	rjmp	.+122    	; 0x13810 <dtoa_prf+0x198>
   13796:	84 e0       	ldi	r24, 0x04	; 4
   13798:	91 11       	cpse	r25, r1
   1379a:	01 c0       	rjmp	.+2      	; 0x1379e <dtoa_prf+0x126>
   1379c:	83 e0       	ldi	r24, 0x03	; 3
   1379e:	8f 15       	cp	r24, r15
   137a0:	10 f4       	brcc	.+4      	; 0x137a6 <dtoa_prf+0x12e>
   137a2:	ef 2d       	mov	r30, r15
   137a4:	e8 1b       	sub	r30, r24
   137a6:	d6 01       	movw	r26, r12
   137a8:	8e 2f       	mov	r24, r30
   137aa:	20 e2       	ldi	r18, 0x20	; 32
   137ac:	55 23       	and	r21, r21
   137ae:	09 f1       	breq	.+66     	; 0x137f2 <dtoa_prf+0x17a>
   137b0:	99 23       	and	r25, r25
   137b2:	29 f0       	breq	.+10     	; 0x137be <dtoa_prf+0x146>
   137b4:	d6 01       	movw	r26, r12
   137b6:	9c 93       	st	X, r25
   137b8:	c6 01       	movw	r24, r12
   137ba:	01 96       	adiw	r24, 0x01	; 1
   137bc:	6c 01       	movw	r12, r24
   137be:	96 01       	movw	r18, r12
   137c0:	2d 5f       	subi	r18, 0xFD	; 253
   137c2:	3f 4f       	sbci	r19, 0xFF	; 255
   137c4:	e2 fe       	sbrs	r14, 2
   137c6:	1b c0       	rjmp	.+54     	; 0x137fe <dtoa_prf+0x186>
   137c8:	89 e4       	ldi	r24, 0x49	; 73
   137ca:	d6 01       	movw	r26, r12
   137cc:	8c 93       	st	X, r24
   137ce:	8e e4       	ldi	r24, 0x4E	; 78
   137d0:	11 96       	adiw	r26, 0x01	; 1
   137d2:	8c 93       	st	X, r24
   137d4:	11 97       	sbiw	r26, 0x01	; 1
   137d6:	86 e4       	ldi	r24, 0x46	; 70
   137d8:	12 96       	adiw	r26, 0x02	; 2
   137da:	8c 93       	st	X, r24
   137dc:	d9 01       	movw	r26, r18
   137de:	8e 2f       	mov	r24, r30
   137e0:	90 e2       	ldi	r25, 0x20	; 32
   137e2:	88 23       	and	r24, r24
   137e4:	09 f4       	brne	.+2      	; 0x137e8 <dtoa_prf+0x170>
   137e6:	a6 cf       	rjmp	.-180    	; 0x13734 <dtoa_prf+0xbc>
   137e8:	9d 93       	st	X+, r25
   137ea:	81 50       	subi	r24, 0x01	; 1
   137ec:	fa cf       	rjmp	.-12     	; 0x137e2 <dtoa_prf+0x16a>
   137ee:	2d 93       	st	X+, r18
   137f0:	81 50       	subi	r24, 0x01	; 1
   137f2:	81 11       	cpse	r24, r1
   137f4:	fc cf       	rjmp	.-8      	; 0x137ee <dtoa_prf+0x176>
   137f6:	ce 0e       	add	r12, r30
   137f8:	d1 1c       	adc	r13, r1
   137fa:	e0 e0       	ldi	r30, 0x00	; 0
   137fc:	d9 cf       	rjmp	.-78     	; 0x137b0 <dtoa_prf+0x138>
   137fe:	89 e6       	ldi	r24, 0x69	; 105
   13800:	d6 01       	movw	r26, r12
   13802:	8c 93       	st	X, r24
   13804:	8e e6       	ldi	r24, 0x6E	; 110
   13806:	11 96       	adiw	r26, 0x01	; 1
   13808:	8c 93       	st	X, r24
   1380a:	11 97       	sbiw	r26, 0x01	; 1
   1380c:	86 e6       	ldi	r24, 0x66	; 102
   1380e:	e4 cf       	rjmp	.-56     	; 0x137d8 <dtoa_prf+0x160>
   13810:	9b 01       	movw	r18, r22
   13812:	77 ff       	sbrs	r23, 7
   13814:	02 c0       	rjmp	.+4      	; 0x1381a <dtoa_prf+0x1a2>
   13816:	30 e0       	ldi	r19, 0x00	; 0
   13818:	20 e0       	ldi	r18, 0x00	; 0
   1381a:	a1 e0       	ldi	r26, 0x01	; 1
   1381c:	b0 e0       	ldi	r27, 0x00	; 0
   1381e:	91 11       	cpse	r25, r1
   13820:	02 c0       	rjmp	.+4      	; 0x13826 <dtoa_prf+0x1ae>
   13822:	b0 e0       	ldi	r27, 0x00	; 0
   13824:	a0 e0       	ldi	r26, 0x00	; 0
   13826:	f9 01       	movw	r30, r18
   13828:	31 96       	adiw	r30, 0x01	; 1
   1382a:	ae 0f       	add	r26, r30
   1382c:	bf 1f       	adc	r27, r31
   1382e:	8b 2c       	mov	r8, r11
   13830:	91 2c       	mov	r9, r1
   13832:	bb 20       	and	r11, r11
   13834:	09 f4       	brne	.+2      	; 0x13838 <dtoa_prf+0x1c0>
   13836:	61 c0       	rjmp	.+194    	; 0x138fa <dtoa_prf+0x282>
   13838:	54 01       	movw	r10, r8
   1383a:	ef ef       	ldi	r30, 0xFF	; 255
   1383c:	ae 1a       	sub	r10, r30
   1383e:	be 0a       	sbc	r11, r30
   13840:	aa 0d       	add	r26, r10
   13842:	bb 1d       	adc	r27, r11
   13844:	fa 16       	cp	r15, r26
   13846:	1b 06       	cpc	r1, r27
   13848:	19 f0       	breq	.+6      	; 0x13850 <dtoa_prf+0x1d8>
   1384a:	14 f0       	brlt	.+4      	; 0x13850 <dtoa_prf+0x1d8>
   1384c:	4f 2d       	mov	r20, r15
   1384e:	4a 1b       	sub	r20, r26
   13850:	51 11       	cpse	r21, r1
   13852:	88 c0       	rjmp	.+272    	; 0x13964 <dtoa_prf+0x2ec>
   13854:	e3 fc       	sbrc	r14, 3
   13856:	59 c0       	rjmp	.+178    	; 0x1390a <dtoa_prf+0x292>
   13858:	76 01       	movw	r14, r12
   1385a:	a4 2f       	mov	r26, r20
   1385c:	b0 e2       	ldi	r27, 0x20	; 32
   1385e:	a1 11       	cpse	r26, r1
   13860:	4f c0       	rjmp	.+158    	; 0x13900 <dtoa_prf+0x288>
   13862:	c4 0e       	add	r12, r20
   13864:	d1 1c       	adc	r13, r1
   13866:	99 23       	and	r25, r25
   13868:	09 f4       	brne	.+2      	; 0x1386c <dtoa_prf+0x1f4>
   1386a:	5b c0       	rjmp	.+182    	; 0x13922 <dtoa_prf+0x2aa>
   1386c:	40 e0       	ldi	r20, 0x00	; 0
   1386e:	d6 01       	movw	r26, r12
   13870:	11 96       	adiw	r26, 0x01	; 1
   13872:	f6 01       	movw	r30, r12
   13874:	90 83       	st	Z, r25
   13876:	6d 01       	movw	r12, r26
   13878:	55 23       	and	r21, r21
   1387a:	09 f4       	brne	.+2      	; 0x1387e <dtoa_prf+0x206>
   1387c:	48 c0       	rjmp	.+144    	; 0x1390e <dtoa_prf+0x296>
   1387e:	01 2f       	mov	r16, r17
   13880:	06 0f       	add	r16, r22
   13882:	9a 81       	ldd	r25, Y+2	; 0x02
   13884:	58 2f       	mov	r21, r24
   13886:	50 71       	andi	r21, 0x10	; 16
   13888:	84 ff       	sbrs	r24, 4
   1388a:	03 c0       	rjmp	.+6      	; 0x13892 <dtoa_prf+0x21a>
   1388c:	91 33       	cpi	r25, 0x31	; 49
   1388e:	09 f4       	brne	.+2      	; 0x13892 <dtoa_prf+0x21a>
   13890:	01 50       	subi	r16, 0x01	; 1
   13892:	10 16       	cp	r1, r16
   13894:	0c f0       	brlt	.+2      	; 0x13898 <dtoa_prf+0x220>
   13896:	47 c0       	rjmp	.+142    	; 0x13926 <dtoa_prf+0x2ae>
   13898:	09 30       	cpi	r16, 0x09	; 9
   1389a:	08 f0       	brcs	.+2      	; 0x1389e <dtoa_prf+0x226>
   1389c:	08 e0       	ldi	r16, 0x08	; 8
   1389e:	ee e2       	ldi	r30, 0x2E	; 46
   138a0:	fe 2e       	mov	r15, r30
   138a2:	5b 01       	movw	r10, r22
   138a4:	a0 1a       	sub	r10, r16
   138a6:	b1 08       	sbc	r11, r1
   138a8:	85 01       	movw	r16, r10
   138aa:	91 94       	neg	r9
   138ac:	81 94       	neg	r8
   138ae:	91 08       	sbc	r9, r1
   138b0:	2f 3f       	cpi	r18, 0xFF	; 255
   138b2:	32 07       	cpc	r19, r18
   138b4:	29 f4       	brne	.+10     	; 0x138c0 <dtoa_prf+0x248>
   138b6:	d6 01       	movw	r26, r12
   138b8:	fc 92       	st	X, r15
   138ba:	f6 01       	movw	r30, r12
   138bc:	31 96       	adiw	r30, 0x01	; 1
   138be:	6f 01       	movw	r12, r30
   138c0:	62 17       	cp	r22, r18
   138c2:	73 07       	cpc	r23, r19
   138c4:	94 f1       	brlt	.+100    	; 0x1392a <dtoa_prf+0x2b2>
   138c6:	02 17       	cp	r16, r18
   138c8:	13 07       	cpc	r17, r19
   138ca:	7c f5       	brge	.+94     	; 0x1392a <dtoa_prf+0x2b2>
   138cc:	db 01       	movw	r26, r22
   138ce:	a2 1b       	sub	r26, r18
   138d0:	b3 0b       	sbc	r27, r19
   138d2:	aa 24       	eor	r10, r10
   138d4:	a3 94       	inc	r10
   138d6:	b1 2c       	mov	r11, r1
   138d8:	ac 0e       	add	r10, r28
   138da:	bd 1e       	adc	r11, r29
   138dc:	aa 0d       	add	r26, r10
   138de:	bb 1d       	adc	r27, r11
   138e0:	11 96       	adiw	r26, 0x01	; 1
   138e2:	8c 91       	ld	r24, X
   138e4:	21 50       	subi	r18, 0x01	; 1
   138e6:	31 09       	sbc	r19, r1
   138e8:	d6 01       	movw	r26, r12
   138ea:	11 96       	adiw	r26, 0x01	; 1
   138ec:	28 15       	cp	r18, r8
   138ee:	39 05       	cpc	r19, r9
   138f0:	f4 f0       	brlt	.+60     	; 0x1392e <dtoa_prf+0x2b6>
   138f2:	f6 01       	movw	r30, r12
   138f4:	80 83       	st	Z, r24
   138f6:	6d 01       	movw	r12, r26
   138f8:	db cf       	rjmp	.-74     	; 0x138b0 <dtoa_prf+0x238>
   138fa:	b1 2c       	mov	r11, r1
   138fc:	a1 2c       	mov	r10, r1
   138fe:	a0 cf       	rjmp	.-192    	; 0x13840 <dtoa_prf+0x1c8>
   13900:	f7 01       	movw	r30, r14
   13902:	b1 93       	st	Z+, r27
   13904:	7f 01       	movw	r14, r30
   13906:	a1 50       	subi	r26, 0x01	; 1
   13908:	aa cf       	rjmp	.-172    	; 0x1385e <dtoa_prf+0x1e6>
   1390a:	91 11       	cpse	r25, r1
   1390c:	b0 cf       	rjmp	.-160    	; 0x1386e <dtoa_prf+0x1f6>
   1390e:	d6 01       	movw	r26, r12
   13910:	94 2f       	mov	r25, r20
   13912:	50 e3       	ldi	r21, 0x30	; 48
   13914:	02 c0       	rjmp	.+4      	; 0x1391a <dtoa_prf+0x2a2>
   13916:	5d 93       	st	X+, r21
   13918:	91 50       	subi	r25, 0x01	; 1
   1391a:	91 11       	cpse	r25, r1
   1391c:	fc cf       	rjmp	.-8      	; 0x13916 <dtoa_prf+0x29e>
   1391e:	c4 0e       	add	r12, r20
   13920:	d1 1c       	adc	r13, r1
   13922:	40 e0       	ldi	r20, 0x00	; 0
   13924:	ac cf       	rjmp	.-168    	; 0x1387e <dtoa_prf+0x206>
   13926:	01 e0       	ldi	r16, 0x01	; 1
   13928:	ba cf       	rjmp	.-140    	; 0x1389e <dtoa_prf+0x226>
   1392a:	80 e3       	ldi	r24, 0x30	; 48
   1392c:	db cf       	rjmp	.-74     	; 0x138e4 <dtoa_prf+0x26c>
   1392e:	62 17       	cp	r22, r18
   13930:	73 07       	cpc	r23, r19
   13932:	31 f4       	brne	.+12     	; 0x13940 <dtoa_prf+0x2c8>
   13934:	96 33       	cpi	r25, 0x36	; 54
   13936:	88 f4       	brcc	.+34     	; 0x1395a <dtoa_prf+0x2e2>
   13938:	95 33       	cpi	r25, 0x35	; 53
   1393a:	11 f4       	brne	.+4      	; 0x13940 <dtoa_prf+0x2c8>
   1393c:	55 23       	and	r21, r21
   1393e:	69 f0       	breq	.+26     	; 0x1395a <dtoa_prf+0x2e2>
   13940:	f6 01       	movw	r30, r12
   13942:	80 83       	st	Z, r24
   13944:	fd 01       	movw	r30, r26
   13946:	84 2f       	mov	r24, r20
   13948:	90 e2       	ldi	r25, 0x20	; 32
   1394a:	81 11       	cpse	r24, r1
   1394c:	08 c0       	rjmp	.+16     	; 0x1395e <dtoa_prf+0x2e6>
   1394e:	a4 0f       	add	r26, r20
   13950:	b1 1d       	adc	r27, r1
   13952:	1c 92       	st	X, r1
   13954:	90 e0       	ldi	r25, 0x00	; 0
   13956:	80 e0       	ldi	r24, 0x00	; 0
   13958:	f3 ce       	rjmp	.-538    	; 0x13740 <dtoa_prf+0xc8>
   1395a:	81 e3       	ldi	r24, 0x31	; 49
   1395c:	f1 cf       	rjmp	.-30     	; 0x13940 <dtoa_prf+0x2c8>
   1395e:	91 93       	st	Z+, r25
   13960:	81 50       	subi	r24, 0x01	; 1
   13962:	f3 cf       	rjmp	.-26     	; 0x1394a <dtoa_prf+0x2d2>
   13964:	91 11       	cpse	r25, r1
   13966:	83 cf       	rjmp	.-250    	; 0x1386e <dtoa_prf+0x1f6>
   13968:	8a cf       	rjmp	.-236    	; 0x1387e <dtoa_prf+0x206>

0001396a <malloc>:
malloc():
   1396a:	0f 93       	push	r16
   1396c:	1f 93       	push	r17
   1396e:	cf 93       	push	r28
   13970:	df 93       	push	r29
   13972:	82 30       	cpi	r24, 0x02	; 2
   13974:	91 05       	cpc	r25, r1
   13976:	10 f4       	brcc	.+4      	; 0x1397c <malloc+0x12>
   13978:	82 e0       	ldi	r24, 0x02	; 2
   1397a:	90 e0       	ldi	r25, 0x00	; 0
   1397c:	e0 91 4f 13 	lds	r30, 0x134F	; 0x80134f <__flp>
   13980:	f0 91 50 13 	lds	r31, 0x1350	; 0x801350 <__flp+0x1>
   13984:	30 e0       	ldi	r19, 0x00	; 0
   13986:	20 e0       	ldi	r18, 0x00	; 0
   13988:	b0 e0       	ldi	r27, 0x00	; 0
   1398a:	a0 e0       	ldi	r26, 0x00	; 0
   1398c:	30 97       	sbiw	r30, 0x00	; 0
   1398e:	99 f4       	brne	.+38     	; 0x139b6 <malloc+0x4c>
   13990:	21 15       	cp	r18, r1
   13992:	31 05       	cpc	r19, r1
   13994:	09 f4       	brne	.+2      	; 0x13998 <malloc+0x2e>
   13996:	4a c0       	rjmp	.+148    	; 0x13a2c <malloc+0xc2>
   13998:	28 1b       	sub	r18, r24
   1399a:	39 0b       	sbc	r19, r25
   1399c:	24 30       	cpi	r18, 0x04	; 4
   1399e:	31 05       	cpc	r19, r1
   139a0:	d8 f5       	brcc	.+118    	; 0x13a18 <malloc+0xae>
   139a2:	8a 81       	ldd	r24, Y+2	; 0x02
   139a4:	9b 81       	ldd	r25, Y+3	; 0x03
   139a6:	61 15       	cp	r22, r1
   139a8:	71 05       	cpc	r23, r1
   139aa:	89 f1       	breq	.+98     	; 0x13a0e <malloc+0xa4>
   139ac:	fb 01       	movw	r30, r22
   139ae:	93 83       	std	Z+3, r25	; 0x03
   139b0:	82 83       	std	Z+2, r24	; 0x02
   139b2:	fe 01       	movw	r30, r28
   139b4:	11 c0       	rjmp	.+34     	; 0x139d8 <malloc+0x6e>
   139b6:	40 81       	ld	r20, Z
   139b8:	51 81       	ldd	r21, Z+1	; 0x01
   139ba:	02 81       	ldd	r16, Z+2	; 0x02
   139bc:	13 81       	ldd	r17, Z+3	; 0x03
   139be:	48 17       	cp	r20, r24
   139c0:	59 07       	cpc	r21, r25
   139c2:	e0 f0       	brcs	.+56     	; 0x139fc <malloc+0x92>
   139c4:	48 17       	cp	r20, r24
   139c6:	59 07       	cpc	r21, r25
   139c8:	99 f4       	brne	.+38     	; 0x139f0 <malloc+0x86>
   139ca:	10 97       	sbiw	r26, 0x00	; 0
   139cc:	61 f0       	breq	.+24     	; 0x139e6 <malloc+0x7c>
   139ce:	12 96       	adiw	r26, 0x02	; 2
   139d0:	0c 93       	st	X, r16
   139d2:	12 97       	sbiw	r26, 0x02	; 2
   139d4:	13 96       	adiw	r26, 0x03	; 3
   139d6:	1c 93       	st	X, r17
   139d8:	32 96       	adiw	r30, 0x02	; 2
   139da:	cf 01       	movw	r24, r30
   139dc:	df 91       	pop	r29
   139de:	cf 91       	pop	r28
   139e0:	1f 91       	pop	r17
   139e2:	0f 91       	pop	r16
   139e4:	08 95       	ret
   139e6:	00 93 4f 13 	sts	0x134F, r16	; 0x80134f <__flp>
   139ea:	10 93 50 13 	sts	0x1350, r17	; 0x801350 <__flp+0x1>
   139ee:	f4 cf       	rjmp	.-24     	; 0x139d8 <malloc+0x6e>
   139f0:	21 15       	cp	r18, r1
   139f2:	31 05       	cpc	r19, r1
   139f4:	51 f0       	breq	.+20     	; 0x13a0a <malloc+0xa0>
   139f6:	42 17       	cp	r20, r18
   139f8:	53 07       	cpc	r21, r19
   139fa:	38 f0       	brcs	.+14     	; 0x13a0a <malloc+0xa0>
   139fc:	a9 01       	movw	r20, r18
   139fe:	db 01       	movw	r26, r22
   13a00:	9a 01       	movw	r18, r20
   13a02:	bd 01       	movw	r22, r26
   13a04:	df 01       	movw	r26, r30
   13a06:	f8 01       	movw	r30, r16
   13a08:	c1 cf       	rjmp	.-126    	; 0x1398c <malloc+0x22>
   13a0a:	ef 01       	movw	r28, r30
   13a0c:	f9 cf       	rjmp	.-14     	; 0x13a00 <malloc+0x96>
   13a0e:	90 93 50 13 	sts	0x1350, r25	; 0x801350 <__flp+0x1>
   13a12:	80 93 4f 13 	sts	0x134F, r24	; 0x80134f <__flp>
   13a16:	cd cf       	rjmp	.-102    	; 0x139b2 <malloc+0x48>
   13a18:	fe 01       	movw	r30, r28
   13a1a:	e2 0f       	add	r30, r18
   13a1c:	f3 1f       	adc	r31, r19
   13a1e:	81 93       	st	Z+, r24
   13a20:	91 93       	st	Z+, r25
   13a22:	22 50       	subi	r18, 0x02	; 2
   13a24:	31 09       	sbc	r19, r1
   13a26:	39 83       	std	Y+1, r19	; 0x01
   13a28:	28 83       	st	Y, r18
   13a2a:	d7 cf       	rjmp	.-82     	; 0x139da <malloc+0x70>
   13a2c:	20 91 4d 13 	lds	r18, 0x134D	; 0x80134d <__brkval>
   13a30:	30 91 4e 13 	lds	r19, 0x134E	; 0x80134e <__brkval+0x1>
   13a34:	23 2b       	or	r18, r19
   13a36:	41 f4       	brne	.+16     	; 0x13a48 <malloc+0xde>
   13a38:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   13a3c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   13a40:	30 93 4e 13 	sts	0x134E, r19	; 0x80134e <__brkval+0x1>
   13a44:	20 93 4d 13 	sts	0x134D, r18	; 0x80134d <__brkval>
   13a48:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   13a4c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   13a50:	21 15       	cp	r18, r1
   13a52:	31 05       	cpc	r19, r1
   13a54:	41 f4       	brne	.+16     	; 0x13a66 <malloc+0xfc>
   13a56:	2d b7       	in	r18, 0x3d	; 61
   13a58:	3e b7       	in	r19, 0x3e	; 62
   13a5a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   13a5e:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   13a62:	24 1b       	sub	r18, r20
   13a64:	35 0b       	sbc	r19, r21
   13a66:	e0 91 4d 13 	lds	r30, 0x134D	; 0x80134d <__brkval>
   13a6a:	f0 91 4e 13 	lds	r31, 0x134E	; 0x80134e <__brkval+0x1>
   13a6e:	e2 17       	cp	r30, r18
   13a70:	f3 07       	cpc	r31, r19
   13a72:	a0 f4       	brcc	.+40     	; 0x13a9c <malloc+0x132>
   13a74:	2e 1b       	sub	r18, r30
   13a76:	3f 0b       	sbc	r19, r31
   13a78:	28 17       	cp	r18, r24
   13a7a:	39 07       	cpc	r19, r25
   13a7c:	78 f0       	brcs	.+30     	; 0x13a9c <malloc+0x132>
   13a7e:	ac 01       	movw	r20, r24
   13a80:	4e 5f       	subi	r20, 0xFE	; 254
   13a82:	5f 4f       	sbci	r21, 0xFF	; 255
   13a84:	24 17       	cp	r18, r20
   13a86:	35 07       	cpc	r19, r21
   13a88:	48 f0       	brcs	.+18     	; 0x13a9c <malloc+0x132>
   13a8a:	4e 0f       	add	r20, r30
   13a8c:	5f 1f       	adc	r21, r31
   13a8e:	50 93 4e 13 	sts	0x134E, r21	; 0x80134e <__brkval+0x1>
   13a92:	40 93 4d 13 	sts	0x134D, r20	; 0x80134d <__brkval>
   13a96:	81 93       	st	Z+, r24
   13a98:	91 93       	st	Z+, r25
   13a9a:	9f cf       	rjmp	.-194    	; 0x139da <malloc+0x70>
   13a9c:	f0 e0       	ldi	r31, 0x00	; 0
   13a9e:	e0 e0       	ldi	r30, 0x00	; 0
   13aa0:	9c cf       	rjmp	.-200    	; 0x139da <malloc+0x70>

00013aa2 <free>:
free():
   13aa2:	cf 93       	push	r28
   13aa4:	df 93       	push	r29
   13aa6:	00 97       	sbiw	r24, 0x00	; 0
   13aa8:	e9 f0       	breq	.+58     	; 0x13ae4 <free+0x42>
   13aaa:	fc 01       	movw	r30, r24
   13aac:	32 97       	sbiw	r30, 0x02	; 2
   13aae:	13 82       	std	Z+3, r1	; 0x03
   13ab0:	12 82       	std	Z+2, r1	; 0x02
   13ab2:	a0 91 4f 13 	lds	r26, 0x134F	; 0x80134f <__flp>
   13ab6:	b0 91 50 13 	lds	r27, 0x1350	; 0x801350 <__flp+0x1>
   13aba:	ed 01       	movw	r28, r26
   13abc:	30 e0       	ldi	r19, 0x00	; 0
   13abe:	20 e0       	ldi	r18, 0x00	; 0
   13ac0:	10 97       	sbiw	r26, 0x00	; 0
   13ac2:	a1 f4       	brne	.+40     	; 0x13aec <free+0x4a>
   13ac4:	20 81       	ld	r18, Z
   13ac6:	31 81       	ldd	r19, Z+1	; 0x01
   13ac8:	82 0f       	add	r24, r18
   13aca:	93 1f       	adc	r25, r19
   13acc:	20 91 4d 13 	lds	r18, 0x134D	; 0x80134d <__brkval>
   13ad0:	30 91 4e 13 	lds	r19, 0x134E	; 0x80134e <__brkval+0x1>
   13ad4:	28 17       	cp	r18, r24
   13ad6:	39 07       	cpc	r19, r25
   13ad8:	09 f0       	breq	.+2      	; 0x13adc <free+0x3a>
   13ada:	61 c0       	rjmp	.+194    	; 0x13b9e <free+0xfc>
   13adc:	f0 93 4e 13 	sts	0x134E, r31	; 0x80134e <__brkval+0x1>
   13ae0:	e0 93 4d 13 	sts	0x134D, r30	; 0x80134d <__brkval>
   13ae4:	df 91       	pop	r29
   13ae6:	cf 91       	pop	r28
   13ae8:	08 95       	ret
   13aea:	ea 01       	movw	r28, r20
   13aec:	ce 17       	cp	r28, r30
   13aee:	df 07       	cpc	r29, r31
   13af0:	e8 f5       	brcc	.+122    	; 0x13b6c <free+0xca>
   13af2:	4a 81       	ldd	r20, Y+2	; 0x02
   13af4:	5b 81       	ldd	r21, Y+3	; 0x03
   13af6:	9e 01       	movw	r18, r28
   13af8:	41 15       	cp	r20, r1
   13afa:	51 05       	cpc	r21, r1
   13afc:	b1 f7       	brne	.-20     	; 0x13aea <free+0x48>
   13afe:	e9 01       	movw	r28, r18
   13b00:	fb 83       	std	Y+3, r31	; 0x03
   13b02:	ea 83       	std	Y+2, r30	; 0x02
   13b04:	49 91       	ld	r20, Y+
   13b06:	59 91       	ld	r21, Y+
   13b08:	c4 0f       	add	r28, r20
   13b0a:	d5 1f       	adc	r29, r21
   13b0c:	ec 17       	cp	r30, r28
   13b0e:	fd 07       	cpc	r31, r29
   13b10:	61 f4       	brne	.+24     	; 0x13b2a <free+0x88>
   13b12:	80 81       	ld	r24, Z
   13b14:	91 81       	ldd	r25, Z+1	; 0x01
   13b16:	02 96       	adiw	r24, 0x02	; 2
   13b18:	84 0f       	add	r24, r20
   13b1a:	95 1f       	adc	r25, r21
   13b1c:	e9 01       	movw	r28, r18
   13b1e:	99 83       	std	Y+1, r25	; 0x01
   13b20:	88 83       	st	Y, r24
   13b22:	82 81       	ldd	r24, Z+2	; 0x02
   13b24:	93 81       	ldd	r25, Z+3	; 0x03
   13b26:	9b 83       	std	Y+3, r25	; 0x03
   13b28:	8a 83       	std	Y+2, r24	; 0x02
   13b2a:	f0 e0       	ldi	r31, 0x00	; 0
   13b2c:	e0 e0       	ldi	r30, 0x00	; 0
   13b2e:	12 96       	adiw	r26, 0x02	; 2
   13b30:	8d 91       	ld	r24, X+
   13b32:	9c 91       	ld	r25, X
   13b34:	13 97       	sbiw	r26, 0x03	; 3
   13b36:	00 97       	sbiw	r24, 0x00	; 0
   13b38:	b9 f5       	brne	.+110    	; 0x13ba8 <free+0x106>
   13b3a:	2d 91       	ld	r18, X+
   13b3c:	3c 91       	ld	r19, X
   13b3e:	11 97       	sbiw	r26, 0x01	; 1
   13b40:	cd 01       	movw	r24, r26
   13b42:	02 96       	adiw	r24, 0x02	; 2
   13b44:	82 0f       	add	r24, r18
   13b46:	93 1f       	adc	r25, r19
   13b48:	20 91 4d 13 	lds	r18, 0x134D	; 0x80134d <__brkval>
   13b4c:	30 91 4e 13 	lds	r19, 0x134E	; 0x80134e <__brkval+0x1>
   13b50:	28 17       	cp	r18, r24
   13b52:	39 07       	cpc	r19, r25
   13b54:	39 f6       	brne	.-114    	; 0x13ae4 <free+0x42>
   13b56:	30 97       	sbiw	r30, 0x00	; 0
   13b58:	51 f5       	brne	.+84     	; 0x13bae <free+0x10c>
   13b5a:	10 92 50 13 	sts	0x1350, r1	; 0x801350 <__flp+0x1>
   13b5e:	10 92 4f 13 	sts	0x134F, r1	; 0x80134f <__flp>
   13b62:	b0 93 4e 13 	sts	0x134E, r27	; 0x80134e <__brkval+0x1>
   13b66:	a0 93 4d 13 	sts	0x134D, r26	; 0x80134d <__brkval>
   13b6a:	bc cf       	rjmp	.-136    	; 0x13ae4 <free+0x42>
   13b6c:	d3 83       	std	Z+3, r29	; 0x03
   13b6e:	c2 83       	std	Z+2, r28	; 0x02
   13b70:	40 81       	ld	r20, Z
   13b72:	51 81       	ldd	r21, Z+1	; 0x01
   13b74:	84 0f       	add	r24, r20
   13b76:	95 1f       	adc	r25, r21
   13b78:	c8 17       	cp	r28, r24
   13b7a:	d9 07       	cpc	r29, r25
   13b7c:	61 f4       	brne	.+24     	; 0x13b96 <free+0xf4>
   13b7e:	4e 5f       	subi	r20, 0xFE	; 254
   13b80:	5f 4f       	sbci	r21, 0xFF	; 255
   13b82:	88 81       	ld	r24, Y
   13b84:	99 81       	ldd	r25, Y+1	; 0x01
   13b86:	48 0f       	add	r20, r24
   13b88:	59 1f       	adc	r21, r25
   13b8a:	51 83       	std	Z+1, r21	; 0x01
   13b8c:	40 83       	st	Z, r20
   13b8e:	8a 81       	ldd	r24, Y+2	; 0x02
   13b90:	9b 81       	ldd	r25, Y+3	; 0x03
   13b92:	93 83       	std	Z+3, r25	; 0x03
   13b94:	82 83       	std	Z+2, r24	; 0x02
   13b96:	21 15       	cp	r18, r1
   13b98:	31 05       	cpc	r19, r1
   13b9a:	09 f0       	breq	.+2      	; 0x13b9e <free+0xfc>
   13b9c:	b0 cf       	rjmp	.-160    	; 0x13afe <free+0x5c>
   13b9e:	f0 93 50 13 	sts	0x1350, r31	; 0x801350 <__flp+0x1>
   13ba2:	e0 93 4f 13 	sts	0x134F, r30	; 0x80134f <__flp>
   13ba6:	9e cf       	rjmp	.-196    	; 0x13ae4 <free+0x42>
   13ba8:	fd 01       	movw	r30, r26
   13baa:	dc 01       	movw	r26, r24
   13bac:	c0 cf       	rjmp	.-128    	; 0x13b2e <free+0x8c>
   13bae:	13 82       	std	Z+3, r1	; 0x03
   13bb0:	12 82       	std	Z+2, r1	; 0x02
   13bb2:	d7 cf       	rjmp	.-82     	; 0x13b62 <free+0xc0>

00013bb4 <strtod>:
strtod():
   13bb4:	8f 92       	push	r8
   13bb6:	9f 92       	push	r9
   13bb8:	af 92       	push	r10
   13bba:	bf 92       	push	r11
   13bbc:	cf 92       	push	r12
   13bbe:	df 92       	push	r13
   13bc0:	ef 92       	push	r14
   13bc2:	ff 92       	push	r15
   13bc4:	0f 93       	push	r16
   13bc6:	1f 93       	push	r17
   13bc8:	cf 93       	push	r28
   13bca:	df 93       	push	r29
   13bcc:	5c 01       	movw	r10, r24
   13bce:	7b 01       	movw	r14, r22
   13bd0:	61 15       	cp	r22, r1
   13bd2:	71 05       	cpc	r23, r1
   13bd4:	19 f0       	breq	.+6      	; 0x13bdc <strtod+0x28>
   13bd6:	db 01       	movw	r26, r22
   13bd8:	8d 93       	st	X+, r24
   13bda:	9c 93       	st	X, r25
   13bdc:	85 01       	movw	r16, r10
   13bde:	0f 5f       	subi	r16, 0xFF	; 255
   13be0:	1f 4f       	sbci	r17, 0xFF	; 255
   13be2:	f5 01       	movw	r30, r10
   13be4:	d0 81       	ld	r29, Z
   13be6:	8d 2f       	mov	r24, r29
   13be8:	90 e0       	ldi	r25, 0x00	; 0
   13bea:	0e 94 55 98 	call	0x130aa	; 0x130aa <isspace>
   13bee:	6c 01       	movw	r12, r24
   13bf0:	89 2b       	or	r24, r25
   13bf2:	b9 f5       	brne	.+110    	; 0x13c62 <strtod+0xae>
   13bf4:	dd 32       	cpi	r29, 0x2D	; 45
   13bf6:	b9 f5       	brne	.+110    	; 0x13c66 <strtod+0xb2>
   13bf8:	0f 5f       	subi	r16, 0xFF	; 255
   13bfa:	1f 4f       	sbci	r17, 0xFF	; 255
   13bfc:	d5 01       	movw	r26, r10
   13bfe:	11 96       	adiw	r26, 0x01	; 1
   13c00:	dc 91       	ld	r29, X
   13c02:	c1 e0       	ldi	r28, 0x01	; 1
   13c04:	58 01       	movw	r10, r16
   13c06:	f1 e0       	ldi	r31, 0x01	; 1
   13c08:	af 1a       	sub	r10, r31
   13c0a:	b1 08       	sbc	r11, r1
   13c0c:	43 e0       	ldi	r20, 0x03	; 3
   13c0e:	50 e0       	ldi	r21, 0x00	; 0
   13c10:	68 ee       	ldi	r22, 0xE8	; 232
   13c12:	72 e0       	ldi	r23, 0x02	; 2
   13c14:	c5 01       	movw	r24, r10
   13c16:	0e 94 13 a0 	call	0x14026	; 0x14026 <strncasecmp_P>
   13c1a:	89 2b       	or	r24, r25
   13c1c:	69 f5       	brne	.+90     	; 0x13c78 <strtod+0xc4>
   13c1e:	68 01       	movw	r12, r16
   13c20:	82 e0       	ldi	r24, 0x02	; 2
   13c22:	c8 0e       	add	r12, r24
   13c24:	d1 1c       	adc	r13, r1
   13c26:	45 e0       	ldi	r20, 0x05	; 5
   13c28:	50 e0       	ldi	r21, 0x00	; 0
   13c2a:	63 ee       	ldi	r22, 0xE3	; 227
   13c2c:	72 e0       	ldi	r23, 0x02	; 2
   13c2e:	c6 01       	movw	r24, r12
   13c30:	0e 94 13 a0 	call	0x14026	; 0x14026 <strncasecmp_P>
   13c34:	89 2b       	or	r24, r25
   13c36:	21 f4       	brne	.+8      	; 0x13c40 <strtod+0x8c>
   13c38:	68 01       	movw	r12, r16
   13c3a:	97 e0       	ldi	r25, 0x07	; 7
   13c3c:	c9 0e       	add	r12, r25
   13c3e:	d1 1c       	adc	r13, r1
   13c40:	e1 14       	cp	r14, r1
   13c42:	f1 04       	cpc	r15, r1
   13c44:	19 f0       	breq	.+6      	; 0x13c4c <strtod+0x98>
   13c46:	d7 01       	movw	r26, r14
   13c48:	cd 92       	st	X+, r12
   13c4a:	dc 92       	st	X, r13
   13c4c:	60 e0       	ldi	r22, 0x00	; 0
   13c4e:	70 e0       	ldi	r23, 0x00	; 0
   13c50:	80 e8       	ldi	r24, 0x80	; 128
   13c52:	9f ef       	ldi	r25, 0xFF	; 255
   13c54:	c1 11       	cpse	r28, r1
   13c56:	ff c0       	rjmp	.+510    	; 0x13e56 <strtod+0x2a2>
   13c58:	60 e0       	ldi	r22, 0x00	; 0
   13c5a:	70 e0       	ldi	r23, 0x00	; 0
   13c5c:	80 e8       	ldi	r24, 0x80	; 128
   13c5e:	9f e7       	ldi	r25, 0x7F	; 127
   13c60:	fa c0       	rjmp	.+500    	; 0x13e56 <strtod+0x2a2>
   13c62:	58 01       	movw	r10, r16
   13c64:	bb cf       	rjmp	.-138    	; 0x13bdc <strtod+0x28>
   13c66:	db 32       	cpi	r29, 0x2B	; 43
   13c68:	29 f4       	brne	.+10     	; 0x13c74 <strtod+0xc0>
   13c6a:	85 01       	movw	r16, r10
   13c6c:	0e 5f       	subi	r16, 0xFE	; 254
   13c6e:	1f 4f       	sbci	r17, 0xFF	; 255
   13c70:	f5 01       	movw	r30, r10
   13c72:	d1 81       	ldd	r29, Z+1	; 0x01
   13c74:	c0 e0       	ldi	r28, 0x00	; 0
   13c76:	c6 cf       	rjmp	.-116    	; 0x13c04 <strtod+0x50>
   13c78:	43 e0       	ldi	r20, 0x03	; 3
   13c7a:	50 e0       	ldi	r21, 0x00	; 0
   13c7c:	60 ee       	ldi	r22, 0xE0	; 224
   13c7e:	72 e0       	ldi	r23, 0x02	; 2
   13c80:	c5 01       	movw	r24, r10
   13c82:	0e 94 13 a0 	call	0x14026	; 0x14026 <strncasecmp_P>
   13c86:	89 2b       	or	r24, r25
   13c88:	e9 f0       	breq	.+58     	; 0x13cc4 <strtod+0x110>
   13c8a:	f8 01       	movw	r30, r16
   13c8c:	10 e0       	ldi	r17, 0x00	; 0
   13c8e:	00 e0       	ldi	r16, 0x00	; 0
   13c90:	20 e0       	ldi	r18, 0x00	; 0
   13c92:	30 e0       	ldi	r19, 0x00	; 0
   13c94:	a9 01       	movw	r20, r18
   13c96:	5f 01       	movw	r10, r30
   13c98:	b0 ed       	ldi	r27, 0xD0	; 208
   13c9a:	8b 2e       	mov	r8, r27
   13c9c:	8d 0e       	add	r8, r29
   13c9e:	89 e0       	ldi	r24, 0x09	; 9
   13ca0:	88 15       	cp	r24, r8
   13ca2:	c8 f1       	brcs	.+114    	; 0x13d16 <strtod+0x162>
   13ca4:	9c 2e       	mov	r9, r28
   13ca6:	68 94       	set
   13ca8:	91 f8       	bld	r9, 1
   13caa:	8c 2f       	mov	r24, r28
   13cac:	88 70       	andi	r24, 0x08	; 8
   13cae:	c2 ff       	sbrs	r28, 2
   13cb0:	16 c0       	rjmp	.+44     	; 0x13cde <strtod+0x12a>
   13cb2:	81 11       	cpse	r24, r1
   13cb4:	02 c0       	rjmp	.+4      	; 0x13cba <strtod+0x106>
   13cb6:	0f 5f       	subi	r16, 0xFF	; 255
   13cb8:	1f 4f       	sbci	r17, 0xFF	; 255
   13cba:	31 96       	adiw	r30, 0x01	; 1
   13cbc:	d5 01       	movw	r26, r10
   13cbe:	dc 91       	ld	r29, X
   13cc0:	c9 2d       	mov	r28, r9
   13cc2:	e9 cf       	rjmp	.-46     	; 0x13c96 <strtod+0xe2>
   13cc4:	e1 14       	cp	r14, r1
   13cc6:	f1 04       	cpc	r15, r1
   13cc8:	29 f0       	breq	.+10     	; 0x13cd4 <strtod+0x120>
   13cca:	0e 5f       	subi	r16, 0xFE	; 254
   13ccc:	1f 4f       	sbci	r17, 0xFF	; 255
   13cce:	f7 01       	movw	r30, r14
   13cd0:	11 83       	std	Z+1, r17	; 0x01
   13cd2:	00 83       	st	Z, r16
   13cd4:	60 e0       	ldi	r22, 0x00	; 0
   13cd6:	70 e0       	ldi	r23, 0x00	; 0
   13cd8:	80 ec       	ldi	r24, 0xC0	; 192
   13cda:	9f e7       	ldi	r25, 0x7F	; 127
   13cdc:	bc c0       	rjmp	.+376    	; 0x13e56 <strtod+0x2a2>
   13cde:	88 23       	and	r24, r24
   13ce0:	11 f0       	breq	.+4      	; 0x13ce6 <strtod+0x132>
   13ce2:	01 50       	subi	r16, 0x01	; 1
   13ce4:	11 09       	sbc	r17, r1
   13ce6:	a5 e0       	ldi	r26, 0x05	; 5
   13ce8:	b0 e0       	ldi	r27, 0x00	; 0
   13cea:	0e 94 99 a2 	call	0x14532	; 0x14532 <__muluhisi3>
   13cee:	9b 01       	movw	r18, r22
   13cf0:	ac 01       	movw	r20, r24
   13cf2:	22 0f       	add	r18, r18
   13cf4:	33 1f       	adc	r19, r19
   13cf6:	44 1f       	adc	r20, r20
   13cf8:	55 1f       	adc	r21, r21
   13cfa:	28 0d       	add	r18, r8
   13cfc:	31 1d       	adc	r19, r1
   13cfe:	41 1d       	adc	r20, r1
   13d00:	51 1d       	adc	r21, r1
   13d02:	28 39       	cpi	r18, 0x98	; 152
   13d04:	99 e9       	ldi	r25, 0x99	; 153
   13d06:	39 07       	cpc	r19, r25
   13d08:	49 07       	cpc	r20, r25
   13d0a:	99 e1       	ldi	r25, 0x19	; 25
   13d0c:	59 07       	cpc	r21, r25
   13d0e:	a8 f2       	brcs	.-86     	; 0x13cba <strtod+0x106>
   13d10:	c6 60       	ori	r28, 0x06	; 6
   13d12:	9c 2e       	mov	r9, r28
   13d14:	d2 cf       	rjmp	.-92     	; 0x13cba <strtod+0x106>
   13d16:	ae ef       	ldi	r26, 0xFE	; 254
   13d18:	8a 12       	cpse	r8, r26
   13d1a:	06 c0       	rjmp	.+12     	; 0x13d28 <strtod+0x174>
   13d1c:	c3 fd       	sbrc	r28, 3
   13d1e:	3c c0       	rjmp	.+120    	; 0x13d98 <strtod+0x1e4>
   13d20:	9c 2e       	mov	r9, r28
   13d22:	68 94       	set
   13d24:	93 f8       	bld	r9, 3
   13d26:	c9 cf       	rjmp	.-110    	; 0x13cba <strtod+0x106>
   13d28:	df 7d       	andi	r29, 0xDF	; 223
   13d2a:	d5 34       	cpi	r29, 0x45	; 69
   13d2c:	a9 f5       	brne	.+106    	; 0x13d98 <strtod+0x1e4>
   13d2e:	80 81       	ld	r24, Z
   13d30:	8d 32       	cpi	r24, 0x2D	; 45
   13d32:	39 f4       	brne	.+14     	; 0x13d42 <strtod+0x18e>
   13d34:	c0 61       	ori	r28, 0x10	; 16
   13d36:	df 01       	movw	r26, r30
   13d38:	12 96       	adiw	r26, 0x02	; 2
   13d3a:	81 81       	ldd	r24, Z+1	; 0x01
   13d3c:	62 e0       	ldi	r22, 0x02	; 2
   13d3e:	70 e0       	ldi	r23, 0x00	; 0
   13d40:	06 c0       	rjmp	.+12     	; 0x13d4e <strtod+0x19a>
   13d42:	df 01       	movw	r26, r30
   13d44:	8b 32       	cpi	r24, 0x2B	; 43
   13d46:	c1 f3       	breq	.-16     	; 0x13d38 <strtod+0x184>
   13d48:	11 96       	adiw	r26, 0x01	; 1
   13d4a:	61 e0       	ldi	r22, 0x01	; 1
   13d4c:	70 e0       	ldi	r23, 0x00	; 0
   13d4e:	80 53       	subi	r24, 0x30	; 48
   13d50:	5d 01       	movw	r10, r26
   13d52:	a6 1a       	sub	r10, r22
   13d54:	b7 0a       	sbc	r11, r23
   13d56:	8a 30       	cpi	r24, 0x0A	; 10
   13d58:	f8 f4       	brcc	.+62     	; 0x13d98 <strtod+0x1e4>
   13d5a:	e0 e8       	ldi	r30, 0x80	; 128
   13d5c:	ce 16       	cp	r12, r30
   13d5e:	ec e0       	ldi	r30, 0x0C	; 12
   13d60:	de 06       	cpc	r13, r30
   13d62:	5c f4       	brge	.+22     	; 0x13d7a <strtod+0x1c6>
   13d64:	b6 01       	movw	r22, r12
   13d66:	66 0f       	add	r22, r22
   13d68:	77 1f       	adc	r23, r23
   13d6a:	66 0f       	add	r22, r22
   13d6c:	77 1f       	adc	r23, r23
   13d6e:	c6 0e       	add	r12, r22
   13d70:	d7 1e       	adc	r13, r23
   13d72:	cc 0c       	add	r12, r12
   13d74:	dd 1c       	adc	r13, r13
   13d76:	c8 0e       	add	r12, r24
   13d78:	d1 1c       	adc	r13, r1
   13d7a:	5d 01       	movw	r10, r26
   13d7c:	ff ef       	ldi	r31, 0xFF	; 255
   13d7e:	af 1a       	sub	r10, r31
   13d80:	bf 0a       	sbc	r11, r31
   13d82:	8c 91       	ld	r24, X
   13d84:	80 53       	subi	r24, 0x30	; 48
   13d86:	8a 30       	cpi	r24, 0x0A	; 10
   13d88:	a8 f1       	brcs	.+106    	; 0x13df4 <strtod+0x240>
   13d8a:	c4 ff       	sbrs	r28, 4
   13d8c:	03 c0       	rjmp	.+6      	; 0x13d94 <strtod+0x1e0>
   13d8e:	d1 94       	neg	r13
   13d90:	c1 94       	neg	r12
   13d92:	d1 08       	sbc	r13, r1
   13d94:	0c 0d       	add	r16, r12
   13d96:	1d 1d       	adc	r17, r13
   13d98:	c1 ff       	sbrs	r28, 1
   13d9a:	09 c0       	rjmp	.+18     	; 0x13dae <strtod+0x1fa>
   13d9c:	e1 14       	cp	r14, r1
   13d9e:	f1 04       	cpc	r15, r1
   13da0:	31 f0       	breq	.+12     	; 0x13dae <strtod+0x1fa>
   13da2:	81 e0       	ldi	r24, 0x01	; 1
   13da4:	a8 1a       	sub	r10, r24
   13da6:	b1 08       	sbc	r11, r1
   13da8:	d7 01       	movw	r26, r14
   13daa:	ad 92       	st	X+, r10
   13dac:	bc 92       	st	X, r11
   13dae:	ca 01       	movw	r24, r20
   13db0:	b9 01       	movw	r22, r18
   13db2:	0e 94 eb a0 	call	0x141d6	; 0x141d6 <__floatunsisf>
   13db6:	c3 70       	andi	r28, 0x03	; 3
   13db8:	c3 30       	cpi	r28, 0x03	; 3
   13dba:	09 f4       	brne	.+2      	; 0x13dbe <strtod+0x20a>
   13dbc:	90 58       	subi	r25, 0x80	; 128
   13dbe:	4b 01       	movw	r8, r22
   13dc0:	5c 01       	movw	r10, r24
   13dc2:	20 e0       	ldi	r18, 0x00	; 0
   13dc4:	30 e0       	ldi	r19, 0x00	; 0
   13dc6:	a9 01       	movw	r20, r18
   13dc8:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
   13dcc:	88 23       	and	r24, r24
   13dce:	09 f4       	brne	.+2      	; 0x13dd2 <strtod+0x21e>
   13dd0:	40 c0       	rjmp	.+128    	; 0x13e52 <strtod+0x29e>
   13dd2:	c7 e1       	ldi	r28, 0x17	; 23
   13dd4:	d3 e0       	ldi	r29, 0x03	; 3
   13dd6:	17 ff       	sbrs	r17, 7
   13dd8:	05 c0       	rjmp	.+10     	; 0x13de4 <strtod+0x230>
   13dda:	11 95       	neg	r17
   13ddc:	01 95       	neg	r16
   13dde:	11 09       	sbc	r17, r1
   13de0:	cf ef       	ldi	r28, 0xFF	; 255
   13de2:	d2 e0       	ldi	r29, 0x02	; 2
   13de4:	6e 01       	movw	r12, r28
   13de6:	b8 e1       	ldi	r27, 0x18	; 24
   13de8:	cb 1a       	sub	r12, r27
   13dea:	d1 08       	sbc	r13, r1
   13dec:	80 e2       	ldi	r24, 0x20	; 32
   13dee:	e8 2e       	mov	r14, r24
   13df0:	f1 2c       	mov	r15, r1
   13df2:	0f c0       	rjmp	.+30     	; 0x13e12 <strtod+0x25e>
   13df4:	d5 01       	movw	r26, r10
   13df6:	b1 cf       	rjmp	.-158    	; 0x13d5a <strtod+0x1a6>
   13df8:	fe 01       	movw	r30, r28
   13dfa:	25 91       	lpm	r18, Z+
   13dfc:	35 91       	lpm	r19, Z+
   13dfe:	45 91       	lpm	r20, Z+
   13e00:	54 91       	lpm	r21, Z
   13e02:	0e 19       	sub	r16, r14
   13e04:	1f 09       	sbc	r17, r15
   13e06:	c5 01       	movw	r24, r10
   13e08:	b4 01       	movw	r22, r8
   13e0a:	0e 94 4c a1 	call	0x14298	; 0x14298 <__mulsf3>
   13e0e:	4b 01       	movw	r8, r22
   13e10:	5c 01       	movw	r10, r24
   13e12:	d5 01       	movw	r26, r10
   13e14:	c4 01       	movw	r24, r8
   13e16:	0e 15       	cp	r16, r14
   13e18:	1f 05       	cpc	r17, r15
   13e1a:	74 f7       	brge	.-36     	; 0x13df8 <strtod+0x244>
   13e1c:	24 97       	sbiw	r28, 0x04	; 4
   13e1e:	f5 94       	asr	r15
   13e20:	e7 94       	ror	r14
   13e22:	cc 16       	cp	r12, r28
   13e24:	dd 06       	cpc	r13, r29
   13e26:	a9 f7       	brne	.-22     	; 0x13e12 <strtod+0x25e>
   13e28:	8a 2f       	mov	r24, r26
   13e2a:	88 0f       	add	r24, r24
   13e2c:	8b 2f       	mov	r24, r27
   13e2e:	88 1f       	adc	r24, r24
   13e30:	8f 3f       	cpi	r24, 0xFF	; 255
   13e32:	49 f0       	breq	.+18     	; 0x13e46 <strtod+0x292>
   13e34:	20 e0       	ldi	r18, 0x00	; 0
   13e36:	30 e0       	ldi	r19, 0x00	; 0
   13e38:	a9 01       	movw	r20, r18
   13e3a:	c5 01       	movw	r24, r10
   13e3c:	b4 01       	movw	r22, r8
   13e3e:	0e 94 e6 a0 	call	0x141cc	; 0x141cc <__cmpsf2>
   13e42:	81 11       	cpse	r24, r1
   13e44:	06 c0       	rjmp	.+12     	; 0x13e52 <strtod+0x29e>
   13e46:	82 e2       	ldi	r24, 0x22	; 34
   13e48:	90 e0       	ldi	r25, 0x00	; 0
   13e4a:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <errno+0x1>
   13e4e:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <errno>
   13e52:	c5 01       	movw	r24, r10
   13e54:	b4 01       	movw	r22, r8
   13e56:	df 91       	pop	r29
   13e58:	cf 91       	pop	r28
   13e5a:	1f 91       	pop	r17
   13e5c:	0f 91       	pop	r16
   13e5e:	ff 90       	pop	r15
   13e60:	ef 90       	pop	r14
   13e62:	df 90       	pop	r13
   13e64:	cf 90       	pop	r12
   13e66:	bf 90       	pop	r11
   13e68:	af 90       	pop	r10
   13e6a:	9f 90       	pop	r9
   13e6c:	8f 90       	pop	r8
   13e6e:	08 95       	ret

00013e70 <__ftoa_engine>:
__ftoa_engine():
   13e70:	28 30       	cpi	r18, 0x08	; 8
   13e72:	08 f0       	brcs	.+2      	; 0x13e76 <__ftoa_engine+0x6>
   13e74:	27 e0       	ldi	r18, 0x07	; 7
   13e76:	33 27       	eor	r19, r19
   13e78:	da 01       	movw	r26, r20
   13e7a:	99 0f       	add	r25, r25
   13e7c:	31 1d       	adc	r19, r1
   13e7e:	87 fd       	sbrc	r24, 7
   13e80:	91 60       	ori	r25, 0x01	; 1
   13e82:	00 96       	adiw	r24, 0x00	; 0
   13e84:	61 05       	cpc	r22, r1
   13e86:	71 05       	cpc	r23, r1
   13e88:	39 f4       	brne	.+14     	; 0x13e98 <__ftoa_engine+0x28>
   13e8a:	32 60       	ori	r19, 0x02	; 2
   13e8c:	2e 5f       	subi	r18, 0xFE	; 254
   13e8e:	3d 93       	st	X+, r19
   13e90:	30 e3       	ldi	r19, 0x30	; 48
   13e92:	2a 95       	dec	r18
   13e94:	e1 f7       	brne	.-8      	; 0x13e8e <__ftoa_engine+0x1e>
   13e96:	08 95       	ret
   13e98:	9f 3f       	cpi	r25, 0xFF	; 255
   13e9a:	30 f0       	brcs	.+12     	; 0x13ea8 <__ftoa_engine+0x38>
   13e9c:	80 38       	cpi	r24, 0x80	; 128
   13e9e:	71 05       	cpc	r23, r1
   13ea0:	61 05       	cpc	r22, r1
   13ea2:	09 f0       	breq	.+2      	; 0x13ea6 <__ftoa_engine+0x36>
   13ea4:	3c 5f       	subi	r19, 0xFC	; 252
   13ea6:	3c 5f       	subi	r19, 0xFC	; 252
   13ea8:	3d 93       	st	X+, r19
   13eaa:	91 30       	cpi	r25, 0x01	; 1
   13eac:	08 f0       	brcs	.+2      	; 0x13eb0 <__ftoa_engine+0x40>
   13eae:	80 68       	ori	r24, 0x80	; 128
   13eb0:	91 1d       	adc	r25, r1
   13eb2:	df 93       	push	r29
   13eb4:	cf 93       	push	r28
   13eb6:	1f 93       	push	r17
   13eb8:	0f 93       	push	r16
   13eba:	ff 92       	push	r15
   13ebc:	ef 92       	push	r14
   13ebe:	19 2f       	mov	r17, r25
   13ec0:	98 7f       	andi	r25, 0xF8	; 248
   13ec2:	96 95       	lsr	r25
   13ec4:	e9 2f       	mov	r30, r25
   13ec6:	96 95       	lsr	r25
   13ec8:	96 95       	lsr	r25
   13eca:	e9 0f       	add	r30, r25
   13ecc:	ff 27       	eor	r31, r31
   13ece:	eb 58       	subi	r30, 0x8B	; 139
   13ed0:	fc 4f       	sbci	r31, 0xFC	; 252
   13ed2:	99 27       	eor	r25, r25
   13ed4:	33 27       	eor	r19, r19
   13ed6:	ee 24       	eor	r14, r14
   13ed8:	ff 24       	eor	r15, r15
   13eda:	a7 01       	movw	r20, r14
   13edc:	e7 01       	movw	r28, r14
   13ede:	05 90       	lpm	r0, Z+
   13ee0:	08 94       	sec
   13ee2:	07 94       	ror	r0
   13ee4:	28 f4       	brcc	.+10     	; 0x13ef0 <__ftoa_engine+0x80>
   13ee6:	36 0f       	add	r19, r22
   13ee8:	e7 1e       	adc	r14, r23
   13eea:	f8 1e       	adc	r15, r24
   13eec:	49 1f       	adc	r20, r25
   13eee:	51 1d       	adc	r21, r1
   13ef0:	66 0f       	add	r22, r22
   13ef2:	77 1f       	adc	r23, r23
   13ef4:	88 1f       	adc	r24, r24
   13ef6:	99 1f       	adc	r25, r25
   13ef8:	06 94       	lsr	r0
   13efa:	a1 f7       	brne	.-24     	; 0x13ee4 <__ftoa_engine+0x74>
   13efc:	05 90       	lpm	r0, Z+
   13efe:	07 94       	ror	r0
   13f00:	28 f4       	brcc	.+10     	; 0x13f0c <__ftoa_engine+0x9c>
   13f02:	e7 0e       	add	r14, r23
   13f04:	f8 1e       	adc	r15, r24
   13f06:	49 1f       	adc	r20, r25
   13f08:	56 1f       	adc	r21, r22
   13f0a:	c1 1d       	adc	r28, r1
   13f0c:	77 0f       	add	r23, r23
   13f0e:	88 1f       	adc	r24, r24
   13f10:	99 1f       	adc	r25, r25
   13f12:	66 1f       	adc	r22, r22
   13f14:	06 94       	lsr	r0
   13f16:	a1 f7       	brne	.-24     	; 0x13f00 <__ftoa_engine+0x90>
   13f18:	05 90       	lpm	r0, Z+
   13f1a:	07 94       	ror	r0
   13f1c:	28 f4       	brcc	.+10     	; 0x13f28 <__ftoa_engine+0xb8>
   13f1e:	f8 0e       	add	r15, r24
   13f20:	49 1f       	adc	r20, r25
   13f22:	56 1f       	adc	r21, r22
   13f24:	c7 1f       	adc	r28, r23
   13f26:	d1 1d       	adc	r29, r1
   13f28:	88 0f       	add	r24, r24
   13f2a:	99 1f       	adc	r25, r25
   13f2c:	66 1f       	adc	r22, r22
   13f2e:	77 1f       	adc	r23, r23
   13f30:	06 94       	lsr	r0
   13f32:	a1 f7       	brne	.-24     	; 0x13f1c <__ftoa_engine+0xac>
   13f34:	05 90       	lpm	r0, Z+
   13f36:	07 94       	ror	r0
   13f38:	20 f4       	brcc	.+8      	; 0x13f42 <__ftoa_engine+0xd2>
   13f3a:	49 0f       	add	r20, r25
   13f3c:	56 1f       	adc	r21, r22
   13f3e:	c7 1f       	adc	r28, r23
   13f40:	d8 1f       	adc	r29, r24
   13f42:	99 0f       	add	r25, r25
   13f44:	66 1f       	adc	r22, r22
   13f46:	77 1f       	adc	r23, r23
   13f48:	88 1f       	adc	r24, r24
   13f4a:	06 94       	lsr	r0
   13f4c:	a9 f7       	brne	.-22     	; 0x13f38 <__ftoa_engine+0xc8>
   13f4e:	84 91       	lpm	r24, Z
   13f50:	10 95       	com	r17
   13f52:	17 70       	andi	r17, 0x07	; 7
   13f54:	41 f0       	breq	.+16     	; 0x13f66 <__ftoa_engine+0xf6>
   13f56:	d6 95       	lsr	r29
   13f58:	c7 95       	ror	r28
   13f5a:	57 95       	ror	r21
   13f5c:	47 95       	ror	r20
   13f5e:	f7 94       	ror	r15
   13f60:	e7 94       	ror	r14
   13f62:	1a 95       	dec	r17
   13f64:	c1 f7       	brne	.-16     	; 0x13f56 <__ftoa_engine+0xe6>
   13f66:	eb e1       	ldi	r30, 0x1B	; 27
   13f68:	f3 e0       	ldi	r31, 0x03	; 3
   13f6a:	68 94       	set
   13f6c:	15 90       	lpm	r1, Z+
   13f6e:	15 91       	lpm	r17, Z+
   13f70:	35 91       	lpm	r19, Z+
   13f72:	65 91       	lpm	r22, Z+
   13f74:	95 91       	lpm	r25, Z+
   13f76:	05 90       	lpm	r0, Z+
   13f78:	7f e2       	ldi	r23, 0x2F	; 47
   13f7a:	73 95       	inc	r23
   13f7c:	e1 18       	sub	r14, r1
   13f7e:	f1 0a       	sbc	r15, r17
   13f80:	43 0b       	sbc	r20, r19
   13f82:	56 0b       	sbc	r21, r22
   13f84:	c9 0b       	sbc	r28, r25
   13f86:	d0 09       	sbc	r29, r0
   13f88:	c0 f7       	brcc	.-16     	; 0x13f7a <__ftoa_engine+0x10a>
   13f8a:	e1 0c       	add	r14, r1
   13f8c:	f1 1e       	adc	r15, r17
   13f8e:	43 1f       	adc	r20, r19
   13f90:	56 1f       	adc	r21, r22
   13f92:	c9 1f       	adc	r28, r25
   13f94:	d0 1d       	adc	r29, r0
   13f96:	7e f4       	brtc	.+30     	; 0x13fb6 <__ftoa_engine+0x146>
   13f98:	70 33       	cpi	r23, 0x30	; 48
   13f9a:	11 f4       	brne	.+4      	; 0x13fa0 <__ftoa_engine+0x130>
   13f9c:	8a 95       	dec	r24
   13f9e:	e6 cf       	rjmp	.-52     	; 0x13f6c <__ftoa_engine+0xfc>
   13fa0:	e8 94       	clt
   13fa2:	01 50       	subi	r16, 0x01	; 1
   13fa4:	30 f0       	brcs	.+12     	; 0x13fb2 <__ftoa_engine+0x142>
   13fa6:	08 0f       	add	r16, r24
   13fa8:	0a f4       	brpl	.+2      	; 0x13fac <__ftoa_engine+0x13c>
   13faa:	00 27       	eor	r16, r16
   13fac:	02 17       	cp	r16, r18
   13fae:	08 f4       	brcc	.+2      	; 0x13fb2 <__ftoa_engine+0x142>
   13fb0:	20 2f       	mov	r18, r16
   13fb2:	23 95       	inc	r18
   13fb4:	02 2f       	mov	r16, r18
   13fb6:	7a 33       	cpi	r23, 0x3A	; 58
   13fb8:	28 f0       	brcs	.+10     	; 0x13fc4 <__ftoa_engine+0x154>
   13fba:	79 e3       	ldi	r23, 0x39	; 57
   13fbc:	7d 93       	st	X+, r23
   13fbe:	2a 95       	dec	r18
   13fc0:	e9 f7       	brne	.-6      	; 0x13fbc <__ftoa_engine+0x14c>
   13fc2:	10 c0       	rjmp	.+32     	; 0x13fe4 <__ftoa_engine+0x174>
   13fc4:	7d 93       	st	X+, r23
   13fc6:	2a 95       	dec	r18
   13fc8:	89 f6       	brne	.-94     	; 0x13f6c <__ftoa_engine+0xfc>
   13fca:	06 94       	lsr	r0
   13fcc:	97 95       	ror	r25
   13fce:	67 95       	ror	r22
   13fd0:	37 95       	ror	r19
   13fd2:	17 95       	ror	r17
   13fd4:	17 94       	ror	r1
   13fd6:	e1 18       	sub	r14, r1
   13fd8:	f1 0a       	sbc	r15, r17
   13fda:	43 0b       	sbc	r20, r19
   13fdc:	56 0b       	sbc	r21, r22
   13fde:	c9 0b       	sbc	r28, r25
   13fe0:	d0 09       	sbc	r29, r0
   13fe2:	98 f0       	brcs	.+38     	; 0x1400a <__ftoa_engine+0x19a>
   13fe4:	23 95       	inc	r18
   13fe6:	7e 91       	ld	r23, -X
   13fe8:	73 95       	inc	r23
   13fea:	7a 33       	cpi	r23, 0x3A	; 58
   13fec:	08 f0       	brcs	.+2      	; 0x13ff0 <__ftoa_engine+0x180>
   13fee:	70 e3       	ldi	r23, 0x30	; 48
   13ff0:	7c 93       	st	X, r23
   13ff2:	20 13       	cpse	r18, r16
   13ff4:	b8 f7       	brcc	.-18     	; 0x13fe4 <__ftoa_engine+0x174>
   13ff6:	7e 91       	ld	r23, -X
   13ff8:	70 61       	ori	r23, 0x10	; 16
   13ffa:	7d 93       	st	X+, r23
   13ffc:	30 f0       	brcs	.+12     	; 0x1400a <__ftoa_engine+0x19a>
   13ffe:	83 95       	inc	r24
   14000:	71 e3       	ldi	r23, 0x31	; 49
   14002:	7d 93       	st	X+, r23
   14004:	70 e3       	ldi	r23, 0x30	; 48
   14006:	2a 95       	dec	r18
   14008:	e1 f7       	brne	.-8      	; 0x14002 <__ftoa_engine+0x192>
   1400a:	11 24       	eor	r1, r1
   1400c:	ef 90       	pop	r14
   1400e:	ff 90       	pop	r15
   14010:	0f 91       	pop	r16
   14012:	1f 91       	pop	r17
   14014:	cf 91       	pop	r28
   14016:	df 91       	pop	r29
   14018:	99 27       	eor	r25, r25
   1401a:	87 fd       	sbrc	r24, 7
   1401c:	90 95       	com	r25
   1401e:	08 95       	ret

00014020 <__ctype_isfalse>:
__ctype_isfalse():
   14020:	99 27       	eor	r25, r25
   14022:	88 27       	eor	r24, r24

00014024 <__ctype_istrue>:
__ctype_istrue():
   14024:	08 95       	ret

00014026 <strncasecmp_P>:
strncasecmp_P():
   14026:	fb 01       	movw	r30, r22
   14028:	dc 01       	movw	r26, r24
   1402a:	41 50       	subi	r20, 0x01	; 1
   1402c:	50 40       	sbci	r21, 0x00	; 0
   1402e:	88 f0       	brcs	.+34     	; 0x14052 <strncasecmp_P+0x2c>
   14030:	8d 91       	ld	r24, X+
   14032:	81 34       	cpi	r24, 0x41	; 65
   14034:	1c f0       	brlt	.+6      	; 0x1403c <strncasecmp_P+0x16>
   14036:	8b 35       	cpi	r24, 0x5B	; 91
   14038:	0c f4       	brge	.+2      	; 0x1403c <strncasecmp_P+0x16>
   1403a:	80 5e       	subi	r24, 0xE0	; 224
   1403c:	65 91       	lpm	r22, Z+
   1403e:	61 34       	cpi	r22, 0x41	; 65
   14040:	1c f0       	brlt	.+6      	; 0x14048 <strncasecmp_P+0x22>
   14042:	6b 35       	cpi	r22, 0x5B	; 91
   14044:	0c f4       	brge	.+2      	; 0x14048 <strncasecmp_P+0x22>
   14046:	60 5e       	subi	r22, 0xE0	; 224
   14048:	86 1b       	sub	r24, r22
   1404a:	61 11       	cpse	r22, r1
   1404c:	71 f3       	breq	.-36     	; 0x1402a <strncasecmp_P+0x4>
   1404e:	99 0b       	sbc	r25, r25
   14050:	08 95       	ret
   14052:	88 1b       	sub	r24, r24
   14054:	fc cf       	rjmp	.-8      	; 0x1404e <strncasecmp_P+0x28>

00014056 <strnlen_P>:
strnlen_P():
   14056:	fc 01       	movw	r30, r24
   14058:	05 90       	lpm	r0, Z+
   1405a:	61 50       	subi	r22, 0x01	; 1
   1405c:	70 40       	sbci	r23, 0x00	; 0
   1405e:	01 10       	cpse	r0, r1
   14060:	d8 f7       	brcc	.-10     	; 0x14058 <strnlen_P+0x2>
   14062:	80 95       	com	r24
   14064:	90 95       	com	r25
   14066:	8e 0f       	add	r24, r30
   14068:	9f 1f       	adc	r25, r31
   1406a:	08 95       	ret

0001406c <memset>:
memset():
   1406c:	dc 01       	movw	r26, r24
   1406e:	01 c0       	rjmp	.+2      	; 0x14072 <memset+0x6>
   14070:	6d 93       	st	X+, r22
   14072:	41 50       	subi	r20, 0x01	; 1
   14074:	50 40       	sbci	r21, 0x00	; 0
   14076:	e0 f7       	brcc	.-8      	; 0x14070 <memset+0x4>
   14078:	08 95       	ret

0001407a <strnlen>:
strnlen():
   1407a:	fc 01       	movw	r30, r24
   1407c:	61 50       	subi	r22, 0x01	; 1
   1407e:	70 40       	sbci	r23, 0x00	; 0
   14080:	01 90       	ld	r0, Z+
   14082:	01 10       	cpse	r0, r1
   14084:	d8 f7       	brcc	.-10     	; 0x1407c <strnlen+0x2>
   14086:	80 95       	com	r24
   14088:	90 95       	com	r25
   1408a:	8e 0f       	add	r24, r30
   1408c:	9f 1f       	adc	r25, r31
   1408e:	08 95       	ret

00014090 <strrev>:
strrev():
   14090:	dc 01       	movw	r26, r24
   14092:	fc 01       	movw	r30, r24
   14094:	67 2f       	mov	r22, r23
   14096:	71 91       	ld	r23, Z+
   14098:	77 23       	and	r23, r23
   1409a:	e1 f7       	brne	.-8      	; 0x14094 <strrev+0x4>
   1409c:	32 97       	sbiw	r30, 0x02	; 2
   1409e:	04 c0       	rjmp	.+8      	; 0x140a8 <strrev+0x18>
   140a0:	7c 91       	ld	r23, X
   140a2:	6d 93       	st	X+, r22
   140a4:	70 83       	st	Z, r23
   140a6:	62 91       	ld	r22, -Z
   140a8:	ae 17       	cp	r26, r30
   140aa:	bf 07       	cpc	r27, r31
   140ac:	c8 f3       	brcs	.-14     	; 0x140a0 <strrev+0x10>
   140ae:	08 95       	ret

000140b0 <fputc>:
fputc():
   140b0:	0f 93       	push	r16
   140b2:	1f 93       	push	r17
   140b4:	cf 93       	push	r28
   140b6:	df 93       	push	r29
   140b8:	18 2f       	mov	r17, r24
   140ba:	09 2f       	mov	r16, r25
   140bc:	eb 01       	movw	r28, r22
   140be:	8b 81       	ldd	r24, Y+3	; 0x03
   140c0:	81 fd       	sbrc	r24, 1
   140c2:	09 c0       	rjmp	.+18     	; 0x140d6 <fputc+0x26>
   140c4:	1f ef       	ldi	r17, 0xFF	; 255
   140c6:	0f ef       	ldi	r16, 0xFF	; 255
   140c8:	81 2f       	mov	r24, r17
   140ca:	90 2f       	mov	r25, r16
   140cc:	df 91       	pop	r29
   140ce:	cf 91       	pop	r28
   140d0:	1f 91       	pop	r17
   140d2:	0f 91       	pop	r16
   140d4:	08 95       	ret
   140d6:	82 ff       	sbrs	r24, 2
   140d8:	14 c0       	rjmp	.+40     	; 0x14102 <fputc+0x52>
   140da:	2e 81       	ldd	r18, Y+6	; 0x06
   140dc:	3f 81       	ldd	r19, Y+7	; 0x07
   140de:	8c 81       	ldd	r24, Y+4	; 0x04
   140e0:	9d 81       	ldd	r25, Y+5	; 0x05
   140e2:	28 17       	cp	r18, r24
   140e4:	39 07       	cpc	r19, r25
   140e6:	3c f4       	brge	.+14     	; 0x140f6 <fputc+0x46>
   140e8:	e8 81       	ld	r30, Y
   140ea:	f9 81       	ldd	r31, Y+1	; 0x01
   140ec:	cf 01       	movw	r24, r30
   140ee:	01 96       	adiw	r24, 0x01	; 1
   140f0:	99 83       	std	Y+1, r25	; 0x01
   140f2:	88 83       	st	Y, r24
   140f4:	10 83       	st	Z, r17
   140f6:	8e 81       	ldd	r24, Y+6	; 0x06
   140f8:	9f 81       	ldd	r25, Y+7	; 0x07
   140fa:	01 96       	adiw	r24, 0x01	; 1
   140fc:	9f 83       	std	Y+7, r25	; 0x07
   140fe:	8e 83       	std	Y+6, r24	; 0x06
   14100:	e3 cf       	rjmp	.-58     	; 0x140c8 <fputc+0x18>
   14102:	e8 85       	ldd	r30, Y+8	; 0x08
   14104:	f9 85       	ldd	r31, Y+9	; 0x09
   14106:	81 2f       	mov	r24, r17
   14108:	19 95       	eicall
   1410a:	89 2b       	or	r24, r25
   1410c:	a1 f3       	breq	.-24     	; 0x140f6 <fputc+0x46>
   1410e:	da cf       	rjmp	.-76     	; 0x140c4 <fputc+0x14>

00014110 <__ultoa_invert>:
__ultoa_invert():
   14110:	fa 01       	movw	r30, r20
   14112:	aa 27       	eor	r26, r26
   14114:	28 30       	cpi	r18, 0x08	; 8
   14116:	51 f1       	breq	.+84     	; 0x1416c <__ultoa_invert+0x5c>
   14118:	20 31       	cpi	r18, 0x10	; 16
   1411a:	81 f1       	breq	.+96     	; 0x1417c <__ultoa_invert+0x6c>
   1411c:	e8 94       	clt
   1411e:	6f 93       	push	r22
   14120:	6e 7f       	andi	r22, 0xFE	; 254
   14122:	6e 5f       	subi	r22, 0xFE	; 254
   14124:	7f 4f       	sbci	r23, 0xFF	; 255
   14126:	8f 4f       	sbci	r24, 0xFF	; 255
   14128:	9f 4f       	sbci	r25, 0xFF	; 255
   1412a:	af 4f       	sbci	r26, 0xFF	; 255
   1412c:	b1 e0       	ldi	r27, 0x01	; 1
   1412e:	3e d0       	rcall	.+124    	; 0x141ac <__ultoa_invert+0x9c>
   14130:	b4 e0       	ldi	r27, 0x04	; 4
   14132:	3c d0       	rcall	.+120    	; 0x141ac <__ultoa_invert+0x9c>
   14134:	67 0f       	add	r22, r23
   14136:	78 1f       	adc	r23, r24
   14138:	89 1f       	adc	r24, r25
   1413a:	9a 1f       	adc	r25, r26
   1413c:	a1 1d       	adc	r26, r1
   1413e:	68 0f       	add	r22, r24
   14140:	79 1f       	adc	r23, r25
   14142:	8a 1f       	adc	r24, r26
   14144:	91 1d       	adc	r25, r1
   14146:	a1 1d       	adc	r26, r1
   14148:	6a 0f       	add	r22, r26
   1414a:	71 1d       	adc	r23, r1
   1414c:	81 1d       	adc	r24, r1
   1414e:	91 1d       	adc	r25, r1
   14150:	a1 1d       	adc	r26, r1
   14152:	20 d0       	rcall	.+64     	; 0x14194 <__ultoa_invert+0x84>
   14154:	09 f4       	brne	.+2      	; 0x14158 <__ultoa_invert+0x48>
   14156:	68 94       	set
   14158:	3f 91       	pop	r19
   1415a:	2a e0       	ldi	r18, 0x0A	; 10
   1415c:	26 9f       	mul	r18, r22
   1415e:	11 24       	eor	r1, r1
   14160:	30 19       	sub	r19, r0
   14162:	30 5d       	subi	r19, 0xD0	; 208
   14164:	31 93       	st	Z+, r19
   14166:	de f6       	brtc	.-74     	; 0x1411e <__ultoa_invert+0xe>
   14168:	cf 01       	movw	r24, r30
   1416a:	08 95       	ret
   1416c:	46 2f       	mov	r20, r22
   1416e:	47 70       	andi	r20, 0x07	; 7
   14170:	40 5d       	subi	r20, 0xD0	; 208
   14172:	41 93       	st	Z+, r20
   14174:	b3 e0       	ldi	r27, 0x03	; 3
   14176:	0f d0       	rcall	.+30     	; 0x14196 <__ultoa_invert+0x86>
   14178:	c9 f7       	brne	.-14     	; 0x1416c <__ultoa_invert+0x5c>
   1417a:	f6 cf       	rjmp	.-20     	; 0x14168 <__ultoa_invert+0x58>
   1417c:	46 2f       	mov	r20, r22
   1417e:	4f 70       	andi	r20, 0x0F	; 15
   14180:	40 5d       	subi	r20, 0xD0	; 208
   14182:	4a 33       	cpi	r20, 0x3A	; 58
   14184:	18 f0       	brcs	.+6      	; 0x1418c <__ultoa_invert+0x7c>
   14186:	49 5d       	subi	r20, 0xD9	; 217
   14188:	31 fd       	sbrc	r19, 1
   1418a:	40 52       	subi	r20, 0x20	; 32
   1418c:	41 93       	st	Z+, r20
   1418e:	02 d0       	rcall	.+4      	; 0x14194 <__ultoa_invert+0x84>
   14190:	a9 f7       	brne	.-22     	; 0x1417c <__ultoa_invert+0x6c>
   14192:	ea cf       	rjmp	.-44     	; 0x14168 <__ultoa_invert+0x58>
   14194:	b4 e0       	ldi	r27, 0x04	; 4
   14196:	a6 95       	lsr	r26
   14198:	97 95       	ror	r25
   1419a:	87 95       	ror	r24
   1419c:	77 95       	ror	r23
   1419e:	67 95       	ror	r22
   141a0:	ba 95       	dec	r27
   141a2:	c9 f7       	brne	.-14     	; 0x14196 <__ultoa_invert+0x86>
   141a4:	00 97       	sbiw	r24, 0x00	; 0
   141a6:	61 05       	cpc	r22, r1
   141a8:	71 05       	cpc	r23, r1
   141aa:	08 95       	ret
   141ac:	9b 01       	movw	r18, r22
   141ae:	ac 01       	movw	r20, r24
   141b0:	0a 2e       	mov	r0, r26
   141b2:	06 94       	lsr	r0
   141b4:	57 95       	ror	r21
   141b6:	47 95       	ror	r20
   141b8:	37 95       	ror	r19
   141ba:	27 95       	ror	r18
   141bc:	ba 95       	dec	r27
   141be:	c9 f7       	brne	.-14     	; 0x141b2 <__ultoa_invert+0xa2>
   141c0:	62 0f       	add	r22, r18
   141c2:	73 1f       	adc	r23, r19
   141c4:	84 1f       	adc	r24, r20
   141c6:	95 1f       	adc	r25, r21
   141c8:	a0 1d       	adc	r26, r0
   141ca:	08 95       	ret

000141cc <__cmpsf2>:
__cmpsf2():
   141cc:	0e 94 28 a1 	call	0x14250	; 0x14250 <__fp_cmp>
   141d0:	08 f4       	brcc	.+2      	; 0x141d4 <__cmpsf2+0x8>
   141d2:	81 e0       	ldi	r24, 0x01	; 1
   141d4:	08 95       	ret

000141d6 <__floatunsisf>:
__floatunsisf():
   141d6:	e8 94       	clt
   141d8:	09 c0       	rjmp	.+18     	; 0x141ec <__floatsisf+0x12>

000141da <__floatsisf>:
   141da:	97 fb       	bst	r25, 7
   141dc:	3e f4       	brtc	.+14     	; 0x141ec <__floatsisf+0x12>
   141de:	90 95       	com	r25
   141e0:	80 95       	com	r24
   141e2:	70 95       	com	r23
   141e4:	61 95       	neg	r22
   141e6:	7f 4f       	sbci	r23, 0xFF	; 255
   141e8:	8f 4f       	sbci	r24, 0xFF	; 255
   141ea:	9f 4f       	sbci	r25, 0xFF	; 255
   141ec:	99 23       	and	r25, r25
   141ee:	a9 f0       	breq	.+42     	; 0x1421a <__floatsisf+0x40>
   141f0:	f9 2f       	mov	r31, r25
   141f2:	96 e9       	ldi	r25, 0x96	; 150
   141f4:	bb 27       	eor	r27, r27
   141f6:	93 95       	inc	r25
   141f8:	f6 95       	lsr	r31
   141fa:	87 95       	ror	r24
   141fc:	77 95       	ror	r23
   141fe:	67 95       	ror	r22
   14200:	b7 95       	ror	r27
   14202:	f1 11       	cpse	r31, r1
   14204:	f8 cf       	rjmp	.-16     	; 0x141f6 <__floatsisf+0x1c>
   14206:	fa f4       	brpl	.+62     	; 0x14246 <__floatsisf+0x6c>
   14208:	bb 0f       	add	r27, r27
   1420a:	11 f4       	brne	.+4      	; 0x14210 <__floatsisf+0x36>
   1420c:	60 ff       	sbrs	r22, 0
   1420e:	1b c0       	rjmp	.+54     	; 0x14246 <__floatsisf+0x6c>
   14210:	6f 5f       	subi	r22, 0xFF	; 255
   14212:	7f 4f       	sbci	r23, 0xFF	; 255
   14214:	8f 4f       	sbci	r24, 0xFF	; 255
   14216:	9f 4f       	sbci	r25, 0xFF	; 255
   14218:	16 c0       	rjmp	.+44     	; 0x14246 <__floatsisf+0x6c>
   1421a:	88 23       	and	r24, r24
   1421c:	11 f0       	breq	.+4      	; 0x14222 <__floatsisf+0x48>
   1421e:	96 e9       	ldi	r25, 0x96	; 150
   14220:	11 c0       	rjmp	.+34     	; 0x14244 <__floatsisf+0x6a>
   14222:	77 23       	and	r23, r23
   14224:	21 f0       	breq	.+8      	; 0x1422e <__floatsisf+0x54>
   14226:	9e e8       	ldi	r25, 0x8E	; 142
   14228:	87 2f       	mov	r24, r23
   1422a:	76 2f       	mov	r23, r22
   1422c:	05 c0       	rjmp	.+10     	; 0x14238 <__floatsisf+0x5e>
   1422e:	66 23       	and	r22, r22
   14230:	71 f0       	breq	.+28     	; 0x1424e <__floatsisf+0x74>
   14232:	96 e8       	ldi	r25, 0x86	; 134
   14234:	86 2f       	mov	r24, r22
   14236:	70 e0       	ldi	r23, 0x00	; 0
   14238:	60 e0       	ldi	r22, 0x00	; 0
   1423a:	2a f0       	brmi	.+10     	; 0x14246 <__floatsisf+0x6c>
   1423c:	9a 95       	dec	r25
   1423e:	66 0f       	add	r22, r22
   14240:	77 1f       	adc	r23, r23
   14242:	88 1f       	adc	r24, r24
   14244:	da f7       	brpl	.-10     	; 0x1423c <__floatsisf+0x62>
   14246:	88 0f       	add	r24, r24
   14248:	96 95       	lsr	r25
   1424a:	87 95       	ror	r24
   1424c:	97 f9       	bld	r25, 7
   1424e:	08 95       	ret

00014250 <__fp_cmp>:
__fp_cmp():
   14250:	99 0f       	add	r25, r25
   14252:	00 08       	sbc	r0, r0
   14254:	55 0f       	add	r21, r21
   14256:	aa 0b       	sbc	r26, r26
   14258:	e0 e8       	ldi	r30, 0x80	; 128
   1425a:	fe ef       	ldi	r31, 0xFE	; 254
   1425c:	16 16       	cp	r1, r22
   1425e:	17 06       	cpc	r1, r23
   14260:	e8 07       	cpc	r30, r24
   14262:	f9 07       	cpc	r31, r25
   14264:	c0 f0       	brcs	.+48     	; 0x14296 <__fp_cmp+0x46>
   14266:	12 16       	cp	r1, r18
   14268:	13 06       	cpc	r1, r19
   1426a:	e4 07       	cpc	r30, r20
   1426c:	f5 07       	cpc	r31, r21
   1426e:	98 f0       	brcs	.+38     	; 0x14296 <__fp_cmp+0x46>
   14270:	62 1b       	sub	r22, r18
   14272:	73 0b       	sbc	r23, r19
   14274:	84 0b       	sbc	r24, r20
   14276:	95 0b       	sbc	r25, r21
   14278:	39 f4       	brne	.+14     	; 0x14288 <__fp_cmp+0x38>
   1427a:	0a 26       	eor	r0, r26
   1427c:	61 f0       	breq	.+24     	; 0x14296 <__fp_cmp+0x46>
   1427e:	23 2b       	or	r18, r19
   14280:	24 2b       	or	r18, r20
   14282:	25 2b       	or	r18, r21
   14284:	21 f4       	brne	.+8      	; 0x1428e <__fp_cmp+0x3e>
   14286:	08 95       	ret
   14288:	0a 26       	eor	r0, r26
   1428a:	09 f4       	brne	.+2      	; 0x1428e <__fp_cmp+0x3e>
   1428c:	a1 40       	sbci	r26, 0x01	; 1
   1428e:	a6 95       	lsr	r26
   14290:	8f ef       	ldi	r24, 0xFF	; 255
   14292:	81 1d       	adc	r24, r1
   14294:	81 1d       	adc	r24, r1
   14296:	08 95       	ret

00014298 <__mulsf3>:
__mulsf3():
   14298:	0e 94 5f a1 	call	0x142be	; 0x142be <__mulsf3x>
   1429c:	0c 94 d0 a1 	jmp	0x143a0	; 0x143a0 <__fp_round>
   142a0:	0e 94 c2 a1 	call	0x14384	; 0x14384 <__fp_pscA>
   142a4:	38 f0       	brcs	.+14     	; 0x142b4 <__mulsf3+0x1c>
   142a6:	0e 94 c9 a1 	call	0x14392	; 0x14392 <__fp_pscB>
   142aa:	20 f0       	brcs	.+8      	; 0x142b4 <__mulsf3+0x1c>
   142ac:	95 23       	and	r25, r21
   142ae:	11 f0       	breq	.+4      	; 0x142b4 <__mulsf3+0x1c>
   142b0:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <__fp_inf>
   142b4:	0c 94 bf a1 	jmp	0x1437e	; 0x1437e <__fp_nan>
   142b8:	11 24       	eor	r1, r1
   142ba:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__fp_szero>

000142be <__mulsf3x>:
__mulsf3x():
   142be:	0e 94 e1 a1 	call	0x143c2	; 0x143c2 <__fp_split3>
   142c2:	70 f3       	brcs	.-36     	; 0x142a0 <__mulsf3+0x8>

000142c4 <__mulsf3_pse>:
   142c4:	95 9f       	mul	r25, r21
   142c6:	c1 f3       	breq	.-16     	; 0x142b8 <__mulsf3+0x20>
   142c8:	95 0f       	add	r25, r21
   142ca:	50 e0       	ldi	r21, 0x00	; 0
   142cc:	55 1f       	adc	r21, r21
   142ce:	62 9f       	mul	r22, r18
   142d0:	f0 01       	movw	r30, r0
   142d2:	72 9f       	mul	r23, r18
   142d4:	bb 27       	eor	r27, r27
   142d6:	f0 0d       	add	r31, r0
   142d8:	b1 1d       	adc	r27, r1
   142da:	63 9f       	mul	r22, r19
   142dc:	aa 27       	eor	r26, r26
   142de:	f0 0d       	add	r31, r0
   142e0:	b1 1d       	adc	r27, r1
   142e2:	aa 1f       	adc	r26, r26
   142e4:	64 9f       	mul	r22, r20
   142e6:	66 27       	eor	r22, r22
   142e8:	b0 0d       	add	r27, r0
   142ea:	a1 1d       	adc	r26, r1
   142ec:	66 1f       	adc	r22, r22
   142ee:	82 9f       	mul	r24, r18
   142f0:	22 27       	eor	r18, r18
   142f2:	b0 0d       	add	r27, r0
   142f4:	a1 1d       	adc	r26, r1
   142f6:	62 1f       	adc	r22, r18
   142f8:	73 9f       	mul	r23, r19
   142fa:	b0 0d       	add	r27, r0
   142fc:	a1 1d       	adc	r26, r1
   142fe:	62 1f       	adc	r22, r18
   14300:	83 9f       	mul	r24, r19
   14302:	a0 0d       	add	r26, r0
   14304:	61 1d       	adc	r22, r1
   14306:	22 1f       	adc	r18, r18
   14308:	74 9f       	mul	r23, r20
   1430a:	33 27       	eor	r19, r19
   1430c:	a0 0d       	add	r26, r0
   1430e:	61 1d       	adc	r22, r1
   14310:	23 1f       	adc	r18, r19
   14312:	84 9f       	mul	r24, r20
   14314:	60 0d       	add	r22, r0
   14316:	21 1d       	adc	r18, r1
   14318:	82 2f       	mov	r24, r18
   1431a:	76 2f       	mov	r23, r22
   1431c:	6a 2f       	mov	r22, r26
   1431e:	11 24       	eor	r1, r1
   14320:	9f 57       	subi	r25, 0x7F	; 127
   14322:	50 40       	sbci	r21, 0x00	; 0
   14324:	9a f0       	brmi	.+38     	; 0x1434c <__mulsf3_pse+0x88>
   14326:	f1 f0       	breq	.+60     	; 0x14364 <__mulsf3_pse+0xa0>
   14328:	88 23       	and	r24, r24
   1432a:	4a f0       	brmi	.+18     	; 0x1433e <__mulsf3_pse+0x7a>
   1432c:	ee 0f       	add	r30, r30
   1432e:	ff 1f       	adc	r31, r31
   14330:	bb 1f       	adc	r27, r27
   14332:	66 1f       	adc	r22, r22
   14334:	77 1f       	adc	r23, r23
   14336:	88 1f       	adc	r24, r24
   14338:	91 50       	subi	r25, 0x01	; 1
   1433a:	50 40       	sbci	r21, 0x00	; 0
   1433c:	a9 f7       	brne	.-22     	; 0x14328 <__mulsf3_pse+0x64>
   1433e:	9e 3f       	cpi	r25, 0xFE	; 254
   14340:	51 05       	cpc	r21, r1
   14342:	80 f0       	brcs	.+32     	; 0x14364 <__mulsf3_pse+0xa0>
   14344:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <__fp_inf>
   14348:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__fp_szero>
   1434c:	5f 3f       	cpi	r21, 0xFF	; 255
   1434e:	e4 f3       	brlt	.-8      	; 0x14348 <__mulsf3_pse+0x84>
   14350:	98 3e       	cpi	r25, 0xE8	; 232
   14352:	d4 f3       	brlt	.-12     	; 0x14348 <__mulsf3_pse+0x84>
   14354:	86 95       	lsr	r24
   14356:	77 95       	ror	r23
   14358:	67 95       	ror	r22
   1435a:	b7 95       	ror	r27
   1435c:	f7 95       	ror	r31
   1435e:	e7 95       	ror	r30
   14360:	9f 5f       	subi	r25, 0xFF	; 255
   14362:	c1 f7       	brne	.-16     	; 0x14354 <__mulsf3_pse+0x90>
   14364:	fe 2b       	or	r31, r30
   14366:	88 0f       	add	r24, r24
   14368:	91 1d       	adc	r25, r1
   1436a:	96 95       	lsr	r25
   1436c:	87 95       	ror	r24
   1436e:	97 f9       	bld	r25, 7
   14370:	08 95       	ret

00014372 <__fp_inf>:
   14372:	97 f9       	bld	r25, 7
   14374:	9f 67       	ori	r25, 0x7F	; 127
   14376:	80 e8       	ldi	r24, 0x80	; 128
   14378:	70 e0       	ldi	r23, 0x00	; 0
   1437a:	60 e0       	ldi	r22, 0x00	; 0
   1437c:	08 95       	ret

0001437e <__fp_nan>:
   1437e:	9f ef       	ldi	r25, 0xFF	; 255
   14380:	80 ec       	ldi	r24, 0xC0	; 192
   14382:	08 95       	ret

00014384 <__fp_pscA>:
   14384:	00 24       	eor	r0, r0
   14386:	0a 94       	dec	r0
   14388:	16 16       	cp	r1, r22
   1438a:	17 06       	cpc	r1, r23
   1438c:	18 06       	cpc	r1, r24
   1438e:	09 06       	cpc	r0, r25
__fp_pscA():
   14390:	08 95       	ret

00014392 <__fp_pscB>:
__fp_pscB():
   14392:	00 24       	eor	r0, r0
   14394:	0a 94       	dec	r0
   14396:	12 16       	cp	r1, r18
   14398:	13 06       	cpc	r1, r19
   1439a:	14 06       	cpc	r1, r20
   1439c:	05 06       	cpc	r0, r21
   1439e:	08 95       	ret

000143a0 <__fp_round>:
__fp_round():
   143a0:	09 2e       	mov	r0, r25
   143a2:	03 94       	inc	r0
   143a4:	00 0c       	add	r0, r0
   143a6:	11 f4       	brne	.+4      	; 0x143ac <__fp_round+0xc>
   143a8:	88 23       	and	r24, r24
   143aa:	52 f0       	brmi	.+20     	; 0x143c0 <__fp_round+0x20>
   143ac:	bb 0f       	add	r27, r27
   143ae:	40 f4       	brcc	.+16     	; 0x143c0 <__fp_round+0x20>
   143b0:	bf 2b       	or	r27, r31
   143b2:	11 f4       	brne	.+4      	; 0x143b8 <__fp_round+0x18>
   143b4:	60 ff       	sbrs	r22, 0
   143b6:	04 c0       	rjmp	.+8      	; 0x143c0 <__fp_round+0x20>
   143b8:	6f 5f       	subi	r22, 0xFF	; 255
   143ba:	7f 4f       	sbci	r23, 0xFF	; 255
   143bc:	8f 4f       	sbci	r24, 0xFF	; 255
   143be:	9f 4f       	sbci	r25, 0xFF	; 255
   143c0:	08 95       	ret

000143c2 <__fp_split3>:
__fp_split3():
   143c2:	57 fd       	sbrc	r21, 7
   143c4:	90 58       	subi	r25, 0x80	; 128
   143c6:	44 0f       	add	r20, r20
   143c8:	55 1f       	adc	r21, r21
   143ca:	59 f0       	breq	.+22     	; 0x143e2 <__fp_splitA+0x10>
   143cc:	5f 3f       	cpi	r21, 0xFF	; 255
   143ce:	71 f0       	breq	.+28     	; 0x143ec <__fp_splitA+0x1a>
   143d0:	47 95       	ror	r20

000143d2 <__fp_splitA>:
   143d2:	88 0f       	add	r24, r24
   143d4:	97 fb       	bst	r25, 7
   143d6:	99 1f       	adc	r25, r25
   143d8:	61 f0       	breq	.+24     	; 0x143f2 <__fp_splitA+0x20>
   143da:	9f 3f       	cpi	r25, 0xFF	; 255
   143dc:	79 f0       	breq	.+30     	; 0x143fc <__fp_splitA+0x2a>
   143de:	87 95       	ror	r24
   143e0:	08 95       	ret
   143e2:	12 16       	cp	r1, r18
   143e4:	13 06       	cpc	r1, r19
   143e6:	14 06       	cpc	r1, r20
   143e8:	55 1f       	adc	r21, r21
   143ea:	f2 cf       	rjmp	.-28     	; 0x143d0 <__fp_split3+0xe>
   143ec:	46 95       	lsr	r20
   143ee:	f1 df       	rcall	.-30     	; 0x143d2 <__fp_splitA>
   143f0:	08 c0       	rjmp	.+16     	; 0x14402 <__fp_splitA+0x30>
   143f2:	16 16       	cp	r1, r22
   143f4:	17 06       	cpc	r1, r23
   143f6:	18 06       	cpc	r1, r24
   143f8:	99 1f       	adc	r25, r25
   143fa:	f1 cf       	rjmp	.-30     	; 0x143de <__fp_splitA+0xc>
   143fc:	86 95       	lsr	r24
   143fe:	71 05       	cpc	r23, r1
   14400:	61 05       	cpc	r22, r1
   14402:	08 94       	sec
   14404:	08 95       	ret

00014406 <__fp_zero>:
__fp_zero():
   14406:	e8 94       	clt

00014408 <__fp_szero>:
   14408:	bb 27       	eor	r27, r27
   1440a:	66 27       	eor	r22, r22
   1440c:	77 27       	eor	r23, r23
   1440e:	cb 01       	movw	r24, r22
   14410:	97 f9       	bld	r25, 7
   14412:	08 95       	ret

00014414 <eeprom_read_byte>:
eeprom_read_byte():
   14414:	f9 99       	sbic	0x1f, 1	; 31
   14416:	fe cf       	rjmp	.-4      	; 0x14414 <eeprom_read_byte>
   14418:	92 bd       	out	0x22, r25	; 34
   1441a:	81 bd       	out	0x21, r24	; 33
   1441c:	f8 9a       	sbi	0x1f, 0	; 31
   1441e:	99 27       	eor	r25, r25
   14420:	80 b5       	in	r24, 0x20	; 32
   14422:	08 95       	ret

00014424 <eeprom_write_byte>:
eeprom_write_byte():
   14424:	26 2f       	mov	r18, r22

00014426 <eeprom_write_r18>:
   14426:	f9 99       	sbic	0x1f, 1	; 31
   14428:	fe cf       	rjmp	.-4      	; 0x14426 <eeprom_write_r18>
   1442a:	1f ba       	out	0x1f, r1	; 31
   1442c:	92 bd       	out	0x22, r25	; 34
   1442e:	81 bd       	out	0x21, r24	; 33
   14430:	20 bd       	out	0x20, r18	; 32
   14432:	0f b6       	in	r0, 0x3f	; 63
   14434:	f8 94       	cli
   14436:	fa 9a       	sbi	0x1f, 2	; 31
   14438:	f9 9a       	sbi	0x1f, 1	; 31
   1443a:	0f be       	out	0x3f, r0	; 63
   1443c:	01 96       	adiw	r24, 0x01	; 1
   1443e:	08 95       	ret

00014440 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   14440:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   14442:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   14444:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   14446:	0e 94 99 a2 	call	0x14532	; 0x14532 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1444a:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1444c:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1444e:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   14450:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   14452:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   14454:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   14456:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   14458:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1445a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1445c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1445e:	08 95       	ret

00014460 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   14460:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   14462:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   14464:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   14466:	07 c0       	rjmp	.+14     	; 0x14476 <__udivmodhi4_ep>

00014468 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   14468:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1446a:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1446c:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1446e:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   14470:	10 f0       	brcs	.+4      	; 0x14476 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   14472:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   14474:	b7 0b       	sbc	r27, r23

00014476 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   14476:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   14478:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1447a:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1447c:	a9 f7       	brne	.-22     	; 0x14468 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1447e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   14480:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   14482:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   14484:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   14486:	08 95       	ret

00014488 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   14488:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1448a:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1448c:	16 f4       	brtc	.+4      	; 0x14492 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1448e:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   14490:	07 d0       	rcall	.+14     	; 0x144a0 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   14492:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   14494:	09 d0       	rcall	.+18     	; 0x144a8 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   14496:	0e 94 30 a2 	call	0x14460	; 0x14460 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1449a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1449c:	05 d0       	rcall	.+10     	; 0x144a8 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1449e:	3e f4       	brtc	.+14     	; 0x144ae <__divmodhi4_exit>

000144a0 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   144a0:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   144a2:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   144a4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   144a6:	08 95       	ret

000144a8 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   144a8:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   144aa:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   144ac:	7f 4f       	sbci	r23, 0xFF	; 255

000144ae <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   144ae:	08 95       	ret

000144b0 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   144b0:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   144b2:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   144b4:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   144b6:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   144b8:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   144ba:	0d c0       	rjmp	.+26     	; 0x144d6 <__udivmodsi4_ep>

000144bc <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   144bc:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   144be:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   144c0:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   144c2:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   144c4:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   144c6:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   144c8:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   144ca:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   144cc:	20 f0       	brcs	.+8      	; 0x144d6 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   144ce:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   144d0:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   144d2:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   144d4:	f5 0b       	sbc	r31, r21

000144d6 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   144d6:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   144d8:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   144da:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   144dc:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   144de:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   144e0:	69 f7       	brne	.-38     	; 0x144bc <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   144e2:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   144e4:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   144e6:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   144e8:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   144ea:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   144ec:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   144ee:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   144f0:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   144f2:	08 95       	ret

000144f4 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   144f4:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   144f6:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   144f8:	1e f4       	brtc	.+6      	; 0x14500 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   144fa:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   144fc:	0e 94 91 a2 	call	0x14522	; 0x14522 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   14500:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   14502:	07 d0       	rcall	.+14     	; 0x14512 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   14504:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   14508:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1450a:	03 d0       	rcall	.+6      	; 0x14512 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1450c:	4e f4       	brtc	.+18     	; 0x14520 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1450e:	0c 94 91 a2 	jmp	0x14522	; 0x14522 <__negsi2>

00014512 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   14512:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   14514:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   14516:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   14518:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1451a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1451c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1451e:	5f 4f       	sbci	r21, 0xFF	; 255

00014520 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   14520:	08 95       	ret

00014522 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   14522:	90 95       	com	r25
   14524:	80 95       	com	r24
   14526:	70 95       	com	r23
   14528:	61 95       	neg	r22
   1452a:	7f 4f       	sbci	r23, 0xFF	; 255
   1452c:	8f 4f       	sbci	r24, 0xFF	; 255
   1452e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   14530:	08 95       	ret

00014532 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   14532:	0e 94 a4 a2 	call	0x14548	; 0x14548 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   14536:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   14538:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1453a:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1453c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1453e:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   14540:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   14542:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   14544:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   14546:	08 95       	ret

00014548 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   14548:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1454a:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1454c:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1454e:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   14550:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   14552:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   14554:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   14556:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   14558:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1455a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1455c:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1455e:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   14560:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   14562:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   14564:	08 95       	ret

00014566 <__subsf3>:
__subsf3():
   14566:	50 58       	subi	r21, 0x80	; 128

00014568 <__addsf3>:
   14568:	bb 27       	eor	r27, r27
   1456a:	aa 27       	eor	r26, r26
   1456c:	0e 94 cb a2 	call	0x14596	; 0x14596 <__addsf3x>
   14570:	0c 94 d0 a1 	jmp	0x143a0	; 0x143a0 <__fp_round>
__addsf3():
   14574:	0e 94 c2 a1 	call	0x14384	; 0x14384 <__fp_pscA>
   14578:	38 f0       	brcs	.+14     	; 0x14588 <__addsf3+0x20>
   1457a:	0e 94 c9 a1 	call	0x14392	; 0x14392 <__fp_pscB>
   1457e:	20 f0       	brcs	.+8      	; 0x14588 <__addsf3+0x20>
   14580:	39 f4       	brne	.+14     	; 0x14590 <__addsf3+0x28>
   14582:	9f 3f       	cpi	r25, 0xFF	; 255
   14584:	19 f4       	brne	.+6      	; 0x1458c <__addsf3+0x24>
   14586:	26 f4       	brtc	.+8      	; 0x14590 <__addsf3+0x28>
   14588:	0c 94 bf a1 	jmp	0x1437e	; 0x1437e <__fp_nan>
   1458c:	0e f4       	brtc	.+2      	; 0x14590 <__addsf3+0x28>
   1458e:	e0 95       	com	r30
   14590:	e7 fb       	bst	r30, 7
   14592:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <__fp_inf>

00014596 <__addsf3x>:
__addsf3x():
   14596:	e9 2f       	mov	r30, r25
   14598:	0e 94 e1 a1 	call	0x143c2	; 0x143c2 <__fp_split3>
   1459c:	58 f3       	brcs	.-42     	; 0x14574 <__addsf3+0xc>
   1459e:	ba 17       	cp	r27, r26
   145a0:	62 07       	cpc	r22, r18
   145a2:	73 07       	cpc	r23, r19
   145a4:	84 07       	cpc	r24, r20
   145a6:	95 07       	cpc	r25, r21
   145a8:	20 f0       	brcs	.+8      	; 0x145b2 <__addsf3x+0x1c>
   145aa:	79 f4       	brne	.+30     	; 0x145ca <__addsf3x+0x34>
   145ac:	a6 f5       	brtc	.+104    	; 0x14616 <__addsf3x+0x80>
   145ae:	0c 94 03 a2 	jmp	0x14406	; 0x14406 <__fp_zero>
   145b2:	0e f4       	brtc	.+2      	; 0x145b6 <__addsf3x+0x20>
   145b4:	e0 95       	com	r30
   145b6:	0b 2e       	mov	r0, r27
   145b8:	ba 2f       	mov	r27, r26
   145ba:	a0 2d       	mov	r26, r0
   145bc:	0b 01       	movw	r0, r22
   145be:	b9 01       	movw	r22, r18
   145c0:	90 01       	movw	r18, r0
   145c2:	0c 01       	movw	r0, r24
   145c4:	ca 01       	movw	r24, r20
   145c6:	a0 01       	movw	r20, r0
   145c8:	11 24       	eor	r1, r1
   145ca:	ff 27       	eor	r31, r31
   145cc:	59 1b       	sub	r21, r25
   145ce:	99 f0       	breq	.+38     	; 0x145f6 <__addsf3x+0x60>
   145d0:	59 3f       	cpi	r21, 0xF9	; 249
   145d2:	50 f4       	brcc	.+20     	; 0x145e8 <__addsf3x+0x52>
   145d4:	50 3e       	cpi	r21, 0xE0	; 224
   145d6:	68 f1       	brcs	.+90     	; 0x14632 <__addsf3x+0x9c>
   145d8:	1a 16       	cp	r1, r26
   145da:	f0 40       	sbci	r31, 0x00	; 0
   145dc:	a2 2f       	mov	r26, r18
   145de:	23 2f       	mov	r18, r19
   145e0:	34 2f       	mov	r19, r20
   145e2:	44 27       	eor	r20, r20
   145e4:	58 5f       	subi	r21, 0xF8	; 248
   145e6:	f3 cf       	rjmp	.-26     	; 0x145ce <__addsf3x+0x38>
   145e8:	46 95       	lsr	r20
   145ea:	37 95       	ror	r19
   145ec:	27 95       	ror	r18
   145ee:	a7 95       	ror	r26
   145f0:	f0 40       	sbci	r31, 0x00	; 0
   145f2:	53 95       	inc	r21
   145f4:	c9 f7       	brne	.-14     	; 0x145e8 <__addsf3x+0x52>
   145f6:	7e f4       	brtc	.+30     	; 0x14616 <__addsf3x+0x80>
   145f8:	1f 16       	cp	r1, r31
   145fa:	ba 0b       	sbc	r27, r26
   145fc:	62 0b       	sbc	r22, r18
   145fe:	73 0b       	sbc	r23, r19
   14600:	84 0b       	sbc	r24, r20
   14602:	ba f0       	brmi	.+46     	; 0x14632 <__addsf3x+0x9c>
   14604:	91 50       	subi	r25, 0x01	; 1
   14606:	a1 f0       	breq	.+40     	; 0x14630 <__addsf3x+0x9a>
   14608:	ff 0f       	add	r31, r31
   1460a:	bb 1f       	adc	r27, r27
   1460c:	66 1f       	adc	r22, r22
   1460e:	77 1f       	adc	r23, r23
   14610:	88 1f       	adc	r24, r24
   14612:	c2 f7       	brpl	.-16     	; 0x14604 <__addsf3x+0x6e>
   14614:	0e c0       	rjmp	.+28     	; 0x14632 <__addsf3x+0x9c>
   14616:	ba 0f       	add	r27, r26
   14618:	62 1f       	adc	r22, r18
   1461a:	73 1f       	adc	r23, r19
   1461c:	84 1f       	adc	r24, r20
   1461e:	48 f4       	brcc	.+18     	; 0x14632 <__addsf3x+0x9c>
   14620:	87 95       	ror	r24
   14622:	77 95       	ror	r23
   14624:	67 95       	ror	r22
   14626:	b7 95       	ror	r27
   14628:	f7 95       	ror	r31
   1462a:	9e 3f       	cpi	r25, 0xFE	; 254
   1462c:	08 f0       	brcs	.+2      	; 0x14630 <__addsf3x+0x9a>
   1462e:	b0 cf       	rjmp	.-160    	; 0x14590 <__addsf3+0x28>
   14630:	93 95       	inc	r25
   14632:	88 0f       	add	r24, r24
   14634:	08 f0       	brcs	.+2      	; 0x14638 <__addsf3x+0xa2>
   14636:	99 27       	eor	r25, r25
   14638:	ee 0f       	add	r30, r30
   1463a:	97 95       	ror	r25
   1463c:	87 95       	ror	r24
   1463e:	08 95       	ret

00014640 <__divsf3>:
   14640:	0e 94 34 a3 	call	0x14668	; 0x14668 <__divsf3x>
   14644:	0c 94 d0 a1 	jmp	0x143a0	; 0x143a0 <__fp_round>
   14648:	0e 94 c9 a1 	call	0x14392	; 0x14392 <__fp_pscB>
   1464c:	58 f0       	brcs	.+22     	; 0x14664 <__divsf3+0x24>
   1464e:	0e 94 c2 a1 	call	0x14384	; 0x14384 <__fp_pscA>
   14652:	40 f0       	brcs	.+16     	; 0x14664 <__divsf3+0x24>
   14654:	29 f4       	brne	.+10     	; 0x14660 <__divsf3+0x20>
   14656:	5f 3f       	cpi	r21, 0xFF	; 255
   14658:	29 f0       	breq	.+10     	; 0x14664 <__divsf3+0x24>
   1465a:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <__fp_inf>
   1465e:	51 11       	cpse	r21, r1
   14660:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__fp_szero>
__divsf3():
   14664:	0c 94 bf a1 	jmp	0x1437e	; 0x1437e <__fp_nan>

00014668 <__divsf3x>:
__divsf3x():
   14668:	0e 94 e1 a1 	call	0x143c2	; 0x143c2 <__fp_split3>
   1466c:	68 f3       	brcs	.-38     	; 0x14648 <__divsf3+0x8>

0001466e <__divsf3_pse>:
   1466e:	99 23       	and	r25, r25
   14670:	b1 f3       	breq	.-20     	; 0x1465e <__divsf3+0x1e>
   14672:	55 23       	and	r21, r21
   14674:	91 f3       	breq	.-28     	; 0x1465a <__divsf3+0x1a>
   14676:	95 1b       	sub	r25, r21
   14678:	55 0b       	sbc	r21, r21
   1467a:	bb 27       	eor	r27, r27
   1467c:	aa 27       	eor	r26, r26
   1467e:	62 17       	cp	r22, r18
   14680:	73 07       	cpc	r23, r19
   14682:	84 07       	cpc	r24, r20
   14684:	38 f0       	brcs	.+14     	; 0x14694 <__divsf3_pse+0x26>
   14686:	9f 5f       	subi	r25, 0xFF	; 255
   14688:	5f 4f       	sbci	r21, 0xFF	; 255
   1468a:	22 0f       	add	r18, r18
   1468c:	33 1f       	adc	r19, r19
   1468e:	44 1f       	adc	r20, r20
   14690:	aa 1f       	adc	r26, r26
   14692:	a9 f3       	breq	.-22     	; 0x1467e <__divsf3_pse+0x10>
   14694:	35 d0       	rcall	.+106    	; 0x14700 <__divsf3_pse+0x92>
   14696:	0e 2e       	mov	r0, r30
   14698:	3a f0       	brmi	.+14     	; 0x146a8 <__divsf3_pse+0x3a>
   1469a:	e0 e8       	ldi	r30, 0x80	; 128
   1469c:	32 d0       	rcall	.+100    	; 0x14702 <__divsf3_pse+0x94>
   1469e:	91 50       	subi	r25, 0x01	; 1
   146a0:	50 40       	sbci	r21, 0x00	; 0
   146a2:	e6 95       	lsr	r30
   146a4:	00 1c       	adc	r0, r0
   146a6:	ca f7       	brpl	.-14     	; 0x1469a <__divsf3_pse+0x2c>
   146a8:	2b d0       	rcall	.+86     	; 0x14700 <__divsf3_pse+0x92>
   146aa:	fe 2f       	mov	r31, r30
   146ac:	29 d0       	rcall	.+82     	; 0x14700 <__divsf3_pse+0x92>
   146ae:	66 0f       	add	r22, r22
   146b0:	77 1f       	adc	r23, r23
   146b2:	88 1f       	adc	r24, r24
   146b4:	bb 1f       	adc	r27, r27
   146b6:	26 17       	cp	r18, r22
   146b8:	37 07       	cpc	r19, r23
   146ba:	48 07       	cpc	r20, r24
   146bc:	ab 07       	cpc	r26, r27
   146be:	b0 e8       	ldi	r27, 0x80	; 128
   146c0:	09 f0       	breq	.+2      	; 0x146c4 <__divsf3_pse+0x56>
   146c2:	bb 0b       	sbc	r27, r27
   146c4:	80 2d       	mov	r24, r0
   146c6:	bf 01       	movw	r22, r30
   146c8:	ff 27       	eor	r31, r31
   146ca:	93 58       	subi	r25, 0x83	; 131
   146cc:	5f 4f       	sbci	r21, 0xFF	; 255
   146ce:	3a f0       	brmi	.+14     	; 0x146de <__divsf3_pse+0x70>
   146d0:	9e 3f       	cpi	r25, 0xFE	; 254
   146d2:	51 05       	cpc	r21, r1
   146d4:	78 f0       	brcs	.+30     	; 0x146f4 <__divsf3_pse+0x86>
   146d6:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <__fp_inf>
   146da:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__fp_szero>
   146de:	5f 3f       	cpi	r21, 0xFF	; 255
   146e0:	e4 f3       	brlt	.-8      	; 0x146da <__divsf3_pse+0x6c>
   146e2:	98 3e       	cpi	r25, 0xE8	; 232
   146e4:	d4 f3       	brlt	.-12     	; 0x146da <__divsf3_pse+0x6c>
   146e6:	86 95       	lsr	r24
   146e8:	77 95       	ror	r23
   146ea:	67 95       	ror	r22
   146ec:	b7 95       	ror	r27
   146ee:	f7 95       	ror	r31
   146f0:	9f 5f       	subi	r25, 0xFF	; 255
   146f2:	c9 f7       	brne	.-14     	; 0x146e6 <__divsf3_pse+0x78>
   146f4:	88 0f       	add	r24, r24
   146f6:	91 1d       	adc	r25, r1
   146f8:	96 95       	lsr	r25
   146fa:	87 95       	ror	r24
   146fc:	97 f9       	bld	r25, 7
   146fe:	08 95       	ret
   14700:	e1 e0       	ldi	r30, 0x01	; 1
   14702:	66 0f       	add	r22, r22
   14704:	77 1f       	adc	r23, r23
   14706:	88 1f       	adc	r24, r24
   14708:	bb 1f       	adc	r27, r27
   1470a:	62 17       	cp	r22, r18
   1470c:	73 07       	cpc	r23, r19
   1470e:	84 07       	cpc	r24, r20
   14710:	ba 07       	cpc	r27, r26
   14712:	20 f0       	brcs	.+8      	; 0x1471c <__divsf3_pse+0xae>
   14714:	62 1b       	sub	r22, r18
   14716:	73 0b       	sbc	r23, r19
   14718:	84 0b       	sbc	r24, r20
   1471a:	ba 0b       	sbc	r27, r26
   1471c:	ee 1f       	adc	r30, r30
   1471e:	88 f7       	brcc	.-30     	; 0x14702 <__divsf3_pse+0x94>
   14720:	e0 95       	com	r30
   14722:	08 95       	ret

00014724 <__fixsfsi>:
   14724:	0e 94 99 a3 	call	0x14732	; 0x14732 <__fixunssfsi>
   14728:	68 94       	set
   1472a:	b1 11       	cpse	r27, r1
   1472c:	0c 94 04 a2 	jmp	0x14408	; 0x14408 <__fp_szero>
   14730:	08 95       	ret

00014732 <__fixunssfsi>:
   14732:	0e 94 e9 a1 	call	0x143d2	; 0x143d2 <__fp_splitA>
   14736:	88 f0       	brcs	.+34     	; 0x1475a <__fixunssfsi+0x28>
   14738:	9f 57       	subi	r25, 0x7F	; 127
   1473a:	98 f0       	brcs	.+38     	; 0x14762 <__fixunssfsi+0x30>
   1473c:	b9 2f       	mov	r27, r25
   1473e:	99 27       	eor	r25, r25
   14740:	b7 51       	subi	r27, 0x17	; 23
   14742:	b0 f0       	brcs	.+44     	; 0x14770 <__fixunssfsi+0x3e>
__fixunssfsi():
   14744:	e1 f0       	breq	.+56     	; 0x1477e <__fixunssfsi+0x4c>
   14746:	66 0f       	add	r22, r22
   14748:	77 1f       	adc	r23, r23
   1474a:	88 1f       	adc	r24, r24
   1474c:	99 1f       	adc	r25, r25
   1474e:	1a f0       	brmi	.+6      	; 0x14756 <__fixunssfsi+0x24>
   14750:	ba 95       	dec	r27
   14752:	c9 f7       	brne	.-14     	; 0x14746 <__fixunssfsi+0x14>
   14754:	14 c0       	rjmp	.+40     	; 0x1477e <__fixunssfsi+0x4c>
   14756:	b1 30       	cpi	r27, 0x01	; 1
   14758:	91 f0       	breq	.+36     	; 0x1477e <__fixunssfsi+0x4c>
   1475a:	0e 94 03 a2 	call	0x14406	; 0x14406 <__fp_zero>
   1475e:	b1 e0       	ldi	r27, 0x01	; 1
   14760:	08 95       	ret
   14762:	0c 94 03 a2 	jmp	0x14406	; 0x14406 <__fp_zero>
   14766:	67 2f       	mov	r22, r23
   14768:	78 2f       	mov	r23, r24
   1476a:	88 27       	eor	r24, r24
   1476c:	b8 5f       	subi	r27, 0xF8	; 248
   1476e:	39 f0       	breq	.+14     	; 0x1477e <__fixunssfsi+0x4c>
   14770:	b9 3f       	cpi	r27, 0xF9	; 249
   14772:	cc f3       	brlt	.-14     	; 0x14766 <__fixunssfsi+0x34>
   14774:	86 95       	lsr	r24
   14776:	77 95       	ror	r23
   14778:	67 95       	ror	r22
   1477a:	b3 95       	inc	r27
   1477c:	d9 f7       	brne	.-10     	; 0x14774 <__fixunssfsi+0x42>
   1477e:	3e f4       	brtc	.+14     	; 0x1478e <__fixunssfsi+0x5c>
   14780:	90 95       	com	r25
   14782:	80 95       	com	r24
   14784:	70 95       	com	r23
   14786:	61 95       	neg	r22
   14788:	7f 4f       	sbci	r23, 0xFF	; 255
   1478a:	8f 4f       	sbci	r24, 0xFF	; 255
   1478c:	9f 4f       	sbci	r25, 0xFF	; 255
   1478e:	08 95       	ret

00014790 <__gesf2>:
__gesf2():
   14790:	0e 94 28 a1 	call	0x14250	; 0x14250 <__fp_cmp>
   14794:	08 f4       	brcc	.+2      	; 0x14798 <__gesf2+0x8>
   14796:	8f ef       	ldi	r24, 0xFF	; 255
   14798:	08 95       	ret

0001479a <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1479a:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1479c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1479e:	04 c0       	rjmp	.+8      	; 0x147a8 <__udivmodqi4_ep>

000147a0 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   147a0:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   147a2:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   147a4:	08 f0       	brcs	.+2      	; 0x147a8 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   147a6:	96 1b       	sub	r25, r22

000147a8 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   147a8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   147aa:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   147ac:	c9 f7       	brne	.-14     	; 0x147a0 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   147ae:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   147b0:	08 95       	ret

000147b2 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   147b2:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   147b4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   147b6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   147b8:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   147ba:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   147bc:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   147be:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   147c0:	19 94       	eijmp

000147c2 <realloc>:
realloc():
   147c2:	4f 92       	push	r4
   147c4:	5f 92       	push	r5
   147c6:	6f 92       	push	r6
   147c8:	7f 92       	push	r7
   147ca:	8f 92       	push	r8
   147cc:	9f 92       	push	r9
   147ce:	af 92       	push	r10
   147d0:	bf 92       	push	r11
   147d2:	cf 92       	push	r12
   147d4:	df 92       	push	r13
   147d6:	ef 92       	push	r14
   147d8:	ff 92       	push	r15
   147da:	0f 93       	push	r16
   147dc:	1f 93       	push	r17
   147de:	cf 93       	push	r28
   147e0:	df 93       	push	r29
   147e2:	8c 01       	movw	r16, r24
   147e4:	00 97       	sbiw	r24, 0x00	; 0
   147e6:	99 f4       	brne	.+38     	; 0x1480e <realloc+0x4c>
   147e8:	cb 01       	movw	r24, r22
   147ea:	df 91       	pop	r29
   147ec:	cf 91       	pop	r28
   147ee:	1f 91       	pop	r17
   147f0:	0f 91       	pop	r16
   147f2:	ff 90       	pop	r15
   147f4:	ef 90       	pop	r14
   147f6:	df 90       	pop	r13
   147f8:	cf 90       	pop	r12
   147fa:	bf 90       	pop	r11
   147fc:	af 90       	pop	r10
   147fe:	9f 90       	pop	r9
   14800:	8f 90       	pop	r8
   14802:	7f 90       	pop	r7
   14804:	6f 90       	pop	r6
   14806:	5f 90       	pop	r5
   14808:	4f 90       	pop	r4
   1480a:	0c 94 b5 9c 	jmp	0x1396a	; 0x1396a <malloc>
   1480e:	fc 01       	movw	r30, r24
   14810:	e6 0f       	add	r30, r22
   14812:	f7 1f       	adc	r31, r23
   14814:	9c 01       	movw	r18, r24
   14816:	22 50       	subi	r18, 0x02	; 2
   14818:	31 09       	sbc	r19, r1
   1481a:	e2 17       	cp	r30, r18
   1481c:	f3 07       	cpc	r31, r19
   1481e:	08 f4       	brcc	.+2      	; 0x14822 <realloc+0x60>
   14820:	ae c0       	rjmp	.+348    	; 0x1497e <realloc+0x1bc>
   14822:	d9 01       	movw	r26, r18
   14824:	cd 91       	ld	r28, X+
   14826:	dc 91       	ld	r29, X
   14828:	11 97       	sbiw	r26, 0x01	; 1
   1482a:	c6 17       	cp	r28, r22
   1482c:	d7 07       	cpc	r29, r23
   1482e:	20 f1       	brcs	.+72     	; 0x14878 <realloc+0xb6>
   14830:	c5 30       	cpi	r28, 0x05	; 5
   14832:	d1 05       	cpc	r29, r1
   14834:	78 f0       	brcs	.+30     	; 0x14854 <realloc+0x92>
   14836:	ce 01       	movw	r24, r28
   14838:	04 97       	sbiw	r24, 0x04	; 4
   1483a:	86 17       	cp	r24, r22
   1483c:	97 07       	cpc	r25, r23
   1483e:	50 f0       	brcs	.+20     	; 0x14854 <realloc+0x92>
   14840:	c6 1b       	sub	r28, r22
   14842:	d7 0b       	sbc	r29, r23
   14844:	22 97       	sbiw	r28, 0x02	; 2
   14846:	c1 93       	st	Z+, r28
   14848:	d1 93       	st	Z+, r29
   1484a:	6d 93       	st	X+, r22
   1484c:	7c 93       	st	X, r23
   1484e:	cf 01       	movw	r24, r30
   14850:	0e 94 51 9d 	call	0x13aa2	; 0x13aa2 <free>
   14854:	c8 01       	movw	r24, r16
   14856:	df 91       	pop	r29
   14858:	cf 91       	pop	r28
   1485a:	1f 91       	pop	r17
   1485c:	0f 91       	pop	r16
   1485e:	ff 90       	pop	r15
   14860:	ef 90       	pop	r14
   14862:	df 90       	pop	r13
   14864:	cf 90       	pop	r12
   14866:	bf 90       	pop	r11
   14868:	af 90       	pop	r10
   1486a:	9f 90       	pop	r9
   1486c:	8f 90       	pop	r8
   1486e:	7f 90       	pop	r7
   14870:	6f 90       	pop	r6
   14872:	5f 90       	pop	r5
   14874:	4f 90       	pop	r4
   14876:	08 95       	ret
   14878:	5b 01       	movw	r10, r22
   1487a:	ac 1a       	sub	r10, r28
   1487c:	bd 0a       	sbc	r11, r29
   1487e:	4c 01       	movw	r8, r24
   14880:	8c 0e       	add	r8, r28
   14882:	9d 1e       	adc	r9, r29
   14884:	a0 91 4f 13 	lds	r26, 0x134F	; 0x80134f <__flp>
   14888:	b0 91 50 13 	lds	r27, 0x1350	; 0x801350 <__flp+0x1>
   1488c:	51 2c       	mov	r5, r1
   1488e:	41 2c       	mov	r4, r1
   14890:	f1 2c       	mov	r15, r1
   14892:	e1 2c       	mov	r14, r1
   14894:	10 97       	sbiw	r26, 0x00	; 0
   14896:	31 f5       	brne	.+76     	; 0x148e4 <realloc+0x122>
   14898:	80 91 4d 13 	lds	r24, 0x134D	; 0x80134d <__brkval>
   1489c:	90 91 4e 13 	lds	r25, 0x134E	; 0x80134e <__brkval+0x1>
   148a0:	88 15       	cp	r24, r8
   148a2:	99 05       	cpc	r25, r9
   148a4:	09 f0       	breq	.+2      	; 0x148a8 <realloc+0xe6>
   148a6:	5c c0       	rjmp	.+184    	; 0x14960 <realloc+0x19e>
   148a8:	46 16       	cp	r4, r22
   148aa:	57 06       	cpc	r5, r23
   148ac:	08 f0       	brcs	.+2      	; 0x148b0 <realloc+0xee>
   148ae:	58 c0       	rjmp	.+176    	; 0x14960 <realloc+0x19e>
   148b0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   148b4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   148b8:	00 97       	sbiw	r24, 0x00	; 0
   148ba:	41 f4       	brne	.+16     	; 0x148cc <realloc+0x10a>
   148bc:	8d b7       	in	r24, 0x3d	; 61
   148be:	9e b7       	in	r25, 0x3e	; 62
   148c0:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   148c4:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   148c8:	84 1b       	sub	r24, r20
   148ca:	95 0b       	sbc	r25, r21
   148cc:	e8 17       	cp	r30, r24
   148ce:	f9 07       	cpc	r31, r25
   148d0:	08 f0       	brcs	.+2      	; 0x148d4 <realloc+0x112>
   148d2:	55 c0       	rjmp	.+170    	; 0x1497e <realloc+0x1bc>
   148d4:	f0 93 4e 13 	sts	0x134E, r31	; 0x80134e <__brkval+0x1>
   148d8:	e0 93 4d 13 	sts	0x134D, r30	; 0x80134d <__brkval>
   148dc:	f9 01       	movw	r30, r18
   148de:	71 83       	std	Z+1, r23	; 0x01
   148e0:	60 83       	st	Z, r22
   148e2:	b8 cf       	rjmp	.-144    	; 0x14854 <realloc+0x92>
   148e4:	8d 91       	ld	r24, X+
   148e6:	9c 91       	ld	r25, X
   148e8:	11 97       	sbiw	r26, 0x01	; 1
   148ea:	12 96       	adiw	r26, 0x02	; 2
   148ec:	6c 90       	ld	r6, X
   148ee:	12 97       	sbiw	r26, 0x02	; 2
   148f0:	13 96       	adiw	r26, 0x03	; 3
   148f2:	7c 90       	ld	r7, X
   148f4:	13 97       	sbiw	r26, 0x03	; 3
   148f6:	a8 15       	cp	r26, r8
   148f8:	b9 05       	cpc	r27, r9
   148fa:	59 f5       	brne	.+86     	; 0x14952 <realloc+0x190>
   148fc:	6c 01       	movw	r12, r24
   148fe:	42 e0       	ldi	r20, 0x02	; 2
   14900:	c4 0e       	add	r12, r20
   14902:	d1 1c       	adc	r13, r1
   14904:	ca 14       	cp	r12, r10
   14906:	db 04       	cpc	r13, r11
   14908:	20 f1       	brcs	.+72     	; 0x14952 <realloc+0x190>
   1490a:	ac 01       	movw	r20, r24
   1490c:	4a 19       	sub	r20, r10
   1490e:	5b 09       	sbc	r21, r11
   14910:	da 01       	movw	r26, r20
   14912:	12 96       	adiw	r26, 0x02	; 2
   14914:	15 97       	sbiw	r26, 0x05	; 5
   14916:	80 f0       	brcs	.+32     	; 0x14938 <realloc+0x176>
   14918:	62 82       	std	Z+2, r6	; 0x02
   1491a:	73 82       	std	Z+3, r7	; 0x03
   1491c:	51 83       	std	Z+1, r21	; 0x01
   1491e:	40 83       	st	Z, r20
   14920:	d9 01       	movw	r26, r18
   14922:	6d 93       	st	X+, r22
   14924:	7c 93       	st	X, r23
   14926:	e1 14       	cp	r14, r1
   14928:	f1 04       	cpc	r15, r1
   1492a:	71 f0       	breq	.+28     	; 0x14948 <realloc+0x186>
   1492c:	d7 01       	movw	r26, r14
   1492e:	13 96       	adiw	r26, 0x03	; 3
   14930:	fc 93       	st	X, r31
   14932:	ee 93       	st	-X, r30
   14934:	12 97       	sbiw	r26, 0x02	; 2
   14936:	8e cf       	rjmp	.-228    	; 0x14854 <realloc+0x92>
   14938:	22 96       	adiw	r28, 0x02	; 2
   1493a:	8c 0f       	add	r24, r28
   1493c:	9d 1f       	adc	r25, r29
   1493e:	f9 01       	movw	r30, r18
   14940:	91 83       	std	Z+1, r25	; 0x01
   14942:	80 83       	st	Z, r24
   14944:	f3 01       	movw	r30, r6
   14946:	ef cf       	rjmp	.-34     	; 0x14926 <realloc+0x164>
   14948:	f0 93 50 13 	sts	0x1350, r31	; 0x801350 <__flp+0x1>
   1494c:	e0 93 4f 13 	sts	0x134F, r30	; 0x80134f <__flp>
   14950:	81 cf       	rjmp	.-254    	; 0x14854 <realloc+0x92>
   14952:	48 16       	cp	r4, r24
   14954:	59 06       	cpc	r5, r25
   14956:	08 f4       	brcc	.+2      	; 0x1495a <realloc+0x198>
   14958:	2c 01       	movw	r4, r24
   1495a:	7d 01       	movw	r14, r26
   1495c:	d3 01       	movw	r26, r6
   1495e:	9a cf       	rjmp	.-204    	; 0x14894 <realloc+0xd2>
   14960:	cb 01       	movw	r24, r22
   14962:	0e 94 b5 9c 	call	0x1396a	; 0x1396a <malloc>
   14966:	7c 01       	movw	r14, r24
   14968:	00 97       	sbiw	r24, 0x00	; 0
   1496a:	49 f0       	breq	.+18     	; 0x1497e <realloc+0x1bc>
   1496c:	ae 01       	movw	r20, r28
   1496e:	b8 01       	movw	r22, r16
   14970:	0e 94 c7 a4 	call	0x1498e	; 0x1498e <memcpy>
   14974:	c8 01       	movw	r24, r16
   14976:	0e 94 51 9d 	call	0x13aa2	; 0x13aa2 <free>
   1497a:	87 01       	movw	r16, r14
   1497c:	6b cf       	rjmp	.-298    	; 0x14854 <realloc+0x92>
   1497e:	10 e0       	ldi	r17, 0x00	; 0
   14980:	00 e0       	ldi	r16, 0x00	; 0
   14982:	68 cf       	rjmp	.-304    	; 0x14854 <realloc+0x92>

00014984 <abort>:
abort():
   14984:	81 e0       	ldi	r24, 0x01	; 1
   14986:	90 e0       	ldi	r25, 0x00	; 0
   14988:	f8 94       	cli
   1498a:	0c 94 57 a5 	jmp	0x14aae	; 0x14aae <_exit>

0001498e <memcpy>:
memcpy():
   1498e:	fb 01       	movw	r30, r22
   14990:	dc 01       	movw	r26, r24
   14992:	02 c0       	rjmp	.+4      	; 0x14998 <memcpy+0xa>
   14994:	01 90       	ld	r0, Z+
   14996:	0d 92       	st	X+, r0
   14998:	41 50       	subi	r20, 0x01	; 1
   1499a:	50 40       	sbci	r21, 0x00	; 0
   1499c:	d8 f7       	brcc	.-10     	; 0x14994 <memcpy+0x6>
   1499e:	08 95       	ret

000149a0 <strcat>:
strcat():
   149a0:	fb 01       	movw	r30, r22
   149a2:	dc 01       	movw	r26, r24
   149a4:	0d 90       	ld	r0, X+
   149a6:	00 20       	and	r0, r0
   149a8:	e9 f7       	brne	.-6      	; 0x149a4 <strcat+0x4>
   149aa:	11 97       	sbiw	r26, 0x01	; 1
   149ac:	01 90       	ld	r0, Z+
   149ae:	0d 92       	st	X+, r0
   149b0:	00 20       	and	r0, r0
   149b2:	e1 f7       	brne	.-8      	; 0x149ac <strcat+0xc>
   149b4:	08 95       	ret

000149b6 <strchr>:
strchr():
   149b6:	fc 01       	movw	r30, r24
   149b8:	81 91       	ld	r24, Z+
   149ba:	86 17       	cp	r24, r22
   149bc:	21 f0       	breq	.+8      	; 0x149c6 <strchr+0x10>
   149be:	88 23       	and	r24, r24
   149c0:	d9 f7       	brne	.-10     	; 0x149b8 <strchr+0x2>
   149c2:	99 27       	eor	r25, r25
   149c4:	08 95       	ret
   149c6:	31 97       	sbiw	r30, 0x01	; 1
   149c8:	cf 01       	movw	r24, r30
   149ca:	08 95       	ret

000149cc <strcmp>:
strcmp():
   149cc:	fb 01       	movw	r30, r22
   149ce:	dc 01       	movw	r26, r24
   149d0:	8d 91       	ld	r24, X+
   149d2:	01 90       	ld	r0, Z+
   149d4:	80 19       	sub	r24, r0
   149d6:	01 10       	cpse	r0, r1
   149d8:	d9 f3       	breq	.-10     	; 0x149d0 <strcmp+0x4>
   149da:	99 0b       	sbc	r25, r25
   149dc:	08 95       	ret

000149de <strcpy>:
strcpy():
   149de:	fb 01       	movw	r30, r22
   149e0:	dc 01       	movw	r26, r24
   149e2:	01 90       	ld	r0, Z+
   149e4:	0d 92       	st	X+, r0
   149e6:	00 20       	and	r0, r0
   149e8:	e1 f7       	brne	.-8      	; 0x149e2 <strcpy+0x4>
   149ea:	08 95       	ret

000149ec <strncmp>:
strncmp():
   149ec:	fb 01       	movw	r30, r22
   149ee:	dc 01       	movw	r26, r24
   149f0:	41 50       	subi	r20, 0x01	; 1
   149f2:	50 40       	sbci	r21, 0x00	; 0
   149f4:	30 f0       	brcs	.+12     	; 0x14a02 <strncmp+0x16>
   149f6:	8d 91       	ld	r24, X+
   149f8:	01 90       	ld	r0, Z+
   149fa:	80 19       	sub	r24, r0
   149fc:	19 f4       	brne	.+6      	; 0x14a04 <strncmp+0x18>
   149fe:	00 20       	and	r0, r0
   14a00:	b9 f7       	brne	.-18     	; 0x149f0 <strncmp+0x4>
   14a02:	88 1b       	sub	r24, r24
   14a04:	99 0b       	sbc	r25, r25
   14a06:	08 95       	ret

00014a08 <strncpy>:
strncpy():
   14a08:	fb 01       	movw	r30, r22
   14a0a:	dc 01       	movw	r26, r24
   14a0c:	41 50       	subi	r20, 0x01	; 1
   14a0e:	50 40       	sbci	r21, 0x00	; 0
   14a10:	48 f0       	brcs	.+18     	; 0x14a24 <strncpy+0x1c>
   14a12:	01 90       	ld	r0, Z+
   14a14:	0d 92       	st	X+, r0
   14a16:	00 20       	and	r0, r0
   14a18:	c9 f7       	brne	.-14     	; 0x14a0c <strncpy+0x4>
   14a1a:	01 c0       	rjmp	.+2      	; 0x14a1e <strncpy+0x16>
   14a1c:	1d 92       	st	X+, r1
   14a1e:	41 50       	subi	r20, 0x01	; 1
   14a20:	50 40       	sbci	r21, 0x00	; 0
   14a22:	e0 f7       	brcc	.-8      	; 0x14a1c <strncpy+0x14>
   14a24:	08 95       	ret

00014a26 <printf>:
printf():
   14a26:	cf 93       	push	r28
   14a28:	df 93       	push	r29
   14a2a:	cd b7       	in	r28, 0x3d	; 61
   14a2c:	de b7       	in	r29, 0x3e	; 62
   14a2e:	ae 01       	movw	r20, r28
   14a30:	4a 5f       	subi	r20, 0xFA	; 250
   14a32:	5f 4f       	sbci	r21, 0xFF	; 255
   14a34:	fa 01       	movw	r30, r20
   14a36:	61 91       	ld	r22, Z+
   14a38:	71 91       	ld	r23, Z+
   14a3a:	af 01       	movw	r20, r30
   14a3c:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <__iob+0x2>
   14a40:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <__iob+0x3>
   14a44:	0e 94 1e 99 	call	0x1323c	; 0x1323c <vfprintf>
   14a48:	df 91       	pop	r29
   14a4a:	cf 91       	pop	r28
   14a4c:	08 95       	ret

00014a4e <sprintf>:
sprintf():
   14a4e:	0f 93       	push	r16
   14a50:	1f 93       	push	r17
   14a52:	cf 93       	push	r28
   14a54:	df 93       	push	r29
   14a56:	cd b7       	in	r28, 0x3d	; 61
   14a58:	de b7       	in	r29, 0x3e	; 62
   14a5a:	2e 97       	sbiw	r28, 0x0e	; 14
   14a5c:	0f b6       	in	r0, 0x3f	; 63
   14a5e:	f8 94       	cli
   14a60:	de bf       	out	0x3e, r29	; 62
   14a62:	0f be       	out	0x3f, r0	; 63
   14a64:	cd bf       	out	0x3d, r28	; 61
   14a66:	0e 89       	ldd	r16, Y+22	; 0x16
   14a68:	1f 89       	ldd	r17, Y+23	; 0x17
   14a6a:	86 e0       	ldi	r24, 0x06	; 6
   14a6c:	8c 83       	std	Y+4, r24	; 0x04
   14a6e:	1a 83       	std	Y+2, r17	; 0x02
   14a70:	09 83       	std	Y+1, r16	; 0x01
   14a72:	8f ef       	ldi	r24, 0xFF	; 255
   14a74:	9f e7       	ldi	r25, 0x7F	; 127
   14a76:	9e 83       	std	Y+6, r25	; 0x06
   14a78:	8d 83       	std	Y+5, r24	; 0x05
   14a7a:	ae 01       	movw	r20, r28
   14a7c:	46 5e       	subi	r20, 0xE6	; 230
   14a7e:	5f 4f       	sbci	r21, 0xFF	; 255
   14a80:	68 8d       	ldd	r22, Y+24	; 0x18
   14a82:	79 8d       	ldd	r23, Y+25	; 0x19
   14a84:	ce 01       	movw	r24, r28
   14a86:	01 96       	adiw	r24, 0x01	; 1
   14a88:	0e 94 1e 99 	call	0x1323c	; 0x1323c <vfprintf>
   14a8c:	2f 81       	ldd	r18, Y+7	; 0x07
   14a8e:	38 85       	ldd	r19, Y+8	; 0x08
   14a90:	02 0f       	add	r16, r18
   14a92:	13 1f       	adc	r17, r19
   14a94:	f8 01       	movw	r30, r16
   14a96:	10 82       	st	Z, r1
   14a98:	2e 96       	adiw	r28, 0x0e	; 14
   14a9a:	0f b6       	in	r0, 0x3f	; 63
   14a9c:	f8 94       	cli
   14a9e:	de bf       	out	0x3e, r29	; 62
   14aa0:	0f be       	out	0x3f, r0	; 63
   14aa2:	cd bf       	out	0x3d, r28	; 61
   14aa4:	df 91       	pop	r29
   14aa6:	cf 91       	pop	r28
   14aa8:	1f 91       	pop	r17
   14aaa:	0f 91       	pop	r16
   14aac:	08 95       	ret

00014aae <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   14aae:	f8 94       	cli

00014ab0 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   14ab0:	ff cf       	rjmp	.-2      	; 0x14ab0 <__stop_program>
