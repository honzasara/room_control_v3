
/tmp/arduino_build_832911/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__ctors_end>
       4:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
       8:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
       c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      10:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      14:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      18:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      1c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      20:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      24:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      28:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      2c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      30:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      34:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      38:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      3c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      40:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      44:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      48:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      4c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      50:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      54:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      58:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      5c:	0c 94 70 94 	jmp	0x128e0	; 0x128e0 <__vector_23>
      60:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      64:	0c 94 e4 94 	jmp	0x129c8	; 0x129c8 <__vector_25>
      68:	0c 94 ba 94 	jmp	0x12974	; 0x12974 <__vector_26>
      6c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      70:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      74:	0c 94 1a 95 	jmp	0x12a34	; 0x12a34 <__vector_29>
      78:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      7c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      80:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      84:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      88:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      8c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      90:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      94:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      98:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      9c:	0c 94 98 96 	jmp	0x12d30	; 0x12d30 <__vector_39>
      a0:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      a4:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      a8:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      ac:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      b0:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      b4:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      b8:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      bc:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      c0:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      c4:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>
      c8:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 33 22 	jmp	0x4466	; 0x4466 <EthernetClient::write(unsigned char)>
      d0:	0c 94 54 62 	jmp	0xc4a8	; 0xc4a8 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>
      d4:	0c 94 d7 56 	jmp	0xadae	; 0xadae <helper_thermostat_set_pid_d(unsigned char, float)>
      d8:	0c 94 84 60 	jmp	0xc108	; 0xc108 <display_menu_tds_set_offset(unsigned char, unsigned char)>
      dc:	0c 94 a8 87 	jmp	0x10f50	; 0x10f50 <EthernetUDP::remotePort()>
      e0:	0c 94 8f 5f 	jmp	0xbf1e	; 0xbf1e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      e4:	0c 94 4a 61 	jmp	0xc294	; 0xc294 <menu_tds_save_offset(unsigned char, unsigned char)>
      e8:	0c 94 e6 2b 	jmp	0x57cc	; 0x57cc <EthernetClient::read()>
      ec:	0c 94 ea 56 	jmp	0xadd4	; 0xadd4 <helper_thermostat_set_pid_i(unsigned char, float)>
      f0:	0c 94 3e 90 	jmp	0x1207c	; 0x1207c <turnOffPWM.lto_priv.233+0x3c>
      f4:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <click_keyboard_number(unsigned char, unsigned char, unsigned char)>
      f8:	0c 94 72 29 	jmp	0x52e4	; 0x52e4 <menu_redraw_update_temp(unsigned char, unsigned char)>
      fc:	0c 94 4b 29 	jmp	0x5296	; 0x5296 <a2d_complete(unsigned char, unsigned int)>
     100:	0c 94 2a 58 	jmp	0xb054	; 0xb054 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>
     104:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>
     108:	0c 94 2e 29 	jmp	0x525c	; 0x525c <display_function_vertical_slider_dec(unsigned char, unsigned char)>
     10c:	0c 94 00 36 	jmp	0x6c00	; 0x6c00 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     110:	0c 94 56 90 	jmp	0x120ac	; 0x120ac <turnOffPWM.lto_priv.233+0x6c>
     114:	0c 94 e2 2b 	jmp	0x57c4	; 0x57c4 <EthernetClient::read(unsigned char*, unsigned int)>
     118:	0c 94 03 58 	jmp	0xb006	; 0xb006 <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)>
     11c:	0c 94 14 61 	jmp	0xc228	; 0xc228 <menu_tds_save_period(unsigned char, unsigned char)>
     120:	0c 94 e1 60 	jmp	0xc1c2	; 0xc1c2 <menu_tds_save_name(unsigned char, unsigned char)>
     124:	0c 94 b1 34 	jmp	0x6962	; 0x6962 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     128:	0c 94 15 87 	jmp	0x10e2a	; 0x10e2a <TwoWire::write(unsigned char const*, unsigned int)>
     12c:	0c 94 fd 56 	jmp	0xadfa	; 0xadfa <helper_thermostat_set_pid_p(unsigned char, float)>
     130:	0c 94 c2 59 	jmp	0xb384	; 0xb384 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     134:	0c 94 df 59 	jmp	0xb3be	; 0xb3be <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 06 87 	jmp	0x10e0c	; 0x10e0c <TwoWire::peek()>
     13c:	0c 94 29 5b 	jmp	0xb652	; 0xb652 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>
     140:	0c 94 cd 5a 	jmp	0xb59a	; 0xb59a <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>
     144:	0c 94 b2 a1 	jmp	0x14364	; 0x14364 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     148:	0c 94 12 67 	jmp	0xce24	; 0xce24 <menu_rtds_create_name(unsigned char, unsigned char)>
     14c:	0c 94 49 22 	jmp	0x4492	; 0x4492 <EthernetClient::operator!=(EthernetClient const&)>
     150:	0c 94 31 34 	jmp	0x6862	; 0x6862 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     154:	0c 94 c8 64 	jmp	0xc990	; 0xc990 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     158:	0c 94 7b 29 	jmp	0x52f6	; 0x52f6 <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     15c:	0c 94 73 9f 	jmp	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
     160:	0c 94 84 90 	jmp	0x12108	; 0x12108 <turnOffPWM.lto_priv.233+0xc8>
     164:	0c 94 a1 a0 	jmp	0x14142	; 0x14142 <EthernetUDP::parsePacket()>
     168:	0c 94 a4 87 	jmp	0x10f48	; 0x10f48 <EthernetUDP::available()>
     16c:	0c 94 9b 85 	jmp	0x10b36	; 0x10b36 <TwoWire::onReceiveService(unsigned char*, int)>
     170:	0c 94 b7 29 	jmp	0x536e	; 0x536e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     174:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     178:	0c 94 f9 62 	jmp	0xc5f2	; 0xc5f2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     17c:	0c 94 39 5c 	jmp	0xb872	; 0xb872 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 f7 5d 	jmp	0xbbee	; 0xbbee <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     184:	0c 94 a5 2b 	jmp	0x574a	; 0x574a <returnnullfceargs(unsigned int, unsigned int)>
     188:	0c 94 19 37 	jmp	0x6e32	; 0x6e32 <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>
     18c:	0c 94 cf 59 	jmp	0xb39e	; 0xb39e <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <EthernetClient::connect(char const*, unsigned int)>
     194:	0c 94 96 37 	jmp	0x6f2c	; 0x6f2c <EthernetClient::write(unsigned char const*, unsigned int)>
     198:	0c 94 dc 28 	jmp	0x51b8	; 0x51b8 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 4e a1 	jmp	0x1429c	; 0x1429c <EthernetUDP::begin(unsigned int)>
     1a0:	0c 94 a7 66 	jmp	0xcd4e	; 0xcd4e <menu_rtds_update_name(unsigned char, unsigned char)>
     1a4:	0c 94 cd 85 	jmp	0x10b9a	; 0x10b9a <HardwareSerial::available()>
     1a8:	0c 94 d1 87 	jmp	0x10fa2	; 0x10fa2 <EthernetClient::flush()>
     1ac:	0c 94 52 90 	jmp	0x120a4	; 0x120a4 <turnOffPWM.lto_priv.233+0x64>
     1b0:	0c 94 23 37 	jmp	0x6e46	; 0x6e46 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>
     1b4:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <LCDWIKI_KBV::Get_Height() const>
     1b8:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 77 a0 	jmp	0x140ee	; 0x140ee <EthernetUDP::read()>
     1c0:	0c 94 08 62 	jmp	0xc410	; 0xc410 <printf_via_mqtt(char, __file*)>
     1c4:	0c 94 26 2c 	jmp	0x584c	; 0x584c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     1c8:	0c 94 fd 37 	jmp	0x6ffa	; 0x6ffa <EthernetClient::connect(IPAddress, unsigned int)>
     1cc:	0c 94 18 24 	jmp	0x4830	; 0x4830 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     1d0:	0c 94 58 a0 	jmp	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
     1d4:	0c 94 7c a1 	jmp	0x142f8	; 0x142f8 <EthernetUDP::stop()>
     1d8:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 87 62 	jmp	0xc50e	; 0xc50e <click_rtds_add_sensor(unsigned char, unsigned char)>
     1e0:	0c 94 89 a1 	jmp	0x14312	; 0x14312 <EthernetUDP::endPacket()>
     1e4:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <display_enable_show(unsigned char, unsigned char)>
     1e8:	0c 94 4c 90 	jmp	0x12098	; 0x12098 <turnOffPWM.lto_priv.233+0x58>
     1ec:	0c 94 e1 5a 	jmp	0xb5c2	; 0xb5c2 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     1f0:	0c 94 6d 85 	jmp	0x10ada	; 0x10ada <TwoWire::read()>
     1f4:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     1f8:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     1fc:	0c 94 7c 87 	jmp	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
     200:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <nullfce()>
     204:	0c 94 42 87 	jmp	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
     208:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <EthernetUDP::read(char*, unsigned int)>
     20c:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <display_function_vertical_slider_inc(unsigned char, unsigned char)>
     210:	0c 94 71 29 	jmp	0x52e2	; 0x52e2 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     214:	0c 94 13 31 	jmp	0x6226	; 0x6226 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>
     218:	0c 94 1e 37 	jmp	0x6e3c	; 0x6e3c <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>
     21c:	0c 94 7a 5e 	jmp	0xbcf4	; 0xbcf4 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     220:	0c 94 80 90 	jmp	0x12100	; 0x12100 <turnOffPWM.lto_priv.233+0xc0>
     224:	0c 94 9c 85 	jmp	0x10b38	; 0x10b38 <HardwareSerial::availableForWrite()>
     228:	0c 94 09 5a 	jmp	0xb412	; 0xb412 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     22c:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     230:	0c 94 41 86 	jmp	0x10c82	; 0x10c82 <HardwareSerial::flush()>
     234:	0c 94 ec 5d 	jmp	0xbbd8	; 0xbbd8 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     238:	0c 94 81 37 	jmp	0x6f02	; 0x6f02 <serial_putc(char, __file*)>
     23c:	0c 94 ee 30 	jmp	0x61dc	; 0x61dc <display_element_set_string_del_char(unsigned char, unsigned char)>
     240:	0c 94 3f 32 	jmp	0x647e	; 0x647e <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     244:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     248:	0c 94 18 57 	jmp	0xae30	; 0xae30 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>
     24c:	0c 94 84 29 	jmp	0x5308	; 0x5308 <menu_redraw_time05s(unsigned char, unsigned char)>
     250:	0c 94 42 67 	jmp	0xce84	; 0xce84 <click_rtds_subscribe(unsigned char, unsigned char)>
     254:	0c 94 90 29 	jmp	0x5320	; 0x5320 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     258:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)>
     25c:	0c 94 ab 56 	jmp	0xad56	; 0xad56 <helper_thermostat_set_pid_time(unsigned char, float, unsigned char)>
     260:	0c 94 1d 5d 	jmp	0xba3a	; 0xba3a <tds_associate(unsigned char)>
     264:	0c 94 84 59 	jmp	0xb308	; 0xb308 <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>
     268:	0c 94 9a 85 	jmp	0x10b34	; 0x10b34 <TwoWire::onRequestService()>
     26c:	0c 94 83 90 	jmp	0x12106	; 0x12106 <turnOffPWM.lto_priv.233+0xc6>
     270:	0c 94 1e a2 	jmp	0x1443c	; 0x1443c <EthernetClient::stop()>
     274:	0c 94 ab 85 	jmp	0x10b56	; 0x10b56 <HardwareSerial::read()>
     278:	0c 94 b9 5a 	jmp	0xb572	; 0xb572 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>
     27c:	0c 94 5c 90 	jmp	0x120b8	; 0x120b8 <turnOffPWM.lto_priv.233+0x78>
     280:	0c 94 c9 87 	jmp	0x10f92	; 0x10f92 <EthernetClient::operator bool()>
     284:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <dialog_set_variable_button_click(unsigned char, unsigned char, unsigned char)>
     288:	0c 94 a7 86 	jmp	0x10d4e	; 0x10d4e <Print::write(unsigned char const*, unsigned int)>
     28c:	0c 94 32 60 	jmp	0xc064	; 0xc064 <display_menu_tds_set_period(unsigned char, unsigned char)>
     290:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     294:	0c 94 bc 2b 	jmp	0x5778	; 0x5778 <EthernetClient::peek()>
     298:	0c 94 86 63 	jmp	0xc70c	; 0xc70c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     29c:	0c 94 74 37 	jmp	0x6ee8	; 0x6ee8 <click_dialog_button_yes(unsigned char, unsigned char)>
     2a0:	0c 94 fa 85 	jmp	0x10bf4	; 0x10bf4 <HardwareSerial::write(unsigned char)>
     2a4:	0c 94 4f 37 	jmp	0x6e9e	; 0x6e9e <dialog_set_string_button_click(unsigned char, unsigned char, unsigned char)>
     2a8:	0c 94 bc 87 	jmp	0x10f78	; 0x10f78 <UDP::beginMulticast(IPAddress, unsigned int)>
     2ac:	0c 94 6a 90 	jmp	0x120d4	; 0x120d4 <turnOffPWM.lto_priv.233+0x94>
     2b0:	0c 94 8e 87 	jmp	0x10f1c	; 0x10f1c <EthernetUDP::write(unsigned char)>
     2b4:	0c 94 b6 28 	jmp	0x516c	; 0x516c <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     2b8:	0c 94 98 5b 	jmp	0xb730	; 0xb730 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     2bc:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)>
     2c0:	0c 94 c7 29 	jmp	0x538e	; 0x538e <get_function_budik_enabled(unsigned char)>
     2c4:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 0b 3d 	jmp	0x7a16	; 0x7a16 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     2cc:	0c 94 b2 63 	jmp	0xc764	; 0xc764 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2d0:	0c 94 44 90 	jmp	0x12088	; 0x12088 <turnOffPWM.lto_priv.233+0x48>
     2d4:	0c 94 b9 31 	jmp	0x6372	; 0x6372 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2d8:	0c 94 cf 28 	jmp	0x519e	; 0x519e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     2dc:	0c 94 bf 85 	jmp	0x10b7e	; 0x10b7e <HardwareSerial::peek()>
     2e0:	0c 94 ff 89 	jmp	0x113fe	; 0x113fe <EthernetUDP::beginPacket(char const*, unsigned int)>
     2e4:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     2e8:	0c 94 06 37 	jmp	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
     2ec:	0c 94 45 67 	jmp	0xce8a	; 0xce8a <mqtt_callback(char*, unsigned char*, unsigned int)>
     2f0:	0c 94 f9 35 	jmp	0x6bf2	; 0x6bf2 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2f4:	0c 94 f9 5f 	jmp	0xbff2	; 0xbff2 <display_menu_tds_set_name(unsigned char, unsigned char)>
     2f8:	0c 94 a1 5a 	jmp	0xb542	; 0xb542 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>
     2fc:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <EthernetClient::available()>
     300:	0c 94 72 90 	jmp	0x120e4	; 0x120e4 <turnOffPWM.lto_priv.233+0xa4>
     304:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     308:	0c 94 42 57 	jmp	0xae84	; 0xae84 <helper_thermostat_set_mezni(unsigned char, float)>
     30c:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <Print::availableForWrite()>
     310:	0c 94 64 90 	jmp	0x120c8	; 0x120c8 <turnOffPWM.lto_priv.233+0x88>
     314:	0c 94 60 90 	jmp	0x120c0	; 0x120c0 <turnOffPWM.lto_priv.233+0x80>
     318:	0c 94 f2 a0 	jmp	0x141e4	; 0x141e4 <EthernetUDP::peek()>
     31c:	0c 94 be 87 	jmp	0x10f7c	; 0x10f7c <EthernetClient::operator==(EthernetClient const&)>
     320:	0c 94 5c 5c 	jmp	0xb8b8	; 0xb8b8 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>
     324:	0c 94 fb a1 	jmp	0x143f6	; 0x143f6 <EthernetClient::connected()>
     328:	0c 94 83 89 	jmp	0x11306	; 0x11306 <IPAddress::printTo(Print&) const>
     32c:	0c 94 ac 87 	jmp	0x10f58	; 0x10f58 <EthernetUDP::remoteIP()>
     330:	0c 94 5a 5b 	jmp	0xb6b4	; 0xb6b4 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     334:	0c 94 21 58 	jmp	0xb042	; 0xb042 <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>
     338:	0c 94 8d 29 	jmp	0x531a	; 0x531a <click_keyboard_type(unsigned char, unsigned char)>
     33c:	0c 94 48 90 	jmp	0x12090	; 0x12090 <turnOffPWM.lto_priv.233+0x50>
     340:	0c 94 6e 90 	jmp	0x120dc	; 0x120dc <turnOffPWM.lto_priv.233+0x9c>
     344:	0c 94 93 85 	jmp	0x10b26	; 0x10b26 <TwoWire::available()>
     348:	0c 94 c5 29 	jmp	0x538a	; 0x538a <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 97 29 	jmp	0x532e	; 0x532e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     350:	0c 94 e7 5b 	jmp	0xb7ce	; 0xb7ce <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     354:	0c 94 05 87 	jmp	0x10e0a	; 0x10e0a <TwoWire::flush()>
     358:	0c 94 f6 84 	jmp	0x109ec	; 0x109ec <display_menu_rtds_update_name(unsigned char, unsigned char)>
     35c:	0c 94 78 90 	jmp	0x120f0	; 0x120f0 <turnOffPWM.lto_priv.233+0xb0>
     360:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <LCDWIKI_KBV::Get_Width() const>
     364:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>
     368:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081>
     36c:	0c 94 7c 90 	jmp	0x120f8	; 0x120f8 <turnOffPWM.lto_priv.233+0xb8>

00000370 <__trampolines_end>:
__trampolines_end():
     370:	4e 41       	sbci	r20, 0x1E	; 30
     372:	4e 49       	Address 0x0000000000000372 is out of bounds.
.word	0xffff	; ????

00000373 <pstr_inity>:
     373:	49 4e 49 54 59                                      INITY

00000378 <pstr_inf>:
     378:	49 4e 46                                            INF

0000037b <pwr_m10>:
     37b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     38b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000393 <pwr_p10>:
     393:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3a3:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     403:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     413:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     423:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     433:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     443:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     453:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     463:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     473:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     483:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     493:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4a3:	3d 27                                               ='

000004a5 <text_select_term_default_ring>:
     4a5:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     4b5:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

000004c0 <text_select_term_mode>:
     4c0:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     4d0:	61 74 6f 72 75 00                                   atoru.

000004d6 <text_nastavit_pid>:
     4d6:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000004e0 <text_assocoivat_output>:
     4e0:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000004f0 <text_assocoivat>:
     4f0:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000004ff <ring_text_setup>:
     4ff:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000509 <nastaveni_rtds_subscribe>:
     509:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

00000519 <text_rtds_novy>:
     519:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     529:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000534 <text_button_mode_cool>:
     534:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

0000053d <text_button_mode_heat>:
     53d:	54 6f 70 65 6e 69 00                                Topeni.

00000544 <nastaveni_ring_text>:
     544:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     554:	74 6f 72 75 00                                      toru.

00000559 <text_no>:
     559:	4e 65 00                                            Ne.

0000055c <text_yes>:
     55c:	41 6e 6f 00                                         Ano.

00000560 <text_special_case>:
     560:	40 00                                               @.

00000562 <text_lower_case>:
     562:	61 00                                               a.

00000564 <text_upper_case>:
     564:	41 00                                               A.

00000566 <text_delete_char>:
     566:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000570 <text_klavesnice>:
     570:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000057b <text_zrusit>:
     57b:	5a 72 75 73 69 74 00                                Zrusit.

00000582 <text_ulozit>:
     582:	55 6c 6f 7a 69 74 00                                Ulozit.

00000589 <text_upozorneni>:
     589:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000594 <nastaveni_tds_offset>:
     594:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000005a4 <nastaveni_name_sensor>:
     5a4:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000005b3 <nastaveni_delete_sensor>:
     5b3:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000005c1 <text_tds_sensors>:
     5c1:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     5d1:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000005dc <budik_text>:
     5dc:	42 75 64 69 6b 00                                   Budik.

000005e2 <text_select_default_temp>:
     5e2:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     5f2:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000005fc <button_zpet>:
     5fc:	5a 70 65 74 00                                      Zpet.

00000601 <nastaveni_default>:
     601:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000611 <nastaveni_nrf>:
     611:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

0000061f <nastaveni_site>:
     61f:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

0000062e <nastaveni_text>:
     62e:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000638 <funkce_text>:
     638:	46 75 6e 6b 63 65 00                                Funkce.

0000063f <regulator_text>:
     63f:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000649 <Menu_All>:
     649:	06 06 06 f9 3b 3f 06 22 01 96 00 aa 00 28 00 02     ....;?.".....(..
     659:	05 06 37 08 a3 2b 38 06 22 01 5a 00 aa 00 28 00     ..7..+8.".Z...(.
     669:	02 01 06 37 08 a3 2b 2e 06 22 01 1e 00 aa 00 28     ...7..+..".....(
     679:	00 02 02 06 37 08 a3 2b 00 00 00 00 00 00 00 00     ....7..+........
	...
     6f5:	00 00 00 b7 3d 0a 00 dc 00 52 00 3c 00 03 9a d6     ....=....R.<....
     705:	ff ff 00 b9 5a cd 5a 0a a3 2b 9d 3d 64 00 dc 00     ....Z.Z..+.=d...
     715:	52 00 3c 00 03 00 f8 ff ff 01 b9 5a cd 5a 0a a3     R.<........Z.Z..
     725:	2b 83 3d be 00 dc 00 52 00 3c 00 03 1f 00 ff ff     +.=....R.<......
     735:	07 b9 5a cd 5a 0a a3 2b 67 3d 18 01 dc 00 52 00     ..Z.Z..+g=....R.
     745:	3c 00 03 e0 ff ff ff 02 b9 5a cd 5a 0a a3 2b 4f     <........Z.Z..+O
     755:	3d 72 01 dc 00 52 00 3c 00 03 e0 07 ff ff 08 b9     =r...R.<........
     765:	5a cd 5a 0a a3 2b 0a 00 82 00 00 c8 64 00 00 00     Z.Z..+......d...
     775:	00 0c a7 2b a3 2b 18 01 22 01 00 00 36 00 00 00     ...+.+.."...6...
     785:	00 0c a7 2b a3 2b 0a 00 1e 00 00 b9 31 00 00 00     ...+.+......1...
     795:	00 09 a7 2b a3 2b 00 00 00 00 00 00 00 00 00 00     ...+.+..........
	...
     901:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     911:	01 01 ff ff 08 84 29 7b 29 72 29 a5 2b 2e 06 1f     ......){)r).+...
     921:	06 0a 00 28 00 be 00 28 00 02 00 a7 2b 08 a3 2b     ...(...(....+..+
     931:	11 06 0a 00 64 00 be 00 28 00 02 00 a7 2b 08 a3     ....d...(....+..
     941:	2b 01 06 0a 00 a0 00 be 00 28 00 02 00 a7 2b 08     +........(....+.
     951:	a3 2b fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37     .+........(...E7
     961:	08 a3 2b c1 3c 18 01 64 00 be 00 28 00 02 06 06     ..+.<..d...(....
     971:	37 08 a3 2b d0 3c 18 01 28 00 be 00 28 00 02 03     7..+.<..(...(...
     981:	06 37 08 a3 2b e2 05 18 01 a0 00 be 00 28 00 01     .7..+........(..
     991:	08 06 37 08 a3 2b 00 00 00 00 00 00 00 00 00 00     ..7..+..........
	...
     a3d:	18 01 22 01 00 00 36 00 00 00 00 0c a7 2b a3 2b     .."...6......+.+
	...
     bd1:	00 00 07 00 01 00 00 00 00 00 02 00 00 00 00 e0     ................
     be1:	01 40 01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b 38     .@......+.+.+.+8
     bf1:	06 fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37 08     .........(...E7.
     c01:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
     d0d:	00 00 18 01 22 01 00 00 36 00 00 00 00 0c a7 2b     ...."...6......+
     d1d:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
     d4d:	00 00 dc 05 0a 00 28 00 be 00 78 00 02 00 00 00     ......(...x.....
     d5d:	00 01 a7 2b c7 29 1a 2c 08 00 00 00 00 00 00 00     ...+.).,........
	...
     ea5:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     eb5:	01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b d0 3c fc     ......+.+.+.+.<.
     ec5:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
	...
     fe1:	18 01 22 01 00 00 36 00 00 00 00 0c a7 2b a3 2b     .."...6......+.+
     ff1:	9a 01 48 00 00 31 34 28 00 7e 00 08 a7 2b a3 2b     ..H..14(.~...+.+
    1001:	dc 00 14 00 00 3f 32 f0 00 f0 00 08 a7 2b a3 2b     .....?2......+.+
	...
    1065:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
    1075:	01 f7 5d 23 37 cf 28 08 00 00 00 00 00 00 00 00     ..]#7.(.........
	...
    1091:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 2e 29     ...+....(.(....)
    10a1:	08 a3 2b 2d 9a 01 c8 00 28 00 28 00 02 00 3a 29     ..+-....(.(...:)
    10b1:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    1175:	00 00 01 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
    1185:	01 40 01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b c1     .@......+.+.+.+.
    1195:	05 fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37 08     .........(...E7.
    11a5:	a3 2b b3 05 18 01 be 00 be 00 28 00 02 00 ec 5d     .+........(....]
    11b5:	08 a3 2b 47 3c 18 01 8c 00 be 00 28 00 02 00 32     ..+G<......(...2
    11c5:	60 08 a3 2b a4 05 18 01 5a 00 be 00 28 00 02 00     `..+....Z...(...
    11d5:	f9 5f 08 a3 2b 94 05 18 01 28 00 be 00 28 00 02     ._..+....(...(..
    11e5:	00 84 60 08 a3 2b 00 00 00 00 00 00 00 00 00 00     ..`..+..........
	...
    12b1:	00 00 18 01 22 01 00 00 36 00 00 00 00 0c a7 2b     ...."...6......+
    12c1:	a3 2b 14 00 14 00 00 7a 5e 00 00 00 00 08 a7 2b     .+.....z^......+
    12d1:	a3 2b 14 00 14 00 00 8f 5f 00 00 00 00 0c a7 2b     .+......_......+
    12e1:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    1449:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    1459:	01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b 89 05 82     ......+.+.+.+...
    1469:	05 0a 00 c8 00 82 00 28 00 02 00 58 37 08 a3 2b     .......(...X7..+
    1479:	7b 05 96 00 c8 00 82 00 28 00 02 00 45 37 08 a3     {.......(...E7..
    1489:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    1585:	64 00 2d 00 00 37 35 b4 00 28 00 08 a7 2b a3 2b     d.-..75..(...+.+
	...
    1635:	00 00 00 2b 3c 00 2d 00 28 00 28 00 02 00 c9 29     ...+<.-.(.(....)
    1645:	08 a3 2b 2d 18 01 2d 00 28 00 28 00 02 00 09 2a     ..+-..-.(.(....*
    1655:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    1719:	00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc     ..........f.....
    1729:	01 04 01 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b 70     ........+.+.+.+p
    1739:	05 82 05 0a 00 c8 00 82 00 28 00 02 00 4f 37 08     .........(...O7.
    1749:	a3 2b 7b 05 96 00 c8 00 82 00 28 00 02 00 45 37     .+{.......(...E7
    1759:	08 a3 2b 66 05 2c 01 c8 00 82 00 28 00 02 00 ee     ..+f.,.....(....
    1769:	30 08 a3 2b 64 05 40 01 23 00 28 00 28 00 02 00     0..+d.@.#.(.(...
    1779:	8d 29 08 a3 2b 62 05 6d 01 23 00 28 00 28 00 02     .)..+b.m.#.(.(..
    1789:	01 8d 29 08 a3 2b 60 05 9a 01 23 00 28 00 28 00     ..)..+`...#.(.(.
    1799:	02 02 8d 29 08 a3 2b 00 00 00 00 00 00 00 00 00     ...)..+.........
	...
    1855:	00 00 0a 00 23 00 00 b1 34 2c 01 28 00 08 a7 2b     ....#...4,.(...+
    1865:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    1989:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    1999:	03 97 29 13 31 90 29 08 00 00 00 00 00 00 00 00     ..).1.).........
	...
    19ed:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    19fd:	01 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b 89 05 82     ......+.+.+.+...
    1a0d:	05 0a 00 c8 00 82 00 28 00 02 00 4f 37 08 a3 2b     .......(...O7..+
    1a1d:	7b 05 96 00 c8 00 82 00 28 00 02 00 45 37 08 a3     {.......(...E7..
    1a2d:	2b 66 05 2c 01 c8 00 82 00 28 00 02 00 ee 30 08     +f.,.....(....0.
    1a3d:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    1b29:	0a 00 23 00 00 b1 34 2c 01 28 00 08 a7 2b a3 2b     ..#...4,.(...+.+
	...
    1c59:	00 00 00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09     .....<......((..
    1c69:	00 00 02 b7 29 2c 31 c5 29 08 00 00 00 00 00 00     ....),1.).......
	...
    1cbd:	00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc     ..........e.....
    1ccd:	01 04 01 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b 89     ........+.+.+.+.
    1cdd:	05 5c 05 1e 00 3c 00 64 00 28 00 02 00 74 37 08     .\...<.d.(...t7.
    1ced:	a3 2b 59 05 fa 00 3c 00 64 00 28 00 02 00 45 37     .+Y...<.d.(...E7
    1cfd:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    1df9:	00 00 14 00 23 00 00 d9 30 00 00 00 00 08 a7 2b     ....#...0......+
    1e09:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    1f91:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    1fa1:	00 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b 3f 06 fc     ......+.+.+.+?..
    1fb1:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
    1fc1:	44 05 0a 00 a0 00 be 00 28 00 01 09 06 37 08 a3     D.......(....7..
    1fd1:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    2059:	00 3d 05 f0 00 5a 00 64 00 28 00 01 00 f8 ff ff     .=...Z.d.(......
    2069:	03 a1 5a 39 5c 0a cf 59 34 05 68 01 5a 00 64 00     ..Z9\..Y4.h.Z.d.
    2079:	28 00 01 1f 00 ff ff 05 a1 5a 39 5c 0a cf 59 00     (........Z9\..Y.
	...
    20cd:	18 01 22 01 00 00 36 00 00 00 00 0c a7 2b a3 2b     .."...6......+.+
    20dd:	8c 00 05 00 00 e7 5b 00 00 00 00 08 a7 2b a3 2b     ......[......+.+
    20ed:	18 01 28 00 00 f9 35 8c 00 28 00 08 a7 2b cf 59     ..(...5..(...+.Y
	...
    2151:	00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01 00     ...(...(........
    2161:	01 5a 5b 1e 37 71 29 08 0a 00 64 00 be 00 28 00     .Z[.7q)...d...(.
    2171:	01 01 01 00 01 01 00 01 09 5a 19 37 71 29 08 2b     .........Z.7q).+
    2181:	a4 01 28 00 28 00 28 00 02 00 c9 29 08 cf 59 2d     ..(.(.(....)..Y-
    2191:	f0 00 28 00 28 00 28 00 02 00 09 2a 08 cf 59 00     ..(.(.(....*..Y.
	...
    2261:	00 00 02 02 03 00 02 02 00 00 05 00 00 00 00 e0     ................
    2271:	01 40 01 01 ff ff 08 a5 2b a5 2b a5 2b 5b 5a c1     .@......+.+.+[Z.
    2281:	3c fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37 08     <........(...E7.
    2291:	a3 2b 19 05 0a 00 28 00 be 00 28 00 01 00 87 62     .+....(...(....b
    22a1:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    239d:	00 00 dc 00 14 00 00 3f 32 f0 00 f0 00 08 a7 2b     .......?2......+
    23ad:	a3 2b 18 01 22 01 00 00 36 00 00 00 00 0c a7 2b     .+.."...6......+
    23bd:	a3 2b 9a 01 48 00 01 31 34 28 00 7e 00 08 a7 2b     .+..H..14(.~...+
    23cd:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    2421:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    2431:	01 01 04 86 63 54 62 dc 28 08 00 00 00 00 00 00     ....cTb.(.......
	...
    2451:	00 2b 9a 01 1e 00 28 00 28 00 02 01 2e 29 08 a3     .+....(.(....)..
    2461:	2b 2d 9a 01 c8 00 28 00 28 00 02 01 3a 29 08 a3     +-....(.(...:)..
    2471:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    2535:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    2545:	01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b c1 3c fc     ......+.+.+.+.<.
    2555:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
    2565:	b3 05 18 01 5a 00 be 00 28 00 02 00 c2 59 08 a3     ....Z...(....Y..
    2575:	2b a4 05 18 01 28 00 be 00 28 00 02 00 f6 84 08     +....(...(......
    2585:	a3 2b 09 05 18 01 8c 00 be 00 28 00 02 00 42 67     .+........(...Bg
    2595:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    2671:	14 00 14 00 00 b2 63 00 00 00 00 0c a7 2b a3 2b     ......c......+.+
	...
    2805:	00 00 04 00 01 00 00 00 00 00 07 00 00 00 00 e0     ................
    2815:	01 40 01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b e2     .@......+.+.+.+.
    2825:	05 fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37 08     .........(...E7.
    2835:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    2941:	00 00 18 01 22 01 00 00 36 00 00 00 00 0c a7 2b     ...."...6......+
    2951:	a3 2b 9a 01 48 00 02 31 34 28 00 56 00 08 a7 2b     .+..H..14(.V...+
    2961:	a3 2b 05 00 1e 00 00 3f 32 cc 01 b4 00 08 a7 2b     .+.....?2......+
    2971:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    29f5:	00 2b 9a 01 1e 00 28 00 28 00 02 02 2e 29 08 a3     .+....(.(....)..
    2a05:	2b 2d 9a 01 a0 00 28 00 28 00 02 02 3a 29 08 a3     +-....(.(...:)..
    2a15:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    2ab9:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    2ac9:	82 50 02 03 02 02 00 f9 62 84 59 c2 28 bc 28 08     .P......b.Y.(.(.
    2ad9:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    2ae9:	01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b ff 04 fc     ......+.+.+.+...
    2af9:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
    2b09:	a4 05 18 01 28 00 be 00 28 00 02 00 29 5b 08 a3     ....(...(...)[..
    2b19:	2b f0 04 18 01 64 00 be 00 28 00 02 0b 06 37 08     +....d...(....7.
    2b29:	a3 2b e0 04 18 01 a0 00 be 00 28 00 01 00 a7 2b     .+........(....+
    2b39:	08 a3 2b d6 04 18 01 dc 00 be 00 28 00 02 0c 06     ..+........(....
    2b49:	37 08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00     7..+............
	...
    2c15:	18 01 22 01 00 00 36 00 00 00 00 0c a7 2b a3 2b     .."...6......+.+
    2c25:	8c 00 05 00 00 e7 5b 00 00 00 00 08 a7 2b a3 2b     ......[......+.+
	...
    2da9:	00 00 05 00 02 00 00 00 00 00 09 00 00 00 00 e0     ................
    2db9:	01 40 01 01 ff ff 08 a5 2b a5 2b a5 2b a5 2b c0     .@......+.+.+.+.
    2dc9:	04 fc 05 0a 00 dc 00 be 00 28 00 02 00 45 37 08     .........(...E7.
    2dd9:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    305d:	00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff ff     ....(...(.......
    306d:	01 32 00 05 01 ff 05 26 2c 18 57 71 29 df 59 08     .2.....&,.Wq).Y.
    307d:	01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01 2c     ........h......,
    308d:	01 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b a5 04 fc     ......+.+.+.+...
    309d:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
	...
    3331:	0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82 3c     ..(.x.2........<
    3341:	02 03 03 ff 05 98 5b e1 5a 71 29 b6 28 08 01 00     ......[.Zq).(...
    3351:	00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01 06     .............,..
    3361:	e0 ff 08 a5 2b a5 2b a5 2b a5 2b f0 04 fc 05 0a     ....+.+.+.+.....
    3371:	00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b 00 00     .....(...E7..+..
	...
    3489:	00 00 9a 01 52 00 03 31 34 28 00 56 00 08 a7 2b     ....R..14(.V...+
    3499:	a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    353d:	00 2b 9a 01 28 00 28 00 28 00 02 03 2e 29 08 a3     .+..(.(.(....)..
    354d:	2b 2d 9a 01 aa 00 28 00 28 00 02 03 3a 29 08 a3     +-....(.(...:)..
    355d:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    3601:	00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff ff     ....(.x.2.......
    3611:	82 3c 02 03 03 03 01 f9 62 2a 58 c2 28 5c 5c 08     .<......b*X.(\\.
    3621:	01 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01 2c     ...............,
    3631:	01 06 e0 ff 08 a5 2b a5 2b a5 2b a5 2b 15 3b fc     ......+.+.+.+.;.
    3641:	05 0a 00 dc 00 be 00 28 00 02 00 45 37 08 a3 2b     .......(...E7..+
	...
    375d:	0e 01 28 00 00 37 35 8c 00 28 00 08 a7 2b a3 2b     ..(..75..(...+.+
    376d:	0e 01 5a 00 01 37 35 8c 00 28 00 08 a7 2b a3 2b     ..Z..75..(...+.+
    377d:	0e 01 8c 00 02 37 35 8c 00 28 00 08 a7 2b a3 2b     .....75..(...+.+
    378d:	0e 01 be 00 03 37 35 8c 00 28 00 08 a7 2b a3 2b     .....75..(...+.+
	...
    380d:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 00 c9 29     ...+..(.(.(....)
    381d:	08 a3 2b 2d e6 00 28 00 28 00 28 00 02 00 09 2a     ..+-..(.(.(....*
    382d:	08 a3 2b 2b 9a 01 5a 00 28 00 28 00 02 01 c9 29     ..++..Z.(.(....)
    383d:	08 a3 2b 2d e6 00 5a 00 28 00 28 00 02 01 09 2a     ..+-..Z.(.(....*
    384d:	08 a3 2b 2b 9a 01 8c 00 28 00 28 00 02 02 c9 29     ..++....(.(....)
    385d:	08 a3 2b 2d e6 00 8c 00 28 00 28 00 02 02 09 2a     ..+-....(.(....*
    386d:	08 a3 2b 2b 9a 01 be 00 28 00 28 00 02 03 c9 29     ..++....(.(....)
    387d:	08 a3 2b 2d e6 00 be 00 28 00 28 00 02 03 09 2a     ..+-....(.(....*
    388d:	08 a3 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    38f1:	00 00 01 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc     ................
    3901:	01 2c 01 06 e0 ff 08 a5 2b a5 2b a5 2b 49 2a        .,......+.+.+I*

00003910 <keyboad_number_char_special>:
    3910:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    3920:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

0000392a <keyboad_number_char_lower>:
    392a:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    393a:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00003944 <keyboad_number_char_upper>:
    3944:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    3954:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000395e <network_name>:
    395e:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

0000396b <network_mqtt_key>:
    396b:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

0000397c <network_mqtt_user>:
    397c:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    398c:	72 00                                               r.

0000398e <network_mqtt_port>:
    398e:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    399e:	74 00                                               t.

000039a0 <network_mqtt_host>:
    39a0:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    39b0:	74 00                                               t.

000039b2 <network_ntp>:
    39b2:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000039be <network_dns>:
    39be:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000039ca <network_gw>:
    39ca:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000039d5 <network_netmask>:
    39d5:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000039e5 <network_mac>:
    39e5:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000039f1 <global_time_offset>:
    39f1:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    3a01:	6f 66 66 73 65 74 00                                offset.

00003a08 <global_time_ntp>:
    3a08:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00003a18 <global_time_set>:
    3a18:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00003a28 <termbig_header_out>:
    3a28:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00003a36 <termbig_subscribe>:
    3a36:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    3a46:	73 63 72 69 62 65 00                                scribe.

00003a4d <thermctl_subscribe>:
    3a4d:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    3a5d:	62 73 63 72 69 62 65 00                             bscribe.

00003a65 <lightctl_header_out>:
    3a65:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00003a74 <thermctl_header_in>:
    3a74:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00003a82 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    3a82:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    3a92:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    3aa2:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    3ab2:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    3ac2:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    3ad2:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    3ae2:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00003aee <text_rtc_cas>:
    3aee:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    3afe:	6e 79 00                                            ny.

00003b01 <text_ntp_cas>:
    3b01:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    3b11:	63 61 73 00                                         cas.

00003b15 <text_pid_regulator>:
    3b15:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00003b23 <text_nrf_rozhrani>:
    3b23:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00003b30 <text_rest_rozhrani>:
    3b30:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    3b40:	69 00                                               i.

00003b42 <thermctl_header_out>:
    3b42:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00003b51 <text_mqtt_rozhrani>:
    3b51:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00003b5f <text_ethernet_rozhrani>:
    3b5f:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    3b6f:	69 00                                               i.

00003b71 <text_onewire_hledam>:
    3b71:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00003b7e <text_onewire_rozhrani>:
    3b7e:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00003b8d <text_touchscreen>:
    3b8d:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00003b99 <text_nastaveni_systemu>:
    3b99:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    3ba9:	75 00                                               u.

00003bab <text_test_eeprom>:
    3bab:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00003bbb <text_ok>:
    3bbb:	4f 4b 00                                            OK.

00003bbe <text_test_ram>:
    3bbe:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00003bcb <text_bezny_start>:
    3bcb:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00003bd7 <text_vychozi_nastaveni>:
    3bd7:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    3be7:	69 00                                               i.

00003be9 <text_vnitrni_ochrany>:
    3be9:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00003bf9 <term_title>:
    3bf9:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    3c09:	6f 72 20 76 33 00                                   or v3.

00003c0f <regulator_default_text>:
    3c0f:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    3c1f:	72 3a 00                                            r:.

00003c22 <current_time>:
    3c22:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00003c2f <current_temp>:
    3c2f:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    3c3f:	3a 00                                               :.

00003c41 <text_err>:
    3c41:	45 72 72 6f 72 00                                   Error.

00003c47 <nastaveni_tds_period>:
    3c47:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00003c56 <temp_offset_short>:
    3c56:	6f 66 66 73 65 74 3a 00                             offset:.

00003c5e <text_online>:
    3c5e:	4f 6e 6c 69 6e 65 00                                Online.

00003c65 <text_last_update>:
    3c65:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    3c75:	7a 61 63 65 3a 00                                   zace:.

00003c7b <current_temp_short>:
    3c7b:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00003c84 <text_nazev>:
    3c84:	4e 61 7a 65 76 3a 00                                Nazev:.

00003c8b <text_nastavit_tds>:
    3c8b:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    3c9b:	6c 6f 00                                            lo.

00003c9e <text_not_used>:
    3c9e:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00003cab <text_associovat_tds>:
    3cab:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    3cbb:	64 6c 6f 00                                         dlo.

00003cbf <text_rtds_prefix>:
    3cbf:	2f 00                                               /.

00003cc1 <nastaveni_rtds>:
    3cc1:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00003cd0 <nastaveni_onewire>:
    3cd0:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00003cde <text_term_do_activate>:
    3cde:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    3cee:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

00003cf8 <text_term_deactive>:
    3cf8:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00003d02 <text_term_active>:
    3d02:	41 6b 74 69 76 6e 69 00                             Aktivni.

00003d0a <text_change_default_ring>:
    3d0a:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    3d1a:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

00003d24 <text_button_term_fan>:
    3d24:	46 41 4e 00                                         FAN.

00003d28 <text_current_ring_mode>:
    3d28:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    3d38:	75 6c 61 74 6f 72 75 00                             ulatoru.

00003d40 <text_button_term_man_comment>:
    3d40:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

00003d4f <text_button_term_man>:
    3d4f:	4d 41 4e 00                                         MAN.

00003d53 <text_button_term_prog_comment>:
    3d53:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    3d63:	72 61 6d 00                                         ram.

00003d67 <text_button_term_prog>:
    3d67:	50 52 4f 47 00                                      PROG.

00003d6c <text_button_term_min_comment>:
    3d6c:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    3d7c:	67 75 6c 61 63 65 00                                gulace.

00003d83 <text_button_term_min>:
    3d83:	4d 49 4e 00                                         MIN.

00003d87 <text_button_term_max_comment>:
    3d87:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    3d97:	75 6c 61 63 65 00                                   ulace.

00003d9d <text_button_term_max>:
    3d9d:	4d 41 58 00                                         MAX.

00003da1 <text_button_term_off_comment>:
    3da1:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    3db1:	79 20 6d 6f 64 00                                   y mod.

00003db7 <text_button_term_off>:
    3db7:	4f 46 46 00                                         OFF.

00003dbb <status_know_devices>:
    3dbb:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    3dcb:	63 65 73 00                                         ces.

00003dcf <_ZL10network_ip.lto_priv.232>:
    3dcf:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00003dda <status_mqtt_process>:
    3dda:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    3dea:	65 73 73 00                                         ess.

00003dee <status_mqtt_receive>:
    3dee:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    3dfe:	69 76 65 00                                         ive.

00003e02 <status_mqtt_error>:
    3e02:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    3e12:	72 00                                               r.

00003e14 <status_mqtt_send>:
    3e14:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00003e25 <port_to_mode_PGM>:
    3e25:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00003e35 <digital_pin_to_timer_PGM>:
    3e35:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    3e69:	00 03                                               ..

00003e6b <lcd_font>:
    3e6b:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    3e7b:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    3e8b:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    3e9b:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    3eab:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    3ebb:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    3ecb:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    3edb:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    3eeb:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    3efb:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    3f0b:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    3f1b:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    3f2b:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    3f3b:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    3f4b:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    3f5b:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    3f6b:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    3f7b:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    3f8b:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    3f9b:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    3fab:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    3fbb:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    3fcb:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    3fdb:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    3feb:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    3ffb:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    400b:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    401b:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    402b:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    403b:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    404b:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    405b:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    406b:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    407b:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    408b:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    409b:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    40ab:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    40bb:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    40cb:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    40db:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    40eb:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    40fb:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    410b:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    411b:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    412b:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    413b:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    414b:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    415b:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    416b:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    417b:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    418b:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    419b:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    41ab:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    41bb:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    41cb:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    41db:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    41eb:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    41fb:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    420b:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    421b:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    422b:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    423b:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    424b:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    425b:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    426b:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    427b:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    428b:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    429b:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    42ab:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    42bb:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    42cb:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    42db:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    42eb:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    42fb:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    430b:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    431b:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    432b:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    433b:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    434b:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    435b:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00004366 <port_to_input_PGM>:
    4366:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00004376 <digital_pin_to_bit_mask_PGM>:
    4376:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    4386:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    4396:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    43a6:	08 10 20 40 80 20                                   .. @. 

000043ac <port_to_output_PGM>:
    43ac:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

000043bc <digital_pin_to_port_PGM>:
    43bc:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    43cc:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    43dc:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    43ec:	06 06 06 06 06 07                                   ......

000043f2 <daysInMonth>:
    43f2:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000043fe <__ctors_start>:
__ctors_start():
    43fe:	ca a3       	std	Y+34, r28	; 0x22

00004400 <__ctors_end>:
__dtors_end():
    4400:	11 24       	eor	r1, r1
    4402:	1f be       	out	0x3f, r1	; 63
    4404:	cf ef       	ldi	r28, 0xFF	; 255
    4406:	d1 e2       	ldi	r29, 0x21	; 33
    4408:	de bf       	out	0x3e, r29	; 62
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	00 e0       	ldi	r16, 0x00	; 0
    440e:	0c bf       	out	0x3c, r16	; 60

00004410 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    4410:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    4412:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    4414:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    4416:	e0 ec       	ldi	r30, 0xC0	; 192
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    4418:	fc e7       	ldi	r31, 0x7C	; 124
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    441a:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    441c:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    441e:	02 c0       	rjmp	.+4      	; 0x4424 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    4420:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    4422:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    4424:	a2 36       	cpi	r26, 0x62	; 98
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    4426:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    4428:	d9 f7       	brne	.-10     	; 0x4420 <__do_copy_data+0x10>

0000442a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    442a:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    442c:	a2 e6       	ldi	r26, 0x62	; 98
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    442e:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    4430:	01 c0       	rjmp	.+2      	; 0x4434 <.do_clear_bss_start>

00004432 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    4432:	1d 92       	st	X+, r1

00004434 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    4434:	aa 3a       	cpi	r26, 0xAA	; 170
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    4436:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    4438:	e1 f7       	brne	.-8      	; 0x4432 <.do_clear_bss_loop>

0000443a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    443a:	11 e2       	ldi	r17, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    443c:	c0 e0       	ldi	r28, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    443e:	d2 e2       	ldi	r29, 0x22	; 34
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    4440:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    4442:	06 c0       	rjmp	.+12     	; 0x4450 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    4444:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    4446:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    4448:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    444a:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    444c:	0e 94 b5 bc 	call	0x1796a	; 0x1796a <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    4450:	cf 3f       	cpi	r28, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    4452:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    4454:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    4456:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    4458:	a9 f7       	brne	.-22     	; 0x4444 <__do_global_ctors+0xa>
    445a:	0e 94 d9 a7 	call	0x14fb2	; 0x14fb2 <main>
    445e:	0c 94 5e be 	jmp	0x17cbc	; 0x17cbc <_exit>

00004462 <__bad_interrupt>:
__vector_38():
    4462:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004466 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	1f 92       	push	r1
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    4472:	dc 01       	movw	r26, r24
    4474:	ed 91       	ld	r30, X+
    4476:	fc 91       	ld	r31, X
    4478:	02 80       	ldd	r0, Z+2	; 0x02
    447a:	f3 81       	ldd	r31, Z+3	; 0x03
    447c:	e0 2d       	mov	r30, r0
    447e:	41 e0       	ldi	r20, 0x01	; 1
    4480:	50 e0       	ldi	r21, 0x00	; 0
    4482:	be 01       	movw	r22, r28
    4484:	6f 5f       	subi	r22, 0xFF	; 255
    4486:	7f 4f       	sbci	r23, 0xFF	; 255
    4488:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    448a:	0f 90       	pop	r0
    448c:	df 91       	pop	r29
    448e:	cf 91       	pop	r28
    4490:	08 95       	ret

00004492 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    4492:	dc 01       	movw	r26, r24
    4494:	ed 91       	ld	r30, X+
    4496:	fc 91       	ld	r31, X
    4498:	02 8c       	ldd	r0, Z+26	; 0x1a
    449a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    449c:	e0 2d       	mov	r30, r0
    449e:	19 95       	eicall
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	89 27       	eor	r24, r25
    44a4:	08 95       	ret

000044a6 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	08 95       	ret

000044ac <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    44ac:	dc 01       	movw	r26, r24
    44ae:	ed 91       	ld	r30, X+
    44b0:	fc 91       	ld	r31, X
    44b2:	04 8c       	ldd	r0, Z+28	; 0x1c
    44b4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    44b6:	e0 2d       	mov	r30, r0
    44b8:	19 94       	eijmp

000044ba <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    44ba:	fc 01       	movw	r30, r24
    44bc:	84 89       	ldd	r24, Z+20	; 0x14
    44be:	95 89       	ldd	r25, Z+21	; 0x15
    44c0:	08 95       	ret

000044c2 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    44c2:	fc 01       	movw	r30, r24
    44c4:	82 89       	ldd	r24, Z+18	; 0x12
    44c6:	93 89       	ldd	r25, Z+19	; 0x13
    44c8:	08 95       	ret

000044ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    44ca:	4f 92       	push	r4
    44cc:	5f 92       	push	r5
    44ce:	6f 92       	push	r6
    44d0:	7f 92       	push	r7
    44d2:	8f 92       	push	r8
    44d4:	9f 92       	push	r9
    44d6:	af 92       	push	r10
    44d8:	bf 92       	push	r11
    44da:	cf 92       	push	r12
    44dc:	df 92       	push	r13
    44de:	ef 92       	push	r14
    44e0:	ff 92       	push	r15
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	ec 01       	movw	r28, r24
    44ec:	5a 01       	movw	r10, r20
    44ee:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    44f0:	37 ff       	sbrs	r19, 7
    44f2:	05 c0       	rjmp	.+10     	; 0x44fe <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    44f4:	62 0f       	add	r22, r18
    44f6:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    44f8:	31 95       	neg	r19
    44fa:	21 95       	neg	r18
    44fc:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    44fe:	7b 01       	movw	r14, r22
    4500:	e2 0e       	add	r14, r18
    4502:	f3 1e       	adc	r15, r19
    4504:	6b 01       	movw	r12, r22
    4506:	77 ff       	sbrs	r23, 7
    4508:	02 c0       	rjmp	.+4      	; 0x450e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    450a:	d1 2c       	mov	r13, r1
    450c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    450e:	e8 81       	ld	r30, Y
    4510:	f9 81       	ldd	r31, Y+1	; 0x01
    4512:	06 84       	ldd	r0, Z+14	; 0x0e
    4514:	f7 85       	ldd	r31, Z+15	; 0x0f
    4516:	e0 2d       	mov	r30, r0
    4518:	ce 01       	movw	r24, r28
    451a:	19 95       	eicall
    451c:	8e 15       	cp	r24, r14
    451e:	9f 05       	cpc	r25, r15
    4520:	44 f4       	brge	.+16     	; 0x4532 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    4522:	e8 81       	ld	r30, Y
    4524:	f9 81       	ldd	r31, Y+1	; 0x01
    4526:	06 84       	ldd	r0, Z+14	; 0x0e
    4528:	f7 85       	ldd	r31, Z+15	; 0x0f
    452a:	e0 2d       	mov	r30, r0
    452c:	ce 01       	movw	r24, r28
    452e:	19 95       	eicall
    4530:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    4532:	47 01       	movw	r8, r14
    4534:	8c 18       	sub	r8, r12
    4536:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    4538:	17 ff       	sbrs	r17, 7
    453a:	05 c0       	rjmp	.+10     	; 0x4546 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    453c:	a0 0e       	add	r10, r16
    453e:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    4540:	11 95       	neg	r17
    4542:	01 95       	neg	r16
    4544:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    4546:	0a 0d       	add	r16, r10
    4548:	1b 1d       	adc	r17, r11
    454a:	b7 fe       	sbrs	r11, 7
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    454e:	b1 2c       	mov	r11, r1
    4550:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    4552:	e8 81       	ld	r30, Y
    4554:	f9 81       	ldd	r31, Y+1	; 0x01
    4556:	04 84       	ldd	r0, Z+12	; 0x0c
    4558:	f5 85       	ldd	r31, Z+13	; 0x0d
    455a:	e0 2d       	mov	r30, r0
    455c:	ce 01       	movw	r24, r28
    455e:	19 95       	eicall
    4560:	80 17       	cp	r24, r16
    4562:	91 07       	cpc	r25, r17
    4564:	44 f4       	brge	.+16     	; 0x4576 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    4566:	e8 81       	ld	r30, Y
    4568:	f9 81       	ldd	r31, Y+1	; 0x01
    456a:	04 84       	ldd	r0, Z+12	; 0x0c
    456c:	f5 85       	ldd	r31, Z+13	; 0x0d
    456e:	e0 2d       	mov	r30, r0
    4570:	ce 01       	movw	r24, r28
    4572:	19 95       	eicall
    4574:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    4576:	38 01       	movw	r6, r16
    4578:	6a 18       	sub	r6, r10
    457a:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    457c:	01 50       	subi	r16, 0x01	; 1
    457e:	11 09       	sbc	r17, r1
    4580:	97 01       	movw	r18, r14
    4582:	21 50       	subi	r18, 0x01	; 1
    4584:	31 09       	sbc	r19, r1
    4586:	e8 81       	ld	r30, Y
    4588:	f9 81       	ldd	r31, Y+1	; 0x01
    458a:	06 80       	ldd	r0, Z+6	; 0x06
    458c:	f7 81       	ldd	r31, Z+7	; 0x07
    458e:	e0 2d       	mov	r30, r0
    4590:	a5 01       	movw	r20, r10
    4592:	b6 01       	movw	r22, r12
    4594:	ce 01       	movw	r24, r28
    4596:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    4598:	ee a5       	ldd	r30, Y+46	; 0x2e
    459a:	ff a5       	ldd	r31, Y+47	; 0x2f
    459c:	80 81       	ld	r24, Z
    459e:	9a ad       	ldd	r25, Y+58	; 0x3a
    45a0:	89 23       	and	r24, r25
    45a2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    45a4:	88 8d       	ldd	r24, Y+24	; 0x18
    45a6:	99 8d       	ldd	r25, Y+25	; 0x19
    45a8:	89 2b       	or	r24, r25
    45aa:	c9 f4       	brne	.+50     	; 0x45de <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    45ac:	e8 a9       	ldd	r30, Y+48	; 0x30
    45ae:	f9 a9       	ldd	r31, Y+49	; 0x31
    45b0:	80 81       	ld	r24, Z
    45b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    45b4:	89 23       	and	r24, r25
    45b6:	80 83       	st	Z, r24
    45b8:	12 b8       	out	0x02, r1	; 2
    45ba:	ea a9       	ldd	r30, Y+50	; 0x32
    45bc:	fb a9       	ldd	r31, Y+51	; 0x33
    45be:	80 81       	ld	r24, Z
    45c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    45c2:	89 23       	and	r24, r25
    45c4:	80 83       	st	Z, r24
    45c6:	ea a9       	ldd	r30, Y+50	; 0x32
    45c8:	fb a9       	ldd	r31, Y+51	; 0x33
    45ca:	80 81       	ld	r24, Z
    45cc:	98 ad       	ldd	r25, Y+56	; 0x38
    45ce:	89 2b       	or	r24, r25
    45d0:	80 83       	st	Z, r24
    45d2:	e8 a9       	ldd	r30, Y+48	; 0x30
    45d4:	f9 a9       	ldd	r31, Y+49	; 0x31
    45d6:	80 81       	ld	r24, Z
    45d8:	9f a9       	ldd	r25, Y+55	; 0x37
    45da:	89 2b       	or	r24, r25
    45dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    45de:	e8 a9       	ldd	r30, Y+48	; 0x30
    45e0:	f9 a9       	ldd	r31, Y+49	; 0x31
    45e2:	80 81       	ld	r24, Z
    45e4:	9b ad       	ldd	r25, Y+59	; 0x3b
    45e6:	89 23       	and	r24, r25
    45e8:	80 83       	st	Z, r24
    45ea:	88 a1       	ldd	r24, Y+32	; 0x20
    45ec:	82 b9       	out	0x02, r24	; 2
    45ee:	ea a9       	ldd	r30, Y+50	; 0x32
    45f0:	fb a9       	ldd	r31, Y+51	; 0x33
    45f2:	80 81       	ld	r24, Z
    45f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    45f6:	89 23       	and	r24, r25
    45f8:	80 83       	st	Z, r24
    45fa:	ea a9       	ldd	r30, Y+50	; 0x32
    45fc:	fb a9       	ldd	r31, Y+51	; 0x33
    45fe:	80 81       	ld	r24, Z
    4600:	98 ad       	ldd	r25, Y+56	; 0x38
    4602:	89 2b       	or	r24, r25
    4604:	80 83       	st	Z, r24
    4606:	e8 a9       	ldd	r30, Y+48	; 0x30
    4608:	f9 a9       	ldd	r31, Y+49	; 0x31
    460a:	80 81       	ld	r24, Z
    460c:	9f a9       	ldd	r25, Y+55	; 0x37
    460e:	89 2b       	or	r24, r25
    4610:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    4612:	86 14       	cp	r8, r6
    4614:	97 04       	cpc	r9, r7
    4616:	2c f0       	brlt	.+10     	; 0x4622 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    4618:	96 2d       	mov	r25, r6
    461a:	87 2d       	mov	r24, r7
    461c:	34 01       	movw	r6, r8
    461e:	89 2e       	mov	r8, r25
    4620:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    4622:	18 14       	cp	r1, r8
    4624:	19 04       	cpc	r1, r9
    4626:	0c f5       	brge	.+66     	; 0x466a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    4628:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    462a:	52 b8       	out	0x02, r5	; 2
    462c:	ea a9       	ldd	r30, Y+50	; 0x32
    462e:	fb a9       	ldd	r31, Y+51	; 0x33
    4630:	20 81       	ld	r18, Z
    4632:	3c ad       	ldd	r19, Y+60	; 0x3c
    4634:	23 23       	and	r18, r19
    4636:	20 83       	st	Z, r18
    4638:	ea a9       	ldd	r30, Y+50	; 0x32
    463a:	fb a9       	ldd	r31, Y+51	; 0x33
    463c:	20 81       	ld	r18, Z
    463e:	38 ad       	ldd	r19, Y+56	; 0x38
    4640:	23 2b       	or	r18, r19
    4642:	20 83       	st	Z, r18
    4644:	42 b8       	out	0x02, r4	; 2
    4646:	ea a9       	ldd	r30, Y+50	; 0x32
    4648:	fb a9       	ldd	r31, Y+51	; 0x33
    464a:	20 81       	ld	r18, Z
    464c:	3c ad       	ldd	r19, Y+60	; 0x3c
    464e:	23 23       	and	r18, r19
    4650:	20 83       	st	Z, r18
    4652:	ea a9       	ldd	r30, Y+50	; 0x32
    4654:	fb a9       	ldd	r31, Y+51	; 0x33
    4656:	20 81       	ld	r18, Z
    4658:	38 ad       	ldd	r19, Y+56	; 0x38
    465a:	23 2b       	or	r18, r19
    465c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	21 f7       	brne	.-56     	; 0x462a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	88 1a       	sub	r8, r24
    4666:	91 08       	sbc	r9, r1
    4668:	dc cf       	rjmp	.-72     	; 0x4622 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    466a:	88 8d       	ldd	r24, Y+24	; 0x18
    466c:	99 8d       	ldd	r25, Y+25	; 0x19
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	51 f5       	brne	.+84     	; 0x46c6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    4672:	0c 89       	ldd	r16, Y+20	; 0x14
    4674:	1d 89       	ldd	r17, Y+21	; 0x15
    4676:	01 50       	subi	r16, 0x01	; 1
    4678:	11 09       	sbc	r17, r1
    467a:	2a 89       	ldd	r18, Y+18	; 0x12
    467c:	3b 89       	ldd	r19, Y+19	; 0x13
    467e:	21 50       	subi	r18, 0x01	; 1
    4680:	31 09       	sbc	r19, r1
    4682:	e8 81       	ld	r30, Y
    4684:	f9 81       	ldd	r31, Y+1	; 0x01
    4686:	06 80       	ldd	r0, Z+6	; 0x06
    4688:	f7 81       	ldd	r31, Z+7	; 0x07
    468a:	e0 2d       	mov	r30, r0
    468c:	50 e0       	ldi	r21, 0x00	; 0
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	70 e0       	ldi	r23, 0x00	; 0
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	ce 01       	movw	r24, r28
    4696:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    4698:	ee a5       	ldd	r30, Y+46	; 0x2e
    469a:	ff a5       	ldd	r31, Y+47	; 0x2f
    469c:	80 81       	ld	r24, Z
    469e:	9e a9       	ldd	r25, Y+54	; 0x36
    46a0:	89 2b       	or	r24, r25
    46a2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    46a4:	df 91       	pop	r29
    46a6:	cf 91       	pop	r28
    46a8:	1f 91       	pop	r17
    46aa:	0f 91       	pop	r16
    46ac:	ff 90       	pop	r15
    46ae:	ef 90       	pop	r14
    46b0:	df 90       	pop	r13
    46b2:	cf 90       	pop	r12
    46b4:	bf 90       	pop	r11
    46b6:	af 90       	pop	r10
    46b8:	9f 90       	pop	r9
    46ba:	8f 90       	pop	r8
    46bc:	7f 90       	pop	r7
    46be:	6f 90       	pop	r6
    46c0:	5f 90       	pop	r5
    46c2:	4f 90       	pop	r4
    46c4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	39 f7       	brne	.-50     	; 0x4698 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    46ca:	ee a5       	ldd	r30, Y+46	; 0x2e
    46cc:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    46ce:	80 81       	ld	r24, Z
    46d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    46d2:	89 23       	and	r24, r25
    46d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    46d6:	e8 a9       	ldd	r30, Y+48	; 0x30
    46d8:	f9 a9       	ldd	r31, Y+49	; 0x31
    46da:	80 81       	ld	r24, Z
    46dc:	9b ad       	ldd	r25, Y+59	; 0x3b
    46de:	89 23       	and	r24, r25
    46e0:	80 83       	st	Z, r24
    46e2:	84 e0       	ldi	r24, 0x04	; 4
    46e4:	82 b9       	out	0x02, r24	; 2
    46e6:	ea a9       	ldd	r30, Y+50	; 0x32
    46e8:	fb a9       	ldd	r31, Y+51	; 0x33
    46ea:	80 81       	ld	r24, Z
    46ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    46ee:	89 23       	and	r24, r25
    46f0:	80 83       	st	Z, r24
    46f2:	ea a9       	ldd	r30, Y+50	; 0x32
    46f4:	fb a9       	ldd	r31, Y+51	; 0x33
    46f6:	80 81       	ld	r24, Z
    46f8:	98 ad       	ldd	r25, Y+56	; 0x38
    46fa:	89 2b       	or	r24, r25
    46fc:	80 83       	st	Z, r24
    46fe:	e8 a9       	ldd	r30, Y+48	; 0x30
    4700:	f9 a9       	ldd	r31, Y+49	; 0x31
    4702:	80 81       	ld	r24, Z
    4704:	9f a9       	ldd	r25, Y+55	; 0x37
    4706:	89 2b       	or	r24, r25
    4708:	80 83       	st	Z, r24
    470a:	8a 89       	ldd	r24, Y+18	; 0x12
    470c:	9b 89       	ldd	r25, Y+19	; 0x13
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	92 b9       	out	0x02, r25	; 2
    4712:	ea a9       	ldd	r30, Y+50	; 0x32
    4714:	fb a9       	ldd	r31, Y+51	; 0x33
    4716:	80 81       	ld	r24, Z
    4718:	9c ad       	ldd	r25, Y+60	; 0x3c
    471a:	89 23       	and	r24, r25
    471c:	80 83       	st	Z, r24
    471e:	ea a9       	ldd	r30, Y+50	; 0x32
    4720:	fb a9       	ldd	r31, Y+51	; 0x33
    4722:	80 81       	ld	r24, Z
    4724:	98 ad       	ldd	r25, Y+56	; 0x38
    4726:	89 2b       	or	r24, r25
    4728:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    472a:	e8 a9       	ldd	r30, Y+48	; 0x30
    472c:	f9 a9       	ldd	r31, Y+49	; 0x31
    472e:	80 81       	ld	r24, Z
    4730:	9b ad       	ldd	r25, Y+59	; 0x3b
    4732:	89 23       	and	r24, r25
    4734:	80 83       	st	Z, r24
    4736:	85 e0       	ldi	r24, 0x05	; 5
    4738:	82 b9       	out	0x02, r24	; 2
    473a:	ea a9       	ldd	r30, Y+50	; 0x32
    473c:	fb a9       	ldd	r31, Y+51	; 0x33
    473e:	80 81       	ld	r24, Z
    4740:	9c ad       	ldd	r25, Y+60	; 0x3c
    4742:	89 23       	and	r24, r25
    4744:	80 83       	st	Z, r24
    4746:	ea a9       	ldd	r30, Y+50	; 0x32
    4748:	fb a9       	ldd	r31, Y+51	; 0x33
    474a:	80 81       	ld	r24, Z
    474c:	98 ad       	ldd	r25, Y+56	; 0x38
    474e:	89 2b       	or	r24, r25
    4750:	80 83       	st	Z, r24
    4752:	e8 a9       	ldd	r30, Y+48	; 0x30
    4754:	f9 a9       	ldd	r31, Y+49	; 0x31
    4756:	80 81       	ld	r24, Z
    4758:	9f a9       	ldd	r25, Y+55	; 0x37
    475a:	89 2b       	or	r24, r25
    475c:	80 83       	st	Z, r24
    475e:	8a 89       	ldd	r24, Y+18	; 0x12
    4760:	81 50       	subi	r24, 0x01	; 1
    4762:	82 b9       	out	0x02, r24	; 2
    4764:	ea a9       	ldd	r30, Y+50	; 0x32
    4766:	fb a9       	ldd	r31, Y+51	; 0x33
    4768:	80 81       	ld	r24, Z
    476a:	9c ad       	ldd	r25, Y+60	; 0x3c
    476c:	89 23       	and	r24, r25
    476e:	80 83       	st	Z, r24
    4770:	ea a9       	ldd	r30, Y+50	; 0x32
    4772:	fb a9       	ldd	r31, Y+51	; 0x33
    4774:	80 81       	ld	r24, Z
    4776:	98 ad       	ldd	r25, Y+56	; 0x38
    4778:	89 2b       	or	r24, r25
    477a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    477c:	e8 a9       	ldd	r30, Y+48	; 0x30
    477e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4780:	80 81       	ld	r24, Z
    4782:	9b ad       	ldd	r25, Y+59	; 0x3b
    4784:	89 23       	and	r24, r25
    4786:	80 83       	st	Z, r24
    4788:	88 e0       	ldi	r24, 0x08	; 8
    478a:	82 b9       	out	0x02, r24	; 2
    478c:	ea a9       	ldd	r30, Y+50	; 0x32
    478e:	fb a9       	ldd	r31, Y+51	; 0x33
    4790:	80 81       	ld	r24, Z
    4792:	9c ad       	ldd	r25, Y+60	; 0x3c
    4794:	89 23       	and	r24, r25
    4796:	80 83       	st	Z, r24
    4798:	ea a9       	ldd	r30, Y+50	; 0x32
    479a:	fb a9       	ldd	r31, Y+51	; 0x33
    479c:	80 81       	ld	r24, Z
    479e:	98 ad       	ldd	r25, Y+56	; 0x38
    47a0:	89 2b       	or	r24, r25
    47a2:	80 83       	st	Z, r24
    47a4:	e8 a9       	ldd	r30, Y+48	; 0x30
    47a6:	f9 a9       	ldd	r31, Y+49	; 0x31
    47a8:	80 81       	ld	r24, Z
    47aa:	9f a9       	ldd	r25, Y+55	; 0x37
    47ac:	89 2b       	or	r24, r25
    47ae:	80 83       	st	Z, r24
    47b0:	8c 89       	ldd	r24, Y+20	; 0x14
    47b2:	9d 89       	ldd	r25, Y+21	; 0x15
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	92 b9       	out	0x02, r25	; 2
    47b8:	ea a9       	ldd	r30, Y+50	; 0x32
    47ba:	fb a9       	ldd	r31, Y+51	; 0x33
    47bc:	80 81       	ld	r24, Z
    47be:	9c ad       	ldd	r25, Y+60	; 0x3c
    47c0:	89 23       	and	r24, r25
    47c2:	80 83       	st	Z, r24
    47c4:	ea a9       	ldd	r30, Y+50	; 0x32
    47c6:	fb a9       	ldd	r31, Y+51	; 0x33
    47c8:	80 81       	ld	r24, Z
    47ca:	98 ad       	ldd	r25, Y+56	; 0x38
    47cc:	89 2b       	or	r24, r25
    47ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    47d0:	e8 a9       	ldd	r30, Y+48	; 0x30
    47d2:	f9 a9       	ldd	r31, Y+49	; 0x31
    47d4:	80 81       	ld	r24, Z
    47d6:	9b ad       	ldd	r25, Y+59	; 0x3b
    47d8:	89 23       	and	r24, r25
    47da:	80 83       	st	Z, r24
    47dc:	89 e0       	ldi	r24, 0x09	; 9
    47de:	82 b9       	out	0x02, r24	; 2
    47e0:	ea a9       	ldd	r30, Y+50	; 0x32
    47e2:	fb a9       	ldd	r31, Y+51	; 0x33
    47e4:	80 81       	ld	r24, Z
    47e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    47e8:	89 23       	and	r24, r25
    47ea:	80 83       	st	Z, r24
    47ec:	ea a9       	ldd	r30, Y+50	; 0x32
    47ee:	fb a9       	ldd	r31, Y+51	; 0x33
    47f0:	80 81       	ld	r24, Z
    47f2:	98 ad       	ldd	r25, Y+56	; 0x38
    47f4:	89 2b       	or	r24, r25
    47f6:	80 83       	st	Z, r24
    47f8:	e8 a9       	ldd	r30, Y+48	; 0x30
    47fa:	f9 a9       	ldd	r31, Y+49	; 0x31
    47fc:	80 81       	ld	r24, Z
    47fe:	9f a9       	ldd	r25, Y+55	; 0x37
    4800:	89 2b       	or	r24, r25
    4802:	80 83       	st	Z, r24
    4804:	8c 89       	ldd	r24, Y+20	; 0x14
    4806:	81 50       	subi	r24, 0x01	; 1
    4808:	82 b9       	out	0x02, r24	; 2
    480a:	ea a9       	ldd	r30, Y+50	; 0x32
    480c:	fb a9       	ldd	r31, Y+51	; 0x33
    480e:	80 81       	ld	r24, Z
    4810:	9c ad       	ldd	r25, Y+60	; 0x3c
    4812:	89 23       	and	r24, r25
    4814:	80 83       	st	Z, r24
    4816:	ea a9       	ldd	r30, Y+50	; 0x32
    4818:	fb a9       	ldd	r31, Y+51	; 0x33
    481a:	80 81       	ld	r24, Z
    481c:	98 ad       	ldd	r25, Y+56	; 0x38
    481e:	89 2b       	or	r24, r25
    4820:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    4822:	ee a5       	ldd	r30, Y+46	; 0x2e
    4824:	ff a5       	ldd	r31, Y+47	; 0x2f
    4826:	80 81       	ld	r24, Z
    4828:	9e a9       	ldd	r25, Y+54	; 0x36
    482a:	89 2b       	or	r24, r25
    482c:	80 83       	st	Z, r24
    482e:	34 cf       	rjmp	.-408    	; 0x4698 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00004830 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    4830:	af 92       	push	r10
    4832:	bf 92       	push	r11
    4834:	cf 92       	push	r12
    4836:	df 92       	push	r13
    4838:	ef 92       	push	r14
    483a:	ff 92       	push	r15
    483c:	0f 93       	push	r16
    483e:	1f 93       	push	r17
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    4844:	77 fd       	sbrc	r23, 7
    4846:	75 c0       	rjmp	.+234    	; 0x4932 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4848:	57 fd       	sbrc	r21, 7
    484a:	73 c0       	rjmp	.+230    	; 0x4932 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    484c:	c3 2e       	mov	r12, r19
    484e:	d2 2e       	mov	r13, r18
    4850:	5a 01       	movw	r10, r20
    4852:	7b 01       	movw	r14, r22
    4854:	ec 01       	movw	r28, r24
    4856:	e8 81       	ld	r30, Y
    4858:	f9 81       	ldd	r31, Y+1	; 0x01
    485a:	06 84       	ldd	r0, Z+14	; 0x0e
    485c:	f7 85       	ldd	r31, Z+15	; 0x0f
    485e:	e0 2d       	mov	r30, r0
    4860:	19 95       	eicall
    4862:	8e 15       	cp	r24, r14
    4864:	9f 05       	cpc	r25, r15
    4866:	0c f4       	brge	.+2      	; 0x486a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    4868:	64 c0       	rjmp	.+200    	; 0x4932 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    486a:	e8 81       	ld	r30, Y
    486c:	f9 81       	ldd	r31, Y+1	; 0x01
    486e:	04 84       	ldd	r0, Z+12	; 0x0c
    4870:	f5 85       	ldd	r31, Z+13	; 0x0d
    4872:	e0 2d       	mov	r30, r0
    4874:	ce 01       	movw	r24, r28
    4876:	19 95       	eicall
    4878:	8a 15       	cp	r24, r10
    487a:	9b 05       	cpc	r25, r11
    487c:	0c f4       	brge	.+2      	; 0x4880 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    487e:	59 c0       	rjmp	.+178    	; 0x4932 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    4880:	e8 81       	ld	r30, Y
    4882:	f9 81       	ldd	r31, Y+1	; 0x01
    4884:	06 80       	ldd	r0, Z+6	; 0x06
    4886:	f7 81       	ldd	r31, Z+7	; 0x07
    4888:	e0 2d       	mov	r30, r0
    488a:	85 01       	movw	r16, r10
    488c:	97 01       	movw	r18, r14
    488e:	a5 01       	movw	r20, r10
    4890:	b7 01       	movw	r22, r14
    4892:	ce 01       	movw	r24, r28
    4894:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    4896:	ee a5       	ldd	r30, Y+46	; 0x2e
    4898:	ff a5       	ldd	r31, Y+47	; 0x2f
    489a:	80 81       	ld	r24, Z
    489c:	9a ad       	ldd	r25, Y+58	; 0x3a
    489e:	89 23       	and	r24, r25
    48a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    48a2:	98 a1       	ldd	r25, Y+32	; 0x20
    48a4:	29 a1       	ldd	r18, Y+33	; 0x21
    48a6:	e8 a9       	ldd	r30, Y+48	; 0x30
    48a8:	f9 a9       	ldd	r31, Y+49	; 0x31
    48aa:	80 81       	ld	r24, Z
    48ac:	3b ad       	ldd	r19, Y+59	; 0x3b
    48ae:	83 23       	and	r24, r19
    48b0:	80 83       	st	Z, r24
    48b2:	22 b9       	out	0x02, r18	; 2
    48b4:	ea a9       	ldd	r30, Y+50	; 0x32
    48b6:	fb a9       	ldd	r31, Y+51	; 0x33
    48b8:	80 81       	ld	r24, Z
    48ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    48bc:	82 23       	and	r24, r18
    48be:	80 83       	st	Z, r24
    48c0:	ea a9       	ldd	r30, Y+50	; 0x32
    48c2:	fb a9       	ldd	r31, Y+51	; 0x33
    48c4:	80 81       	ld	r24, Z
    48c6:	28 ad       	ldd	r18, Y+56	; 0x38
    48c8:	82 2b       	or	r24, r18
    48ca:	80 83       	st	Z, r24
    48cc:	92 b9       	out	0x02, r25	; 2
    48ce:	ea a9       	ldd	r30, Y+50	; 0x32
    48d0:	fb a9       	ldd	r31, Y+51	; 0x33
    48d2:	80 81       	ld	r24, Z
    48d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    48d6:	89 23       	and	r24, r25
    48d8:	80 83       	st	Z, r24
    48da:	ea a9       	ldd	r30, Y+50	; 0x32
    48dc:	fb a9       	ldd	r31, Y+51	; 0x33
    48de:	80 81       	ld	r24, Z
    48e0:	98 ad       	ldd	r25, Y+56	; 0x38
    48e2:	89 2b       	or	r24, r25
    48e4:	80 83       	st	Z, r24
    48e6:	e8 a9       	ldd	r30, Y+48	; 0x30
    48e8:	f9 a9       	ldd	r31, Y+49	; 0x31
    48ea:	80 81       	ld	r24, Z
    48ec:	9f a9       	ldd	r25, Y+55	; 0x37
    48ee:	89 2b       	or	r24, r25
    48f0:	80 83       	st	Z, r24
    48f2:	c2 b8       	out	0x02, r12	; 2
    48f4:	ea a9       	ldd	r30, Y+50	; 0x32
    48f6:	fb a9       	ldd	r31, Y+51	; 0x33
    48f8:	80 81       	ld	r24, Z
    48fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    48fc:	89 23       	and	r24, r25
    48fe:	80 83       	st	Z, r24
    4900:	ea a9       	ldd	r30, Y+50	; 0x32
    4902:	fb a9       	ldd	r31, Y+51	; 0x33
    4904:	80 81       	ld	r24, Z
    4906:	98 ad       	ldd	r25, Y+56	; 0x38
    4908:	89 2b       	or	r24, r25
    490a:	80 83       	st	Z, r24
    490c:	d2 b8       	out	0x02, r13	; 2
    490e:	ea a9       	ldd	r30, Y+50	; 0x32
    4910:	fb a9       	ldd	r31, Y+51	; 0x33
    4912:	80 81       	ld	r24, Z
    4914:	9c ad       	ldd	r25, Y+60	; 0x3c
    4916:	89 23       	and	r24, r25
    4918:	80 83       	st	Z, r24
    491a:	ea a9       	ldd	r30, Y+50	; 0x32
    491c:	fb a9       	ldd	r31, Y+51	; 0x33
    491e:	80 81       	ld	r24, Z
    4920:	98 ad       	ldd	r25, Y+56	; 0x38
    4922:	89 2b       	or	r24, r25
    4924:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    4926:	ee a5       	ldd	r30, Y+46	; 0x2e
    4928:	ff a5       	ldd	r31, Y+47	; 0x2f
    492a:	80 81       	ld	r24, Z
    492c:	9e a9       	ldd	r25, Y+54	; 0x36
    492e:	89 2b       	or	r24, r25
    4930:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    4932:	df 91       	pop	r29
    4934:	cf 91       	pop	r28
    4936:	1f 91       	pop	r17
    4938:	0f 91       	pop	r16
    493a:	ff 90       	pop	r15
    493c:	ef 90       	pop	r14
    493e:	df 90       	pop	r13
    4940:	cf 90       	pop	r12
    4942:	bf 90       	pop	r11
    4944:	af 90       	pop	r10
    4946:	08 95       	ret

00004948 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    4948:	7f 92       	push	r7
    494a:	8f 92       	push	r8
    494c:	9f 92       	push	r9
    494e:	af 92       	push	r10
    4950:	bf 92       	push	r11
    4952:	cf 92       	push	r12
    4954:	df 92       	push	r13
    4956:	ef 92       	push	r14
    4958:	ff 92       	push	r15
    495a:	0f 93       	push	r16
    495c:	1f 93       	push	r17
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	ec 01       	movw	r28, r24
    4964:	59 01       	movw	r10, r18
    4966:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    4968:	0e 9d       	mul	r16, r14
    496a:	60 01       	movw	r12, r0
    496c:	0f 9d       	mul	r16, r15
    496e:	d0 0c       	add	r13, r0
    4970:	1e 9d       	mul	r17, r14
    4972:	d0 0c       	add	r13, r0
    4974:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    4976:	87 01       	movw	r16, r14
    4978:	04 0f       	add	r16, r20
    497a:	15 1f       	adc	r17, r21
    497c:	01 50       	subi	r16, 0x01	; 1
    497e:	11 09       	sbc	r17, r1
    4980:	26 0f       	add	r18, r22
    4982:	37 1f       	adc	r19, r23
    4984:	21 50       	subi	r18, 0x01	; 1
    4986:	31 09       	sbc	r19, r1
    4988:	e8 81       	ld	r30, Y
    498a:	f9 81       	ldd	r31, Y+1	; 0x01
    498c:	06 80       	ldd	r0, Z+6	; 0x06
    498e:	f7 81       	ldd	r31, Z+7	; 0x07
    4990:	e0 2d       	mov	r30, r0
    4992:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    4994:	77 24       	eor	r7, r7
    4996:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    4998:	1c 14       	cp	r1, r12
    499a:	1d 04       	cpc	r1, r13
    499c:	0c f0       	brlt	.+2      	; 0x49a0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    499e:	0a c1       	rjmp	.+532    	; 0x4bb4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    49a0:	ee a5       	ldd	r30, Y+46	; 0x2e
    49a2:	ff a5       	ldd	r31, Y+47	; 0x2f
    49a4:	80 81       	ld	r24, Z
    49a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    49a8:	89 23       	and	r24, r25
    49aa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    49ac:	e8 a9       	ldd	r30, Y+48	; 0x30
    49ae:	f9 a9       	ldd	r31, Y+49	; 0x31
    49b0:	80 81       	ld	r24, Z
    49b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    49b4:	89 23       	and	r24, r25
    49b6:	80 83       	st	Z, r24
    49b8:	9a a1       	ldd	r25, Y+34	; 0x22
    49ba:	8b a1       	ldd	r24, Y+35	; 0x23
    49bc:	82 b9       	out	0x02, r24	; 2
    49be:	ea a9       	ldd	r30, Y+50	; 0x32
    49c0:	fb a9       	ldd	r31, Y+51	; 0x33
    49c2:	80 81       	ld	r24, Z
    49c4:	2c ad       	ldd	r18, Y+60	; 0x3c
    49c6:	82 23       	and	r24, r18
    49c8:	80 83       	st	Z, r24
    49ca:	ea a9       	ldd	r30, Y+50	; 0x32
    49cc:	fb a9       	ldd	r31, Y+51	; 0x33
    49ce:	80 81       	ld	r24, Z
    49d0:	28 ad       	ldd	r18, Y+56	; 0x38
    49d2:	82 2b       	or	r24, r18
    49d4:	80 83       	st	Z, r24
    49d6:	92 b9       	out	0x02, r25	; 2
    49d8:	ea a9       	ldd	r30, Y+50	; 0x32
    49da:	fb a9       	ldd	r31, Y+51	; 0x33
    49dc:	80 81       	ld	r24, Z
    49de:	9c ad       	ldd	r25, Y+60	; 0x3c
    49e0:	89 23       	and	r24, r25
    49e2:	80 83       	st	Z, r24
    49e4:	ea a9       	ldd	r30, Y+50	; 0x32
    49e6:	fb a9       	ldd	r31, Y+51	; 0x33
    49e8:	80 81       	ld	r24, Z
    49ea:	98 ad       	ldd	r25, Y+56	; 0x38
    49ec:	89 2b       	or	r24, r25
    49ee:	80 83       	st	Z, r24
    49f0:	e8 a9       	ldd	r30, Y+48	; 0x30
    49f2:	f9 a9       	ldd	r31, Y+49	; 0x31
    49f4:	80 81       	ld	r24, Z
    49f6:	9f a9       	ldd	r25, Y+55	; 0x37
    49f8:	89 2b       	or	r24, r25
    49fa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    49fc:	81 b1       	in	r24, 0x01	; 1
    49fe:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    4a00:	88 8d       	ldd	r24, Y+24	; 0x18
    4a02:	99 8d       	ldd	r25, Y+25	; 0x19
    4a04:	89 2b       	or	r24, r25
    4a06:	09 f0       	breq	.+2      	; 0x4a0a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    4a08:	67 c0       	rjmp	.+206    	; 0x4ad8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    4a0a:	f5 01       	movw	r30, r10
    4a0c:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4a0e:	42 e0       	ldi	r20, 0x02	; 2
    4a10:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    4a12:	ac a9       	ldd	r26, Y+52	; 0x34
    4a14:	bd a9       	ldd	r27, Y+53	; 0x35
    4a16:	2c 91       	ld	r18, X
    4a18:	3d ad       	ldd	r19, Y+61	; 0x3d
    4a1a:	23 23       	and	r18, r19
    4a1c:	2c 93       	st	X, r18
    4a1e:	20 b1       	in	r18, 0x00	; 0
    4a20:	ac a9       	ldd	r26, Y+52	; 0x34
    4a22:	bd a9       	ldd	r27, Y+53	; 0x35
    4a24:	2c 91       	ld	r18, X
    4a26:	39 ad       	ldd	r19, Y+57	; 0x39
    4a28:	23 2b       	or	r18, r19
    4a2a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    4a2c:	ac a9       	ldd	r26, Y+52	; 0x34
    4a2e:	bd a9       	ldd	r27, Y+53	; 0x35
    4a30:	2c 91       	ld	r18, X
    4a32:	3d ad       	ldd	r19, Y+61	; 0x3d
    4a34:	23 23       	and	r18, r19
    4a36:	2c 93       	st	X, r18
    4a38:	20 b1       	in	r18, 0x00	; 0
    4a3a:	ac a9       	ldd	r26, Y+52	; 0x34
    4a3c:	bd a9       	ldd	r27, Y+53	; 0x35
    4a3e:	2c 91       	ld	r18, X
    4a40:	39 ad       	ldd	r19, Y+57	; 0x39
    4a42:	23 2b       	or	r18, r19
    4a44:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    4a46:	ac a9       	ldd	r26, Y+52	; 0x34
    4a48:	bd a9       	ldd	r27, Y+53	; 0x35
    4a4a:	2c 91       	ld	r18, X
    4a4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    4a4e:	23 23       	and	r18, r19
    4a50:	2c 93       	st	X, r18
    4a52:	20 b1       	in	r18, 0x00	; 0
    4a54:	ac a9       	ldd	r26, Y+52	; 0x34
    4a56:	bd a9       	ldd	r27, Y+53	; 0x35
    4a58:	3c 91       	ld	r19, X
    4a5a:	69 ad       	ldd	r22, Y+57	; 0x39
    4a5c:	36 2b       	or	r19, r22
    4a5e:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    4a60:	ac a9       	ldd	r26, Y+52	; 0x34
    4a62:	bd a9       	ldd	r27, Y+53	; 0x35
    4a64:	3c 91       	ld	r19, X
    4a66:	6d ad       	ldd	r22, Y+61	; 0x3d
    4a68:	36 23       	and	r19, r22
    4a6a:	3c 93       	st	X, r19
    4a6c:	60 b1       	in	r22, 0x00	; 0
    4a6e:	ac a9       	ldd	r26, Y+52	; 0x34
    4a70:	bd a9       	ldd	r27, Y+53	; 0x35
    4a72:	3c 91       	ld	r19, X
    4a74:	79 ad       	ldd	r23, Y+57	; 0x39
    4a76:	37 2b       	or	r19, r23
    4a78:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4a7a:	41 30       	cpi	r20, 0x01	; 1
    4a7c:	51 05       	cpc	r21, r1
    4a7e:	49 f5       	brne	.+82     	; 0x4ad2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    4a80:	32 2f       	mov	r19, r18
    4a82:	26 2f       	mov	r18, r22
    4a84:	21 93       	st	Z+, r18
    4a86:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    4a88:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4a8a:	09 f0       	breq	.+2      	; 0x4a8e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    4a8c:	c0 cf       	rjmp	.-128    	; 0x4a0e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    4a8e:	cc 0c       	add	r12, r12
    4a90:	dd 1c       	adc	r13, r13
    4a92:	ac 0c       	add	r10, r12
    4a94:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    4a96:	0c 89       	ldd	r16, Y+20	; 0x14
    4a98:	1d 89       	ldd	r17, Y+21	; 0x15
    4a9a:	01 50       	subi	r16, 0x01	; 1
    4a9c:	11 09       	sbc	r17, r1
    4a9e:	2a 89       	ldd	r18, Y+18	; 0x12
    4aa0:	3b 89       	ldd	r19, Y+19	; 0x13
    4aa2:	21 50       	subi	r18, 0x01	; 1
    4aa4:	31 09       	sbc	r19, r1
    4aa6:	e8 81       	ld	r30, Y
    4aa8:	f9 81       	ldd	r31, Y+1	; 0x01
    4aaa:	06 80       	ldd	r0, Z+6	; 0x06
    4aac:	f7 81       	ldd	r31, Z+7	; 0x07
    4aae:	e0 2d       	mov	r30, r0
    4ab0:	50 e0       	ldi	r21, 0x00	; 0
    4ab2:	40 e0       	ldi	r20, 0x00	; 0
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	60 e0       	ldi	r22, 0x00	; 0
    4ab8:	ce 01       	movw	r24, r28
    4aba:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    4abc:	ee a5       	ldd	r30, Y+46	; 0x2e
    4abe:	ff a5       	ldd	r31, Y+47	; 0x2f
    4ac0:	80 81       	ld	r24, Z
    4ac2:	9e a9       	ldd	r25, Y+54	; 0x36
    4ac4:	89 2b       	or	r24, r25
    4ac6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    4ac8:	81 b1       	in	r24, 0x01	; 1
    4aca:	71 b8       	out	0x01, r7	; 1
    4acc:	d1 2c       	mov	r13, r1
    4ace:	c1 2c       	mov	r12, r1
    4ad0:	63 cf       	rjmp	.-314    	; 0x4998 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4ad2:	41 e0       	ldi	r20, 0x01	; 1
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	9d cf       	rjmp	.-198    	; 0x4a12 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    4ad8:	ec a9       	ldd	r30, Y+52	; 0x34
    4ada:	fd a9       	ldd	r31, Y+53	; 0x35
    4adc:	80 81       	ld	r24, Z
    4ade:	9d ad       	ldd	r25, Y+61	; 0x3d
    4ae0:	89 23       	and	r24, r25
    4ae2:	80 83       	st	Z, r24
    4ae4:	80 b1       	in	r24, 0x00	; 0
    4ae6:	ec a9       	ldd	r30, Y+52	; 0x34
    4ae8:	fd a9       	ldd	r31, Y+53	; 0x35
    4aea:	80 81       	ld	r24, Z
    4aec:	99 ad       	ldd	r25, Y+57	; 0x39
    4aee:	89 2b       	or	r24, r25
    4af0:	80 83       	st	Z, r24
    4af2:	75 01       	movw	r14, r10
    4af4:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    4af6:	8c a5       	ldd	r24, Y+44	; 0x2c
    4af8:	9d a5       	ldd	r25, Y+45	; 0x2d
    4afa:	81 30       	cpi	r24, 0x01	; 1
    4afc:	91 05       	cpc	r25, r1
    4afe:	d9 f5       	brne	.+118    	; 0x4b76 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    4b00:	ec a9       	ldd	r30, Y+52	; 0x34
    4b02:	fd a9       	ldd	r31, Y+53	; 0x35
    4b04:	80 81       	ld	r24, Z
    4b06:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b08:	89 23       	and	r24, r25
    4b0a:	80 83       	st	Z, r24
    4b0c:	60 b1       	in	r22, 0x00	; 0
    4b0e:	ec a9       	ldd	r30, Y+52	; 0x34
    4b10:	fd a9       	ldd	r31, Y+53	; 0x35
    4b12:	80 81       	ld	r24, Z
    4b14:	99 ad       	ldd	r25, Y+57	; 0x39
    4b16:	89 2b       	or	r24, r25
    4b18:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    4b1a:	ec a9       	ldd	r30, Y+52	; 0x34
    4b1c:	fd a9       	ldd	r31, Y+53	; 0x35
    4b1e:	80 81       	ld	r24, Z
    4b20:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b22:	89 23       	and	r24, r25
    4b24:	80 83       	st	Z, r24
    4b26:	40 b1       	in	r20, 0x00	; 0
    4b28:	ec a9       	ldd	r30, Y+52	; 0x34
    4b2a:	fd a9       	ldd	r31, Y+53	; 0x35
    4b2c:	80 81       	ld	r24, Z
    4b2e:	99 ad       	ldd	r25, Y+57	; 0x39
    4b30:	89 2b       	or	r24, r25
    4b32:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    4b34:	ec a9       	ldd	r30, Y+52	; 0x34
    4b36:	fd a9       	ldd	r31, Y+53	; 0x35
    4b38:	80 81       	ld	r24, Z
    4b3a:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b3c:	89 23       	and	r24, r25
    4b3e:	80 83       	st	Z, r24
    4b40:	20 b1       	in	r18, 0x00	; 0
    4b42:	ec a9       	ldd	r30, Y+52	; 0x34
    4b44:	fd a9       	ldd	r31, Y+53	; 0x35
    4b46:	80 81       	ld	r24, Z
    4b48:	99 ad       	ldd	r25, Y+57	; 0x39
    4b4a:	89 2b       	or	r24, r25
    4b4c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    4b4e:	e8 81       	ld	r30, Y
    4b50:	f9 81       	ldd	r31, Y+1	; 0x01
    4b52:	01 90       	ld	r0, Z+
    4b54:	f0 81       	ld	r31, Z
    4b56:	e0 2d       	mov	r30, r0
    4b58:	ce 01       	movw	r24, r28
    4b5a:	19 95       	eicall
    4b5c:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    4b5e:	f7 01       	movw	r30, r14
    4b60:	81 92       	st	Z+, r8
    4b62:	91 92       	st	Z+, r9
    4b64:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    4b66:	01 50       	subi	r16, 0x01	; 1
    4b68:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    4b6a:	29 f6       	brne	.-118    	; 0x4af6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    4b6c:	cc 0c       	add	r12, r12
    4b6e:	dd 1c       	adc	r13, r13
    4b70:	ac 0c       	add	r10, r12
    4b72:	bd 1c       	adc	r11, r13
    4b74:	a3 cf       	rjmp	.-186    	; 0x4abc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    4b76:	89 2b       	or	r24, r25
    4b78:	91 f7       	brne	.-28     	; 0x4b5e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4b7a:	ec a9       	ldd	r30, Y+52	; 0x34
    4b7c:	fd a9       	ldd	r31, Y+53	; 0x35
    4b7e:	80 81       	ld	r24, Z
    4b80:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b82:	89 23       	and	r24, r25
    4b84:	80 83       	st	Z, r24
    4b86:	80 b0       	in	r8, 0x00	; 0
    4b88:	ec a9       	ldd	r30, Y+52	; 0x34
    4b8a:	fd a9       	ldd	r31, Y+53	; 0x35
    4b8c:	80 81       	ld	r24, Z
    4b8e:	99 ad       	ldd	r25, Y+57	; 0x39
    4b90:	89 2b       	or	r24, r25
    4b92:	80 83       	st	Z, r24
    4b94:	ec a9       	ldd	r30, Y+52	; 0x34
    4b96:	fd a9       	ldd	r31, Y+53	; 0x35
    4b98:	80 81       	ld	r24, Z
    4b9a:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b9c:	89 23       	and	r24, r25
    4b9e:	80 83       	st	Z, r24
    4ba0:	90 b1       	in	r25, 0x00	; 0
    4ba2:	ec a9       	ldd	r30, Y+52	; 0x34
    4ba4:	fd a9       	ldd	r31, Y+53	; 0x35
    4ba6:	80 81       	ld	r24, Z
    4ba8:	29 ad       	ldd	r18, Y+57	; 0x39
    4baa:	82 2b       	or	r24, r18
    4bac:	80 83       	st	Z, r24
    4bae:	98 2c       	mov	r9, r8
    4bb0:	89 2e       	mov	r8, r25
    4bb2:	d5 cf       	rjmp	.-86     	; 0x4b5e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	df 90       	pop	r13
    4bc6:	cf 90       	pop	r12
    4bc8:	bf 90       	pop	r11
    4bca:	af 90       	pop	r10
    4bcc:	9f 90       	pop	r9
    4bce:	8f 90       	pop	r8
    4bd0:	7f 90       	pop	r7
    4bd2:	08 95       	ret

00004bd4 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    4bd4:	38 e0       	ldi	r19, 0x08	; 8
    4bd6:	43 9f       	mul	r20, r19
    4bd8:	c0 01       	movw	r24, r0
    4bda:	11 24       	eor	r1, r1
    4bdc:	80 7e       	andi	r24, 0xE0	; 224
    4bde:	97 70       	andi	r25, 0x07	; 7
    4be0:	26 95       	lsr	r18
    4be2:	26 95       	lsr	r18
    4be4:	26 95       	lsr	r18
    4be6:	82 2b       	or	r24, r18
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	76 2f       	mov	r23, r22
    4bec:	66 27       	eor	r22, r22
    4bee:	66 27       	eor	r22, r22
    4bf0:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    4bf2:	86 2b       	or	r24, r22
    4bf4:	97 2b       	or	r25, r23
    4bf6:	08 95       	ret

00004bf8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    4bf8:	0f 93       	push	r16
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	dc 01       	movw	r26, r24
    4c00:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    4c02:	9e 96       	adiw	r26, 0x2e	; 46
    4c04:	ed 91       	ld	r30, X+
    4c06:	fc 91       	ld	r31, X
    4c08:	9f 97       	sbiw	r26, 0x2f	; 47
    4c0a:	80 81       	ld	r24, Z
    4c0c:	da 96       	adiw	r26, 0x3a	; 58
    4c0e:	9c 91       	ld	r25, X
    4c10:	da 97       	sbiw	r26, 0x3a	; 58
    4c12:	89 23       	and	r24, r25
    4c14:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    4c16:	22 23       	and	r18, r18
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    4c1a:	5b c0       	rjmp	.+182    	; 0x4cd2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    4c1c:	58 96       	adiw	r26, 0x18	; 24
    4c1e:	8d 91       	ld	r24, X+
    4c20:	9c 91       	ld	r25, X
    4c22:	59 97       	sbiw	r26, 0x19	; 25
    4c24:	89 2b       	or	r24, r25
    4c26:	49 f5       	brne	.+82     	; 0x4c7a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    4c28:	d0 96       	adiw	r26, 0x30	; 48
    4c2a:	ed 91       	ld	r30, X+
    4c2c:	fc 91       	ld	r31, X
    4c2e:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    4c30:	80 81       	ld	r24, Z
    4c32:	db 96       	adiw	r26, 0x3b	; 59
    4c34:	9c 91       	ld	r25, X
    4c36:	db 97       	sbiw	r26, 0x3b	; 59
    4c38:	89 23       	and	r24, r25
    4c3a:	80 83       	st	Z, r24
    4c3c:	12 b8       	out	0x02, r1	; 2
    4c3e:	d2 96       	adiw	r26, 0x32	; 50
    4c40:	ed 91       	ld	r30, X+
    4c42:	fc 91       	ld	r31, X
    4c44:	d3 97       	sbiw	r26, 0x33	; 51
    4c46:	80 81       	ld	r24, Z
    4c48:	dc 96       	adiw	r26, 0x3c	; 60
    4c4a:	9c 91       	ld	r25, X
    4c4c:	dc 97       	sbiw	r26, 0x3c	; 60
    4c4e:	89 23       	and	r24, r25
    4c50:	80 83       	st	Z, r24
    4c52:	d2 96       	adiw	r26, 0x32	; 50
    4c54:	ed 91       	ld	r30, X+
    4c56:	fc 91       	ld	r31, X
    4c58:	d3 97       	sbiw	r26, 0x33	; 51
    4c5a:	80 81       	ld	r24, Z
    4c5c:	d8 96       	adiw	r26, 0x38	; 56
    4c5e:	9c 91       	ld	r25, X
    4c60:	d8 97       	sbiw	r26, 0x38	; 56
    4c62:	89 2b       	or	r24, r25
    4c64:	80 83       	st	Z, r24
    4c66:	d0 96       	adiw	r26, 0x30	; 48
    4c68:	ed 91       	ld	r30, X+
    4c6a:	fc 91       	ld	r31, X
    4c6c:	d1 97       	sbiw	r26, 0x31	; 49
    4c6e:	80 81       	ld	r24, Z
    4c70:	d7 96       	adiw	r26, 0x37	; 55
    4c72:	9c 91       	ld	r25, X
    4c74:	d7 97       	sbiw	r26, 0x37	; 55
    4c76:	89 2b       	or	r24, r25
    4c78:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4c7a:	d0 96       	adiw	r26, 0x30	; 48
    4c7c:	ed 91       	ld	r30, X+
    4c7e:	fc 91       	ld	r31, X
    4c80:	d1 97       	sbiw	r26, 0x31	; 49
    4c82:	80 81       	ld	r24, Z
    4c84:	db 96       	adiw	r26, 0x3b	; 59
    4c86:	9c 91       	ld	r25, X
    4c88:	db 97       	sbiw	r26, 0x3b	; 59
    4c8a:	89 23       	and	r24, r25
    4c8c:	80 83       	st	Z, r24
    4c8e:	90 96       	adiw	r26, 0x20	; 32
    4c90:	8c 91       	ld	r24, X
    4c92:	90 97       	sbiw	r26, 0x20	; 32
    4c94:	82 b9       	out	0x02, r24	; 2
    4c96:	d2 96       	adiw	r26, 0x32	; 50
    4c98:	ed 91       	ld	r30, X+
    4c9a:	fc 91       	ld	r31, X
    4c9c:	d3 97       	sbiw	r26, 0x33	; 51
    4c9e:	80 81       	ld	r24, Z
    4ca0:	dc 96       	adiw	r26, 0x3c	; 60
    4ca2:	9c 91       	ld	r25, X
    4ca4:	dc 97       	sbiw	r26, 0x3c	; 60
    4ca6:	89 23       	and	r24, r25
    4ca8:	80 83       	st	Z, r24
    4caa:	d2 96       	adiw	r26, 0x32	; 50
    4cac:	ed 91       	ld	r30, X+
    4cae:	fc 91       	ld	r31, X
    4cb0:	d3 97       	sbiw	r26, 0x33	; 51
    4cb2:	80 81       	ld	r24, Z
    4cb4:	d8 96       	adiw	r26, 0x38	; 56
    4cb6:	9c 91       	ld	r25, X
    4cb8:	d8 97       	sbiw	r26, 0x38	; 56
    4cba:	89 2b       	or	r24, r25
    4cbc:	80 83       	st	Z, r24
    4cbe:	d0 96       	adiw	r26, 0x30	; 48
    4cc0:	ed 91       	ld	r30, X+
    4cc2:	fc 91       	ld	r31, X
    4cc4:	d1 97       	sbiw	r26, 0x31	; 49
    4cc6:	80 81       	ld	r24, Z
    4cc8:	d7 96       	adiw	r26, 0x37	; 55
    4cca:	9c 91       	ld	r25, X
    4ccc:	d7 97       	sbiw	r26, 0x37	; 55
    4cce:	89 2b       	or	r24, r25
    4cd0:	80 83       	st	Z, r24
    4cd2:	eb 01       	movw	r28, r22
    4cd4:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    4cd6:	18 16       	cp	r1, r24
    4cd8:	19 06       	cpc	r1, r25
    4cda:	bc f5       	brge	.+110    	; 0x4d4a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    4cdc:	00 23       	and	r16, r16
    4cde:	91 f1       	breq	.+100    	; 0x4d44 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	45 91       	lpm	r20, Z+
    4ce4:	54 91       	lpm	r21, Z
    4ce6:	34 2f       	mov	r19, r20
    4ce8:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    4cea:	22 b9       	out	0x02, r18	; 2
    4cec:	d2 96       	adiw	r26, 0x32	; 50
    4cee:	ed 91       	ld	r30, X+
    4cf0:	fc 91       	ld	r31, X
    4cf2:	d3 97       	sbiw	r26, 0x33	; 51
    4cf4:	20 81       	ld	r18, Z
    4cf6:	dc 96       	adiw	r26, 0x3c	; 60
    4cf8:	4c 91       	ld	r20, X
    4cfa:	dc 97       	sbiw	r26, 0x3c	; 60
    4cfc:	24 23       	and	r18, r20
    4cfe:	20 83       	st	Z, r18
    4d00:	d2 96       	adiw	r26, 0x32	; 50
    4d02:	ed 91       	ld	r30, X+
    4d04:	fc 91       	ld	r31, X
    4d06:	d3 97       	sbiw	r26, 0x33	; 51
    4d08:	20 81       	ld	r18, Z
    4d0a:	d8 96       	adiw	r26, 0x38	; 56
    4d0c:	4c 91       	ld	r20, X
    4d0e:	d8 97       	sbiw	r26, 0x38	; 56
    4d10:	24 2b       	or	r18, r20
    4d12:	20 83       	st	Z, r18
    4d14:	32 b9       	out	0x02, r19	; 2
    4d16:	d2 96       	adiw	r26, 0x32	; 50
    4d18:	ed 91       	ld	r30, X+
    4d1a:	fc 91       	ld	r31, X
    4d1c:	d3 97       	sbiw	r26, 0x33	; 51
    4d1e:	20 81       	ld	r18, Z
    4d20:	dc 96       	adiw	r26, 0x3c	; 60
    4d22:	3c 91       	ld	r19, X
    4d24:	dc 97       	sbiw	r26, 0x3c	; 60
    4d26:	23 23       	and	r18, r19
    4d28:	20 83       	st	Z, r18
    4d2a:	d2 96       	adiw	r26, 0x32	; 50
    4d2c:	ed 91       	ld	r30, X+
    4d2e:	fc 91       	ld	r31, X
    4d30:	d3 97       	sbiw	r26, 0x33	; 51
    4d32:	20 81       	ld	r18, Z
    4d34:	d8 96       	adiw	r26, 0x38	; 56
    4d36:	3c 91       	ld	r19, X
    4d38:	d8 97       	sbiw	r26, 0x38	; 56
    4d3a:	23 2b       	or	r18, r19
    4d3c:	20 83       	st	Z, r18
    4d3e:	22 96       	adiw	r28, 0x02	; 2
    4d40:	01 97       	sbiw	r24, 0x01	; 1
    4d42:	c9 cf       	rjmp	.-110    	; 0x4cd6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    4d44:	38 81       	ld	r19, Y
    4d46:	29 81       	ldd	r18, Y+1	; 0x01
    4d48:	d0 cf       	rjmp	.-96     	; 0x4cea <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    4d4a:	9e 96       	adiw	r26, 0x2e	; 46
    4d4c:	ed 91       	ld	r30, X+
    4d4e:	fc 91       	ld	r31, X
    4d50:	9f 97       	sbiw	r26, 0x2f	; 47
    4d52:	80 81       	ld	r24, Z
    4d54:	d6 96       	adiw	r26, 0x36	; 54
    4d56:	9c 91       	ld	r25, X
    4d58:	89 2b       	or	r24, r25
    4d5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    4d64:	2f 92       	push	r2
    4d66:	3f 92       	push	r3
    4d68:	4f 92       	push	r4
    4d6a:	5f 92       	push	r5
    4d6c:	6f 92       	push	r6
    4d6e:	7f 92       	push	r7
    4d70:	8f 92       	push	r8
    4d72:	9f 92       	push	r9
    4d74:	af 92       	push	r10
    4d76:	bf 92       	push	r11
    4d78:	cf 92       	push	r12
    4d7a:	df 92       	push	r13
    4d7c:	ef 92       	push	r14
    4d7e:	ff 92       	push	r15
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	00 d0       	rcall	.+0      	; 0x4d8a <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    4d8a:	00 d0       	rcall	.+0      	; 0x4d8c <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    4d90:	28 2e       	mov	r2, r24
    4d92:	31 2c       	mov	r3, r1
    4d94:	c1 01       	movw	r24, r2
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	e0 91 84 0c 	lds	r30, 0x0C84	; 0x800c84 <array_pids>
    4d9e:	f0 91 85 0c 	lds	r31, 0x0C85	; 0x800c85 <array_pids+0x1>
    4da2:	e8 0f       	add	r30, r24
    4da4:	f9 1f       	adc	r31, r25
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	9e 83       	std	Y+6, r25	; 0x06
    4dac:	8d 83       	std	Y+5, r24	; 0x05
    4dae:	81 01       	movw	r16, r2
    4db0:	00 0f       	add	r16, r16
    4db2:	11 1f       	adc	r17, r17
    4db4:	00 0f       	add	r16, r16
    4db6:	11 1f       	adc	r17, r17
    4db8:	f8 01       	movw	r30, r16
    4dba:	e2 52       	subi	r30, 0x22	; 34
    4dbc:	f6 4f       	sbci	r31, 0xF6	; 246
    4dbe:	40 80       	ld	r4, Z
    4dc0:	51 80       	ldd	r5, Z+1	; 0x01
    4dc2:	62 80       	ldd	r6, Z+2	; 0x02
    4dc4:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	a9 01       	movw	r20, r18
    4dcc:	c3 01       	movw	r24, r6
    4dce:	b2 01       	movw	r22, r4
    4dd0:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
    4dd4:	87 fd       	sbrc	r24, 7
    4dd6:	97 c0       	rjmp	.+302    	; 0x4f06 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    4dd8:	f8 01       	movw	r30, r16
    4dda:	ee 50       	subi	r30, 0x0E	; 14
    4ddc:	f6 4f       	sbci	r31, 0xF6	; 246
    4dde:	80 80       	ld	r8, Z
    4de0:	91 80       	ldd	r9, Z+1	; 0x01
    4de2:	a2 80       	ldd	r10, Z+2	; 0x02
    4de4:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	a9 01       	movw	r20, r18
    4dec:	c5 01       	movw	r24, r10
    4dee:	b4 01       	movw	r22, r8
    4df0:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
    4df4:	87 fd       	sbrc	r24, 7
    4df6:	87 c0       	rjmp	.+270    	; 0x4f06 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    4df8:	f8 01       	movw	r30, r16
    4dfa:	ea 5f       	subi	r30, 0xFA	; 250
    4dfc:	f5 4f       	sbci	r31, 0xF5	; 245
    4dfe:	c0 80       	ld	r12, Z
    4e00:	d1 80       	ldd	r13, Z+1	; 0x01
    4e02:	e2 80       	ldd	r14, Z+2	; 0x02
    4e04:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	a9 01       	movw	r20, r18
    4e0c:	c7 01       	movw	r24, r14
    4e0e:	b6 01       	movw	r22, r12
    4e10:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
    4e14:	87 fd       	sbrc	r24, 7
    4e16:	77 c0       	rjmp	.+238    	; 0x4f06 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	ed 81       	ldd	r30, Y+5	; 0x05
    4e1c:	fe 81       	ldd	r31, Y+6	; 0x06
    4e1e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4e20:	33 8d       	ldd	r19, Z+27	; 0x1b
    4e22:	21 30       	cpi	r18, 0x01	; 1
    4e24:	31 05       	cpc	r19, r1
    4e26:	09 f0       	breq	.+2      	; 0x4e2a <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	ed 81       	ldd	r30, Y+5	; 0x05
    4e2c:	fe 81       	ldd	r31, Y+6	; 0x06
    4e2e:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    4e30:	40 82       	st	Z, r4
    4e32:	51 82       	std	Z+1, r5	; 0x01
    4e34:	62 82       	std	Z+2, r6	; 0x02
    4e36:	73 82       	std	Z+3, r7	; 0x03
    4e38:	84 82       	std	Z+4, r8	; 0x04
    4e3a:	95 82       	std	Z+5, r9	; 0x05
    4e3c:	a6 82       	std	Z+6, r10	; 0x06
    4e3e:	b7 82       	std	Z+7, r11	; 0x07
    4e40:	c0 86       	std	Z+8, r12	; 0x08
    4e42:	d1 86       	std	Z+9, r13	; 0x09
    4e44:	e2 86       	std	Z+10, r14	; 0x0a
    4e46:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    4e48:	66 a5       	ldd	r22, Z+46	; 0x2e
    4e4a:	77 a5       	ldd	r23, Z+47	; 0x2f
    4e4c:	80 a9       	ldd	r24, Z+48	; 0x30
    4e4e:	91 a9       	ldd	r25, Z+49	; 0x31
    4e50:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	4a e7       	ldi	r20, 0x7A	; 122
    4e5a:	54 e4       	ldi	r21, 0x44	; 68
    4e5c:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
    4e60:	69 83       	std	Y+1, r22	; 0x01
    4e62:	7a 83       	std	Y+2, r23	; 0x02
    4e64:	8b 83       	std	Y+3, r24	; 0x03
    4e66:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    4e68:	ed 81       	ldd	r30, Y+5	; 0x05
    4e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    4e6c:	44 86       	std	Z+12, r4	; 0x0c
    4e6e:	55 86       	std	Z+13, r5	; 0x0d
    4e70:	66 86       	std	Z+14, r6	; 0x0e
    4e72:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    4e74:	9b 01       	movw	r18, r22
    4e76:	ac 01       	movw	r20, r24
    4e78:	c5 01       	movw	r24, r10
    4e7a:	b4 01       	movw	r22, r8
    4e7c:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
    4e80:	4b 01       	movw	r8, r22
    4e82:	5c 01       	movw	r10, r24
    4e84:	ed 81       	ldd	r30, Y+5	; 0x05
    4e86:	fe 81       	ldd	r31, Y+6	; 0x06
    4e88:	80 8a       	std	Z+16, r8	; 0x10
    4e8a:	91 8a       	std	Z+17, r9	; 0x11
    4e8c:	a2 8a       	std	Z+18, r10	; 0x12
    4e8e:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    4e90:	29 81       	ldd	r18, Y+1	; 0x01
    4e92:	3a 81       	ldd	r19, Y+2	; 0x02
    4e94:	4b 81       	ldd	r20, Y+3	; 0x03
    4e96:	5c 81       	ldd	r21, Y+4	; 0x04
    4e98:	c7 01       	movw	r24, r14
    4e9a:	b6 01       	movw	r22, r12
    4e9c:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
    4ea0:	6b 01       	movw	r12, r22
    4ea2:	7c 01       	movw	r14, r24
    4ea4:	ed 81       	ldd	r30, Y+5	; 0x05
    4ea6:	fe 81       	ldd	r31, Y+6	; 0x06
    4ea8:	c4 8a       	std	Z+20, r12	; 0x14
    4eaa:	d5 8a       	std	Z+21, r13	; 0x15
    4eac:	e6 8a       	std	Z+22, r14	; 0x16
    4eae:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    4eb0:	80 8d       	ldd	r24, Z+24	; 0x18
    4eb2:	91 8d       	ldd	r25, Z+25	; 0x19
    4eb4:	01 97       	sbiw	r24, 0x01	; 1
    4eb6:	39 f5       	brne	.+78     	; 0x4f06 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    4eb8:	a3 01       	movw	r20, r6
    4eba:	92 01       	movw	r18, r4
    4ebc:	60 e0       	ldi	r22, 0x00	; 0
    4ebe:	70 e0       	ldi	r23, 0x00	; 0
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	0e 94 8f bb 	call	0x1771e	; 0x1771e <__subsf3>
    4ec6:	ed 81       	ldd	r30, Y+5	; 0x05
    4ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    4eca:	64 87       	std	Z+12, r22	; 0x0c
    4ecc:	75 87       	std	Z+13, r23	; 0x0d
    4ece:	86 87       	std	Z+14, r24	; 0x0e
    4ed0:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    4ed2:	a5 01       	movw	r20, r10
    4ed4:	94 01       	movw	r18, r8
    4ed6:	60 e0       	ldi	r22, 0x00	; 0
    4ed8:	70 e0       	ldi	r23, 0x00	; 0
    4eda:	cb 01       	movw	r24, r22
    4edc:	0e 94 8f bb 	call	0x1771e	; 0x1771e <__subsf3>
    4ee0:	ed 81       	ldd	r30, Y+5	; 0x05
    4ee2:	fe 81       	ldd	r31, Y+6	; 0x06
    4ee4:	60 8b       	std	Z+16, r22	; 0x10
    4ee6:	71 8b       	std	Z+17, r23	; 0x11
    4ee8:	82 8b       	std	Z+18, r24	; 0x12
    4eea:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    4eec:	a7 01       	movw	r20, r14
    4eee:	96 01       	movw	r18, r12
    4ef0:	60 e0       	ldi	r22, 0x00	; 0
    4ef2:	70 e0       	ldi	r23, 0x00	; 0
    4ef4:	cb 01       	movw	r24, r22
    4ef6:	0e 94 8f bb 	call	0x1771e	; 0x1771e <__subsf3>
    4efa:	ed 81       	ldd	r30, Y+5	; 0x05
    4efc:	fe 81       	ldd	r31, Y+6	; 0x06
    4efe:	64 8b       	std	Z+20, r22	; 0x14
    4f00:	75 8b       	std	Z+21, r23	; 0x15
    4f02:	86 8b       	std	Z+22, r24	; 0x16
    4f04:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    4f06:	f1 01       	movw	r30, r2
    4f08:	e6 5e       	subi	r30, 0xE6	; 230
    4f0a:	f5 4f       	sbci	r31, 0xF5	; 245
    4f0c:	10 81       	ld	r17, Z
    4f0e:	61 2f       	mov	r22, r17
    4f10:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    4f12:	61 15       	cp	r22, r1
    4f14:	71 05       	cpc	r23, r1
    4f16:	f1 f1       	breq	.+124    	; 0x4f94 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    4f18:	07 2e       	mov	r0, r23
    4f1a:	00 0c       	add	r0, r0
    4f1c:	88 0b       	sbc	r24, r24
    4f1e:	99 0b       	sbc	r25, r25
    4f20:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    4f24:	6b 01       	movw	r12, r22
    4f26:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    4f28:	ed 81       	ldd	r30, Y+5	; 0x05
    4f2a:	fe 81       	ldd	r31, Y+6	; 0x06
    4f2c:	66 a5       	ldd	r22, Z+46	; 0x2e
    4f2e:	77 a5       	ldd	r23, Z+47	; 0x2f
    4f30:	80 a9       	ldd	r24, Z+48	; 0x30
    4f32:	91 a9       	ldd	r25, Z+49	; 0x31
    4f34:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    4f38:	9b 01       	movw	r18, r22
    4f3a:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    4f3c:	c7 01       	movw	r24, r14
    4f3e:	b6 01       	movw	r22, r12
    4f40:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
    4f44:	6b 01       	movw	r12, r22
    4f46:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    4f48:	ac 01       	movw	r20, r24
    4f4a:	9b 01       	movw	r18, r22
    4f4c:	ed 81       	ldd	r30, Y+5	; 0x05
    4f4e:	fe 81       	ldd	r31, Y+6	; 0x06
    4f50:	60 89       	ldd	r22, Z+16	; 0x10
    4f52:	71 89       	ldd	r23, Z+17	; 0x11
    4f54:	82 89       	ldd	r24, Z+18	; 0x12
    4f56:	93 89       	ldd	r25, Z+19	; 0x13
    4f58:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
    4f5c:	ed 81       	ldd	r30, Y+5	; 0x05
    4f5e:	fe 81       	ldd	r31, Y+6	; 0x06
    4f60:	60 8b       	std	Z+16, r22	; 0x10
    4f62:	71 8b       	std	Z+17, r23	; 0x11
    4f64:	82 8b       	std	Z+18, r24	; 0x12
    4f66:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    4f68:	a7 01       	movw	r20, r14
    4f6a:	96 01       	movw	r18, r12
    4f6c:	64 89       	ldd	r22, Z+20	; 0x14
    4f6e:	75 89       	ldd	r23, Z+21	; 0x15
    4f70:	86 89       	ldd	r24, Z+22	; 0x16
    4f72:	97 89       	ldd	r25, Z+23	; 0x17
    4f74:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
    4f78:	ed 81       	ldd	r30, Y+5	; 0x05
    4f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    4f7c:	64 8b       	std	Z+20, r22	; 0x14
    4f7e:	75 8b       	std	Z+21, r23	; 0x15
    4f80:	86 8b       	std	Z+22, r24	; 0x16
    4f82:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    4f84:	81 2f       	mov	r24, r17
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	b0 e0       	ldi	r27, 0x00	; 0
    4f8a:	a0 e0       	ldi	r26, 0x00	; 0
    4f8c:	86 a7       	std	Z+46, r24	; 0x2e
    4f8e:	97 a7       	std	Z+47, r25	; 0x2f
    4f90:	a0 ab       	std	Z+48, r26	; 0x30
    4f92:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:221
}
    4f94:	26 96       	adiw	r28, 0x06	; 6
    4f96:	0f b6       	in	r0, 0x3f	; 63
    4f98:	f8 94       	cli
    4f9a:	de bf       	out	0x3e, r29	; 62
    4f9c:	0f be       	out	0x3f, r0	; 63
    4f9e:	cd bf       	out	0x3d, r28	; 61
    4fa0:	df 91       	pop	r29
    4fa2:	cf 91       	pop	r28
    4fa4:	1f 91       	pop	r17
    4fa6:	0f 91       	pop	r16
    4fa8:	ff 90       	pop	r15
    4faa:	ef 90       	pop	r14
    4fac:	df 90       	pop	r13
    4fae:	cf 90       	pop	r12
    4fb0:	bf 90       	pop	r11
    4fb2:	af 90       	pop	r10
    4fb4:	9f 90       	pop	r9
    4fb6:	8f 90       	pop	r8
    4fb8:	7f 90       	pop	r7
    4fba:	6f 90       	pop	r6
    4fbc:	5f 90       	pop	r5
    4fbe:	4f 90       	pop	r4
    4fc0:	3f 90       	pop	r3
    4fc2:	2f 90       	pop	r2
    4fc4:	08 95       	ret

00004fc6 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    4fc6:	fb 01       	movw	r30, r22
    4fc8:	9c 01       	movw	r18, r24
    4fca:	28 5f       	subi	r18, 0xF8	; 248
    4fcc:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    4fce:	dc 01       	movw	r26, r24
    4fd0:	5d 91       	ld	r21, X+
    4fd2:	cd 01       	movw	r24, r26
    4fd4:	41 91       	ld	r20, Z+
    4fd6:	54 13       	cpse	r21, r20
    4fd8:	05 c0       	rjmp	.+10     	; 0x4fe4 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    4fda:	a2 17       	cp	r26, r18
    4fdc:	b3 07       	cpc	r27, r19
    4fde:	b9 f7       	brne	.-18     	; 0x4fce <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    4fe4:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    4fe6:	08 95       	ret

00004fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    4fe8:	80 33       	cpi	r24, 0x30	; 48
    4fea:	9c f0       	brlt	.+38     	; 0x5012 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    4fec:	8a 33       	cpi	r24, 0x3A	; 58
    4fee:	24 f0       	brlt	.+8      	; 0x4ff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    4ff0:	8f 35       	cpi	r24, 0x5F	; 95
    4ff2:	24 f0       	brlt	.+8      	; 0x4ffc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    4ff4:	8b 37       	cpi	r24, 0x7B	; 123
    4ff6:	24 f4       	brge	.+8      	; 0x5000 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    4ffa:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    4ffc:	81 34       	cpi	r24, 0x41	; 65
    4ffe:	4c f0       	brlt	.+18     	; 0x5012 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    5000:	8b 35       	cpi	r24, 0x5B	; 91
    5002:	d4 f3       	brlt	.-12     	; 0x4ff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    5004:	93 ed       	ldi	r25, 0xD3	; 211
    5006:	98 0f       	add	r25, r24
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	92 30       	cpi	r25, 0x02	; 2
    500c:	b0 f3       	brcs	.-20     	; 0x4ffa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	08 95       	ret
    5012:	8b 32       	cpi	r24, 0x2B	; 43
    5014:	b9 f7       	brne	.-18     	; 0x5004 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    5016:	f0 cf       	rjmp	.-32     	; 0x4ff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00005018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    5018:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    501a:	80 85       	ldd	r24, Z+8	; 0x08
    501c:	81 11       	cpse	r24, r1
    501e:	0a c0       	rjmp	.+20     	; 0x5034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    5020:	a2 81       	ldd	r26, Z+2	; 0x02
    5022:	b3 81       	ldd	r27, Z+3	; 0x03
    5024:	cd 01       	movw	r24, r26
    5026:	01 96       	adiw	r24, 0x01	; 1
    5028:	93 83       	std	Z+3, r25	; 0x03
    502a:	82 83       	std	Z+2, r24	; 0x02
    502c:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    502e:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    5034:	87 81       	ldd	r24, Z+7	; 0x07
    5036:	08 95       	ret

00005038 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    5038:	df 92       	push	r13
    503a:	ef 92       	push	r14
    503c:	ff 92       	push	r15
    503e:	0f 93       	push	r16
    5040:	1f 93       	push	r17
    5042:	cf 93       	push	r28
    5044:	df 93       	push	r29
    5046:	ec 01       	movw	r28, r24
    5048:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    504a:	0c 81       	ldd	r16, Y+4	; 0x04
    504c:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    504e:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5052:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5054:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    5056:	ce 01       	movw	r24, r28
    5058:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    505c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    505e:	d8 16       	cp	r13, r24
    5060:	89 f1       	breq	.+98     	; 0x50c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    5062:	81 11       	cpse	r24, r1
    5064:	0a c0       	rjmp	.+20     	; 0x507a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	ff 90       	pop	r15
    5074:	ef 90       	pop	r14
    5076:	df 90       	pop	r13
    5078:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    507a:	8c 35       	cpi	r24, 0x5C	; 92
    507c:	d1 f4       	brne	.+52     	; 0x50b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    507e:	ce 01       	movw	r24, r28
    5080:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    5084:	88 23       	and	r24, r24
    5086:	79 f3       	breq	.-34     	; 0x5066 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    5088:	85 37       	cpi	r24, 0x75	; 117
    508a:	19 f4       	brne	.+6      	; 0x5092 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    508c:	84 e0       	ldi	r24, 0x04	; 4
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	ec cf       	rjmp	.-40     	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    5092:	e8 ee       	ldi	r30, 0xE8	; 232
    5094:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    5096:	90 81       	ld	r25, Z
    5098:	99 23       	and	r25, r25
    509a:	51 f0       	breq	.+20     	; 0x50b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    509c:	89 13       	cpse	r24, r25
    509e:	06 c0       	rjmp	.+12     	; 0x50ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    50a0:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    50a2:	81 11       	cpse	r24, r1
    50a4:	05 c0       	rjmp	.+10     	; 0x50b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    50a6:	82 e0       	ldi	r24, 0x02	; 2
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	df cf       	rjmp	.-66     	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    50ac:	32 96       	adiw	r30, 0x02	; 2
    50ae:	f3 cf       	rjmp	.-26     	; 0x5096 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50b0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    50b2:	ec 81       	ldd	r30, Y+4	; 0x04
    50b4:	fd 81       	ldd	r31, Y+5	; 0x05
    50b6:	9f 01       	movw	r18, r30
    50b8:	2f 5f       	subi	r18, 0xFF	; 255
    50ba:	3f 4f       	sbci	r19, 0xFF	; 255
    50bc:	3d 83       	std	Y+5, r19	; 0x05
    50be:	2c 83       	std	Y+4, r18	; 0x04
    50c0:	80 83       	st	Z, r24
    50c2:	c9 cf       	rjmp	.-110    	; 0x5056 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    50c4:	ec 81       	ldd	r30, Y+4	; 0x04
    50c6:	fd 81       	ldd	r31, Y+5	; 0x05
    50c8:	cf 01       	movw	r24, r30
    50ca:	01 96       	adiw	r24, 0x01	; 1
    50cc:	9d 83       	std	Y+5, r25	; 0x05
    50ce:	8c 83       	std	Y+4, r24	; 0x04
    50d0:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    50d2:	f7 01       	movw	r30, r14
    50d4:	11 83       	std	Z+1, r17	; 0x01
    50d6:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    50d8:	83 e0       	ldi	r24, 0x03	; 3
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	01 2b       	or	r16, r17
    50de:	29 f2       	breq	.-118    	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	c2 cf       	rjmp	.-124    	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

000050e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    50e6:	1f 93       	push	r17
    50e8:	cf 93       	push	r28
    50ea:	df 93       	push	r29
    50ec:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    50ee:	ce 01       	movw	r24, r28
    50f0:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50f4:	8b 30       	cpi	r24, 0x0B	; 11
    50f6:	3c f4       	brge	.+14     	; 0x5106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    50f8:	89 30       	cpi	r24, 0x09	; 9
    50fa:	5c f4       	brge	.+22     	; 0x5112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    50fc:	88 23       	and	r24, r24
    50fe:	e9 f0       	breq	.+58     	; 0x513a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	80 e0       	ldi	r24, 0x00	; 0
    5104:	1c c0       	rjmp	.+56     	; 0x513e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    5106:	80 32       	cpi	r24, 0x20	; 32
    5108:	21 f0       	breq	.+8      	; 0x5112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    510a:	8f 32       	cpi	r24, 0x2F	; 47
    510c:	21 f0       	breq	.+8      	; 0x5116 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    510e:	8d 30       	cpi	r24, 0x0D	; 13
    5110:	b9 f7       	brne	.-18     	; 0x5100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5112:	18 86       	std	Y+8, r1	; 0x08
    5114:	ec cf       	rjmp	.-40     	; 0x50ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    5116:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    5118:	ce 01       	movw	r24, r28
    511a:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    511e:	8a 32       	cpi	r24, 0x2A	; 42
    5120:	29 f0       	breq	.+10     	; 0x512c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    5122:	8f 32       	cpi	r24, 0x2F	; 47
    5124:	d1 f0       	breq	.+52     	; 0x515a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    5126:	82 e0       	ldi	r24, 0x02	; 2
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	09 c0       	rjmp	.+18     	; 0x513e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    512c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    512e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    5130:	ce 01       	movw	r24, r28
    5132:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    5136:	81 11       	cpse	r24, r1
    5138:	06 c0       	rjmp	.+12     	; 0x5146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    513e:	df 91       	pop	r29
    5140:	cf 91       	pop	r28
    5142:	1f 91       	pop	r17
    5144:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    5146:	8f 32       	cpi	r24, 0x2F	; 47
    5148:	11 f4       	brne	.+4      	; 0x514e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    514a:	11 11       	cpse	r17, r1
    514c:	e2 cf       	rjmp	.-60     	; 0x5112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    514e:	11 e0       	ldi	r17, 0x01	; 1
    5150:	8a 32       	cpi	r24, 0x2A	; 42
    5152:	09 f0       	breq	.+2      	; 0x5156 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    5154:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5156:	18 86       	std	Y+8, r1	; 0x08
    5158:	eb cf       	rjmp	.-42     	; 0x5130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    515a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    515c:	ce 01       	movw	r24, r28
    515e:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    5162:	88 23       	and	r24, r24
    5164:	51 f3       	breq	.-44     	; 0x513a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    5166:	8a 30       	cpi	r24, 0x0A	; 10
    5168:	c1 f7       	brne	.-16     	; 0x515a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    516a:	c1 cf       	rjmp	.-126    	; 0x50ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000516c <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5992
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args3 == default_ring)
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <default_ring>
    5172:	94 13       	cpse	r25, r20
    5174:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5995
    return 1;
  return 0;
}
    5176:	08 95       	ret

00005178 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5951
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <default_show_temp>
    517e:	94 13       	cpse	r25, r20
    5180:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5955
    ret = 1;

  return ret;
}
    5182:	08 95       	ret

00005184 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5938
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    5184:	00 97       	sbiw	r24, 0x00	; 0
    5186:	31 f4       	brne	.+12     	; 0x5194 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5939
    return use_tds + use_rtds;
    5188:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <use_tds>
    518c:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <use_rtds>
    5190:	89 0f       	add	r24, r25
    5192:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5941

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    5194:	01 97       	sbiw	r24, 0x01	; 1
    5196:	09 f0       	breq	.+2      	; 0x519a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    5198:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5942
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    519a:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5943
}
    519c:	08 95       	ret

0000519e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5708
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    519e:	e6 e2       	ldi	r30, 0x26	; 38
    51a0:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5709
  uint8_t active = 0;
    51a2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    51a4:	91 85       	ldd	r25, Z+9	; 0x09
    51a6:	91 30       	cpi	r25, 0x01	; 1
    51a8:	09 f4       	brne	.+2      	; 0x51ac <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    51aa:	8f 5f       	subi	r24, 0xFF	; 255
    51ac:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5710

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    51ae:	9a e0       	ldi	r25, 0x0A	; 10
    51b0:	e8 36       	cpi	r30, 0x68	; 104
    51b2:	f9 07       	cpc	r31, r25
    51b4:	b9 f7       	brne	.-18     	; 0x51a4 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5713
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    51b6:	08 95       	ret

000051b8 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5624
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    51b8:	8a e0       	ldi	r24, 0x0A	; 10
    51ba:	08 95       	ret

000051bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    51bc:	ef 92       	push	r14
    51be:	ff 92       	push	r15
    51c0:	0f 93       	push	r16
    51c2:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    51c4:	80 17       	cp	r24, r16
    51c6:	91 07       	cpc	r25, r17
    51c8:	74 f4       	brge	.+28     	; 0x51e6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5602
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    51ca:	84 0f       	add	r24, r20
    51cc:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    51ce:	08 17       	cp	r16, r24
    51d0:	19 07       	cpc	r17, r25
    51d2:	4c f4       	brge	.+18     	; 0x51e6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    51d4:	6e 15       	cp	r22, r14
    51d6:	7f 05       	cpc	r23, r15
    51d8:	34 f4       	brge	.+12     	; 0x51e6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5602
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    51da:	62 0f       	add	r22, r18
    51dc:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	e6 16       	cp	r14, r22
    51e2:	f7 06       	cpc	r15, r23
    51e4:	0c f0       	brlt	.+2      	; 0x51e8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5601
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    51e6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    51e8:	1f 91       	pop	r17
    51ea:	0f 91       	pop	r16
    51ec:	ff 90       	pop	r15
    51ee:	ef 90       	pop	r14
    51f0:	08 95       	ret

000051f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5457
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	fc 01       	movw	r30, r24
    51f8:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5458
  if (max_element > 0)
    51fa:	22 23       	and	r18, r18
    51fc:	09 f1       	breq	.+66     	; 0x5240 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
  {
    menu_slider_data_max = *stop;
    51fe:	98 81       	ld	r25, Y
    5200:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5461
    menu_slider_data_min = *start;
    5204:	80 81       	ld	r24, Z
    5206:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5462
    menu_slider_data_max_element = max_element;
    520a:	20 93 02 09 	sts	0x0902, r18	; 0x800902 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
    ///
    *start = menu_slider_data_current[args];
    520e:	a4 2f       	mov	r26, r20
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	a3 50       	subi	r26, 0x03	; 3
    5214:	b7 4f       	sbci	r27, 0xF7	; 247
    5216:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5465
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    5218:	62 2f       	mov	r22, r18
    521a:	70 e0       	ldi	r23, 0x00	; 0
    521c:	49 2f       	mov	r20, r25
    521e:	50 e0       	ldi	r21, 0x00	; 0
    5220:	db 01       	movw	r26, r22
    5222:	a3 0f       	add	r26, r19
    5224:	b1 1d       	adc	r27, r1
    5226:	4a 17       	cp	r20, r26
    5228:	5b 07       	cpc	r21, r27
    522a:	6c f0       	brlt	.+26     	; 0x5246 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    522c:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5467
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    522e:	80 81       	ld	r24, Z
    5230:	98 17       	cp	r25, r24
    5232:	08 f4       	brcc	.+2      	; 0x5236 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5468
      *start = menu_slider_data_max;
    5234:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5471
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    5236:	29 17       	cp	r18, r25
    5238:	78 f4       	brcc	.+30     	; 0x5258 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5470
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    523a:	80 81       	ld	r24, Z
    523c:	28 0f       	add	r18, r24
    523e:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5474
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5465
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    5246:	48 1b       	sub	r20, r24
    5248:	51 09       	sbc	r21, r1
    524a:	64 17       	cp	r22, r20
    524c:	75 07       	cpc	r23, r21
    524e:	74 f7       	brge	.-36     	; 0x522c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5466
      *start = menu_slider_data_max - max_element;
    5250:	89 2f       	mov	r24, r25
    5252:	82 1b       	sub	r24, r18
    5254:	80 83       	st	Z, r24
    5256:	eb cf       	rjmp	.-42     	; 0x522e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5472
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    5258:	98 83       	st	Y, r25
    525a:	f2 cf       	rjmp	.-28     	; 0x5240 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

0000525c <display_function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5452
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    525c:	e8 2f       	mov	r30, r24
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	e3 50       	subi	r30, 0x03	; 3
    5262:	f7 4f       	sbci	r31, 0xF7	; 247
    5264:	80 81       	ld	r24, Z
    5266:	90 91 03 09 	lds	r25, 0x0903	; 0x800903 <menu_slider_data_min>
    526a:	98 17       	cp	r25, r24
    526c:	10 f4       	brcc	.+4      	; 0x5272 <display_function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
    menu_slider_data_current[args1]--;
    526e:	81 50       	subi	r24, 0x01	; 1
    5270:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5454
}
    5272:	08 95       	ret

00005274 <display_function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5446
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    5274:	e8 2f       	mov	r30, r24
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	e3 50       	subi	r30, 0x03	; 3
    527a:	f7 4f       	sbci	r31, 0xF7	; 247
    527c:	80 81       	ld	r24, Z
    527e:	20 91 04 09 	lds	r18, 0x0904	; 0x800904 <menu_slider_data_max>
    5282:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <menu_slider_data_max_element>
    5286:	29 1b       	sub	r18, r25
    5288:	33 0b       	sbc	r19, r19
    528a:	82 17       	cp	r24, r18
    528c:	13 06       	cpc	r1, r19
    528e:	14 f4       	brge	.+4      	; 0x5294 <display_function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5447
    menu_slider_data_current[args1]++;
    5290:	8f 5f       	subi	r24, 0xFF	; 255
    5292:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5448
}
    5294:	08 95       	ret

00005296 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4338
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    5296:	83 30       	cpi	r24, 0x03	; 3
    5298:	41 f4       	brne	.+16     	; 0x52aa <a2d_complete(unsigned char, unsigned int)+0x14>
    529a:	70 93 6e 0a 	sts	0x0A6E, r23	; 0x800a6e <proud+0x1>
    529e:	60 93 6d 0a 	sts	0x0A6D, r22	; 0x800a6d <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
}
    52a8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    52aa:	86 30       	cpi	r24, 0x06	; 6
    52ac:	29 f4       	brne	.+10     	; 0x52b8 <a2d_complete(unsigned char, unsigned int)+0x22>
    52ae:	70 93 74 0a 	sts	0x0A74, r23	; 0x800a74 <tritri+0x1>
    52b2:	60 93 73 0a 	sts	0x0A73, r22	; 0x800a73 <tritri>
    52b6:	f5 cf       	rjmp	.-22     	; 0x52a2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4340
  if (channel == A_PETV) petnula = data;
    52b8:	85 30       	cpi	r24, 0x05	; 5
    52ba:	29 f4       	brne	.+10     	; 0x52c6 <a2d_complete(unsigned char, unsigned int)+0x30>
    52bc:	70 93 72 0a 	sts	0x0A72, r23	; 0x800a72 <petnula+0x1>
    52c0:	60 93 71 0a 	sts	0x0A71, r22	; 0x800a71 <petnula>
    52c4:	ee cf       	rjmp	.-36     	; 0x52a2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
  if (channel == A_DVANACTV) dvanact = data;
    52c6:	84 30       	cpi	r24, 0x04	; 4
    52c8:	29 f4       	brne	.+10     	; 0x52d4 <a2d_complete(unsigned char, unsigned int)+0x3e>
    52ca:	70 93 70 0a 	sts	0x0A70, r23	; 0x800a70 <dvanact+0x1>
    52ce:	60 93 6f 0a 	sts	0x0A6F, r22	; 0x800a6f <dvanact>
    52d2:	e7 cf       	rjmp	.-50     	; 0x52a2 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
  if (channel == A_LIGHT) light_curr = data;
    52d4:	87 30       	cpi	r24, 0x07	; 7
    52d6:	29 f7       	brne	.-54     	; 0x52a2 <a2d_complete(unsigned char, unsigned int)+0xc>
    52d8:	70 93 38 0b 	sts	0x0B38, r23	; 0x800b38 <light_curr+0x1>
    52dc:	60 93 37 0b 	sts	0x0B37, r22	; 0x800b37 <light_curr>
    52e0:	e0 cf       	rjmp	.-64     	; 0x52a2 <a2d_complete(unsigned char, unsigned int)+0xc>

000052e2 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    52e2:	08 95       	ret

000052e4 <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
  return 0;
}

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{
  if (menu_redraw10s == 1)
    52e4:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <menu_redraw10s>
    52e8:	81 30       	cpi	r24, 0x01	; 1
    52ea:	19 f4       	brne	.+6      	; 0x52f2 <menu_redraw_update_temp(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
  {
    menu_redraw10s = 0;
    52ec:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <menu_redraw10s>
    52f0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2999
    return 1;
  }
  return 0;
    52f2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3000
}
    52f4:	08 95       	ret

000052f6 <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    52f6:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <change_term_mode>
    52fa:	81 30       	cpi	r24, 0x01	; 1
    52fc:	19 f4       	brne	.+6      	; 0x5304 <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
  {
    change_term_mode = 0;
    52fe:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <change_term_mode>
    5302:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
    return 1;
  }
  return 0;
    5304:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
}
    5306:	08 95       	ret

00005308 <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    5308:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <menu_redraw05s>
    530c:	81 30       	cpi	r24, 0x01	; 1
    530e:	19 f4       	brne	.+6      	; 0x5316 <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
  {
    menu_redraw05s = 0;
    5310:	10 92 3c 0b 	sts	0x0B3C, r1	; 0x800b3c <menu_redraw05s>
    5314:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
    return 1;
  }
  return 0;
    5316:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
}
    5318:	08 95       	ret

0000531a <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    531a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
}
    531e:	08 95       	ret

00005320 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    5320:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <__data_end>
    5324:	83 30       	cpi	r24, 0x03	; 3
    5326:	08 f0       	brcs	.+2      	; 0x532a <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    5328:	08 95       	ret
    532a:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    532c:	08 95       	ret

0000532e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    5332:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <__data_end>
    5336:	91 11       	cpse	r25, r1
    5338:	0c c0       	rjmp	.+24     	; 0x5352 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    533a:	e8 2f       	mov	r30, r24
    533c:	f0 e0       	ldi	r31, 0x00	; 0
    533e:	ec 5b       	subi	r30, 0xBC	; 188
    5340:	f6 4c       	sbci	r31, 0xC6	; 198
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    5342:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2902
  line1[0] = znak;
    5344:	d9 01       	movw	r26, r18
    5346:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
  line2[0] = 0;
    5348:	f8 01       	movw	r30, r16
    534a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
}
    534c:	1f 91       	pop	r17
    534e:	0f 91       	pop	r16
    5350:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    5352:	91 30       	cpi	r25, 0x01	; 1
    5354:	29 f4       	brne	.+10     	; 0x5360 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    5356:	e8 2f       	mov	r30, r24
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	e6 5d       	subi	r30, 0xD6	; 214
    535c:	f6 4c       	sbci	r31, 0xC6	; 198
    535e:	f1 cf       	rjmp	.-30     	; 0x5342 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2900
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    5360:	92 30       	cpi	r25, 0x02	; 2
    5362:	81 f7       	brne	.-32     	; 0x5344 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    5364:	e8 2f       	mov	r30, r24
    5366:	f0 e0       	ldi	r31, 0x00	; 0
    5368:	e0 5f       	subi	r30, 0xF0	; 240
    536a:	f6 4c       	sbci	r31, 0xC6	; 198
    536c:	ea cf       	rjmp	.-44     	; 0x5342 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000536e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    536e:	0f 93       	push	r16
    5370:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    5372:	8a 30       	cpi	r24, 0x0A	; 10
    5374:	41 f0       	breq	.+16     	; 0x5386 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2887
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    5376:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
  if (args1 == 10) line1[0] = '.';
    5378:	f9 01       	movw	r30, r18
    537a:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
  line2[0] = 0;
    537c:	f8 01       	movw	r30, r16
    537e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
}
    5380:	1f 91       	pop	r17
    5382:	0f 91       	pop	r16
    5384:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    5386:	8e e2       	ldi	r24, 0x2E	; 46
    5388:	f7 cf       	rjmp	.-18     	; 0x5378 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>

0000538a <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 11;
}
    538a:	8b e0       	ldi	r24, 0x0B	; 11
    538c:	08 95       	ret

0000538e <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	08 95       	ret

00005392 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)>:
_Z34display_function_set_variable_plushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
        menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint8_t idx, uint8_t args2, uint8_t args3)
{
    5392:	cf 92       	push	r12
    5394:	df 92       	push	r13
    5396:	ef 92       	push	r14
    5398:	ff 92       	push	r15
    539a:	cf 93       	push	r28
    539c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2720
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    539e:	95 e1       	ldi	r25, 0x15	; 21
    53a0:	89 9f       	mul	r24, r25
    53a2:	e0 01       	movw	r28, r0
    53a4:	11 24       	eor	r1, r1
    53a6:	c7 55       	subi	r28, 0x57	; 87
    53a8:	d7 4f       	sbci	r29, 0xF7	; 247
    53aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    53ac:	3f 85       	ldd	r19, Y+15	; 0x0f
    53ae:	48 89       	ldd	r20, Y+16	; 0x10
    53b0:	59 89       	ldd	r21, Y+17	; 0x11
    53b2:	68 81       	ld	r22, Y
    53b4:	79 81       	ldd	r23, Y+1	; 0x01
    53b6:	8a 81       	ldd	r24, Y+2	; 0x02
    53b8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ba:	0e 94 90 bb 	call	0x17720	; 0x17720 <__addsf3>
    53be:	6b 01       	movw	r12, r22
    53c0:	7c 01       	movw	r14, r24
    53c2:	2c 81       	ldd	r18, Y+4	; 0x04
    53c4:	3d 81       	ldd	r19, Y+5	; 0x05
    53c6:	4e 81       	ldd	r20, Y+6	; 0x06
    53c8:	5f 81       	ldd	r21, Y+7	; 0x07
    53ca:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
    53ce:	18 16       	cp	r1, r24
    53d0:	cc f0       	brlt	.+50     	; 0x5404 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    53d2:	c8 82       	st	Y, r12
    53d4:	d9 82       	std	Y+1, r13	; 0x01
    53d6:	ea 82       	std	Y+2, r14	; 0x02
    53d8:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    53da:	8c 85       	ldd	r24, Y+12	; 0x0c
    53dc:	81 30       	cpi	r24, 0x01	; 1
    53de:	91 f4       	brne	.+36     	; 0x5404 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)+0x72>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    53e0:	c7 01       	movw	r24, r14
    53e2:	b6 01       	movw	r22, r12
    53e4:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    53e8:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    {
        menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    53ea:	8a 89       	ldd	r24, Y+18	; 0x12
    53ec:	eb 89       	ldd	r30, Y+19	; 0x13
    53ee:	fc 89       	ldd	r31, Y+20	; 0x14
    53f0:	b7 01       	movw	r22, r14
    53f2:	a6 01       	movw	r20, r12
    53f4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    }
  }
}
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	ff 90       	pop	r15
    53fc:	ef 90       	pop	r14
    53fe:	df 90       	pop	r13
    5400:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
        menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5402:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    }
  }
}
    5404:	df 91       	pop	r29
    5406:	cf 91       	pop	r28
    5408:	ff 90       	pop	r15
    540a:	ef 90       	pop	r14
    540c:	df 90       	pop	r13
    540e:	cf 90       	pop	r12
    5410:	08 95       	ret

00005412 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)>:
_Z35display_function_set_variable_minushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint8_t idx, uint8_t args2, uint8_t args3)
{
    5412:	cf 92       	push	r12
    5414:	df 92       	push	r13
    5416:	ef 92       	push	r14
    5418:	ff 92       	push	r15
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
  printf("now %s\n", text);
  dtostrf(menu_dialog_variable[idx].variable_step, 4, 1, text);
  printf("step %s\n", text);
  printf("conv %d\n", float_to_int(menu_dialog_variable[idx].variable_now));
  */
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    541e:	95 e1       	ldi	r25, 0x15	; 21
    5420:	89 9f       	mul	r24, r25
    5422:	e0 01       	movw	r28, r0
    5424:	11 24       	eor	r1, r1
    5426:	c7 55       	subi	r28, 0x57	; 87
    5428:	d7 4f       	sbci	r29, 0xF7	; 247
    542a:	2e 85       	ldd	r18, Y+14	; 0x0e
    542c:	3f 85       	ldd	r19, Y+15	; 0x0f
    542e:	48 89       	ldd	r20, Y+16	; 0x10
    5430:	59 89       	ldd	r21, Y+17	; 0x11
    5432:	68 81       	ld	r22, Y
    5434:	79 81       	ldd	r23, Y+1	; 0x01
    5436:	8a 81       	ldd	r24, Y+2	; 0x02
    5438:	9b 81       	ldd	r25, Y+3	; 0x03
    543a:	0e 94 8f bb 	call	0x1771e	; 0x1771e <__subsf3>
    543e:	6b 01       	movw	r12, r22
    5440:	7c 01       	movw	r14, r24
    5442:	28 85       	ldd	r18, Y+8	; 0x08
    5444:	39 85       	ldd	r19, Y+9	; 0x09
    5446:	4a 85       	ldd	r20, Y+10	; 0x0a
    5448:	5b 85       	ldd	r21, Y+11	; 0x0b
    544a:	0e 94 a4 bc 	call	0x17948	; 0x17948 <__gesf2>
    544e:	87 fd       	sbrc	r24, 7
    5450:	19 c0       	rjmp	.+50     	; 0x5484 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    5452:	c8 82       	st	Y, r12
    5454:	d9 82       	std	Y+1, r13	; 0x01
    5456:	ea 82       	std	Y+2, r14	; 0x02
    5458:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    545a:	8c 85       	ldd	r24, Y+12	; 0x0c
    545c:	81 30       	cpi	r24, 0x01	; 1
    545e:	91 f4       	brne	.+36     	; 0x5484 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)+0x72>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
    5460:	c7 01       	movw	r24, r14
    5462:	b6 01       	movw	r22, r12
    5464:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    5468:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
    {
        menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    546a:	8a 89       	ldd	r24, Y+18	; 0x12
    546c:	eb 89       	ldd	r30, Y+19	; 0x13
    546e:	fc 89       	ldd	r31, Y+20	; 0x14
    5470:	b7 01       	movw	r22, r14
    5472:	a6 01       	movw	r20, r12
    5474:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
    }
  }
}
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	ff 90       	pop	r15
    547c:	ef 90       	pop	r14
    547e:	df 90       	pop	r13
    5480:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
        menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5482:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
    }
  }
}
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	ff 90       	pop	r15
    548a:	ef 90       	pop	r14
    548c:	df 90       	pop	r13
    548e:	cf 90       	pop	r12
    5490:	08 95       	ret

00005492 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
}



void preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    5492:	4f 92       	push	r4
    5494:	5f 92       	push	r5
    5496:	6f 92       	push	r6
    5498:	7f 92       	push	r7
    549a:	8f 92       	push	r8
    549c:	9f 92       	push	r9
    549e:	af 92       	push	r10
    54a0:	bf 92       	push	r11
    54a2:	cf 92       	push	r12
    54a4:	df 92       	push	r13
    54a6:	ef 92       	push	r14
    54a8:	ff 92       	push	r15
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
    54ae:	d0 91 75 0a 	lds	r29, 0x0A75	; 0x800a75 <default_ring>
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    54b2:	2d 2f       	mov	r18, r29
    54b4:	30 e0       	ldi	r19, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    54b6:	e9 ea       	ldi	r30, 0xA9	; 169
    54b8:	f8 e0       	ldi	r31, 0x08	; 8
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
    54ba:	c9 01       	movw	r24, r18
    54bc:	88 0f       	add	r24, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	88 0f       	add	r24, r24
    54c2:	99 1f       	adc	r25, r25
    54c4:	dc 01       	movw	r26, r24
    54c6:	a2 52       	subi	r26, 0x22	; 34
    54c8:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    54ca:	4d 91       	ld	r20, X+
    54cc:	5d 91       	ld	r21, X+
    54ce:	6d 91       	ld	r22, X+
    54d0:	7c 91       	ld	r23, X
    54d2:	40 83       	st	Z, r20
    54d4:	51 83       	std	Z+1, r21	; 0x01
    54d6:	62 83       	std	Z+2, r22	; 0x02
    54d8:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  menu_dialog_variable[idx].variable_min = min;
    54da:	81 2c       	mov	r8, r1
    54dc:	91 2c       	mov	r9, r1
    54de:	50 e2       	ldi	r21, 0x20	; 32
    54e0:	a5 2e       	mov	r10, r21
    54e2:	51 ec       	ldi	r21, 0xC1	; 193
    54e4:	b5 2e       	mov	r11, r21
    54e6:	80 86       	std	Z+8, r8	; 0x08
    54e8:	91 86       	std	Z+9, r9	; 0x09
    54ea:	a2 86       	std	Z+10, r10	; 0x0a
    54ec:	b3 86       	std	Z+11, r11	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    54ee:	c1 2c       	mov	r12, r1
    54f0:	d1 2c       	mov	r13, r1
    54f2:	60 e2       	ldi	r22, 0x20	; 32
    54f4:	e6 2e       	mov	r14, r22
    54f6:	61 e4       	ldi	r22, 0x41	; 65
    54f8:	f6 2e       	mov	r15, r22
    54fa:	c4 82       	std	Z+4, r12	; 0x04
    54fc:	d5 82       	std	Z+5, r13	; 0x05
    54fe:	e6 82       	std	Z+6, r14	; 0x06
    5500:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    5502:	4d ec       	ldi	r20, 0xCD	; 205
    5504:	5c ec       	ldi	r21, 0xCC	; 204
    5506:	6c ec       	ldi	r22, 0xCC	; 204
    5508:	7d e3       	ldi	r23, 0x3D	; 61
    550a:	46 87       	std	Z+14, r20	; 0x0e
    550c:	57 87       	std	Z+15, r21	; 0x0f
    550e:	60 8b       	std	Z+16, r22	; 0x10
    5510:	71 8b       	std	Z+17, r23	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    5512:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    5514:	d2 8b       	std	Z+18, r29	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    5516:	c1 e0       	ldi	r28, 0x01	; 1
    5518:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    551a:	ad ef       	ldi	r26, 0xFD	; 253
    551c:	b6 e5       	ldi	r27, 0x56	; 86
    551e:	b4 8b       	std	Z+20, r27	; 0x14
    5520:	a3 8b       	std	Z+19, r26	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    5522:	dc 01       	movw	r26, r24
    5524:	ae 50       	subi	r26, 0x0E	; 14
    5526:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    5528:	4d 90       	ld	r4, X+
    552a:	5d 90       	ld	r5, X+
    552c:	6d 90       	ld	r6, X+
    552e:	7c 90       	ld	r7, X
    5530:	45 8a       	std	Z+21, r4	; 0x15
    5532:	56 8a       	std	Z+22, r5	; 0x16
    5534:	67 8a       	std	Z+23, r6	; 0x17
    5536:	70 8e       	std	Z+24, r7	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  menu_dialog_variable[idx].variable_min = min;
    5538:	85 8e       	std	Z+29, r8	; 0x1d
    553a:	96 8e       	std	Z+30, r9	; 0x1e
    553c:	a7 8e       	std	Z+31, r10	; 0x1f
    553e:	b0 a2       	std	Z+32, r11	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    5540:	c1 8e       	std	Z+25, r12	; 0x19
    5542:	d2 8e       	std	Z+26, r13	; 0x1a
    5544:	e3 8e       	std	Z+27, r14	; 0x1b
    5546:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    5548:	43 a3       	std	Z+35, r20	; 0x23
    554a:	54 a3       	std	Z+36, r21	; 0x24
    554c:	65 a3       	std	Z+37, r22	; 0x25
    554e:	76 a3       	std	Z+38, r23	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    5550:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    5552:	d7 a3       	std	Z+39, r29	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    5554:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    5556:	aa ee       	ldi	r26, 0xEA	; 234
    5558:	b6 e5       	ldi	r27, 0x56	; 86
    555a:	b1 a7       	std	Z+41, r27	; 0x29
    555c:	a0 a7       	std	Z+40, r26	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    555e:	8a 5f       	subi	r24, 0xFA	; 250
    5560:	95 4f       	sbci	r25, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    5562:	dc 01       	movw	r26, r24
    5564:	4d 90       	ld	r4, X+
    5566:	5d 90       	ld	r5, X+
    5568:	6d 90       	ld	r6, X+
    556a:	7c 90       	ld	r7, X
    556c:	42 a6       	std	Z+42, r4	; 0x2a
    556e:	53 a6       	std	Z+43, r5	; 0x2b
    5570:	64 a6       	std	Z+44, r6	; 0x2c
    5572:	75 a6       	std	Z+45, r7	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  menu_dialog_variable[idx].variable_min = min;
    5574:	82 aa       	std	Z+50, r8	; 0x32
    5576:	93 aa       	std	Z+51, r9	; 0x33
    5578:	a4 aa       	std	Z+52, r10	; 0x34
    557a:	b5 aa       	std	Z+53, r11	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    557c:	c6 a6       	std	Z+46, r12	; 0x2e
    557e:	d7 a6       	std	Z+47, r13	; 0x2f
    5580:	e0 aa       	std	Z+48, r14	; 0x30
    5582:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    5584:	40 af       	std	Z+56, r20	; 0x38
    5586:	51 af       	std	Z+57, r21	; 0x39
    5588:	62 af       	std	Z+58, r22	; 0x3a
    558a:	73 af       	std	Z+59, r23	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    558c:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    558e:	d4 af       	std	Z+60, r29	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    5590:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    5592:	87 ed       	ldi	r24, 0xD7	; 215
    5594:	96 e5       	ldi	r25, 0x56	; 86
    5596:	96 af       	std	Z+62, r25	; 0x3e
    5598:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    559a:	26 5e       	subi	r18, 0xE6	; 230
    559c:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
{
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    559e:	f9 01       	movw	r30, r18
    55a0:	60 81       	ld	r22, Z
    55a2:	70 e0       	ldi	r23, 0x00	; 0
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    55ac:	60 93 e8 08 	sts	0x08E8, r22	; 0x8008e8 <menu_dialog_variable+0x3f>
    55b0:	70 93 e9 08 	sts	0x08E9, r23	; 0x8008e9 <menu_dialog_variable+0x40>
    55b4:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <menu_dialog_variable+0x41>
    55b8:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	a0 e8       	ldi	r26, 0x80	; 128
    55c2:	bf e3       	ldi	r27, 0x3F	; 63
    55c4:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <menu_dialog_variable+0x47>
    55c8:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <menu_dialog_variable+0x48>
    55cc:	a0 93 f2 08 	sts	0x08F2, r26	; 0x8008f2 <menu_dialog_variable+0x49>
    55d0:	b0 93 f3 08 	sts	0x08F3, r27	; 0x8008f3 <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	ae e7       	ldi	r26, 0x7E	; 126
    55da:	b3 e4       	ldi	r27, 0x43	; 67
    55dc:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <menu_dialog_variable+0x43>
    55e0:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <menu_dialog_variable+0x44>
    55e4:	a0 93 ee 08 	sts	0x08EE, r26	; 0x8008ee <menu_dialog_variable+0x45>
    55e8:	b0 93 ef 08 	sts	0x08EF, r27	; 0x8008ef <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    55ec:	80 e0       	ldi	r24, 0x00	; 0
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	a0 e0       	ldi	r26, 0x00	; 0
    55f2:	b0 e4       	ldi	r27, 0x40	; 64
    55f4:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <menu_dialog_variable+0x4d>
    55f8:	90 93 f7 08 	sts	0x08F7, r25	; 0x8008f7 <menu_dialog_variable+0x4e>
    55fc:	a0 93 f8 08 	sts	0x08F8, r26	; 0x8008f8 <menu_dialog_variable+0x4f>
    5600:	b0 93 f9 08 	sts	0x08F9, r27	; 0x8008f9 <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    5604:	c0 93 f5 08 	sts	0x08F5, r28	; 0x8008f5 <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    5608:	d0 93 fa 08 	sts	0x08FA, r29	; 0x8008fa <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    560c:	c0 93 f4 08 	sts	0x08F4, r28	; 0x8008f4 <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    5610:	8b ea       	ldi	r24, 0xAB	; 171
    5612:	96 e5       	ldi	r25, 0x56	; 86
    5614:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <menu_dialog_variable+0x53>
    5618:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	ff 90       	pop	r15
    5622:	ef 90       	pop	r14
    5624:	df 90       	pop	r13
    5626:	cf 90       	pop	r12
    5628:	bf 90       	pop	r11
    562a:	af 90       	pop	r10
    562c:	9f 90       	pop	r9
    562e:	8f 90       	pop	r8
    5630:	7f 90       	pop	r7
    5632:	6f 90       	pop	r6
    5634:	5f 90       	pop	r5
    5636:	4f 90       	pop	r4
    5638:	08 95       	ret

0000563a <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    563a:	ff 92       	push	r15
    563c:	0f 93       	push	r16
    563e:	1f 93       	push	r17
    5640:	cf 93       	push	r28
    5642:	df 93       	push	r29
    5644:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5646:	20 91 33 09 	lds	r18, 0x0933	; 0x800933 <MenuHistoryIndex>
    564a:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	69 e4       	ldi	r22, 0x49	; 73
    5650:	76 e0       	ldi	r23, 0x06	; 6
    5652:	c2 ed       	ldi	r28, 0xD2	; 210
    5654:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5656:	89 01       	movw	r16, r18
    5658:	0d 59       	subi	r16, 0x9D	; 157
    565a:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    565c:	fb 01       	movw	r30, r22
    565e:	84 91       	lpm	r24, Z
    5660:	98 17       	cp	r25, r24
    5662:	e8 f4       	brcc	.+58     	; 0x569e <MenuHistoryGetMenu(unsigned char*)+0x64>
    5664:	9c 9f       	mul	r25, r28
    5666:	a0 01       	movw	r20, r0
    5668:	9d 9f       	mul	r25, r29
    566a:	50 0d       	add	r21, r0
    566c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    566e:	fa 01       	movw	r30, r20
    5670:	e7 5f       	subi	r30, 0xF7	; 247
    5672:	f6 4f       	sbci	r31, 0xF6	; 246
    5674:	f4 90       	lpm	r15, Z
    5676:	f8 01       	movw	r30, r16
    5678:	80 81       	ld	r24, Z
    567a:	8f 11       	cpse	r24, r15
    567c:	0e c0       	rjmp	.+28     	; 0x569a <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    567e:	44 5b       	subi	r20, 0xB4	; 180
    5680:	59 4f       	sbci	r21, 0xF9	; 249
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    5682:	27 5d       	subi	r18, 0xD7	; 215
    5684:	36 4f       	sbci	r19, 0xF6	; 246
    5686:	f9 01       	movw	r30, r18
    5688:	20 81       	ld	r18, Z
    568a:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
      return menus;
    }
  }
}
    568c:	ca 01       	movw	r24, r20
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	ff 90       	pop	r15
    5698:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    569a:	9f 5f       	subi	r25, 0xFF	; 255
    569c:	df cf       	rjmp	.-66     	; 0x565c <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	6a e4       	ldi	r22, 0x4A	; 74
    56a2:	76 e0       	ldi	r23, 0x06	; 6
    56a4:	c2 ed       	ldi	r28, 0xD2	; 210
    56a6:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56a8:	89 01       	movw	r16, r18
    56aa:	0d 59       	subi	r16, 0x9D	; 157
    56ac:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    56ae:	fb 01       	movw	r30, r22
    56b0:	84 91       	lpm	r24, Z
    56b2:	98 17       	cp	r25, r24
    56b4:	90 f4       	brcc	.+36     	; 0x56da <MenuHistoryGetMenu(unsigned char*)+0xa0>
    56b6:	9c 9f       	mul	r25, r28
    56b8:	a0 01       	movw	r20, r0
    56ba:	9d 9f       	mul	r25, r29
    56bc:	50 0d       	add	r21, r0
    56be:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56c0:	fa 01       	movw	r30, r20
    56c2:	eb 50       	subi	r30, 0x0B	; 11
    56c4:	f6 4e       	sbci	r31, 0xE6	; 230
    56c6:	f4 90       	lpm	r15, Z
    56c8:	f8 01       	movw	r30, r16
    56ca:	80 81       	ld	r24, Z
    56cc:	8f 11       	cpse	r24, r15
    56ce:	03 c0       	rjmp	.+6      	; 0x56d6 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    56d0:	48 5c       	subi	r20, 0xC8	; 200
    56d2:	58 4e       	sbci	r21, 0xE8	; 232
    56d4:	d6 cf       	rjmp	.-84     	; 0x5682 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    56d6:	9f 5f       	subi	r25, 0xFF	; 255
    56d8:	ea cf       	rjmp	.-44     	; 0x56ae <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	6b e4       	ldi	r22, 0x4B	; 75
    56de:	76 e0       	ldi	r23, 0x06	; 6
    56e0:	c2 ed       	ldi	r28, 0xD2	; 210
    56e2:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56e4:	89 01       	movw	r16, r18
    56e6:	0d 59       	subi	r16, 0x9D	; 157
    56e8:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    56ea:	fb 01       	movw	r30, r22
    56ec:	84 91       	lpm	r24, Z
    56ee:	98 17       	cp	r25, r24
    56f0:	68 f6       	brcc	.-102    	; 0x568c <MenuHistoryGetMenu(unsigned char*)+0x52>
    56f2:	9c 9f       	mul	r25, r28
    56f4:	a0 01       	movw	r20, r0
    56f6:	9d 9f       	mul	r25, r29
    56f8:	50 0d       	add	r21, r0
    56fa:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56fc:	fa 01       	movw	r30, r20
    56fe:	ef 51       	subi	r30, 0x1F	; 31
    5700:	f5 4d       	sbci	r31, 0xD5	; 213
    5702:	f4 90       	lpm	r15, Z
    5704:	f8 01       	movw	r30, r16
    5706:	80 81       	ld	r24, Z
    5708:	8f 11       	cpse	r24, r15
    570a:	03 c0       	rjmp	.+6      	; 0x5712 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    570c:	4c 5d       	subi	r20, 0xDC	; 220
    570e:	57 4d       	sbci	r21, 0xD7	; 215
    5710:	b8 cf       	rjmp	.-144    	; 0x5682 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    5712:	9f 5f       	subi	r25, 0xFF	; 255
    5714:	ea cf       	rjmp	.-44     	; 0x56ea <MenuHistoryGetMenu(unsigned char*)+0xb0>

00005716 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026




bool enable_redraw(uint8_t mask, uint8_t data)
{
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    571a:	e1 e0       	ldi	r30, 0x01	; 1
    571c:	f0 e0       	ldi	r31, 0x00	; 0
    571e:	af 01       	movw	r20, r30
    5720:	02 2e       	mov	r0, r18
    5722:	01 c0       	rjmp	.+2      	; 0x5726 <enable_redraw(unsigned char, unsigned char)+0x10>
    5724:	44 0f       	add	r20, r20
    5726:	0a 94       	dec	r0
    5728:	ea f7       	brpl	.-6      	; 0x5724 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
    if ( (mask & v) != 0 )
    572a:	98 2f       	mov	r25, r24
    572c:	94 23       	and	r25, r20
    572e:	11 f0       	breq	.+4      	; 0x5734 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
      if ( (data & v) != 0)
    5730:	46 23       	and	r20, r22
    5732:	39 f4       	brne	.+14     	; 0x5742 <enable_redraw(unsigned char, unsigned char)+0x2c>
    5734:	2f 5f       	subi	r18, 0xFF	; 255
    5736:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    5738:	28 30       	cpi	r18, 0x08	; 8
    573a:	31 05       	cpc	r19, r1
    573c:	81 f7       	brne	.-32     	; 0x571e <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    5742:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
        break;
      }
  }
  return ret;
}
    5744:	08 95       	ret

00005746 <display_enable_show(unsigned char, unsigned char)>:
_Z19display_enable_showhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
  return 0;
}
uint8_t display_enable_show(uint8_t args1, uint8_t args2)
{
  return 1;
}
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	08 95       	ret

0000574a <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2)
{
  return 0;
}
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	08 95       	ret

0000574e <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005





void nullfce(void) {};
    574e:	08 95       	ret

00005750 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    5750:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    5752:	86 81       	ldd	r24, Z+6	; 0x06
    5754:	97 81       	ldd	r25, Z+7	; 0x07
    5756:	68 0f       	add	r22, r24
    5758:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    575a:	24 81       	ldd	r18, Z+4	; 0x04
    575c:	35 81       	ldd	r19, Z+5	; 0x05
    575e:	26 17       	cp	r18, r22
    5760:	37 07       	cpc	r19, r23
    5762:	38 f0       	brcs	.+14     	; 0x5772 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    5764:	22 81       	ldd	r18, Z+2	; 0x02
    5766:	33 81       	ldd	r19, Z+3	; 0x03
    5768:	82 0f       	add	r24, r18
    576a:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    576c:	77 83       	std	Z+7, r23	; 0x07
    576e:	66 83       	std	Z+6, r22	; 0x06
    5770:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    5776:	08 95       	ret

00005778 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	1f 92       	push	r1
    5782:	cd b7       	in	r28, 0x3d	; 61
    5784:	de b7       	in	r29, 0x3e	; 62
    5786:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    5788:	dc 01       	movw	r26, r24
    578a:	ed 91       	ld	r30, X+
    578c:	fc 91       	ld	r31, X
    578e:	00 84       	ldd	r0, Z+8	; 0x08
    5790:	f1 85       	ldd	r31, Z+9	; 0x09
    5792:	e0 2d       	mov	r30, r0
    5794:	19 95       	eicall
    5796:	89 2b       	or	r24, r25
    5798:	91 f0       	breq	.+36     	; 0x57be <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    579a:	21 e0       	ldi	r18, 0x01	; 1
    579c:	41 e0       	ldi	r20, 0x01	; 1
    579e:	50 e0       	ldi	r21, 0x00	; 0
    57a0:	be 01       	movw	r22, r28
    57a2:	6f 5f       	subi	r22, 0xFF	; 255
    57a4:	7f 4f       	sbci	r23, 0xFF	; 255
    57a6:	f8 01       	movw	r30, r16
    57a8:	84 85       	ldd	r24, Z+12	; 0x0c
    57aa:	0e 94 b5 9f 	call	0x13f6a	; 0x13f6a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    57ae:	89 81       	ldd	r24, Y+1	; 0x01
    57b0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    57b2:	0f 90       	pop	r0
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	1f 91       	pop	r17
    57ba:	0f 91       	pop	r16
    57bc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    57be:	8f ef       	ldi	r24, 0xFF	; 255
    57c0:	9f ef       	ldi	r25, 0xFF	; 255
    57c2:	f7 cf       	rjmp	.-18     	; 0x57b2 <EthernetClient::peek()+0x3a>

000057c4 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    57c4:	fc 01       	movw	r30, r24
    57c6:	84 85       	ldd	r24, Z+12	; 0x0c
    57c8:	0c 94 1b a0 	jmp	0x14036	; 0x14036 <recv(unsigned char, unsigned char*, int)>

000057cc <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	1f 92       	push	r1
    57d2:	cd b7       	in	r28, 0x3d	; 61
    57d4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    57d6:	41 e0       	ldi	r20, 0x01	; 1
    57d8:	50 e0       	ldi	r21, 0x00	; 0
    57da:	be 01       	movw	r22, r28
    57dc:	6f 5f       	subi	r22, 0xFF	; 255
    57de:	7f 4f       	sbci	r23, 0xFF	; 255
    57e0:	fc 01       	movw	r30, r24
    57e2:	84 85       	ldd	r24, Z+12	; 0x0c
    57e4:	0e 94 1b a0 	call	0x14036	; 0x14036 <recv(unsigned char, unsigned char*, int)>
    57e8:	18 16       	cp	r1, r24
    57ea:	19 06       	cpc	r1, r25
    57ec:	34 f4       	brge	.+12     	; 0x57fa <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    57ee:	89 81       	ldd	r24, Y+1	; 0x01
    57f0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    57f2:	0f 90       	pop	r0
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    57fa:	8f ef       	ldi	r24, 0xFF	; 255
    57fc:	9f ef       	ldi	r25, 0xFF	; 255
    57fe:	f9 cf       	rjmp	.-14     	; 0x57f2 <EthernetClient::read()+0x26>

00005800 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    5800:	fc 01       	movw	r30, r24
    5802:	84 85       	ldd	r24, Z+12	; 0x0c
    5804:	88 30       	cpi	r24, 0x08	; 8
    5806:	11 f0       	breq	.+4      	; 0x580c <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    5808:	0c 94 04 90 	jmp	0x12008	; 0x12008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	08 95       	ret

00005812 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    5818:	61 e0       	ldi	r22, 0x01	; 1
    581a:	8c 81       	ldd	r24, Y+4	; 0x04
    581c:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    5820:	60 e0       	ldi	r22, 0x00	; 0
    5822:	8b 81       	ldd	r24, Y+3	; 0x03
    5824:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    5828:	61 e0       	ldi	r22, 0x01	; 1
    582a:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    5830:	0c 94 e4 91 	jmp	0x123c8	; 0x123c8 <pinMode>

00005834 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    5834:	0f 93       	push	r16
    5836:	1f 93       	push	r17
    5838:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
  strcpy(line1, "Zapnuto 06:45");
    583a:	63 ef       	ldi	r22, 0xF3	; 243
    583c:	72 e0       	ldi	r23, 0x02	; 2
    583e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
  line2[0] = 0;
    5842:	f8 01       	movw	r30, r16
    5844:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2854
}
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	08 95       	ret

0000584c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6235
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_get_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	48 2f       	mov	r20, r24
    5852:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6236
  if (args1 == 0)
    5854:	41 11       	cpse	r20, r1
    5856:	0b c0       	rjmp	.+22     	; 0x586e <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6238
  {
    strcpy_P(line1, text_button_term_off);
    5858:	67 eb       	ldi	r22, 0xB7	; 183
    585a:	7d e3       	ldi	r23, 0x3D	; 61
    585c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6239
    strcpy_P(line2, text_button_term_off_comment);
    5860:	61 ea       	ldi	r22, 0xA1	; 161
    5862:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6259
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    5864:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6261
  }
}
    5866:	1f 91       	pop	r17
    5868:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6259
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    586a:	0c 94 45 b1 	jmp	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6241
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    586e:	41 30       	cpi	r20, 0x01	; 1
    5870:	39 f4       	brne	.+14     	; 0x5880 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6243
  {
    strcpy_P(line1, text_button_term_max);
    5872:	6d e9       	ldi	r22, 0x9D	; 157
    5874:	7d e3       	ldi	r23, 0x3D	; 61
    5876:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6244
    strcpy_P(line2, text_button_term_max_comment);
    587a:	67 e8       	ldi	r22, 0x87	; 135
    587c:	7d e3       	ldi	r23, 0x3D	; 61
    587e:	f2 cf       	rjmp	.-28     	; 0x5864 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6246
  }
  if (args1 == 2)
    5880:	42 30       	cpi	r20, 0x02	; 2
    5882:	39 f4       	brne	.+14     	; 0x5892 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6248
  {
    strcpy_P(line1, text_button_term_min);
    5884:	63 e8       	ldi	r22, 0x83	; 131
    5886:	7d e3       	ldi	r23, 0x3D	; 61
    5888:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6249
    strcpy_P(line2, text_button_term_min_comment);
    588c:	6c e6       	ldi	r22, 0x6C	; 108
    588e:	7d e3       	ldi	r23, 0x3D	; 61
    5890:	e9 cf       	rjmp	.-46     	; 0x5864 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6251
  }
  if (args1 == 3)
    5892:	43 30       	cpi	r20, 0x03	; 3
    5894:	39 f4       	brne	.+14     	; 0x58a4 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6253
  {
    strcpy_P(line1, text_button_term_prog);
    5896:	67 e6       	ldi	r22, 0x67	; 103
    5898:	7d e3       	ldi	r23, 0x3D	; 61
    589a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6254
    strcpy_P(line2, text_button_term_prog_comment);
    589e:	63 e5       	ldi	r22, 0x53	; 83
    58a0:	7d e3       	ldi	r23, 0x3D	; 61
    58a2:	e0 cf       	rjmp	.-64     	; 0x5864 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6256
  }
  if (args1 == 4)
    58a4:	44 30       	cpi	r20, 0x04	; 4
    58a6:	39 f4       	brne	.+14     	; 0x58b6 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6258
  {
    strcpy_P(line1, text_button_term_man);
    58a8:	6f e4       	ldi	r22, 0x4F	; 79
    58aa:	7d e3       	ldi	r23, 0x3D	; 61
    58ac:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6259
    strcpy_P(line2, text_button_term_man_comment);
    58b0:	60 e4       	ldi	r22, 0x40	; 64
    58b2:	7d e3       	ldi	r23, 0x3D	; 61
    58b4:	d7 cf       	rjmp	.-82     	; 0x5864 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6261
  }
}
    58b6:	1f 91       	pop	r17
    58b8:	0f 91       	pop	r16
    58ba:	08 95       	ret

000058bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    58bc:	0f 93       	push	r16
    58be:	1f 93       	push	r17
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    58c4:	00 97       	sbiw	r24, 0x00	; 0
    58c6:	01 f1       	breq	.+64     	; 0x5908 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
    58c8:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    58ca:	fc 01       	movw	r30, r24
    58cc:	c0 81       	ld	r28, Z
    58ce:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    58d0:	20 97       	sbiw	r28, 0x00	; 0
    58d2:	d1 f0       	breq	.+52     	; 0x5908 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    58d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    58d6:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    58d8:	01 15       	cp	r16, r1
    58da:	11 05       	cpc	r17, r1
    58dc:	19 f0       	breq	.+6      	; 0x58e4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x28>
    58de:	61 15       	cp	r22, r1
    58e0:	71 05       	cpc	r23, r1
    58e2:	49 f4       	brne	.+18     	; 0x58f6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x3a>
    58e4:	06 17       	cp	r16, r22
    58e6:	17 07       	cpc	r17, r23
    58e8:	59 f4       	brne	.+22     	; 0x5900 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    58ea:	ce 01       	movw	r24, r28
    58ec:	df 91       	pop	r29
    58ee:	cf 91       	pop	r28
    58f0:	1f 91       	pop	r17
    58f2:	0f 91       	pop	r16
    58f4:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    58f6:	c8 01       	movw	r24, r16
    58f8:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    58fc:	89 2b       	or	r24, r25
    58fe:	a9 f3       	breq	.-22     	; 0x58ea <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    5900:	0e 80       	ldd	r0, Y+6	; 0x06
    5902:	df 81       	ldd	r29, Y+7	; 0x07
    5904:	c0 2d       	mov	r28, r0
    5906:	e4 cf       	rjmp	.-56     	; 0x58d0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    5908:	d0 e0       	ldi	r29, 0x00	; 0
    590a:	c0 e0       	ldi	r28, 0x00	; 0
    590c:	ee cf       	rjmp	.-36     	; 0x58ea <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>

0000590e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    590e:	4f 92       	push	r4
    5910:	5f 92       	push	r5
    5912:	6f 92       	push	r6
    5914:	7f 92       	push	r7
    5916:	8f 92       	push	r8
    5918:	9f 92       	push	r9
    591a:	af 92       	push	r10
    591c:	bf 92       	push	r11
    591e:	df 92       	push	r13
    5920:	ef 92       	push	r14
    5922:	ff 92       	push	r15
    5924:	0f 93       	push	r16
    5926:	1f 93       	push	r17
    5928:	cf 93       	push	r28
    592a:	df 93       	push	r29
    592c:	cd b7       	in	r28, 0x3d	; 61
    592e:	de b7       	in	r29, 0x3e	; 62
    5930:	c4 54       	subi	r28, 0x44	; 68
    5932:	d1 09       	sbc	r29, r1
    5934:	0f b6       	in	r0, 0x3f	; 63
    5936:	f8 94       	cli
    5938:	de bf       	out	0x3e, r29	; 62
    593a:	0f be       	out	0x3f, r0	; 63
    593c:	cd bf       	out	0x3d, r28	; 61
    593e:	8c 01       	movw	r16, r24
    5940:	4a 01       	movw	r8, r20
    5942:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    5944:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    5948:	00 97       	sbiw	r24, 0x00	; 0
    594a:	09 f0       	breq	.+2      	; 0x594e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    594c:	b0 c0       	rjmp	.+352    	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    594e:	c8 01       	movw	r24, r16
    5950:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5954:	75 01       	movw	r14, r10
    5956:	8b 35       	cpi	r24, 0x5B	; 91
    5958:	49 f1       	breq	.+82     	; 0x59ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    595a:	8b 37       	cpi	r24, 0x7B	; 123
    595c:	09 f4       	brne	.+2      	; 0x5960 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    595e:	d2 c0       	rjmp	.+420    	; 0x5b04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    5960:	c8 01       	movw	r24, r16
    5962:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    5966:	87 32       	cpi	r24, 0x27	; 39
    5968:	09 f4       	brne	.+2      	; 0x596c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    596a:	eb c1       	rjmp	.+982    	; 0x5d42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    596c:	82 32       	cpi	r24, 0x22	; 34
    596e:	09 f4       	brne	.+2      	; 0x5972 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    5970:	e8 c1       	rjmp	.+976    	; 0x5d42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    5972:	c8 01       	movw	r24, r16
    5974:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5978:	b8 2e       	mov	r11, r24
    597a:	ce 01       	movw	r24, r28
    597c:	01 96       	adiw	r24, 0x01	; 1
    597e:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    5980:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    5982:	8b 2d       	mov	r24, r11
    5984:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5988:	88 23       	and	r24, r24
    598a:	09 f4       	brne	.+2      	; 0x598e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    598c:	f5 c1       	rjmp	.+1002   	; 0x5d78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    598e:	bf e3       	ldi	r27, 0x3F	; 63
    5990:	db 16       	cp	r13, r27
    5992:	09 f4       	brne	.+2      	; 0x5996 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    5994:	f1 c1       	rjmp	.+994    	; 0x5d78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5996:	f8 01       	movw	r30, r16
    5998:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    599a:	d3 94       	inc	r13
    599c:	d4 01       	movw	r26, r8
    599e:	bd 92       	st	X+, r11
    59a0:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    59a2:	c8 01       	movw	r24, r16
    59a4:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    59a8:	b8 2e       	mov	r11, r24
    59aa:	eb cf       	rjmp	.-42     	; 0x5982 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    59ac:	d8 01       	movw	r26, r16
    59ae:	16 96       	adiw	r26, 0x06	; 6
    59b0:	8c 91       	ld	r24, X
    59b2:	88 23       	and	r24, r24
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    59b6:	c1 c1       	rjmp	.+898    	; 0x5d3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    59b8:	a1 14       	cp	r10, r1
    59ba:	b1 04       	cpc	r11, r1
    59bc:	09 f4       	brne	.+2      	; 0x59c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    59be:	2d c1       	rjmp	.+602    	; 0x5c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    59c0:	88 e0       	ldi	r24, 0x08	; 8
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	f5 01       	movw	r30, r10
    59c6:	91 83       	std	Z+1, r25	; 0x01
    59c8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    59ca:	13 82       	std	Z+3, r1	; 0x03
    59cc:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    59ce:	15 82       	std	Z+5, r1	; 0x05
    59d0:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    59d2:	c8 01       	movw	r24, r16
    59d4:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    59d8:	8b 35       	cpi	r24, 0x5B	; 91
    59da:	09 f0       	breq	.+2      	; 0x59de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    59dc:	ef c0       	rjmp	.+478    	; 0x5bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    59de:	d8 01       	movw	r26, r16
    59e0:	18 96       	adiw	r26, 0x08	; 8
    59e2:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    59e4:	c8 01       	movw	r24, r16
    59e6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    59ea:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    59ec:	89 2b       	or	r24, r25
    59ee:	09 f0       	breq	.+2      	; 0x59f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    59f0:	5d c0       	rjmp	.+186    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    59f2:	c8 01       	movw	r24, r16
    59f4:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    59f8:	8d 35       	cpi	r24, 0x5D	; 93
    59fa:	09 f4       	brne	.+2      	; 0x59fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    59fc:	55 c0       	rjmp	.+170    	; 0x5aa8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    59fe:	8c e0       	ldi	r24, 0x0C	; 12
    5a00:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    5a02:	d4 01       	movw	r26, r8
    5a04:	ed 91       	ld	r30, X+
    5a06:	fc 91       	ld	r31, X
    5a08:	01 90       	ld	r0, Z+
    5a0a:	f0 81       	ld	r31, Z
    5a0c:	e0 2d       	mov	r30, r0
    5a0e:	6c e0       	ldi	r22, 0x0C	; 12
    5a10:	70 e0       	ldi	r23, 0x00	; 0
    5a12:	c4 01       	movw	r24, r8
    5a14:	19 95       	eicall
    5a16:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    5a18:	00 97       	sbiw	r24, 0x00	; 0
    5a1a:	09 f4       	brne	.+2      	; 0x5a1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    5a1c:	64 c0       	rjmp	.+200    	; 0x5ae6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    5a1e:	dc 01       	movw	r26, r24
    5a20:	2d 2d       	mov	r18, r13
    5a22:	1d 92       	st	X+, r1
    5a24:	2a 95       	dec	r18
    5a26:	e9 f7       	brne	.-6      	; 0x5a22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    5a28:	11 82       	std	Z+1, r1	; 0x01
    5a2a:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    5a2c:	d7 01       	movw	r26, r14
    5a2e:	14 96       	adiw	r26, 0x04	; 4
    5a30:	8d 91       	ld	r24, X+
    5a32:	9c 91       	ld	r25, X
    5a34:	15 97       	sbiw	r26, 0x05	; 5
    5a36:	00 97       	sbiw	r24, 0x00	; 0
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    5a3a:	50 c0       	rjmp	.+160    	; 0x5adc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    5a3c:	91 87       	std	Z+9, r25	; 0x09
    5a3e:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    5a40:	14 96       	adiw	r26, 0x04	; 4
    5a42:	8d 91       	ld	r24, X+
    5a44:	9c 91       	ld	r25, X
    5a46:	dc 01       	movw	r26, r24
    5a48:	17 96       	adiw	r26, 0x07	; 7
    5a4a:	fc 93       	st	X, r31
    5a4c:	ee 93       	st	-X, r30
    5a4e:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    5a50:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    5a52:	15 96       	adiw	r26, 0x05	; 5
    5a54:	fc 93       	st	X, r31
    5a56:	ee 93       	st	-X, r30
    5a58:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    5a5a:	98 2d       	mov	r25, r8
    5a5c:	89 2d       	mov	r24, r9
    5a5e:	49 2e       	mov	r4, r25
    5a60:	58 2e       	mov	r5, r24
    5a62:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5a64:	ef 2b       	or	r30, r31
    5a66:	09 f4       	brne	.+2      	; 0x5a6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    5a68:	d8 c0       	rjmp	.+432    	; 0x5c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	86 81       	ldd	r24, Z+6	; 0x06
    5a6e:	81 50       	subi	r24, 0x01	; 1
    5a70:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    5a72:	b3 01       	movw	r22, r6
    5a74:	a2 01       	movw	r20, r4
    5a76:	c8 01       	movw	r24, r16
    5a78:	0e 94 87 2c 	call	0x590e	; 0x590e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5a7c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    5a7e:	d8 01       	movw	r26, r16
    5a80:	16 96       	adiw	r26, 0x06	; 6
    5a82:	8c 91       	ld	r24, X
    5a84:	16 97       	sbiw	r26, 0x06	; 6
    5a86:	8f 5f       	subi	r24, 0xFF	; 255
    5a88:	16 96       	adiw	r26, 0x06	; 6
    5a8a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    5a8c:	a1 14       	cp	r10, r1
    5a8e:	b1 04       	cpc	r11, r1
    5a90:	69 f4       	brne	.+26     	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    5a92:	c8 01       	movw	r24, r16
    5a94:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5a98:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    5a9a:	89 2b       	or	r24, r25
    5a9c:	39 f4       	brne	.+14     	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5a9e:	c8 01       	movw	r24, r16
    5aa0:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5aa4:	8d 35       	cpi	r24, 0x5D	; 93
    5aa6:	21 f5       	brne	.+72     	; 0x5af0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5aa8:	f8 01       	movw	r30, r16
    5aaa:	10 86       	std	Z+8, r1	; 0x08
    5aac:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    5aae:	cc 5b       	subi	r28, 0xBC	; 188
    5ab0:	df 4f       	sbci	r29, 0xFF	; 255
    5ab2:	0f b6       	in	r0, 0x3f	; 63
    5ab4:	f8 94       	cli
    5ab6:	de bf       	out	0x3e, r29	; 62
    5ab8:	0f be       	out	0x3f, r0	; 63
    5aba:	cd bf       	out	0x3d, r28	; 61
    5abc:	df 91       	pop	r29
    5abe:	cf 91       	pop	r28
    5ac0:	1f 91       	pop	r17
    5ac2:	0f 91       	pop	r16
    5ac4:	ff 90       	pop	r15
    5ac6:	ef 90       	pop	r14
    5ac8:	df 90       	pop	r13
    5aca:	bf 90       	pop	r11
    5acc:	af 90       	pop	r10
    5ace:	9f 90       	pop	r9
    5ad0:	8f 90       	pop	r8
    5ad2:	7f 90       	pop	r7
    5ad4:	6f 90       	pop	r6
    5ad6:	5f 90       	pop	r5
    5ad8:	4f 90       	pop	r4
    5ada:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    5adc:	13 96       	adiw	r26, 0x03	; 3
    5ade:	fc 93       	st	X, r31
    5ae0:	ee 93       	st	-X, r30
    5ae2:	12 97       	sbiw	r26, 0x02	; 2
    5ae4:	b6 cf       	rjmp	.-148    	; 0x5a52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    5ae6:	f0 e0       	ldi	r31, 0x00	; 0
    5ae8:	e0 e0       	ldi	r30, 0x00	; 0
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	b7 cf       	rjmp	.-146    	; 0x5a5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5af0:	c8 01       	movw	r24, r16
    5af2:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5af6:	8c 32       	cpi	r24, 0x2C	; 44
    5af8:	09 f0       	breq	.+2      	; 0x5afc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    5afa:	60 c0       	rjmp	.+192    	; 0x5bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5afc:	d8 01       	movw	r26, r16
    5afe:	18 96       	adiw	r26, 0x08	; 8
    5b00:	1c 92       	st	X, r1
    5b02:	7f cf       	rjmp	.-258    	; 0x5a02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    5b04:	f8 01       	movw	r30, r16
    5b06:	86 81       	ldd	r24, Z+6	; 0x06
    5b08:	88 23       	and	r24, r24
    5b0a:	09 f4       	brne	.+2      	; 0x5b0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    5b0c:	16 c1       	rjmp	.+556    	; 0x5d3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    5b0e:	a1 14       	cp	r10, r1
    5b10:	b1 04       	cpc	r11, r1
    5b12:	09 f4       	brne	.+2      	; 0x5b16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    5b14:	82 c0       	rjmp	.+260    	; 0x5c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    5b16:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    5b18:	89 e0       	ldi	r24, 0x09	; 9
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	d5 01       	movw	r26, r10
    5b1e:	11 96       	adiw	r26, 0x01	; 1
    5b20:	9c 93       	st	X, r25
    5b22:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    5b24:	13 96       	adiw	r26, 0x03	; 3
    5b26:	1c 92       	st	X, r1
    5b28:	1e 92       	st	-X, r1
    5b2a:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    5b2c:	15 96       	adiw	r26, 0x05	; 5
    5b2e:	1c 92       	st	X, r1
    5b30:	1e 92       	st	-X, r1
    5b32:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    5b34:	45 01       	movw	r8, r10
    5b36:	b2 e0       	ldi	r27, 0x02	; 2
    5b38:	8b 0e       	add	r8, r27
    5b3a:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5b3c:	c8 01       	movw	r24, r16
    5b3e:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b42:	8b 37       	cpi	r24, 0x7B	; 123
    5b44:	d9 f5       	brne	.+118    	; 0x5bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5b46:	f8 01       	movw	r30, r16
    5b48:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    5b4a:	c8 01       	movw	r24, r16
    5b4c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5b50:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    5b52:	89 2b       	or	r24, r25
    5b54:	09 f0       	breq	.+2      	; 0x5b58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    5b56:	aa cf       	rjmp	.-172    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5b58:	c8 01       	movw	r24, r16
    5b5a:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b5e:	8d 37       	cpi	r24, 0x7D	; 125
    5b60:	09 f4       	brne	.+2      	; 0x5b64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    5b62:	9c c0       	rjmp	.+312    	; 0x5c9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5b64:	bc e0       	ldi	r27, 0x0C	; 12
    5b66:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    5b68:	c8 01       	movw	r24, r16
    5b6a:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    5b6e:	87 32       	cpi	r24, 0x27	; 39
    5b70:	79 f0       	breq	.+30     	; 0x5b90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    5b72:	82 32       	cpi	r24, 0x22	; 34
    5b74:	69 f0       	breq	.+26     	; 0x5b90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    5b76:	f8 01       	movw	r30, r16
    5b78:	a4 80       	ldd	r10, Z+4	; 0x04
    5b7a:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    5b7c:	c8 01       	movw	r24, r16
    5b7e:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b82:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    5b84:	81 11       	cpse	r24, r1
    5b86:	1e c0       	rjmp	.+60     	; 0x5bc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    5b88:	aa 24       	eor	r10, r10
    5b8a:	a3 94       	inc	r10
    5b8c:	b1 2c       	mov	r11, r1
    5b8e:	8e cf       	rjmp	.-228    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    5b90:	be 01       	movw	r22, r28
    5b92:	6f 5f       	subi	r22, 0xFF	; 255
    5b94:	7f 4f       	sbci	r23, 0xFF	; 255
    5b96:	c8 01       	movw	r24, r16
    5b98:	0e 94 1c 28 	call	0x5038	; 0x5038 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    5b9c:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    5b9e:	89 2b       	or	r24, r25
    5ba0:	09 f0       	breq	.+2      	; 0x5ba4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    5ba2:	84 cf       	rjmp	.-248    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    5ba4:	c8 01       	movw	r24, r16
    5ba6:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5baa:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    5bac:	89 2b       	or	r24, r25
    5bae:	09 f0       	breq	.+2      	; 0x5bb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    5bb0:	7d cf       	rjmp	.-262    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5bb2:	c8 01       	movw	r24, r16
    5bb4:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5bb8:	8a 33       	cpi	r24, 0x3A	; 58
    5bba:	99 f1       	breq	.+102    	; 0x5c22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    5bbc:	72 e0       	ldi	r23, 0x02	; 2
    5bbe:	a7 2e       	mov	r10, r23
    5bc0:	b1 2c       	mov	r11, r1
    5bc2:	74 cf       	rjmp	.-280    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    5bc4:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5bc8:	88 23       	and	r24, r24
    5bca:	c1 f3       	breq	.-16     	; 0x5bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5bcc:	d8 01       	movw	r26, r16
    5bce:	18 96       	adiw	r26, 0x08	; 8
    5bd0:	1c 92       	st	X, r1
    5bd2:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    5bd4:	14 96       	adiw	r26, 0x04	; 4
    5bd6:	ed 91       	ld	r30, X+
    5bd8:	fc 91       	ld	r31, X
    5bda:	15 97       	sbiw	r26, 0x05	; 5
    5bdc:	cf 01       	movw	r24, r30
    5bde:	01 96       	adiw	r24, 0x01	; 1
    5be0:	15 96       	adiw	r26, 0x05	; 5
    5be2:	9c 93       	st	X, r25
    5be4:	8e 93       	st	-X, r24
    5be6:	14 97       	sbiw	r26, 0x04	; 4
    5be8:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    5bea:	c8 01       	movw	r24, r16
    5bec:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5bf0:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    5bf2:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5bf6:	81 11       	cpse	r24, r1
    5bf8:	e9 cf       	rjmp	.-46     	; 0x5bcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    5bfa:	d8 01       	movw	r26, r16
    5bfc:	14 96       	adiw	r26, 0x04	; 4
    5bfe:	ed 91       	ld	r30, X+
    5c00:	fc 91       	ld	r31, X
    5c02:	15 97       	sbiw	r26, 0x05	; 5
    5c04:	cf 01       	movw	r24, r30
    5c06:	01 96       	adiw	r24, 0x01	; 1
    5c08:	15 96       	adiw	r26, 0x05	; 5
    5c0a:	9c 93       	st	X, r25
    5c0c:	8e 93       	st	-X, r24
    5c0e:	14 97       	sbiw	r26, 0x04	; 4
    5c10:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    5c12:	ba 82       	std	Y+2, r11	; 0x02
    5c14:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    5c16:	ab 28       	or	r10, r11
    5c18:	29 f6       	brne	.-118    	; 0x5ba4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    5c1a:	e3 e0       	ldi	r30, 0x03	; 3
    5c1c:	ae 2e       	mov	r10, r30
    5c1e:	b1 2c       	mov	r11, r1
    5c20:	45 cf       	rjmp	.-374    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5c22:	f8 01       	movw	r30, r16
    5c24:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    5c26:	a9 80       	ldd	r10, Y+1	; 0x01
    5c28:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    5c2a:	a1 14       	cp	r10, r1
    5c2c:	b1 04       	cpc	r11, r1
    5c2e:	d1 f5       	brne	.+116    	; 0x5ca4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	80 e0       	ldi	r24, 0x00	; 0
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    5c38:	22 96       	adiw	r28, 0x02	; 2
    5c3a:	3f af       	std	Y+63, r19	; 0x3f
    5c3c:	22 97       	sbiw	r28, 0x02	; 2
    5c3e:	23 96       	adiw	r28, 0x03	; 3
    5c40:	2f af       	std	Y+63, r18	; 0x3f
    5c42:	23 97       	sbiw	r28, 0x03	; 3
    5c44:	25 96       	adiw	r28, 0x05	; 5
    5c46:	9f af       	std	Y+63, r25	; 0x3f
    5c48:	8e af       	std	Y+62, r24	; 0x3e
    5c4a:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5c4c:	89 2b       	or	r24, r25
    5c4e:	29 f3       	breq	.-54     	; 0x5c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    5c50:	d8 01       	movw	r26, r16
    5c52:	16 96       	adiw	r26, 0x06	; 6
    5c54:	8c 91       	ld	r24, X
    5c56:	16 97       	sbiw	r26, 0x06	; 6
    5c58:	81 50       	subi	r24, 0x01	; 1
    5c5a:	16 96       	adiw	r26, 0x06	; 6
    5c5c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    5c5e:	25 96       	adiw	r28, 0x05	; 5
    5c60:	4c ad       	ldd	r20, Y+60	; 0x3c
    5c62:	5d ad       	ldd	r21, Y+61	; 0x3d
    5c64:	6e ad       	ldd	r22, Y+62	; 0x3e
    5c66:	7f ad       	ldd	r23, Y+63	; 0x3f
    5c68:	25 97       	sbiw	r28, 0x05	; 5
    5c6a:	c8 01       	movw	r24, r16
    5c6c:	0e 94 87 2c 	call	0x590e	; 0x590e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5c70:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    5c72:	f8 01       	movw	r30, r16
    5c74:	86 81       	ldd	r24, Z+6	; 0x06
    5c76:	8f 5f       	subi	r24, 0xFF	; 255
    5c78:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    5c7a:	a1 14       	cp	r10, r1
    5c7c:	b1 04       	cpc	r11, r1
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    5c80:	15 cf       	rjmp	.-470    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    5c82:	c8 01       	movw	r24, r16
    5c84:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5c88:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    5c8a:	89 2b       	or	r24, r25
    5c8c:	09 f0       	breq	.+2      	; 0x5c90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    5c8e:	0e cf       	rjmp	.-484    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5c90:	c8 01       	movw	r24, r16
    5c92:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5c96:	8d 37       	cpi	r24, 0x7D	; 125
    5c98:	09 f0       	breq	.+2      	; 0x5c9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    5c9a:	3f c0       	rjmp	.+126    	; 0x5d1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5c9c:	d8 01       	movw	r26, r16
    5c9e:	18 96       	adiw	r26, 0x08	; 8
    5ca0:	1c 92       	st	X, r1
    5ca2:	04 cf       	rjmp	.-504    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    5ca4:	b5 01       	movw	r22, r10
    5ca6:	c4 01       	movw	r24, r8
    5ca8:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	49 f5       	brne	.+82     	; 0x5d02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    5cb0:	d3 01       	movw	r26, r6
    5cb2:	ed 91       	ld	r30, X+
    5cb4:	fc 91       	ld	r31, X
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	f0 81       	ld	r31, Z
    5cba:	e0 2d       	mov	r30, r0
    5cbc:	6c e0       	ldi	r22, 0x0C	; 12
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	c3 01       	movw	r24, r6
    5cc2:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5cc4:	00 97       	sbiw	r24, 0x00	; 0
    5cc6:	09 f4       	brne	.+2      	; 0x5cca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    5cc8:	b3 cf       	rjmp	.-154    	; 0x5c30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    5cca:	fc 01       	movw	r30, r24
    5ccc:	25 2d       	mov	r18, r5
    5cce:	11 92       	st	Z+, r1
    5cd0:	2a 95       	dec	r18
    5cd2:	e9 f7       	brne	.-6      	; 0x5cce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    5cd4:	dc 01       	movw	r26, r24
    5cd6:	1d 92       	st	X+, r1
    5cd8:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    5cda:	d7 01       	movw	r26, r14
    5cdc:	14 96       	adiw	r26, 0x04	; 4
    5cde:	ed 91       	ld	r30, X+
    5ce0:	fc 91       	ld	r31, X
    5ce2:	15 97       	sbiw	r26, 0x05	; 5
    5ce4:	30 97       	sbiw	r30, 0x00	; 0
    5ce6:	81 f0       	breq	.+32     	; 0x5d08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    5ce8:	dc 01       	movw	r26, r24
    5cea:	19 96       	adiw	r26, 0x09	; 9
    5cec:	fc 93       	st	X, r31
    5cee:	ee 93       	st	-X, r30
    5cf0:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    5cf2:	97 83       	std	Z+7, r25	; 0x07
    5cf4:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    5cf6:	f7 01       	movw	r30, r14
    5cf8:	95 83       	std	Z+5, r25	; 0x05
    5cfa:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	b3 86       	std	Z+11, r11	; 0x0b
    5d00:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    5d02:	36 2d       	mov	r19, r6
    5d04:	27 2d       	mov	r18, r7
    5d06:	98 cf       	rjmp	.-208    	; 0x5c38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    5d08:	13 96       	adiw	r26, 0x03	; 3
    5d0a:	9c 93       	st	X, r25
    5d0c:	8e 93       	st	-X, r24
    5d0e:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    5d10:	15 96       	adiw	r26, 0x05	; 5
    5d12:	9c 93       	st	X, r25
    5d14:	8e 93       	st	-X, r24
    5d16:	14 97       	sbiw	r26, 0x04	; 4
    5d18:	f1 cf       	rjmp	.-30     	; 0x5cfc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5d1a:	c8 01       	movw	r24, r16
    5d1c:	0e 94 0c 28 	call	0x5018	; 0x5018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5d20:	8c 32       	cpi	r24, 0x2C	; 44
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    5d24:	4b cf       	rjmp	.-362    	; 0x5bbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5d26:	f8 01       	movw	r30, r16
    5d28:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    5d2a:	c8 01       	movw	r24, r16
    5d2c:	0e 94 73 28 	call	0x50e6	; 0x50e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5d30:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    5d32:	89 2b       	or	r24, r25
    5d34:	09 f4       	brne	.+2      	; 0x5d38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    5d36:	18 cf       	rjmp	.-464    	; 0x5b68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    5d38:	b9 ce       	rjmp	.-654    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    5d3a:	f5 e0       	ldi	r31, 0x05	; 5
    5d3c:	af 2e       	mov	r10, r31
    5d3e:	b1 2c       	mov	r11, r1
    5d40:	b5 ce       	rjmp	.-662    	; 0x5aac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    5d42:	be 01       	movw	r22, r28
    5d44:	6f 5f       	subi	r22, 0xFF	; 255
    5d46:	7f 4f       	sbci	r23, 0xFF	; 255
    5d48:	c8 01       	movw	r24, r16
    5d4a:	0e 94 1c 28 	call	0x5038	; 0x5038 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    5d4e:	00 97       	sbiw	r24, 0x00	; 0
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    5d52:	ad ce       	rjmp	.-678    	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    5d54:	e1 14       	cp	r14, r1
    5d56:	f1 04       	cpc	r15, r1
    5d58:	61 f0       	breq	.+24     	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    5d5e:	23 e0       	ldi	r18, 0x03	; 3
    5d60:	30 e0       	ldi	r19, 0x00	; 0
    5d62:	d7 01       	movw	r26, r14
    5d64:	11 96       	adiw	r26, 0x01	; 1
    5d66:	3c 93       	st	X, r19
    5d68:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    5d6a:	13 96       	adiw	r26, 0x03	; 3
    5d6c:	9c 93       	st	X, r25
    5d6e:	8e 93       	st	-X, r24
    5d70:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	80 e0       	ldi	r24, 0x00	; 0
    5d76:	9b ce       	rjmp	.-714    	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    5d78:	e1 e0       	ldi	r30, 0x01	; 1
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	ec 0f       	add	r30, r28
    5d7e:	fd 1f       	adc	r31, r29
    5d80:	ed 0d       	add	r30, r13
    5d82:	f1 1d       	adc	r31, r1
    5d84:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    5d86:	19 81       	ldd	r17, Y+1	; 0x01
    5d88:	11 23       	and	r17, r17
    5d8a:	09 f4       	brne	.+2      	; 0x5d8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    5d8c:	51 c0       	rjmp	.+162    	; 0x5e30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    5d8e:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5d90:	1d 32       	cpi	r17, 0x2D	; 45
    5d92:	71 f1       	breq	.+92     	; 0x5df0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5d94:	1b 32       	cpi	r17, 0x2B	; 43
    5d96:	61 f1       	breq	.+88     	; 0x5df0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5d98:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    5d9a:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5d9c:	90 ed       	ldi	r25, 0xD0	; 208
    5d9e:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    5da0:	9a 30       	cpi	r25, 0x0A	; 10
    5da2:	d8 f3       	brcs	.-10     	; 0x5d9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    5da4:	81 11       	cpse	r24, r1
    5da6:	44 c0       	rjmp	.+136    	; 0x5e30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5da8:	14 37       	cpi	r17, 0x74	; 116
    5daa:	09 f4       	brne	.+2      	; 0x5dae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    5dac:	dd c1       	rjmp	.+954    	; 0x6168 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    5dae:	1b 32       	cpi	r17, 0x2B	; 43
    5db0:	09 f1       	breq	.+66     	; 0x5df4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    5db2:	1d 32       	cpi	r17, 0x2D	; 45
    5db4:	19 f1       	breq	.+70     	; 0x5dfc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5db6:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    5db8:	fe 01       	movw	r30, r28
    5dba:	31 96       	adiw	r30, 0x01	; 1
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    5dc2:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5dc4:	80 ed       	ldi	r24, 0xD0	; 208
    5dc6:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    5dc8:	8a 30       	cpi	r24, 0x0A	; 10
    5dca:	d0 f4       	brcc	.+52     	; 0x5e00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    5dcc:	aa e0       	ldi	r26, 0x0A	; 10
    5dce:	b0 e0       	ldi	r27, 0x00	; 0
    5dd0:	0e 94 75 bb 	call	0x176ea	; 0x176ea <__muluhisi3>
    5dd4:	20 2f       	mov	r18, r16
    5dd6:	00 0f       	add	r16, r16
    5dd8:	33 0b       	sbc	r19, r19
    5dda:	20 53       	subi	r18, 0x30	; 48
    5ddc:	31 09       	sbc	r19, r1
    5dde:	03 2e       	mov	r0, r19
    5de0:	00 0c       	add	r0, r0
    5de2:	44 0b       	sbc	r20, r20
    5de4:	55 0b       	sbc	r21, r21
    5de6:	26 0f       	add	r18, r22
    5de8:	37 1f       	adc	r19, r23
    5dea:	48 1f       	adc	r20, r24
    5dec:	59 1f       	adc	r21, r25
    5dee:	e9 cf       	rjmp	.-46     	; 0x5dc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    5df0:	32 96       	adiw	r30, 0x02	; 2
    5df2:	d3 cf       	rjmp	.-90     	; 0x5d9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5df4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    5df6:	fe 01       	movw	r30, r28
    5df8:	32 96       	adiw	r30, 0x02	; 2
    5dfa:	e0 cf       	rjmp	.-64     	; 0x5dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    5dfc:	11 e0       	ldi	r17, 0x01	; 1
    5dfe:	fb cf       	rjmp	.-10     	; 0x5df6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    5e00:	11 23       	and	r17, r17
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    5e04:	b5 c1       	rjmp	.+874    	; 0x6170 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    5e06:	e1 14       	cp	r14, r1
    5e08:	f1 04       	cpc	r15, r1
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    5e0c:	b2 cf       	rjmp	.-156    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5e0e:	87 e0       	ldi	r24, 0x07	; 7
    5e10:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    5e12:	21 15       	cp	r18, r1
    5e14:	31 05       	cpc	r19, r1
    5e16:	41 05       	cpc	r20, r1
    5e18:	51 05       	cpc	r21, r1
    5e1a:	11 f4       	brne	.+4      	; 0x5e20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    5e1c:	86 e0       	ldi	r24, 0x06	; 6
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5e20:	f7 01       	movw	r30, r14
    5e22:	91 83       	std	Z+1, r25	; 0x01
    5e24:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    5e26:	22 83       	std	Z+2, r18	; 0x02
    5e28:	33 83       	std	Z+3, r19	; 0x03
    5e2a:	44 83       	std	Z+4, r20	; 0x04
    5e2c:	55 83       	std	Z+5, r21	; 0x05
    5e2e:	a1 cf       	rjmp	.-190    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    5e30:	61 e0       	ldi	r22, 0x01	; 1
    5e32:	73 e0       	ldi	r23, 0x03	; 3
    5e34:	ce 01       	movw	r24, r28
    5e36:	01 96       	adiw	r24, 0x01	; 1
    5e38:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    5e3c:	89 2b       	or	r24, r25
    5e3e:	09 f4       	brne	.+2      	; 0x5e42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    5e40:	46 c0       	rjmp	.+140    	; 0x5ece <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    5e42:	5e 01       	movw	r10, r28
    5e44:	f2 e0       	ldi	r31, 0x02	; 2
    5e46:	af 0e       	add	r10, r31
    5e48:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5e4a:	1d 32       	cpi	r17, 0x2D	; 45
    5e4c:	49 f0       	breq	.+18     	; 0x5e60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    5e4e:	fe 01       	movw	r30, r28
    5e50:	31 96       	adiw	r30, 0x01	; 1
    5e52:	5f 01       	movw	r10, r30
    5e54:	1b 32       	cpi	r17, 0x2B	; 43
    5e56:	21 f4       	brne	.+8      	; 0x5e60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    5e58:	5e 01       	movw	r10, r28
    5e5a:	22 e0       	ldi	r18, 0x02	; 2
    5e5c:	a2 0e       	add	r10, r18
    5e5e:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    5e60:	65 e0       	ldi	r22, 0x05	; 5
    5e62:	73 e0       	ldi	r23, 0x03	; 3
    5e64:	c5 01       	movw	r24, r10
    5e66:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    5e6a:	89 2b       	or	r24, r25
    5e6c:	81 f1       	breq	.+96     	; 0x5ece <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    5e6e:	d5 01       	movw	r26, r10
    5e70:	8c 91       	ld	r24, X
    5e72:	88 23       	and	r24, r24
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    5e76:	3b c1       	rjmp	.+630    	; 0x60ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5e78:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    5e7a:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5e7c:	90 ed       	ldi	r25, 0xD0	; 208
    5e7e:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    5e80:	9a 30       	cpi	r25, 0x0A	; 10
    5e82:	d0 f3       	brcs	.-12     	; 0x5e78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    5e84:	8e 32       	cpi	r24, 0x2E	; 46
    5e86:	41 f4       	brne	.+16     	; 0x5e98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    5e88:	9d 01       	movw	r18, r26
    5e8a:	f9 01       	movw	r30, r18
    5e8c:	2f 5f       	subi	r18, 0xFF	; 255
    5e8e:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5e90:	80 81       	ld	r24, Z
    5e92:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    5e94:	8a 30       	cpi	r24, 0x0A	; 10
    5e96:	c8 f3       	brcs	.-14     	; 0x5e8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    5e98:	80 81       	ld	r24, Z
    5e9a:	8f 7d       	andi	r24, 0xDF	; 223
    5e9c:	85 34       	cpi	r24, 0x45	; 69
    5e9e:	a1 f4       	brne	.+40     	; 0x5ec8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    5ea0:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5ea2:	8d 32       	cpi	r24, 0x2D	; 45
    5ea4:	09 f4       	brne	.+2      	; 0x5ea8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    5ea6:	57 c0       	rjmp	.+174    	; 0x5f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    5ea8:	8b 32       	cpi	r24, 0x2B	; 43
    5eaa:	09 f4       	brne	.+2      	; 0x5eae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    5eac:	54 c0       	rjmp	.+168    	; 0x5f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    5eae:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5eb0:	80 81       	ld	r24, Z
    5eb2:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    5eb4:	8a 30       	cpi	r24, 0x0A	; 10
    5eb6:	08 f0       	brcs	.+2      	; 0x5eba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    5eb8:	1a c1       	rjmp	.+564    	; 0x60ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5eba:	cf 01       	movw	r24, r30
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5ec0:	20 81       	ld	r18, Z
    5ec2:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    5ec4:	2a 30       	cpi	r18, 0x0A	; 10
    5ec6:	d0 f3       	brcs	.-12     	; 0x5ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    5ec8:	80 81       	ld	r24, Z
    5eca:	81 11       	cpse	r24, r1
    5ecc:	10 c1       	rjmp	.+544    	; 0x60ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    5ece:	1b 32       	cpi	r17, 0x2B	; 43
    5ed0:	09 f4       	brne	.+2      	; 0x5ed4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    5ed2:	43 c0       	rjmp	.+134    	; 0x5f5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    5ed4:	1d 32       	cpi	r17, 0x2D	; 45
    5ed6:	09 f0       	breq	.+2      	; 0x5eda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    5ed8:	47 c0       	rjmp	.+142    	; 0x5f68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    5eda:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    5edc:	dd 24       	eor	r13, r13
    5ede:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    5ee0:	5e 01       	movw	r10, r28
    5ee2:	b2 e0       	ldi	r27, 0x02	; 2
    5ee4:	ab 0e       	add	r10, r27
    5ee6:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    5ee8:	60 e0       	ldi	r22, 0x00	; 0
    5eea:	70 e0       	ldi	r23, 0x00	; 0
    5eec:	80 e8       	ldi	r24, 0x80	; 128
    5eee:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    5ef0:	14 37       	cpi	r17, 0x74	; 116
    5ef2:	09 f4       	brne	.+2      	; 0x5ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    5ef4:	d2 c0       	rjmp	.+420    	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    5ef6:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5ef8:	60 e0       	ldi	r22, 0x00	; 0
    5efa:	70 e0       	ldi	r23, 0x00	; 0
    5efc:	80 ec       	ldi	r24, 0xC0	; 192
    5efe:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    5f00:	1e 34       	cpi	r17, 0x4E	; 78
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    5f04:	ca c0       	rjmp	.+404    	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    5f06:	19 34       	cpi	r17, 0x49	; 73
    5f08:	09 f4       	brne	.+2      	; 0x5f0c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    5f0a:	97 c0       	rjmp	.+302    	; 0x603a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    5f0c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	a9 01       	movw	r20, r18
    5f14:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    5f16:	d5 01       	movw	r26, r10
    5f18:	1d 91       	ld	r17, X+
    5f1a:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5f1c:	80 ed       	ldi	r24, 0xD0	; 208
    5f1e:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    5f20:	8a 30       	cpi	r24, 0x0A	; 10
    5f22:	48 f5       	brcc	.+82     	; 0x5f76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    5f24:	2c 3c       	cpi	r18, 0xCC	; 204
    5f26:	bc ec       	ldi	r27, 0xCC	; 204
    5f28:	3b 07       	cpc	r19, r27
    5f2a:	bc e0       	ldi	r27, 0x0C	; 12
    5f2c:	4b 07       	cpc	r20, r27
    5f2e:	51 05       	cpc	r21, r1
    5f30:	04 f5       	brge	.+64     	; 0x5f72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    5f32:	aa e0       	ldi	r26, 0x0A	; 10
    5f34:	b0 e0       	ldi	r27, 0x00	; 0
    5f36:	0e 94 75 bb 	call	0x176ea	; 0x176ea <__muluhisi3>
    5f3a:	21 2f       	mov	r18, r17
    5f3c:	11 0f       	add	r17, r17
    5f3e:	33 0b       	sbc	r19, r19
    5f40:	20 53       	subi	r18, 0x30	; 48
    5f42:	31 09       	sbc	r19, r1
    5f44:	03 2e       	mov	r0, r19
    5f46:	00 0c       	add	r0, r0
    5f48:	44 0b       	sbc	r20, r20
    5f4a:	55 0b       	sbc	r21, r21
    5f4c:	26 0f       	add	r18, r22
    5f4e:	37 1f       	adc	r19, r23
    5f50:	48 1f       	adc	r20, r24
    5f52:	59 1f       	adc	r21, r25
    5f54:	df cf       	rjmp	.-66     	; 0x5f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    5f56:	32 96       	adiw	r30, 0x02	; 2
    5f58:	ab cf       	rjmp	.-170    	; 0x5eb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    5f5a:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5f5c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    5f5e:	5e 01       	movw	r10, r28
    5f60:	e2 e0       	ldi	r30, 0x02	; 2
    5f62:	ae 0e       	add	r10, r30
    5f64:	b1 1c       	adc	r11, r1
    5f66:	c0 cf       	rjmp	.-128    	; 0x5ee8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5f68:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    5f6a:	ce 01       	movw	r24, r28
    5f6c:	01 96       	adiw	r24, 0x01	; 1
    5f6e:	5c 01       	movw	r10, r24
    5f70:	bb cf       	rjmp	.-138    	; 0x5ee8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    5f72:	0f 5f       	subi	r16, 0xFF	; 255
    5f74:	cf cf       	rjmp	.-98     	; 0x5f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    5f76:	1e 32       	cpi	r17, 0x2E	; 46
    5f78:	31 f5       	brne	.+76     	; 0x5fc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    5f7a:	5f 01       	movw	r10, r30
    5f7c:	8f ef       	ldi	r24, 0xFF	; 255
    5f7e:	a8 1a       	sub	r10, r24
    5f80:	b8 0a       	sbc	r11, r24
    5f82:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    5f84:	d5 01       	movw	r26, r10
    5f86:	1d 91       	ld	r17, X+
    5f88:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5f8a:	80 ed       	ldi	r24, 0xD0	; 208
    5f8c:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    5f8e:	8a 30       	cpi	r24, 0x0A	; 10
    5f90:	d0 f4       	brcc	.+52     	; 0x5fc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    5f92:	2c 3c       	cpi	r18, 0xCC	; 204
    5f94:	bc ec       	ldi	r27, 0xCC	; 204
    5f96:	3b 07       	cpc	r19, r27
    5f98:	bc e0       	ldi	r27, 0x0C	; 12
    5f9a:	4b 07       	cpc	r20, r27
    5f9c:	51 05       	cpc	r21, r1
    5f9e:	8c f7       	brge	.-30     	; 0x5f82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    5fa0:	aa e0       	ldi	r26, 0x0A	; 10
    5fa2:	b0 e0       	ldi	r27, 0x00	; 0
    5fa4:	0e 94 75 bb 	call	0x176ea	; 0x176ea <__muluhisi3>
    5fa8:	21 2f       	mov	r18, r17
    5faa:	11 0f       	add	r17, r17
    5fac:	33 0b       	sbc	r19, r19
    5fae:	20 53       	subi	r18, 0x30	; 48
    5fb0:	31 09       	sbc	r19, r1
    5fb2:	03 2e       	mov	r0, r19
    5fb4:	00 0c       	add	r0, r0
    5fb6:	44 0b       	sbc	r20, r20
    5fb8:	55 0b       	sbc	r21, r21
    5fba:	26 0f       	add	r18, r22
    5fbc:	37 1f       	adc	r19, r23
    5fbe:	48 1f       	adc	r20, r24
    5fc0:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    5fc2:	01 50       	subi	r16, 0x01	; 1
    5fc4:	de cf       	rjmp	.-68     	; 0x5f82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    5fc6:	80 81       	ld	r24, Z
    5fc8:	8f 7d       	andi	r24, 0xDF	; 223
    5fca:	00 2e       	mov	r0, r16
    5fcc:	00 0c       	add	r0, r0
    5fce:	11 0b       	sbc	r17, r17
    5fd0:	85 34       	cpi	r24, 0x45	; 69
    5fd2:	09 f0       	breq	.+2      	; 0x5fd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    5fd4:	70 c0       	rjmp	.+224    	; 0x60b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    5fd6:	81 81       	ldd	r24, Z+1	; 0x01
    5fd8:	8d 32       	cpi	r24, 0x2D	; 45
    5fda:	41 f5       	brne	.+80     	; 0x602c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    5fdc:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    5fde:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    5fe4:	6a e0       	ldi	r22, 0x0A	; 10
    5fe6:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    5fe8:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5fea:	60 ed       	ldi	r22, 0xD0	; 208
    5fec:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    5fee:	6a 30       	cpi	r22, 0x0A	; 10
    5ff0:	78 f5       	brcc	.+94     	; 0x6050 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    5ff2:	b8 9e       	mul	r11, r24
    5ff4:	b0 01       	movw	r22, r0
    5ff6:	b9 9e       	mul	r11, r25
    5ff8:	70 0d       	add	r23, r0
    5ffa:	11 24       	eor	r1, r1
    5ffc:	8a 2f       	mov	r24, r26
    5ffe:	aa 0f       	add	r26, r26
    6000:	99 0b       	sbc	r25, r25
    6002:	c0 97       	sbiw	r24, 0x30	; 48
    6004:	86 0f       	add	r24, r22
    6006:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    6008:	b8 01       	movw	r22, r16
    600a:	68 0f       	add	r22, r24
    600c:	79 1f       	adc	r23, r25
    600e:	67 32       	cpi	r22, 0x27	; 39
    6010:	71 05       	cpc	r23, r1
    6012:	54 f3       	brlt	.-44     	; 0x5fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    6014:	bb 23       	and	r27, r27
    6016:	89 f0       	breq	.+34     	; 0x603a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    6018:	60 e0       	ldi	r22, 0x00	; 0
    601a:	70 e0       	ldi	r23, 0x00	; 0
    601c:	80 e0       	ldi	r24, 0x00	; 0
    601e:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    6020:	d1 10       	cpse	r13, r1
    6022:	3b c0       	rjmp	.+118    	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    6024:	60 e0       	ldi	r22, 0x00	; 0
    6026:	70 e0       	ldi	r23, 0x00	; 0
    6028:	cb 01       	movw	r24, r22
    602a:	37 c0       	rjmp	.+110    	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    602c:	8b 32       	cpi	r24, 0x2B	; 43
    602e:	19 f0       	breq	.+6      	; 0x6036 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    6030:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    6032:	b0 e0       	ldi	r27, 0x00	; 0
    6034:	d5 cf       	rjmp	.-86     	; 0x5fe0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    6036:	32 96       	adiw	r30, 0x02	; 2
    6038:	fc cf       	rjmp	.-8      	; 0x6032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    603a:	60 e0       	ldi	r22, 0x00	; 0
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	80 e8       	ldi	r24, 0x80	; 128
    6040:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    6042:	d1 10       	cpse	r13, r1
    6044:	2a c0       	rjmp	.+84     	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    6046:	60 e0       	ldi	r22, 0x00	; 0
    6048:	70 e0       	ldi	r23, 0x00	; 0
    604a:	80 e8       	ldi	r24, 0x80	; 128
    604c:	9f e7       	ldi	r25, 0x7F	; 127
    604e:	25 c0       	rjmp	.+74     	; 0x609a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    6050:	bb 23       	and	r27, r27
    6052:	19 f0       	breq	.+6      	; 0x605a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    6054:	91 95       	neg	r25
    6056:	81 95       	neg	r24
    6058:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    605a:	08 0f       	add	r16, r24
    605c:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    605e:	ca 01       	movw	r24, r20
    6060:	b9 01       	movw	r22, r18
    6062:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    6066:	10 16       	cp	r1, r16
    6068:	11 06       	cpc	r1, r17
    606a:	44 f5       	brge	.+80     	; 0x60bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    606c:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    606e:	00 ff       	sbrs	r16, 0
    6070:	0c c0       	rjmp	.+24     	; 0x608a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    6072:	24 e0       	ldi	r18, 0x04	; 4
    6074:	b2 9e       	mul	r11, r18
    6076:	f0 01       	movw	r30, r0
    6078:	11 24       	eor	r1, r1
    607a:	e8 5c       	subi	r30, 0xC8	; 200
    607c:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    607e:	20 81       	ld	r18, Z
    6080:	31 81       	ldd	r19, Z+1	; 0x01
    6082:	42 81       	ldd	r20, Z+2	; 0x02
    6084:	53 81       	ldd	r21, Z+3	; 0x03
    6086:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    608a:	15 95       	asr	r17
    608c:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    608e:	b3 94       	inc	r11
    6090:	01 15       	cp	r16, r1
    6092:	11 05       	cpc	r17, r1
    6094:	61 f7       	brne	.-40     	; 0x606e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    6096:	d1 10       	cpse	r13, r1
    6098:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    609a:	e1 14       	cp	r14, r1
    609c:	f1 04       	cpc	r15, r1
    609e:	09 f4       	brne	.+2      	; 0x60a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    60a0:	68 ce       	rjmp	.-816    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    60a2:	2a e0       	ldi	r18, 0x0A	; 10
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	f7 01       	movw	r30, r14
    60a8:	31 83       	std	Z+1, r19	; 0x01
    60aa:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    60ac:	62 83       	std	Z+2, r22	; 0x02
    60ae:	73 83       	std	Z+3, r23	; 0x03
    60b0:	84 83       	std	Z+4, r24	; 0x04
    60b2:	95 83       	std	Z+5, r25	; 0x05
    60b4:	5e ce       	rjmp	.-836    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	cf cf       	rjmp	.-98     	; 0x605a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    60bc:	11 95       	neg	r17
    60be:	01 95       	neg	r16
    60c0:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    60c2:	b1 2c       	mov	r11, r1
make_float():
    60c4:	01 15       	cp	r16, r1
    60c6:	11 05       	cpc	r17, r1
    60c8:	31 f3       	breq	.-52     	; 0x6096 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    60ca:	00 ff       	sbrs	r16, 0
    60cc:	0c c0       	rjmp	.+24     	; 0x60e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    60ce:	a4 e0       	ldi	r26, 0x04	; 4
    60d0:	ba 9e       	mul	r11, r26
    60d2:	f0 01       	movw	r30, r0
    60d4:	11 24       	eor	r1, r1
    60d6:	e0 5e       	subi	r30, 0xE0	; 224
    60d8:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    60da:	20 81       	ld	r18, Z
    60dc:	31 81       	ldd	r19, Z+1	; 0x01
    60de:	42 81       	ldd	r20, Z+2	; 0x02
    60e0:	53 81       	ldd	r21, Z+3	; 0x03
    60e2:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    60e6:	15 95       	asr	r17
    60e8:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    60ea:	b3 94       	inc	r11
    60ec:	eb cf       	rjmp	.-42     	; 0x60c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    60ee:	6e e0       	ldi	r22, 0x0E	; 14
    60f0:	73 e0       	ldi	r23, 0x03	; 3
    60f2:	ce 01       	movw	r24, r28
    60f4:	01 96       	adiw	r24, 0x01	; 1
    60f6:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    60fa:	89 2b       	or	r24, r25
    60fc:	91 f4       	brne	.+36     	; 0x6122 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    60fe:	e1 14       	cp	r14, r1
    6100:	f1 04       	cpc	r15, r1
    6102:	09 f4       	brne	.+2      	; 0x6106 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    6104:	36 ce       	rjmp	.-916    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    6106:	85 e0       	ldi	r24, 0x05	; 5
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	f7 01       	movw	r30, r14
    610c:	91 83       	std	Z+1, r25	; 0x01
    610e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	a0 e0       	ldi	r26, 0x00	; 0
    6116:	b0 e0       	ldi	r27, 0x00	; 0
    6118:	82 83       	std	Z+2, r24	; 0x02
    611a:	93 83       	std	Z+3, r25	; 0x03
    611c:	a4 83       	std	Z+4, r26	; 0x04
    611e:	b5 83       	std	Z+5, r27	; 0x05
    6120:	28 ce       	rjmp	.-944    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    6122:	63 e1       	ldi	r22, 0x13	; 19
    6124:	73 e0       	ldi	r23, 0x03	; 3
    6126:	ce 01       	movw	r24, r28
    6128:	01 96       	adiw	r24, 0x01	; 1
    612a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    612e:	89 2b       	or	r24, r25
    6130:	79 f4       	brne	.+30     	; 0x6150 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    6132:	e1 14       	cp	r14, r1
    6134:	f1 04       	cpc	r15, r1
    6136:	09 f4       	brne	.+2      	; 0x613a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    6138:	1c ce       	rjmp	.-968    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    613a:	85 e0       	ldi	r24, 0x05	; 5
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	d7 01       	movw	r26, r14
    6140:	8d 93       	st	X+, r24
    6142:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    6144:	f7 01       	movw	r30, r14
    6146:	12 82       	std	Z+2, r1	; 0x02
    6148:	13 82       	std	Z+3, r1	; 0x03
    614a:	14 82       	std	Z+4, r1	; 0x04
    614c:	15 82       	std	Z+5, r1	; 0x05
    614e:	11 ce       	rjmp	.-990    	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    6150:	69 e1       	ldi	r22, 0x19	; 25
    6152:	73 e0       	ldi	r23, 0x03	; 3
    6154:	ce 01       	movw	r24, r28
    6156:	01 96       	adiw	r24, 0x01	; 1
    6158:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    615c:	89 2b       	or	r24, r25
    615e:	09 f4       	brne	.+2      	; 0x6162 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    6160:	08 ce       	rjmp	.-1008   	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    6162:	82 e0       	ldi	r24, 0x02	; 2
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	a3 cc       	rjmp	.-1722   	; 0x5aae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    6168:	21 e0       	ldi	r18, 0x01	; 1
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	40 e0       	ldi	r20, 0x00	; 0
    616e:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    6170:	e1 14       	cp	r14, r1
    6172:	f1 04       	cpc	r15, r1
    6174:	09 f0       	breq	.+2      	; 0x6178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    6176:	52 ce       	rjmp	.-860    	; 0x5e1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    6178:	fc cd       	rjmp	.-1032   	; 0x5d72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

0000617a <remote_tds_get_data(unsigned char) [clone .part.26]>:
_Z19remote_tds_get_datah.part.26():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    617a:	cf 93       	push	r28
    617c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    617e:	93 e0       	ldi	r25, 0x03	; 3
    6180:	89 9f       	mul	r24, r25
    6182:	e0 01       	movw	r28, r0
    6184:	11 24       	eor	r1, r1
    6186:	be 01       	movw	r22, r28
    6188:	6b 59       	subi	r22, 0x9B	; 155
    618a:	7f 4f       	sbci	r23, 0xFF	; 255
    618c:	07 2e       	mov	r0, r23
    618e:	00 0c       	add	r0, r0
    6190:	88 0b       	sbc	r24, r24
    6192:	99 0b       	sbc	r25, r25
    6194:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    6198:	be 01       	movw	r22, r28
    619a:	6c 59       	subi	r22, 0x9C	; 156
    619c:	7f 4f       	sbci	r23, 0xFF	; 255
    619e:	07 2e       	mov	r0, r23
    61a0:	00 0c       	add	r0, r0
    61a2:	88 0b       	sbc	r24, r24
    61a4:	99 0b       	sbc	r25, r25
    61a6:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3219
  }
  return temp;
}
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	df 91       	pop	r29
    61ae:	cf 91       	pop	r28
    61b0:	08 95       	ret

000061b2 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5283
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    61b2:	ef 92       	push	r14
    61b4:	ff 92       	push	r15
    61b6:	0f 93       	push	r16
    61b8:	1f 93       	push	r17
    61ba:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5284
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    61bc:	ee 24       	eor	r14, r14
    61be:	ea 94       	dec	r14
    61c0:	fe 2c       	mov	r15, r14
    61c2:	10 e0       	ldi	r17, 0x00	; 0
    61c4:	00 e0       	ldi	r16, 0x00	; 0
    61c6:	22 e0       	ldi	r18, 0x02	; 2
    61c8:	bc 01       	movw	r22, r24
    61ca:	86 e0       	ldi	r24, 0x06	; 6
    61cc:	99 e0       	ldi	r25, 0x09	; 9
    61ce:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5285
}
    61d2:	1f 91       	pop	r17
    61d4:	0f 91       	pop	r16
    61d6:	ff 90       	pop	r15
    61d8:	ef 90       	pop	r14
    61da:	08 95       	ret

000061dc <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    61dc:	89 e3       	ldi	r24, 0x39	; 57
    61de:	99 e0       	ldi	r25, 0x09	; 9
    61e0:	fc 01       	movw	r30, r24
    61e2:	01 90       	ld	r0, Z+
    61e4:	00 20       	and	r0, r0
    61e6:	e9 f7       	brne	.-6      	; 0x61e2 <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    61e8:	cf 01       	movw	r24, r30
    61ea:	8a 53       	subi	r24, 0x3A	; 58
    61ec:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2772
  if (len > 0)
    61ee:	88 23       	and	r24, r24
    61f0:	29 f0       	breq	.+10     	; 0x61fc <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
    dialog_set_string[len - 1] = 0;
    61f2:	99 27       	eor	r25, r25
    61f4:	fc 01       	movw	r30, r24
    61f6:	e8 5c       	subi	r30, 0xC8	; 200
    61f8:	f6 4f       	sbci	r31, 0xF6	; 246
    61fa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
}
    61fc:	08 95       	ret

000061fe <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    61fe:	e9 e3       	ldi	r30, 0x39	; 57
    6200:	f9 e0       	ldi	r31, 0x09	; 9
    6202:	01 90       	ld	r0, Z+
    6204:	00 20       	and	r0, r0
    6206:	e9 f7       	brne	.-6      	; 0x6202 <display_element_set_string_add_char(char)+0x4>
    6208:	ea 53       	subi	r30, 0x3A	; 58
    620a:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2762
  if (len  < dialog_set_string_max_length - 1)
    620c:	ff 27       	eor	r31, r31
    620e:	20 91 38 09 	lds	r18, 0x0938	; 0x800938 <dialog_set_string_max_length>
    6212:	21 50       	subi	r18, 0x01	; 1
    6214:	33 0b       	sbc	r19, r19
    6216:	e2 17       	cp	r30, r18
    6218:	f3 07       	cpc	r31, r19
    621a:	24 f4       	brge	.+8      	; 0x6224 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
  {
    dialog_set_string[len] = znak;
    621c:	e7 5c       	subi	r30, 0xC7	; 199
    621e:	f6 4f       	sbci	r31, 0xF6	; 246
    6220:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2765
    dialog_set_string[len + 1] = 0;
    6222:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
  }
}
    6224:	08 95       	ret

00006226 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>:
_Z19click_keyboard_alfahhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
   args3 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    6226:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <__data_end>
    622a:	91 11       	cpse	r25, r1
    622c:	07 c0       	rjmp	.+14     	; 0x623c <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    622e:	e4 2f       	mov	r30, r20
    6230:	f0 e0       	ldi	r31, 0x00	; 0
    6232:	ec 5b       	subi	r30, 0xBC	; 188
    6234:	f6 4c       	sbci	r31, 0xC6	; 198
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    6236:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
  ///
  display_element_set_string_add_char(znak);
    6238:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    623c:	91 30       	cpi	r25, 0x01	; 1
    623e:	29 f4       	brne	.+10     	; 0x624a <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    6240:	e4 2f       	mov	r30, r20
    6242:	f0 e0       	ldi	r31, 0x00	; 0
    6244:	e6 5d       	subi	r30, 0xD6	; 214
    6246:	f6 4c       	sbci	r31, 0xC6	; 198
    6248:	f6 cf       	rjmp	.-20     	; 0x6236 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    624a:	92 30       	cpi	r25, 0x02	; 2
    624c:	a9 f7       	brne	.-22     	; 0x6238 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    624e:	e4 2f       	mov	r30, r20
    6250:	f0 e0       	ldi	r31, 0x00	; 0
    6252:	e0 5f       	subi	r30, 0xF0	; 240
    6254:	f6 4c       	sbci	r31, 0xC6	; 198
    6256:	ef cf       	rjmp	.-34     	; 0x6236 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>

00006258 <click_keyboard_number(unsigned char, unsigned char, unsigned char)>:
_Z21click_keyboard_numberhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
   args3 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    6258:	80 e3       	ldi	r24, 0x30	; 48
    625a:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
  if (args3 == 10) znak = '.';
    625c:	4a 30       	cpi	r20, 0x0A	; 10
    625e:	09 f4       	brne	.+2      	; 0x6262 <click_keyboard_number(unsigned char, unsigned char, unsigned char)+0xa>
    6260:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
  display_element_set_string_add_char(znak);
    6262:	0c 94 ff 30 	jmp	0x61fe	; 0x61fe <display_element_set_string_add_char(char)>

00006266 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5584
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    6266:	2f 92       	push	r2
    6268:	3f 92       	push	r3
    626a:	4f 92       	push	r4
    626c:	5f 92       	push	r5
    626e:	6f 92       	push	r6
    6270:	7f 92       	push	r7
    6272:	9f 92       	push	r9
    6274:	af 92       	push	r10
    6276:	bf 92       	push	r11
    6278:	cf 92       	push	r12
    627a:	df 92       	push	r13
    627c:	ef 92       	push	r14
    627e:	ff 92       	push	r15
    6280:	0f 93       	push	r16
    6282:	1f 93       	push	r17
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	00 d0       	rcall	.+0      	; 0x628a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    628a:	1f 92       	push	r1
    628c:	1f 92       	push	r1
    628e:	cd b7       	in	r28, 0x3d	; 61
    6290:	de b7       	in	r29, 0x3e	; 62
    6292:	6c 01       	movw	r12, r24
    6294:	5b 01       	movw	r10, r22
    6296:	1a 01       	movw	r2, r20
    6298:	29 01       	movw	r4, r18
    629a:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    629c:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    62a0:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    62a4:	10 e0       	ldi	r17, 0x00	; 0
    62a6:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5589
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    62a8:	3b 01       	movw	r6, r22
    62aa:	62 0e       	add	r6, r18
    62ac:	73 1e       	adc	r7, r19
    62ae:	84 0f       	add	r24, r20
    62b0:	95 1f       	adc	r25, r21
    62b2:	9d 83       	std	Y+5, r25	; 0x05
    62b4:	8c 83       	std	Y+4, r24	; 0x04
    62b6:	93 01       	movw	r18, r6
    62b8:	20 1b       	sub	r18, r16
    62ba:	31 0b       	sbc	r19, r17
    62bc:	4c 81       	ldd	r20, Y+4	; 0x04
    62be:	5d 81       	ldd	r21, Y+5	; 0x05
    62c0:	40 1b       	sub	r20, r16
    62c2:	51 0b       	sbc	r21, r17
    62c4:	b5 01       	movw	r22, r10
    62c6:	60 0f       	add	r22, r16
    62c8:	71 1f       	adc	r23, r17
    62ca:	c6 01       	movw	r24, r12
    62cc:	80 0f       	add	r24, r16
    62ce:	91 1f       	adc	r25, r17
    62d0:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    62d4:	0f 5f       	subi	r16, 0xFF	; 255
    62d6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5588
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    62d8:	03 30       	cpi	r16, 0x03	; 3
    62da:	11 05       	cpc	r17, r1
    62dc:	61 f7       	brne	.-40     	; 0x62b6 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5590
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    62de:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5591
  str1[1] = 0;
    62e0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    62e2:	ce 01       	movw	r24, r28
    62e4:	01 96       	adiw	r24, 0x01	; 1
    62e6:	fc 01       	movw	r30, r24
    62e8:	01 90       	ld	r0, Z+
    62ea:	00 20       	and	r0, r0
    62ec:	e9 f7       	brne	.-6      	; 0x62e8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    62ee:	31 97       	sbiw	r30, 0x01	; 1
    62f0:	e8 1b       	sub	r30, r24
    62f2:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    62f4:	29 2d       	mov	r18, r9
    62f6:	22 0f       	add	r18, r18
    62f8:	29 0d       	add	r18, r9
    62fa:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    62fc:	a2 01       	movw	r20, r4
    62fe:	42 1b       	sub	r20, r18
    6300:	51 09       	sbc	r21, r1
    6302:	56 95       	lsr	r21
    6304:	47 95       	ror	r20
    6306:	56 95       	lsr	r21
    6308:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5596
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    630a:	4a 0d       	add	r20, r10
    630c:	5b 2d       	mov	r21, r11
    630e:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6310:	26 e0       	ldi	r18, 0x06	; 6
    6312:	e2 9f       	mul	r30, r18
    6314:	f0 01       	movw	r30, r0
    6316:	11 24       	eor	r1, r1
    6318:	9e 9e       	mul	r9, r30
    631a:	90 01       	movw	r18, r0
    631c:	9f 9e       	mul	r9, r31
    631e:	30 0d       	add	r19, r0
    6320:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5594
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    6322:	33 27       	eor	r19, r19
    6324:	b1 01       	movw	r22, r2
    6326:	62 1b       	sub	r22, r18
    6328:	73 0b       	sbc	r23, r19
    632a:	76 95       	lsr	r23
    632c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5596
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    632e:	6c 0d       	add	r22, r12
    6330:	7d 2d       	mov	r23, r13
    6332:	71 1d       	adc	r23, r1
    6334:	ee 24       	eor	r14, r14
    6336:	ea 94       	dec	r14
    6338:	fe 2c       	mov	r15, r14
    633a:	10 e0       	ldi	r17, 0x00	; 0
    633c:	00 e0       	ldi	r16, 0x00	; 0
    633e:	29 2d       	mov	r18, r9
    6340:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5597
}
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	0f 90       	pop	r0
    634a:	0f 90       	pop	r0
    634c:	0f 90       	pop	r0
    634e:	df 91       	pop	r29
    6350:	cf 91       	pop	r28
    6352:	1f 91       	pop	r17
    6354:	0f 91       	pop	r16
    6356:	ff 90       	pop	r15
    6358:	ef 90       	pop	r14
    635a:	df 90       	pop	r13
    635c:	cf 90       	pop	r12
    635e:	bf 90       	pop	r11
    6360:	af 90       	pop	r10
    6362:	9f 90       	pop	r9
    6364:	7f 90       	pop	r7
    6366:	6f 90       	pop	r6
    6368:	5f 90       	pop	r5
    636a:	4f 90       	pop	r4
    636c:	3f 90       	pop	r3
    636e:	2f 90       	pop	r2
    6370:	08 95       	ret

00006372 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5219
}


/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6372:	8f 92       	push	r8
    6374:	9f 92       	push	r9
    6376:	af 92       	push	r10
    6378:	bf 92       	push	r11
    637a:	cf 92       	push	r12
    637c:	df 92       	push	r13
    637e:	ef 92       	push	r14
    6380:	ff 92       	push	r15
    6382:	0f 93       	push	r16
    6384:	1f 93       	push	r17
    6386:	cf 93       	push	r28
    6388:	df 93       	push	r29
    638a:	cd b7       	in	r28, 0x3d	; 61
    638c:	de b7       	in	r29, 0x3e	; 62
    638e:	68 97       	sbiw	r28, 0x18	; 24
    6390:	0f b6       	in	r0, 0x3f	; 63
    6392:	f8 94       	cli
    6394:	de bf       	out	0x3e, r29	; 62
    6396:	0f be       	out	0x3f, r0	; 63
    6398:	cd bf       	out	0x3d, r28	; 61
    639a:	5c 01       	movw	r10, r24
    639c:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5222
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    639e:	62 e2       	ldi	r22, 0x22	; 34
    63a0:	7c e3       	ldi	r23, 0x3C	; 60
    63a2:	ce 01       	movw	r24, r28
    63a4:	01 96       	adiw	r24, 0x01	; 1
    63a6:	6c 01       	movw	r12, r24
    63a8:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5224
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    63ac:	a4 01       	movw	r20, r8
    63ae:	4b 5f       	subi	r20, 0xFB	; 251
    63b0:	5f 4f       	sbci	r21, 0xFF	; 255
    63b2:	b5 01       	movw	r22, r10
    63b4:	61 5b       	subi	r22, 0xB1	; 177
    63b6:	7f 4f       	sbci	r23, 0xFF	; 255
    63b8:	ee 24       	eor	r14, r14
    63ba:	ea 94       	dec	r14
    63bc:	fe 2c       	mov	r15, r14
    63be:	10 e0       	ldi	r17, 0x00	; 0
    63c0:	00 e0       	ldi	r16, 0x00	; 0
    63c2:	21 e0       	ldi	r18, 0x01	; 1
    63c4:	c6 01       	movw	r24, r12
    63c6:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    63ca:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5225
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    63ce:	80 fd       	sbrc	r24, 0
    63d0:	50 c0       	rjmp	.+160    	; 0x6472 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    63d2:	90 91 b5 10 	lds	r25, 0x10B5	; 0x8010b5 <now+0x4>
    63d6:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5227
  {
    if (uptime % 2 )
    63da:	20 91 3d 0b 	lds	r18, 0x0B3D	; 0x800b3d <uptime>
    63de:	20 ff       	sbrs	r18, 0
    63e0:	41 c0       	rjmp	.+130    	; 0x6464 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5228
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    63e2:	1f 92       	push	r1
    63e4:	9f 93       	push	r25
    63e6:	1f 92       	push	r1
    63e8:	8f 93       	push	r24
    63ea:	8e e1       	ldi	r24, 0x1E	; 30
    63ec:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5230
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    63ee:	9f 93       	push	r25
    63f0:	8f 93       	push	r24
    63f2:	df 92       	push	r13
    63f4:	cf 92       	push	r12
    63f6:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
    63fa:	0f b6       	in	r0, 0x3f	; 63
    63fc:	f8 94       	cli
    63fe:	de bf       	out	0x3e, r29	; 62
    6400:	0f be       	out	0x3f, r0	; 63
    6402:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6404:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    6408:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5237
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    640c:	a4 01       	movw	r20, r8
    640e:	4c 5e       	subi	r20, 0xEC	; 236
    6410:	5f 4f       	sbci	r21, 0xFF	; 255
    6412:	b5 01       	movw	r22, r10
    6414:	6c 5f       	subi	r22, 0xFC	; 252
    6416:	7f 4f       	sbci	r23, 0xFF	; 255
    6418:	ee 24       	eor	r14, r14
    641a:	ea 94       	dec	r14
    641c:	fe 2c       	mov	r15, r14
    641e:	10 e0       	ldi	r17, 0x00	; 0
    6420:	00 e0       	ldi	r16, 0x00	; 0
    6422:	28 e0       	ldi	r18, 0x08	; 8
    6424:	c6 01       	movw	r24, r12
    6426:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5238
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    642a:	94 01       	movw	r18, r8
    642c:	2c 5a       	subi	r18, 0xAC	; 172
    642e:	3f 4f       	sbci	r19, 0xFF	; 255
    6430:	a5 01       	movw	r20, r10
    6432:	4c 50       	subi	r20, 0x0C	; 12
    6434:	5f 4f       	sbci	r21, 0xFF	; 255
    6436:	b4 01       	movw	r22, r8
    6438:	c5 01       	movw	r24, r10
    643a:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5239
}
    643e:	68 96       	adiw	r28, 0x18	; 24
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
    644a:	df 91       	pop	r29
    644c:	cf 91       	pop	r28
    644e:	1f 91       	pop	r17
    6450:	0f 91       	pop	r16
    6452:	ff 90       	pop	r15
    6454:	ef 90       	pop	r14
    6456:	df 90       	pop	r13
    6458:	cf 90       	pop	r12
    645a:	bf 90       	pop	r11
    645c:	af 90       	pop	r10
    645e:	9f 90       	pop	r9
    6460:	8f 90       	pop	r8
    6462:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5230
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    6464:	1f 92       	push	r1
    6466:	9f 93       	push	r25
    6468:	1f 92       	push	r1
    646a:	8f 93       	push	r24
    646c:	88 e2       	ldi	r24, 0x28	; 40
    646e:	93 e0       	ldi	r25, 0x03	; 3
    6470:	be cf       	rjmp	.-132    	; 0x63ee <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5234
  }
  else
  {
    strcpy(str1, "--:--");
    6472:	62 e3       	ldi	r22, 0x32	; 50
    6474:	73 e0       	ldi	r23, 0x03	; 3
    6476:	c6 01       	movw	r24, r12
    6478:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
    647c:	c3 cf       	rjmp	.-122    	; 0x6404 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

0000647e <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5189
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    647e:	26 0f       	add	r18, r22
    6480:	37 1f       	adc	r19, r23
    6482:	48 0f       	add	r20, r24
    6484:	59 1f       	adc	r21, r25
    6486:	0c 94 88 8a 	jmp	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>

0000648a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5517
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    648a:	2f 92       	push	r2
    648c:	3f 92       	push	r3
    648e:	4f 92       	push	r4
    6490:	5f 92       	push	r5
    6492:	6f 92       	push	r6
    6494:	7f 92       	push	r7
    6496:	8f 92       	push	r8
    6498:	9f 92       	push	r9
    649a:	af 92       	push	r10
    649c:	bf 92       	push	r11
    649e:	cf 92       	push	r12
    64a0:	df 92       	push	r13
    64a2:	ef 92       	push	r14
    64a4:	ff 92       	push	r15
    64a6:	0f 93       	push	r16
    64a8:	1f 93       	push	r17
    64aa:	cf 93       	push	r28
    64ac:	df 93       	push	r29
    64ae:	00 d0       	rcall	.+0      	; 0x64b0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    64b0:	1f 92       	push	r1
    64b2:	cd b7       	in	r28, 0x3d	; 61
    64b4:	de b7       	in	r29, 0x3e	; 62
    64b6:	2c 01       	movw	r4, r24
    64b8:	3b 01       	movw	r6, r22
    64ba:	0a 83       	std	Y+2, r16	; 0x02
    64bc:	eb 82       	std	Y+3, r14	; 0x03
    64be:	3a 2c       	mov	r3, r10
    64c0:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5530
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    64c2:	31 e0       	ldi	r19, 0x01	; 1
    64c4:	83 12       	cpse	r8, r19
    64c6:	02 c0       	rjmp	.+4      	; 0x64cc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5531
    back_color = color_active;
    64c8:	3c 2c       	mov	r3, r12
    64ca:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    64cc:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    64d0:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    64d4:	10 e0       	ldi	r17, 0x00	; 0
    64d6:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5534
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    64d8:	a2 2e       	mov	r10, r18
    64da:	b1 2c       	mov	r11, r1
    64dc:	84 2e       	mov	r8, r20
    64de:	91 2c       	mov	r9, r1
    64e0:	65 01       	movw	r12, r10
    64e2:	c6 0c       	add	r12, r6
    64e4:	d7 1c       	adc	r13, r7
    64e6:	74 01       	movw	r14, r8
    64e8:	e4 0c       	add	r14, r4
    64ea:	f5 1c       	adc	r15, r5
    64ec:	96 01       	movw	r18, r12
    64ee:	20 1b       	sub	r18, r16
    64f0:	31 0b       	sbc	r19, r17
    64f2:	a7 01       	movw	r20, r14
    64f4:	40 1b       	sub	r20, r16
    64f6:	51 0b       	sbc	r21, r17
    64f8:	b3 01       	movw	r22, r6
    64fa:	60 0f       	add	r22, r16
    64fc:	71 1f       	adc	r23, r17
    64fe:	c2 01       	movw	r24, r4
    6500:	80 0f       	add	r24, r16
    6502:	91 1f       	adc	r25, r17
    6504:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6508:	0f 5f       	subi	r16, 0xFF	; 255
    650a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5533
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    650c:	03 30       	cpi	r16, 0x03	; 3
    650e:	11 05       	cpc	r17, r1
    6510:	69 f7       	brne	.-38     	; 0x64ec <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6512:	30 92 2b 0e 	sts	0x0E2B, r3	; 0x800e2b <my_lcd+0xa>
    6516:	20 92 2c 0e 	sts	0x0E2C, r2	; 0x800e2c <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    651a:	93 01       	movw	r18, r6
    651c:	23 50       	subi	r18, 0x03	; 3
    651e:	31 09       	sbc	r19, r1
    6520:	2a 0d       	add	r18, r10
    6522:	3b 1d       	adc	r19, r11
    6524:	a2 01       	movw	r20, r4
    6526:	43 50       	subi	r20, 0x03	; 3
    6528:	51 09       	sbc	r21, r1
    652a:	48 0d       	add	r20, r8
    652c:	59 1d       	adc	r21, r9
    652e:	b3 01       	movw	r22, r6
    6530:	6d 5f       	subi	r22, 0xFD	; 253
    6532:	7f 4f       	sbci	r23, 0xFF	; 255
    6534:	c2 01       	movw	r24, r4
    6536:	03 96       	adiw	r24, 0x03	; 3
    6538:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5537
  if (strlen(line1) > 0)
    653c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    653e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6540:	80 81       	ld	r24, Z
    6542:	88 23       	and	r24, r24
    6544:	09 f4       	brne	.+2      	; 0x6548 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbe>
    6546:	a1 c0       	rjmp	.+322    	; 0x668a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5539
  {
    prvni = 1;
    6548:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5540
    num_lines_const = 2;
    654a:	f2 e0       	ldi	r31, 0x02	; 2
    654c:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
  }
  if (strlen(line2) > 0)
    654e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    6550:	fd 8d       	ldd	r31, Y+29	; 0x1d
    6552:	90 81       	ld	r25, Z
    6554:	99 23       	and	r25, r25
    6556:	09 f4       	brne	.+2      	; 0x655a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd0>
    6558:	9b c0       	rjmp	.+310    	; 0x6690 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5545
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    655a:	f9 81       	ldd	r31, Y+1	; 0x01
    655c:	fe 5f       	subi	r31, 0xFE	; 254
    655e:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5544
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    6560:	21 e0       	ldi	r18, 0x01	; 1
    6562:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5521
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    6564:	d1 2c       	mov	r13, r1
    6566:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5547
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    6568:	81 30       	cpi	r24, 0x01	; 1
    656a:	d1 f5       	brne	.+116    	; 0x65e0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x156>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5549
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    656c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    656e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6570:	01 90       	ld	r0, Z+
    6572:	00 20       	and	r0, r0
    6574:	e9 f7       	brne	.-6      	; 0x6570 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    6576:	9f 01       	movw	r18, r30
    6578:	21 50       	subi	r18, 0x01	; 1
    657a:	31 09       	sbc	r19, r1
    657c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    657e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6580:	24 1b       	sub	r18, r20
    6582:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    6584:	8a 81       	ldd	r24, Y+2	; 0x02
    6586:	88 0f       	add	r24, r24
    6588:	5a 81       	ldd	r21, Y+2	; 0x02
    658a:	85 0f       	add	r24, r21
    658c:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5551
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    658e:	f5 01       	movw	r30, r10
    6590:	e8 1b       	sub	r30, r24
    6592:	f1 09       	sbc	r31, r1
    6594:	cf 01       	movw	r24, r30
    6596:	f9 81       	ldd	r31, Y+1	; 0x01
    6598:	6f 2f       	mov	r22, r31
    659a:	70 e0       	ldi	r23, 0x00	; 0
    659c:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
    65a0:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5552
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    65a2:	a3 01       	movw	r20, r6
    65a4:	41 50       	subi	r20, 0x01	; 1
    65a6:	51 09       	sbc	r21, r1
    65a8:	46 0f       	add	r20, r22
    65aa:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    65ac:	66 e0       	ldi	r22, 0x06	; 6
    65ae:	26 9f       	mul	r18, r22
    65b0:	90 01       	movw	r18, r0
    65b2:	11 24       	eor	r1, r1
    65b4:	ea 81       	ldd	r30, Y+2	; 0x02
    65b6:	e2 9f       	mul	r30, r18
    65b8:	c0 01       	movw	r24, r0
    65ba:	e3 9f       	mul	r30, r19
    65bc:	90 0d       	add	r25, r0
    65be:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5550
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    65c0:	b4 01       	movw	r22, r8
    65c2:	68 1b       	sub	r22, r24
    65c4:	79 0b       	sbc	r23, r25
    65c6:	76 95       	lsr	r23
    65c8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5552
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    65ca:	64 0d       	add	r22, r4
    65cc:	75 1d       	adc	r23, r5
    65ce:	e3 2c       	mov	r14, r3
    65d0:	f2 2c       	mov	r15, r2
    65d2:	10 e0       	ldi	r17, 0x00	; 0
    65d4:	00 e0       	ldi	r16, 0x00	; 0
    65d6:	2e 2f       	mov	r18, r30
    65d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    65da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    65dc:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5554
  }
  if (druhy == 1)
    65e0:	fc 81       	ldd	r31, Y+4	; 0x04
    65e2:	f1 30       	cpi	r31, 0x01	; 1
    65e4:	d9 f5       	brne	.+118    	; 0x665c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5556
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    65e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    65e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    65ea:	01 90       	ld	r0, Z+
    65ec:	00 20       	and	r0, r0
    65ee:	e9 f7       	brne	.-6      	; 0x65ea <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x160>
    65f0:	31 97       	sbiw	r30, 0x01	; 1
    65f2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    65f4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    65f6:	e2 1b       	sub	r30, r18
    65f8:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    65fa:	8b 81       	ldd	r24, Y+3	; 0x03
    65fc:	88 0f       	add	r24, r24
    65fe:	3b 81       	ldd	r19, Y+3	; 0x03
    6600:	83 0f       	add	r24, r19
    6602:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5558
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    6604:	a5 01       	movw	r20, r10
    6606:	48 1b       	sub	r20, r24
    6608:	51 09       	sbc	r21, r1
    660a:	ca 01       	movw	r24, r20
    660c:	88 0f       	add	r24, r24
    660e:	99 1f       	adc	r25, r25
    6610:	59 81       	ldd	r21, Y+1	; 0x01
    6612:	65 2f       	mov	r22, r21
    6614:	70 e0       	ldi	r23, 0x00	; 0
    6616:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	68 1a       	sub	r6, r24
    661e:	71 08       	sbc	r7, r1
    6620:	66 0e       	add	r6, r22
    6622:	77 1e       	adc	r7, r23
    6624:	a3 01       	movw	r20, r6
    6626:	4c 0d       	add	r20, r12
    6628:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    662a:	96 e0       	ldi	r25, 0x06	; 6
    662c:	e9 9f       	mul	r30, r25
    662e:	f0 01       	movw	r30, r0
    6630:	11 24       	eor	r1, r1
    6632:	3e 9f       	mul	r19, r30
    6634:	c0 01       	movw	r24, r0
    6636:	3f 9f       	mul	r19, r31
    6638:	90 0d       	add	r25, r0
    663a:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5557
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    663c:	b4 01       	movw	r22, r8
    663e:	68 1b       	sub	r22, r24
    6640:	79 0b       	sbc	r23, r25
    6642:	76 95       	lsr	r23
    6644:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    6646:	64 0d       	add	r22, r4
    6648:	75 1d       	adc	r23, r5
    664a:	e3 2c       	mov	r14, r3
    664c:	f2 2c       	mov	r15, r2
    664e:	10 e0       	ldi	r17, 0x00	; 0
    6650:	00 e0       	ldi	r16, 0x00	; 0
    6652:	23 2f       	mov	r18, r19
    6654:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6656:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6658:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5561
  }
}
    665c:	0f 90       	pop	r0
    665e:	0f 90       	pop	r0
    6660:	0f 90       	pop	r0
    6662:	0f 90       	pop	r0
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	ff 90       	pop	r15
    666e:	ef 90       	pop	r14
    6670:	df 90       	pop	r13
    6672:	cf 90       	pop	r12
    6674:	bf 90       	pop	r11
    6676:	af 90       	pop	r10
    6678:	9f 90       	pop	r9
    667a:	8f 90       	pop	r8
    667c:	7f 90       	pop	r7
    667e:	6f 90       	pop	r6
    6680:	5f 90       	pop	r5
    6682:	4f 90       	pop	r4
    6684:	3f 90       	pop	r3
    6686:	2f 90       	pop	r2
    6688:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5527
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    668a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5526
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    668c:	19 82       	std	Y+1, r1	; 0x01
    668e:	5f cf       	rjmp	.-322    	; 0x654e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5528
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    6690:	1c 82       	std	Y+4, r1	; 0x04
    6692:	68 cf       	rjmp	.-304    	; 0x6564 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xda>

00006694 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5481
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    6694:	2f 92       	push	r2
    6696:	3f 92       	push	r3
    6698:	4f 92       	push	r4
    669a:	5f 92       	push	r5
    669c:	6f 92       	push	r6
    669e:	7f 92       	push	r7
    66a0:	8f 92       	push	r8
    66a2:	9f 92       	push	r9
    66a4:	af 92       	push	r10
    66a6:	bf 92       	push	r11
    66a8:	cf 92       	push	r12
    66aa:	df 92       	push	r13
    66ac:	ef 92       	push	r14
    66ae:	ff 92       	push	r15
    66b0:	0f 93       	push	r16
    66b2:	1f 93       	push	r17
    66b4:	cf 93       	push	r28
    66b6:	df 93       	push	r29
    66b8:	00 d0       	rcall	.+0      	; 0x66ba <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    66ba:	1f 92       	push	r1
    66bc:	1f 92       	push	r1
    66be:	cd b7       	in	r28, 0x3d	; 61
    66c0:	de b7       	in	r29, 0x3e	; 62
    66c2:	2c 01       	movw	r4, r24
    66c4:	3b 01       	movw	r6, r22
    66c6:	5a 83       	std	Y+2, r21	; 0x02
    66c8:	49 83       	std	Y+1, r20	; 0x01
    66ca:	19 01       	movw	r2, r18
    66cc:	90 2e       	mov	r9, r16
    66ce:	eb 82       	std	Y+3, r14	; 0x03
    66d0:	dd 82       	std	Y+5, r13	; 0x05
    66d2:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    66d4:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    66d8:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    66dc:	10 e0       	ldi	r17, 0x00	; 0
    66de:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5491
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    66e0:	6b 01       	movw	r12, r22
    66e2:	c2 0e       	add	r12, r18
    66e4:	d3 1e       	adc	r13, r19
    66e6:	7a 01       	movw	r14, r20
    66e8:	e8 0e       	add	r14, r24
    66ea:	f9 1e       	adc	r15, r25
    66ec:	96 01       	movw	r18, r12
    66ee:	20 1b       	sub	r18, r16
    66f0:	31 0b       	sbc	r19, r17
    66f2:	a7 01       	movw	r20, r14
    66f4:	40 1b       	sub	r20, r16
    66f6:	51 0b       	sbc	r21, r17
    66f8:	b8 01       	movw	r22, r16
    66fa:	66 0d       	add	r22, r6
    66fc:	77 1d       	adc	r23, r7
    66fe:	c8 01       	movw	r24, r16
    6700:	84 0d       	add	r24, r4
    6702:	95 1d       	adc	r25, r5
    6704:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6708:	0f 5f       	subi	r16, 0xFF	; 255
    670a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5490
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    670c:	03 30       	cpi	r16, 0x03	; 3
    670e:	11 05       	cpc	r17, r1
    6710:	69 f7       	brne	.-38     	; 0x66ec <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    6712:	91 01       	movw	r18, r2
    6714:	23 50       	subi	r18, 0x03	; 3
    6716:	31 09       	sbc	r19, r1
    6718:	49 81       	ldd	r20, Y+1	; 0x01
    671a:	5a 81       	ldd	r21, Y+2	; 0x02
    671c:	43 50       	subi	r20, 0x03	; 3
    671e:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5492
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    6720:	61 e0       	ldi	r22, 0x01	; 1
    6722:	86 12       	cpse	r8, r22
    6724:	11 c0       	rjmp	.+34     	; 0x6748 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6726:	8f ef       	ldi	r24, 0xFF	; 255
    6728:	9f ef       	ldi	r25, 0xFF	; 255
    672a:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    672e:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5495
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    6732:	26 0d       	add	r18, r6
    6734:	37 1d       	adc	r19, r7
    6736:	44 0d       	add	r20, r4
    6738:	55 1d       	adc	r21, r5
    673a:	b3 01       	movw	r22, r6
    673c:	6d 5f       	subi	r22, 0xFD	; 253
    673e:	7f 4f       	sbci	r23, 0xFF	; 255
    6740:	c2 01       	movw	r24, r4
    6742:	03 96       	adiw	r24, 0x03	; 3
    6744:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5497
  }
  if (strlen(line1) > 0)
    6748:	ec 81       	ldd	r30, Y+4	; 0x04
    674a:	fd 81       	ldd	r31, Y+5	; 0x05
    674c:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5488
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    674e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5483
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    6750:	d1 2c       	mov	r13, r1
    6752:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5497
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    6754:	88 23       	and	r24, r24
    6756:	91 f1       	breq	.+100    	; 0x67bc <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5500
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    6758:	01 90       	ld	r0, Z+
    675a:	00 20       	and	r0, r0
    675c:	e9 f7       	brne	.-6      	; 0x6758 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    675e:	31 97       	sbiw	r30, 0x01	; 1
    6760:	4c 81       	ldd	r20, Y+4	; 0x04
    6762:	5d 81       	ldd	r21, Y+5	; 0x05
    6764:	e4 1b       	sub	r30, r20
    6766:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    6768:	89 2d       	mov	r24, r9
    676a:	88 0f       	add	r24, r24
    676c:	89 0d       	add	r24, r9
    676e:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    6770:	61 01       	movw	r12, r2
    6772:	c8 1a       	sub	r12, r24
    6774:	d1 08       	sbc	r13, r1
    6776:	d6 94       	lsr	r13
    6778:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    677a:	a3 01       	movw	r20, r6
    677c:	41 50       	subi	r20, 0x01	; 1
    677e:	51 09       	sbc	r21, r1
    6780:	4c 0d       	add	r20, r12
    6782:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6784:	66 e0       	ldi	r22, 0x06	; 6
    6786:	e6 9f       	mul	r30, r22
    6788:	f0 01       	movw	r30, r0
    678a:	11 24       	eor	r1, r1
    678c:	9e 9e       	mul	r9, r30
    678e:	c0 01       	movw	r24, r0
    6790:	9f 9e       	mul	r9, r31
    6792:	90 0d       	add	r25, r0
    6794:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5501
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    6796:	69 81       	ldd	r22, Y+1	; 0x01
    6798:	7a 81       	ldd	r23, Y+2	; 0x02
    679a:	68 1b       	sub	r22, r24
    679c:	79 0b       	sbc	r23, r25
    679e:	76 95       	lsr	r23
    67a0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    67a2:	64 0d       	add	r22, r4
    67a4:	75 1d       	adc	r23, r5
    67a6:	ee 24       	eor	r14, r14
    67a8:	ea 94       	dec	r14
    67aa:	fe 2c       	mov	r15, r14
    67ac:	10 e0       	ldi	r17, 0x00	; 0
    67ae:	00 e0       	ldi	r16, 0x00	; 0
    67b0:	29 2d       	mov	r18, r9
    67b2:	8c 81       	ldd	r24, Y+4	; 0x04
    67b4:	9d 81       	ldd	r25, Y+5	; 0x05
    67b6:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5499
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    67ba:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5505
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    67bc:	f5 01       	movw	r30, r10
    67be:	80 81       	ld	r24, Z
    67c0:	88 23       	and	r24, r24
    67c2:	b9 f1       	breq	.+110    	; 0x6832 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5508
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    67c4:	01 90       	ld	r0, Z+
    67c6:	00 20       	and	r0, r0
    67c8:	e9 f7       	brne	.-6      	; 0x67c4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    67ca:	9f 01       	movw	r18, r30
    67cc:	21 50       	subi	r18, 0x01	; 1
    67ce:	31 09       	sbc	r19, r1
    67d0:	2a 19       	sub	r18, r10
    67d2:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    67d4:	8b 81       	ldd	r24, Y+3	; 0x03
    67d6:	88 0f       	add	r24, r24
    67d8:	fb 81       	ldd	r31, Y+3	; 0x03
    67da:	8f 0f       	add	r24, r31
    67dc:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5510
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    67de:	a1 01       	movw	r20, r2
    67e0:	48 1b       	sub	r20, r24
    67e2:	51 09       	sbc	r21, r1
    67e4:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5507
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    67e6:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5510
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    67e8:	70 e0       	ldi	r23, 0x00	; 0
    67ea:	0e 94 0c bb 	call	0x17618	; 0x17618 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5511
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    67ee:	51 e0       	ldi	r21, 0x01	; 1
    67f0:	65 1a       	sub	r6, r21
    67f2:	71 08       	sbc	r7, r1
    67f4:	c6 0c       	add	r12, r6
    67f6:	d7 1c       	adc	r13, r7
    67f8:	ab 01       	movw	r20, r22
    67fa:	4c 0d       	add	r20, r12
    67fc:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    67fe:	66 e0       	ldi	r22, 0x06	; 6
    6800:	26 9f       	mul	r18, r22
    6802:	90 01       	movw	r18, r0
    6804:	11 24       	eor	r1, r1
    6806:	f2 9f       	mul	r31, r18
    6808:	c0 01       	movw	r24, r0
    680a:	f3 9f       	mul	r31, r19
    680c:	90 0d       	add	r25, r0
    680e:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5509
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    6810:	69 81       	ldd	r22, Y+1	; 0x01
    6812:	7a 81       	ldd	r23, Y+2	; 0x02
    6814:	68 1b       	sub	r22, r24
    6816:	79 0b       	sbc	r23, r25
    6818:	76 95       	lsr	r23
    681a:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5511
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    681c:	64 0d       	add	r22, r4
    681e:	75 1d       	adc	r23, r5
    6820:	ee 24       	eor	r14, r14
    6822:	ea 94       	dec	r14
    6824:	fe 2c       	mov	r15, r14
    6826:	10 e0       	ldi	r17, 0x00	; 0
    6828:	00 e0       	ldi	r16, 0x00	; 0
    682a:	2f 2f       	mov	r18, r31
    682c:	c5 01       	movw	r24, r10
    682e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5513
  }
}
    6832:	0f 90       	pop	r0
    6834:	0f 90       	pop	r0
    6836:	0f 90       	pop	r0
    6838:	0f 90       	pop	r0
    683a:	0f 90       	pop	r0
    683c:	df 91       	pop	r29
    683e:	cf 91       	pop	r28
    6840:	1f 91       	pop	r17
    6842:	0f 91       	pop	r16
    6844:	ff 90       	pop	r15
    6846:	ef 90       	pop	r14
    6848:	df 90       	pop	r13
    684a:	cf 90       	pop	r12
    684c:	bf 90       	pop	r11
    684e:	af 90       	pop	r10
    6850:	9f 90       	pop	r9
    6852:	8f 90       	pop	r8
    6854:	7f 90       	pop	r7
    6856:	6f 90       	pop	r6
    6858:	5f 90       	pop	r5
    685a:	4f 90       	pop	r4
    685c:	3f 90       	pop	r3
    685e:	2f 90       	pop	r2
    6860:	08 95       	ret

00006862 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5432
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6862:	4f 92       	push	r4
    6864:	5f 92       	push	r5
    6866:	6f 92       	push	r6
    6868:	7f 92       	push	r7
    686a:	8f 92       	push	r8
    686c:	9f 92       	push	r9
    686e:	af 92       	push	r10
    6870:	bf 92       	push	r11
    6872:	cf 92       	push	r12
    6874:	df 92       	push	r13
    6876:	ef 92       	push	r14
    6878:	ff 92       	push	r15
    687a:	0f 93       	push	r16
    687c:	cf 93       	push	r28
    687e:	df 93       	push	r29
    6880:	ec 01       	movw	r28, r24
    6882:	6b 01       	movw	r12, r22
    6884:	2a 01       	movw	r4, r20
    6886:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6888:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    688c:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    6890:	f1 2c       	mov	r15, r1
    6892:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5436
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6894:	3b 01       	movw	r6, r22
    6896:	62 0e       	add	r6, r18
    6898:	73 1e       	adc	r7, r19
    689a:	4c 01       	movw	r8, r24
    689c:	84 0e       	add	r8, r20
    689e:	95 1e       	adc	r9, r21
    68a0:	93 01       	movw	r18, r6
    68a2:	2e 19       	sub	r18, r14
    68a4:	3f 09       	sbc	r19, r15
    68a6:	a4 01       	movw	r20, r8
    68a8:	4e 19       	sub	r20, r14
    68aa:	5f 09       	sbc	r21, r15
    68ac:	b7 01       	movw	r22, r14
    68ae:	6c 0d       	add	r22, r12
    68b0:	7d 1d       	adc	r23, r13
    68b2:	c7 01       	movw	r24, r14
    68b4:	8c 0f       	add	r24, r28
    68b6:	9d 1f       	adc	r25, r29
    68b8:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    68bc:	8f ef       	ldi	r24, 0xFF	; 255
    68be:	e8 1a       	sub	r14, r24
    68c0:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5435
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    68c2:	83 e0       	ldi	r24, 0x03	; 3
    68c4:	e8 16       	cp	r14, r24
    68c6:	f1 04       	cpc	r15, r1
    68c8:	59 f7       	brne	.-42     	; 0x68a0 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    68ca:	8f ef       	ldi	r24, 0xFF	; 255
    68cc:	9f ef       	ldi	r25, 0xFF	; 255
    68ce:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    68d2:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5438
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    68d6:	83 e0       	ldi	r24, 0x03	; 3
    68d8:	48 1a       	sub	r4, r24
    68da:	51 08       	sbc	r5, r1
    68dc:	4c 0e       	add	r4, r28
    68de:	5d 1e       	adc	r5, r29
    68e0:	23 96       	adiw	r28, 0x03	; 3
    68e2:	95 01       	movw	r18, r10
    68e4:	23 50       	subi	r18, 0x03	; 3
    68e6:	31 09       	sbc	r19, r1
    68e8:	2c 0d       	add	r18, r12
    68ea:	3d 1d       	adc	r19, r13
    68ec:	b6 01       	movw	r22, r12
    68ee:	6d 5f       	subi	r22, 0xFD	; 253
    68f0:	7f 4f       	sbci	r23, 0xFF	; 255
    68f2:	a2 01       	movw	r20, r4
    68f4:	ce 01       	movw	r24, r28
    68f6:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5439
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    68fa:	60 91 04 09 	lds	r22, 0x0904	; 0x800904 <menu_slider_data_max>
    68fe:	80 91 02 09 	lds	r24, 0x0902	; 0x800902 <menu_slider_data_max_element>
    6902:	68 1b       	sub	r22, r24
    6904:	77 0b       	sbc	r23, r23
    6906:	6f 5f       	subi	r22, 0xFF	; 255
    6908:	7f 4f       	sbci	r23, 0xFF	; 255
    690a:	c5 01       	movw	r24, r10
    690c:	0e 94 0c bb 	call	0x17618	; 0x17618 <__udivmodhi4>
    6910:	e0 2f       	mov	r30, r16
    6912:	f0 e0       	ldi	r31, 0x00	; 0
    6914:	e3 50       	subi	r30, 0x03	; 3
    6916:	f7 4f       	sbci	r31, 0xF7	; 247
    6918:	80 81       	ld	r24, Z
    691a:	86 9f       	mul	r24, r22
    691c:	60 2d       	mov	r22, r0
    691e:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6920:	8a e9       	ldi	r24, 0x9A	; 154
    6922:	96 ed       	ldi	r25, 0xD6	; 214
    6924:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    6928:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5441
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    692c:	6c 0d       	add	r22, r12
    692e:	7d 2d       	mov	r23, r13
    6930:	71 1d       	adc	r23, r1
    6932:	9b 01       	movw	r18, r22
    6934:	26 5f       	subi	r18, 0xF6	; 246
    6936:	3f 4f       	sbci	r19, 0xFF	; 255
    6938:	6b 5f       	subi	r22, 0xFB	; 251
    693a:	7f 4f       	sbci	r23, 0xFF	; 255
    693c:	a2 01       	movw	r20, r4
    693e:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5442
}
    6940:	df 91       	pop	r29
    6942:	cf 91       	pop	r28
    6944:	0f 91       	pop	r16
    6946:	ff 90       	pop	r15
    6948:	ef 90       	pop	r14
    694a:	df 90       	pop	r13
    694c:	cf 90       	pop	r12
    694e:	bf 90       	pop	r11
    6950:	af 90       	pop	r10
    6952:	9f 90       	pop	r9
    6954:	8f 90       	pop	r8
    6956:	7f 90       	pop	r7
    6958:	6f 90       	pop	r6
    695a:	5f 90       	pop	r5
    695c:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5441
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    695e:	0c 94 e1 8a 	jmp	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>

00006962 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5411
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6962:	6f 92       	push	r6
    6964:	7f 92       	push	r7
    6966:	8f 92       	push	r8
    6968:	9f 92       	push	r9
    696a:	af 92       	push	r10
    696c:	bf 92       	push	r11
    696e:	cf 92       	push	r12
    6970:	df 92       	push	r13
    6972:	ef 92       	push	r14
    6974:	ff 92       	push	r15
    6976:	0f 93       	push	r16
    6978:	1f 93       	push	r17
    697a:	cf 93       	push	r28
    697c:	df 93       	push	r29
    697e:	6c 01       	movw	r12, r24
    6980:	8b 01       	movw	r16, r22
    6982:	3a 01       	movw	r6, r20
    6984:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6986:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    698a:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    698e:	f1 2c       	mov	r15, r1
    6990:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5415
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6992:	4b 01       	movw	r8, r22
    6994:	82 0e       	add	r8, r18
    6996:	93 1e       	adc	r9, r19
    6998:	5c 01       	movw	r10, r24
    699a:	a4 0e       	add	r10, r20
    699c:	b5 1e       	adc	r11, r21
    699e:	94 01       	movw	r18, r8
    69a0:	2e 19       	sub	r18, r14
    69a2:	3f 09       	sbc	r19, r15
    69a4:	a5 01       	movw	r20, r10
    69a6:	4e 19       	sub	r20, r14
    69a8:	5f 09       	sbc	r21, r15
    69aa:	b7 01       	movw	r22, r14
    69ac:	60 0f       	add	r22, r16
    69ae:	71 1f       	adc	r23, r17
    69b0:	c7 01       	movw	r24, r14
    69b2:	8c 0d       	add	r24, r12
    69b4:	9d 1d       	adc	r25, r13
    69b6:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    69ba:	2f ef       	ldi	r18, 0xFF	; 255
    69bc:	e2 1a       	sub	r14, r18
    69be:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5414
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    69c0:	83 e0       	ldi	r24, 0x03	; 3
    69c2:	e8 16       	cp	r14, r24
    69c4:	f1 04       	cpc	r15, r1
    69c6:	59 f7       	brne	.-42     	; 0x699e <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    69c8:	8f ef       	ldi	r24, 0xFF	; 255
    69ca:	9f ef       	ldi	r25, 0xFF	; 255
    69cc:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    69d0:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5417
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    69d4:	9e 01       	movw	r18, r28
    69d6:	23 50       	subi	r18, 0x03	; 3
    69d8:	31 09       	sbc	r19, r1
    69da:	20 0f       	add	r18, r16
    69dc:	31 1f       	adc	r19, r17
    69de:	a3 01       	movw	r20, r6
    69e0:	43 50       	subi	r20, 0x03	; 3
    69e2:	51 09       	sbc	r21, r1
    69e4:	4c 0d       	add	r20, r12
    69e6:	5d 1d       	adc	r21, r13
    69e8:	b8 01       	movw	r22, r16
    69ea:	6d 5f       	subi	r22, 0xFD	; 253
    69ec:	7f 4f       	sbci	r23, 0xFF	; 255
    69ee:	c6 01       	movw	r24, r12
    69f0:	03 96       	adiw	r24, 0x03	; 3
    69f2:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    69f6:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    69fa:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5420

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    69fe:	89 e3       	ldi	r24, 0x39	; 57
    6a00:	99 e0       	ldi	r25, 0x09	; 9
    6a02:	fc 01       	movw	r30, r24
    6a04:	01 90       	ld	r0, Z+
    6a06:	00 20       	and	r0, r0
    6a08:	e9 f7       	brne	.-6      	; 0x6a04 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    6a0a:	cf 01       	movw	r24, r30
    6a0c:	8a 53       	subi	r24, 0x3A	; 58
    6a0e:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5422
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    6a10:	ae 01       	movw	r20, r28
    6a12:	4c 50       	subi	r20, 0x0C	; 12
    6a14:	51 09       	sbc	r21, r1
    6a16:	56 95       	lsr	r21
    6a18:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6a1a:	01 50       	subi	r16, 0x01	; 1
    6a1c:	11 09       	sbc	r17, r1
    6a1e:	40 0f       	add	r20, r16
    6a20:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6a22:	f6 e0       	ldi	r31, 0x06	; 6
    6a24:	8f 9f       	mul	r24, r31
    6a26:	c0 01       	movw	r24, r0
    6a28:	11 24       	eor	r1, r1
    6a2a:	88 0f       	add	r24, r24
    6a2c:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5421
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    6a2e:	b3 01       	movw	r22, r6
    6a30:	68 1b       	sub	r22, r24
    6a32:	79 0b       	sbc	r23, r25
    6a34:	76 95       	lsr	r23
    6a36:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6a38:	6c 0d       	add	r22, r12
    6a3a:	7d 1d       	adc	r23, r13
    6a3c:	ee 24       	eor	r14, r14
    6a3e:	ea 94       	dec	r14
    6a40:	fe 2c       	mov	r15, r14
    6a42:	10 e0       	ldi	r17, 0x00	; 0
    6a44:	00 e0       	ldi	r16, 0x00	; 0
    6a46:	22 e0       	ldi	r18, 0x02	; 2
    6a48:	89 e3       	ldi	r24, 0x39	; 57
    6a4a:	99 e0       	ldi	r25, 0x09	; 9
    6a4c:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5424
}
    6a50:	df 91       	pop	r29
    6a52:	cf 91       	pop	r28
    6a54:	1f 91       	pop	r17
    6a56:	0f 91       	pop	r16
    6a58:	ff 90       	pop	r15
    6a5a:	ef 90       	pop	r14
    6a5c:	df 90       	pop	r13
    6a5e:	cf 90       	pop	r12
    6a60:	bf 90       	pop	r11
    6a62:	af 90       	pop	r10
    6a64:	9f 90       	pop	r9
    6a66:	8f 90       	pop	r8
    6a68:	7f 90       	pop	r7
    6a6a:	6f 90       	pop	r6
    6a6c:	08 95       	ret

00006a6e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5385
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t idx, uint8_t args2)
{
    6a6e:	3f 92       	push	r3
    6a70:	4f 92       	push	r4
    6a72:	5f 92       	push	r5
    6a74:	6f 92       	push	r6
    6a76:	7f 92       	push	r7
    6a78:	8f 92       	push	r8
    6a7a:	9f 92       	push	r9
    6a7c:	af 92       	push	r10
    6a7e:	bf 92       	push	r11
    6a80:	cf 92       	push	r12
    6a82:	df 92       	push	r13
    6a84:	ef 92       	push	r14
    6a86:	ff 92       	push	r15
    6a88:	0f 93       	push	r16
    6a8a:	1f 93       	push	r17
    6a8c:	cf 93       	push	r28
    6a8e:	df 93       	push	r29
    6a90:	00 d0       	rcall	.+0      	; 0x6a92 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x24>
    6a92:	00 d0       	rcall	.+0      	; 0x6a94 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x26>
    6a94:	00 d0       	rcall	.+0      	; 0x6a96 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x28>
    6a96:	cd b7       	in	r28, 0x3d	; 61
    6a98:	de b7       	in	r29, 0x3e	; 62
    6a9a:	6c 01       	movw	r12, r24
    6a9c:	7b 01       	movw	r14, r22
    6a9e:	2a 01       	movw	r4, r20
    6aa0:	39 01       	movw	r6, r18
    6aa2:	30 2e       	mov	r3, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6aa4:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    6aa8:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    6aac:	10 e0       	ldi	r17, 0x00	; 0
    6aae:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5392
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6ab0:	4b 01       	movw	r8, r22
    6ab2:	82 0e       	add	r8, r18
    6ab4:	93 1e       	adc	r9, r19
    6ab6:	5c 01       	movw	r10, r24
    6ab8:	a4 0e       	add	r10, r20
    6aba:	b5 1e       	adc	r11, r21
    6abc:	94 01       	movw	r18, r8
    6abe:	20 1b       	sub	r18, r16
    6ac0:	31 0b       	sbc	r19, r17
    6ac2:	a5 01       	movw	r20, r10
    6ac4:	40 1b       	sub	r20, r16
    6ac6:	51 0b       	sbc	r21, r17
    6ac8:	b8 01       	movw	r22, r16
    6aca:	6e 0d       	add	r22, r14
    6acc:	7f 1d       	adc	r23, r15
    6ace:	c8 01       	movw	r24, r16
    6ad0:	8c 0d       	add	r24, r12
    6ad2:	9d 1d       	adc	r25, r13
    6ad4:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6ad8:	0f 5f       	subi	r16, 0xFF	; 255
    6ada:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5391
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6adc:	03 30       	cpi	r16, 0x03	; 3
    6ade:	11 05       	cpc	r17, r1
    6ae0:	69 f7       	brne	.-38     	; 0x6abc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6ae2:	8f ef       	ldi	r24, 0xFF	; 255
    6ae4:	9f ef       	ldi	r25, 0xFF	; 255
    6ae6:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    6aea:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5394
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    6aee:	93 01       	movw	r18, r6
    6af0:	23 50       	subi	r18, 0x03	; 3
    6af2:	31 09       	sbc	r19, r1
    6af4:	2e 0d       	add	r18, r14
    6af6:	3f 1d       	adc	r19, r15
    6af8:	a2 01       	movw	r20, r4
    6afa:	43 50       	subi	r20, 0x03	; 3
    6afc:	51 09       	sbc	r21, r1
    6afe:	4c 0d       	add	r20, r12
    6b00:	5d 1d       	adc	r21, r13
    6b02:	b7 01       	movw	r22, r14
    6b04:	6d 5f       	subi	r22, 0xFD	; 253
    6b06:	7f 4f       	sbci	r23, 0xFF	; 255
    6b08:	c6 01       	movw	r24, r12
    6b0a:	03 96       	adiw	r24, 0x03	; 3
    6b0c:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5396

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    6b10:	83 2c       	mov	r8, r3
    6b12:	91 2c       	mov	r9, r1
    6b14:	25 e1       	ldi	r18, 0x15	; 21
    6b16:	32 9e       	mul	r3, r18
    6b18:	f0 01       	movw	r30, r0
    6b1a:	11 24       	eor	r1, r1
    6b1c:	e7 55       	subi	r30, 0x57	; 87
    6b1e:	f7 4f       	sbci	r31, 0xF7	; 247
    6b20:	85 85       	ldd	r24, Z+13	; 0x0d
    6b22:	9e 01       	movw	r18, r28
    6b24:	2f 5f       	subi	r18, 0xFF	; 255
    6b26:	3f 4f       	sbci	r19, 0xFF	; 255
    6b28:	59 01       	movw	r10, r18
    6b2a:	81 11       	cpse	r24, r1
    6b2c:	09 c0       	rjmp	.+18     	; 0x6b40 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5397
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    6b2e:	60 81       	ld	r22, Z
    6b30:	71 81       	ldd	r23, Z+1	; 0x01
    6b32:	82 81       	ldd	r24, Z+2	; 0x02
    6b34:	93 81       	ldd	r25, Z+3	; 0x03
    6b36:	89 01       	movw	r16, r18
    6b38:	22 e0       	ldi	r18, 0x02	; 2
    6b3a:	44 e0       	ldi	r20, 0x04	; 4
    6b3c:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5399

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    6b40:	85 e1       	ldi	r24, 0x15	; 21
    6b42:	88 9d       	mul	r24, r8
    6b44:	f0 01       	movw	r30, r0
    6b46:	89 9d       	mul	r24, r9
    6b48:	f0 0d       	add	r31, r0
    6b4a:	11 24       	eor	r1, r1
    6b4c:	e7 55       	subi	r30, 0x57	; 87
    6b4e:	f7 4f       	sbci	r31, 0xF7	; 247
    6b50:	85 85       	ldd	r24, Z+13	; 0x0d
    6b52:	81 30       	cpi	r24, 0x01	; 1
    6b54:	59 f4       	brne	.+22     	; 0x6b6c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xfe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    6b56:	60 81       	ld	r22, Z
    6b58:	71 81       	ldd	r23, Z+1	; 0x01
    6b5a:	82 81       	ldd	r24, Z+2	; 0x02
    6b5c:	93 81       	ldd	r25, Z+3	; 0x03
    6b5e:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    6b62:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    6b64:	4a e0       	ldi	r20, 0x0A	; 10
    6b66:	b5 01       	movw	r22, r10
    6b68:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6b6c:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    6b70:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5404

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    6b74:	f5 01       	movw	r30, r10
    6b76:	01 90       	ld	r0, Z+
    6b78:	00 20       	and	r0, r0
    6b7a:	e9 f7       	brne	.-6      	; 0x6b76 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x108>
    6b7c:	31 97       	sbiw	r30, 0x01	; 1
    6b7e:	ea 19       	sub	r30, r10
    6b80:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5406
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    6b82:	a3 01       	movw	r20, r6
    6b84:	4c 50       	subi	r20, 0x0C	; 12
    6b86:	51 09       	sbc	r21, r1
    6b88:	56 95       	lsr	r21
    6b8a:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6b8c:	31 e0       	ldi	r19, 0x01	; 1
    6b8e:	e3 1a       	sub	r14, r19
    6b90:	f1 08       	sbc	r15, r1
    6b92:	4e 0d       	add	r20, r14
    6b94:	5f 1d       	adc	r21, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6b96:	86 e0       	ldi	r24, 0x06	; 6
    6b98:	e8 9f       	mul	r30, r24
    6b9a:	f0 01       	movw	r30, r0
    6b9c:	11 24       	eor	r1, r1
    6b9e:	ee 0f       	add	r30, r30
    6ba0:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5405
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    6ba2:	b2 01       	movw	r22, r4
    6ba4:	6e 1b       	sub	r22, r30
    6ba6:	7f 0b       	sbc	r23, r31
    6ba8:	76 95       	lsr	r23
    6baa:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6bac:	6c 0d       	add	r22, r12
    6bae:	7d 1d       	adc	r23, r13
    6bb0:	ee 24       	eor	r14, r14
    6bb2:	ea 94       	dec	r14
    6bb4:	fe 2c       	mov	r15, r14
    6bb6:	10 e0       	ldi	r17, 0x00	; 0
    6bb8:	00 e0       	ldi	r16, 0x00	; 0
    6bba:	22 e0       	ldi	r18, 0x02	; 2
    6bbc:	c5 01       	movw	r24, r10
    6bbe:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
}
    6bc2:	29 96       	adiw	r28, 0x09	; 9
    6bc4:	0f b6       	in	r0, 0x3f	; 63
    6bc6:	f8 94       	cli
    6bc8:	de bf       	out	0x3e, r29	; 62
    6bca:	0f be       	out	0x3f, r0	; 63
    6bcc:	cd bf       	out	0x3d, r28	; 61
    6bce:	df 91       	pop	r29
    6bd0:	cf 91       	pop	r28
    6bd2:	1f 91       	pop	r17
    6bd4:	0f 91       	pop	r16
    6bd6:	ff 90       	pop	r15
    6bd8:	ef 90       	pop	r14
    6bda:	df 90       	pop	r13
    6bdc:	cf 90       	pop	r12
    6bde:	bf 90       	pop	r11
    6be0:	af 90       	pop	r10
    6be2:	9f 90       	pop	r9
    6be4:	8f 90       	pop	r8
    6be6:	7f 90       	pop	r7
    6be8:	6f 90       	pop	r6
    6bea:	5f 90       	pop	r5
    6bec:	4f 90       	pop	r4
    6bee:	3f 90       	pop	r3
    6bf0:	08 95       	ret

00006bf2 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z37display_element_default_ring_set_tempjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5212
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
}
////
void display_element_default_ring_set_temp(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6bf2:	ef 92       	push	r14
    6bf4:	0f 93       	push	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
  display_element_dialog_set_variable(x, y, size_x, size_y, args1, args2);
    6bf6:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5214
}
    6bfa:	0f 91       	pop	r16
    6bfc:	ef 90       	pop	r14
    6bfe:	08 95       	ret

00006c00 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5269
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6c00:	af 92       	push	r10
    6c02:	bf 92       	push	r11
    6c04:	cf 92       	push	r12
    6c06:	df 92       	push	r13
    6c08:	ef 92       	push	r14
    6c0a:	ff 92       	push	r15
    6c0c:	0f 93       	push	r16
    6c0e:	1f 93       	push	r17
    6c10:	cf 93       	push	r28
    6c12:	df 93       	push	r29
    6c14:	cd b7       	in	r28, 0x3d	; 61
    6c16:	de b7       	in	r29, 0x3e	; 62
    6c18:	60 97       	sbiw	r28, 0x10	; 16
    6c1a:	0f b6       	in	r0, 0x3f	; 63
    6c1c:	f8 94       	cli
    6c1e:	de bf       	out	0x3e, r29	; 62
    6c20:	0f be       	out	0x3f, r0	; 63
    6c22:	cd bf       	out	0x3d, r28	; 61
    6c24:	5c 01       	movw	r10, r24
    6c26:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    6c28:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
    6c2c:	9e 01       	movw	r18, r28
    6c2e:	2f 5f       	subi	r18, 0xFF	; 255
    6c30:	3f 4f       	sbci	r19, 0xFF	; 255
    6c32:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5271
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    6c34:	80 fd       	sbrc	r24, 0
    6c36:	4e c0       	rjmp	.+156    	; 0x6cd4 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    6c38:	80 91 b1 10 	lds	r24, 0x10B1	; 0x8010b1 <now>
    6c3c:	90 e0       	ldi	r25, 0x00	; 0
    6c3e:	80 53       	subi	r24, 0x30	; 48
    6c40:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5273
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    6c42:	9f 93       	push	r25
    6c44:	8f 93       	push	r24
    6c46:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <now+0x1>
    6c4a:	1f 92       	push	r1
    6c4c:	8f 93       	push	r24
    6c4e:	80 91 b3 10 	lds	r24, 0x10B3	; 0x8010b3 <now+0x2>
    6c52:	1f 92       	push	r1
    6c54:	8f 93       	push	r24
    6c56:	88 e3       	ldi	r24, 0x38	; 56
    6c58:	93 e0       	ldi	r25, 0x03	; 3
    6c5a:	9f 93       	push	r25
    6c5c:	8f 93       	push	r24
    6c5e:	3f 93       	push	r19
    6c60:	2f 93       	push	r18
    6c62:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
    6c66:	0f b6       	in	r0, 0x3f	; 63
    6c68:	f8 94       	cli
    6c6a:	de bf       	out	0x3e, r29	; 62
    6c6c:	0f be       	out	0x3f, r0	; 63
    6c6e:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6c70:	8f ef       	ldi	r24, 0xFF	; 255
    6c72:	9f ef       	ldi	r25, 0xFF	; 255
    6c74:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    6c78:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5279
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    6c7c:	4e e8       	ldi	r20, 0x8E	; 142
    6c7e:	50 e0       	ldi	r21, 0x00	; 0
    6c80:	b8 01       	movw	r22, r16
    6c82:	c5 01       	movw	r24, r10
    6c84:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6c88:	b8 01       	movw	r22, r16
    6c8a:	6f 5f       	subi	r22, 0xFF	; 255
    6c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c8e:	4e e8       	ldi	r20, 0x8E	; 142
    6c90:	50 e0       	ldi	r21, 0x00	; 0
    6c92:	c5 01       	movw	r24, r10
    6c94:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6c98:	a8 01       	movw	r20, r16
    6c9a:	4e 5f       	subi	r20, 0xFE	; 254
    6c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c9e:	ee 24       	eor	r14, r14
    6ca0:	ea 94       	dec	r14
    6ca2:	fe 2c       	mov	r15, r14
    6ca4:	10 e0       	ldi	r17, 0x00	; 0
    6ca6:	00 e0       	ldi	r16, 0x00	; 0
    6ca8:	23 e0       	ldi	r18, 0x03	; 3
    6caa:	b5 01       	movw	r22, r10
    6cac:	c6 01       	movw	r24, r12
    6cae:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5280
}
    6cb2:	60 96       	adiw	r28, 0x10	; 16
    6cb4:	0f b6       	in	r0, 0x3f	; 63
    6cb6:	f8 94       	cli
    6cb8:	de bf       	out	0x3e, r29	; 62
    6cba:	0f be       	out	0x3f, r0	; 63
    6cbc:	cd bf       	out	0x3d, r28	; 61
    6cbe:	df 91       	pop	r29
    6cc0:	cf 91       	pop	r28
    6cc2:	1f 91       	pop	r17
    6cc4:	0f 91       	pop	r16
    6cc6:	ff 90       	pop	r15
    6cc8:	ef 90       	pop	r14
    6cca:	df 90       	pop	r13
    6ccc:	cf 90       	pop	r12
    6cce:	bf 90       	pop	r11
    6cd0:	af 90       	pop	r10
    6cd2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5277
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    6cd4:	67 e4       	ldi	r22, 0x47	; 71
    6cd6:	73 e0       	ldi	r23, 0x03	; 3
    6cd8:	c9 01       	movw	r24, r18
    6cda:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
    6cde:	c8 cf       	rjmp	.-112    	; 0x6c70 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

00006ce0 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    6ce0:	4f 92       	push	r4
    6ce2:	5f 92       	push	r5
    6ce4:	6f 92       	push	r6
    6ce6:	7f 92       	push	r7
    6ce8:	8f 92       	push	r8
    6cea:	9f 92       	push	r9
    6cec:	af 92       	push	r10
    6cee:	bf 92       	push	r11
    6cf0:	cf 92       	push	r12
    6cf2:	df 92       	push	r13
    6cf4:	ef 92       	push	r14
    6cf6:	ff 92       	push	r15
    6cf8:	0f 93       	push	r16
    6cfa:	1f 93       	push	r17
    6cfc:	cf 93       	push	r28
    6cfe:	df 93       	push	r29
    6d00:	1f 92       	push	r1
    6d02:	cd b7       	in	r28, 0x3d	; 61
    6d04:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    6d06:	ce 01       	movw	r24, r28
    6d08:	01 96       	adiw	r24, 0x01	; 1
    6d0a:	0e 94 1d 2b 	call	0x563a	; 0x563a <MenuHistoryGetMenu(unsigned char*)>
    6d0e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
  attr = pgm_read_byte(&current->atributes);
    6d10:	fc 01       	movw	r30, r24
    6d12:	ea 53       	subi	r30, 0x3A	; 58
    6d14:	fd 4f       	sbci	r31, 0xFD	; 253
    6d16:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
  x = pgm_read_word(&current->x);
    6d18:	38 97       	sbiw	r30, 0x08	; 8
    6d1a:	c5 90       	lpm	r12, Z+
    6d1c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
  y = pgm_read_word(&current->y);
    6d1e:	fc 01       	movw	r30, r24
    6d20:	e0 54       	subi	r30, 0x40	; 64
    6d22:	fd 4f       	sbci	r31, 0xFD	; 253
    6d24:	e5 90       	lpm	r14, Z+
    6d26:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
  size_x = pgm_read_word(&current->size_x);
    6d28:	fc 01       	movw	r30, r24
    6d2a:	ee 53       	subi	r30, 0x3E	; 62
    6d2c:	fd 4f       	sbci	r31, 0xFD	; 253
    6d2e:	a5 90       	lpm	r10, Z+
    6d30:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
  size_y = pgm_read_word(&current->size_y);
    6d32:	fc 01       	movw	r30, r24
    6d34:	ec 53       	subi	r30, 0x3C	; 60
    6d36:	fd 4f       	sbci	r31, 0xFD	; 253
    6d38:	65 90       	lpm	r6, Z+
    6d3a:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
  color_background = pgm_read_word(&current->color_background);
    6d3c:	fc 01       	movw	r30, r24
    6d3e:	e9 53       	subi	r30, 0x39	; 57
    6d40:	fd 4f       	sbci	r31, 0xFD	; 253
    6d42:	85 90       	lpm	r8, Z+
    6d44:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    6d46:	50 fe       	sbrs	r5, 0
    6d48:	03 c0       	rjmp	.+6      	; 0x6d50 <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    6d4a:	c4 01       	movw	r24, r8
    6d4c:	0e 94 4b 8b 	call	0x11696	; 0x11696 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    6d50:	51 fe       	sbrs	r5, 1
    6d52:	0e c0       	rjmp	.+28     	; 0x6d70 <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6d54:	90 92 2c 0e 	sts	0x0E2C, r9	; 0x800e2c <my_lcd+0xb>
    6d58:	80 92 2b 0e 	sts	0x0E2B, r8	; 0x800e2b <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    6d5c:	97 01       	movw	r18, r14
    6d5e:	26 0d       	add	r18, r6
    6d60:	37 1d       	adc	r19, r7
    6d62:	a6 01       	movw	r20, r12
    6d64:	4a 0d       	add	r20, r10
    6d66:	5b 1d       	adc	r21, r11
    6d68:	b7 01       	movw	r22, r14
    6d6a:	c6 01       	movw	r24, r12
    6d6c:	0e 94 e1 8a 	call	0x115c2	; 0x115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    6d70:	52 fe       	sbrs	r5, 2
    6d72:	2a c0       	rjmp	.+84     	; 0x6dc8 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6d74:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    6d78:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    6d7c:	91 2c       	mov	r9, r1
    6d7e:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    6d80:	6e 0c       	add	r6, r14
    6d82:	7f 1c       	adc	r7, r15
    6d84:	26 01       	movw	r4, r12
    6d86:	4a 0c       	add	r4, r10
    6d88:	5b 1c       	adc	r5, r11
    6d8a:	93 01       	movw	r18, r6
    6d8c:	28 19       	sub	r18, r8
    6d8e:	39 09       	sbc	r19, r9
    6d90:	a2 01       	movw	r20, r4
    6d92:	48 19       	sub	r20, r8
    6d94:	59 09       	sbc	r21, r9
    6d96:	b7 01       	movw	r22, r14
    6d98:	c6 01       	movw	r24, r12
    6d9a:	88 0d       	add	r24, r8
    6d9c:	99 1d       	adc	r25, r9
    6d9e:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    6da2:	a5 01       	movw	r20, r10
    6da4:	48 19       	sub	r20, r8
    6da6:	59 09       	sbc	r21, r9
    6da8:	b7 01       	movw	r22, r14
    6daa:	69 5e       	subi	r22, 0xE9	; 233
    6dac:	7f 4f       	sbci	r23, 0xFF	; 255
    6dae:	c6 01       	movw	r24, r12
    6db0:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6db4:	8f ef       	ldi	r24, 0xFF	; 255
    6db6:	88 1a       	sub	r8, r24
    6db8:	98 0a       	sbc	r9, r24
    6dba:	ef ef       	ldi	r30, 0xFF	; 255
    6dbc:	ee 1a       	sub	r14, r30
    6dbe:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    6dc0:	f4 e0       	ldi	r31, 0x04	; 4
    6dc2:	8f 16       	cp	r8, r31
    6dc4:	91 04       	cpc	r9, r1
    6dc6:	09 f7       	brne	.-62     	; 0x6d8a <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt =  pgm_read_word(&current->preload_function);
    6dc8:	f8 01       	movw	r30, r16
    6dca:	e0 53       	subi	r30, 0x30	; 48
    6dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    6dce:	25 91       	lpm	r18, Z+
    6dd0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    6dd2:	f8 01       	movw	r30, r16
    6dd4:	e3 54       	subi	r30, 0x43	; 67
    6dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    6dd8:	e4 91       	lpm	r30, Z
    6dda:	40 e0       	ldi	r20, 0x00	; 0
    6ddc:	70 e0       	ldi	r23, 0x00	; 0
    6dde:	60 e0       	ldi	r22, 0x00	; 0
    6de0:	8e 2f       	mov	r24, r30
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	f9 01       	movw	r30, r18
    6de6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556

}
    6de8:	0f 90       	pop	r0
    6dea:	df 91       	pop	r29
    6dec:	cf 91       	pop	r28
    6dee:	1f 91       	pop	r17
    6df0:	0f 91       	pop	r16
    6df2:	ff 90       	pop	r15
    6df4:	ef 90       	pop	r14
    6df6:	df 90       	pop	r13
    6df8:	cf 90       	pop	r12
    6dfa:	bf 90       	pop	r11
    6dfc:	af 90       	pop	r10
    6dfe:	9f 90       	pop	r9
    6e00:	8f 90       	pop	r8
    6e02:	7f 90       	pop	r7
    6e04:	6f 90       	pop	r6
    6e06:	5f 90       	pop	r5
    6e08:	4f 90       	pop	r4
    6e0a:	08 95       	ret

00006e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    6e0c:	20 91 33 09 	lds	r18, 0x0933	; 0x800933 <MenuHistoryIndex>
    6e10:	2a 30       	cpi	r18, 0x0A	; 10
    6e12:	70 f4       	brcc	.+28     	; 0x6e30 <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
  {
    MenuHistoryIndex++;
    6e14:	2f 5f       	subi	r18, 0xFF	; 255
    6e16:	20 93 33 09 	sts	0x0933, r18	; 0x800933 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
    MenuHistory[MenuHistoryIndex] = id;
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	f9 01       	movw	r30, r18
    6e1e:	ed 59       	subi	r30, 0x9D	; 157
    6e20:	f7 4f       	sbci	r31, 0xF7	; 247
    6e22:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
    Global_menu_args1[MenuHistoryIndex] = args1;
    6e24:	27 5d       	subi	r18, 0xD7	; 215
    6e26:	36 4f       	sbci	r19, 0xF6	; 246
    6e28:	f9 01       	movw	r30, r18
    6e2a:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
    MenuPrepareStyle();
    6e2c:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  }
}
    6e30:	08 95       	ret

00006e32 <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z37button_click_term_set_mode_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6180
/*
   funkce pro prepnuti na dialog vyberu modu
*/
void button_click_term_set_mode_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SELECT_TERM_MODE, default_ring);
    6e32:	60 91 75 0a 	lds	r22, 0x0A75	; 0x800a75 <default_ring>
    6e36:	88 e6       	ldi	r24, 0x68	; 104
    6e38:	0c 94 06 37 	jmp	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006e3c <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979

/////
/////
void click_thermostat_set_ring_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring);
    6e3c:	60 91 75 0a 	lds	r22, 0x0A75	; 0x800a75 <default_ring>
    6e40:	8a e0       	ldi	r24, 0x0A	; 10
    6e42:	0c 94 06 37 	jmp	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006e46 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5716
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t args2, uint8_t idx)
{
    6e46:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5718
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    6e48:	8b e0       	ldi	r24, 0x0B	; 11
    6e4a:	48 9f       	mul	r20, r24
    6e4c:	f0 01       	movw	r30, r0
    6e4e:	11 24       	eor	r1, r1
    6e50:	ea 5d       	subi	r30, 0xDA	; 218
    6e52:	f5 4f       	sbci	r31, 0xF5	; 245
    6e54:	62 85       	ldd	r22, Z+10	; 0x0a
    6e56:	6f 3f       	cpi	r22, 0xFF	; 255
    6e58:	a1 f4       	brne	.+40     	; 0x6e82 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)+0x3c>
    6e5a:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5720
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    6e5c:	60 e0       	ldi	r22, 0x00	; 0
    6e5e:	84 e6       	ldi	r24, 0x64	; 100
    6e60:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
    dialog_yes_function = &tds_associate;
    6e64:	8d e1       	ldi	r24, 0x1D	; 29
    6e66:	9d e5       	ldi	r25, 0x5D	; 93
    6e68:	90 93 28 09 	sts	0x0928, r25	; 0x800928 <dialog_yes_function+0x1>
    6e6c:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5722
    dialog_yes_args1 = idx;
    6e70:	c0 93 26 09 	sts	0x0926, r28	; 0x800926 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5723
    strcpy_P(dialog_text, text_associovat_tds);
    6e74:	6b ea       	ldi	r22, 0xAB	; 171
    6e76:	7c e3       	ldi	r23, 0x3C	; 60
    6e78:	86 e0       	ldi	r24, 0x06	; 6
    6e7a:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5729
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    6e7c:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5723
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    6e7e:	0c 94 45 b1 	jmp	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5727
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6e82:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5729
  }
}
    6e84:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5727
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6e86:	0c 94 06 37 	jmp	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006e8a <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{
  if (MenuHistoryIndex > 0)
    6e8a:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <MenuHistoryIndex>
    6e8e:	88 23       	and	r24, r24
    6e90:	29 f0       	breq	.+10     	; 0x6e9c <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
  {
    MenuHistoryIndex--;
    6e92:	81 50       	subi	r24, 0x01	; 1
    6e94:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
    MenuPrepareStyle();
    6e98:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
  }
}
    6e9c:	08 95       	ret

00006e9e <dialog_set_string_button_click(unsigned char, unsigned char, unsigned char)>:
_Z30dialog_set_string_button_clickhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
  MenuHistoryPrevMenu();
}

void dialog_set_string_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
  dialog_save_string_function(args1, args2, args3);
    6e9e:	70 e0       	ldi	r23, 0x00	; 0
    6ea0:	e0 91 35 09 	lds	r30, 0x0935	; 0x800935 <dialog_save_string_function>
    6ea4:	f0 91 36 09 	lds	r31, 0x0936	; 0x800936 <dialog_save_string_function+0x1>
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
  MenuHistoryPrevMenu();
    6eac:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>

00006eb0 <dialog_set_variable_button_click(unsigned char, unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2951
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
    6eb0:	cf 93       	push	r28
    6eb2:	df 93       	push	r29
    6eb4:	c8 2f       	mov	r28, r24
    6eb6:	d4 2f       	mov	r29, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2952
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    6eb8:	70 e0       	ldi	r23, 0x00	; 0
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	80 e0       	ldi	r24, 0x00	; 0
    6ebe:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    6ec2:	ab 01       	movw	r20, r22
    6ec4:	bc 01       	movw	r22, r24
    6ec6:	85 e1       	ldi	r24, 0x15	; 21
    6ec8:	c8 9f       	mul	r28, r24
    6eca:	f0 01       	movw	r30, r0
    6ecc:	11 24       	eor	r1, r1
    6ece:	e7 55       	subi	r30, 0x57	; 87
    6ed0:	f7 4f       	sbci	r31, 0xF7	; 247
    6ed2:	03 88       	ldd	r0, Z+19	; 0x13
    6ed4:	f4 89       	ldd	r31, Z+20	; 0x14
    6ed6:	e0 2d       	mov	r30, r0
    6ed8:	2d 2f       	mov	r18, r29
    6eda:	8c 2f       	mov	r24, r28
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2954
  MenuHistoryPrevMenu();
}
    6ee0:	df 91       	pop	r29
    6ee2:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2953
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu();
    6ee4:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>

00006ee8 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    6ee8:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <dialog_yes_args1>
    6eec:	e0 91 27 09 	lds	r30, 0x0927	; 0x800927 <dialog_yes_function>
    6ef0:	f0 91 28 09 	lds	r31, 0x0928	; 0x800928 <dialog_yes_function+0x1>
    6ef4:	40 e0       	ldi	r20, 0x00	; 0
    6ef6:	70 e0       	ldi	r23, 0x00	; 0
    6ef8:	60 e0       	ldi	r22, 0x00	; 0
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2947
  MenuHistoryPrevMenu();
    6efe:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>

00006f02 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    6f02:	cf 93       	push	r28
    6f04:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    6f06:	68 2f       	mov	r22, r24
    6f08:	84 ed       	ldi	r24, 0xD4	; 212
    6f0a:	9b e0       	ldi	r25, 0x0B	; 11
    6f0c:	0e 94 fa 85 	call	0x10bf4	; 0x10bf4 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    6f10:	8c 2f       	mov	r24, r28
    6f12:	cc 0f       	add	r28, r28
    6f14:	99 0b       	sbc	r25, r25
    6f16:	cf 91       	pop	r28
    6f18:	08 95       	ret

00006f1a <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    6f1a:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    6f1c:	82 95       	swap	r24
    6f1e:	88 0f       	add	r24, r24
    6f20:	80 7e       	andi	r24, 0xE0	; 224
    6f22:	68 e0       	ldi	r22, 0x08	; 8
    6f24:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    6f26:	c9 01       	movw	r24, r18
    6f28:	0c 94 57 9e 	jmp	0x13cae	; 0x13cae <W5500Class::read(unsigned int, unsigned char)>

00006f2c <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    6f2c:	8f 92       	push	r8
    6f2e:	9f 92       	push	r9
    6f30:	af 92       	push	r10
    6f32:	bf 92       	push	r11
    6f34:	cf 92       	push	r12
    6f36:	df 92       	push	r13
    6f38:	ef 92       	push	r14
    6f3a:	ff 92       	push	r15
    6f3c:	0f 93       	push	r16
    6f3e:	1f 93       	push	r17
    6f40:	cf 93       	push	r28
    6f42:	6c 01       	movw	r12, r24
    6f44:	5b 01       	movw	r10, r22
    6f46:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    6f48:	fc 01       	movw	r30, r24
    6f4a:	c4 85       	ldd	r28, Z+12	; 0x0c
    6f4c:	c8 30       	cpi	r28, 0x08	; 8
    6f4e:	a1 f4       	brne	.+40     	; 0x6f78 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	f6 01       	movw	r30, r12
    6f56:	93 83       	std	Z+3, r25	; 0x03
    6f58:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    6f5a:	f1 2c       	mov	r15, r1
    6f5c:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    6f5e:	c7 01       	movw	r24, r14
    6f60:	cf 91       	pop	r28
    6f62:	1f 91       	pop	r17
    6f64:	0f 91       	pop	r16
    6f66:	ff 90       	pop	r15
    6f68:	ef 90       	pop	r14
    6f6a:	df 90       	pop	r13
    6f6c:	cf 90       	pop	r12
    6f6e:	bf 90       	pop	r11
    6f70:	af 90       	pop	r10
    6f72:	9f 90       	pop	r9
    6f74:	8f 90       	pop	r8
    6f76:	08 95       	ret
    6f78:	8a 01       	movw	r16, r20
    6f7a:	41 30       	cpi	r20, 0x01	; 1
    6f7c:	58 40       	sbci	r21, 0x08	; 8
    6f7e:	10 f0       	brcs	.+4      	; 0x6f84 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    6f80:	00 e0       	ldi	r16, 0x00	; 0
    6f82:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    6f84:	8c 2f       	mov	r24, r28
    6f86:	0e 94 e8 8f 	call	0x11fd0	; 0x11fd0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    6f8a:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6f8c:	63 e0       	ldi	r22, 0x03	; 3
    6f8e:	70 e0       	ldi	r23, 0x00	; 0
    6f90:	8c 2f       	mov	r24, r28
    6f92:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    6f96:	87 31       	cpi	r24, 0x17	; 23
    6f98:	11 f0       	breq	.+4      	; 0x6f9e <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    6f9a:	8c 31       	cpi	r24, 0x1C	; 28
    6f9c:	09 f5       	brne	.+66     	; 0x6fe0 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    6f9e:	80 16       	cp	r8, r16
    6fa0:	91 06       	cpc	r9, r17
    6fa2:	80 f3       	brcs	.-32     	; 0x6f84 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    6fa4:	98 01       	movw	r18, r16
    6fa6:	a5 01       	movw	r20, r10
    6fa8:	70 e0       	ldi	r23, 0x00	; 0
    6faa:	60 e0       	ldi	r22, 0x00	; 0
    6fac:	8c 2f       	mov	r24, r28
    6fae:	0e 94 33 9f 	call	0x13e66	; 0x13e66 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    6fb2:	60 e2       	ldi	r22, 0x20	; 32
    6fb4:	70 e0       	ldi	r23, 0x00	; 0
    6fb6:	8c 2f       	mov	r24, r28
    6fb8:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6fbc:	62 e0       	ldi	r22, 0x02	; 2
    6fbe:	70 e0       	ldi	r23, 0x00	; 0
    6fc0:	8c 2f       	mov	r24, r28
    6fc2:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    6fc6:	84 fd       	sbrc	r24, 4
    6fc8:	0e c0       	rjmp	.+28     	; 0x6fe6 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6fca:	63 e0       	ldi	r22, 0x03	; 3
    6fcc:	70 e0       	ldi	r23, 0x00	; 0
    6fce:	8c 2f       	mov	r24, r28
    6fd0:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    6fd4:	81 11       	cpse	r24, r1
    6fd6:	f2 cf       	rjmp	.-28     	; 0x6fbc <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    6fd8:	8c 2f       	mov	r24, r28
    6fda:	0e 94 0d a1 	call	0x1421a	; 0x1421a <close(unsigned char)>
    6fde:	b8 cf       	rjmp	.-144    	; 0x6f50 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    6fe0:	10 e0       	ldi	r17, 0x00	; 0
    6fe2:	00 e0       	ldi	r16, 0x00	; 0
    6fe4:	df cf       	rjmp	.-66     	; 0x6fa4 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6fe6:	40 e1       	ldi	r20, 0x10	; 16
    6fe8:	62 e0       	ldi	r22, 0x02	; 2
    6fea:	70 e0       	ldi	r23, 0x00	; 0
    6fec:	8c 2f       	mov	r24, r28
    6fee:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    6ff2:	01 2b       	or	r16, r17
    6ff4:	09 f0       	breq	.+2      	; 0x6ff8 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    6ff6:	b3 cf       	rjmp	.-154    	; 0x6f5e <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    6ff8:	ab cf       	rjmp	.-170    	; 0x6f50 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00006ffa <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    6ffa:	df 92       	push	r13
    6ffc:	ef 92       	push	r14
    6ffe:	ff 92       	push	r15
    7000:	0f 93       	push	r16
    7002:	1f 93       	push	r17
    7004:	cf 93       	push	r28
    7006:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    7008:	fc 01       	movw	r30, r24
    700a:	24 85       	ldd	r18, Z+12	; 0x0c
    700c:	28 30       	cpi	r18, 0x08	; 8
    700e:	51 f0       	breq	.+20     	; 0x7024 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    7014:	df 91       	pop	r29
    7016:	cf 91       	pop	r28
    7018:	1f 91       	pop	r17
    701a:	0f 91       	pop	r16
    701c:	ff 90       	pop	r15
    701e:	ef 90       	pop	r14
    7020:	df 90       	pop	r13
    7022:	08 95       	ret
    7024:	7a 01       	movw	r14, r20
    7026:	eb 01       	movw	r28, r22
    7028:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    702a:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    702c:	63 e0       	ldi	r22, 0x03	; 3
    702e:	70 e0       	ldi	r23, 0x00	; 0
    7030:	8d 2d       	mov	r24, r13
    7032:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    7036:	81 11       	cpse	r24, r1
    7038:	28 c0       	rjmp	.+80     	; 0x708a <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    703a:	f8 01       	movw	r30, r16
    703c:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    703e:	f8 01       	movw	r30, r16
    7040:	84 85       	ldd	r24, Z+12	; 0x0c
    7042:	88 30       	cpi	r24, 0x08	; 8
    7044:	29 f3       	breq	.-54     	; 0x7010 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    7046:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    704a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    704e:	2f 5f       	subi	r18, 0xFF	; 255
    7050:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    7052:	19 f1       	breq	.+70     	; 0x709a <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    7054:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    7058:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    705c:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    7060:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    7064:	61 e0       	ldi	r22, 0x01	; 1
    7066:	0e 94 1a a1 	call	0x14234	; 0x14234 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    706a:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    706c:	8f 3f       	cpi	r24, 0xFF	; 255
    706e:	c1 f4       	brne	.+48     	; 0x70a0 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    7070:	8b 81       	ldd	r24, Y+3	; 0x03
    7072:	8f 3f       	cpi	r24, 0xFF	; 255
    7074:	01 f5       	brne	.+64     	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    7076:	8c 81       	ldd	r24, Y+4	; 0x04
    7078:	8f 3f       	cpi	r24, 0xFF	; 255
    707a:	e9 f4       	brne	.+58     	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    707c:	8d 81       	ldd	r24, Y+5	; 0x05
    707e:	8f 3f       	cpi	r24, 0xFF	; 255
    7080:	d1 f4       	brne	.+52     	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    7082:	88 e0       	ldi	r24, 0x08	; 8
    7084:	f8 01       	movw	r30, r16
    7086:	84 87       	std	Z+12, r24	; 0x0c
    7088:	c3 cf       	rjmp	.-122    	; 0x7010 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    708a:	8b 7f       	andi	r24, 0xFB	; 251
    708c:	88 31       	cpi	r24, 0x18	; 24
    708e:	a9 f2       	breq	.-86     	; 0x703a <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    7090:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    7092:	f8 e0       	ldi	r31, 0x08	; 8
    7094:	df 12       	cpse	r13, r31
    7096:	ca cf       	rjmp	.-108    	; 0x702c <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    7098:	d2 cf       	rjmp	.-92     	; 0x703e <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    709a:	20 e0       	ldi	r18, 0x00	; 0
    709c:	34 e0       	ldi	r19, 0x04	; 4
    709e:	da cf       	rjmp	.-76     	; 0x7054 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    70a0:	81 11       	cpse	r24, r1
    70a2:	09 c0       	rjmp	.+18     	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    70a4:	8b 81       	ldd	r24, Y+3	; 0x03
    70a6:	81 11       	cpse	r24, r1
    70a8:	06 c0       	rjmp	.+12     	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    70aa:	8c 81       	ldd	r24, Y+4	; 0x04
    70ac:	81 11       	cpse	r24, r1
    70ae:	03 c0       	rjmp	.+6      	; 0x70b6 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    70b0:	8d 81       	ldd	r24, Y+5	; 0x05
    70b2:	88 23       	and	r24, r24
    70b4:	31 f3       	breq	.-52     	; 0x7082 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    70b6:	e1 14       	cp	r14, r1
    70b8:	f1 04       	cpc	r15, r1
    70ba:	19 f3       	breq	.-58     	; 0x7082 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    70bc:	f8 01       	movw	r30, r16
    70be:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    70c0:	ae 01       	movw	r20, r28
    70c2:	4e 5f       	subi	r20, 0xFE	; 254
    70c4:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    70c6:	6d 2d       	mov	r22, r13
    70c8:	62 95       	swap	r22
    70ca:	66 0f       	add	r22, r22
    70cc:	60 7e       	andi	r22, 0xE0	; 224
    70ce:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    70d0:	24 e0       	ldi	r18, 0x04	; 4
    70d2:	30 e0       	ldi	r19, 0x00	; 0
    70d4:	8c e0       	ldi	r24, 0x0C	; 12
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    70dc:	4f 2d       	mov	r20, r15
    70de:	60 e1       	ldi	r22, 0x10	; 16
    70e0:	70 e0       	ldi	r23, 0x00	; 0
    70e2:	8d 2d       	mov	r24, r13
    70e4:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    70e8:	4e 2d       	mov	r20, r14
    70ea:	61 e1       	ldi	r22, 0x11	; 17
    70ec:	70 e0       	ldi	r23, 0x00	; 0
    70ee:	8d 2d       	mov	r24, r13
    70f0:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    70f4:	64 e0       	ldi	r22, 0x04	; 4
    70f6:	70 e0       	ldi	r23, 0x00	; 0
    70f8:	8d 2d       	mov	r24, r13
    70fa:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    70fe:	c8 01       	movw	r24, r16
    7100:	0e 94 f1 a1 	call	0x143e2	; 0x143e2 <EthernetClient::status()>
    7104:	87 31       	cpi	r24, 0x17	; 23
    7106:	61 f0       	breq	.+24     	; 0x7120 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    7108:	61 e0       	ldi	r22, 0x01	; 1
    710a:	70 e0       	ldi	r23, 0x00	; 0
    710c:	80 e0       	ldi	r24, 0x00	; 0
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    7114:	c8 01       	movw	r24, r16
    7116:	0e 94 f1 a1 	call	0x143e2	; 0x143e2 <EthernetClient::status()>
    711a:	81 11       	cpse	r24, r1
    711c:	f0 cf       	rjmp	.-32     	; 0x70fe <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    711e:	b1 cf       	rjmp	.-158    	; 0x7082 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    7120:	81 e0       	ldi	r24, 0x01	; 1
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	77 cf       	rjmp	.-274    	; 0x7014 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

00007126 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    7126:	4f 92       	push	r4
    7128:	5f 92       	push	r5
    712a:	6f 92       	push	r6
    712c:	7f 92       	push	r7
    712e:	8f 92       	push	r8
    7130:	9f 92       	push	r9
    7132:	af 92       	push	r10
    7134:	bf 92       	push	r11
    7136:	cf 92       	push	r12
    7138:	df 92       	push	r13
    713a:	ef 92       	push	r14
    713c:	ff 92       	push	r15
    713e:	0f 93       	push	r16
    7140:	1f 93       	push	r17
    7142:	cf 93       	push	r28
    7144:	df 93       	push	r29
    7146:	cd b7       	in	r28, 0x3d	; 61
    7148:	de b7       	in	r29, 0x3e	; 62
    714a:	63 97       	sbiw	r28, 0x13	; 19
    714c:	0f b6       	in	r0, 0x3f	; 63
    714e:	f8 94       	cli
    7150:	de bf       	out	0x3e, r29	; 62
    7152:	0f be       	out	0x3f, r0	; 63
    7154:	cd bf       	out	0x3d, r28	; 61
    7156:	7c 01       	movw	r14, r24
    7158:	6b 01       	movw	r12, r22
    715a:	3a 01       	movw	r6, r20
    715c:	fb 01       	movw	r30, r22
    715e:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    7160:	8d 91       	ld	r24, X+
    7162:	81 11       	cpse	r24, r1
    7164:	fd cf       	rjmp	.-6      	; 0x7160 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    7166:	30 e0       	ldi	r19, 0x00	; 0
    7168:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    716a:	90 e0       	ldi	r25, 0x00	; 0
    716c:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    716e:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    7170:	41 91       	ld	r20, Z+
    7172:	44 23       	and	r20, r20
    7174:	01 f1       	breq	.+64     	; 0x71b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    7176:	84 30       	cpi	r24, 0x04	; 4
    7178:	91 05       	cpc	r25, r1
    717a:	0c f0       	brlt	.+2      	; 0x717e <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    717c:	42 c0       	rjmp	.+132    	; 0x7202 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    717e:	4e 32       	cpi	r20, 0x2E	; 46
    7180:	69 f4       	brne	.+26     	; 0x719c <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    7182:	2f 3f       	cpi	r18, 0xFF	; 255
    7184:	31 05       	cpc	r19, r1
    7186:	09 f0       	breq	.+2      	; 0x718a <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    7188:	e4 f5       	brge	.+120    	; 0x7202 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    718a:	d3 01       	movw	r26, r6
    718c:	a8 0f       	add	r26, r24
    718e:	b9 1f       	adc	r27, r25
    7190:	12 96       	adiw	r26, 0x02	; 2
    7192:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    7194:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    7196:	30 e0       	ldi	r19, 0x00	; 0
    7198:	20 e0       	ldi	r18, 0x00	; 0
    719a:	ea cf       	rjmp	.-44     	; 0x7170 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    719c:	52 9f       	mul	r21, r18
    719e:	b0 01       	movw	r22, r0
    71a0:	53 9f       	mul	r21, r19
    71a2:	70 0d       	add	r23, r0
    71a4:	11 24       	eor	r1, r1
    71a6:	24 2f       	mov	r18, r20
    71a8:	44 0f       	add	r20, r20
    71aa:	33 0b       	sbc	r19, r19
    71ac:	20 53       	subi	r18, 0x30	; 48
    71ae:	31 09       	sbc	r19, r1
    71b0:	26 0f       	add	r18, r22
    71b2:	37 1f       	adc	r19, r23
    71b4:	dd cf       	rjmp	.-70     	; 0x7170 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    71b6:	2f 3f       	cpi	r18, 0xFF	; 255
    71b8:	31 05       	cpc	r19, r1
    71ba:	09 f0       	breq	.+2      	; 0x71be <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    71bc:	14 f5       	brge	.+68     	; 0x7202 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    71be:	84 30       	cpi	r24, 0x04	; 4
    71c0:	91 05       	cpc	r25, r1
    71c2:	fc f4       	brge	.+62     	; 0x7202 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    71c4:	68 0e       	add	r6, r24
    71c6:	79 1e       	adc	r7, r25
    71c8:	f3 01       	movw	r30, r6
    71ca:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    71cc:	cc 24       	eor	r12, r12
    71ce:	c3 94       	inc	r12
    71d0:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    71d2:	c6 01       	movw	r24, r12
    71d4:	63 96       	adiw	r28, 0x13	; 19
    71d6:	0f b6       	in	r0, 0x3f	; 63
    71d8:	f8 94       	cli
    71da:	de bf       	out	0x3e, r29	; 62
    71dc:	0f be       	out	0x3f, r0	; 63
    71de:	cd bf       	out	0x3d, r28	; 61
    71e0:	df 91       	pop	r29
    71e2:	cf 91       	pop	r28
    71e4:	1f 91       	pop	r17
    71e6:	0f 91       	pop	r16
    71e8:	ff 90       	pop	r15
    71ea:	ef 90       	pop	r14
    71ec:	df 90       	pop	r13
    71ee:	cf 90       	pop	r12
    71f0:	bf 90       	pop	r11
    71f2:	af 90       	pop	r10
    71f4:	9f 90       	pop	r9
    71f6:	8f 90       	pop	r8
    71f8:	7f 90       	pop	r7
    71fa:	6f 90       	pop	r6
    71fc:	5f 90       	pop	r5
    71fe:	4f 90       	pop	r4
    7200:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    7202:	f7 01       	movw	r30, r14
    7204:	42 81       	ldd	r20, Z+2	; 0x02
    7206:	53 81       	ldd	r21, Z+3	; 0x03
    7208:	64 81       	ldd	r22, Z+4	; 0x04
    720a:	75 81       	ldd	r23, Z+5	; 0x05
    720c:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    7210:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    7214:	a0 91 82 0c 	lds	r26, 0x0C82	; 0x800c82 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    7218:	b0 91 83 0c 	lds	r27, 0x0C83	; 0x800c83 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    721c:	48 17       	cp	r20, r24
    721e:	59 07       	cpc	r21, r25
    7220:	6a 07       	cpc	r22, r26
    7222:	7b 07       	cpc	r23, r27
    7224:	09 f4       	brne	.+2      	; 0x7228 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    7226:	00 c2       	rjmp	.+1024   	; 0x7628 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    7228:	87 01       	movw	r16, r14
    722a:	08 5f       	subi	r16, 0xF8	; 248
    722c:	1f 4f       	sbci	r17, 0xFF	; 255
    722e:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    7232:	6f 70       	andi	r22, 0x0F	; 15
    7234:	77 27       	eor	r23, r23
    7236:	7c 5f       	subi	r23, 0xFC	; 252
    7238:	c8 01       	movw	r24, r16
    723a:	0e 94 4e a1 	call	0x1429c	; 0x1429c <EthernetUDP::begin(unsigned int)>
    723e:	81 30       	cpi	r24, 0x01	; 1
    7240:	09 f0       	breq	.+2      	; 0x7244 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    7242:	f7 c1       	rjmp	.+1006   	; 0x7632 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7244:	82 ee       	ldi	r24, 0xE2	; 226
    7246:	92 e0       	ldi	r25, 0x02	; 2
    7248:	9a 83       	std	Y+2, r25	; 0x02
    724a:	89 83       	std	Y+1, r24	; 0x01
    724c:	f7 01       	movw	r30, r14
    724e:	82 81       	ldd	r24, Z+2	; 0x02
    7250:	93 81       	ldd	r25, Z+3	; 0x03
    7252:	a4 81       	ldd	r26, Z+4	; 0x04
    7254:	b5 81       	ldd	r27, Z+5	; 0x05
    7256:	8b 83       	std	Y+3, r24	; 0x03
    7258:	9c 83       	std	Y+4, r25	; 0x04
    725a:	ad 83       	std	Y+5, r26	; 0x05
    725c:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    725e:	45 e3       	ldi	r20, 0x35	; 53
    7260:	50 e0       	ldi	r21, 0x00	; 0
    7262:	be 01       	movw	r22, r28
    7264:	6f 5f       	subi	r22, 0xFF	; 255
    7266:	7f 4f       	sbci	r23, 0xFF	; 255
    7268:	c8 01       	movw	r24, r16
    726a:	0e 94 b2 a1 	call	0x14364	; 0x14364 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    726e:	89 2b       	or	r24, r25
    7270:	31 f4       	brne	.+12     	; 0x727e <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    7272:	d1 2c       	mov	r13, r1
    7274:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    7276:	c8 01       	movw	r24, r16
    7278:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <EthernetUDP::stop()>
    727c:	aa cf       	rjmp	.-172    	; 0x71d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    727e:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    7282:	f7 01       	movw	r30, r14
    7284:	77 83       	std	Z+7, r23	; 0x07
    7286:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    7288:	42 e0       	ldi	r20, 0x02	; 2
    728a:	50 e0       	ldi	r21, 0x00	; 0
    728c:	b7 01       	movw	r22, r14
    728e:	6a 5f       	subi	r22, 0xFA	; 250
    7290:	7f 4f       	sbci	r23, 0xFF	; 255
    7292:	c8 01       	movw	r24, r16
    7294:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    7298:	81 e0       	ldi	r24, 0x01	; 1
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	9a 83       	std	Y+2, r25	; 0x02
    729e:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    72a0:	42 e0       	ldi	r20, 0x02	; 2
    72a2:	50 e0       	ldi	r21, 0x00	; 0
    72a4:	be 01       	movw	r22, r28
    72a6:	6f 5f       	subi	r22, 0xFF	; 255
    72a8:	7f 4f       	sbci	r23, 0xFF	; 255
    72aa:	c8 01       	movw	r24, r16
    72ac:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    72b0:	80 e0       	ldi	r24, 0x00	; 0
    72b2:	91 e0       	ldi	r25, 0x01	; 1
    72b4:	9a 83       	std	Y+2, r25	; 0x02
    72b6:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    72b8:	42 e0       	ldi	r20, 0x02	; 2
    72ba:	50 e0       	ldi	r21, 0x00	; 0
    72bc:	be 01       	movw	r22, r28
    72be:	6f 5f       	subi	r22, 0xFF	; 255
    72c0:	7f 4f       	sbci	r23, 0xFF	; 255
    72c2:	c8 01       	movw	r24, r16
    72c4:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    72c8:	1a 82       	std	Y+2, r1	; 0x02
    72ca:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    72cc:	42 e0       	ldi	r20, 0x02	; 2
    72ce:	50 e0       	ldi	r21, 0x00	; 0
    72d0:	be 01       	movw	r22, r28
    72d2:	6f 5f       	subi	r22, 0xFF	; 255
    72d4:	7f 4f       	sbci	r23, 0xFF	; 255
    72d6:	c8 01       	movw	r24, r16
    72d8:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    72dc:	42 e0       	ldi	r20, 0x02	; 2
    72de:	50 e0       	ldi	r21, 0x00	; 0
    72e0:	be 01       	movw	r22, r28
    72e2:	6f 5f       	subi	r22, 0xFF	; 255
    72e4:	7f 4f       	sbci	r23, 0xFF	; 255
    72e6:	c8 01       	movw	r24, r16
    72e8:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    72ec:	42 e0       	ldi	r20, 0x02	; 2
    72ee:	50 e0       	ldi	r21, 0x00	; 0
    72f0:	be 01       	movw	r22, r28
    72f2:	6f 5f       	subi	r22, 0xFF	; 255
    72f4:	7f 4f       	sbci	r23, 0xFF	; 255
    72f6:	c8 01       	movw	r24, r16
    72f8:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    72fc:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    72fe:	f6 01       	movw	r30, r12
    7300:	80 81       	ld	r24, Z
    7302:	88 23       	and	r24, r24
    7304:	01 f1       	breq	.+64     	; 0x7346 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    7306:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    7308:	f6 01       	movw	r30, r12
    730a:	81 91       	ld	r24, Z+
    730c:	2f 01       	movw	r4, r30
    730e:	88 23       	and	r24, r24
    7310:	11 f0       	breq	.+4      	; 0x7316 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    7312:	8e 32       	cpi	r24, 0x2E	; 46
    7314:	b1 f4       	brne	.+44     	; 0x7342 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    7316:	46 01       	movw	r8, r12
    7318:	8a 18       	sub	r8, r10
    731a:	9b 08       	sbc	r9, r11
    731c:	18 14       	cp	r1, r8
    731e:	19 04       	cpc	r1, r9
    7320:	74 f4       	brge	.+28     	; 0x733e <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    7322:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    7324:	41 e0       	ldi	r20, 0x01	; 1
    7326:	50 e0       	ldi	r21, 0x00	; 0
    7328:	be 01       	movw	r22, r28
    732a:	63 5f       	subi	r22, 0xF3	; 243
    732c:	7f 4f       	sbci	r23, 0xFF	; 255
    732e:	c8 01       	movw	r24, r16
    7330:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    7334:	a4 01       	movw	r20, r8
    7336:	b5 01       	movw	r22, r10
    7338:	c8 01       	movw	r24, r16
    733a:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    733e:	52 01       	movw	r10, r4
    7340:	de cf       	rjmp	.-68     	; 0x72fe <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    7342:	62 01       	movw	r12, r4
    7344:	e1 cf       	rjmp	.-62     	; 0x7308 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    7346:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    7348:	41 e0       	ldi	r20, 0x01	; 1
    734a:	50 e0       	ldi	r21, 0x00	; 0
    734c:	be 01       	movw	r22, r28
    734e:	63 5f       	subi	r22, 0xF3	; 243
    7350:	7f 4f       	sbci	r23, 0xFF	; 255
    7352:	c8 01       	movw	r24, r16
    7354:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    7358:	c1 2c       	mov	r12, r1
    735a:	dd 24       	eor	r13, r13
    735c:	d3 94       	inc	r13
    735e:	da 82       	std	Y+2, r13	; 0x02
    7360:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7362:	42 e0       	ldi	r20, 0x02	; 2
    7364:	50 e0       	ldi	r21, 0x00	; 0
    7366:	be 01       	movw	r22, r28
    7368:	6f 5f       	subi	r22, 0xFF	; 255
    736a:	7f 4f       	sbci	r23, 0xFF	; 255
    736c:	c8 01       	movw	r24, r16
    736e:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    7372:	da 82       	std	Y+2, r13	; 0x02
    7374:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7376:	42 e0       	ldi	r20, 0x02	; 2
    7378:	50 e0       	ldi	r21, 0x00	; 0
    737a:	be 01       	movw	r22, r28
    737c:	6f 5f       	subi	r22, 0xFF	; 255
    737e:	7f 4f       	sbci	r23, 0xFF	; 255
    7380:	c8 01       	movw	r24, r16
    7382:	0e 94 73 9f 	call	0x13ee6	; 0x13ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    7386:	c8 01       	movw	r24, r16
    7388:	0e 94 89 a1 	call	0x14312	; 0x14312 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    738c:	89 2b       	or	r24, r25
    738e:	09 f4       	brne	.+2      	; 0x7392 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    7390:	70 cf       	rjmp	.-288    	; 0x7272 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    7392:	f3 e0       	ldi	r31, 0x03	; 3
    7394:	af 2e       	mov	r10, r31
    7396:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    7398:	23 01       	movw	r4, r6
    739a:	22 e0       	ldi	r18, 0x02	; 2
    739c:	42 0e       	add	r4, r18
    739e:	51 1c       	adc	r5, r1
    73a0:	43 c0       	rjmp	.+134    	; 0x7428 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    73a2:	f7 01       	movw	r30, r14
    73a4:	42 81       	ldd	r20, Z+2	; 0x02
    73a6:	53 81       	ldd	r21, Z+3	; 0x03
    73a8:	64 81       	ldd	r22, Z+4	; 0x04
    73aa:	75 81       	ldd	r23, Z+5	; 0x05
    73ac:	81 8d       	ldd	r24, Z+25	; 0x19
    73ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    73b0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    73b2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    73b4:	48 17       	cp	r20, r24
    73b6:	59 07       	cpc	r21, r25
    73b8:	6a 07       	cpc	r22, r26
    73ba:	7b 07       	cpc	r23, r27
    73bc:	09 f0       	breq	.+2      	; 0x73c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    73be:	2a c1       	rjmp	.+596    	; 0x7614 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    73c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    73c2:	96 8d       	ldd	r25, Z+30	; 0x1e
    73c4:	c5 97       	sbiw	r24, 0x35	; 53
    73c6:	09 f0       	breq	.+2      	; 0x73ca <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    73c8:	25 c1       	rjmp	.+586    	; 0x7614 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    73ca:	81 a1       	ldd	r24, Z+33	; 0x21
    73cc:	92 a1       	ldd	r25, Z+34	; 0x22
    73ce:	0c 97       	sbiw	r24, 0x0c	; 12
    73d0:	0c f4       	brge	.+2      	; 0x73d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    73d2:	25 c1       	rjmp	.+586    	; 0x761e <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    73d4:	4c e0       	ldi	r20, 0x0C	; 12
    73d6:	50 e0       	ldi	r21, 0x00	; 0
    73d8:	be 01       	movw	r22, r28
    73da:	6f 5f       	subi	r22, 0xFF	; 255
    73dc:	7f 4f       	sbci	r23, 0xFF	; 255
    73de:	c8 01       	movw	r24, r16
    73e0:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    73e4:	8b 81       	ldd	r24, Y+3	; 0x03
    73e6:	9c 81       	ldd	r25, Y+4	; 0x04
    73e8:	98 27       	eor	r25, r24
    73ea:	89 27       	eor	r24, r25
    73ec:	98 27       	eor	r25, r24
    73ee:	9a 8b       	std	Y+18, r25	; 0x12
    73f0:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    73f2:	f7 01       	movw	r30, r14
    73f4:	46 81       	ldd	r20, Z+6	; 0x06
    73f6:	57 81       	ldd	r21, Z+7	; 0x07
    73f8:	29 81       	ldd	r18, Y+1	; 0x01
    73fa:	3a 81       	ldd	r19, Y+2	; 0x02
    73fc:	42 17       	cp	r20, r18
    73fe:	53 07       	cpc	r21, r19
    7400:	11 f4       	brne	.+4      	; 0x7406 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    7402:	97 fd       	sbrc	r25, 7
    7404:	2f c0       	rjmp	.+94     	; 0x7464 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    7406:	c8 01       	movw	r24, r16
    7408:	0e 94 7c 87 	call	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    740c:	ec ef       	ldi	r30, 0xFC	; 252
    740e:	ce 2e       	mov	r12, r30
    7410:	dd 24       	eor	r13, r13
    7412:	da 94       	dec	r13
    7414:	81 e0       	ldi	r24, 0x01	; 1
    7416:	a8 1a       	sub	r10, r24
    7418:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    741a:	09 f4       	brne	.+2      	; 0x741e <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    741c:	2c cf       	rjmp	.-424    	; 0x7276 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    741e:	ff ef       	ldi	r31, 0xFF	; 255
    7420:	cf 16       	cp	r12, r31
    7422:	df 06       	cpc	r13, r31
    7424:	09 f0       	breq	.+2      	; 0x7428 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    7426:	27 cf       	rjmp	.-434    	; 0x7276 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    7428:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    742c:	3b 01       	movw	r6, r22
    742e:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7430:	c8 01       	movw	r24, r16
    7432:	0e 94 a1 a0 	call	0x14142	; 0x14142 <EthernetUDP::parsePacket()>
    7436:	18 16       	cp	r1, r24
    7438:	19 06       	cpc	r1, r25
    743a:	0c f4       	brge	.+2      	; 0x743e <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    743c:	b2 cf       	rjmp	.-156    	; 0x73a2 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    743e:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    7442:	66 19       	sub	r22, r6
    7444:	77 09       	sbc	r23, r7
    7446:	88 09       	sbc	r24, r8
    7448:	99 09       	sbc	r25, r9
    744a:	69 38       	cpi	r22, 0x89	; 137
    744c:	73 41       	sbci	r23, 0x13	; 19
    744e:	81 05       	cpc	r24, r1
    7450:	91 05       	cpc	r25, r1
    7452:	08 f0       	brcs	.+2      	; 0x7456 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    7454:	db c0       	rjmp	.+438    	; 0x760c <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    7456:	62 e3       	ldi	r22, 0x32	; 50
    7458:	70 e0       	ldi	r23, 0x00	; 0
    745a:	80 e0       	ldi	r24, 0x00	; 0
    745c:	90 e0       	ldi	r25, 0x00	; 0
    745e:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
    7462:	e6 cf       	rjmp	.-52     	; 0x7430 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    7464:	8f 70       	andi	r24, 0x0F	; 15
    7466:	92 70       	andi	r25, 0x02	; 2
    7468:	89 2b       	or	r24, r25
    746a:	41 f0       	breq	.+16     	; 0x747c <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    746c:	c8 01       	movw	r24, r16
    746e:	0e 94 7c 87 	call	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    7472:	7b ef       	ldi	r23, 0xFB	; 251
    7474:	c7 2e       	mov	r12, r23
    7476:	dd 24       	eor	r13, r13
    7478:	da 94       	dec	r13
    747a:	cc cf       	rjmp	.-104    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    747c:	6f 80       	ldd	r6, Y+7	; 0x07
    747e:	78 84       	ldd	r7, Y+8	; 0x08
    7480:	76 24       	eor	r7, r6
    7482:	67 24       	eor	r6, r7
    7484:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7486:	d1 2c       	mov	r13, r1
    7488:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    748a:	61 14       	cp	r6, r1
    748c:	71 04       	cpc	r7, r1
    748e:	d1 f4       	brne	.+52     	; 0x74c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    7490:	c8 01       	movw	r24, r16
    7492:	0e 94 7c 87 	call	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    7496:	6a ef       	ldi	r22, 0xFA	; 250
    7498:	c6 2e       	mov	r12, r22
    749a:	dd 24       	eor	r13, r13
    749c:	da 94       	dec	r13
    749e:	ba cf       	rjmp	.-140    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    74a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    74a2:	81 11       	cpse	r24, r1
    74a4:	17 c0       	rjmp	.+46     	; 0x74d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    74a6:	c8 01       	movw	r24, r16
    74a8:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    74ac:	c8 01       	movw	r24, r16
    74ae:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    74b2:	c8 01       	movw	r24, r16
    74b4:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    74b8:	c8 01       	movw	r24, r16
    74ba:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    74be:	ff ef       	ldi	r31, 0xFF	; 255
    74c0:	cf 1a       	sub	r12, r31
    74c2:	df 0a       	sbc	r13, r31
    74c4:	8d 81       	ldd	r24, Y+5	; 0x05
    74c6:	9e 81       	ldd	r25, Y+6	; 0x06
    74c8:	98 27       	eor	r25, r24
    74ca:	89 27       	eor	r24, r25
    74cc:	98 27       	eor	r25, r24
    74ce:	c8 16       	cp	r12, r24
    74d0:	d9 06       	cpc	r13, r25
    74d2:	a8 f4       	brcc	.+42     	; 0x74fe <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    74d4:	41 e0       	ldi	r20, 0x01	; 1
    74d6:	50 e0       	ldi	r21, 0x00	; 0
    74d8:	be 01       	movw	r22, r28
    74da:	63 5f       	subi	r22, 0xF3	; 243
    74dc:	7f 4f       	sbci	r23, 0xFF	; 255
    74de:	c8 01       	movw	r24, r16
    74e0:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    74e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    74e6:	88 23       	and	r24, r24
    74e8:	d9 f2       	breq	.-74     	; 0x74a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    74ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    74ec:	9f ef       	ldi	r25, 0xFF	; 255
    74ee:	98 0f       	add	r25, r24
    74f0:	9d 87       	std	Y+13, r25	; 0x0d
    74f2:	88 23       	and	r24, r24
    74f4:	a9 f2       	breq	.-86     	; 0x74a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    74f6:	c8 01       	movw	r24, r16
    74f8:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    74fc:	f6 cf       	rjmp	.-20     	; 0x74ea <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    74fe:	91 2c       	mov	r9, r1
    7500:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    7502:	41 e0       	ldi	r20, 0x01	; 1
    7504:	50 e0       	ldi	r21, 0x00	; 0
    7506:	be 01       	movw	r22, r28
    7508:	6d 5e       	subi	r22, 0xED	; 237
    750a:	7f 4f       	sbci	r23, 0xFF	; 255
    750c:	c8 01       	movw	r24, r16
    750e:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    7512:	8b 89       	ldd	r24, Y+19	; 0x13
    7514:	98 2f       	mov	r25, r24
    7516:	90 7c       	andi	r25, 0xC0	; 192
    7518:	61 f4       	brne	.+24     	; 0x7532 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    751a:	88 23       	and	r24, r24
    751c:	89 f0       	breq	.+34     	; 0x7540 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    751e:	8b 89       	ldd	r24, Y+19	; 0x13
    7520:	9f ef       	ldi	r25, 0xFF	; 255
    7522:	98 0f       	add	r25, r24
    7524:	9b 8b       	std	Y+19, r25	; 0x13
    7526:	88 23       	and	r24, r24
    7528:	41 f0       	breq	.+16     	; 0x753a <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    752a:	c8 01       	movw	r24, r16
    752c:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    7530:	f6 cf       	rjmp	.-20     	; 0x751e <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    7532:	c8 01       	movw	r24, r16
    7534:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    7538:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    753a:	8b 89       	ldd	r24, Y+19	; 0x13
    753c:	81 11       	cpse	r24, r1
    753e:	e1 cf       	rjmp	.-62     	; 0x7502 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    7540:	42 e0       	ldi	r20, 0x02	; 2
    7542:	50 e0       	ldi	r21, 0x00	; 0
    7544:	be 01       	movw	r22, r28
    7546:	61 5f       	subi	r22, 0xF1	; 241
    7548:	7f 4f       	sbci	r23, 0xFF	; 255
    754a:	c8 01       	movw	r24, r16
    754c:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    7550:	42 e0       	ldi	r20, 0x02	; 2
    7552:	50 e0       	ldi	r21, 0x00	; 0
    7554:	be 01       	movw	r22, r28
    7556:	63 5f       	subi	r22, 0xF3	; 243
    7558:	7f 4f       	sbci	r23, 0xFF	; 255
    755a:	c8 01       	movw	r24, r16
    755c:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7560:	c8 01       	movw	r24, r16
    7562:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    7566:	c8 01       	movw	r24, r16
    7568:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    756c:	c8 01       	movw	r24, r16
    756e:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
    7572:	c8 01       	movw	r24, r16
    7574:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    7578:	42 e0       	ldi	r20, 0x02	; 2
    757a:	50 e0       	ldi	r21, 0x00	; 0
    757c:	be 01       	movw	r22, r28
    757e:	6f 5e       	subi	r22, 0xEF	; 239
    7580:	7f 4f       	sbci	r23, 0xFF	; 255
    7582:	c8 01       	movw	r24, r16
    7584:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    7588:	8f 85       	ldd	r24, Y+15	; 0x0f
    758a:	98 89       	ldd	r25, Y+16	; 0x10
    758c:	81 15       	cp	r24, r1
    758e:	91 40       	sbci	r25, 0x01	; 1
    7590:	e9 f4       	brne	.+58     	; 0x75cc <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    7592:	cd 84       	ldd	r12, Y+13	; 0x0d
    7594:	de 84       	ldd	r13, Y+14	; 0x0e
    7596:	dc 24       	eor	r13, r12
    7598:	cd 24       	eor	r12, r13
    759a:	dc 24       	eor	r13, r12
    759c:	81 e0       	ldi	r24, 0x01	; 1
    759e:	c8 16       	cp	r12, r24
    75a0:	d1 04       	cpc	r13, r1
    75a2:	a1 f4       	brne	.+40     	; 0x75cc <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    75a4:	89 89       	ldd	r24, Y+17	; 0x11
    75a6:	9a 89       	ldd	r25, Y+18	; 0x12
    75a8:	81 15       	cp	r24, r1
    75aa:	94 40       	sbci	r25, 0x04	; 4
    75ac:	41 f0       	breq	.+16     	; 0x75be <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    75ae:	c8 01       	movw	r24, r16
    75b0:	0e 94 7c 87 	call	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    75b4:	57 ef       	ldi	r21, 0xF7	; 247
    75b6:	c5 2e       	mov	r12, r21
    75b8:	dd 24       	eor	r13, r13
    75ba:	da 94       	dec	r13
    75bc:	2b cf       	rjmp	.-426    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    75be:	44 e0       	ldi	r20, 0x04	; 4
    75c0:	50 e0       	ldi	r21, 0x00	; 0
    75c2:	b2 01       	movw	r22, r4
    75c4:	c8 01       	movw	r24, r16
    75c6:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <EthernetUDP::read(unsigned char*, unsigned int)>
    75ca:	24 cf       	rjmp	.-440    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    75cc:	d1 2c       	mov	r13, r1
    75ce:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    75d0:	89 89       	ldd	r24, Y+17	; 0x11
    75d2:	9a 89       	ldd	r25, Y+18	; 0x12
    75d4:	98 27       	eor	r25, r24
    75d6:	89 27       	eor	r24, r25
    75d8:	98 27       	eor	r25, r24
    75da:	c8 16       	cp	r12, r24
    75dc:	d9 06       	cpc	r13, r25
    75de:	38 f4       	brcc	.+14     	; 0x75ee <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    75e0:	c8 01       	movw	r24, r16
    75e2:	0e 94 77 a0 	call	0x140ee	; 0x140ee <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    75e6:	ff ef       	ldi	r31, 0xFF	; 255
    75e8:	cf 1a       	sub	r12, r31
    75ea:	df 0a       	sbc	r13, r31
    75ec:	f1 cf       	rjmp	.-30     	; 0x75d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    75ee:	2f ef       	ldi	r18, 0xFF	; 255
    75f0:	82 1a       	sub	r8, r18
    75f2:	92 0a       	sbc	r9, r18
    75f4:	68 14       	cp	r6, r8
    75f6:	79 04       	cpc	r7, r9
    75f8:	09 f0       	breq	.+2      	; 0x75fc <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    75fa:	83 cf       	rjmp	.-250    	; 0x7502 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    75fc:	c8 01       	movw	r24, r16
    75fe:	0e 94 7c 87 	call	0x10ef8	; 0x10ef8 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    7602:	46 ef       	ldi	r20, 0xF6	; 246
    7604:	c4 2e       	mov	r12, r20
    7606:	dd 24       	eor	r13, r13
    7608:	da 94       	dec	r13
    760a:	04 cf       	rjmp	.-504    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    760c:	cc 24       	eor	r12, r12
    760e:	ca 94       	dec	r12
    7610:	dc 2c       	mov	r13, r12
    7612:	00 cf       	rjmp	.-512    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    7614:	2e ef       	ldi	r18, 0xFE	; 254
    7616:	c2 2e       	mov	r12, r18
    7618:	dd 24       	eor	r13, r13
    761a:	da 94       	dec	r13
    761c:	fb ce       	rjmp	.-522    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    761e:	9d ef       	ldi	r25, 0xFD	; 253
    7620:	c9 2e       	mov	r12, r25
    7622:	dd 24       	eor	r13, r13
    7624:	da 94       	dec	r13
    7626:	f6 ce       	rjmp	.-532    	; 0x7414 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    7628:	8e ef       	ldi	r24, 0xFE	; 254
    762a:	c8 2e       	mov	r12, r24
    762c:	dd 24       	eor	r13, r13
    762e:	da 94       	dec	r13
    7630:	d0 cd       	rjmp	.-1120   	; 0x71d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    7632:	d1 2c       	mov	r13, r1
    7634:	c1 2c       	mov	r12, r1
    7636:	cd cd       	rjmp	.-1126   	; 0x71d2 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00007638 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    7638:	cf 92       	push	r12
    763a:	df 92       	push	r13
    763c:	ef 92       	push	r14
    763e:	ff 92       	push	r15
    7640:	0f 93       	push	r16
    7642:	1f 93       	push	r17
    7644:	cf 93       	push	r28
    7646:	df 93       	push	r29
    7648:	cd b7       	in	r28, 0x3d	; 61
    764a:	de b7       	in	r29, 0x3e	; 62
    764c:	af 97       	sbiw	r28, 0x2f	; 47
    764e:	0f b6       	in	r0, 0x3f	; 63
    7650:	f8 94       	cli
    7652:	de bf       	out	0x3e, r29	; 62
    7654:	0f be       	out	0x3f, r0	; 63
    7656:	cd bf       	out	0x3d, r28	; 61
    7658:	7c 01       	movw	r14, r24
    765a:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    765c:	02 ee       	ldi	r16, 0xE2	; 226
    765e:	12 e0       	ldi	r17, 0x02	; 2
    7660:	1a 83       	std	Y+2, r17	; 0x02
    7662:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    7664:	1c 86       	std	Y+12, r1	; 0x0c
    7666:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7668:	88 ee       	ldi	r24, 0xE8	; 232
    766a:	93 e0       	ldi	r25, 0x03	; 3
    766c:	a0 e0       	ldi	r26, 0x00	; 0
    766e:	b0 e0       	ldi	r27, 0x00	; 0
    7670:	8d 87       	std	Y+13, r24	; 0x0d
    7672:	9e 87       	std	Y+14, r25	; 0x0e
    7674:	af 87       	std	Y+15, r26	; 0x0f
    7676:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    7678:	88 e9       	ldi	r24, 0x98	; 152
    767a:	92 e0       	ldi	r25, 0x02	; 2
    767c:	9a 87       	std	Y+10, r25	; 0x0a
    767e:	89 87       	std	Y+9, r24	; 0x09
    7680:	88 e0       	ldi	r24, 0x08	; 8
    7682:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    7684:	19 8f       	std	Y+25, r17	; 0x19
    7686:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    7688:	1a 8e       	std	Y+26, r1	; 0x1a
    768a:	1b 8e       	std	Y+27, r1	; 0x1b
    768c:	1c 8e       	std	Y+28, r1	; 0x1c
    768e:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    7690:	1b a7       	std	Y+43, r17	; 0x2b
    7692:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    7694:	1c a6       	std	Y+44, r1	; 0x2c
    7696:	1d a6       	std	Y+45, r1	; 0x2d
    7698:	1e a6       	std	Y+46, r1	; 0x2e
    769a:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    769c:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <Ethernet+0x2>
    76a0:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <Ethernet+0x3>
    76a4:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <Ethernet+0x4>
    76a8:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <Ethernet+0x5>
    76ac:	8e a3       	std	Y+38, r24	; 0x26
    76ae:	9f a3       	std	Y+39, r25	; 0x27
    76b0:	a8 a7       	std	Y+40, r26	; 0x28
    76b2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    76b4:	8b 83       	std	Y+3, r24	; 0x03
    76b6:	9c 83       	std	Y+4, r25	; 0x04
    76b8:	ad 83       	std	Y+5, r26	; 0x05
    76ba:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    76bc:	18 86       	std	Y+8, r1	; 0x08
    76be:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    76c0:	ae 01       	movw	r20, r28
    76c2:	46 5d       	subi	r20, 0xD6	; 214
    76c4:	5f 4f       	sbci	r21, 0xFF	; 255
    76c6:	ce 01       	movw	r24, r28
    76c8:	01 96       	adiw	r24, 0x01	; 1
    76ca:	0e 94 93 38 	call	0x7126	; 0x7126 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    76ce:	81 30       	cpi	r24, 0x01	; 1
    76d0:	91 05       	cpc	r25, r1
    76d2:	b1 f4       	brne	.+44     	; 0x7700 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    76d4:	d7 01       	movw	r26, r14
    76d6:	ed 91       	ld	r30, X+
    76d8:	fc 91       	ld	r31, X
    76da:	06 84       	ldd	r0, Z+14	; 0x0e
    76dc:	f7 85       	ldd	r31, Z+15	; 0x0f
    76de:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    76e0:	1d a3       	std	Y+37, r17	; 0x25
    76e2:	0c a3       	std	Y+36, r16	; 0x24
    76e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    76e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    76e8:	ae a5       	ldd	r26, Y+46	; 0x2e
    76ea:	bf a5       	ldd	r27, Y+47	; 0x2f
    76ec:	8e a3       	std	Y+38, r24	; 0x26
    76ee:	9f a3       	std	Y+39, r25	; 0x27
    76f0:	a8 a7       	std	Y+40, r26	; 0x28
    76f2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    76f4:	a6 01       	movw	r20, r12
    76f6:	be 01       	movw	r22, r28
    76f8:	6c 5d       	subi	r22, 0xDC	; 220
    76fa:	7f 4f       	sbci	r23, 0xFF	; 255
    76fc:	c7 01       	movw	r24, r14
    76fe:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    7700:	af 96       	adiw	r28, 0x2f	; 47
    7702:	0f b6       	in	r0, 0x3f	; 63
    7704:	f8 94       	cli
    7706:	de bf       	out	0x3e, r29	; 62
    7708:	0f be       	out	0x3f, r0	; 63
    770a:	cd bf       	out	0x3d, r28	; 61
    770c:	df 91       	pop	r29
    770e:	cf 91       	pop	r28
    7710:	1f 91       	pop	r17
    7712:	0f 91       	pop	r16
    7714:	ff 90       	pop	r15
    7716:	ef 90       	pop	r14
    7718:	df 90       	pop	r13
    771a:	cf 90       	pop	r12
    771c:	08 95       	ret

0000771e <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    771e:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    7720:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    7722:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    7724:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SPIClass::initialized>
    7728:	81 11       	cpse	r24, r1
    772a:	27 c0       	rjmp	.+78     	; 0x777a <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    772c:	e4 ec       	ldi	r30, 0xC4	; 196
    772e:	f3 e4       	ldi	r31, 0x43	; 67
    7730:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    7732:	ee e7       	ldi	r30, 0x7E	; 126
    7734:	f3 e4       	ldi	r31, 0x43	; 67
    7736:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    7738:	e8 2f       	mov	r30, r24
    773a:	f0 e0       	ldi	r31, 0x00	; 0
    773c:	ee 0f       	add	r30, r30
    773e:	ff 1f       	adc	r31, r31
    7740:	eb 5d       	subi	r30, 0xDB	; 219
    7742:	f1 4c       	sbci	r31, 0xC1	; 193
    7744:	a5 91       	lpm	r26, Z+
    7746:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    7748:	ec 91       	ld	r30, X
    774a:	e9 23       	and	r30, r25
    774c:	21 f4       	brne	.+8      	; 0x7756 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    774e:	61 e0       	ldi	r22, 0x01	; 1
    7750:	88 e0       	ldi	r24, 0x08	; 8
    7752:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    7756:	61 e0       	ldi	r22, 0x01	; 1
    7758:	88 e0       	ldi	r24, 0x08	; 8
    775a:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    775e:	8c b5       	in	r24, 0x2c	; 44
    7760:	80 61       	ori	r24, 0x10	; 16
    7762:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    7764:	8c b5       	in	r24, 0x2c	; 44
    7766:	80 64       	ori	r24, 0x40	; 64
    7768:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    776a:	61 e0       	ldi	r22, 0x01	; 1
    776c:	89 e0       	ldi	r24, 0x09	; 9
    776e:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    7772:	61 e0       	ldi	r22, 0x01	; 1
    7774:	8a e0       	ldi	r24, 0x0A	; 10
    7776:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    777a:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SPIClass::initialized>
    777e:	8f 5f       	subi	r24, 0xFF	; 255
    7780:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    7784:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    7786:	cf 91       	pop	r28
    7788:	08 95       	ret

0000778a <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    778a:	7f 92       	push	r7
    778c:	8f 92       	push	r8
    778e:	9f 92       	push	r9
    7790:	af 92       	push	r10
    7792:	bf 92       	push	r11
    7794:	cf 92       	push	r12
    7796:	df 92       	push	r13
    7798:	ef 92       	push	r14
    779a:	ff 92       	push	r15
    779c:	0f 93       	push	r16
    779e:	1f 93       	push	r17
    77a0:	cf 93       	push	r28
    77a2:	df 93       	push	r29
    77a4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    77a6:	fc 01       	movw	r30, r24
    77a8:	86 81       	ldd	r24, Z+6	; 0x06
    77aa:	81 11       	cpse	r24, r1
    77ac:	35 c0       	rjmp	.+106    	; 0x7818 <SoftSPIB::transfer(unsigned char)+0x8e>
    77ae:	86 2f       	mov	r24, r22
    77b0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    77b2:	ec 01       	movw	r28, r24
    77b4:	d6 95       	lsr	r29
    77b6:	dc 2f       	mov	r29, r28
    77b8:	cc 27       	eor	r28, r28
    77ba:	d7 95       	ror	r29
    77bc:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    77be:	66 1f       	adc	r22, r22
    77c0:	66 27       	eor	r22, r22
    77c2:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    77c4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    77c6:	ec 01       	movw	r28, r24
    77c8:	55 e0       	ldi	r21, 0x05	; 5
    77ca:	cc 0f       	add	r28, r28
    77cc:	dd 1f       	adc	r29, r29
    77ce:	5a 95       	dec	r21
    77d0:	e1 f7       	brne	.-8      	; 0x77ca <SoftSPIB::transfer(unsigned char)+0x40>
    77d2:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    77d4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    77d6:	ec 01       	movw	r28, r24
    77d8:	73 e0       	ldi	r23, 0x03	; 3
    77da:	cc 0f       	add	r28, r28
    77dc:	dd 1f       	adc	r29, r29
    77de:	7a 95       	dec	r23
    77e0:	e1 f7       	brne	.-8      	; 0x77da <SoftSPIB::transfer(unsigned char)+0x50>
    77e2:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    77e4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    77e6:	ec 01       	movw	r28, r24
    77e8:	cc 0f       	add	r28, r28
    77ea:	dd 1f       	adc	r29, r29
    77ec:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    77ee:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    77f0:	ec 01       	movw	r28, r24
    77f2:	d5 95       	asr	r29
    77f4:	c7 95       	ror	r28
    77f6:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    77f8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    77fa:	ec 01       	movw	r28, r24
    77fc:	a3 e0       	ldi	r26, 0x03	; 3
    77fe:	d5 95       	asr	r29
    7800:	c7 95       	ror	r28
    7802:	aa 95       	dec	r26
    7804:	e1 f7       	brne	.-8      	; 0x77fe <SoftSPIB::transfer(unsigned char)+0x74>
    7806:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    7808:	6c 2b       	or	r22, r28
    780a:	b5 e0       	ldi	r27, 0x05	; 5
    780c:	95 95       	asr	r25
    780e:	87 95       	ror	r24
    7810:	ba 95       	dec	r27
    7812:	e1 f7       	brne	.-8      	; 0x780c <SoftSPIB::transfer(unsigned char)+0x82>
    7814:	82 70       	andi	r24, 0x02	; 2
    7816:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    7818:	91 e0       	ldi	r25, 0x01	; 1
    781a:	80 e0       	ldi	r24, 0x00	; 0
    781c:	f8 01       	movw	r30, r16
    781e:	21 81       	ldd	r18, Z+1	; 0x01
    7820:	21 11       	cpse	r18, r1
    7822:	01 c0       	rjmp	.+2      	; 0x7826 <SoftSPIB::transfer(unsigned char)+0x9c>
    7824:	90 e0       	ldi	r25, 0x00	; 0
    7826:	e9 2e       	mov	r14, r25
    7828:	f8 2e       	mov	r15, r24
    782a:	d1 2c       	mov	r13, r1
    782c:	c1 2c       	mov	r12, r1
    782e:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    7830:	c6 2f       	mov	r28, r22
    7832:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    7834:	f8 01       	movw	r30, r16
    7836:	80 81       	ld	r24, Z
    7838:	88 23       	and	r24, r24
    783a:	39 f0       	breq	.+14     	; 0x784a <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    783c:	f1 e0       	ldi	r31, 0x01	; 1
    783e:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    7840:	6e 2d       	mov	r22, r14
    7842:	f8 01       	movw	r30, r16
    7844:	85 81       	ldd	r24, Z+5	; 0x05
    7846:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    784a:	be 01       	movw	r22, r28
    784c:	0c 2c       	mov	r0, r12
    784e:	02 c0       	rjmp	.+4      	; 0x7854 <SoftSPIB::transfer(unsigned char)+0xca>
    7850:	75 95       	asr	r23
    7852:	67 95       	ror	r22
    7854:	0a 94       	dec	r0
    7856:	e2 f7       	brpl	.-8      	; 0x7850 <SoftSPIB::transfer(unsigned char)+0xc6>
    7858:	61 70       	andi	r22, 0x01	; 1
    785a:	f8 01       	movw	r30, r16
    785c:	84 81       	ldd	r24, Z+4	; 0x04
    785e:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    7862:	57 01       	movw	r10, r14
    7864:	f1 e0       	ldi	r31, 0x01	; 1
    7866:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    7868:	6a 2d       	mov	r22, r10
    786a:	f8 01       	movw	r30, r16
    786c:	85 81       	ldd	r24, Z+5	; 0x05
    786e:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    7872:	f8 01       	movw	r30, r16
    7874:	23 81       	ldd	r18, Z+3	; 0x03
    7876:	30 e0       	ldi	r19, 0x00	; 0
    7878:	f9 01       	movw	r30, r18
    787a:	eb 5c       	subi	r30, 0xCB	; 203
    787c:	f1 4c       	sbci	r31, 0xC1	; 193
    787e:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    7880:	f9 01       	movw	r30, r18
    7882:	ea 58       	subi	r30, 0x8A	; 138
    7884:	fc 4b       	sbci	r31, 0xBC	; 188
    7886:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    7888:	f9 01       	movw	r30, r18
    788a:	e4 54       	subi	r30, 0x44	; 68
    788c:	fc 4b       	sbci	r31, 0xBC	; 188
    788e:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    7890:	77 20       	and	r7, r7
    7892:	a9 f1       	breq	.+106    	; 0x78fe <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7894:	81 11       	cpse	r24, r1
    7896:	0e 94 20 90 	call	0x12040	; 0x12040 <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    789a:	e7 2d       	mov	r30, r7
    789c:	f0 e0       	ldi	r31, 0x00	; 0
    789e:	ee 0f       	add	r30, r30
    78a0:	ff 1f       	adc	r31, r31
    78a2:	ea 59       	subi	r30, 0x9A	; 154
    78a4:	fc 4b       	sbci	r31, 0xBC	; 188
    78a6:	a5 91       	lpm	r26, Z+
    78a8:	b4 91       	lpm	r27, Z
    78aa:	ec 91       	ld	r30, X
    78ac:	8e 22       	and	r8, r30
    78ae:	31 e0       	ldi	r19, 0x01	; 1
    78b0:	20 e0       	ldi	r18, 0x00	; 0
    78b2:	09 f4       	brne	.+2      	; 0x78b6 <SoftSPIB::transfer(unsigned char)+0x12c>
    78b4:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    78b6:	83 2f       	mov	r24, r19
    78b8:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    78ba:	f8 01       	movw	r30, r16
    78bc:	26 81       	ldd	r18, Z+6	; 0x06
    78be:	21 11       	cpse	r18, r1
    78c0:	21 c0       	rjmp	.+66     	; 0x7904 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    78c2:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    78c4:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    78c6:	f8 01       	movw	r30, r16
    78c8:	80 81       	ld	r24, Z
    78ca:	88 23       	and	r24, r24
    78cc:	11 f1       	breq	.+68     	; 0x7912 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    78ce:	75 01       	movw	r14, r10
    78d0:	ff ef       	ldi	r31, 0xFF	; 255
    78d2:	cf 1a       	sub	r12, r31
    78d4:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    78d6:	28 e0       	ldi	r18, 0x08	; 8
    78d8:	c2 16       	cp	r12, r18
    78da:	d1 04       	cpc	r13, r1
    78dc:	09 f0       	breq	.+2      	; 0x78e0 <SoftSPIB::transfer(unsigned char)+0x156>
    78de:	aa cf       	rjmp	.-172    	; 0x7834 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    78e0:	89 2d       	mov	r24, r9
    78e2:	df 91       	pop	r29
    78e4:	cf 91       	pop	r28
    78e6:	1f 91       	pop	r17
    78e8:	0f 91       	pop	r16
    78ea:	ff 90       	pop	r15
    78ec:	ef 90       	pop	r14
    78ee:	df 90       	pop	r13
    78f0:	cf 90       	pop	r12
    78f2:	bf 90       	pop	r11
    78f4:	af 90       	pop	r10
    78f6:	9f 90       	pop	r9
    78f8:	8f 90       	pop	r8
    78fa:	7f 90       	pop	r7
    78fc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    78fe:	90 e0       	ldi	r25, 0x00	; 0
    7900:	80 e0       	ldi	r24, 0x00	; 0
    7902:	db cf       	rjmp	.-74     	; 0x78ba <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    7904:	96 95       	lsr	r25
    7906:	98 2f       	mov	r25, r24
    7908:	88 27       	eor	r24, r24
    790a:	97 95       	ror	r25
    790c:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    790e:	96 94       	lsr	r9
    7910:	d9 cf       	rjmp	.-78     	; 0x78c4 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    7912:	6e 2d       	mov	r22, r14
    7914:	85 81       	ldd	r24, Z+5	; 0x05
    7916:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
    791a:	da cf       	rjmp	.-76     	; 0x78d0 <SoftSPIB::transfer(unsigned char)+0x146>

0000791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    791c:	cf 93       	push	r28
    791e:	df 93       	push	r29
    7920:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    7922:	a6 a5       	ldd	r26, Z+46	; 0x2e
    7924:	b7 a5       	ldd	r27, Z+47	; 0x2f
    7926:	8c 91       	ld	r24, X
    7928:	92 ad       	ldd	r25, Z+58	; 0x3a
    792a:	89 23       	and	r24, r25
    792c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    792e:	a0 a9       	ldd	r26, Z+48	; 0x30
    7930:	b1 a9       	ldd	r27, Z+49	; 0x31
    7932:	8c 91       	ld	r24, X
    7934:	93 ad       	ldd	r25, Z+59	; 0x3b
    7936:	89 23       	and	r24, r25
    7938:	8c 93       	st	X, r24
    793a:	72 b9       	out	0x02, r23	; 2
    793c:	a2 a9       	ldd	r26, Z+50	; 0x32
    793e:	b3 a9       	ldd	r27, Z+51	; 0x33
    7940:	8c 91       	ld	r24, X
    7942:	94 ad       	ldd	r25, Z+60	; 0x3c
    7944:	89 23       	and	r24, r25
    7946:	8c 93       	st	X, r24
    7948:	a2 a9       	ldd	r26, Z+50	; 0x32
    794a:	b3 a9       	ldd	r27, Z+51	; 0x33
    794c:	8c 91       	ld	r24, X
    794e:	90 ad       	ldd	r25, Z+56	; 0x38
    7950:	89 2b       	or	r24, r25
    7952:	8c 93       	st	X, r24
    7954:	62 b9       	out	0x02, r22	; 2
    7956:	a2 a9       	ldd	r26, Z+50	; 0x32
    7958:	b3 a9       	ldd	r27, Z+51	; 0x33
    795a:	8c 91       	ld	r24, X
    795c:	94 ad       	ldd	r25, Z+60	; 0x3c
    795e:	89 23       	and	r24, r25
    7960:	8c 93       	st	X, r24
    7962:	a2 a9       	ldd	r26, Z+50	; 0x32
    7964:	b3 a9       	ldd	r27, Z+51	; 0x33
    7966:	8c 91       	ld	r24, X
    7968:	90 ad       	ldd	r25, Z+56	; 0x38
    796a:	89 2b       	or	r24, r25
    796c:	8c 93       	st	X, r24
    796e:	a0 a9       	ldd	r26, Z+48	; 0x30
    7970:	b1 a9       	ldd	r27, Z+49	; 0x31
    7972:	8c 91       	ld	r24, X
    7974:	97 a9       	ldd	r25, Z+55	; 0x37
    7976:	89 2b       	or	r24, r25
    7978:	8c 93       	st	X, r24
    797a:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    797c:	9f ef       	ldi	r25, 0xFF	; 255
    797e:	92 0f       	add	r25, r18
    7980:	12 16       	cp	r1, r18
    7982:	0c f0       	brlt	.+2      	; 0x7986 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    7984:	3f c0       	rjmp	.+126    	; 0x7a04 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    7986:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    7988:	82 b9       	out	0x02, r24	; 2
    798a:	c2 a9       	ldd	r28, Z+50	; 0x32
    798c:	d3 a9       	ldd	r29, Z+51	; 0x33
    798e:	88 81       	ld	r24, Y
    7990:	24 ad       	ldd	r18, Z+60	; 0x3c
    7992:	82 23       	and	r24, r18
    7994:	88 83       	st	Y, r24
    7996:	c2 a9       	ldd	r28, Z+50	; 0x32
    7998:	d3 a9       	ldd	r29, Z+51	; 0x33
    799a:	88 81       	ld	r24, Y
    799c:	20 ad       	ldd	r18, Z+56	; 0x38
    799e:	82 2b       	or	r24, r18
    79a0:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    79a2:	99 23       	and	r25, r25
    79a4:	69 f1       	breq	.+90     	; 0x7a00 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    79a6:	20 8d       	ldd	r18, Z+24	; 0x18
    79a8:	31 8d       	ldd	r19, Z+25	; 0x19
    79aa:	21 30       	cpi	r18, 0x01	; 1
    79ac:	31 05       	cpc	r19, r1
    79ae:	41 f5       	brne	.+80     	; 0x7a00 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    79b0:	6f 5f       	subi	r22, 0xFF	; 255
    79b2:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    79b4:	c0 a9       	ldd	r28, Z+48	; 0x30
    79b6:	d1 a9       	ldd	r29, Z+49	; 0x31
    79b8:	88 81       	ld	r24, Y
    79ba:	23 ad       	ldd	r18, Z+59	; 0x3b
    79bc:	82 23       	and	r24, r18
    79be:	88 83       	st	Y, r24
    79c0:	72 b9       	out	0x02, r23	; 2
    79c2:	c2 a9       	ldd	r28, Z+50	; 0x32
    79c4:	d3 a9       	ldd	r29, Z+51	; 0x33
    79c6:	88 81       	ld	r24, Y
    79c8:	24 ad       	ldd	r18, Z+60	; 0x3c
    79ca:	82 23       	and	r24, r18
    79cc:	88 83       	st	Y, r24
    79ce:	c2 a9       	ldd	r28, Z+50	; 0x32
    79d0:	d3 a9       	ldd	r29, Z+51	; 0x33
    79d2:	88 81       	ld	r24, Y
    79d4:	20 ad       	ldd	r18, Z+56	; 0x38
    79d6:	82 2b       	or	r24, r18
    79d8:	88 83       	st	Y, r24
    79da:	62 b9       	out	0x02, r22	; 2
    79dc:	c2 a9       	ldd	r28, Z+50	; 0x32
    79de:	d3 a9       	ldd	r29, Z+51	; 0x33
    79e0:	88 81       	ld	r24, Y
    79e2:	24 ad       	ldd	r18, Z+60	; 0x3c
    79e4:	82 23       	and	r24, r18
    79e6:	88 83       	st	Y, r24
    79e8:	c2 a9       	ldd	r28, Z+50	; 0x32
    79ea:	d3 a9       	ldd	r29, Z+51	; 0x33
    79ec:	88 81       	ld	r24, Y
    79ee:	20 ad       	ldd	r18, Z+56	; 0x38
    79f0:	82 2b       	or	r24, r18
    79f2:	88 83       	st	Y, r24
    79f4:	c0 a9       	ldd	r28, Z+48	; 0x30
    79f6:	d1 a9       	ldd	r29, Z+49	; 0x31
    79f8:	88 81       	ld	r24, Y
    79fa:	27 a9       	ldd	r18, Z+55	; 0x37
    79fc:	82 2b       	or	r24, r18
    79fe:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    7a00:	29 2f       	mov	r18, r25
    7a02:	bc cf       	rjmp	.-136    	; 0x797c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    7a04:	a6 a5       	ldd	r26, Z+46	; 0x2e
    7a06:	b7 a5       	ldd	r27, Z+47	; 0x2f
    7a08:	8c 91       	ld	r24, X
    7a0a:	96 a9       	ldd	r25, Z+54	; 0x36
    7a0c:	89 2b       	or	r24, r25
    7a0e:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    7a10:	df 91       	pop	r29
    7a12:	cf 91       	pop	r28
    7a14:	08 95       	ret

00007a16 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    7a16:	af 92       	push	r10
    7a18:	bf 92       	push	r11
    7a1a:	cf 92       	push	r12
    7a1c:	df 92       	push	r13
    7a1e:	ef 92       	push	r14
    7a20:	ff 92       	push	r15
    7a22:	0f 93       	push	r16
    7a24:	1f 93       	push	r17
    7a26:	cf 93       	push	r28
    7a28:	df 93       	push	r29
    7a2a:	00 d0       	rcall	.+0      	; 0x7a2c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    7a2c:	00 d0       	rcall	.+0      	; 0x7a2e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    7a2e:	1f 92       	push	r1
    7a30:	1f 92       	push	r1
    7a32:	cd b7       	in	r28, 0x3d	; 61
    7a34:	de b7       	in	r29, 0x3e	; 62
    7a36:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    7a38:	dc 01       	movw	r26, r24
    7a3a:	9e 96       	adiw	r26, 0x2e	; 46
    7a3c:	ed 91       	ld	r30, X+
    7a3e:	fc 91       	ld	r31, X
    7a40:	9f 97       	sbiw	r26, 0x2f	; 47
    7a42:	80 81       	ld	r24, Z
    7a44:	da 96       	adiw	r26, 0x3a	; 58
    7a46:	9c 91       	ld	r25, X
    7a48:	da 97       	sbiw	r26, 0x3a	; 58
    7a4a:	89 23       	and	r24, r25
    7a4c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    7a4e:	58 96       	adiw	r26, 0x18	; 24
    7a50:	8d 91       	ld	r24, X+
    7a52:	9c 91       	ld	r25, X
    7a54:	59 97       	sbiw	r26, 0x19	; 25
    7a56:	00 97       	sbiw	r24, 0x00	; 0
    7a58:	09 f0       	breq	.+2      	; 0x7a5c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    7a5a:	44 c3       	rjmp	.+1672   	; 0x80e4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    7a5c:	56 96       	adiw	r26, 0x16	; 22
    7a5e:	8d 91       	ld	r24, X+
    7a60:	9c 91       	ld	r25, X
    7a62:	57 97       	sbiw	r26, 0x17	; 23
    7a64:	82 30       	cpi	r24, 0x02	; 2
    7a66:	91 05       	cpc	r25, r1
    7a68:	09 f4       	brne	.+2      	; 0x7a6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    7a6a:	0b c3       	rjmp	.+1558   	; 0x8082 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    7a6c:	83 30       	cpi	r24, 0x03	; 3
    7a6e:	91 05       	cpc	r25, r1
    7a70:	09 f4       	brne	.+2      	; 0x7a74 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    7a72:	23 c3       	rjmp	.+1606   	; 0x80ba <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    7a74:	01 97       	sbiw	r24, 0x01	; 1
    7a76:	09 f0       	breq	.+2      	; 0x7a7a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    7a78:	32 c3       	rjmp	.+1636   	; 0x80de <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    7a7a:	1e 96       	adiw	r26, 0x0e	; 14
    7a7c:	0d 90       	ld	r0, X+
    7a7e:	bc 91       	ld	r27, X
    7a80:	a0 2d       	mov	r26, r0
    7a82:	68 01       	movw	r12, r16
    7a84:	c0 94       	com	r12
    7a86:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    7a88:	40 95       	com	r20
    7a8a:	50 95       	com	r21
    7a8c:	fa 01       	movw	r30, r20
    7a8e:	ea 0f       	add	r30, r26
    7a90:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    7a92:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    7a94:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    7a96:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    7a98:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    7a9a:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    7a9c:	6a 0f       	add	r22, r26
    7a9e:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    7aa0:	d7 01       	movw	r26, r14
    7aa2:	d0 96       	adiw	r26, 0x30	; 48
    7aa4:	cd 90       	ld	r12, X+
    7aa6:	dc 90       	ld	r13, X
    7aa8:	d6 01       	movw	r26, r12
    7aaa:	bc 90       	ld	r11, X
    7aac:	d7 01       	movw	r26, r14
    7aae:	db 96       	adiw	r26, 0x3b	; 59
    7ab0:	ac 90       	ld	r10, X
    7ab2:	ba 20       	and	r11, r10
    7ab4:	d6 01       	movw	r26, r12
    7ab6:	bc 92       	st	X, r11
    7ab8:	12 b8       	out	0x02, r1	; 2
    7aba:	d7 01       	movw	r26, r14
    7abc:	d2 96       	adiw	r26, 0x32	; 50
    7abe:	cd 90       	ld	r12, X+
    7ac0:	dc 90       	ld	r13, X
    7ac2:	d6 01       	movw	r26, r12
    7ac4:	bc 90       	ld	r11, X
    7ac6:	d7 01       	movw	r26, r14
    7ac8:	dc 96       	adiw	r26, 0x3c	; 60
    7aca:	ac 90       	ld	r10, X
    7acc:	ba 20       	and	r11, r10
    7ace:	d6 01       	movw	r26, r12
    7ad0:	bc 92       	st	X, r11
    7ad2:	d7 01       	movw	r26, r14
    7ad4:	d2 96       	adiw	r26, 0x32	; 50
    7ad6:	cd 90       	ld	r12, X+
    7ad8:	dc 90       	ld	r13, X
    7ada:	d6 01       	movw	r26, r12
    7adc:	bc 90       	ld	r11, X
    7ade:	d7 01       	movw	r26, r14
    7ae0:	d8 96       	adiw	r26, 0x38	; 56
    7ae2:	ac 90       	ld	r10, X
    7ae4:	ba 28       	or	r11, r10
    7ae6:	d6 01       	movw	r26, r12
    7ae8:	bc 92       	st	X, r11
    7aea:	a0 e5       	ldi	r26, 0x50	; 80
    7aec:	a2 b9       	out	0x02, r26	; 2
    7aee:	d7 01       	movw	r26, r14
    7af0:	d2 96       	adiw	r26, 0x32	; 50
    7af2:	cd 90       	ld	r12, X+
    7af4:	dc 90       	ld	r13, X
    7af6:	d6 01       	movw	r26, r12
    7af8:	bc 90       	ld	r11, X
    7afa:	d7 01       	movw	r26, r14
    7afc:	dc 96       	adiw	r26, 0x3c	; 60
    7afe:	ac 90       	ld	r10, X
    7b00:	ba 20       	and	r11, r10
    7b02:	d6 01       	movw	r26, r12
    7b04:	bc 92       	st	X, r11
    7b06:	d7 01       	movw	r26, r14
    7b08:	d2 96       	adiw	r26, 0x32	; 50
    7b0a:	cd 90       	ld	r12, X+
    7b0c:	dc 90       	ld	r13, X
    7b0e:	d6 01       	movw	r26, r12
    7b10:	bc 90       	ld	r11, X
    7b12:	d7 01       	movw	r26, r14
    7b14:	d8 96       	adiw	r26, 0x38	; 56
    7b16:	ac 90       	ld	r10, X
    7b18:	ba 28       	or	r11, r10
    7b1a:	d6 01       	movw	r26, r12
    7b1c:	bc 92       	st	X, r11
    7b1e:	d7 01       	movw	r26, r14
    7b20:	d0 96       	adiw	r26, 0x30	; 48
    7b22:	cd 90       	ld	r12, X+
    7b24:	dc 90       	ld	r13, X
    7b26:	d6 01       	movw	r26, r12
    7b28:	bc 90       	ld	r11, X
    7b2a:	d7 01       	movw	r26, r14
    7b2c:	d7 96       	adiw	r26, 0x37	; 55
    7b2e:	ac 90       	ld	r10, X
    7b30:	ba 28       	or	r11, r10
    7b32:	d6 01       	movw	r26, r12
    7b34:	bc 92       	st	X, r11
    7b36:	72 b9       	out	0x02, r23	; 2
    7b38:	d7 01       	movw	r26, r14
    7b3a:	d2 96       	adiw	r26, 0x32	; 50
    7b3c:	ad 90       	ld	r10, X+
    7b3e:	bc 90       	ld	r11, X
    7b40:	d5 01       	movw	r26, r10
    7b42:	7c 91       	ld	r23, X
    7b44:	d7 01       	movw	r26, r14
    7b46:	dc 96       	adiw	r26, 0x3c	; 60
    7b48:	dc 90       	ld	r13, X
    7b4a:	7d 21       	and	r23, r13
    7b4c:	d5 01       	movw	r26, r10
    7b4e:	7c 93       	st	X, r23
    7b50:	d7 01       	movw	r26, r14
    7b52:	d2 96       	adiw	r26, 0x32	; 50
    7b54:	ad 90       	ld	r10, X+
    7b56:	bc 90       	ld	r11, X
    7b58:	d5 01       	movw	r26, r10
    7b5a:	7c 91       	ld	r23, X
    7b5c:	d7 01       	movw	r26, r14
    7b5e:	d8 96       	adiw	r26, 0x38	; 56
    7b60:	dc 90       	ld	r13, X
    7b62:	7d 29       	or	r23, r13
    7b64:	d5 01       	movw	r26, r10
    7b66:	7c 93       	st	X, r23
    7b68:	62 b9       	out	0x02, r22	; 2
    7b6a:	d7 01       	movw	r26, r14
    7b6c:	d2 96       	adiw	r26, 0x32	; 50
    7b6e:	cd 90       	ld	r12, X+
    7b70:	dc 90       	ld	r13, X
    7b72:	d6 01       	movw	r26, r12
    7b74:	6c 91       	ld	r22, X
    7b76:	d7 01       	movw	r26, r14
    7b78:	dc 96       	adiw	r26, 0x3c	; 60
    7b7a:	7c 91       	ld	r23, X
    7b7c:	67 23       	and	r22, r23
    7b7e:	d6 01       	movw	r26, r12
    7b80:	6c 93       	st	X, r22
    7b82:	d7 01       	movw	r26, r14
    7b84:	d2 96       	adiw	r26, 0x32	; 50
    7b86:	cd 90       	ld	r12, X+
    7b88:	dc 90       	ld	r13, X
    7b8a:	d6 01       	movw	r26, r12
    7b8c:	6c 91       	ld	r22, X
    7b8e:	d7 01       	movw	r26, r14
    7b90:	d8 96       	adiw	r26, 0x38	; 56
    7b92:	7c 91       	ld	r23, X
    7b94:	67 2b       	or	r22, r23
    7b96:	d6 01       	movw	r26, r12
    7b98:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    7b9a:	d7 01       	movw	r26, r14
    7b9c:	d0 96       	adiw	r26, 0x30	; 48
    7b9e:	cd 90       	ld	r12, X+
    7ba0:	dc 90       	ld	r13, X
    7ba2:	d6 01       	movw	r26, r12
    7ba4:	6c 91       	ld	r22, X
    7ba6:	d7 01       	movw	r26, r14
    7ba8:	db 96       	adiw	r26, 0x3b	; 59
    7baa:	7c 91       	ld	r23, X
    7bac:	67 23       	and	r22, r23
    7bae:	d6 01       	movw	r26, r12
    7bb0:	6c 93       	st	X, r22
    7bb2:	12 b8       	out	0x02, r1	; 2
    7bb4:	d7 01       	movw	r26, r14
    7bb6:	d2 96       	adiw	r26, 0x32	; 50
    7bb8:	cd 90       	ld	r12, X+
    7bba:	dc 90       	ld	r13, X
    7bbc:	d6 01       	movw	r26, r12
    7bbe:	6c 91       	ld	r22, X
    7bc0:	d7 01       	movw	r26, r14
    7bc2:	dc 96       	adiw	r26, 0x3c	; 60
    7bc4:	7c 91       	ld	r23, X
    7bc6:	67 23       	and	r22, r23
    7bc8:	d6 01       	movw	r26, r12
    7bca:	6c 93       	st	X, r22
    7bcc:	d7 01       	movw	r26, r14
    7bce:	d2 96       	adiw	r26, 0x32	; 50
    7bd0:	cd 90       	ld	r12, X+
    7bd2:	dc 90       	ld	r13, X
    7bd4:	d6 01       	movw	r26, r12
    7bd6:	6c 91       	ld	r22, X
    7bd8:	d7 01       	movw	r26, r14
    7bda:	d8 96       	adiw	r26, 0x38	; 56
    7bdc:	7c 91       	ld	r23, X
    7bde:	67 2b       	or	r22, r23
    7be0:	d6 01       	movw	r26, r12
    7be2:	6c 93       	st	X, r22
    7be4:	61 e5       	ldi	r22, 0x51	; 81
    7be6:	62 b9       	out	0x02, r22	; 2
    7be8:	d7 01       	movw	r26, r14
    7bea:	d2 96       	adiw	r26, 0x32	; 50
    7bec:	cd 90       	ld	r12, X+
    7bee:	dc 90       	ld	r13, X
    7bf0:	d6 01       	movw	r26, r12
    7bf2:	6c 91       	ld	r22, X
    7bf4:	d7 01       	movw	r26, r14
    7bf6:	dc 96       	adiw	r26, 0x3c	; 60
    7bf8:	7c 91       	ld	r23, X
    7bfa:	67 23       	and	r22, r23
    7bfc:	d6 01       	movw	r26, r12
    7bfe:	6c 93       	st	X, r22
    7c00:	d7 01       	movw	r26, r14
    7c02:	d2 96       	adiw	r26, 0x32	; 50
    7c04:	cd 90       	ld	r12, X+
    7c06:	dc 90       	ld	r13, X
    7c08:	d6 01       	movw	r26, r12
    7c0a:	6c 91       	ld	r22, X
    7c0c:	d7 01       	movw	r26, r14
    7c0e:	d8 96       	adiw	r26, 0x38	; 56
    7c10:	7c 91       	ld	r23, X
    7c12:	67 2b       	or	r22, r23
    7c14:	d6 01       	movw	r26, r12
    7c16:	6c 93       	st	X, r22
    7c18:	d7 01       	movw	r26, r14
    7c1a:	d0 96       	adiw	r26, 0x30	; 48
    7c1c:	cd 90       	ld	r12, X+
    7c1e:	dc 90       	ld	r13, X
    7c20:	d6 01       	movw	r26, r12
    7c22:	6c 91       	ld	r22, X
    7c24:	d7 01       	movw	r26, r14
    7c26:	d7 96       	adiw	r26, 0x37	; 55
    7c28:	7c 91       	ld	r23, X
    7c2a:	67 2b       	or	r22, r23
    7c2c:	d6 01       	movw	r26, r12
    7c2e:	6c 93       	st	X, r22
    7c30:	32 b9       	out	0x02, r19	; 2
    7c32:	d7 01       	movw	r26, r14
    7c34:	d2 96       	adiw	r26, 0x32	; 50
    7c36:	cd 90       	ld	r12, X+
    7c38:	dc 90       	ld	r13, X
    7c3a:	d6 01       	movw	r26, r12
    7c3c:	3c 91       	ld	r19, X
    7c3e:	d7 01       	movw	r26, r14
    7c40:	dc 96       	adiw	r26, 0x3c	; 60
    7c42:	6c 91       	ld	r22, X
    7c44:	36 23       	and	r19, r22
    7c46:	d6 01       	movw	r26, r12
    7c48:	3c 93       	st	X, r19
    7c4a:	d7 01       	movw	r26, r14
    7c4c:	d2 96       	adiw	r26, 0x32	; 50
    7c4e:	cd 90       	ld	r12, X+
    7c50:	dc 90       	ld	r13, X
    7c52:	d6 01       	movw	r26, r12
    7c54:	3c 91       	ld	r19, X
    7c56:	d7 01       	movw	r26, r14
    7c58:	d8 96       	adiw	r26, 0x38	; 56
    7c5a:	6c 91       	ld	r22, X
    7c5c:	36 2b       	or	r19, r22
    7c5e:	d6 01       	movw	r26, r12
    7c60:	3c 93       	st	X, r19
    7c62:	22 b9       	out	0x02, r18	; 2
    7c64:	d7 01       	movw	r26, r14
    7c66:	d2 96       	adiw	r26, 0x32	; 50
    7c68:	6d 91       	ld	r22, X+
    7c6a:	7c 91       	ld	r23, X
    7c6c:	db 01       	movw	r26, r22
    7c6e:	2c 91       	ld	r18, X
    7c70:	d7 01       	movw	r26, r14
    7c72:	dc 96       	adiw	r26, 0x3c	; 60
    7c74:	3c 91       	ld	r19, X
    7c76:	23 23       	and	r18, r19
    7c78:	db 01       	movw	r26, r22
    7c7a:	2c 93       	st	X, r18
    7c7c:	d7 01       	movw	r26, r14
    7c7e:	d2 96       	adiw	r26, 0x32	; 50
    7c80:	6d 91       	ld	r22, X+
    7c82:	7c 91       	ld	r23, X
    7c84:	db 01       	movw	r26, r22
    7c86:	2c 91       	ld	r18, X
    7c88:	d7 01       	movw	r26, r14
    7c8a:	d8 96       	adiw	r26, 0x38	; 56
    7c8c:	3c 91       	ld	r19, X
    7c8e:	23 2b       	or	r18, r19
    7c90:	db 01       	movw	r26, r22
    7c92:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    7c94:	d7 01       	movw	r26, r14
    7c96:	d0 96       	adiw	r26, 0x30	; 48
    7c98:	6d 91       	ld	r22, X+
    7c9a:	7c 91       	ld	r23, X
    7c9c:	db 01       	movw	r26, r22
    7c9e:	2c 91       	ld	r18, X
    7ca0:	d7 01       	movw	r26, r14
    7ca2:	db 96       	adiw	r26, 0x3b	; 59
    7ca4:	3c 91       	ld	r19, X
    7ca6:	23 23       	and	r18, r19
    7ca8:	db 01       	movw	r26, r22
    7caa:	2c 93       	st	X, r18
    7cac:	12 b8       	out	0x02, r1	; 2
    7cae:	d7 01       	movw	r26, r14
    7cb0:	d2 96       	adiw	r26, 0x32	; 50
    7cb2:	6d 91       	ld	r22, X+
    7cb4:	7c 91       	ld	r23, X
    7cb6:	db 01       	movw	r26, r22
    7cb8:	2c 91       	ld	r18, X
    7cba:	d7 01       	movw	r26, r14
    7cbc:	dc 96       	adiw	r26, 0x3c	; 60
    7cbe:	3c 91       	ld	r19, X
    7cc0:	23 23       	and	r18, r19
    7cc2:	db 01       	movw	r26, r22
    7cc4:	2c 93       	st	X, r18
    7cc6:	d7 01       	movw	r26, r14
    7cc8:	d2 96       	adiw	r26, 0x32	; 50
    7cca:	6d 91       	ld	r22, X+
    7ccc:	7c 91       	ld	r23, X
    7cce:	db 01       	movw	r26, r22
    7cd0:	2c 91       	ld	r18, X
    7cd2:	d7 01       	movw	r26, r14
    7cd4:	d8 96       	adiw	r26, 0x38	; 56
    7cd6:	3c 91       	ld	r19, X
    7cd8:	23 2b       	or	r18, r19
    7cda:	db 01       	movw	r26, r22
    7cdc:	2c 93       	st	X, r18
    7cde:	22 e5       	ldi	r18, 0x52	; 82
    7ce0:	22 b9       	out	0x02, r18	; 2
    7ce2:	d7 01       	movw	r26, r14
    7ce4:	d2 96       	adiw	r26, 0x32	; 50
    7ce6:	6d 91       	ld	r22, X+
    7ce8:	7c 91       	ld	r23, X
    7cea:	db 01       	movw	r26, r22
    7cec:	2c 91       	ld	r18, X
    7cee:	d7 01       	movw	r26, r14
    7cf0:	dc 96       	adiw	r26, 0x3c	; 60
    7cf2:	3c 91       	ld	r19, X
    7cf4:	23 23       	and	r18, r19
    7cf6:	db 01       	movw	r26, r22
    7cf8:	2c 93       	st	X, r18
    7cfa:	d7 01       	movw	r26, r14
    7cfc:	d2 96       	adiw	r26, 0x32	; 50
    7cfe:	6d 91       	ld	r22, X+
    7d00:	7c 91       	ld	r23, X
    7d02:	db 01       	movw	r26, r22
    7d04:	2c 91       	ld	r18, X
    7d06:	d7 01       	movw	r26, r14
    7d08:	d8 96       	adiw	r26, 0x38	; 56
    7d0a:	3c 91       	ld	r19, X
    7d0c:	23 2b       	or	r18, r19
    7d0e:	db 01       	movw	r26, r22
    7d10:	2c 93       	st	X, r18
    7d12:	d7 01       	movw	r26, r14
    7d14:	d0 96       	adiw	r26, 0x30	; 48
    7d16:	6d 91       	ld	r22, X+
    7d18:	7c 91       	ld	r23, X
    7d1a:	db 01       	movw	r26, r22
    7d1c:	2c 91       	ld	r18, X
    7d1e:	d7 01       	movw	r26, r14
    7d20:	d7 96       	adiw	r26, 0x37	; 55
    7d22:	3c 91       	ld	r19, X
    7d24:	23 2b       	or	r18, r19
    7d26:	db 01       	movw	r26, r22
    7d28:	2c 93       	st	X, r18
    7d2a:	52 b9       	out	0x02, r21	; 2
    7d2c:	d7 01       	movw	r26, r14
    7d2e:	d2 96       	adiw	r26, 0x32	; 50
    7d30:	6d 91       	ld	r22, X+
    7d32:	7c 91       	ld	r23, X
    7d34:	db 01       	movw	r26, r22
    7d36:	2c 91       	ld	r18, X
    7d38:	d7 01       	movw	r26, r14
    7d3a:	dc 96       	adiw	r26, 0x3c	; 60
    7d3c:	3c 91       	ld	r19, X
    7d3e:	23 23       	and	r18, r19
    7d40:	db 01       	movw	r26, r22
    7d42:	2c 93       	st	X, r18
    7d44:	d7 01       	movw	r26, r14
    7d46:	d2 96       	adiw	r26, 0x32	; 50
    7d48:	6d 91       	ld	r22, X+
    7d4a:	7c 91       	ld	r23, X
    7d4c:	db 01       	movw	r26, r22
    7d4e:	2c 91       	ld	r18, X
    7d50:	d7 01       	movw	r26, r14
    7d52:	d8 96       	adiw	r26, 0x38	; 56
    7d54:	3c 91       	ld	r19, X
    7d56:	23 2b       	or	r18, r19
    7d58:	db 01       	movw	r26, r22
    7d5a:	2c 93       	st	X, r18
    7d5c:	42 b9       	out	0x02, r20	; 2
    7d5e:	d7 01       	movw	r26, r14
    7d60:	d2 96       	adiw	r26, 0x32	; 50
    7d62:	4d 91       	ld	r20, X+
    7d64:	5c 91       	ld	r21, X
    7d66:	da 01       	movw	r26, r20
    7d68:	2c 91       	ld	r18, X
    7d6a:	d7 01       	movw	r26, r14
    7d6c:	dc 96       	adiw	r26, 0x3c	; 60
    7d6e:	3c 91       	ld	r19, X
    7d70:	23 23       	and	r18, r19
    7d72:	da 01       	movw	r26, r20
    7d74:	2c 93       	st	X, r18
    7d76:	d7 01       	movw	r26, r14
    7d78:	d2 96       	adiw	r26, 0x32	; 50
    7d7a:	4d 91       	ld	r20, X+
    7d7c:	5c 91       	ld	r21, X
    7d7e:	da 01       	movw	r26, r20
    7d80:	2c 91       	ld	r18, X
    7d82:	d7 01       	movw	r26, r14
    7d84:	d8 96       	adiw	r26, 0x38	; 56
    7d86:	3c 91       	ld	r19, X
    7d88:	23 2b       	or	r18, r19
    7d8a:	da 01       	movw	r26, r20
    7d8c:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    7d8e:	d7 01       	movw	r26, r14
    7d90:	d0 96       	adiw	r26, 0x30	; 48
    7d92:	4d 91       	ld	r20, X+
    7d94:	5c 91       	ld	r21, X
    7d96:	da 01       	movw	r26, r20
    7d98:	2c 91       	ld	r18, X
    7d9a:	d7 01       	movw	r26, r14
    7d9c:	db 96       	adiw	r26, 0x3b	; 59
    7d9e:	3c 91       	ld	r19, X
    7da0:	23 23       	and	r18, r19
    7da2:	da 01       	movw	r26, r20
    7da4:	2c 93       	st	X, r18
    7da6:	12 b8       	out	0x02, r1	; 2
    7da8:	d7 01       	movw	r26, r14
    7daa:	d2 96       	adiw	r26, 0x32	; 50
    7dac:	4d 91       	ld	r20, X+
    7dae:	5c 91       	ld	r21, X
    7db0:	da 01       	movw	r26, r20
    7db2:	2c 91       	ld	r18, X
    7db4:	d7 01       	movw	r26, r14
    7db6:	dc 96       	adiw	r26, 0x3c	; 60
    7db8:	3c 91       	ld	r19, X
    7dba:	23 23       	and	r18, r19
    7dbc:	da 01       	movw	r26, r20
    7dbe:	2c 93       	st	X, r18
    7dc0:	d7 01       	movw	r26, r14
    7dc2:	d2 96       	adiw	r26, 0x32	; 50
    7dc4:	4d 91       	ld	r20, X+
    7dc6:	5c 91       	ld	r21, X
    7dc8:	da 01       	movw	r26, r20
    7dca:	2c 91       	ld	r18, X
    7dcc:	d7 01       	movw	r26, r14
    7dce:	d8 96       	adiw	r26, 0x38	; 56
    7dd0:	3c 91       	ld	r19, X
    7dd2:	23 2b       	or	r18, r19
    7dd4:	da 01       	movw	r26, r20
    7dd6:	2c 93       	st	X, r18
    7dd8:	23 e5       	ldi	r18, 0x53	; 83
    7dda:	22 b9       	out	0x02, r18	; 2
    7ddc:	d7 01       	movw	r26, r14
    7dde:	d2 96       	adiw	r26, 0x32	; 50
    7de0:	4d 91       	ld	r20, X+
    7de2:	5c 91       	ld	r21, X
    7de4:	da 01       	movw	r26, r20
    7de6:	2c 91       	ld	r18, X
    7de8:	d7 01       	movw	r26, r14
    7dea:	dc 96       	adiw	r26, 0x3c	; 60
    7dec:	3c 91       	ld	r19, X
    7dee:	23 23       	and	r18, r19
    7df0:	da 01       	movw	r26, r20
    7df2:	2c 93       	st	X, r18
    7df4:	d7 01       	movw	r26, r14
    7df6:	d2 96       	adiw	r26, 0x32	; 50
    7df8:	4d 91       	ld	r20, X+
    7dfa:	5c 91       	ld	r21, X
    7dfc:	da 01       	movw	r26, r20
    7dfe:	2c 91       	ld	r18, X
    7e00:	d7 01       	movw	r26, r14
    7e02:	d8 96       	adiw	r26, 0x38	; 56
    7e04:	3c 91       	ld	r19, X
    7e06:	23 2b       	or	r18, r19
    7e08:	da 01       	movw	r26, r20
    7e0a:	2c 93       	st	X, r18
    7e0c:	d7 01       	movw	r26, r14
    7e0e:	d0 96       	adiw	r26, 0x30	; 48
    7e10:	4d 91       	ld	r20, X+
    7e12:	5c 91       	ld	r21, X
    7e14:	da 01       	movw	r26, r20
    7e16:	2c 91       	ld	r18, X
    7e18:	d7 01       	movw	r26, r14
    7e1a:	d7 96       	adiw	r26, 0x37	; 55
    7e1c:	3c 91       	ld	r19, X
    7e1e:	23 2b       	or	r18, r19
    7e20:	da 01       	movw	r26, r20
    7e22:	2c 93       	st	X, r18
    7e24:	12 b9       	out	0x02, r17	; 2
    7e26:	d7 01       	movw	r26, r14
    7e28:	d2 96       	adiw	r26, 0x32	; 50
    7e2a:	4d 91       	ld	r20, X+
    7e2c:	5c 91       	ld	r21, X
    7e2e:	da 01       	movw	r26, r20
    7e30:	2c 91       	ld	r18, X
    7e32:	d7 01       	movw	r26, r14
    7e34:	dc 96       	adiw	r26, 0x3c	; 60
    7e36:	3c 91       	ld	r19, X
    7e38:	23 23       	and	r18, r19
    7e3a:	da 01       	movw	r26, r20
    7e3c:	2c 93       	st	X, r18
    7e3e:	d7 01       	movw	r26, r14
    7e40:	d2 96       	adiw	r26, 0x32	; 50
    7e42:	4d 91       	ld	r20, X+
    7e44:	5c 91       	ld	r21, X
    7e46:	da 01       	movw	r26, r20
    7e48:	2c 91       	ld	r18, X
    7e4a:	d7 01       	movw	r26, r14
    7e4c:	d8 96       	adiw	r26, 0x38	; 56
    7e4e:	3c 91       	ld	r19, X
    7e50:	23 2b       	or	r18, r19
    7e52:	da 01       	movw	r26, r20
    7e54:	2c 93       	st	X, r18
    7e56:	02 b9       	out	0x02, r16	; 2
    7e58:	d7 01       	movw	r26, r14
    7e5a:	d2 96       	adiw	r26, 0x32	; 50
    7e5c:	4d 91       	ld	r20, X+
    7e5e:	5c 91       	ld	r21, X
    7e60:	da 01       	movw	r26, r20
    7e62:	2c 91       	ld	r18, X
    7e64:	d7 01       	movw	r26, r14
    7e66:	dc 96       	adiw	r26, 0x3c	; 60
    7e68:	3c 91       	ld	r19, X
    7e6a:	23 23       	and	r18, r19
    7e6c:	da 01       	movw	r26, r20
    7e6e:	2c 93       	st	X, r18
    7e70:	d7 01       	movw	r26, r14
    7e72:	d2 96       	adiw	r26, 0x32	; 50
    7e74:	4d 91       	ld	r20, X+
    7e76:	5c 91       	ld	r21, X
    7e78:	da 01       	movw	r26, r20
    7e7a:	2c 91       	ld	r18, X
    7e7c:	d7 01       	movw	r26, r14
    7e7e:	d8 96       	adiw	r26, 0x38	; 56
    7e80:	3c 91       	ld	r19, X
    7e82:	23 2b       	or	r18, r19
    7e84:	da 01       	movw	r26, r20
    7e86:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    7e88:	d7 01       	movw	r26, r14
    7e8a:	d0 96       	adiw	r26, 0x30	; 48
    7e8c:	4d 91       	ld	r20, X+
    7e8e:	5c 91       	ld	r21, X
    7e90:	da 01       	movw	r26, r20
    7e92:	2c 91       	ld	r18, X
    7e94:	d7 01       	movw	r26, r14
    7e96:	db 96       	adiw	r26, 0x3b	; 59
    7e98:	3c 91       	ld	r19, X
    7e9a:	23 23       	and	r18, r19
    7e9c:	da 01       	movw	r26, r20
    7e9e:	2c 93       	st	X, r18
    7ea0:	12 b8       	out	0x02, r1	; 2
    7ea2:	d7 01       	movw	r26, r14
    7ea4:	d2 96       	adiw	r26, 0x32	; 50
    7ea6:	4d 91       	ld	r20, X+
    7ea8:	5c 91       	ld	r21, X
    7eaa:	da 01       	movw	r26, r20
    7eac:	2c 91       	ld	r18, X
    7eae:	d7 01       	movw	r26, r14
    7eb0:	dc 96       	adiw	r26, 0x3c	; 60
    7eb2:	3c 91       	ld	r19, X
    7eb4:	23 23       	and	r18, r19
    7eb6:	da 01       	movw	r26, r20
    7eb8:	2c 93       	st	X, r18
    7eba:	d7 01       	movw	r26, r14
    7ebc:	d2 96       	adiw	r26, 0x32	; 50
    7ebe:	4d 91       	ld	r20, X+
    7ec0:	5c 91       	ld	r21, X
    7ec2:	da 01       	movw	r26, r20
    7ec4:	2c 91       	ld	r18, X
    7ec6:	d7 01       	movw	r26, r14
    7ec8:	d8 96       	adiw	r26, 0x38	; 56
    7eca:	3c 91       	ld	r19, X
    7ecc:	23 2b       	or	r18, r19
    7ece:	da 01       	movw	r26, r20
    7ed0:	2c 93       	st	X, r18
    7ed2:	20 e2       	ldi	r18, 0x20	; 32
    7ed4:	22 b9       	out	0x02, r18	; 2
    7ed6:	d7 01       	movw	r26, r14
    7ed8:	d2 96       	adiw	r26, 0x32	; 50
    7eda:	4d 91       	ld	r20, X+
    7edc:	5c 91       	ld	r21, X
    7ede:	da 01       	movw	r26, r20
    7ee0:	2c 91       	ld	r18, X
    7ee2:	d7 01       	movw	r26, r14
    7ee4:	dc 96       	adiw	r26, 0x3c	; 60
    7ee6:	3c 91       	ld	r19, X
    7ee8:	23 23       	and	r18, r19
    7eea:	da 01       	movw	r26, r20
    7eec:	2c 93       	st	X, r18
    7eee:	d7 01       	movw	r26, r14
    7ef0:	d2 96       	adiw	r26, 0x32	; 50
    7ef2:	4d 91       	ld	r20, X+
    7ef4:	5c 91       	ld	r21, X
    7ef6:	da 01       	movw	r26, r20
    7ef8:	2c 91       	ld	r18, X
    7efa:	d7 01       	movw	r26, r14
    7efc:	d8 96       	adiw	r26, 0x38	; 56
    7efe:	3c 91       	ld	r19, X
    7f00:	23 2b       	or	r18, r19
    7f02:	da 01       	movw	r26, r20
    7f04:	2c 93       	st	X, r18
    7f06:	d7 01       	movw	r26, r14
    7f08:	d0 96       	adiw	r26, 0x30	; 48
    7f0a:	4d 91       	ld	r20, X+
    7f0c:	5c 91       	ld	r21, X
    7f0e:	da 01       	movw	r26, r20
    7f10:	2c 91       	ld	r18, X
    7f12:	d7 01       	movw	r26, r14
    7f14:	d7 96       	adiw	r26, 0x37	; 55
    7f16:	3c 91       	ld	r19, X
    7f18:	23 2b       	or	r18, r19
    7f1a:	da 01       	movw	r26, r20
    7f1c:	2c 93       	st	X, r18
    7f1e:	f2 b9       	out	0x02, r31	; 2
    7f20:	d7 01       	movw	r26, r14
    7f22:	d2 96       	adiw	r26, 0x32	; 50
    7f24:	4d 91       	ld	r20, X+
    7f26:	5c 91       	ld	r21, X
    7f28:	da 01       	movw	r26, r20
    7f2a:	2c 91       	ld	r18, X
    7f2c:	d7 01       	movw	r26, r14
    7f2e:	dc 96       	adiw	r26, 0x3c	; 60
    7f30:	3c 91       	ld	r19, X
    7f32:	23 23       	and	r18, r19
    7f34:	da 01       	movw	r26, r20
    7f36:	2c 93       	st	X, r18
    7f38:	d7 01       	movw	r26, r14
    7f3a:	d2 96       	adiw	r26, 0x32	; 50
    7f3c:	4d 91       	ld	r20, X+
    7f3e:	5c 91       	ld	r21, X
    7f40:	da 01       	movw	r26, r20
    7f42:	2c 91       	ld	r18, X
    7f44:	d7 01       	movw	r26, r14
    7f46:	d8 96       	adiw	r26, 0x38	; 56
    7f48:	3c 91       	ld	r19, X
    7f4a:	23 2b       	or	r18, r19
    7f4c:	da 01       	movw	r26, r20
    7f4e:	2c 93       	st	X, r18
    7f50:	e2 b9       	out	0x02, r30	; 2
    7f52:	d7 01       	movw	r26, r14
    7f54:	d2 96       	adiw	r26, 0x32	; 50
    7f56:	ed 91       	ld	r30, X+
    7f58:	fc 91       	ld	r31, X
    7f5a:	d3 97       	sbiw	r26, 0x33	; 51
    7f5c:	20 81       	ld	r18, Z
    7f5e:	dc 96       	adiw	r26, 0x3c	; 60
    7f60:	3c 91       	ld	r19, X
    7f62:	dc 97       	sbiw	r26, 0x3c	; 60
    7f64:	23 23       	and	r18, r19
    7f66:	20 83       	st	Z, r18
    7f68:	d2 96       	adiw	r26, 0x32	; 50
    7f6a:	ed 91       	ld	r30, X+
    7f6c:	fc 91       	ld	r31, X
    7f6e:	d3 97       	sbiw	r26, 0x33	; 51
    7f70:	20 81       	ld	r18, Z
    7f72:	d8 96       	adiw	r26, 0x38	; 56
    7f74:	3c 91       	ld	r19, X
    7f76:	d8 97       	sbiw	r26, 0x38	; 56
    7f78:	23 2b       	or	r18, r19
    7f7a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    7f7c:	d0 96       	adiw	r26, 0x30	; 48
    7f7e:	ed 91       	ld	r30, X+
    7f80:	fc 91       	ld	r31, X
    7f82:	d1 97       	sbiw	r26, 0x31	; 49
    7f84:	20 81       	ld	r18, Z
    7f86:	db 96       	adiw	r26, 0x3b	; 59
    7f88:	3c 91       	ld	r19, X
    7f8a:	db 97       	sbiw	r26, 0x3b	; 59
    7f8c:	23 23       	and	r18, r19
    7f8e:	20 83       	st	Z, r18
    7f90:	12 b8       	out	0x02, r1	; 2
    7f92:	d2 96       	adiw	r26, 0x32	; 50
    7f94:	ed 91       	ld	r30, X+
    7f96:	fc 91       	ld	r31, X
    7f98:	d3 97       	sbiw	r26, 0x33	; 51
    7f9a:	20 81       	ld	r18, Z
    7f9c:	dc 96       	adiw	r26, 0x3c	; 60
    7f9e:	3c 91       	ld	r19, X
    7fa0:	dc 97       	sbiw	r26, 0x3c	; 60
    7fa2:	23 23       	and	r18, r19
    7fa4:	20 83       	st	Z, r18
    7fa6:	d2 96       	adiw	r26, 0x32	; 50
    7fa8:	ed 91       	ld	r30, X+
    7faa:	fc 91       	ld	r31, X
    7fac:	d3 97       	sbiw	r26, 0x33	; 51
    7fae:	20 81       	ld	r18, Z
    7fb0:	d8 96       	adiw	r26, 0x38	; 56
    7fb2:	3c 91       	ld	r19, X
    7fb4:	d8 97       	sbiw	r26, 0x38	; 56
    7fb6:	23 2b       	or	r18, r19
    7fb8:	20 83       	st	Z, r18
    7fba:	21 e2       	ldi	r18, 0x21	; 33
    7fbc:	22 b9       	out	0x02, r18	; 2
    7fbe:	d2 96       	adiw	r26, 0x32	; 50
    7fc0:	ed 91       	ld	r30, X+
    7fc2:	fc 91       	ld	r31, X
    7fc4:	d3 97       	sbiw	r26, 0x33	; 51
    7fc6:	20 81       	ld	r18, Z
    7fc8:	dc 96       	adiw	r26, 0x3c	; 60
    7fca:	3c 91       	ld	r19, X
    7fcc:	dc 97       	sbiw	r26, 0x3c	; 60
    7fce:	23 23       	and	r18, r19
    7fd0:	20 83       	st	Z, r18
    7fd2:	d2 96       	adiw	r26, 0x32	; 50
    7fd4:	ed 91       	ld	r30, X+
    7fd6:	fc 91       	ld	r31, X
    7fd8:	d3 97       	sbiw	r26, 0x33	; 51
    7fda:	20 81       	ld	r18, Z
    7fdc:	d8 96       	adiw	r26, 0x38	; 56
    7fde:	3c 91       	ld	r19, X
    7fe0:	d8 97       	sbiw	r26, 0x38	; 56
    7fe2:	23 2b       	or	r18, r19
    7fe4:	20 83       	st	Z, r18
    7fe6:	d0 96       	adiw	r26, 0x30	; 48
    7fe8:	ed 91       	ld	r30, X+
    7fea:	fc 91       	ld	r31, X
    7fec:	d1 97       	sbiw	r26, 0x31	; 49
    7fee:	20 81       	ld	r18, Z
    7ff0:	d7 96       	adiw	r26, 0x37	; 55
    7ff2:	3c 91       	ld	r19, X
    7ff4:	d7 97       	sbiw	r26, 0x37	; 55
    7ff6:	23 2b       	or	r18, r19
    7ff8:	20 83       	st	Z, r18
    7ffa:	92 b9       	out	0x02, r25	; 2
    7ffc:	d2 96       	adiw	r26, 0x32	; 50
    7ffe:	ed 91       	ld	r30, X+
    8000:	fc 91       	ld	r31, X
    8002:	d3 97       	sbiw	r26, 0x33	; 51
    8004:	90 81       	ld	r25, Z
    8006:	dc 96       	adiw	r26, 0x3c	; 60
    8008:	2c 91       	ld	r18, X
    800a:	dc 97       	sbiw	r26, 0x3c	; 60
    800c:	92 23       	and	r25, r18
    800e:	90 83       	st	Z, r25
    8010:	d2 96       	adiw	r26, 0x32	; 50
    8012:	ed 91       	ld	r30, X+
    8014:	fc 91       	ld	r31, X
    8016:	d3 97       	sbiw	r26, 0x33	; 51
    8018:	90 81       	ld	r25, Z
    801a:	d8 96       	adiw	r26, 0x38	; 56
    801c:	2c 91       	ld	r18, X
    801e:	d8 97       	sbiw	r26, 0x38	; 56
    8020:	92 2b       	or	r25, r18
    8022:	90 83       	st	Z, r25
    8024:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    8026:	d2 96       	adiw	r26, 0x32	; 50
    8028:	ed 91       	ld	r30, X+
    802a:	fc 91       	ld	r31, X
    802c:	d3 97       	sbiw	r26, 0x33	; 51
    802e:	80 81       	ld	r24, Z
    8030:	dc 96       	adiw	r26, 0x3c	; 60
    8032:	9c 91       	ld	r25, X
    8034:	dc 97       	sbiw	r26, 0x3c	; 60
    8036:	89 23       	and	r24, r25
    8038:	80 83       	st	Z, r24
    803a:	d2 96       	adiw	r26, 0x32	; 50
    803c:	ed 91       	ld	r30, X+
    803e:	fc 91       	ld	r31, X
    8040:	d3 97       	sbiw	r26, 0x33	; 51
    8042:	80 81       	ld	r24, Z
    8044:	d8 96       	adiw	r26, 0x38	; 56
    8046:	9c 91       	ld	r25, X
    8048:	89 2b       	or	r24, r25
    804a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    804c:	d7 01       	movw	r26, r14
    804e:	9e 96       	adiw	r26, 0x2e	; 46
    8050:	ed 91       	ld	r30, X+
    8052:	fc 91       	ld	r31, X
    8054:	9f 97       	sbiw	r26, 0x2f	; 47
    8056:	80 81       	ld	r24, Z
    8058:	d6 96       	adiw	r26, 0x36	; 54
    805a:	9c 91       	ld	r25, X
    805c:	89 2b       	or	r24, r25
    805e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    8060:	28 96       	adiw	r28, 0x08	; 8
    8062:	0f b6       	in	r0, 0x3f	; 63
    8064:	f8 94       	cli
    8066:	de bf       	out	0x3e, r29	; 62
    8068:	0f be       	out	0x3f, r0	; 63
    806a:	cd bf       	out	0x3d, r28	; 61
    806c:	df 91       	pop	r29
    806e:	cf 91       	pop	r28
    8070:	1f 91       	pop	r17
    8072:	0f 91       	pop	r16
    8074:	ff 90       	pop	r15
    8076:	ef 90       	pop	r14
    8078:	df 90       	pop	r13
    807a:	cf 90       	pop	r12
    807c:	bf 90       	pop	r11
    807e:	af 90       	pop	r10
    8080:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    8082:	f7 01       	movw	r30, r14
    8084:	a6 85       	ldd	r26, Z+14	; 0x0e
    8086:	b7 85       	ldd	r27, Z+15	; 0x0f
    8088:	59 01       	movw	r10, r18
    808a:	a0 94       	com	r10
    808c:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    808e:	9d 01       	movw	r18, r26
    8090:	26 1b       	sub	r18, r22
    8092:	37 0b       	sbc	r19, r23
    8094:	21 50       	subi	r18, 0x01	; 1
    8096:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    8098:	60 89       	ldd	r22, Z+16	; 0x10
    809a:	71 89       	ldd	r23, Z+17	; 0x11
    809c:	68 01       	movw	r12, r16
    809e:	c0 94       	com	r12
    80a0:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    80a2:	8a 01       	movw	r16, r20
    80a4:	00 95       	com	r16
    80a6:	10 95       	com	r17
    80a8:	06 0f       	add	r16, r22
    80aa:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    80ac:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    80ae:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    80b0:	a6 01       	movw	r20, r12
    80b2:	46 0f       	add	r20, r22
    80b4:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    80b6:	b5 01       	movw	r22, r10
    80b8:	f1 cc       	rjmp	.-1566   	; 0x7a9c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    80ba:	f7 01       	movw	r30, r14
    80bc:	a0 89       	ldd	r26, Z+16	; 0x10
    80be:	b1 89       	ldd	r27, Z+17	; 0x11
    80c0:	69 01       	movw	r12, r18
    80c2:	c0 94       	com	r12
    80c4:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    80c6:	cd 01       	movw	r24, r26
    80c8:	86 1b       	sub	r24, r22
    80ca:	97 0b       	sbc	r25, r23
    80cc:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    80ce:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    80d0:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    80d2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    80d4:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    80d6:	a6 01       	movw	r20, r12
    80d8:	4a 0f       	add	r20, r26
    80da:	5b 1f       	adc	r21, r27
    80dc:	e1 cc       	rjmp	.-1598   	; 0x7aa0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    80de:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    80e0:	fb 01       	movw	r30, r22
    80e2:	de cc       	rjmp	.-1604   	; 0x7aa0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    80e4:	01 97       	sbiw	r24, 0x01	; 1
    80e6:	09 f0       	breq	.+2      	; 0x80ea <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    80e8:	e5 c1       	rjmp	.+970    	; 0x84b4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    80ea:	d0 96       	adiw	r26, 0x30	; 48
    80ec:	ed 91       	ld	r30, X+
    80ee:	fc 91       	ld	r31, X
    80f0:	d1 97       	sbiw	r26, 0x31	; 49
    80f2:	80 81       	ld	r24, Z
    80f4:	db 96       	adiw	r26, 0x3b	; 59
    80f6:	9c 91       	ld	r25, X
    80f8:	db 97       	sbiw	r26, 0x3b	; 59
    80fa:	89 23       	and	r24, r25
    80fc:	80 83       	st	Z, r24
    80fe:	82 e0       	ldi	r24, 0x02	; 2
    8100:	82 b9       	out	0x02, r24	; 2
    8102:	d2 96       	adiw	r26, 0x32	; 50
    8104:	ed 91       	ld	r30, X+
    8106:	fc 91       	ld	r31, X
    8108:	d3 97       	sbiw	r26, 0x33	; 51
    810a:	80 81       	ld	r24, Z
    810c:	dc 96       	adiw	r26, 0x3c	; 60
    810e:	9c 91       	ld	r25, X
    8110:	dc 97       	sbiw	r26, 0x3c	; 60
    8112:	89 23       	and	r24, r25
    8114:	80 83       	st	Z, r24
    8116:	d2 96       	adiw	r26, 0x32	; 50
    8118:	ed 91       	ld	r30, X+
    811a:	fc 91       	ld	r31, X
    811c:	d3 97       	sbiw	r26, 0x33	; 51
    811e:	80 81       	ld	r24, Z
    8120:	d8 96       	adiw	r26, 0x38	; 56
    8122:	9c 91       	ld	r25, X
    8124:	d8 97       	sbiw	r26, 0x38	; 56
    8126:	89 2b       	or	r24, r25
    8128:	80 83       	st	Z, r24
    812a:	d0 96       	adiw	r26, 0x30	; 48
    812c:	ed 91       	ld	r30, X+
    812e:	fc 91       	ld	r31, X
    8130:	d1 97       	sbiw	r26, 0x31	; 49
    8132:	80 81       	ld	r24, Z
    8134:	d7 96       	adiw	r26, 0x37	; 55
    8136:	9c 91       	ld	r25, X
    8138:	d7 97       	sbiw	r26, 0x37	; 55
    813a:	89 2b       	or	r24, r25
    813c:	80 83       	st	Z, r24
    813e:	72 b9       	out	0x02, r23	; 2
    8140:	d2 96       	adiw	r26, 0x32	; 50
    8142:	ed 91       	ld	r30, X+
    8144:	fc 91       	ld	r31, X
    8146:	d3 97       	sbiw	r26, 0x33	; 51
    8148:	80 81       	ld	r24, Z
    814a:	dc 96       	adiw	r26, 0x3c	; 60
    814c:	9c 91       	ld	r25, X
    814e:	dc 97       	sbiw	r26, 0x3c	; 60
    8150:	89 23       	and	r24, r25
    8152:	80 83       	st	Z, r24
    8154:	d2 96       	adiw	r26, 0x32	; 50
    8156:	ed 91       	ld	r30, X+
    8158:	fc 91       	ld	r31, X
    815a:	d3 97       	sbiw	r26, 0x33	; 51
    815c:	80 81       	ld	r24, Z
    815e:	d8 96       	adiw	r26, 0x38	; 56
    8160:	9c 91       	ld	r25, X
    8162:	d8 97       	sbiw	r26, 0x38	; 56
    8164:	89 2b       	or	r24, r25
    8166:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    8168:	d0 96       	adiw	r26, 0x30	; 48
    816a:	ed 91       	ld	r30, X+
    816c:	fc 91       	ld	r31, X
    816e:	d1 97       	sbiw	r26, 0x31	; 49
    8170:	80 81       	ld	r24, Z
    8172:	db 96       	adiw	r26, 0x3b	; 59
    8174:	9c 91       	ld	r25, X
    8176:	db 97       	sbiw	r26, 0x3b	; 59
    8178:	89 23       	and	r24, r25
    817a:	80 83       	st	Z, r24
    817c:	83 e0       	ldi	r24, 0x03	; 3
    817e:	82 b9       	out	0x02, r24	; 2
    8180:	d2 96       	adiw	r26, 0x32	; 50
    8182:	ed 91       	ld	r30, X+
    8184:	fc 91       	ld	r31, X
    8186:	d3 97       	sbiw	r26, 0x33	; 51
    8188:	80 81       	ld	r24, Z
    818a:	dc 96       	adiw	r26, 0x3c	; 60
    818c:	9c 91       	ld	r25, X
    818e:	dc 97       	sbiw	r26, 0x3c	; 60
    8190:	89 23       	and	r24, r25
    8192:	80 83       	st	Z, r24
    8194:	d2 96       	adiw	r26, 0x32	; 50
    8196:	ed 91       	ld	r30, X+
    8198:	fc 91       	ld	r31, X
    819a:	d3 97       	sbiw	r26, 0x33	; 51
    819c:	80 81       	ld	r24, Z
    819e:	d8 96       	adiw	r26, 0x38	; 56
    81a0:	9c 91       	ld	r25, X
    81a2:	d8 97       	sbiw	r26, 0x38	; 56
    81a4:	89 2b       	or	r24, r25
    81a6:	80 83       	st	Z, r24
    81a8:	d0 96       	adiw	r26, 0x30	; 48
    81aa:	ed 91       	ld	r30, X+
    81ac:	fc 91       	ld	r31, X
    81ae:	d1 97       	sbiw	r26, 0x31	; 49
    81b0:	80 81       	ld	r24, Z
    81b2:	d7 96       	adiw	r26, 0x37	; 55
    81b4:	9c 91       	ld	r25, X
    81b6:	d7 97       	sbiw	r26, 0x37	; 55
    81b8:	89 2b       	or	r24, r25
    81ba:	80 83       	st	Z, r24
    81bc:	62 b9       	out	0x02, r22	; 2
    81be:	d2 96       	adiw	r26, 0x32	; 50
    81c0:	ed 91       	ld	r30, X+
    81c2:	fc 91       	ld	r31, X
    81c4:	d3 97       	sbiw	r26, 0x33	; 51
    81c6:	80 81       	ld	r24, Z
    81c8:	dc 96       	adiw	r26, 0x3c	; 60
    81ca:	9c 91       	ld	r25, X
    81cc:	dc 97       	sbiw	r26, 0x3c	; 60
    81ce:	89 23       	and	r24, r25
    81d0:	80 83       	st	Z, r24
    81d2:	d2 96       	adiw	r26, 0x32	; 50
    81d4:	ed 91       	ld	r30, X+
    81d6:	fc 91       	ld	r31, X
    81d8:	d3 97       	sbiw	r26, 0x33	; 51
    81da:	80 81       	ld	r24, Z
    81dc:	d8 96       	adiw	r26, 0x38	; 56
    81de:	9c 91       	ld	r25, X
    81e0:	d8 97       	sbiw	r26, 0x38	; 56
    81e2:	89 2b       	or	r24, r25
    81e4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    81e6:	d0 96       	adiw	r26, 0x30	; 48
    81e8:	ed 91       	ld	r30, X+
    81ea:	fc 91       	ld	r31, X
    81ec:	d1 97       	sbiw	r26, 0x31	; 49
    81ee:	80 81       	ld	r24, Z
    81f0:	db 96       	adiw	r26, 0x3b	; 59
    81f2:	9c 91       	ld	r25, X
    81f4:	db 97       	sbiw	r26, 0x3b	; 59
    81f6:	89 23       	and	r24, r25
    81f8:	80 83       	st	Z, r24
    81fa:	86 e0       	ldi	r24, 0x06	; 6
    81fc:	82 b9       	out	0x02, r24	; 2
    81fe:	d2 96       	adiw	r26, 0x32	; 50
    8200:	ed 91       	ld	r30, X+
    8202:	fc 91       	ld	r31, X
    8204:	d3 97       	sbiw	r26, 0x33	; 51
    8206:	80 81       	ld	r24, Z
    8208:	dc 96       	adiw	r26, 0x3c	; 60
    820a:	9c 91       	ld	r25, X
    820c:	dc 97       	sbiw	r26, 0x3c	; 60
    820e:	89 23       	and	r24, r25
    8210:	80 83       	st	Z, r24
    8212:	d2 96       	adiw	r26, 0x32	; 50
    8214:	ed 91       	ld	r30, X+
    8216:	fc 91       	ld	r31, X
    8218:	d3 97       	sbiw	r26, 0x33	; 51
    821a:	80 81       	ld	r24, Z
    821c:	d8 96       	adiw	r26, 0x38	; 56
    821e:	9c 91       	ld	r25, X
    8220:	d8 97       	sbiw	r26, 0x38	; 56
    8222:	89 2b       	or	r24, r25
    8224:	80 83       	st	Z, r24
    8226:	d0 96       	adiw	r26, 0x30	; 48
    8228:	ed 91       	ld	r30, X+
    822a:	fc 91       	ld	r31, X
    822c:	d1 97       	sbiw	r26, 0x31	; 49
    822e:	80 81       	ld	r24, Z
    8230:	d7 96       	adiw	r26, 0x37	; 55
    8232:	9c 91       	ld	r25, X
    8234:	d7 97       	sbiw	r26, 0x37	; 55
    8236:	89 2b       	or	r24, r25
    8238:	80 83       	st	Z, r24
    823a:	52 b9       	out	0x02, r21	; 2
    823c:	d2 96       	adiw	r26, 0x32	; 50
    823e:	ed 91       	ld	r30, X+
    8240:	fc 91       	ld	r31, X
    8242:	d3 97       	sbiw	r26, 0x33	; 51
    8244:	80 81       	ld	r24, Z
    8246:	dc 96       	adiw	r26, 0x3c	; 60
    8248:	9c 91       	ld	r25, X
    824a:	dc 97       	sbiw	r26, 0x3c	; 60
    824c:	89 23       	and	r24, r25
    824e:	80 83       	st	Z, r24
    8250:	d2 96       	adiw	r26, 0x32	; 50
    8252:	ed 91       	ld	r30, X+
    8254:	fc 91       	ld	r31, X
    8256:	d3 97       	sbiw	r26, 0x33	; 51
    8258:	80 81       	ld	r24, Z
    825a:	d8 96       	adiw	r26, 0x38	; 56
    825c:	9c 91       	ld	r25, X
    825e:	d8 97       	sbiw	r26, 0x38	; 56
    8260:	89 2b       	or	r24, r25
    8262:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    8264:	d0 96       	adiw	r26, 0x30	; 48
    8266:	ed 91       	ld	r30, X+
    8268:	fc 91       	ld	r31, X
    826a:	d1 97       	sbiw	r26, 0x31	; 49
    826c:	80 81       	ld	r24, Z
    826e:	db 96       	adiw	r26, 0x3b	; 59
    8270:	9c 91       	ld	r25, X
    8272:	db 97       	sbiw	r26, 0x3b	; 59
    8274:	89 23       	and	r24, r25
    8276:	80 83       	st	Z, r24
    8278:	87 e0       	ldi	r24, 0x07	; 7
    827a:	82 b9       	out	0x02, r24	; 2
    827c:	d2 96       	adiw	r26, 0x32	; 50
    827e:	ed 91       	ld	r30, X+
    8280:	fc 91       	ld	r31, X
    8282:	d3 97       	sbiw	r26, 0x33	; 51
    8284:	80 81       	ld	r24, Z
    8286:	dc 96       	adiw	r26, 0x3c	; 60
    8288:	9c 91       	ld	r25, X
    828a:	dc 97       	sbiw	r26, 0x3c	; 60
    828c:	89 23       	and	r24, r25
    828e:	80 83       	st	Z, r24
    8290:	d2 96       	adiw	r26, 0x32	; 50
    8292:	ed 91       	ld	r30, X+
    8294:	fc 91       	ld	r31, X
    8296:	d3 97       	sbiw	r26, 0x33	; 51
    8298:	80 81       	ld	r24, Z
    829a:	d8 96       	adiw	r26, 0x38	; 56
    829c:	9c 91       	ld	r25, X
    829e:	d8 97       	sbiw	r26, 0x38	; 56
    82a0:	89 2b       	or	r24, r25
    82a2:	80 83       	st	Z, r24
    82a4:	d0 96       	adiw	r26, 0x30	; 48
    82a6:	ed 91       	ld	r30, X+
    82a8:	fc 91       	ld	r31, X
    82aa:	d1 97       	sbiw	r26, 0x31	; 49
    82ac:	80 81       	ld	r24, Z
    82ae:	d7 96       	adiw	r26, 0x37	; 55
    82b0:	9c 91       	ld	r25, X
    82b2:	d7 97       	sbiw	r26, 0x37	; 55
    82b4:	89 2b       	or	r24, r25
    82b6:	80 83       	st	Z, r24
    82b8:	42 b9       	out	0x02, r20	; 2
    82ba:	d2 96       	adiw	r26, 0x32	; 50
    82bc:	ed 91       	ld	r30, X+
    82be:	fc 91       	ld	r31, X
    82c0:	d3 97       	sbiw	r26, 0x33	; 51
    82c2:	80 81       	ld	r24, Z
    82c4:	dc 96       	adiw	r26, 0x3c	; 60
    82c6:	9c 91       	ld	r25, X
    82c8:	dc 97       	sbiw	r26, 0x3c	; 60
    82ca:	89 23       	and	r24, r25
    82cc:	80 83       	st	Z, r24
    82ce:	d2 96       	adiw	r26, 0x32	; 50
    82d0:	ed 91       	ld	r30, X+
    82d2:	fc 91       	ld	r31, X
    82d4:	d3 97       	sbiw	r26, 0x33	; 51
    82d6:	80 81       	ld	r24, Z
    82d8:	d8 96       	adiw	r26, 0x38	; 56
    82da:	9c 91       	ld	r25, X
    82dc:	d8 97       	sbiw	r26, 0x38	; 56
    82de:	89 2b       	or	r24, r25
    82e0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    82e2:	d0 96       	adiw	r26, 0x30	; 48
    82e4:	ed 91       	ld	r30, X+
    82e6:	fc 91       	ld	r31, X
    82e8:	d1 97       	sbiw	r26, 0x31	; 49
    82ea:	80 81       	ld	r24, Z
    82ec:	db 96       	adiw	r26, 0x3b	; 59
    82ee:	9c 91       	ld	r25, X
    82f0:	db 97       	sbiw	r26, 0x3b	; 59
    82f2:	89 23       	and	r24, r25
    82f4:	80 83       	st	Z, r24
    82f6:	84 e0       	ldi	r24, 0x04	; 4
    82f8:	82 b9       	out	0x02, r24	; 2
    82fa:	d2 96       	adiw	r26, 0x32	; 50
    82fc:	ed 91       	ld	r30, X+
    82fe:	fc 91       	ld	r31, X
    8300:	d3 97       	sbiw	r26, 0x33	; 51
    8302:	80 81       	ld	r24, Z
    8304:	dc 96       	adiw	r26, 0x3c	; 60
    8306:	9c 91       	ld	r25, X
    8308:	dc 97       	sbiw	r26, 0x3c	; 60
    830a:	89 23       	and	r24, r25
    830c:	80 83       	st	Z, r24
    830e:	d2 96       	adiw	r26, 0x32	; 50
    8310:	ed 91       	ld	r30, X+
    8312:	fc 91       	ld	r31, X
    8314:	d3 97       	sbiw	r26, 0x33	; 51
    8316:	80 81       	ld	r24, Z
    8318:	d8 96       	adiw	r26, 0x38	; 56
    831a:	9c 91       	ld	r25, X
    831c:	d8 97       	sbiw	r26, 0x38	; 56
    831e:	89 2b       	or	r24, r25
    8320:	80 83       	st	Z, r24
    8322:	d0 96       	adiw	r26, 0x30	; 48
    8324:	ed 91       	ld	r30, X+
    8326:	fc 91       	ld	r31, X
    8328:	d1 97       	sbiw	r26, 0x31	; 49
    832a:	80 81       	ld	r24, Z
    832c:	d7 96       	adiw	r26, 0x37	; 55
    832e:	9c 91       	ld	r25, X
    8330:	d7 97       	sbiw	r26, 0x37	; 55
    8332:	89 2b       	or	r24, r25
    8334:	80 83       	st	Z, r24
    8336:	32 b9       	out	0x02, r19	; 2
    8338:	d2 96       	adiw	r26, 0x32	; 50
    833a:	ed 91       	ld	r30, X+
    833c:	fc 91       	ld	r31, X
    833e:	d3 97       	sbiw	r26, 0x33	; 51
    8340:	80 81       	ld	r24, Z
    8342:	dc 96       	adiw	r26, 0x3c	; 60
    8344:	9c 91       	ld	r25, X
    8346:	dc 97       	sbiw	r26, 0x3c	; 60
    8348:	89 23       	and	r24, r25
    834a:	80 83       	st	Z, r24
    834c:	d2 96       	adiw	r26, 0x32	; 50
    834e:	ed 91       	ld	r30, X+
    8350:	fc 91       	ld	r31, X
    8352:	d3 97       	sbiw	r26, 0x33	; 51
    8354:	80 81       	ld	r24, Z
    8356:	d8 96       	adiw	r26, 0x38	; 56
    8358:	9c 91       	ld	r25, X
    835a:	d8 97       	sbiw	r26, 0x38	; 56
    835c:	89 2b       	or	r24, r25
    835e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    8360:	d0 96       	adiw	r26, 0x30	; 48
    8362:	ed 91       	ld	r30, X+
    8364:	fc 91       	ld	r31, X
    8366:	d1 97       	sbiw	r26, 0x31	; 49
    8368:	80 81       	ld	r24, Z
    836a:	db 96       	adiw	r26, 0x3b	; 59
    836c:	9c 91       	ld	r25, X
    836e:	db 97       	sbiw	r26, 0x3b	; 59
    8370:	89 23       	and	r24, r25
    8372:	80 83       	st	Z, r24
    8374:	85 e0       	ldi	r24, 0x05	; 5
    8376:	82 b9       	out	0x02, r24	; 2
    8378:	d2 96       	adiw	r26, 0x32	; 50
    837a:	ed 91       	ld	r30, X+
    837c:	fc 91       	ld	r31, X
    837e:	d3 97       	sbiw	r26, 0x33	; 51
    8380:	80 81       	ld	r24, Z
    8382:	dc 96       	adiw	r26, 0x3c	; 60
    8384:	9c 91       	ld	r25, X
    8386:	dc 97       	sbiw	r26, 0x3c	; 60
    8388:	89 23       	and	r24, r25
    838a:	80 83       	st	Z, r24
    838c:	d2 96       	adiw	r26, 0x32	; 50
    838e:	ed 91       	ld	r30, X+
    8390:	fc 91       	ld	r31, X
    8392:	d3 97       	sbiw	r26, 0x33	; 51
    8394:	80 81       	ld	r24, Z
    8396:	d8 96       	adiw	r26, 0x38	; 56
    8398:	9c 91       	ld	r25, X
    839a:	d8 97       	sbiw	r26, 0x38	; 56
    839c:	89 2b       	or	r24, r25
    839e:	80 83       	st	Z, r24
    83a0:	d0 96       	adiw	r26, 0x30	; 48
    83a2:	ed 91       	ld	r30, X+
    83a4:	fc 91       	ld	r31, X
    83a6:	d1 97       	sbiw	r26, 0x31	; 49
    83a8:	80 81       	ld	r24, Z
    83aa:	d7 96       	adiw	r26, 0x37	; 55
    83ac:	9c 91       	ld	r25, X
    83ae:	d7 97       	sbiw	r26, 0x37	; 55
    83b0:	89 2b       	or	r24, r25
    83b2:	80 83       	st	Z, r24
    83b4:	22 b9       	out	0x02, r18	; 2
    83b6:	d2 96       	adiw	r26, 0x32	; 50
    83b8:	ed 91       	ld	r30, X+
    83ba:	fc 91       	ld	r31, X
    83bc:	d3 97       	sbiw	r26, 0x33	; 51
    83be:	80 81       	ld	r24, Z
    83c0:	dc 96       	adiw	r26, 0x3c	; 60
    83c2:	9c 91       	ld	r25, X
    83c4:	dc 97       	sbiw	r26, 0x3c	; 60
    83c6:	89 23       	and	r24, r25
    83c8:	80 83       	st	Z, r24
    83ca:	d2 96       	adiw	r26, 0x32	; 50
    83cc:	ed 91       	ld	r30, X+
    83ce:	fc 91       	ld	r31, X
    83d0:	d3 97       	sbiw	r26, 0x33	; 51
    83d2:	80 81       	ld	r24, Z
    83d4:	d8 96       	adiw	r26, 0x38	; 56
    83d6:	9c 91       	ld	r25, X
    83d8:	d8 97       	sbiw	r26, 0x38	; 56
    83da:	89 2b       	or	r24, r25
    83dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    83de:	d0 96       	adiw	r26, 0x30	; 48
    83e0:	ed 91       	ld	r30, X+
    83e2:	fc 91       	ld	r31, X
    83e4:	d1 97       	sbiw	r26, 0x31	; 49
    83e6:	80 81       	ld	r24, Z
    83e8:	db 96       	adiw	r26, 0x3b	; 59
    83ea:	9c 91       	ld	r25, X
    83ec:	db 97       	sbiw	r26, 0x3b	; 59
    83ee:	89 23       	and	r24, r25
    83f0:	80 83       	st	Z, r24
    83f2:	88 e0       	ldi	r24, 0x08	; 8
    83f4:	82 b9       	out	0x02, r24	; 2
    83f6:	d2 96       	adiw	r26, 0x32	; 50
    83f8:	ed 91       	ld	r30, X+
    83fa:	fc 91       	ld	r31, X
    83fc:	d3 97       	sbiw	r26, 0x33	; 51
    83fe:	80 81       	ld	r24, Z
    8400:	dc 96       	adiw	r26, 0x3c	; 60
    8402:	9c 91       	ld	r25, X
    8404:	dc 97       	sbiw	r26, 0x3c	; 60
    8406:	89 23       	and	r24, r25
    8408:	80 83       	st	Z, r24
    840a:	d2 96       	adiw	r26, 0x32	; 50
    840c:	ed 91       	ld	r30, X+
    840e:	fc 91       	ld	r31, X
    8410:	d3 97       	sbiw	r26, 0x33	; 51
    8412:	80 81       	ld	r24, Z
    8414:	d8 96       	adiw	r26, 0x38	; 56
    8416:	9c 91       	ld	r25, X
    8418:	d8 97       	sbiw	r26, 0x38	; 56
    841a:	89 2b       	or	r24, r25
    841c:	80 83       	st	Z, r24
    841e:	d0 96       	adiw	r26, 0x30	; 48
    8420:	ed 91       	ld	r30, X+
    8422:	fc 91       	ld	r31, X
    8424:	d1 97       	sbiw	r26, 0x31	; 49
    8426:	80 81       	ld	r24, Z
    8428:	d7 96       	adiw	r26, 0x37	; 55
    842a:	9c 91       	ld	r25, X
    842c:	d7 97       	sbiw	r26, 0x37	; 55
    842e:	89 2b       	or	r24, r25
    8430:	80 83       	st	Z, r24
    8432:	12 b9       	out	0x02, r17	; 2
    8434:	d2 96       	adiw	r26, 0x32	; 50
    8436:	ed 91       	ld	r30, X+
    8438:	fc 91       	ld	r31, X
    843a:	d3 97       	sbiw	r26, 0x33	; 51
    843c:	80 81       	ld	r24, Z
    843e:	dc 96       	adiw	r26, 0x3c	; 60
    8440:	9c 91       	ld	r25, X
    8442:	dc 97       	sbiw	r26, 0x3c	; 60
    8444:	89 23       	and	r24, r25
    8446:	80 83       	st	Z, r24
    8448:	d2 96       	adiw	r26, 0x32	; 50
    844a:	ed 91       	ld	r30, X+
    844c:	fc 91       	ld	r31, X
    844e:	d3 97       	sbiw	r26, 0x33	; 51
    8450:	80 81       	ld	r24, Z
    8452:	d8 96       	adiw	r26, 0x38	; 56
    8454:	9c 91       	ld	r25, X
    8456:	d8 97       	sbiw	r26, 0x38	; 56
    8458:	89 2b       	or	r24, r25
    845a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    845c:	d0 96       	adiw	r26, 0x30	; 48
    845e:	ed 91       	ld	r30, X+
    8460:	fc 91       	ld	r31, X
    8462:	d1 97       	sbiw	r26, 0x31	; 49
    8464:	80 81       	ld	r24, Z
    8466:	db 96       	adiw	r26, 0x3b	; 59
    8468:	9c 91       	ld	r25, X
    846a:	db 97       	sbiw	r26, 0x3b	; 59
    846c:	89 23       	and	r24, r25
    846e:	80 83       	st	Z, r24
    8470:	89 e0       	ldi	r24, 0x09	; 9
    8472:	82 b9       	out	0x02, r24	; 2
    8474:	d2 96       	adiw	r26, 0x32	; 50
    8476:	ed 91       	ld	r30, X+
    8478:	fc 91       	ld	r31, X
    847a:	d3 97       	sbiw	r26, 0x33	; 51
    847c:	80 81       	ld	r24, Z
    847e:	dc 96       	adiw	r26, 0x3c	; 60
    8480:	9c 91       	ld	r25, X
    8482:	dc 97       	sbiw	r26, 0x3c	; 60
    8484:	89 23       	and	r24, r25
    8486:	80 83       	st	Z, r24
    8488:	d2 96       	adiw	r26, 0x32	; 50
    848a:	ed 91       	ld	r30, X+
    848c:	fc 91       	ld	r31, X
    848e:	d3 97       	sbiw	r26, 0x33	; 51
    8490:	80 81       	ld	r24, Z
    8492:	d8 96       	adiw	r26, 0x38	; 56
    8494:	9c 91       	ld	r25, X
    8496:	d8 97       	sbiw	r26, 0x38	; 56
    8498:	89 2b       	or	r24, r25
    849a:	80 83       	st	Z, r24
    849c:	d0 96       	adiw	r26, 0x30	; 48
    849e:	ed 91       	ld	r30, X+
    84a0:	fc 91       	ld	r31, X
    84a2:	d1 97       	sbiw	r26, 0x31	; 49
    84a4:	80 81       	ld	r24, Z
    84a6:	d7 96       	adiw	r26, 0x37	; 55
    84a8:	9c 91       	ld	r25, X
    84aa:	d7 97       	sbiw	r26, 0x37	; 55
    84ac:	89 2b       	or	r24, r25
    84ae:	80 83       	st	Z, r24
    84b0:	02 b9       	out	0x02, r16	; 2
    84b2:	b9 cd       	rjmp	.-1166   	; 0x8026 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    84b4:	7d 83       	std	Y+5, r23	; 0x05
    84b6:	6e 83       	std	Y+6, r22	; 0x06
    84b8:	3f 83       	std	Y+7, r19	; 0x07
    84ba:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    84bc:	59 83       	std	Y+1, r21	; 0x01
    84be:	4a 83       	std	Y+2, r20	; 0x02
    84c0:	1b 83       	std	Y+3, r17	; 0x03
    84c2:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    84c4:	f7 01       	movw	r30, r14
    84c6:	64 8d       	ldd	r22, Z+28	; 0x1c
    84c8:	75 8d       	ldd	r23, Z+29	; 0x1d
    84ca:	24 e0       	ldi	r18, 0x04	; 4
    84cc:	ae 01       	movw	r20, r28
    84ce:	4b 5f       	subi	r20, 0xFB	; 251
    84d0:	5f 4f       	sbci	r21, 0xFF	; 255
    84d2:	c7 01       	movw	r24, r14
    84d4:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    84d8:	d7 01       	movw	r26, r14
    84da:	5e 96       	adiw	r26, 0x1e	; 30
    84dc:	6d 91       	ld	r22, X+
    84de:	7c 91       	ld	r23, X
    84e0:	24 e0       	ldi	r18, 0x04	; 4
    84e2:	ae 01       	movw	r20, r28
    84e4:	4f 5f       	subi	r20, 0xFF	; 255
    84e6:	5f 4f       	sbci	r21, 0xFF	; 255
    84e8:	c7 01       	movw	r24, r14
    84ea:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    84ee:	ae cd       	rjmp	.-1188   	; 0x804c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000084f0 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    84f0:	af 92       	push	r10
    84f2:	bf 92       	push	r11
    84f4:	cf 92       	push	r12
    84f6:	df 92       	push	r13
    84f8:	ff 92       	push	r15
    84fa:	0f 93       	push	r16
    84fc:	1f 93       	push	r17
    84fe:	cf 93       	push	r28
    8500:	df 93       	push	r29
    8502:	cd b7       	in	r28, 0x3d	; 61
    8504:	de b7       	in	r29, 0x3e	; 62
    8506:	a0 97       	sbiw	r28, 0x20	; 32
    8508:	0f b6       	in	r0, 0x3f	; 63
    850a:	f8 94       	cli
    850c:	de bf       	out	0x3e, r29	; 62
    850e:	0f be       	out	0x3f, r0	; 63
    8510:	cd bf       	out	0x3d, r28	; 61
    8512:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    8514:	a8 2e       	mov	r10, r24
    8516:	b1 2c       	mov	r11, r1
    8518:	65 01       	movw	r12, r10
    851a:	cc 0c       	add	r12, r12
    851c:	dd 1c       	adc	r13, r13
    851e:	cc 0c       	add	r12, r12
    8520:	dd 1c       	adc	r13, r13
    8522:	f6 01       	movw	r30, r12
    8524:	e2 52       	subi	r30, 0x22	; 34
    8526:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    8528:	60 81       	ld	r22, Z
    852a:	71 81       	ldd	r23, Z+1	; 0x01
    852c:	82 81       	ldd	r24, Z+2	; 0x02
    852e:	93 81       	ldd	r25, Z+3	; 0x03
    8530:	8e 01       	movw	r16, r28
    8532:	0f 5f       	subi	r16, 0xFF	; 255
    8534:	1f 4f       	sbci	r17, 0xFF	; 255
    8536:	22 e0       	ldi	r18, 0x02	; 2
    8538:	47 e0       	ldi	r20, 0x07	; 7
    853a:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    853e:	98 01       	movw	r18, r16
    8540:	49 e8       	ldi	r20, 0x89	; 137
    8542:	56 e0       	ldi	r21, 0x06	; 6
    8544:	6f 2d       	mov	r22, r15
    8546:	82 e5       	ldi	r24, 0x52	; 82
    8548:	93 e0       	ldi	r25, 0x03	; 3
    854a:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    854e:	f6 01       	movw	r30, r12
    8550:	ee 50       	subi	r30, 0x0E	; 14
    8552:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    8554:	60 81       	ld	r22, Z
    8556:	71 81       	ldd	r23, Z+1	; 0x01
    8558:	82 81       	ldd	r24, Z+2	; 0x02
    855a:	93 81       	ldd	r25, Z+3	; 0x03
    855c:	22 e0       	ldi	r18, 0x02	; 2
    855e:	47 e0       	ldi	r20, 0x07	; 7
    8560:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    8564:	98 01       	movw	r18, r16
    8566:	40 e9       	ldi	r20, 0x90	; 144
    8568:	56 e0       	ldi	r21, 0x06	; 6
    856a:	6f 2d       	mov	r22, r15
    856c:	82 e5       	ldi	r24, 0x52	; 82
    856e:	93 e0       	ldi	r25, 0x03	; 3
    8570:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    8574:	f6 01       	movw	r30, r12
    8576:	ea 5f       	subi	r30, 0xFA	; 250
    8578:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4242
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    857a:	60 81       	ld	r22, Z
    857c:	71 81       	ldd	r23, Z+1	; 0x01
    857e:	82 81       	ldd	r24, Z+2	; 0x02
    8580:	93 81       	ldd	r25, Z+3	; 0x03
    8582:	22 e0       	ldi	r18, 0x02	; 2
    8584:	47 e0       	ldi	r20, 0x07	; 7
    8586:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    858a:	98 01       	movw	r18, r16
    858c:	47 e9       	ldi	r20, 0x97	; 151
    858e:	56 e0       	ldi	r21, 0x06	; 6
    8590:	6f 2d       	mov	r22, r15
    8592:	82 e5       	ldi	r24, 0x52	; 82
    8594:	93 e0       	ldi	r25, 0x03	; 3
    8596:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    859a:	f5 01       	movw	r30, r10
    859c:	e6 5e       	subi	r30, 0xE6	; 230
    859e:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
  itoa(thermostat_get_pid_time(idx), payload, 10);
    85a0:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    85a2:	4a e0       	ldi	r20, 0x0A	; 10
    85a4:	b8 01       	movw	r22, r16
    85a6:	90 e0       	ldi	r25, 0x00	; 0
    85a8:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    85ac:	98 01       	movw	r18, r16
    85ae:	4e e9       	ldi	r20, 0x9E	; 158
    85b0:	56 e0       	ldi	r21, 0x06	; 6
    85b2:	6f 2d       	mov	r22, r15
    85b4:	82 e5       	ldi	r24, 0x52	; 82
    85b6:	93 e0       	ldi	r25, 0x03	; 3
    85b8:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4246
}
    85bc:	a0 96       	adiw	r28, 0x20	; 32
    85be:	0f b6       	in	r0, 0x3f	; 63
    85c0:	f8 94       	cli
    85c2:	de bf       	out	0x3e, r29	; 62
    85c4:	0f be       	out	0x3f, r0	; 63
    85c6:	cd bf       	out	0x3d, r28	; 61
    85c8:	df 91       	pop	r29
    85ca:	cf 91       	pop	r28
    85cc:	1f 91       	pop	r17
    85ce:	0f 91       	pop	r16
    85d0:	ff 90       	pop	r15
    85d2:	df 90       	pop	r13
    85d4:	cf 90       	pop	r12
    85d6:	bf 90       	pop	r11
    85d8:	af 90       	pop	r10
    85da:	08 95       	ret

000085dc <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046




bool draw_menu(bool redraw)
{
    85dc:	2f 92       	push	r2
    85de:	3f 92       	push	r3
    85e0:	4f 92       	push	r4
    85e2:	5f 92       	push	r5
    85e4:	6f 92       	push	r6
    85e6:	7f 92       	push	r7
    85e8:	8f 92       	push	r8
    85ea:	9f 92       	push	r9
    85ec:	af 92       	push	r10
    85ee:	bf 92       	push	r11
    85f0:	cf 92       	push	r12
    85f2:	df 92       	push	r13
    85f4:	ef 92       	push	r14
    85f6:	ff 92       	push	r15
    85f8:	0f 93       	push	r16
    85fa:	1f 93       	push	r17
    85fc:	cf 93       	push	r28
    85fe:	df 93       	push	r29
    8600:	cd b7       	in	r28, 0x3d	; 61
    8602:	de b7       	in	r29, 0x3e	; 62
    8604:	c3 5e       	subi	r28, 0xE3	; 227
    8606:	d1 09       	sbc	r29, r1
    8608:	0f b6       	in	r0, 0x3f	; 63
    860a:	f8 94       	cli
    860c:	de bf       	out	0x3e, r29	; 62
    860e:	0f be       	out	0x3f, r0	; 63
    8610:	cd bf       	out	0x3d, r28	; 61
    8612:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
    8614:	ce 01       	movw	r24, r28
    8616:	8d 54       	subi	r24, 0x4D	; 77
    8618:	9f 4f       	sbci	r25, 0xFF	; 255
    861a:	0e 94 1d 2b 	call	0x563a	; 0x563a <MenuHistoryGetMenu(unsigned char*)>
    861e:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    8620:	e0 91 1a 0e 	lds	r30, 0x0E1A	; 0x800e1a <my_touch+0x17>
    8624:	f0 91 1b 0e 	lds	r31, 0x0E1B	; 0x800e1b <my_touch+0x18>
    8628:	80 81       	ld	r24, Z
    862a:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <my_touch+0x1d>
    862e:	89 23       	and	r24, r25
    8630:	09 f0       	breq	.+2      	; 0x8634 <draw_menu(bool)+0x58>
    8632:	76 c2       	rjmp	.+1260   	; 0x8b20 <draw_menu(bool)+0x544>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    8634:	80 ed       	ldi	r24, 0xD0	; 208
    8636:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    863a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    863c:	80 e9       	ldi	r24, 0x90	; 144
    863e:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    8642:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    8644:	80 ed       	ldi	r24, 0xD0	; 208
    8646:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    864a:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    864c:	80 e9       	ldi	r24, 0x90	; 144
    864e:	0e 94 f3 8b 	call	0x117e6	; 0x117e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    8652:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    8654:	e8 14       	cp	r14, r8
    8656:	f9 04       	cpc	r15, r9
    8658:	48 f0       	brcs	.+18     	; 0x866c <draw_menu(bool)+0x90>
    865a:	c4 01       	movw	r24, r8
    865c:	c2 96       	adiw	r24, 0x32	; 50
    865e:	e8 16       	cp	r14, r24
    8660:	f9 06       	cpc	r15, r25
    8662:	50 f0       	brcs	.+20     	; 0x8678 <draw_menu(bool)+0x9c>
    8664:	8e 14       	cp	r8, r14
    8666:	9f 04       	cpc	r9, r15
    8668:	08 f4       	brcc	.+2      	; 0x866c <draw_menu(bool)+0x90>
    866a:	52 c0       	rjmp	.+164    	; 0x8710 <draw_menu(bool)+0x134>
    866c:	c7 01       	movw	r24, r14
    866e:	c2 96       	adiw	r24, 0x32	; 50
    8670:	88 16       	cp	r8, r24
    8672:	99 06       	cpc	r9, r25
    8674:	08 f0       	brcs	.+2      	; 0x8678 <draw_menu(bool)+0x9c>
    8676:	4c c0       	rjmp	.+152    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    8678:	0c 15       	cp	r16, r12
    867a:	1d 05       	cpc	r17, r13
    867c:	48 f0       	brcs	.+18     	; 0x8690 <draw_menu(bool)+0xb4>
    867e:	c6 01       	movw	r24, r12
    8680:	c2 96       	adiw	r24, 0x32	; 50
    8682:	08 17       	cp	r16, r24
    8684:	19 07       	cpc	r17, r25
    8686:	48 f0       	brcs	.+18     	; 0x869a <draw_menu(bool)+0xbe>
    8688:	c0 16       	cp	r12, r16
    868a:	d1 06       	cpc	r13, r17
    868c:	08 f4       	brcc	.+2      	; 0x8690 <draw_menu(bool)+0xb4>
    868e:	40 c0       	rjmp	.+128    	; 0x8710 <draw_menu(bool)+0x134>
    8690:	c8 01       	movw	r24, r16
    8692:	c2 96       	adiw	r24, 0x32	; 50
    8694:	c8 16       	cp	r12, r24
    8696:	d9 06       	cpc	r13, r25
    8698:	d8 f5       	brcc	.+118    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    869a:	e8 0c       	add	r14, r8
    869c:	f9 1c       	adc	r15, r9
    869e:	97 01       	movw	r18, r14
    86a0:	36 95       	lsr	r19
    86a2:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    86a4:	a4 e5       	ldi	r26, 0x54	; 84
    86a6:	b3 e0       	ldi	r27, 0x03	; 3
    86a8:	0e 94 80 bb 	call	0x17700	; 0x17700 <__umulhisi3>
    86ac:	20 e1       	ldi	r18, 0x10	; 16
    86ae:	22 2e       	mov	r2, r18
    86b0:	27 e2       	ldi	r18, 0x27	; 39
    86b2:	32 2e       	mov	r3, r18
    86b4:	41 2c       	mov	r4, r1
    86b6:	51 2c       	mov	r5, r1
    86b8:	a2 01       	movw	r20, r4
    86ba:	91 01       	movw	r18, r2
    86bc:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
    86c0:	79 01       	movw	r14, r18
    86c2:	6e e0       	ldi	r22, 0x0E	; 14
    86c4:	e6 1a       	sub	r14, r22
    86c6:	f1 08       	sbc	r15, r1
    86c8:	f0 92 08 0e 	sts	0x0E08, r15	; 0x800e08 <my_touch+0x5>
    86cc:	e0 92 07 0e 	sts	0x0E07, r14	; 0x800e07 <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    86d0:	0c 0d       	add	r16, r12
    86d2:	1d 1d       	adc	r17, r13
    86d4:	98 01       	movw	r18, r16
    86d6:	36 95       	lsr	r19
    86d8:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    86da:	a4 e0       	ldi	r26, 0x04	; 4
    86dc:	b5 e0       	ldi	r27, 0x05	; 5
    86de:	0e 94 80 bb 	call	0x17700	; 0x17700 <__umulhisi3>
    86e2:	a2 01       	movw	r20, r4
    86e4:	91 01       	movw	r18, r2
    86e6:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
    86ea:	2e 51       	subi	r18, 0x1E	; 30
    86ec:	31 09       	sbc	r19, r1
    86ee:	30 93 0a 0e 	sts	0x0E0A, r19	; 0x800e0a <my_touch+0x7>
    86f2:	20 93 09 0e 	sts	0x0E09, r18	; 0x800e09 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    86f6:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <my_touch+0xd>
    86fa:	81 30       	cpi	r24, 0x01	; 1
    86fc:	09 f4       	brne	.+2      	; 0x8700 <draw_menu(bool)+0x124>
    86fe:	c6 c1       	rjmp	.+908    	; 0x8a8c <draw_menu(bool)+0x4b0>
    8700:	08 f4       	brcc	.+2      	; 0x8704 <draw_menu(bool)+0x128>
    8702:	93 c1       	rjmp	.+806    	; 0x8a2a <draw_menu(bool)+0x44e>
    8704:	82 30       	cpi	r24, 0x02	; 2
    8706:	09 f4       	brne	.+2      	; 0x870a <draw_menu(bool)+0x12e>
    8708:	f2 c1       	rjmp	.+996    	; 0x8aee <draw_menu(bool)+0x512>
    870a:	83 30       	cpi	r24, 0x03	; 3
    870c:	09 f4       	brne	.+2      	; 0x8710 <draw_menu(bool)+0x134>
    870e:	fb c1       	rjmp	.+1014   	; 0x8b06 <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    8710:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <my_touch+0xc>
    8714:	87 fd       	sbrc	r24, 7
    8716:	13 c0       	rjmp	.+38     	; 0x873e <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    8718:	80 ec       	ldi	r24, 0xC0	; 192
    871a:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    871e:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <my_touch+0x4>
    8722:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <my_touch+0x5>
    8726:	90 93 04 0e 	sts	0x0E04, r25	; 0x800e04 <my_touch+0x1>
    872a:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    872e:	80 91 09 0e 	lds	r24, 0x0E09	; 0x800e09 <my_touch+0x6>
    8732:	90 91 0a 0e 	lds	r25, 0x0E0A	; 0x800e0a <my_touch+0x7>
    8736:	90 93 06 0e 	sts	0x0E06, r25	; 0x800e06 <my_touch+0x3>
    873a:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    873e:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <my_touch+0xc>
    8742:	87 ff       	sbrs	r24, 7
    8744:	08 c2       	rjmp	.+1040   	; 0x8b56 <draw_menu(bool)+0x57a>
    8746:	b1 10       	cpse	r11, r1
    8748:	06 c2       	rjmp	.+1036   	; 0x8b56 <draw_menu(bool)+0x57a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
  {
    click_x = my_touch.x;
    874a:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <my_touch+0x4>
    874e:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <my_touch+0x5>
    8752:	cc 53       	subi	r28, 0x3C	; 60
    8754:	df 4f       	sbci	r29, 0xFF	; 255
    8756:	99 83       	std	Y+1, r25	; 0x01
    8758:	88 83       	st	Y, r24
    875a:	c4 5c       	subi	r28, 0xC4	; 196
    875c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
    click_y = my_touch.y;
    875e:	e0 91 09 0e 	lds	r30, 0x0E09	; 0x800e09 <my_touch+0x6>
    8762:	f0 91 0a 0e 	lds	r31, 0x0E0A	; 0x800e0a <my_touch+0x7>
    8766:	ca 53       	subi	r28, 0x3A	; 58
    8768:	df 4f       	sbci	r29, 0xFF	; 255
    876a:	f9 83       	std	Y+1, r31	; 0x01
    876c:	e8 83       	st	Y, r30
    876e:	c6 5c       	subi	r28, 0xC6	; 198
    8770:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
  }

  global_x = pgm_read_word(&current->x);
    8772:	83 01       	movw	r16, r6
    8774:	02 54       	subi	r16, 0x42	; 66
    8776:	1d 4f       	sbci	r17, 0xFD	; 253
    8778:	f8 01       	movw	r30, r16
    877a:	25 91       	lpm	r18, Z+
    877c:	34 91       	lpm	r19, Z
    877e:	c8 54       	subi	r28, 0x48	; 72
    8780:	df 4f       	sbci	r29, 0xFF	; 255
    8782:	39 83       	std	Y+1, r19	; 0x01
    8784:	28 83       	st	Y, r18
    8786:	c8 5b       	subi	r28, 0xB8	; 184
    8788:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
  global_y = pgm_read_word(&current->y);
    878a:	73 01       	movw	r14, r6
    878c:	30 e4       	ldi	r19, 0x40	; 64
    878e:	e3 1a       	sub	r14, r19
    8790:	3d ef       	ldi	r19, 0xFD	; 253
    8792:	f3 0a       	sbc	r15, r19
    8794:	f7 01       	movw	r30, r14
    8796:	45 91       	lpm	r20, Z+
    8798:	54 91       	lpm	r21, Z
    879a:	c6 54       	subi	r28, 0x46	; 70
    879c:	df 4f       	sbci	r29, 0xFF	; 255
    879e:	59 83       	std	Y+1, r21	; 0x01
    87a0:	48 83       	st	Y, r20
    87a2:	ca 5b       	subi	r28, 0xBA	; 186
    87a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094


  rfnt = pgm_read_word(&current->redraw_class_0);
    87a6:	f3 01       	movw	r30, r6
    87a8:	e6 53       	subi	r30, 0x36	; 54
    87aa:	fd 4f       	sbci	r31, 0xFD	; 253
    87ac:	25 91       	lpm	r18, Z+
    87ae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    87b0:	63 01       	movw	r12, r6
    87b2:	53 e4       	ldi	r21, 0x43	; 67
    87b4:	c5 1a       	sub	r12, r21
    87b6:	5d ef       	ldi	r21, 0xFD	; 253
    87b8:	d5 0a       	sbc	r13, r21
    87ba:	f6 01       	movw	r30, r12
    87bc:	84 91       	lpm	r24, Z
    87be:	cd 54       	subi	r28, 0x4D	; 77
    87c0:	df 4f       	sbci	r29, 0xFF	; 255
    87c2:	68 81       	ld	r22, Y
    87c4:	c3 5b       	subi	r28, 0xB3	; 179
    87c6:	d0 40       	sbci	r29, 0x00	; 0
    87c8:	70 e0       	ldi	r23, 0x00	; 0
    87ca:	4f ef       	ldi	r20, 0xFF	; 255
    87cc:	90 e0       	ldi	r25, 0x00	; 0
    87ce:	f9 01       	movw	r30, r18
    87d0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  if (rdr == 0)
    cbi(redraw_class, 0);
    87d2:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    87d4:	88 23       	and	r24, r24
    87d6:	11 f0       	breq	.+4      	; 0x87dc <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    87d8:	aa 24       	eor	r10, r10
    87da:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    87dc:	f3 01       	movw	r30, r6
    87de:	e4 53       	subi	r30, 0x34	; 52
    87e0:	fd 4f       	sbci	r31, 0xFD	; 253
    87e2:	25 91       	lpm	r18, Z+
    87e4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    87e6:	f6 01       	movw	r30, r12
    87e8:	84 91       	lpm	r24, Z
    87ea:	cd 54       	subi	r28, 0x4D	; 77
    87ec:	df 4f       	sbci	r29, 0xFF	; 255
    87ee:	68 81       	ld	r22, Y
    87f0:	c3 5b       	subi	r28, 0xB3	; 179
    87f2:	d0 40       	sbci	r29, 0x00	; 0
    87f4:	70 e0       	ldi	r23, 0x00	; 0
    87f6:	4f ef       	ldi	r20, 0xFF	; 255
    87f8:	90 e0       	ldi	r25, 0x00	; 0
    87fa:	f9 01       	movw	r30, r18
    87fc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
  if (rdr == 0)
    87fe:	81 11       	cpse	r24, r1
    8800:	b7 c1       	rjmp	.+878    	; 0x8b70 <draw_menu(bool)+0x594>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
    cbi(redraw_class, 1);
    8802:	e8 94       	clt
    8804:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    8806:	f3 01       	movw	r30, r6
    8808:	e2 53       	subi	r30, 0x32	; 50
    880a:	fd 4f       	sbci	r31, 0xFD	; 253
    880c:	25 91       	lpm	r18, Z+
    880e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    8810:	f6 01       	movw	r30, r12
    8812:	84 91       	lpm	r24, Z
    8814:	cd 54       	subi	r28, 0x4D	; 77
    8816:	df 4f       	sbci	r29, 0xFF	; 255
    8818:	68 81       	ld	r22, Y
    881a:	c3 5b       	subi	r28, 0xB3	; 179
    881c:	d0 40       	sbci	r29, 0x00	; 0
    881e:	70 e0       	ldi	r23, 0x00	; 0
    8820:	4f ef       	ldi	r20, 0xFF	; 255
    8822:	90 e0       	ldi	r25, 0x00	; 0
    8824:	f9 01       	movw	r30, r18
    8826:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  if (rdr == 0)
    8828:	81 11       	cpse	r24, r1
    882a:	a5 c1       	rjmp	.+842    	; 0x8b76 <draw_menu(bool)+0x59a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
    cbi(redraw_class, 2);
    882c:	8a 2d       	mov	r24, r10
    882e:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    8830:	b1 10       	cpse	r11, r1
    8832:	a4 c1       	rjmp	.+840    	; 0x8b7c <draw_menu(bool)+0x5a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
    cbi(redraw_class, 3);
    8834:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  else
    sbi(redraw_class, 3);
    8836:	cf 52       	subi	r28, 0x2F	; 47
    8838:	df 4f       	sbci	r29, 0xFF	; 255
    883a:	88 83       	st	Y, r24
    883c:	c1 5d       	subi	r28, 0xD1	; 209
    883e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    8840:	f3 01       	movw	r30, r6
    8842:	e7 53       	subi	r30, 0x37	; 55
    8844:	fd 4f       	sbci	r31, 0xFD	; 253
    8846:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
  if (enable_redraw(rdr, redraw_class) == true)
    8848:	cf 52       	subi	r28, 0x2F	; 47
    884a:	df 4f       	sbci	r29, 0xFF	; 255
    884c:	68 81       	ld	r22, Y
    884e:	c1 5d       	subi	r28, 0xD1	; 209
    8850:	d0 40       	sbci	r29, 0x00	; 0
    8852:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    8856:	88 23       	and	r24, r24
    8858:	d9 f0       	breq	.+54     	; 0x8890 <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2124
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    885a:	f3 01       	movw	r30, r6
    885c:	65 91       	lpm	r22, Z+
    885e:	74 91       	lpm	r23, Z
    8860:	ce 01       	movw	r24, r28
    8862:	01 96       	adiw	r24, 0x01	; 1
    8864:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    8868:	f7 01       	movw	r30, r14
    886a:	45 91       	lpm	r20, Z+
    886c:	54 91       	lpm	r21, Z
    886e:	f8 01       	movw	r30, r16
    8870:	65 91       	lpm	r22, Z+
    8872:	74 91       	lpm	r23, Z
    8874:	4b 5f       	subi	r20, 0xFB	; 251
    8876:	5f 4f       	sbci	r21, 0xFF	; 255
    8878:	6b 5f       	subi	r22, 0xFB	; 251
    887a:	7f 4f       	sbci	r23, 0xFF	; 255
    887c:	ee 24       	eor	r14, r14
    887e:	ea 94       	dec	r14
    8880:	fe 2c       	mov	r15, r14
    8882:	10 e0       	ldi	r17, 0x00	; 0
    8884:	00 e0       	ldi	r16, 0x00	; 0
    8886:	22 e0       	ldi	r18, 0x02	; 2
    8888:	ce 01       	movw	r24, r28
    888a:	01 96       	adiw	r24, 0x01	; 1
    888c:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    8890:	91 2c       	mov	r9, r1
    8892:	c4 53       	subi	r28, 0x34	; 52
    8894:	df 4f       	sbci	r29, 0xFF	; 255
    8896:	18 82       	st	Y, r1
    8898:	cc 5c       	subi	r28, 0xCC	; 204
    889a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    889c:	13 01       	movw	r2, r6
    889e:	fb e4       	ldi	r31, 0x4B	; 75
    88a0:	2f 1a       	sub	r2, r31
    88a2:	fd ef       	ldi	r31, 0xFD	; 253
    88a4:	3f 0a       	sbc	r3, r31
    88a6:	f1 01       	movw	r30, r2
    88a8:	84 91       	lpm	r24, Z
    88aa:	98 16       	cp	r9, r24
    88ac:	08 f0       	brcs	.+2      	; 0x88b0 <draw_menu(bool)+0x2d4>
    88ae:	68 c1       	rjmp	.+720    	; 0x8b80 <draw_menu(bool)+0x5a4>
    88b0:	f1 e1       	ldi	r31, 0x11	; 17
    88b2:	9f 9e       	mul	r9, r31
    88b4:	20 01       	movw	r4, r0
    88b6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
  {
    button_1 = &current->button_1[idx];
    //rfnt = pgm_read_word(&button_1->enable_show);
    //active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, -1);
    //if (active == 0) continue;
    rdr = pgm_read_byte(&button_1->redraw_class);
    88b8:	f2 01       	movw	r30, r4
    88ba:	70 96       	adiw	r30, 0x10	; 16
    88bc:	e6 0d       	add	r30, r6
    88be:	f7 1d       	adc	r31, r7
    88c0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
    if (enable_redraw(rdr, redraw_class) == true)
    88c2:	cf 52       	subi	r28, 0x2F	; 47
    88c4:	df 4f       	sbci	r29, 0xFF	; 255
    88c6:	68 81       	ld	r22, Y
    88c8:	c1 5d       	subi	r28, 0xD1	; 209
    88ca:	d0 40       	sbci	r29, 0x00	; 0
    88cc:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    88d0:	88 23       	and	r24, r24
    88d2:	09 f4       	brne	.+2      	; 0x88d6 <draw_menu(bool)+0x2fa>
    88d4:	43 c0       	rjmp	.+134    	; 0x895c <draw_menu(bool)+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2138
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    88d6:	f2 01       	movw	r30, r4
    88d8:	32 96       	adiw	r30, 0x02	; 2
    88da:	e6 0d       	add	r30, r6
    88dc:	f7 1d       	adc	r31, r7
    88de:	65 91       	lpm	r22, Z+
    88e0:	74 91       	lpm	r23, Z
    88e2:	ce 01       	movw	r24, r28
    88e4:	8f 57       	subi	r24, 0x7F	; 127
    88e6:	9f 4f       	sbci	r25, 0xFF	; 255
    88e8:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
      str1[0] = 0;
    88ec:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    88ee:	f2 01       	movw	r30, r4
    88f0:	3c 96       	adiw	r30, 0x0c	; 12
    88f2:	e6 0d       	add	r30, r6
    88f4:	f7 1d       	adc	r31, r7
    88f6:	e4 90       	lpm	r14, Z
    88f8:	04 91       	lpm	r16, Z
    88fa:	f2 01       	movw	r30, r4
    88fc:	3a 96       	adiw	r30, 0x0a	; 10
    88fe:	e6 0d       	add	r30, r6
    8900:	f7 1d       	adc	r31, r7
    8902:	25 91       	lpm	r18, Z+
    8904:	34 91       	lpm	r19, Z
    8906:	f2 01       	movw	r30, r4
    8908:	38 96       	adiw	r30, 0x08	; 8
    890a:	e6 0d       	add	r30, r6
    890c:	f7 1d       	adc	r31, r7
    890e:	45 91       	lpm	r20, Z+
    8910:	54 91       	lpm	r21, Z
    8912:	f2 01       	movw	r30, r4
    8914:	36 96       	adiw	r30, 0x06	; 6
    8916:	e6 0d       	add	r30, r6
    8918:	f7 1d       	adc	r31, r7
    891a:	65 91       	lpm	r22, Z+
    891c:	74 91       	lpm	r23, Z
    891e:	f2 01       	movw	r30, r4
    8920:	34 96       	adiw	r30, 0x04	; 4
    8922:	e6 0d       	add	r30, r6
    8924:	f7 1d       	adc	r31, r7
    8926:	85 91       	lpm	r24, Z+
    8928:	94 91       	lpm	r25, Z
    892a:	c6 54       	subi	r28, 0x46	; 70
    892c:	df 4f       	sbci	r29, 0xFF	; 255
    892e:	e8 81       	ld	r30, Y
    8930:	f9 81       	ldd	r31, Y+1	; 0x01
    8932:	ca 5b       	subi	r28, 0xBA	; 186
    8934:	d0 40       	sbci	r29, 0x00	; 0
    8936:	6e 0f       	add	r22, r30
    8938:	7f 1f       	adc	r23, r31
    893a:	81 2c       	mov	r8, r1
    893c:	fe 01       	movw	r30, r28
    893e:	31 96       	adiw	r30, 0x01	; 1
    8940:	5f 01       	movw	r10, r30
    8942:	e0 58       	subi	r30, 0x80	; 128
    8944:	ff 4f       	sbci	r31, 0xFF	; 255
    8946:	6f 01       	movw	r12, r30
    8948:	c8 54       	subi	r28, 0x48	; 72
    894a:	df 4f       	sbci	r29, 0xFF	; 255
    894c:	e8 81       	ld	r30, Y
    894e:	f9 81       	ldd	r31, Y+1	; 0x01
    8950:	c8 5b       	subi	r28, 0xB8	; 184
    8952:	d0 40       	sbci	r29, 0x00	; 0
    8954:	8e 0f       	add	r24, r30
    8956:	9f 1f       	adc	r25, r31
    8958:	0e 94 4a 33 	call	0x6694	; 0x6694 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
    }
    if (click_x > 0 && click_y > 0)
    895c:	cc 53       	subi	r28, 0x3C	; 60
    895e:	df 4f       	sbci	r29, 0xFF	; 255
    8960:	28 81       	ld	r18, Y
    8962:	39 81       	ldd	r19, Y+1	; 0x01
    8964:	c4 5c       	subi	r28, 0xC4	; 196
    8966:	d0 40       	sbci	r29, 0x00	; 0
    8968:	23 2b       	or	r18, r19
    896a:	09 f4       	brne	.+2      	; 0x896e <draw_menu(bool)+0x392>
    896c:	5c c0       	rjmp	.+184    	; 0x8a26 <draw_menu(bool)+0x44a>
    896e:	ca 53       	subi	r28, 0x3A	; 58
    8970:	df 4f       	sbci	r29, 0xFF	; 255
    8972:	48 81       	ld	r20, Y
    8974:	59 81       	ldd	r21, Y+1	; 0x01
    8976:	c6 5c       	subi	r28, 0xC6	; 198
    8978:	d0 40       	sbci	r29, 0x00	; 0
    897a:	45 2b       	or	r20, r21
    897c:	09 f4       	brne	.+2      	; 0x8980 <draw_menu(bool)+0x3a4>
    897e:	53 c0       	rjmp	.+166    	; 0x8a26 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    8980:	f2 01       	movw	r30, r4
    8982:	3a 96       	adiw	r30, 0x0a	; 10
    8984:	e6 0d       	add	r30, r6
    8986:	f7 1d       	adc	r31, r7
    8988:	25 91       	lpm	r18, Z+
    898a:	34 91       	lpm	r19, Z
    898c:	f2 01       	movw	r30, r4
    898e:	38 96       	adiw	r30, 0x08	; 8
    8990:	e6 0d       	add	r30, r6
    8992:	f7 1d       	adc	r31, r7
    8994:	45 91       	lpm	r20, Z+
    8996:	54 91       	lpm	r21, Z
    8998:	f2 01       	movw	r30, r4
    899a:	36 96       	adiw	r30, 0x06	; 6
    899c:	e6 0d       	add	r30, r6
    899e:	f7 1d       	adc	r31, r7
    89a0:	65 91       	lpm	r22, Z+
    89a2:	74 91       	lpm	r23, Z
    89a4:	f2 01       	movw	r30, r4
    89a6:	34 96       	adiw	r30, 0x04	; 4
    89a8:	e6 0d       	add	r30, r6
    89aa:	f7 1d       	adc	r31, r7
    89ac:	85 91       	lpm	r24, Z+
    89ae:	94 91       	lpm	r25, Z
    89b0:	c6 54       	subi	r28, 0x46	; 70
    89b2:	df 4f       	sbci	r29, 0xFF	; 255
    89b4:	e8 81       	ld	r30, Y
    89b6:	f9 81       	ldd	r31, Y+1	; 0x01
    89b8:	ca 5b       	subi	r28, 0xBA	; 186
    89ba:	d0 40       	sbci	r29, 0x00	; 0
    89bc:	6e 0f       	add	r22, r30
    89be:	7f 1f       	adc	r23, r31
    89c0:	ca 53       	subi	r28, 0x3A	; 58
    89c2:	df 4f       	sbci	r29, 0xFF	; 255
    89c4:	e8 80       	ld	r14, Y
    89c6:	f9 80       	ldd	r15, Y+1	; 0x01
    89c8:	c6 5c       	subi	r28, 0xC6	; 198
    89ca:	d0 40       	sbci	r29, 0x00	; 0
    89cc:	cc 53       	subi	r28, 0x3C	; 60
    89ce:	df 4f       	sbci	r29, 0xFF	; 255
    89d0:	08 81       	ld	r16, Y
    89d2:	19 81       	ldd	r17, Y+1	; 0x01
    89d4:	c4 5c       	subi	r28, 0xC4	; 196
    89d6:	d0 40       	sbci	r29, 0x00	; 0
    89d8:	c8 54       	subi	r28, 0x48	; 72
    89da:	df 4f       	sbci	r29, 0xFF	; 255
    89dc:	e8 81       	ld	r30, Y
    89de:	f9 81       	ldd	r31, Y+1	; 0x01
    89e0:	c8 5b       	subi	r28, 0xB8	; 184
    89e2:	d0 40       	sbci	r29, 0x00	; 0
    89e4:	8e 0f       	add	r24, r30
    89e6:	9f 1f       	adc	r25, r31
    89e8:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    89ec:	18 2f       	mov	r17, r24
    89ee:	88 23       	and	r24, r24
    89f0:	d1 f0       	breq	.+52     	; 0x8a26 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2145
      {
        fntargs =  pgm_read_word(&button_1->onclick);
    89f2:	f2 01       	movw	r30, r4
    89f4:	3e 96       	adiw	r30, 0x0e	; 14
    89f6:	e6 0d       	add	r30, r6
    89f8:	f7 1d       	adc	r31, r7
    89fa:	25 91       	lpm	r18, Z+
    89fc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
    89fe:	f2 01       	movw	r30, r4
    8a00:	3d 96       	adiw	r30, 0x0d	; 13
    8a02:	e6 0d       	add	r30, r6
    8a04:	f7 1d       	adc	r31, r7
    8a06:	84 91       	lpm	r24, Z
    8a08:	cd 54       	subi	r28, 0x4D	; 77
    8a0a:	df 4f       	sbci	r29, 0xFF	; 255
    8a0c:	68 81       	ld	r22, Y
    8a0e:	c3 5b       	subi	r28, 0xB3	; 179
    8a10:	d0 40       	sbci	r29, 0x00	; 0
    8a12:	70 e0       	ldi	r23, 0x00	; 0
    8a14:	49 2d       	mov	r20, r9
    8a16:	90 e0       	ldi	r25, 0x00	; 0
    8a18:	f9 01       	movw	r30, r18
    8a1a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
        ret = true;
    8a1c:	c4 53       	subi	r28, 0x34	; 52
    8a1e:	df 4f       	sbci	r29, 0xFF	; 255
    8a20:	18 83       	st	Y, r17
    8a22:	cc 5c       	subi	r28, 0xCC	; 204
    8a24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    8a26:	93 94       	inc	r9
    8a28:	3e cf       	rjmp	.-388    	; 0x88a6 <draw_menu(bool)+0x2ca>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    8a2a:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <my_touch+0xe>
    8a2e:	88 23       	and	r24, r24
    8a30:	09 f4       	brne	.+2      	; 0x8a34 <draw_menu(bool)+0x458>
    8a32:	6e ce       	rjmp	.-804    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    8a34:	81 30       	cpi	r24, 0x01	; 1
    8a36:	59 f4       	brne	.+22     	; 0x8a4e <draw_menu(bool)+0x472>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    8a38:	30 93 08 0e 	sts	0x0E08, r19	; 0x800e08 <my_touch+0x5>
    8a3c:	20 93 07 0e 	sts	0x0E07, r18	; 0x800e07 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    8a40:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <my_touch+0xa>
    8a44:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_touch+0xb>
    8a48:	8e 19       	sub	r24, r14
    8a4a:	9f 09       	sbc	r25, r15
    8a4c:	3d c0       	rjmp	.+122    	; 0x8ac8 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    8a4e:	82 30       	cpi	r24, 0x02	; 2
    8a50:	59 f4       	brne	.+22     	; 0x8a68 <draw_menu(bool)+0x48c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    8a52:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <my_touch+0x8>
    8a56:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_touch+0x9>
    8a5a:	8e 19       	sub	r24, r14
    8a5c:	9f 09       	sbc	r25, r15
    8a5e:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <my_touch+0x5>
    8a62:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <my_touch+0x4>
    8a66:	2a c0       	rjmp	.+84     	; 0x8abc <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    8a68:	83 30       	cpi	r24, 0x03	; 3
    8a6a:	09 f0       	breq	.+2      	; 0x8a6e <draw_menu(bool)+0x492>
    8a6c:	51 ce       	rjmp	.-862    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    8a6e:	f0 92 0a 0e 	sts	0x0E0A, r15	; 0x800e0a <my_touch+0x7>
    8a72:	e0 92 09 0e 	sts	0x0E09, r14	; 0x800e09 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    8a76:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <my_touch+0x8>
    8a7a:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_touch+0x9>
    8a7e:	82 1b       	sub	r24, r18
    8a80:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    8a82:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <my_touch+0x5>
    8a86:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <my_touch+0x4>
    8a8a:	42 ce       	rjmp	.-892    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    8a8c:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <my_touch+0xe>
    8a90:	81 11       	cpse	r24, r1
    8a92:	07 c0       	rjmp	.+14     	; 0x8aa2 <draw_menu(bool)+0x4c6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    8a94:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <my_touch+0x8>
    8a98:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_touch+0x9>
    8a9c:	8e 19       	sub	r24, r14
    8a9e:	9f 09       	sbc	r25, r15
    8aa0:	f0 cf       	rjmp	.-32     	; 0x8a82 <draw_menu(bool)+0x4a6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    8aa2:	81 30       	cpi	r24, 0x01	; 1
    8aa4:	49 f4       	brne	.+18     	; 0x8ab8 <draw_menu(bool)+0x4dc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    8aa6:	30 93 08 0e 	sts	0x0E08, r19	; 0x800e08 <my_touch+0x5>
    8aaa:	20 93 07 0e 	sts	0x0E07, r18	; 0x800e07 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    8aae:	f0 92 0a 0e 	sts	0x0E0A, r15	; 0x800e0a <my_touch+0x7>
    8ab2:	e0 92 09 0e 	sts	0x0E09, r14	; 0x800e09 <my_touch+0x6>
    8ab6:	2c ce       	rjmp	.-936    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    8ab8:	82 30       	cpi	r24, 0x02	; 2
    8aba:	59 f4       	brne	.+22     	; 0x8ad2 <draw_menu(bool)+0x4f6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    8abc:	80 91 0d 0e 	lds	r24, 0x0E0D	; 0x800e0d <my_touch+0xa>
    8ac0:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_touch+0xb>
    8ac4:	82 1b       	sub	r24, r18
    8ac6:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    8ac8:	90 93 0a 0e 	sts	0x0E0A, r25	; 0x800e0a <my_touch+0x7>
    8acc:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <my_touch+0x6>
    8ad0:	1f ce       	rjmp	.-962    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    8ad2:	83 30       	cpi	r24, 0x03	; 3
    8ad4:	09 f0       	breq	.+2      	; 0x8ad8 <draw_menu(bool)+0x4fc>
    8ad6:	1c ce       	rjmp	.-968    	; 0x8710 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    8ad8:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <my_touch+0x8>
    8adc:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_touch+0x9>
    8ae0:	82 1b       	sub	r24, r18
    8ae2:	93 0b       	sbc	r25, r19
    8ae4:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <my_touch+0x5>
    8ae8:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <my_touch+0x4>
    8aec:	a9 cf       	rjmp	.-174    	; 0x8a40 <draw_menu(bool)+0x464>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    8aee:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <my_touch+0xe>
    8af2:	88 23       	and	r24, r24
    8af4:	09 f4       	brne	.+2      	; 0x8af8 <draw_menu(bool)+0x51c>
    8af6:	ad cf       	rjmp	.-166    	; 0x8a52 <draw_menu(bool)+0x476>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    8af8:	81 30       	cpi	r24, 0x01	; 1
    8afa:	09 f4       	brne	.+2      	; 0x8afe <draw_menu(bool)+0x522>
    8afc:	b8 cf       	rjmp	.-144    	; 0x8a6e <draw_menu(bool)+0x492>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    8afe:	83 30       	cpi	r24, 0x03	; 3
    8b00:	09 f0       	breq	.+2      	; 0x8b04 <draw_menu(bool)+0x528>
    8b02:	06 ce       	rjmp	.-1012   	; 0x8710 <draw_menu(bool)+0x134>
    8b04:	99 cf       	rjmp	.-206    	; 0x8a38 <draw_menu(bool)+0x45c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    8b06:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <my_touch+0xe>
    8b0a:	88 23       	and	r24, r24
    8b0c:	b9 f2       	breq	.-82     	; 0x8abc <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    8b0e:	81 30       	cpi	r24, 0x01	; 1
    8b10:	19 f3       	breq	.-58     	; 0x8ad8 <draw_menu(bool)+0x4fc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    8b12:	82 30       	cpi	r24, 0x02	; 2
    8b14:	09 f4       	brne	.+2      	; 0x8b18 <draw_menu(bool)+0x53c>
    8b16:	be cf       	rjmp	.-132    	; 0x8a94 <draw_menu(bool)+0x4b8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    8b18:	83 30       	cpi	r24, 0x03	; 3
    8b1a:	09 f0       	breq	.+2      	; 0x8b1e <draw_menu(bool)+0x542>
    8b1c:	f9 cd       	rjmp	.-1038   	; 0x8710 <draw_menu(bool)+0x134>
    8b1e:	c3 cf       	rjmp	.-122    	; 0x8aa6 <draw_menu(bool)+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    8b20:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <my_touch+0xc>
    8b24:	87 ff       	sbrs	r24, 7
    8b26:	04 c0       	rjmp	.+8      	; 0x8b30 <draw_menu(bool)+0x554>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    8b28:	8f 77       	andi	r24, 0x7F	; 127
    8b2a:	80 93 0f 0e 	sts	0x0E0F, r24	; 0x800e0f <my_touch+0xc>
    8b2e:	07 ce       	rjmp	.-1010   	; 0x873e <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    8b30:	10 92 04 0e 	sts	0x0E04, r1	; 0x800e04 <my_touch+0x1>
    8b34:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    8b38:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <my_touch+0x3>
    8b3c:	10 92 05 0e 	sts	0x0E05, r1	; 0x800e05 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    8b40:	8f ef       	ldi	r24, 0xFF	; 255
    8b42:	9f ef       	ldi	r25, 0xFF	; 255
    8b44:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <my_touch+0x5>
    8b48:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    8b4c:	90 93 0a 0e 	sts	0x0E0A, r25	; 0x800e0a <my_touch+0x7>
    8b50:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <my_touch+0x6>
    8b54:	f4 cd       	rjmp	.-1048   	; 0x873e <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    8b56:	ca 53       	subi	r28, 0x3A	; 58
    8b58:	df 4f       	sbci	r29, 0xFF	; 255
    8b5a:	19 82       	std	Y+1, r1	; 0x01
    8b5c:	18 82       	st	Y, r1
    8b5e:	c6 5c       	subi	r28, 0xC6	; 198
    8b60:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    8b62:	cc 53       	subi	r28, 0x3C	; 60
    8b64:	df 4f       	sbci	r29, 0xFF	; 255
    8b66:	19 82       	std	Y+1, r1	; 0x01
    8b68:	18 82       	st	Y, r1
    8b6a:	c4 5c       	subi	r28, 0xC4	; 196
    8b6c:	d0 40       	sbci	r29, 0x00	; 0
    8b6e:	01 ce       	rjmp	.-1022   	; 0x8772 <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    8b70:	68 94       	set
    8b72:	a1 f8       	bld	r10, 1
    8b74:	48 ce       	rjmp	.-880    	; 0x8806 <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    8b76:	8a 2d       	mov	r24, r10
    8b78:	84 60       	ori	r24, 0x04	; 4
    8b7a:	5a ce       	rjmp	.-844    	; 0x8830 <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    8b7c:	88 60       	ori	r24, 0x08	; 8
    8b7e:	5b ce       	rjmp	.-842    	; 0x8836 <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8b80:	c4 53       	subi	r28, 0x34	; 52
    8b82:	df 4f       	sbci	r29, 0xFF	; 255
    8b84:	f8 81       	ld	r31, Y
    8b86:	cc 5c       	subi	r28, 0xCC	; 204
    8b88:	d0 40       	sbci	r29, 0x00	; 0
    8b8a:	f1 11       	cpse	r31, r1
    8b8c:	0c 94 b4 55 	jmp	0xab68	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8b90:	91 2c       	mov	r9, r1
    8b92:	93 01       	movw	r18, r6
    8b94:	2a 54       	subi	r18, 0x4A	; 74
    8b96:	3d 4f       	sbci	r19, 0xFD	; 253
    8b98:	c4 54       	subi	r28, 0x44	; 68
    8b9a:	df 4f       	sbci	r29, 0xFF	; 255
    8b9c:	39 83       	std	Y+1, r19	; 0x01
    8b9e:	28 83       	st	Y, r18
    8ba0:	cc 5b       	subi	r28, 0xBC	; 188
    8ba2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8ba4:	1e 01       	movw	r2, r28
    8ba6:	31 e8       	ldi	r19, 0x81	; 129
    8ba8:	23 0e       	add	r2, r19
    8baa:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8bac:	c4 54       	subi	r28, 0x44	; 68
    8bae:	df 4f       	sbci	r29, 0xFF	; 255
    8bb0:	e8 81       	ld	r30, Y
    8bb2:	f9 81       	ldd	r31, Y+1	; 0x01
    8bb4:	cc 5b       	subi	r28, 0xBC	; 188
    8bb6:	d0 40       	sbci	r29, 0x00	; 0
    8bb8:	84 91       	lpm	r24, Z
    8bba:	98 16       	cp	r9, r24
    8bbc:	08 f0       	brcs	.+2      	; 0x8bc0 <draw_menu(bool)+0x5e4>
    8bbe:	1c c1       	rjmp	.+568    	; 0x8df8 <draw_menu(bool)+0x81c>
    8bc0:	f7 e1       	ldi	r31, 0x17	; 23
    8bc2:	9f 9e       	mul	r9, r31
    8bc4:	20 01       	movw	r4, r0
    8bc6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->enable_show);
    8bc8:	f2 01       	movw	r30, r4
    8bca:	ef 53       	subi	r30, 0x3F	; 63
    8bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    8bce:	e6 0d       	add	r30, r6
    8bd0:	f7 1d       	adc	r31, r7
    8bd2:	25 91       	lpm	r18, Z+
    8bd4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2156
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    8bd6:	c2 01       	movw	r24, r4
    8bd8:	85 54       	subi	r24, 0x45	; 69
    8bda:	9f 4f       	sbci	r25, 0xFF	; 255
    8bdc:	a3 01       	movw	r20, r6
    8bde:	48 0f       	add	r20, r24
    8be0:	59 1f       	adc	r21, r25
    8be2:	ca 54       	subi	r28, 0x4A	; 74
    8be4:	df 4f       	sbci	r29, 0xFF	; 255
    8be6:	59 83       	std	Y+1, r21	; 0x01
    8be8:	48 83       	st	Y, r20
    8bea:	c6 5b       	subi	r28, 0xB6	; 182
    8bec:	d0 40       	sbci	r29, 0x00	; 0
    8bee:	fa 01       	movw	r30, r20
    8bf0:	84 91       	lpm	r24, Z
    8bf2:	cd 54       	subi	r28, 0x4D	; 77
    8bf4:	df 4f       	sbci	r29, 0xFF	; 255
    8bf6:	68 81       	ld	r22, Y
    8bf8:	c3 5b       	subi	r28, 0xB3	; 179
    8bfa:	d0 40       	sbci	r29, 0x00	; 0
    8bfc:	70 e0       	ldi	r23, 0x00	; 0
    8bfe:	49 2d       	mov	r20, r9
    8c00:	90 e0       	ldi	r25, 0x00	; 0
    8c02:	f9 01       	movw	r30, r18
    8c04:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
    if (active == 0) continue;
    8c06:	88 23       	and	r24, r24
    8c08:	09 f4       	brne	.+2      	; 0x8c0c <draw_menu(bool)+0x630>
    8c0a:	f4 c0       	rjmp	.+488    	; 0x8df4 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
    rdr = pgm_read_byte(&button_2->redraw_class);
    8c0c:	f2 01       	movw	r30, r4
    8c0e:	e0 54       	subi	r30, 0x40	; 64
    8c10:	ff 4f       	sbci	r31, 0xFF	; 255
    8c12:	e6 0d       	add	r30, r6
    8c14:	f7 1d       	adc	r31, r7
    8c16:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
    if (enable_redraw(rdr, redraw_class) == true)
    8c18:	cf 52       	subi	r28, 0x2F	; 47
    8c1a:	df 4f       	sbci	r29, 0xFF	; 255
    8c1c:	68 81       	ld	r22, Y
    8c1e:	c1 5d       	subi	r28, 0xD1	; 209
    8c20:	d0 40       	sbci	r29, 0x00	; 0
    8c22:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    8c26:	88 23       	and	r24, r24
    8c28:	09 f4       	brne	.+2      	; 0x8c2c <draw_menu(bool)+0x650>
    8c2a:	78 c0       	rjmp	.+240    	; 0x8d1c <draw_menu(bool)+0x740>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8c2c:	f2 01       	movw	r30, r4
    8c2e:	e4 55       	subi	r30, 0x54	; 84
    8c30:	ff 4f       	sbci	r31, 0xFF	; 255
    8c32:	e6 0d       	add	r30, r6
    8c34:	f7 1d       	adc	r31, r7
    8c36:	65 91       	lpm	r22, Z+
    8c38:	74 91       	lpm	r23, Z
    8c3a:	c1 01       	movw	r24, r2
    8c3c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    8c40:	f2 01       	movw	r30, r4
    8c42:	e2 54       	subi	r30, 0x42	; 66
    8c44:	ff 4f       	sbci	r31, 0xFF	; 255
    8c46:	e6 0d       	add	r30, r6
    8c48:	f7 1d       	adc	r31, r7
    8c4a:	25 91       	lpm	r18, Z+
    8c4c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8c4e:	ca 54       	subi	r28, 0x4A	; 74
    8c50:	df 4f       	sbci	r29, 0xFF	; 255
    8c52:	e8 81       	ld	r30, Y
    8c54:	f9 81       	ldd	r31, Y+1	; 0x01
    8c56:	c6 5b       	subi	r28, 0xB6	; 182
    8c58:	d0 40       	sbci	r29, 0x00	; 0
    8c5a:	84 91       	lpm	r24, Z
    8c5c:	cd 54       	subi	r28, 0x4D	; 77
    8c5e:	df 4f       	sbci	r29, 0xFF	; 255
    8c60:	68 81       	ld	r22, Y
    8c62:	c3 5b       	subi	r28, 0xB3	; 179
    8c64:	d0 40       	sbci	r29, 0x00	; 0
    8c66:	70 e0       	ldi	r23, 0x00	; 0
    8c68:	49 2d       	mov	r20, r9
    8c6a:	90 e0       	ldi	r25, 0x00	; 0
    8c6c:	f9 01       	movw	r30, r18
    8c6e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
      str1[0] = 0;
    8c70:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    8c72:	f2 01       	movw	r30, r4
    8c74:	e7 54       	subi	r30, 0x47	; 71
    8c76:	ff 4f       	sbci	r31, 0xFF	; 255
    8c78:	e6 0d       	add	r30, r6
    8c7a:	f7 1d       	adc	r31, r7
    8c7c:	a5 90       	lpm	r10, Z+
    8c7e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    8c80:	f2 01       	movw	r30, r4
    8c82:	e9 54       	subi	r30, 0x49	; 73
    8c84:	ff 4f       	sbci	r31, 0xFF	; 255
    8c86:	e6 0d       	add	r30, r6
    8c88:	f7 1d       	adc	r31, r7
    8c8a:	c5 90       	lpm	r12, Z+
    8c8c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    8c8e:	82 01       	movw	r16, r4
    8c90:	0a 54       	subi	r16, 0x4A	; 74
    8c92:	1f 4f       	sbci	r17, 0xFF	; 255
    8c94:	06 0d       	add	r16, r6
    8c96:	17 1d       	adc	r17, r7
    8c98:	f8 01       	movw	r30, r16
    8c9a:	04 91       	lpm	r16, Z
    8c9c:	f2 01       	movw	r30, r4
    8c9e:	ec 54       	subi	r30, 0x4C	; 76
    8ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    8ca2:	e6 0d       	add	r30, r6
    8ca4:	f7 1d       	adc	r31, r7
    8ca6:	25 91       	lpm	r18, Z+
    8ca8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    8caa:	f2 01       	movw	r30, r4
    8cac:	ee 54       	subi	r30, 0x4E	; 78
    8cae:	ff 4f       	sbci	r31, 0xFF	; 255
    8cb0:	e6 0d       	add	r30, r6
    8cb2:	f7 1d       	adc	r31, r7
    8cb4:	45 91       	lpm	r20, Z+
    8cb6:	54 91       	lpm	r21, Z
    8cb8:	f2 01       	movw	r30, r4
    8cba:	e0 55       	subi	r30, 0x50	; 80
    8cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    8cbe:	e6 0d       	add	r30, r6
    8cc0:	f7 1d       	adc	r31, r7
    8cc2:	65 91       	lpm	r22, Z+
    8cc4:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8cc6:	f2 01       	movw	r30, r4
    8cc8:	e2 55       	subi	r30, 0x52	; 82
    8cca:	ff 4f       	sbci	r31, 0xFF	; 255
    8ccc:	e6 0d       	add	r30, r6
    8cce:	f7 1d       	adc	r31, r7
    8cd0:	a5 91       	lpm	r26, Z+
    8cd2:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8cd4:	88 24       	eor	r8, r8
    8cd6:	83 94       	inc	r8
    8cd8:	81 11       	cpse	r24, r1
    8cda:	01 c0       	rjmp	.+2      	; 0x8cde <draw_menu(bool)+0x702>
    8cdc:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8cde:	c6 54       	subi	r28, 0x46	; 70
    8ce0:	df 4f       	sbci	r29, 0xFF	; 255
    8ce2:	88 81       	ld	r24, Y
    8ce4:	99 81       	ldd	r25, Y+1	; 0x01
    8ce6:	ca 5b       	subi	r28, 0xBA	; 186
    8ce8:	d0 40       	sbci	r29, 0x00	; 0
    8cea:	68 0f       	add	r22, r24
    8cec:	79 1f       	adc	r23, r25
    8cee:	e1 e0       	ldi	r30, 0x01	; 1
    8cf0:	f0 e0       	ldi	r31, 0x00	; 0
    8cf2:	ec 0f       	add	r30, r28
    8cf4:	fd 1f       	adc	r31, r29
    8cf6:	ff 93       	push	r31
    8cf8:	ef 93       	push	r30
    8cfa:	3f 92       	push	r3
    8cfc:	2f 92       	push	r2
    8cfe:	e1 2c       	mov	r14, r1
    8d00:	c8 54       	subi	r28, 0x48	; 72
    8d02:	df 4f       	sbci	r29, 0xFF	; 255
    8d04:	88 81       	ld	r24, Y
    8d06:	99 81       	ldd	r25, Y+1	; 0x01
    8d08:	c8 5b       	subi	r28, 0xB8	; 184
    8d0a:	d0 40       	sbci	r29, 0x00	; 0
    8d0c:	8a 0f       	add	r24, r26
    8d0e:	9b 1f       	adc	r25, r27
    8d10:	0e 94 45 32 	call	0x648a	; 0x648a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    8d14:	0f 90       	pop	r0
    8d16:	0f 90       	pop	r0
    8d18:	0f 90       	pop	r0
    8d1a:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    8d1c:	cc 53       	subi	r28, 0x3C	; 60
    8d1e:	df 4f       	sbci	r29, 0xFF	; 255
    8d20:	28 81       	ld	r18, Y
    8d22:	39 81       	ldd	r19, Y+1	; 0x01
    8d24:	c4 5c       	subi	r28, 0xC4	; 196
    8d26:	d0 40       	sbci	r29, 0x00	; 0
    8d28:	23 2b       	or	r18, r19
    8d2a:	09 f4       	brne	.+2      	; 0x8d2e <draw_menu(bool)+0x752>
    8d2c:	63 c0       	rjmp	.+198    	; 0x8df4 <draw_menu(bool)+0x818>
    8d2e:	ca 53       	subi	r28, 0x3A	; 58
    8d30:	df 4f       	sbci	r29, 0xFF	; 255
    8d32:	48 81       	ld	r20, Y
    8d34:	59 81       	ldd	r21, Y+1	; 0x01
    8d36:	c6 5c       	subi	r28, 0xC6	; 198
    8d38:	d0 40       	sbci	r29, 0x00	; 0
    8d3a:	45 2b       	or	r20, r21
    8d3c:	09 f4       	brne	.+2      	; 0x8d40 <draw_menu(bool)+0x764>
    8d3e:	5a c0       	rjmp	.+180    	; 0x8df4 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    8d40:	f2 01       	movw	r30, r4
    8d42:	ec 54       	subi	r30, 0x4C	; 76
    8d44:	ff 4f       	sbci	r31, 0xFF	; 255
    8d46:	e6 0d       	add	r30, r6
    8d48:	f7 1d       	adc	r31, r7
    8d4a:	25 91       	lpm	r18, Z+
    8d4c:	34 91       	lpm	r19, Z
    8d4e:	f2 01       	movw	r30, r4
    8d50:	ee 54       	subi	r30, 0x4E	; 78
    8d52:	ff 4f       	sbci	r31, 0xFF	; 255
    8d54:	e6 0d       	add	r30, r6
    8d56:	f7 1d       	adc	r31, r7
    8d58:	45 91       	lpm	r20, Z+
    8d5a:	54 91       	lpm	r21, Z
    8d5c:	f2 01       	movw	r30, r4
    8d5e:	e0 55       	subi	r30, 0x50	; 80
    8d60:	ff 4f       	sbci	r31, 0xFF	; 255
    8d62:	e6 0d       	add	r30, r6
    8d64:	f7 1d       	adc	r31, r7
    8d66:	65 91       	lpm	r22, Z+
    8d68:	74 91       	lpm	r23, Z
    8d6a:	f2 01       	movw	r30, r4
    8d6c:	e2 55       	subi	r30, 0x52	; 82
    8d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    8d70:	e6 0d       	add	r30, r6
    8d72:	f7 1d       	adc	r31, r7
    8d74:	85 91       	lpm	r24, Z+
    8d76:	94 91       	lpm	r25, Z
    8d78:	c6 54       	subi	r28, 0x46	; 70
    8d7a:	df 4f       	sbci	r29, 0xFF	; 255
    8d7c:	e8 81       	ld	r30, Y
    8d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    8d80:	ca 5b       	subi	r28, 0xBA	; 186
    8d82:	d0 40       	sbci	r29, 0x00	; 0
    8d84:	6e 0f       	add	r22, r30
    8d86:	7f 1f       	adc	r23, r31
    8d88:	ca 53       	subi	r28, 0x3A	; 58
    8d8a:	df 4f       	sbci	r29, 0xFF	; 255
    8d8c:	e8 80       	ld	r14, Y
    8d8e:	f9 80       	ldd	r15, Y+1	; 0x01
    8d90:	c6 5c       	subi	r28, 0xC6	; 198
    8d92:	d0 40       	sbci	r29, 0x00	; 0
    8d94:	cc 53       	subi	r28, 0x3C	; 60
    8d96:	df 4f       	sbci	r29, 0xFF	; 255
    8d98:	08 81       	ld	r16, Y
    8d9a:	19 81       	ldd	r17, Y+1	; 0x01
    8d9c:	c4 5c       	subi	r28, 0xC4	; 196
    8d9e:	d0 40       	sbci	r29, 0x00	; 0
    8da0:	c8 54       	subi	r28, 0x48	; 72
    8da2:	df 4f       	sbci	r29, 0xFF	; 255
    8da4:	e8 81       	ld	r30, Y
    8da6:	f9 81       	ldd	r31, Y+1	; 0x01
    8da8:	c8 5b       	subi	r28, 0xB8	; 184
    8daa:	d0 40       	sbci	r29, 0x00	; 0
    8dac:	8e 0f       	add	r24, r30
    8dae:	9f 1f       	adc	r25, r31
    8db0:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8db4:	18 2f       	mov	r17, r24
    8db6:	88 23       	and	r24, r24
    8db8:	e9 f0       	breq	.+58     	; 0x8df4 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    8dba:	f2 01       	movw	r30, r4
    8dbc:	e4 54       	subi	r30, 0x44	; 68
    8dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    8dc0:	e6 0d       	add	r30, r6
    8dc2:	f7 1d       	adc	r31, r7
    8dc4:	25 91       	lpm	r18, Z+
    8dc6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8dc8:	ca 54       	subi	r28, 0x4A	; 74
    8dca:	df 4f       	sbci	r29, 0xFF	; 255
    8dcc:	e8 81       	ld	r30, Y
    8dce:	f9 81       	ldd	r31, Y+1	; 0x01
    8dd0:	c6 5b       	subi	r28, 0xB6	; 182
    8dd2:	d0 40       	sbci	r29, 0x00	; 0
    8dd4:	84 91       	lpm	r24, Z
    8dd6:	cd 54       	subi	r28, 0x4D	; 77
    8dd8:	df 4f       	sbci	r29, 0xFF	; 255
    8dda:	68 81       	ld	r22, Y
    8ddc:	c3 5b       	subi	r28, 0xB3	; 179
    8dde:	d0 40       	sbci	r29, 0x00	; 0
    8de0:	70 e0       	ldi	r23, 0x00	; 0
    8de2:	49 2d       	mov	r20, r9
    8de4:	90 e0       	ldi	r25, 0x00	; 0
    8de6:	f9 01       	movw	r30, r18
    8de8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
        ret = true;
    8dea:	c4 53       	subi	r28, 0x34	; 52
    8dec:	df 4f       	sbci	r29, 0xFF	; 255
    8dee:	18 83       	st	Y, r17
    8df0:	cc 5c       	subi	r28, 0xCC	; 204
    8df2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8df4:	93 94       	inc	r9
    8df6:	da ce       	rjmp	.-588    	; 0x8bac <draw_menu(bool)+0x5d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2179
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8df8:	c4 53       	subi	r28, 0x34	; 52
    8dfa:	df 4f       	sbci	r29, 0xFF	; 255
    8dfc:	f8 81       	ld	r31, Y
    8dfe:	cc 5c       	subi	r28, 0xCC	; 204
    8e00:	d0 40       	sbci	r29, 0x00	; 0
    8e02:	f1 11       	cpse	r31, r1
    8e04:	0c 94 b4 55 	jmp	0xab68	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8e08:	91 2c       	mov	r9, r1
    8e0a:	53 01       	movw	r10, r6
    8e0c:	29 e4       	ldi	r18, 0x49	; 73
    8e0e:	a2 1a       	sub	r10, r18
    8e10:	2d ef       	ldi	r18, 0xFD	; 253
    8e12:	b2 0a       	sbc	r11, r18
    8e14:	f5 01       	movw	r30, r10
    8e16:	84 91       	lpm	r24, Z
    8e18:	98 16       	cp	r9, r24
    8e1a:	08 f0       	brcs	.+2      	; 0x8e1e <draw_menu(bool)+0x842>
    8e1c:	bf c0       	rjmp	.+382    	; 0x8f9c <draw_menu(bool)+0x9c0>
    8e1e:	f0 e1       	ldi	r31, 0x10	; 16
    8e20:	9f 9e       	mul	r9, r31
    8e22:	60 01       	movw	r12, r0
    8e24:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->enable_show);
    8e26:	f6 01       	movw	r30, r12
    8e28:	e3 5d       	subi	r30, 0xD3	; 211
    8e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    8e2c:	e6 0d       	add	r30, r6
    8e2e:	f7 1d       	adc	r31, r7
    8e30:	25 91       	lpm	r18, Z+
    8e32:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
    8e34:	86 01       	movw	r16, r12
    8e36:	0d 5d       	subi	r16, 0xDD	; 221
    8e38:	1e 4f       	sbci	r17, 0xFE	; 254
    8e3a:	06 0d       	add	r16, r6
    8e3c:	17 1d       	adc	r17, r7
    8e3e:	f8 01       	movw	r30, r16
    8e40:	84 91       	lpm	r24, Z
    8e42:	cd 54       	subi	r28, 0x4D	; 77
    8e44:	df 4f       	sbci	r29, 0xFF	; 255
    8e46:	68 81       	ld	r22, Y
    8e48:	c3 5b       	subi	r28, 0xB3	; 179
    8e4a:	d0 40       	sbci	r29, 0x00	; 0
    8e4c:	70 e0       	ldi	r23, 0x00	; 0
    8e4e:	49 2d       	mov	r20, r9
    8e50:	90 e0       	ldi	r25, 0x00	; 0
    8e52:	f9 01       	movw	r30, r18
    8e54:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
    if (active == 0) continue;
    8e56:	88 23       	and	r24, r24
    8e58:	09 f4       	brne	.+2      	; 0x8e5c <draw_menu(bool)+0x880>
    8e5a:	9e c0       	rjmp	.+316    	; 0x8f98 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2187
    rdr = pgm_read_byte(&function_1->redraw_class);
    8e5c:	f6 01       	movw	r30, r12
    8e5e:	e6 5d       	subi	r30, 0xD6	; 214
    8e60:	fe 4f       	sbci	r31, 0xFE	; 254
    8e62:	e6 0d       	add	r30, r6
    8e64:	f7 1d       	adc	r31, r7
    8e66:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
    if (enable_redraw(rdr, redraw_class) == true)
    8e68:	cf 52       	subi	r28, 0x2F	; 47
    8e6a:	df 4f       	sbci	r29, 0xFF	; 255
    8e6c:	68 81       	ld	r22, Y
    8e6e:	c1 5d       	subi	r28, 0xD1	; 209
    8e70:	d0 40       	sbci	r29, 0x00	; 0
    8e72:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    8e76:	88 23       	and	r24, r24
    8e78:	09 f4       	brne	.+2      	; 0x8e7c <draw_menu(bool)+0x8a0>
    8e7a:	3c c0       	rjmp	.+120    	; 0x8ef4 <draw_menu(bool)+0x918>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
    {
      fnt_coordinate_xy =  pgm_read_word(&function_1->fnt_coordinate_xy);
    8e7c:	f6 01       	movw	r30, r12
    8e7e:	ec 5d       	subi	r30, 0xDC	; 220
    8e80:	fe 4f       	sbci	r31, 0xFE	; 254
    8e82:	e6 0d       	add	r30, r6
    8e84:	f7 1d       	adc	r31, r7
    8e86:	a5 91       	lpm	r26, Z+
    8e88:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1);
    8e8a:	f8 01       	movw	r30, r16
    8e8c:	04 91       	lpm	r16, Z
    8e8e:	f6 01       	movw	r30, r12
    8e90:	e8 5d       	subi	r30, 0xD8	; 216
    8e92:	fe 4f       	sbci	r31, 0xFE	; 254
    8e94:	e6 0d       	add	r30, r6
    8e96:	f7 1d       	adc	r31, r7
    8e98:	25 91       	lpm	r18, Z+
    8e9a:	34 91       	lpm	r19, Z
    8e9c:	f6 01       	movw	r30, r12
    8e9e:	ea 5d       	subi	r30, 0xDA	; 218
    8ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    8ea2:	e6 0d       	add	r30, r6
    8ea4:	f7 1d       	adc	r31, r7
    8ea6:	45 91       	lpm	r20, Z+
    8ea8:	54 91       	lpm	r21, Z
    8eaa:	f6 01       	movw	r30, r12
    8eac:	ef 5d       	subi	r30, 0xDF	; 223
    8eae:	fe 4f       	sbci	r31, 0xFE	; 254
    8eb0:	e6 0d       	add	r30, r6
    8eb2:	f7 1d       	adc	r31, r7
    8eb4:	65 91       	lpm	r22, Z+
    8eb6:	74 91       	lpm	r23, Z
    8eb8:	f6 01       	movw	r30, r12
    8eba:	e1 5e       	subi	r30, 0xE1	; 225
    8ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    8ebe:	e6 0d       	add	r30, r6
    8ec0:	f7 1d       	adc	r31, r7
    8ec2:	85 91       	lpm	r24, Z+
    8ec4:	94 91       	lpm	r25, Z
    8ec6:	c6 54       	subi	r28, 0x46	; 70
    8ec8:	df 4f       	sbci	r29, 0xFF	; 255
    8eca:	e8 81       	ld	r30, Y
    8ecc:	f9 81       	ldd	r31, Y+1	; 0x01
    8ece:	ca 5b       	subi	r28, 0xBA	; 186
    8ed0:	d0 40       	sbci	r29, 0x00	; 0
    8ed2:	6e 0f       	add	r22, r30
    8ed4:	7f 1f       	adc	r23, r31
    8ed6:	cd 54       	subi	r28, 0x4D	; 77
    8ed8:	df 4f       	sbci	r29, 0xFF	; 255
    8eda:	e8 80       	ld	r14, Y
    8edc:	c3 5b       	subi	r28, 0xB3	; 179
    8ede:	d0 40       	sbci	r29, 0x00	; 0
    8ee0:	c8 54       	subi	r28, 0x48	; 72
    8ee2:	df 4f       	sbci	r29, 0xFF	; 255
    8ee4:	e8 81       	ld	r30, Y
    8ee6:	f9 81       	ldd	r31, Y+1	; 0x01
    8ee8:	c8 5b       	subi	r28, 0xB8	; 184
    8eea:	d0 40       	sbci	r29, 0x00	; 0
    8eec:	8e 0f       	add	r24, r30
    8eee:	9f 1f       	adc	r25, r31
    8ef0:	fd 01       	movw	r30, r26
    8ef2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
    }
    if (click_x > 0 && click_y > 0)
    8ef4:	cc 53       	subi	r28, 0x3C	; 60
    8ef6:	df 4f       	sbci	r29, 0xFF	; 255
    8ef8:	28 81       	ld	r18, Y
    8efa:	39 81       	ldd	r19, Y+1	; 0x01
    8efc:	c4 5c       	subi	r28, 0xC4	; 196
    8efe:	d0 40       	sbci	r29, 0x00	; 0
    8f00:	23 2b       	or	r18, r19
    8f02:	09 f4       	brne	.+2      	; 0x8f06 <draw_menu(bool)+0x92a>
    8f04:	49 c0       	rjmp	.+146    	; 0x8f98 <draw_menu(bool)+0x9bc>
    8f06:	ca 53       	subi	r28, 0x3A	; 58
    8f08:	df 4f       	sbci	r29, 0xFF	; 255
    8f0a:	48 81       	ld	r20, Y
    8f0c:	59 81       	ldd	r21, Y+1	; 0x01
    8f0e:	c6 5c       	subi	r28, 0xC6	; 198
    8f10:	d0 40       	sbci	r29, 0x00	; 0
    8f12:	45 2b       	or	r20, r21
    8f14:	09 f4       	brne	.+2      	; 0x8f18 <draw_menu(bool)+0x93c>
    8f16:	40 c0       	rjmp	.+128    	; 0x8f98 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    8f18:	f6 01       	movw	r30, r12
    8f1a:	e8 5d       	subi	r30, 0xD8	; 216
    8f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    8f1e:	e6 0d       	add	r30, r6
    8f20:	f7 1d       	adc	r31, r7
    8f22:	25 91       	lpm	r18, Z+
    8f24:	34 91       	lpm	r19, Z
    8f26:	f6 01       	movw	r30, r12
    8f28:	ea 5d       	subi	r30, 0xDA	; 218
    8f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    8f2c:	e6 0d       	add	r30, r6
    8f2e:	f7 1d       	adc	r31, r7
    8f30:	45 91       	lpm	r20, Z+
    8f32:	54 91       	lpm	r21, Z
    8f34:	f6 01       	movw	r30, r12
    8f36:	ef 5d       	subi	r30, 0xDF	; 223
    8f38:	fe 4f       	sbci	r31, 0xFE	; 254
    8f3a:	e6 0d       	add	r30, r6
    8f3c:	f7 1d       	adc	r31, r7
    8f3e:	65 91       	lpm	r22, Z+
    8f40:	74 91       	lpm	r23, Z
    8f42:	f6 01       	movw	r30, r12
    8f44:	e1 5e       	subi	r30, 0xE1	; 225
    8f46:	fe 4f       	sbci	r31, 0xFE	; 254
    8f48:	e6 0d       	add	r30, r6
    8f4a:	f7 1d       	adc	r31, r7
    8f4c:	85 91       	lpm	r24, Z+
    8f4e:	94 91       	lpm	r25, Z
    8f50:	c6 54       	subi	r28, 0x46	; 70
    8f52:	df 4f       	sbci	r29, 0xFF	; 255
    8f54:	e8 81       	ld	r30, Y
    8f56:	f9 81       	ldd	r31, Y+1	; 0x01
    8f58:	ca 5b       	subi	r28, 0xBA	; 186
    8f5a:	d0 40       	sbci	r29, 0x00	; 0
    8f5c:	6e 0f       	add	r22, r30
    8f5e:	7f 1f       	adc	r23, r31
    8f60:	ca 53       	subi	r28, 0x3A	; 58
    8f62:	df 4f       	sbci	r29, 0xFF	; 255
    8f64:	e8 80       	ld	r14, Y
    8f66:	f9 80       	ldd	r15, Y+1	; 0x01
    8f68:	c6 5c       	subi	r28, 0xC6	; 198
    8f6a:	d0 40       	sbci	r29, 0x00	; 0
    8f6c:	cc 53       	subi	r28, 0x3C	; 60
    8f6e:	df 4f       	sbci	r29, 0xFF	; 255
    8f70:	08 81       	ld	r16, Y
    8f72:	19 81       	ldd	r17, Y+1	; 0x01
    8f74:	c4 5c       	subi	r28, 0xC4	; 196
    8f76:	d0 40       	sbci	r29, 0x00	; 0
    8f78:	c8 54       	subi	r28, 0x48	; 72
    8f7a:	df 4f       	sbci	r29, 0xFF	; 255
    8f7c:	e8 81       	ld	r30, Y
    8f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    8f80:	c8 5b       	subi	r28, 0xB8	; 184
    8f82:	d0 40       	sbci	r29, 0x00	; 0
    8f84:	8e 0f       	add	r24, r30
    8f86:	9f 1f       	adc	r25, r31
    8f88:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8f8c:	88 23       	and	r24, r24
    8f8e:	21 f0       	breq	.+8      	; 0x8f98 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    8f90:	86 e5       	ldi	r24, 0x56	; 86
    8f92:	93 e0       	ldi	r25, 0x03	; 3
    8f94:	0e 94 03 be 	call	0x17c06	; 0x17c06 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8f98:	93 94       	inc	r9
    8f9a:	3c cf       	rjmp	.-392    	; 0x8e14 <draw_menu(bool)+0x838>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8f9c:	ca 54       	subi	r28, 0x4A	; 74
    8f9e:	df 4f       	sbci	r29, 0xFF	; 255
    8fa0:	18 82       	st	Y, r1
    8fa2:	c6 5b       	subi	r28, 0xB6	; 182
    8fa4:	d0 40       	sbci	r29, 0x00	; 0
    8fa6:	93 01       	movw	r18, r6
    8fa8:	28 54       	subi	r18, 0x48	; 72
    8faa:	3d 4f       	sbci	r19, 0xFD	; 253
    8fac:	c8 53       	subi	r28, 0x38	; 56
    8fae:	df 4f       	sbci	r29, 0xFF	; 255
    8fb0:	39 83       	std	Y+1, r19	; 0x01
    8fb2:	28 83       	st	Y, r18
    8fb4:	c8 5c       	subi	r28, 0xC8	; 200
    8fb6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    8fb8:	4e 01       	movw	r8, r28
    8fba:	31 e8       	ldi	r19, 0x81	; 129
    8fbc:	83 0e       	add	r8, r19
    8fbe:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    8fc0:	ae 01       	movw	r20, r28
    8fc2:	4f 5f       	subi	r20, 0xFF	; 255
    8fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    8fc6:	cc 54       	subi	r28, 0x4C	; 76
    8fc8:	df 4f       	sbci	r29, 0xFF	; 255
    8fca:	59 83       	std	Y+1, r21	; 0x01
    8fcc:	48 83       	st	Y, r20
    8fce:	c4 5b       	subi	r28, 0xB4	; 180
    8fd0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8fd2:	c8 53       	subi	r28, 0x38	; 56
    8fd4:	df 4f       	sbci	r29, 0xFF	; 255
    8fd6:	e8 81       	ld	r30, Y
    8fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    8fda:	c8 5c       	subi	r28, 0xC8	; 200
    8fdc:	d0 40       	sbci	r29, 0x00	; 0
    8fde:	84 91       	lpm	r24, Z
    8fe0:	ca 54       	subi	r28, 0x4A	; 74
    8fe2:	df 4f       	sbci	r29, 0xFF	; 255
    8fe4:	f8 81       	ld	r31, Y
    8fe6:	c6 5b       	subi	r28, 0xB6	; 182
    8fe8:	d0 40       	sbci	r29, 0x00	; 0
    8fea:	f8 17       	cp	r31, r24
    8fec:	08 f0       	brcs	.+2      	; 0x8ff0 <draw_menu(bool)+0xa14>
    8fee:	d1 c1       	rjmp	.+930    	; 0x9392 <draw_menu(bool)+0xdb6>
    8ff0:	27 e1       	ldi	r18, 0x17	; 23
    8ff2:	f2 9f       	mul	r31, r18
    8ff4:	60 01       	movw	r12, r0
    8ff6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    8ff8:	f6 01       	movw	r30, r12
    8ffa:	eb 58       	subi	r30, 0x8B	; 139
    8ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    8ffe:	e6 0d       	add	r30, r6
    9000:	f7 1d       	adc	r31, r7
    9002:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
    if (enable_redraw(rdr, redraw_class) == true)
    9004:	cf 52       	subi	r28, 0x2F	; 47
    9006:	df 4f       	sbci	r29, 0xFF	; 255
    9008:	68 81       	ld	r22, Y
    900a:	c1 5d       	subi	r28, 0xD1	; 209
    900c:	d0 40       	sbci	r29, 0x00	; 0
    900e:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    9012:	88 23       	and	r24, r24
    9014:	09 f4       	brne	.+2      	; 0x9018 <draw_menu(bool)+0xa3c>
    9016:	42 c1       	rjmp	.+644    	; 0x929c <draw_menu(bool)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    9018:	f6 01       	movw	r30, r12
    901a:	e1 5a       	subi	r30, 0xA1	; 161
    901c:	fe 4f       	sbci	r31, 0xFE	; 254
    901e:	e6 0d       	add	r30, r6
    9020:	f7 1d       	adc	r31, r7
    9022:	65 91       	lpm	r22, Z+
    9024:	74 91       	lpm	r23, Z
    9026:	c4 01       	movw	r24, r8
    9028:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    902c:	f6 01       	movw	r30, r12
    902e:	ef 58       	subi	r30, 0x8F	; 143
    9030:	fe 4f       	sbci	r31, 0xFE	; 254
    9032:	e6 0d       	add	r30, r6
    9034:	f7 1d       	adc	r31, r7
    9036:	25 91       	lpm	r18, Z+
    9038:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2213
      gss = pgm_read_word(&switch_1->get_status_string);
    903a:	f6 01       	movw	r30, r12
    903c:	ed 58       	subi	r30, 0x8D	; 141
    903e:	fe 4f       	sbci	r31, 0xFE	; 254
    9040:	e6 0d       	add	r30, r6
    9042:	f7 1d       	adc	r31, r7
    9044:	e5 90       	lpm	r14, Z+
    9046:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    9048:	86 01       	movw	r16, r12
    904a:	02 59       	subi	r16, 0x92	; 146
    904c:	1e 4f       	sbci	r17, 0xFE	; 254
    904e:	06 0d       	add	r16, r6
    9050:	17 1d       	adc	r17, r7
    9052:	f8 01       	movw	r30, r16
    9054:	84 91       	lpm	r24, Z
    9056:	cd 54       	subi	r28, 0x4D	; 77
    9058:	df 4f       	sbci	r29, 0xFF	; 255
    905a:	68 81       	ld	r22, Y
    905c:	c3 5b       	subi	r28, 0xB3	; 179
    905e:	d0 40       	sbci	r29, 0x00	; 0
    9060:	70 e0       	ldi	r23, 0x00	; 0
    9062:	ca 54       	subi	r28, 0x4A	; 74
    9064:	df 4f       	sbci	r29, 0xFF	; 255
    9066:	48 81       	ld	r20, Y
    9068:	c6 5b       	subi	r28, 0xB6	; 182
    906a:	d0 40       	sbci	r29, 0x00	; 0
    906c:	90 e0       	ldi	r25, 0x00	; 0
    906e:	f9 01       	movw	r30, r18
    9070:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2215
      str3[0] = 0;
    9072:	cf 55       	subi	r28, 0x5F	; 95
    9074:	df 4f       	sbci	r29, 0xFF	; 255
    9076:	18 82       	st	Y, r1
    9078:	c1 5a       	subi	r28, 0xA1	; 161
    907a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    907c:	f8 01       	movw	r30, r16
    907e:	44 91       	lpm	r20, Z
    9080:	84 91       	lpm	r24, Z
    9082:	8e 01       	movw	r16, r28
    9084:	0f 55       	subi	r16, 0x5F	; 95
    9086:	1f 4f       	sbci	r17, 0xFF	; 255
    9088:	9e 01       	movw	r18, r28
    908a:	2f 5f       	subi	r18, 0xFF	; 255
    908c:	3f 4f       	sbci	r19, 0xFF	; 255
    908e:	cd 54       	subi	r28, 0x4D	; 77
    9090:	df 4f       	sbci	r29, 0xFF	; 255
    9092:	68 81       	ld	r22, Y
    9094:	c3 5b       	subi	r28, 0xB3	; 179
    9096:	d0 40       	sbci	r29, 0x00	; 0
    9098:	f7 01       	movw	r30, r14
    909a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2221
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    909c:	f6 01       	movw	r30, r12
    909e:	e7 59       	subi	r30, 0x97	; 151
    90a0:	fe 4f       	sbci	r31, 0xFE	; 254
    90a2:	e6 0d       	add	r30, r6
    90a4:	f7 1d       	adc	r31, r7
    90a6:	25 91       	lpm	r18, Z+
    90a8:	34 91       	lpm	r19, Z
    90aa:	c4 54       	subi	r28, 0x44	; 68
    90ac:	df 4f       	sbci	r29, 0xFF	; 255
    90ae:	39 83       	std	Y+1, r19	; 0x01
    90b0:	28 83       	st	Y, r18
    90b2:	cc 5b       	subi	r28, 0xBC	; 188
    90b4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    90b6:	f6 01       	movw	r30, r12
    90b8:	e9 59       	subi	r30, 0x99	; 153
    90ba:	fe 4f       	sbci	r31, 0xFE	; 254
    90bc:	e6 0d       	add	r30, r6
    90be:	f7 1d       	adc	r31, r7
    90c0:	45 90       	lpm	r4, Z+
    90c2:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    90c4:	f6 01       	movw	r30, r12
    90c6:	eb 59       	subi	r30, 0x9B	; 155
    90c8:	fe 4f       	sbci	r31, 0xFE	; 254
    90ca:	e6 0d       	add	r30, r6
    90cc:	f7 1d       	adc	r31, r7
    90ce:	85 91       	lpm	r24, Z+
    90d0:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    90d2:	f6 01       	movw	r30, r12
    90d4:	ed 59       	subi	r30, 0x9D	; 157
    90d6:	fe 4f       	sbci	r31, 0xFE	; 254
    90d8:	e6 0d       	add	r30, r6
    90da:	f7 1d       	adc	r31, r7
    90dc:	25 90       	lpm	r2, Z+
    90de:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    90e0:	c6 54       	subi	r28, 0x46	; 70
    90e2:	df 4f       	sbci	r29, 0xFF	; 255
    90e4:	48 81       	ld	r20, Y
    90e6:	59 81       	ldd	r21, Y+1	; 0x01
    90e8:	ca 5b       	subi	r28, 0xBA	; 186
    90ea:	d0 40       	sbci	r29, 0x00	; 0
    90ec:	24 0e       	add	r2, r20
    90ee:	35 1e       	adc	r3, r21
    90f0:	f6 01       	movw	r30, r12
    90f2:	ef 59       	subi	r30, 0x9F	; 159
    90f4:	fe 4f       	sbci	r31, 0xFE	; 254
    90f6:	e6 0d       	add	r30, r6
    90f8:	f7 1d       	adc	r31, r7
    90fa:	a5 90       	lpm	r10, Z+
    90fc:	b4 90       	lpm	r11, Z
    90fe:	c8 54       	subi	r28, 0x48	; 72
    9100:	df 4f       	sbci	r29, 0xFF	; 255
    9102:	68 81       	ld	r22, Y
    9104:	79 81       	ldd	r23, Y+1	; 0x01
    9106:	c8 5b       	subi	r28, 0xB8	; 184
    9108:	d0 40       	sbci	r29, 0x00	; 0
    910a:	a6 0e       	add	r10, r22
    910c:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    910e:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    9112:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
    9116:	10 e0       	ldi	r17, 0x00	; 0
    9118:	00 e0       	ldi	r16, 0x00	; 0
    911a:	55 24       	eor	r5, r5
    911c:	fc 01       	movw	r30, r24
    911e:	ff 27       	eor	r31, r31
    9120:	c2 54       	subi	r28, 0x42	; 66
    9122:	df 4f       	sbci	r29, 0xFF	; 255
    9124:	f9 83       	std	Y+1, r31	; 0x01
    9126:	e8 83       	st	Y, r30
    9128:	ce 5b       	subi	r28, 0xBE	; 190
    912a:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5569
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    912c:	91 01       	movw	r18, r2
    912e:	24 0d       	add	r18, r4
    9130:	35 1d       	adc	r19, r5
    9132:	c6 53       	subi	r28, 0x36	; 54
    9134:	df 4f       	sbci	r29, 0xFF	; 255
    9136:	39 83       	std	Y+1, r19	; 0x01
    9138:	28 83       	st	Y, r18
    913a:	ca 5c       	subi	r28, 0xCA	; 202
    913c:	d0 40       	sbci	r29, 0x00	; 0
    913e:	7f 01       	movw	r14, r30
    9140:	ea 0c       	add	r14, r10
    9142:	fb 1c       	adc	r15, r11
    9144:	c6 53       	subi	r28, 0x36	; 54
    9146:	df 4f       	sbci	r29, 0xFF	; 255
    9148:	28 81       	ld	r18, Y
    914a:	39 81       	ldd	r19, Y+1	; 0x01
    914c:	ca 5c       	subi	r28, 0xCA	; 202
    914e:	d0 40       	sbci	r29, 0x00	; 0
    9150:	20 1b       	sub	r18, r16
    9152:	31 0b       	sbc	r19, r17
    9154:	a7 01       	movw	r20, r14
    9156:	40 1b       	sub	r20, r16
    9158:	51 0b       	sbc	r21, r17
    915a:	b1 01       	movw	r22, r2
    915c:	60 0f       	add	r22, r16
    915e:	71 1f       	adc	r23, r17
    9160:	c5 01       	movw	r24, r10
    9162:	80 0f       	add	r24, r16
    9164:	91 1f       	adc	r25, r17
    9166:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    916a:	0f 5f       	subi	r16, 0xFF	; 255
    916c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5568
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    916e:	03 30       	cpi	r16, 0x03	; 3
    9170:	11 05       	cpc	r17, r1
    9172:	41 f7       	brne	.-48     	; 0x9144 <draw_menu(bool)+0xb68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5571
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    9174:	f4 01       	movw	r30, r8
    9176:	01 90       	ld	r0, Z+
    9178:	00 20       	and	r0, r0
    917a:	e9 f7       	brne	.-6      	; 0x9176 <draw_menu(bool)+0xb9a>
    917c:	31 97       	sbiw	r30, 0x01	; 1
    917e:	e8 19       	sub	r30, r8
    9180:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    9182:	c4 54       	subi	r28, 0x44	; 68
    9184:	df 4f       	sbci	r29, 0xFF	; 255
    9186:	88 81       	ld	r24, Y
    9188:	cc 5b       	subi	r28, 0xBC	; 188
    918a:	d0 40       	sbci	r29, 0x00	; 0
    918c:	88 0f       	add	r24, r24
    918e:	c4 54       	subi	r28, 0x44	; 68
    9190:	df 4f       	sbci	r29, 0xFF	; 255
    9192:	38 81       	ld	r19, Y
    9194:	cc 5b       	subi	r28, 0xBC	; 188
    9196:	d0 40       	sbci	r29, 0x00	; 0
    9198:	83 0f       	add	r24, r19
    919a:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    919c:	a2 01       	movw	r20, r4
    919e:	48 1b       	sub	r20, r24
    91a0:	51 09       	sbc	r21, r1
    91a2:	57 ff       	sbrs	r21, 7
    91a4:	02 c0       	rjmp	.+4      	; 0x91aa <draw_menu(bool)+0xbce>
    91a6:	4d 5f       	subi	r20, 0xFD	; 253
    91a8:	5f 4f       	sbci	r21, 0xFF	; 255
    91aa:	55 95       	asr	r21
    91ac:	47 95       	ror	r20
    91ae:	55 95       	asr	r21
    91b0:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5574
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    91b2:	42 0d       	add	r20, r2
    91b4:	53 2d       	mov	r21, r3
    91b6:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    91b8:	66 e0       	ldi	r22, 0x06	; 6
    91ba:	e6 9f       	mul	r30, r22
    91bc:	f0 01       	movw	r30, r0
    91be:	11 24       	eor	r1, r1
    91c0:	c4 54       	subi	r28, 0x44	; 68
    91c2:	df 4f       	sbci	r29, 0xFF	; 255
    91c4:	78 81       	ld	r23, Y
    91c6:	cc 5b       	subi	r28, 0xBC	; 188
    91c8:	d0 40       	sbci	r29, 0x00	; 0
    91ca:	7e 9f       	mul	r23, r30
    91cc:	c0 01       	movw	r24, r0
    91ce:	7f 9f       	mul	r23, r31
    91d0:	90 0d       	add	r25, r0
    91d2:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5572
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    91d4:	99 27       	eor	r25, r25
    91d6:	c2 54       	subi	r28, 0x42	; 66
    91d8:	df 4f       	sbci	r29, 0xFF	; 255
    91da:	68 81       	ld	r22, Y
    91dc:	79 81       	ldd	r23, Y+1	; 0x01
    91de:	ce 5b       	subi	r28, 0xBE	; 190
    91e0:	d0 40       	sbci	r29, 0x00	; 0
    91e2:	68 1b       	sub	r22, r24
    91e4:	79 0b       	sbc	r23, r25
    91e6:	77 ff       	sbrs	r23, 7
    91e8:	02 c0       	rjmp	.+4      	; 0x91ee <draw_menu(bool)+0xc12>
    91ea:	6f 5f       	subi	r22, 0xFF	; 255
    91ec:	7f 4f       	sbci	r23, 0xFF	; 255
    91ee:	75 95       	asr	r23
    91f0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5574
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    91f2:	6a 0d       	add	r22, r10
    91f4:	7b 2d       	mov	r23, r11
    91f6:	71 1d       	adc	r23, r1
    91f8:	ee 24       	eor	r14, r14
    91fa:	ea 94       	dec	r14
    91fc:	fe 2c       	mov	r15, r14
    91fe:	10 e0       	ldi	r17, 0x00	; 0
    9200:	00 e0       	ldi	r16, 0x00	; 0
    9202:	c4 54       	subi	r28, 0x44	; 68
    9204:	df 4f       	sbci	r29, 0xFF	; 255
    9206:	28 81       	ld	r18, Y
    9208:	cc 5b       	subi	r28, 0xBC	; 188
    920a:	d0 40       	sbci	r29, 0x00	; 0
    920c:	c4 01       	movw	r24, r8
    920e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5576
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    9212:	cc 54       	subi	r28, 0x4C	; 76
    9214:	df 4f       	sbci	r29, 0xFF	; 255
    9216:	e8 81       	ld	r30, Y
    9218:	f9 81       	ldd	r31, Y+1	; 0x01
    921a:	c4 5b       	subi	r28, 0xB4	; 180
    921c:	d0 40       	sbci	r29, 0x00	; 0
    921e:	01 90       	ld	r0, Z+
    9220:	00 20       	and	r0, r0
    9222:	e9 f7       	brne	.-6      	; 0x921e <draw_menu(bool)+0xc42>
    9224:	31 97       	sbiw	r30, 0x01	; 1
    9226:	cc 54       	subi	r28, 0x4C	; 76
    9228:	df 4f       	sbci	r29, 0xFF	; 255
    922a:	88 81       	ld	r24, Y
    922c:	99 81       	ldd	r25, Y+1	; 0x01
    922e:	c4 5b       	subi	r28, 0xB4	; 180
    9230:	d0 40       	sbci	r29, 0x00	; 0
    9232:	e8 1b       	sub	r30, r24
    9234:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5578
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    9236:	a2 01       	movw	r20, r4
    9238:	46 50       	subi	r20, 0x06	; 6
    923a:	51 09       	sbc	r21, r1
    923c:	57 ff       	sbrs	r21, 7
    923e:	02 c0       	rjmp	.+4      	; 0x9244 <draw_menu(bool)+0xc68>
    9240:	4d 5f       	subi	r20, 0xFD	; 253
    9242:	5f 4f       	sbci	r21, 0xFF	; 255
    9244:	55 95       	asr	r21
    9246:	47 95       	ror	r20
    9248:	55 95       	asr	r21
    924a:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5579
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    924c:	55 27       	eor	r21, r21
    924e:	ca 01       	movw	r24, r20
    9250:	88 0f       	add	r24, r24
    9252:	99 1f       	adc	r25, r25
    9254:	48 0f       	add	r20, r24
    9256:	59 1f       	adc	r21, r25
    9258:	42 0d       	add	r20, r2
    925a:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3031
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    925c:	96 e0       	ldi	r25, 0x06	; 6
    925e:	e9 9f       	mul	r30, r25
    9260:	f0 01       	movw	r30, r0
    9262:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5577
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    9264:	ff 27       	eor	r31, r31
    9266:	c2 54       	subi	r28, 0x42	; 66
    9268:	df 4f       	sbci	r29, 0xFF	; 255
    926a:	68 81       	ld	r22, Y
    926c:	79 81       	ldd	r23, Y+1	; 0x01
    926e:	ce 5b       	subi	r28, 0xBE	; 190
    9270:	d0 40       	sbci	r29, 0x00	; 0
    9272:	6e 1b       	sub	r22, r30
    9274:	7f 0b       	sbc	r23, r31
    9276:	77 ff       	sbrs	r23, 7
    9278:	02 c0       	rjmp	.+4      	; 0x927e <draw_menu(bool)+0xca2>
    927a:	6f 5f       	subi	r22, 0xFF	; 255
    927c:	7f 4f       	sbci	r23, 0xFF	; 255
    927e:	75 95       	asr	r23
    9280:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5579
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    9282:	6a 0d       	add	r22, r10
    9284:	7b 2d       	mov	r23, r11
    9286:	71 1d       	adc	r23, r1
    9288:	ee 24       	eor	r14, r14
    928a:	ea 94       	dec	r14
    928c:	fe 2c       	mov	r15, r14
    928e:	10 e0       	ldi	r17, 0x00	; 0
    9290:	00 e0       	ldi	r16, 0x00	; 0
    9292:	21 e0       	ldi	r18, 0x01	; 1
    9294:	ce 01       	movw	r24, r28
    9296:	01 96       	adiw	r24, 0x01	; 1
    9298:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2224
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    929c:	cc 53       	subi	r28, 0x3C	; 60
    929e:	df 4f       	sbci	r29, 0xFF	; 255
    92a0:	e8 81       	ld	r30, Y
    92a2:	f9 81       	ldd	r31, Y+1	; 0x01
    92a4:	c4 5c       	subi	r28, 0xC4	; 196
    92a6:	d0 40       	sbci	r29, 0x00	; 0
    92a8:	ef 2b       	or	r30, r31
    92aa:	09 f4       	brne	.+2      	; 0x92ae <draw_menu(bool)+0xcd2>
    92ac:	66 c0       	rjmp	.+204    	; 0x937a <draw_menu(bool)+0xd9e>
    92ae:	ca 53       	subi	r28, 0x3A	; 58
    92b0:	df 4f       	sbci	r29, 0xFF	; 255
    92b2:	28 81       	ld	r18, Y
    92b4:	39 81       	ldd	r19, Y+1	; 0x01
    92b6:	c6 5c       	subi	r28, 0xC6	; 198
    92b8:	d0 40       	sbci	r29, 0x00	; 0
    92ba:	23 2b       	or	r18, r19
    92bc:	09 f4       	brne	.+2      	; 0x92c0 <draw_menu(bool)+0xce4>
    92be:	5d c0       	rjmp	.+186    	; 0x937a <draw_menu(bool)+0xd9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    92c0:	f6 01       	movw	r30, r12
    92c2:	e9 59       	subi	r30, 0x99	; 153
    92c4:	fe 4f       	sbci	r31, 0xFE	; 254
    92c6:	e6 0d       	add	r30, r6
    92c8:	f7 1d       	adc	r31, r7
    92ca:	25 91       	lpm	r18, Z+
    92cc:	34 91       	lpm	r19, Z
    92ce:	f6 01       	movw	r30, r12
    92d0:	eb 59       	subi	r30, 0x9B	; 155
    92d2:	fe 4f       	sbci	r31, 0xFE	; 254
    92d4:	e6 0d       	add	r30, r6
    92d6:	f7 1d       	adc	r31, r7
    92d8:	45 91       	lpm	r20, Z+
    92da:	54 91       	lpm	r21, Z
    92dc:	f6 01       	movw	r30, r12
    92de:	ed 59       	subi	r30, 0x9D	; 157
    92e0:	fe 4f       	sbci	r31, 0xFE	; 254
    92e2:	e6 0d       	add	r30, r6
    92e4:	f7 1d       	adc	r31, r7
    92e6:	65 91       	lpm	r22, Z+
    92e8:	74 91       	lpm	r23, Z
    92ea:	f6 01       	movw	r30, r12
    92ec:	ef 59       	subi	r30, 0x9F	; 159
    92ee:	fe 4f       	sbci	r31, 0xFE	; 254
    92f0:	e6 0d       	add	r30, r6
    92f2:	f7 1d       	adc	r31, r7
    92f4:	85 91       	lpm	r24, Z+
    92f6:	94 91       	lpm	r25, Z
    92f8:	c6 54       	subi	r28, 0x46	; 70
    92fa:	df 4f       	sbci	r29, 0xFF	; 255
    92fc:	e8 81       	ld	r30, Y
    92fe:	f9 81       	ldd	r31, Y+1	; 0x01
    9300:	ca 5b       	subi	r28, 0xBA	; 186
    9302:	d0 40       	sbci	r29, 0x00	; 0
    9304:	6e 0f       	add	r22, r30
    9306:	7f 1f       	adc	r23, r31
    9308:	ca 53       	subi	r28, 0x3A	; 58
    930a:	df 4f       	sbci	r29, 0xFF	; 255
    930c:	e8 80       	ld	r14, Y
    930e:	f9 80       	ldd	r15, Y+1	; 0x01
    9310:	c6 5c       	subi	r28, 0xC6	; 198
    9312:	d0 40       	sbci	r29, 0x00	; 0
    9314:	cc 53       	subi	r28, 0x3C	; 60
    9316:	df 4f       	sbci	r29, 0xFF	; 255
    9318:	08 81       	ld	r16, Y
    931a:	19 81       	ldd	r17, Y+1	; 0x01
    931c:	c4 5c       	subi	r28, 0xC4	; 196
    931e:	d0 40       	sbci	r29, 0x00	; 0
    9320:	c8 54       	subi	r28, 0x48	; 72
    9322:	df 4f       	sbci	r29, 0xFF	; 255
    9324:	e8 81       	ld	r30, Y
    9326:	f9 81       	ldd	r31, Y+1	; 0x01
    9328:	c8 5b       	subi	r28, 0xB8	; 184
    932a:	d0 40       	sbci	r29, 0x00	; 0
    932c:	8e 0f       	add	r24, r30
    932e:	9f 1f       	adc	r25, r31
    9330:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9334:	18 2f       	mov	r17, r24
    9336:	88 23       	and	r24, r24
    9338:	01 f1       	breq	.+64     	; 0x937a <draw_menu(bool)+0xd9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    933a:	f6 01       	movw	r30, r12
    933c:	e1 59       	subi	r30, 0x91	; 145
    933e:	fe 4f       	sbci	r31, 0xFE	; 254
    9340:	e6 0d       	add	r30, r6
    9342:	f7 1d       	adc	r31, r7
    9344:	25 91       	lpm	r18, Z+
    9346:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2228
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    9348:	f6 01       	movw	r30, r12
    934a:	e2 59       	subi	r30, 0x92	; 146
    934c:	fe 4f       	sbci	r31, 0xFE	; 254
    934e:	e6 0d       	add	r30, r6
    9350:	f7 1d       	adc	r31, r7
    9352:	84 91       	lpm	r24, Z
    9354:	cd 54       	subi	r28, 0x4D	; 77
    9356:	df 4f       	sbci	r29, 0xFF	; 255
    9358:	68 81       	ld	r22, Y
    935a:	c3 5b       	subi	r28, 0xB3	; 179
    935c:	d0 40       	sbci	r29, 0x00	; 0
    935e:	70 e0       	ldi	r23, 0x00	; 0
    9360:	ca 54       	subi	r28, 0x4A	; 74
    9362:	df 4f       	sbci	r29, 0xFF	; 255
    9364:	48 81       	ld	r20, Y
    9366:	c6 5b       	subi	r28, 0xB6	; 182
    9368:	d0 40       	sbci	r29, 0x00	; 0
    936a:	90 e0       	ldi	r25, 0x00	; 0
    936c:	f9 01       	movw	r30, r18
    936e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229
        ret = true;
    9370:	c4 53       	subi	r28, 0x34	; 52
    9372:	df 4f       	sbci	r29, 0xFF	; 255
    9374:	18 83       	st	Y, r17
    9376:	cc 5c       	subi	r28, 0xCC	; 204
    9378:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    937a:	ca 54       	subi	r28, 0x4A	; 74
    937c:	df 4f       	sbci	r29, 0xFF	; 255
    937e:	f8 81       	ld	r31, Y
    9380:	c6 5b       	subi	r28, 0xB6	; 182
    9382:	d0 40       	sbci	r29, 0x00	; 0
    9384:	ff 5f       	subi	r31, 0xFF	; 255
    9386:	ca 54       	subi	r28, 0x4A	; 74
    9388:	df 4f       	sbci	r29, 0xFF	; 255
    938a:	f8 83       	st	Y, r31
    938c:	c6 5b       	subi	r28, 0xB6	; 182
    938e:	d0 40       	sbci	r29, 0x00	; 0
    9390:	20 ce       	rjmp	.-960    	; 0x8fd2 <draw_menu(bool)+0x9f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2232
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    9392:	c4 53       	subi	r28, 0x34	; 52
    9394:	df 4f       	sbci	r29, 0xFF	; 255
    9396:	28 81       	ld	r18, Y
    9398:	cc 5c       	subi	r28, 0xCC	; 204
    939a:	d0 40       	sbci	r29, 0x00	; 0
    939c:	21 11       	cpse	r18, r1
    939e:	0c 94 b4 55 	jmp	0xab68	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    93a2:	51 2c       	mov	r5, r1
    93a4:	43 01       	movw	r8, r6
    93a6:	36 e4       	ldi	r19, 0x46	; 70
    93a8:	83 1a       	sub	r8, r19
    93aa:	3d ef       	ldi	r19, 0xFD	; 253
    93ac:	93 0a       	sbc	r9, r19
    93ae:	f4 01       	movw	r30, r8
    93b0:	84 91       	lpm	r24, Z
    93b2:	58 16       	cp	r5, r24
    93b4:	08 f0       	brcs	.+2      	; 0x93b8 <draw_menu(bool)+0xddc>
    93b6:	cd c0       	rjmp	.+410    	; 0x9552 <draw_menu(bool)+0xf76>
    93b8:	c5 2c       	mov	r12, r5
    93ba:	d1 2c       	mov	r13, r1
    93bc:	fe e1       	ldi	r31, 0x1E	; 30
    93be:	cf 0e       	add	r12, r31
    93c0:	d1 1c       	adc	r13, r1
    93c2:	84 e0       	ldi	r24, 0x04	; 4
    93c4:	cc 0c       	add	r12, r12
    93c6:	dd 1c       	adc	r13, r13
    93c8:	8a 95       	dec	r24
    93ca:	e1 f7       	brne	.-8      	; 0x93c4 <draw_menu(bool)+0xde8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = pgm_read_word(&symbol_button_1->enable_show);
    93cc:	f3 01       	movw	r30, r6
    93ce:	ec 0d       	add	r30, r12
    93d0:	fd 1d       	adc	r31, r13
    93d2:	25 91       	lpm	r18, Z+
    93d4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    93d6:	56 01       	movw	r10, r12
    93d8:	44 e0       	ldi	r20, 0x04	; 4
    93da:	a4 1a       	sub	r10, r20
    93dc:	b1 08       	sbc	r11, r1
    93de:	a6 0c       	add	r10, r6
    93e0:	b7 1c       	adc	r11, r7
    93e2:	f5 01       	movw	r30, r10
    93e4:	84 91       	lpm	r24, Z
    93e6:	cd 54       	subi	r28, 0x4D	; 77
    93e8:	df 4f       	sbci	r29, 0xFF	; 255
    93ea:	68 81       	ld	r22, Y
    93ec:	c3 5b       	subi	r28, 0xB3	; 179
    93ee:	d0 40       	sbci	r29, 0x00	; 0
    93f0:	70 e0       	ldi	r23, 0x00	; 0
    93f2:	45 2d       	mov	r20, r5
    93f4:	90 e0       	ldi	r25, 0x00	; 0
    93f6:	f9 01       	movw	r30, r18
    93f8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
    if (active == 0) continue;
    93fa:	88 23       	and	r24, r24
    93fc:	09 f4       	brne	.+2      	; 0x9400 <draw_menu(bool)+0xe24>
    93fe:	a7 c0       	rjmp	.+334    	; 0x954e <draw_menu(bool)+0xf72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    9400:	f6 01       	movw	r30, r12
    9402:	31 97       	sbiw	r30, 0x01	; 1
    9404:	e6 0d       	add	r30, r6
    9406:	f7 1d       	adc	r31, r7
    9408:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2241
    if (enable_redraw(rdr, redraw_class) == true)
    940a:	cf 52       	subi	r28, 0x2F	; 47
    940c:	df 4f       	sbci	r29, 0xFF	; 255
    940e:	68 81       	ld	r22, Y
    9410:	c1 5d       	subi	r28, 0xD1	; 209
    9412:	d0 40       	sbci	r29, 0x00	; 0
    9414:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    9418:	88 23       	and	r24, r24
    941a:	09 f4       	brne	.+2      	; 0x941e <draw_menu(bool)+0xe42>
    941c:	36 c0       	rjmp	.+108    	; 0x948a <draw_menu(bool)+0xeae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    941e:	f6 01       	movw	r30, r12
    9420:	3e 97       	sbiw	r30, 0x0e	; 14
    9422:	e6 0d       	add	r30, r6
    9424:	f7 1d       	adc	r31, r7
    9426:	e5 90       	lpm	r14, Z+
    9428:	f4 90       	lpm	r15, Z
    942a:	f6 01       	movw	r30, r12
    942c:	35 97       	sbiw	r30, 0x05	; 5
    942e:	e6 0d       	add	r30, r6
    9430:	f7 1d       	adc	r31, r7
    9432:	05 91       	lpm	r16, Z+
    9434:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2244
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    9436:	f6 01       	movw	r30, r12
    9438:	37 97       	sbiw	r30, 0x07	; 7
    943a:	e6 0d       	add	r30, r6
    943c:	f7 1d       	adc	r31, r7
    943e:	25 91       	lpm	r18, Z+
    9440:	34 91       	lpm	r19, Z
    9442:	f6 01       	movw	r30, r12
    9444:	39 97       	sbiw	r30, 0x09	; 9
    9446:	e6 0d       	add	r30, r6
    9448:	f7 1d       	adc	r31, r7
    944a:	45 91       	lpm	r20, Z+
    944c:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    944e:	f6 01       	movw	r30, r12
    9450:	3b 97       	sbiw	r30, 0x0b	; 11
    9452:	e6 0d       	add	r30, r6
    9454:	f7 1d       	adc	r31, r7
    9456:	65 91       	lpm	r22, Z+
    9458:	74 91       	lpm	r23, Z
    945a:	f6 01       	movw	r30, r12
    945c:	3d 97       	sbiw	r30, 0x0d	; 13
    945e:	e6 0d       	add	r30, r6
    9460:	f7 1d       	adc	r31, r7
    9462:	85 91       	lpm	r24, Z+
    9464:	94 91       	lpm	r25, Z
    9466:	c6 54       	subi	r28, 0x46	; 70
    9468:	df 4f       	sbci	r29, 0xFF	; 255
    946a:	e8 81       	ld	r30, Y
    946c:	f9 81       	ldd	r31, Y+1	; 0x01
    946e:	ca 5b       	subi	r28, 0xBA	; 186
    9470:	d0 40       	sbci	r29, 0x00	; 0
    9472:	6e 0f       	add	r22, r30
    9474:	7f 1f       	adc	r23, r31
    9476:	c8 54       	subi	r28, 0x48	; 72
    9478:	df 4f       	sbci	r29, 0xFF	; 255
    947a:	e8 81       	ld	r30, Y
    947c:	f9 81       	ldd	r31, Y+1	; 0x01
    947e:	c8 5b       	subi	r28, 0xB8	; 184
    9480:	d0 40       	sbci	r29, 0x00	; 0
    9482:	8e 0f       	add	r24, r30
    9484:	9f 1f       	adc	r25, r31
    9486:	0e 94 33 31 	call	0x6266	; 0x6266 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    948a:	cc 53       	subi	r28, 0x3C	; 60
    948c:	df 4f       	sbci	r29, 0xFF	; 255
    948e:	28 81       	ld	r18, Y
    9490:	39 81       	ldd	r19, Y+1	; 0x01
    9492:	c4 5c       	subi	r28, 0xC4	; 196
    9494:	d0 40       	sbci	r29, 0x00	; 0
    9496:	23 2b       	or	r18, r19
    9498:	09 f4       	brne	.+2      	; 0x949c <draw_menu(bool)+0xec0>
    949a:	59 c0       	rjmp	.+178    	; 0x954e <draw_menu(bool)+0xf72>
    949c:	ca 53       	subi	r28, 0x3A	; 58
    949e:	df 4f       	sbci	r29, 0xFF	; 255
    94a0:	48 81       	ld	r20, Y
    94a2:	59 81       	ldd	r21, Y+1	; 0x01
    94a4:	c6 5c       	subi	r28, 0xC6	; 198
    94a6:	d0 40       	sbci	r29, 0x00	; 0
    94a8:	45 2b       	or	r20, r21
    94aa:	09 f4       	brne	.+2      	; 0x94ae <draw_menu(bool)+0xed2>
    94ac:	50 c0       	rjmp	.+160    	; 0x954e <draw_menu(bool)+0xf72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2248
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    94ae:	f6 01       	movw	r30, r12
    94b0:	37 97       	sbiw	r30, 0x07	; 7
    94b2:	e6 0d       	add	r30, r6
    94b4:	f7 1d       	adc	r31, r7
    94b6:	25 91       	lpm	r18, Z+
    94b8:	34 91       	lpm	r19, Z
    94ba:	f6 01       	movw	r30, r12
    94bc:	39 97       	sbiw	r30, 0x09	; 9
    94be:	e6 0d       	add	r30, r6
    94c0:	f7 1d       	adc	r31, r7
    94c2:	45 91       	lpm	r20, Z+
    94c4:	54 91       	lpm	r21, Z
    94c6:	f6 01       	movw	r30, r12
    94c8:	3b 97       	sbiw	r30, 0x0b	; 11
    94ca:	e6 0d       	add	r30, r6
    94cc:	f7 1d       	adc	r31, r7
    94ce:	65 91       	lpm	r22, Z+
    94d0:	74 91       	lpm	r23, Z
    94d2:	f6 01       	movw	r30, r12
    94d4:	3d 97       	sbiw	r30, 0x0d	; 13
    94d6:	e6 0d       	add	r30, r6
    94d8:	f7 1d       	adc	r31, r7
    94da:	85 91       	lpm	r24, Z+
    94dc:	94 91       	lpm	r25, Z
    94de:	c6 54       	subi	r28, 0x46	; 70
    94e0:	df 4f       	sbci	r29, 0xFF	; 255
    94e2:	e8 81       	ld	r30, Y
    94e4:	f9 81       	ldd	r31, Y+1	; 0x01
    94e6:	ca 5b       	subi	r28, 0xBA	; 186
    94e8:	d0 40       	sbci	r29, 0x00	; 0
    94ea:	6e 0f       	add	r22, r30
    94ec:	7f 1f       	adc	r23, r31
    94ee:	ca 53       	subi	r28, 0x3A	; 58
    94f0:	df 4f       	sbci	r29, 0xFF	; 255
    94f2:	e8 80       	ld	r14, Y
    94f4:	f9 80       	ldd	r15, Y+1	; 0x01
    94f6:	c6 5c       	subi	r28, 0xC6	; 198
    94f8:	d0 40       	sbci	r29, 0x00	; 0
    94fa:	cc 53       	subi	r28, 0x3C	; 60
    94fc:	df 4f       	sbci	r29, 0xFF	; 255
    94fe:	08 81       	ld	r16, Y
    9500:	19 81       	ldd	r17, Y+1	; 0x01
    9502:	c4 5c       	subi	r28, 0xC4	; 196
    9504:	d0 40       	sbci	r29, 0x00	; 0
    9506:	c8 54       	subi	r28, 0x48	; 72
    9508:	df 4f       	sbci	r29, 0xFF	; 255
    950a:	e8 81       	ld	r30, Y
    950c:	f9 81       	ldd	r31, Y+1	; 0x01
    950e:	c8 5b       	subi	r28, 0xB8	; 184
    9510:	d0 40       	sbci	r29, 0x00	; 0
    9512:	8e 0f       	add	r24, r30
    9514:	9f 1f       	adc	r25, r31
    9516:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    951a:	18 2f       	mov	r17, r24
    951c:	88 23       	and	r24, r24
    951e:	b9 f0       	breq	.+46     	; 0x954e <draw_menu(bool)+0xf72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    9520:	f6 01       	movw	r30, r12
    9522:	33 97       	sbiw	r30, 0x03	; 3
    9524:	e6 0d       	add	r30, r6
    9526:	f7 1d       	adc	r31, r7
    9528:	25 91       	lpm	r18, Z+
    952a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2251
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    952c:	f5 01       	movw	r30, r10
    952e:	84 91       	lpm	r24, Z
    9530:	cd 54       	subi	r28, 0x4D	; 77
    9532:	df 4f       	sbci	r29, 0xFF	; 255
    9534:	68 81       	ld	r22, Y
    9536:	c3 5b       	subi	r28, 0xB3	; 179
    9538:	d0 40       	sbci	r29, 0x00	; 0
    953a:	70 e0       	ldi	r23, 0x00	; 0
    953c:	45 2d       	mov	r20, r5
    953e:	90 e0       	ldi	r25, 0x00	; 0
    9540:	f9 01       	movw	r30, r18
    9542:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
        ret = true;
    9544:	c4 53       	subi	r28, 0x34	; 52
    9546:	df 4f       	sbci	r29, 0xFF	; 255
    9548:	18 83       	st	Y, r17
    954a:	cc 5c       	subi	r28, 0xCC	; 204
    954c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    954e:	53 94       	inc	r5
    9550:	2e cf       	rjmp	.-420    	; 0x93ae <draw_menu(bool)+0xdd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    9552:	c4 53       	subi	r28, 0x34	; 52
    9554:	df 4f       	sbci	r29, 0xFF	; 255
    9556:	f8 81       	ld	r31, Y
    9558:	cc 5c       	subi	r28, 0xCC	; 204
    955a:	d0 40       	sbci	r29, 0x00	; 0
    955c:	f1 11       	cpse	r31, r1
    955e:	0c 94 b4 55 	jmp	0xab68	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    9562:	51 2c       	mov	r5, r1
    9564:	93 01       	movw	r18, r6
    9566:	25 54       	subi	r18, 0x45	; 69
    9568:	3d 4f       	sbci	r19, 0xFD	; 253
    956a:	cc 52       	subi	r28, 0x2C	; 44
    956c:	df 4f       	sbci	r29, 0xFF	; 255
    956e:	39 83       	std	Y+1, r19	; 0x01
    9570:	28 83       	st	Y, r18
    9572:	c4 5d       	subi	r28, 0xD4	; 212
    9574:	d0 40       	sbci	r29, 0x00	; 0
    9576:	cc 52       	subi	r28, 0x2C	; 44
    9578:	df 4f       	sbci	r29, 0xFF	; 255
    957a:	e8 81       	ld	r30, Y
    957c:	f9 81       	ldd	r31, Y+1	; 0x01
    957e:	c4 5d       	subi	r28, 0xD4	; 212
    9580:	d0 40       	sbci	r29, 0x00	; 0
    9582:	84 91       	lpm	r24, Z
    9584:	58 16       	cp	r5, r24
    9586:	08 f0       	brcs	.+2      	; 0x958a <draw_menu(bool)+0xfae>
    9588:	60 c3       	rjmp	.+1728   	; 0x9c4a <draw_menu(bool)+0x166e>
    958a:	f7 e1       	ldi	r31, 0x17	; 23
    958c:	5f 9e       	mul	r5, r31
    958e:	60 01       	movw	r12, r0
    9590:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    9592:	f6 01       	movw	r30, r12
    9594:	e8 59       	subi	r30, 0x98	; 152
    9596:	fd 4f       	sbci	r31, 0xFD	; 253
    9598:	e6 0d       	add	r30, r6
    959a:	f7 1d       	adc	r31, r7
    959c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
    if (enable_redraw(rdr, redraw_class) == true)
    959e:	cf 52       	subi	r28, 0x2F	; 47
    95a0:	df 4f       	sbci	r29, 0xFF	; 255
    95a2:	68 81       	ld	r22, Y
    95a4:	c1 5d       	subi	r28, 0xD1	; 209
    95a6:	d0 40       	sbci	r29, 0x00	; 0
    95a8:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    95ac:	88 23       	and	r24, r24
    95ae:	09 f4       	brne	.+2      	; 0x95b2 <draw_menu(bool)+0xfd6>
    95b0:	98 c1       	rjmp	.+816    	; 0x98e2 <draw_menu(bool)+0x1306>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
    {
      loop_i = 0;
    95b2:	ce 54       	subi	r28, 0x4E	; 78
    95b4:	df 4f       	sbci	r29, 0xFF	; 255
    95b6:	18 82       	st	Y, r1
    95b8:	c2 5b       	subi	r28, 0xB2	; 178
    95ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    95bc:	f6 01       	movw	r30, r12
    95be:	ea 59       	subi	r30, 0x9A	; 154
    95c0:	fd 4f       	sbci	r31, 0xFD	; 253
    95c2:	e6 0d       	add	r30, r6
    95c4:	f7 1d       	adc	r31, r7
    95c6:	25 91       	lpm	r18, Z+
    95c8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    95ca:	c6 01       	movw	r24, r12
    95cc:	8f 59       	subi	r24, 0x9F	; 159
    95ce:	9d 4f       	sbci	r25, 0xFD	; 253
    95d0:	a3 01       	movw	r20, r6
    95d2:	48 0f       	add	r20, r24
    95d4:	59 1f       	adc	r21, r25
    95d6:	ca 54       	subi	r28, 0x4A	; 74
    95d8:	df 4f       	sbci	r29, 0xFF	; 255
    95da:	59 83       	std	Y+1, r21	; 0x01
    95dc:	48 83       	st	Y, r20
    95de:	c6 5b       	subi	r28, 0xB6	; 182
    95e0:	d0 40       	sbci	r29, 0x00	; 0
    95e2:	fa 01       	movw	r30, r20
    95e4:	84 91       	lpm	r24, Z
    95e6:	cd 54       	subi	r28, 0x4D	; 77
    95e8:	df 4f       	sbci	r29, 0xFF	; 255
    95ea:	68 81       	ld	r22, Y
    95ec:	c3 5b       	subi	r28, 0xB3	; 179
    95ee:	d0 40       	sbci	r29, 0x00	; 0
    95f0:	70 e0       	ldi	r23, 0x00	; 0
    95f2:	40 e0       	ldi	r20, 0x00	; 0
    95f4:	90 e0       	ldi	r25, 0x00	; 0
    95f6:	f9 01       	movw	r30, r18
    95f8:	19 95       	eicall
    95fa:	cf 54       	subi	r28, 0x4F	; 79
    95fc:	df 4f       	sbci	r29, 0xFF	; 255
    95fe:	88 83       	st	Y, r24
    9600:	c1 5b       	subi	r28, 0xB1	; 177
    9602:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    9604:	f6 01       	movw	r30, r12
    9606:	ee 59       	subi	r30, 0x9E	; 158
    9608:	fd 4f       	sbci	r31, 0xFD	; 253
    960a:	e6 0d       	add	r30, r6
    960c:	f7 1d       	adc	r31, r7
    960e:	25 91       	lpm	r18, Z+
    9610:	34 91       	lpm	r19, Z
    9612:	ce 52       	subi	r28, 0x2E	; 46
    9614:	df 4f       	sbci	r29, 0xFF	; 255
    9616:	39 83       	std	Y+1, r19	; 0x01
    9618:	28 83       	st	Y, r18
    961a:	c2 5d       	subi	r28, 0xD2	; 210
    961c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    961e:	46 01       	movw	r8, r12
    9620:	3e ea       	ldi	r19, 0xAE	; 174
    9622:	83 1a       	sub	r8, r19
    9624:	3d ef       	ldi	r19, 0xFD	; 253
    9626:	93 0a       	sbc	r9, r19
    9628:	86 0c       	add	r8, r6
    962a:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    962c:	56 01       	movw	r10, r12
    962e:	4c ea       	ldi	r20, 0xAC	; 172
    9630:	a4 1a       	sub	r10, r20
    9632:	4d ef       	ldi	r20, 0xFD	; 253
    9634:	b4 0a       	sbc	r11, r20
    9636:	a6 0c       	add	r10, r6
    9638:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    963a:	16 01       	movw	r2, r12
    963c:	53 ea       	ldi	r21, 0xA3	; 163
    963e:	25 1a       	sub	r2, r21
    9640:	5d ef       	ldi	r21, 0xFD	; 253
    9642:	35 0a       	sbc	r3, r21
    9644:	26 0c       	add	r2, r6
    9646:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9648:	c6 01       	movw	r24, r12
    964a:	84 5a       	subi	r24, 0xA4	; 164
    964c:	9d 4f       	sbci	r25, 0xFD	; 253
    964e:	b3 01       	movw	r22, r6
    9650:	68 0f       	add	r22, r24
    9652:	79 1f       	adc	r23, r25
    9654:	c4 54       	subi	r28, 0x44	; 68
    9656:	df 4f       	sbci	r29, 0xFF	; 255
    9658:	79 83       	std	Y+1, r23	; 0x01
    965a:	68 83       	st	Y, r22
    965c:	cc 5b       	subi	r28, 0xBC	; 188
    965e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9660:	01 97       	sbiw	r24, 0x01	; 1
    9662:	f3 01       	movw	r30, r6
    9664:	e8 0f       	add	r30, r24
    9666:	f9 1f       	adc	r31, r25
    9668:	c2 54       	subi	r28, 0x42	; 66
    966a:	df 4f       	sbci	r29, 0xFF	; 255
    966c:	f9 83       	std	Y+1, r31	; 0x01
    966e:	e8 83       	st	Y, r30
    9670:	ce 5b       	subi	r28, 0xBE	; 190
    9672:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9674:	03 96       	adiw	r24, 0x03	; 3
    9676:	93 01       	movw	r18, r6
    9678:	28 0f       	add	r18, r24
    967a:	39 1f       	adc	r19, r25
    967c:	c8 53       	subi	r28, 0x38	; 56
    967e:	df 4f       	sbci	r29, 0xFF	; 255
    9680:	39 83       	std	Y+1, r19	; 0x01
    9682:	28 83       	st	Y, r18
    9684:	c8 5c       	subi	r28, 0xC8	; 200
    9686:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    9688:	04 97       	sbiw	r24, 0x04	; 4
    968a:	a3 01       	movw	r20, r6
    968c:	48 0f       	add	r20, r24
    968e:	59 1f       	adc	r21, r25
    9690:	c6 53       	subi	r28, 0x36	; 54
    9692:	df 4f       	sbci	r29, 0xFF	; 255
    9694:	59 83       	std	Y+1, r21	; 0x01
    9696:	48 83       	st	Y, r20
    9698:	ca 5c       	subi	r28, 0xCA	; 202
    969a:	d0 40       	sbci	r29, 0x00	; 0
    969c:	02 97       	sbiw	r24, 0x02	; 2
    969e:	b3 01       	movw	r22, r6
    96a0:	68 0f       	add	r22, r24
    96a2:	79 1f       	adc	r23, r25
    96a4:	c3 53       	subi	r28, 0x33	; 51
    96a6:	df 4f       	sbci	r29, 0xFF	; 255
    96a8:	79 83       	std	Y+1, r23	; 0x01
    96aa:	68 83       	st	Y, r22
    96ac:	cd 5c       	subi	r28, 0xCD	; 205
    96ae:	d0 40       	sbci	r29, 0x00	; 0
    96b0:	02 97       	sbiw	r24, 0x02	; 2
    96b2:	f3 01       	movw	r30, r6
    96b4:	e8 0f       	add	r30, r24
    96b6:	f9 1f       	adc	r31, r25
    96b8:	c1 53       	subi	r28, 0x31	; 49
    96ba:	df 4f       	sbci	r29, 0xFF	; 255
    96bc:	f9 83       	std	Y+1, r31	; 0x01
    96be:	e8 83       	st	Y, r30
    96c0:	cf 5c       	subi	r28, 0xCF	; 207
    96c2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    96c4:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    96c6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    96c8:	ce 54       	subi	r28, 0x4E	; 78
    96ca:	df 4f       	sbci	r29, 0xFF	; 255
    96cc:	88 81       	ld	r24, Y
    96ce:	c2 5b       	subi	r28, 0xB2	; 178
    96d0:	d0 40       	sbci	r29, 0x00	; 0
    96d2:	cf 54       	subi	r28, 0x4F	; 79
    96d4:	df 4f       	sbci	r29, 0xFF	; 255
    96d6:	98 81       	ld	r25, Y
    96d8:	c1 5b       	subi	r28, 0xB1	; 177
    96da:	d0 40       	sbci	r29, 0x00	; 0
    96dc:	89 17       	cp	r24, r25
    96de:	08 f0       	brcs	.+2      	; 0x96e2 <draw_menu(bool)+0x1106>
    96e0:	00 c1       	rjmp	.+512    	; 0x98e2 <draw_menu(bool)+0x1306>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    96e2:	f4 01       	movw	r30, r8
    96e4:	45 91       	lpm	r20, Z+
    96e6:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    96e8:	f5 01       	movw	r30, r10
    96ea:	25 91       	lpm	r18, Z+
    96ec:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    96ee:	f1 01       	movw	r30, r2
    96f0:	94 91       	lpm	r25, Z
    96f2:	99 23       	and	r25, r25
    96f4:	09 f4       	brne	.+2      	; 0x96f8 <draw_menu(bool)+0x111c>
    96f6:	b7 c0       	rjmp	.+366    	; 0x9866 <draw_menu(bool)+0x128a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    96f8:	c6 54       	subi	r28, 0x46	; 70
    96fa:	df 4f       	sbci	r29, 0xFF	; 255
    96fc:	68 81       	ld	r22, Y
    96fe:	79 81       	ldd	r23, Y+1	; 0x01
    9700:	ca 5b       	subi	r28, 0xBA	; 186
    9702:	d0 40       	sbci	r29, 0x00	; 0
    9704:	62 0f       	add	r22, r18
    9706:	73 1f       	adc	r23, r19
    9708:	ce 53       	subi	r28, 0x3E	; 62
    970a:	df 4f       	sbci	r29, 0xFF	; 255
    970c:	79 83       	std	Y+1, r23	; 0x01
    970e:	68 83       	st	Y, r22
    9710:	c2 5c       	subi	r28, 0xC2	; 194
    9712:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    9714:	f1 01       	movw	r30, r2
    9716:	94 91       	lpm	r25, Z
    9718:	91 30       	cpi	r25, 0x01	; 1
    971a:	09 f4       	brne	.+2      	; 0x971e <draw_menu(bool)+0x1142>
    971c:	c3 c0       	rjmp	.+390    	; 0x98a4 <draw_menu(bool)+0x12c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    971e:	c8 54       	subi	r28, 0x48	; 72
    9720:	df 4f       	sbci	r29, 0xFF	; 255
    9722:	28 81       	ld	r18, Y
    9724:	39 81       	ldd	r19, Y+1	; 0x01
    9726:	c8 5b       	subi	r28, 0xB8	; 184
    9728:	d0 40       	sbci	r29, 0x00	; 0
    972a:	24 0f       	add	r18, r20
    972c:	35 1f       	adc	r19, r21
    972e:	c0 54       	subi	r28, 0x40	; 64
    9730:	df 4f       	sbci	r29, 0xFF	; 255
    9732:	39 83       	std	Y+1, r19	; 0x01
    9734:	28 83       	st	Y, r18
    9736:	c0 5c       	subi	r28, 0xC0	; 192
    9738:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    973a:	f1 01       	movw	r30, r2
    973c:	94 91       	lpm	r25, Z
    973e:	92 30       	cpi	r25, 0x02	; 2
    9740:	09 f0       	breq	.+2      	; 0x9744 <draw_menu(bool)+0x1168>
    9742:	46 c0       	rjmp	.+140    	; 0x97d0 <draw_menu(bool)+0x11f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9744:	f4 01       	movw	r30, r8
    9746:	25 91       	lpm	r18, Z+
    9748:	34 91       	lpm	r19, Z
    974a:	c2 54       	subi	r28, 0x42	; 66
    974c:	df 4f       	sbci	r29, 0xFF	; 255
    974e:	e8 81       	ld	r30, Y
    9750:	f9 81       	ldd	r31, Y+1	; 0x01
    9752:	ce 5b       	subi	r28, 0xBE	; 190
    9754:	d0 40       	sbci	r29, 0x00	; 0
    9756:	94 91       	lpm	r25, Z
    9758:	c8 54       	subi	r28, 0x48	; 72
    975a:	df 4f       	sbci	r29, 0xFF	; 255
    975c:	48 81       	ld	r20, Y
    975e:	59 81       	ldd	r21, Y+1	; 0x01
    9760:	c8 5b       	subi	r28, 0xB8	; 184
    9762:	d0 40       	sbci	r29, 0x00	; 0
    9764:	24 0f       	add	r18, r20
    9766:	35 1f       	adc	r19, r21
    9768:	b9 01       	movw	r22, r18
    976a:	9f 9d       	mul	r25, r15
    976c:	60 0d       	add	r22, r0
    976e:	71 1d       	adc	r23, r1
    9770:	11 24       	eor	r1, r1
    9772:	c0 54       	subi	r28, 0x40	; 64
    9774:	df 4f       	sbci	r29, 0xFF	; 255
    9776:	79 83       	std	Y+1, r23	; 0x01
    9778:	68 83       	st	Y, r22
    977a:	c0 5c       	subi	r28, 0xC0	; 192
    977c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    977e:	f5 01       	movw	r30, r10
    9780:	25 91       	lpm	r18, Z+
    9782:	34 91       	lpm	r19, Z
    9784:	c4 54       	subi	r28, 0x44	; 68
    9786:	df 4f       	sbci	r29, 0xFF	; 255
    9788:	e8 81       	ld	r30, Y
    978a:	f9 81       	ldd	r31, Y+1	; 0x01
    978c:	cc 5b       	subi	r28, 0xBC	; 188
    978e:	d0 40       	sbci	r29, 0x00	; 0
    9790:	94 91       	lpm	r25, Z
    9792:	c6 54       	subi	r28, 0x46	; 70
    9794:	df 4f       	sbci	r29, 0xFF	; 255
    9796:	48 81       	ld	r20, Y
    9798:	59 81       	ldd	r21, Y+1	; 0x01
    979a:	ca 5b       	subi	r28, 0xBA	; 186
    979c:	d0 40       	sbci	r29, 0x00	; 0
    979e:	24 0f       	add	r18, r20
    97a0:	35 1f       	adc	r19, r21
    97a2:	b9 01       	movw	r22, r18
    97a4:	94 9d       	mul	r25, r4
    97a6:	60 0d       	add	r22, r0
    97a8:	71 1d       	adc	r23, r1
    97aa:	11 24       	eor	r1, r1
    97ac:	ce 53       	subi	r28, 0x3E	; 62
    97ae:	df 4f       	sbci	r29, 0xFF	; 255
    97b0:	79 83       	std	Y+1, r23	; 0x01
    97b2:	68 83       	st	Y, r22
    97b4:	c2 5c       	subi	r28, 0xC2	; 194
    97b6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
          loop_t++;
    97b8:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    97ba:	c8 53       	subi	r28, 0x38	; 56
    97bc:	df 4f       	sbci	r29, 0xFF	; 255
    97be:	e8 81       	ld	r30, Y
    97c0:	f9 81       	ldd	r31, Y+1	; 0x01
    97c2:	c8 5c       	subi	r28, 0xC8	; 200
    97c4:	d0 40       	sbci	r29, 0x00	; 0
    97c6:	94 91       	lpm	r25, Z
    97c8:	f9 16       	cp	r15, r25
    97ca:	10 f0       	brcs	.+4      	; 0x97d0 <draw_menu(bool)+0x11f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2291
          {
            loop_t = 0;
            loop_r++;
    97cc:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    97ce:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
    97d0:	ca 54       	subi	r28, 0x4A	; 74
    97d2:	df 4f       	sbci	r29, 0xFF	; 255
    97d4:	e8 81       	ld	r30, Y
    97d6:	f9 81       	ldd	r31, Y+1	; 0x01
    97d8:	c6 5b       	subi	r28, 0xB6	; 182
    97da:	d0 40       	sbci	r29, 0x00	; 0
    97dc:	44 91       	lpm	r20, Z
    97de:	8e 01       	movw	r16, r28
    97e0:	0f 57       	subi	r16, 0x7F	; 127
    97e2:	1f 4f       	sbci	r17, 0xFF	; 255
    97e4:	9e 01       	movw	r18, r28
    97e6:	2f 5f       	subi	r18, 0xFF	; 255
    97e8:	3f 4f       	sbci	r19, 0xFF	; 255
    97ea:	cd 54       	subi	r28, 0x4D	; 77
    97ec:	df 4f       	sbci	r29, 0xFF	; 255
    97ee:	68 81       	ld	r22, Y
    97f0:	c3 5b       	subi	r28, 0xB3	; 179
    97f2:	d0 40       	sbci	r29, 0x00	; 0
    97f4:	ce 52       	subi	r28, 0x2E	; 46
    97f6:	df 4f       	sbci	r29, 0xFF	; 255
    97f8:	e8 81       	ld	r30, Y
    97fa:	f9 81       	ldd	r31, Y+1	; 0x01
    97fc:	c2 5d       	subi	r28, 0xD2	; 210
    97fe:	d0 40       	sbci	r29, 0x00	; 0
    9800:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    9802:	c6 53       	subi	r28, 0x36	; 54
    9804:	df 4f       	sbci	r29, 0xFF	; 255
    9806:	e8 81       	ld	r30, Y
    9808:	f9 81       	ldd	r31, Y+1	; 0x01
    980a:	ca 5c       	subi	r28, 0xCA	; 202
    980c:	d0 40       	sbci	r29, 0x00	; 0
    980e:	04 91       	lpm	r16, Z
    9810:	c3 53       	subi	r28, 0x33	; 51
    9812:	df 4f       	sbci	r29, 0xFF	; 255
    9814:	e8 81       	ld	r30, Y
    9816:	f9 81       	ldd	r31, Y+1	; 0x01
    9818:	cd 5c       	subi	r28, 0xCD	; 205
    981a:	d0 40       	sbci	r29, 0x00	; 0
    981c:	25 91       	lpm	r18, Z+
    981e:	34 91       	lpm	r19, Z
    9820:	c1 53       	subi	r28, 0x31	; 49
    9822:	df 4f       	sbci	r29, 0xFF	; 255
    9824:	e8 81       	ld	r30, Y
    9826:	f9 81       	ldd	r31, Y+1	; 0x01
    9828:	cf 5c       	subi	r28, 0xCF	; 207
    982a:	d0 40       	sbci	r29, 0x00	; 0
    982c:	45 91       	lpm	r20, Z+
    982e:	54 91       	lpm	r21, Z
    9830:	e9 80       	ldd	r14, Y+1	; 0x01
    9832:	ce 53       	subi	r28, 0x3E	; 62
    9834:	df 4f       	sbci	r29, 0xFF	; 255
    9836:	68 81       	ld	r22, Y
    9838:	79 81       	ldd	r23, Y+1	; 0x01
    983a:	c2 5c       	subi	r28, 0xC2	; 194
    983c:	d0 40       	sbci	r29, 0x00	; 0
    983e:	c0 54       	subi	r28, 0x40	; 64
    9840:	df 4f       	sbci	r29, 0xFF	; 255
    9842:	88 81       	ld	r24, Y
    9844:	99 81       	ldd	r25, Y+1	; 0x01
    9846:	c0 5c       	subi	r28, 0xC0	; 192
    9848:	d0 40       	sbci	r29, 0x00	; 0
    984a:	0e 94 33 31 	call	0x6266	; 0x6266 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
        loop_i++;
    984e:	ce 54       	subi	r28, 0x4E	; 78
    9850:	df 4f       	sbci	r29, 0xFF	; 255
    9852:	88 81       	ld	r24, Y
    9854:	c2 5b       	subi	r28, 0xB2	; 178
    9856:	d0 40       	sbci	r29, 0x00	; 0
    9858:	8f 5f       	subi	r24, 0xFF	; 255
    985a:	ce 54       	subi	r28, 0x4E	; 78
    985c:	df 4f       	sbci	r29, 0xFF	; 255
    985e:	88 83       	st	Y, r24
    9860:	c2 5b       	subi	r28, 0xB2	; 178
    9862:	d0 40       	sbci	r29, 0x00	; 0
    9864:	31 cf       	rjmp	.-414    	; 0x96c8 <draw_menu(bool)+0x10ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9866:	f5 01       	movw	r30, r10
    9868:	25 91       	lpm	r18, Z+
    986a:	34 91       	lpm	r19, Z
    986c:	c4 54       	subi	r28, 0x44	; 68
    986e:	df 4f       	sbci	r29, 0xFF	; 255
    9870:	e8 81       	ld	r30, Y
    9872:	f9 81       	ldd	r31, Y+1	; 0x01
    9874:	cc 5b       	subi	r28, 0xBC	; 188
    9876:	d0 40       	sbci	r29, 0x00	; 0
    9878:	94 91       	lpm	r25, Z
    987a:	c6 54       	subi	r28, 0x46	; 70
    987c:	df 4f       	sbci	r29, 0xFF	; 255
    987e:	68 81       	ld	r22, Y
    9880:	79 81       	ldd	r23, Y+1	; 0x01
    9882:	ca 5b       	subi	r28, 0xBA	; 186
    9884:	d0 40       	sbci	r29, 0x00	; 0
    9886:	26 0f       	add	r18, r22
    9888:	37 1f       	adc	r19, r23
    988a:	f9 01       	movw	r30, r18
    988c:	9f 9d       	mul	r25, r15
    988e:	e0 0d       	add	r30, r0
    9890:	f1 1d       	adc	r31, r1
    9892:	11 24       	eor	r1, r1
    9894:	ce 53       	subi	r28, 0x3E	; 62
    9896:	df 4f       	sbci	r29, 0xFF	; 255
    9898:	f9 83       	std	Y+1, r31	; 0x01
    989a:	e8 83       	st	Y, r30
    989c:	c2 5c       	subi	r28, 0xC2	; 194
    989e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
          loop_t++;
    98a0:	f3 94       	inc	r15
    98a2:	38 cf       	rjmp	.-400    	; 0x9714 <draw_menu(bool)+0x1138>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    98a4:	f4 01       	movw	r30, r8
    98a6:	25 91       	lpm	r18, Z+
    98a8:	34 91       	lpm	r19, Z
    98aa:	c2 54       	subi	r28, 0x42	; 66
    98ac:	df 4f       	sbci	r29, 0xFF	; 255
    98ae:	e8 81       	ld	r30, Y
    98b0:	f9 81       	ldd	r31, Y+1	; 0x01
    98b2:	ce 5b       	subi	r28, 0xBE	; 190
    98b4:	d0 40       	sbci	r29, 0x00	; 0
    98b6:	94 91       	lpm	r25, Z
    98b8:	c8 54       	subi	r28, 0x48	; 72
    98ba:	df 4f       	sbci	r29, 0xFF	; 255
    98bc:	48 81       	ld	r20, Y
    98be:	59 81       	ldd	r21, Y+1	; 0x01
    98c0:	c8 5b       	subi	r28, 0xB8	; 184
    98c2:	d0 40       	sbci	r29, 0x00	; 0
    98c4:	24 0f       	add	r18, r20
    98c6:	35 1f       	adc	r19, r21
    98c8:	b9 01       	movw	r22, r18
    98ca:	9f 9d       	mul	r25, r15
    98cc:	60 0d       	add	r22, r0
    98ce:	71 1d       	adc	r23, r1
    98d0:	11 24       	eor	r1, r1
    98d2:	c0 54       	subi	r28, 0x40	; 64
    98d4:	df 4f       	sbci	r29, 0xFF	; 255
    98d6:	79 83       	std	Y+1, r23	; 0x01
    98d8:	68 83       	st	Y, r22
    98da:	c0 5c       	subi	r28, 0xC0	; 192
    98dc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
          loop_t++;
    98de:	f3 94       	inc	r15
    98e0:	2c cf       	rjmp	.-424    	; 0x973a <draw_menu(bool)+0x115e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    98e2:	cc 53       	subi	r28, 0x3C	; 60
    98e4:	df 4f       	sbci	r29, 0xFF	; 255
    98e6:	28 81       	ld	r18, Y
    98e8:	39 81       	ldd	r19, Y+1	; 0x01
    98ea:	c4 5c       	subi	r28, 0xC4	; 196
    98ec:	d0 40       	sbci	r29, 0x00	; 0
    98ee:	23 2b       	or	r18, r19
    98f0:	09 f4       	brne	.+2      	; 0x98f4 <draw_menu(bool)+0x1318>
    98f2:	69 c1       	rjmp	.+722    	; 0x9bc6 <draw_menu(bool)+0x15ea>
    98f4:	ca 53       	subi	r28, 0x3A	; 58
    98f6:	df 4f       	sbci	r29, 0xFF	; 255
    98f8:	48 81       	ld	r20, Y
    98fa:	59 81       	ldd	r21, Y+1	; 0x01
    98fc:	c6 5c       	subi	r28, 0xC6	; 198
    98fe:	d0 40       	sbci	r29, 0x00	; 0
    9900:	45 2b       	or	r20, r21
    9902:	09 f4       	brne	.+2      	; 0x9906 <draw_menu(bool)+0x132a>
    9904:	60 c1       	rjmp	.+704    	; 0x9bc6 <draw_menu(bool)+0x15ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
    {
      loop_i = 0;
    9906:	ce 54       	subi	r28, 0x4E	; 78
    9908:	df 4f       	sbci	r29, 0xFF	; 255
    990a:	18 82       	st	Y, r1
    990c:	c2 5b       	subi	r28, 0xB2	; 178
    990e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    9910:	f6 01       	movw	r30, r12
    9912:	ea 59       	subi	r30, 0x9A	; 154
    9914:	fd 4f       	sbci	r31, 0xFD	; 253
    9916:	e6 0d       	add	r30, r6
    9918:	f7 1d       	adc	r31, r7
    991a:	25 91       	lpm	r18, Z+
    991c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    991e:	c6 01       	movw	r24, r12
    9920:	8f 59       	subi	r24, 0x9F	; 159
    9922:	9d 4f       	sbci	r25, 0xFD	; 253
    9924:	b3 01       	movw	r22, r6
    9926:	68 0f       	add	r22, r24
    9928:	79 1f       	adc	r23, r25
    992a:	c2 54       	subi	r28, 0x42	; 66
    992c:	df 4f       	sbci	r29, 0xFF	; 255
    992e:	79 83       	std	Y+1, r23	; 0x01
    9930:	68 83       	st	Y, r22
    9932:	ce 5b       	subi	r28, 0xBE	; 190
    9934:	d0 40       	sbci	r29, 0x00	; 0
    9936:	fb 01       	movw	r30, r22
    9938:	84 91       	lpm	r24, Z
    993a:	cd 54       	subi	r28, 0x4D	; 77
    993c:	df 4f       	sbci	r29, 0xFF	; 255
    993e:	68 81       	ld	r22, Y
    9940:	c3 5b       	subi	r28, 0xB3	; 179
    9942:	d0 40       	sbci	r29, 0x00	; 0
    9944:	70 e0       	ldi	r23, 0x00	; 0
    9946:	40 e0       	ldi	r20, 0x00	; 0
    9948:	90 e0       	ldi	r25, 0x00	; 0
    994a:	f9 01       	movw	r30, r18
    994c:	19 95       	eicall
    994e:	c4 54       	subi	r28, 0x44	; 68
    9950:	df 4f       	sbci	r29, 0xFF	; 255
    9952:	88 83       	st	Y, r24
    9954:	cc 5b       	subi	r28, 0xBC	; 188
    9956:	d0 40       	sbci	r29, 0x00	; 0
    9958:	cf 54       	subi	r28, 0x4F	; 79
    995a:	df 4f       	sbci	r29, 0xFF	; 255
    995c:	88 83       	st	Y, r24
    995e:	c1 5b       	subi	r28, 0xB1	; 177
    9960:	d0 40       	sbci	r29, 0x00	; 0
    9962:	ce 54       	subi	r28, 0x4E	; 78
    9964:	df 4f       	sbci	r29, 0xFF	; 255
    9966:	a8 80       	ld	r10, Y
    9968:	c2 5b       	subi	r28, 0xB2	; 178
    996a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    996c:	16 01       	movw	r2, r12
    996e:	fe ea       	ldi	r31, 0xAE	; 174
    9970:	2f 1a       	sub	r2, r31
    9972:	fd ef       	ldi	r31, 0xFD	; 253
    9974:	3f 0a       	sbc	r3, r31
    9976:	26 0c       	add	r2, r6
    9978:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    997a:	46 01       	movw	r8, r12
    997c:	2c ea       	ldi	r18, 0xAC	; 172
    997e:	82 1a       	sub	r8, r18
    9980:	2d ef       	ldi	r18, 0xFD	; 253
    9982:	92 0a       	sbc	r9, r18
    9984:	86 0c       	add	r8, r6
    9986:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9988:	c6 01       	movw	r24, r12
    998a:	83 5a       	subi	r24, 0xA3	; 163
    998c:	9d 4f       	sbci	r25, 0xFD	; 253
    998e:	a3 01       	movw	r20, r6
    9990:	48 0f       	add	r20, r24
    9992:	59 1f       	adc	r21, r25
    9994:	ca 54       	subi	r28, 0x4A	; 74
    9996:	df 4f       	sbci	r29, 0xFF	; 255
    9998:	59 83       	std	Y+1, r21	; 0x01
    999a:	48 83       	st	Y, r20
    999c:	c6 5b       	subi	r28, 0xB6	; 182
    999e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    99a0:	01 97       	sbiw	r24, 0x01	; 1
    99a2:	b3 01       	movw	r22, r6
    99a4:	68 0f       	add	r22, r24
    99a6:	79 1f       	adc	r23, r25
    99a8:	c8 53       	subi	r28, 0x38	; 56
    99aa:	df 4f       	sbci	r29, 0xFF	; 255
    99ac:	79 83       	std	Y+1, r23	; 0x01
    99ae:	68 83       	st	Y, r22
    99b0:	c8 5c       	subi	r28, 0xC8	; 200
    99b2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    99b4:	01 97       	sbiw	r24, 0x01	; 1
    99b6:	f3 01       	movw	r30, r6
    99b8:	e8 0f       	add	r30, r24
    99ba:	f9 1f       	adc	r31, r25
    99bc:	c6 53       	subi	r28, 0x36	; 54
    99be:	df 4f       	sbci	r29, 0xFF	; 255
    99c0:	f9 83       	std	Y+1, r31	; 0x01
    99c2:	e8 83       	st	Y, r30
    99c4:	ca 5c       	subi	r28, 0xCA	; 202
    99c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    99c8:	03 96       	adiw	r24, 0x03	; 3
    99ca:	93 01       	movw	r18, r6
    99cc:	28 0f       	add	r18, r24
    99ce:	39 1f       	adc	r19, r25
    99d0:	c3 53       	subi	r28, 0x33	; 51
    99d2:	df 4f       	sbci	r29, 0xFF	; 255
    99d4:	39 83       	std	Y+1, r19	; 0x01
    99d6:	28 83       	st	Y, r18
    99d8:	cd 5c       	subi	r28, 0xCD	; 205
    99da:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    99dc:	06 97       	sbiw	r24, 0x06	; 6
    99de:	a3 01       	movw	r20, r6
    99e0:	48 0f       	add	r20, r24
    99e2:	59 1f       	adc	r21, r25
    99e4:	c1 53       	subi	r28, 0x31	; 49
    99e6:	df 4f       	sbci	r29, 0xFF	; 255
    99e8:	59 83       	std	Y+1, r21	; 0x01
    99ea:	48 83       	st	Y, r20
    99ec:	cf 5c       	subi	r28, 0xCF	; 207
    99ee:	d0 40       	sbci	r29, 0x00	; 0
    99f0:	02 97       	sbiw	r24, 0x02	; 2
    99f2:	b3 01       	movw	r22, r6
    99f4:	68 0f       	add	r22, r24
    99f6:	79 1f       	adc	r23, r25
    99f8:	ce 52       	subi	r28, 0x2E	; 46
    99fa:	df 4f       	sbci	r29, 0xFF	; 255
    99fc:	79 83       	std	Y+1, r23	; 0x01
    99fe:	68 83       	st	Y, r22
    9a00:	c2 5d       	subi	r28, 0xD2	; 210
    9a02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    9a04:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    9a06:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    9a08:	c4 54       	subi	r28, 0x44	; 68
    9a0a:	df 4f       	sbci	r29, 0xFF	; 255
    9a0c:	78 81       	ld	r23, Y
    9a0e:	cc 5b       	subi	r28, 0xBC	; 188
    9a10:	d0 40       	sbci	r29, 0x00	; 0
    9a12:	a7 16       	cp	r10, r23
    9a14:	08 f0       	brcs	.+2      	; 0x9a18 <draw_menu(bool)+0x143c>
    9a16:	d7 c0       	rjmp	.+430    	; 0x9bc6 <draw_menu(bool)+0x15ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    9a18:	f1 01       	movw	r30, r2
    9a1a:	25 91       	lpm	r18, Z+
    9a1c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9a1e:	f4 01       	movw	r30, r8
    9a20:	85 91       	lpm	r24, Z+
    9a22:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9a24:	ca 54       	subi	r28, 0x4A	; 74
    9a26:	df 4f       	sbci	r29, 0xFF	; 255
    9a28:	e8 81       	ld	r30, Y
    9a2a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a2c:	c6 5b       	subi	r28, 0xB6	; 182
    9a2e:	d0 40       	sbci	r29, 0x00	; 0
    9a30:	44 91       	lpm	r20, Z
    9a32:	44 23       	and	r20, r20
    9a34:	09 f4       	brne	.+2      	; 0x9a38 <draw_menu(bool)+0x145c>
    9a36:	cb c0       	rjmp	.+406    	; 0x9bce <draw_menu(bool)+0x15f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9a38:	c6 54       	subi	r28, 0x46	; 70
    9a3a:	df 4f       	sbci	r29, 0xFF	; 255
    9a3c:	48 81       	ld	r20, Y
    9a3e:	59 81       	ldd	r21, Y+1	; 0x01
    9a40:	ca 5b       	subi	r28, 0xBA	; 186
    9a42:	d0 40       	sbci	r29, 0x00	; 0
    9a44:	48 0f       	add	r20, r24
    9a46:	59 1f       	adc	r21, r25
    9a48:	ce 53       	subi	r28, 0x3E	; 62
    9a4a:	df 4f       	sbci	r29, 0xFF	; 255
    9a4c:	59 83       	std	Y+1, r21	; 0x01
    9a4e:	48 83       	st	Y, r20
    9a50:	c2 5c       	subi	r28, 0xC2	; 194
    9a52:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    9a54:	ca 54       	subi	r28, 0x4A	; 74
    9a56:	df 4f       	sbci	r29, 0xFF	; 255
    9a58:	e8 81       	ld	r30, Y
    9a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a5c:	c6 5b       	subi	r28, 0xB6	; 182
    9a5e:	d0 40       	sbci	r29, 0x00	; 0
    9a60:	84 91       	lpm	r24, Z
    9a62:	81 30       	cpi	r24, 0x01	; 1
    9a64:	09 f4       	brne	.+2      	; 0x9a68 <draw_menu(bool)+0x148c>
    9a66:	d2 c0       	rjmp	.+420    	; 0x9c0c <draw_menu(bool)+0x1630>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    9a68:	c8 54       	subi	r28, 0x48	; 72
    9a6a:	df 4f       	sbci	r29, 0xFF	; 255
    9a6c:	48 81       	ld	r20, Y
    9a6e:	59 81       	ldd	r21, Y+1	; 0x01
    9a70:	c8 5b       	subi	r28, 0xB8	; 184
    9a72:	d0 40       	sbci	r29, 0x00	; 0
    9a74:	42 0f       	add	r20, r18
    9a76:	53 1f       	adc	r21, r19
    9a78:	c0 54       	subi	r28, 0x40	; 64
    9a7a:	df 4f       	sbci	r29, 0xFF	; 255
    9a7c:	59 83       	std	Y+1, r21	; 0x01
    9a7e:	48 83       	st	Y, r20
    9a80:	c0 5c       	subi	r28, 0xC0	; 192
    9a82:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    9a84:	ca 54       	subi	r28, 0x4A	; 74
    9a86:	df 4f       	sbci	r29, 0xFF	; 255
    9a88:	e8 81       	ld	r30, Y
    9a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a8c:	c6 5b       	subi	r28, 0xB6	; 182
    9a8e:	d0 40       	sbci	r29, 0x00	; 0
    9a90:	84 91       	lpm	r24, Z
    9a92:	82 30       	cpi	r24, 0x02	; 2
    9a94:	09 f0       	breq	.+2      	; 0x9a98 <draw_menu(bool)+0x14bc>
    9a96:	46 c0       	rjmp	.+140    	; 0x9b24 <draw_menu(bool)+0x1548>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9a98:	f1 01       	movw	r30, r2
    9a9a:	85 91       	lpm	r24, Z+
    9a9c:	94 91       	lpm	r25, Z
    9a9e:	c6 53       	subi	r28, 0x36	; 54
    9aa0:	df 4f       	sbci	r29, 0xFF	; 255
    9aa2:	e8 81       	ld	r30, Y
    9aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    9aa6:	ca 5c       	subi	r28, 0xCA	; 202
    9aa8:	d0 40       	sbci	r29, 0x00	; 0
    9aaa:	24 91       	lpm	r18, Z
    9aac:	c8 54       	subi	r28, 0x48	; 72
    9aae:	df 4f       	sbci	r29, 0xFF	; 255
    9ab0:	48 81       	ld	r20, Y
    9ab2:	59 81       	ldd	r21, Y+1	; 0x01
    9ab4:	c8 5b       	subi	r28, 0xB8	; 184
    9ab6:	d0 40       	sbci	r29, 0x00	; 0
    9ab8:	84 0f       	add	r24, r20
    9aba:	95 1f       	adc	r25, r21
    9abc:	bc 01       	movw	r22, r24
    9abe:	2b 9d       	mul	r18, r11
    9ac0:	60 0d       	add	r22, r0
    9ac2:	71 1d       	adc	r23, r1
    9ac4:	11 24       	eor	r1, r1
    9ac6:	c0 54       	subi	r28, 0x40	; 64
    9ac8:	df 4f       	sbci	r29, 0xFF	; 255
    9aca:	79 83       	std	Y+1, r23	; 0x01
    9acc:	68 83       	st	Y, r22
    9ace:	c0 5c       	subi	r28, 0xC0	; 192
    9ad0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    9ad2:	f4 01       	movw	r30, r8
    9ad4:	85 91       	lpm	r24, Z+
    9ad6:	94 91       	lpm	r25, Z
    9ad8:	c8 53       	subi	r28, 0x38	; 56
    9ada:	df 4f       	sbci	r29, 0xFF	; 255
    9adc:	e8 81       	ld	r30, Y
    9ade:	f9 81       	ldd	r31, Y+1	; 0x01
    9ae0:	c8 5c       	subi	r28, 0xC8	; 200
    9ae2:	d0 40       	sbci	r29, 0x00	; 0
    9ae4:	24 91       	lpm	r18, Z
    9ae6:	c6 54       	subi	r28, 0x46	; 70
    9ae8:	df 4f       	sbci	r29, 0xFF	; 255
    9aea:	48 81       	ld	r20, Y
    9aec:	59 81       	ldd	r21, Y+1	; 0x01
    9aee:	ca 5b       	subi	r28, 0xBA	; 186
    9af0:	d0 40       	sbci	r29, 0x00	; 0
    9af2:	84 0f       	add	r24, r20
    9af4:	95 1f       	adc	r25, r21
    9af6:	bc 01       	movw	r22, r24
    9af8:	24 9d       	mul	r18, r4
    9afa:	60 0d       	add	r22, r0
    9afc:	71 1d       	adc	r23, r1
    9afe:	11 24       	eor	r1, r1
    9b00:	ce 53       	subi	r28, 0x3E	; 62
    9b02:	df 4f       	sbci	r29, 0xFF	; 255
    9b04:	79 83       	std	Y+1, r23	; 0x01
    9b06:	68 83       	st	Y, r22
    9b08:	c2 5c       	subi	r28, 0xC2	; 194
    9b0a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
          loop_t++;
    9b0c:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9b0e:	c3 53       	subi	r28, 0x33	; 51
    9b10:	df 4f       	sbci	r29, 0xFF	; 255
    9b12:	e8 81       	ld	r30, Y
    9b14:	f9 81       	ldd	r31, Y+1	; 0x01
    9b16:	cd 5c       	subi	r28, 0xCD	; 205
    9b18:	d0 40       	sbci	r29, 0x00	; 0
    9b1a:	84 91       	lpm	r24, Z
    9b1c:	b8 16       	cp	r11, r24
    9b1e:	10 f0       	brcs	.+4      	; 0x9b24 <draw_menu(bool)+0x1548>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
          {
            loop_t = 0;
            loop_r++;
    9b20:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    9b22:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9b24:	c1 53       	subi	r28, 0x31	; 49
    9b26:	df 4f       	sbci	r29, 0xFF	; 255
    9b28:	e8 81       	ld	r30, Y
    9b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    9b2c:	cf 5c       	subi	r28, 0xCF	; 207
    9b2e:	d0 40       	sbci	r29, 0x00	; 0
    9b30:	25 91       	lpm	r18, Z+
    9b32:	34 91       	lpm	r19, Z
    9b34:	ce 52       	subi	r28, 0x2E	; 46
    9b36:	df 4f       	sbci	r29, 0xFF	; 255
    9b38:	e8 81       	ld	r30, Y
    9b3a:	f9 81       	ldd	r31, Y+1	; 0x01
    9b3c:	c2 5d       	subi	r28, 0xD2	; 210
    9b3e:	d0 40       	sbci	r29, 0x00	; 0
    9b40:	45 91       	lpm	r20, Z+
    9b42:	54 91       	lpm	r21, Z
    9b44:	ca 53       	subi	r28, 0x3A	; 58
    9b46:	df 4f       	sbci	r29, 0xFF	; 255
    9b48:	e8 80       	ld	r14, Y
    9b4a:	f9 80       	ldd	r15, Y+1	; 0x01
    9b4c:	c6 5c       	subi	r28, 0xC6	; 198
    9b4e:	d0 40       	sbci	r29, 0x00	; 0
    9b50:	cc 53       	subi	r28, 0x3C	; 60
    9b52:	df 4f       	sbci	r29, 0xFF	; 255
    9b54:	08 81       	ld	r16, Y
    9b56:	19 81       	ldd	r17, Y+1	; 0x01
    9b58:	c4 5c       	subi	r28, 0xC4	; 196
    9b5a:	d0 40       	sbci	r29, 0x00	; 0
    9b5c:	ce 53       	subi	r28, 0x3E	; 62
    9b5e:	df 4f       	sbci	r29, 0xFF	; 255
    9b60:	68 81       	ld	r22, Y
    9b62:	79 81       	ldd	r23, Y+1	; 0x01
    9b64:	c2 5c       	subi	r28, 0xC2	; 194
    9b66:	d0 40       	sbci	r29, 0x00	; 0
    9b68:	c0 54       	subi	r28, 0x40	; 64
    9b6a:	df 4f       	sbci	r29, 0xFF	; 255
    9b6c:	88 81       	ld	r24, Y
    9b6e:	99 81       	ldd	r25, Y+1	; 0x01
    9b70:	c0 5c       	subi	r28, 0xC0	; 192
    9b72:	d0 40       	sbci	r29, 0x00	; 0
    9b74:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9b78:	18 2f       	mov	r17, r24
    9b7a:	81 e0       	ldi	r24, 0x01	; 1
    9b7c:	8a 0d       	add	r24, r10
    9b7e:	11 23       	and	r17, r17
    9b80:	21 f1       	breq	.+72     	; 0x9bca <draw_menu(bool)+0x15ee>
    9b82:	ce 54       	subi	r28, 0x4E	; 78
    9b84:	df 4f       	sbci	r29, 0xFF	; 255
    9b86:	a8 82       	st	Y, r10
    9b88:	c2 5b       	subi	r28, 0xB2	; 178
    9b8a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    9b8c:	f6 01       	movw	r30, r12
    9b8e:	ec 59       	subi	r30, 0x9C	; 156
    9b90:	fd 4f       	sbci	r31, 0xFD	; 253
    9b92:	e6 0d       	add	r30, r6
    9b94:	f7 1d       	adc	r31, r7
    9b96:	25 91       	lpm	r18, Z+
    9b98:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    9b9a:	c2 54       	subi	r28, 0x42	; 66
    9b9c:	df 4f       	sbci	r29, 0xFF	; 255
    9b9e:	e8 81       	ld	r30, Y
    9ba0:	f9 81       	ldd	r31, Y+1	; 0x01
    9ba2:	ce 5b       	subi	r28, 0xBE	; 190
    9ba4:	d0 40       	sbci	r29, 0x00	; 0
    9ba6:	84 91       	lpm	r24, Z
    9ba8:	cd 54       	subi	r28, 0x4D	; 77
    9baa:	df 4f       	sbci	r29, 0xFF	; 255
    9bac:	68 81       	ld	r22, Y
    9bae:	c3 5b       	subi	r28, 0xB3	; 179
    9bb0:	d0 40       	sbci	r29, 0x00	; 0
    9bb2:	70 e0       	ldi	r23, 0x00	; 0
    9bb4:	4a 2d       	mov	r20, r10
    9bb6:	90 e0       	ldi	r25, 0x00	; 0
    9bb8:	f9 01       	movw	r30, r18
    9bba:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
          ret = true;
    9bbc:	c4 53       	subi	r28, 0x34	; 52
    9bbe:	df 4f       	sbci	r29, 0xFF	; 255
    9bc0:	18 83       	st	Y, r17
    9bc2:	cc 5c       	subi	r28, 0xCC	; 204
    9bc4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    9bc6:	53 94       	inc	r5
    9bc8:	d6 cc       	rjmp	.-1620   	; 0x9576 <draw_menu(bool)+0xf9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9bca:	a8 2e       	mov	r10, r24
    9bcc:	1d cf       	rjmp	.-454    	; 0x9a08 <draw_menu(bool)+0x142c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9bce:	f4 01       	movw	r30, r8
    9bd0:	85 91       	lpm	r24, Z+
    9bd2:	94 91       	lpm	r25, Z
    9bd4:	c8 53       	subi	r28, 0x38	; 56
    9bd6:	df 4f       	sbci	r29, 0xFF	; 255
    9bd8:	e8 81       	ld	r30, Y
    9bda:	f9 81       	ldd	r31, Y+1	; 0x01
    9bdc:	c8 5c       	subi	r28, 0xC8	; 200
    9bde:	d0 40       	sbci	r29, 0x00	; 0
    9be0:	44 91       	lpm	r20, Z
    9be2:	c6 54       	subi	r28, 0x46	; 70
    9be4:	df 4f       	sbci	r29, 0xFF	; 255
    9be6:	68 81       	ld	r22, Y
    9be8:	79 81       	ldd	r23, Y+1	; 0x01
    9bea:	ca 5b       	subi	r28, 0xBA	; 186
    9bec:	d0 40       	sbci	r29, 0x00	; 0
    9bee:	86 0f       	add	r24, r22
    9bf0:	97 1f       	adc	r25, r23
    9bf2:	fc 01       	movw	r30, r24
    9bf4:	4b 9d       	mul	r20, r11
    9bf6:	e0 0d       	add	r30, r0
    9bf8:	f1 1d       	adc	r31, r1
    9bfa:	11 24       	eor	r1, r1
    9bfc:	ce 53       	subi	r28, 0x3E	; 62
    9bfe:	df 4f       	sbci	r29, 0xFF	; 255
    9c00:	f9 83       	std	Y+1, r31	; 0x01
    9c02:	e8 83       	st	Y, r30
    9c04:	c2 5c       	subi	r28, 0xC2	; 194
    9c06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
          loop_t++;
    9c08:	b3 94       	inc	r11
    9c0a:	24 cf       	rjmp	.-440    	; 0x9a54 <draw_menu(bool)+0x1478>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9c0c:	f1 01       	movw	r30, r2
    9c0e:	85 91       	lpm	r24, Z+
    9c10:	94 91       	lpm	r25, Z
    9c12:	c6 53       	subi	r28, 0x36	; 54
    9c14:	df 4f       	sbci	r29, 0xFF	; 255
    9c16:	e8 81       	ld	r30, Y
    9c18:	f9 81       	ldd	r31, Y+1	; 0x01
    9c1a:	ca 5c       	subi	r28, 0xCA	; 202
    9c1c:	d0 40       	sbci	r29, 0x00	; 0
    9c1e:	24 91       	lpm	r18, Z
    9c20:	c8 54       	subi	r28, 0x48	; 72
    9c22:	df 4f       	sbci	r29, 0xFF	; 255
    9c24:	48 81       	ld	r20, Y
    9c26:	59 81       	ldd	r21, Y+1	; 0x01
    9c28:	c8 5b       	subi	r28, 0xB8	; 184
    9c2a:	d0 40       	sbci	r29, 0x00	; 0
    9c2c:	84 0f       	add	r24, r20
    9c2e:	95 1f       	adc	r25, r21
    9c30:	bc 01       	movw	r22, r24
    9c32:	2b 9d       	mul	r18, r11
    9c34:	60 0d       	add	r22, r0
    9c36:	71 1d       	adc	r23, r1
    9c38:	11 24       	eor	r1, r1
    9c3a:	c0 54       	subi	r28, 0x40	; 64
    9c3c:	df 4f       	sbci	r29, 0xFF	; 255
    9c3e:	79 83       	std	Y+1, r23	; 0x01
    9c40:	68 83       	st	Y, r22
    9c42:	c0 5c       	subi	r28, 0xC0	; 192
    9c44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
          loop_t++;
    9c46:	b3 94       	inc	r11
    9c48:	1d cf       	rjmp	.-454    	; 0x9a84 <draw_menu(bool)+0x14a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    9c4a:	c4 53       	subi	r28, 0x34	; 52
    9c4c:	df 4f       	sbci	r29, 0xFF	; 255
    9c4e:	f8 81       	ld	r31, Y
    9c50:	cc 5c       	subi	r28, 0xCC	; 204
    9c52:	d0 40       	sbci	r29, 0x00	; 0
    9c54:	f1 11       	cpse	r31, r1
    9c56:	0c 94 b4 55 	jmp	0xab68	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    9c5a:	91 2c       	mov	r9, r1
    9c5c:	93 01       	movw	r18, r6
    9c5e:	27 54       	subi	r18, 0x47	; 71
    9c60:	3d 4f       	sbci	r19, 0xFD	; 253
    9c62:	cc 52       	subi	r28, 0x2C	; 44
    9c64:	df 4f       	sbci	r29, 0xFF	; 255
    9c66:	39 83       	std	Y+1, r19	; 0x01
    9c68:	28 83       	st	Y, r18
    9c6a:	c4 5d       	subi	r28, 0xD4	; 212
    9c6c:	d0 40       	sbci	r29, 0x00	; 0
    9c6e:	cc 52       	subi	r28, 0x2C	; 44
    9c70:	df 4f       	sbci	r29, 0xFF	; 255
    9c72:	e8 81       	ld	r30, Y
    9c74:	f9 81       	ldd	r31, Y+1	; 0x01
    9c76:	c4 5d       	subi	r28, 0xD4	; 212
    9c78:	d0 40       	sbci	r29, 0x00	; 0
    9c7a:	84 91       	lpm	r24, Z
    9c7c:	98 16       	cp	r9, r24
    9c7e:	08 f0       	brcs	.+2      	; 0x9c82 <draw_menu(bool)+0x16a6>
    9c80:	14 c3       	rjmp	.+1576   	; 0xa2aa <draw_menu(bool)+0x1cce>
    9c82:	f7 e1       	ldi	r31, 0x17	; 23
    9c84:	9f 9e       	mul	r9, r31
    9c86:	20 01       	movw	r4, r0
    9c88:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    9c8a:	f2 01       	movw	r30, r4
    9c8c:	e6 54       	subi	r30, 0x46	; 70
    9c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    9c90:	e6 0d       	add	r30, r6
    9c92:	f7 1d       	adc	r31, r7
    9c94:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
    if (enable_redraw(rdr, redraw_class) == true)
    9c96:	cf 52       	subi	r28, 0x2F	; 47
    9c98:	df 4f       	sbci	r29, 0xFF	; 255
    9c9a:	68 81       	ld	r22, Y
    9c9c:	c1 5d       	subi	r28, 0xD1	; 209
    9c9e:	d0 40       	sbci	r29, 0x00	; 0
    9ca0:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    9ca4:	88 23       	and	r24, r24
    9ca6:	09 f4       	brne	.+2      	; 0x9caa <draw_menu(bool)+0x16ce>
    9ca8:	83 c1       	rjmp	.+774    	; 0x9fb0 <draw_menu(bool)+0x19d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    {
      loop_i = 0;
    9caa:	ce 54       	subi	r28, 0x4E	; 78
    9cac:	df 4f       	sbci	r29, 0xFF	; 255
    9cae:	18 82       	st	Y, r1
    9cb0:	c2 5b       	subi	r28, 0xB2	; 178
    9cb2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    9cb4:	f2 01       	movw	r30, r4
    9cb6:	e8 54       	subi	r30, 0x48	; 72
    9cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    9cba:	e6 0d       	add	r30, r6
    9cbc:	f7 1d       	adc	r31, r7
    9cbe:	25 91       	lpm	r18, Z+
    9cc0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9cc2:	c2 01       	movw	r24, r4
    9cc4:	8d 54       	subi	r24, 0x4D	; 77
    9cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    9cc8:	a3 01       	movw	r20, r6
    9cca:	48 0f       	add	r20, r24
    9ccc:	59 1f       	adc	r21, r25
    9cce:	ca 54       	subi	r28, 0x4A	; 74
    9cd0:	df 4f       	sbci	r29, 0xFF	; 255
    9cd2:	59 83       	std	Y+1, r21	; 0x01
    9cd4:	48 83       	st	Y, r20
    9cd6:	c6 5b       	subi	r28, 0xB6	; 182
    9cd8:	d0 40       	sbci	r29, 0x00	; 0
    9cda:	fa 01       	movw	r30, r20
    9cdc:	84 91       	lpm	r24, Z
    9cde:	cd 54       	subi	r28, 0x4D	; 77
    9ce0:	df 4f       	sbci	r29, 0xFF	; 255
    9ce2:	68 81       	ld	r22, Y
    9ce4:	c3 5b       	subi	r28, 0xB3	; 179
    9ce6:	d0 40       	sbci	r29, 0x00	; 0
    9ce8:	70 e0       	ldi	r23, 0x00	; 0
    9cea:	40 e0       	ldi	r20, 0x00	; 0
    9cec:	90 e0       	ldi	r25, 0x00	; 0
    9cee:	f9 01       	movw	r30, r18
    9cf0:	19 95       	eicall
    9cf2:	cf 54       	subi	r28, 0x4F	; 79
    9cf4:	df 4f       	sbci	r29, 0xFF	; 255
    9cf6:	88 83       	st	Y, r24
    9cf8:	c1 5b       	subi	r28, 0xB1	; 177
    9cfa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    9cfc:	f2 01       	movw	r30, r4
    9cfe:	ec 54       	subi	r30, 0x4C	; 76
    9d00:	fe 4f       	sbci	r31, 0xFE	; 254
    9d02:	e6 0d       	add	r30, r6
    9d04:	f7 1d       	adc	r31, r7
    9d06:	25 91       	lpm	r18, Z+
    9d08:	34 91       	lpm	r19, Z
    9d0a:	ca 52       	subi	r28, 0x2A	; 42
    9d0c:	df 4f       	sbci	r29, 0xFF	; 255
    9d0e:	39 83       	std	Y+1, r19	; 0x01
    9d10:	28 83       	st	Y, r18
    9d12:	c6 5d       	subi	r28, 0xD6	; 214
    9d14:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9d16:	f2 01       	movw	r30, r4
    9d18:	ee 54       	subi	r30, 0x4E	; 78
    9d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    9d1c:	e6 0d       	add	r30, r6
    9d1e:	f7 1d       	adc	r31, r7
    9d20:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
      if (slider_active != MENU_SLIDER_OFF)
    9d22:	4f 3f       	cpi	r20, 0xFF	; 255
    9d24:	b9 f0       	breq	.+46     	; 0x9d54 <draw_menu(bool)+0x1778>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9d26:	f2 01       	movw	r30, r4
    9d28:	e0 55       	subi	r30, 0x50	; 80
    9d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    9d2c:	e6 0d       	add	r30, r6
    9d2e:	f7 1d       	adc	r31, r7
    9d30:	24 91       	lpm	r18, Z
    9d32:	f2 01       	movw	r30, r4
    9d34:	ef 54       	subi	r30, 0x4F	; 79
    9d36:	fe 4f       	sbci	r31, 0xFE	; 254
    9d38:	e6 0d       	add	r30, r6
    9d3a:	f7 1d       	adc	r31, r7
    9d3c:	e4 91       	lpm	r30, Z
    9d3e:	2e 9f       	mul	r18, r30
    9d40:	20 2d       	mov	r18, r0
    9d42:	11 24       	eor	r1, r1
    9d44:	be 01       	movw	r22, r28
    9d46:	6f 54       	subi	r22, 0x4F	; 79
    9d48:	7f 4f       	sbci	r23, 0xFF	; 255
    9d4a:	ce 01       	movw	r24, r28
    9d4c:	8e 54       	subi	r24, 0x4E	; 78
    9d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d50:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9d54:	c2 01       	movw	r24, r4
    9d56:	8c 55       	subi	r24, 0x5C	; 92
    9d58:	9e 4f       	sbci	r25, 0xFE	; 254
    9d5a:	a3 01       	movw	r20, r6
    9d5c:	48 0f       	add	r20, r24
    9d5e:	59 1f       	adc	r21, r25
    9d60:	c4 54       	subi	r28, 0x44	; 68
    9d62:	df 4f       	sbci	r29, 0xFF	; 255
    9d64:	59 83       	std	Y+1, r21	; 0x01
    9d66:	48 83       	st	Y, r20
    9d68:	cc 5b       	subi	r28, 0xBC	; 188
    9d6a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9d6c:	12 01       	movw	r2, r4
    9d6e:	5a e5       	ldi	r21, 0x5A	; 90
    9d70:	25 1a       	sub	r2, r21
    9d72:	5e ef       	ldi	r21, 0xFE	; 254
    9d74:	35 0a       	sbc	r3, r21
    9d76:	26 0c       	add	r2, r6
    9d78:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9d7a:	0b 96       	adiw	r24, 0x0b	; 11
    9d7c:	b3 01       	movw	r22, r6
    9d7e:	68 0f       	add	r22, r24
    9d80:	79 1f       	adc	r23, r25
    9d82:	c2 54       	subi	r28, 0x42	; 66
    9d84:	df 4f       	sbci	r29, 0xFF	; 255
    9d86:	79 83       	std	Y+1, r23	; 0x01
    9d88:	68 83       	st	Y, r22
    9d8a:	ce 5b       	subi	r28, 0xBE	; 190
    9d8c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9d8e:	01 97       	sbiw	r24, 0x01	; 1
    9d90:	f3 01       	movw	r30, r6
    9d92:	e8 0f       	add	r30, r24
    9d94:	f9 1f       	adc	r31, r25
    9d96:	c6 53       	subi	r28, 0x36	; 54
    9d98:	df 4f       	sbci	r29, 0xFF	; 255
    9d9a:	f9 83       	std	Y+1, r31	; 0x01
    9d9c:	e8 83       	st	Y, r30
    9d9e:	ca 5c       	subi	r28, 0xCA	; 202
    9da0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9da2:	01 97       	sbiw	r24, 0x01	; 1
    9da4:	93 01       	movw	r18, r6
    9da6:	28 0f       	add	r18, r24
    9da8:	39 1f       	adc	r19, r25
    9daa:	c3 53       	subi	r28, 0x33	; 51
    9dac:	df 4f       	sbci	r29, 0xFF	; 255
    9dae:	39 83       	std	Y+1, r19	; 0x01
    9db0:	28 83       	st	Y, r18
    9db2:	cd 5c       	subi	r28, 0xCD	; 205
    9db4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9db6:	01 97       	sbiw	r24, 0x01	; 1
    9db8:	a3 01       	movw	r20, r6
    9dba:	48 0f       	add	r20, r24
    9dbc:	59 1f       	adc	r21, r25
    9dbe:	c8 53       	subi	r28, 0x38	; 56
    9dc0:	df 4f       	sbci	r29, 0xFF	; 255
    9dc2:	59 83       	std	Y+1, r21	; 0x01
    9dc4:	48 83       	st	Y, r20
    9dc6:	c8 5c       	subi	r28, 0xC8	; 200
    9dc8:	d0 40       	sbci	r29, 0x00	; 0
    9dca:	02 97       	sbiw	r24, 0x02	; 2
    9dcc:	b3 01       	movw	r22, r6
    9dce:	68 0f       	add	r22, r24
    9dd0:	79 1f       	adc	r23, r25
    9dd2:	c1 53       	subi	r28, 0x31	; 49
    9dd4:	df 4f       	sbci	r29, 0xFF	; 255
    9dd6:	79 83       	std	Y+1, r23	; 0x01
    9dd8:	68 83       	st	Y, r22
    9dda:	cf 5c       	subi	r28, 0xCF	; 207
    9ddc:	d0 40       	sbci	r29, 0x00	; 0
    9dde:	02 97       	sbiw	r24, 0x02	; 2
    9de0:	f3 01       	movw	r30, r6
    9de2:	e8 0f       	add	r30, r24
    9de4:	f9 1f       	adc	r31, r25
    9de6:	ce 52       	subi	r28, 0x2E	; 46
    9de8:	df 4f       	sbci	r29, 0xFF	; 255
    9dea:	f9 83       	std	Y+1, r31	; 0x01
    9dec:	e8 83       	st	Y, r30
    9dee:	c2 5d       	subi	r28, 0xD2	; 210
    9df0:	d0 40       	sbci	r29, 0x00	; 0
    9df2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
      gss = pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    9df4:	ce 54       	subi	r28, 0x4E	; 78
    9df6:	df 4f       	sbci	r29, 0xFF	; 255
    9df8:	88 81       	ld	r24, Y
    9dfa:	c2 5b       	subi	r28, 0xB2	; 178
    9dfc:	d0 40       	sbci	r29, 0x00	; 0
    9dfe:	cf 54       	subi	r28, 0x4F	; 79
    9e00:	df 4f       	sbci	r29, 0xFF	; 255
    9e02:	98 81       	ld	r25, Y
    9e04:	c1 5b       	subi	r28, 0xB1	; 177
    9e06:	d0 40       	sbci	r29, 0x00	; 0
    9e08:	89 17       	cp	r24, r25
    9e0a:	08 f0       	brcs	.+2      	; 0x9e0e <draw_menu(bool)+0x1832>
    9e0c:	d1 c0       	rjmp	.+418    	; 0x9fb0 <draw_menu(bool)+0x19d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9e0e:	c4 54       	subi	r28, 0x44	; 68
    9e10:	df 4f       	sbci	r29, 0xFF	; 255
    9e12:	e8 81       	ld	r30, Y
    9e14:	f9 81       	ldd	r31, Y+1	; 0x01
    9e16:	cc 5b       	subi	r28, 0xBC	; 188
    9e18:	d0 40       	sbci	r29, 0x00	; 0
    9e1a:	45 91       	lpm	r20, Z+
    9e1c:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9e1e:	f1 01       	movw	r30, r2
    9e20:	25 91       	lpm	r18, Z+
    9e22:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9e24:	c2 54       	subi	r28, 0x42	; 66
    9e26:	df 4f       	sbci	r29, 0xFF	; 255
    9e28:	e8 81       	ld	r30, Y
    9e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    9e2c:	ce 5b       	subi	r28, 0xBE	; 190
    9e2e:	d0 40       	sbci	r29, 0x00	; 0
    9e30:	94 91       	lpm	r25, Z
    9e32:	99 23       	and	r25, r25
    9e34:	09 f4       	brne	.+2      	; 0x9e38 <draw_menu(bool)+0x185c>
    9e36:	7b c0       	rjmp	.+246    	; 0x9f2e <draw_menu(bool)+0x1952>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9e38:	c6 54       	subi	r28, 0x46	; 70
    9e3a:	df 4f       	sbci	r29, 0xFF	; 255
    9e3c:	68 81       	ld	r22, Y
    9e3e:	79 81       	ldd	r23, Y+1	; 0x01
    9e40:	ca 5b       	subi	r28, 0xBA	; 186
    9e42:	d0 40       	sbci	r29, 0x00	; 0
    9e44:	62 0f       	add	r22, r18
    9e46:	73 1f       	adc	r23, r19
    9e48:	ce 53       	subi	r28, 0x3E	; 62
    9e4a:	df 4f       	sbci	r29, 0xFF	; 255
    9e4c:	79 83       	std	Y+1, r23	; 0x01
    9e4e:	68 83       	st	Y, r22
    9e50:	c2 5c       	subi	r28, 0xC2	; 194
    9e52:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2366
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    9e54:	c2 54       	subi	r28, 0x42	; 66
    9e56:	df 4f       	sbci	r29, 0xFF	; 255
    9e58:	e8 81       	ld	r30, Y
    9e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    9e5c:	ce 5b       	subi	r28, 0xBE	; 190
    9e5e:	d0 40       	sbci	r29, 0x00	; 0
    9e60:	94 91       	lpm	r25, Z
    9e62:	91 30       	cpi	r25, 0x01	; 1
    9e64:	09 f4       	brne	.+2      	; 0x9e68 <draw_menu(bool)+0x188c>
    9e66:	81 c0       	rjmp	.+258    	; 0x9f6a <draw_menu(bool)+0x198e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9e68:	c8 54       	subi	r28, 0x48	; 72
    9e6a:	df 4f       	sbci	r29, 0xFF	; 255
    9e6c:	28 81       	ld	r18, Y
    9e6e:	39 81       	ldd	r19, Y+1	; 0x01
    9e70:	c8 5b       	subi	r28, 0xB8	; 184
    9e72:	d0 40       	sbci	r29, 0x00	; 0
    9e74:	24 0f       	add	r18, r20
    9e76:	35 1f       	adc	r19, r21
    9e78:	c0 54       	subi	r28, 0x40	; 64
    9e7a:	df 4f       	sbci	r29, 0xFF	; 255
    9e7c:	39 83       	std	Y+1, r19	; 0x01
    9e7e:	28 83       	st	Y, r18
    9e80:	c0 5c       	subi	r28, 0xC0	; 192
    9e82:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
    9e84:	ca 54       	subi	r28, 0x4A	; 74
    9e86:	df 4f       	sbci	r29, 0xFF	; 255
    9e88:	e8 81       	ld	r30, Y
    9e8a:	f9 81       	ldd	r31, Y+1	; 0x01
    9e8c:	c6 5b       	subi	r28, 0xB6	; 182
    9e8e:	d0 40       	sbci	r29, 0x00	; 0
    9e90:	44 91       	lpm	r20, Z
    9e92:	8e 01       	movw	r16, r28
    9e94:	0f 57       	subi	r16, 0x7F	; 127
    9e96:	1f 4f       	sbci	r17, 0xFF	; 255
    9e98:	9e 01       	movw	r18, r28
    9e9a:	2f 5f       	subi	r18, 0xFF	; 255
    9e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    9e9e:	cd 54       	subi	r28, 0x4D	; 77
    9ea0:	df 4f       	sbci	r29, 0xFF	; 255
    9ea2:	68 81       	ld	r22, Y
    9ea4:	c3 5b       	subi	r28, 0xB3	; 179
    9ea6:	d0 40       	sbci	r29, 0x00	; 0
    9ea8:	ca 52       	subi	r28, 0x2A	; 42
    9eaa:	df 4f       	sbci	r29, 0xFF	; 255
    9eac:	e8 81       	ld	r30, Y
    9eae:	f9 81       	ldd	r31, Y+1	; 0x01
    9eb0:	c6 5d       	subi	r28, 0xD6	; 214
    9eb2:	d0 40       	sbci	r29, 0x00	; 0
    9eb4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9eb6:	c8 53       	subi	r28, 0x38	; 56
    9eb8:	df 4f       	sbci	r29, 0xFF	; 255
    9eba:	e8 81       	ld	r30, Y
    9ebc:	f9 81       	ldd	r31, Y+1	; 0x01
    9ebe:	c8 5c       	subi	r28, 0xC8	; 200
    9ec0:	d0 40       	sbci	r29, 0x00	; 0
    9ec2:	e4 90       	lpm	r14, Z
    9ec4:	04 91       	lpm	r16, Z
    9ec6:	c1 53       	subi	r28, 0x31	; 49
    9ec8:	df 4f       	sbci	r29, 0xFF	; 255
    9eca:	e8 81       	ld	r30, Y
    9ecc:	f9 81       	ldd	r31, Y+1	; 0x01
    9ece:	cf 5c       	subi	r28, 0xCF	; 207
    9ed0:	d0 40       	sbci	r29, 0x00	; 0
    9ed2:	25 91       	lpm	r18, Z+
    9ed4:	34 91       	lpm	r19, Z
    9ed6:	ce 52       	subi	r28, 0x2E	; 46
    9ed8:	df 4f       	sbci	r29, 0xFF	; 255
    9eda:	e8 81       	ld	r30, Y
    9edc:	f9 81       	ldd	r31, Y+1	; 0x01
    9ede:	c2 5d       	subi	r28, 0xD2	; 210
    9ee0:	d0 40       	sbci	r29, 0x00	; 0
    9ee2:	45 91       	lpm	r20, Z+
    9ee4:	54 91       	lpm	r21, Z
    9ee6:	88 24       	eor	r8, r8
    9ee8:	83 94       	inc	r8
    9eea:	be 01       	movw	r22, r28
    9eec:	6f 57       	subi	r22, 0x7F	; 127
    9eee:	7f 4f       	sbci	r23, 0xFF	; 255
    9ef0:	5b 01       	movw	r10, r22
    9ef2:	ce 01       	movw	r24, r28
    9ef4:	01 96       	adiw	r24, 0x01	; 1
    9ef6:	6c 01       	movw	r12, r24
    9ef8:	ce 53       	subi	r28, 0x3E	; 62
    9efa:	df 4f       	sbci	r29, 0xFF	; 255
    9efc:	68 81       	ld	r22, Y
    9efe:	79 81       	ldd	r23, Y+1	; 0x01
    9f00:	c2 5c       	subi	r28, 0xC2	; 194
    9f02:	d0 40       	sbci	r29, 0x00	; 0
    9f04:	c0 54       	subi	r28, 0x40	; 64
    9f06:	df 4f       	sbci	r29, 0xFF	; 255
    9f08:	88 81       	ld	r24, Y
    9f0a:	99 81       	ldd	r25, Y+1	; 0x01
    9f0c:	c0 5c       	subi	r28, 0xC0	; 192
    9f0e:	d0 40       	sbci	r29, 0x00	; 0
    9f10:	0e 94 4a 33 	call	0x6694	; 0x6694 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
        loop_t++;
    9f14:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
        loop_i++;
    9f16:	ce 54       	subi	r28, 0x4E	; 78
    9f18:	df 4f       	sbci	r29, 0xFF	; 255
    9f1a:	88 81       	ld	r24, Y
    9f1c:	c2 5b       	subi	r28, 0xB2	; 178
    9f1e:	d0 40       	sbci	r29, 0x00	; 0
    9f20:	8f 5f       	subi	r24, 0xFF	; 255
    9f22:	ce 54       	subi	r28, 0x4E	; 78
    9f24:	df 4f       	sbci	r29, 0xFF	; 255
    9f26:	88 83       	st	Y, r24
    9f28:	c2 5b       	subi	r28, 0xB2	; 178
    9f2a:	d0 40       	sbci	r29, 0x00	; 0
    9f2c:	63 cf       	rjmp	.-314    	; 0x9df4 <draw_menu(bool)+0x1818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9f2e:	f1 01       	movw	r30, r2
    9f30:	25 91       	lpm	r18, Z+
    9f32:	34 91       	lpm	r19, Z
    9f34:	c6 53       	subi	r28, 0x36	; 54
    9f36:	df 4f       	sbci	r29, 0xFF	; 255
    9f38:	e8 81       	ld	r30, Y
    9f3a:	f9 81       	ldd	r31, Y+1	; 0x01
    9f3c:	ca 5c       	subi	r28, 0xCA	; 202
    9f3e:	d0 40       	sbci	r29, 0x00	; 0
    9f40:	94 91       	lpm	r25, Z
    9f42:	c6 54       	subi	r28, 0x46	; 70
    9f44:	df 4f       	sbci	r29, 0xFF	; 255
    9f46:	68 81       	ld	r22, Y
    9f48:	79 81       	ldd	r23, Y+1	; 0x01
    9f4a:	ca 5b       	subi	r28, 0xBA	; 186
    9f4c:	d0 40       	sbci	r29, 0x00	; 0
    9f4e:	26 0f       	add	r18, r22
    9f50:	37 1f       	adc	r19, r23
    9f52:	f9 01       	movw	r30, r18
    9f54:	9f 9d       	mul	r25, r15
    9f56:	e0 0d       	add	r30, r0
    9f58:	f1 1d       	adc	r31, r1
    9f5a:	11 24       	eor	r1, r1
    9f5c:	ce 53       	subi	r28, 0x3E	; 62
    9f5e:	df 4f       	sbci	r29, 0xFF	; 255
    9f60:	f9 83       	std	Y+1, r31	; 0x01
    9f62:	e8 83       	st	Y, r30
    9f64:	c2 5c       	subi	r28, 0xC2	; 194
    9f66:	d0 40       	sbci	r29, 0x00	; 0
    9f68:	75 cf       	rjmp	.-278    	; 0x9e54 <draw_menu(bool)+0x1878>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9f6a:	c4 54       	subi	r28, 0x44	; 68
    9f6c:	df 4f       	sbci	r29, 0xFF	; 255
    9f6e:	e8 81       	ld	r30, Y
    9f70:	f9 81       	ldd	r31, Y+1	; 0x01
    9f72:	cc 5b       	subi	r28, 0xBC	; 188
    9f74:	d0 40       	sbci	r29, 0x00	; 0
    9f76:	25 91       	lpm	r18, Z+
    9f78:	34 91       	lpm	r19, Z
    9f7a:	c3 53       	subi	r28, 0x33	; 51
    9f7c:	df 4f       	sbci	r29, 0xFF	; 255
    9f7e:	e8 81       	ld	r30, Y
    9f80:	f9 81       	ldd	r31, Y+1	; 0x01
    9f82:	cd 5c       	subi	r28, 0xCD	; 205
    9f84:	d0 40       	sbci	r29, 0x00	; 0
    9f86:	94 91       	lpm	r25, Z
    9f88:	c8 54       	subi	r28, 0x48	; 72
    9f8a:	df 4f       	sbci	r29, 0xFF	; 255
    9f8c:	48 81       	ld	r20, Y
    9f8e:	59 81       	ldd	r21, Y+1	; 0x01
    9f90:	c8 5b       	subi	r28, 0xB8	; 184
    9f92:	d0 40       	sbci	r29, 0x00	; 0
    9f94:	24 0f       	add	r18, r20
    9f96:	35 1f       	adc	r19, r21
    9f98:	b9 01       	movw	r22, r18
    9f9a:	9f 9d       	mul	r25, r15
    9f9c:	60 0d       	add	r22, r0
    9f9e:	71 1d       	adc	r23, r1
    9fa0:	11 24       	eor	r1, r1
    9fa2:	c0 54       	subi	r28, 0x40	; 64
    9fa4:	df 4f       	sbci	r29, 0xFF	; 255
    9fa6:	79 83       	std	Y+1, r23	; 0x01
    9fa8:	68 83       	st	Y, r22
    9faa:	c0 5c       	subi	r28, 0xC0	; 192
    9fac:	d0 40       	sbci	r29, 0x00	; 0
    9fae:	6a cf       	rjmp	.-300    	; 0x9e84 <draw_menu(bool)+0x18a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    9fb0:	cc 53       	subi	r28, 0x3C	; 60
    9fb2:	df 4f       	sbci	r29, 0xFF	; 255
    9fb4:	e8 81       	ld	r30, Y
    9fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    9fb8:	c4 5c       	subi	r28, 0xC4	; 196
    9fba:	d0 40       	sbci	r29, 0x00	; 0
    9fbc:	ef 2b       	or	r30, r31
    9fbe:	09 f4       	brne	.+2      	; 0x9fc2 <draw_menu(bool)+0x19e6>
    9fc0:	51 c1       	rjmp	.+674    	; 0xa264 <draw_menu(bool)+0x1c88>
    9fc2:	ca 53       	subi	r28, 0x3A	; 58
    9fc4:	df 4f       	sbci	r29, 0xFF	; 255
    9fc6:	28 81       	ld	r18, Y
    9fc8:	39 81       	ldd	r19, Y+1	; 0x01
    9fca:	c6 5c       	subi	r28, 0xC6	; 198
    9fcc:	d0 40       	sbci	r29, 0x00	; 0
    9fce:	23 2b       	or	r18, r19
    9fd0:	09 f4       	brne	.+2      	; 0x9fd4 <draw_menu(bool)+0x19f8>
    9fd2:	48 c1       	rjmp	.+656    	; 0xa264 <draw_menu(bool)+0x1c88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
    {
      loop_i = 0;
    9fd4:	ce 54       	subi	r28, 0x4E	; 78
    9fd6:	df 4f       	sbci	r29, 0xFF	; 255
    9fd8:	18 82       	st	Y, r1
    9fda:	c2 5b       	subi	r28, 0xB2	; 178
    9fdc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    9fde:	f2 01       	movw	r30, r4
    9fe0:	e8 54       	subi	r30, 0x48	; 72
    9fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    9fe4:	e6 0d       	add	r30, r6
    9fe6:	f7 1d       	adc	r31, r7
    9fe8:	25 91       	lpm	r18, Z+
    9fea:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9fec:	c2 01       	movw	r24, r4
    9fee:	8d 54       	subi	r24, 0x4D	; 77
    9ff0:	9e 4f       	sbci	r25, 0xFE	; 254
    9ff2:	a3 01       	movw	r20, r6
    9ff4:	48 0f       	add	r20, r24
    9ff6:	59 1f       	adc	r21, r25
    9ff8:	ca 54       	subi	r28, 0x4A	; 74
    9ffa:	df 4f       	sbci	r29, 0xFF	; 255
    9ffc:	59 83       	std	Y+1, r21	; 0x01
    9ffe:	48 83       	st	Y, r20
    a000:	c6 5b       	subi	r28, 0xB6	; 182
    a002:	d0 40       	sbci	r29, 0x00	; 0
    a004:	fa 01       	movw	r30, r20
    a006:	84 91       	lpm	r24, Z
    a008:	cd 54       	subi	r28, 0x4D	; 77
    a00a:	df 4f       	sbci	r29, 0xFF	; 255
    a00c:	68 81       	ld	r22, Y
    a00e:	c3 5b       	subi	r28, 0xB3	; 179
    a010:	d0 40       	sbci	r29, 0x00	; 0
    a012:	70 e0       	ldi	r23, 0x00	; 0
    a014:	40 e0       	ldi	r20, 0x00	; 0
    a016:	90 e0       	ldi	r25, 0x00	; 0
    a018:	f9 01       	movw	r30, r18
    a01a:	19 95       	eicall
    a01c:	cf 54       	subi	r28, 0x4F	; 79
    a01e:	df 4f       	sbci	r29, 0xFF	; 255
    a020:	88 83       	st	Y, r24
    a022:	c1 5b       	subi	r28, 0xB1	; 177
    a024:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    a026:	f2 01       	movw	r30, r4
    a028:	ee 54       	subi	r30, 0x4E	; 78
    a02a:	fe 4f       	sbci	r31, 0xFE	; 254
    a02c:	e6 0d       	add	r30, r6
    a02e:	f7 1d       	adc	r31, r7
    a030:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
      if (slider_active != MENU_SLIDER_OFF)
    a032:	4f 3f       	cpi	r20, 0xFF	; 255
    a034:	b9 f0       	breq	.+46     	; 0xa064 <draw_menu(bool)+0x1a88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    a036:	f2 01       	movw	r30, r4
    a038:	e0 55       	subi	r30, 0x50	; 80
    a03a:	fe 4f       	sbci	r31, 0xFE	; 254
    a03c:	e6 0d       	add	r30, r6
    a03e:	f7 1d       	adc	r31, r7
    a040:	24 91       	lpm	r18, Z
    a042:	f2 01       	movw	r30, r4
    a044:	ef 54       	subi	r30, 0x4F	; 79
    a046:	fe 4f       	sbci	r31, 0xFE	; 254
    a048:	e6 0d       	add	r30, r6
    a04a:	f7 1d       	adc	r31, r7
    a04c:	e4 91       	lpm	r30, Z
    a04e:	2e 9f       	mul	r18, r30
    a050:	20 2d       	mov	r18, r0
    a052:	11 24       	eor	r1, r1
    a054:	be 01       	movw	r22, r28
    a056:	6f 54       	subi	r22, 0x4F	; 79
    a058:	7f 4f       	sbci	r23, 0xFF	; 255
    a05a:	ce 01       	movw	r24, r28
    a05c:	8e 54       	subi	r24, 0x4E	; 78
    a05e:	9f 4f       	sbci	r25, 0xFF	; 255
    a060:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    a064:	ce 54       	subi	r28, 0x4E	; 78
    a066:	df 4f       	sbci	r29, 0xFF	; 255
    a068:	a8 80       	ld	r10, Y
    a06a:	c2 5b       	subi	r28, 0xB2	; 178
    a06c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
      while (loop_i < loop_cnt)
    a06e:	cf 54       	subi	r28, 0x4F	; 79
    a070:	df 4f       	sbci	r29, 0xFF	; 255
    a072:	88 80       	ld	r8, Y
    a074:	c1 5b       	subi	r28, 0xB1	; 177
    a076:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a078:	c2 01       	movw	r24, r4
    a07a:	8c 55       	subi	r24, 0x5C	; 92
    a07c:	9e 4f       	sbci	r25, 0xFE	; 254
    a07e:	93 01       	movw	r18, r6
    a080:	28 0f       	add	r18, r24
    a082:	39 1f       	adc	r19, r25
    a084:	c4 54       	subi	r28, 0x44	; 68
    a086:	df 4f       	sbci	r29, 0xFF	; 255
    a088:	39 83       	std	Y+1, r19	; 0x01
    a08a:	28 83       	st	Y, r18
    a08c:	cc 5b       	subi	r28, 0xBC	; 188
    a08e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a090:	12 01       	movw	r2, r4
    a092:	3a e5       	ldi	r19, 0x5A	; 90
    a094:	23 1a       	sub	r2, r19
    a096:	3e ef       	ldi	r19, 0xFE	; 254
    a098:	33 0a       	sbc	r3, r19
    a09a:	26 0c       	add	r2, r6
    a09c:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    a09e:	0b 96       	adiw	r24, 0x0b	; 11
    a0a0:	a3 01       	movw	r20, r6
    a0a2:	48 0f       	add	r20, r24
    a0a4:	59 1f       	adc	r21, r25
    a0a6:	c2 54       	subi	r28, 0x42	; 66
    a0a8:	df 4f       	sbci	r29, 0xFF	; 255
    a0aa:	59 83       	std	Y+1, r21	; 0x01
    a0ac:	48 83       	st	Y, r20
    a0ae:	ce 5b       	subi	r28, 0xBE	; 190
    a0b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    a0b2:	01 97       	sbiw	r24, 0x01	; 1
    a0b4:	b3 01       	movw	r22, r6
    a0b6:	68 0f       	add	r22, r24
    a0b8:	79 1f       	adc	r23, r25
    a0ba:	c8 53       	subi	r28, 0x38	; 56
    a0bc:	df 4f       	sbci	r29, 0xFF	; 255
    a0be:	79 83       	std	Y+1, r23	; 0x01
    a0c0:	68 83       	st	Y, r22
    a0c2:	c8 5c       	subi	r28, 0xC8	; 200
    a0c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    a0c6:	01 97       	sbiw	r24, 0x01	; 1
    a0c8:	f3 01       	movw	r30, r6
    a0ca:	e8 0f       	add	r30, r24
    a0cc:	f9 1f       	adc	r31, r25
    a0ce:	c6 53       	subi	r28, 0x36	; 54
    a0d0:	df 4f       	sbci	r29, 0xFF	; 255
    a0d2:	f9 83       	std	Y+1, r31	; 0x01
    a0d4:	e8 83       	st	Y, r30
    a0d6:	ca 5c       	subi	r28, 0xCA	; 202
    a0d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    a0da:	03 97       	sbiw	r24, 0x03	; 3
    a0dc:	93 01       	movw	r18, r6
    a0de:	28 0f       	add	r18, r24
    a0e0:	39 1f       	adc	r19, r25
    a0e2:	c3 53       	subi	r28, 0x33	; 51
    a0e4:	df 4f       	sbci	r29, 0xFF	; 255
    a0e6:	39 83       	std	Y+1, r19	; 0x01
    a0e8:	28 83       	st	Y, r18
    a0ea:	cd 5c       	subi	r28, 0xCD	; 205
    a0ec:	d0 40       	sbci	r29, 0x00	; 0
    a0ee:	02 97       	sbiw	r24, 0x02	; 2
    a0f0:	a3 01       	movw	r20, r6
    a0f2:	48 0f       	add	r20, r24
    a0f4:	59 1f       	adc	r21, r25
    a0f6:	c1 53       	subi	r28, 0x31	; 49
    a0f8:	df 4f       	sbci	r29, 0xFF	; 255
    a0fa:	59 83       	std	Y+1, r21	; 0x01
    a0fc:	48 83       	st	Y, r20
    a0fe:	cf 5c       	subi	r28, 0xCF	; 207
    a100:	d0 40       	sbci	r29, 0x00	; 0
    a102:	d1 2c       	mov	r13, r1
    a104:	c1 2c       	mov	r12, r1
    a106:	ba 2c       	mov	r11, r10
    a108:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    a10a:	b8 14       	cp	r11, r8
    a10c:	08 f0       	brcs	.+2      	; 0xa110 <draw_menu(bool)+0x1b34>
    a10e:	aa c0       	rjmp	.+340    	; 0xa264 <draw_menu(bool)+0x1c88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a110:	c4 54       	subi	r28, 0x44	; 68
    a112:	df 4f       	sbci	r29, 0xFF	; 255
    a114:	e8 81       	ld	r30, Y
    a116:	f9 81       	ldd	r31, Y+1	; 0x01
    a118:	cc 5b       	subi	r28, 0xBC	; 188
    a11a:	d0 40       	sbci	r29, 0x00	; 0
    a11c:	25 91       	lpm	r18, Z+
    a11e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a120:	f1 01       	movw	r30, r2
    a122:	85 91       	lpm	r24, Z+
    a124:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    a126:	c2 54       	subi	r28, 0x42	; 66
    a128:	df 4f       	sbci	r29, 0xFF	; 255
    a12a:	e8 81       	ld	r30, Y
    a12c:	f9 81       	ldd	r31, Y+1	; 0x01
    a12e:	ce 5b       	subi	r28, 0xBE	; 190
    a130:	d0 40       	sbci	r29, 0x00	; 0
    a132:	44 91       	lpm	r20, Z
    a134:	44 23       	and	r20, r20
    a136:	09 f4       	brne	.+2      	; 0xa13a <draw_menu(bool)+0x1b5e>
    a138:	97 c0       	rjmp	.+302    	; 0xa268 <draw_menu(bool)+0x1c8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a13a:	c6 54       	subi	r28, 0x46	; 70
    a13c:	df 4f       	sbci	r29, 0xFF	; 255
    a13e:	48 81       	ld	r20, Y
    a140:	59 81       	ldd	r21, Y+1	; 0x01
    a142:	ca 5b       	subi	r28, 0xBA	; 186
    a144:	d0 40       	sbci	r29, 0x00	; 0
    a146:	48 0f       	add	r20, r24
    a148:	59 1f       	adc	r21, r25
    a14a:	ce 53       	subi	r28, 0x3E	; 62
    a14c:	df 4f       	sbci	r29, 0xFF	; 255
    a14e:	59 83       	std	Y+1, r21	; 0x01
    a150:	48 83       	st	Y, r20
    a152:	c2 5c       	subi	r28, 0xC2	; 194
    a154:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    a156:	c2 54       	subi	r28, 0x42	; 66
    a158:	df 4f       	sbci	r29, 0xFF	; 255
    a15a:	e8 81       	ld	r30, Y
    a15c:	f9 81       	ldd	r31, Y+1	; 0x01
    a15e:	ce 5b       	subi	r28, 0xBE	; 190
    a160:	d0 40       	sbci	r29, 0x00	; 0
    a162:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a164:	c8 54       	subi	r28, 0x48	; 72
    a166:	df 4f       	sbci	r29, 0xFF	; 255
    a168:	48 81       	ld	r20, Y
    a16a:	59 81       	ldd	r21, Y+1	; 0x01
    a16c:	c8 5b       	subi	r28, 0xB8	; 184
    a16e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    a170:	81 30       	cpi	r24, 0x01	; 1
    a172:	e9 f4       	brne	.+58     	; 0xa1ae <draw_menu(bool)+0x1bd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    a174:	c4 54       	subi	r28, 0x44	; 68
    a176:	df 4f       	sbci	r29, 0xFF	; 255
    a178:	e8 81       	ld	r30, Y
    a17a:	f9 81       	ldd	r31, Y+1	; 0x01
    a17c:	cc 5b       	subi	r28, 0xBC	; 188
    a17e:	d0 40       	sbci	r29, 0x00	; 0
    a180:	85 91       	lpm	r24, Z+
    a182:	94 91       	lpm	r25, Z
    a184:	c6 53       	subi	r28, 0x36	; 54
    a186:	df 4f       	sbci	r29, 0xFF	; 255
    a188:	e8 81       	ld	r30, Y
    a18a:	f9 81       	ldd	r31, Y+1	; 0x01
    a18c:	ca 5c       	subi	r28, 0xCA	; 202
    a18e:	d0 40       	sbci	r29, 0x00	; 0
    a190:	44 91       	lpm	r20, Z
    a192:	c8 54       	subi	r28, 0x48	; 72
    a194:	df 4f       	sbci	r29, 0xFF	; 255
    a196:	28 81       	ld	r18, Y
    a198:	39 81       	ldd	r19, Y+1	; 0x01
    a19a:	c8 5b       	subi	r28, 0xB8	; 184
    a19c:	d0 40       	sbci	r29, 0x00	; 0
    a19e:	82 0f       	add	r24, r18
    a1a0:	93 1f       	adc	r25, r19
    a1a2:	4c 9d       	mul	r20, r12
    a1a4:	90 01       	movw	r18, r0
    a1a6:	4d 9d       	mul	r20, r13
    a1a8:	30 0d       	add	r19, r0
    a1aa:	11 24       	eor	r1, r1
    a1ac:	ac 01       	movw	r20, r24
    a1ae:	42 0f       	add	r20, r18
    a1b0:	53 1f       	adc	r21, r19
    a1b2:	c0 54       	subi	r28, 0x40	; 64
    a1b4:	df 4f       	sbci	r29, 0xFF	; 255
    a1b6:	59 83       	std	Y+1, r21	; 0x01
    a1b8:	48 83       	st	Y, r20
    a1ba:	c0 5c       	subi	r28, 0xC0	; 192
    a1bc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    a1be:	c3 53       	subi	r28, 0x33	; 51
    a1c0:	df 4f       	sbci	r29, 0xFF	; 255
    a1c2:	e8 81       	ld	r30, Y
    a1c4:	f9 81       	ldd	r31, Y+1	; 0x01
    a1c6:	cd 5c       	subi	r28, 0xCD	; 205
    a1c8:	d0 40       	sbci	r29, 0x00	; 0
    a1ca:	25 91       	lpm	r18, Z+
    a1cc:	34 91       	lpm	r19, Z
    a1ce:	c1 53       	subi	r28, 0x31	; 49
    a1d0:	df 4f       	sbci	r29, 0xFF	; 255
    a1d2:	e8 81       	ld	r30, Y
    a1d4:	f9 81       	ldd	r31, Y+1	; 0x01
    a1d6:	cf 5c       	subi	r28, 0xCF	; 207
    a1d8:	d0 40       	sbci	r29, 0x00	; 0
    a1da:	45 91       	lpm	r20, Z+
    a1dc:	54 91       	lpm	r21, Z
    a1de:	ca 53       	subi	r28, 0x3A	; 58
    a1e0:	df 4f       	sbci	r29, 0xFF	; 255
    a1e2:	e8 80       	ld	r14, Y
    a1e4:	f9 80       	ldd	r15, Y+1	; 0x01
    a1e6:	c6 5c       	subi	r28, 0xC6	; 198
    a1e8:	d0 40       	sbci	r29, 0x00	; 0
    a1ea:	cc 53       	subi	r28, 0x3C	; 60
    a1ec:	df 4f       	sbci	r29, 0xFF	; 255
    a1ee:	08 81       	ld	r16, Y
    a1f0:	19 81       	ldd	r17, Y+1	; 0x01
    a1f2:	c4 5c       	subi	r28, 0xC4	; 196
    a1f4:	d0 40       	sbci	r29, 0x00	; 0
    a1f6:	ce 53       	subi	r28, 0x3E	; 62
    a1f8:	df 4f       	sbci	r29, 0xFF	; 255
    a1fa:	68 81       	ld	r22, Y
    a1fc:	79 81       	ldd	r23, Y+1	; 0x01
    a1fe:	c2 5c       	subi	r28, 0xC2	; 194
    a200:	d0 40       	sbci	r29, 0x00	; 0
    a202:	c0 54       	subi	r28, 0x40	; 64
    a204:	df 4f       	sbci	r29, 0xFF	; 255
    a206:	88 81       	ld	r24, Y
    a208:	99 81       	ldd	r25, Y+1	; 0x01
    a20a:	c0 5c       	subi	r28, 0xC0	; 192
    a20c:	d0 40       	sbci	r29, 0x00	; 0
    a20e:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a212:	18 2f       	mov	r17, r24
    a214:	5f ef       	ldi	r21, 0xFF	; 255
    a216:	c5 1a       	sub	r12, r21
    a218:	d5 0a       	sbc	r13, r21
    a21a:	88 23       	and	r24, r24
    a21c:	09 f4       	brne	.+2      	; 0xa220 <draw_menu(bool)+0x1c44>
    a21e:	73 cf       	rjmp	.-282    	; 0xa106 <draw_menu(bool)+0x1b2a>
    a220:	ce 54       	subi	r28, 0x4E	; 78
    a222:	df 4f       	sbci	r29, 0xFF	; 255
    a224:	b8 82       	st	Y, r11
    a226:	c2 5b       	subi	r28, 0xB2	; 178
    a228:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2394
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    a22a:	f2 01       	movw	r30, r4
    a22c:	ea 54       	subi	r30, 0x4A	; 74
    a22e:	fe 4f       	sbci	r31, 0xFE	; 254
    a230:	e6 0d       	add	r30, r6
    a232:	f7 1d       	adc	r31, r7
    a234:	25 91       	lpm	r18, Z+
    a236:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    a238:	ca 54       	subi	r28, 0x4A	; 74
    a23a:	df 4f       	sbci	r29, 0xFF	; 255
    a23c:	e8 81       	ld	r30, Y
    a23e:	f9 81       	ldd	r31, Y+1	; 0x01
    a240:	c6 5b       	subi	r28, 0xB6	; 182
    a242:	d0 40       	sbci	r29, 0x00	; 0
    a244:	84 91       	lpm	r24, Z
    a246:	cd 54       	subi	r28, 0x4D	; 77
    a248:	df 4f       	sbci	r29, 0xFF	; 255
    a24a:	68 81       	ld	r22, Y
    a24c:	c3 5b       	subi	r28, 0xB3	; 179
    a24e:	d0 40       	sbci	r29, 0x00	; 0
    a250:	70 e0       	ldi	r23, 0x00	; 0
    a252:	4b 2d       	mov	r20, r11
    a254:	90 e0       	ldi	r25, 0x00	; 0
    a256:	f9 01       	movw	r30, r18
    a258:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
          ret = true;
    a25a:	c4 53       	subi	r28, 0x34	; 52
    a25c:	df 4f       	sbci	r29, 0xFF	; 255
    a25e:	18 83       	st	Y, r17
    a260:	cc 5c       	subi	r28, 0xCC	; 204
    a262:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    a264:	93 94       	inc	r9
    a266:	03 cd       	rjmp	.-1530   	; 0x9c6e <draw_menu(bool)+0x1692>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    a268:	f1 01       	movw	r30, r2
    a26a:	85 91       	lpm	r24, Z+
    a26c:	94 91       	lpm	r25, Z
    a26e:	c8 53       	subi	r28, 0x38	; 56
    a270:	df 4f       	sbci	r29, 0xFF	; 255
    a272:	e8 81       	ld	r30, Y
    a274:	f9 81       	ldd	r31, Y+1	; 0x01
    a276:	c8 5c       	subi	r28, 0xC8	; 200
    a278:	d0 40       	sbci	r29, 0x00	; 0
    a27a:	64 91       	lpm	r22, Z
    a27c:	c6 54       	subi	r28, 0x46	; 70
    a27e:	df 4f       	sbci	r29, 0xFF	; 255
    a280:	48 81       	ld	r20, Y
    a282:	59 81       	ldd	r21, Y+1	; 0x01
    a284:	ca 5b       	subi	r28, 0xBA	; 186
    a286:	d0 40       	sbci	r29, 0x00	; 0
    a288:	84 0f       	add	r24, r20
    a28a:	95 1f       	adc	r25, r21
    a28c:	6c 9d       	mul	r22, r12
    a28e:	a0 01       	movw	r20, r0
    a290:	6d 9d       	mul	r22, r13
    a292:	50 0d       	add	r21, r0
    a294:	11 24       	eor	r1, r1
    a296:	bc 01       	movw	r22, r24
    a298:	64 0f       	add	r22, r20
    a29a:	75 1f       	adc	r23, r21
    a29c:	ce 53       	subi	r28, 0x3E	; 62
    a29e:	df 4f       	sbci	r29, 0xFF	; 255
    a2a0:	79 83       	std	Y+1, r23	; 0x01
    a2a2:	68 83       	st	Y, r22
    a2a4:	c2 5c       	subi	r28, 0xC2	; 194
    a2a6:	d0 40       	sbci	r29, 0x00	; 0
    a2a8:	56 cf       	rjmp	.-340    	; 0xa156 <draw_menu(bool)+0x1b7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    a2aa:	c4 53       	subi	r28, 0x34	; 52
    a2ac:	df 4f       	sbci	r29, 0xFF	; 255
    a2ae:	f8 81       	ld	r31, Y
    a2b0:	cc 5c       	subi	r28, 0xCC	; 204
    a2b2:	d0 40       	sbci	r29, 0x00	; 0
    a2b4:	f1 11       	cpse	r31, r1
    a2b6:	58 c4       	rjmp	.+2224   	; 0xab68 <draw_menu(bool)+0x258c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    a2b8:	ca 54       	subi	r28, 0x4A	; 74
    a2ba:	df 4f       	sbci	r29, 0xFF	; 255
    a2bc:	18 82       	st	Y, r1
    a2be:	c6 5b       	subi	r28, 0xB6	; 182
    a2c0:	d0 40       	sbci	r29, 0x00	; 0
    a2c2:	93 01       	movw	r18, r6
    a2c4:	24 54       	subi	r18, 0x44	; 68
    a2c6:	3d 4f       	sbci	r19, 0xFD	; 253
    a2c8:	c0 52       	subi	r28, 0x20	; 32
    a2ca:	df 4f       	sbci	r29, 0xFF	; 255
    a2cc:	39 83       	std	Y+1, r19	; 0x01
    a2ce:	28 83       	st	Y, r18
    a2d0:	c0 5e       	subi	r28, 0xE0	; 224
    a2d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    a2d4:	ae 01       	movw	r20, r28
    a2d6:	4f 57       	subi	r20, 0x7F	; 127
    a2d8:	5f 4f       	sbci	r21, 0xFF	; 255
    a2da:	cc 54       	subi	r28, 0x4C	; 76
    a2dc:	df 4f       	sbci	r29, 0xFF	; 255
    a2de:	59 83       	std	Y+1, r21	; 0x01
    a2e0:	48 83       	st	Y, r20
    a2e2:	c4 5b       	subi	r28, 0xB4	; 180
    a2e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    a2e6:	c0 52       	subi	r28, 0x20	; 32
    a2e8:	df 4f       	sbci	r29, 0xFF	; 255
    a2ea:	e8 81       	ld	r30, Y
    a2ec:	f9 81       	ldd	r31, Y+1	; 0x01
    a2ee:	c0 5e       	subi	r28, 0xE0	; 224
    a2f0:	d0 40       	sbci	r29, 0x00	; 0
    a2f2:	84 91       	lpm	r24, Z
    a2f4:	ca 54       	subi	r28, 0x4A	; 74
    a2f6:	df 4f       	sbci	r29, 0xFF	; 255
    a2f8:	f8 81       	ld	r31, Y
    a2fa:	c6 5b       	subi	r28, 0xB6	; 182
    a2fc:	d0 40       	sbci	r29, 0x00	; 0
    a2fe:	f8 17       	cp	r31, r24
    a300:	08 f0       	brcs	.+2      	; 0xa304 <draw_menu(bool)+0x1d28>
    a302:	38 c4       	rjmp	.+2160   	; 0xab74 <draw_menu(bool)+0x2598>
    a304:	2e e1       	ldi	r18, 0x1E	; 30
    a306:	f2 9f       	mul	r31, r18
    a308:	20 01       	movw	r4, r0
    a30a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    a30c:	f2 01       	movw	r30, r4
    a30e:	ec 54       	subi	r30, 0x4C	; 76
    a310:	fd 4f       	sbci	r31, 0xFD	; 253
    a312:	e6 0d       	add	r30, r6
    a314:	f7 1d       	adc	r31, r7
    a316:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
    if (enable_redraw(rdr, redraw_class) == true)
    a318:	cf 52       	subi	r28, 0x2F	; 47
    a31a:	df 4f       	sbci	r29, 0xFF	; 255
    a31c:	68 81       	ld	r22, Y
    a31e:	c1 5d       	subi	r28, 0xD1	; 209
    a320:	d0 40       	sbci	r29, 0x00	; 0
    a322:	0e 94 8b 2b 	call	0x5716	; 0x5716 <enable_redraw(unsigned char, unsigned char)>
    a326:	88 23       	and	r24, r24
    a328:	09 f4       	brne	.+2      	; 0xa32c <draw_menu(bool)+0x1d50>
    a32a:	4c c2       	rjmp	.+1176   	; 0xa7c4 <draw_menu(bool)+0x21e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
    {
      loop_i = 0;
    a32c:	ce 54       	subi	r28, 0x4E	; 78
    a32e:	df 4f       	sbci	r29, 0xFF	; 255
    a330:	18 82       	st	Y, r1
    a332:	c2 5b       	subi	r28, 0xB2	; 178
    a334:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    a336:	f2 01       	movw	r30, r4
    a338:	e0 55       	subi	r30, 0x50	; 80
    a33a:	fd 4f       	sbci	r31, 0xFD	; 253
    a33c:	e6 0d       	add	r30, r6
    a33e:	f7 1d       	adc	r31, r7
    a340:	25 91       	lpm	r18, Z+
    a342:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a344:	c2 01       	movw	r24, r4
    a346:	85 55       	subi	r24, 0x55	; 85
    a348:	9d 4f       	sbci	r25, 0xFD	; 253
    a34a:	a3 01       	movw	r20, r6
    a34c:	48 0f       	add	r20, r24
    a34e:	59 1f       	adc	r21, r25
    a350:	c4 54       	subi	r28, 0x44	; 68
    a352:	df 4f       	sbci	r29, 0xFF	; 255
    a354:	59 83       	std	Y+1, r21	; 0x01
    a356:	48 83       	st	Y, r20
    a358:	cc 5b       	subi	r28, 0xBC	; 188
    a35a:	d0 40       	sbci	r29, 0x00	; 0
    a35c:	fa 01       	movw	r30, r20
    a35e:	84 91       	lpm	r24, Z
    a360:	cd 54       	subi	r28, 0x4D	; 77
    a362:	df 4f       	sbci	r29, 0xFF	; 255
    a364:	68 81       	ld	r22, Y
    a366:	c3 5b       	subi	r28, 0xB3	; 179
    a368:	d0 40       	sbci	r29, 0x00	; 0
    a36a:	70 e0       	ldi	r23, 0x00	; 0
    a36c:	40 e0       	ldi	r20, 0x00	; 0
    a36e:	90 e0       	ldi	r25, 0x00	; 0
    a370:	f9 01       	movw	r30, r18
    a372:	19 95       	eicall
    a374:	cf 54       	subi	r28, 0x4F	; 79
    a376:	df 4f       	sbci	r29, 0xFF	; 255
    a378:	88 83       	st	Y, r24
    a37a:	c1 5b       	subi	r28, 0xB1	; 177
    a37c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    a37e:	f2 01       	movw	r30, r4
    a380:	e4 55       	subi	r30, 0x54	; 84
    a382:	fd 4f       	sbci	r31, 0xFD	; 253
    a384:	e6 0d       	add	r30, r6
    a386:	f7 1d       	adc	r31, r7
    a388:	25 91       	lpm	r18, Z+
    a38a:	34 91       	lpm	r19, Z
    a38c:	ce 51       	subi	r28, 0x1E	; 30
    a38e:	df 4f       	sbci	r29, 0xFF	; 255
    a390:	39 83       	std	Y+1, r19	; 0x01
    a392:	28 83       	st	Y, r18
    a394:	c2 5e       	subi	r28, 0xE2	; 226
    a396:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    a398:	f2 01       	movw	r30, r4
    a39a:	e6 55       	subi	r30, 0x56	; 86
    a39c:	fd 4f       	sbci	r31, 0xFD	; 253
    a39e:	e6 0d       	add	r30, r6
    a3a0:	f7 1d       	adc	r31, r7
    a3a2:	44 91       	lpm	r20, Z
    a3a4:	c2 01       	movw	r24, r4
    a3a6:	88 55       	subi	r24, 0x58	; 88
    a3a8:	9d 4f       	sbci	r25, 0xFD	; 253
    a3aa:	b3 01       	movw	r22, r6
    a3ac:	68 0f       	add	r22, r24
    a3ae:	79 1f       	adc	r23, r25
    a3b0:	c1 53       	subi	r28, 0x31	; 49
    a3b2:	df 4f       	sbci	r29, 0xFF	; 255
    a3b4:	79 83       	std	Y+1, r23	; 0x01
    a3b6:	68 83       	st	Y, r22
    a3b8:	cf 5c       	subi	r28, 0xCF	; 207
    a3ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
      if (slider_active != MENU_SLIDER_OFF)
    a3bc:	4f 3f       	cpi	r20, 0xFF	; 255
    a3be:	99 f0       	breq	.+38     	; 0xa3e6 <draw_menu(bool)+0x1e0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    a3c0:	fb 01       	movw	r30, r22
    a3c2:	24 91       	lpm	r18, Z
    a3c4:	f2 01       	movw	r30, r4
    a3c6:	e7 55       	subi	r30, 0x57	; 87
    a3c8:	fd 4f       	sbci	r31, 0xFD	; 253
    a3ca:	e6 0d       	add	r30, r6
    a3cc:	f7 1d       	adc	r31, r7
    a3ce:	e4 91       	lpm	r30, Z
    a3d0:	2e 9f       	mul	r18, r30
    a3d2:	20 2d       	mov	r18, r0
    a3d4:	11 24       	eor	r1, r1
    a3d6:	be 01       	movw	r22, r28
    a3d8:	6f 54       	subi	r22, 0x4F	; 79
    a3da:	7f 4f       	sbci	r23, 0xFF	; 255
    a3dc:	ce 01       	movw	r24, r28
    a3de:	8e 54       	subi	r24, 0x4E	; 78
    a3e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a3e2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a3e6:	c2 01       	movw	r24, r4
    a3e8:	89 55       	subi	r24, 0x59	; 89
    a3ea:	9d 4f       	sbci	r25, 0xFD	; 253
    a3ec:	93 01       	movw	r18, r6
    a3ee:	28 0f       	add	r18, r24
    a3f0:	39 1f       	adc	r19, r25
    a3f2:	c2 54       	subi	r28, 0x42	; 66
    a3f4:	df 4f       	sbci	r29, 0xFF	; 255
    a3f6:	39 83       	std	Y+1, r19	; 0x01
    a3f8:	28 83       	st	Y, r18
    a3fa:	ce 5b       	subi	r28, 0xBE	; 190
    a3fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a3fe:	40 97       	sbiw	r24, 0x10	; 16
    a400:	a3 01       	movw	r20, r6
    a402:	48 0f       	add	r20, r24
    a404:	59 1f       	adc	r21, r25
    a406:	c8 53       	subi	r28, 0x38	; 56
    a408:	df 4f       	sbci	r29, 0xFF	; 255
    a40a:	59 83       	std	Y+1, r21	; 0x01
    a40c:	48 83       	st	Y, r20
    a40e:	c8 5c       	subi	r28, 0xC8	; 200
    a410:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a412:	12 01       	movw	r2, r4
    a414:	57 e6       	ldi	r21, 0x67	; 103
    a416:	25 1a       	sub	r2, r21
    a418:	5d ef       	ldi	r21, 0xFD	; 253
    a41a:	35 0a       	sbc	r3, r21
    a41c:	26 0c       	add	r2, r6
    a41e:	37 1c       	adc	r3, r7
    a420:	0f 96       	adiw	r24, 0x0f	; 15
    a422:	b3 01       	movw	r22, r6
    a424:	68 0f       	add	r22, r24
    a426:	79 1f       	adc	r23, r25
    a428:	c6 53       	subi	r28, 0x36	; 54
    a42a:	df 4f       	sbci	r29, 0xFF	; 255
    a42c:	79 83       	std	Y+1, r23	; 0x01
    a42e:	68 83       	st	Y, r22
    a430:	ca 5c       	subi	r28, 0xCA	; 202
    a432:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a434:	01 97       	sbiw	r24, 0x01	; 1
    a436:	f3 01       	movw	r30, r6
    a438:	e8 0f       	add	r30, r24
    a43a:	f9 1f       	adc	r31, r25
    a43c:	c3 53       	subi	r28, 0x33	; 51
    a43e:	df 4f       	sbci	r29, 0xFF	; 255
    a440:	f9 83       	std	Y+1, r31	; 0x01
    a442:	e8 83       	st	Y, r30
    a444:	cd 5c       	subi	r28, 0xCD	; 205
    a446:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    a448:	0d 96       	adiw	r24, 0x0d	; 13
    a44a:	93 01       	movw	r18, r6
    a44c:	28 0f       	add	r18, r24
    a44e:	39 1f       	adc	r19, r25
    a450:	ce 52       	subi	r28, 0x2E	; 46
    a452:	df 4f       	sbci	r29, 0xFF	; 255
    a454:	39 83       	std	Y+1, r19	; 0x01
    a456:	28 83       	st	Y, r18
    a458:	c2 5d       	subi	r28, 0xD2	; 210
    a45a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    a45c:	0f 97       	sbiw	r24, 0x0f	; 15
    a45e:	a3 01       	movw	r20, r6
    a460:	48 0f       	add	r20, r24
    a462:	59 1f       	adc	r21, r25
    a464:	cc 52       	subi	r28, 0x2C	; 44
    a466:	df 4f       	sbci	r29, 0xFF	; 255
    a468:	59 83       	std	Y+1, r21	; 0x01
    a46a:	48 83       	st	Y, r20
    a46c:	c4 5d       	subi	r28, 0xD4	; 212
    a46e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    a470:	02 97       	sbiw	r24, 0x02	; 2
    a472:	b3 01       	movw	r22, r6
    a474:	68 0f       	add	r22, r24
    a476:	79 1f       	adc	r23, r25
    a478:	ca 52       	subi	r28, 0x2A	; 42
    a47a:	df 4f       	sbci	r29, 0xFF	; 255
    a47c:	79 83       	std	Y+1, r23	; 0x01
    a47e:	68 83       	st	Y, r22
    a480:	c6 5d       	subi	r28, 0xD6	; 214
    a482:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    a484:	01 97       	sbiw	r24, 0x01	; 1
    a486:	f3 01       	movw	r30, r6
    a488:	e8 0f       	add	r30, r24
    a48a:	f9 1f       	adc	r31, r25
    a48c:	c8 52       	subi	r28, 0x28	; 40
    a48e:	df 4f       	sbci	r29, 0xFF	; 255
    a490:	f9 83       	std	Y+1, r31	; 0x01
    a492:	e8 83       	st	Y, r30
    a494:	c8 5d       	subi	r28, 0xD8	; 216
    a496:	d0 40       	sbci	r29, 0x00	; 0
    a498:	01 97       	sbiw	r24, 0x01	; 1
    a49a:	93 01       	movw	r18, r6
    a49c:	28 0f       	add	r18, r24
    a49e:	39 1f       	adc	r19, r25
    a4a0:	c6 52       	subi	r28, 0x26	; 38
    a4a2:	df 4f       	sbci	r29, 0xFF	; 255
    a4a4:	39 83       	std	Y+1, r19	; 0x01
    a4a6:	28 83       	st	Y, r18
    a4a8:	ca 5d       	subi	r28, 0xDA	; 218
    a4aa:	d0 40       	sbci	r29, 0x00	; 0
    a4ac:	02 97       	sbiw	r24, 0x02	; 2
    a4ae:	a3 01       	movw	r20, r6
    a4b0:	48 0f       	add	r20, r24
    a4b2:	59 1f       	adc	r21, r25
    a4b4:	c4 52       	subi	r28, 0x24	; 36
    a4b6:	df 4f       	sbci	r29, 0xFF	; 255
    a4b8:	59 83       	std	Y+1, r21	; 0x01
    a4ba:	48 83       	st	Y, r20
    a4bc:	cc 5d       	subi	r28, 0xDC	; 220
    a4be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a4c0:	02 97       	sbiw	r24, 0x02	; 2
    a4c2:	b3 01       	movw	r22, r6
    a4c4:	68 0f       	add	r22, r24
    a4c6:	79 1f       	adc	r23, r25
    a4c8:	c2 52       	subi	r28, 0x22	; 34
    a4ca:	df 4f       	sbci	r29, 0xFF	; 255
    a4cc:	79 83       	std	Y+1, r23	; 0x01
    a4ce:	68 83       	st	Y, r22
    a4d0:	ce 5d       	subi	r28, 0xDE	; 222
    a4d2:	d0 40       	sbci	r29, 0x00	; 0
    a4d4:	91 2c       	mov	r9, r1
    a4d6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    a4d8:	ce 54       	subi	r28, 0x4E	; 78
    a4da:	df 4f       	sbci	r29, 0xFF	; 255
    a4dc:	88 81       	ld	r24, Y
    a4de:	c2 5b       	subi	r28, 0xB2	; 178
    a4e0:	d0 40       	sbci	r29, 0x00	; 0
    a4e2:	cf 54       	subi	r28, 0x4F	; 79
    a4e4:	df 4f       	sbci	r29, 0xFF	; 255
    a4e6:	98 81       	ld	r25, Y
    a4e8:	c1 5b       	subi	r28, 0xB1	; 177
    a4ea:	d0 40       	sbci	r29, 0x00	; 0
    a4ec:	89 17       	cp	r24, r25
    a4ee:	08 f0       	brcs	.+2      	; 0xa4f2 <draw_menu(bool)+0x1f16>
    a4f0:	69 c1       	rjmp	.+722    	; 0xa7c4 <draw_menu(bool)+0x21e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a4f2:	c2 54       	subi	r28, 0x42	; 66
    a4f4:	df 4f       	sbci	r29, 0xFF	; 255
    a4f6:	e8 81       	ld	r30, Y
    a4f8:	f9 81       	ldd	r31, Y+1	; 0x01
    a4fa:	ce 5b       	subi	r28, 0xBE	; 190
    a4fc:	d0 40       	sbci	r29, 0x00	; 0
    a4fe:	94 91       	lpm	r25, Z
    a500:	91 11       	cpse	r25, r1
    a502:	34 c0       	rjmp	.+104    	; 0xa56c <draw_menu(bool)+0x1f90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a504:	c8 53       	subi	r28, 0x38	; 56
    a506:	df 4f       	sbci	r29, 0xFF	; 255
    a508:	e8 81       	ld	r30, Y
    a50a:	f9 81       	ldd	r31, Y+1	; 0x01
    a50c:	c8 5c       	subi	r28, 0xC8	; 200
    a50e:	d0 40       	sbci	r29, 0x00	; 0
    a510:	25 91       	lpm	r18, Z+
    a512:	34 91       	lpm	r19, Z
    a514:	c8 54       	subi	r28, 0x48	; 72
    a516:	df 4f       	sbci	r29, 0xFF	; 255
    a518:	48 81       	ld	r20, Y
    a51a:	59 81       	ldd	r21, Y+1	; 0x01
    a51c:	c8 5b       	subi	r28, 0xB8	; 184
    a51e:	d0 40       	sbci	r29, 0x00	; 0
    a520:	42 0f       	add	r20, r18
    a522:	53 1f       	adc	r21, r19
    a524:	c0 54       	subi	r28, 0x40	; 64
    a526:	df 4f       	sbci	r29, 0xFF	; 255
    a528:	59 83       	std	Y+1, r21	; 0x01
    a52a:	48 83       	st	Y, r20
    a52c:	c0 5c       	subi	r28, 0xC0	; 192
    a52e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a530:	f1 01       	movw	r30, r2
    a532:	25 91       	lpm	r18, Z+
    a534:	34 91       	lpm	r19, Z
    a536:	c6 53       	subi	r28, 0x36	; 54
    a538:	df 4f       	sbci	r29, 0xFF	; 255
    a53a:	e8 81       	ld	r30, Y
    a53c:	f9 81       	ldd	r31, Y+1	; 0x01
    a53e:	ca 5c       	subi	r28, 0xCA	; 202
    a540:	d0 40       	sbci	r29, 0x00	; 0
    a542:	94 91       	lpm	r25, Z
    a544:	c6 54       	subi	r28, 0x46	; 70
    a546:	df 4f       	sbci	r29, 0xFF	; 255
    a548:	48 81       	ld	r20, Y
    a54a:	59 81       	ldd	r21, Y+1	; 0x01
    a54c:	ca 5b       	subi	r28, 0xBA	; 186
    a54e:	d0 40       	sbci	r29, 0x00	; 0
    a550:	24 0f       	add	r18, r20
    a552:	35 1f       	adc	r19, r21
    a554:	b9 01       	movw	r22, r18
    a556:	9f 9d       	mul	r25, r15
    a558:	60 0d       	add	r22, r0
    a55a:	71 1d       	adc	r23, r1
    a55c:	11 24       	eor	r1, r1
    a55e:	ce 53       	subi	r28, 0x3E	; 62
    a560:	df 4f       	sbci	r29, 0xFF	; 255
    a562:	79 83       	std	Y+1, r23	; 0x01
    a564:	68 83       	st	Y, r22
    a566:	c2 5c       	subi	r28, 0xC2	; 194
    a568:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
          loop_t++;
    a56a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    a56c:	c2 54       	subi	r28, 0x42	; 66
    a56e:	df 4f       	sbci	r29, 0xFF	; 255
    a570:	e8 81       	ld	r30, Y
    a572:	f9 81       	ldd	r31, Y+1	; 0x01
    a574:	ce 5b       	subi	r28, 0xBE	; 190
    a576:	d0 40       	sbci	r29, 0x00	; 0
    a578:	94 91       	lpm	r25, Z
    a57a:	91 30       	cpi	r25, 0x01	; 1
    a57c:	09 f0       	breq	.+2      	; 0xa580 <draw_menu(bool)+0x1fa4>
    a57e:	34 c0       	rjmp	.+104    	; 0xa5e8 <draw_menu(bool)+0x200c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    a580:	f1 01       	movw	r30, r2
    a582:	25 91       	lpm	r18, Z+
    a584:	34 91       	lpm	r19, Z
    a586:	c6 54       	subi	r28, 0x46	; 70
    a588:	df 4f       	sbci	r29, 0xFF	; 255
    a58a:	48 81       	ld	r20, Y
    a58c:	59 81       	ldd	r21, Y+1	; 0x01
    a58e:	ca 5b       	subi	r28, 0xBA	; 186
    a590:	d0 40       	sbci	r29, 0x00	; 0
    a592:	42 0f       	add	r20, r18
    a594:	53 1f       	adc	r21, r19
    a596:	ce 53       	subi	r28, 0x3E	; 62
    a598:	df 4f       	sbci	r29, 0xFF	; 255
    a59a:	59 83       	std	Y+1, r21	; 0x01
    a59c:	48 83       	st	Y, r20
    a59e:	c2 5c       	subi	r28, 0xC2	; 194
    a5a0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a5a2:	c8 53       	subi	r28, 0x38	; 56
    a5a4:	df 4f       	sbci	r29, 0xFF	; 255
    a5a6:	e8 81       	ld	r30, Y
    a5a8:	f9 81       	ldd	r31, Y+1	; 0x01
    a5aa:	c8 5c       	subi	r28, 0xC8	; 200
    a5ac:	d0 40       	sbci	r29, 0x00	; 0
    a5ae:	25 91       	lpm	r18, Z+
    a5b0:	34 91       	lpm	r19, Z
    a5b2:	c3 53       	subi	r28, 0x33	; 51
    a5b4:	df 4f       	sbci	r29, 0xFF	; 255
    a5b6:	e8 81       	ld	r30, Y
    a5b8:	f9 81       	ldd	r31, Y+1	; 0x01
    a5ba:	cd 5c       	subi	r28, 0xCD	; 205
    a5bc:	d0 40       	sbci	r29, 0x00	; 0
    a5be:	94 91       	lpm	r25, Z
    a5c0:	c8 54       	subi	r28, 0x48	; 72
    a5c2:	df 4f       	sbci	r29, 0xFF	; 255
    a5c4:	48 81       	ld	r20, Y
    a5c6:	59 81       	ldd	r21, Y+1	; 0x01
    a5c8:	c8 5b       	subi	r28, 0xB8	; 184
    a5ca:	d0 40       	sbci	r29, 0x00	; 0
    a5cc:	24 0f       	add	r18, r20
    a5ce:	35 1f       	adc	r19, r21
    a5d0:	b9 01       	movw	r22, r18
    a5d2:	9f 9d       	mul	r25, r15
    a5d4:	60 0d       	add	r22, r0
    a5d6:	71 1d       	adc	r23, r1
    a5d8:	11 24       	eor	r1, r1
    a5da:	c0 54       	subi	r28, 0x40	; 64
    a5dc:	df 4f       	sbci	r29, 0xFF	; 255
    a5de:	79 83       	std	Y+1, r23	; 0x01
    a5e0:	68 83       	st	Y, r22
    a5e2:	c0 5c       	subi	r28, 0xC0	; 192
    a5e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2432
          loop_t++;
    a5e6:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    a5e8:	c2 54       	subi	r28, 0x42	; 66
    a5ea:	df 4f       	sbci	r29, 0xFF	; 255
    a5ec:	e8 81       	ld	r30, Y
    a5ee:	f9 81       	ldd	r31, Y+1	; 0x01
    a5f0:	ce 5b       	subi	r28, 0xBE	; 190
    a5f2:	d0 40       	sbci	r29, 0x00	; 0
    a5f4:	94 91       	lpm	r25, Z
    a5f6:	92 30       	cpi	r25, 0x02	; 2
    a5f8:	09 f0       	breq	.+2      	; 0xa5fc <draw_menu(bool)+0x2020>
    a5fa:	4b c0       	rjmp	.+150    	; 0xa692 <draw_menu(bool)+0x20b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a5fc:	c8 53       	subi	r28, 0x38	; 56
    a5fe:	df 4f       	sbci	r29, 0xFF	; 255
    a600:	e8 81       	ld	r30, Y
    a602:	f9 81       	ldd	r31, Y+1	; 0x01
    a604:	c8 5c       	subi	r28, 0xC8	; 200
    a606:	d0 40       	sbci	r29, 0x00	; 0
    a608:	25 91       	lpm	r18, Z+
    a60a:	34 91       	lpm	r19, Z
    a60c:	c3 53       	subi	r28, 0x33	; 51
    a60e:	df 4f       	sbci	r29, 0xFF	; 255
    a610:	e8 81       	ld	r30, Y
    a612:	f9 81       	ldd	r31, Y+1	; 0x01
    a614:	cd 5c       	subi	r28, 0xCD	; 205
    a616:	d0 40       	sbci	r29, 0x00	; 0
    a618:	94 91       	lpm	r25, Z
    a61a:	c8 54       	subi	r28, 0x48	; 72
    a61c:	df 4f       	sbci	r29, 0xFF	; 255
    a61e:	48 81       	ld	r20, Y
    a620:	59 81       	ldd	r21, Y+1	; 0x01
    a622:	c8 5b       	subi	r28, 0xB8	; 184
    a624:	d0 40       	sbci	r29, 0x00	; 0
    a626:	24 0f       	add	r18, r20
    a628:	35 1f       	adc	r19, r21
    a62a:	b9 01       	movw	r22, r18
    a62c:	9f 9d       	mul	r25, r15
    a62e:	60 0d       	add	r22, r0
    a630:	71 1d       	adc	r23, r1
    a632:	11 24       	eor	r1, r1
    a634:	c0 54       	subi	r28, 0x40	; 64
    a636:	df 4f       	sbci	r29, 0xFF	; 255
    a638:	79 83       	std	Y+1, r23	; 0x01
    a63a:	68 83       	st	Y, r22
    a63c:	c0 5c       	subi	r28, 0xC0	; 192
    a63e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    a640:	f1 01       	movw	r30, r2
    a642:	25 91       	lpm	r18, Z+
    a644:	34 91       	lpm	r19, Z
    a646:	c6 53       	subi	r28, 0x36	; 54
    a648:	df 4f       	sbci	r29, 0xFF	; 255
    a64a:	e8 81       	ld	r30, Y
    a64c:	f9 81       	ldd	r31, Y+1	; 0x01
    a64e:	ca 5c       	subi	r28, 0xCA	; 202
    a650:	d0 40       	sbci	r29, 0x00	; 0
    a652:	94 91       	lpm	r25, Z
    a654:	c6 54       	subi	r28, 0x46	; 70
    a656:	df 4f       	sbci	r29, 0xFF	; 255
    a658:	48 81       	ld	r20, Y
    a65a:	59 81       	ldd	r21, Y+1	; 0x01
    a65c:	ca 5b       	subi	r28, 0xBA	; 186
    a65e:	d0 40       	sbci	r29, 0x00	; 0
    a660:	24 0f       	add	r18, r20
    a662:	35 1f       	adc	r19, r21
    a664:	b9 01       	movw	r22, r18
    a666:	99 9d       	mul	r25, r9
    a668:	60 0d       	add	r22, r0
    a66a:	71 1d       	adc	r23, r1
    a66c:	11 24       	eor	r1, r1
    a66e:	ce 53       	subi	r28, 0x3E	; 62
    a670:	df 4f       	sbci	r29, 0xFF	; 255
    a672:	79 83       	std	Y+1, r23	; 0x01
    a674:	68 83       	st	Y, r22
    a676:	c2 5c       	subi	r28, 0xC2	; 194
    a678:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
          loop_t++;
    a67a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    a67c:	c1 53       	subi	r28, 0x31	; 49
    a67e:	df 4f       	sbci	r29, 0xFF	; 255
    a680:	e8 81       	ld	r30, Y
    a682:	f9 81       	ldd	r31, Y+1	; 0x01
    a684:	cf 5c       	subi	r28, 0xCF	; 207
    a686:	d0 40       	sbci	r29, 0x00	; 0
    a688:	94 91       	lpm	r25, Z
    a68a:	f9 16       	cp	r15, r25
    a68c:	10 f0       	brcs	.+4      	; 0xa692 <draw_menu(bool)+0x20b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
          {
            loop_t = 0;
            loop_r++;
    a68e:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    a690:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    a692:	c4 54       	subi	r28, 0x44	; 68
    a694:	df 4f       	sbci	r29, 0xFF	; 255
    a696:	e8 81       	ld	r30, Y
    a698:	f9 81       	ldd	r31, Y+1	; 0x01
    a69a:	cc 5b       	subi	r28, 0xBC	; 188
    a69c:	d0 40       	sbci	r29, 0x00	; 0
    a69e:	44 91       	lpm	r20, Z
    a6a0:	8e 01       	movw	r16, r28
    a6a2:	0f 57       	subi	r16, 0x7F	; 127
    a6a4:	1f 4f       	sbci	r17, 0xFF	; 255
    a6a6:	9e 01       	movw	r18, r28
    a6a8:	2f 5f       	subi	r18, 0xFF	; 255
    a6aa:	3f 4f       	sbci	r19, 0xFF	; 255
    a6ac:	cd 54       	subi	r28, 0x4D	; 77
    a6ae:	df 4f       	sbci	r29, 0xFF	; 255
    a6b0:	68 81       	ld	r22, Y
    a6b2:	c3 5b       	subi	r28, 0xB3	; 179
    a6b4:	d0 40       	sbci	r29, 0x00	; 0
    a6b6:	ce 51       	subi	r28, 0x1E	; 30
    a6b8:	df 4f       	sbci	r29, 0xFF	; 255
    a6ba:	e8 81       	ld	r30, Y
    a6bc:	f9 81       	ldd	r31, Y+1	; 0x01
    a6be:	c2 5e       	subi	r28, 0xE2	; 226
    a6c0:	d0 40       	sbci	r29, 0x00	; 0
    a6c2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    a6c4:	ce 52       	subi	r28, 0x2E	; 46
    a6c6:	df 4f       	sbci	r29, 0xFF	; 255
    a6c8:	e8 81       	ld	r30, Y
    a6ca:	f9 81       	ldd	r31, Y+1	; 0x01
    a6cc:	c2 5d       	subi	r28, 0xD2	; 210
    a6ce:	d0 40       	sbci	r29, 0x00	; 0
    a6d0:	25 91       	lpm	r18, Z+
    a6d2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a6d4:	c4 54       	subi	r28, 0x44	; 68
    a6d6:	df 4f       	sbci	r29, 0xFF	; 255
    a6d8:	e8 81       	ld	r30, Y
    a6da:	f9 81       	ldd	r31, Y+1	; 0x01
    a6dc:	cc 5b       	subi	r28, 0xBC	; 188
    a6de:	d0 40       	sbci	r29, 0x00	; 0
    a6e0:	84 91       	lpm	r24, Z
    a6e2:	cd 54       	subi	r28, 0x4D	; 77
    a6e4:	df 4f       	sbci	r29, 0xFF	; 255
    a6e6:	68 81       	ld	r22, Y
    a6e8:	c3 5b       	subi	r28, 0xB3	; 179
    a6ea:	d0 40       	sbci	r29, 0x00	; 0
    a6ec:	70 e0       	ldi	r23, 0x00	; 0
    a6ee:	ce 54       	subi	r28, 0x4E	; 78
    a6f0:	df 4f       	sbci	r29, 0xFF	; 255
    a6f2:	48 81       	ld	r20, Y
    a6f4:	c2 5b       	subi	r28, 0xB2	; 178
    a6f6:	d0 40       	sbci	r29, 0x00	; 0
    a6f8:	90 e0       	ldi	r25, 0x00	; 0
    a6fa:	f9 01       	movw	r30, r18
    a6fc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    a6fe:	cc 52       	subi	r28, 0x2C	; 44
    a700:	df 4f       	sbci	r29, 0xFF	; 255
    a702:	e8 81       	ld	r30, Y
    a704:	f9 81       	ldd	r31, Y+1	; 0x01
    a706:	c4 5d       	subi	r28, 0xD4	; 212
    a708:	d0 40       	sbci	r29, 0x00	; 0
    a70a:	a5 90       	lpm	r10, Z+
    a70c:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    a70e:	ca 52       	subi	r28, 0x2A	; 42
    a710:	df 4f       	sbci	r29, 0xFF	; 255
    a712:	e8 81       	ld	r30, Y
    a714:	f9 81       	ldd	r31, Y+1	; 0x01
    a716:	c6 5d       	subi	r28, 0xD6	; 214
    a718:	d0 40       	sbci	r29, 0x00	; 0
    a71a:	c5 90       	lpm	r12, Z+
    a71c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    a71e:	c8 52       	subi	r28, 0x28	; 40
    a720:	df 4f       	sbci	r29, 0xFF	; 255
    a722:	e8 81       	ld	r30, Y
    a724:	f9 81       	ldd	r31, Y+1	; 0x01
    a726:	c8 5d       	subi	r28, 0xD8	; 216
    a728:	d0 40       	sbci	r29, 0x00	; 0
    a72a:	e4 90       	lpm	r14, Z
    a72c:	c6 52       	subi	r28, 0x26	; 38
    a72e:	df 4f       	sbci	r29, 0xFF	; 255
    a730:	e8 81       	ld	r30, Y
    a732:	f9 81       	ldd	r31, Y+1	; 0x01
    a734:	ca 5d       	subi	r28, 0xDA	; 218
    a736:	d0 40       	sbci	r29, 0x00	; 0
    a738:	04 91       	lpm	r16, Z
    a73a:	c4 52       	subi	r28, 0x24	; 36
    a73c:	df 4f       	sbci	r29, 0xFF	; 255
    a73e:	e8 81       	ld	r30, Y
    a740:	f9 81       	ldd	r31, Y+1	; 0x01
    a742:	cc 5d       	subi	r28, 0xDC	; 220
    a744:	d0 40       	sbci	r29, 0x00	; 0
    a746:	25 91       	lpm	r18, Z+
    a748:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a74a:	c2 52       	subi	r28, 0x22	; 34
    a74c:	df 4f       	sbci	r29, 0xFF	; 255
    a74e:	e8 81       	ld	r30, Y
    a750:	f9 81       	ldd	r31, Y+1	; 0x01
    a752:	ce 5d       	subi	r28, 0xDE	; 222
    a754:	d0 40       	sbci	r29, 0x00	; 0
    a756:	45 91       	lpm	r20, Z+
    a758:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a75a:	88 24       	eor	r8, r8
    a75c:	83 94       	inc	r8
    a75e:	81 11       	cpse	r24, r1
    a760:	01 c0       	rjmp	.+2      	; 0xa764 <draw_menu(bool)+0x2188>
    a762:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a764:	cb 54       	subi	r28, 0x4B	; 75
    a766:	df 4f       	sbci	r29, 0xFF	; 255
    a768:	f8 81       	ld	r31, Y
    a76a:	c5 5b       	subi	r28, 0xB5	; 181
    a76c:	d0 40       	sbci	r29, 0x00	; 0
    a76e:	ff 93       	push	r31
    a770:	cc 54       	subi	r28, 0x4C	; 76
    a772:	df 4f       	sbci	r29, 0xFF	; 255
    a774:	68 81       	ld	r22, Y
    a776:	c4 5b       	subi	r28, 0xB4	; 180
    a778:	d0 40       	sbci	r29, 0x00	; 0
    a77a:	6f 93       	push	r22
    a77c:	81 e0       	ldi	r24, 0x01	; 1
    a77e:	90 e0       	ldi	r25, 0x00	; 0
    a780:	8c 0f       	add	r24, r28
    a782:	9d 1f       	adc	r25, r29
    a784:	9f 93       	push	r25
    a786:	8f 93       	push	r24
    a788:	ce 53       	subi	r28, 0x3E	; 62
    a78a:	df 4f       	sbci	r29, 0xFF	; 255
    a78c:	68 81       	ld	r22, Y
    a78e:	79 81       	ldd	r23, Y+1	; 0x01
    a790:	c2 5c       	subi	r28, 0xC2	; 194
    a792:	d0 40       	sbci	r29, 0x00	; 0
    a794:	c0 54       	subi	r28, 0x40	; 64
    a796:	df 4f       	sbci	r29, 0xFF	; 255
    a798:	88 81       	ld	r24, Y
    a79a:	99 81       	ldd	r25, Y+1	; 0x01
    a79c:	c0 5c       	subi	r28, 0xC0	; 192
    a79e:	d0 40       	sbci	r29, 0x00	; 0
    a7a0:	0e 94 45 32 	call	0x648a	; 0x648a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    a7a4:	ce 54       	subi	r28, 0x4E	; 78
    a7a6:	df 4f       	sbci	r29, 0xFF	; 255
    a7a8:	88 81       	ld	r24, Y
    a7aa:	c2 5b       	subi	r28, 0xB2	; 178
    a7ac:	d0 40       	sbci	r29, 0x00	; 0
    a7ae:	8f 5f       	subi	r24, 0xFF	; 255
    a7b0:	ce 54       	subi	r28, 0x4E	; 78
    a7b2:	df 4f       	sbci	r29, 0xFF	; 255
    a7b4:	88 83       	st	Y, r24
    a7b6:	c2 5b       	subi	r28, 0xB2	; 178
    a7b8:	d0 40       	sbci	r29, 0x00	; 0
    a7ba:	0f 90       	pop	r0
    a7bc:	0f 90       	pop	r0
    a7be:	0f 90       	pop	r0
    a7c0:	0f 90       	pop	r0
    a7c2:	8a ce       	rjmp	.-748    	; 0xa4d8 <draw_menu(bool)+0x1efc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
      }
    }
    if (click_x > 0 && click_y > 0)
    a7c4:	cc 53       	subi	r28, 0x3C	; 60
    a7c6:	df 4f       	sbci	r29, 0xFF	; 255
    a7c8:	e8 81       	ld	r30, Y
    a7ca:	f9 81       	ldd	r31, Y+1	; 0x01
    a7cc:	c4 5c       	subi	r28, 0xC4	; 196
    a7ce:	d0 40       	sbci	r29, 0x00	; 0
    a7d0:	ef 2b       	or	r30, r31
    a7d2:	09 f4       	brne	.+2      	; 0xa7d6 <draw_menu(bool)+0x21fa>
    a7d4:	bb c1       	rjmp	.+886    	; 0xab4c <draw_menu(bool)+0x2570>
    a7d6:	ca 53       	subi	r28, 0x3A	; 58
    a7d8:	df 4f       	sbci	r29, 0xFF	; 255
    a7da:	28 81       	ld	r18, Y
    a7dc:	39 81       	ldd	r19, Y+1	; 0x01
    a7de:	c6 5c       	subi	r28, 0xC6	; 198
    a7e0:	d0 40       	sbci	r29, 0x00	; 0
    a7e2:	23 2b       	or	r18, r19
    a7e4:	09 f4       	brne	.+2      	; 0xa7e8 <draw_menu(bool)+0x220c>
    a7e6:	b2 c1       	rjmp	.+868    	; 0xab4c <draw_menu(bool)+0x2570>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
    {
      loop_i = 0;
    a7e8:	ce 54       	subi	r28, 0x4E	; 78
    a7ea:	df 4f       	sbci	r29, 0xFF	; 255
    a7ec:	18 82       	st	Y, r1
    a7ee:	c2 5b       	subi	r28, 0xB2	; 178
    a7f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2460
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    a7f2:	f2 01       	movw	r30, r4
    a7f4:	e0 55       	subi	r30, 0x50	; 80
    a7f6:	fd 4f       	sbci	r31, 0xFD	; 253
    a7f8:	e6 0d       	add	r30, r6
    a7fa:	f7 1d       	adc	r31, r7
    a7fc:	25 91       	lpm	r18, Z+
    a7fe:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2461
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a800:	c2 01       	movw	r24, r4
    a802:	85 55       	subi	r24, 0x55	; 85
    a804:	9d 4f       	sbci	r25, 0xFD	; 253
    a806:	a3 01       	movw	r20, r6
    a808:	48 0f       	add	r20, r24
    a80a:	59 1f       	adc	r21, r25
    a80c:	c2 54       	subi	r28, 0x42	; 66
    a80e:	df 4f       	sbci	r29, 0xFF	; 255
    a810:	59 83       	std	Y+1, r21	; 0x01
    a812:	48 83       	st	Y, r20
    a814:	ce 5b       	subi	r28, 0xBE	; 190
    a816:	d0 40       	sbci	r29, 0x00	; 0
    a818:	fa 01       	movw	r30, r20
    a81a:	84 91       	lpm	r24, Z
    a81c:	cd 54       	subi	r28, 0x4D	; 77
    a81e:	df 4f       	sbci	r29, 0xFF	; 255
    a820:	68 81       	ld	r22, Y
    a822:	c3 5b       	subi	r28, 0xB3	; 179
    a824:	d0 40       	sbci	r29, 0x00	; 0
    a826:	70 e0       	ldi	r23, 0x00	; 0
    a828:	40 e0       	ldi	r20, 0x00	; 0
    a82a:	90 e0       	ldi	r25, 0x00	; 0
    a82c:	f9 01       	movw	r30, r18
    a82e:	19 95       	eicall
    a830:	cf 54       	subi	r28, 0x4F	; 79
    a832:	df 4f       	sbci	r29, 0xFF	; 255
    a834:	88 83       	st	Y, r24
    a836:	c1 5b       	subi	r28, 0xB1	; 177
    a838:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    a83a:	f2 01       	movw	r30, r4
    a83c:	e6 55       	subi	r30, 0x56	; 86
    a83e:	fd 4f       	sbci	r31, 0xFD	; 253
    a840:	e6 0d       	add	r30, r6
    a842:	f7 1d       	adc	r31, r7
    a844:	44 91       	lpm	r20, Z
    a846:	c2 01       	movw	r24, r4
    a848:	88 55       	subi	r24, 0x58	; 88
    a84a:	9d 4f       	sbci	r25, 0xFD	; 253
    a84c:	93 01       	movw	r18, r6
    a84e:	28 0f       	add	r18, r24
    a850:	39 1f       	adc	r19, r25
    a852:	c3 53       	subi	r28, 0x33	; 51
    a854:	df 4f       	sbci	r29, 0xFF	; 255
    a856:	39 83       	std	Y+1, r19	; 0x01
    a858:	28 83       	st	Y, r18
    a85a:	cd 5c       	subi	r28, 0xCD	; 205
    a85c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2463
      if (slider_active != MENU_SLIDER_OFF)
    a85e:	4f 3f       	cpi	r20, 0xFF	; 255
    a860:	99 f0       	breq	.+38     	; 0xa888 <draw_menu(bool)+0x22ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    a862:	f9 01       	movw	r30, r18
    a864:	24 91       	lpm	r18, Z
    a866:	f2 01       	movw	r30, r4
    a868:	e7 55       	subi	r30, 0x57	; 87
    a86a:	fd 4f       	sbci	r31, 0xFD	; 253
    a86c:	e6 0d       	add	r30, r6
    a86e:	f7 1d       	adc	r31, r7
    a870:	e4 91       	lpm	r30, Z
    a872:	2e 9f       	mul	r18, r30
    a874:	20 2d       	mov	r18, r0
    a876:	11 24       	eor	r1, r1
    a878:	be 01       	movw	r22, r28
    a87a:	6f 54       	subi	r22, 0x4F	; 79
    a87c:	7f 4f       	sbci	r23, 0xFF	; 255
    a87e:	ce 01       	movw	r24, r28
    a880:	8e 54       	subi	r24, 0x4E	; 78
    a882:	9f 4f       	sbci	r25, 0xFF	; 255
    a884:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    a888:	ce 54       	subi	r28, 0x4E	; 78
    a88a:	df 4f       	sbci	r29, 0xFF	; 255
    a88c:	88 80       	ld	r8, Y
    a88e:	c2 5b       	subi	r28, 0xB2	; 178
    a890:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
      while (loop_i < loop_cnt)
    a892:	cf 54       	subi	r28, 0x4F	; 79
    a894:	df 4f       	sbci	r29, 0xFF	; 255
    a896:	28 80       	ld	r2, Y
    a898:	c1 5b       	subi	r28, 0xB1	; 177
    a89a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a89c:	c2 01       	movw	r24, r4
    a89e:	89 55       	subi	r24, 0x59	; 89
    a8a0:	9d 4f       	sbci	r25, 0xFD	; 253
    a8a2:	93 01       	movw	r18, r6
    a8a4:	28 0f       	add	r18, r24
    a8a6:	39 1f       	adc	r19, r25
    a8a8:	c4 54       	subi	r28, 0x44	; 68
    a8aa:	df 4f       	sbci	r29, 0xFF	; 255
    a8ac:	39 83       	std	Y+1, r19	; 0x01
    a8ae:	28 83       	st	Y, r18
    a8b0:	cc 5b       	subi	r28, 0xBC	; 188
    a8b2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a8b4:	62 01       	movw	r12, r4
    a8b6:	39 e6       	ldi	r19, 0x69	; 105
    a8b8:	c3 1a       	sub	r12, r19
    a8ba:	3d ef       	ldi	r19, 0xFD	; 253
    a8bc:	d3 0a       	sbc	r13, r19
    a8be:	c6 0c       	add	r12, r6
    a8c0:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a8c2:	52 01       	movw	r10, r4
    a8c4:	47 e6       	ldi	r20, 0x67	; 103
    a8c6:	a4 1a       	sub	r10, r20
    a8c8:	4d ef       	ldi	r20, 0xFD	; 253
    a8ca:	b4 0a       	sbc	r11, r20
    a8cc:	a6 0c       	add	r10, r6
    a8ce:	b7 1c       	adc	r11, r7
    a8d0:	01 97       	sbiw	r24, 0x01	; 1
    a8d2:	b3 01       	movw	r22, r6
    a8d4:	68 0f       	add	r22, r24
    a8d6:	79 1f       	adc	r23, r25
    a8d8:	c8 53       	subi	r28, 0x38	; 56
    a8da:	df 4f       	sbci	r29, 0xFF	; 255
    a8dc:	79 83       	std	Y+1, r23	; 0x01
    a8de:	68 83       	st	Y, r22
    a8e0:	c8 5c       	subi	r28, 0xC8	; 200
    a8e2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a8e4:	01 97       	sbiw	r24, 0x01	; 1
    a8e6:	f3 01       	movw	r30, r6
    a8e8:	e8 0f       	add	r30, r24
    a8ea:	f9 1f       	adc	r31, r25
    a8ec:	c6 53       	subi	r28, 0x36	; 54
    a8ee:	df 4f       	sbci	r29, 0xFF	; 255
    a8f0:	f9 83       	std	Y+1, r31	; 0x01
    a8f2:	e8 83       	st	Y, r30
    a8f4:	ca 5c       	subi	r28, 0xCA	; 202
    a8f6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    a8f8:	08 97       	sbiw	r24, 0x08	; 8
    a8fa:	93 01       	movw	r18, r6
    a8fc:	28 0f       	add	r18, r24
    a8fe:	39 1f       	adc	r19, r25
    a900:	c1 53       	subi	r28, 0x31	; 49
    a902:	df 4f       	sbci	r29, 0xFF	; 255
    a904:	39 83       	std	Y+1, r19	; 0x01
    a906:	28 83       	st	Y, r18
    a908:	cf 5c       	subi	r28, 0xCF	; 207
    a90a:	d0 40       	sbci	r29, 0x00	; 0
    a90c:	02 97       	sbiw	r24, 0x02	; 2
    a90e:	a3 01       	movw	r20, r6
    a910:	48 0f       	add	r20, r24
    a912:	59 1f       	adc	r21, r25
    a914:	ce 52       	subi	r28, 0x2E	; 46
    a916:	df 4f       	sbci	r29, 0xFF	; 255
    a918:	59 83       	std	Y+1, r21	; 0x01
    a91a:	48 83       	st	Y, r20
    a91c:	c2 5d       	subi	r28, 0xD2	; 210
    a91e:	d0 40       	sbci	r29, 0x00	; 0
    a920:	31 2c       	mov	r3, r1
    a922:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    a924:	82 14       	cp	r8, r2
    a926:	08 f0       	brcs	.+2      	; 0xa92a <draw_menu(bool)+0x234e>
    a928:	11 c1       	rjmp	.+546    	; 0xab4c <draw_menu(bool)+0x2570>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a92a:	c4 54       	subi	r28, 0x44	; 68
    a92c:	df 4f       	sbci	r29, 0xFF	; 255
    a92e:	e8 81       	ld	r30, Y
    a930:	f9 81       	ldd	r31, Y+1	; 0x01
    a932:	cc 5b       	subi	r28, 0xBC	; 188
    a934:	d0 40       	sbci	r29, 0x00	; 0
    a936:	84 91       	lpm	r24, Z
    a938:	81 11       	cpse	r24, r1
    a93a:	2f c0       	rjmp	.+94     	; 0xa99a <draw_menu(bool)+0x23be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a93c:	f6 01       	movw	r30, r12
    a93e:	85 91       	lpm	r24, Z+
    a940:	94 91       	lpm	r25, Z
    a942:	c8 54       	subi	r28, 0x48	; 72
    a944:	df 4f       	sbci	r29, 0xFF	; 255
    a946:	28 81       	ld	r18, Y
    a948:	39 81       	ldd	r19, Y+1	; 0x01
    a94a:	c8 5b       	subi	r28, 0xB8	; 184
    a94c:	d0 40       	sbci	r29, 0x00	; 0
    a94e:	28 0f       	add	r18, r24
    a950:	39 1f       	adc	r19, r25
    a952:	c0 54       	subi	r28, 0x40	; 64
    a954:	df 4f       	sbci	r29, 0xFF	; 255
    a956:	39 83       	std	Y+1, r19	; 0x01
    a958:	28 83       	st	Y, r18
    a95a:	c0 5c       	subi	r28, 0xC0	; 192
    a95c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a95e:	f5 01       	movw	r30, r10
    a960:	85 91       	lpm	r24, Z+
    a962:	94 91       	lpm	r25, Z
    a964:	c8 53       	subi	r28, 0x38	; 56
    a966:	df 4f       	sbci	r29, 0xFF	; 255
    a968:	e8 81       	ld	r30, Y
    a96a:	f9 81       	ldd	r31, Y+1	; 0x01
    a96c:	c8 5c       	subi	r28, 0xC8	; 200
    a96e:	d0 40       	sbci	r29, 0x00	; 0
    a970:	24 91       	lpm	r18, Z
    a972:	c6 54       	subi	r28, 0x46	; 70
    a974:	df 4f       	sbci	r29, 0xFF	; 255
    a976:	48 81       	ld	r20, Y
    a978:	59 81       	ldd	r21, Y+1	; 0x01
    a97a:	ca 5b       	subi	r28, 0xBA	; 186
    a97c:	d0 40       	sbci	r29, 0x00	; 0
    a97e:	84 0f       	add	r24, r20
    a980:	95 1f       	adc	r25, r21
    a982:	bc 01       	movw	r22, r24
    a984:	29 9d       	mul	r18, r9
    a986:	60 0d       	add	r22, r0
    a988:	71 1d       	adc	r23, r1
    a98a:	11 24       	eor	r1, r1
    a98c:	ce 53       	subi	r28, 0x3E	; 62
    a98e:	df 4f       	sbci	r29, 0xFF	; 255
    a990:	79 83       	std	Y+1, r23	; 0x01
    a992:	68 83       	st	Y, r22
    a994:	c2 5c       	subi	r28, 0xC2	; 194
    a996:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
          loop_t++;
    a998:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    a99a:	c4 54       	subi	r28, 0x44	; 68
    a99c:	df 4f       	sbci	r29, 0xFF	; 255
    a99e:	e8 81       	ld	r30, Y
    a9a0:	f9 81       	ldd	r31, Y+1	; 0x01
    a9a2:	cc 5b       	subi	r28, 0xBC	; 188
    a9a4:	d0 40       	sbci	r29, 0x00	; 0
    a9a6:	84 91       	lpm	r24, Z
    a9a8:	81 30       	cpi	r24, 0x01	; 1
    a9aa:	79 f5       	brne	.+94     	; 0xaa0a <draw_menu(bool)+0x242e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    a9ac:	f5 01       	movw	r30, r10
    a9ae:	85 91       	lpm	r24, Z+
    a9b0:	94 91       	lpm	r25, Z
    a9b2:	c6 54       	subi	r28, 0x46	; 70
    a9b4:	df 4f       	sbci	r29, 0xFF	; 255
    a9b6:	28 81       	ld	r18, Y
    a9b8:	39 81       	ldd	r19, Y+1	; 0x01
    a9ba:	ca 5b       	subi	r28, 0xBA	; 186
    a9bc:	d0 40       	sbci	r29, 0x00	; 0
    a9be:	28 0f       	add	r18, r24
    a9c0:	39 1f       	adc	r19, r25
    a9c2:	ce 53       	subi	r28, 0x3E	; 62
    a9c4:	df 4f       	sbci	r29, 0xFF	; 255
    a9c6:	39 83       	std	Y+1, r19	; 0x01
    a9c8:	28 83       	st	Y, r18
    a9ca:	c2 5c       	subi	r28, 0xC2	; 194
    a9cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a9ce:	f6 01       	movw	r30, r12
    a9d0:	85 91       	lpm	r24, Z+
    a9d2:	94 91       	lpm	r25, Z
    a9d4:	c6 53       	subi	r28, 0x36	; 54
    a9d6:	df 4f       	sbci	r29, 0xFF	; 255
    a9d8:	e8 81       	ld	r30, Y
    a9da:	f9 81       	ldd	r31, Y+1	; 0x01
    a9dc:	ca 5c       	subi	r28, 0xCA	; 202
    a9de:	d0 40       	sbci	r29, 0x00	; 0
    a9e0:	24 91       	lpm	r18, Z
    a9e2:	c8 54       	subi	r28, 0x48	; 72
    a9e4:	df 4f       	sbci	r29, 0xFF	; 255
    a9e6:	48 81       	ld	r20, Y
    a9e8:	59 81       	ldd	r21, Y+1	; 0x01
    a9ea:	c8 5b       	subi	r28, 0xB8	; 184
    a9ec:	d0 40       	sbci	r29, 0x00	; 0
    a9ee:	84 0f       	add	r24, r20
    a9f0:	95 1f       	adc	r25, r21
    a9f2:	bc 01       	movw	r22, r24
    a9f4:	29 9d       	mul	r18, r9
    a9f6:	60 0d       	add	r22, r0
    a9f8:	71 1d       	adc	r23, r1
    a9fa:	11 24       	eor	r1, r1
    a9fc:	c0 54       	subi	r28, 0x40	; 64
    a9fe:	df 4f       	sbci	r29, 0xFF	; 255
    aa00:	79 83       	std	Y+1, r23	; 0x01
    aa02:	68 83       	st	Y, r22
    aa04:	c0 5c       	subi	r28, 0xC0	; 192
    aa06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
          loop_t++;
    aa08:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    aa0a:	c4 54       	subi	r28, 0x44	; 68
    aa0c:	df 4f       	sbci	r29, 0xFF	; 255
    aa0e:	e8 81       	ld	r30, Y
    aa10:	f9 81       	ldd	r31, Y+1	; 0x01
    aa12:	cc 5b       	subi	r28, 0xBC	; 188
    aa14:	d0 40       	sbci	r29, 0x00	; 0
    aa16:	84 91       	lpm	r24, Z
    aa18:	82 30       	cpi	r24, 0x02	; 2
    aa1a:	09 f0       	breq	.+2      	; 0xaa1e <draw_menu(bool)+0x2442>
    aa1c:	46 c0       	rjmp	.+140    	; 0xaaaa <draw_menu(bool)+0x24ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    aa1e:	f6 01       	movw	r30, r12
    aa20:	85 91       	lpm	r24, Z+
    aa22:	94 91       	lpm	r25, Z
    aa24:	c6 53       	subi	r28, 0x36	; 54
    aa26:	df 4f       	sbci	r29, 0xFF	; 255
    aa28:	e8 81       	ld	r30, Y
    aa2a:	f9 81       	ldd	r31, Y+1	; 0x01
    aa2c:	ca 5c       	subi	r28, 0xCA	; 202
    aa2e:	d0 40       	sbci	r29, 0x00	; 0
    aa30:	24 91       	lpm	r18, Z
    aa32:	c8 54       	subi	r28, 0x48	; 72
    aa34:	df 4f       	sbci	r29, 0xFF	; 255
    aa36:	48 81       	ld	r20, Y
    aa38:	59 81       	ldd	r21, Y+1	; 0x01
    aa3a:	c8 5b       	subi	r28, 0xB8	; 184
    aa3c:	d0 40       	sbci	r29, 0x00	; 0
    aa3e:	84 0f       	add	r24, r20
    aa40:	95 1f       	adc	r25, r21
    aa42:	bc 01       	movw	r22, r24
    aa44:	29 9d       	mul	r18, r9
    aa46:	60 0d       	add	r22, r0
    aa48:	71 1d       	adc	r23, r1
    aa4a:	11 24       	eor	r1, r1
    aa4c:	c0 54       	subi	r28, 0x40	; 64
    aa4e:	df 4f       	sbci	r29, 0xFF	; 255
    aa50:	79 83       	std	Y+1, r23	; 0x01
    aa52:	68 83       	st	Y, r22
    aa54:	c0 5c       	subi	r28, 0xC0	; 192
    aa56:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    aa58:	f5 01       	movw	r30, r10
    aa5a:	85 91       	lpm	r24, Z+
    aa5c:	94 91       	lpm	r25, Z
    aa5e:	c8 53       	subi	r28, 0x38	; 56
    aa60:	df 4f       	sbci	r29, 0xFF	; 255
    aa62:	e8 81       	ld	r30, Y
    aa64:	f9 81       	ldd	r31, Y+1	; 0x01
    aa66:	c8 5c       	subi	r28, 0xC8	; 200
    aa68:	d0 40       	sbci	r29, 0x00	; 0
    aa6a:	24 91       	lpm	r18, Z
    aa6c:	c6 54       	subi	r28, 0x46	; 70
    aa6e:	df 4f       	sbci	r29, 0xFF	; 255
    aa70:	48 81       	ld	r20, Y
    aa72:	59 81       	ldd	r21, Y+1	; 0x01
    aa74:	ca 5b       	subi	r28, 0xBA	; 186
    aa76:	d0 40       	sbci	r29, 0x00	; 0
    aa78:	84 0f       	add	r24, r20
    aa7a:	95 1f       	adc	r25, r21
    aa7c:	bc 01       	movw	r22, r24
    aa7e:	23 9d       	mul	r18, r3
    aa80:	60 0d       	add	r22, r0
    aa82:	71 1d       	adc	r23, r1
    aa84:	11 24       	eor	r1, r1
    aa86:	ce 53       	subi	r28, 0x3E	; 62
    aa88:	df 4f       	sbci	r29, 0xFF	; 255
    aa8a:	79 83       	std	Y+1, r23	; 0x01
    aa8c:	68 83       	st	Y, r22
    aa8e:	c2 5c       	subi	r28, 0xC2	; 194
    aa90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
          loop_t++;
    aa92:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    aa94:	c3 53       	subi	r28, 0x33	; 51
    aa96:	df 4f       	sbci	r29, 0xFF	; 255
    aa98:	e8 81       	ld	r30, Y
    aa9a:	f9 81       	ldd	r31, Y+1	; 0x01
    aa9c:	cd 5c       	subi	r28, 0xCD	; 205
    aa9e:	d0 40       	sbci	r29, 0x00	; 0
    aaa0:	84 91       	lpm	r24, Z
    aaa2:	98 16       	cp	r9, r24
    aaa4:	10 f0       	brcs	.+4      	; 0xaaaa <draw_menu(bool)+0x24ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
          {
            loop_t = 0;
            loop_r++;
    aaa6:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    aaa8:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    aaaa:	c1 53       	subi	r28, 0x31	; 49
    aaac:	df 4f       	sbci	r29, 0xFF	; 255
    aaae:	e8 81       	ld	r30, Y
    aab0:	f9 81       	ldd	r31, Y+1	; 0x01
    aab2:	cf 5c       	subi	r28, 0xCF	; 207
    aab4:	d0 40       	sbci	r29, 0x00	; 0
    aab6:	25 91       	lpm	r18, Z+
    aab8:	34 91       	lpm	r19, Z
    aaba:	ce 52       	subi	r28, 0x2E	; 46
    aabc:	df 4f       	sbci	r29, 0xFF	; 255
    aabe:	e8 81       	ld	r30, Y
    aac0:	f9 81       	ldd	r31, Y+1	; 0x01
    aac2:	c2 5d       	subi	r28, 0xD2	; 210
    aac4:	d0 40       	sbci	r29, 0x00	; 0
    aac6:	45 91       	lpm	r20, Z+
    aac8:	54 91       	lpm	r21, Z
    aaca:	ca 53       	subi	r28, 0x3A	; 58
    aacc:	df 4f       	sbci	r29, 0xFF	; 255
    aace:	e8 80       	ld	r14, Y
    aad0:	f9 80       	ldd	r15, Y+1	; 0x01
    aad2:	c6 5c       	subi	r28, 0xC6	; 198
    aad4:	d0 40       	sbci	r29, 0x00	; 0
    aad6:	cc 53       	subi	r28, 0x3C	; 60
    aad8:	df 4f       	sbci	r29, 0xFF	; 255
    aada:	08 81       	ld	r16, Y
    aadc:	19 81       	ldd	r17, Y+1	; 0x01
    aade:	c4 5c       	subi	r28, 0xC4	; 196
    aae0:	d0 40       	sbci	r29, 0x00	; 0
    aae2:	ce 53       	subi	r28, 0x3E	; 62
    aae4:	df 4f       	sbci	r29, 0xFF	; 255
    aae6:	68 81       	ld	r22, Y
    aae8:	79 81       	ldd	r23, Y+1	; 0x01
    aaea:	c2 5c       	subi	r28, 0xC2	; 194
    aaec:	d0 40       	sbci	r29, 0x00	; 0
    aaee:	c0 54       	subi	r28, 0x40	; 64
    aaf0:	df 4f       	sbci	r29, 0xFF	; 255
    aaf2:	88 81       	ld	r24, Y
    aaf4:	99 81       	ldd	r25, Y+1	; 0x01
    aaf6:	c0 5c       	subi	r28, 0xC0	; 192
    aaf8:	d0 40       	sbci	r29, 0x00	; 0
    aafa:	0e 94 de 28 	call	0x51bc	; 0x51bc <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    aafe:	18 2f       	mov	r17, r24
    ab00:	81 e0       	ldi	r24, 0x01	; 1
    ab02:	88 0d       	add	r24, r8
    ab04:	11 23       	and	r17, r17
    ab06:	71 f1       	breq	.+92     	; 0xab64 <draw_menu(bool)+0x2588>
    ab08:	ce 54       	subi	r28, 0x4E	; 78
    ab0a:	df 4f       	sbci	r29, 0xFF	; 255
    ab0c:	88 82       	st	Y, r8
    ab0e:	c2 5b       	subi	r28, 0xB2	; 178
    ab10:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    ab12:	f2 01       	movw	r30, r4
    ab14:	e2 55       	subi	r30, 0x52	; 82
    ab16:	fd 4f       	sbci	r31, 0xFD	; 253
    ab18:	e6 0d       	add	r30, r6
    ab1a:	f7 1d       	adc	r31, r7
    ab1c:	25 91       	lpm	r18, Z+
    ab1e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    ab20:	c2 54       	subi	r28, 0x42	; 66
    ab22:	df 4f       	sbci	r29, 0xFF	; 255
    ab24:	e8 81       	ld	r30, Y
    ab26:	f9 81       	ldd	r31, Y+1	; 0x01
    ab28:	ce 5b       	subi	r28, 0xBE	; 190
    ab2a:	d0 40       	sbci	r29, 0x00	; 0
    ab2c:	84 91       	lpm	r24, Z
    ab2e:	cd 54       	subi	r28, 0x4D	; 77
    ab30:	df 4f       	sbci	r29, 0xFF	; 255
    ab32:	68 81       	ld	r22, Y
    ab34:	c3 5b       	subi	r28, 0xB3	; 179
    ab36:	d0 40       	sbci	r29, 0x00	; 0
    ab38:	70 e0       	ldi	r23, 0x00	; 0
    ab3a:	48 2d       	mov	r20, r8
    ab3c:	90 e0       	ldi	r25, 0x00	; 0
    ab3e:	f9 01       	movw	r30, r18
    ab40:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
          ret = true;
    ab42:	c4 53       	subi	r28, 0x34	; 52
    ab44:	df 4f       	sbci	r29, 0xFF	; 255
    ab46:	18 83       	st	Y, r17
    ab48:	cc 5c       	subi	r28, 0xCC	; 204
    ab4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    ab4c:	ca 54       	subi	r28, 0x4A	; 74
    ab4e:	df 4f       	sbci	r29, 0xFF	; 255
    ab50:	f8 81       	ld	r31, Y
    ab52:	c6 5b       	subi	r28, 0xB6	; 182
    ab54:	d0 40       	sbci	r29, 0x00	; 0
    ab56:	ff 5f       	subi	r31, 0xFF	; 255
    ab58:	ca 54       	subi	r28, 0x4A	; 74
    ab5a:	df 4f       	sbci	r29, 0xFF	; 255
    ab5c:	f8 83       	st	Y, r31
    ab5e:	c6 5b       	subi	r28, 0xB6	; 182
    ab60:	d0 40       	sbci	r29, 0x00	; 0
    ab62:	c1 cb       	rjmp	.-2174   	; 0xa2e6 <draw_menu(bool)+0x1d0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    ab64:	88 2e       	mov	r8, r24
    ab66:	de ce       	rjmp	.-580    	; 0xa924 <draw_menu(bool)+0x2348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
    ab68:	21 e0       	ldi	r18, 0x01	; 1
    ab6a:	c4 53       	subi	r28, 0x34	; 52
    ab6c:	df 4f       	sbci	r29, 0xFF	; 255
    ab6e:	28 83       	st	Y, r18
    ab70:	cc 5c       	subi	r28, 0xCC	; 204
    ab72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
  }


draw_menu_end:
  return ret;
}
    ab74:	c4 53       	subi	r28, 0x34	; 52
    ab76:	df 4f       	sbci	r29, 0xFF	; 255
    ab78:	88 81       	ld	r24, Y
    ab7a:	cc 5c       	subi	r28, 0xCC	; 204
    ab7c:	d0 40       	sbci	r29, 0x00	; 0
    ab7e:	cd 51       	subi	r28, 0x1D	; 29
    ab80:	df 4f       	sbci	r29, 0xFF	; 255
    ab82:	0f b6       	in	r0, 0x3f	; 63
    ab84:	f8 94       	cli
    ab86:	de bf       	out	0x3e, r29	; 62
    ab88:	0f be       	out	0x3f, r0	; 63
    ab8a:	cd bf       	out	0x3d, r28	; 61
    ab8c:	df 91       	pop	r29
    ab8e:	cf 91       	pop	r28
    ab90:	1f 91       	pop	r17
    ab92:	0f 91       	pop	r16
    ab94:	ff 90       	pop	r15
    ab96:	ef 90       	pop	r14
    ab98:	df 90       	pop	r13
    ab9a:	cf 90       	pop	r12
    ab9c:	bf 90       	pop	r11
    ab9e:	af 90       	pop	r10
    aba0:	9f 90       	pop	r9
    aba2:	8f 90       	pop	r8
    aba4:	7f 90       	pop	r7
    aba6:	6f 90       	pop	r6
    aba8:	5f 90       	pop	r5
    abaa:	4f 90       	pop	r4
    abac:	3f 90       	pop	r3
    abae:	2f 90       	pop	r2
    abb0:	08 95       	ret

0000abb2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    abb2:	2d e4       	ldi	r18, 0x4D	; 77
    abb4:	82 9f       	mul	r24, r18
    abb6:	c0 01       	movw	r24, r0
    abb8:	11 24       	eor	r1, r1
    abba:	26 e0       	ldi	r18, 0x06	; 6
    abbc:	62 9f       	mul	r22, r18
    abbe:	80 0d       	add	r24, r0
    abc0:	91 1d       	adc	r25, r1
    abc2:	11 24       	eor	r1, r1
    abc4:	64 2f       	mov	r22, r20
    abc6:	8e 50       	subi	r24, 0x0E	; 14
    abc8:	9e 4f       	sbci	r25, 0xFE	; 254
    abca:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000abce <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    abce:	1f 93       	push	r17
    abd0:	cf 93       	push	r28
    abd2:	df 93       	push	r29
    abd4:	14 2f       	mov	r17, r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    abd6:	9d e4       	ldi	r25, 0x4D	; 77
    abd8:	89 9f       	mul	r24, r25
    abda:	e0 01       	movw	r28, r0
    abdc:	11 24       	eor	r1, r1
    abde:	cf 50       	subi	r28, 0x0F	; 15
    abe0:	de 4f       	sbci	r29, 0xFE	; 254
    abe2:	86 e0       	ldi	r24, 0x06	; 6
    abe4:	68 9f       	mul	r22, r24
    abe6:	c0 0d       	add	r28, r0
    abe8:	d1 1d       	adc	r29, r1
    abea:	11 24       	eor	r1, r1
    abec:	65 2f       	mov	r22, r21
    abee:	ce 01       	movw	r24, r28
    abf0:	05 96       	adiw	r24, 0x05	; 5
    abf2:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    abf6:	61 2f       	mov	r22, r17
    abf8:	ce 01       	movw	r24, r28
    abfa:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
}
    abfc:	df 91       	pop	r29
    abfe:	cf 91       	pop	r28
    ac00:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    ac02:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ac06 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    ac06:	cf 92       	push	r12
    ac08:	ef 92       	push	r14
    ac0a:	0f 93       	push	r16
    ac0c:	1f 93       	push	r17
    ac0e:	cf 93       	push	r28
    ac10:	df 93       	push	r29
    ac12:	c8 2f       	mov	r28, r24
    ac14:	56 2f       	mov	r21, r22
    ac16:	8e 2d       	mov	r24, r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    ac18:	3f e0       	ldi	r19, 0x0F	; 15
    ac1a:	63 2f       	mov	r22, r19
    ac1c:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
    ac20:	83 70       	andi	r24, 0x03	; 3
    ac22:	98 e0       	ldi	r25, 0x08	; 8
    ac24:	09 9f       	mul	r16, r25
    ac26:	80 01       	movw	r16, r0
    ac28:	11 24       	eor	r1, r1
    ac2a:	08 0f       	add	r16, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    ac2c:	8d e4       	ldi	r24, 0x4D	; 77
    ac2e:	c8 9f       	mul	r28, r24
    ac30:	e0 01       	movw	r28, r0
    ac32:	11 24       	eor	r1, r1
    ac34:	cf 50       	subi	r28, 0x0F	; 15
    ac36:	de 4f       	sbci	r29, 0xFE	; 254
    ac38:	96 e0       	ldi	r25, 0x06	; 6
    ac3a:	59 9f       	mul	r21, r25
    ac3c:	c0 0d       	add	r28, r0
    ac3e:	d1 1d       	adc	r29, r1
    ac40:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    ac42:	82 2f       	mov	r24, r18
    ac44:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
    ac48:	68 2f       	mov	r22, r24
    ac4a:	66 0f       	add	r22, r22
    ac4c:	66 70       	andi	r22, 0x06	; 6
    ac4e:	88 e0       	ldi	r24, 0x08	; 8
    ac50:	48 9f       	mul	r20, r24
    ac52:	a0 01       	movw	r20, r0
    ac54:	11 24       	eor	r1, r1
    ac56:	9c 2d       	mov	r25, r12
    ac58:	91 70       	andi	r25, 0x01	; 1
    ac5a:	c9 2e       	mov	r12, r25
    ac5c:	c4 0e       	add	r12, r20
    ac5e:	6c 0d       	add	r22, r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    ac60:	ce 01       	movw	r24, r28
    ac62:	02 96       	adiw	r24, 0x02	; 2
    ac64:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    ac68:	60 2f       	mov	r22, r16
    ac6a:	ce 01       	movw	r24, r28
    ac6c:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
}
    ac6e:	df 91       	pop	r29
    ac70:	cf 91       	pop	r28
    ac72:	1f 91       	pop	r17
    ac74:	0f 91       	pop	r16
    ac76:	ef 90       	pop	r14
    ac78:	cf 90       	pop	r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    ac7a:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ac7e <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    ac7e:	ef 92       	push	r14
    ac80:	ff 92       	push	r15
    ac82:	0f 93       	push	r16
    ac84:	1f 93       	push	r17
    ac86:	cf 93       	push	r28
    ac88:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    ac8a:	9d e4       	ldi	r25, 0x4D	; 77
    ac8c:	89 9f       	mul	r24, r25
    ac8e:	80 01       	movw	r16, r0
    ac90:	11 24       	eor	r1, r1
    ac92:	eb 01       	movw	r28, r22
    ac94:	78 01       	movw	r14, r16
    ac96:	8c ec       	ldi	r24, 0xCC	; 204
    ac98:	e8 1a       	sub	r14, r24
    ac9a:	8d ef       	ldi	r24, 0xFD	; 253
    ac9c:	f8 0a       	sbc	r15, r24
    ac9e:	02 5c       	subi	r16, 0xC2	; 194
    aca0:	1d 4f       	sbci	r17, 0xFD	; 253
    aca2:	69 91       	ld	r22, Y+
    aca4:	c7 01       	movw	r24, r14
    aca6:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    acaa:	fe 01       	movw	r30, r28
    acac:	31 97       	sbiw	r30, 0x01	; 1
    acae:	80 81       	ld	r24, Z
    acb0:	88 23       	and	r24, r24
    acb2:	31 f0       	breq	.+12     	; 0xacc0 <thermostat_program_set_name(unsigned char, char*)+0x42>
    acb4:	9f ef       	ldi	r25, 0xFF	; 255
    acb6:	e9 1a       	sub	r14, r25
    acb8:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    acba:	e0 16       	cp	r14, r16
    acbc:	f1 06       	cpc	r15, r17
    acbe:	89 f7       	brne	.-30     	; 0xaca2 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    acc0:	df 91       	pop	r29
    acc2:	cf 91       	pop	r28
    acc4:	1f 91       	pop	r17
    acc6:	0f 91       	pop	r16
    acc8:	ff 90       	pop	r15
    acca:	ef 90       	pop	r14
    accc:	08 95       	ret

0000acce <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    acce:	ef 92       	push	r14
    acd0:	ff 92       	push	r15
    acd2:	0f 93       	push	r16
    acd4:	1f 93       	push	r17
    acd6:	cf 93       	push	r28
    acd8:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    acda:	e8 2e       	mov	r14, r24
    acdc:	f1 2c       	mov	r15, r1
    acde:	91 e2       	ldi	r25, 0x21	; 33
    ace0:	89 9f       	mul	r24, r25
    ace2:	e0 01       	movw	r28, r0
    ace4:	11 24       	eor	r1, r1
    ace6:	87 01       	movw	r16, r14
    ace8:	00 0f       	add	r16, r16
    acea:	11 1f       	adc	r17, r17
    acec:	00 0f       	add	r16, r16
    acee:	11 1f       	adc	r17, r17
    acf0:	f8 01       	movw	r30, r16
    acf2:	e2 52       	subi	r30, 0x22	; 34
    acf4:	f6 4f       	sbci	r31, 0xF6	; 246
    acf6:	40 81       	ld	r20, Z
    acf8:	51 81       	ldd	r21, Z+1	; 0x01
    acfa:	62 81       	ldd	r22, Z+2	; 0x02
    acfc:	73 81       	ldd	r23, Z+3	; 0x03
    acfe:	ce 01       	movw	r24, r28
    ad00:	80 5a       	subi	r24, 0xA0	; 160
    ad02:	9e 4f       	sbci	r25, 0xFE	; 254
    ad04:	0e 94 f5 9d 	call	0x13bea	; 0x13bea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    ad08:	f8 01       	movw	r30, r16
    ad0a:	ee 50       	subi	r30, 0x0E	; 14
    ad0c:	f6 4f       	sbci	r31, 0xF6	; 246
    ad0e:	40 81       	ld	r20, Z
    ad10:	51 81       	ldd	r21, Z+1	; 0x01
    ad12:	62 81       	ldd	r22, Z+2	; 0x02
    ad14:	73 81       	ldd	r23, Z+3	; 0x03
    ad16:	ce 01       	movw	r24, r28
    ad18:	8c 59       	subi	r24, 0x9C	; 156
    ad1a:	9e 4f       	sbci	r25, 0xFE	; 254
    ad1c:	0e 94 f5 9d 	call	0x13bea	; 0x13bea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    ad20:	f8 01       	movw	r30, r16
    ad22:	ea 5f       	subi	r30, 0xFA	; 250
    ad24:	f5 4f       	sbci	r31, 0xF5	; 245
    ad26:	40 81       	ld	r20, Z
    ad28:	51 81       	ldd	r21, Z+1	; 0x01
    ad2a:	62 81       	ldd	r22, Z+2	; 0x02
    ad2c:	73 81       	ldd	r23, Z+3	; 0x03
    ad2e:	ce 01       	movw	r24, r28
    ad30:	88 59       	subi	r24, 0x98	; 152
    ad32:	9e 4f       	sbci	r25, 0xFE	; 254
    ad34:	0e 94 f5 9d 	call	0x13bea	; 0x13bea <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ad38:	f7 01       	movw	r30, r14
    ad3a:	e6 5e       	subi	r30, 0xE6	; 230
    ad3c:	f5 4f       	sbci	r31, 0xF5	; 245
    ad3e:	60 81       	ld	r22, Z
    ad40:	ce 01       	movw	r24, r28
    ad42:	84 59       	subi	r24, 0x94	; 148
    ad44:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
}
    ad46:	df 91       	pop	r29
    ad48:	cf 91       	pop	r28
    ad4a:	1f 91       	pop	r17
    ad4c:	0f 91       	pop	r16
    ad4e:	ff 90       	pop	r15
    ad50:	ef 90       	pop	r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ad52:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ad56 <helper_thermostat_set_pid_time(unsigned char, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timehfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
void helper_thermostat_set_pid_d(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint8_t args1, float args2, uint8_t args3)
{
    ad56:	0f 93       	push	r16
    ad58:	1f 93       	push	r17
    ad5a:	cf 93       	push	r28
    ad5c:	df 93       	push	r29
    ad5e:	c8 2f       	mov	r28, r24
    ad60:	d2 2f       	mov	r29, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
  printf("%d, %d, %d\n", args1, args2, args3);
    ad62:	08 2f       	mov	r16, r24
    ad64:	10 e0       	ldi	r17, 0x00	; 0
    ad66:	1f 92       	push	r1
    ad68:	2f 93       	push	r18
    ad6a:	7f 93       	push	r23
    ad6c:	6f 93       	push	r22
    ad6e:	5f 93       	push	r21
    ad70:	4f 93       	push	r20
    ad72:	1f 92       	push	r1
    ad74:	8f 93       	push	r24
    ad76:	83 e6       	ldi	r24, 0x63	; 99
    ad78:	93 e0       	ldi	r25, 0x03	; 3
    ad7a:	9f 93       	push	r25
    ad7c:	8f 93       	push	r24
    ad7e:	0e 94 ef bd 	call	0x17bde	; 0x17bde <printf>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    ad82:	f8 01       	movw	r30, r16
    ad84:	e6 5e       	subi	r30, 0xE6	; 230
    ad86:	f5 4f       	sbci	r31, 0xF5	; 245
    ad88:	d0 83       	st	Z, r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    ad8a:	8c 2f       	mov	r24, r28
    ad8c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    ad90:	8d b7       	in	r24, 0x3d	; 61
    ad92:	9e b7       	in	r25, 0x3e	; 62
    ad94:	0a 96       	adiw	r24, 0x0a	; 10
    ad96:	0f b6       	in	r0, 0x3f	; 63
    ad98:	f8 94       	cli
    ad9a:	9e bf       	out	0x3e, r25	; 62
    ad9c:	0f be       	out	0x3f, r0	; 63
    ad9e:	8d bf       	out	0x3d, r24	; 61
    ada0:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timehfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
  thermostat_ring_pid_set_time(args1, args3);
}
    ada2:	df 91       	pop	r29
    ada4:	cf 91       	pop	r28
    ada6:	1f 91       	pop	r17
    ada8:	0f 91       	pop	r16
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
    adaa:	0c 94 67 56 	jmp	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>

0000adae <helper_thermostat_set_pid_d(unsigned char, float)>:
_Z27helper_thermostat_set_pid_dhf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
void helper_thermostat_set_pid_i(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint8_t args1, float args2)
{
    adae:	cf 93       	push	r28
    adb0:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    adb2:	84 e0       	ldi	r24, 0x04	; 4
    adb4:	c8 9f       	mul	r28, r24
    adb6:	f0 01       	movw	r30, r0
    adb8:	11 24       	eor	r1, r1
    adba:	ea 5f       	subi	r30, 0xFA	; 250
    adbc:	f5 4f       	sbci	r31, 0xF5	; 245
    adbe:	40 83       	st	Z, r20
    adc0:	51 83       	std	Z+1, r21	; 0x01
    adc2:	62 83       	std	Z+2, r22	; 0x02
    adc4:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    adc6:	8c 2f       	mov	r24, r28
    adc8:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    adcc:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_dhf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
  thermostat_ring_pid_set_kd(args1, args2);
}
    adce:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
    add0:	0c 94 67 56 	jmp	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>

0000add4 <helper_thermostat_set_pid_i(unsigned char, float)>:
_Z27helper_thermostat_set_pid_ihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
void helper_thermostat_set_pid_p(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint8_t args1, float args2)
{
    add4:	cf 93       	push	r28
    add6:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    add8:	84 e0       	ldi	r24, 0x04	; 4
    adda:	c8 9f       	mul	r28, r24
    addc:	f0 01       	movw	r30, r0
    adde:	11 24       	eor	r1, r1
    ade0:	ee 50       	subi	r30, 0x0E	; 14
    ade2:	f6 4f       	sbci	r31, 0xF6	; 246
    ade4:	40 83       	st	Z, r20
    ade6:	51 83       	std	Z+1, r21	; 0x01
    ade8:	62 83       	std	Z+2, r22	; 0x02
    adea:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    adec:	8c 2f       	mov	r24, r28
    adee:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    adf2:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
  thermostat_ring_pid_set_ki(args1, args2);
}
    adf4:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
    adf6:	0c 94 67 56 	jmp	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>

0000adfa <helper_thermostat_set_pid_p(unsigned char, float)>:
_Z27helper_thermostat_set_pid_phf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint8_t args1, float args2)
{
    adfa:	cf 93       	push	r28
    adfc:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    adfe:	84 e0       	ldi	r24, 0x04	; 4
    ae00:	c8 9f       	mul	r28, r24
    ae02:	f0 01       	movw	r30, r0
    ae04:	11 24       	eor	r1, r1
    ae06:	e2 52       	subi	r30, 0x22	; 34
    ae08:	f6 4f       	sbci	r31, 0xF6	; 246
    ae0a:	40 83       	st	Z, r20
    ae0c:	51 83       	std	Z+1, r21	; 0x01
    ae0e:	62 83       	std	Z+2, r22	; 0x02
    ae10:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    ae12:	8c 2f       	mov	r24, r28
    ae14:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    ae18:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_phf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
  thermostat_ring_pid_set_kp(args1, args2);
}
    ae1a:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
    ae1c:	0c 94 67 56 	jmp	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>

0000ae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    ae20:	21 e2       	ldi	r18, 0x21	; 33
    ae22:	82 9f       	mul	r24, r18
    ae24:	c0 01       	movw	r24, r0
    ae26:	11 24       	eor	r1, r1
    ae28:	82 5a       	subi	r24, 0xA2	; 162
    ae2a:	9e 4f       	sbci	r25, 0xFE	; 254
    ae2c:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ae30 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z26button_click_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6219
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/
void button_click_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    ae30:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6220
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    ae32:	60 e0       	ldi	r22, 0x00	; 0
    ae34:	44 23       	and	r20, r20
    ae36:	61 f0       	breq	.+24     	; 0xae50 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6221
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    ae38:	61 e0       	ldi	r22, 0x01	; 1
    ae3a:	41 30       	cpi	r20, 0x01	; 1
    ae3c:	49 f0       	breq	.+18     	; 0xae50 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6222
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    ae3e:	67 e0       	ldi	r22, 0x07	; 7
    ae40:	42 30       	cpi	r20, 0x02	; 2
    ae42:	31 f0       	breq	.+12     	; 0xae50 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6223
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    ae44:	62 e0       	ldi	r22, 0x02	; 2
    ae46:	43 30       	cpi	r20, 0x03	; 3
    ae48:	19 f0       	breq	.+6      	; 0xae50 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6224
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    ae4a:	44 30       	cpi	r20, 0x04	; 4
    ae4c:	19 f4       	brne	.+6      	; 0xae54 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x24>
    ae4e:	68 e0       	ldi	r22, 0x08	; 8
    ae50:	0c 94 10 57 	jmp	0xae20	; 0xae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6225
}
    ae54:	08 95       	ret

0000ae56 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    ae56:	1f 93       	push	r17
    ae58:	cf 93       	push	r28
    ae5a:	df 93       	push	r29
    ae5c:	16 2f       	mov	r17, r22
    ae5e:	67 2f       	mov	r22, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    ae60:	91 e2       	ldi	r25, 0x21	; 33
    ae62:	89 9f       	mul	r24, r25
    ae64:	e0 01       	movw	r28, r0
    ae66:	11 24       	eor	r1, r1
    ae68:	ce 01       	movw	r24, r28
    ae6a:	8a 5a       	subi	r24, 0xAA	; 170
    ae6c:	9e 4f       	sbci	r25, 0xFE	; 254
    ae6e:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    ae72:	61 2f       	mov	r22, r17
    ae74:	ce 01       	movw	r24, r28
    ae76:	89 5a       	subi	r24, 0xA9	; 169
    ae78:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:160
}
    ae7a:	df 91       	pop	r29
    ae7c:	cf 91       	pop	r28
    ae7e:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    ae80:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ae84 <helper_thermostat_set_mezni(unsigned char, float)>:
_Z27helper_thermostat_set_meznihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2641
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- zatim bez funkce
*/
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
    ae84:	cf 93       	push	r28
    ae86:	c8 2f       	mov	r28, r24
    ae88:	cb 01       	movw	r24, r22
    ae8a:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    ae8c:	20 e0       	ldi	r18, 0x00	; 0
    ae8e:	30 e0       	ldi	r19, 0x00	; 0
    ae90:	40 e2       	ldi	r20, 0x20	; 32
    ae92:	51 e4       	ldi	r21, 0x41	; 65
    ae94:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
    ae98:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    ae9c:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
}
    ae9e:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- zatim bez funkce
*/
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    aea0:	0c 94 2b 57 	jmp	0xae56	; 0xae56 <thermostat_ring_set_mezni(unsigned char, int)>

0000aea4 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    aea4:	df 92       	push	r13
    aea6:	ef 92       	push	r14
    aea8:	ff 92       	push	r15
    aeaa:	0f 93       	push	r16
    aeac:	1f 93       	push	r17
    aeae:	cf 93       	push	r28
    aeb0:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    aeb2:	91 e2       	ldi	r25, 0x21	; 33
    aeb4:	89 9f       	mul	r24, r25
    aeb6:	e0 01       	movw	r28, r0
    aeb8:	11 24       	eor	r1, r1
    aeba:	7b 01       	movw	r14, r22
    aebc:	8e 01       	movw	r16, r28
    aebe:	04 5b       	subi	r16, 0xB4	; 180
    aec0:	1e 4f       	sbci	r17, 0xFE	; 254
    aec2:	cb 5a       	subi	r28, 0xAB	; 171
    aec4:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    aec6:	f7 01       	movw	r30, r14
    aec8:	d1 90       	ld	r13, Z+
    aeca:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    aecc:	6d 2d       	mov	r22, r13
    aece:	c8 01       	movw	r24, r16
    aed0:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    aed4:	dd 20       	and	r13, r13
    aed6:	29 f0       	breq	.+10     	; 0xaee2 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    aed8:	0f 5f       	subi	r16, 0xFF	; 255
    aeda:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    aedc:	0c 17       	cp	r16, r28
    aede:	1d 07       	cpc	r17, r29
    aee0:	91 f7       	brne	.-28     	; 0xaec6 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    aee2:	df 91       	pop	r29
    aee4:	cf 91       	pop	r28
    aee6:	1f 91       	pop	r17
    aee8:	0f 91       	pop	r16
    aeea:	ff 90       	pop	r15
    aeec:	ef 90       	pop	r14
    aeee:	df 90       	pop	r13
    aef0:	08 95       	ret

0000aef2 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    aef2:	8f 92       	push	r8
    aef4:	9f 92       	push	r9
    aef6:	af 92       	push	r10
    aef8:	bf 92       	push	r11
    aefa:	ef 92       	push	r14
    aefc:	ff 92       	push	r15
    aefe:	0f 93       	push	r16
    af00:	1f 93       	push	r17
    af02:	cf 93       	push	r28
    af04:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    af06:	e8 2e       	mov	r14, r24
    af08:	f1 2c       	mov	r15, r1
    af0a:	87 01       	movw	r16, r14
    af0c:	00 0f       	add	r16, r16
    af0e:	11 1f       	adc	r17, r17
    af10:	00 0f       	add	r16, r16
    af12:	11 1f       	adc	r17, r17
    af14:	f8 01       	movw	r30, r16
    af16:	e2 52       	subi	r30, 0x22	; 34
    af18:	f6 4f       	sbci	r31, 0xF6	; 246
    af1a:	81 2c       	mov	r8, r1
    af1c:	91 2c       	mov	r9, r1
    af1e:	90 e8       	ldi	r25, 0x80	; 128
    af20:	a9 2e       	mov	r10, r25
    af22:	9f e3       	ldi	r25, 0x3F	; 63
    af24:	b9 2e       	mov	r11, r25
    af26:	80 82       	st	Z, r8
    af28:	91 82       	std	Z+1, r9	; 0x01
    af2a:	a2 82       	std	Z+2, r10	; 0x02
    af2c:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    af2e:	8c 2f       	mov	r24, r28
    af30:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    af34:	8c 2f       	mov	r24, r28
    af36:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    af3a:	f8 01       	movw	r30, r16
    af3c:	ee 50       	subi	r30, 0x0E	; 14
    af3e:	f6 4f       	sbci	r31, 0xF6	; 246
    af40:	80 e0       	ldi	r24, 0x00	; 0
    af42:	90 e0       	ldi	r25, 0x00	; 0
    af44:	a0 e0       	ldi	r26, 0x00	; 0
    af46:	bf e3       	ldi	r27, 0x3F	; 63
    af48:	80 83       	st	Z, r24
    af4a:	91 83       	std	Z+1, r25	; 0x01
    af4c:	a2 83       	std	Z+2, r26	; 0x02
    af4e:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    af50:	8c 2f       	mov	r24, r28
    af52:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    af56:	8c 2f       	mov	r24, r28
    af58:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    af5c:	f8 01       	movw	r30, r16
    af5e:	ea 5f       	subi	r30, 0xFA	; 250
    af60:	f5 4f       	sbci	r31, 0xF5	; 245
    af62:	80 82       	st	Z, r8
    af64:	91 82       	std	Z+1, r9	; 0x01
    af66:	a2 82       	std	Z+2, r10	; 0x02
    af68:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    af6a:	8c 2f       	mov	r24, r28
    af6c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    af70:	8c 2f       	mov	r24, r28
    af72:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    af76:	f7 01       	movw	r30, r14
    af78:	e6 5e       	subi	r30, 0xE6	; 230
    af7a:	f5 4f       	sbci	r31, 0xF5	; 245
    af7c:	8c e3       	ldi	r24, 0x3C	; 60
    af7e:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    af80:	8c 2f       	mov	r24, r28
    af82:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    af86:	8c 2f       	mov	r24, r28
    af88:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    af8c:	81 e2       	ldi	r24, 0x21	; 33
    af8e:	c8 9f       	mul	r28, r24
    af90:	80 01       	movw	r16, r0
    af92:	11 24       	eor	r1, r1
    af94:	6f ef       	ldi	r22, 0xFF	; 255
    af96:	c8 01       	movw	r24, r16
    af98:	84 5a       	subi	r24, 0xA4	; 164
    af9a:	9e 4f       	sbci	r25, 0xFE	; 254
    af9c:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    afa0:	6c ed       	ldi	r22, 0xDC	; 220
    afa2:	70 e0       	ldi	r23, 0x00	; 0
    afa4:	8c 2f       	mov	r24, r28
    afa6:	0e 94 2b 57 	call	0xae56	; 0xae56 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    afaa:	6f ef       	ldi	r22, 0xFF	; 255
    afac:	c8 01       	movw	r24, r16
    afae:	85 5a       	subi	r24, 0xA5	; 165
    afb0:	9e 4f       	sbci	r25, 0xFE	; 254
    afb2:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    afb6:	f7 01       	movw	r30, r14
    afb8:	ea 58       	subi	r30, 0x8A	; 138
    afba:	f5 4f       	sbci	r31, 0xF5	; 245
    afbc:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    afbe:	6f ef       	ldi	r22, 0xFF	; 255
    afc0:	c8 01       	movw	r24, r16
    afc2:	83 5a       	subi	r24, 0xA3	; 163
    afc4:	9e 4f       	sbci	r25, 0xFE	; 254
    afc6:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    afca:	6f ef       	ldi	r22, 0xFF	; 255
    afcc:	c8 01       	movw	r24, r16
    afce:	81 5a       	subi	r24, 0xA1	; 161
    afd0:	9e 4f       	sbci	r25, 0xFE	; 254
    afd2:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    afd6:	60 e0       	ldi	r22, 0x00	; 0
    afd8:	8c 2f       	mov	r24, r28
    afda:	0e 94 10 57 	call	0xae20	; 0xae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    afde:	6f e6       	ldi	r22, 0x6F	; 111
    afe0:	73 e0       	ldi	r23, 0x03	; 3
    afe2:	8c 2f       	mov	r24, r28
    afe4:	0e 94 52 57 	call	0xaea4	; 0xaea4 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    afe8:	60 e0       	ldi	r22, 0x00	; 0
    afea:	c8 01       	movw	r24, r16
    afec:	88 5a       	subi	r24, 0xA8	; 168
    afee:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    aff0:	cf 91       	pop	r28
    aff2:	1f 91       	pop	r17
    aff4:	0f 91       	pop	r16
    aff6:	ff 90       	pop	r15
    aff8:	ef 90       	pop	r14
    affa:	bf 90       	pop	r11
    affc:	af 90       	pop	r10
    affe:	9f 90       	pop	r9
    b000:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    b002:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b006 <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)>:
_Z25helper_set_term_ring_namehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6126
   args2
   args3
   promene nemaji zadny vyznam
*/
void helper_set_term_ring_name(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b006:	cf 93       	push	r28
    b008:	df 93       	push	r29
    b00a:	00 d0       	rcall	.+0      	; 0xb00c <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0x6>
    b00c:	00 d0       	rcall	.+0      	; 0xb00e <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0x8>
    b00e:	00 d0       	rcall	.+0      	; 0xb010 <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0xa>
    b010:	1f 92       	push	r1
    b012:	cd b7       	in	r28, 0x3d	; 61
    b014:	de b7       	in	r29, 0x3e	; 62
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    b016:	69 e3       	ldi	r22, 0x39	; 57
    b018:	79 e0       	ldi	r23, 0x09	; 9
    b01a:	ce 01       	movw	r24, r28
    b01c:	01 96       	adiw	r24, 0x01	; 1
    b01e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z25helper_set_term_ring_namehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6130
void helper_set_term_ring_name(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char name[10];
  display_element_get_string(name);
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    b022:	be 01       	movw	r22, r28
    b024:	6f 5f       	subi	r22, 0xFF	; 255
    b026:	7f 4f       	sbci	r23, 0xFF	; 255
    b028:	80 91 37 09 	lds	r24, 0x0937	; 0x800937 <dialog_set_string_args>
    b02c:	0e 94 52 57 	call	0xaea4	; 0xaea4 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6131
}
    b030:	2a 96       	adiw	r28, 0x0a	; 10
    b032:	0f b6       	in	r0, 0x3f	; 63
    b034:	f8 94       	cli
    b036:	de bf       	out	0x3e, r29	; 62
    b038:	0f be       	out	0x3f, r0	; 63
    b03a:	cd bf       	out	0x3d, r28	; 61
    b03c:	df 91       	pop	r29
    b03e:	cf 91       	pop	r28
    b040:	08 95       	ret

0000b042 <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>:
_Z21term_ring_do_activatehhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    b042:	21 e2       	ldi	r18, 0x21	; 33
    b044:	82 9f       	mul	r24, r18
    b046:	c0 01       	movw	r24, r0
    b048:	11 24       	eor	r1, r1
    b04a:	61 e0       	ldi	r22, 0x01	; 1
    b04c:	83 5a       	subi	r24, 0xA3	; 163
    b04e:	9e 4f       	sbci	r25, 0xFE	; 254
    b050:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b054 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>:
_Z40button_click_set_show_default_ring_inputjjh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    b054:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b058:	21 e2       	ldi	r18, 0x21	; 33
    b05a:	82 9f       	mul	r24, r18
    b05c:	c0 01       	movw	r24, r0
    b05e:	11 24       	eor	r1, r1
    b060:	64 2f       	mov	r22, r20
    b062:	84 5a       	subi	r24, 0xA4	; 164
    b064:	9e 4f       	sbci	r25, 0xFE	; 254
    b066:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b06a <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    b06a:	af 92       	push	r10
    b06c:	bf 92       	push	r11
    b06e:	cf 92       	push	r12
    b070:	df 92       	push	r13
    b072:	ef 92       	push	r14
    b074:	ff 92       	push	r15
    b076:	0f 93       	push	r16
    b078:	1f 93       	push	r17
    b07a:	cf 93       	push	r28
    b07c:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    b07e:	86 30       	cpi	r24, 0x06	; 6
    b080:	08 f0       	brcs	.+2      	; 0xb084 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    b082:	49 c0       	rjmp	.+146    	; 0xb116 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    b084:	6b 01       	movw	r12, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    b086:	96 e1       	ldi	r25, 0x16	; 22
    b088:	89 9f       	mul	r24, r25
    b08a:	e0 01       	movw	r28, r0
    b08c:	11 24       	eor	r1, r1
    b08e:	f6 01       	movw	r30, r12
    b090:	61 91       	ld	r22, Z+
    b092:	7f 01       	movw	r14, r30
    b094:	ce 01       	movw	r24, r28
    b096:	88 53       	subi	r24, 0x38	; 56
    b098:	9f 4f       	sbci	r25, 0xFF	; 255
    b09a:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b09e:	8e 01       	movw	r16, r28
    b0a0:	07 53       	subi	r16, 0x37	; 55
    b0a2:	1f 4f       	sbci	r17, 0xFF	; 255
    b0a4:	5e 01       	movw	r10, r28
    b0a6:	f1 ed       	ldi	r31, 0xD1	; 209
    b0a8:	af 0e       	add	r10, r31
    b0aa:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    b0ac:	f7 01       	movw	r30, r14
    b0ae:	61 91       	ld	r22, Z+
    b0b0:	7f 01       	movw	r14, r30
    b0b2:	c8 01       	movw	r24, r16
    b0b4:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    b0b8:	f7 01       	movw	r30, r14
    b0ba:	62 85       	ldd	r22, Z+10	; 0x0a
    b0bc:	c8 01       	movw	r24, r16
    b0be:	0b 96       	adiw	r24, 0x0b	; 11
    b0c0:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b0c4:	0f 5f       	subi	r16, 0xFF	; 255
    b0c6:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    b0c8:	0a 15       	cp	r16, r10
    b0ca:	1b 05       	cpc	r17, r11
    b0cc:	79 f7       	brne	.-34     	; 0xb0ac <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    b0ce:	f6 01       	movw	r30, r12
    b0d0:	61 85       	ldd	r22, Z+9	; 0x09
    b0d2:	c8 01       	movw	r24, r16
    b0d4:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    b0d8:	f6 01       	movw	r30, r12
    b0da:	63 85       	ldd	r22, Z+11	; 0x0b
    b0dc:	ce 01       	movw	r24, r28
    b0de:	8e 52       	subi	r24, 0x2E	; 46
    b0e0:	9f 4f       	sbci	r25, 0xFF	; 255
    b0e2:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    b0e6:	f6 01       	movw	r30, r12
    b0e8:	62 85       	ldd	r22, Z+10	; 0x0a
    b0ea:	ce 01       	movw	r24, r28
    b0ec:	8d 52       	subi	r24, 0x2D	; 45
    b0ee:	9f 4f       	sbci	r25, 0xFF	; 255
    b0f0:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    b0f4:	f6 01       	movw	r30, r12
    b0f6:	64 89       	ldd	r22, Z+20	; 0x14
    b0f8:	ce 01       	movw	r24, r28
    b0fa:	84 52       	subi	r24, 0x24	; 36
    b0fc:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    b0fe:	df 91       	pop	r29
    b100:	cf 91       	pop	r28
    b102:	1f 91       	pop	r17
    b104:	0f 91       	pop	r16
    b106:	ff 90       	pop	r15
    b108:	ef 90       	pop	r14
    b10a:	df 90       	pop	r13
    b10c:	cf 90       	pop	r12
    b10e:	bf 90       	pop	r11
    b110:	af 90       	pop	r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    b112:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    b116:	df 91       	pop	r29
    b118:	cf 91       	pop	r28
    b11a:	1f 91       	pop	r17
    b11c:	0f 91       	pop	r16
    b11e:	ff 90       	pop	r15
    b120:	ef 90       	pop	r14
    b122:	df 90       	pop	r13
    b124:	cf 90       	pop	r12
    b126:	bf 90       	pop	r11
    b128:	af 90       	pop	r10
    b12a:	08 95       	ret

0000b12c <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    b12c:	ff 92       	push	r15
    b12e:	0f 93       	push	r16
    b130:	1f 93       	push	r17
    b132:	cf 93       	push	r28
    b134:	df 93       	push	r29
    b136:	8c 01       	movw	r16, r24
    b138:	d0 e0       	ldi	r29, 0x00	; 0
    b13a:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    b13c:	f8 01       	movw	r30, r16
    b13e:	f1 90       	ld	r15, Z+
    b140:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    b142:	6f 2d       	mov	r22, r15
    b144:	ce 01       	movw	r24, r28
    b146:	8c 59       	subi	r24, 0x9C	; 156
    b148:	9f 4f       	sbci	r25, 0xFF	; 255
    b14a:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    b14e:	f1 10       	cpse	r15, r1
    b150:	0b c0       	rjmp	.+22     	; 0xb168 <device_set_name(char*)+0x3c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    b152:	60 e0       	ldi	r22, 0x00	; 0
    b154:	ce 01       	movw	r24, r28
    b156:	8b 59       	subi	r24, 0x9B	; 155
    b158:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    b15a:	df 91       	pop	r29
    b15c:	cf 91       	pop	r28
    b15e:	1f 91       	pop	r17
    b160:	0f 91       	pop	r16
    b162:	ff 90       	pop	r15
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    b164:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b168:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b16a:	c9 30       	cpi	r28, 0x09	; 9
    b16c:	d1 05       	cpc	r29, r1
    b16e:	31 f7       	brne	.-52     	; 0xb13c <device_set_name(char*)+0x10>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    b170:	df 91       	pop	r29
    b172:	cf 91       	pop	r28
    b174:	1f 91       	pop	r17
    b176:	0f 91       	pop	r16
    b178:	ff 90       	pop	r15
    b17a:	08 95       	ret

0000b17c <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    b17c:	ef 92       	push	r14
    b17e:	ff 92       	push	r15
    b180:	0f 93       	push	r16
    b182:	1f 93       	push	r17
    b184:	cf 93       	push	r28
    b186:	df 93       	push	r29
    b188:	06 e8       	ldi	r16, 0x86	; 134
    b18a:	1c e0       	ldi	r17, 0x0C	; 12
    b18c:	ce e6       	ldi	r28, 0x6E	; 110
    b18e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    b190:	f8 01       	movw	r30, r16
    b192:	61 91       	ld	r22, Z+
    b194:	8f 01       	movw	r16, r30
    b196:	ce 01       	movw	r24, r28
    b198:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b19c:	21 96       	adiw	r28, 0x01	; 1
    b19e:	c4 37       	cpi	r28, 0x74	; 116
    b1a0:	d1 05       	cpc	r29, r1
    b1a2:	b1 f7       	brne	.-20     	; 0xb190 <save_setup_network()+0x14>
    b1a4:	0c e8       	ldi	r16, 0x8C	; 140
    b1a6:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    b1a8:	f8 01       	movw	r30, r16
    b1aa:	61 91       	ld	r22, Z+
    b1ac:	8f 01       	movw	r16, r30
    b1ae:	ce 01       	movw	r24, r28
    b1b0:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b1b4:	21 96       	adiw	r28, 0x01	; 1
    b1b6:	c8 37       	cpi	r28, 0x78	; 120
    b1b8:	d1 05       	cpc	r29, r1
    b1ba:	b1 f7       	brne	.-20     	; 0xb1a8 <save_setup_network()+0x2c>
    b1bc:	00 e9       	ldi	r16, 0x90	; 144
    b1be:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    b1c0:	f8 01       	movw	r30, r16
    b1c2:	61 91       	ld	r22, Z+
    b1c4:	8f 01       	movw	r16, r30
    b1c6:	ce 01       	movw	r24, r28
    b1c8:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b1cc:	21 96       	adiw	r28, 0x01	; 1
    b1ce:	cc 37       	cpi	r28, 0x7C	; 124
    b1d0:	d1 05       	cpc	r29, r1
    b1d2:	b1 f7       	brne	.-20     	; 0xb1c0 <save_setup_network()+0x44>
    b1d4:	28 e9       	ldi	r18, 0x98	; 152
    b1d6:	e2 2e       	mov	r14, r18
    b1d8:	2c e0       	ldi	r18, 0x0C	; 12
    b1da:	f2 2e       	mov	r15, r18
    b1dc:	00 e8       	ldi	r16, 0x80	; 128
    b1de:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    b1e0:	f7 01       	movw	r30, r14
    b1e2:	61 91       	ld	r22, Z+
    b1e4:	7f 01       	movw	r14, r30
    b1e6:	c8 01       	movw	r24, r16
    b1e8:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b1ec:	0f 5f       	subi	r16, 0xFF	; 255
    b1ee:	1f 4f       	sbci	r17, 0xFF	; 255
    b1f0:	04 38       	cpi	r16, 0x84	; 132
    b1f2:	11 05       	cpc	r17, r1
    b1f4:	a9 f7       	brne	.-22     	; 0xb1e0 <save_setup_network()+0x64>
    b1f6:	94 e9       	ldi	r25, 0x94	; 148
    b1f8:	e9 2e       	mov	r14, r25
    b1fa:	9c e0       	ldi	r25, 0x0C	; 12
    b1fc:	f9 2e       	mov	r15, r25
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    b1fe:	f7 01       	movw	r30, r14
    b200:	61 91       	ld	r22, Z+
    b202:	7f 01       	movw	r14, r30
    b204:	ce 01       	movw	r24, r28
    b206:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b20a:	21 96       	adiw	r28, 0x01	; 1
    b20c:	c0 38       	cpi	r28, 0x80	; 128
    b20e:	d1 05       	cpc	r29, r1
    b210:	b1 f7       	brne	.-20     	; 0xb1fe <save_setup_network()+0x82>
    b212:	8c e9       	ldi	r24, 0x9C	; 156
    b214:	e8 2e       	mov	r14, r24
    b216:	8c e0       	ldi	r24, 0x0C	; 12
    b218:	f8 2e       	mov	r15, r24
    b21a:	c4 e6       	ldi	r28, 0x64	; 100
    b21c:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    b21e:	f7 01       	movw	r30, r14
    b220:	61 91       	ld	r22, Z+
    b222:	7f 01       	movw	r14, r30
    b224:	ce 01       	movw	r24, r28
    b226:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b22a:	21 96       	adiw	r28, 0x01	; 1
    b22c:	cd 36       	cpi	r28, 0x6D	; 109
    b22e:	d1 05       	cpc	r29, r1
    b230:	b1 f7       	brne	.-20     	; 0xb21e <save_setup_network()+0xa2>
    b232:	c6 ea       	ldi	r28, 0xA6	; 166
    b234:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    b236:	69 91       	ld	r22, Y+
    b238:	c8 01       	movw	r24, r16
    b23a:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b23e:	0f 5f       	subi	r16, 0xFF	; 255
    b240:	1f 4f       	sbci	r17, 0xFF	; 255
    b242:	08 38       	cpi	r16, 0x88	; 136
    b244:	11 05       	cpc	r17, r1
    b246:	b9 f7       	brne	.-18     	; 0xb236 <save_setup_network()+0xba>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    b248:	60 91 ab 0c 	lds	r22, 0x0CAB	; 0x800cab <device+0x25>
    b24c:	88 e8       	ldi	r24, 0x88	; 136
    b24e:	90 e0       	ldi	r25, 0x00	; 0
    b250:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    b254:	60 91 aa 0c 	lds	r22, 0x0CAA	; 0x800caa <device+0x24>
    b258:	89 e8       	ldi	r24, 0x89	; 137
    b25a:	90 e0       	ldi	r25, 0x00	; 0
    b25c:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b260:	0c ea       	ldi	r16, 0xAC	; 172
    b262:	1c e0       	ldi	r17, 0x0C	; 12
    b264:	ca e8       	ldi	r28, 0x8A	; 138
    b266:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    b268:	f8 01       	movw	r30, r16
    b26a:	61 91       	ld	r22, Z+
    b26c:	8f 01       	movw	r16, r30
    b26e:	ce 01       	movw	r24, r28
    b270:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b274:	21 96       	adiw	r28, 0x01	; 1
    b276:	ce 39       	cpi	r28, 0x9E	; 158
    b278:	d1 05       	cpc	r29, r1
    b27a:	b1 f7       	brne	.-20     	; 0xb268 <save_setup_network()+0xec>
    b27c:	00 ec       	ldi	r16, 0xC0	; 192
    b27e:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    b280:	f8 01       	movw	r30, r16
    b282:	61 91       	ld	r22, Z+
    b284:	8f 01       	movw	r16, r30
    b286:	ce 01       	movw	r24, r28
    b288:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b28c:	21 96       	adiw	r28, 0x01	; 1
    b28e:	c2 3b       	cpi	r28, 0xB2	; 178
    b290:	d1 05       	cpc	r29, r1
    b292:	b1 f7       	brne	.-20     	; 0xb280 <save_setup_network()+0x104>
    b294:	04 ed       	ldi	r16, 0xD4	; 212
    b296:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    b298:	f8 01       	movw	r30, r16
    b29a:	61 91       	ld	r22, Z+
    b29c:	8f 01       	movw	r16, r30
    b29e:	ce 01       	movw	r24, r28
    b2a0:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b2a4:	21 96       	adiw	r28, 0x01	; 1
    b2a6:	c6 3b       	cpi	r28, 0xB6	; 182
    b2a8:	d1 05       	cpc	r29, r1
    b2aa:	b1 f7       	brne	.-20     	; 0xb298 <save_setup_network()+0x11c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:54
}
    b2ac:	df 91       	pop	r29
    b2ae:	cf 91       	pop	r28
    b2b0:	1f 91       	pop	r17
    b2b2:	0f 91       	pop	r16
    b2b4:	ff 90       	pop	r15
    b2b6:	ef 90       	pop	r14
    b2b8:	08 95       	ret

0000b2ba <remote_tds_set_name(unsigned char, char*) [clone .part.22]>:
_Z19remote_tds_set_namehPc.part.22():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    b2ba:	df 92       	push	r13
    b2bc:	ef 92       	push	r14
    b2be:	ff 92       	push	r15
    b2c0:	0f 93       	push	r16
    b2c2:	1f 93       	push	r17
    b2c4:	cf 93       	push	r28
    b2c6:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    b2c8:	94 e1       	ldi	r25, 0x14	; 20
    b2ca:	89 9f       	mul	r24, r25
    b2cc:	e0 01       	movw	r28, r0
    b2ce:	11 24       	eor	r1, r1
    b2d0:	7b 01       	movw	r14, r22
    b2d2:	8e 01       	movw	r16, r28
    b2d4:	06 55       	subi	r16, 0x56	; 86
    b2d6:	1a 4f       	sbci	r17, 0xFA	; 250
    b2d8:	c4 54       	subi	r28, 0x44	; 68
    b2da:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    b2dc:	f7 01       	movw	r30, r14
    b2de:	d1 90       	ld	r13, Z+
    b2e0:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    b2e2:	6d 2d       	mov	r22, r13
    b2e4:	c8 01       	movw	r24, r16
    b2e6:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3104
      if (t == 0) break;
    b2ea:	dd 20       	and	r13, r13
    b2ec:	29 f0       	breq	.+10     	; 0xb2f8 <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x3e>
    b2ee:	0f 5f       	subi	r16, 0xFF	; 255
    b2f0:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    b2f2:	0c 17       	cp	r16, r28
    b2f4:	1d 07       	cpc	r17, r29
    b2f6:	91 f7       	brne	.-28     	; 0xb2dc <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    b2f8:	df 91       	pop	r29
    b2fa:	cf 91       	pop	r28
    b2fc:	1f 91       	pop	r17
    b2fe:	0f 91       	pop	r16
    b300:	ff 90       	pop	r15
    b302:	ef 90       	pop	r14
    b304:	df 90       	pop	r13
    b306:	08 95       	ret

0000b308 <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_show_default_temphhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5931
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3)
{
  default_show_temp = args3;
    b308:	40 93 05 09 	sts	0x0905, r20	; 0x800905 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    b30c:	64 2f       	mov	r22, r20
    b30e:	8d e5       	ldi	r24, 0x5D	; 93
    b310:	90 e0       	ldi	r25, 0x00	; 0
    b312:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b316 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    b316:	cf 93       	push	r28
    b318:	df 93       	push	r29
    b31a:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    b31c:	8a 30       	cpi	r24, 0x0A	; 10
    b31e:	78 f4       	brcc	.+30     	; 0xb33e <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    b320:	ba 01       	movw	r22, r20
    b322:	c8 2f       	mov	r28, r24
    b324:	0e 94 5d 59 	call	0xb2ba	; 0xb2ba <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    b328:	24 e1       	ldi	r18, 0x14	; 20
    b32a:	c2 9f       	mul	r28, r18
    b32c:	c0 01       	movw	r24, r0
    b32e:	11 24       	eor	r1, r1
    b330:	6d 2f       	mov	r22, r29
    b332:	83 54       	subi	r24, 0x43	; 67
    b334:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    b336:	df 91       	pop	r29
    b338:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    b33a:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    b33e:	df 91       	pop	r29
    b340:	cf 91       	pop	r28
    b342:	08 95       	ret

0000b344 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    b344:	cf 93       	push	r28
    b346:	df 93       	push	r29
    b348:	cd b7       	in	r28, 0x3d	; 61
    b34a:	de b7       	in	r29, 0x3e	; 62
    b34c:	62 97       	sbiw	r28, 0x12	; 18
    b34e:	0f b6       	in	r0, 0x3f	; 63
    b350:	f8 94       	cli
    b352:	de bf       	out	0x3e, r29	; 62
    b354:	0f be       	out	0x3f, r0	; 63
    b356:	cd bf       	out	0x3d, r28	; 61
    b358:	e1 e0       	ldi	r30, 0x01	; 1
    b35a:	f0 e0       	ldi	r31, 0x00	; 0
    b35c:	ec 0f       	add	r30, r28
    b35e:	fd 1f       	adc	r31, r29
    b360:	e8 0f       	add	r30, r24
    b362:	f1 1d       	adc	r31, r1
    b364:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3130
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    b366:	ae 01       	movw	r20, r28
    b368:	4f 5f       	subi	r20, 0xFF	; 255
    b36a:	5f 4f       	sbci	r21, 0xFF	; 255
    b36c:	60 e0       	ldi	r22, 0x00	; 0
    b36e:	0e 94 8b 59 	call	0xb316	; 0xb316 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3131
}
    b372:	62 96       	adiw	r28, 0x12	; 18
    b374:	0f b6       	in	r0, 0x3f	; 63
    b376:	f8 94       	cli
    b378:	de bf       	out	0x3e, r29	; 62
    b37a:	0f be       	out	0x3f, r0	; 63
    b37c:	cd bf       	out	0x3d, r28	; 61
    b37e:	df 91       	pop	r29
    b380:	cf 91       	pop	r28
    b382:	08 95       	ret

0000b384 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    b384:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5662
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    b386:	0e 94 a2 59 	call	0xb344	; 0xb344 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
  MenuHistoryPrevMenu();
    b38a:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>

0000b38e <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    b38e:	21 e2       	ldi	r18, 0x21	; 33
    b390:	82 9f       	mul	r24, r18
    b392:	c0 01       	movw	r24, r0
    b394:	11 24       	eor	r1, r1
    b396:	82 5a       	subi	r24, 0xA2	; 162
    b398:	9e 4f       	sbci	r25, 0xFE	; 254
    b39a:	0c 94 74 9d 	jmp	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000b39e <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6322
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    b39e:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b3a2:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
    b3a6:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6324
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    return 1;
    b3a8:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6323
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    b3aa:	93 30       	cpi	r25, 0x03	; 3
    b3ac:	31 f0       	breq	.+12     	; 0xb3ba <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    b3ae:	95 30       	cpi	r25, 0x05	; 5
    b3b0:	29 f0       	breq	.+10     	; 0xb3bc <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    b3b2:	98 30       	cpi	r25, 0x08	; 8
    b3b4:	19 f0       	breq	.+6      	; 0xb3bc <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    b3b6:	80 e0       	ldi	r24, 0x00	; 0
    b3b8:	08 95       	ret
    b3ba:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6327
    return 1;

  return 0;
}
    b3bc:	08 95       	ret

0000b3be <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6200
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b3be:	cf 93       	push	r28
    b3c0:	86 2f       	mov	r24, r22
    b3c2:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6203
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
    b3c4:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
    b3c8:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6204
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    b3ca:	c1 11       	cpse	r28, r1
    b3cc:	05 c0       	rjmp	.+10     	; 0xb3d8 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    b3ce:	81 e0       	ldi	r24, 0x01	; 1
    b3d0:	99 23       	and	r25, r25
    b3d2:	39 f0       	breq	.+14     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6202
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 0;
    b3d4:	80 e0       	ldi	r24, 0x00	; 0
    b3d6:	05 c0       	rjmp	.+10     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6205
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    b3d8:	c1 30       	cpi	r28, 0x01	; 1
    b3da:	29 f4       	brne	.+10     	; 0xb3e6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    b3dc:	81 e0       	ldi	r24, 0x01	; 1
    b3de:	91 30       	cpi	r25, 0x01	; 1
    b3e0:	c9 f7       	brne	.-14     	; 0xb3d4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6210
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  return ret;
}
    b3e2:	cf 91       	pop	r28
    b3e4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6206
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    b3e6:	c2 30       	cpi	r28, 0x02	; 2
    b3e8:	21 f4       	brne	.+8      	; 0xb3f2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x34>
    b3ea:	81 e0       	ldi	r24, 0x01	; 1
    b3ec:	97 30       	cpi	r25, 0x07	; 7
    b3ee:	91 f7       	brne	.-28     	; 0xb3d4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b3f0:	f8 cf       	rjmp	.-16     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6207
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    b3f2:	c3 30       	cpi	r28, 0x03	; 3
    b3f4:	21 f4       	brne	.+8      	; 0xb3fe <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x40>
    b3f6:	81 e0       	ldi	r24, 0x01	; 1
    b3f8:	92 30       	cpi	r25, 0x02	; 2
    b3fa:	61 f7       	brne	.-40     	; 0xb3d4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b3fc:	f2 cf       	rjmp	.-28     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6208
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    b3fe:	c4 30       	cpi	r28, 0x04	; 4
    b400:	49 f7       	brne	.-46     	; 0xb3d4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b402:	81 e0       	ldi	r24, 0x01	; 1
    b404:	98 30       	cpi	r25, 0x08	; 8
    b406:	69 f3       	breq	.-38     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    b408:	93 30       	cpi	r25, 0x03	; 3
    b40a:	59 f3       	breq	.-42     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    b40c:	95 30       	cpi	r25, 0x05	; 5
    b40e:	11 f7       	brne	.-60     	; 0xb3d4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b410:	e8 cf       	rjmp	.-48     	; 0xb3e2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>

0000b412 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6188
   prevodni funkce pro dynamicke tlacitko popisku vybraneho operacniho modu
   prevede id modu na textovy popisek
   zadne vstupni parametry
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b412:	0f 93       	push	r16
    b414:	1f 93       	push	r17
    b416:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6189
  strcpy_P(line1, text_current_ring_mode);
    b418:	68 e2       	ldi	r22, 0x28	; 40
    b41a:	7d e3       	ldi	r23, 0x3D	; 61
    b41c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6190
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    b420:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b424:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4478
/*
   prevodni funkce id modu na textovy popisek
*/
void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
    b428:	67 eb       	ldi	r22, 0xB7	; 183
    b42a:	7d e3       	ldi	r23, 0x3D	; 61
    b42c:	88 23       	and	r24, r24
    b42e:	61 f0       	breq	.+24     	; 0xb448 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
    b430:	6d e9       	ldi	r22, 0x9D	; 157
    b432:	7d e3       	ldi	r23, 0x3D	; 61
    b434:	81 30       	cpi	r24, 0x01	; 1
    b436:	41 f0       	breq	.+16     	; 0xb448 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
    b438:	6f e4       	ldi	r22, 0x4F	; 79
    b43a:	7d e3       	ldi	r23, 0x3D	; 61
    b43c:	83 30       	cpi	r24, 0x03	; 3
    b43e:	21 f0       	breq	.+8      	; 0xb448 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
    b440:	82 30       	cpi	r24, 0x02	; 2
    b442:	41 f4       	brne	.+16     	; 0xb454 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x42>
    b444:	67 e6       	ldi	r22, 0x67	; 103
    b446:	7d e3       	ldi	r23, 0x3D	; 61
    b448:	c8 01       	movw	r24, r16
    b44a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6191
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    b44e:	1f 91       	pop	r17
    b450:	0f 91       	pop	r16
    b452:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4482
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
    b454:	84 30       	cpi	r24, 0x04	; 4
    b456:	39 f4       	brne	.+14     	; 0xb466 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    b458:	6f e4       	ldi	r22, 0x4F	; 79
    b45a:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b45c:	c8 01       	movw	r24, r16
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6191
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    b45e:	1f 91       	pop	r17
    b460:	0f 91       	pop	r16
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b462:	0c 94 45 b1 	jmp	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
    b466:	64 e2       	ldi	r22, 0x24	; 36
    b468:	7d e3       	ldi	r23, 0x3D	; 61
    b46a:	86 30       	cpi	r24, 0x06	; 6
    b46c:	b9 f3       	breq	.-18     	; 0xb45c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    b46e:	88 30       	cpi	r24, 0x08	; 8
    b470:	99 f3       	breq	.-26     	; 0xb458 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b472:	87 30       	cpi	r24, 0x07	; 7
    b474:	61 f7       	brne	.-40     	; 0xb44e <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x3c>
    b476:	63 e8       	ldi	r22, 0x83	; 131
    b478:	7d e3       	ldi	r23, 0x3D	; 61
    b47a:	f0 cf       	rjmp	.-32     	; 0xb45c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4a>

0000b47c <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    b47c:	0f 93       	push	r16
    b47e:	1f 93       	push	r17
    b480:	cf 93       	push	r28
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    b482:	91 e2       	ldi	r25, 0x21	; 33
    b484:	89 9f       	mul	r24, r25
    b486:	80 01       	movw	r16, r0
    b488:	11 24       	eor	r1, r1
    b48a:	c8 01       	movw	r24, r16
    b48c:	8a 5a       	subi	r24, 0xAA	; 170
    b48e:	9e 4f       	sbci	r25, 0xFE	; 254
    b490:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b494:	c8 2f       	mov	r28, r24
    b496:	c8 01       	movw	r24, r16
    b498:	89 5a       	subi	r24, 0xA9	; 169
    b49a:	9e 4f       	sbci	r25, 0xFE	; 254
    b49c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b4a0:	2c 2f       	mov	r18, r28
    b4a2:	30 e0       	ldi	r19, 0x00	; 0
    b4a4:	32 2f       	mov	r19, r18
    b4a6:	22 27       	eor	r18, r18
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:155
}
    b4a8:	82 0f       	add	r24, r18
    b4aa:	93 2f       	mov	r25, r19
    b4ac:	91 1d       	adc	r25, r1
    b4ae:	cf 91       	pop	r28
    b4b0:	1f 91       	pop	r17
    b4b2:	0f 91       	pop	r16
    b4b4:	08 95       	ret

0000b4b6 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
}

//saric

void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b4b6:	1f 93       	push	r17
    b4b8:	cf 93       	push	r28
    b4ba:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    b4bc:	10 91 75 0a 	lds	r17, 0x0A75	; 0x800a75 <default_ring>
    b4c0:	81 2f       	mov	r24, r17
    b4c2:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    b4c6:	c9 ea       	ldi	r28, 0xA9	; 169
    b4c8:	d8 e0       	ldi	r29, 0x08	; 8
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666

//saric

void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    b4ca:	bc 01       	movw	r22, r24
    b4cc:	99 0f       	add	r25, r25
    b4ce:	88 0b       	sbc	r24, r24
    b4d0:	99 0b       	sbc	r25, r25
    b4d2:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    b4d6:	20 e0       	ldi	r18, 0x00	; 0
    b4d8:	30 e0       	ldi	r19, 0x00	; 0
    b4da:	40 e2       	ldi	r20, 0x20	; 32
    b4dc:	51 e4       	ldi	r21, 0x41	; 65
    b4de:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    b4e2:	68 83       	st	Y, r22
    b4e4:	79 83       	std	Y+1, r23	; 0x01
    b4e6:	8a 83       	std	Y+2, r24	; 0x02
    b4e8:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  menu_dialog_variable[idx].variable_min = min;
    b4ea:	80 e0       	ldi	r24, 0x00	; 0
    b4ec:	90 e0       	ldi	r25, 0x00	; 0
    b4ee:	a0 e8       	ldi	r26, 0x80	; 128
    b4f0:	b1 e4       	ldi	r27, 0x41	; 65
    b4f2:	88 87       	std	Y+8, r24	; 0x08
    b4f4:	99 87       	std	Y+9, r25	; 0x09
    b4f6:	aa 87       	std	Y+10, r26	; 0x0a
    b4f8:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    b4fa:	80 e0       	ldi	r24, 0x00	; 0
    b4fc:	90 e0       	ldi	r25, 0x00	; 0
    b4fe:	a0 e0       	ldi	r26, 0x00	; 0
    b500:	b2 e4       	ldi	r27, 0x42	; 66
    b502:	8c 83       	std	Y+4, r24	; 0x04
    b504:	9d 83       	std	Y+5, r25	; 0x05
    b506:	ae 83       	std	Y+6, r26	; 0x06
    b508:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    b50a:	80 e0       	ldi	r24, 0x00	; 0
    b50c:	90 e0       	ldi	r25, 0x00	; 0
    b50e:	a0 e0       	ldi	r26, 0x00	; 0
    b510:	bf e3       	ldi	r27, 0x3F	; 63
    b512:	8e 87       	std	Y+14, r24	; 0x0e
    b514:	9f 87       	std	Y+15, r25	; 0x0f
    b516:	a8 8b       	std	Y+16, r26	; 0x10
    b518:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    b51a:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    b51c:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    b51e:	81 e0       	ldi	r24, 0x01	; 1
    b520:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    b522:	82 e4       	ldi	r24, 0x42	; 66
    b524:	97 e5       	ldi	r25, 0x57	; 87
    b526:	9c 8b       	std	Y+20, r25	; 0x14
    b528:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
//saric

void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    b52a:	df 91       	pop	r29
    b52c:	cf 91       	pop	r28
    b52e:	1f 91       	pop	r17
    b530:	08 95       	ret

0000b532 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    b532:	21 e2       	ldi	r18, 0x21	; 33
    b534:	82 9f       	mul	r24, r18
    b536:	c0 01       	movw	r24, r0
    b538:	11 24       	eor	r1, r1
    b53a:	83 5a       	subi	r24, 0xA3	; 163
    b53c:	9e 4f       	sbci	r25, 0xFE	; 254
    b53e:	0c 94 74 9d 	jmp	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000b542 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_term_heat_or_coolhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6306
   args1 ... parametr z definice prvku
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b542:	cf 93       	push	r28
    b544:	df 93       	push	r29
    b546:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6307
  if (thermostat_ring_get_active(default_ring) != 255)
    b548:	c0 91 75 0a 	lds	r28, 0x0A75	; 0x800a75 <default_ring>
    b54c:	8c 2f       	mov	r24, r28
    b54e:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b552:	8f 3f       	cpi	r24, 0xFF	; 255
    b554:	59 f0       	breq	.+22     	; 0xb56c <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6310
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    b556:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6309
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    b558:	d3 30       	cpi	r29, 0x03	; 3
    b55a:	19 f0       	breq	.+6      	; 0xb562 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6311
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    b55c:	d5 30       	cpi	r29, 0x05	; 5
    b55e:	31 f4       	brne	.+12     	; 0xb56c <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6312
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    b560:	61 e0       	ldi	r22, 0x01	; 1
    b562:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6314
  }
}
    b564:	df 91       	pop	r29
    b566:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6312
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    b568:	0c 94 76 9d 	jmp	0x13aec	; 0x13aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6314
  }
}
    b56c:	df 91       	pop	r29
    b56e:	cf 91       	pop	r28
    b570:	08 95       	ret

0000b572 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_default_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6100
   args1 ... parametr z definice prvku
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/
void button_click_default_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b572:	cf 93       	push	r28
    b574:	df 93       	push	r29
    b576:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6101
  if (thermostat_ring_get_active(default_ring) != 255)
    b578:	c0 91 75 0a 	lds	r28, 0x0A75	; 0x800a75 <default_ring>
    b57c:	8c 2f       	mov	r24, r28
    b57e:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b582:	8f 3f       	cpi	r24, 0xFF	; 255
    b584:	39 f0       	breq	.+14     	; 0xb594 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6103
  {
    thermostat_ring_set_mode(default_ring, args1);
    b586:	6d 2f       	mov	r22, r29
    b588:	8c 2f       	mov	r24, r28
    b58a:	0e 94 10 57 	call	0xae20	; 0xae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6104
    change_term_mode = 1;
    b58e:	81 e0       	ldi	r24, 0x01	; 1
    b590:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6106
  }
}
    b594:	df 91       	pop	r29
    b596:	cf 91       	pop	r28
    b598:	08 95       	ret

0000b59a <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>:
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6084
   args3 .. index prvku v menu
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b59a:	cf 93       	push	r28
    b59c:	df 93       	push	r29
    b59e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6086
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    b5a0:	c0 91 75 0a 	lds	r28, 0x0A75	; 0x800a75 <default_ring>
    b5a4:	8c 2f       	mov	r24, r28
    b5a6:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b5aa:	8f 3f       	cpi	r24, 0xFF	; 255
    b5ac:	29 f0       	breq	.+10     	; 0xb5b8 <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    b5ae:	8c 2f       	mov	r24, r28
    b5b0:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
    b5b4:	91 e0       	ldi	r25, 0x01	; 1
    b5b6:	d8 13       	cpse	r29, r24
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6085
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    b5b8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6090
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
  return ret;
}
    b5ba:	89 2f       	mov	r24, r25
    b5bc:	df 91       	pop	r29
    b5be:	cf 91       	pop	r28
    b5c0:	08 95       	ret

0000b5c2 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6010
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b5c2:	cf 93       	push	r28
    b5c4:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011
  if (thermostat_ring_get_active(args3) != 255)
    b5c6:	84 2f       	mov	r24, r20
    b5c8:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b5cc:	8f 3f       	cpi	r24, 0xFF	; 255
    b5ce:	51 f0       	breq	.+20     	; 0xb5e4 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6013
  {
    default_ring = args3;
    b5d0:	c0 93 75 0a 	sts	0x0A75, r28	; 0x800a75 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    b5d4:	e0 91 33 09 	lds	r30, 0x0933	; 0x800933 <MenuHistoryIndex>
    b5d8:	f0 e0       	ldi	r31, 0x00	; 0
    b5da:	e7 5d       	subi	r30, 0xD7	; 215
    b5dc:	f6 4f       	sbci	r31, 0xF6	; 246
    b5de:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
}
    b5e0:	cf 91       	pop	r28
    b5e2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    b5e4:	60 e0       	ldi	r22, 0x00	; 0
    b5e6:	84 e6       	ldi	r24, 0x64	; 100
    b5e8:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6019
    dialog_yes_function = &term_ring_do_activate;
    b5ec:	81 e2       	ldi	r24, 0x21	; 33
    b5ee:	98 e5       	ldi	r25, 0x58	; 88
    b5f0:	90 93 28 09 	sts	0x0928, r25	; 0x800928 <dialog_yes_function+0x1>
    b5f4:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
    dialog_yes_args1 = args3;
    b5f8:	c0 93 26 09 	sts	0x0926, r28	; 0x800926 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6021
    strcpy_P(dialog_text, text_term_do_activate);
    b5fc:	6e ed       	ldi	r22, 0xDE	; 222
    b5fe:	7c e3       	ldi	r23, 0x3C	; 60
    b600:	86 e0       	ldi	r24, 0x06	; 6
    b602:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023
  }
}
    b604:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6021
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
    b606:	0c 94 45 b1 	jmp	0x1628a	; 0x1628a <strcpy_P>

0000b60a <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    b60a:	ef 92       	push	r14
    b60c:	ff 92       	push	r15
    b60e:	0f 93       	push	r16
    b610:	1f 93       	push	r17
    b612:	cf 93       	push	r28
    b614:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    b616:	91 e2       	ldi	r25, 0x21	; 33
    b618:	89 9f       	mul	r24, r25
    b61a:	e0 01       	movw	r28, r0
    b61c:	11 24       	eor	r1, r1
    b61e:	8e 01       	movw	r16, r28
    b620:	04 5b       	subi	r16, 0xB4	; 180
    b622:	1e 4f       	sbci	r17, 0xFE	; 254
    b624:	7b 01       	movw	r14, r22
    b626:	cb 5a       	subi	r28, 0xAB	; 171
    b628:	de 4f       	sbci	r29, 0xFE	; 254
    b62a:	c8 01       	movw	r24, r16
    b62c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:105
    name[i] = t;
    b630:	f7 01       	movw	r30, r14
    b632:	81 93       	st	Z+, r24
    b634:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    b636:	88 23       	and	r24, r24
    b638:	29 f0       	breq	.+10     	; 0xb644 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    b63a:	0f 5f       	subi	r16, 0xFF	; 255
    b63c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b63e:	0c 17       	cp	r16, r28
    b640:	1d 07       	cpc	r17, r29
    b642:	99 f7       	brne	.-26     	; 0xb62a <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    b644:	df 91       	pop	r29
    b646:	cf 91       	pop	r28
    b648:	1f 91       	pop	r17
    b64a:	0f 91       	pop	r16
    b64c:	ff 90       	pop	r15
    b64e:	ef 90       	pop	r14
    b650:	08 95       	ret

0000b652 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>:
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6143
   args2
   args3
   promene nemaji zadny vyznam
*/
void button_click_set_term_ring_name_via_keyboard(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b652:	1f 93       	push	r17
    b654:	cf 93       	push	r28
    b656:	df 93       	push	r29
    b658:	00 d0       	rcall	.+0      	; 0xb65a <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0x8>
    b65a:	00 d0       	rcall	.+0      	; 0xb65c <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xa>
    b65c:	00 d0       	rcall	.+0      	; 0xb65e <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xc>
    b65e:	1f 92       	push	r1
    b660:	cd b7       	in	r28, 0x3d	; 61
    b662:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6145
  char name[10];
  args2 = default_ring;
    b664:	10 91 75 0a 	lds	r17, 0x0A75	; 0x800a75 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6146
  thermostat_ring_get_name(args2, name);
    b668:	be 01       	movw	r22, r28
    b66a:	6f 5f       	subi	r22, 0xFF	; 255
    b66c:	7f 4f       	sbci	r23, 0xFF	; 255
    b66e:	81 2f       	mov	r24, r17
    b670:	0e 94 05 5b 	call	0xb60a	; 0xb60a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6147
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b674:	60 e0       	ldi	r22, 0x00	; 0
    b676:	87 e6       	ldi	r24, 0x67	; 103
    b678:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    b67c:	be 01       	movw	r22, r28
    b67e:	6f 5f       	subi	r22, 0xFF	; 255
    b680:	7f 4f       	sbci	r23, 0xFF	; 255
    b682:	89 e3       	ldi	r24, 0x39	; 57
    b684:	99 e0       	ldi	r25, 0x09	; 9
    b686:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  dialog_set_string_max_length = max_length;
    b68a:	89 e0       	ldi	r24, 0x09	; 9
    b68c:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  dialog_set_string_args = idx;
    b690:	10 93 37 09 	sts	0x0937, r17	; 0x800937 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  dialog_save_string_function = save_function;
    b694:	83 e0       	ldi	r24, 0x03	; 3
    b696:	98 e5       	ldi	r25, 0x58	; 88
    b698:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <dialog_save_string_function+0x1>
    b69c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_save_string_function>
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6150
  args2 = default_ring;
  thermostat_ring_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 9, args2, &helper_set_term_ring_name);

}
    b6a0:	2a 96       	adiw	r28, 0x0a	; 10
    b6a2:	0f b6       	in	r0, 0x3f	; 63
    b6a4:	f8 94       	cli
    b6a6:	de bf       	out	0x3e, r29	; 62
    b6a8:	0f be       	out	0x3f, r0	; 63
    b6aa:	cd bf       	out	0x3d, r28	; 61
    b6ac:	df 91       	pop	r29
    b6ae:	cf 91       	pop	r28
    b6b0:	1f 91       	pop	r17
    b6b2:	08 95       	ret

0000b6b4 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6053
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b6b4:	cf 92       	push	r12
    b6b6:	df 92       	push	r13
    b6b8:	ef 92       	push	r14
    b6ba:	ff 92       	push	r15
    b6bc:	0f 93       	push	r16
    b6be:	1f 93       	push	r17
    b6c0:	cf 93       	push	r28
    b6c2:	df 93       	push	r29
    b6c4:	00 d0       	rcall	.+0      	; 0xb6c6 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    b6c6:	00 d0       	rcall	.+0      	; 0xb6c8 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    b6c8:	00 d0       	rcall	.+0      	; 0xb6ca <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    b6ca:	1f 92       	push	r1
    b6cc:	cd b7       	in	r28, 0x3d	; 61
    b6ce:	de b7       	in	r29, 0x3e	; 62
    b6d0:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6055
  char name[10];
  thermostat_ring_get_name(default_ring, name);
    b6d2:	ce 01       	movw	r24, r28
    b6d4:	01 96       	adiw	r24, 0x01	; 1
    b6d6:	7c 01       	movw	r14, r24
    b6d8:	bc 01       	movw	r22, r24
    b6da:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b6de:	0e 94 05 5b 	call	0xb60a	; 0xb60a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6056
  sprintf(line2, "Regulator %d - %s", default_ring, name);
    b6e2:	ff 92       	push	r15
    b6e4:	ef 92       	push	r14
    b6e6:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b6ea:	1f 92       	push	r1
    b6ec:	8f 93       	push	r24
    b6ee:	84 e7       	ldi	r24, 0x74	; 116
    b6f0:	93 e0       	ldi	r25, 0x03	; 3
    b6f2:	9f 93       	push	r25
    b6f4:	8f 93       	push	r24
    b6f6:	1f 93       	push	r17
    b6f8:	0f 93       	push	r16
    b6fa:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6057
  strcpy_P(line1, text_change_default_ring);
    b6fe:	6a e0       	ldi	r22, 0x0A	; 10
    b700:	7d e3       	ldi	r23, 0x3D	; 61
    b702:	c6 01       	movw	r24, r12
    b704:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
    b708:	0f b6       	in	r0, 0x3f	; 63
    b70a:	f8 94       	cli
    b70c:	de bf       	out	0x3e, r29	; 62
    b70e:	0f be       	out	0x3f, r0	; 63
    b710:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6058
}
    b712:	2a 96       	adiw	r28, 0x0a	; 10
    b714:	0f b6       	in	r0, 0x3f	; 63
    b716:	f8 94       	cli
    b718:	de bf       	out	0x3e, r29	; 62
    b71a:	0f be       	out	0x3f, r0	; 63
    b71c:	cd bf       	out	0x3d, r28	; 61
    b71e:	df 91       	pop	r29
    b720:	cf 91       	pop	r28
    b722:	1f 91       	pop	r17
    b724:	0f 91       	pop	r16
    b726:	ff 90       	pop	r15
    b728:	ef 90       	pop	r14
    b72a:	df 90       	pop	r13
    b72c:	cf 90       	pop	r12
    b72e:	08 95       	ret

0000b730 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6034
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b730:	af 92       	push	r10
    b732:	bf 92       	push	r11
    b734:	cf 92       	push	r12
    b736:	df 92       	push	r13
    b738:	ff 92       	push	r15
    b73a:	0f 93       	push	r16
    b73c:	1f 93       	push	r17
    b73e:	cf 93       	push	r28
    b740:	df 93       	push	r29
    b742:	cd b7       	in	r28, 0x3d	; 61
    b744:	de b7       	in	r29, 0x3e	; 62
    b746:	66 97       	sbiw	r28, 0x16	; 22
    b748:	0f b6       	in	r0, 0x3f	; 63
    b74a:	f8 94       	cli
    b74c:	de bf       	out	0x3e, r29	; 62
    b74e:	0f be       	out	0x3f, r0	; 63
    b750:	cd bf       	out	0x3d, r28	; 61
    b752:	f8 2e       	mov	r15, r24
    b754:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    b756:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b75a:	9e 01       	movw	r18, r28
    b75c:	2f 5f       	subi	r18, 0xFF	; 255
    b75e:	3f 4f       	sbci	r19, 0xFF	; 255
    b760:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6038
    strcpy_P(active, text_term_active);
    b762:	62 e0       	ldi	r22, 0x02	; 2
    b764:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    b766:	8f 3f       	cpi	r24, 0xFF	; 255
    b768:	11 f4       	brne	.+4      	; 0xb76e <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6040
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    b76a:	68 ef       	ldi	r22, 0xF8	; 248
    b76c:	7c e3       	ldi	r23, 0x3C	; 60
    b76e:	c6 01       	movw	r24, r12
    b770:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6041
  thermostat_ring_get_name(args1, name);
    b774:	be 01       	movw	r22, r28
    b776:	63 5f       	subi	r22, 0xF3	; 243
    b778:	7f 4f       	sbci	r23, 0xFF	; 255
    b77a:	8f 2d       	mov	r24, r15
    b77c:	0e 94 05 5b 	call	0xb60a	; 0xb60a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6042
  sprintf(line2, "Reg. %d %s", args1, active);
    b780:	df 92       	push	r13
    b782:	cf 92       	push	r12
    b784:	1f 92       	push	r1
    b786:	ff 92       	push	r15
    b788:	86 e8       	ldi	r24, 0x86	; 134
    b78a:	93 e0       	ldi	r25, 0x03	; 3
    b78c:	9f 93       	push	r25
    b78e:	8f 93       	push	r24
    b790:	1f 93       	push	r17
    b792:	0f 93       	push	r16
    b794:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6043
  strcpy(line1, name);
    b798:	be 01       	movw	r22, r28
    b79a:	63 5f       	subi	r22, 0xF3	; 243
    b79c:	7f 4f       	sbci	r23, 0xFF	; 255
    b79e:	c5 01       	movw	r24, r10
    b7a0:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
    b7a4:	0f b6       	in	r0, 0x3f	; 63
    b7a6:	f8 94       	cli
    b7a8:	de bf       	out	0x3e, r29	; 62
    b7aa:	0f be       	out	0x3f, r0	; 63
    b7ac:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6044
}
    b7ae:	66 96       	adiw	r28, 0x16	; 22
    b7b0:	0f b6       	in	r0, 0x3f	; 63
    b7b2:	f8 94       	cli
    b7b4:	de bf       	out	0x3e, r29	; 62
    b7b6:	0f be       	out	0x3f, r0	; 63
    b7b8:	cd bf       	out	0x3d, r28	; 61
    b7ba:	df 91       	pop	r29
    b7bc:	cf 91       	pop	r28
    b7be:	1f 91       	pop	r17
    b7c0:	0f 91       	pop	r16
    b7c2:	ff 90       	pop	r15
    b7c4:	df 90       	pop	r13
    b7c6:	cf 90       	pop	r12
    b7c8:	bf 90       	pop	r11
    b7ca:	af 90       	pop	r10
    b7cc:	08 95       	ret

0000b7ce <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_default_ringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5194
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b7ce:	af 92       	push	r10
    b7d0:	bf 92       	push	r11
    b7d2:	cf 92       	push	r12
    b7d4:	df 92       	push	r13
    b7d6:	ef 92       	push	r14
    b7d8:	ff 92       	push	r15
    b7da:	0f 93       	push	r16
    b7dc:	1f 93       	push	r17
    b7de:	cf 93       	push	r28
    b7e0:	df 93       	push	r29
    b7e2:	cd b7       	in	r28, 0x3d	; 61
    b7e4:	de b7       	in	r29, 0x3e	; 62
    b7e6:	a8 97       	sbiw	r28, 0x28	; 40
    b7e8:	0f b6       	in	r0, 0x3f	; 63
    b7ea:	f8 94       	cli
    b7ec:	de bf       	out	0x3e, r29	; 62
    b7ee:	0f be       	out	0x3f, r0	; 63
    b7f0:	cd bf       	out	0x3d, r28	; 61
    b7f2:	6c 01       	movw	r12, r24
    b7f4:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5197
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    b7f6:	6f e0       	ldi	r22, 0x0F	; 15
    b7f8:	7c e3       	ldi	r23, 0x3C	; 60
    b7fa:	ce 01       	movw	r24, r28
    b7fc:	01 96       	adiw	r24, 0x01	; 1
    b7fe:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5198
  if (thermostat_ring_get_active(default_ring) != 255)
    b802:	10 91 75 0a 	lds	r17, 0x0A75	; 0x800a75 <default_ring>
    b806:	81 2f       	mov	r24, r17
    b808:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b80c:	8f 3f       	cpi	r24, 0xFF	; 255
    b80e:	51 f1       	breq	.+84     	; 0xb864 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
  {
    thermostat_ring_get_name(default_ring, name);
    b810:	be 01       	movw	r22, r28
    b812:	61 5e       	subi	r22, 0xE1	; 225
    b814:	7f 4f       	sbci	r23, 0xFF	; 255
    b816:	81 2f       	mov	r24, r17
    b818:	0e 94 05 5b 	call	0xb60a	; 0xb60a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5206
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    b81c:	be 01       	movw	r22, r28
    b81e:	61 5e       	subi	r22, 0xE1	; 225
    b820:	7f 4f       	sbci	r23, 0xFF	; 255
    b822:	ce 01       	movw	r24, r28
    b824:	01 96       	adiw	r24, 0x01	; 1
    b826:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    b82a:	ee 24       	eor	r14, r14
    b82c:	ea 94       	dec	r14
    b82e:	fe 2c       	mov	r15, r14
    b830:	10 e0       	ldi	r17, 0x00	; 0
    b832:	00 e0       	ldi	r16, 0x00	; 0
    b834:	22 e0       	ldi	r18, 0x02	; 2
    b836:	a5 01       	movw	r20, r10
    b838:	b6 01       	movw	r22, r12
    b83a:	ce 01       	movw	r24, r28
    b83c:	01 96       	adiw	r24, 0x01	; 1
    b83e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5209
}
    b842:	a8 96       	adiw	r28, 0x28	; 40
    b844:	0f b6       	in	r0, 0x3f	; 63
    b846:	f8 94       	cli
    b848:	de bf       	out	0x3e, r29	; 62
    b84a:	0f be       	out	0x3f, r0	; 63
    b84c:	cd bf       	out	0x3d, r28	; 61
    b84e:	df 91       	pop	r29
    b850:	cf 91       	pop	r28
    b852:	1f 91       	pop	r17
    b854:	0f 91       	pop	r16
    b856:	ff 90       	pop	r15
    b858:	ef 90       	pop	r14
    b85a:	df 90       	pop	r13
    b85c:	cf 90       	pop	r12
    b85e:	bf 90       	pop	r11
    b860:	af 90       	pop	r10
    b862:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    b864:	68 ef       	ldi	r22, 0xF8	; 248
    b866:	7c e3       	ldi	r23, 0x3C	; 60
    b868:	ce 01       	movw	r24, r28
    b86a:	4f 96       	adiw	r24, 0x1f	; 31
    b86c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
    b870:	d5 cf       	rjmp	.-86     	; 0xb81c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>

0000b872 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6286
   args1 ... paramentr z definice prvku
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/
uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b872:	0f 93       	push	r16
    b874:	1f 93       	push	r17
    b876:	cf 93       	push	r28
    b878:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6289
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    b87a:	c0 91 75 0a 	lds	r28, 0x0A75	; 0x800a75 <default_ring>
    b87e:	8c 2f       	mov	r24, r28
    b880:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
    b884:	8f 3f       	cpi	r24, 0xFF	; 255
    b886:	71 f0       	breq	.+28     	; 0xb8a4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    b888:	21 e2       	ldi	r18, 0x21	; 33
    b88a:	c2 9f       	mul	r28, r18
    b88c:	c0 01       	movw	r24, r0
    b88e:	11 24       	eor	r1, r1
    b890:	88 5a       	subi	r24, 0xA8	; 168
    b892:	9e 4f       	sbci	r25, 0xFE	; 254
    b894:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6292
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    b898:	80 fd       	sbrc	r24, 0
    b89a:	06 c0       	rjmp	.+12     	; 0xb8a8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
    b89c:	81 e0       	ldi	r24, 0x01	; 1
    b89e:	03 30       	cpi	r16, 0x03	; 3
    b8a0:	11 05       	cpc	r17, r1
    b8a2:	31 f0       	breq	.+12     	; 0xb8b0 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6294
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    b8a4:	80 e0       	ldi	r24, 0x00	; 0
    b8a6:	04 c0       	rjmp	.+8      	; 0xb8b0 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    b8a8:	81 e0       	ldi	r24, 0x01	; 1
    b8aa:	05 30       	cpi	r16, 0x05	; 5
    b8ac:	11 05       	cpc	r17, r1
    b8ae:	d1 f7       	brne	.-12     	; 0xb8a4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6298
      ret = 1;
  }
  return ret;
}
    b8b0:	cf 91       	pop	r28
    b8b2:	1f 91       	pop	r17
    b8b4:	0f 91       	pop	r16
    b8b6:	08 95       	ret

0000b8b8 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>:
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5962
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_get_show_default_ring_input_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b8b8:	cf 93       	push	r28
    b8ba:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    b8bc:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
    b8c0:	21 e2       	ldi	r18, 0x21	; 33
    b8c2:	82 9f       	mul	r24, r18
    b8c4:	c0 01       	movw	r24, r0
    b8c6:	11 24       	eor	r1, r1
    b8c8:	84 5a       	subi	r24, 0xA4	; 164
    b8ca:	9e 4f       	sbci	r25, 0xFE	; 254
    b8cc:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5964
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(default_ring) == args3)
    b8d0:	91 e0       	ldi	r25, 0x01	; 1
    b8d2:	c8 13       	cpse	r28, r24
    b8d4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5968
    ret = 1;

  return ret;
}
    b8d6:	89 2f       	mov	r24, r25
    b8d8:	cf 91       	pop	r28
    b8da:	08 95       	ret

0000b8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    b8dc:	af 92       	push	r10
    b8de:	bf 92       	push	r11
    b8e0:	cf 92       	push	r12
    b8e2:	df 92       	push	r13
    b8e4:	ef 92       	push	r14
    b8e6:	ff 92       	push	r15
    b8e8:	0f 93       	push	r16
    b8ea:	1f 93       	push	r17
    b8ec:	cf 93       	push	r28
    b8ee:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    b8f0:	86 30       	cpi	r24, 0x06	; 6
    b8f2:	08 f0       	brcs	.+2      	; 0xb8f6 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    b8f4:	56 c0       	rjmp	.+172    	; 0xb9a2 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    b8f6:	8b 01       	movw	r16, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    b8f8:	96 e1       	ldi	r25, 0x16	; 22
    b8fa:	89 9f       	mul	r24, r25
    b8fc:	e0 01       	movw	r28, r0
    b8fe:	11 24       	eor	r1, r1
    b900:	ce 01       	movw	r24, r28
    b902:	88 53       	subi	r24, 0x38	; 56
    b904:	9f 4f       	sbci	r25, 0xFF	; 255
    b906:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b90a:	f8 01       	movw	r30, r16
    b90c:	81 93       	st	Z+, r24
    b90e:	6f 01       	movw	r12, r30
    b910:	7e 01       	movw	r14, r28
    b912:	f9 ec       	ldi	r31, 0xC9	; 201
    b914:	ef 0e       	add	r14, r31
    b916:	f1 1c       	adc	r15, r1
    b918:	5e 01       	movw	r10, r28
    b91a:	81 ed       	ldi	r24, 0xD1	; 209
    b91c:	a8 0e       	add	r10, r24
    b91e:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    b920:	c7 01       	movw	r24, r14
    b922:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b926:	f6 01       	movw	r30, r12
    b928:	81 93       	st	Z+, r24
    b92a:	6f 01       	movw	r12, r30
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    b92c:	c7 01       	movw	r24, r14
    b92e:	0b 96       	adiw	r24, 0x0b	; 11
    b930:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b934:	f6 01       	movw	r30, r12
    b936:	82 87       	std	Z+10, r24	; 0x0a
    b938:	ff ef       	ldi	r31, 0xFF	; 255
    b93a:	ef 1a       	sub	r14, r31
    b93c:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    b93e:	ea 14       	cp	r14, r10
    b940:	fb 04       	cpc	r15, r11
    b942:	71 f7       	brne	.-36     	; 0xb920 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    b944:	f8 01       	movw	r30, r16
    b946:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    b948:	c7 01       	movw	r24, r14
    b94a:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b94e:	f8 01       	movw	r30, r16
    b950:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    b952:	ce 01       	movw	r24, r28
    b954:	8e 52       	subi	r24, 0x2E	; 46
    b956:	9f 4f       	sbci	r25, 0xFF	; 255
    b958:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b95c:	f8 2e       	mov	r15, r24
    b95e:	ce 01       	movw	r24, r28
    b960:	8d 52       	subi	r24, 0x2D	; 45
    b962:	9f 4f       	sbci	r25, 0xFF	; 255
    b964:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b968:	2f 2d       	mov	r18, r15
    b96a:	30 e0       	ldi	r19, 0x00	; 0
    b96c:	32 2f       	mov	r19, r18
    b96e:	22 27       	eor	r18, r18
    b970:	82 0f       	add	r24, r18
    b972:	93 2f       	mov	r25, r19
    b974:	91 1d       	adc	r25, r1
    b976:	f8 01       	movw	r30, r16
    b978:	93 87       	std	Z+11, r25	; 0x0b
    b97a:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    b97c:	ce 01       	movw	r24, r28
    b97e:	84 52       	subi	r24, 0x24	; 36
    b980:	9f 4f       	sbci	r25, 0xFF	; 255
    b982:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b986:	f8 01       	movw	r30, r16
    b988:	84 8b       	std	Z+20, r24	; 0x14
    b98a:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    b98c:	df 91       	pop	r29
    b98e:	cf 91       	pop	r28
    b990:	1f 91       	pop	r17
    b992:	0f 91       	pop	r16
    b994:	ff 90       	pop	r15
    b996:	ef 90       	pop	r14
    b998:	df 90       	pop	r13
    b99a:	cf 90       	pop	r12
    b99c:	bf 90       	pop	r11
    b99e:	af 90       	pop	r10
    b9a0:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    b9a2:	80 e0       	ldi	r24, 0x00	; 0
    b9a4:	f3 cf       	rjmp	.-26     	; 0xb98c <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000b9a6 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    b9a6:	ef 92       	push	r14
    b9a8:	ff 92       	push	r15
    b9aa:	0f 93       	push	r16
    b9ac:	1f 93       	push	r17
    b9ae:	cf 93       	push	r28
    b9b0:	df 93       	push	r29
    b9b2:	cd b7       	in	r28, 0x3d	; 61
    b9b4:	de b7       	in	r29, 0x3e	; 62
    b9b6:	6e 97       	sbiw	r28, 0x1e	; 30
    b9b8:	0f b6       	in	r0, 0x3f	; 63
    b9ba:	f8 94       	cli
    b9bc:	de bf       	out	0x3e, r29	; 62
    b9be:	0f be       	out	0x3f, r0	; 63
    b9c0:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    b9c2:	1f 8a       	std	Y+23, r1	; 0x17
    b9c4:	18 8e       	std	Y+24, r1	; 0x18
    b9c6:	19 8e       	std	Y+25, r1	; 0x19
    b9c8:	1a 8e       	std	Y+26, r1	; 0x1a
    b9ca:	1b 8e       	std	Y+27, r1	; 0x1b
    b9cc:	1c 8e       	std	Y+28, r1	; 0x1c
    b9ce:	1d 8e       	std	Y+29, r1	; 0x1d
    b9d0:	1e 8e       	std	Y+30, r1	; 0x1e
    b9d2:	06 e2       	ldi	r16, 0x26	; 38
    b9d4:	1a e0       	ldi	r17, 0x0A	; 10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    b9d6:	ee 24       	eor	r14, r14
    b9d8:	ea 94       	dec	r14
    b9da:	f8 01       	movw	r30, r16
    b9dc:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    b9de:	b8 01       	movw	r22, r16
    b9e0:	ce 01       	movw	r24, r28
    b9e2:	47 96       	adiw	r24, 0x17	; 23
    b9e4:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <tds_compare_rom(unsigned char*, unsigned char*)>
    b9e8:	81 11       	cpse	r24, r1
    b9ea:	14 c0       	rjmp	.+40     	; 0xba14 <tds_update_associate()+0x6e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    b9ec:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    b9ee:	be 01       	movw	r22, r28
    b9f0:	6f 5f       	subi	r22, 0xFF	; 255
    b9f2:	7f 4f       	sbci	r23, 0xFF	; 255
    b9f4:	8f 2d       	mov	r24, r15
    b9f6:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    b9fa:	b8 01       	movw	r22, r16
    b9fc:	ce 01       	movw	r24, r28
    b9fe:	02 96       	adiw	r24, 0x02	; 2
    ba00:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <tds_compare_rom(unsigned char*, unsigned char*)>
    ba04:	88 23       	and	r24, r24
    ba06:	11 f0       	breq	.+4      	; 0xba0c <tds_update_associate()+0x66>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    ba08:	f8 01       	movw	r30, r16
    ba0a:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ba0c:	f3 94       	inc	r15
    ba0e:	f6 e0       	ldi	r31, 0x06	; 6
    ba10:	ff 12       	cpse	r15, r31
    ba12:	ed cf       	rjmp	.-38     	; 0xb9ee <tds_update_associate()+0x48>
    ba14:	05 5f       	subi	r16, 0xF5	; 245
    ba16:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    ba18:	8a e0       	ldi	r24, 0x0A	; 10
    ba1a:	08 36       	cpi	r16, 0x68	; 104
    ba1c:	18 07       	cpc	r17, r24
    ba1e:	e9 f6       	brne	.-70     	; 0xb9da <tds_update_associate()+0x34>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    ba20:	6e 96       	adiw	r28, 0x1e	; 30
    ba22:	0f b6       	in	r0, 0x3f	; 63
    ba24:	f8 94       	cli
    ba26:	de bf       	out	0x3e, r29	; 62
    ba28:	0f be       	out	0x3f, r0	; 63
    ba2a:	cd bf       	out	0x3d, r28	; 61
    ba2c:	df 91       	pop	r29
    ba2e:	cf 91       	pop	r28
    ba30:	1f 91       	pop	r17
    ba32:	0f 91       	pop	r16
    ba34:	ff 90       	pop	r15
    ba36:	ef 90       	pop	r14
    ba38:	08 95       	ret

0000ba3a <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    ba3a:	af 92       	push	r10
    ba3c:	bf 92       	push	r11
    ba3e:	cf 92       	push	r12
    ba40:	df 92       	push	r13
    ba42:	ef 92       	push	r14
    ba44:	ff 92       	push	r15
    ba46:	1f 93       	push	r17
    ba48:	cf 93       	push	r28
    ba4a:	df 93       	push	r29
    ba4c:	cd b7       	in	r28, 0x3d	; 61
    ba4e:	de b7       	in	r29, 0x3e	; 62
    ba50:	66 97       	sbiw	r28, 0x16	; 22
    ba52:	0f b6       	in	r0, 0x3f	; 63
    ba54:	f8 94       	cli
    ba56:	de bf       	out	0x3e, r29	; 62
    ba58:	0f be       	out	0x3f, r0	; 63
    ba5a:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    ba5c:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <Global_HWwirenum>
    ba60:	89 17       	cp	r24, r25
    ba62:	a0 f0       	brcs	.+40     	; 0xba8c <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    ba64:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    ba66:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:226
  return ret;
}
    ba6a:	81 2f       	mov	r24, r17
    ba6c:	66 96       	adiw	r28, 0x16	; 22
    ba6e:	0f b6       	in	r0, 0x3f	; 63
    ba70:	f8 94       	cli
    ba72:	de bf       	out	0x3e, r29	; 62
    ba74:	0f be       	out	0x3f, r0	; 63
    ba76:	cd bf       	out	0x3d, r28	; 61
    ba78:	df 91       	pop	r29
    ba7a:	cf 91       	pop	r28
    ba7c:	1f 91       	pop	r17
    ba7e:	ff 90       	pop	r15
    ba80:	ef 90       	pop	r14
    ba82:	df 90       	pop	r13
    ba84:	cf 90       	pop	r12
    ba86:	bf 90       	pop	r11
    ba88:	af 90       	pop	r10
    ba8a:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ba8c:	a8 2e       	mov	r10, r24
    ba8e:	b1 2c       	mov	r11, r1
    ba90:	2b e0       	ldi	r18, 0x0B	; 11
    ba92:	82 9f       	mul	r24, r18
    ba94:	c0 01       	movw	r24, r0
    ba96:	11 24       	eor	r1, r1
    ba98:	fc 01       	movw	r30, r24
    ba9a:	ea 5d       	subi	r30, 0xDA	; 218
    ba9c:	f5 4f       	sbci	r31, 0xF5	; 245
    ba9e:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    baa0:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    baa2:	be 01       	movw	r22, r28
    baa4:	6f 5f       	subi	r22, 0xFF	; 255
    baa6:	7f 4f       	sbci	r23, 0xFF	; 255
    baa8:	81 2f       	mov	r24, r17
    baaa:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    baae:	b7 01       	movw	r22, r14
    bab0:	ce 01       	movw	r24, r28
    bab2:	02 96       	adiw	r24, 0x02	; 2
    bab4:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <tds_compare_rom(unsigned char*, unsigned char*)>
    bab8:	81 11       	cpse	r24, r1
    baba:	d4 cf       	rjmp	.-88     	; 0xba64 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    babc:	1f 5f       	subi	r17, 0xFF	; 255
    babe:	16 30       	cpi	r17, 0x06	; 6
    bac0:	81 f7       	brne	.-32     	; 0xbaa2 <tds_associate(unsigned char)+0x68>
    bac2:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    bac4:	2b e0       	ldi	r18, 0x0B	; 11
    bac6:	2a 9d       	mul	r18, r10
    bac8:	c0 01       	movw	r24, r0
    baca:	2b 9d       	mul	r18, r11
    bacc:	90 0d       	add	r25, r0
    bace:	11 24       	eor	r1, r1
    bad0:	fc 01       	movw	r30, r24
    bad2:	e1 5d       	subi	r30, 0xD1	; 209
    bad4:	f5 4f       	sbci	r31, 0xF5	; 245
    bad6:	6f 01       	movw	r12, r30
    bad8:	03 c0       	rjmp	.+6      	; 0xbae0 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    bada:	1f 5f       	subi	r17, 0xFF	; 255
    badc:	16 30       	cpi	r17, 0x06	; 6
    bade:	11 f2       	breq	.-124    	; 0xba64 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    bae0:	be 01       	movw	r22, r28
    bae2:	6f 5f       	subi	r22, 0xFF	; 255
    bae4:	7f 4f       	sbci	r23, 0xFF	; 255
    bae6:	81 2f       	mov	r24, r17
    bae8:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    baec:	89 81       	ldd	r24, Y+1	; 0x01
    baee:	81 11       	cpse	r24, r1
    baf0:	f4 cf       	rjmp	.-24     	; 0xbada <tds_associate(unsigned char)+0xa0>
    baf2:	f6 01       	movw	r30, r12
    baf4:	80 81       	ld	r24, Z
    baf6:	81 30       	cpi	r24, 0x01	; 1
    baf8:	81 f7       	brne	.-32     	; 0xbada <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    bafa:	89 83       	std	Y+1, r24	; 0x01
    bafc:	fe 01       	movw	r30, r28
    bafe:	32 96       	adiw	r30, 0x02	; 2
    bb00:	90 e0       	ldi	r25, 0x00	; 0
    bb02:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    bb04:	d7 01       	movw	r26, r14
    bb06:	a8 0f       	add	r26, r24
    bb08:	b9 1f       	adc	r27, r25
    bb0a:	2c 91       	ld	r18, X
    bb0c:	21 93       	st	Z+, r18
    bb0e:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    bb10:	88 30       	cpi	r24, 0x08	; 8
    bb12:	91 05       	cpc	r25, r1
    bb14:	b9 f7       	brne	.-18     	; 0xbb04 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    bb16:	2b e0       	ldi	r18, 0x0B	; 11
    bb18:	12 9f       	mul	r17, r18
    bb1a:	f0 01       	movw	r30, r0
    bb1c:	11 24       	eor	r1, r1
    bb1e:	ea 5d       	subi	r30, 0xDA	; 218
    bb20:	f5 4f       	sbci	r31, 0xF5	; 245
    bb22:	e0 85       	ldd	r30, Z+8	; 0x08
    bb24:	f0 e0       	ldi	r31, 0x00	; 0
    bb26:	ee 0f       	add	r30, r30
    bb28:	ff 1f       	adc	r31, r31
    bb2a:	e4 52       	subi	r30, 0x24	; 36
    bb2c:	f6 4f       	sbci	r31, 0xF6	; 246
    bb2e:	80 81       	ld	r24, Z
    bb30:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    bb32:	be 01       	movw	r22, r28
    bb34:	6f 5f       	subi	r22, 0xFF	; 255
    bb36:	7f 4f       	sbci	r23, 0xFF	; 255
    bb38:	81 2f       	mov	r24, r17
    bb3a:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
    bb3e:	3e e1       	ldi	r19, 0x1E	; 30
    bb40:	13 9f       	mul	r17, r19
    bb42:	a0 01       	movw	r20, r0
    bb44:	11 24       	eor	r1, r1
    bb46:	90 e0       	ldi	r25, 0x00	; 0
    bb48:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    bb4a:	20 e2       	ldi	r18, 0x20	; 32
    bb4c:	3e e4       	ldi	r19, 0x4E	; 78
    bb4e:	fc 01       	movw	r30, r24
    bb50:	ee 0f       	add	r30, r30
    bb52:	ff 1f       	adc	r31, r31
    bb54:	e4 0f       	add	r30, r20
    bb56:	f5 1f       	adc	r31, r21
    bb58:	e0 58       	subi	r30, 0x80	; 128
    bb5a:	f5 4f       	sbci	r31, 0xF5	; 245
    bb5c:	30 87       	std	Z+8, r19	; 0x08
    bb5e:	27 83       	std	Z+7, r18	; 0x07
    bb60:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    bb62:	8a 30       	cpi	r24, 0x0A	; 10
    bb64:	91 05       	cpc	r25, r1
    bb66:	99 f7       	brne	.-26     	; 0xbb4e <tds_associate(unsigned char)+0x114>
    bb68:	7e cf       	rjmp	.-260    	; 0xba66 <tds_associate(unsigned char)+0x2c>

0000bb6a <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    bb6a:	1f 93       	push	r17
    bb6c:	cf 93       	push	r28
    bb6e:	df 93       	push	r29
    bb70:	cd b7       	in	r28, 0x3d	; 61
    bb72:	de b7       	in	r29, 0x3e	; 62
    bb74:	66 97       	sbiw	r28, 0x16	; 22
    bb76:	0f b6       	in	r0, 0x3f	; 63
    bb78:	f8 94       	cli
    bb7a:	de bf       	out	0x3e, r29	; 62
    bb7c:	0f be       	out	0x3f, r0	; 63
    bb7e:	cd bf       	out	0x3d, r28	; 61
    bb80:	18 2f       	mov	r17, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    bb82:	be 01       	movw	r22, r28
    bb84:	6f 5f       	subi	r22, 0xFF	; 255
    bb86:	7f 4f       	sbci	r23, 0xFF	; 255
    bb88:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    bb8c:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    bb8e:	6f e6       	ldi	r22, 0x6F	; 111
    bb90:	73 e0       	ldi	r23, 0x03	; 3
    bb92:	ce 01       	movw	r24, r28
    bb94:	0d 96       	adiw	r24, 0x0d	; 13
    bb96:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    bb9a:	1c 86       	std	Y+12, r1	; 0x0c
    bb9c:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    bb9e:	8a e0       	ldi	r24, 0x0A	; 10
    bba0:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    bba2:	1a 82       	std	Y+2, r1	; 0x02
    bba4:	1b 82       	std	Y+3, r1	; 0x03
    bba6:	1c 82       	std	Y+4, r1	; 0x04
    bba8:	1d 82       	std	Y+5, r1	; 0x05
    bbaa:	1e 82       	std	Y+6, r1	; 0x06
    bbac:	1f 82       	std	Y+7, r1	; 0x07
    bbae:	18 86       	std	Y+8, r1	; 0x08
    bbb0:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    bbb2:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    bbb4:	be 01       	movw	r22, r28
    bbb6:	6f 5f       	subi	r22, 0xFF	; 255
    bbb8:	7f 4f       	sbci	r23, 0xFF	; 255
    bbba:	81 2f       	mov	r24, r17
    bbbc:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    bbc0:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:132
}
    bbc4:	66 96       	adiw	r28, 0x16	; 22
    bbc6:	0f b6       	in	r0, 0x3f	; 63
    bbc8:	f8 94       	cli
    bbca:	de bf       	out	0x3e, r29	; 62
    bbcc:	0f be       	out	0x3f, r0	; 63
    bbce:	cd bf       	out	0x3d, r28	; 61
    bbd0:	df 91       	pop	r29
    bbd2:	cf 91       	pop	r28
    bbd4:	1f 91       	pop	r17
    bbd6:	08 95       	ret

0000bbd8 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    bbd8:	8b e0       	ldi	r24, 0x0B	; 11
    bbda:	68 9f       	mul	r22, r24
    bbdc:	f0 01       	movw	r30, r0
    bbde:	11 24       	eor	r1, r1
    bbe0:	ea 5d       	subi	r30, 0xDA	; 218
    bbe2:	f5 4f       	sbci	r31, 0xF5	; 245
    bbe4:	82 85       	ldd	r24, Z+10	; 0x0a
    bbe6:	0e 94 b5 5d 	call	0xbb6a	; 0xbb6a <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5735
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    bbea:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <MenuHistoryPrevMenu()>

0000bbee <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5685
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    bbee:	7f 92       	push	r7
    bbf0:	8f 92       	push	r8
    bbf2:	9f 92       	push	r9
    bbf4:	af 92       	push	r10
    bbf6:	bf 92       	push	r11
    bbf8:	cf 92       	push	r12
    bbfa:	df 92       	push	r13
    bbfc:	ef 92       	push	r14
    bbfe:	ff 92       	push	r15
    bc00:	0f 93       	push	r16
    bc02:	1f 93       	push	r17
    bc04:	cf 93       	push	r28
    bc06:	df 93       	push	r29
    bc08:	cd b7       	in	r28, 0x3d	; 61
    bc0a:	de b7       	in	r29, 0x3e	; 62
    bc0c:	e0 97       	sbiw	r28, 0x30	; 48
    bc0e:	0f b6       	in	r0, 0x3f	; 63
    bc10:	f8 94       	cli
    bc12:	de bf       	out	0x3e, r29	; 62
    bc14:	0f be       	out	0x3f, r0	; 63
    bc16:	cd bf       	out	0x3d, r28	; 61
    bc18:	98 2e       	mov	r9, r24
    bc1a:	82 2e       	mov	r8, r18
    bc1c:	73 2e       	mov	r7, r19
    bc1e:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
  char str2[26];
  strcpy_P(line1, text_not_used);
    bc20:	6e e9       	ldi	r22, 0x9E	; 158
    bc22:	7c e3       	ldi	r23, 0x3C	; 60
    bc24:	82 2f       	mov	r24, r18
    bc26:	93 2f       	mov	r25, r19
    bc28:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5688
  strcpy(line2, "-");
    bc2c:	60 e5       	ldi	r22, 0x50	; 80
    bc2e:	73 e0       	ldi	r23, 0x03	; 3
    bc30:	c8 01       	movw	r24, r16
    bc32:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5689
  if (w_rom[args1].used == 1)
    bc36:	4b e0       	ldi	r20, 0x0B	; 11
    bc38:	49 9d       	mul	r20, r9
    bc3a:	c0 01       	movw	r24, r0
    bc3c:	11 24       	eor	r1, r1
    bc3e:	9c 01       	movw	r18, r24
    bc40:	2a 5d       	subi	r18, 0xDA	; 218
    bc42:	35 4f       	sbci	r19, 0xF5	; 245
    bc44:	69 01       	movw	r12, r18
    bc46:	f9 01       	movw	r30, r18
    bc48:	81 85       	ldd	r24, Z+9	; 0x09
    bc4a:	81 30       	cpi	r24, 0x01	; 1
    bc4c:	c9 f5       	brne	.+114    	; 0xbcc0 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5691
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    bc4e:	a9 01       	movw	r20, r18
    bc50:	00 e1       	ldi	r16, 0x10	; 16
    bc52:	28 e0       	ldi	r18, 0x08	; 8
    bc54:	6a e3       	ldi	r22, 0x3A	; 58
    bc56:	ce 01       	movw	r24, r28
    bc58:	01 96       	adiw	r24, 0x01	; 1
    bc5a:	5c 01       	movw	r10, r24
    bc5c:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5692
    sprintf(line1, "%d: %s", args1, str2);
    bc60:	bf 92       	push	r11
    bc62:	af 92       	push	r10
    bc64:	1f 92       	push	r1
    bc66:	9f 92       	push	r9
    bc68:	81 e9       	ldi	r24, 0x91	; 145
    bc6a:	93 e0       	ldi	r25, 0x03	; 3
    bc6c:	9f 93       	push	r25
    bc6e:	8f 93       	push	r24
    bc70:	7f 92       	push	r7
    bc72:	8f 92       	push	r8
    bc74:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694

    if (w_rom[args1].tds_idx != 255)
    bc78:	0f b6       	in	r0, 0x3f	; 63
    bc7a:	f8 94       	cli
    bc7c:	de bf       	out	0x3e, r29	; 62
    bc7e:	0f be       	out	0x3f, r0	; 63
    bc80:	cd bf       	out	0x3d, r28	; 61
    bc82:	f6 01       	movw	r30, r12
    bc84:	82 85       	ldd	r24, Z+10	; 0x0a
    bc86:	8f 3f       	cpi	r24, 0xFF	; 255
    bc88:	79 f1       	breq	.+94     	; 0xbce8 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5696
    {
      strcpy_P(line2, text_nastavit_tds);
    bc8a:	6b e8       	ldi	r22, 0x8B	; 139
    bc8c:	7c e3       	ldi	r23, 0x3C	; 60
    bc8e:	c7 01       	movw	r24, r14
    bc90:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    bc94:	be 01       	movw	r22, r28
    bc96:	65 5e       	subi	r22, 0xE5	; 229
    bc98:	7f 4f       	sbci	r23, 0xFF	; 255
    bc9a:	f6 01       	movw	r30, r12
    bc9c:	82 85       	ldd	r24, Z+10	; 0x0a
    bc9e:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    bca2:	be 01       	movw	r22, r28
    bca4:	69 5d       	subi	r22, 0xD9	; 217
    bca6:	7f 4f       	sbci	r23, 0xFF	; 255
    bca8:	c5 01       	movw	r24, r10
    bcaa:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5698
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    bcae:	6f e2       	ldi	r22, 0x2F	; 47
    bcb0:	76 e0       	ldi	r23, 0x06	; 6
    bcb2:	c7 01       	movw	r24, r14
    bcb4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
      strcat(line2, str2);
    bcb8:	b5 01       	movw	r22, r10
    bcba:	c7 01       	movw	r24, r14
    bcbc:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5704
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    bcc0:	e0 96       	adiw	r28, 0x30	; 48
    bcc2:	0f b6       	in	r0, 0x3f	; 63
    bcc4:	f8 94       	cli
    bcc6:	de bf       	out	0x3e, r29	; 62
    bcc8:	0f be       	out	0x3f, r0	; 63
    bcca:	cd bf       	out	0x3d, r28	; 61
    bccc:	df 91       	pop	r29
    bcce:	cf 91       	pop	r28
    bcd0:	1f 91       	pop	r17
    bcd2:	0f 91       	pop	r16
    bcd4:	ff 90       	pop	r15
    bcd6:	ef 90       	pop	r14
    bcd8:	df 90       	pop	r13
    bcda:	cf 90       	pop	r12
    bcdc:	bf 90       	pop	r11
    bcde:	af 90       	pop	r10
    bce0:	9f 90       	pop	r9
    bce2:	8f 90       	pop	r8
    bce4:	7f 90       	pop	r7
    bce6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5702
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    bce8:	6b ea       	ldi	r22, 0xAB	; 171
    bcea:	7c e3       	ldi	r23, 0x3C	; 60
    bcec:	c7 01       	movw	r24, r14
    bcee:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
    bcf2:	e6 cf       	rjmp	.-52     	; 0xbcc0 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

0000bcf4 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5306
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    bcf4:	3f 92       	push	r3
    bcf6:	4f 92       	push	r4
    bcf8:	5f 92       	push	r5
    bcfa:	6f 92       	push	r6
    bcfc:	7f 92       	push	r7
    bcfe:	8f 92       	push	r8
    bd00:	9f 92       	push	r9
    bd02:	af 92       	push	r10
    bd04:	bf 92       	push	r11
    bd06:	cf 92       	push	r12
    bd08:	df 92       	push	r13
    bd0a:	ef 92       	push	r14
    bd0c:	ff 92       	push	r15
    bd0e:	0f 93       	push	r16
    bd10:	1f 93       	push	r17
    bd12:	cf 93       	push	r28
    bd14:	df 93       	push	r29
    bd16:	cd b7       	in	r28, 0x3d	; 61
    bd18:	de b7       	in	r29, 0x3e	; 62
    bd1a:	ca 54       	subi	r28, 0x4A	; 74
    bd1c:	d1 09       	sbc	r29, r1
    bd1e:	0f b6       	in	r0, 0x3f	; 63
    bd20:	f8 94       	cli
    bd22:	de bf       	out	0x3e, r29	; 62
    bd24:	0f be       	out	0x3f, r0	; 63
    bd26:	cd bf       	out	0x3d, r28	; 61
    bd28:	4c 01       	movw	r8, r24
    bd2a:	3b 01       	movw	r6, r22
    bd2c:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bd2e:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    bd32:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5312
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    bd36:	26 0f       	add	r18, r22
    bd38:	37 1f       	adc	r19, r23
    bd3a:	48 0f       	add	r20, r24
    bd3c:	59 1f       	adc	r21, r25
    bd3e:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5313
  if (get_tds18s20(args2, &tds) == 1)
    bd42:	be 01       	movw	r22, r28
    bd44:	6b 5c       	subi	r22, 0xCB	; 203
    bd46:	7f 4f       	sbci	r23, 0xFF	; 255
    bd48:	8e 2d       	mov	r24, r14
    bd4a:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bd4e:	23 01       	movw	r4, r6
    bd50:	28 e2       	ldi	r18, 0x28	; 40
    bd52:	42 0e       	add	r4, r18
    bd54:	51 1c       	adc	r5, r1
    bd56:	9e 01       	movw	r18, r28
    bd58:	2f 5f       	subi	r18, 0xFF	; 255
    bd5a:	3f 4f       	sbci	r19, 0xFF	; 255
    bd5c:	59 01       	movw	r10, r18
    bd5e:	81 30       	cpi	r24, 0x01	; 1
    bd60:	09 f0       	breq	.+2      	; 0xbd64 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    bd62:	ca c0       	rjmp	.+404    	; 0xbef8 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5315
  {
    createString(str2, ':', tds.rom, 8, 16);
    bd64:	6e 01       	movw	r12, r28
    bd66:	3b e1       	ldi	r19, 0x1B	; 27
    bd68:	c3 0e       	add	r12, r19
    bd6a:	d1 1c       	adc	r13, r1
    bd6c:	00 e1       	ldi	r16, 0x10	; 16
    bd6e:	28 e0       	ldi	r18, 0x08	; 8
    bd70:	ae 01       	movw	r20, r28
    bd72:	4a 5c       	subi	r20, 0xCA	; 202
    bd74:	5f 4f       	sbci	r21, 0xFF	; 255
    bd76:	6a e3       	ldi	r22, 0x3A	; 58
    bd78:	c6 01       	movw	r24, r12
    bd7a:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5316
    sprintf(str1, "rom: %s", str2);
    bd7e:	df 92       	push	r13
    bd80:	cf 92       	push	r12
    bd82:	88 e9       	ldi	r24, 0x98	; 152
    bd84:	93 e0       	ldi	r25, 0x03	; 3
    bd86:	9f 93       	push	r25
    bd88:	8f 93       	push	r24
    bd8a:	bf 92       	push	r11
    bd8c:	af 92       	push	r10
    bd8e:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5317
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    bd92:	8a e0       	ldi	r24, 0x0A	; 10
    bd94:	88 0e       	add	r8, r24
    bd96:	91 1c       	adc	r9, r1
    bd98:	a3 01       	movw	r20, r6
    bd9a:	4b 5a       	subi	r20, 0xAB	; 171
    bd9c:	5f 4f       	sbci	r21, 0xFF	; 255
    bd9e:	ee 24       	eor	r14, r14
    bda0:	ea 94       	dec	r14
    bda2:	fe 2c       	mov	r15, r14
    bda4:	10 e0       	ldi	r17, 0x00	; 0
    bda6:	00 e0       	ldi	r16, 0x00	; 0
    bda8:	21 e0       	ldi	r18, 0x01	; 1
    bdaa:	b4 01       	movw	r22, r8
    bdac:	c5 01       	movw	r24, r10
    bdae:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5319
    ///
    strcpy_P(str2, text_nazev);
    bdb2:	64 e8       	ldi	r22, 0x84	; 132
    bdb4:	7c e3       	ldi	r23, 0x3C	; 60
    bdb6:	c6 01       	movw	r24, r12
    bdb8:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5320
    sprintf(str1, "%s: %s", str2, tds.name);
    bdbc:	85 e3       	ldi	r24, 0x35	; 53
    bdbe:	90 e0       	ldi	r25, 0x00	; 0
    bdc0:	8c 0f       	add	r24, r28
    bdc2:	9d 1f       	adc	r25, r29
    bdc4:	0c 96       	adiw	r24, 0x0c	; 12
    bdc6:	9f 93       	push	r25
    bdc8:	8f 93       	push	r24
    bdca:	df 92       	push	r13
    bdcc:	cf 92       	push	r12
    bdce:	80 ea       	ldi	r24, 0xA0	; 160
    bdd0:	93 e0       	ldi	r25, 0x03	; 3
    bdd2:	9f 93       	push	r25
    bdd4:	8f 93       	push	r24
    bdd6:	bf 92       	push	r11
    bdd8:	af 92       	push	r10
    bdda:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5321
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    bdde:	22 e0       	ldi	r18, 0x02	; 2
    bde0:	a2 01       	movw	r20, r4
    bde2:	b4 01       	movw	r22, r8
    bde4:	c5 01       	movw	r24, r10
    bde6:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5323
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    bdea:	21 96       	adiw	r28, 0x01	; 1
    bdec:	6e ad       	ldd	r22, Y+62	; 0x3e
    bdee:	7f ad       	ldd	r23, Y+63	; 0x3f
    bdf0:	21 97       	sbiw	r28, 0x01	; 1
    bdf2:	07 2e       	mov	r0, r23
    bdf4:	00 0c       	add	r0, r0
    bdf6:	88 0b       	sbc	r24, r24
    bdf8:	99 0b       	sbc	r25, r25
    bdfa:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    bdfe:	20 e0       	ldi	r18, 0x00	; 0
    be00:	30 e0       	ldi	r19, 0x00	; 0
    be02:	4a e7       	ldi	r20, 0x7A	; 122
    be04:	54 e4       	ldi	r21, 0x44	; 68
    be06:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5324
    dtostrf(te, 4, 2, str1);
    be0a:	85 01       	movw	r16, r10
    be0c:	22 e0       	ldi	r18, 0x02	; 2
    be0e:	44 e0       	ldi	r20, 0x04	; 4
    be10:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5325
    strcat(str1, "C");
    be14:	67 ed       	ldi	r22, 0xD7	; 215
    be16:	76 e0       	ldi	r23, 0x06	; 6
    be18:	c5 01       	movw	r24, r10
    be1a:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5326
    strcpy_P(str2, temp_offset_short);
    be1e:	66 e5       	ldi	r22, 0x56	; 86
    be20:	7c e3       	ldi	r23, 0x3C	; 60
    be22:	c6 01       	movw	r24, r12
    be24:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5327
    strcat(str2, str1);
    be28:	b5 01       	movw	r22, r10
    be2a:	c6 01       	movw	r24, r12
    be2c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5328
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    be30:	a3 01       	movw	r20, r6
    be32:	44 5c       	subi	r20, 0xC4	; 196
    be34:	5f 4f       	sbci	r21, 0xFF	; 255
    be36:	10 e0       	ldi	r17, 0x00	; 0
    be38:	00 e0       	ldi	r16, 0x00	; 0
    be3a:	22 e0       	ldi	r18, 0x02	; 2
    be3c:	b4 01       	movw	r22, r8
    be3e:	c6 01       	movw	r24, r12
    be40:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5330
    ///
    strcpy_P(str2, nastaveni_tds_period);
    be44:	67 e4       	ldi	r22, 0x47	; 71
    be46:	7c e3       	ldi	r23, 0x3C	; 60
    be48:	c6 01       	movw	r24, r12
    be4a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5331
    sprintf(str1, "%s: %ds", str2, tds.period);
    be4e:	2a 96       	adiw	r28, 0x0a	; 10
    be50:	8f ad       	ldd	r24, Y+63	; 0x3f
    be52:	2a 97       	sbiw	r28, 0x0a	; 10
    be54:	1f 92       	push	r1
    be56:	8f 93       	push	r24
    be58:	df 92       	push	r13
    be5a:	cf 92       	push	r12
    be5c:	87 ea       	ldi	r24, 0xA7	; 167
    be5e:	93 e0       	ldi	r25, 0x03	; 3
    be60:	9f 93       	push	r25
    be62:	8f 93       	push	r24
    be64:	bf 92       	push	r11
    be66:	af 92       	push	r10
    be68:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5332
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    be6c:	a3 01       	movw	r20, r6
    be6e:	4c 59       	subi	r20, 0x9C	; 156
    be70:	5f 4f       	sbci	r21, 0xFF	; 255
    be72:	22 e0       	ldi	r18, 0x02	; 2
    be74:	b4 01       	movw	r22, r8
    be76:	c5 01       	movw	r24, r10
    be78:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5335

    ///
    strcpy_P(str2, text_online);
    be7c:	6e e5       	ldi	r22, 0x5E	; 94
    be7e:	7c e3       	ldi	r23, 0x3C	; 60
    be80:	c6 01       	movw	r24, r12
    be82:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5336
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    be86:	9e e1       	ldi	r25, 0x1E	; 30
    be88:	39 9e       	mul	r3, r25
    be8a:	f0 01       	movw	r30, r0
    be8c:	11 24       	eor	r1, r1
    be8e:	e0 58       	subi	r30, 0x80	; 128
    be90:	f5 4f       	sbci	r31, 0xF5	; 245
    be92:	83 8d       	ldd	r24, Z+27	; 0x1b
    be94:	1f 92       	push	r1
    be96:	8f 93       	push	r24
    be98:	df 92       	push	r13
    be9a:	cf 92       	push	r12
    be9c:	8f ea       	ldi	r24, 0xAF	; 175
    be9e:	93 e0       	ldi	r25, 0x03	; 3
    bea0:	9f 93       	push	r25
    bea2:	8f 93       	push	r24
    bea4:	bf 92       	push	r11
    bea6:	af 92       	push	r10
    bea8:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5337
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    beac:	a3 01       	movw	r20, r6
    beae:	48 58       	subi	r20, 0x88	; 136
    beb0:	5f 4f       	sbci	r21, 0xFF	; 255
    beb2:	22 e0       	ldi	r18, 0x02	; 2
    beb4:	b4 01       	movw	r22, r8
    beb6:	c5 01       	movw	r24, r10
    beb8:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bebc:	0f b6       	in	r0, 0x3f	; 63
    bebe:	f8 94       	cli
    bec0:	de bf       	out	0x3e, r29	; 62
    bec2:	0f be       	out	0x3f, r0	; 63
    bec4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5344
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    bec6:	c6 5b       	subi	r28, 0xB6	; 182
    bec8:	df 4f       	sbci	r29, 0xFF	; 255
    beca:	0f b6       	in	r0, 0x3f	; 63
    becc:	f8 94       	cli
    bece:	de bf       	out	0x3e, r29	; 62
    bed0:	0f be       	out	0x3f, r0	; 63
    bed2:	cd bf       	out	0x3d, r28	; 61
    bed4:	df 91       	pop	r29
    bed6:	cf 91       	pop	r28
    bed8:	1f 91       	pop	r17
    beda:	0f 91       	pop	r16
    bedc:	ff 90       	pop	r15
    bede:	ef 90       	pop	r14
    bee0:	df 90       	pop	r13
    bee2:	cf 90       	pop	r12
    bee4:	bf 90       	pop	r11
    bee6:	af 90       	pop	r10
    bee8:	9f 90       	pop	r9
    beea:	8f 90       	pop	r8
    beec:	7f 90       	pop	r7
    beee:	6f 90       	pop	r6
    bef0:	5f 90       	pop	r5
    bef2:	4f 90       	pop	r4
    bef4:	3f 90       	pop	r3
    bef6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5341
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    bef8:	61 e4       	ldi	r22, 0x41	; 65
    befa:	7c e3       	ldi	r23, 0x3C	; 60
    befc:	c9 01       	movw	r24, r18
    befe:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5342
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    bf02:	b4 01       	movw	r22, r8
    bf04:	67 5e       	subi	r22, 0xE7	; 231
    bf06:	7f 4f       	sbci	r23, 0xFF	; 255
    bf08:	ee 24       	eor	r14, r14
    bf0a:	ea 94       	dec	r14
    bf0c:	fe 2c       	mov	r15, r14
    bf0e:	00 e0       	ldi	r16, 0x00	; 0
    bf10:	18 ef       	ldi	r17, 0xF8	; 248
    bf12:	24 e0       	ldi	r18, 0x04	; 4
    bf14:	a2 01       	movw	r20, r4
    bf16:	c5 01       	movw	r24, r10
    bf18:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bf1c:	d4 cf       	rjmp	.-88     	; 0xbec6 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000bf1e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5288
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    bf1e:	af 92       	push	r10
    bf20:	bf 92       	push	r11
    bf22:	cf 92       	push	r12
    bf24:	df 92       	push	r13
    bf26:	ef 92       	push	r14
    bf28:	ff 92       	push	r15
    bf2a:	0f 93       	push	r16
    bf2c:	1f 93       	push	r17
    bf2e:	cf 93       	push	r28
    bf30:	df 93       	push	r29
    bf32:	cd b7       	in	r28, 0x3d	; 61
    bf34:	de b7       	in	r29, 0x3e	; 62
    bf36:	ca 54       	subi	r28, 0x4A	; 74
    bf38:	d1 09       	sbc	r29, r1
    bf3a:	0f b6       	in	r0, 0x3f	; 63
    bf3c:	f8 94       	cli
    bf3e:	de bf       	out	0x3e, r29	; 62
    bf40:	0f be       	out	0x3f, r0	; 63
    bf42:	cd bf       	out	0x3d, r28	; 61
    bf44:	6c 01       	movw	r12, r24
    bf46:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5293
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    bf48:	be 01       	movw	r22, r28
    bf4a:	6b 5c       	subi	r22, 0xCB	; 203
    bf4c:	7f 4f       	sbci	r23, 0xFF	; 255
    bf4e:	8e 2d       	mov	r24, r14
    bf50:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bf54:	81 30       	cpi	r24, 0x01	; 1
    bf56:	d9 f5       	brne	.+118    	; 0xbfce <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5296
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    bf58:	8e e1       	ldi	r24, 0x1E	; 30
    bf5a:	e8 9e       	mul	r14, r24
    bf5c:	f0 01       	movw	r30, r0
    bf5e:	11 24       	eor	r1, r1
    bf60:	e0 58       	subi	r30, 0x80	; 128
    bf62:	f5 4f       	sbci	r31, 0xF5	; 245
    bf64:	65 81       	ldd	r22, Z+5	; 0x05
    bf66:	76 81       	ldd	r23, Z+6	; 0x06
    bf68:	07 2e       	mov	r0, r23
    bf6a:	00 0c       	add	r0, r0
    bf6c:	88 0b       	sbc	r24, r24
    bf6e:	99 0b       	sbc	r25, r25
    bf70:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    bf74:	20 e0       	ldi	r18, 0x00	; 0
    bf76:	30 e0       	ldi	r19, 0x00	; 0
    bf78:	4a e7       	ldi	r20, 0x7A	; 122
    bf7a:	54 e4       	ldi	r21, 0x44	; 68
    bf7c:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5297
    dtostrf(te, 4, 2, str1);
    bf80:	8e 01       	movw	r16, r28
    bf82:	05 5e       	subi	r16, 0xE5	; 229
    bf84:	1f 4f       	sbci	r17, 0xFF	; 255
    bf86:	22 e0       	ldi	r18, 0x02	; 2
    bf88:	44 e0       	ldi	r20, 0x04	; 4
    bf8a:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5298
    strcat(str1, "C");
    bf8e:	67 ed       	ldi	r22, 0xD7	; 215
    bf90:	76 e0       	ldi	r23, 0x06	; 6
    bf92:	c8 01       	movw	r24, r16
    bf94:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5299
    strcpy_P(str2, current_temp_short);
    bf98:	6b e7       	ldi	r22, 0x7B	; 123
    bf9a:	7c e3       	ldi	r23, 0x3C	; 60
    bf9c:	ce 01       	movw	r24, r28
    bf9e:	01 96       	adiw	r24, 0x01	; 1
    bfa0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5300
    strcat(str2, str1);
    bfa4:	b8 01       	movw	r22, r16
    bfa6:	ce 01       	movw	r24, r28
    bfa8:	01 96       	adiw	r24, 0x01	; 1
    bfaa:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5301
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    bfae:	a5 01       	movw	r20, r10
    bfb0:	44 57       	subi	r20, 0x74	; 116
    bfb2:	5f 4f       	sbci	r21, 0xFF	; 255
    bfb4:	b6 01       	movw	r22, r12
    bfb6:	66 5f       	subi	r22, 0xF6	; 246
    bfb8:	7f 4f       	sbci	r23, 0xFF	; 255
    bfba:	ee 24       	eor	r14, r14
    bfbc:	ea 94       	dec	r14
    bfbe:	fe 2c       	mov	r15, r14
    bfc0:	10 e0       	ldi	r17, 0x00	; 0
    bfc2:	00 e0       	ldi	r16, 0x00	; 0
    bfc4:	22 e0       	ldi	r18, 0x02	; 2
    bfc6:	ce 01       	movw	r24, r28
    bfc8:	01 96       	adiw	r24, 0x01	; 1
    bfca:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5303
  }
}
    bfce:	c6 5b       	subi	r28, 0xB6	; 182
    bfd0:	df 4f       	sbci	r29, 0xFF	; 255
    bfd2:	0f b6       	in	r0, 0x3f	; 63
    bfd4:	f8 94       	cli
    bfd6:	de bf       	out	0x3e, r29	; 62
    bfd8:	0f be       	out	0x3f, r0	; 63
    bfda:	cd bf       	out	0x3d, r28	; 61
    bfdc:	df 91       	pop	r29
    bfde:	cf 91       	pop	r28
    bfe0:	1f 91       	pop	r17
    bfe2:	0f 91       	pop	r16
    bfe4:	ff 90       	pop	r15
    bfe6:	ef 90       	pop	r14
    bfe8:	df 90       	pop	r13
    bfea:	cf 90       	pop	r12
    bfec:	bf 90       	pop	r11
    bfee:	af 90       	pop	r10
    bff0:	08 95       	ret

0000bff2 <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    bff2:	1f 93       	push	r17
    bff4:	cf 93       	push	r28
    bff6:	df 93       	push	r29
    bff8:	cd b7       	in	r28, 0x3d	; 61
    bffa:	de b7       	in	r29, 0x3e	; 62
    bffc:	a0 97       	sbiw	r28, 0x20	; 32
    bffe:	0f b6       	in	r0, 0x3f	; 63
    c000:	f8 94       	cli
    c002:	de bf       	out	0x3e, r29	; 62
    c004:	0f be       	out	0x3f, r0	; 63
    c006:	cd bf       	out	0x3d, r28	; 61
    c008:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c00a:	be 01       	movw	r22, r28
    c00c:	6f 5f       	subi	r22, 0xFF	; 255
    c00e:	7f 4f       	sbci	r23, 0xFF	; 255
    c010:	81 2f       	mov	r24, r17
    c012:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    c016:	be 01       	movw	r22, r28
    c018:	63 5f       	subi	r22, 0xF3	; 243
    c01a:	7f 4f       	sbci	r23, 0xFF	; 255
    c01c:	ce 01       	movw	r24, r28
    c01e:	47 96       	adiw	r24, 0x17	; 23
    c020:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    c024:	60 e0       	ldi	r22, 0x00	; 0
    c026:	87 e6       	ldi	r24, 0x67	; 103
    c028:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    c02c:	be 01       	movw	r22, r28
    c02e:	69 5e       	subi	r22, 0xE9	; 233
    c030:	7f 4f       	sbci	r23, 0xFF	; 255
    c032:	89 e3       	ldi	r24, 0x39	; 57
    c034:	99 e0       	ldi	r25, 0x09	; 9
    c036:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  dialog_set_string_max_length = max_length;
    c03a:	88 e0       	ldi	r24, 0x08	; 8
    c03c:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  dialog_set_string_args = idx;
    c040:	10 93 37 09 	sts	0x0937, r17	; 0x800937 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  dialog_save_string_function = save_function;
    c044:	81 ee       	ldi	r24, 0xE1	; 225
    c046:	90 e6       	ldi	r25, 0x60	; 96
    c048:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <dialog_save_string_function+0x1>
    c04c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_save_string_function>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
    c050:	a0 96       	adiw	r28, 0x20	; 32
    c052:	0f b6       	in	r0, 0x3f	; 63
    c054:	f8 94       	cli
    c056:	de bf       	out	0x3e, r29	; 62
    c058:	0f be       	out	0x3f, r0	; 63
    c05a:	cd bf       	out	0x3d, r28	; 61
    c05c:	df 91       	pop	r29
    c05e:	cf 91       	pop	r28
    c060:	1f 91       	pop	r17
    c062:	08 95       	ret

0000c064 <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    c064:	ff 92       	push	r15
    c066:	0f 93       	push	r16
    c068:	1f 93       	push	r17
    c06a:	cf 93       	push	r28
    c06c:	df 93       	push	r29
    c06e:	cd b7       	in	r28, 0x3d	; 61
    c070:	de b7       	in	r29, 0x3e	; 62
    c072:	66 97       	sbiw	r28, 0x16	; 22
    c074:	0f b6       	in	r0, 0x3f	; 63
    c076:	f8 94       	cli
    c078:	de bf       	out	0x3e, r29	; 62
    c07a:	0f be       	out	0x3f, r0	; 63
    c07c:	cd bf       	out	0x3d, r28	; 61
    c07e:	08 2f       	mov	r16, r24
    c080:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    c082:	60 e0       	ldi	r22, 0x00	; 0
    c084:	86 e6       	ldi	r24, 0x66	; 102
    c086:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c08a:	be 01       	movw	r22, r28
    c08c:	6f 5f       	subi	r22, 0xFF	; 255
    c08e:	7f 4f       	sbci	r23, 0xFF	; 255
    c090:	8f 2d       	mov	r24, r15
    c092:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:115
  return tds.period;
    c096:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c098:	85 e1       	ldi	r24, 0x15	; 21
    c09a:	08 9f       	mul	r16, r24
    c09c:	80 01       	movw	r16, r0
    c09e:	11 24       	eor	r1, r1
    c0a0:	07 55       	subi	r16, 0x57	; 87
    c0a2:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    c0a4:	70 e0       	ldi	r23, 0x00	; 0
    c0a6:	90 e0       	ldi	r25, 0x00	; 0
    c0a8:	80 e0       	ldi	r24, 0x00	; 0
    c0aa:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    c0ae:	f8 01       	movw	r30, r16
    c0b0:	60 83       	st	Z, r22
    c0b2:	71 83       	std	Z+1, r23	; 0x01
    c0b4:	82 83       	std	Z+2, r24	; 0x02
    c0b6:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    c0b8:	80 e0       	ldi	r24, 0x00	; 0
    c0ba:	90 e0       	ldi	r25, 0x00	; 0
    c0bc:	a0 e8       	ldi	r26, 0x80	; 128
    c0be:	bf e3       	ldi	r27, 0x3F	; 63
    c0c0:	80 87       	std	Z+8, r24	; 0x08
    c0c2:	91 87       	std	Z+9, r25	; 0x09
    c0c4:	a2 87       	std	Z+10, r26	; 0x0a
    c0c6:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    c0c8:	40 e0       	ldi	r20, 0x00	; 0
    c0ca:	50 e0       	ldi	r21, 0x00	; 0
    c0cc:	6f e7       	ldi	r22, 0x7F	; 127
    c0ce:	73 e4       	ldi	r23, 0x43	; 67
    c0d0:	44 83       	std	Z+4, r20	; 0x04
    c0d2:	55 83       	std	Z+5, r21	; 0x05
    c0d4:	66 83       	std	Z+6, r22	; 0x06
    c0d6:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    c0d8:	86 87       	std	Z+14, r24	; 0x0e
    c0da:	97 87       	std	Z+15, r25	; 0x0f
    c0dc:	a0 8b       	std	Z+16, r26	; 0x10
    c0de:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    c0e0:	81 e0       	ldi	r24, 0x01	; 1
    c0e2:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    c0e4:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    c0e6:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    c0e8:	84 e1       	ldi	r24, 0x14	; 20
    c0ea:	91 e6       	ldi	r25, 0x61	; 97
    c0ec:	94 8b       	std	Z+20, r25	; 0x14
    c0ee:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    c0f0:	66 96       	adiw	r28, 0x16	; 22
    c0f2:	0f b6       	in	r0, 0x3f	; 63
    c0f4:	f8 94       	cli
    c0f6:	de bf       	out	0x3e, r29	; 62
    c0f8:	0f be       	out	0x3f, r0	; 63
    c0fa:	cd bf       	out	0x3d, r28	; 61
    c0fc:	df 91       	pop	r29
    c0fe:	cf 91       	pop	r28
    c100:	1f 91       	pop	r17
    c102:	0f 91       	pop	r16
    c104:	ff 90       	pop	r15
    c106:	08 95       	ret

0000c108 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    c108:	ff 92       	push	r15
    c10a:	0f 93       	push	r16
    c10c:	1f 93       	push	r17
    c10e:	cf 93       	push	r28
    c110:	df 93       	push	r29
    c112:	cd b7       	in	r28, 0x3d	; 61
    c114:	de b7       	in	r29, 0x3e	; 62
    c116:	66 97       	sbiw	r28, 0x16	; 22
    c118:	0f b6       	in	r0, 0x3f	; 63
    c11a:	f8 94       	cli
    c11c:	de bf       	out	0x3e, r29	; 62
    c11e:	0f be       	out	0x3f, r0	; 63
    c120:	cd bf       	out	0x3d, r28	; 61
    c122:	08 2f       	mov	r16, r24
    c124:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    c126:	60 e0       	ldi	r22, 0x00	; 0
    c128:	86 e6       	ldi	r24, 0x66	; 102
    c12a:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c12e:	be 01       	movw	r22, r28
    c130:	6f 5f       	subi	r22, 0xFF	; 255
    c132:	7f 4f       	sbci	r23, 0xFF	; 255
    c134:	8f 2d       	mov	r24, r15
    c136:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:99
  return tds.offset;
    c13a:	6b 85       	ldd	r22, Y+11	; 0x0b
    c13c:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c13e:	85 e1       	ldi	r24, 0x15	; 21
    c140:	08 9f       	mul	r16, r24
    c142:	80 01       	movw	r16, r0
    c144:	11 24       	eor	r1, r1
    c146:	07 55       	subi	r16, 0x57	; 87
    c148:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    c14a:	07 2e       	mov	r0, r23
    c14c:	00 0c       	add	r0, r0
    c14e:	88 0b       	sbc	r24, r24
    c150:	99 0b       	sbc	r25, r25
    c152:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    c156:	20 e0       	ldi	r18, 0x00	; 0
    c158:	30 e0       	ldi	r19, 0x00	; 0
    c15a:	4a e7       	ldi	r20, 0x7A	; 122
    c15c:	54 e4       	ldi	r21, 0x44	; 68
    c15e:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c162:	f8 01       	movw	r30, r16
    c164:	60 83       	st	Z, r22
    c166:	71 83       	std	Z+1, r23	; 0x01
    c168:	82 83       	std	Z+2, r24	; 0x02
    c16a:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  menu_dialog_variable[idx].variable_min = min;
    c16c:	80 e0       	ldi	r24, 0x00	; 0
    c16e:	90 e0       	ldi	r25, 0x00	; 0
    c170:	a0 e2       	ldi	r26, 0x20	; 32
    c172:	b1 ec       	ldi	r27, 0xC1	; 193
    c174:	80 87       	std	Z+8, r24	; 0x08
    c176:	91 87       	std	Z+9, r25	; 0x09
    c178:	a2 87       	std	Z+10, r26	; 0x0a
    c17a:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  menu_dialog_variable[idx].variable_max = max;
    c17c:	80 e0       	ldi	r24, 0x00	; 0
    c17e:	90 e0       	ldi	r25, 0x00	; 0
    c180:	a0 e2       	ldi	r26, 0x20	; 32
    c182:	b1 e4       	ldi	r27, 0x41	; 65
    c184:	84 83       	std	Z+4, r24	; 0x04
    c186:	95 83       	std	Z+5, r25	; 0x05
    c188:	a6 83       	std	Z+6, r26	; 0x06
    c18a:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  menu_dialog_variable[idx].variable_step = step;
    c18c:	8d ec       	ldi	r24, 0xCD	; 205
    c18e:	9c ec       	ldi	r25, 0xCC	; 204
    c190:	ac ec       	ldi	r26, 0xCC	; 204
    c192:	bd e3       	ldi	r27, 0x3D	; 61
    c194:	86 87       	std	Z+14, r24	; 0x0e
    c196:	97 87       	std	Z+15, r25	; 0x0f
    c198:	a0 8b       	std	Z+16, r26	; 0x10
    c19a:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  menu_dialog_variable[idx].number_type = number_type;
    c19c:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  menu_dialog_variable[idx].args = args;
    c19e:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  menu_dialog_variable[idx].update_now = update_now;
    c1a0:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  menu_dialog_variable[idx].save_function = save_function;
    c1a2:	8a e4       	ldi	r24, 0x4A	; 74
    c1a4:	91 e6       	ldi	r25, 0x61	; 97
    c1a6:	94 8b       	std	Z+20, r25	; 0x14
    c1a8:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    c1aa:	66 96       	adiw	r28, 0x16	; 22
    c1ac:	0f b6       	in	r0, 0x3f	; 63
    c1ae:	f8 94       	cli
    c1b0:	de bf       	out	0x3e, r29	; 62
    c1b2:	0f be       	out	0x3f, r0	; 63
    c1b4:	cd bf       	out	0x3d, r28	; 61
    c1b6:	df 91       	pop	r29
    c1b8:	cf 91       	pop	r28
    c1ba:	1f 91       	pop	r17
    c1bc:	0f 91       	pop	r16
    c1be:	ff 90       	pop	r15
    c1c0:	08 95       	ret

0000c1c2 <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    c1c2:	1f 93       	push	r17
    c1c4:	cf 93       	push	r28
    c1c6:	df 93       	push	r29
    c1c8:	cd b7       	in	r28, 0x3d	; 61
    c1ca:	de b7       	in	r29, 0x3e	; 62
    c1cc:	a0 97       	sbiw	r28, 0x20	; 32
    c1ce:	0f b6       	in	r0, 0x3f	; 63
    c1d0:	f8 94       	cli
    c1d2:	de bf       	out	0x3e, r29	; 62
    c1d4:	0f be       	out	0x3f, r0	; 63
    c1d6:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    c1d8:	69 e3       	ldi	r22, 0x39	; 57
    c1da:	79 e0       	ldi	r23, 0x09	; 9
    c1dc:	ce 01       	movw	r24, r28
    c1de:	47 96       	adiw	r24, 0x17	; 23
    c1e0:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    c1e4:	8f 89       	ldd	r24, Y+23	; 0x17
    c1e6:	88 23       	and	r24, r24
    c1e8:	a9 f0       	breq	.+42     	; 0xc214 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    c1ea:	10 91 37 09 	lds	r17, 0x0937	; 0x800937 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c1ee:	be 01       	movw	r22, r28
    c1f0:	6f 5f       	subi	r22, 0xFF	; 255
    c1f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c1f4:	81 2f       	mov	r24, r17
    c1f6:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    c1fa:	be 01       	movw	r22, r28
    c1fc:	69 5e       	subi	r22, 0xE9	; 233
    c1fe:	7f 4f       	sbci	r23, 0xFF	; 255
    c200:	ce 01       	movw	r24, r28
    c202:	0d 96       	adiw	r24, 0x0d	; 13
    c204:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    c208:	be 01       	movw	r22, r28
    c20a:	6f 5f       	subi	r22, 0xFF	; 255
    c20c:	7f 4f       	sbci	r23, 0xFF	; 255
    c20e:	81 2f       	mov	r24, r17
    c210:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    c214:	a0 96       	adiw	r28, 0x20	; 32
    c216:	0f b6       	in	r0, 0x3f	; 63
    c218:	f8 94       	cli
    c21a:	de bf       	out	0x3e, r29	; 62
    c21c:	0f be       	out	0x3f, r0	; 63
    c21e:	cd bf       	out	0x3d, r28	; 61
    c220:	df 91       	pop	r29
    c222:	cf 91       	pop	r28
    c224:	1f 91       	pop	r17
    c226:	08 95       	ret

0000c228 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    c228:	ff 92       	push	r15
    c22a:	0f 93       	push	r16
    c22c:	1f 93       	push	r17
    c22e:	cf 93       	push	r28
    c230:	df 93       	push	r29
    c232:	cd b7       	in	r28, 0x3d	; 61
    c234:	de b7       	in	r29, 0x3e	; 62
    c236:	66 97       	sbiw	r28, 0x16	; 22
    c238:	0f b6       	in	r0, 0x3f	; 63
    c23a:	f8 94       	cli
    c23c:	de bf       	out	0x3e, r29	; 62
    c23e:	0f be       	out	0x3f, r0	; 63
    c240:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    c242:	95 e1       	ldi	r25, 0x15	; 21
    c244:	89 9f       	mul	r24, r25
    c246:	80 01       	movw	r16, r0
    c248:	11 24       	eor	r1, r1
    c24a:	07 55       	subi	r16, 0x57	; 87
    c24c:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
    c24e:	f8 01       	movw	r30, r16
    c250:	60 81       	ld	r22, Z
    c252:	71 81       	ldd	r23, Z+1	; 0x01
    c254:	82 81       	ldd	r24, Z+2	; 0x02
    c256:	93 81       	ldd	r25, Z+3	; 0x03
    c258:	0e 94 75 bc 	call	0x178ea	; 0x178ea <__fixunssfsi>
    c25c:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    c25e:	f8 01       	movw	r30, r16
    c260:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c262:	be 01       	movw	r22, r28
    c264:	6f 5f       	subi	r22, 0xFF	; 255
    c266:	7f 4f       	sbci	r23, 0xFF	; 255
    c268:	81 2f       	mov	r24, r17
    c26a:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:107
  tds.period = period;
    c26e:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    c270:	be 01       	movw	r22, r28
    c272:	6f 5f       	subi	r22, 0xFF	; 255
    c274:	7f 4f       	sbci	r23, 0xFF	; 255
    c276:	81 2f       	mov	r24, r17
    c278:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
    c27c:	66 96       	adiw	r28, 0x16	; 22
    c27e:	0f b6       	in	r0, 0x3f	; 63
    c280:	f8 94       	cli
    c282:	de bf       	out	0x3e, r29	; 62
    c284:	0f be       	out	0x3f, r0	; 63
    c286:	cd bf       	out	0x3d, r28	; 61
    c288:	df 91       	pop	r29
    c28a:	cf 91       	pop	r28
    c28c:	1f 91       	pop	r17
    c28e:	0f 91       	pop	r16
    c290:	ff 90       	pop	r15
    c292:	08 95       	ret

0000c294 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    c294:	cf 92       	push	r12
    c296:	df 92       	push	r13
    c298:	ef 92       	push	r14
    c29a:	ff 92       	push	r15
    c29c:	0f 93       	push	r16
    c29e:	1f 93       	push	r17
    c2a0:	cf 93       	push	r28
    c2a2:	df 93       	push	r29
    c2a4:	cd b7       	in	r28, 0x3d	; 61
    c2a6:	de b7       	in	r29, 0x3e	; 62
    c2a8:	66 97       	sbiw	r28, 0x16	; 22
    c2aa:	0f b6       	in	r0, 0x3f	; 63
    c2ac:	f8 94       	cli
    c2ae:	de bf       	out	0x3e, r29	; 62
    c2b0:	0f be       	out	0x3f, r0	; 63
    c2b2:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    c2b4:	95 e1       	ldi	r25, 0x15	; 21
    c2b6:	89 9f       	mul	r24, r25
    c2b8:	80 01       	movw	r16, r0
    c2ba:	11 24       	eor	r1, r1
    c2bc:	07 55       	subi	r16, 0x57	; 87
    c2be:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
    c2c0:	20 e0       	ldi	r18, 0x00	; 0
    c2c2:	30 e0       	ldi	r19, 0x00	; 0
    c2c4:	4a e7       	ldi	r20, 0x7A	; 122
    c2c6:	54 e4       	ldi	r21, 0x44	; 68
    c2c8:	f8 01       	movw	r30, r16
    c2ca:	60 81       	ld	r22, Z
    c2cc:	71 81       	ldd	r23, Z+1	; 0x01
    c2ce:	82 81       	ldd	r24, Z+2	; 0x02
    c2d0:	93 81       	ldd	r25, Z+3	; 0x03
    c2d2:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
    c2d6:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    c2da:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    c2dc:	f8 01       	movw	r30, r16
    c2de:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c2e0:	be 01       	movw	r22, r28
    c2e2:	6f 5f       	subi	r22, 0xFF	; 255
    c2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e6:	81 2f       	mov	r24, r17
    c2e8:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    c2ec:	dc 86       	std	Y+12, r13	; 0x0c
    c2ee:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    c2f0:	be 01       	movw	r22, r28
    c2f2:	6f 5f       	subi	r22, 0xFF	; 255
    c2f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c2f6:	81 2f       	mov	r24, r17
    c2f8:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}
    c2fc:	66 96       	adiw	r28, 0x16	; 22
    c2fe:	0f b6       	in	r0, 0x3f	; 63
    c300:	f8 94       	cli
    c302:	de bf       	out	0x3e, r29	; 62
    c304:	0f be       	out	0x3f, r0	; 63
    c306:	cd bf       	out	0x3d, r28	; 61
    c308:	df 91       	pop	r29
    c30a:	cf 91       	pop	r28
    c30c:	1f 91       	pop	r17
    c30e:	0f 91       	pop	r16
    c310:	ff 90       	pop	r15
    c312:	ef 90       	pop	r14
    c314:	df 90       	pop	r13
    c316:	cf 90       	pop	r12
    c318:	08 95       	ret

0000c31a <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    c31a:	0f 93       	push	r16
    c31c:	1f 93       	push	r17
    c31e:	cf 93       	push	r28
    c320:	df 93       	push	r29
    c322:	8c 01       	movw	r16, r24
    c324:	c4 e6       	ldi	r28, 0x64	; 100
    c326:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    c328:	ce 01       	movw	r24, r28
    c32a:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    c32e:	f8 01       	movw	r30, r16
    c330:	81 93       	st	Z+, r24
    c332:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    c334:	10 82       	st	Z, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    c336:	88 23       	and	r24, r24
    c338:	21 f0       	breq	.+8      	; 0xc342 <device_get_name(char*)+0x28>
    c33a:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    c33c:	cd 36       	cpi	r28, 0x6D	; 109
    c33e:	d1 05       	cpc	r29, r1
    c340:	99 f7       	brne	.-26     	; 0xc328 <device_get_name(char*)+0xe>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    c342:	df 91       	pop	r29
    c344:	cf 91       	pop	r28
    c346:	1f 91       	pop	r17
    c348:	0f 91       	pop	r16
    c34a:	08 95       	ret

0000c34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    c34c:	cf 92       	push	r12
    c34e:	df 92       	push	r13
    c350:	ef 92       	push	r14
    c352:	ff 92       	push	r15
    c354:	0f 93       	push	r16
    c356:	1f 93       	push	r17
    c358:	cf 93       	push	r28
    c35a:	df 93       	push	r29
    c35c:	cd b7       	in	r28, 0x3d	; 61
    c35e:	de b7       	in	r29, 0x3e	; 62
    c360:	ca 54       	subi	r28, 0x4A	; 74
    c362:	d1 09       	sbc	r29, r1
    c364:	0f b6       	in	r0, 0x3f	; 63
    c366:	f8 94       	cli
    c368:	de bf       	out	0x3e, r29	; 62
    c36a:	0f be       	out	0x3f, r0	; 63
    c36c:	cd bf       	out	0x3d, r28	; 61
    c36e:	8c 01       	movw	r16, r24
    c370:	6b 01       	movw	r12, r22
    c372:	7a 01       	movw	r14, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    c374:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
    c378:	88 23       	and	r24, r24
    c37a:	89 f1       	breq	.+98     	; 0xc3de <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    c37c:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <mqtt_send_message>
    c380:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <mqtt_send_message+0x1>
    c384:	01 96       	adiw	r24, 0x01	; 1
    c386:	90 93 d1 0b 	sts	0x0BD1, r25	; 0x800bd1 <mqtt_send_message+0x1>
    c38a:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    c38e:	ce 01       	movw	r24, r28
    c390:	8f 5b       	subi	r24, 0xBF	; 191
    c392:	9f 4f       	sbci	r25, 0xFF	; 255
    c394:	0e 94 8d 61 	call	0xc31a	; 0xc31a <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    c398:	60 91 ce 0b 	lds	r22, 0x0BCE	; 0x800bce <header_out>
    c39c:	70 91 cf 0b 	lds	r23, 0x0BCF	; 0x800bcf <header_out+0x1>
    c3a0:	ce 01       	movw	r24, r28
    c3a2:	01 96       	adiw	r24, 0x01	; 1
    c3a4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    c3a8:	be 01       	movw	r22, r28
    c3aa:	6f 5b       	subi	r22, 0xBF	; 191
    c3ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ae:	ce 01       	movw	r24, r28
    c3b0:	01 96       	adiw	r24, 0x01	; 1
    c3b2:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    c3b6:	68 ee       	ldi	r22, 0xE8	; 232
    c3b8:	73 e0       	ldi	r23, 0x03	; 3
    c3ba:	ce 01       	movw	r24, r28
    c3bc:	01 96       	adiw	r24, 0x01	; 1
    c3be:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    c3c2:	b6 01       	movw	r22, r12
    c3c4:	ce 01       	movw	r24, r28
    c3c6:	01 96       	adiw	r24, 0x01	; 1
    c3c8:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    c3cc:	a7 01       	movw	r20, r14
    c3ce:	be 01       	movw	r22, r28
    c3d0:	6f 5f       	subi	r22, 0xFF	; 255
    c3d2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3d4:	c8 01       	movw	r24, r16
    c3d6:	0e 94 8c 9c 	call	0x13918	; 0x13918 <PubSubClient::publish(char const*, char const*)>
    c3da:	81 11       	cpse	r24, r1
    c3dc:	09 c0       	rjmp	.+18     	; 0xc3f0 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    c3de:	80 91 d2 0b 	lds	r24, 0x0BD2	; 0x800bd2 <mqtt_error>
    c3e2:	90 91 d3 0b 	lds	r25, 0x0BD3	; 0x800bd3 <mqtt_error+0x1>
    c3e6:	01 96       	adiw	r24, 0x01	; 1
    c3e8:	90 93 d3 0b 	sts	0x0BD3, r25	; 0x800bd3 <mqtt_error+0x1>
    c3ec:	80 93 d2 0b 	sts	0x0BD2, r24	; 0x800bd2 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:232
}
    c3f0:	c6 5b       	subi	r28, 0xB6	; 182
    c3f2:	df 4f       	sbci	r29, 0xFF	; 255
    c3f4:	0f b6       	in	r0, 0x3f	; 63
    c3f6:	f8 94       	cli
    c3f8:	de bf       	out	0x3e, r29	; 62
    c3fa:	0f be       	out	0x3f, r0	; 63
    c3fc:	cd bf       	out	0x3d, r28	; 61
    c3fe:	df 91       	pop	r29
    c400:	cf 91       	pop	r28
    c402:	1f 91       	pop	r17
    c404:	0f 91       	pop	r16
    c406:	ff 90       	pop	r15
    c408:	ef 90       	pop	r14
    c40a:	df 90       	pop	r13
    c40c:	cf 90       	pop	r12
    c40e:	08 95       	ret

0000c410 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    c410:	cf 93       	push	r28
    c412:	df 93       	push	r29
    c414:	cd b7       	in	r28, 0x3d	; 61
    c416:	de b7       	in	r29, 0x3e	; 62
    c418:	60 97       	sbiw	r28, 0x10	; 16
    c41a:	0f b6       	in	r0, 0x3f	; 63
    c41c:	f8 94       	cli
    c41e:	de bf       	out	0x3e, r29	; 62
    c420:	0f be       	out	0x3f, r0	; 63
    c422:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    c424:	90 91 db 09 	lds	r25, 0x09DB	; 0x8009db <mqtt_log_cnt>
    c428:	e9 2f       	mov	r30, r25
    c42a:	f0 e0       	ldi	r31, 0x00	; 0
    c42c:	e5 5a       	subi	r30, 0xA5	; 165
    c42e:	f6 4f       	sbci	r31, 0xF6	; 246
    c430:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    c432:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    c434:	9f 5f       	subi	r25, 0xFF	; 255
    c436:	90 93 db 09 	sts	0x09DB, r25	; 0x8009db <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    c43a:	97 fd       	sbrc	r25, 7
    c43c:	04 c0       	rjmp	.+8      	; 0xc446 <printf_via_mqtt(char, __file*)+0x36>
    c43e:	8a 30       	cpi	r24, 0x0A	; 10
    c440:	11 f0       	breq	.+4      	; 0xc446 <printf_via_mqtt(char, __file*)+0x36>
    c442:	81 11       	cpse	r24, r1
    c444:	13 c0       	rjmp	.+38     	; 0xc46c <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    c446:	66 eb       	ldi	r22, 0xB6	; 182
    c448:	73 e0       	ldi	r23, 0x03	; 3
    c44a:	ce 01       	movw	r24, r28
    c44c:	01 96       	adiw	r24, 0x01	; 1
    c44e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    c452:	4b e5       	ldi	r20, 0x5B	; 91
    c454:	59 e0       	ldi	r21, 0x09	; 9
    c456:	be 01       	movw	r22, r28
    c458:	6f 5f       	subi	r22, 0xFF	; 255
    c45a:	7f 4f       	sbci	r23, 0xFF	; 255
    c45c:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <pub_mqtt_client>
    c460:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <pub_mqtt_client+0x1>
    c464:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    c468:	10 92 db 09 	sts	0x09DB, r1	; 0x8009db <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:448
  }
}
    c46c:	60 96       	adiw	r28, 0x10	; 16
    c46e:	0f b6       	in	r0, 0x3f	; 63
    c470:	f8 94       	cli
    c472:	de bf       	out	0x3e, r29	; 62
    c474:	0f be       	out	0x3f, r0	; 63
    c476:	cd bf       	out	0x3d, r28	; 61
    c478:	df 91       	pop	r29
    c47a:	cf 91       	pop	r28
    c47c:	08 95       	ret

0000c47e <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3110
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    c47e:	cf 93       	push	r28
    c480:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
  if (idx < MAX_RTDS)
    c482:	8a 30       	cpi	r24, 0x0A	; 10
    c484:	68 f4       	brcc	.+26     	; 0xc4a0 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    c486:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    c488:	24 e1       	ldi	r18, 0x14	; 20
    c48a:	82 9f       	mul	r24, r18
    c48c:	c0 01       	movw	r24, r0
    c48e:	11 24       	eor	r1, r1
    c490:	83 54       	subi	r24, 0x43	; 67
    c492:	9a 4f       	sbci	r25, 0xFA	; 250
    c494:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c498:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
  }
  else
    *active = 255;
}
    c49a:	df 91       	pop	r29
    c49c:	cf 91       	pop	r28
    c49e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    c4a0:	8f ef       	ldi	r24, 0xFF	; 255
    c4a2:	fb 01       	movw	r30, r22
    c4a4:	80 83       	st	Z, r24
    c4a6:	f9 cf       	rjmp	.-14     	; 0xc49a <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000c4a8 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5803
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t args2, uint8_t loop_idx)
{
    c4a8:	1f 93       	push	r17
    c4aa:	cf 93       	push	r28
    c4ac:	df 93       	push	r29
    c4ae:	1f 92       	push	r1
    c4b0:	cd b7       	in	r28, 0x3d	; 61
    c4b2:	de b7       	in	r29, 0x3e	; 62
    c4b4:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5808
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    c4b6:	be 01       	movw	r22, r28
    c4b8:	6f 5f       	subi	r22, 0xFF	; 255
    c4ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c4bc:	84 2f       	mov	r24, r20
    c4be:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5809
  if (active == 1)
    c4c2:	89 81       	ldd	r24, Y+1	; 0x01
    c4c4:	81 30       	cpi	r24, 0x01	; 1
    c4c6:	21 f4       	brne	.+8      	; 0xc4d0 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5811
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    c4c8:	61 2f       	mov	r22, r17
    c4ca:	87 e0       	ldi	r24, 0x07	; 7
    c4cc:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5813
  }
}
    c4d0:	0f 90       	pop	r0
    c4d2:	df 91       	pop	r29
    c4d4:	cf 91       	pop	r28
    c4d6:	1f 91       	pop	r17
    c4d8:	08 95       	ret

0000c4da <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    c4da:	1f 93       	push	r17
    c4dc:	cf 93       	push	r28
    c4de:	df 93       	push	r29
    c4e0:	1f 92       	push	r1
    c4e2:	cd b7       	in	r28, 0x3d	; 61
    c4e4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c4e6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3172
  {
    remote_tds_get_active(idx, &active);
    c4e8:	be 01       	movw	r22, r28
    c4ea:	6f 5f       	subi	r22, 0xFF	; 255
    c4ec:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ee:	81 2f       	mov	r24, r17
    c4f0:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3173
    if (active == 0)
    c4f4:	89 81       	ldd	r24, Y+1	; 0x01
    c4f6:	88 23       	and	r24, r24
    c4f8:	21 f0       	breq	.+8      	; 0xc502 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c4fa:	1f 5f       	subi	r17, 0xFF	; 255
    c4fc:	1a 30       	cpi	r17, 0x0A	; 10
    c4fe:	a1 f7       	brne	.-24     	; 0xc4e8 <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3168
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    c500:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
      ret = idx;
      break;
    }
  }
  return ret;
}
    c502:	81 2f       	mov	r24, r17
    c504:	0f 90       	pop	r0
    c506:	df 91       	pop	r29
    c508:	cf 91       	pop	r28
    c50a:	1f 91       	pop	r17
    c50c:	08 95       	ret

0000c50e <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5754
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    c50e:	1f 93       	push	r17
    c510:	cf 93       	push	r28
    c512:	df 93       	push	r29
    c514:	00 d0       	rcall	.+0      	; 0xc516 <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    c516:	1f 92       	push	r1
    c518:	1f 92       	push	r1
    c51a:	cd b7       	in	r28, 0x3d	; 61
    c51c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    c51e:	0e 94 6d 62 	call	0xc4da	; 0xc4da <remote_tds_find_free()>
    c522:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5758
  if (idx != 255)
    c524:	8f 3f       	cpi	r24, 0xFF	; 255
    c526:	e1 f0       	breq	.+56     	; 0xc560 <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5760
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    c528:	6f eb       	ldi	r22, 0xBF	; 191
    c52a:	7c e3       	ldi	r23, 0x3C	; 60
    c52c:	ce 01       	movw	r24, r28
    c52e:	01 96       	adiw	r24, 0x01	; 1
    c530:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    c534:	60 e0       	ldi	r22, 0x00	; 0
    c536:	87 e6       	ldi	r24, 0x67	; 103
    c538:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    c53c:	be 01       	movw	r22, r28
    c53e:	6f 5f       	subi	r22, 0xFF	; 255
    c540:	7f 4f       	sbci	r23, 0xFF	; 255
    c542:	89 e3       	ldi	r24, 0x39	; 57
    c544:	99 e0       	ldi	r25, 0x09	; 9
    c546:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  dialog_set_string_max_length = max_length;
    c54a:	82 e1       	ldi	r24, 0x12	; 18
    c54c:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  dialog_set_string_args = idx;
    c550:	10 93 37 09 	sts	0x0937, r17	; 0x800937 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  dialog_save_string_function = save_function;
    c554:	82 e1       	ldi	r24, 0x12	; 18
    c556:	97 e6       	ldi	r25, 0x67	; 103
    c558:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <dialog_save_string_function+0x1>
    c55c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_save_string_function>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5766
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name);

  }

}
    c560:	0f 90       	pop	r0
    c562:	0f 90       	pop	r0
    c564:	0f 90       	pop	r0
    c566:	0f 90       	pop	r0
    c568:	0f 90       	pop	r0
    c56a:	df 91       	pop	r29
    c56c:	cf 91       	pop	r28
    c56e:	1f 91       	pop	r17
    c570:	08 95       	ret

0000c572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3071
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    c572:	af 92       	push	r10
    c574:	bf 92       	push	r11
    c576:	cf 92       	push	r12
    c578:	df 92       	push	r13
    c57a:	ef 92       	push	r14
    c57c:	ff 92       	push	r15
    c57e:	0f 93       	push	r16
    c580:	1f 93       	push	r17
    c582:	cf 93       	push	r28
    c584:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
  char t;
  if (idx < MAX_RTDS)
    c586:	8a 30       	cpi	r24, 0x0A	; 10
    c588:	88 f5       	brcc	.+98     	; 0xc5ec <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    c58a:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    c58c:	94 e1       	ldi	r25, 0x14	; 20
    c58e:	89 9f       	mul	r24, r25
    c590:	e0 01       	movw	r28, r0
    c592:	11 24       	eor	r1, r1
    c594:	6e 01       	movw	r12, r28
    c596:	e6 e5       	ldi	r30, 0x56	; 86
    c598:	ce 1a       	sub	r12, r30
    c59a:	ea ef       	ldi	r30, 0xFA	; 250
    c59c:	de 0a       	sbc	r13, r30
    c59e:	8a 01       	movw	r16, r20
    c5a0:	5e 01       	movw	r10, r28
    c5a2:	f4 e4       	ldi	r31, 0x44	; 68
    c5a4:	af 1a       	sub	r10, r31
    c5a6:	fa ef       	ldi	r31, 0xFA	; 250
    c5a8:	bf 0a       	sbc	r11, r31
    c5aa:	c6 01       	movw	r24, r12
    c5ac:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
      name[i] = t;
    c5b0:	f8 01       	movw	r30, r16
    c5b2:	81 93       	st	Z+, r24
    c5b4:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
      name[i + 1] = 0;
    c5b6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
      if (t == 0) break;
    c5b8:	88 23       	and	r24, r24
    c5ba:	31 f0       	breq	.+12     	; 0xc5c8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    c5bc:	ff ef       	ldi	r31, 0xFF	; 255
    c5be:	cf 1a       	sub	r12, r31
    c5c0:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    c5c2:	ca 14       	cp	r12, r10
    c5c4:	db 04       	cpc	r13, r11
    c5c6:	89 f7       	brne	.-30     	; 0xc5aa <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3082
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    c5c8:	ce 01       	movw	r24, r28
    c5ca:	83 54       	subi	r24, 0x43	; 67
    c5cc:	9a 4f       	sbci	r25, 0xFA	; 250
    c5ce:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c5d2:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
  }
  else
  {
    *active = 255;
    c5d4:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
  }
}
    c5d6:	df 91       	pop	r29
    c5d8:	cf 91       	pop	r28
    c5da:	1f 91       	pop	r17
    c5dc:	0f 91       	pop	r16
    c5de:	ff 90       	pop	r15
    c5e0:	ef 90       	pop	r14
    c5e2:	df 90       	pop	r13
    c5e4:	cf 90       	pop	r12
    c5e6:	bf 90       	pop	r11
    c5e8:	af 90       	pop	r10
    c5ea:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    c5ec:	8f ef       	ldi	r24, 0xFF	; 255
    c5ee:	fb 01       	movw	r30, r22
    c5f0:	f1 cf       	rjmp	.-30     	; 0xc5d4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000c5f2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5877
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    c5f2:	7f 92       	push	r7
    c5f4:	8f 92       	push	r8
    c5f6:	9f 92       	push	r9
    c5f8:	af 92       	push	r10
    c5fa:	bf 92       	push	r11
    c5fc:	cf 92       	push	r12
    c5fe:	df 92       	push	r13
    c600:	ef 92       	push	r14
    c602:	0f 93       	push	r16
    c604:	1f 93       	push	r17
    c606:	cf 93       	push	r28
    c608:	df 93       	push	r29
    c60a:	cd b7       	in	r28, 0x3d	; 61
    c60c:	de b7       	in	r29, 0x3e	; 62
    c60e:	aa 97       	sbiw	r28, 0x2a	; 42
    c610:	0f b6       	in	r0, 0x3f	; 63
    c612:	f8 94       	cli
    c614:	de bf       	out	0x3e, r29	; 62
    c616:	0f be       	out	0x3f, r0	; 63
    c618:	cd bf       	out	0x3d, r28	; 61
    c61a:	78 2e       	mov	r7, r24
    c61c:	e4 2e       	mov	r14, r20
    c61e:	69 01       	movw	r12, r18
    c620:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5881
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    c622:	62 ef       	ldi	r22, 0xF2	; 242
    c624:	72 e0       	ldi	r23, 0x02	; 2
    c626:	c9 01       	movw	r24, r18
    c628:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5882
  strcpy(line2, "");
    c62c:	62 ef       	ldi	r22, 0xF2	; 242
    c62e:	72 e0       	ldi	r23, 0x02	; 2
    c630:	c8 01       	movw	r24, r16
    c632:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
    c636:	88 ec       	ldi	r24, 0xC8	; 200
    c638:	88 2e       	mov	r8, r24
    c63a:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5885
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    c63c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5879
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    c63e:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    c640:	c4 01       	movw	r24, r8
    c642:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5887
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    c646:	81 30       	cpi	r24, 0x01	; 1
    c648:	11 f4       	brne	.+4      	; 0xc64e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5c>
    c64a:	ee 20       	and	r14, r14
    c64c:	19 f0       	breq	.+6      	; 0xc654 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x62>
    c64e:	81 e0       	ldi	r24, 0x01	; 1
    c650:	e8 12       	cpse	r14, r24
    c652:	2e c0       	rjmp	.+92     	; 0xc6b0 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5889
    {
      if (cri == args1)
    c654:	71 12       	cpse	r7, r17
    c656:	2b c0       	rjmp	.+86     	; 0xc6ae <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbc>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c658:	be 01       	movw	r22, r28
    c65a:	6f 5f       	subi	r22, 0xFF	; 255
    c65c:	7f 4f       	sbci	r23, 0xFF	; 255
    c65e:	80 2f       	mov	r24, r16
    c660:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    c664:	be 01       	movw	r22, r28
    c666:	63 5f       	subi	r22, 0xF3	; 243
    c668:	7f 4f       	sbci	r23, 0xFF	; 255
    c66a:	ce 01       	movw	r24, r28
    c66c:	47 96       	adiw	r24, 0x17	; 23
    c66e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5892
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    c672:	be 01       	movw	r22, r28
    c674:	69 5e       	subi	r22, 0xE9	; 233
    c676:	7f 4f       	sbci	r23, 0xFF	; 255
    c678:	c5 01       	movw	r24, r10
    c67a:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5893
        strcpy_P(line1, nastaveni_onewire);
    c67e:	60 ed       	ldi	r22, 0xD0	; 208
    c680:	7c e3       	ldi	r23, 0x3C	; 60
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5909
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    c682:	c6 01       	movw	r24, r12
    c684:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5918
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    c688:	aa 96       	adiw	r28, 0x2a	; 42
    c68a:	0f b6       	in	r0, 0x3f	; 63
    c68c:	f8 94       	cli
    c68e:	de bf       	out	0x3e, r29	; 62
    c690:	0f be       	out	0x3f, r0	; 63
    c692:	cd bf       	out	0x3d, r28	; 61
    c694:	df 91       	pop	r29
    c696:	cf 91       	pop	r28
    c698:	1f 91       	pop	r17
    c69a:	0f 91       	pop	r16
    c69c:	ef 90       	pop	r14
    c69e:	df 90       	pop	r13
    c6a0:	cf 90       	pop	r12
    c6a2:	bf 90       	pop	r11
    c6a4:	af 90       	pop	r10
    c6a6:	9f 90       	pop	r9
    c6a8:	8f 90       	pop	r8
    c6aa:	7f 90       	pop	r7
    c6ac:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5896
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    c6ae:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5885
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    c6b0:	0f 5f       	subi	r16, 0xFF	; 255
    c6b2:	86 e1       	ldi	r24, 0x16	; 22
    c6b4:	88 0e       	add	r8, r24
    c6b6:	91 1c       	adc	r9, r1
    c6b8:	06 30       	cpi	r16, 0x06	; 6
    c6ba:	11 f6       	brne	.-124    	; 0xc640 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5900
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c6bc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5902
  {
    remote_tds_get_active(idx, &active);
    c6be:	be 01       	movw	r22, r28
    c6c0:	6f 5f       	subi	r22, 0xFF	; 255
    c6c2:	7f 4f       	sbci	r23, 0xFF	; 255
    c6c4:	80 2f       	mov	r24, r16
    c6c6:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5903
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    c6ca:	89 81       	ldd	r24, Y+1	; 0x01
    c6cc:	81 30       	cpi	r24, 0x01	; 1
    c6ce:	11 f4       	brne	.+4      	; 0xc6d4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe2>
    c6d0:	ee 20       	and	r14, r14
    c6d2:	19 f0       	breq	.+6      	; 0xc6da <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe8>
    c6d4:	81 e0       	ldi	r24, 0x01	; 1
    c6d6:	e8 12       	cpse	r14, r24
    c6d8:	15 c0       	rjmp	.+42     	; 0xc704 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5905
    {
      if (cri == args1)
    c6da:	71 12       	cpse	r7, r17
    c6dc:	12 c0       	rjmp	.+36     	; 0xc702 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5907
      {
        remote_tds_get_complete(idx, &active, name);
    c6de:	ae 01       	movw	r20, r28
    c6e0:	49 5e       	subi	r20, 0xE9	; 233
    c6e2:	5f 4f       	sbci	r21, 0xFF	; 255
    c6e4:	be 01       	movw	r22, r28
    c6e6:	6f 5f       	subi	r22, 0xFF	; 255
    c6e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ea:	80 2f       	mov	r24, r16
    c6ec:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5908
        strcpy(line2, name);
    c6f0:	be 01       	movw	r22, r28
    c6f2:	69 5e       	subi	r22, 0xE9	; 233
    c6f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6f6:	c5 01       	movw	r24, r10
    c6f8:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5909
        strcpy_P(line1, nastaveni_rtds);
    c6fc:	61 ec       	ldi	r22, 0xC1	; 193
    c6fe:	7c e3       	ldi	r23, 0x3C	; 60
    c700:	c0 cf       	rjmp	.-128    	; 0xc682 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5912
        goto button_get_show_default_temp_end;
      }
      cri++;
    c702:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5900
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c704:	0f 5f       	subi	r16, 0xFF	; 255
    c706:	0a 30       	cpi	r16, 0x0A	; 10
    c708:	d1 f6       	brne	.-76     	; 0xc6be <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xcc>
    c70a:	be cf       	rjmp	.-132    	; 0xc688 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x96>

0000c70c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5643
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    c70c:	cf 92       	push	r12
    c70e:	df 92       	push	r13
    c710:	ff 92       	push	r15
    c712:	0f 93       	push	r16
    c714:	1f 93       	push	r17
    c716:	cf 93       	push	r28
    c718:	df 93       	push	r29
    c71a:	1f 92       	push	r1
    c71c:	cd b7       	in	r28, 0x3d	; 61
    c71e:	de b7       	in	r29, 0x3e	; 62
    c720:	f8 2e       	mov	r15, r24
    c722:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5645
  uint8_t active;
  strcpy_P(line1, text_not_used);
    c724:	6e e9       	ldi	r22, 0x9E	; 158
    c726:	7c e3       	ldi	r23, 0x3C	; 60
    c728:	c9 01       	movw	r24, r18
    c72a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5647
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    c72e:	f8 01       	movw	r30, r16
    c730:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5648
  remote_tds_get_active(args1, &active);
    c732:	be 01       	movw	r22, r28
    c734:	6f 5f       	subi	r22, 0xFF	; 255
    c736:	7f 4f       	sbci	r23, 0xFF	; 255
    c738:	8f 2d       	mov	r24, r15
    c73a:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649
  if (active == 1)
    c73e:	89 81       	ldd	r24, Y+1	; 0x01
    c740:	81 30       	cpi	r24, 0x01	; 1
    c742:	39 f4       	brne	.+14     	; 0xc752 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
  {
    remote_tds_get_complete(args1, &active, line1);
    c744:	a6 01       	movw	r20, r12
    c746:	be 01       	movw	r22, r28
    c748:	6f 5f       	subi	r22, 0xFF	; 255
    c74a:	7f 4f       	sbci	r23, 0xFF	; 255
    c74c:	8f 2d       	mov	r24, r15
    c74e:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
  }
}
    c752:	0f 90       	pop	r0
    c754:	df 91       	pop	r29
    c756:	cf 91       	pop	r28
    c758:	1f 91       	pop	r17
    c75a:	0f 91       	pop	r16
    c75c:	ff 90       	pop	r15
    c75e:	df 90       	pop	r13
    c760:	cf 90       	pop	r12
    c762:	08 95       	ret

0000c764 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5347
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    c764:	5f 92       	push	r5
    c766:	6f 92       	push	r6
    c768:	7f 92       	push	r7
    c76a:	8f 92       	push	r8
    c76c:	9f 92       	push	r9
    c76e:	af 92       	push	r10
    c770:	bf 92       	push	r11
    c772:	cf 92       	push	r12
    c774:	df 92       	push	r13
    c776:	ef 92       	push	r14
    c778:	ff 92       	push	r15
    c77a:	0f 93       	push	r16
    c77c:	1f 93       	push	r17
    c77e:	cf 93       	push	r28
    c780:	df 93       	push	r29
    c782:	cd b7       	in	r28, 0x3d	; 61
    c784:	de b7       	in	r29, 0x3e	; 62
    c786:	cd 54       	subi	r28, 0x4D	; 77
    c788:	d1 09       	sbc	r29, r1
    c78a:	0f b6       	in	r0, 0x3f	; 63
    c78c:	f8 94       	cli
    c78e:	de bf       	out	0x3e, r29	; 62
    c790:	0f be       	out	0x3f, r0	; 63
    c792:	cd bf       	out	0x3d, r28	; 61
    c794:	4c 01       	movw	r8, r24
    c796:	5b 01       	movw	r10, r22
    c798:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c79a:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    c79e:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5355
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    c7a2:	26 0f       	add	r18, r22
    c7a4:	37 1f       	adc	r19, r23
    c7a6:	48 0f       	add	r20, r24
    c7a8:	59 1f       	adc	r21, r25
    c7aa:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
  remote_tds_get_complete(args2, &active, name);
    c7ae:	ae 01       	movw	r20, r28
    c7b0:	45 5c       	subi	r20, 0xC5	; 197
    c7b2:	5f 4f       	sbci	r21, 0xFF	; 255
    c7b4:	be 01       	movw	r22, r28
    c7b6:	63 5b       	subi	r22, 0xB3	; 179
    c7b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c7ba:	8e 2d       	mov	r24, r14
    c7bc:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5357
  if (active == 1)
    c7c0:	2e 96       	adiw	r28, 0x0e	; 14
    c7c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    c7c4:	2e 97       	sbiw	r28, 0x0e	; 14
    c7c6:	81 30       	cpi	r24, 0x01	; 1
    c7c8:	09 f0       	breq	.+2      	; 0xc7cc <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    c7ca:	c1 c0       	rjmp	.+386    	; 0xc94e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5360
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    c7cc:	64 e8       	ldi	r22, 0x84	; 132
    c7ce:	7c e3       	ldi	r23, 0x3C	; 60
    c7d0:	ce 01       	movw	r24, r28
    c7d2:	01 96       	adiw	r24, 0x01	; 1
    c7d4:	6c 01       	movw	r12, r24
    c7d6:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5361
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    c7da:	34 01       	movw	r6, r8
    c7dc:	95 e0       	ldi	r25, 0x05	; 5
    c7de:	69 0e       	add	r6, r25
    c7e0:	71 1c       	adc	r7, r1
    c7e2:	ee 24       	eor	r14, r14
    c7e4:	ea 94       	dec	r14
    c7e6:	fe 2c       	mov	r15, r14
    c7e8:	10 e0       	ldi	r17, 0x00	; 0
    c7ea:	00 e0       	ldi	r16, 0x00	; 0
    c7ec:	22 e0       	ldi	r18, 0x02	; 2
    c7ee:	a5 01       	movw	r20, r10
    c7f0:	46 5f       	subi	r20, 0xF6	; 246
    c7f2:	5f 4f       	sbci	r21, 0xFF	; 255
    c7f4:	b3 01       	movw	r22, r6
    c7f6:	c6 01       	movw	r24, r12
    c7f8:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5362
    strcpy(str1, name);
    c7fc:	be 01       	movw	r22, r28
    c7fe:	65 5c       	subi	r22, 0xC5	; 197
    c800:	7f 4f       	sbci	r23, 0xFF	; 255
    c802:	c6 01       	movw	r24, r12
    c804:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5363
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    c808:	b4 01       	movw	r22, r8
    c80a:	6c 5e       	subi	r22, 0xEC	; 236
    c80c:	7f 4f       	sbci	r23, 0xFF	; 255
    c80e:	22 e0       	ldi	r18, 0x02	; 2
    c810:	a5 01       	movw	r20, r10
    c812:	42 5e       	subi	r20, 0xE2	; 226
    c814:	5f 4f       	sbci	r21, 0xFF	; 255
    c816:	c6 01       	movw	r24, r12
    c818:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    c81c:	89 e0       	ldi	r24, 0x09	; 9
    c81e:	85 15       	cp	r24, r5
    c820:	08 f4       	brcc	.+2      	; 0xc824 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    c822:	ac c0       	rjmp	.+344    	; 0xc97c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    c824:	85 2d       	mov	r24, r5
    c826:	0e 94 bd 30 	call	0x617a	; 0x617a <remote_tds_get_data(unsigned char) [clone .part.26]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5365
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    c82a:	bc 01       	movw	r22, r24
    c82c:	99 0f       	add	r25, r25
    c82e:	88 0b       	sbc	r24, r24
    c830:	99 0b       	sbc	r25, r25
    c832:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    c836:	20 e0       	ldi	r18, 0x00	; 0
    c838:	30 e0       	ldi	r19, 0x00	; 0
    c83a:	4a e7       	ldi	r20, 0x7A	; 122
    c83c:	54 e4       	ldi	r21, 0x44	; 68
    c83e:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5366
    dtostrf(te, 4, 2, str1);
    c842:	86 01       	movw	r16, r12
    c844:	22 e0       	ldi	r18, 0x02	; 2
    c846:	44 e0       	ldi	r20, 0x04	; 4
    c848:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5367
    strcat(str1, "C");
    c84c:	67 ed       	ldi	r22, 0xD7	; 215
    c84e:	76 e0       	ldi	r23, 0x06	; 6
    c850:	c6 01       	movw	r24, r12
    c852:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368
    strcpy_P(str2, current_temp_short);
    c856:	4e 01       	movw	r8, r28
    c858:	91 e2       	ldi	r25, 0x21	; 33
    c85a:	89 0e       	add	r8, r25
    c85c:	91 1c       	adc	r9, r1
    c85e:	6b e7       	ldi	r22, 0x7B	; 123
    c860:	7c e3       	ldi	r23, 0x3C	; 60
    c862:	c4 01       	movw	r24, r8
    c864:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5369
    strcat(str2, str1);
    c868:	b6 01       	movw	r22, r12
    c86a:	c4 01       	movw	r24, r8
    c86c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5370
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    c870:	ee 24       	eor	r14, r14
    c872:	ea 94       	dec	r14
    c874:	fe 2c       	mov	r15, r14
    c876:	10 e0       	ldi	r17, 0x00	; 0
    c878:	00 e0       	ldi	r16, 0x00	; 0
    c87a:	22 e0       	ldi	r18, 0x02	; 2
    c87c:	a5 01       	movw	r20, r10
    c87e:	44 5c       	subi	r20, 0xC4	; 196
    c880:	5f 4f       	sbci	r21, 0xFF	; 255
    c882:	b3 01       	movw	r22, r6
    c884:	c4 01       	movw	r24, r8
    c886:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3223
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    c88a:	89 e0       	ldi	r24, 0x09	; 9
    c88c:	85 15       	cp	r24, r5
    c88e:	08 f4       	brcc	.+2      	; 0xc892 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    c890:	78 c0       	rjmp	.+240    	; 0xc982 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    c892:	93 e0       	ldi	r25, 0x03	; 3
    c894:	59 9e       	mul	r5, r25
    c896:	b0 01       	movw	r22, r0
    c898:	11 24       	eor	r1, r1
    c89a:	6a 59       	subi	r22, 0x9A	; 154
    c89c:	7f 4f       	sbci	r23, 0xFF	; 255
    c89e:	07 2e       	mov	r0, r23
    c8a0:	00 0c       	add	r0, r0
    c8a2:	88 0b       	sbc	r24, r24
    c8a4:	99 0b       	sbc	r25, r25
    c8a6:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
    c8aa:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5373
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    c8ac:	65 e6       	ldi	r22, 0x65	; 101
    c8ae:	7c e3       	ldi	r23, 0x3C	; 60
    c8b0:	c4 01       	movw	r24, r8
    c8b2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5374
    sprintf(str1, "%s: %d", str2, last_update);
    c8b6:	1f 92       	push	r1
    c8b8:	5f 92       	push	r5
    c8ba:	9f 92       	push	r9
    c8bc:	8f 92       	push	r8
    c8be:	8f ea       	ldi	r24, 0xAF	; 175
    c8c0:	93 e0       	ldi	r25, 0x03	; 3
    c8c2:	9f 93       	push	r25
    c8c4:	8f 93       	push	r24
    c8c6:	df 92       	push	r13
    c8c8:	cf 92       	push	r12
    c8ca:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5375
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    c8ce:	ee 24       	eor	r14, r14
    c8d0:	ea 94       	dec	r14
    c8d2:	fe 2c       	mov	r15, r14
    c8d4:	10 e0       	ldi	r17, 0x00	; 0
    c8d6:	00 e0       	ldi	r16, 0x00	; 0
    c8d8:	21 e0       	ldi	r18, 0x01	; 1
    c8da:	a5 01       	movw	r20, r10
    c8dc:	40 5b       	subi	r20, 0xB0	; 176
    c8de:	5f 4f       	sbci	r21, 0xFF	; 255
    c8e0:	b3 01       	movw	r22, r6
    c8e2:	c6 01       	movw	r24, r12
    c8e4:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5377
    active = 1;
    if (last_update >= 250) active = 0;
    c8e8:	0f b6       	in	r0, 0x3f	; 63
    c8ea:	f8 94       	cli
    c8ec:	de bf       	out	0x3e, r29	; 62
    c8ee:	0f be       	out	0x3f, r0	; 63
    c8f0:	cd bf       	out	0x3d, r28	; 61
    c8f2:	99 ef       	ldi	r25, 0xF9	; 249
    c8f4:	95 15       	cp	r25, r5
    c8f6:	08 f4       	brcc	.+2      	; 0xc8fa <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    c8f8:	47 c0       	rjmp	.+142    	; 0xc988 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5376
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    c8fa:	81 e0       	ldi	r24, 0x01	; 1
    c8fc:	2e 96       	adiw	r28, 0x0e	; 14
    c8fe:	8f af       	std	Y+63, r24	; 0x3f
    c900:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5378
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    c902:	6e e5       	ldi	r22, 0x5E	; 94
    c904:	7c e3       	ldi	r23, 0x3C	; 60
    c906:	c4 01       	movw	r24, r8
    c908:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5379
    sprintf(str1, "%s: %d", str2, active);
    c90c:	2e 96       	adiw	r28, 0x0e	; 14
    c90e:	8f ad       	ldd	r24, Y+63	; 0x3f
    c910:	2e 97       	sbiw	r28, 0x0e	; 14
    c912:	1f 92       	push	r1
    c914:	8f 93       	push	r24
    c916:	9f 92       	push	r9
    c918:	8f 92       	push	r8
    c91a:	8f ea       	ldi	r24, 0xAF	; 175
    c91c:	93 e0       	ldi	r25, 0x03	; 3
    c91e:	9f 93       	push	r25
    c920:	8f 93       	push	r24
    c922:	df 92       	push	r13
    c924:	cf 92       	push	r12
    c926:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5380
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    c92a:	a5 01       	movw	r20, r10
    c92c:	4c 59       	subi	r20, 0x9C	; 156
    c92e:	5f 4f       	sbci	r21, 0xFF	; 255
    c930:	ee 24       	eor	r14, r14
    c932:	ea 94       	dec	r14
    c934:	fe 2c       	mov	r15, r14
    c936:	10 e0       	ldi	r17, 0x00	; 0
    c938:	00 e0       	ldi	r16, 0x00	; 0
    c93a:	22 e0       	ldi	r18, 0x02	; 2
    c93c:	b3 01       	movw	r22, r6
    c93e:	c6 01       	movw	r24, r12
    c940:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    c944:	0f b6       	in	r0, 0x3f	; 63
    c946:	f8 94       	cli
    c948:	de bf       	out	0x3e, r29	; 62
    c94a:	0f be       	out	0x3f, r0	; 63
    c94c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5382
  }
}
    c94e:	c3 5b       	subi	r28, 0xB3	; 179
    c950:	df 4f       	sbci	r29, 0xFF	; 255
    c952:	0f b6       	in	r0, 0x3f	; 63
    c954:	f8 94       	cli
    c956:	de bf       	out	0x3e, r29	; 62
    c958:	0f be       	out	0x3f, r0	; 63
    c95a:	cd bf       	out	0x3d, r28	; 61
    c95c:	df 91       	pop	r29
    c95e:	cf 91       	pop	r28
    c960:	1f 91       	pop	r17
    c962:	0f 91       	pop	r16
    c964:	ff 90       	pop	r15
    c966:	ef 90       	pop	r14
    c968:	df 90       	pop	r13
    c96a:	cf 90       	pop	r12
    c96c:	bf 90       	pop	r11
    c96e:	af 90       	pop	r10
    c970:	9f 90       	pop	r9
    c972:	8f 90       	pop	r8
    c974:	7f 90       	pop	r7
    c976:	6f 90       	pop	r6
    c978:	5f 90       	pop	r5
    c97a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    c97c:	90 e0       	ldi	r25, 0x00	; 0
    c97e:	80 e0       	ldi	r24, 0x00	; 0
    c980:	54 cf       	rjmp	.-344    	; 0xc82a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3222
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    c982:	55 24       	eor	r5, r5
    c984:	5a 94       	dec	r5
    c986:	92 cf       	rjmp	.-220    	; 0xc8ac <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5377
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    c988:	2e 96       	adiw	r28, 0x0e	; 14
    c98a:	1f ae       	std	Y+63, r1	; 0x3f
    c98c:	2e 97       	sbiw	r28, 0x0e	; 14
    c98e:	b9 cf       	rjmp	.-142    	; 0xc902 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000c990 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    c990:	2f 92       	push	r2
    c992:	3f 92       	push	r3
    c994:	4f 92       	push	r4
    c996:	5f 92       	push	r5
    c998:	6f 92       	push	r6
    c99a:	7f 92       	push	r7
    c99c:	8f 92       	push	r8
    c99e:	9f 92       	push	r9
    c9a0:	af 92       	push	r10
    c9a2:	bf 92       	push	r11
    c9a4:	cf 92       	push	r12
    c9a6:	df 92       	push	r13
    c9a8:	ef 92       	push	r14
    c9aa:	ff 92       	push	r15
    c9ac:	0f 93       	push	r16
    c9ae:	1f 93       	push	r17
    c9b0:	cf 93       	push	r28
    c9b2:	df 93       	push	r29
    c9b4:	cd b7       	in	r28, 0x3d	; 61
    c9b6:	de b7       	in	r29, 0x3e	; 62
    c9b8:	ce 54       	subi	r28, 0x4E	; 78
    c9ba:	d1 09       	sbc	r29, r1
    c9bc:	0f b6       	in	r0, 0x3f	; 63
    c9be:	f8 94       	cli
    c9c0:	de bf       	out	0x3e, r29	; 62
    c9c2:	0f be       	out	0x3f, r0	; 63
    c9c4:	cd bf       	out	0x3d, r28	; 61
    c9c6:	5c 01       	movw	r10, r24
    c9c8:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5248
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    c9ca:	6f e2       	ldi	r22, 0x2F	; 47
    c9cc:	7c e3       	ldi	r23, 0x3C	; 60
    c9ce:	ce 01       	movw	r24, r28
    c9d0:	01 96       	adiw	r24, 0x01	; 1
    c9d2:	6c 01       	movw	r12, r24
    c9d4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5249
  stat = get_global_temp(default_show_temp, str2, &te);
    c9d8:	10 91 05 09 	lds	r17, 0x0905	; 0x800905 <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5827
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    c9dc:	61 e4       	ldi	r22, 0x41	; 65
    c9de:	7c e3       	ldi	r23, 0x3C	; 60
    c9e0:	ce 01       	movw	r24, r28
    c9e2:	c7 96       	adiw	r24, 0x37	; 55
    c9e4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
    c9e8:	51 2c       	mov	r5, r1
    c9ea:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5824
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    c9ec:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5837
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    c9ee:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5831
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    c9f0:	be 01       	movw	r22, r28
    c9f2:	6f 5d       	subi	r22, 0xDF	; 223
    c9f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9f6:	84 2d       	mov	r24, r4
    c9f8:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
    c9fc:	81 30       	cpi	r24, 0x01	; 1
    c9fe:	09 f0       	breq	.+2      	; 0xca02 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    ca00:	9c c0       	rjmp	.+312    	; 0xcb3a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5832
      if (tds.used == 1)
    ca02:	89 a1       	ldd	r24, Y+33	; 0x21
    ca04:	81 30       	cpi	r24, 0x01	; 1
    ca06:	09 f0       	breq	.+2      	; 0xca0a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7a>
    ca08:	98 c0       	rjmp	.+304    	; 0xcb3a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5834
      {
        if (cri == device)
    ca0a:	17 11       	cpse	r17, r7
    ca0c:	95 c0       	rjmp	.+298    	; 0xcb38 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5836
        {
          strcpy(name, tds.name);
    ca0e:	be 01       	movw	r22, r28
    ca10:	63 5d       	subi	r22, 0xD3	; 211
    ca12:	7f 4f       	sbci	r23, 0xFF	; 255
    ca14:	ce 01       	movw	r24, r28
    ca16:	c7 96       	adiw	r24, 0x37	; 55
    ca18:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5837
          if (status_tds18s20[idx].online == True)
    ca1c:	04 9d       	mul	r16, r4
    ca1e:	f0 01       	movw	r30, r0
    ca20:	05 9d       	mul	r16, r5
    ca22:	f0 0d       	add	r31, r0
    ca24:	11 24       	eor	r1, r1
    ca26:	e0 58       	subi	r30, 0x80	; 128
    ca28:	f5 4f       	sbci	r31, 0xF5	; 245
    ca2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ca2c:	2d 96       	adiw	r28, 0x0d	; 13
    ca2e:	9f af       	std	Y+63, r25	; 0x3f
    ca30:	2d 97       	sbiw	r28, 0x0d	; 13
    ca32:	91 30       	cpi	r25, 0x01	; 1
    ca34:	09 f0       	breq	.+2      	; 0xca38 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa8>
    ca36:	80 c0       	rjmp	.+256    	; 0xcb38 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5839
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    ca38:	65 81       	ldd	r22, Z+5	; 0x05
    ca3a:	76 81       	ldd	r23, Z+6	; 0x06
    ca3c:	07 2e       	mov	r0, r23
    ca3e:	00 0c       	add	r0, r0
    ca40:	88 0b       	sbc	r24, r24
    ca42:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    ca44:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    ca48:	20 e0       	ldi	r18, 0x00	; 0
    ca4a:	30 e0       	ldi	r19, 0x00	; 0
    ca4c:	4a e7       	ldi	r20, 0x7A	; 122
    ca4e:	54 e4       	ldi	r21, 0x44	; 68
    ca50:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
    ca54:	1b 01       	movw	r2, r22
    ca56:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5250
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    ca58:	be 01       	movw	r22, r28
    ca5a:	69 5c       	subi	r22, 0xC9	; 201
    ca5c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca5e:	c6 01       	movw	r24, r12
    ca60:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5251
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    ca64:	ee 24       	eor	r14, r14
    ca66:	ea 94       	dec	r14
    ca68:	fe 2c       	mov	r15, r14
    ca6a:	10 e0       	ldi	r17, 0x00	; 0
    ca6c:	00 e0       	ldi	r16, 0x00	; 0
    ca6e:	21 e0       	ldi	r18, 0x01	; 1
    ca70:	a4 01       	movw	r20, r8
    ca72:	4b 5f       	subi	r20, 0xFB	; 251
    ca74:	5f 4f       	sbci	r21, 0xFF	; 255
    ca76:	b5 01       	movw	r22, r10
    ca78:	6b 5f       	subi	r22, 0xFB	; 251
    ca7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ca7c:	c6 01       	movw	r24, r12
    ca7e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ca82:	34 01       	movw	r6, r8
    ca84:	94 e1       	ldi	r25, 0x14	; 20
    ca86:	69 0e       	add	r6, r25
    ca88:	71 1c       	adc	r7, r1
    ca8a:	c5 01       	movw	r24, r10
    ca8c:	04 96       	adiw	r24, 0x04	; 4
    ca8e:	2f 96       	adiw	r28, 0x0f	; 15
    ca90:	9f af       	std	Y+63, r25	; 0x3f
    ca92:	8e af       	std	Y+62, r24	; 0x3e
    ca94:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5252
  if (stat == 1)
    ca96:	2d 96       	adiw	r28, 0x0d	; 13
    ca98:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca9a:	2d 97       	sbiw	r28, 0x0d	; 13
    ca9c:	91 30       	cpi	r25, 0x01	; 1
    ca9e:	09 f0       	breq	.+2      	; 0xcaa2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x112>
    caa0:	95 c0       	rjmp	.+298    	; 0xcbcc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5254
  {
    dtostrf(te, 4, 1, str1);
    caa2:	86 01       	movw	r16, r12
    caa4:	21 e0       	ldi	r18, 0x01	; 1
    caa6:	44 e0       	ldi	r20, 0x04	; 4
    caa8:	c2 01       	movw	r24, r4
    caaa:	b1 01       	movw	r22, r2
    caac:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5255
    if (strlen(str1) <= 4)
    cab0:	f6 01       	movw	r30, r12
    cab2:	01 90       	ld	r0, Z+
    cab4:	00 20       	and	r0, r0
    cab6:	e9 f7       	brne	.-6      	; 0xcab2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    cab8:	31 97       	sbiw	r30, 0x01	; 1
    caba:	ec 19       	sub	r30, r12
    cabc:	fd 09       	sbc	r31, r13
    cabe:	35 97       	sbiw	r30, 0x05	; 5
    cac0:	28 f4       	brcc	.+10     	; 0xcacc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5256
      strcat(str1, "C");
    cac2:	67 ed       	ldi	r22, 0xD7	; 215
    cac4:	76 e0       	ldi	r23, 0x06	; 6
    cac6:	c6 01       	movw	r24, r12
    cac8:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5257
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    cacc:	ee 24       	eor	r14, r14
    cace:	ea 94       	dec	r14
    cad0:	fe 2c       	mov	r15, r14
    cad2:	10 e0       	ldi	r17, 0x00	; 0
    cad4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5262
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    cad6:	28 e0       	ldi	r18, 0x08	; 8
    cad8:	a3 01       	movw	r20, r6
    cada:	2f 96       	adiw	r28, 0x0f	; 15
    cadc:	6e ad       	ldd	r22, Y+62	; 0x3e
    cade:	7f ad       	ldd	r23, Y+63	; 0x3f
    cae0:	2f 97       	sbiw	r28, 0x0f	; 15
    cae2:	c6 01       	movw	r24, r12
    cae4:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    cae8:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0xb>
    caec:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5265
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    caf0:	94 01       	movw	r18, r8
    caf2:	2c 5a       	subi	r18, 0xAC	; 172
    caf4:	3f 4f       	sbci	r19, 0xFF	; 255
    caf6:	a5 01       	movw	r20, r10
    caf8:	4c 50       	subi	r20, 0x0C	; 12
    cafa:	5f 4f       	sbci	r21, 0xFF	; 255
    cafc:	b4 01       	movw	r22, r8
    cafe:	c5 01       	movw	r24, r10
    cb00:	0e 94 88 8a 	call	0x11510	; 0x11510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5266
}
    cb04:	c2 5b       	subi	r28, 0xB2	; 178
    cb06:	df 4f       	sbci	r29, 0xFF	; 255
    cb08:	0f b6       	in	r0, 0x3f	; 63
    cb0a:	f8 94       	cli
    cb0c:	de bf       	out	0x3e, r29	; 62
    cb0e:	0f be       	out	0x3f, r0	; 63
    cb10:	cd bf       	out	0x3d, r28	; 61
    cb12:	df 91       	pop	r29
    cb14:	cf 91       	pop	r28
    cb16:	1f 91       	pop	r17
    cb18:	0f 91       	pop	r16
    cb1a:	ff 90       	pop	r15
    cb1c:	ef 90       	pop	r14
    cb1e:	df 90       	pop	r13
    cb20:	cf 90       	pop	r12
    cb22:	bf 90       	pop	r11
    cb24:	af 90       	pop	r10
    cb26:	9f 90       	pop	r9
    cb28:	8f 90       	pop	r8
    cb2a:	7f 90       	pop	r7
    cb2c:	6f 90       	pop	r6
    cb2e:	5f 90       	pop	r5
    cb30:	4f 90       	pop	r4
    cb32:	3f 90       	pop	r3
    cb34:	2f 90       	pop	r2
    cb36:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5844
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    cb38:	73 94       	inc	r7
    cb3a:	8f ef       	ldi	r24, 0xFF	; 255
    cb3c:	48 1a       	sub	r4, r24
    cb3e:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5830
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    cb40:	96 e0       	ldi	r25, 0x06	; 6
    cb42:	49 16       	cp	r4, r25
    cb44:	51 04       	cpc	r5, r1
    cb46:	09 f0       	breq	.+2      	; 0xcb4a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ba>
    cb48:	53 cf       	rjmp	.-346    	; 0xc9f0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x60>
    cb4a:	36 e6       	ldi	r19, 0x66	; 102
    cb4c:	23 2e       	mov	r2, r19
    cb4e:	31 2c       	mov	r3, r1
    cb50:	41 2c       	mov	r4, r1
    cb52:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5847
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cb54:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5849
  {
    remote_tds_get_active(idx, &active);
    cb56:	be 01       	movw	r22, r28
    cb58:	65 5b       	subi	r22, 0xB5	; 181
    cb5a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb5c:	86 2d       	mov	r24, r6
    cb5e:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5850
    if (active == 1)
    cb62:	2c 96       	adiw	r28, 0x0c	; 12
    cb64:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb66:	2c 97       	sbiw	r28, 0x0c	; 12
    cb68:	2d 96       	adiw	r28, 0x0d	; 13
    cb6a:	8f af       	std	Y+63, r24	; 0x3f
    cb6c:	2d 97       	sbiw	r28, 0x0d	; 13
    cb6e:	81 30       	cpi	r24, 0x01	; 1
    cb70:	d1 f4       	brne	.+52     	; 0xcba6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5852
    {
      if (cri == device)
    cb72:	17 11       	cpse	r17, r7
    cb74:	17 c0       	rjmp	.+46     	; 0xcba4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5854
      {
        remote_tds_get_complete(idx, &active, name);
    cb76:	ae 01       	movw	r20, r28
    cb78:	49 5c       	subi	r20, 0xC9	; 201
    cb7a:	5f 4f       	sbci	r21, 0xFF	; 255
    cb7c:	be 01       	movw	r22, r28
    cb7e:	65 5b       	subi	r22, 0xB5	; 181
    cb80:	7f 4f       	sbci	r23, 0xFF	; 255
    cb82:	86 2d       	mov	r24, r6
    cb84:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    cb88:	c2 01       	movw	r24, r4
    cb8a:	b1 01       	movw	r22, r2
    cb8c:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5855
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    cb90:	8a 3f       	cpi	r24, 0xFA	; 250
    cb92:	40 f4       	brcc	.+16     	; 0xcba4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
remote_tds_get_data():
    cb94:	86 2d       	mov	r24, r6
    cb96:	0e 94 bd 30 	call	0x617a	; 0x617a <remote_tds_get_data(unsigned char) [clone .part.26]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    cb9a:	bc 01       	movw	r22, r24
    cb9c:	99 0f       	add	r25, r25
    cb9e:	88 0b       	sbc	r24, r24
    cba0:	99 0b       	sbc	r25, r25
    cba2:	50 cf       	rjmp	.-352    	; 0xca44 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    cba4:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5847
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cba6:	63 94       	inc	r6
    cba8:	93 e0       	ldi	r25, 0x03	; 3
    cbaa:	29 0e       	add	r2, r25
    cbac:	31 1c       	adc	r3, r1
    cbae:	41 1c       	adc	r4, r1
    cbb0:	51 1c       	adc	r5, r1
    cbb2:	84 e8       	ldi	r24, 0x84	; 132
    cbb4:	28 16       	cp	r2, r24
    cbb6:	31 04       	cpc	r3, r1
    cbb8:	41 04       	cpc	r4, r1
    cbba:	51 04       	cpc	r5, r1
    cbbc:	61 f6       	brne	.-104    	; 0xcb56 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5828
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    cbbe:	21 2c       	mov	r2, r1
    cbc0:	31 2c       	mov	r3, r1
    cbc2:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5825
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    cbc4:	2d 96       	adiw	r28, 0x0d	; 13
    cbc6:	1f ae       	std	Y+63, r1	; 0x3f
    cbc8:	2d 97       	sbiw	r28, 0x0d	; 13
    cbca:	46 cf       	rjmp	.-372    	; 0xca58 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5261
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    cbcc:	61 e4       	ldi	r22, 0x41	; 65
    cbce:	7c e3       	ldi	r23, 0x3C	; 60
    cbd0:	c6 01       	movw	r24, r12
    cbd2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5262
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    cbd6:	ee 24       	eor	r14, r14
    cbd8:	ea 94       	dec	r14
    cbda:	fe 2c       	mov	r15, r14
    cbdc:	00 e0       	ldi	r16, 0x00	; 0
    cbde:	18 ef       	ldi	r17, 0xF8	; 248
    cbe0:	7a cf       	rjmp	.-268    	; 0xcad6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>

0000cbe2 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    cbe2:	cf 92       	push	r12
    cbe4:	df 92       	push	r13
    cbe6:	ef 92       	push	r14
    cbe8:	ff 92       	push	r15
    cbea:	1f 93       	push	r17
    cbec:	cf 93       	push	r28
    cbee:	df 93       	push	r29
    cbf0:	cd b7       	in	r28, 0x3d	; 61
    cbf2:	de b7       	in	r29, 0x3e	; 62
    cbf4:	63 97       	sbiw	r28, 0x13	; 19
    cbf6:	0f b6       	in	r0, 0x3f	; 63
    cbf8:	f8 94       	cli
    cbfa:	de bf       	out	0x3e, r29	; 62
    cbfc:	0f be       	out	0x3f, r0	; 63
    cbfe:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4272
  uint8_t active = 0;
    cc00:	1b 8a       	std	Y+19, r1	; 0x13
    cc02:	86 e6       	ldi	r24, 0x66	; 102
    cc04:	c8 2e       	mov	r12, r24
    cc06:	d1 2c       	mov	r13, r1
    cc08:	e1 2c       	mov	r14, r1
    cc0a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cc0c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
  {
    remote_tds_get_complete(idx, &active, payload);
    cc0e:	ae 01       	movw	r20, r28
    cc10:	4f 5f       	subi	r20, 0xFF	; 255
    cc12:	5f 4f       	sbci	r21, 0xFF	; 255
    cc14:	be 01       	movw	r22, r28
    cc16:	6d 5e       	subi	r22, 0xED	; 237
    cc18:	7f 4f       	sbci	r23, 0xFF	; 255
    cc1a:	81 2f       	mov	r24, r17
    cc1c:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    cc20:	8b 89       	ldd	r24, Y+19	; 0x13
    cc22:	81 30       	cpi	r24, 0x01	; 1
    cc24:	09 f0       	breq	.+2      	; 0xcc28 <send_mqtt_remote_tds_status()+0x46>
    cc26:	44 c0       	rjmp	.+136    	; 0xccb0 <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    cc28:	9e 01       	movw	r18, r28
    cc2a:	2f 5f       	subi	r18, 0xFF	; 255
    cc2c:	3f 4f       	sbci	r19, 0xFF	; 255
    cc2e:	41 ec       	ldi	r20, 0xC1	; 193
    cc30:	53 e0       	ldi	r21, 0x03	; 3
    cc32:	61 2f       	mov	r22, r17
    cc34:	86 ec       	ldi	r24, 0xC6	; 198
    cc36:	93 e0       	ldi	r25, 0x03	; 3
    cc38:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
      itoa(active, payload, 10);
    cc3c:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cc3e:	4a e0       	ldi	r20, 0x0A	; 10
    cc40:	be 01       	movw	r22, r28
    cc42:	6f 5f       	subi	r22, 0xFF	; 255
    cc44:	7f 4f       	sbci	r23, 0xFF	; 255
    cc46:	90 e0       	ldi	r25, 0x00	; 0
    cc48:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    cc4c:	9e 01       	movw	r18, r28
    cc4e:	2f 5f       	subi	r18, 0xFF	; 255
    cc50:	3f 4f       	sbci	r19, 0xFF	; 255
    cc52:	4b ec       	ldi	r20, 0xCB	; 203
    cc54:	53 e0       	ldi	r21, 0x03	; 3
    cc56:	61 2f       	mov	r22, r17
    cc58:	86 ec       	ldi	r24, 0xC6	; 198
    cc5a:	93 e0       	ldi	r25, 0x03	; 3
    cc5c:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_data():
    cc60:	81 2f       	mov	r24, r17
    cc62:	0e 94 bd 30 	call	0x617a	; 0x617a <remote_tds_get_data(unsigned char) [clone .part.26]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cc66:	4a e0       	ldi	r20, 0x0A	; 10
    cc68:	be 01       	movw	r22, r28
    cc6a:	6f 5f       	subi	r22, 0xFF	; 255
    cc6c:	7f 4f       	sbci	r23, 0xFF	; 255
    cc6e:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4284
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    cc72:	9e 01       	movw	r18, r28
    cc74:	2f 5f       	subi	r18, 0xFF	; 255
    cc76:	3f 4f       	sbci	r19, 0xFF	; 255
    cc78:	42 ed       	ldi	r20, 0xD2	; 210
    cc7a:	53 e0       	ldi	r21, 0x03	; 3
    cc7c:	61 2f       	mov	r22, r17
    cc7e:	86 ec       	ldi	r24, 0xC6	; 198
    cc80:	93 e0       	ldi	r25, 0x03	; 3
    cc82:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    cc86:	c7 01       	movw	r24, r14
    cc88:	b6 01       	movw	r22, r12
    cc8a:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cc8e:	4a e0       	ldi	r20, 0x0A	; 10
    cc90:	be 01       	movw	r22, r28
    cc92:	6f 5f       	subi	r22, 0xFF	; 255
    cc94:	7f 4f       	sbci	r23, 0xFF	; 255
    cc96:	90 e0       	ldi	r25, 0x00	; 0
    cc98:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    cc9c:	9e 01       	movw	r18, r28
    cc9e:	2f 5f       	subi	r18, 0xFF	; 255
    cca0:	3f 4f       	sbci	r19, 0xFF	; 255
    cca2:	47 ed       	ldi	r20, 0xD7	; 215
    cca4:	53 e0       	ldi	r21, 0x03	; 3
    cca6:	61 2f       	mov	r22, r17
    cca8:	86 ec       	ldi	r24, 0xC6	; 198
    ccaa:	93 e0       	ldi	r25, 0x03	; 3
    ccac:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ccb0:	1f 5f       	subi	r17, 0xFF	; 255
    ccb2:	83 e0       	ldi	r24, 0x03	; 3
    ccb4:	c8 0e       	add	r12, r24
    ccb6:	d1 1c       	adc	r13, r1
    ccb8:	e1 1c       	adc	r14, r1
    ccba:	f1 1c       	adc	r15, r1
    ccbc:	84 e8       	ldi	r24, 0x84	; 132
    ccbe:	c8 16       	cp	r12, r24
    ccc0:	d1 04       	cpc	r13, r1
    ccc2:	e1 04       	cpc	r14, r1
    ccc4:	f1 04       	cpc	r15, r1
    ccc6:	09 f0       	breq	.+2      	; 0xccca <send_mqtt_remote_tds_status()+0xe8>
    ccc8:	a2 cf       	rjmp	.-188    	; 0xcc0e <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    ccca:	63 96       	adiw	r28, 0x13	; 19
    cccc:	0f b6       	in	r0, 0x3f	; 63
    ccce:	f8 94       	cli
    ccd0:	de bf       	out	0x3e, r29	; 62
    ccd2:	0f be       	out	0x3f, r0	; 63
    ccd4:	cd bf       	out	0x3d, r28	; 61
    ccd6:	df 91       	pop	r29
    ccd8:	cf 91       	pop	r28
    ccda:	1f 91       	pop	r17
    ccdc:	ff 90       	pop	r15
    ccde:	ef 90       	pop	r14
    cce0:	df 90       	pop	r13
    cce2:	cf 90       	pop	r12
    cce4:	08 95       	ret

0000cce6 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3188
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    cce6:	ef 92       	push	r14
    cce8:	ff 92       	push	r15
    ccea:	0f 93       	push	r16
    ccec:	1f 93       	push	r17
    ccee:	cf 93       	push	r28
    ccf0:	df 93       	push	r29
    ccf2:	cd b7       	in	r28, 0x3d	; 61
    ccf4:	de b7       	in	r29, 0x3e	; 62
    ccf6:	63 97       	sbiw	r28, 0x13	; 19
    ccf8:	0f b6       	in	r0, 0x3f	; 63
    ccfa:	f8 94       	cli
    ccfc:	de bf       	out	0x3e, r29	; 62
    ccfe:	0f be       	out	0x3f, r0	; 63
    cd00:	cd bf       	out	0x3d, r28	; 61
    cd02:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3192
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cd04:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    cd06:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3194
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    cd08:	ae 01       	movw	r20, r28
    cd0a:	4f 5f       	subi	r20, 0xFF	; 255
    cd0c:	5f 4f       	sbci	r21, 0xFF	; 255
    cd0e:	be 01       	movw	r22, r28
    cd10:	6d 5e       	subi	r22, 0xED	; 237
    cd12:	7f 4f       	sbci	r23, 0xFF	; 255
    cd14:	81 2f       	mov	r24, r17
    cd16:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3195
    if (strcmp(name, tmp_name) == 0)
    cd1a:	be 01       	movw	r22, r28
    cd1c:	6f 5f       	subi	r22, 0xFF	; 255
    cd1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cd20:	c7 01       	movw	r24, r14
    cd22:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    cd26:	89 2b       	or	r24, r25
    cd28:	09 f4       	brne	.+2      	; 0xcd2c <remote_tds_name_exist(char*)+0x46>
    cd2a:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3192
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cd2c:	1f 5f       	subi	r17, 0xFF	; 255
    cd2e:	1a 30       	cpi	r17, 0x0A	; 10
    cd30:	59 f7       	brne	.-42     	; 0xcd08 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    cd32:	80 2f       	mov	r24, r16
    cd34:	63 96       	adiw	r28, 0x13	; 19
    cd36:	0f b6       	in	r0, 0x3f	; 63
    cd38:	f8 94       	cli
    cd3a:	de bf       	out	0x3e, r29	; 62
    cd3c:	0f be       	out	0x3f, r0	; 63
    cd3e:	cd bf       	out	0x3d, r28	; 61
    cd40:	df 91       	pop	r29
    cd42:	cf 91       	pop	r28
    cd44:	1f 91       	pop	r17
    cd46:	0f 91       	pop	r16
    cd48:	ff 90       	pop	r15
    cd4a:	ef 90       	pop	r14
    cd4c:	08 95       	ret

0000cd4e <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5785
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    cd4e:	1f 93       	push	r17
    cd50:	cf 93       	push	r28
    cd52:	df 93       	push	r29
    cd54:	cd b7       	in	r28, 0x3d	; 61
    cd56:	de b7       	in	r29, 0x3e	; 62
    cd58:	62 97       	sbiw	r28, 0x12	; 18
    cd5a:	0f b6       	in	r0, 0x3f	; 63
    cd5c:	f8 94       	cli
    cd5e:	de bf       	out	0x3e, r29	; 62
    cd60:	0f be       	out	0x3f, r0	; 63
    cd62:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    cd64:	10 91 37 09 	lds	r17, 0x0937	; 0x800937 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    cd68:	69 e3       	ldi	r22, 0x39	; 57
    cd6a:	79 e0       	ldi	r23, 0x09	; 9
    cd6c:	ce 01       	movw	r24, r28
    cd6e:	01 96       	adiw	r24, 0x01	; 1
    cd70:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5790
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    cd74:	89 81       	ldd	r24, Y+1	; 0x01
    cd76:	88 23       	and	r24, r24
    cd78:	71 f0       	breq	.+28     	; 0xcd96 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
  {
    if (remote_tds_name_exist(name) == 255)
    cd7a:	ce 01       	movw	r24, r28
    cd7c:	01 96       	adiw	r24, 0x01	; 1
    cd7e:	0e 94 73 66 	call	0xcce6	; 0xcce6 <remote_tds_name_exist(char*)>
    cd82:	8f 3f       	cpi	r24, 0xFF	; 255
    cd84:	41 f4       	brne	.+16     	; 0xcd96 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    cd86:	1a 30       	cpi	r17, 0x0A	; 10
    cd88:	30 f4       	brcc	.+12     	; 0xcd96 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    cd8a:	be 01       	movw	r22, r28
    cd8c:	6f 5f       	subi	r22, 0xFF	; 255
    cd8e:	7f 4f       	sbci	r23, 0xFF	; 255
    cd90:	81 2f       	mov	r24, r17
    cd92:	0e 94 5d 59 	call	0xb2ba	; 0xb2ba <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5795
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    cd96:	62 96       	adiw	r28, 0x12	; 18
    cd98:	0f b6       	in	r0, 0x3f	; 63
    cd9a:	f8 94       	cli
    cd9c:	de bf       	out	0x3e, r29	; 62
    cd9e:	0f be       	out	0x3f, r0	; 63
    cda0:	cd bf       	out	0x3d, r28	; 61
    cda2:	df 91       	pop	r29
    cda4:	cf 91       	pop	r28
    cda6:	1f 91       	pop	r17
    cda8:	08 95       	ret

0000cdaa <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3137
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    cdaa:	cf 93       	push	r28
    cdac:	df 93       	push	r29
    cdae:	cd b7       	in	r28, 0x3d	; 61
    cdb0:	de b7       	in	r29, 0x3e	; 62
    cdb2:	c1 58       	subi	r28, 0x81	; 129
    cdb4:	d1 09       	sbc	r29, r1
    cdb6:	0f b6       	in	r0, 0x3f	; 63
    cdb8:	f8 94       	cli
    cdba:	de bf       	out	0x3e, r29	; 62
    cdbc:	0f be       	out	0x3f, r0	; 63
    cdbe:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    cdc0:	cf 57       	subi	r28, 0x7F	; 127
    cdc2:	df 4f       	sbci	r29, 0xFF	; 255
    cdc4:	18 82       	st	Y, r1
    cdc6:	c1 58       	subi	r28, 0x81	; 129
    cdc8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
  remote_tds_get_complete(idx, &active, tmp1);
    cdca:	ae 01       	movw	r20, r28
    cdcc:	4f 5f       	subi	r20, 0xFF	; 255
    cdce:	5f 4f       	sbci	r21, 0xFF	; 255
    cdd0:	be 01       	movw	r22, r28
    cdd2:	6f 57       	subi	r22, 0x7F	; 127
    cdd4:	7f 4f       	sbci	r23, 0xFF	; 255
    cdd6:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
  if (active == 1)
    cdda:	cf 57       	subi	r28, 0x7F	; 127
    cddc:	df 4f       	sbci	r29, 0xFF	; 255
    cdde:	88 81       	ld	r24, Y
    cde0:	c1 58       	subi	r28, 0x81	; 129
    cde2:	d0 40       	sbci	r29, 0x00	; 0
    cde4:	81 30       	cpi	r24, 0x01	; 1
    cde6:	a1 f4       	brne	.+40     	; 0xce10 <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3144
  {
    strcpy(tmp2, "/rtds/");
    cde8:	63 ee       	ldi	r22, 0xE3	; 227
    cdea:	73 e0       	ldi	r23, 0x03	; 3
    cdec:	ce 01       	movw	r24, r28
    cdee:	8f 5b       	subi	r24, 0xBF	; 191
    cdf0:	9f 4f       	sbci	r25, 0xFF	; 255
    cdf2:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3145
    strcat(tmp2, tmp1);
    cdf6:	be 01       	movw	r22, r28
    cdf8:	6f 5f       	subi	r22, 0xFF	; 255
    cdfa:	7f 4f       	sbci	r23, 0xFF	; 255
    cdfc:	ce 01       	movw	r24, r28
    cdfe:	8f 5b       	subi	r24, 0xBF	; 191
    ce00:	9f 4f       	sbci	r25, 0xFF	; 255
    ce02:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3146
    mqtt_client.subscribe(tmp2);
    ce06:	ce 01       	movw	r24, r28
    ce08:	8f 5b       	subi	r24, 0xBF	; 191
    ce0a:	9f 4f       	sbci	r25, 0xFF	; 255
    ce0c:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3148
  }
}
    ce10:	cf 57       	subi	r28, 0x7F	; 127
    ce12:	df 4f       	sbci	r29, 0xFF	; 255
    ce14:	0f b6       	in	r0, 0x3f	; 63
    ce16:	f8 94       	cli
    ce18:	de bf       	out	0x3e, r29	; 62
    ce1a:	0f be       	out	0x3f, r0	; 63
    ce1c:	cd bf       	out	0x3d, r28	; 61
    ce1e:	df 91       	pop	r29
    ce20:	cf 91       	pop	r28
    ce22:	08 95       	ret

0000ce24 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5770

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    ce24:	1f 93       	push	r17
    ce26:	cf 93       	push	r28
    ce28:	df 93       	push	r29
    ce2a:	cd b7       	in	r28, 0x3d	; 61
    ce2c:	de b7       	in	r29, 0x3e	; 62
    ce2e:	62 97       	sbiw	r28, 0x12	; 18
    ce30:	0f b6       	in	r0, 0x3f	; 63
    ce32:	f8 94       	cli
    ce34:	de bf       	out	0x3e, r29	; 62
    ce36:	0f be       	out	0x3f, r0	; 63
    ce38:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    ce3a:	10 91 37 09 	lds	r17, 0x0937	; 0x800937 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    ce3e:	69 e3       	ldi	r22, 0x39	; 57
    ce40:	79 e0       	ldi	r23, 0x09	; 9
    ce42:	ce 01       	movw	r24, r28
    ce44:	01 96       	adiw	r24, 0x01	; 1
    ce46:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5776
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    ce4a:	89 81       	ldd	r24, Y+1	; 0x01
    ce4c:	88 23       	and	r24, r24
    ce4e:	81 f0       	breq	.+32     	; 0xce70 <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5777
    if (remote_tds_name_exist(name) == 255)
    ce50:	ce 01       	movw	r24, r28
    ce52:	01 96       	adiw	r24, 0x01	; 1
    ce54:	0e 94 73 66 	call	0xcce6	; 0xcce6 <remote_tds_name_exist(char*)>
    ce58:	8f 3f       	cpi	r24, 0xFF	; 255
    ce5a:	51 f4       	brne	.+20     	; 0xce70 <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5779
    {
      remote_tds_set_complete(idx, active, name);
    ce5c:	ae 01       	movw	r20, r28
    ce5e:	4f 5f       	subi	r20, 0xFF	; 255
    ce60:	5f 4f       	sbci	r21, 0xFF	; 255
    ce62:	61 e0       	ldi	r22, 0x01	; 1
    ce64:	81 2f       	mov	r24, r17
    ce66:	0e 94 8b 59 	call	0xb316	; 0xb316 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5780
      remote_tds_subscibe_topic(idx);
    ce6a:	81 2f       	mov	r24, r17
    ce6c:	0e 94 d5 66 	call	0xcdaa	; 0xcdaa <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5782
    }
}
    ce70:	62 96       	adiw	r28, 0x12	; 18
    ce72:	0f b6       	in	r0, 0x3f	; 63
    ce74:	f8 94       	cli
    ce76:	de bf       	out	0x3e, r29	; 62
    ce78:	0f be       	out	0x3f, r0	; 63
    ce7a:	cd bf       	out	0x3d, r28	; 61
    ce7c:	df 91       	pop	r29
    ce7e:	cf 91       	pop	r28
    ce80:	1f 91       	pop	r17
    ce82:	08 95       	ret

0000ce84 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5667
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    ce84:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    ce86:	0c 94 d5 66 	jmp	0xcdaa	; 0xcdaa <remote_tds_subscibe_topic(unsigned char)>

0000ce8a <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    ce8a:	2f 92       	push	r2
    ce8c:	3f 92       	push	r3
    ce8e:	4f 92       	push	r4
    ce90:	5f 92       	push	r5
    ce92:	6f 92       	push	r6
    ce94:	7f 92       	push	r7
    ce96:	8f 92       	push	r8
    ce98:	9f 92       	push	r9
    ce9a:	af 92       	push	r10
    ce9c:	bf 92       	push	r11
    ce9e:	cf 92       	push	r12
    cea0:	df 92       	push	r13
    cea2:	ef 92       	push	r14
    cea4:	ff 92       	push	r15
    cea6:	0f 93       	push	r16
    cea8:	1f 93       	push	r17
    ceaa:	cf 93       	push	r28
    ceac:	df 93       	push	r29
    ceae:	cd b7       	in	r28, 0x3d	; 61
    ceb0:	de b7       	in	r29, 0x3e	; 62
    ceb2:	cc 52       	subi	r28, 0x2C	; 44
    ceb4:	d1 40       	sbci	r29, 0x01	; 1
    ceb6:	0f b6       	in	r0, 0x3f	; 63
    ceb8:	f8 94       	cli
    ceba:	de bf       	out	0x3e, r29	; 62
    cebc:	0f be       	out	0x3f, r0	; 63
    cebe:	cd bf       	out	0x3d, r28	; 61
    cec0:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    cec2:	1b 82       	std	Y+3, r1	; 0x03
    cec4:	8a ee       	ldi	r24, 0xEA	; 234
    cec6:	93 e0       	ldi	r25, 0x03	; 3
    cec8:	9d 83       	std	Y+5, r25	; 0x05
    ceca:	8c 83       	std	Y+4, r24	; 0x04
    cecc:	89 e3       	ldi	r24, 0x39	; 57
    cece:	95 e0       	ldi	r25, 0x05	; 5
    ced0:	9f 83       	std	Y+7, r25	; 0x07
    ced2:	8e 83       	std	Y+6, r24	; 0x06
    ced4:	18 86       	std	Y+8, r1	; 0x08
    ced6:	19 86       	std	Y+9, r1	; 0x09
    ced8:	1a 86       	std	Y+10, r1	; 0x0a
    ceda:	1b 86       	std	Y+11, r1	; 0x0b
    cedc:	80 e6       	ldi	r24, 0x60	; 96
    cede:	9a ee       	ldi	r25, 0xEA	; 234
    cee0:	a0 e0       	ldi	r26, 0x00	; 0
    cee2:	b0 e0       	ldi	r27, 0x00	; 0
    cee4:	8c 87       	std	Y+12, r24	; 0x0c
    cee6:	9d 87       	std	Y+13, r25	; 0x0d
    cee8:	ae 87       	std	Y+14, r26	; 0x0e
    ceea:	bf 87       	std	Y+15, r27	; 0x0f
    ceec:	18 8a       	std	Y+16, r1	; 0x10
    ceee:	19 8a       	std	Y+17, r1	; 0x11
    cef0:	1a 8a       	std	Y+18, r1	; 0x12
    cef2:	1b 8a       	std	Y+19, r1	; 0x13
    cef4:	1c 8a       	std	Y+20, r1	; 0x14
    cef6:	1d 8a       	std	Y+21, r1	; 0x15
    cef8:	1e 8a       	std	Y+22, r1	; 0x16
    cefa:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    cefc:	86 e9       	ldi	r24, 0x96	; 150
    cefe:	90 e1       	ldi	r25, 0x10	; 16
    cf00:	9a 83       	std	Y+2, r25	; 0x02
    cf02:	89 83       	std	Y+1, r24	; 0x01
    cf04:	e2 e4       	ldi	r30, 0x42	; 66
    cf06:	fb e0       	ldi	r31, 0x0B	; 11
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    cf08:	80 e0       	ldi	r24, 0x00	; 0
    cf0a:	11 92       	st	Z+, r1
    cf0c:	8f 5f       	subi	r24, 0xFF	; 255
    cf0e:	80 38       	cpi	r24, 0x80	; 128
    cf10:	e1 f7       	brne	.-8      	; 0xcf0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    cf12:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <mqtt_receive_message>
    cf16:	90 91 6c 0a 	lds	r25, 0x0A6C	; 0x800a6c <mqtt_receive_message+0x1>
    cf1a:	01 96       	adiw	r24, 0x01	; 1
    cf1c:	90 93 6c 0a 	sts	0x0A6C, r25	; 0x800a6c <mqtt_receive_message+0x1>
    cf20:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
  strncpy(my_payload, (char*) payload, length);
    cf24:	82 e4       	ldi	r24, 0x42	; 66
    cf26:	9b e0       	ldi	r25, 0x0B	; 11
    cf28:	0e 94 e0 bd 	call	0x17bc0	; 0x17bc0 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    cf2c:	5e 01       	movw	r10, r28
    cf2e:	28 ec       	ldi	r18, 0xC8	; 200
    cf30:	a2 0e       	add	r10, r18
    cf32:	b1 1c       	adc	r11, r1
    cf34:	66 e3       	ldi	r22, 0x36	; 54
    cf36:	7a e3       	ldi	r23, 0x3A	; 58
    cf38:	c5 01       	movw	r24, r10
    cf3a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
  if (strcmp(str1, topic) == 0)
    cf3e:	b4 01       	movw	r22, r8
    cf40:	c5 01       	movw	r24, r10
    cf42:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    cf46:	89 2b       	or	r24, r25
    cf48:	49 f4       	brne	.+18     	; 0xcf5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    cf4a:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    cf4e:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    cf52:	01 96       	adiw	r24, 0x01	; 1
    cf54:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    cf58:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3350
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    cf5c:	6d e4       	ldi	r22, 0x4D	; 77
    cf5e:	7a e3       	ldi	r23, 0x3A	; 58
    cf60:	c5 01       	movw	r24, r10
    cf62:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
  if (strcmp(str1, topic) == 0)
    cf66:	b4 01       	movw	r22, r8
    cf68:	c5 01       	movw	r24, r10
    cf6a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    cf6e:	89 2b       	or	r24, r25
    cf70:	49 f4       	brne	.+18     	; 0xcf84 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
  {
    mqtt_process_message++;
    cf72:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    cf76:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    cf7a:	01 96       	adiw	r24, 0x01	; 1
    cf7c:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    cf80:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    cf84:	64 e7       	ldi	r22, 0x74	; 116
    cf86:	7a e3       	ldi	r23, 0x3A	; 58
    cf88:	c5 01       	movw	r24, r10
    cf8a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
  strcat_P(str1, global_time_set);
    cf8e:	68 e1       	ldi	r22, 0x18	; 24
    cf90:	7a e3       	ldi	r23, 0x3A	; 58
    cf92:	c5 01       	movw	r24, r10
    cf94:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
  if (strcmp(str1, topic) == 0)
    cf98:	b4 01       	movw	r22, r8
    cf9a:	c5 01       	movw	r24, r10
    cf9c:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    cfa0:	89 2b       	or	r24, r25
    cfa2:	09 f0       	breq	.+2      	; 0xcfa6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    cfa4:	bb c0       	rjmp	.+374    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
  {
    mqtt_process_message++;
    cfa6:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    cfaa:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    cfae:	01 96       	adiw	r24, 0x01	; 1
    cfb0:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    cfb4:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    cfb8:	20 91 f4 0c 	lds	r18, 0x0CF4	; 0x800cf4 <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    cfbc:	82 e4       	ldi	r24, 0x42	; 66
    cfbe:	9b e0       	ldi	r25, 0x0B	; 11
    cfc0:	89 2b       	or	r24, r25
    cfc2:	09 f0       	breq	.+2      	; 0xcfc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    cfc4:	3a c2       	rjmp	.+1140   	; 0xd43a <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    cfc6:	82 ef       	ldi	r24, 0xF2	; 242
    cfc8:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    cfca:	45 ef       	ldi	r20, 0xF5	; 245
    cfcc:	5c e0       	ldi	r21, 0x0C	; 12
    cfce:	2a 96       	adiw	r28, 0x0a	; 10
    cfd0:	5f af       	std	Y+63, r21	; 0x3f
    cfd2:	4e af       	std	Y+62, r20	; 0x3e
    cfd4:	2a 97       	sbiw	r28, 0x0a	; 10
    cfd6:	2c 96       	adiw	r28, 0x0c	; 12
    cfd8:	9f af       	std	Y+63, r25	; 0x3f
    cfda:	8e af       	std	Y+62, r24	; 0x3e
    cfdc:	2c 97       	sbiw	r28, 0x0c	; 12
    cfde:	82 e4       	ldi	r24, 0x42	; 66
    cfe0:	9b e0       	ldi	r25, 0x0B	; 11
    cfe2:	2e 96       	adiw	r28, 0x0e	; 14
    cfe4:	9f af       	std	Y+63, r25	; 0x3f
    cfe6:	8e af       	std	Y+62, r24	; 0x3e
    cfe8:	2e 97       	sbiw	r28, 0x0e	; 14
    cfea:	2f 96       	adiw	r28, 0x0f	; 15
    cfec:	2f af       	std	Y+63, r18	; 0x3f
    cfee:	2f 97       	sbiw	r28, 0x0f	; 15
    cff0:	61 96       	adiw	r28, 0x11	; 17
    cff2:	1f ae       	std	Y+63, r1	; 0x3f
    cff4:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    cff6:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <doc+0x8>
    cffa:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    cffe:	8d ef       	ldi	r24, 0xFD	; 253
    d000:	9d e0       	ldi	r25, 0x0D	; 13
    d002:	89 2b       	or	r24, r25
    d004:	09 f4       	brne	.+2      	; 0xd008 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    d006:	1c c2       	rjmp	.+1080   	; 0xd440 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    d008:	10 92 fe 0d 	sts	0x0DFE, r1	; 0x800dfe <doc+0x10a>
    d00c:	10 92 fd 0d 	sts	0x0DFD, r1	; 0x800dfd <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    d010:	ca 01       	movw	r24, r20
    d012:	ac 01       	movw	r20, r24
    d014:	6d ef       	ldi	r22, 0xFD	; 253
    d016:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    d018:	ce 01       	movw	r24, r28
    d01a:	88 5b       	subi	r24, 0xB8	; 184
    d01c:	9f 4f       	sbci	r25, 0xFF	; 255
    d01e:	0e 94 87 2c 	call	0x590e	; 0x590e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    d022:	8d ef       	ldi	r24, 0xFD	; 253
    d024:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    d026:	0d ef       	ldi	r16, 0xFD	; 253
    d028:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    d02a:	89 2b       	or	r24, r25
    d02c:	51 f0       	breq	.+20     	; 0xd042 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    d02e:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <doc+0x109>
    d032:	90 91 fe 0d 	lds	r25, 0x0DFE	; 0x800dfe <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    d036:	0f ef       	ldi	r16, 0xFF	; 255
    d038:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    d03a:	09 97       	sbiw	r24, 0x09	; 9
    d03c:	11 f0       	breq	.+4      	; 0xd042 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    d03e:	10 e0       	ldi	r17, 0x00	; 0
    d040:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    d042:	67 ef       	ldi	r22, 0xF7	; 247
    d044:	73 e0       	ldi	r23, 0x03	; 3
    d046:	c8 01       	movw	r24, r16
    d048:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d04c:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    d04e:	89 2b       	or	r24, r25
    d050:	09 f4       	brne	.+2      	; 0xd054 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    d052:	64 c0       	rjmp	.+200    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d054:	6c ef       	ldi	r22, 0xFC	; 252
    d056:	73 e0       	ldi	r23, 0x03	; 3
    d058:	c8 01       	movw	r24, r16
    d05a:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d05e:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
    d060:	89 2b       	or	r24, r25
    d062:	09 f4       	brne	.+2      	; 0xd066 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    d064:	5b c0       	rjmp	.+182    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d066:	62 e0       	ldi	r22, 0x02	; 2
    d068:	74 e0       	ldi	r23, 0x04	; 4
    d06a:	c8 01       	movw	r24, r16
    d06c:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d070:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
    d072:	89 2b       	or	r24, r25
    d074:	09 f4       	brne	.+2      	; 0xd078 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    d076:	52 c0       	rjmp	.+164    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d078:	67 e0       	ldi	r22, 0x07	; 7
    d07a:	74 e0       	ldi	r23, 0x04	; 4
    d07c:	c8 01       	movw	r24, r16
    d07e:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d082:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
    d084:	89 2b       	or	r24, r25
    d086:	09 f4       	brne	.+2      	; 0xd08a <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    d088:	49 c0       	rjmp	.+146    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d08a:	6e e0       	ldi	r22, 0x0E	; 14
    d08c:	74 e0       	ldi	r23, 0x04	; 4
    d08e:	c8 01       	movw	r24, r16
    d090:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
    d094:	00 97       	sbiw	r24, 0x00	; 0
    d096:	09 f4       	brne	.+2      	; 0xd09a <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    d098:	41 c0       	rjmp	.+130    	; 0xd11c <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    d09a:	0e 94 88 a3 	call	0x14710	; 0x14710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d09e:	38 2e       	mov	r3, r24
    d0a0:	c6 01       	movw	r24, r12
    d0a2:	0e 94 88 a3 	call	0x14710	; 0x14710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d0a6:	d8 2e       	mov	r13, r24
    d0a8:	c3 01       	movw	r24, r6
    d0aa:	0e 94 88 a3 	call	0x14710	; 0x14710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d0ae:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d0b0:	65 e1       	ldi	r22, 0x15	; 21
    d0b2:	74 e0       	ldi	r23, 0x04	; 4
    d0b4:	c8 01       	movw	r24, r16
    d0b6:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    d0ba:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    d0bc:	00 97       	sbiw	r24, 0x00	; 0
    d0be:	19 f0       	breq	.+6      	; 0xd0c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    d0c0:	0e 94 88 a3 	call	0x14710	; 0x14710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d0c4:	18 2f       	mov	r17, r24
    d0c6:	c2 01       	movw	r24, r4
    d0c8:	0e 94 88 a3 	call	0x14710	; 0x14710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d0cc:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    d0ce:	d7 01       	movw	r26, r14
    d0d0:	8d 91       	ld	r24, X+
    d0d2:	9c 91       	ld	r25, X
    d0d4:	11 97       	sbiw	r26, 0x01	; 1
    d0d6:	87 30       	cpi	r24, 0x07	; 7
    d0d8:	91 05       	cpc	r25, r1
    d0da:	08 f0       	brcs	.+2      	; 0xd0de <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    d0dc:	b4 c1       	rjmp	.+872    	; 0xd446 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    d0de:	85 30       	cpi	r24, 0x05	; 5
    d0e0:	91 05       	cpc	r25, r1
    d0e2:	08 f0       	brcs	.+2      	; 0xd0e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    d0e4:	be c1       	rjmp	.+892    	; 0xd462 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    d0e6:	03 97       	sbiw	r24, 0x03	; 3
    d0e8:	08 f0       	brcs	.+2      	; 0xd0ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    d0ea:	cd c1       	rjmp	.+922    	; 0xd486 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    d0ec:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    d0ee:	29 96       	adiw	r28, 0x09	; 9
    d0f0:	6f af       	std	Y+63, r22	; 0x3f
    d0f2:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d0f4:	2a 96       	adiw	r28, 0x0a	; 10
    d0f6:	0f af       	std	Y+63, r16	; 0x3f
    d0f8:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d0fa:	2b 96       	adiw	r28, 0x0b	; 11
    d0fc:	1f af       	std	Y+63, r17	; 0x3f
    d0fe:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d100:	2c 96       	adiw	r28, 0x0c	; 12
    d102:	cf ae       	std	Y+63, r12	; 0x3f
    d104:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d106:	2d 96       	adiw	r28, 0x0d	; 13
    d108:	df ae       	std	Y+63, r13	; 0x3f
    d10a:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d10c:	2e 96       	adiw	r28, 0x0e	; 14
    d10e:	3f ae       	std	Y+63, r3	; 0x3f
    d110:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3367
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    d112:	ce 01       	movw	r24, r28
    d114:	88 5b       	subi	r24, 0xB8	; 184
    d116:	9f 4f       	sbci	r25, 0xFF	; 255
    d118:	0e 94 d2 99 	call	0x133a4	; 0x133a4 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3370
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    d11c:	64 e7       	ldi	r22, 0x74	; 116
    d11e:	7a e3       	ldi	r23, 0x3A	; 58
    d120:	c5 01       	movw	r24, r10
    d122:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3371
  strcat_P(str1, global_time_ntp);
    d126:	68 e0       	ldi	r22, 0x08	; 8
    d128:	7a e3       	ldi	r23, 0x3A	; 58
    d12a:	c5 01       	movw	r24, r10
    d12c:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3372
  if (strcmp(str1, topic) == 0)
    d130:	b4 01       	movw	r22, r8
    d132:	c5 01       	movw	r24, r10
    d134:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d138:	89 2b       	or	r24, r25
    d13a:	09 f0       	breq	.+2      	; 0xd13e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    d13c:	e5 c0       	rjmp	.+458    	; 0xd308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3374
  {
    mqtt_process_message++;
    d13e:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d142:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d146:	01 96       	adiw	r24, 0x01	; 1
    d148:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d14c:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    d150:	81 e0       	ldi	r24, 0x01	; 1
    d152:	90 e0       	ldi	r25, 0x00	; 0
    d154:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    d158:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    d15a:	7e 01       	movw	r14, r28
    d15c:	28 e4       	ldi	r18, 0x48	; 72
    d15e:	e2 0e       	add	r14, r18
    d160:	f1 1c       	adc	r15, r1
    d162:	d7 01       	movw	r26, r14
    d164:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    d166:	0a e0       	ldi	r16, 0x0A	; 10
    d168:	24 e0       	ldi	r18, 0x04	; 4
    d16a:	44 ed       	ldi	r20, 0xD4	; 212
    d16c:	5c e0       	ldi	r21, 0x0C	; 12
    d16e:	6e e2       	ldi	r22, 0x2E	; 46
    d170:	c7 01       	movw	r24, r14
    d172:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    d176:	ce 01       	movw	r24, r28
    d178:	01 96       	adiw	r24, 0x01	; 1
    d17a:	0e 94 b6 95 	call	0x12b6c	; 0x12b6c <NTPClient::begin()>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    d17e:	20 e1       	ldi	r18, 0x10	; 16
    d180:	3e e0       	ldi	r19, 0x0E	; 14
    d182:	12 9f       	mul	r17, r18
    d184:	c0 01       	movw	r24, r0
    d186:	13 9f       	mul	r17, r19
    d188:	90 0d       	add	r25, r0
    d18a:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    d18c:	09 2e       	mov	r0, r25
    d18e:	00 0c       	add	r0, r0
    d190:	aa 0b       	sbc	r26, r26
    d192:	bb 0b       	sbc	r27, r27
    d194:	88 87       	std	Y+8, r24	; 0x08
    d196:	99 87       	std	Y+9, r25	; 0x09
    d198:	aa 87       	std	Y+10, r26	; 0x0a
    d19a:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    d19c:	fd 82       	std	Y+5, r15	; 0x05
    d19e:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    d1a0:	ce 01       	movw	r24, r28
    d1a2:	01 96       	adiw	r24, 0x01	; 1
    d1a4:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    d1a8:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    d1aa:	88 23       	and	r24, r24
    d1ac:	09 f4       	brne	.+2      	; 0xd1b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    d1ae:	9a c0       	rjmp	.+308    	; 0xd2e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    d1b0:	ce 01       	movw	r24, r28
    d1b2:	01 96       	adiw	r24, 0x01	; 1
    d1b4:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
    d1b8:	1c e3       	ldi	r17, 0x3C	; 60
    d1ba:	c1 2e       	mov	r12, r17
    d1bc:	d1 2c       	mov	r13, r1
    d1be:	e1 2c       	mov	r14, r1
    d1c0:	f1 2c       	mov	r15, r1
    d1c2:	a7 01       	movw	r20, r14
    d1c4:	96 01       	movw	r18, r12
    d1c6:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
    d1ca:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    d1cc:	ce 01       	movw	r24, r28
    d1ce:	01 96       	adiw	r24, 0x01	; 1
    d1d0:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
    d1d4:	00 e1       	ldi	r16, 0x10	; 16
    d1d6:	40 2e       	mov	r4, r16
    d1d8:	0e e0       	ldi	r16, 0x0E	; 14
    d1da:	50 2e       	mov	r5, r16
    d1dc:	61 2c       	mov	r6, r1
    d1de:	71 2c       	mov	r7, r1
    d1e0:	a3 01       	movw	r20, r6
    d1e2:	92 01       	movw	r18, r4
    d1e4:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
    d1e8:	a7 01       	movw	r20, r14
    d1ea:	96 01       	movw	r18, r12
    d1ec:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
    d1f0:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    d1f2:	ce 01       	movw	r24, r28
    d1f4:	01 96       	adiw	r24, 0x01	; 1
    d1f6:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
    d1fa:	20 e8       	ldi	r18, 0x80	; 128
    d1fc:	31 e5       	ldi	r19, 0x51	; 81
    d1fe:	41 e0       	ldi	r20, 0x01	; 1
    d200:	50 e0       	ldi	r21, 0x00	; 0
    d202:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
    d206:	a3 01       	movw	r20, r6
    d208:	92 01       	movw	r18, r4
    d20a:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
    d20e:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    d210:	ce 01       	movw	r24, r28
    d212:	01 96       	adiw	r24, 0x01	; 1
    d214:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
    d218:	c8 57       	subi	r28, 0x78	; 120
    d21a:	df 4f       	sbci	r29, 0xFF	; 255
    d21c:	68 83       	st	Y, r22
    d21e:	79 83       	std	Y+1, r23	; 0x01
    d220:	8a 83       	std	Y+2, r24	; 0x02
    d222:	9b 83       	std	Y+3, r25	; 0x03
    d224:	c8 58       	subi	r28, 0x88	; 136
    d226:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    d228:	ce 01       	movw	r24, r28
    d22a:	88 57       	subi	r24, 0x78	; 120
    d22c:	9f 4f       	sbci	r25, 0xFF	; 255
    d22e:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    d232:	fc 01       	movw	r30, r24
    d234:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    d236:	ce 01       	movw	r24, r28
    d238:	01 96       	adiw	r24, 0x01	; 1
    d23a:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
    d23e:	c8 57       	subi	r28, 0x78	; 120
    d240:	df 4f       	sbci	r29, 0xFF	; 255
    d242:	68 83       	st	Y, r22
    d244:	79 83       	std	Y+1, r23	; 0x01
    d246:	8a 83       	std	Y+2, r24	; 0x02
    d248:	9b 83       	std	Y+3, r25	; 0x03
    d24a:	c8 58       	subi	r28, 0x88	; 136
    d24c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    d24e:	ce 01       	movw	r24, r28
    d250:	88 57       	subi	r24, 0x78	; 120
    d252:	9f 4f       	sbci	r25, 0xFF	; 255
    d254:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    d258:	dc 01       	movw	r26, r24
    d25a:	15 96       	adiw	r26, 0x05	; 5
    d25c:	0c 91       	ld	r16, X
    d25e:	00 2e       	mov	r0, r16
    d260:	00 0c       	add	r0, r0
    d262:	11 0b       	sbc	r17, r17
    d264:	0f 5f       	subi	r16, 0xFF	; 255
    d266:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    d268:	ce 01       	movw	r24, r28
    d26a:	01 96       	adiw	r24, 0x01	; 1
    d26c:	0e 94 9a 95 	call	0x12b34	; 0x12b34 <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d270:	80 3d       	cpi	r24, 0xD0	; 208
    d272:	b7 e0       	ldi	r27, 0x07	; 7
    d274:	9b 07       	cpc	r25, r27
    d276:	10 f0       	brcs	.+4      	; 0xd27c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d278:	80 5d       	subi	r24, 0xD0	; 208
    d27a:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    d27c:	c8 57       	subi	r28, 0x78	; 120
    d27e:	df 4f       	sbci	r29, 0xFF	; 255
    d280:	88 83       	st	Y, r24
    d282:	c8 58       	subi	r28, 0x88	; 136
    d284:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d286:	c7 57       	subi	r28, 0x77	; 119
    d288:	df 4f       	sbci	r29, 0xFF	; 255
    d28a:	08 83       	st	Y, r16
    d28c:	c9 58       	subi	r28, 0x89	; 137
    d28e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d290:	c6 57       	subi	r28, 0x76	; 118
    d292:	df 4f       	sbci	r29, 0xFF	; 255
    d294:	c8 82       	st	Y, r12
    d296:	ca 58       	subi	r28, 0x8A	; 138
    d298:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d29a:	c5 57       	subi	r28, 0x75	; 117
    d29c:	df 4f       	sbci	r29, 0xFF	; 255
    d29e:	d8 82       	st	Y, r13
    d2a0:	cb 58       	subi	r28, 0x8B	; 139
    d2a2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d2a4:	c4 57       	subi	r28, 0x74	; 116
    d2a6:	df 4f       	sbci	r29, 0xFF	; 255
    d2a8:	e8 82       	st	Y, r14
    d2aa:	cc 58       	subi	r28, 0x8C	; 140
    d2ac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d2ae:	c3 57       	subi	r28, 0x73	; 115
    d2b0:	df 4f       	sbci	r29, 0xFF	; 255
    d2b2:	38 82       	st	Y, r3
    d2b4:	cd 58       	subi	r28, 0x8D	; 141
    d2b6:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
    d2b8:	ce 01       	movw	r24, r28
    d2ba:	88 57       	subi	r24, 0x78	; 120
    d2bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d2be:	0e 94 d2 99 	call	0x133a4	; 0x133a4 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    d2c2:	ce 01       	movw	r24, r28
    d2c4:	01 96       	adiw	r24, 0x01	; 1
    d2c6:	0e 94 9a 95 	call	0x12b34	; 0x12b34 <NTPClient::getYear() const>
    d2ca:	9f 93       	push	r25
    d2cc:	8f 93       	push	r24
    d2ce:	89 e1       	ldi	r24, 0x19	; 25
    d2d0:	94 e0       	ldi	r25, 0x04	; 4
    d2d2:	9f 93       	push	r25
    d2d4:	8f 93       	push	r24
    d2d6:	0e 94 ef bd 	call	0x17bde	; 0x17bde <printf>
    d2da:	0f 90       	pop	r0
    d2dc:	0f 90       	pop	r0
    d2de:	0f 90       	pop	r0
    d2e0:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    d2e2:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    d2e4:	89 81       	ldd	r24, Y+1	; 0x01
    d2e6:	9a 81       	ldd	r25, Y+2	; 0x02
    d2e8:	dc 01       	movw	r26, r24
    d2ea:	ed 91       	ld	r30, X+
    d2ec:	fc 91       	ld	r31, X
    d2ee:	02 88       	ldd	r0, Z+18	; 0x12
    d2f0:	f3 89       	ldd	r31, Z+19	; 0x13
    d2f2:	e0 2d       	mov	r30, r0
    d2f4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    d2f6:	1b 82       	std	Y+3, r1	; 0x03
    d2f8:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3375
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    d2fc:	11 30       	cpi	r17, 0x01	; 1
    d2fe:	09 f0       	breq	.+2      	; 0xd302 <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    d300:	ef c0       	rjmp	.+478    	; 0xd4e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3376
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d302:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3378
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d304:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    d308:	64 e7       	ldi	r22, 0x74	; 116
    d30a:	7a e3       	ldi	r23, 0x3A	; 58
    d30c:	c5 01       	movw	r24, r10
    d30e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3382
  strcat_P(str1, global_time_offset);
    d312:	61 ef       	ldi	r22, 0xF1	; 241
    d314:	79 e3       	ldi	r23, 0x39	; 57
    d316:	c5 01       	movw	r24, r10
    d318:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3383
  if (strcmp(str1, topic) == 0)
    d31c:	b4 01       	movw	r22, r8
    d31e:	c5 01       	movw	r24, r10
    d320:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d324:	89 2b       	or	r24, r25
    d326:	91 f4       	brne	.+36     	; 0xd34c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
  {
    mqtt_process_message++;
    d328:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d32c:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d330:	01 96       	adiw	r24, 0x01	; 1
    d332:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d336:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3386
    time_set_offset(atoi(my_payload));
    d33a:	82 e4       	ldi	r24, 0x42	; 66
    d33c:	9b e0       	ldi	r25, 0x0B	; 11
    d33e:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    d342:	68 2f       	mov	r22, r24
    d344:	81 e0       	ldi	r24, 0x01	; 1
    d346:	90 e0       	ldi	r25, 0x00	; 0
    d348:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    d34c:	64 e7       	ldi	r22, 0x74	; 116
    d34e:	7a e3       	ldi	r23, 0x3A	; 58
    d350:	c5 01       	movw	r24, r10
    d352:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  strcat(str1, device.nazev);
    d356:	6c e9       	ldi	r22, 0x9C	; 156
    d358:	7c e0       	ldi	r23, 0x0C	; 12
    d35a:	c5 01       	movw	r24, r10
    d35c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
  strcat(str1, "/tds/associate");
    d360:	6e e1       	ldi	r22, 0x1E	; 30
    d362:	74 e0       	ldi	r23, 0x04	; 4
    d364:	c5 01       	movw	r24, r10
    d366:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
  if (strcmp(str1, topic) == 0)
    d36a:	b4 01       	movw	r22, r8
    d36c:	c5 01       	movw	r24, r10
    d36e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    d372:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    d374:	89 2b       	or	r24, r25
    d376:	b1 f4       	brne	.+44     	; 0xd3a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3395
  {
    mqtt_process_message++;
    d378:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d37c:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d380:	01 96       	adiw	r24, 0x01	; 1
    d382:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d386:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
    id = atoi(my_payload);
    d38a:	82 e4       	ldi	r24, 0x42	; 66
    d38c:	9b e0       	ldi	r25, 0x0B	; 11
    d38e:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d392:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3397
    if (tds_associate(id) == 255)
    d394:	0e 94 1d 5d 	call	0xba3a	; 0xba3a <tds_associate(unsigned char)>
    d398:	8f 3f       	cpi	r24, 0xFF	; 255
    d39a:	21 f4       	brne	.+8      	; 0xd3a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3398
      log_error(&mqtt_client, "tds/associate full or bad id");
    d39c:	8d e2       	ldi	r24, 0x2D	; 45
    d39e:	94 e0       	ldi	r25, 0x04	; 4
    d3a0:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    d3a4:	64 e7       	ldi	r22, 0x74	; 116
    d3a6:	7a e3       	ldi	r23, 0x3A	; 58
    d3a8:	c5 01       	movw	r24, r10
    d3aa:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405
  strcat(str1, device.nazev);
    d3ae:	6c e9       	ldi	r22, 0x9C	; 156
    d3b0:	7c e0       	ldi	r23, 0x0C	; 12
    d3b2:	c5 01       	movw	r24, r10
    d3b4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3406
  strcat(str1, "/tds/set/");
    d3b8:	6a e4       	ldi	r22, 0x4A	; 74
    d3ba:	74 e0       	ldi	r23, 0x04	; 4
    d3bc:	c5 01       	movw	r24, r10
    d3be:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3407
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d3c2:	f5 01       	movw	r30, r10
    d3c4:	01 90       	ld	r0, Z+
    d3c6:	00 20       	and	r0, r0
    d3c8:	e9 f7       	brne	.-6      	; 0xd3c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    d3ca:	31 97       	sbiw	r30, 0x01	; 1
    d3cc:	af 01       	movw	r20, r30
    d3ce:	4a 19       	sub	r20, r10
    d3d0:	5b 09       	sbc	r21, r11
    d3d2:	b4 01       	movw	r22, r8
    d3d4:	c5 01       	movw	r24, r10
    d3d6:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d3da:	89 2b       	or	r24, r25
    d3dc:	09 f0       	breq	.+2      	; 0xd3e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    d3de:	02 c1       	rjmp	.+516    	; 0xd5e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
  {
    mqtt_process_message++;
    d3e0:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d3e4:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d3e8:	01 96       	adiw	r24, 0x01	; 1
    d3ea:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d3ee:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3411
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d3f2:	f5 01       	movw	r30, r10
    d3f4:	01 90       	ld	r0, Z+
    d3f6:	00 20       	and	r0, r0
    d3f8:	e9 f7       	brne	.-6      	; 0xd3f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    d3fa:	31 97       	sbiw	r30, 0x01	; 1
    d3fc:	ea 19       	sub	r30, r10
    d3fe:	fb 09       	sbc	r31, r11
    d400:	9e 2f       	mov	r25, r30
    d402:	4e 2f       	mov	r20, r30
    d404:	84 2f       	mov	r24, r20
    d406:	89 1b       	sub	r24, r25
    d408:	24 2f       	mov	r18, r20
    d40a:	30 e0       	ldi	r19, 0x00	; 0
    d40c:	d4 01       	movw	r26, r8
    d40e:	0d 90       	ld	r0, X+
    d410:	00 20       	and	r0, r0
    d412:	e9 f7       	brne	.-6      	; 0xd40e <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    d414:	11 97       	sbiw	r26, 0x01	; 1
    d416:	a8 19       	sub	r26, r8
    d418:	b9 09       	sbc	r27, r9
    d41a:	2a 17       	cp	r18, r26
    d41c:	3b 07       	cpc	r19, r27
    d41e:	08 f0       	brcs	.+2      	; 0xd422 <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    d420:	61 c0       	rjmp	.+194    	; 0xd4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
    {
      str1[cnt] = topic[f];
    d422:	d5 01       	movw	r26, r10
    d424:	a8 0f       	add	r26, r24
    d426:	b1 1d       	adc	r27, r1
    d428:	28 0d       	add	r18, r8
    d42a:	39 1d       	adc	r19, r9
    d42c:	f9 01       	movw	r30, r18
    d42e:	80 81       	ld	r24, Z
    d430:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3414
      str1[cnt + 1] = 0;
    d432:	11 96       	adiw	r26, 0x01	; 1
    d434:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3411
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d436:	4f 5f       	subi	r20, 0xFF	; 255
    d438:	e5 cf       	rjmp	.-54     	; 0xd404 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    d43a:	82 e4       	ldi	r24, 0x42	; 66
    d43c:	9b e0       	ldi	r25, 0x0B	; 11
    d43e:	c5 cd       	rjmp	.-1142   	; 0xcfca <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    d440:	8d ef       	ldi	r24, 0xFD	; 253
    d442:	9d e0       	ldi	r25, 0x0D	; 13
    d444:	e6 cd       	rjmp	.-1076   	; 0xd012 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    d446:	87 30       	cpi	r24, 0x07	; 7
    d448:	91 05       	cpc	r25, r1
    d44a:	b1 f0       	breq	.+44     	; 0xd478 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    d44c:	0a 97       	sbiw	r24, 0x0a	; 10
    d44e:	09 f0       	breq	.+2      	; 0xd452 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    d450:	4d ce       	rjmp	.-870    	; 0xd0ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    d452:	f7 01       	movw	r30, r14
    d454:	62 81       	ldd	r22, Z+2	; 0x02
    d456:	73 81       	ldd	r23, Z+3	; 0x03
    d458:	84 81       	ldd	r24, Z+4	; 0x04
    d45a:	95 81       	ldd	r25, Z+5	; 0x05
    d45c:	0e 94 75 bc 	call	0x178ea	; 0x178ea <__fixunssfsi>
    d460:	03 c0       	rjmp	.+6      	; 0xd468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    d462:	f7 01       	movw	r30, r14
    d464:	62 81       	ldd	r22, Z+2	; 0x02
    d466:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d468:	60 3d       	cpi	r22, 0xD0	; 208
    d46a:	f7 e0       	ldi	r31, 0x07	; 7
    d46c:	7f 07       	cpc	r23, r31
    d46e:	08 f4       	brcc	.+2      	; 0xd472 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    d470:	3e ce       	rjmp	.-900    	; 0xd0ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d472:	60 5d       	subi	r22, 0xD0	; 208
    d474:	77 40       	sbci	r23, 0x07	; 7
    d476:	3b ce       	rjmp	.-906    	; 0xd0ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    d478:	12 96       	adiw	r26, 0x02	; 2
    d47a:	6d 91       	ld	r22, X+
    d47c:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d47e:	71 95       	neg	r23
    d480:	61 95       	neg	r22
    d482:	71 09       	sbc	r23, r1
    d484:	f1 cf       	rjmp	.-30     	; 0xd468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    d486:	12 96       	adiw	r26, 0x02	; 2
    d488:	ed 91       	ld	r30, X+
    d48a:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    d48c:	30 97       	sbiw	r30, 0x00	; 0
    d48e:	09 f4       	brne	.+2      	; 0xd492 <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    d490:	2d ce       	rjmp	.-934    	; 0xd0ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    d492:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    d494:	61 e0       	ldi	r22, 0x01	; 1
    d496:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    d498:	84 37       	cpi	r24, 0x74	; 116
    d49a:	09 f4       	brne	.+2      	; 0xd49e <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    d49c:	28 ce       	rjmp	.-944    	; 0xd0ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    d49e:	8b 32       	cpi	r24, 0x2B	; 43
    d4a0:	c9 f0       	breq	.+50     	; 0xd4d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    d4a2:	8d 32       	cpi	r24, 0x2D	; 45
    d4a4:	c1 f4       	brne	.+48     	; 0xd4d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    d4a6:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    d4aa:	70 e0       	ldi	r23, 0x00	; 0
    d4ac:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    d4ae:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    d4b0:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d4b2:	20 ed       	ldi	r18, 0xD0	; 208
    d4b4:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    d4b6:	2a 30       	cpi	r18, 0x0A	; 10
    d4b8:	80 f4       	brcc	.+32     	; 0xd4da <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    d4ba:	46 9f       	mul	r20, r22
    d4bc:	90 01       	movw	r18, r0
    d4be:	47 9f       	mul	r20, r23
    d4c0:	30 0d       	add	r19, r0
    d4c2:	11 24       	eor	r1, r1
    d4c4:	b9 01       	movw	r22, r18
    d4c6:	60 53       	subi	r22, 0x30	; 48
    d4c8:	71 09       	sbc	r23, r1
    d4ca:	69 0f       	add	r22, r25
    d4cc:	71 1d       	adc	r23, r1
    d4ce:	97 fd       	sbrc	r25, 7
    d4d0:	7a 95       	dec	r23
    d4d2:	ee cf       	rjmp	.-36     	; 0xd4b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d4d4:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d4d6:	80 e0       	ldi	r24, 0x00	; 0
    d4d8:	e8 cf       	rjmp	.-48     	; 0xd4aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d4da:	81 11       	cpse	r24, r1
    d4dc:	d0 cf       	rjmp	.-96     	; 0xd47e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    d4de:	c4 cf       	rjmp	.-120    	; 0xd468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3378
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d4e0:	82 60       	ori	r24, 0x02	; 2
    d4e2:	10 cf       	rjmp	.-480    	; 0xd304 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d4e4:	68 ee       	ldi	r22, 0xE8	; 232
    d4e6:	73 e0       	ldi	r23, 0x03	; 3
    d4e8:	c5 01       	movw	r24, r10
    d4ea:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    d4ee:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3417
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d4f0:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    d4f2:	b8 e4       	ldi	r27, 0x48	; 72
    d4f4:	eb 2e       	mov	r14, r27
    d4f6:	f1 2c       	mov	r15, r1
    d4f8:	ec 0e       	add	r14, r28
    d4fa:	fd 1e       	adc	r15, r29
    d4fc:	fc e0       	ldi	r31, 0x0C	; 12
    d4fe:	ef 0e       	add	r14, r31
    d500:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3419
    pch = strtok (str1, "/");
    while (pch != NULL)
    d502:	01 15       	cp	r16, r1
    d504:	11 05       	cpc	r17, r1
    d506:	09 f4       	brne	.+2      	; 0xd50a <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    d508:	6d c0       	rjmp	.+218    	; 0xd5e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3421
    {
      if (cnt == 0) id = atoi(pch);
    d50a:	61 10       	cpse	r6, r1
    d50c:	0d c0       	rjmp	.+26     	; 0xd528 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    d50e:	c8 01       	movw	r24, r16
    d510:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d514:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3422
      if (id < HW_ONEWIRE_MAXROMS)
    d516:	25 e0       	ldi	r18, 0x05	; 5
    d518:	28 17       	cp	r18, r24
    d51a:	08 f0       	brcs	.+2      	; 0xd51e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    d51c:	5a c0       	rjmp	.+180    	; 0xd5d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    d51e:	8b e8       	ldi	r24, 0x8B	; 139
    d520:	94 e0       	ldi	r25, 0x04	; 4
    d522:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d526:	55 c0       	rjmp	.+170    	; 0xd5d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3422
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    d528:	85 e0       	ldi	r24, 0x05	; 5
    d52a:	87 15       	cp	r24, r7
    d52c:	c0 f3       	brcs	.-16     	; 0xd51e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3424
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    d52e:	a1 e0       	ldi	r26, 0x01	; 1
    d530:	6a 12       	cpse	r6, r26
    d532:	4f c0       	rjmp	.+158    	; 0xd5d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    d534:	61 ec       	ldi	r22, 0xC1	; 193
    d536:	73 e0       	ldi	r23, 0x03	; 3
    d538:	c8 01       	movw	r24, r16
    d53a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d53e:	89 2b       	or	r24, r25
    d540:	89 f4       	brne	.+34     	; 0xd564 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d542:	be 01       	movw	r22, r28
    d544:	68 5b       	subi	r22, 0xB8	; 184
    d546:	7f 4f       	sbci	r23, 0xFF	; 255
    d548:	87 2d       	mov	r24, r7
    d54a:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    d54e:	62 e4       	ldi	r22, 0x42	; 66
    d550:	7b e0       	ldi	r23, 0x0B	; 11
    d552:	c7 01       	movw	r24, r14
    d554:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    d558:	be 01       	movw	r22, r28
    d55a:	68 5b       	subi	r22, 0xB8	; 184
    d55c:	7f 4f       	sbci	r23, 0xFF	; 255
    d55e:	87 2d       	mov	r24, r7
    d560:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    d564:	66 ec       	ldi	r22, 0xC6	; 198
    d566:	77 e0       	ldi	r23, 0x07	; 7
    d568:	c8 01       	movw	r24, r16
    d56a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d56e:	89 2b       	or	r24, r25
    d570:	a9 f4       	brne	.+42     	; 0xd59c <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    d572:	82 e4       	ldi	r24, 0x42	; 66
    d574:	9b e0       	ldi	r25, 0x0B	; 11
    d576:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d57a:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d57c:	be 01       	movw	r22, r28
    d57e:	68 5b       	subi	r22, 0xB8	; 184
    d580:	7f 4f       	sbci	r23, 0xFF	; 255
    d582:	87 2d       	mov	r24, r7
    d584:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    d588:	64 96       	adiw	r28, 0x14	; 20
    d58a:	df ae       	std	Y+63, r13	; 0x3f
    d58c:	ce ae       	std	Y+62, r12	; 0x3e
    d58e:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    d590:	be 01       	movw	r22, r28
    d592:	68 5b       	subi	r22, 0xB8	; 184
    d594:	7f 4f       	sbci	r23, 0xFF	; 255
    d596:	87 2d       	mov	r24, r7
    d598:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    d59c:	6f e4       	ldi	r22, 0x4F	; 79
    d59e:	76 e0       	ldi	r23, 0x06	; 6
    d5a0:	c8 01       	movw	r24, r16
    d5a2:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d5a6:	89 2b       	or	r24, r25
    d5a8:	a1 f4       	brne	.+40     	; 0xd5d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    d5aa:	82 e4       	ldi	r24, 0x42	; 66
    d5ac:	9b e0       	ldi	r25, 0x0B	; 11
    d5ae:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d5b2:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d5b4:	be 01       	movw	r22, r28
    d5b6:	68 5b       	subi	r22, 0xB8	; 184
    d5b8:	7f 4f       	sbci	r23, 0xFF	; 255
    d5ba:	87 2d       	mov	r24, r7
    d5bc:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
    d5c0:	6d 96       	adiw	r28, 0x1d	; 29
    d5c2:	1f af       	std	Y+63, r17	; 0x3f
    d5c4:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    d5c6:	be 01       	movw	r22, r28
    d5c8:	68 5b       	subi	r22, 0xB8	; 184
    d5ca:	7f 4f       	sbci	r23, 0xFF	; 255
    d5cc:	87 2d       	mov	r24, r7
    d5ce:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3432
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    d5d2:	68 ee       	ldi	r22, 0xE8	; 232
    d5d4:	73 e0       	ldi	r23, 0x03	; 3
    d5d6:	90 e0       	ldi	r25, 0x00	; 0
    d5d8:	80 e0       	ldi	r24, 0x00	; 0
    d5da:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    d5de:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3433
      cnt++;
    d5e0:	63 94       	inc	r6
    d5e2:	8f cf       	rjmp	.-226    	; 0xd502 <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3438
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    d5e4:	64 e7       	ldi	r22, 0x74	; 116
    d5e6:	7a e3       	ldi	r23, 0x3A	; 58
    d5e8:	c5 01       	movw	r24, r10
    d5ea:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3439
  strcat(str1, device.nazev);
    d5ee:	6c e9       	ldi	r22, 0x9C	; 156
    d5f0:	7c e0       	ldi	r23, 0x0C	; 12
    d5f2:	c5 01       	movw	r24, r10
    d5f4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3440
  strcat(str1, "/tds/clear");
    d5f8:	64 e5       	ldi	r22, 0x54	; 84
    d5fa:	74 e0       	ldi	r23, 0x04	; 4
    d5fc:	c5 01       	movw	r24, r10
    d5fe:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3441
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d602:	f5 01       	movw	r30, r10
    d604:	01 90       	ld	r0, Z+
    d606:	00 20       	and	r0, r0
    d608:	e9 f7       	brne	.-6      	; 0xd604 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    d60a:	31 97       	sbiw	r30, 0x01	; 1
    d60c:	af 01       	movw	r20, r30
    d60e:	4a 19       	sub	r20, r10
    d610:	5b 09       	sbc	r21, r11
    d612:	b4 01       	movw	r22, r8
    d614:	c5 01       	movw	r24, r10
    d616:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d61a:	89 2b       	or	r24, r25
    d61c:	a1 f4       	brne	.+40     	; 0xd646 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
  {
    mqtt_process_message++;
    d61e:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d622:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d626:	01 96       	adiw	r24, 0x01	; 1
    d628:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d62c:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
    id = atoi(my_payload);
    d630:	82 e4       	ldi	r24, 0x42	; 66
    d632:	9b e0       	ldi	r25, 0x0B	; 11
    d634:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d638:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
    if (id < HW_ONEWIRE_MAXROMS)
    d63a:	b5 e0       	ldi	r27, 0x05	; 5
    d63c:	b8 17       	cp	r27, r24
    d63e:	08 f4       	brcc	.+2      	; 0xd642 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    d640:	83 c0       	rjmp	.+262    	; 0xd748 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
      tds_set_clear(id);
    d642:	0e 94 b5 5d 	call	0xbb6a	; 0xbb6a <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    d646:	64 e7       	ldi	r22, 0x74	; 116
    d648:	7a e3       	ldi	r23, 0x3A	; 58
    d64a:	c5 01       	movw	r24, r10
    d64c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
  strcat(str1, device.nazev);
    d650:	6c e9       	ldi	r22, 0x9C	; 156
    d652:	7c e0       	ldi	r23, 0x0C	; 12
    d654:	c5 01       	movw	r24, r10
    d656:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3457
  strcat(str1, "/rtds/register");
    d65a:	60 e7       	ldi	r22, 0x70	; 112
    d65c:	74 e0       	ldi	r23, 0x04	; 4
    d65e:	c5 01       	movw	r24, r10
    d660:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d664:	f5 01       	movw	r30, r10
    d666:	01 90       	ld	r0, Z+
    d668:	00 20       	and	r0, r0
    d66a:	e9 f7       	brne	.-6      	; 0xd666 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    d66c:	31 97       	sbiw	r30, 0x01	; 1
    d66e:	af 01       	movw	r20, r30
    d670:	4a 19       	sub	r20, r10
    d672:	5b 09       	sbc	r21, r11
    d674:	b4 01       	movw	r22, r8
    d676:	c5 01       	movw	r24, r10
    d678:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d67c:	89 2b       	or	r24, r25
    d67e:	d1 f4       	brne	.+52     	; 0xd6b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3460
  {
    mqtt_process_message++;
    d680:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d684:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d688:	01 96       	adiw	r24, 0x01	; 1
    d68a:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d68e:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
    if (remote_tds_name_exist(my_payload) == 255)
    d692:	82 e4       	ldi	r24, 0x42	; 66
    d694:	9b e0       	ldi	r25, 0x0B	; 11
    d696:	0e 94 73 66 	call	0xcce6	; 0xcce6 <remote_tds_name_exist(char*)>
    d69a:	8f 3f       	cpi	r24, 0xFF	; 255
    d69c:	59 f4       	brne	.+22     	; 0xd6b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
    {
      id = remote_tds_find_free();
    d69e:	0e 94 6d 62 	call	0xc4da	; 0xc4da <remote_tds_find_free()>
    d6a2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
      remote_tds_set_complete(id, 1, my_payload);
    d6a4:	42 e4       	ldi	r20, 0x42	; 66
    d6a6:	5b e0       	ldi	r21, 0x0B	; 11
    d6a8:	61 e0       	ldi	r22, 0x01	; 1
    d6aa:	0e 94 8b 59 	call	0xb316	; 0xb316 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
      remote_tds_subscibe_topic(id);
    d6ae:	87 2d       	mov	r24, r7
    d6b0:	0e 94 d5 66 	call	0xcdaa	; 0xcdaa <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    d6b4:	64 e7       	ldi	r22, 0x74	; 116
    d6b6:	7a e3       	ldi	r23, 0x3A	; 58
    d6b8:	c5 01       	movw	r24, r10
    d6ba:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
  strcat(str1, device.nazev);
    d6be:	6c e9       	ldi	r22, 0x9C	; 156
    d6c0:	7c e0       	ldi	r23, 0x0C	; 12
    d6c2:	c5 01       	movw	r24, r10
    d6c4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
  strcat(str1, "/rtds/set/");
    d6c8:	6f e7       	ldi	r22, 0x7F	; 127
    d6ca:	74 e0       	ldi	r23, 0x04	; 4
    d6cc:	c5 01       	movw	r24, r10
    d6ce:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d6d2:	f5 01       	movw	r30, r10
    d6d4:	01 90       	ld	r0, Z+
    d6d6:	00 20       	and	r0, r0
    d6d8:	e9 f7       	brne	.-6      	; 0xd6d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    d6da:	31 97       	sbiw	r30, 0x01	; 1
    d6dc:	af 01       	movw	r20, r30
    d6de:	4a 19       	sub	r20, r10
    d6e0:	5b 09       	sbc	r21, r11
    d6e2:	b4 01       	movw	r22, r8
    d6e4:	c5 01       	movw	r24, r10
    d6e6:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d6ea:	89 2b       	or	r24, r25
    d6ec:	09 f0       	breq	.+2      	; 0xd6f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    d6ee:	6a c0       	rjmp	.+212    	; 0xd7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
  {
    mqtt_process_message++;
    d6f0:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d6f4:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d6f8:	01 96       	adiw	r24, 0x01	; 1
    d6fa:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d6fe:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d702:	f5 01       	movw	r30, r10
    d704:	01 90       	ld	r0, Z+
    d706:	00 20       	and	r0, r0
    d708:	e9 f7       	brne	.-6      	; 0xd704 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    d70a:	31 97       	sbiw	r30, 0x01	; 1
    d70c:	ea 19       	sub	r30, r10
    d70e:	fb 09       	sbc	r31, r11
    d710:	9e 2f       	mov	r25, r30
    d712:	4e 2f       	mov	r20, r30
    d714:	84 2f       	mov	r24, r20
    d716:	89 1b       	sub	r24, r25
    d718:	24 2f       	mov	r18, r20
    d71a:	30 e0       	ldi	r19, 0x00	; 0
    d71c:	d4 01       	movw	r26, r8
    d71e:	0d 90       	ld	r0, X+
    d720:	00 20       	and	r0, r0
    d722:	e9 f7       	brne	.-6      	; 0xd71e <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    d724:	11 97       	sbiw	r26, 0x01	; 1
    d726:	a8 19       	sub	r26, r8
    d728:	b9 09       	sbc	r27, r9
    d72a:	2a 17       	cp	r18, r26
    d72c:	3b 07       	cpc	r19, r27
    d72e:	88 f4       	brcc	.+34     	; 0xd752 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
    {
      str1[cnt] = topic[f];
    d730:	d5 01       	movw	r26, r10
    d732:	a8 0f       	add	r26, r24
    d734:	b1 1d       	adc	r27, r1
    d736:	28 0d       	add	r18, r8
    d738:	39 1d       	adc	r19, r9
    d73a:	f9 01       	movw	r30, r18
    d73c:	80 81       	ld	r24, Z
    d73e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
      str1[cnt + 1] = 0;
    d740:	11 96       	adiw	r26, 0x01	; 1
    d742:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d744:	4f 5f       	subi	r20, 0xFF	; 255
    d746:	e6 cf       	rjmp	.-52     	; 0xd714 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    d748:	8f e5       	ldi	r24, 0x5F	; 95
    d74a:	94 e0       	ldi	r25, 0x04	; 4
    d74c:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d750:	7a cf       	rjmp	.-268    	; 0xd646 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3485
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d752:	68 ee       	ldi	r22, 0xE8	; 232
    d754:	73 e0       	ldi	r23, 0x03	; 3
    d756:	c5 01       	movw	r24, r10
    d758:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d75c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3486
    pch = strtok (str1, "/");
    while (pch != NULL)
    d75e:	00 97       	sbiw	r24, 0x00	; 0
    d760:	89 f1       	breq	.+98     	; 0xd7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
    {
      if (cnt == 0) id = atoi(pch);
    d762:	11 11       	cpse	r17, r1
    d764:	0b c0       	rjmp	.+22     	; 0xd77c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    d766:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d76a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    d76c:	68 ee       	ldi	r22, 0xE8	; 232
    d76e:	73 e0       	ldi	r23, 0x03	; 3
    d770:	90 e0       	ldi	r25, 0x00	; 0
    d772:	80 e0       	ldi	r24, 0x00	; 0
    d774:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3503
      cnt++;
    d778:	1f 5f       	subi	r17, 0xFF	; 255
    d77a:	f1 cf       	rjmp	.-30     	; 0xd75e <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    d77c:	11 30       	cpi	r17, 0x01	; 1
    d77e:	b1 f7       	brne	.-20     	; 0xd76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    d780:	61 ec       	ldi	r22, 0xC1	; 193
    d782:	73 e0       	ldi	r23, 0x03	; 3
    d784:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d788:	89 2b       	or	r24, r25
    d78a:	81 f7       	brne	.-32     	; 0xd76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
      {
        remote_tds_get_active(id, &active);
    d78c:	be 01       	movw	r22, r28
    d78e:	64 5d       	subi	r22, 0xD4	; 212
    d790:	7e 4f       	sbci	r23, 0xFE	; 254
    d792:	87 2d       	mov	r24, r7
    d794:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3492
        if (active == 0)
    d798:	c4 5d       	subi	r28, 0xD4	; 212
    d79a:	de 4f       	sbci	r29, 0xFE	; 254
    d79c:	88 81       	ld	r24, Y
    d79e:	cc 52       	subi	r28, 0x2C	; 44
    d7a0:	d1 40       	sbci	r29, 0x01	; 1
    d7a2:	81 11       	cpse	r24, r1
    d7a4:	0a c0       	rjmp	.+20     	; 0xd7ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3494
        {
          remote_tds_set_complete(id, 1, my_payload);
    d7a6:	42 e4       	ldi	r20, 0x42	; 66
    d7a8:	5b e0       	ldi	r21, 0x0B	; 11
    d7aa:	61 e0       	ldi	r22, 0x01	; 1
    d7ac:	87 2d       	mov	r24, r7
    d7ae:	0e 94 8b 59 	call	0xb316	; 0xb316 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
          remote_tds_subscibe_topic(id);
    d7b2:	87 2d       	mov	r24, r7
    d7b4:	0e 94 d5 66 	call	0xcdaa	; 0xcdaa <remote_tds_subscibe_topic(unsigned char)>
    d7b8:	d9 cf       	rjmp	.-78     	; 0xd76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    d7ba:	8a e8       	ldi	r24, 0x8A	; 138
    d7bc:	94 e0       	ldi	r25, 0x04	; 4
    d7be:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d7c2:	d4 cf       	rjmp	.-88     	; 0xd76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    d7c4:	64 e7       	ldi	r22, 0x74	; 116
    d7c6:	7a e3       	ldi	r23, 0x3A	; 58
    d7c8:	c5 01       	movw	r24, r10
    d7ca:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
  strcat(str1, device.nazev);
    d7ce:	6c e9       	ldi	r22, 0x9C	; 156
    d7d0:	7c e0       	ldi	r23, 0x0C	; 12
    d7d2:	c5 01       	movw	r24, r10
    d7d4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
  strcat(str1, "/rtds/clear");
    d7d8:	6a e9       	ldi	r22, 0x9A	; 154
    d7da:	74 e0       	ldi	r23, 0x04	; 4
    d7dc:	c5 01       	movw	r24, r10
    d7de:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d7e2:	f5 01       	movw	r30, r10
    d7e4:	01 90       	ld	r0, Z+
    d7e6:	00 20       	and	r0, r0
    d7e8:	e9 f7       	brne	.-6      	; 0xd7e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    d7ea:	31 97       	sbiw	r30, 0x01	; 1
    d7ec:	af 01       	movw	r20, r30
    d7ee:	4a 19       	sub	r20, r10
    d7f0:	5b 09       	sbc	r21, r11
    d7f2:	b4 01       	movw	r22, r8
    d7f4:	c5 01       	movw	r24, r10
    d7f6:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d7fa:	89 2b       	or	r24, r25
    d7fc:	09 f0       	breq	.+2      	; 0xd800 <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    d7fe:	6f c0       	rjmp	.+222    	; 0xd8de <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
  {
    mqtt_process_message++;
    d800:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d804:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d808:	01 96       	adiw	r24, 0x01	; 1
    d80a:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d80e:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3515
    id = atoi(my_payload);
    d812:	82 e4       	ldi	r24, 0x42	; 66
    d814:	9b e0       	ldi	r25, 0x0B	; 11
    d816:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d81a:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3155
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    d81c:	c8 5f       	subi	r28, 0xF8	; 248
    d81e:	de 4f       	sbci	r29, 0xFE	; 254
    d820:	18 82       	st	Y, r1
    d822:	c8 50       	subi	r28, 0x08	; 8
    d824:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
  remote_tds_get_complete(idx, &active, tmp1);
    d826:	ae 01       	movw	r20, r28
    d828:	48 57       	subi	r20, 0x78	; 120
    d82a:	5f 4f       	sbci	r21, 0xFF	; 255
    d82c:	be 01       	movw	r22, r28
    d82e:	68 5f       	subi	r22, 0xF8	; 248
    d830:	7e 4f       	sbci	r23, 0xFE	; 254
    d832:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3157
  if (active == 1)
    d836:	c8 5f       	subi	r28, 0xF8	; 248
    d838:	de 4f       	sbci	r29, 0xFE	; 254
    d83a:	88 81       	ld	r24, Y
    d83c:	c8 50       	subi	r28, 0x08	; 8
    d83e:	d1 40       	sbci	r29, 0x01	; 1
    d840:	81 30       	cpi	r24, 0x01	; 1
    d842:	09 f0       	breq	.+2      	; 0xd846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    d844:	49 c0       	rjmp	.+146    	; 0xd8d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3159
  {
    strcpy(tmp2, "/rtds/");
    d846:	8e 01       	movw	r16, r28
    d848:	08 5b       	subi	r16, 0xB8	; 184
    d84a:	1f 4f       	sbci	r17, 0xFF	; 255
    d84c:	63 ee       	ldi	r22, 0xE3	; 227
    d84e:	73 e0       	ldi	r23, 0x03	; 3
    d850:	c8 01       	movw	r24, r16
    d852:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
    strcat(tmp2, tmp1);
    d856:	be 01       	movw	r22, r28
    d858:	68 57       	subi	r22, 0x78	; 120
    d85a:	7f 4f       	sbci	r23, 0xFF	; 255
    d85c:	c8 01       	movw	r24, r16
    d85e:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    d862:	d8 01       	movw	r26, r16
    d864:	0d 90       	ld	r0, X+
    d866:	00 20       	and	r0, r0
    d868:	e9 f7       	brne	.-6      	; 0xd864 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    d86a:	cd 01       	movw	r24, r26
    d86c:	80 1b       	sub	r24, r16
    d86e:	91 0b       	sbc	r25, r17
    d870:	08 96       	adiw	r24, 0x08	; 8
    d872:	81 30       	cpi	r24, 0x01	; 1
    d874:	92 40       	sbci	r25, 0x02	; 2
    d876:	80 f5       	brcc	.+96     	; 0xd8d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    d878:	89 e7       	ldi	r24, 0x79	; 121
    d87a:	9e e0       	ldi	r25, 0x0E	; 14
    d87c:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
    d880:	88 23       	and	r24, r24
    d882:	51 f1       	breq	.+84     	; 0xd8d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    d884:	80 91 7b 10 	lds	r24, 0x107B	; 0x80107b <mqtt_client+0x202>
    d888:	90 91 7c 10 	lds	r25, 0x107C	; 0x80107c <mqtt_client+0x203>
    d88c:	01 96       	adiw	r24, 0x01	; 1
    d88e:	90 93 7c 10 	sts	0x107C, r25	; 0x80107c <mqtt_client+0x203>
    d892:	80 93 7b 10 	sts	0x107B, r24	; 0x80107b <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    d896:	89 2b       	or	r24, r25
    d898:	31 f4       	brne	.+12     	; 0xd8a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    d89a:	81 e0       	ldi	r24, 0x01	; 1
    d89c:	90 e0       	ldi	r25, 0x00	; 0
    d89e:	90 93 7c 10 	sts	0x107C, r25	; 0x80107c <mqtt_client+0x203>
    d8a2:	80 93 7b 10 	sts	0x107B, r24	; 0x80107b <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    d8a6:	80 91 7b 10 	lds	r24, 0x107B	; 0x80107b <mqtt_client+0x202>
    d8aa:	90 91 7c 10 	lds	r25, 0x107C	; 0x80107c <mqtt_client+0x203>
    d8ae:	90 93 80 0e 	sts	0x0E80, r25	; 0x800e80 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    d8b2:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    d8b6:	47 e0       	ldi	r20, 0x07	; 7
    d8b8:	50 e0       	ldi	r21, 0x00	; 0
    d8ba:	6b e7       	ldi	r22, 0x7B	; 123
    d8bc:	7e e0       	ldi	r23, 0x0E	; 14
    d8be:	c8 01       	movw	r24, r16
    d8c0:	0e 94 d1 8b 	call	0x117a2	; 0x117a2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    d8c4:	9c 01       	movw	r18, r24
    d8c6:	25 50       	subi	r18, 0x05	; 5
    d8c8:	31 09       	sbc	r19, r1
    d8ca:	4b e7       	ldi	r20, 0x7B	; 123
    d8cc:	5e e0       	ldi	r21, 0x0E	; 14
    d8ce:	62 ea       	ldi	r22, 0xA2	; 162
    d8d0:	89 e7       	ldi	r24, 0x79	; 121
    d8d2:	9e e0       	ldi	r25, 0x0E	; 14
    d8d4:	0e 94 d9 9b 	call	0x137b2	; 0x137b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3518
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    d8d8:	87 2d       	mov	r24, r7
    d8da:	0e 94 a2 59 	call	0xb344	; 0xb344 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    d8de:	64 e7       	ldi	r22, 0x74	; 116
    d8e0:	7a e3       	ldi	r23, 0x3A	; 58
    d8e2:	c5 01       	movw	r24, r10
    d8e4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
  strcat(str1, device.nazev);
    d8e8:	6c e9       	ldi	r22, 0x9C	; 156
    d8ea:	7c e0       	ldi	r23, 0x0C	; 12
    d8ec:	c5 01       	movw	r24, r10
    d8ee:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
  strcat(str1, "/rtds/get");
    d8f2:	66 ea       	ldi	r22, 0xA6	; 166
    d8f4:	74 e0       	ldi	r23, 0x04	; 4
    d8f6:	c5 01       	movw	r24, r10
    d8f8:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d8fc:	f5 01       	movw	r30, r10
    d8fe:	01 90       	ld	r0, Z+
    d900:	00 20       	and	r0, r0
    d902:	e9 f7       	brne	.-6      	; 0xd8fe <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    d904:	31 97       	sbiw	r30, 0x01	; 1
    d906:	af 01       	movw	r20, r30
    d908:	4a 19       	sub	r20, r10
    d90a:	5b 09       	sbc	r21, r11
    d90c:	b4 01       	movw	r22, r8
    d90e:	c5 01       	movw	r24, r10
    d910:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d914:	89 2b       	or	r24, r25
    d916:	11 f4       	brne	.+4      	; 0xd91c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
  {
    send_mqtt_remote_tds_status();
    d918:	0e 94 f1 65 	call	0xcbe2	; 0xcbe2 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    d91c:	63 ee       	ldi	r22, 0xE3	; 227
    d91e:	73 e0       	ldi	r23, 0x03	; 3
    d920:	c5 01       	movw	r24, r10
    d922:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3532
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d926:	f5 01       	movw	r30, r10
    d928:	01 90       	ld	r0, Z+
    d92a:	00 20       	and	r0, r0
    d92c:	e9 f7       	brne	.-6      	; 0xd928 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    d92e:	31 97       	sbiw	r30, 0x01	; 1
    d930:	af 01       	movw	r20, r30
    d932:	4a 19       	sub	r20, r10
    d934:	5b 09       	sbc	r21, r11
    d936:	b4 01       	movw	r22, r8
    d938:	c5 01       	movw	r24, r10
    d93a:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    d93e:	89 2b       	or	r24, r25
    d940:	09 f0       	breq	.+2      	; 0xd944 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    d942:	74 c0       	rjmp	.+232    	; 0xda2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
  {
    mqtt_process_message++;
    d944:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    d948:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    d94c:	01 96       	adiw	r24, 0x01	; 1
    d94e:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    d952:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d956:	f5 01       	movw	r30, r10
    d958:	01 90       	ld	r0, Z+
    d95a:	00 20       	and	r0, r0
    d95c:	e9 f7       	brne	.-6      	; 0xd958 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    d95e:	31 97       	sbiw	r30, 0x01	; 1
    d960:	ea 19       	sub	r30, r10
    d962:	fb 09       	sbc	r31, r11
    d964:	9e 2f       	mov	r25, r30
    d966:	4e 2f       	mov	r20, r30
    d968:	84 2f       	mov	r24, r20
    d96a:	89 1b       	sub	r24, r25
    d96c:	24 2f       	mov	r18, r20
    d96e:	30 e0       	ldi	r19, 0x00	; 0
    d970:	d4 01       	movw	r26, r8
    d972:	0d 90       	ld	r0, X+
    d974:	00 20       	and	r0, r0
    d976:	e9 f7       	brne	.-6      	; 0xd972 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    d978:	11 97       	sbiw	r26, 0x01	; 1
    d97a:	a8 19       	sub	r26, r8
    d97c:	b9 09       	sbc	r27, r9
    d97e:	2a 17       	cp	r18, r26
    d980:	3b 07       	cpc	r19, r27
    d982:	60 f4       	brcc	.+24     	; 0xd99c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3538
    {
      str1[cnt] = topic[f];
    d984:	d5 01       	movw	r26, r10
    d986:	a8 0f       	add	r26, r24
    d988:	b1 1d       	adc	r27, r1
    d98a:	28 0d       	add	r18, r8
    d98c:	39 1d       	adc	r19, r9
    d98e:	f9 01       	movw	r30, r18
    d990:	80 81       	ld	r24, Z
    d992:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3539
      str1[cnt + 1] = 0;
    d994:	11 96       	adiw	r26, 0x01	; 1
    d996:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d998:	4f 5f       	subi	r20, 0xFF	; 255
    d99a:	e6 cf       	rjmp	.-52     	; 0xd968 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    d99c:	a4 e6       	ldi	r26, 0x64	; 100
    d99e:	ca 2e       	mov	r12, r26
    d9a0:	d1 2c       	mov	r13, r1
    d9a2:	e1 2c       	mov	r14, r1
    d9a4:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    d9a6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
    {
      uint8_t active = 0;
    d9a8:	29 96       	adiw	r28, 0x09	; 9
    d9aa:	1f ae       	std	Y+63, r1	; 0x3f
    d9ac:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3545
      remote_tds_get_complete(idx, &active, tmp1);
    d9ae:	ae 01       	movw	r20, r28
    d9b0:	44 5e       	subi	r20, 0xE4	; 228
    d9b2:	5e 4f       	sbci	r21, 0xFE	; 254
    d9b4:	be 01       	movw	r22, r28
    d9b6:	68 5b       	subi	r22, 0xB8	; 184
    d9b8:	7f 4f       	sbci	r23, 0xFF	; 255
    d9ba:	81 2f       	mov	r24, r17
    d9bc:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3546
      if (active == 1 && strcmp(tmp1, str1) == 0)
    d9c0:	29 96       	adiw	r28, 0x09	; 9
    d9c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    d9c4:	29 97       	sbiw	r28, 0x09	; 9
    d9c6:	81 30       	cpi	r24, 0x01	; 1
    d9c8:	21 f5       	brne	.+72     	; 0xda12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    d9ca:	b5 01       	movw	r22, r10
    d9cc:	ce 01       	movw	r24, r28
    d9ce:	84 5e       	subi	r24, 0xE4	; 228
    d9d0:	9e 4f       	sbci	r25, 0xFE	; 254
    d9d2:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    d9d6:	89 2b       	or	r24, r25
    d9d8:	e1 f4       	brne	.+56     	; 0xda12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3548
      {
        remote_tds_set_data(idx, atoi(my_payload));
    d9da:	82 e4       	ldi	r24, 0x42	; 66
    d9dc:	9b e0       	ldi	r25, 0x0B	; 11
    d9de:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    d9e2:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    d9e4:	48 2f       	mov	r20, r24
    d9e6:	c7 01       	movw	r24, r14
    d9e8:	b6 01       	movw	r22, r12
    d9ea:	0e 94 b5 90 	call	0x1216a	; 0x1216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    d9ee:	40 2f       	mov	r20, r16
    d9f0:	c7 01       	movw	r24, r14
    d9f2:	b6 01       	movw	r22, r12
    d9f4:	6f 5f       	subi	r22, 0xFF	; 255
    d9f6:	7f 4f       	sbci	r23, 0xFF	; 255
    d9f8:	8f 4f       	sbci	r24, 0xFF	; 255
    d9fa:	9f 4f       	sbci	r25, 0xFF	; 255
    d9fc:	0e 94 b5 90 	call	0x1216a	; 0x1216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3207
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    da00:	40 e0       	ldi	r20, 0x00	; 0
    da02:	c7 01       	movw	r24, r14
    da04:	b6 01       	movw	r22, r12
    da06:	6e 5f       	subi	r22, 0xFE	; 254
    da08:	7f 4f       	sbci	r23, 0xFF	; 255
    da0a:	8f 4f       	sbci	r24, 0xFF	; 255
    da0c:	9f 4f       	sbci	r25, 0xFF	; 255
    da0e:	0e 94 b5 90 	call	0x1216a	; 0x1216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    da12:	1f 5f       	subi	r17, 0xFF	; 255
    da14:	f3 e0       	ldi	r31, 0x03	; 3
    da16:	cf 0e       	add	r12, r31
    da18:	d1 1c       	adc	r13, r1
    da1a:	e1 1c       	adc	r14, r1
    da1c:	f1 1c       	adc	r15, r1
    da1e:	22 e8       	ldi	r18, 0x82	; 130
    da20:	c2 16       	cp	r12, r18
    da22:	d1 04       	cpc	r13, r1
    da24:	e1 04       	cpc	r14, r1
    da26:	f1 04       	cpc	r15, r1
    da28:	09 f0       	breq	.+2      	; 0xda2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    da2a:	be cf       	rjmp	.-132    	; 0xd9a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    da2c:	60 eb       	ldi	r22, 0xB0	; 176
    da2e:	74 e0       	ldi	r23, 0x04	; 4
    da30:	c5 01       	movw	r24, r10
    da32:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    da36:	64 e7       	ldi	r22, 0x74	; 116
    da38:	7a e3       	ldi	r23, 0x3A	; 58
    da3a:	c5 01       	movw	r24, r10
    da3c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
  strcat(str1, device.nazev);
    da40:	6c e9       	ldi	r22, 0x9C	; 156
    da42:	7c e0       	ldi	r23, 0x0C	; 12
    da44:	c5 01       	movw	r24, r10
    da46:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
  strcat(str1, "/prog/set/");
    da4a:	6b eb       	ldi	r22, 0xBB	; 187
    da4c:	74 e0       	ldi	r23, 0x04	; 4
    da4e:	c5 01       	movw	r24, r10
    da50:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
  if (strncmp(str1, topic, strlen(str1)) == 0)
    da54:	f5 01       	movw	r30, r10
    da56:	01 90       	ld	r0, Z+
    da58:	00 20       	and	r0, r0
    da5a:	e9 f7       	brne	.-6      	; 0xda56 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    da5c:	31 97       	sbiw	r30, 0x01	; 1
    da5e:	af 01       	movw	r20, r30
    da60:	4a 19       	sub	r20, r10
    da62:	5b 09       	sbc	r21, r11
    da64:	b4 01       	movw	r22, r8
    da66:	c5 01       	movw	r24, r10
    da68:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    da6c:	89 2b       	or	r24, r25
    da6e:	09 f0       	breq	.+2      	; 0xda72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    da70:	75 c0       	rjmp	.+234    	; 0xdb5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
  {
    mqtt_process_message++;
    da72:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    da76:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    da7a:	01 96       	adiw	r24, 0x01	; 1
    da7c:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    da80:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    da84:	f5 01       	movw	r30, r10
    da86:	01 90       	ld	r0, Z+
    da88:	00 20       	and	r0, r0
    da8a:	e9 f7       	brne	.-6      	; 0xda86 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    da8c:	31 97       	sbiw	r30, 0x01	; 1
    da8e:	ea 19       	sub	r30, r10
    da90:	fb 09       	sbc	r31, r11
    da92:	9e 2f       	mov	r25, r30
    da94:	4e 2f       	mov	r20, r30
    da96:	84 2f       	mov	r24, r20
    da98:	89 1b       	sub	r24, r25
    da9a:	24 2f       	mov	r18, r20
    da9c:	30 e0       	ldi	r19, 0x00	; 0
    da9e:	d4 01       	movw	r26, r8
    daa0:	0d 90       	ld	r0, X+
    daa2:	00 20       	and	r0, r0
    daa4:	e9 f7       	brne	.-6      	; 0xdaa0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    daa6:	11 97       	sbiw	r26, 0x01	; 1
    daa8:	a8 19       	sub	r26, r8
    daaa:	b9 09       	sbc	r27, r9
    daac:	2a 17       	cp	r18, r26
    daae:	3b 07       	cpc	r19, r27
    dab0:	60 f4       	brcc	.+24     	; 0xdaca <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3576
    {
      str1[cnt] = topic[f];
    dab2:	d5 01       	movw	r26, r10
    dab4:	a8 0f       	add	r26, r24
    dab6:	b1 1d       	adc	r27, r1
    dab8:	28 0d       	add	r18, r8
    daba:	39 1d       	adc	r19, r9
    dabc:	f9 01       	movw	r30, r18
    dabe:	80 81       	ld	r24, Z
    dac0:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3577
      str1[cnt + 1] = 0;
    dac2:	11 96       	adiw	r26, 0x01	; 1
    dac4:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dac6:	4f 5f       	subi	r20, 0xFF	; 255
    dac8:	e6 cf       	rjmp	.-52     	; 0xda96 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3581
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    daca:	68 ee       	ldi	r22, 0xE8	; 232
    dacc:	73 e0       	ldi	r23, 0x03	; 3
    dace:	c5 01       	movw	r24, r10
    dad0:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    dad4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dad6:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    dad8:	fd e4       	ldi	r31, 0x4D	; 77
    dada:	ef 2e       	mov	r14, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3582
    pch = strtok (str1, "/");
    while (pch != NULL)
    dadc:	01 15       	cp	r16, r1
    dade:	11 05       	cpc	r17, r1
    dae0:	e9 f1       	breq	.+122    	; 0xdb5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
    {
      if (cnt == 0) id = atoi(pch);
    dae2:	f1 10       	cpse	r15, r1
    dae4:	0c c0       	rjmp	.+24     	; 0xdafe <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    dae6:	c8 01       	movw	r24, r16
    dae8:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    daec:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
      if (id < AVAILABLE_PROGRAM)
    daee:	f7 e0       	ldi	r31, 0x07	; 7
    daf0:	f8 17       	cp	r31, r24
    daf2:	58 f5       	brcc	.+86     	; 0xdb4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    daf4:	86 ec       	ldi	r24, 0xC6	; 198
    daf6:	94 e0       	ldi	r25, 0x04	; 4
    daf8:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    dafc:	26 c0       	rjmp	.+76     	; 0xdb4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    dafe:	27 e0       	ldi	r18, 0x07	; 7
    db00:	27 15       	cp	r18, r7
    db02:	c0 f3       	brcs	.-16     	; 0xdaf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    db04:	81 e0       	ldi	r24, 0x01	; 1
    db06:	f8 12       	cpse	r15, r24
    db08:	20 c0       	rjmp	.+64     	; 0xdb4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    db0a:	61 ec       	ldi	r22, 0xC1	; 193
    db0c:	73 e0       	ldi	r23, 0x03	; 3
    db0e:	c8 01       	movw	r24, r16
    db10:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    db14:	89 2b       	or	r24, r25
    db16:	29 f4       	brne	.+10     	; 0xdb22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    db18:	62 e4       	ldi	r22, 0x42	; 66
    db1a:	7b e0       	ldi	r23, 0x0B	; 11
    db1c:	87 2d       	mov	r24, r7
    db1e:	0e 94 3f 56 	call	0xac7e	; 0xac7e <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    db22:	6b ec       	ldi	r22, 0xCB	; 203
    db24:	73 e0       	ldi	r23, 0x03	; 3
    db26:	c8 01       	movw	r24, r16
    db28:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    db2c:	89 2b       	or	r24, r25
    db2e:	69 f4       	brne	.+26     	; 0xdb4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    db30:	82 e4       	ldi	r24, 0x42	; 66
    db32:	9b e0       	ldi	r25, 0x0B	; 11
    db34:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    db38:	7e 9c       	mul	r7, r14
    db3a:	90 01       	movw	r18, r0
    db3c:	11 24       	eor	r1, r1
    db3e:	68 2f       	mov	r22, r24
    db40:	c9 01       	movw	r24, r18
    db42:	8f 50       	subi	r24, 0x0F	; 15
    db44:	9e 4f       	sbci	r25, 0xFE	; 254
    db46:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    db4a:	68 ee       	ldi	r22, 0xE8	; 232
    db4c:	73 e0       	ldi	r23, 0x03	; 3
    db4e:	90 e0       	ldi	r25, 0x00	; 0
    db50:	80 e0       	ldi	r24, 0x00	; 0
    db52:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    db56:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3595
      cnt++;
    db58:	f3 94       	inc	r15
    db5a:	c0 cf       	rjmp	.-128    	; 0xdadc <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3599
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    db5c:	64 e7       	ldi	r22, 0x74	; 116
    db5e:	7a e3       	ldi	r23, 0x3A	; 58
    db60:	c5 01       	movw	r24, r10
    db62:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3600
  strcat(str1, device.nazev);
    db66:	6c e9       	ldi	r22, 0x9C	; 156
    db68:	7c e0       	ldi	r23, 0x0C	; 12
    db6a:	c5 01       	movw	r24, r10
    db6c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
  strcat(str1, "/prog/clear");
    db70:	66 ed       	ldi	r22, 0xD6	; 214
    db72:	74 e0       	ldi	r23, 0x04	; 4
    db74:	c5 01       	movw	r24, r10
    db76:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
  if (strncmp(str1, topic, strlen(str1)) == 0)
    db7a:	f5 01       	movw	r30, r10
    db7c:	01 90       	ld	r0, Z+
    db7e:	00 20       	and	r0, r0
    db80:	e9 f7       	brne	.-6      	; 0xdb7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    db82:	31 97       	sbiw	r30, 0x01	; 1
    db84:	af 01       	movw	r20, r30
    db86:	4a 19       	sub	r20, r10
    db88:	5b 09       	sbc	r21, r11
    db8a:	b4 01       	movw	r22, r8
    db8c:	c5 01       	movw	r24, r10
    db8e:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    db92:	89 2b       	or	r24, r25
    db94:	09 f0       	breq	.+2      	; 0xdb98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    db96:	52 c0       	rjmp	.+164    	; 0xdc3c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604
  {
    mqtt_process_message++;
    db98:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    db9c:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    dba0:	01 96       	adiw	r24, 0x01	; 1
    dba2:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    dba6:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
    id = atoi(my_payload);
    dbaa:	82 e4       	ldi	r24, 0x42	; 66
    dbac:	9b e0       	ldi	r25, 0x0B	; 11
    dbae:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dbb2:	18 2f       	mov	r17, r24
    dbb4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
    if (id < AVAILABLE_PROGRAM)
    dbb6:	a7 e0       	ldi	r26, 0x07	; 7
    dbb8:	a8 17       	cp	r26, r24
    dbba:	08 f4       	brcc	.+2      	; 0xdbbe <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    dbbc:	89 c0       	rjmp	.+274    	; 0xdcd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608
    {
      strcpy(tmp2, "PROG");
    dbbe:	62 ee       	ldi	r22, 0xE2	; 226
    dbc0:	74 e0       	ldi	r23, 0x04	; 4
    dbc2:	ce 01       	movw	r24, r28
    dbc4:	88 57       	subi	r24, 0x78	; 120
    dbc6:	9f 4f       	sbci	r25, 0xFF	; 255
    dbc8:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
      thermostat_program_set_name(id, tmp2);
    dbcc:	be 01       	movw	r22, r28
    dbce:	68 57       	subi	r22, 0x78	; 120
    dbd0:	7f 4f       	sbci	r23, 0xFF	; 255
    dbd2:	81 2f       	mov	r24, r17
    dbd4:	0e 94 3f 56 	call	0xac7e	; 0xac7e <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    dbd8:	bd e4       	ldi	r27, 0x4D	; 77
    dbda:	1b 9f       	mul	r17, r27
    dbdc:	c0 01       	movw	r24, r0
    dbde:	11 24       	eor	r1, r1
    dbe0:	60 e0       	ldi	r22, 0x00	; 0
    dbe2:	8f 50       	subi	r24, 0x0F	; 15
    dbe4:	9e 4f       	sbci	r25, 0xFE	; 254
    dbe6:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    dbea:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    dbec:	c1 2c       	mov	r12, r1
    dbee:	e1 2c       	mov	r14, r1
    dbf0:	00 e0       	ldi	r16, 0x00	; 0
    dbf2:	20 e0       	ldi	r18, 0x00	; 0
    dbf4:	40 e0       	ldi	r20, 0x00	; 0
    dbf6:	61 2f       	mov	r22, r17
    dbf8:	87 2d       	mov	r24, r7
    dbfa:	0e 94 03 56 	call	0xac06	; 0xac06 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
        thermostat_program_set_threshold(id, progid, 220);
    dbfe:	4c ed       	ldi	r20, 0xDC	; 220
    dc00:	50 e0       	ldi	r21, 0x00	; 0
    dc02:	61 2f       	mov	r22, r17
    dc04:	87 2d       	mov	r24, r7
    dc06:	0e 94 e7 55 	call	0xabce	; 0xabce <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
        thermostat_program_set_week(id, progid, 0);
    dc0a:	40 e0       	ldi	r20, 0x00	; 0
    dc0c:	61 2f       	mov	r22, r17
    dc0e:	87 2d       	mov	r24, r7
    dc10:	0e 94 d9 55 	call	0xabb2	; 0xabb2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    dc14:	1f 5f       	subi	r17, 0xFF	; 255
    dc16:	1b 30       	cpi	r17, 0x0B	; 11
    dc18:	49 f7       	brne	.-46     	; 0xdbec <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    dc1a:	0b e5       	ldi	r16, 0x5B	; 91
    dc1c:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    dc1e:	c8 01       	movw	r24, r16
    dc20:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3619
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    dc24:	78 12       	cpse	r7, r24
    dc26:	04 c0       	rjmp	.+8      	; 0xdc30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    dc28:	6f ef       	ldi	r22, 0xFF	; 255
    dc2a:	c8 01       	movw	r24, r16
    dc2c:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    dc30:	0f 5d       	subi	r16, 0xDF	; 223
    dc32:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3617
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    dc34:	01 15       	cp	r16, r1
    dc36:	e2 e0       	ldi	r30, 0x02	; 2
    dc38:	1e 07       	cpc	r17, r30
    dc3a:	89 f7       	brne	.-30     	; 0xdc1e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    dc3c:	64 e7       	ldi	r22, 0x74	; 116
    dc3e:	7a e3       	ldi	r23, 0x3A	; 58
    dc40:	c5 01       	movw	r24, r10
    dc42:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
  strcat(str1, device.nazev);
    dc46:	6c e9       	ldi	r22, 0x9C	; 156
    dc48:	7c e0       	ldi	r23, 0x0C	; 12
    dc4a:	c5 01       	movw	r24, r10
    dc4c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
  strcat(str1, "/prog_interval/set/");
    dc50:	69 ef       	ldi	r22, 0xF9	; 249
    dc52:	74 e0       	ldi	r23, 0x04	; 4
    dc54:	c5 01       	movw	r24, r10
    dc56:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dc5a:	f5 01       	movw	r30, r10
    dc5c:	01 90       	ld	r0, Z+
    dc5e:	00 20       	and	r0, r0
    dc60:	e9 f7       	brne	.-6      	; 0xdc5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    dc62:	31 97       	sbiw	r30, 0x01	; 1
    dc64:	af 01       	movw	r20, r30
    dc66:	4a 19       	sub	r20, r10
    dc68:	5b 09       	sbc	r21, r11
    dc6a:	b4 01       	movw	r22, r8
    dc6c:	c5 01       	movw	r24, r10
    dc6e:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    dc72:	89 2b       	or	r24, r25
    dc74:	09 f0       	breq	.+2      	; 0xdc78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    dc76:	02 c1       	rjmp	.+516    	; 0xde7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
  {
    mqtt_process_message++;
    dc78:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    dc7c:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    dc80:	01 96       	adiw	r24, 0x01	; 1
    dc82:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    dc86:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dc8a:	f5 01       	movw	r30, r10
    dc8c:	01 90       	ld	r0, Z+
    dc8e:	00 20       	and	r0, r0
    dc90:	e9 f7       	brne	.-6      	; 0xdc8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    dc92:	31 97       	sbiw	r30, 0x01	; 1
    dc94:	ea 19       	sub	r30, r10
    dc96:	fb 09       	sbc	r31, r11
    dc98:	9e 2f       	mov	r25, r30
    dc9a:	4e 2f       	mov	r20, r30
    dc9c:	84 2f       	mov	r24, r20
    dc9e:	89 1b       	sub	r24, r25
    dca0:	24 2f       	mov	r18, r20
    dca2:	30 e0       	ldi	r19, 0x00	; 0
    dca4:	d4 01       	movw	r26, r8
    dca6:	0d 90       	ld	r0, X+
    dca8:	00 20       	and	r0, r0
    dcaa:	e9 f7       	brne	.-6      	; 0xdca6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    dcac:	11 97       	sbiw	r26, 0x01	; 1
    dcae:	a8 19       	sub	r26, r8
    dcb0:	b9 09       	sbc	r27, r9
    dcb2:	2a 17       	cp	r18, r26
    dcb4:	3b 07       	cpc	r19, r27
    dcb6:	88 f4       	brcc	.+34     	; 0xdcda <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
    {
      str1[cnt] = topic[f];
    dcb8:	d5 01       	movw	r26, r10
    dcba:	a8 0f       	add	r26, r24
    dcbc:	b1 1d       	adc	r27, r1
    dcbe:	28 0d       	add	r18, r8
    dcc0:	39 1d       	adc	r19, r9
    dcc2:	f9 01       	movw	r30, r18
    dcc4:	80 81       	ld	r24, Z
    dcc6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
      str1[cnt + 1] = 0;
    dcc8:	11 96       	adiw	r26, 0x01	; 1
    dcca:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dccc:	4f 5f       	subi	r20, 0xFF	; 255
    dcce:	e6 cf       	rjmp	.-52     	; 0xdc9c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    dcd0:	87 ee       	ldi	r24, 0xE7	; 231
    dcd2:	94 e0       	ldi	r25, 0x04	; 4
    dcd4:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    dcd8:	b1 cf       	rjmp	.-158    	; 0xdc3c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    dcda:	68 ee       	ldi	r22, 0xE8	; 232
    dcdc:	73 e0       	ldi	r23, 0x03	; 3
    dcde:	c5 01       	movw	r24, r10
    dce0:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    dce4:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    dce6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dce8:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    dcea:	76 e0       	ldi	r23, 0x06	; 6
    dcec:	37 2e       	mov	r3, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    dcee:	ef e0       	ldi	r30, 0x0F	; 15
    dcf0:	6e 2e       	mov	r6, r30
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
    pch = strtok (str1, "/");
    while (pch != NULL)
    dcf2:	41 14       	cp	r4, r1
    dcf4:	51 04       	cpc	r5, r1
    dcf6:	09 f4       	brne	.+2      	; 0xdcfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    dcf8:	c1 c0       	rjmp	.+386    	; 0xde7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
    {
      if (cnt == 0) id = atoi(pch);
    dcfa:	d1 10       	cpse	r13, r1
    dcfc:	7e c0       	rjmp	.+252    	; 0xddfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xf70>
    dcfe:	c2 01       	movw	r24, r4
    dd00:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dd04:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    dd06:	27 e0       	ldi	r18, 0x07	; 7
    dd08:	27 15       	cp	r18, r7
    dd0a:	08 f4       	brcc	.+2      	; 0xdd0e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    dd0c:	b2 c0       	rjmp	.+356    	; 0xde72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe8>
    dd0e:	8a e0       	ldi	r24, 0x0A	; 10
    dd10:	8f 15       	cp	r24, r15
    dd12:	08 f4       	brcc	.+2      	; 0xdd16 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8c>
    dd14:	ae c0       	rjmp	.+348    	; 0xde72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    dd16:	a2 e0       	ldi	r26, 0x02	; 2
    dd18:	da 12       	cpse	r13, r26
    dd1a:	a2 c0       	rjmp	.+324    	; 0xde60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
    dd1c:	6b ec       	ldi	r22, 0xCB	; 203
    dd1e:	73 e0       	ldi	r23, 0x03	; 3
    dd20:	c2 01       	movw	r24, r4
    dd22:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    dd26:	89 2b       	or	r24, r25
    dd28:	a1 f5       	brne	.+104    	; 0xdd92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf08>
    dd2a:	82 e4       	ldi	r24, 0x42	; 66
    dd2c:	9b e0       	ldi	r25, 0x0B	; 11
    dd2e:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dd32:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    dd34:	bd e4       	ldi	r27, 0x4D	; 77
    dd36:	7b 9e       	mul	r7, r27
    dd38:	80 01       	movw	r16, r0
    dd3a:	11 24       	eor	r1, r1
    dd3c:	0f 50       	subi	r16, 0x0F	; 15
    dd3e:	1e 4f       	sbci	r17, 0xFE	; 254
    dd40:	f3 9c       	mul	r15, r3
    dd42:	00 0d       	add	r16, r0
    dd44:	11 1d       	adc	r17, r1
    dd46:	11 24       	eor	r1, r1
    dd48:	c8 01       	movw	r24, r16
    dd4a:	02 96       	adiw	r24, 0x02	; 2
    dd4c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    dd50:	28 2e       	mov	r2, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    dd52:	c8 01       	movw	r24, r16
    dd54:	03 96       	adiw	r24, 0x03	; 3
    dd56:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    dd5a:	42 2d       	mov	r20, r2
    dd5c:	46 95       	lsr	r20
    dd5e:	46 95       	lsr	r20
    dd60:	46 95       	lsr	r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    dd62:	22 2d       	mov	r18, r2
    dd64:	30 e0       	ldi	r19, 0x00	; 0
    dd66:	35 95       	asr	r19
    dd68:	27 95       	ror	r18
    dd6a:	23 70       	andi	r18, 0x03	; 3
    dd6c:	26 9d       	mul	r18, r6
    dd6e:	20 2d       	mov	r18, r0
    dd70:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    dd72:	08 2f       	mov	r16, r24
    dd74:	06 95       	lsr	r16
    dd76:	06 95       	lsr	r16
    dd78:	06 95       	lsr	r16
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    dd7a:	83 70       	andi	r24, 0x03	; 3
    dd7c:	86 9d       	mul	r24, r6
    dd7e:	e0 2c       	mov	r14, r0
    dd80:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    dd82:	82 2d       	mov	r24, r2
    dd84:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:380
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    dd86:	c8 16       	cp	r12, r24
    dd88:	21 f0       	breq	.+8      	; 0xdd92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf08>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    dd8a:	6f 2d       	mov	r22, r15
    dd8c:	87 2d       	mov	r24, r7
    dd8e:	0e 94 03 56 	call	0xac06	; 0xac06 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    dd92:	66 e5       	ldi	r22, 0x56	; 86
    dd94:	76 e0       	ldi	r23, 0x06	; 6
    dd96:	c2 01       	movw	r24, r4
    dd98:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    dd9c:	89 2b       	or	r24, r25
    dd9e:	49 f4       	brne	.+18     	; 0xddb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf28>
    dda0:	82 e4       	ldi	r24, 0x42	; 66
    dda2:	9b e0       	ldi	r25, 0x0B	; 11
    dda4:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dda8:	ac 01       	movw	r20, r24
    ddaa:	6f 2d       	mov	r22, r15
    ddac:	87 2d       	mov	r24, r7
    ddae:	0e 94 e7 55 	call	0xabce	; 0xabce <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    ddb2:	6e e9       	ldi	r22, 0x9E	; 158
    ddb4:	76 e0       	ldi	r23, 0x06	; 6
    ddb6:	c2 01       	movw	r24, r4
    ddb8:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    ddbc:	89 2b       	or	r24, r25
    ddbe:	09 f0       	breq	.+2      	; 0xddc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf38>
    ddc0:	4f c0       	rjmp	.+158    	; 0xde60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    ddc2:	6d e0       	ldi	r22, 0x0D	; 13
    ddc4:	75 e0       	ldi	r23, 0x05	; 5
    ddc6:	82 e4       	ldi	r24, 0x42	; 66
    ddc8:	9b e0       	ldi	r25, 0x0B	; 11
    ddca:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    ddce:	51 2c       	mov	r5, r1
    ddd0:	c1 2c       	mov	r12, r1
    ddd2:	e1 2c       	mov	r14, r1
    ddd4:	00 e0       	ldi	r16, 0x00	; 0
    ddd6:	21 2c       	mov	r2, r1
    ddd8:	41 2c       	mov	r4, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    ddda:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    dddc:	00 97       	sbiw	r24, 0x00	; 0
    ddde:	99 f1       	breq	.+102    	; 0xde46 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbc>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    dde0:	11 11       	cpse	r17, r1
    dde2:	13 c0       	rjmp	.+38     	; 0xde0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf80>
    dde4:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dde8:	48 2e       	mov	r4, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    ddea:	6d e0       	ldi	r22, 0x0D	; 13
    ddec:	75 e0       	ldi	r23, 0x05	; 5
    ddee:	90 e0       	ldi	r25, 0x00	; 0
    ddf0:	80 e0       	ldi	r24, 0x00	; 0
    ddf2:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:354
    cnt++;
    ddf6:	1f 5f       	subi	r17, 0xFF	; 255
    ddf8:	f1 cf       	rjmp	.-30     	; 0xdddc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf52>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3649
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    ddfa:	f1 e0       	ldi	r31, 0x01	; 1
    ddfc:	df 12       	cpse	r13, r31
    ddfe:	83 cf       	rjmp	.-250    	; 0xdd06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    de00:	c2 01       	movw	r24, r4
    de02:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de06:	f8 2e       	mov	r15, r24
    de08:	7e cf       	rjmp	.-260    	; 0xdd06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    de0a:	11 30       	cpi	r17, 0x01	; 1
    de0c:	21 f4       	brne	.+8      	; 0xde16 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8c>
    de0e:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de12:	28 2e       	mov	r2, r24
    de14:	ea cf       	rjmp	.-44     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    de16:	12 30       	cpi	r17, 0x02	; 2
    de18:	21 f4       	brne	.+8      	; 0xde22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf98>
    de1a:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de1e:	08 2f       	mov	r16, r24
    de20:	e4 cf       	rjmp	.-56     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    de22:	13 30       	cpi	r17, 0x03	; 3
    de24:	21 f4       	brne	.+8      	; 0xde2e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
    de26:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de2a:	e8 2e       	mov	r14, r24
    de2c:	de cf       	rjmp	.-68     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    de2e:	14 30       	cpi	r17, 0x04	; 4
    de30:	21 f4       	brne	.+8      	; 0xde3a <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb0>
    de32:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de36:	58 2e       	mov	r5, r24
    de38:	d8 cf       	rjmp	.-80     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    de3a:	15 30       	cpi	r17, 0x05	; 5
    de3c:	b1 f6       	brne	.-84     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
    de3e:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    de42:	c8 2e       	mov	r12, r24
    de44:	d2 cf       	rjmp	.-92     	; 0xddea <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    de46:	16 30       	cpi	r17, 0x06	; 6
    de48:	59 f4       	brne	.+22     	; 0xde60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    de4a:	22 2d       	mov	r18, r2
    de4c:	44 2d       	mov	r20, r4
    de4e:	6f 2d       	mov	r22, r15
    de50:	87 2d       	mov	r24, r7
    de52:	0e 94 03 56 	call	0xac06	; 0xac06 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    de56:	45 2d       	mov	r20, r5
    de58:	6f 2d       	mov	r22, r15
    de5a:	87 2d       	mov	r24, r7
    de5c:	0e 94 d9 55 	call	0xabb2	; 0xabb2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    de60:	68 ee       	ldi	r22, 0xE8	; 232
    de62:	73 e0       	ldi	r23, 0x03	; 3
    de64:	90 e0       	ldi	r25, 0x00	; 0
    de66:	80 e0       	ldi	r24, 0x00	; 0
    de68:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    de6c:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      cnt++;
    de6e:	d3 94       	inc	r13
    de70:	40 cf       	rjmp	.-384    	; 0xdcf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    de72:	8f e0       	ldi	r24, 0x0F	; 15
    de74:	95 e0       	ldi	r25, 0x05	; 5
    de76:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    de7a:	f2 cf       	rjmp	.-28     	; 0xde60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    de7c:	64 e7       	ldi	r22, 0x74	; 116
    de7e:	7a e3       	ldi	r23, 0x3A	; 58
    de80:	c5 01       	movw	r24, r10
    de82:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
  strcat(str1, device.nazev);
    de86:	6c e9       	ldi	r22, 0x9C	; 156
    de88:	7c e0       	ldi	r23, 0x0C	; 12
    de8a:	c5 01       	movw	r24, r10
    de8c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
  strcat(str1, "/ring/default");
    de90:	68 e2       	ldi	r22, 0x28	; 40
    de92:	75 e0       	ldi	r23, 0x05	; 5
    de94:	c5 01       	movw	r24, r10
    de96:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
  if (strcmp(str1, topic) == 0)
    de9a:	b4 01       	movw	r22, r8
    de9c:	c5 01       	movw	r24, r10
    de9e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    dea2:	89 2b       	or	r24, r25
    dea4:	a1 f4       	brne	.+40     	; 0xdece <mqtt_callback(char*, unsigned char*, unsigned int)+0x1044>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
  {
    mqtt_process_message++;
    dea6:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    deaa:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    deae:	01 96       	adiw	r24, 0x01	; 1
    deb0:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    deb4:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
    default_ring = atoi(my_payload);
    deb8:	82 e4       	ldi	r24, 0x42	; 66
    deba:	9b e0       	ldi	r25, 0x0B	; 11
    debc:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    dec0:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    dec4:	68 2f       	mov	r22, r24
    dec6:	8c e5       	ldi	r24, 0x5C	; 92
    dec8:	90 e0       	ldi	r25, 0x00	; 0
    deca:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    dece:	64 e7       	ldi	r22, 0x74	; 116
    ded0:	7a e3       	ldi	r23, 0x3A	; 58
    ded2:	c5 01       	movw	r24, r10
    ded4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
  strcat(str1, device.nazev);
    ded8:	6c e9       	ldi	r22, 0x9C	; 156
    deda:	7c e0       	ldi	r23, 0x0C	; 12
    dedc:	c5 01       	movw	r24, r10
    dede:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
  strcat(str1, "/ring/get/");
    dee2:	66 e3       	ldi	r22, 0x36	; 54
    dee4:	75 e0       	ldi	r23, 0x05	; 5
    dee6:	c5 01       	movw	r24, r10
    dee8:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
  if (strncmp(str1, topic, strlen(str1)) == 0)
    deec:	f5 01       	movw	r30, r10
    deee:	01 90       	ld	r0, Z+
    def0:	00 20       	and	r0, r0
    def2:	e9 f7       	brne	.-6      	; 0xdeee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1064>
    def4:	31 97       	sbiw	r30, 0x01	; 1
    def6:	8f 01       	movw	r16, r30
    def8:	0a 19       	sub	r16, r10
    defa:	1b 09       	sbc	r17, r11
    defc:	a8 01       	movw	r20, r16
    defe:	b4 01       	movw	r22, r8
    df00:	c5 01       	movw	r24, r10
    df02:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    df06:	89 2b       	or	r24, r25
    df08:	09 f0       	breq	.+2      	; 0xdf0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1082>
    df0a:	47 c0       	rjmp	.+142    	; 0xdf9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    df0c:	90 2f       	mov	r25, r16
    df0e:	80 2f       	mov	r24, r16
    df10:	89 1b       	sub	r24, r25
    df12:	20 2f       	mov	r18, r16
    df14:	30 e0       	ldi	r19, 0x00	; 0
    df16:	f4 01       	movw	r30, r8
    df18:	01 90       	ld	r0, Z+
    df1a:	00 20       	and	r0, r0
    df1c:	e9 f7       	brne	.-6      	; 0xdf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x108e>
    df1e:	31 97       	sbiw	r30, 0x01	; 1
    df20:	e8 19       	sub	r30, r8
    df22:	f9 09       	sbc	r31, r9
    df24:	2e 17       	cp	r18, r30
    df26:	3f 07       	cpc	r19, r31
    df28:	58 f4       	brcc	.+22     	; 0xdf40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
    {
      str1[cnt] = topic[f];
    df2a:	f5 01       	movw	r30, r10
    df2c:	e8 0f       	add	r30, r24
    df2e:	f1 1d       	adc	r31, r1
    df30:	28 0d       	add	r18, r8
    df32:	39 1d       	adc	r19, r9
    df34:	d9 01       	movw	r26, r18
    df36:	8c 91       	ld	r24, X
    df38:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      str1[cnt + 1] = 0;
    df3a:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    df3c:	0f 5f       	subi	r16, 0xFF	; 255
    df3e:	e7 cf       	rjmp	.-50     	; 0xdf0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1084>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    df40:	68 ee       	ldi	r22, 0xE8	; 232
    df42:	73 e0       	ldi	r23, 0x03	; 3
    df44:	c5 01       	movw	r24, r10
    df46:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    df4a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
    pch = strtok (str1, "/");
    while (pch != NULL)
    df4c:	00 97       	sbiw	r24, 0x00	; 0
    df4e:	29 f1       	breq	.+74     	; 0xdf9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
    {
      if (cnt == 0) id = atoi(my_payload);
    df50:	11 11       	cpse	r17, r1
    df52:	0d c0       	rjmp	.+26     	; 0xdf6e <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e4>
    df54:	82 e4       	ldi	r24, 0x42	; 66
    df56:	9b e0       	ldi	r25, 0x0B	; 11
    df58:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    df5c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
      if (id < MAX_THERMOSTAT)
    df5e:	b4 e0       	ldi	r27, 0x04	; 4
    df60:	b8 17       	cp	r27, r24
    df62:	98 f4       	brcc	.+38     	; 0xdf8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    df64:	81 e4       	ldi	r24, 0x41	; 65
    df66:	95 e0       	ldi	r25, 0x05	; 5
    df68:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    df6c:	0e c0       	rjmp	.+28     	; 0xdf8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    df6e:	e4 e0       	ldi	r30, 0x04	; 4
    df70:	e7 15       	cp	r30, r7
    df72:	c0 f3       	brcs	.-16     	; 0xdf64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    df74:	11 30       	cpi	r17, 0x01	; 1
    df76:	49 f4       	brne	.+18     	; 0xdf8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
    df78:	62 e5       	ldi	r22, 0x52	; 82
    df7a:	73 e0       	ldi	r23, 0x03	; 3
    df7c:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    df80:	89 2b       	or	r24, r25
    df82:	19 f4       	brne	.+6      	; 0xdf8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
    df84:	87 2d       	mov	r24, r7
    df86:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    df8a:	68 ee       	ldi	r22, 0xE8	; 232
    df8c:	73 e0       	ldi	r23, 0x03	; 3
    df8e:	90 e0       	ldi	r25, 0x00	; 0
    df90:	80 e0       	ldi	r24, 0x00	; 0
    df92:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
      cnt++;
    df96:	1f 5f       	subi	r17, 0xFF	; 255
    df98:	d9 cf       	rjmp	.-78     	; 0xdf4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    df9a:	64 e7       	ldi	r22, 0x74	; 116
    df9c:	7a e3       	ldi	r23, 0x3A	; 58
    df9e:	c5 01       	movw	r24, r10
    dfa0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723
  strcat(str1, device.nazev);
    dfa4:	6c e9       	ldi	r22, 0x9C	; 156
    dfa6:	7c e0       	ldi	r23, 0x0C	; 12
    dfa8:	c5 01       	movw	r24, r10
    dfaa:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
  strcat(str1, "/ring/set/");
    dfae:	61 e5       	ldi	r22, 0x51	; 81
    dfb0:	75 e0       	ldi	r23, 0x05	; 5
    dfb2:	c5 01       	movw	r24, r10
    dfb4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dfb8:	f5 01       	movw	r30, r10
    dfba:	01 90       	ld	r0, Z+
    dfbc:	00 20       	and	r0, r0
    dfbe:	e9 f7       	brne	.-6      	; 0xdfba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1130>
    dfc0:	31 97       	sbiw	r30, 0x01	; 1
    dfc2:	8f 01       	movw	r16, r30
    dfc4:	0a 19       	sub	r16, r10
    dfc6:	1b 09       	sbc	r17, r11
    dfc8:	a8 01       	movw	r20, r16
    dfca:	b4 01       	movw	r22, r8
    dfcc:	c5 01       	movw	r24, r10
    dfce:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    dfd2:	89 2b       	or	r24, r25
    dfd4:	09 f0       	breq	.+2      	; 0xdfd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x114e>
    dfd6:	c8 c1       	rjmp	.+912    	; 0xe368 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dfd8:	90 2f       	mov	r25, r16
    dfda:	80 2f       	mov	r24, r16
    dfdc:	89 1b       	sub	r24, r25
    dfde:	20 2f       	mov	r18, r16
    dfe0:	30 e0       	ldi	r19, 0x00	; 0
    dfe2:	f4 01       	movw	r30, r8
    dfe4:	01 90       	ld	r0, Z+
    dfe6:	00 20       	and	r0, r0
    dfe8:	e9 f7       	brne	.-6      	; 0xdfe4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x115a>
    dfea:	31 97       	sbiw	r30, 0x01	; 1
    dfec:	e8 19       	sub	r30, r8
    dfee:	f9 09       	sbc	r31, r9
    dff0:	2e 17       	cp	r18, r30
    dff2:	3f 07       	cpc	r19, r31
    dff4:	58 f4       	brcc	.+22     	; 0xe00c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1182>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
    {
      str1[cnt] = topic[f];
    dff6:	f5 01       	movw	r30, r10
    dff8:	e8 0f       	add	r30, r24
    dffa:	f1 1d       	adc	r31, r1
    dffc:	28 0d       	add	r18, r8
    dffe:	39 1d       	adc	r19, r9
    e000:	d9 01       	movw	r26, r18
    e002:	8c 91       	ld	r24, X
    e004:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
      str1[cnt + 1] = 0;
    e006:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e008:	0f 5f       	subi	r16, 0xFF	; 255
    e00a:	e7 cf       	rjmp	.-50     	; 0xdfda <mqtt_callback(char*, unsigned char*, unsigned int)+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e00c:	68 ee       	ldi	r22, 0xE8	; 232
    e00e:	73 e0       	ldi	r23, 0x03	; 3
    e010:	c5 01       	movw	r24, r10
    e012:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e016:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e018:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    e01a:	51 e2       	ldi	r21, 0x21	; 33
    e01c:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
    pch = strtok (str1, "/");
    while (pch != NULL)
    e01e:	01 15       	cp	r16, r1
    e020:	11 05       	cpc	r17, r1
    e022:	09 f4       	brne	.+2      	; 0xe026 <mqtt_callback(char*, unsigned char*, unsigned int)+0x119c>
    e024:	a1 c1       	rjmp	.+834    	; 0xe368 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
    {
      if (cnt == 0) id = atoi(pch);
    e026:	d1 10       	cpse	r13, r1
    e028:	0d c0       	rjmp	.+26     	; 0xe044 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ba>
    e02a:	c8 01       	movw	r24, r16
    e02c:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e030:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      if (id < MAX_THERMOSTAT)
    e032:	b4 e0       	ldi	r27, 0x04	; 4
    e034:	b8 17       	cp	r27, r24
    e036:	08 f0       	brcs	.+2      	; 0xe03a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b0>
    e038:	8e c1       	rjmp	.+796    	; 0xe356 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    e03a:	81 e4       	ldi	r24, 0x41	; 65
    e03c:	95 e0       	ldi	r25, 0x05	; 5
    e03e:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    e042:	89 c1       	rjmp	.+786    	; 0xe356 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    e044:	e4 e0       	ldi	r30, 0x04	; 4
    e046:	e7 15       	cp	r30, r7
    e048:	c0 f3       	brcs	.-16     	; 0xe03a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    e04a:	f1 e0       	ldi	r31, 0x01	; 1
    e04c:	df 12       	cpse	r13, r31
    e04e:	83 c1       	rjmp	.+774    	; 0xe356 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
    e050:	61 ec       	ldi	r22, 0xC1	; 193
    e052:	73 e0       	ldi	r23, 0x03	; 3
    e054:	c8 01       	movw	r24, r16
    e056:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e05a:	89 2b       	or	r24, r25
    e05c:	29 f4       	brne	.+10     	; 0xe068 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    e05e:	62 e4       	ldi	r22, 0x42	; 66
    e060:	7b e0       	ldi	r23, 0x0B	; 11
    e062:	87 2d       	mov	r24, r7
    e064:	0e 94 52 57 	call	0xaea4	; 0xaea4 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    e068:	60 e6       	ldi	r22, 0x60	; 96
    e06a:	76 e0       	ldi	r23, 0x06	; 6
    e06c:	c8 01       	movw	r24, r16
    e06e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e072:	89 2b       	or	r24, r25
    e074:	81 f4       	brne	.+32     	; 0xe096 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    e076:	82 e4       	ldi	r24, 0x42	; 66
    e078:	9b e0       	ldi	r25, 0x0B	; 11
    e07a:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e07e:	88 30       	cpi	r24, 0x08	; 8
    e080:	91 05       	cpc	r25, r1
    e082:	4c f4       	brge	.+18     	; 0xe096 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120c>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    e084:	7e 9c       	mul	r7, r14
    e086:	90 01       	movw	r18, r0
    e088:	11 24       	eor	r1, r1
    e08a:	68 2f       	mov	r22, r24
    e08c:	c9 01       	movw	r24, r18
    e08e:	85 5a       	subi	r24, 0xA5	; 165
    e090:	9e 4f       	sbci	r25, 0xFE	; 254
    e092:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    e096:	68 e6       	ldi	r22, 0x68	; 104
    e098:	76 e0       	ldi	r23, 0x06	; 6
    e09a:	c8 01       	movw	r24, r16
    e09c:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e0a0:	89 2b       	or	r24, r25
    e0a2:	79 f4       	brne	.+30     	; 0xe0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1238>
    e0a4:	82 e4       	ldi	r24, 0x42	; 66
    e0a6:	9b e0       	ldi	r25, 0x0B	; 11
    e0a8:	0e 94 0f b1 	call	0x1621e	; 0x1621e <atof>
    e0ac:	20 e0       	ldi	r18, 0x00	; 0
    e0ae:	30 e0       	ldi	r19, 0x00	; 0
    e0b0:	40 e2       	ldi	r20, 0x20	; 32
    e0b2:	51 e4       	ldi	r21, 0x41	; 65
    e0b4:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
    e0b8:	0e 94 6e bc 	call	0x178dc	; 0x178dc <__fixsfsi>
    e0bc:	87 2d       	mov	r24, r7
    e0be:	0e 94 2b 57 	call	0xae56	; 0xae56 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    e0c2:	66 e5       	ldi	r22, 0x56	; 86
    e0c4:	76 e0       	ldi	r23, 0x06	; 6
    e0c6:	c8 01       	movw	r24, r16
    e0c8:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e0cc:	89 2b       	or	r24, r25
    e0ce:	41 f4       	brne	.+16     	; 0xe0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1256>
    e0d0:	82 e4       	ldi	r24, 0x42	; 66
    e0d2:	9b e0       	ldi	r25, 0x0B	; 11
    e0d4:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e0d8:	bc 01       	movw	r22, r24
    e0da:	87 2d       	mov	r24, r7
    e0dc:	0e 94 2b 57 	call	0xae56	; 0xae56 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    e0e0:	64 e7       	ldi	r22, 0x74	; 116
    e0e2:	76 e0       	ldi	r23, 0x06	; 6
    e0e4:	c8 01       	movw	r24, r16
    e0e6:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e0ea:	89 2b       	or	r24, r25
    e0ec:	09 f0       	breq	.+2      	; 0xe0f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1266>
    e0ee:	52 c0       	rjmp	.+164    	; 0xe194 <mqtt_callback(char*, unsigned char*, unsigned int)+0x130a>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4455
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    e0f0:	6c e5       	ldi	r22, 0x5C	; 92
    e0f2:	75 e0       	ldi	r23, 0x05	; 5
    e0f4:	82 e4       	ldi	r24, 0x42	; 66
    e0f6:	9b e0       	ldi	r25, 0x0B	; 11
    e0f8:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e0fc:	ff 24       	eor	r15, r15
    e0fe:	f3 94       	inc	r15
    e100:	89 2b       	or	r24, r25
    e102:	09 f0       	breq	.+2      	; 0xe106 <mqtt_callback(char*, unsigned char*, unsigned int)+0x127c>
    e104:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    e106:	61 e6       	ldi	r22, 0x61	; 97
    e108:	75 e0       	ldi	r23, 0x05	; 5
    e10a:	82 e4       	ldi	r24, 0x42	; 66
    e10c:	9b e0       	ldi	r25, 0x0B	; 11
    e10e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e112:	89 2b       	or	r24, r25
    e114:	11 f4       	brne	.+4      	; 0xe11a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1290>
_Z13mqtt_callbackPcPhj():
    e116:	43 e0       	ldi	r20, 0x03	; 3
    e118:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    e11a:	68 e6       	ldi	r22, 0x68	; 104
    e11c:	75 e0       	ldi	r23, 0x05	; 5
    e11e:	82 e4       	ldi	r24, 0x42	; 66
    e120:	9b e0       	ldi	r25, 0x0B	; 11
    e122:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e126:	89 2b       	or	r24, r25
    e128:	11 f4       	brne	.+4      	; 0xe12e <mqtt_callback(char*, unsigned char*, unsigned int)+0x12a4>
_Z13mqtt_callbackPcPhj():
    e12a:	32 e0       	ldi	r19, 0x02	; 2
    e12c:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    e12e:	6d e6       	ldi	r22, 0x6D	; 109
    e130:	75 e0       	ldi	r23, 0x05	; 5
    e132:	82 e4       	ldi	r24, 0x42	; 66
    e134:	9b e0       	ldi	r25, 0x0B	; 11
    e136:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e13a:	89 2b       	or	r24, r25
    e13c:	11 f4       	brne	.+4      	; 0xe142 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12b8>
_Z13mqtt_callbackPcPhj():
    e13e:	24 e0       	ldi	r18, 0x04	; 4
    e140:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4459
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    e142:	62 e7       	ldi	r22, 0x72	; 114
    e144:	75 e0       	ldi	r23, 0x05	; 5
    e146:	82 e4       	ldi	r24, 0x42	; 66
    e148:	9b e0       	ldi	r25, 0x0B	; 11
    e14a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e14e:	89 2b       	or	r24, r25
    e150:	11 f4       	brne	.+4      	; 0xe156 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12cc>
_Z13mqtt_callbackPcPhj():
    e152:	96 e0       	ldi	r25, 0x06	; 6
    e154:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    e156:	c4 5d       	subi	r28, 0xD4	; 212
    e158:	de 4f       	sbci	r29, 0xFE	; 254
    e15a:	f8 82       	st	Y, r15
    e15c:	cc 52       	subi	r28, 0x2C	; 44
    e15e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
          thermostat_ring_set_mode(id, active);
    e160:	6f 2d       	mov	r22, r15
    e162:	87 2d       	mov	r24, r7
    e164:	0e 94 10 57 	call	0xae20	; 0xae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
          if (active == TERM_MODE_MAN_HEAT)
    e168:	c4 5d       	subi	r28, 0xD4	; 212
    e16a:	de 4f       	sbci	r29, 0xFE	; 254
    e16c:	88 81       	ld	r24, Y
    e16e:	cc 52       	subi	r28, 0x2C	; 44
    e170:	d1 40       	sbci	r29, 0x01	; 1
    e172:	83 30       	cpi	r24, 0x03	; 3
    e174:	21 f4       	brne	.+8      	; 0xe17e <mqtt_callback(char*, unsigned char*, unsigned int)+0x12f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    e176:	60 e0       	ldi	r22, 0x00	; 0
    e178:	87 2d       	mov	r24, r7
    e17a:	0e 94 76 9d 	call	0x13aec	; 0x13aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
          if (active == TERM_MODE_MAN_COOL)
    e17e:	c4 5d       	subi	r28, 0xD4	; 212
    e180:	de 4f       	sbci	r29, 0xFE	; 254
    e182:	88 81       	ld	r24, Y
    e184:	cc 52       	subi	r28, 0x2C	; 44
    e186:	d1 40       	sbci	r29, 0x01	; 1
    e188:	85 30       	cpi	r24, 0x05	; 5
    e18a:	21 f4       	brne	.+8      	; 0xe194 <mqtt_callback(char*, unsigned char*, unsigned int)+0x130a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    e18c:	61 e0       	ldi	r22, 0x01	; 1
    e18e:	87 2d       	mov	r24, r7
    e190:	0e 94 76 9d 	call	0x13aec	; 0x13aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    e194:	69 e7       	ldi	r22, 0x79	; 121
    e196:	76 e0       	ldi	r23, 0x06	; 6
    e198:	c8 01       	movw	r24, r16
    e19a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e19e:	89 2b       	or	r24, r25
    e1a0:	19 f5       	brne	.+70     	; 0xe1e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
        {
          active = atoi(my_payload);
    e1a2:	82 e4       	ldi	r24, 0x42	; 66
    e1a4:	9b e0       	ldi	r25, 0x0B	; 11
    e1a6:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e1aa:	c4 5d       	subi	r28, 0xD4	; 212
    e1ac:	de 4f       	sbci	r29, 0xFE	; 254
    e1ae:	88 83       	st	Y, r24
    e1b0:	cc 52       	subi	r28, 0x2C	; 44
    e1b2:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
          thermostat_ring_set_mode(id, active);
    e1b4:	68 2f       	mov	r22, r24
    e1b6:	87 2d       	mov	r24, r7
    e1b8:	0e 94 10 57 	call	0xae20	; 0xae20 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
          if (active == TERM_MODE_MAN_HEAT)
    e1bc:	c4 5d       	subi	r28, 0xD4	; 212
    e1be:	de 4f       	sbci	r29, 0xFE	; 254
    e1c0:	88 81       	ld	r24, Y
    e1c2:	cc 52       	subi	r28, 0x2C	; 44
    e1c4:	d1 40       	sbci	r29, 0x01	; 1
    e1c6:	83 30       	cpi	r24, 0x03	; 3
    e1c8:	21 f4       	brne	.+8      	; 0xe1d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    e1ca:	60 e0       	ldi	r22, 0x00	; 0
    e1cc:	87 2d       	mov	r24, r7
    e1ce:	0e 94 76 9d 	call	0x13aec	; 0x13aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
          if (active == TERM_MODE_MAN_COOL)
    e1d2:	c4 5d       	subi	r28, 0xD4	; 212
    e1d4:	de 4f       	sbci	r29, 0xFE	; 254
    e1d6:	88 81       	ld	r24, Y
    e1d8:	cc 52       	subi	r28, 0x2C	; 44
    e1da:	d1 40       	sbci	r29, 0x01	; 1
    e1dc:	85 30       	cpi	r24, 0x05	; 5
    e1de:	21 f4       	brne	.+8      	; 0xe1e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    e1e0:	61 e0       	ldi	r22, 0x01	; 1
    e1e2:	87 2d       	mov	r24, r7
    e1e4:	0e 94 76 9d 	call	0x13aec	; 0x13aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    e1e8:	67 ec       	ldi	r22, 0xC7	; 199
    e1ea:	73 e0       	ldi	r23, 0x03	; 3
    e1ec:	c8 01       	movw	r24, r16
    e1ee:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e1f2:	89 2b       	or	r24, r25
    e1f4:	69 f4       	brne	.+26     	; 0xe210 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1386>
    e1f6:	82 e4       	ldi	r24, 0x42	; 66
    e1f8:	9b e0       	ldi	r25, 0x0B	; 11
    e1fa:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    e1fe:	7e 9c       	mul	r7, r14
    e200:	90 01       	movw	r18, r0
    e202:	11 24       	eor	r1, r1
    e204:	68 2f       	mov	r22, r24
    e206:	c9 01       	movw	r24, r18
    e208:	84 5a       	subi	r24, 0xA4	; 164
    e20a:	9e 4f       	sbci	r25, 0xFE	; 254
    e20c:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    e210:	66 ec       	ldi	r22, 0xC6	; 198
    e212:	73 e0       	ldi	r23, 0x03	; 3
    e214:	c8 01       	movw	r24, r16
    e216:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e21a:	89 2b       	or	r24, r25
    e21c:	69 f4       	brne	.+26     	; 0xe238 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ae>
    e21e:	82 e4       	ldi	r24, 0x42	; 66
    e220:	9b e0       	ldi	r25, 0x0B	; 11
    e222:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e226:	60 e1       	ldi	r22, 0x10	; 16
    e228:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
    e22a:	7e 9c       	mul	r7, r14
    e22c:	c0 01       	movw	r24, r0
    e22e:	11 24       	eor	r1, r1
    e230:	84 5a       	subi	r24, 0xA4	; 164
    e232:	9e 4f       	sbci	r25, 0xFE	; 254
    e234:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    e238:	6b ec       	ldi	r22, 0xCB	; 203
    e23a:	73 e0       	ldi	r23, 0x03	; 3
    e23c:	c8 01       	movw	r24, r16
    e23e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e242:	89 2b       	or	r24, r25
    e244:	69 f4       	brne	.+26     	; 0xe260 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13d6>
    e246:	82 e4       	ldi	r24, 0x42	; 66
    e248:	9b e0       	ldi	r25, 0x0B	; 11
    e24a:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    e24e:	7e 9c       	mul	r7, r14
    e250:	90 01       	movw	r18, r0
    e252:	11 24       	eor	r1, r1
    e254:	68 2f       	mov	r22, r24
    e256:	c9 01       	movw	r24, r18
    e258:	83 5a       	subi	r24, 0xA3	; 163
    e25a:	9e 4f       	sbci	r25, 0xFE	; 254
    e25c:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3768
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    e260:	6e e7       	ldi	r22, 0x7E	; 126
    e262:	76 e0       	ldi	r23, 0x06	; 6
    e264:	c8 01       	movw	r24, r16
    e266:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e26a:	89 2b       	or	r24, r25
    e26c:	69 f4       	brne	.+26     	; 0xe288 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13fe>
    e26e:	82 e4       	ldi	r24, 0x42	; 66
    e270:	9b e0       	ldi	r25, 0x0B	; 11
    e272:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    e276:	7e 9c       	mul	r7, r14
    e278:	90 01       	movw	r18, r0
    e27a:	11 24       	eor	r1, r1
    e27c:	68 2f       	mov	r22, r24
    e27e:	c9 01       	movw	r24, r18
    e280:	81 5a       	subi	r24, 0xA1	; 161
    e282:	9e 4f       	sbci	r25, 0xFE	; 254
    e284:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    e288:	65 e8       	ldi	r22, 0x85	; 133
    e28a:	76 e0       	ldi	r23, 0x06	; 6
    e28c:	c8 01       	movw	r24, r16
    e28e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e292:	89 2b       	or	r24, r25
    e294:	a1 f4       	brne	.+40     	; 0xe2be <mqtt_callback(char*, unsigned char*, unsigned int)+0x1434>
    e296:	82 e4       	ldi	r24, 0x42	; 66
    e298:	9b e0       	ldi	r25, 0x0B	; 11
    e29a:	0e 94 0f b1 	call	0x1621e	; 0x1621e <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    e29e:	24 e0       	ldi	r18, 0x04	; 4
    e2a0:	72 9e       	mul	r7, r18
    e2a2:	f0 01       	movw	r30, r0
    e2a4:	11 24       	eor	r1, r1
    e2a6:	e2 52       	subi	r30, 0x22	; 34
    e2a8:	f6 4f       	sbci	r31, 0xF6	; 246
    e2aa:	60 83       	st	Z, r22
    e2ac:	71 83       	std	Z+1, r23	; 0x01
    e2ae:	82 83       	std	Z+2, r24	; 0x02
    e2b0:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    e2b2:	87 2d       	mov	r24, r7
    e2b4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    e2b8:	87 2d       	mov	r24, r7
    e2ba:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    e2be:	6c e8       	ldi	r22, 0x8C	; 140
    e2c0:	76 e0       	ldi	r23, 0x06	; 6
    e2c2:	c8 01       	movw	r24, r16
    e2c4:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e2c8:	89 2b       	or	r24, r25
    e2ca:	a1 f4       	brne	.+40     	; 0xe2f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x146a>
    e2cc:	82 e4       	ldi	r24, 0x42	; 66
    e2ce:	9b e0       	ldi	r25, 0x0B	; 11
    e2d0:	0e 94 0f b1 	call	0x1621e	; 0x1621e <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    e2d4:	a4 e0       	ldi	r26, 0x04	; 4
    e2d6:	7a 9e       	mul	r7, r26
    e2d8:	f0 01       	movw	r30, r0
    e2da:	11 24       	eor	r1, r1
    e2dc:	ee 50       	subi	r30, 0x0E	; 14
    e2de:	f6 4f       	sbci	r31, 0xF6	; 246
    e2e0:	60 83       	st	Z, r22
    e2e2:	71 83       	std	Z+1, r23	; 0x01
    e2e4:	82 83       	std	Z+2, r24	; 0x02
    e2e6:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    e2e8:	87 2d       	mov	r24, r7
    e2ea:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    e2ee:	87 2d       	mov	r24, r7
    e2f0:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    e2f4:	63 e9       	ldi	r22, 0x93	; 147
    e2f6:	76 e0       	ldi	r23, 0x06	; 6
    e2f8:	c8 01       	movw	r24, r16
    e2fa:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e2fe:	89 2b       	or	r24, r25
    e300:	a1 f4       	brne	.+40     	; 0xe32a <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a0>
    e302:	82 e4       	ldi	r24, 0x42	; 66
    e304:	9b e0       	ldi	r25, 0x0B	; 11
    e306:	0e 94 0f b1 	call	0x1621e	; 0x1621e <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    e30a:	b4 e0       	ldi	r27, 0x04	; 4
    e30c:	7b 9e       	mul	r7, r27
    e30e:	f0 01       	movw	r30, r0
    e310:	11 24       	eor	r1, r1
    e312:	ea 5f       	subi	r30, 0xFA	; 250
    e314:	f5 4f       	sbci	r31, 0xF5	; 245
    e316:	60 83       	st	Z, r22
    e318:	71 83       	std	Z+1, r23	; 0x01
    e31a:	82 83       	std	Z+2, r24	; 0x02
    e31c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    e31e:	87 2d       	mov	r24, r7
    e320:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    e324:	87 2d       	mov	r24, r7
    e326:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    e32a:	6a e9       	ldi	r22, 0x9A	; 154
    e32c:	76 e0       	ldi	r23, 0x06	; 6
    e32e:	c8 01       	movw	r24, r16
    e330:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e334:	89 2b       	or	r24, r25
    e336:	79 f4       	brne	.+30     	; 0xe356 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14cc>
    e338:	82 e4       	ldi	r24, 0x42	; 66
    e33a:	9b e0       	ldi	r25, 0x0B	; 11
    e33c:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    e340:	e7 2d       	mov	r30, r7
    e342:	f0 e0       	ldi	r31, 0x00	; 0
    e344:	e6 5e       	subi	r30, 0xE6	; 230
    e346:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
    e348:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    e34a:	87 2d       	mov	r24, r7
    e34c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    e350:	87 2d       	mov	r24, r7
    e352:	0e 94 67 56 	call	0xacce	; 0xacce <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    e356:	68 ee       	ldi	r22, 0xE8	; 232
    e358:	73 e0       	ldi	r23, 0x03	; 3
    e35a:	90 e0       	ldi	r25, 0x00	; 0
    e35c:	80 e0       	ldi	r24, 0x00	; 0
    e35e:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e362:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3779
      cnt++;
    e364:	d3 94       	inc	r13
    e366:	5b ce       	rjmp	.-842    	; 0xe01e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1194>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3784
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    e368:	64 e7       	ldi	r22, 0x74	; 116
    e36a:	7a e3       	ldi	r23, 0x3A	; 58
    e36c:	c5 01       	movw	r24, r10
    e36e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3785
  strcat(str1, device.nazev);
    e372:	6c e9       	ldi	r22, 0x9C	; 156
    e374:	7c e0       	ldi	r23, 0x0C	; 12
    e376:	c5 01       	movw	r24, r10
    e378:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3786
  strcat(str1, "/ring/clear");
    e37c:	6b e7       	ldi	r22, 0x7B	; 123
    e37e:	75 e0       	ldi	r23, 0x05	; 5
    e380:	c5 01       	movw	r24, r10
    e382:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3787
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e386:	f5 01       	movw	r30, r10
    e388:	01 90       	ld	r0, Z+
    e38a:	00 20       	and	r0, r0
    e38c:	e9 f7       	brne	.-6      	; 0xe388 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14fe>
    e38e:	31 97       	sbiw	r30, 0x01	; 1
    e390:	af 01       	movw	r20, r30
    e392:	4a 19       	sub	r20, r10
    e394:	5b 09       	sbc	r21, r11
    e396:	b4 01       	movw	r22, r8
    e398:	c5 01       	movw	r24, r10
    e39a:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    e39e:	89 2b       	or	r24, r25
    e3a0:	a1 f4       	brne	.+40     	; 0xe3ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3789
  {
    mqtt_process_message++;
    e3a2:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    e3a6:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    e3aa:	01 96       	adiw	r24, 0x01	; 1
    e3ac:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    e3b0:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3790
    id = atoi(my_payload);
    e3b4:	82 e4       	ldi	r24, 0x42	; 66
    e3b6:	9b e0       	ldi	r25, 0x0B	; 11
    e3b8:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e3bc:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
    if (id < MAX_THERMOSTAT)
    e3be:	e4 e0       	ldi	r30, 0x04	; 4
    e3c0:	e8 17       	cp	r30, r24
    e3c2:	08 f4       	brcc	.+2      	; 0xe3c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x153c>
    e3c4:	99 c1       	rjmp	.+818    	; 0xe6f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x186e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
    {
      thermostat_ring_clear(id);
    e3c6:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    e3ca:	64 e7       	ldi	r22, 0x74	; 116
    e3cc:	7a e3       	ldi	r23, 0x3A	; 58
    e3ce:	c5 01       	movw	r24, r10
    e3d0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
  strcat(str1, device.nazev);
    e3d4:	6c e9       	ldi	r22, 0x9C	; 156
    e3d6:	7c e0       	ldi	r23, 0x0C	; 12
    e3d8:	c5 01       	movw	r24, r10
    e3da:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
  strcat(str1, "/network/get/config");
    e3de:	69 e9       	ldi	r22, 0x99	; 153
    e3e0:	75 e0       	ldi	r23, 0x05	; 5
    e3e2:	c5 01       	movw	r24, r10
    e3e4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e3e8:	f5 01       	movw	r30, r10
    e3ea:	01 90       	ld	r0, Z+
    e3ec:	00 20       	and	r0, r0
    e3ee:	e9 f7       	brne	.-6      	; 0xe3ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1560>
    e3f0:	31 97       	sbiw	r30, 0x01	; 1
    e3f2:	af 01       	movw	r20, r30
    e3f4:	4a 19       	sub	r20, r10
    e3f6:	5b 09       	sbc	r21, r11
    e3f8:	b4 01       	movw	r22, r8
    e3fa:	c5 01       	movw	r24, r10
    e3fc:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    e400:	89 2b       	or	r24, r25
    e402:	09 f0       	breq	.+2      	; 0xe406 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157c>
    e404:	2f c1       	rjmp	.+606    	; 0xe664 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
  {
    mqtt_process_message++;
    e406:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    e40a:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    e40e:	01 96       	adiw	r24, 0x01	; 1
    e410:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    e414:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    e418:	c8 5f       	subi	r28, 0xF8	; 248
    e41a:	de 4f       	sbci	r29, 0xFE	; 254
    e41c:	18 82       	st	Y, r1
    e41e:	c8 50       	subi	r28, 0x08	; 8
    e420:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    e422:	00 e1       	ldi	r16, 0x10	; 16
    e424:	26 e0       	ldi	r18, 0x06	; 6
    e426:	46 e8       	ldi	r20, 0x86	; 134
    e428:	5c e0       	ldi	r21, 0x0C	; 12
    e42a:	6a e3       	ldi	r22, 0x3A	; 58
    e42c:	ce 01       	movw	r24, r28
    e42e:	88 5f       	subi	r24, 0xF8	; 248
    e430:	9e 4f       	sbci	r25, 0xFE	; 254
    e432:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    e436:	65 ee       	ldi	r22, 0xE5	; 229
    e438:	79 e3       	ldi	r23, 0x39	; 57
    e43a:	ce 01       	movw	r24, r28
    e43c:	88 5b       	subi	r24, 0xB8	; 184
    e43e:	9f 4f       	sbci	r25, 0xFF	; 255
    e440:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e444:	ae 01       	movw	r20, r28
    e446:	48 5f       	subi	r20, 0xF8	; 248
    e448:	5e 4f       	sbci	r21, 0xFE	; 254
    e44a:	be 01       	movw	r22, r28
    e44c:	68 5b       	subi	r22, 0xB8	; 184
    e44e:	7f 4f       	sbci	r23, 0xFF	; 255
    e450:	89 e7       	ldi	r24, 0x79	; 121
    e452:	9e e0       	ldi	r25, 0x0E	; 14
    e454:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    e458:	c8 5f       	subi	r28, 0xF8	; 248
    e45a:	de 4f       	sbci	r29, 0xFE	; 254
    e45c:	18 82       	st	Y, r1
    e45e:	c8 50       	subi	r28, 0x08	; 8
    e460:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    e462:	0a e0       	ldi	r16, 0x0A	; 10
    e464:	24 e0       	ldi	r18, 0x04	; 4
    e466:	4c e8       	ldi	r20, 0x8C	; 140
    e468:	5c e0       	ldi	r21, 0x0C	; 12
    e46a:	6e e2       	ldi	r22, 0x2E	; 46
    e46c:	ce 01       	movw	r24, r28
    e46e:	88 5f       	subi	r24, 0xF8	; 248
    e470:	9e 4f       	sbci	r25, 0xFE	; 254
    e472:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    e476:	6f ec       	ldi	r22, 0xCF	; 207
    e478:	7d e3       	ldi	r23, 0x3D	; 61
    e47a:	ce 01       	movw	r24, r28
    e47c:	88 5b       	subi	r24, 0xB8	; 184
    e47e:	9f 4f       	sbci	r25, 0xFF	; 255
    e480:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e484:	ae 01       	movw	r20, r28
    e486:	48 5f       	subi	r20, 0xF8	; 248
    e488:	5e 4f       	sbci	r21, 0xFE	; 254
    e48a:	be 01       	movw	r22, r28
    e48c:	68 5b       	subi	r22, 0xB8	; 184
    e48e:	7f 4f       	sbci	r23, 0xFF	; 255
    e490:	89 e7       	ldi	r24, 0x79	; 121
    e492:	9e e0       	ldi	r25, 0x0E	; 14
    e494:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    e498:	c8 5f       	subi	r28, 0xF8	; 248
    e49a:	de 4f       	sbci	r29, 0xFE	; 254
    e49c:	18 82       	st	Y, r1
    e49e:	c8 50       	subi	r28, 0x08	; 8
    e4a0:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    e4a2:	24 e0       	ldi	r18, 0x04	; 4
    e4a4:	40 e9       	ldi	r20, 0x90	; 144
    e4a6:	5c e0       	ldi	r21, 0x0C	; 12
    e4a8:	6e e2       	ldi	r22, 0x2E	; 46
    e4aa:	ce 01       	movw	r24, r28
    e4ac:	88 5f       	subi	r24, 0xF8	; 248
    e4ae:	9e 4f       	sbci	r25, 0xFE	; 254
    e4b0:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    e4b4:	65 ed       	ldi	r22, 0xD5	; 213
    e4b6:	79 e3       	ldi	r23, 0x39	; 57
    e4b8:	ce 01       	movw	r24, r28
    e4ba:	88 5b       	subi	r24, 0xB8	; 184
    e4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e4be:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e4c2:	ae 01       	movw	r20, r28
    e4c4:	48 5f       	subi	r20, 0xF8	; 248
    e4c6:	5e 4f       	sbci	r21, 0xFE	; 254
    e4c8:	be 01       	movw	r22, r28
    e4ca:	68 5b       	subi	r22, 0xB8	; 184
    e4cc:	7f 4f       	sbci	r23, 0xFF	; 255
    e4ce:	89 e7       	ldi	r24, 0x79	; 121
    e4d0:	9e e0       	ldi	r25, 0x0E	; 14
    e4d2:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    e4d6:	c8 5f       	subi	r28, 0xF8	; 248
    e4d8:	de 4f       	sbci	r29, 0xFE	; 254
    e4da:	18 82       	st	Y, r1
    e4dc:	c8 50       	subi	r28, 0x08	; 8
    e4de:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    e4e0:	24 e0       	ldi	r18, 0x04	; 4
    e4e2:	48 e9       	ldi	r20, 0x98	; 152
    e4e4:	5c e0       	ldi	r21, 0x0C	; 12
    e4e6:	6e e2       	ldi	r22, 0x2E	; 46
    e4e8:	ce 01       	movw	r24, r28
    e4ea:	88 5f       	subi	r24, 0xF8	; 248
    e4ec:	9e 4f       	sbci	r25, 0xFE	; 254
    e4ee:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    e4f2:	6a ec       	ldi	r22, 0xCA	; 202
    e4f4:	79 e3       	ldi	r23, 0x39	; 57
    e4f6:	ce 01       	movw	r24, r28
    e4f8:	88 5b       	subi	r24, 0xB8	; 184
    e4fa:	9f 4f       	sbci	r25, 0xFF	; 255
    e4fc:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e500:	ae 01       	movw	r20, r28
    e502:	48 5f       	subi	r20, 0xF8	; 248
    e504:	5e 4f       	sbci	r21, 0xFE	; 254
    e506:	be 01       	movw	r22, r28
    e508:	68 5b       	subi	r22, 0xB8	; 184
    e50a:	7f 4f       	sbci	r23, 0xFF	; 255
    e50c:	89 e7       	ldi	r24, 0x79	; 121
    e50e:	9e e0       	ldi	r25, 0x0E	; 14
    e510:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    e514:	c8 5f       	subi	r28, 0xF8	; 248
    e516:	de 4f       	sbci	r29, 0xFE	; 254
    e518:	18 82       	st	Y, r1
    e51a:	c8 50       	subi	r28, 0x08	; 8
    e51c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    e51e:	24 e0       	ldi	r18, 0x04	; 4
    e520:	44 e9       	ldi	r20, 0x94	; 148
    e522:	5c e0       	ldi	r21, 0x0C	; 12
    e524:	6e e2       	ldi	r22, 0x2E	; 46
    e526:	ce 01       	movw	r24, r28
    e528:	88 5f       	subi	r24, 0xF8	; 248
    e52a:	9e 4f       	sbci	r25, 0xFE	; 254
    e52c:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    e530:	6e eb       	ldi	r22, 0xBE	; 190
    e532:	79 e3       	ldi	r23, 0x39	; 57
    e534:	ce 01       	movw	r24, r28
    e536:	88 5b       	subi	r24, 0xB8	; 184
    e538:	9f 4f       	sbci	r25, 0xFF	; 255
    e53a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e53e:	ae 01       	movw	r20, r28
    e540:	48 5f       	subi	r20, 0xF8	; 248
    e542:	5e 4f       	sbci	r21, 0xFE	; 254
    e544:	be 01       	movw	r22, r28
    e546:	68 5b       	subi	r22, 0xB8	; 184
    e548:	7f 4f       	sbci	r23, 0xFF	; 255
    e54a:	89 e7       	ldi	r24, 0x79	; 121
    e54c:	9e e0       	ldi	r25, 0x0E	; 14
    e54e:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    e552:	c8 5f       	subi	r28, 0xF8	; 248
    e554:	de 4f       	sbci	r29, 0xFE	; 254
    e556:	18 82       	st	Y, r1
    e558:	c8 50       	subi	r28, 0x08	; 8
    e55a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    e55c:	24 e0       	ldi	r18, 0x04	; 4
    e55e:	44 ed       	ldi	r20, 0xD4	; 212
    e560:	5c e0       	ldi	r21, 0x0C	; 12
    e562:	6e e2       	ldi	r22, 0x2E	; 46
    e564:	ce 01       	movw	r24, r28
    e566:	88 5f       	subi	r24, 0xF8	; 248
    e568:	9e 4f       	sbci	r25, 0xFE	; 254
    e56a:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    e56e:	62 eb       	ldi	r22, 0xB2	; 178
    e570:	79 e3       	ldi	r23, 0x39	; 57
    e572:	ce 01       	movw	r24, r28
    e574:	88 5b       	subi	r24, 0xB8	; 184
    e576:	9f 4f       	sbci	r25, 0xFF	; 255
    e578:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e57c:	ae 01       	movw	r20, r28
    e57e:	48 5f       	subi	r20, 0xF8	; 248
    e580:	5e 4f       	sbci	r21, 0xFE	; 254
    e582:	be 01       	movw	r22, r28
    e584:	68 5b       	subi	r22, 0xB8	; 184
    e586:	7f 4f       	sbci	r23, 0xFF	; 255
    e588:	89 e7       	ldi	r24, 0x79	; 121
    e58a:	9e e0       	ldi	r25, 0x0E	; 14
    e58c:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    e590:	c8 5f       	subi	r28, 0xF8	; 248
    e592:	de 4f       	sbci	r29, 0xFE	; 254
    e594:	18 82       	st	Y, r1
    e596:	c8 50       	subi	r28, 0x08	; 8
    e598:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    e59a:	24 e0       	ldi	r18, 0x04	; 4
    e59c:	46 ea       	ldi	r20, 0xA6	; 166
    e59e:	5c e0       	ldi	r21, 0x0C	; 12
    e5a0:	6e e2       	ldi	r22, 0x2E	; 46
    e5a2:	ce 01       	movw	r24, r28
    e5a4:	88 5f       	subi	r24, 0xF8	; 248
    e5a6:	9e 4f       	sbci	r25, 0xFE	; 254
    e5a8:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    e5ac:	60 ea       	ldi	r22, 0xA0	; 160
    e5ae:	79 e3       	ldi	r23, 0x39	; 57
    e5b0:	ce 01       	movw	r24, r28
    e5b2:	88 5b       	subi	r24, 0xB8	; 184
    e5b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e5b6:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e5ba:	ae 01       	movw	r20, r28
    e5bc:	48 5f       	subi	r20, 0xF8	; 248
    e5be:	5e 4f       	sbci	r21, 0xFE	; 254
    e5c0:	be 01       	movw	r22, r28
    e5c2:	68 5b       	subi	r22, 0xB8	; 184
    e5c4:	7f 4f       	sbci	r23, 0xFF	; 255
    e5c6:	89 e7       	ldi	r24, 0x79	; 121
    e5c8:	9e e0       	ldi	r25, 0x0E	; 14
    e5ca:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    e5ce:	4a e0       	ldi	r20, 0x0A	; 10
    e5d0:	be 01       	movw	r22, r28
    e5d2:	68 5f       	subi	r22, 0xF8	; 248
    e5d4:	7e 4f       	sbci	r23, 0xFE	; 254
    e5d6:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <device+0x24>
    e5da:	90 91 ab 0c 	lds	r25, 0x0CAB	; 0x800cab <device+0x25>
    e5de:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    e5e2:	6e e8       	ldi	r22, 0x8E	; 142
    e5e4:	79 e3       	ldi	r23, 0x39	; 57
    e5e6:	ce 01       	movw	r24, r28
    e5e8:	88 5b       	subi	r24, 0xB8	; 184
    e5ea:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ec:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e5f0:	ae 01       	movw	r20, r28
    e5f2:	48 5f       	subi	r20, 0xF8	; 248
    e5f4:	5e 4f       	sbci	r21, 0xFE	; 254
    e5f6:	be 01       	movw	r22, r28
    e5f8:	68 5b       	subi	r22, 0xB8	; 184
    e5fa:	7f 4f       	sbci	r23, 0xFF	; 255
    e5fc:	89 e7       	ldi	r24, 0x79	; 121
    e5fe:	9e e0       	ldi	r25, 0x0E	; 14
    e600:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    e604:	6c e7       	ldi	r22, 0x7C	; 124
    e606:	79 e3       	ldi	r23, 0x39	; 57
    e608:	ce 01       	movw	r24, r28
    e60a:	88 5b       	subi	r24, 0xB8	; 184
    e60c:	9f 4f       	sbci	r25, 0xFF	; 255
    e60e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    e612:	4c ea       	ldi	r20, 0xAC	; 172
    e614:	5c e0       	ldi	r21, 0x0C	; 12
    e616:	be 01       	movw	r22, r28
    e618:	68 5b       	subi	r22, 0xB8	; 184
    e61a:	7f 4f       	sbci	r23, 0xFF	; 255
    e61c:	89 e7       	ldi	r24, 0x79	; 121
    e61e:	9e e0       	ldi	r25, 0x0E	; 14
    e620:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    e624:	6b e6       	ldi	r22, 0x6B	; 107
    e626:	79 e3       	ldi	r23, 0x39	; 57
    e628:	ce 01       	movw	r24, r28
    e62a:	88 5b       	subi	r24, 0xB8	; 184
    e62c:	9f 4f       	sbci	r25, 0xFF	; 255
    e62e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    e632:	40 ec       	ldi	r20, 0xC0	; 192
    e634:	5c e0       	ldi	r21, 0x0C	; 12
    e636:	be 01       	movw	r22, r28
    e638:	68 5b       	subi	r22, 0xB8	; 184
    e63a:	7f 4f       	sbci	r23, 0xFF	; 255
    e63c:	89 e7       	ldi	r24, 0x79	; 121
    e63e:	9e e0       	ldi	r25, 0x0E	; 14
    e640:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    e644:	6e e5       	ldi	r22, 0x5E	; 94
    e646:	79 e3       	ldi	r23, 0x39	; 57
    e648:	ce 01       	movw	r24, r28
    e64a:	88 5b       	subi	r24, 0xB8	; 184
    e64c:	9f 4f       	sbci	r25, 0xFF	; 255
    e64e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    e652:	4c e9       	ldi	r20, 0x9C	; 156
    e654:	5c e0       	ldi	r21, 0x0C	; 12
    e656:	be 01       	movw	r22, r28
    e658:	68 5b       	subi	r22, 0xB8	; 184
    e65a:	7f 4f       	sbci	r23, 0xFF	; 255
    e65c:	89 e7       	ldi	r24, 0x79	; 121
    e65e:	9e e0       	ldi	r25, 0x0E	; 14
    e660:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    e664:	64 e7       	ldi	r22, 0x74	; 116
    e666:	7a e3       	ldi	r23, 0x3A	; 58
    e668:	c5 01       	movw	r24, r10
    e66a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
  strcat(str1, device.nazev);
    e66e:	6c e9       	ldi	r22, 0x9C	; 156
    e670:	7c e0       	ldi	r23, 0x0C	; 12
    e672:	c5 01       	movw	r24, r10
    e674:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826
  strcat(str1, "/network/set/");
    e678:	6d ea       	ldi	r22, 0xAD	; 173
    e67a:	75 e0       	ldi	r23, 0x05	; 5
    e67c:	c5 01       	movw	r24, r10
    e67e:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e682:	f5 01       	movw	r30, r10
    e684:	01 90       	ld	r0, Z+
    e686:	00 20       	and	r0, r0
    e688:	e9 f7       	brne	.-6      	; 0xe684 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17fa>
    e68a:	31 97       	sbiw	r30, 0x01	; 1
    e68c:	af 01       	movw	r20, r30
    e68e:	4a 19       	sub	r20, r10
    e690:	5b 09       	sbc	r21, r11
    e692:	b4 01       	movw	r22, r8
    e694:	c5 01       	movw	r24, r10
    e696:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    e69a:	89 2b       	or	r24, r25
    e69c:	09 f0       	breq	.+2      	; 0xe6a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1816>
    e69e:	f1 c0       	rjmp	.+482    	; 0xe882 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3829
  {
    mqtt_process_message++;
    e6a0:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    e6a4:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    e6a8:	01 96       	adiw	r24, 0x01	; 1
    e6aa:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    e6ae:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6b2:	f5 01       	movw	r30, r10
    e6b4:	01 90       	ld	r0, Z+
    e6b6:	00 20       	and	r0, r0
    e6b8:	e9 f7       	brne	.-6      	; 0xe6b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x182a>
    e6ba:	31 97       	sbiw	r30, 0x01	; 1
    e6bc:	ea 19       	sub	r30, r10
    e6be:	fb 09       	sbc	r31, r11
    e6c0:	9e 2f       	mov	r25, r30
    e6c2:	4e 2f       	mov	r20, r30
    e6c4:	84 2f       	mov	r24, r20
    e6c6:	89 1b       	sub	r24, r25
    e6c8:	24 2f       	mov	r18, r20
    e6ca:	30 e0       	ldi	r19, 0x00	; 0
    e6cc:	d4 01       	movw	r26, r8
    e6ce:	0d 90       	ld	r0, X+
    e6d0:	00 20       	and	r0, r0
    e6d2:	e9 f7       	brne	.-6      	; 0xe6ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x1844>
    e6d4:	11 97       	sbiw	r26, 0x01	; 1
    e6d6:	a8 19       	sub	r26, r8
    e6d8:	b9 09       	sbc	r27, r9
    e6da:	2a 17       	cp	r18, r26
    e6dc:	3b 07       	cpc	r19, r27
    e6de:	88 f4       	brcc	.+34     	; 0xe702 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1878>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833
    {
      str1[cnt] = topic[f];
    e6e0:	d5 01       	movw	r26, r10
    e6e2:	a8 0f       	add	r26, r24
    e6e4:	b1 1d       	adc	r27, r1
    e6e6:	28 0d       	add	r18, r8
    e6e8:	39 1d       	adc	r19, r9
    e6ea:	f9 01       	movw	r30, r18
    e6ec:	80 81       	ld	r24, Z
    e6ee:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3834
      str1[cnt + 1] = 0;
    e6f0:	11 96       	adiw	r26, 0x01	; 1
    e6f2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6f4:	4f 5f       	subi	r20, 0xFF	; 255
    e6f6:	e6 cf       	rjmp	.-52     	; 0xe6c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x183a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    e6f8:	87 e8       	ldi	r24, 0x87	; 135
    e6fa:	95 e0       	ldi	r25, 0x05	; 5
    e6fc:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
    e700:	64 ce       	rjmp	.-824    	; 0xe3ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1540>
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    e702:	68 ee       	ldi	r22, 0xE8	; 232
    e704:	73 e0       	ldi	r23, 0x03	; 3
    e706:	c5 01       	movw	r24, r10
    e708:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e70c:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    e70e:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    e710:	e1 14       	cp	r14, r1
    e712:	f1 04       	cpc	r15, r1
    e714:	09 f4       	brne	.+2      	; 0xe718 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188e>
    e716:	a9 c0       	rjmp	.+338    	; 0xe86a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    e718:	6b eb       	ldi	r22, 0xBB	; 187
    e71a:	75 e0       	ldi	r23, 0x05	; 5
    e71c:	c7 01       	movw	r24, r14
    e71e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e722:	89 2b       	or	r24, r25
    e724:	41 f4       	brne	.+16     	; 0xe736 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ac>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    e726:	46 e0       	ldi	r20, 0x06	; 6
    e728:	50 e0       	ldi	r21, 0x00	; 0
    e72a:	66 e8       	ldi	r22, 0x86	; 134
    e72c:	7c e0       	ldi	r23, 0x0C	; 12
    e72e:	8a e3       	ldi	r24, 0x3A	; 58
    e730:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    e734:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    e736:	6f eb       	ldi	r22, 0xBF	; 191
    e738:	75 e0       	ldi	r23, 0x05	; 5
    e73a:	c7 01       	movw	r24, r14
    e73c:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e740:	89 2b       	or	r24, r25
    e742:	41 f4       	brne	.+16     	; 0xe754 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ca>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    e744:	44 e0       	ldi	r20, 0x04	; 4
    e746:	50 e0       	ldi	r21, 0x00	; 0
    e748:	6c e8       	ldi	r22, 0x8C	; 140
    e74a:	7c e0       	ldi	r23, 0x0C	; 12
    e74c:	8e e2       	ldi	r24, 0x2E	; 46
    e74e:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    e752:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    e754:	62 ec       	ldi	r22, 0xC2	; 194
    e756:	75 e0       	ldi	r23, 0x05	; 5
    e758:	c7 01       	movw	r24, r14
    e75a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e75e:	89 2b       	or	r24, r25
    e760:	41 f4       	brne	.+16     	; 0xe772 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e8>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    e762:	44 e0       	ldi	r20, 0x04	; 4
    e764:	50 e0       	ldi	r21, 0x00	; 0
    e766:	60 e9       	ldi	r22, 0x90	; 144
    e768:	7c e0       	ldi	r23, 0x0C	; 12
    e76a:	8e e2       	ldi	r24, 0x2E	; 46
    e76c:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    e770:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    e772:	6a ec       	ldi	r22, 0xCA	; 202
    e774:	75 e0       	ldi	r23, 0x05	; 5
    e776:	c7 01       	movw	r24, r14
    e778:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e77c:	89 2b       	or	r24, r25
    e77e:	41 f4       	brne	.+16     	; 0xe790 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    e780:	44 e0       	ldi	r20, 0x04	; 4
    e782:	50 e0       	ldi	r21, 0x00	; 0
    e784:	68 e9       	ldi	r22, 0x98	; 152
    e786:	7c e0       	ldi	r23, 0x0C	; 12
    e788:	8e e2       	ldi	r24, 0x2E	; 46
    e78a:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    e78e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    e790:	6d ec       	ldi	r22, 0xCD	; 205
    e792:	75 e0       	ldi	r23, 0x05	; 5
    e794:	c7 01       	movw	r24, r14
    e796:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e79a:	89 2b       	or	r24, r25
    e79c:	41 f4       	brne	.+16     	; 0xe7ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1924>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    e79e:	44 e0       	ldi	r20, 0x04	; 4
    e7a0:	50 e0       	ldi	r21, 0x00	; 0
    e7a2:	64 e9       	ldi	r22, 0x94	; 148
    e7a4:	7c e0       	ldi	r23, 0x0C	; 12
    e7a6:	8e e2       	ldi	r24, 0x2E	; 46
    e7a8:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    e7ac:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    e7ae:	61 ed       	ldi	r22, 0xD1	; 209
    e7b0:	75 e0       	ldi	r23, 0x05	; 5
    e7b2:	c7 01       	movw	r24, r14
    e7b4:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e7b8:	89 2b       	or	r24, r25
    e7ba:	41 f4       	brne	.+16     	; 0xe7cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1942>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    e7bc:	44 e0       	ldi	r20, 0x04	; 4
    e7be:	50 e0       	ldi	r21, 0x00	; 0
    e7c0:	64 ed       	ldi	r22, 0xD4	; 212
    e7c2:	7c e0       	ldi	r23, 0x0C	; 12
    e7c4:	8e e2       	ldi	r24, 0x2E	; 46
    e7c6:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    e7ca:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    e7cc:	65 ed       	ldi	r22, 0xD5	; 213
    e7ce:	75 e0       	ldi	r23, 0x05	; 5
    e7d0:	c7 01       	movw	r24, r14
    e7d2:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e7d6:	89 2b       	or	r24, r25
    e7d8:	41 f4       	brne	.+16     	; 0xe7ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1960>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    e7da:	44 e0       	ldi	r20, 0x04	; 4
    e7dc:	50 e0       	ldi	r21, 0x00	; 0
    e7de:	66 ea       	ldi	r22, 0xA6	; 166
    e7e0:	7c e0       	ldi	r23, 0x0C	; 12
    e7e2:	8e e2       	ldi	r24, 0x2E	; 46
    e7e4:	0e 94 b5 8f 	call	0x11f6a	; 0x11f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    e7e8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    e7ea:	6f ed       	ldi	r22, 0xDF	; 223
    e7ec:	75 e0       	ldi	r23, 0x05	; 5
    e7ee:	c7 01       	movw	r24, r14
    e7f0:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e7f4:	89 2b       	or	r24, r25
    e7f6:	49 f4       	brne	.+18     	; 0xe80a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1980>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    e7f8:	82 e4       	ldi	r24, 0x42	; 66
    e7fa:	9b e0       	ldi	r25, 0x0B	; 11
    e7fc:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e800:	90 93 ab 0c 	sts	0x0CAB, r25	; 0x800cab <device+0x25>
    e804:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    e808:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    e80a:	69 ee       	ldi	r22, 0xE9	; 233
    e80c:	75 e0       	ldi	r23, 0x05	; 5
    e80e:	c7 01       	movw	r24, r14
    e810:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e814:	89 2b       	or	r24, r25
    e816:	39 f4       	brne	.+14     	; 0xe826 <mqtt_callback(char*, unsigned char*, unsigned int)+0x199c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    e818:	62 e4       	ldi	r22, 0x42	; 66
    e81a:	7b e0       	ldi	r23, 0x0B	; 11
    e81c:	8c ea       	ldi	r24, 0xAC	; 172
    e81e:	9c e0       	ldi	r25, 0x0C	; 12
    e820:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    e824:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    e826:	63 ef       	ldi	r22, 0xF3	; 243
    e828:	75 e0       	ldi	r23, 0x05	; 5
    e82a:	c7 01       	movw	r24, r14
    e82c:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e830:	89 2b       	or	r24, r25
    e832:	39 f4       	brne	.+14     	; 0xe842 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b8>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    e834:	62 e4       	ldi	r22, 0x42	; 66
    e836:	7b e0       	ldi	r23, 0x0B	; 11
    e838:	80 ec       	ldi	r24, 0xC0	; 192
    e83a:	9c e0       	ldi	r25, 0x0C	; 12
    e83c:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    e840:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    e842:	61 ec       	ldi	r22, 0xC1	; 193
    e844:	73 e0       	ldi	r23, 0x03	; 3
    e846:	c7 01       	movw	r24, r14
    e848:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    e84c:	89 2b       	or	r24, r25
    e84e:	29 f4       	brne	.+10     	; 0xe85a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    e850:	82 e4       	ldi	r24, 0x42	; 66
    e852:	9b e0       	ldi	r25, 0x0B	; 11
    e854:	0e 94 96 58 	call	0xb12c	; 0xb12c <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    e858:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    e85a:	68 ee       	ldi	r22, 0xE8	; 232
    e85c:	73 e0       	ldi	r23, 0x03	; 3
    e85e:	90 e0       	ldi	r25, 0x00	; 0
    e860:	80 e0       	ldi	r24, 0x00	; 0
    e862:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e866:	7c 01       	movw	r14, r24
    e868:	53 cf       	rjmp	.-346    	; 0xe710 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1886>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    e86a:	11 30       	cpi	r17, 0x01	; 1
    e86c:	41 f4       	brne	.+16     	; 0xe87e <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
    {
      save_setup_network();
    e86e:	0e 94 be 58 	call	0xb17c	; 0xb17c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    e872:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
    e876:	80 68       	ori	r24, 0x80	; 128
    e878:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <selftest_data>
    e87c:	02 c0       	rjmp	.+4      	; 0xe882 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    e87e:	12 30       	cpi	r17, 0x02	; 2
    e880:	c1 f3       	breq	.-16     	; 0xe872 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    e882:	64 e7       	ldi	r22, 0x74	; 116
    e884:	7a e3       	ldi	r23, 0x3A	; 58
    e886:	c5 01       	movw	r24, r10
    e888:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851
  strcat(str1, device.nazev);
    e88c:	6c e9       	ldi	r22, 0x9C	; 156
    e88e:	7c e0       	ldi	r23, 0x0C	; 12
    e890:	c5 01       	movw	r24, r10
    e892:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852
  strcat(str1, "/light/set/");
    e896:	6d ef       	ldi	r22, 0xFD	; 253
    e898:	75 e0       	ldi	r23, 0x05	; 5
    e89a:	c5 01       	movw	r24, r10
    e89c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e8a0:	f5 01       	movw	r30, r10
    e8a2:	01 90       	ld	r0, Z+
    e8a4:	00 20       	and	r0, r0
    e8a6:	e9 f7       	brne	.-6      	; 0xe8a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a18>
    e8a8:	31 97       	sbiw	r30, 0x01	; 1
    e8aa:	af 01       	movw	r20, r30
    e8ac:	4a 19       	sub	r20, r10
    e8ae:	5b 09       	sbc	r21, r11
    e8b0:	b4 01       	movw	r22, r8
    e8b2:	c5 01       	movw	r24, r10
    e8b4:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    e8b8:	89 2b       	or	r24, r25
    e8ba:	09 f0       	breq	.+2      	; 0xe8be <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a34>
    e8bc:	41 c0       	rjmp	.+130    	; 0xe940 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
  {
    mqtt_process_message++;
    e8be:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    e8c2:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    e8c6:	01 96       	adiw	r24, 0x01	; 1
    e8c8:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    e8cc:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e8d0:	f5 01       	movw	r30, r10
    e8d2:	01 90       	ld	r0, Z+
    e8d4:	00 20       	and	r0, r0
    e8d6:	e9 f7       	brne	.-6      	; 0xe8d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a48>
    e8d8:	31 97       	sbiw	r30, 0x01	; 1
    e8da:	ea 19       	sub	r30, r10
    e8dc:	fb 09       	sbc	r31, r11
    e8de:	9e 2f       	mov	r25, r30
    e8e0:	4e 2f       	mov	r20, r30
    e8e2:	84 2f       	mov	r24, r20
    e8e4:	89 1b       	sub	r24, r25
    e8e6:	24 2f       	mov	r18, r20
    e8e8:	30 e0       	ldi	r19, 0x00	; 0
    e8ea:	d4 01       	movw	r26, r8
    e8ec:	0d 90       	ld	r0, X+
    e8ee:	00 20       	and	r0, r0
    e8f0:	e9 f7       	brne	.-6      	; 0xe8ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a62>
    e8f2:	11 97       	sbiw	r26, 0x01	; 1
    e8f4:	a8 19       	sub	r26, r8
    e8f6:	b9 09       	sbc	r27, r9
    e8f8:	2a 17       	cp	r18, r26
    e8fa:	3b 07       	cpc	r19, r27
    e8fc:	60 f4       	brcc	.+24     	; 0xe916 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
    {
      str1[cnt] = topic[f];
    e8fe:	d5 01       	movw	r26, r10
    e900:	a8 0f       	add	r26, r24
    e902:	b1 1d       	adc	r27, r1
    e904:	28 0d       	add	r18, r8
    e906:	39 1d       	adc	r19, r9
    e908:	f9 01       	movw	r30, r18
    e90a:	80 81       	ld	r24, Z
    e90c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      str1[cnt + 1] = 0;
    e90e:	11 96       	adiw	r26, 0x01	; 1
    e910:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e912:	4f 5f       	subi	r20, 0xFF	; 255
    e914:	e6 cf       	rjmp	.-52     	; 0xe8e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e916:	68 ee       	ldi	r22, 0xE8	; 232
    e918:	73 e0       	ldi	r23, 0x03	; 3
    e91a:	c5 01       	movw	r24, r10
    e91c:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e920:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
    pch = strtok (str1, "/");
    while (pch != NULL)
    e922:	00 97       	sbiw	r24, 0x00	; 0
    e924:	69 f0       	breq	.+26     	; 0xe940 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
    {
      if (cnt == 0) id = atoi(pch);
    e926:	11 11       	cpse	r17, r1
    e928:	03 c0       	rjmp	.+6      	; 0xe930 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
    e92a:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e92e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3871
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    e930:	68 ee       	ldi	r22, 0xE8	; 232
    e932:	73 e0       	ldi	r23, 0x03	; 3
    e934:	90 e0       	ldi	r25, 0x00	; 0
    e936:	80 e0       	ldi	r24, 0x00	; 0
    e938:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
      cnt++;
    e93c:	1f 5f       	subi	r17, 0xFF	; 255
    e93e:	f1 cf       	rjmp	.-30     	; 0xe922 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    e940:	68 e2       	ldi	r22, 0x28	; 40
    e942:	7a e3       	ldi	r23, 0x3A	; 58
    e944:	c5 01       	movw	r24, r10
    e946:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
  strcat(str1, "output/");
    e94a:	69 e0       	ldi	r22, 0x09	; 9
    e94c:	76 e0       	ldi	r23, 0x06	; 6
    e94e:	c5 01       	movw	r24, r10
    e950:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e954:	f5 01       	movw	r30, r10
    e956:	01 90       	ld	r0, Z+
    e958:	00 20       	and	r0, r0
    e95a:	e9 f7       	brne	.-6      	; 0xe956 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1acc>
    e95c:	31 97       	sbiw	r30, 0x01	; 1
    e95e:	af 01       	movw	r20, r30
    e960:	4a 19       	sub	r20, r10
    e962:	5b 09       	sbc	r21, r11
    e964:	b4 01       	movw	r22, r8
    e966:	c5 01       	movw	r24, r10
    e968:	0e 94 d2 bd 	call	0x17ba4	; 0x17ba4 <strncmp>
    e96c:	89 2b       	or	r24, r25
    e96e:	09 f0       	breq	.+2      	; 0xe972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ae8>
    e970:	73 c0       	rjmp	.+230    	; 0xea58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881
  {
    mqtt_process_message++;
    e972:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    e976:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    e97a:	01 96       	adiw	r24, 0x01	; 1
    e97c:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    e980:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e984:	f5 01       	movw	r30, r10
    e986:	01 90       	ld	r0, Z+
    e988:	00 20       	and	r0, r0
    e98a:	e9 f7       	brne	.-6      	; 0xe986 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1afc>
    e98c:	31 97       	sbiw	r30, 0x01	; 1
    e98e:	ea 19       	sub	r30, r10
    e990:	fb 09       	sbc	r31, r11
    e992:	9e 2f       	mov	r25, r30
    e994:	4e 2f       	mov	r20, r30
    e996:	84 2f       	mov	r24, r20
    e998:	89 1b       	sub	r24, r25
    e99a:	24 2f       	mov	r18, r20
    e99c:	30 e0       	ldi	r19, 0x00	; 0
    e99e:	d4 01       	movw	r26, r8
    e9a0:	0d 90       	ld	r0, X+
    e9a2:	00 20       	and	r0, r0
    e9a4:	e9 f7       	brne	.-6      	; 0xe9a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b16>
    e9a6:	11 97       	sbiw	r26, 0x01	; 1
    e9a8:	a8 19       	sub	r26, r8
    e9aa:	b9 09       	sbc	r27, r9
    e9ac:	2a 17       	cp	r18, r26
    e9ae:	3b 07       	cpc	r19, r27
    e9b0:	60 f4       	brcc	.+24     	; 0xe9ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
    {
      str1[cnt] = topic[f];
    e9b2:	d5 01       	movw	r26, r10
    e9b4:	a8 0f       	add	r26, r24
    e9b6:	b1 1d       	adc	r27, r1
    e9b8:	28 0d       	add	r18, r8
    e9ba:	39 1d       	adc	r19, r9
    e9bc:	f9 01       	movw	r30, r18
    e9be:	80 81       	ld	r24, Z
    e9c0:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3886
      str1[cnt + 1] = 0;
    e9c2:	11 96       	adiw	r26, 0x01	; 1
    e9c4:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e9c6:	4f 5f       	subi	r20, 0xFF	; 255
    e9c8:	e6 cf       	rjmp	.-52     	; 0xe996 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3890
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e9ca:	68 ee       	ldi	r22, 0xE8	; 232
    e9cc:	73 e0       	ldi	r23, 0x03	; 3
    e9ce:	c5 01       	movw	r24, r10
    e9d0:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e9d4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3889
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e9d6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3891
    pch = strtok (str1, "/");
    while (pch != NULL)
    e9d8:	01 15       	cp	r16, r1
    e9da:	11 05       	cpc	r17, r1
    e9dc:	e9 f1       	breq	.+122    	; 0xea58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3893
    {
      if (cnt == 0) id = atoi(pch);
    e9de:	f1 10       	cpse	r15, r1
    e9e0:	0d c0       	rjmp	.+26     	; 0xe9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b72>
    e9e2:	c8 01       	movw	r24, r16
    e9e4:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    e9e8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3904
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    e9ea:	68 ee       	ldi	r22, 0xE8	; 232
    e9ec:	73 e0       	ldi	r23, 0x03	; 3
    e9ee:	90 e0       	ldi	r25, 0x00	; 0
    e9f0:	80 e0       	ldi	r24, 0x00	; 0
    e9f2:	0e 94 4c b1 	call	0x16298	; 0x16298 <strtok>
    e9f6:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3905
      cnt++;
    e9f8:	f3 94       	inc	r15
    e9fa:	ee cf       	rjmp	.-36     	; 0xe9d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    e9fc:	f1 e0       	ldi	r31, 0x01	; 1
    e9fe:	ff 12       	cpse	r15, r31
    ea00:	f4 cf       	rjmp	.-24     	; 0xe9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    ea02:	8f e5       	ldi	r24, 0x5F	; 95
    ea04:	c8 2e       	mov	r12, r24
    ea06:	dd 24       	eor	r13, r13
    ea08:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    ea0a:	c6 01       	movw	r24, r12
    ea0c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    ea10:	78 12       	cpse	r7, r24
    ea12:	19 c0       	rjmp	.+50     	; 0xea46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    ea14:	61 e1       	ldi	r22, 0x11	; 17
    ea16:	76 e0       	ldi	r23, 0x06	; 6
    ea18:	c8 01       	movw	r24, r16
    ea1a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    ea1e:	89 2b       	or	r24, r25
    ea20:	29 f0       	breq	.+10     	; 0xea2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba2>
    ea22:	e7 2d       	mov	r30, r7
    ea24:	f0 e0       	ldi	r31, 0x00	; 0
    ea26:	e5 58       	subi	r30, 0x85	; 133
    ea28:	f5 4f       	sbci	r31, 0xF5	; 245
    ea2a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    ea2c:	65 e1       	ldi	r22, 0x15	; 21
    ea2e:	76 e0       	ldi	r23, 0x06	; 6
    ea30:	c8 01       	movw	r24, r16
    ea32:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    ea36:	89 2b       	or	r24, r25
    ea38:	c1 f2       	breq	.-80     	; 0xe9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    ea3a:	e7 2d       	mov	r30, r7
    ea3c:	f0 e0       	ldi	r31, 0x00	; 0
    ea3e:	e5 58       	subi	r30, 0x85	; 133
    ea40:	f5 4f       	sbci	r31, 0xF5	; 245
    ea42:	10 82       	st	Z, r1
    ea44:	d2 cf       	rjmp	.-92     	; 0xe9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
    ea46:	21 e2       	ldi	r18, 0x21	; 33
    ea48:	c2 0e       	add	r12, r18
    ea4a:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    ea4c:	84 e0       	ldi	r24, 0x04	; 4
    ea4e:	c8 16       	cp	r12, r24
    ea50:	82 e0       	ldi	r24, 0x02	; 2
    ea52:	d8 06       	cpc	r13, r24
    ea54:	d1 f6       	brne	.-76     	; 0xea0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b80>
    ea56:	c9 cf       	rjmp	.-110    	; 0xe9ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    ea58:	64 e7       	ldi	r22, 0x74	; 116
    ea5a:	7a e3       	ldi	r23, 0x3A	; 58
    ea5c:	c5 01       	movw	r24, r10
    ea5e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3911
  strcat(str1, device.nazev);
    ea62:	6c e9       	ldi	r22, 0x9C	; 156
    ea64:	7c e0       	ldi	r23, 0x0C	; 12
    ea66:	c5 01       	movw	r24, r10
    ea68:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3912
  strcat(str1, "/reload");
    ea6c:	6b e1       	ldi	r22, 0x1B	; 27
    ea6e:	76 e0       	ldi	r23, 0x06	; 6
    ea70:	c5 01       	movw	r24, r10
    ea72:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
  if (strcmp(str1, topic) == 0)
    ea76:	b4 01       	movw	r22, r8
    ea78:	c5 01       	movw	r24, r10
    ea7a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    ea7e:	8c 01       	movw	r16, r24
    ea80:	89 2b       	or	r24, r25
    ea82:	79 f4       	brne	.+30     	; 0xeaa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
  {
    mqtt_process_message++;
    ea84:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    ea88:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    ea8c:	01 96       	adiw	r24, 0x01	; 1
    ea8e:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    ea92:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
    log_error(&mqtt_client, "reload ..... ");
    ea96:	83 e2       	ldi	r24, 0x23	; 35
    ea98:	96 e0       	ldi	r25, 0x06	; 6
    ea9a:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
    resetFunc();
    ea9e:	f8 01       	movw	r30, r16
    eaa0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3921
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    eaa2:	64 e7       	ldi	r22, 0x74	; 116
    eaa4:	7a e3       	ldi	r23, 0x3A	; 58
    eaa6:	c5 01       	movw	r24, r10
    eaa8:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
  strcat(str1, device.nazev);
    eaac:	6c e9       	ldi	r22, 0x9C	; 156
    eaae:	7c e0       	ldi	r23, 0x0C	; 12
    eab0:	c5 01       	movw	r24, r10
    eab2:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
  strcat(str1, "/bootloader");
    eab6:	61 e3       	ldi	r22, 0x31	; 49
    eab8:	76 e0       	ldi	r23, 0x06	; 6
    eaba:	c5 01       	movw	r24, r10
    eabc:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3924
  if (strcmp(str1, topic) == 0)
    eac0:	b4 01       	movw	r22, r8
    eac2:	c5 01       	movw	r24, r10
    eac4:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    eac8:	89 2b       	or	r24, r25
    eaca:	e9 f4       	brne	.+58     	; 0xeb06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3926
  {
    mqtt_process_message++;
    eacc:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    ead0:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    ead4:	01 96       	adiw	r24, 0x01	; 1
    ead6:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    eada:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3927
    log_error(&mqtt_client, "bootloader ..... ");
    eade:	8d e3       	ldi	r24, 0x3D	; 61
    eae0:	96 e0       	ldi	r25, 0x06	; 6
    eae2:	0e 94 8f 8f 	call	0x11f1e	; 0x11f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3928
    EEPROM.write(bootloader_tag, 255);
    eae6:	6f ef       	ldi	r22, 0xFF	; 255
    eae8:	90 e0       	ldi	r25, 0x00	; 0
    eaea:	80 e0       	ldi	r24, 0x00	; 0
    eaec:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    eaf0:	88 e1       	ldi	r24, 0x18	; 24
    eaf2:	9e e0       	ldi	r25, 0x0E	; 14
    eaf4:	0f b6       	in	r0, 0x3f	; 63
    eaf6:	f8 94       	cli
    eaf8:	a8 95       	wdr
    eafa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    eafe:	0f be       	out	0x3f, r0	; 63
    eb00:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    eb04:	ff cf       	rjmp	.-2      	; 0xeb04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    eb06:	64 e7       	ldi	r22, 0x74	; 116
    eb08:	7a e3       	ldi	r23, 0x3A	; 58
    eb0a:	c5 01       	movw	r24, r10
    eb0c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
  strcat(str1, device.nazev);
    eb10:	6c e9       	ldi	r22, 0x9C	; 156
    eb12:	7c e0       	ldi	r23, 0x0C	; 12
    eb14:	c5 01       	movw	r24, r10
    eb16:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
  strcat(str1, "/default");
    eb1a:	6d e2       	ldi	r22, 0x2D	; 45
    eb1c:	75 e0       	ldi	r23, 0x05	; 5
    eb1e:	c5 01       	movw	r24, r10
    eb20:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
  if (strcmp(str1, topic) == 0)
    eb24:	b4 01       	movw	r22, r8
    eb26:	c5 01       	movw	r24, r10
    eb28:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <strcmp>
    eb2c:	89 2b       	or	r24, r25
    eb2e:	91 f4       	brne	.+36     	; 0xeb54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
  {
    mqtt_process_message++;
    eb30:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
    eb34:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
    eb38:	01 96       	adiw	r24, 0x01	; 1
    eb3a:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <mqtt_process_message+0x1>
    eb3e:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    eb42:	82 e4       	ldi	r24, 0x42	; 66
    eb44:	9b e0       	ldi	r25, 0x0B	; 11
    eb46:	0e 94 13 b1 	call	0x16226	; 0x16226 <atoi>
    eb4a:	68 2f       	mov	r22, r24
    eb4c:	8a e5       	ldi	r24, 0x5A	; 90
    eb4e:	90 e0       	ldi	r25, 0x00	; 0
    eb50:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
  }

}
    eb54:	c4 5d       	subi	r28, 0xD4	; 212
    eb56:	de 4f       	sbci	r29, 0xFE	; 254
    eb58:	0f b6       	in	r0, 0x3f	; 63
    eb5a:	f8 94       	cli
    eb5c:	de bf       	out	0x3e, r29	; 62
    eb5e:	0f be       	out	0x3f, r0	; 63
    eb60:	cd bf       	out	0x3d, r28	; 61
    eb62:	df 91       	pop	r29
    eb64:	cf 91       	pop	r28
    eb66:	1f 91       	pop	r17
    eb68:	0f 91       	pop	r16
    eb6a:	ff 90       	pop	r15
    eb6c:	ef 90       	pop	r14
    eb6e:	df 90       	pop	r13
    eb70:	cf 90       	pop	r12
    eb72:	bf 90       	pop	r11
    eb74:	af 90       	pop	r10
    eb76:	9f 90       	pop	r9
    eb78:	8f 90       	pop	r8
    eb7a:	7f 90       	pop	r7
    eb7c:	6f 90       	pop	r6
    eb7e:	5f 90       	pop	r5
    eb80:	4f 90       	pop	r4
    eb82:	3f 90       	pop	r3
    eb84:	2f 90       	pop	r2
    eb86:	08 95       	ret

0000eb88 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    eb88:	0f 93       	push	r16
    eb8a:	1f 93       	push	r17
    eb8c:	cf 93       	push	r28
    eb8e:	df 93       	push	r29
    eb90:	cd b7       	in	r28, 0x3d	; 61
    eb92:	de b7       	in	r29, 0x3e	; 62
    eb94:	a5 97       	sbiw	r28, 0x25	; 37
    eb96:	0f b6       	in	r0, 0x3f	; 63
    eb98:	f8 94       	cli
    eb9a:	de bf       	out	0x3e, r29	; 62
    eb9c:	0f be       	out	0x3f, r0	; 63
    eb9e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3954
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    eba0:	ce 01       	movw	r24, r28
    eba2:	4b 96       	adiw	r24, 0x1b	; 27
    eba4:	0e 94 8d 61 	call	0xc31a	; 0xc31a <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
  if (!mqtt_client.connected())
    eba8:	89 e7       	ldi	r24, 0x79	; 121
    ebaa:	9e e0       	ldi	r25, 0x0E	; 14
    ebac:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
    ebb0:	81 11       	cpse	r24, r1
    ebb2:	97 c0       	rjmp	.+302    	; 0xece2 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    ebb4:	89 e7       	ldi	r24, 0x79	; 121
    ebb6:	9e e0       	ldi	r25, 0x0E	; 14
    ebb8:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
    ebbc:	81 11       	cpse	r24, r1
    ebbe:	d0 c0       	rjmp	.+416    	; 0xed60 <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    ebc0:	60 91 8e 10 	lds	r22, 0x108E	; 0x80108e <mqtt_client+0x215>
    ebc4:	70 91 8f 10 	lds	r23, 0x108F	; 0x80108f <mqtt_client+0x216>
    ebc8:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
    ebcc:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
    ebd0:	dc 01       	movw	r26, r24
    ebd2:	ed 91       	ld	r30, X+
    ebd4:	fc 91       	ld	r31, X
    ebd6:	40 91 90 10 	lds	r20, 0x1090	; 0x801090 <mqtt_client+0x217>
    ebda:	50 91 91 10 	lds	r21, 0x1091	; 0x801091 <mqtt_client+0x218>
    ebde:	61 15       	cp	r22, r1
    ebe0:	71 05       	cpc	r23, r1
    ebe2:	09 f4       	brne	.+2      	; 0xebe6 <mqtt_reconnect()+0x5e>
    ebe4:	8b c0       	rjmp	.+278    	; 0xecfc <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    ebe6:	00 88       	ldd	r0, Z+16	; 0x10
    ebe8:	f1 89       	ldd	r31, Z+17	; 0x11
    ebea:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    ebec:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    ebee:	81 30       	cpi	r24, 0x01	; 1
    ebf0:	91 05       	cpc	r25, r1
    ebf2:	09 f0       	breq	.+2      	; 0xebf6 <mqtt_reconnect()+0x6e>
    ebf4:	12 c1       	rjmp	.+548    	; 0xee1a <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    ebf6:	90 93 7c 10 	sts	0x107C, r25	; 0x80107c <mqtt_client+0x203>
    ebfa:	80 93 7b 10 	sts	0x107B, r24	; 0x80107b <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    ebfe:	87 e0       	ldi	r24, 0x07	; 7
    ec00:	e6 e1       	ldi	r30, 0x16	; 22
    ec02:	f2 e0       	ldi	r31, 0x02	; 2
    ec04:	de 01       	movw	r26, r28
    ec06:	11 96       	adiw	r26, 0x01	; 1
    ec08:	01 90       	ld	r0, Z+
    ec0a:	0d 92       	st	X+, r0
    ec0c:	8a 95       	dec	r24
    ec0e:	e1 f7       	brne	.-8      	; 0xec08 <mqtt_reconnect()+0x80>
    ec10:	fe 01       	movw	r30, r28
    ec12:	31 96       	adiw	r30, 0x01	; 1
    ec14:	a0 e8       	ldi	r26, 0x80	; 128
    ec16:	be e0       	ldi	r27, 0x0E	; 14
    ec18:	ce 01       	movw	r24, r28
    ec1a:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    ec1c:	21 91       	ld	r18, Z+
    ec1e:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    ec20:	8e 17       	cp	r24, r30
    ec22:	9f 07       	cpc	r25, r31
    ec24:	d9 f7       	brne	.-10     	; 0xec1c <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    ec26:	82 e0       	ldi	r24, 0x02	; 2
    ec28:	80 93 87 0e 	sts	0x0E87, r24	; 0x800e87 <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    ec2c:	10 92 88 0e 	sts	0x0E88, r1	; 0x800e88 <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    ec30:	8f e0       	ldi	r24, 0x0F	; 15
    ec32:	80 93 89 0e 	sts	0x0E89, r24	; 0x800e89 <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    ec36:	4f e0       	ldi	r20, 0x0F	; 15
    ec38:	50 e0       	ldi	r21, 0x00	; 0
    ec3a:	6b e7       	ldi	r22, 0x7B	; 123
    ec3c:	7e e0       	ldi	r23, 0x0E	; 14
    ec3e:	ce 01       	movw	r24, r28
    ec40:	4b 96       	adiw	r24, 0x1b	; 27
    ec42:	0e 94 d1 8b 	call	0x117a2	; 0x117a2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    ec46:	9c 01       	movw	r18, r24
    ec48:	25 50       	subi	r18, 0x05	; 5
    ec4a:	31 09       	sbc	r19, r1
    ec4c:	4b e7       	ldi	r20, 0x7B	; 123
    ec4e:	5e e0       	ldi	r21, 0x0E	; 14
    ec50:	60 e1       	ldi	r22, 0x10	; 16
    ec52:	89 e7       	ldi	r24, 0x79	; 121
    ec54:	9e e0       	ldi	r25, 0x0E	; 14
    ec56:	0e 94 d9 9b 	call	0x137b2	; 0x137b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    ec5a:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    ec5e:	60 93 7d 10 	sts	0x107D, r22	; 0x80107d <mqtt_client+0x204>
    ec62:	70 93 7e 10 	sts	0x107E, r23	; 0x80107e <mqtt_client+0x205>
    ec66:	80 93 7f 10 	sts	0x107F, r24	; 0x80107f <mqtt_client+0x206>
    ec6a:	90 93 80 10 	sts	0x1080, r25	; 0x801080 <mqtt_client+0x207>
    ec6e:	60 93 81 10 	sts	0x1081, r22	; 0x801081 <mqtt_client+0x208>
    ec72:	70 93 82 10 	sts	0x1082, r23	; 0x801082 <mqtt_client+0x209>
    ec76:	80 93 83 10 	sts	0x1083, r24	; 0x801083 <mqtt_client+0x20a>
    ec7a:	90 93 84 10 	sts	0x1084, r25	; 0x801084 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    ec7e:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
    ec82:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
    ec86:	dc 01       	movw	r26, r24
    ec88:	ed 91       	ld	r30, X+
    ec8a:	fc 91       	ld	r31, X
    ec8c:	00 84       	ldd	r0, Z+8	; 0x08
    ec8e:	f1 85       	ldd	r31, Z+9	; 0x09
    ec90:	e0 2d       	mov	r30, r0
    ec92:	19 95       	eicall
    ec94:	89 2b       	or	r24, r25
    ec96:	09 f0       	breq	.+2      	; 0xec9a <mqtt_reconnect()+0x112>
    ec98:	48 c0       	rjmp	.+144    	; 0xed2a <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    ec9a:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    ec9e:	00 91 81 10 	lds	r16, 0x1081	; 0x801081 <mqtt_client+0x208>
    eca2:	10 91 82 10 	lds	r17, 0x1082	; 0x801082 <mqtt_client+0x209>
    eca6:	20 91 83 10 	lds	r18, 0x1083	; 0x801083 <mqtt_client+0x20a>
    ecaa:	30 91 84 10 	lds	r19, 0x1084	; 0x801084 <mqtt_client+0x20b>
    ecae:	60 1b       	sub	r22, r16
    ecb0:	71 0b       	sbc	r23, r17
    ecb2:	82 0b       	sbc	r24, r18
    ecb4:	93 0b       	sbc	r25, r19
    ecb6:	64 36       	cpi	r22, 0x64	; 100
    ecb8:	71 05       	cpc	r23, r1
    ecba:	81 05       	cpc	r24, r1
    ecbc:	91 05       	cpc	r25, r1
    ecbe:	f8 f2       	brcs	.-66     	; 0xec7e <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    ecc0:	8c ef       	ldi	r24, 0xFC	; 252
    ecc2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    ecc4:	90 93 95 10 	sts	0x1095, r25	; 0x801095 <mqtt_client+0x21c>
    ecc8:	80 93 94 10 	sts	0x1094, r24	; 0x801094 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    eccc:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
    ecd0:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
    ecd4:	dc 01       	movw	r26, r24
    ecd6:	ed 91       	ld	r30, X+
    ecd8:	fc 91       	ld	r31, X
    ecda:	04 88       	ldd	r0, Z+20	; 0x14
    ecdc:	f5 89       	ldd	r31, Z+21	; 0x15
    ecde:	e0 2d       	mov	r30, r0
    ece0:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    ece2:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <mqtt_client+0x21b>
    ece6:	a5 96       	adiw	r28, 0x25	; 37
    ece8:	0f b6       	in	r0, 0x3f	; 63
    ecea:	f8 94       	cli
    ecec:	de bf       	out	0x3e, r29	; 62
    ecee:	0f be       	out	0x3f, r0	; 63
    ecf0:	cd bf       	out	0x3d, r28	; 61
    ecf2:	df 91       	pop	r29
    ecf4:	cf 91       	pop	r28
    ecf6:	1f 91       	pop	r17
    ecf8:	0f 91       	pop	r16
    ecfa:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    ecfc:	06 84       	ldd	r0, Z+14	; 0x0e
    ecfe:	f7 85       	ldd	r31, Z+15	; 0x0f
    ed00:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    ed02:	22 ee       	ldi	r18, 0xE2	; 226
    ed04:	32 e0       	ldi	r19, 0x02	; 2
    ed06:	3a 83       	std	Y+2, r19	; 0x02
    ed08:	29 83       	std	Y+1, r18	; 0x01
    ed0a:	00 91 8a 10 	lds	r16, 0x108A	; 0x80108a <mqtt_client+0x211>
    ed0e:	10 91 8b 10 	lds	r17, 0x108B	; 0x80108b <mqtt_client+0x212>
    ed12:	20 91 8c 10 	lds	r18, 0x108C	; 0x80108c <mqtt_client+0x213>
    ed16:	30 91 8d 10 	lds	r19, 0x108D	; 0x80108d <mqtt_client+0x214>
    ed1a:	0b 83       	std	Y+3, r16	; 0x03
    ed1c:	1c 83       	std	Y+4, r17	; 0x04
    ed1e:	2d 83       	std	Y+5, r18	; 0x05
    ed20:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    ed22:	be 01       	movw	r22, r28
    ed24:	6f 5f       	subi	r22, 0xFF	; 255
    ed26:	7f 4f       	sbci	r23, 0xFF	; 255
    ed28:	61 cf       	rjmp	.-318    	; 0xebec <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    ed2a:	ce 01       	movw	r24, r28
    ed2c:	85 96       	adiw	r24, 0x25	; 37
    ed2e:	0e 94 8d 93 	call	0x1271a	; 0x1271a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    ed32:	04 97       	sbiw	r24, 0x04	; 4
    ed34:	59 f6       	brne	.-106    	; 0xeccc <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    ed36:	80 91 7e 0e 	lds	r24, 0x0E7E	; 0x800e7e <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    ed3a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    ed3c:	81 11       	cpse	r24, r1
    ed3e:	c2 cf       	rjmp	.-124    	; 0xecc4 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    ed40:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    ed44:	60 93 81 10 	sts	0x1081, r22	; 0x801081 <mqtt_client+0x208>
    ed48:	70 93 82 10 	sts	0x1082, r23	; 0x801082 <mqtt_client+0x209>
    ed4c:	80 93 83 10 	sts	0x1083, r24	; 0x801083 <mqtt_client+0x20a>
    ed50:	90 93 84 10 	sts	0x1084, r25	; 0x801084 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    ed54:	10 92 85 10 	sts	0x1085, r1	; 0x801085 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    ed58:	10 92 95 10 	sts	0x1095, r1	; 0x801095 <mqtt_client+0x21c>
    ed5c:	10 92 94 10 	sts	0x1094, r1	; 0x801094 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3958
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    ed60:	64 e7       	ldi	r22, 0x74	; 116
    ed62:	7a e3       	ldi	r23, 0x3A	; 58
    ed64:	ce 01       	movw	r24, r28
    ed66:	01 96       	adiw	r24, 0x01	; 1
    ed68:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
      strcat(topic, nazev);
    ed6c:	be 01       	movw	r22, r28
    ed6e:	65 5e       	subi	r22, 0xE5	; 229
    ed70:	7f 4f       	sbci	r23, 0xFF	; 255
    ed72:	ce 01       	movw	r24, r28
    ed74:	01 96       	adiw	r24, 0x01	; 1
    ed76:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
      strcat(topic, "/#");
    ed7a:	69 ea       	ldi	r22, 0xA9	; 169
    ed7c:	76 e0       	ldi	r23, 0x06	; 6
    ed7e:	ce 01       	movw	r24, r28
    ed80:	01 96       	adiw	r24, 0x01	; 1
    ed82:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
      mqtt_client.subscribe(topic);
    ed86:	ce 01       	movw	r24, r28
    ed88:	01 96       	adiw	r24, 0x01	; 1
    ed8a:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
      strcpy_P(topic, thermctl_header_in);
    ed8e:	64 e7       	ldi	r22, 0x74	; 116
    ed90:	7a e3       	ldi	r23, 0x3A	; 58
    ed92:	ce 01       	movw	r24, r28
    ed94:	01 96       	adiw	r24, 0x01	; 1
    ed96:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      strcat(topic, "global/#");
    ed9a:	63 ea       	ldi	r22, 0xA3	; 163
    ed9c:	76 e0       	ldi	r23, 0x06	; 6
    ed9e:	ce 01       	movw	r24, r28
    eda0:	01 96       	adiw	r24, 0x01	; 1
    eda2:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
      mqtt_client.subscribe(topic);
    eda6:	ce 01       	movw	r24, r28
    eda8:	01 96       	adiw	r24, 0x01	; 1
    edaa:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    edae:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
        remote_tds_subscibe_topic(idx);
    edb0:	81 2f       	mov	r24, r17
    edb2:	0e 94 d5 66 	call	0xcdaa	; 0xcdaa <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    edb6:	1f 5f       	subi	r17, 0xFF	; 255
    edb8:	1a 30       	cpi	r17, 0x0A	; 10
    edba:	d1 f7       	brne	.-12     	; 0xedb0 <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3969
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    edbc:	65 e6       	ldi	r22, 0x65	; 101
    edbe:	7a e3       	ldi	r23, 0x3A	; 58
    edc0:	ce 01       	movw	r24, r28
    edc2:	01 96       	adiw	r24, 0x01	; 1
    edc4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3970
      strcat(topic, "/#");
    edc8:	69 ea       	ldi	r22, 0xA9	; 169
    edca:	76 e0       	ldi	r23, 0x06	; 6
    edcc:	ce 01       	movw	r24, r28
    edce:	01 96       	adiw	r24, 0x01	; 1
    edd0:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3971
      mqtt_client.subscribe(topic);
    edd4:	ce 01       	movw	r24, r28
    edd6:	01 96       	adiw	r24, 0x01	; 1
    edd8:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    eddc:	6d e4       	ldi	r22, 0x4D	; 77
    edde:	7a e3       	ldi	r23, 0x3A	; 58
    ede0:	ce 01       	movw	r24, r28
    ede2:	01 96       	adiw	r24, 0x01	; 1
    ede4:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
      mqtt_client.subscribe(topic);
    ede8:	ce 01       	movw	r24, r28
    edea:	01 96       	adiw	r24, 0x01	; 1
    edec:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    edf0:	66 e3       	ldi	r22, 0x36	; 54
    edf2:	7a e3       	ldi	r23, 0x3A	; 58
    edf4:	ce 01       	movw	r24, r28
    edf6:	01 96       	adiw	r24, 0x01	; 1
    edf8:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
      mqtt_client.subscribe(topic);
    edfc:	ce 01       	movw	r24, r28
    edfe:	01 96       	adiw	r24, 0x01	; 1
    ee00:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3979
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    ee04:	68 e2       	ldi	r22, 0x28	; 40
    ee06:	7a e3       	ldi	r23, 0x3A	; 58
    ee08:	ce 01       	movw	r24, r28
    ee0a:	01 96       	adiw	r24, 0x01	; 1
    ee0c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
      mqtt_client.subscribe(topic);
    ee10:	ce 01       	movw	r24, r28
    ee12:	01 96       	adiw	r24, 0x01	; 1
    ee14:	0e 94 47 9c 	call	0x1388e	; 0x1388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>
    ee18:	64 cf       	rjmp	.-312    	; 0xece2 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    ee1a:	8e ef       	ldi	r24, 0xFE	; 254
    ee1c:	9f ef       	ldi	r25, 0xFF	; 255
    ee1e:	90 93 95 10 	sts	0x1095, r25	; 0x801095 <mqtt_client+0x21c>
    ee22:	80 93 94 10 	sts	0x1094, r24	; 0x801094 <mqtt_client+0x21b>
    ee26:	5d cf       	rjmp	.-326    	; 0xece2 <mqtt_reconnect()+0x15a>

0000ee28 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4647
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    ee28:	2f 92       	push	r2
    ee2a:	3f 92       	push	r3
    ee2c:	4f 92       	push	r4
    ee2e:	5f 92       	push	r5
    ee30:	6f 92       	push	r6
    ee32:	7f 92       	push	r7
    ee34:	8f 92       	push	r8
    ee36:	9f 92       	push	r9
    ee38:	af 92       	push	r10
    ee3a:	bf 92       	push	r11
    ee3c:	cf 92       	push	r12
    ee3e:	df 92       	push	r13
    ee40:	ef 92       	push	r14
    ee42:	ff 92       	push	r15
    ee44:	0f 93       	push	r16
    ee46:	1f 93       	push	r17
    ee48:	cf 93       	push	r28
    ee4a:	df 93       	push	r29
    ee4c:	cd b7       	in	r28, 0x3d	; 61
    ee4e:	de b7       	in	r29, 0x3e	; 62
    ee50:	cd 54       	subi	r28, 0x4D	; 77
    ee52:	d1 40       	sbci	r29, 0x01	; 1
    ee54:	0f b6       	in	r0, 0x3f	; 63
    ee56:	f8 94       	cli
    ee58:	de bf       	out	0x3e, r29	; 62
    ee5a:	0f be       	out	0x3f, r0	; 63
    ee5c:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    ee5e:	1b 82       	std	Y+3, r1	; 0x03
    ee60:	8a ee       	ldi	r24, 0xEA	; 234
    ee62:	93 e0       	ldi	r25, 0x03	; 3
    ee64:	9d 83       	std	Y+5, r25	; 0x05
    ee66:	8c 83       	std	Y+4, r24	; 0x04
    ee68:	89 e3       	ldi	r24, 0x39	; 57
    ee6a:	95 e0       	ldi	r25, 0x05	; 5
    ee6c:	9f 83       	std	Y+7, r25	; 0x07
    ee6e:	8e 83       	std	Y+6, r24	; 0x06
    ee70:	18 86       	std	Y+8, r1	; 0x08
    ee72:	19 86       	std	Y+9, r1	; 0x09
    ee74:	1a 86       	std	Y+10, r1	; 0x0a
    ee76:	1b 86       	std	Y+11, r1	; 0x0b
    ee78:	80 e6       	ldi	r24, 0x60	; 96
    ee7a:	9a ee       	ldi	r25, 0xEA	; 234
    ee7c:	a0 e0       	ldi	r26, 0x00	; 0
    ee7e:	b0 e0       	ldi	r27, 0x00	; 0
    ee80:	8c 87       	std	Y+12, r24	; 0x0c
    ee82:	9d 87       	std	Y+13, r25	; 0x0d
    ee84:	ae 87       	std	Y+14, r26	; 0x0e
    ee86:	bf 87       	std	Y+15, r27	; 0x0f
    ee88:	18 8a       	std	Y+16, r1	; 0x10
    ee8a:	19 8a       	std	Y+17, r1	; 0x11
    ee8c:	1a 8a       	std	Y+18, r1	; 0x12
    ee8e:	1b 8a       	std	Y+19, r1	; 0x13
    ee90:	1c 8a       	std	Y+20, r1	; 0x14
    ee92:	1d 8a       	std	Y+21, r1	; 0x15
    ee94:	1e 8a       	std	Y+22, r1	; 0x16
    ee96:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    ee98:	86 e9       	ldi	r24, 0x96	; 150
    ee9a:	90 e1       	ldi	r25, 0x10	; 16
    ee9c:	9a 83       	std	Y+2, r25	; 0x02
    ee9e:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    eea0:	61 e0       	ldi	r22, 0x01	; 1
    eea2:	86 e0       	ldi	r24, 0x06	; 6
    eea4:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
  pinMode(ETH_CS, OUTPUT);
    eea8:	61 e0       	ldi	r22, 0x01	; 1
    eeaa:	8f e0       	ldi	r24, 0x0F	; 15
    eeac:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
  pinMode(LED, OUTPUT);
    eeb0:	61 e0       	ldi	r22, 0x01	; 1
    eeb2:	88 e0       	ldi	r24, 0x08	; 8
    eeb4:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
  pinMode(PIEZO, OUTPUT);
    eeb8:	61 e0       	ldi	r22, 0x01	; 1
    eeba:	8c e0       	ldi	r24, 0x0C	; 12
    eebc:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
  pinMode(STORAGE_RAM_CS, OUTPUT);
    eec0:	61 e0       	ldi	r22, 0x01	; 1
    eec2:	86 e1       	ldi	r24, 0x16	; 22
    eec4:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    eec8:	61 e0       	ldi	r22, 0x01	; 1
    eeca:	87 e1       	ldi	r24, 0x17	; 23
    eecc:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
  pinMode(JUMPER, INPUT_PULLUP);
    eed0:	62 e0       	ldi	r22, 0x02	; 2
    eed2:	8e e0       	ldi	r24, 0x0E	; 14
    eed4:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441

  digitalWrite(PIEZO, LOW);
    eed8:	60 e0       	ldi	r22, 0x00	; 0
    eeda:	8c e0       	ldi	r24, 0x0C	; 12
    eedc:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442
  delay(1000);
    eee0:	68 ee       	ldi	r22, 0xE8	; 232
    eee2:	73 e0       	ldi	r23, 0x03	; 3
    eee4:	80 e0       	ldi	r24, 0x00	; 0
    eee6:	90 e0       	ldi	r25, 0x00	; 0
    eee8:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4443
  digitalWrite(PIEZO, HIGH);
    eeec:	61 e0       	ldi	r22, 0x01	; 1
    eeee:	8c e0       	ldi	r24, 0x0C	; 12
    eef0:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    eef4:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
  SPI.begin();
    eef6:	0e 94 8f 3b 	call	0x771e	; 0x771e <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
  Wire.begin();
    eefa:	0e 94 87 91 	call	0x1230e	; 0x1230e <TwoWire::begin() [clone .constprop.63]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    eefe:	0e 94 87 91 	call	0x1230e	; 0x1230e <TwoWire::begin() [clone .constprop.63]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    ef02:	89 e7       	ldi	r24, 0x79	; 121
    ef04:	9e e0       	ldi	r25, 0x0E	; 14
    ef06:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <pub_mqtt_client+0x1>
    ef0a:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    ef0e:	70 e0       	ldi	r23, 0x00	; 0
    ef10:	60 e0       	ldi	r22, 0x00	; 0
    ef12:	88 e0       	ldi	r24, 0x08	; 8
    ef14:	92 e6       	ldi	r25, 0x62	; 98
    ef16:	0e 94 af b1 	call	0x1635e	; 0x1635e <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    ef1a:	70 e0       	ldi	r23, 0x00	; 0
    ef1c:	60 e0       	ldi	r22, 0x00	; 0
    ef1e:	81 e8       	ldi	r24, 0x81	; 129
    ef20:	97 e3       	ldi	r25, 0x37	; 55
    ef22:	0e 94 af b1 	call	0x1635e	; 0x1635e <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4672
  printf_begin();

  swSPI.begin();
    ef26:	88 eb       	ldi	r24, 0xB8	; 184
    ef28:	90 e1       	ldi	r25, 0x10	; 16
    ef2a:	0e 94 09 2c 	call	0x5812	; 0x5812 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    ef2e:	e0 91 33 09 	lds	r30, 0x0933	; 0x800933 <MenuHistoryIndex>
    ef32:	f0 e0       	ldi	r31, 0x00	; 0
    ef34:	ed 59       	subi	r30, 0x9D	; 157
    ef36:	f7 4f       	sbci	r31, 0xF7	; 247
    ef38:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    ef3a:	0e 94 53 92 	call	0x124a6	; 0x124a6 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    ef3e:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <my_lcd+0x1a>
    ef42:	90 91 3c 0e 	lds	r25, 0x0E3C	; 0x800e3c <my_lcd+0x1b>
    ef46:	01 96       	adiw	r24, 0x01	; 1
    ef48:	09 f0       	breq	.+2      	; 0xef4c <setup+0x124>
    ef4a:	4c c0       	rjmp	.+152    	; 0xefe4 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    ef4c:	60 e0       	ldi	r22, 0x00	; 0
    ef4e:	84 e0       	ldi	r24, 0x04	; 4
    ef50:	90 e0       	ldi	r25, 0x00	; 0
    ef52:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    ef56:	89 2b       	or	r24, r25
    ef58:	39 f5       	brne	.+78     	; 0xefa8 <setup+0x180>
    ef5a:	61 e0       	ldi	r22, 0x01	; 1
    ef5c:	84 e0       	ldi	r24, 0x04	; 4
    ef5e:	90 e0       	ldi	r25, 0x00	; 0
    ef60:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    ef64:	81 15       	cp	r24, r1
    ef66:	90 48       	sbci	r25, 0x80	; 128
    ef68:	f9 f4       	brne	.+62     	; 0xefa8 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    ef6a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    ef6e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    ef72:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    ef76:	2b 96       	adiw	r28, 0x0b	; 11
    ef78:	8d af       	std	Y+61, r24	; 0x3d
    ef7a:	9e af       	std	Y+62, r25	; 0x3e
    ef7c:	af af       	std	Y+63, r26	; 0x3f
    ef7e:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    ef80:	23 e0       	ldi	r18, 0x03	; 3
    ef82:	ae 01       	movw	r20, r28
    ef84:	48 5b       	subi	r20, 0xB8	; 184
    ef86:	5f 4f       	sbci	r21, 0xFF	; 255
    ef88:	69 eb       	ldi	r22, 0xB9	; 185
    ef8a:	70 e0       	ldi	r23, 0x00	; 0
    ef8c:	81 e2       	ldi	r24, 0x21	; 33
    ef8e:	9e e0       	ldi	r25, 0x0E	; 14
    ef90:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    ef94:	60 e0       	ldi	r22, 0x00	; 0
    ef96:	80 ed       	ldi	r24, 0xD0	; 208
    ef98:	90 e0       	ldi	r25, 0x00	; 0
    ef9a:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    ef9e:	61 e0       	ldi	r22, 0x01	; 1
    efa0:	80 ed       	ldi	r24, 0xD0	; 208
    efa2:	90 e0       	ldi	r25, 0x00	; 0
    efa4:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    efa8:	61 e0       	ldi	r22, 0x01	; 1
    efaa:	83 ed       	ldi	r24, 0xD3	; 211
    efac:	90 e0       	ldi	r25, 0x00	; 0
    efae:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    efb2:	81 34       	cpi	r24, 0x41	; 65
    efb4:	a3 e9       	ldi	r26, 0x93	; 147
    efb6:	9a 07       	cpc	r25, r26
    efb8:	89 f0       	breq	.+34     	; 0xefdc <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    efba:	86 38       	cpi	r24, 0x86	; 134
    efbc:	b4 e9       	ldi	r27, 0x94	; 148
    efbe:	9b 07       	cpc	r25, r27
    efc0:	69 f0       	breq	.+26     	; 0xefdc <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    efc2:	88 38       	cpi	r24, 0x88	; 136
    efc4:	e4 e9       	ldi	r30, 0x94	; 148
    efc6:	9e 07       	cpc	r25, r30
    efc8:	49 f0       	breq	.+18     	; 0xefdc <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    efca:	86 39       	cpi	r24, 0x96	; 150
    efcc:	f7 e7       	ldi	r31, 0x77	; 119
    efce:	9f 07       	cpc	r25, r31
    efd0:	29 f0       	breq	.+10     	; 0xefdc <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    efd2:	60 e0       	ldi	r22, 0x00	; 0
    efd4:	90 e0       	ldi	r25, 0x00	; 0
    efd6:	80 e0       	ldi	r24, 0x00	; 0
    efd8:	0e 94 c4 92 	call	0x12588	; 0x12588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    efdc:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <my_lcd+0x1b>
    efe0:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    efe4:	00 91 3b 0e 	lds	r16, 0x0E3B	; 0x800e3b <my_lcd+0x1a>
    efe8:	10 91 3c 0e 	lds	r17, 0x0E3C	; 0x800e3c <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    efec:	0e 94 53 92 	call	0x124a6	; 0x124a6 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    eff0:	68 ec       	ldi	r22, 0xC8	; 200
    eff2:	70 e0       	ldi	r23, 0x00	; 0
    eff4:	80 e0       	ldi	r24, 0x00	; 0
    eff6:	90 e0       	ldi	r25, 0x00	; 0
    eff8:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    effc:	06 39       	cpi	r16, 0x96	; 150
    effe:	17 47       	sbci	r17, 0x77	; 119
    f000:	09 f0       	breq	.+2      	; 0xf004 <setup+0x1dc>
    f002:	34 c3       	rjmp	.+1640   	; 0xf66c <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    f004:	89 e0       	ldi	r24, 0x09	; 9
    f006:	90 e0       	ldi	r25, 0x00	; 0
    f008:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <my_lcd+0x19>
    f00c:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    f010:	8a e2       	ldi	r24, 0x2A	; 42
    f012:	90 e0       	ldi	r25, 0x00	; 0
    f014:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <my_lcd+0x1d>
    f018:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <my_lcd+0x1c>
    f01c:	8b e2       	ldi	r24, 0x2B	; 43
    f01e:	90 e0       	ldi	r25, 0x00	; 0
    f020:	90 93 40 0e 	sts	0x0E40, r25	; 0x800e40 <my_lcd+0x1f>
    f024:	80 93 3f 0e 	sts	0x0E3F, r24	; 0x800e3f <my_lcd+0x1e>
    f028:	8c e2       	ldi	r24, 0x2C	; 44
    f02a:	90 e0       	ldi	r25, 0x00	; 0
    f02c:	90 93 42 0e 	sts	0x0E42, r25	; 0x800e42 <my_lcd+0x21>
    f030:	80 93 41 0e 	sts	0x0E41, r24	; 0x800e41 <my_lcd+0x20>
    f034:	8e e2       	ldi	r24, 0x2E	; 46
    f036:	90 e0       	ldi	r25, 0x00	; 0
    f038:	90 93 44 0e 	sts	0x0E44, r25	; 0x800e44 <my_lcd+0x23>
    f03c:	80 93 43 0e 	sts	0x0E43, r24	; 0x800e43 <my_lcd+0x22>
    f040:	83 e3       	ldi	r24, 0x33	; 51
    f042:	90 e0       	ldi	r25, 0x00	; 0
    f044:	90 93 46 0e 	sts	0x0E46, r25	; 0x800e46 <my_lcd+0x25>
    f048:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <my_lcd+0x24>
    f04c:	87 e3       	ldi	r24, 0x37	; 55
    f04e:	90 e0       	ldi	r25, 0x00	; 0
    f050:	90 93 48 0e 	sts	0x0E48, r25	; 0x800e48 <my_lcd+0x27>
    f054:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <my_lcd+0x26>
    f058:	86 e3       	ldi	r24, 0x36	; 54
    f05a:	90 e0       	ldi	r25, 0x00	; 0
    f05c:	90 93 4a 0e 	sts	0x0E4A, r25	; 0x800e4a <my_lcd+0x29>
    f060:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <my_lcd+0x28>
    f064:	10 92 4c 0e 	sts	0x0E4C, r1	; 0x800e4c <my_lcd+0x2b>
    f068:	10 92 4b 0e 	sts	0x0E4B, r1	; 0x800e4b <my_lcd+0x2a>
    f06c:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0x2d>
    f070:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    f074:	22 e8       	ldi	r18, 0x82	; 130
    f076:	e2 2e       	mov	r14, r18
    f078:	2a e3       	ldi	r18, 0x3A	; 58
    f07a:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    f07c:	3c e6       	ldi	r19, 0x6C	; 108
    f07e:	c3 2e       	mov	r12, r19
    f080:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    f082:	f7 01       	movw	r30, r14
    f084:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    f086:	31 96       	adiw	r30, 0x01	; 1
    f088:	14 91       	lpm	r17, Z
    f08a:	f2 e0       	ldi	r31, 0x02	; 2
    f08c:	ef 0e       	add	r14, r31
    f08e:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    f090:	6f 37       	cpi	r22, 0x7F	; 127
    f092:	89 f0       	breq	.+34     	; 0xf0b6 <setup+0x28e>
    f094:	de 01       	movw	r26, r28
    f096:	a8 5b       	subi	r26, 0xB8	; 184
    f098:	bf 4f       	sbci	r27, 0xFF	; 255
    f09a:	30 e0       	ldi	r19, 0x00	; 0
    f09c:	20 e0       	ldi	r18, 0x00	; 0
    f09e:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    f0a0:	21 17       	cp	r18, r17
    f0a2:	08 f0       	brcs	.+2      	; 0xf0a6 <setup+0x27e>
    f0a4:	da c2       	rjmp	.+1460   	; 0xf65a <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    f0a6:	f7 01       	movw	r30, r14
    f0a8:	e2 0f       	add	r30, r18
    f0aa:	f3 1f       	adc	r31, r19
    f0ac:	e4 91       	lpm	r30, Z
    f0ae:	ed 93       	st	X+, r30
    f0b0:	2f 5f       	subi	r18, 0xFF	; 255
    f0b2:	3f 4f       	sbci	r19, 0xFF	; 255
    f0b4:	f5 cf       	rjmp	.-22     	; 0xf0a0 <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    f0b6:	61 2f       	mov	r22, r17
    f0b8:	70 e0       	ldi	r23, 0x00	; 0
    f0ba:	90 e0       	ldi	r25, 0x00	; 0
    f0bc:	80 e0       	ldi	r24, 0x00	; 0
    f0be:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    f0c2:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    f0c4:	61 2f       	mov	r22, r17
    f0c6:	70 e0       	ldi	r23, 0x00	; 0
    f0c8:	6e 5f       	subi	r22, 0xFE	; 254
    f0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    f0cc:	c6 1a       	sub	r12, r22
    f0ce:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    f0d0:	1c 14       	cp	r1, r12
    f0d2:	1d 04       	cpc	r1, r13
    f0d4:	b4 f2       	brlt	.-84     	; 0xf082 <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    f0d6:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <my_lcd+0x16>
    f0da:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    f0de:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
    f0e2:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
    f0e6:	80 81       	ld	r24, Z
    f0e8:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <my_lcd+0x3a>
    f0ec:	89 23       	and	r24, r25
    f0ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    f0f0:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    f0f4:	20 91 39 0e 	lds	r18, 0x0E39	; 0x800e39 <my_lcd+0x18>
    f0f8:	30 91 3a 0e 	lds	r19, 0x0E3A	; 0x800e3a <my_lcd+0x19>
    f0fc:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
    f100:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
    f104:	80 91 5c 0e 	lds	r24, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
    f108:	21 15       	cp	r18, r1
    f10a:	31 05       	cpc	r19, r1
    f10c:	09 f0       	breq	.+2      	; 0xf110 <setup+0x2e8>
    f10e:	b5 c2       	rjmp	.+1386   	; 0xf67a <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    f110:	20 81       	ld	r18, Z
    f112:	82 23       	and	r24, r18
    f114:	80 83       	st	Z, r24
    f116:	81 e6       	ldi	r24, 0x61	; 97
    f118:	82 b9       	out	0x02, r24	; 2
    f11a:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f11e:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f122:	80 81       	ld	r24, Z
    f124:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
    f128:	82 23       	and	r24, r18
    f12a:	80 83       	st	Z, r24
    f12c:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f130:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f134:	80 81       	ld	r24, Z
    f136:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
    f13a:	82 2b       	or	r24, r18
    f13c:	80 83       	st	Z, r24
    f13e:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
    f142:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
    f146:	80 81       	ld	r24, Z
    f148:	20 91 58 0e 	lds	r18, 0x0E58	; 0x800e58 <my_lcd+0x37>
    f14c:	82 2b       	or	r24, r18
    f14e:	80 83       	st	Z, r24
    f150:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    f152:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f156:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f15a:	80 81       	ld	r24, Z
    f15c:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
    f160:	89 23       	and	r24, r25
    f162:	80 83       	st	Z, r24
    f164:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f168:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f16c:	80 81       	ld	r24, Z
    f16e:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    f172:	89 2b       	or	r24, r25
    f174:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    f176:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
    f17a:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
    f17e:	80 81       	ld	r24, Z
    f180:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <my_lcd+0x36>
    f184:	89 2b       	or	r24, r25
    f186:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4677
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    f188:	83 e0       	ldi	r24, 0x03	; 3
    f18a:	0e 94 ee 8c 	call	0x119dc	; 0x119dc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    f18e:	83 e0       	ldi	r24, 0x03	; 3
    f190:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    f194:	20 91 35 0e 	lds	r18, 0x0E35	; 0x800e35 <my_lcd+0x14>
    f198:	30 91 36 0e 	lds	r19, 0x0E36	; 0x800e36 <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    f19c:	40 91 33 0e 	lds	r20, 0x0E33	; 0x800e33 <my_lcd+0x12>
    f1a0:	50 91 34 0e 	lds	r21, 0x0E34	; 0x800e34 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    f1a4:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    f1a8:	e0 91 18 0e 	lds	r30, 0x0E18	; 0x800e18 <my_touch+0x15>
    f1ac:	f0 91 19 0e 	lds	r31, 0x0E19	; 0x800e19 <my_touch+0x16>
    f1b0:	80 81       	ld	r24, Z
    f1b2:	60 91 1f 0e 	lds	r22, 0x0E1F	; 0x800e1f <my_touch+0x1c>
    f1b6:	86 2b       	or	r24, r22
    f1b8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    f1ba:	e0 91 14 0e 	lds	r30, 0x0E14	; 0x800e14 <my_touch+0x11>
    f1be:	f0 91 15 0e 	lds	r31, 0x0E15	; 0x800e15 <my_touch+0x12>
    f1c2:	80 81       	ld	r24, Z
    f1c4:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <my_touch+0x1a>
    f1c8:	86 2b       	or	r24, r22
    f1ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    f1cc:	e0 91 12 0e 	lds	r30, 0x0E12	; 0x800e12 <my_touch+0xf>
    f1d0:	f0 91 13 0e 	lds	r31, 0x0E13	; 0x800e13 <my_touch+0x10>
    f1d4:	80 81       	ld	r24, Z
    f1d6:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <my_touch+0x19>
    f1da:	86 2b       	or	r24, r22
    f1dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    f1de:	50 93 0c 0e 	sts	0x0E0C, r21	; 0x800e0c <my_touch+0x9>
    f1e2:	40 93 0b 0e 	sts	0x0E0B, r20	; 0x800e0b <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    f1e6:	30 93 0e 0e 	sts	0x0E0E, r19	; 0x800e0e <my_touch+0xb>
    f1ea:	20 93 0d 0e 	sts	0x0E0D, r18	; 0x800e0d <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    f1ee:	90 93 11 0e 	sts	0x0E11, r25	; 0x800e11 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4680
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    f1f2:	8f ef       	ldi	r24, 0xFF	; 255
    f1f4:	9f ef       	ldi	r25, 0xFF	; 255
    f1f6:	0e 94 4b 8b 	call	0x11696	; 0x11696 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    f1fa:	8f e1       	ldi	r24, 0x1F	; 31
    f1fc:	90 e0       	ldi	r25, 0x00	; 0
    f1fe:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
    f202:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4682
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    f206:	1e 01       	movw	r2, r28
    f208:	28 e4       	ldi	r18, 0x48	; 72
    f20a:	22 0e       	add	r2, r18
    f20c:	31 1c       	adc	r3, r1
    f20e:	69 ef       	ldi	r22, 0xF9	; 249
    f210:	7b e3       	ldi	r23, 0x3B	; 59
    f212:	c1 01       	movw	r24, r2
    f214:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    f218:	ee 24       	eor	r14, r14
    f21a:	ea 94       	dec	r14
    f21c:	fe 2c       	mov	r15, r14
    f21e:	0f e1       	ldi	r16, 0x1F	; 31
    f220:	10 e0       	ldi	r17, 0x00	; 0
    f222:	22 e0       	ldi	r18, 0x02	; 2
    f224:	4a e0       	ldi	r20, 0x0A	; 10
    f226:	50 e0       	ldi	r21, 0x00	; 0
    f228:	6e e1       	ldi	r22, 0x1E	; 30
    f22a:	70 e0       	ldi	r23, 0x00	; 0
    f22c:	c1 01       	movw	r24, r2
    f22e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f232:	8e e1       	ldi	r24, 0x1E	; 30
    f234:	90 e0       	ldi	r25, 0x00	; 0
    f236:	c4 5c       	subi	r28, 0xC4	; 196
    f238:	de 4f       	sbci	r29, 0xFE	; 254
    f23a:	99 83       	std	Y+1, r25	; 0x01
    f23c:	88 83       	st	Y, r24
    f23e:	cc 53       	subi	r28, 0x3C	; 60
    f240:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4685
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f242:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5048
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    f244:	d2 2c       	mov	r13, r2
    f246:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f248:	a2 e3       	ldi	r26, 0x32	; 50
    f24a:	b1 e0       	ldi	r27, 0x01	; 1
    f24c:	ac 0f       	add	r26, r28
    f24e:	bd 1f       	adc	r27, r29
    f250:	12 96       	adiw	r26, 0x02	; 2
    f252:	cc 5b       	subi	r28, 0xBC	; 188
    f254:	de 4f       	sbci	r29, 0xFE	; 254
    f256:	b9 83       	std	Y+1, r27	; 0x01
    f258:	a8 83       	st	Y, r26
    f25a:	c4 54       	subi	r28, 0x44	; 68
    f25c:	d1 40       	sbci	r29, 0x01	; 1
    f25e:	ec e2       	ldi	r30, 0x2C	; 44
    f260:	f1 e0       	ldi	r31, 0x01	; 1
    f262:	ec 0f       	add	r30, r28
    f264:	fd 1f       	adc	r31, r29
    f266:	32 96       	adiw	r30, 0x02	; 2
    f268:	ca 5b       	subi	r28, 0xBA	; 186
    f26a:	de 4f       	sbci	r29, 0xFE	; 254
    f26c:	f9 83       	std	Y+1, r31	; 0x01
    f26e:	e8 83       	st	Y, r30
    f270:	c6 54       	subi	r28, 0x46	; 70
    f272:	d1 40       	sbci	r29, 0x01	; 1
    f274:	26 e2       	ldi	r18, 0x26	; 38
    f276:	31 e0       	ldi	r19, 0x01	; 1
    f278:	2c 0f       	add	r18, r28
    f27a:	3d 1f       	adc	r19, r29
    f27c:	2e 5f       	subi	r18, 0xFE	; 254
    f27e:	3f 4f       	sbci	r19, 0xFF	; 255
    f280:	c8 5b       	subi	r28, 0xB8	; 184
    f282:	de 4f       	sbci	r29, 0xFE	; 254
    f284:	39 83       	std	Y+1, r19	; 0x01
    f286:	28 83       	st	Y, r18
    f288:	c8 54       	subi	r28, 0x48	; 72
    f28a:	d1 40       	sbci	r29, 0x01	; 1
    f28c:	8e ed       	ldi	r24, 0xDE	; 222
    f28e:	90 e0       	ldi	r25, 0x00	; 0
    f290:	8c 0f       	add	r24, r28
    f292:	9d 1f       	adc	r25, r29
    f294:	02 96       	adiw	r24, 0x02	; 2
    f296:	c6 5b       	subi	r28, 0xB6	; 182
    f298:	de 4f       	sbci	r29, 0xFE	; 254
    f29a:	99 83       	std	Y+1, r25	; 0x01
    f29c:	88 83       	st	Y, r24
    f29e:	ca 54       	subi	r28, 0x4A	; 74
    f2a0:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    f2a2:	a8 ec       	ldi	r26, 0xC8	; 200
    f2a4:	b0 e0       	ldi	r27, 0x00	; 0
    f2a6:	ac 0f       	add	r26, r28
    f2a8:	bd 1f       	adc	r27, r29
    f2aa:	1c 96       	adiw	r26, 0x0c	; 12
    f2ac:	c4 5b       	subi	r28, 0xB4	; 180
    f2ae:	de 4f       	sbci	r29, 0xFE	; 254
    f2b0:	b9 83       	std	Y+1, r27	; 0x01
    f2b2:	a8 83       	st	Y, r26
    f2b4:	cc 54       	subi	r28, 0x4C	; 76
    f2b6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4687
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    f2b8:	ee 24       	eor	r14, r14
    f2ba:	ea 94       	dec	r14
    f2bc:	fe 2c       	mov	r15, r14
    f2be:	00 e0       	ldi	r16, 0x00	; 0
    f2c0:	18 ef       	ldi	r17, 0xF8	; 248
    f2c2:	21 e0       	ldi	r18, 0x01	; 1
    f2c4:	4e e1       	ldi	r20, 0x1E	; 30
    f2c6:	50 e0       	ldi	r21, 0x00	; 0
    f2c8:	c4 5c       	subi	r28, 0xC4	; 196
    f2ca:	de 4f       	sbci	r29, 0xFE	; 254
    f2cc:	68 81       	ld	r22, Y
    f2ce:	79 81       	ldd	r23, Y+1	; 0x01
    f2d0:	cc 53       	subi	r28, 0x3C	; 60
    f2d2:	d1 40       	sbci	r29, 0x01	; 1
    f2d4:	8c ea       	ldi	r24, 0xAC	; 172
    f2d6:	96 e0       	ldi	r25, 0x06	; 6
    f2d8:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4689
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    f2dc:	a1 10       	cpse	r10, r1
    f2de:	18 c2       	rjmp	.+1072   	; 0xf710 <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f2e0:	69 ee       	ldi	r22, 0xE9	; 233
    f2e2:	7b e3       	ldi	r23, 0x3B	; 59
    f2e4:	c1 01       	movw	r24, r2
    f2e6:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
      strcat(str1, ":1");
    f2ea:	6e ea       	ldi	r22, 0xAE	; 174
    f2ec:	76 e0       	ldi	r23, 0x06	; 6
    f2ee:	c1 01       	movw	r24, r2
    f2f0:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f2f4:	00 ee       	ldi	r16, 0xE0	; 224
    f2f6:	17 e0       	ldi	r17, 0x07	; 7
    f2f8:	21 e0       	ldi	r18, 0x01	; 1
    f2fa:	42 e3       	ldi	r20, 0x32	; 50
    f2fc:	50 e0       	ldi	r21, 0x00	; 0
    f2fe:	6e e1       	ldi	r22, 0x1E	; 30
    f300:	70 e0       	ldi	r23, 0x00	; 0
    f302:	c1 01       	movw	r24, r2
    f304:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695

      tritri = 0;
    f308:	10 92 74 0a 	sts	0x0A74, r1	; 0x800a74 <tritri+0x1>
    f30c:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4696
      petnula = 0;
    f310:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <petnula+0x1>
    f314:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4697
      dvanact = 0;
    f318:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <dvanact+0x1>
    f31c:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4699
      dvanact = 0;
      light_curr = 0;
    f320:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <light_curr+0x1>
    f324:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    f328:	88 ef       	ldi	r24, 0xF8	; 248
    f32a:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    f32e:	83 e0       	ldi	r24, 0x03	; 3
    f330:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    f334:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    f338:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    f33c:	8e e8       	ldi	r24, 0x8E	; 142
    f33e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    f342:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    f346:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <a2d_reference>
    f34a:	b0 e4       	ldi	r27, 0x40	; 64
    f34c:	8b 9f       	mul	r24, r27
    f34e:	c0 01       	movw	r24, r0
    f350:	11 24       	eor	r1, r1
    f352:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    f356:	8b e4       	ldi	r24, 0x4B	; 75
    f358:	99 e2       	ldi	r25, 0x29	; 41
    f35a:	90 93 23 0a 	sts	0x0A23, r25	; 0x800a23 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
    f35e:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <_ZL17a2d_interupt_func.lto_priv.228>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4705
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    f362:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
      a2d_start_first(A_PROUD);
    f366:	83 e0       	ldi	r24, 0x03	; 3
    f368:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4707
      milis = millis();
    f36c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f370:	2b 01       	movw	r4, r22
    f372:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
      while (a2d_run_now == 0 && millis() - milis < 10);
    f374:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
    f378:	81 11       	cpse	r24, r1
    f37a:	0b c0       	rjmp	.+22     	; 0xf392 <setup+0x56a>
    f37c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f380:	64 19       	sub	r22, r4
    f382:	75 09       	sbc	r23, r5
    f384:	86 09       	sbc	r24, r6
    f386:	97 09       	sbc	r25, r7
    f388:	6a 30       	cpi	r22, 0x0A	; 10
    f38a:	71 05       	cpc	r23, r1
    f38c:	81 05       	cpc	r24, r1
    f38e:	91 05       	cpc	r25, r1
    f390:	88 f3       	brcs	.-30     	; 0xf374 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4710
      /// regulator 3.3V
      a2d_run_now = 0;
    f392:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4711
      a2d_start_first(A_TRIV);
    f396:	86 e0       	ldi	r24, 0x06	; 6
    f398:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4712
      milis = millis();
    f39c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f3a0:	2b 01       	movw	r4, r22
    f3a2:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4713
      while (a2d_run_now == 0 && millis() - milis < 10);
    f3a4:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
    f3a8:	81 11       	cpse	r24, r1
    f3aa:	0b c0       	rjmp	.+22     	; 0xf3c2 <setup+0x59a>
    f3ac:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f3b0:	64 19       	sub	r22, r4
    f3b2:	75 09       	sbc	r23, r5
    f3b4:	86 09       	sbc	r24, r6
    f3b6:	97 09       	sbc	r25, r7
    f3b8:	6a 30       	cpi	r22, 0x0A	; 10
    f3ba:	71 05       	cpc	r23, r1
    f3bc:	81 05       	cpc	r24, r1
    f3be:	91 05       	cpc	r25, r1
    f3c0:	88 f3       	brcs	.-30     	; 0xf3a4 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4715
      /// regulator 5.0V
      a2d_run_now = 0;
    f3c2:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716
      a2d_start_first(A_PETV);
    f3c6:	85 e0       	ldi	r24, 0x05	; 5
    f3c8:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4717
      milis = millis();
    f3cc:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f3d0:	2b 01       	movw	r4, r22
    f3d2:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4718
      while (a2d_run_now == 0 && millis() - milis < 10);
    f3d4:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
    f3d8:	81 11       	cpse	r24, r1
    f3da:	0b c0       	rjmp	.+22     	; 0xf3f2 <setup+0x5ca>
    f3dc:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f3e0:	64 19       	sub	r22, r4
    f3e2:	75 09       	sbc	r23, r5
    f3e4:	86 09       	sbc	r24, r6
    f3e6:	97 09       	sbc	r25, r7
    f3e8:	6a 30       	cpi	r22, 0x0A	; 10
    f3ea:	71 05       	cpc	r23, r1
    f3ec:	81 05       	cpc	r24, r1
    f3ee:	91 05       	cpc	r25, r1
    f3f0:	88 f3       	brcs	.-30     	; 0xf3d4 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4720
      /// vstupni napeti 12V
      a2d_run_now = 0;
    f3f2:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
      a2d_start_first(A_DVANACTV);
    f3f6:	84 e0       	ldi	r24, 0x04	; 4
    f3f8:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4722
      milis = millis();
    f3fc:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f400:	2b 01       	movw	r4, r22
    f402:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
      while (a2d_run_now == 0 && millis() - milis < 10);
    f404:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
    f408:	81 11       	cpse	r24, r1
    f40a:	0b c0       	rjmp	.+22     	; 0xf422 <setup+0x5fa>
    f40c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f410:	64 19       	sub	r22, r4
    f412:	75 09       	sbc	r23, r5
    f414:	86 09       	sbc	r24, r6
    f416:	97 09       	sbc	r25, r7
    f418:	6a 30       	cpi	r22, 0x0A	; 10
    f41a:	71 05       	cpc	r23, r1
    f41c:	81 05       	cpc	r24, r1
    f41e:	91 05       	cpc	r25, r1
    f420:	88 f3       	brcs	.-30     	; 0xf404 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    f422:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
      a2d_start_first(A_LIGHT);
    f426:	87 e0       	ldi	r24, 0x07	; 7
    f428:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4727
      milis = millis();
    f42c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f430:	2b 01       	movw	r4, r22
    f432:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4728
      while (a2d_run_now == 0 && millis() - milis < 10);
    f434:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
    f438:	81 11       	cpse	r24, r1
    f43a:	0b c0       	rjmp	.+22     	; 0xf452 <setup+0x62a>
    f43c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
    f440:	64 19       	sub	r22, r4
    f442:	75 09       	sbc	r23, r5
    f444:	86 09       	sbc	r24, r6
    f446:	97 09       	sbc	r25, r7
    f448:	6a 30       	cpi	r22, 0x0A	; 10
    f44a:	71 05       	cpc	r23, r1
    f44c:	81 05       	cpc	r24, r1
    f44e:	91 05       	cpc	r25, r1
    f450:	88 f3       	brcs	.-30     	; 0xf434 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4730
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    f452:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4732
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f456:	4e 01       	movw	r8, r28
    f458:	ea ef       	ldi	r30, 0xFA	; 250
    f45a:	8e 1a       	sub	r8, r30
    f45c:	ee ef       	ldi	r30, 0xFE	; 254
    f45e:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f460:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <tritri>
    f464:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <tritri+0x1>
    f468:	25 e0       	ldi	r18, 0x05	; 5
    f46a:	28 9f       	mul	r18, r24
    f46c:	b0 01       	movw	r22, r0
    f46e:	29 9f       	mul	r18, r25
    f470:	70 0d       	add	r23, r0
    f472:	11 24       	eor	r1, r1
    f474:	90 e0       	ldi	r25, 0x00	; 0
    f476:	80 e0       	ldi	r24, 0x00	; 0
    f478:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    f47c:	20 e0       	ldi	r18, 0x00	; 0
    f47e:	30 e0       	ldi	r19, 0x00	; 0
    f480:	4a e7       	ldi	r20, 0x7A	; 122
    f482:	54 e4       	ldi	r21, 0x44	; 68
    f484:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4732
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f488:	84 01       	movw	r16, r8
    f48a:	22 e0       	ldi	r18, 0x02	; 2
    f48c:	44 e0       	ldi	r20, 0x04	; 4
    f48e:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4733
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f492:	7e 01       	movw	r14, r28
    f494:	f2 ef       	ldi	r31, 0xF2	; 242
    f496:	ef 1a       	sub	r14, r31
    f498:	fe ef       	ldi	r31, 0xFE	; 254
    f49a:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f49c:	60 91 71 0a 	lds	r22, 0x0A71	; 0x800a71 <petnula>
    f4a0:	70 91 72 0a 	lds	r23, 0x0A72	; 0x800a72 <petnula+0x1>
    f4a4:	13 e0       	ldi	r17, 0x03	; 3
    f4a6:	66 0f       	add	r22, r22
    f4a8:	77 1f       	adc	r23, r23
    f4aa:	1a 95       	dec	r17
    f4ac:	e1 f7       	brne	.-8      	; 0xf4a6 <setup+0x67e>
    f4ae:	90 e0       	ldi	r25, 0x00	; 0
    f4b0:	80 e0       	ldi	r24, 0x00	; 0
    f4b2:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    f4b6:	20 e0       	ldi	r18, 0x00	; 0
    f4b8:	30 e0       	ldi	r19, 0x00	; 0
    f4ba:	4a e7       	ldi	r20, 0x7A	; 122
    f4bc:	54 e4       	ldi	r21, 0x44	; 68
    f4be:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4733
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f4c2:	87 01       	movw	r16, r14
    f4c4:	22 e0       	ldi	r18, 0x02	; 2
    f4c6:	44 e0       	ldi	r20, 0x04	; 4
    f4c8:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f4cc:	3e 01       	movw	r6, r28
    f4ce:	2a ee       	ldi	r18, 0xEA	; 234
    f4d0:	62 1a       	sub	r6, r18
    f4d2:	2e ef       	ldi	r18, 0xFE	; 254
    f4d4:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f4d6:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <dvanact>
    f4da:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <dvanact+0x1>
    f4de:	29 e3       	ldi	r18, 0x39	; 57
    f4e0:	28 9f       	mul	r18, r24
    f4e2:	b0 01       	movw	r22, r0
    f4e4:	29 9f       	mul	r18, r25
    f4e6:	70 0d       	add	r23, r0
    f4e8:	11 24       	eor	r1, r1
    f4ea:	90 e0       	ldi	r25, 0x00	; 0
    f4ec:	80 e0       	ldi	r24, 0x00	; 0
    f4ee:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
    f4f2:	20 e0       	ldi	r18, 0x00	; 0
    f4f4:	30 e0       	ldi	r19, 0x00	; 0
    f4f6:	4a e7       	ldi	r20, 0x7A	; 122
    f4f8:	54 e4       	ldi	r21, 0x44	; 68
    f4fa:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f4fe:	83 01       	movw	r16, r6
    f500:	22 e0       	ldi	r18, 0x02	; 2
    f502:	44 e0       	ldi	r20, 0x04	; 4
    f504:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f508:	2e 01       	movw	r4, r28
    f50a:	32 ee       	ldi	r19, 0xE2	; 226
    f50c:	43 1a       	sub	r4, r19
    f50e:	3e ef       	ldi	r19, 0xFE	; 254
    f510:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    f512:	60 91 6d 0a 	lds	r22, 0x0A6D	; 0x800a6d <proud>
    f516:	70 91 6e 0a 	lds	r23, 0x0A6E	; 0x800a6e <proud+0x1>
    f51a:	90 e0       	ldi	r25, 0x00	; 0
    f51c:	80 e0       	ldi	r24, 0x00	; 0
    f51e:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f522:	82 01       	movw	r16, r4
    f524:	22 e0       	ldi	r18, 0x02	; 2
    f526:	44 e0       	ldi	r20, 0x04	; 4
    f528:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4736
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    f52c:	5f 92       	push	r5
    f52e:	4f 92       	push	r4
    f530:	7f 92       	push	r7
    f532:	6f 92       	push	r6
    f534:	ff 92       	push	r15
    f536:	ef 92       	push	r14
    f538:	9f 92       	push	r9
    f53a:	8f 92       	push	r8
    f53c:	81 eb       	ldi	r24, 0xB1	; 177
    f53e:	96 e0       	ldi	r25, 0x06	; 6
    f540:	9f 93       	push	r25
    f542:	8f 93       	push	r24
    f544:	4e 01       	movw	r8, r28
    f546:	88 e8       	ldi	r24, 0x88	; 136
    f548:	88 0e       	add	r8, r24
    f54a:	91 1c       	adc	r9, r1
    f54c:	9f 92       	push	r9
    f54e:	8f 92       	push	r8
    f550:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f554:	ee 24       	eor	r14, r14
    f556:	ea 94       	dec	r14
    f558:	fe 2c       	mov	r15, r14
    f55a:	00 ee       	ldi	r16, 0xE0	; 224
    f55c:	17 e0       	ldi	r17, 0x07	; 7
    f55e:	21 e0       	ldi	r18, 0x01	; 1
    f560:	42 e3       	ldi	r20, 0x32	; 50
    f562:	50 e0       	ldi	r21, 0x00	; 0
    f564:	60 ea       	ldi	r22, 0xA0	; 160
    f566:	70 e0       	ldi	r23, 0x00	; 0
    f568:	c4 01       	movw	r24, r8
    f56a:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f56e:	0f b6       	in	r0, 0x3f	; 63
    f570:	f8 94       	cli
    f572:	de bf       	out	0x3e, r29	; 62
    f574:	0f be       	out	0x3f, r0	; 63
    f576:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5027
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    f578:	2e e0       	ldi	r18, 0x0E	; 14
    f57a:	a2 12       	cpse	r10, r18
    f57c:	0c 94 f4 82 	jmp	0x105e8	; 0x105e8 <__EEPROM_REGION_LENGTH__+0x5e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5029
    {
      strcpy_P(str1, text_ntp_cas);
    f580:	61 e0       	ldi	r22, 0x01	; 1
    f582:	7b e3       	ldi	r23, 0x3B	; 59
    f584:	c1 01       	movw	r24, r2
    f586:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f58a:	ee 24       	eor	r14, r14
    f58c:	ea 94       	dec	r14
    f58e:	fe 2c       	mov	r15, r14
    f590:	00 ee       	ldi	r16, 0xE0	; 224
    f592:	17 e0       	ldi	r17, 0x07	; 7
    f594:	21 e0       	ldi	r18, 0x01	; 1
    f596:	4e eb       	ldi	r20, 0xBE	; 190
    f598:	50 e0       	ldi	r21, 0x00	; 0
    f59a:	6e e1       	ldi	r22, 0x1E	; 30
    f59c:	70 e0       	ldi	r23, 0x00	; 0
    f59e:	c1 01       	movw	r24, r2
    f5a0:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    f5a4:	c2 52       	subi	r28, 0x22	; 34
    f5a6:	df 4f       	sbci	r29, 0xFF	; 255
    f5a8:	18 82       	st	Y, r1
    f5aa:	ce 5d       	subi	r28, 0xDE	; 222
    f5ac:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    f5ae:	0a e0       	ldi	r16, 0x0A	; 10
    f5b0:	24 e0       	ldi	r18, 0x04	; 4
    f5b2:	44 ed       	ldi	r20, 0xD4	; 212
    f5b4:	5c e0       	ldi	r21, 0x0C	; 12
    f5b6:	6e e2       	ldi	r22, 0x2E	; 46
    f5b8:	ce 01       	movw	r24, r28
    f5ba:	82 52       	subi	r24, 0x22	; 34
    f5bc:	9f 4f       	sbci	r25, 0xFF	; 255
    f5be:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    f5c2:	89 e3       	ldi	r24, 0x39	; 57
    f5c4:	95 e0       	ldi	r25, 0x05	; 5
    f5c6:	9f 83       	std	Y+7, r25	; 0x07
    f5c8:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    f5ca:	89 81       	ldd	r24, Y+1	; 0x01
    f5cc:	9a 81       	ldd	r25, Y+2	; 0x02
    f5ce:	dc 01       	movw	r26, r24
    f5d0:	ed 91       	ld	r30, X+
    f5d2:	fc 91       	ld	r31, X
    f5d4:	06 84       	ldd	r0, Z+14	; 0x0e
    f5d6:	f7 85       	ldd	r31, Z+15	; 0x0f
    f5d8:	e0 2d       	mov	r30, r0
    f5da:	69 e3       	ldi	r22, 0x39	; 57
    f5dc:	75 e0       	ldi	r23, 0x05	; 5
    f5de:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    f5e0:	81 e0       	ldi	r24, 0x01	; 1
    f5e2:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    f5e4:	80 e1       	ldi	r24, 0x10	; 16
    f5e6:	9e e0       	ldi	r25, 0x0E	; 14
    f5e8:	a0 e0       	ldi	r26, 0x00	; 0
    f5ea:	b0 e0       	ldi	r27, 0x00	; 0
    f5ec:	88 87       	std	Y+8, r24	; 0x08
    f5ee:	99 87       	std	Y+9, r25	; 0x09
    f5f0:	aa 87       	std	Y+10, r26	; 0x0a
    f5f2:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    f5f4:	ee ed       	ldi	r30, 0xDE	; 222
    f5f6:	f0 e0       	ldi	r31, 0x00	; 0
    f5f8:	ec 0f       	add	r30, r28
    f5fa:	fd 1f       	adc	r31, r29
    f5fc:	fd 83       	std	Y+5, r31	; 0x05
    f5fe:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    f600:	81 e0       	ldi	r24, 0x01	; 1
    f602:	90 e0       	ldi	r25, 0x00	; 0
    f604:	a0 e0       	ldi	r26, 0x00	; 0
    f606:	b0 e0       	ldi	r27, 0x00	; 0
    f608:	8c 87       	std	Y+12, r24	; 0x0c
    f60a:	9d 87       	std	Y+13, r25	; 0x0d
    f60c:	ae 87       	std	Y+14, r26	; 0x0e
    f60e:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    f610:	ce 01       	movw	r24, r28
    f612:	01 96       	adiw	r24, 0x01	; 1
    f614:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <NTPClient::update()>
    f618:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    f61a:	89 81       	ldd	r24, Y+1	; 0x01
    f61c:	9a 81       	ldd	r25, Y+2	; 0x02
    f61e:	dc 01       	movw	r26, r24
    f620:	ed 91       	ld	r30, X+
    f622:	fc 91       	ld	r31, X
    f624:	02 88       	ldd	r0, Z+18	; 0x12
    f626:	f3 89       	ldd	r31, Z+19	; 0x13
    f628:	e0 2d       	mov	r30, r0
    f62a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    f62c:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
      if (ntp_check(&timeClient) == 0)
    f62e:	11 11       	cpse	r17, r1
    f630:	c5 c7       	rjmp	.+3978   	; 0x105bc <__EEPROM_REGION_LENGTH__+0x5bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
      {
        strcpy_P(str1, text_err);
    f632:	61 e4       	ldi	r22, 0x41	; 65
    f634:	7c e3       	ldi	r23, 0x3C	; 60
    f636:	c1 01       	movw	r24, r2
    f638:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f63c:	00 e0       	ldi	r16, 0x00	; 0
    f63e:	18 ef       	ldi	r17, 0xF8	; 248
    f640:	21 e0       	ldi	r18, 0x01	; 1
    f642:	4e eb       	ldi	r20, 0xBE	; 190
    f644:	50 e0       	ldi	r21, 0x00	; 0
    f646:	60 ea       	ldi	r22, 0xA0	; 160
    f648:	70 e0       	ldi	r23, 0x00	; 0
    f64a:	c1 01       	movw	r24, r2
    f64c:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f650:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
    f654:	82 60       	ori	r24, 0x02	; 2
    f656:	0c 94 8c 83 	jmp	0x10718	; 0x10718 <__EEPROM_REGION_LENGTH__+0x718>
    f65a:	e1 0e       	add	r14, r17
    f65c:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    f65e:	70 e0       	ldi	r23, 0x00	; 0
    f660:	21 2f       	mov	r18, r17
    f662:	81 e2       	ldi	r24, 0x21	; 33
    f664:	9e e0       	ldi	r25, 0x0E	; 14
    f666:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    f66a:	2c cd       	rjmp	.-1448   	; 0xf0c4 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    f66c:	8f ef       	ldi	r24, 0xFF	; 255
    f66e:	90 e0       	ldi	r25, 0x00	; 0
    f670:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <my_lcd+0x19>
    f674:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <my_lcd+0x18>
    f678:	2e cd       	rjmp	.-1444   	; 0xf0d6 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    f67a:	21 30       	cpi	r18, 0x01	; 1
    f67c:	31 05       	cpc	r19, r1
    f67e:	31 f5       	brne	.+76     	; 0xf6cc <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    f680:	20 81       	ld	r18, Z
    f682:	82 23       	and	r24, r18
    f684:	80 83       	st	Z, r24
    f686:	81 e0       	ldi	r24, 0x01	; 1
    f688:	82 b9       	out	0x02, r24	; 2
    f68a:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f68e:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f692:	80 81       	ld	r24, Z
    f694:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
    f698:	82 23       	and	r24, r18
    f69a:	80 83       	st	Z, r24
    f69c:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f6a0:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f6a4:	80 81       	ld	r24, Z
    f6a6:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
    f6aa:	82 2b       	or	r24, r18
    f6ac:	80 83       	st	Z, r24
    f6ae:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
    f6b2:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
    f6b6:	80 81       	ld	r24, Z
    f6b8:	20 91 58 0e 	lds	r18, 0x0E58	; 0x800e58 <my_lcd+0x37>
    f6bc:	82 2b       	or	r24, r18
    f6be:	80 83       	st	Z, r24
setup():
    f6c0:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    f6c2:	91 11       	cpse	r25, r1
    f6c4:	01 c0       	rjmp	.+2      	; 0xf6c8 <setup+0x8a0>
setup():
    f6c6:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    f6c8:	82 b9       	out	0x02, r24	; 2
    f6ca:	43 cd       	rjmp	.-1402   	; 0xf152 <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    f6cc:	20 81       	ld	r18, Z
    f6ce:	82 23       	and	r24, r18
    f6d0:	80 83       	st	Z, r24
setup():
    f6d2:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    f6d4:	91 11       	cpse	r25, r1
    f6d6:	01 c0       	rjmp	.+2      	; 0xf6da <setup+0x8b2>
setup():
    f6d8:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    f6da:	82 b9       	out	0x02, r24	; 2
    f6dc:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f6e0:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f6e4:	80 81       	ld	r24, Z
    f6e6:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
    f6ea:	89 23       	and	r24, r25
    f6ec:	80 83       	st	Z, r24
    f6ee:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
    f6f2:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
    f6f6:	80 81       	ld	r24, Z
    f6f8:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
    f6fc:	89 2b       	or	r24, r25
    f6fe:	80 83       	st	Z, r24
    f700:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
    f704:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
    f708:	80 81       	ld	r24, Z
    f70a:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
    f70e:	31 cd       	rjmp	.-1438   	; 0xf172 <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4741
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    f710:	b1 e0       	ldi	r27, 0x01	; 1
    f712:	ab 12       	cpse	r10, r27
    f714:	c3 c0       	rjmp	.+390    	; 0xf89c <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4743
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f716:	69 ee       	ldi	r22, 0xE9	; 233
    f718:	7b e3       	ldi	r23, 0x3B	; 59
    f71a:	c1 01       	movw	r24, r2
    f71c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4744
      strcat(str1, ":2");
    f720:	6f ec       	ldi	r22, 0xCF	; 207
    f722:	76 e0       	ldi	r23, 0x06	; 6
    f724:	c1 01       	movw	r24, r2
    f726:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4745
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f72a:	ee 24       	eor	r14, r14
    f72c:	ea 94       	dec	r14
    f72e:	fe 2c       	mov	r15, r14
    f730:	00 ee       	ldi	r16, 0xE0	; 224
    f732:	17 e0       	ldi	r17, 0x07	; 7
    f734:	21 e0       	ldi	r18, 0x01	; 1
    f736:	4c e3       	ldi	r20, 0x3C	; 60
    f738:	50 e0       	ldi	r21, 0x00	; 0
    f73a:	6e e1       	ldi	r22, 0x1E	; 30
    f73c:	70 e0       	ldi	r23, 0x00	; 0
    f73e:	c1 01       	movw	r24, r2
    f740:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    f744:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <lm75_temp+0xb>
    f748:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <lm75_temp+0xc>
    f74c:	04 80       	ldd	r0, Z+4	; 0x04
    f74e:	f5 81       	ldd	r31, Z+5	; 0x05
    f750:	e0 2d       	mov	r30, r0
    f752:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    f754:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <lm75_temp+0x2>
    f758:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    f75c:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f760:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f764:	dc 01       	movw	r26, r24
    f766:	ed 91       	ld	r30, X+
    f768:	fc 91       	ld	r31, X
    f76a:	01 90       	ld	r0, Z+
    f76c:	f0 81       	ld	r31, Z
    f76e:	e0 2d       	mov	r30, r0
    f770:	61 2f       	mov	r22, r17
    f772:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    f774:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f778:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f77c:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    f780:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f784:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f788:	20 91 6f 0e 	lds	r18, 0x0E6F	; 0x800e6f <lm75_temp+0x3>
setup():
    f78c:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    f78e:	29 30       	cpi	r18, 0x09	; 9
    f790:	08 f0       	brcs	.+2      	; 0xf794 <setup+0x96c>
setup():
    f792:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    f794:	60 91 6e 0e 	lds	r22, 0x0E6E	; 0x800e6e <lm75_temp+0x2>
    f798:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    f79c:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f7a0:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f7a4:	dc 01       	movw	r26, r24
    f7a6:	ed 91       	ld	r30, X+
    f7a8:	fc 91       	ld	r31, X
    f7aa:	02 84       	ldd	r0, Z+10	; 0x0a
    f7ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    f7ae:	e0 2d       	mov	r30, r0
    f7b0:	19 95       	eicall
    f7b2:	c1 5c       	subi	r28, 0xC1	; 193
    f7b4:	de 4f       	sbci	r29, 0xFE	; 254
    f7b6:	88 83       	st	Y, r24
    f7b8:	cf 53       	subi	r28, 0x3F	; 63
    f7ba:	d1 40       	sbci	r29, 0x01	; 1
    f7bc:	c2 5c       	subi	r28, 0xC2	; 194
    f7be:	de 4f       	sbci	r29, 0xFE	; 254
    f7c0:	18 82       	st	Y, r1
    f7c2:	ce 53       	subi	r28, 0x3E	; 62
    f7c4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    f7c6:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <lm75_temp+0x3>
    f7ca:	89 30       	cpi	r24, 0x09	; 9
    f7cc:	c8 f0       	brcs	.+50     	; 0xf800 <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    f7ce:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f7d2:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f7d6:	dc 01       	movw	r26, r24
    f7d8:	ed 91       	ld	r30, X+
    f7da:	fc 91       	ld	r31, X
    f7dc:	02 84       	ldd	r0, Z+10	; 0x0a
    f7de:	f3 85       	ldd	r31, Z+11	; 0x0b
    f7e0:	e0 2d       	mov	r30, r0
    f7e2:	19 95       	eicall
    f7e4:	c2 5c       	subi	r28, 0xC2	; 194
    f7e6:	de 4f       	sbci	r29, 0xFE	; 254
    f7e8:	e8 81       	ld	r30, Y
    f7ea:	f9 81       	ldd	r31, Y+1	; 0x01
    f7ec:	ce 53       	subi	r28, 0x3E	; 62
    f7ee:	d1 40       	sbci	r29, 0x01	; 1
    f7f0:	e8 2b       	or	r30, r24
    f7f2:	f9 2b       	or	r31, r25
    f7f4:	c2 5c       	subi	r28, 0xC2	; 194
    f7f6:	de 4f       	sbci	r29, 0xFE	; 254
    f7f8:	f9 83       	std	Y+1, r31	; 0x01
    f7fa:	e8 83       	st	Y, r30
    f7fc:	ce 53       	subi	r28, 0x3E	; 62
    f7fe:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    f800:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <lm75_temp>
    f804:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <lm75_temp+0x1>
    f808:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4746
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f80c:	7e 01       	movw	r14, r28
    f80e:	f2 ee       	ldi	r31, 0xE2	; 226
    f810:	ef 1a       	sub	r14, r31
    f812:	fe ef       	ldi	r31, 0xFE	; 254
    f814:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    f816:	60 91 70 0e 	lds	r22, 0x0E70	; 0x800e70 <lm75_temp+0x4>
    f81a:	70 91 71 0e 	lds	r23, 0x0E71	; 0x800e71 <lm75_temp+0x5>
    f81e:	c2 5c       	subi	r28, 0xC2	; 194
    f820:	de 4f       	sbci	r29, 0xFE	; 254
    f822:	28 81       	ld	r18, Y
    f824:	39 81       	ldd	r19, Y+1	; 0x01
    f826:	ce 53       	subi	r28, 0x3E	; 62
    f828:	d1 40       	sbci	r29, 0x01	; 1
    f82a:	62 23       	and	r22, r18
    f82c:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    f82e:	07 2e       	mov	r0, r23
    f830:	00 0c       	add	r0, r0
    f832:	88 0b       	sbc	r24, r24
    f834:	99 0b       	sbc	r25, r25
    f836:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
    f83a:	20 91 73 0e 	lds	r18, 0x0E73	; 0x800e73 <lm75_temp+0x7>
    f83e:	30 91 74 0e 	lds	r19, 0x0E74	; 0x800e74 <lm75_temp+0x8>
    f842:	40 91 75 0e 	lds	r20, 0x0E75	; 0x800e75 <lm75_temp+0x9>
    f846:	50 91 76 0e 	lds	r21, 0x0E76	; 0x800e76 <lm75_temp+0xa>
    f84a:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4746
    f84e:	87 01       	movw	r16, r14
    f850:	22 e0       	ldi	r18, 0x02	; 2
    f852:	44 e0       	ldi	r20, 0x04	; 4
    f854:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4747
      sprintf(str2, "iT=%sC", s_current);
    f858:	ff 92       	push	r15
    f85a:	ef 92       	push	r14
    f85c:	82 ed       	ldi	r24, 0xD2	; 210
    f85e:	96 e0       	ldi	r25, 0x06	; 6
    f860:	9f 93       	push	r25
    f862:	8f 93       	push	r24
    f864:	4e 01       	movw	r8, r28
    f866:	38 e8       	ldi	r19, 0x88	; 136
    f868:	83 0e       	add	r8, r19
    f86a:	91 1c       	adc	r9, r1
    f86c:	9f 92       	push	r9
    f86e:	8f 92       	push	r8
    f870:	0e 94 2e be 	call	0x17c5c	; 0x17c5c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4748
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f874:	ee 24       	eor	r14, r14
    f876:	ea 94       	dec	r14
    f878:	fe 2c       	mov	r15, r14
    f87a:	00 ee       	ldi	r16, 0xE0	; 224
    f87c:	17 e0       	ldi	r17, 0x07	; 7
    f87e:	21 e0       	ldi	r18, 0x01	; 1
    f880:	4c e3       	ldi	r20, 0x3C	; 60
    f882:	50 e0       	ldi	r21, 0x00	; 0
    f884:	60 ea       	ldi	r22, 0xA0	; 160
    f886:	70 e0       	ldi	r23, 0x00	; 0
    f888:	c4 01       	movw	r24, r8
    f88a:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f88e:	0f 90       	pop	r0
    f890:	0f 90       	pop	r0
    f892:	0f 90       	pop	r0
    f894:	0f 90       	pop	r0
    f896:	0f 90       	pop	r0
    f898:	0f 90       	pop	r0
    f89a:	6e ce       	rjmp	.-804    	; 0xf578 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    f89c:	82 e0       	ldi	r24, 0x02	; 2
    f89e:	a8 12       	cpse	r10, r24
    f8a0:	8c c1       	rjmp	.+792    	; 0xfbba <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4754
    {
      if (EEPROM.read(set_default_values) == 255)
    f8a2:	8a e5       	ldi	r24, 0x5A	; 90
    f8a4:	90 e0       	ldi	r25, 0x00	; 0
    f8a6:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f8aa:	8f 3f       	cpi	r24, 0xFF	; 255
    f8ac:	09 f0       	breq	.+2      	; 0xf8b0 <setup+0xa88>
    f8ae:	74 c1       	rjmp	.+744    	; 0xfb98 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4756
      {
        EEPROM.write(set_default_values, 0);
    f8b0:	60 e0       	ldi	r22, 0x00	; 0
    f8b2:	8a e5       	ldi	r24, 0x5A	; 90
    f8b4:	90 e0       	ldi	r25, 0x00	; 0
    f8b6:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4757
        strcpy_P(str1, text_vychozi_nastaveni);
    f8ba:	67 ed       	ldi	r22, 0xD7	; 215
    f8bc:	7b e3       	ldi	r23, 0x3B	; 59
    f8be:	8d 2d       	mov	r24, r13
    f8c0:	9b 2d       	mov	r25, r11
    f8c2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4758
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    f8c6:	ee 24       	eor	r14, r14
    f8c8:	ea 94       	dec	r14
    f8ca:	fe 2c       	mov	r15, r14
    f8cc:	00 e0       	ldi	r16, 0x00	; 0
    f8ce:	18 ef       	ldi	r17, 0xF8	; 248
    f8d0:	21 e0       	ldi	r18, 0x01	; 1
    f8d2:	46 e4       	ldi	r20, 0x46	; 70
    f8d4:	50 e0       	ldi	r21, 0x00	; 0
    f8d6:	6e e1       	ldi	r22, 0x1E	; 30
    f8d8:	70 e0       	ldi	r23, 0x00	; 0
    f8da:	8d 2d       	mov	r24, r13
    f8dc:	9b 2d       	mov	r25, r11
    f8de:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    f8e2:	6f ef       	ldi	r22, 0xFF	; 255
    f8e4:	8d e5       	ldi	r24, 0x5D	; 93
    f8e6:	90 e0       	ldi	r25, 0x00	; 0
    f8e8:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4763
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    f8ec:	80 e0       	ldi	r24, 0x00	; 0
    f8ee:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
    f8f2:	81 e0       	ldi	r24, 0x01	; 1
    f8f4:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
    f8f8:	82 e0       	ldi	r24, 0x02	; 2
    f8fa:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
    f8fe:	83 e0       	ldi	r24, 0x03	; 3
    f900:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
    f904:	84 e0       	ldi	r24, 0x04	; 4
    f906:	0e 94 79 57 	call	0xaef2	; 0xaef2 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f90a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767
        {
          strcpy(tmp1, "");
    f90c:	62 ef       	ldi	r22, 0xF2	; 242
    f90e:	72 e0       	ldi	r23, 0x02	; 2
    f910:	ce 01       	movw	r24, r28
    f912:	8e 50       	subi	r24, 0x0E	; 14
    f914:	9f 4f       	sbci	r25, 0xFF	; 255
    f916:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4768
          remote_tds_clear(idx);
    f91a:	81 2f       	mov	r24, r17
    f91c:	0e 94 a2 59 	call	0xb344	; 0xb344 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f920:	1f 5f       	subi	r17, 0xFF	; 255
    f922:	1a 30       	cpi	r17, 0x0A	; 10
    f924:	99 f7       	brne	.-26     	; 0xf90c <setup+0xae4>
    f926:	e1 ef       	ldi	r30, 0xF1	; 241
    f928:	8e 2e       	mov	r8, r30
    f92a:	99 24       	eor	r9, r9
    f92c:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f92e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4773
        {
          strcpy(str2, "PROG");
    f930:	62 ee       	ldi	r22, 0xE2	; 226
    f932:	74 e0       	ldi	r23, 0x04	; 4
    f934:	ce 01       	movw	r24, r28
    f936:	88 57       	subi	r24, 0x78	; 120
    f938:	9f 4f       	sbci	r25, 0xFF	; 255
    f93a:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4774
          thermostat_program_set_name(idx, str2);
    f93e:	be 01       	movw	r22, r28
    f940:	68 57       	subi	r22, 0x78	; 120
    f942:	7f 4f       	sbci	r23, 0xFF	; 255
    f944:	81 2f       	mov	r24, r17
    f946:	0e 94 3f 56 	call	0xac7e	; 0xac7e <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    f94a:	60 e0       	ldi	r22, 0x00	; 0
    f94c:	c4 01       	movw	r24, r8
    f94e:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4776
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f952:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4778
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    f954:	c1 2c       	mov	r12, r1
    f956:	e1 2c       	mov	r14, r1
    f958:	00 e0       	ldi	r16, 0x00	; 0
    f95a:	20 e0       	ldi	r18, 0x00	; 0
    f95c:	40 e0       	ldi	r20, 0x00	; 0
    f95e:	6f 2d       	mov	r22, r15
    f960:	81 2f       	mov	r24, r17
    f962:	0e 94 03 56 	call	0xac06	; 0xac06 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
            thermostat_program_set_threshold(idx, interval_id, 220);
    f966:	4c ed       	ldi	r20, 0xDC	; 220
    f968:	50 e0       	ldi	r21, 0x00	; 0
    f96a:	6f 2d       	mov	r22, r15
    f96c:	81 2f       	mov	r24, r17
    f96e:	0e 94 e7 55 	call	0xabce	; 0xabce <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4780
            thermostat_program_set_week(idx, interval_id, 0);
    f972:	40 e0       	ldi	r20, 0x00	; 0
    f974:	6f 2d       	mov	r22, r15
    f976:	81 2f       	mov	r24, r17
    f978:	0e 94 d9 55 	call	0xabb2	; 0xabb2 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4776
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f97c:	f3 94       	inc	r15
    f97e:	9b e0       	ldi	r25, 0x0B	; 11
    f980:	f9 12       	cpse	r15, r25
    f982:	e8 cf       	rjmp	.-48     	; 0xf954 <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f984:	1f 5f       	subi	r17, 0xFF	; 255
    f986:	ad e4       	ldi	r26, 0x4D	; 77
    f988:	8a 0e       	add	r8, r26
    f98a:	91 1c       	adc	r9, r1
    f98c:	18 30       	cpi	r17, 0x08	; 8
    f98e:	81 f6       	brne	.-96     	; 0xf930 <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4791
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    f990:	7a e0       	ldi	r23, 0x0A	; 10
    f992:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    f994:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4786
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    f996:	be 01       	movw	r22, r28
    f998:	68 53       	subi	r22, 0x38	; 56
    f99a:	7f 4f       	sbci	r23, 0xFF	; 255
    f99c:	80 2f       	mov	r24, r16
    f99e:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
          strcpy(tds.name, "FREE");
    f9a2:	6f e6       	ldi	r22, 0x6F	; 111
    f9a4:	73 e0       	ldi	r23, 0x03	; 3
    f9a6:	c4 5b       	subi	r28, 0xB4	; 180
    f9a8:	de 4f       	sbci	r29, 0xFE	; 254
    f9aa:	88 81       	ld	r24, Y
    f9ac:	99 81       	ldd	r25, Y+1	; 0x01
    f9ae:	cc 54       	subi	r28, 0x4C	; 76
    f9b0:	d1 40       	sbci	r29, 0x01	; 1
    f9b2:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4788
          tds.used = 0;
    f9b6:	c8 53       	subi	r28, 0x38	; 56
    f9b8:	df 4f       	sbci	r29, 0xFF	; 255
    f9ba:	18 82       	st	Y, r1
    f9bc:	c8 5c       	subi	r28, 0xC8	; 200
    f9be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4789
          tds.offset = 0;
    f9c0:	ce 52       	subi	r28, 0x2E	; 46
    f9c2:	df 4f       	sbci	r29, 0xFF	; 255
    f9c4:	19 82       	std	Y+1, r1	; 0x01
    f9c6:	18 82       	st	Y, r1
    f9c8:	c2 5d       	subi	r28, 0xD2	; 210
    f9ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
          tds.assigned_ds2482 = 0;
    f9cc:	cf 52       	subi	r28, 0x2F	; 47
    f9ce:	df 4f       	sbci	r29, 0xFF	; 255
    f9d0:	18 82       	st	Y, r1
    f9d2:	c1 5d       	subi	r28, 0xD1	; 209
    f9d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4791
          tds.period = 10;
    f9d6:	c4 52       	subi	r28, 0x24	; 36
    f9d8:	df 4f       	sbci	r29, 0xFF	; 255
    f9da:	f8 82       	st	Y, r15
    f9dc:	cc 5d       	subi	r28, 0xDC	; 220
    f9de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    f9e0:	c7 53       	subi	r28, 0x37	; 55
    f9e2:	df 4f       	sbci	r29, 0xFF	; 255
    f9e4:	18 83       	st	Y, r17
    f9e6:	c9 5c       	subi	r28, 0xC9	; 201
    f9e8:	d0 40       	sbci	r29, 0x00	; 0
    f9ea:	c6 53       	subi	r28, 0x36	; 54
    f9ec:	df 4f       	sbci	r29, 0xFF	; 255
    f9ee:	18 83       	st	Y, r17
    f9f0:	ca 5c       	subi	r28, 0xCA	; 202
    f9f2:	d0 40       	sbci	r29, 0x00	; 0
    f9f4:	c5 53       	subi	r28, 0x35	; 53
    f9f6:	df 4f       	sbci	r29, 0xFF	; 255
    f9f8:	18 83       	st	Y, r17
    f9fa:	cb 5c       	subi	r28, 0xCB	; 203
    f9fc:	d0 40       	sbci	r29, 0x00	; 0
    f9fe:	c4 53       	subi	r28, 0x34	; 52
    fa00:	df 4f       	sbci	r29, 0xFF	; 255
    fa02:	18 83       	st	Y, r17
    fa04:	cc 5c       	subi	r28, 0xCC	; 204
    fa06:	d0 40       	sbci	r29, 0x00	; 0
    fa08:	c3 53       	subi	r28, 0x33	; 51
    fa0a:	df 4f       	sbci	r29, 0xFF	; 255
    fa0c:	18 83       	st	Y, r17
    fa0e:	cd 5c       	subi	r28, 0xCD	; 205
    fa10:	d0 40       	sbci	r29, 0x00	; 0
    fa12:	c2 53       	subi	r28, 0x32	; 50
    fa14:	df 4f       	sbci	r29, 0xFF	; 255
    fa16:	18 83       	st	Y, r17
    fa18:	ce 5c       	subi	r28, 0xCE	; 206
    fa1a:	d0 40       	sbci	r29, 0x00	; 0
    fa1c:	c1 53       	subi	r28, 0x31	; 49
    fa1e:	df 4f       	sbci	r29, 0xFF	; 255
    fa20:	18 83       	st	Y, r17
    fa22:	cf 5c       	subi	r28, 0xCF	; 207
    fa24:	d0 40       	sbci	r29, 0x00	; 0
    fa26:	c0 53       	subi	r28, 0x30	; 48
    fa28:	df 4f       	sbci	r29, 0xFF	; 255
    fa2a:	18 83       	st	Y, r17
    fa2c:	c0 5d       	subi	r28, 0xD0	; 208
    fa2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4793
          set_tds18s20(idx, &tds);
    fa30:	be 01       	movw	r22, r28
    fa32:	68 53       	subi	r22, 0x38	; 56
    fa34:	7f 4f       	sbci	r23, 0xFF	; 255
    fa36:	80 2f       	mov	r24, r16
    fa38:	0e 94 35 58 	call	0xb06a	; 0xb06a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    fa3c:	0f 5f       	subi	r16, 0xFF	; 255
    fa3e:	06 30       	cpi	r16, 0x06	; 6
    fa40:	09 f0       	breq	.+2      	; 0xfa44 <setup+0xc1c>
    fa42:	a9 cf       	rjmp	.-174    	; 0xf996 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    fa44:	84 e1       	ldi	r24, 0x14	; 20
    fa46:	c2 52       	subi	r28, 0x22	; 34
    fa48:	df 4f       	sbci	r29, 0xFF	; 255
    fa4a:	88 83       	st	Y, r24
    fa4c:	ce 5d       	subi	r28, 0xDE	; 222
    fa4e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    fa50:	8c e0       	ldi	r24, 0x0C	; 12
    fa52:	c1 52       	subi	r28, 0x21	; 33
    fa54:	df 4f       	sbci	r29, 0xFF	; 255
    fa56:	88 83       	st	Y, r24
    fa58:	cf 5d       	subi	r28, 0xDF	; 223
    fa5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    fa5c:	8e e0       	ldi	r24, 0x0E	; 14
    fa5e:	c0 52       	subi	r28, 0x20	; 32
    fa60:	df 4f       	sbci	r29, 0xFF	; 255
    fa62:	88 83       	st	Y, r24
    fa64:	c0 5e       	subi	r28, 0xE0	; 224
    fa66:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    fa68:	91 e1       	ldi	r25, 0x11	; 17
    fa6a:	cf 51       	subi	r28, 0x1F	; 31
    fa6c:	df 4f       	sbci	r29, 0xFF	; 255
    fa6e:	98 83       	st	Y, r25
    fa70:	c1 5e       	subi	r28, 0xE1	; 225
    fa72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    fa74:	ce 51       	subi	r28, 0x1E	; 30
    fa76:	df 4f       	sbci	r29, 0xFF	; 255
    fa78:	88 83       	st	Y, r24
    fa7a:	c2 5e       	subi	r28, 0xE2	; 226
    fa7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    fa7e:	cd 51       	subi	r28, 0x1D	; 29
    fa80:	df 4f       	sbci	r29, 0xFF	; 255
    fa82:	18 82       	st	Y, r1
    fa84:	c3 5e       	subi	r28, 0xE3	; 227
    fa86:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4796
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    fa88:	ce 01       	movw	r24, r28
    fa8a:	82 52       	subi	r24, 0x22	; 34
    fa8c:	9f 4f       	sbci	r25, 0xFF	; 255
    fa8e:	0e 94 d2 99 	call	0x133a4	; 0x133a4 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    fa92:	61 e0       	ldi	r22, 0x01	; 1
    fa94:	81 e0       	ldi	r24, 0x01	; 1
    fa96:	90 e0       	ldi	r25, 0x00	; 0
    fa98:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4799
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    fa9c:	82 e0       	ldi	r24, 0x02	; 2
    fa9e:	80 93 86 0c 	sts	0x0C86, r24	; 0x800c86 <device>
    faa2:	91 e0       	ldi	r25, 0x01	; 1
    faa4:	90 93 87 0c 	sts	0x0C87, r25	; 0x800c87 <device+0x1>
    faa8:	80 93 88 0c 	sts	0x0C88, r24	; 0x800c88 <device+0x2>
    faac:	20 91 6f 0a 	lds	r18, 0x0A6F	; 0x800a6f <dvanact>
    fab0:	30 91 70 0a 	lds	r19, 0x0A70	; 0x800a70 <dvanact+0x1>
    fab4:	36 95       	lsr	r19
    fab6:	27 95       	ror	r18
    fab8:	20 93 89 0c 	sts	0x0C89, r18	; 0x800c89 <device+0x3>
    fabc:	20 91 37 0b 	lds	r18, 0x0B37	; 0x800b37 <light_curr>
    fac0:	30 91 38 0b 	lds	r19, 0x0B38	; 0x800b38 <light_curr+0x1>
    fac4:	36 95       	lsr	r19
    fac6:	27 95       	ror	r18
    fac8:	20 93 8a 0c 	sts	0x0C8A, r18	; 0x800c8a <device+0x4>
    facc:	20 91 6d 0a 	lds	r18, 0x0A6D	; 0x800a6d <proud>
    fad0:	30 91 6e 0a 	lds	r19, 0x0A6E	; 0x800a6e <proud+0x1>
    fad4:	36 95       	lsr	r19
    fad6:	27 95       	ror	r18
    fad8:	20 93 8b 0c 	sts	0x0C8B, r18	; 0x800c8b <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    fadc:	30 ec       	ldi	r19, 0xC0	; 192
    fade:	30 93 8c 0c 	sts	0x0C8C, r19	; 0x800c8c <device+0x6>
    fae2:	28 ea       	ldi	r18, 0xA8	; 168
    fae4:	20 93 8d 0c 	sts	0x0C8D, r18	; 0x800c8d <device+0x7>
    fae8:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <device+0x8>
    faec:	4e e6       	ldi	r20, 0x6E	; 110
    faee:	40 93 8f 0c 	sts	0x0C8F, r20	; 0x800c8f <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4801
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    faf2:	10 93 90 0c 	sts	0x0C90, r17	; 0x800c90 <device+0xa>
    faf6:	10 93 91 0c 	sts	0x0C91, r17	; 0x800c91 <device+0xb>
    fafa:	10 93 92 0c 	sts	0x0C92, r17	; 0x800c92 <device+0xc>
    fafe:	10 92 93 0c 	sts	0x0C93, r1	; 0x800c93 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4803

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    fb02:	30 93 98 0c 	sts	0x0C98, r19	; 0x800c98 <device+0x12>
    fb06:	20 93 99 0c 	sts	0x0C99, r18	; 0x800c99 <device+0x13>
    fb0a:	80 93 9a 0c 	sts	0x0C9A, r24	; 0x800c9a <device+0x14>
    fb0e:	90 93 9b 0c 	sts	0x0C9B, r25	; 0x800c9b <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4804
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    fb12:	30 93 94 0c 	sts	0x0C94, r19	; 0x800c94 <device+0xe>
    fb16:	20 93 95 0c 	sts	0x0C95, r18	; 0x800c95 <device+0xf>
    fb1a:	80 93 96 0c 	sts	0x0C96, r24	; 0x800c96 <device+0x10>
    fb1e:	90 93 97 0c 	sts	0x0C97, r25	; 0x800c97 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    fb22:	30 93 a6 0c 	sts	0x0CA6, r19	; 0x800ca6 <device+0x20>
    fb26:	20 93 a7 0c 	sts	0x0CA7, r18	; 0x800ca7 <device+0x21>
    fb2a:	80 93 a8 0c 	sts	0x0CA8, r24	; 0x800ca8 <device+0x22>
    fb2e:	90 93 a9 0c 	sts	0x0CA9, r25	; 0x800ca9 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4806
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    fb32:	30 93 d4 0c 	sts	0x0CD4, r19	; 0x800cd4 <device+0x4e>
    fb36:	20 93 d5 0c 	sts	0x0CD5, r18	; 0x800cd5 <device+0x4f>
    fb3a:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <device+0x50>
    fb3e:	90 93 d7 0c 	sts	0x0CD7, r25	; 0x800cd7 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4807
        device.mqtt_port = 1883;
    fb42:	8b e5       	ldi	r24, 0x5B	; 91
    fb44:	97 e0       	ldi	r25, 0x07	; 7
    fb46:	90 93 ab 0c 	sts	0x0CAB, r25	; 0x800cab <device+0x25>
    fb4a:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
        strcpy(device.mqtt_user, "saric");
    fb4e:	69 ed       	ldi	r22, 0xD9	; 217
    fb50:	76 e0       	ldi	r23, 0x06	; 6
    fb52:	8c ea       	ldi	r24, 0xAC	; 172
    fb54:	9c e0       	ldi	r25, 0x0C	; 12
    fb56:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4809
        strcpy(device.mqtt_key, "no");
    fb5a:	6f ed       	ldi	r22, 0xDF	; 223
    fb5c:	76 e0       	ldi	r23, 0x06	; 6
    fb5e:	80 ec       	ldi	r24, 0xC0	; 192
    fb60:	9c e0       	ldi	r25, 0x0C	; 12
    fb62:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4810
        save_setup_network();
    fb66:	0e 94 be 58 	call	0xb17c	; 0xb17c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4811
        strcpy(str1, "TERM D1");
    fb6a:	62 ee       	ldi	r22, 0xE2	; 226
    fb6c:	76 e0       	ldi	r23, 0x06	; 6
    fb6e:	8d 2d       	mov	r24, r13
    fb70:	9b 2d       	mov	r25, r11
    fb72:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4812
        device_set_name(str1);
    fb76:	8d 2d       	mov	r24, r13
    fb78:	9b 2d       	mov	r25, r11
    fb7a:	0e 94 96 58 	call	0xb12c	; 0xb12c <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4814
        char hostname[10];
        device_get_name(hostname);
    fb7e:	ce 01       	movw	r24, r28
    fb80:	82 52       	subi	r24, 0x22	; 34
    fb82:	9f 4f       	sbci	r25, 0xFF	; 255
    fb84:	0e 94 8d 61 	call	0xc31a	; 0xc31a <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4815
        default_ring = 0;
    fb88:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    fb8c:	60 e0       	ldi	r22, 0x00	; 0
    fb8e:	8c e5       	ldi	r24, 0x5C	; 92
    fb90:	90 e0       	ldi	r25, 0x00	; 0
    fb92:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    fb96:	f0 cc       	rjmp	.-1568   	; 0xf578 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    fb98:	6b ec       	ldi	r22, 0xCB	; 203
    fb9a:	7b e3       	ldi	r23, 0x3B	; 59
    fb9c:	8d 2d       	mov	r24, r13
    fb9e:	9b 2d       	mov	r25, r11
    fba0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fba4:	ee 24       	eor	r14, r14
    fba6:	ea 94       	dec	r14
    fba8:	fe 2c       	mov	r15, r14
    fbaa:	00 ee       	ldi	r16, 0xE0	; 224
    fbac:	17 e0       	ldi	r17, 0x07	; 7
    fbae:	21 e0       	ldi	r18, 0x01	; 1
    fbb0:	46 e4       	ldi	r20, 0x46	; 70
    fbb2:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fbb4:	6e e1       	ldi	r22, 0x1E	; 30
    fbb6:	70 e0       	ldi	r23, 0x00	; 0
    fbb8:	5d c0       	rjmp	.+186    	; 0xfc74 <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4826
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    fbba:	b3 e0       	ldi	r27, 0x03	; 3
    fbbc:	ab 12       	cpse	r10, r27
    fbbe:	72 c0       	rjmp	.+228    	; 0xfca4 <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    fbc0:	61 e0       	ldi	r22, 0x01	; 1
    fbc2:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
    fbc6:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    fbca:	61 e0       	ldi	r22, 0x01	; 1
    fbcc:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
    fbd0:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    fbd4:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
    fbd8:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
    fbdc:	0e 94 09 2c 	call	0x5812	; 0x5812 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    fbe0:	60 e0       	ldi	r22, 0x00	; 0
    fbe2:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
    fbe6:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    fbea:	61 e0       	ldi	r22, 0x01	; 1
    fbec:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
    fbf0:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
    fbf4:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    fbf8:	60 e4       	ldi	r22, 0x40	; 64
    fbfa:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
    fbfe:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
    fc02:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    fc06:	61 e0       	ldi	r22, 0x01	; 1
    fc08:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
    fc0c:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4829
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    fc10:	4b ea       	ldi	r20, 0xAB	; 171
    fc12:	60 e0       	ldi	r22, 0x00	; 0
    fc14:	70 e0       	ldi	r23, 0x00	; 0
    fc16:	cb 01       	movw	r24, r22
    fc18:	0e 94 b5 90 	call	0x1216a	; 0x1216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
      if (SRAM.readByte(0) == 0xAB)
    fc1c:	60 e0       	ldi	r22, 0x00	; 0
    fc1e:	70 e0       	ldi	r23, 0x00	; 0
    fc20:	cb 01       	movw	r24, r22
    fc22:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
      {
        strcpy_P(str1, text_test_ram);
    fc26:	6e eb       	ldi	r22, 0xBE	; 190
    fc28:	7b e3       	ldi	r23, 0x3B	; 59
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    fc2a:	8b 3a       	cpi	r24, 0xAB	; 171
    fc2c:	41 f5       	brne	.+80     	; 0xfc7e <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
      {
        strcpy_P(str1, text_test_ram);
    fc2e:	8d 2d       	mov	r24, r13
    fc30:	9b 2d       	mov	r25, r11
    fc32:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4833
        strcat(str1, " init ...");
    fc36:	6a ee       	ldi	r22, 0xEA	; 234
    fc38:	76 e0       	ldi	r23, 0x06	; 6
    fc3a:	8d 2d       	mov	r24, r13
    fc3c:	9b 2d       	mov	r25, r11
    fc3e:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fc42:	ee 24       	eor	r14, r14
    fc44:	ea 94       	dec	r14
    fc46:	fe 2c       	mov	r15, r14
    fc48:	00 ee       	ldi	r16, 0xE0	; 224
    fc4a:	17 e0       	ldi	r17, 0x07	; 7
    fc4c:	21 e0       	ldi	r18, 0x01	; 1
    fc4e:	40 e5       	ldi	r20, 0x50	; 80
    fc50:	50 e0       	ldi	r21, 0x00	; 0
    fc52:	6e e1       	ldi	r22, 0x1E	; 30
    fc54:	70 e0       	ldi	r23, 0x00	; 0
    fc56:	8d 2d       	mov	r24, r13
    fc58:	9b 2d       	mov	r25, r11
    fc5a:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    fc5e:	6b eb       	ldi	r22, 0xBB	; 187
    fc60:	7b e3       	ldi	r23, 0x3B	; 59
    fc62:	8d 2d       	mov	r24, r13
    fc64:	9b 2d       	mov	r25, r11
    fc66:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4848
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fc6a:	21 e0       	ldi	r18, 0x01	; 1
    fc6c:	40 e5       	ldi	r20, 0x50	; 80
    fc6e:	50 e0       	ldi	r21, 0x00	; 0
    fc70:	62 ed       	ldi	r22, 0xD2	; 210
    fc72:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fc74:	8d 2d       	mov	r24, r13
    fc76:	9b 2d       	mov	r25, r11
    fc78:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fc7c:	7d cc       	rjmp	.-1798   	; 0xf578 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4852
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    fc7e:	8d 2d       	mov	r24, r13
    fc80:	9b 2d       	mov	r25, r11
    fc82:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4853
        strcat_P(str1, text_err);
    fc86:	61 e4       	ldi	r22, 0x41	; 65
    fc88:	7c e3       	ldi	r23, 0x3C	; 60
    fc8a:	8d 2d       	mov	r24, r13
    fc8c:	9b 2d       	mov	r25, r11
    fc8e:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fc92:	ee 24       	eor	r14, r14
    fc94:	ea 94       	dec	r14
    fc96:	fe 2c       	mov	r15, r14
    fc98:	00 e0       	ldi	r16, 0x00	; 0
    fc9a:	18 ef       	ldi	r17, 0xF8	; 248
    fc9c:	21 e0       	ldi	r18, 0x01	; 1
    fc9e:	40 e5       	ldi	r20, 0x50	; 80
    fca0:	50 e0       	ldi	r21, 0x00	; 0
    fca2:	88 cf       	rjmp	.-240    	; 0xfbb4 <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4859
      }
    }

    //// init EEPROMKY
    if (init == 4)
    fca4:	e4 e0       	ldi	r30, 0x04	; 4
    fca6:	ae 12       	cpse	r10, r30
    fca8:	e5 c4       	rjmp	.+2506   	; 0x10674 <__EEPROM_REGION_LENGTH__+0x674>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    fcaa:	61 e0       	ldi	r22, 0x01	; 1
    fcac:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <SROM+0xa>
    fcb0:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    fcb4:	61 e0       	ldi	r22, 0x01	; 1
    fcb6:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <SROM+0xa>
    fcba:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    fcbe:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
    fcc2:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
    fcc6:	0e 94 09 2c 	call	0x5812	; 0x5812 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    fcca:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <SROM+0x4>
    fcce:	90 91 dd 0c 	lds	r25, 0x0CDD	; 0x800cdd <SROM+0x5>
    fcd2:	a0 91 de 0c 	lds	r26, 0x0CDE	; 0x800cde <SROM+0x6>
    fcd6:	b0 91 df 0c 	lds	r27, 0x0CDF	; 0x800cdf <SROM+0x7>
    fcda:	89 2b       	or	r24, r25
    fcdc:	8a 2b       	or	r24, r26
    fcde:	8b 2b       	or	r24, r27
    fce0:	a9 f0       	breq	.+42     	; 0xfd0c <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    fce2:	0e 94 76 91 	call	0x122ec	; 0x122ec <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    fce6:	80 fd       	sbrc	r24, 0
    fce8:	fc cf       	rjmp	.-8      	; 0xfce2 <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    fcea:	86 e0       	ldi	r24, 0x06	; 6
    fcec:	0e 94 2e 91 	call	0x1225c	; 0x1225c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    fcf0:	0e 94 29 91 	call	0x12252	; 0x12252 <EEPROM_CAT25::endCommand() [clone .constprop.90]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    fcf4:	82 e0       	ldi	r24, 0x02	; 2
    fcf6:	0e 94 2e 91 	call	0x1225c	; 0x1225c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    fcfa:	6a eb       	ldi	r22, 0xBA	; 186
    fcfc:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
    fd00:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
    fd04:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    fd08:	0e 94 29 91 	call	0x12252	; 0x12252 <EEPROM_CAT25::endCommand() [clone .constprop.90]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    fd0c:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <SROM+0x4>
    fd10:	90 91 dd 0c 	lds	r25, 0x0CDD	; 0x800cdd <SROM+0x5>
    fd14:	a0 91 de 0c 	lds	r26, 0x0CDE	; 0x800cde <SROM+0x6>
    fd18:	b0 91 df 0c 	lds	r27, 0x0CDF	; 0x800cdf <SROM+0x7>
    fd1c:	89 2b       	or	r24, r25
    fd1e:	8a 2b       	or	r24, r26
    fd20:	8b 2b       	or	r24, r27
    fd22:	71 f1       	breq	.+92     	; 0xfd80 <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    fd24:	0e 94 76 91 	call	0x122ec	; 0x122ec <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    fd28:	80 fd       	sbrc	r24, 0
    fd2a:	fc cf       	rjmp	.-8      	; 0xfd24 <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    fd2c:	83 e0       	ldi	r24, 0x03	; 3
    fd2e:	0e 94 2e 91 	call	0x1225c	; 0x1225c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    fd32:	6f ef       	ldi	r22, 0xFF	; 255
    fd34:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
    fd38:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
    fd3c:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
    fd40:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    fd42:	0e 94 29 91 	call	0x12252	; 0x12252 <EEPROM_CAT25::endCommand() [clone .constprop.90]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    fd46:	1a 3b       	cpi	r17, 0xBA	; 186
    fd48:	d9 f4       	brne	.+54     	; 0xfd80 <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4866

      {
        strcpy_P(str1, text_test_eeprom);
    fd4a:	6b ea       	ldi	r22, 0xAB	; 171
    fd4c:	7b e3       	ldi	r23, 0x3B	; 59
    fd4e:	8d 2d       	mov	r24, r13
    fd50:	9b 2d       	mov	r25, r11
    fd52:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4867
        strcat_P(str1, text_ok);
    fd56:	6b eb       	ldi	r22, 0xBB	; 187
    fd58:	7b e3       	ldi	r23, 0x3B	; 59
    fd5a:	8d 2d       	mov	r24, r13
    fd5c:	9b 2d       	mov	r25, r11
    fd5e:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fd62:	ee 24       	eor	r14, r14
    fd64:	ea 94       	dec	r14
    fd66:	fe 2c       	mov	r15, r14
    fd68:	00 ee       	ldi	r16, 0xE0	; 224
    fd6a:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4874
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd6c:	21 e0       	ldi	r18, 0x01	; 1
    fd6e:	4a e5       	ldi	r20, 0x5A	; 90
    fd70:	50 e0       	ldi	r21, 0x00	; 0
    fd72:	6e e1       	ldi	r22, 0x1E	; 30
    fd74:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fd76:	8d 2d       	mov	r24, r13
    fd78:	9b 2d       	mov	r25, r11
    fd7a:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fd7e:	fc c0       	rjmp	.+504    	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    fd80:	6b ea       	ldi	r22, 0xAB	; 171
    fd82:	7b e3       	ldi	r23, 0x3B	; 59
    fd84:	8d 2d       	mov	r24, r13
    fd86:	9b 2d       	mov	r25, r11
    fd88:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4873
        strcat_P(str1, text_err);
    fd8c:	61 e4       	ldi	r22, 0x41	; 65
    fd8e:	7c e3       	ldi	r23, 0x3C	; 60
    fd90:	8d 2d       	mov	r24, r13
    fd92:	9b 2d       	mov	r25, r11
    fd94:	0e 94 3a b1 	call	0x16274	; 0x16274 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4874
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd98:	ee 24       	eor	r14, r14
    fd9a:	ea 94       	dec	r14
    fd9c:	fe 2c       	mov	r15, r14
    fd9e:	00 e0       	ldi	r16, 0x00	; 0
    fda0:	18 ef       	ldi	r17, 0xF8	; 248
    fda2:	e4 cf       	rjmp	.-56     	; 0xfd6c <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4881
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    fda4:	69 e9       	ldi	r22, 0x99	; 153
    fda6:	7b e3       	ldi	r23, 0x3B	; 59
    fda8:	8d 2d       	mov	r24, r13
    fdaa:	9b 2d       	mov	r25, r11
    fdac:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4882
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fdb0:	ee 24       	eor	r14, r14
    fdb2:	ea 94       	dec	r14
    fdb4:	fe 2c       	mov	r15, r14
    fdb6:	00 ee       	ldi	r16, 0xE0	; 224
    fdb8:	17 e0       	ldi	r17, 0x07	; 7
    fdba:	21 e0       	ldi	r18, 0x01	; 1
    fdbc:	44 e6       	ldi	r20, 0x64	; 100
    fdbe:	50 e0       	ldi	r21, 0x00	; 0
    fdc0:	6e e1       	ldi	r22, 0x1E	; 30
    fdc2:	70 e0       	ldi	r23, 0x00	; 0
    fdc4:	8d 2d       	mov	r24, r13
    fdc6:	9b 2d       	mov	r25, r11
    fdc8:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fdcc:	a6 e8       	ldi	r26, 0x86	; 134
    fdce:	ea 2e       	mov	r14, r26
    fdd0:	ac e0       	ldi	r26, 0x0C	; 12
    fdd2:	fa 2e       	mov	r15, r26
    fdd4:	0e e6       	ldi	r16, 0x6E	; 110
    fdd6:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    fdd8:	c8 01       	movw	r24, r16
    fdda:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fdde:	d7 01       	movw	r26, r14
    fde0:	8d 93       	st	X+, r24
    fde2:	7d 01       	movw	r14, r26
    fde4:	0f 5f       	subi	r16, 0xFF	; 255
    fde6:	1f 4f       	sbci	r17, 0xFF	; 255
    fde8:	04 37       	cpi	r16, 0x74	; 116
    fdea:	11 05       	cpc	r17, r1
    fdec:	a9 f7       	brne	.-22     	; 0xfdd8 <setup+0xfb0>
    fdee:	ec e8       	ldi	r30, 0x8C	; 140
    fdf0:	ee 2e       	mov	r14, r30
    fdf2:	ec e0       	ldi	r30, 0x0C	; 12
    fdf4:	fe 2e       	mov	r15, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    fdf6:	c8 01       	movw	r24, r16
    fdf8:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fdfc:	f7 01       	movw	r30, r14
    fdfe:	81 93       	st	Z+, r24
    fe00:	7f 01       	movw	r14, r30
    fe02:	0f 5f       	subi	r16, 0xFF	; 255
    fe04:	1f 4f       	sbci	r17, 0xFF	; 255
    fe06:	08 37       	cpi	r16, 0x78	; 120
    fe08:	11 05       	cpc	r17, r1
    fe0a:	a9 f7       	brne	.-22     	; 0xfdf6 <setup+0xfce>
    fe0c:	70 e9       	ldi	r23, 0x90	; 144
    fe0e:	e7 2e       	mov	r14, r23
    fe10:	7c e0       	ldi	r23, 0x0C	; 12
    fe12:	f7 2e       	mov	r15, r23
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    fe14:	c8 01       	movw	r24, r16
    fe16:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe1a:	d7 01       	movw	r26, r14
    fe1c:	8d 93       	st	X+, r24
    fe1e:	7d 01       	movw	r14, r26
    fe20:	0f 5f       	subi	r16, 0xFF	; 255
    fe22:	1f 4f       	sbci	r17, 0xFF	; 255
    fe24:	0c 37       	cpi	r16, 0x7C	; 124
    fe26:	11 05       	cpc	r17, r1
    fe28:	a9 f7       	brne	.-22     	; 0xfe14 <__DATA_REGION_LENGTH__+0x14>
    fe2a:	58 e9       	ldi	r21, 0x98	; 152
    fe2c:	85 2e       	mov	r8, r21
    fe2e:	5c e0       	ldi	r21, 0x0C	; 12
    fe30:	95 2e       	mov	r9, r21
    fe32:	60 e8       	ldi	r22, 0x80	; 128
    fe34:	e6 2e       	mov	r14, r22
    fe36:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    fe38:	c7 01       	movw	r24, r14
    fe3a:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe3e:	f4 01       	movw	r30, r8
    fe40:	81 93       	st	Z+, r24
    fe42:	4f 01       	movw	r8, r30
    fe44:	ff ef       	ldi	r31, 0xFF	; 255
    fe46:	ef 1a       	sub	r14, r31
    fe48:	ff 0a       	sbc	r15, r31
    fe4a:	24 e8       	ldi	r18, 0x84	; 132
    fe4c:	e2 16       	cp	r14, r18
    fe4e:	f1 04       	cpc	r15, r1
    fe50:	99 f7       	brne	.-26     	; 0xfe38 <__DATA_REGION_LENGTH__+0x38>
    fe52:	44 e9       	ldi	r20, 0x94	; 148
    fe54:	84 2e       	mov	r8, r20
    fe56:	4c e0       	ldi	r20, 0x0C	; 12
    fe58:	94 2e       	mov	r9, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    fe5a:	c8 01       	movw	r24, r16
    fe5c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe60:	d4 01       	movw	r26, r8
    fe62:	8d 93       	st	X+, r24
    fe64:	4d 01       	movw	r8, r26
    fe66:	0f 5f       	subi	r16, 0xFF	; 255
    fe68:	1f 4f       	sbci	r17, 0xFF	; 255
    fe6a:	00 38       	cpi	r16, 0x80	; 128
    fe6c:	11 05       	cpc	r17, r1
    fe6e:	a9 f7       	brne	.-22     	; 0xfe5a <__DATA_REGION_LENGTH__+0x5a>
    fe70:	3c e9       	ldi	r19, 0x9C	; 156
    fe72:	83 2e       	mov	r8, r19
    fe74:	3c e0       	ldi	r19, 0x0C	; 12
    fe76:	93 2e       	mov	r9, r19
    fe78:	04 e6       	ldi	r16, 0x64	; 100
    fe7a:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    fe7c:	c8 01       	movw	r24, r16
    fe7e:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe82:	f4 01       	movw	r30, r8
    fe84:	81 93       	st	Z+, r24
    fe86:	4f 01       	movw	r8, r30
    fe88:	0f 5f       	subi	r16, 0xFF	; 255
    fe8a:	1f 4f       	sbci	r17, 0xFF	; 255
    fe8c:	0d 36       	cpi	r16, 0x6D	; 109
    fe8e:	11 05       	cpc	r17, r1
    fe90:	a9 f7       	brne	.-22     	; 0xfe7c <__DATA_REGION_LENGTH__+0x7c>
    fe92:	06 ea       	ldi	r16, 0xA6	; 166
    fe94:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    fe96:	c7 01       	movw	r24, r14
    fe98:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe9c:	d8 01       	movw	r26, r16
    fe9e:	8d 93       	st	X+, r24
    fea0:	8d 01       	movw	r16, r26
    fea2:	bf ef       	ldi	r27, 0xFF	; 255
    fea4:	eb 1a       	sub	r14, r27
    fea6:	fb 0a       	sbc	r15, r27
    fea8:	e8 e8       	ldi	r30, 0x88	; 136
    feaa:	ee 16       	cp	r14, r30
    feac:	f1 04       	cpc	r15, r1
    feae:	99 f7       	brne	.-26     	; 0xfe96 <__DATA_REGION_LENGTH__+0x96>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    feb0:	88 e8       	ldi	r24, 0x88	; 136
    feb2:	90 e0       	ldi	r25, 0x00	; 0
    feb4:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    feb8:	18 2f       	mov	r17, r24
    feba:	89 e8       	ldi	r24, 0x89	; 137
    febc:	90 e0       	ldi	r25, 0x00	; 0
    febe:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fec2:	21 2f       	mov	r18, r17
    fec4:	30 e0       	ldi	r19, 0x00	; 0
    fec6:	32 2f       	mov	r19, r18
    fec8:	22 27       	eor	r18, r18
    feca:	82 0f       	add	r24, r18
    fecc:	93 2f       	mov	r25, r19
    fece:	91 1d       	adc	r25, r1
    fed0:	90 93 ab 0c 	sts	0x0CAB, r25	; 0x800cab <device+0x25>
    fed4:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <device+0x24>
    fed8:	2c ea       	ldi	r18, 0xAC	; 172
    feda:	e2 2e       	mov	r14, r18
    fedc:	2c e0       	ldi	r18, 0x0C	; 12
    fede:	f2 2e       	mov	r15, r18
    fee0:	0a e8       	ldi	r16, 0x8A	; 138
    fee2:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    fee4:	c8 01       	movw	r24, r16
    fee6:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    feea:	d7 01       	movw	r26, r14
    feec:	8d 93       	st	X+, r24
    feee:	7d 01       	movw	r14, r26
    fef0:	0f 5f       	subi	r16, 0xFF	; 255
    fef2:	1f 4f       	sbci	r17, 0xFF	; 255
    fef4:	0e 39       	cpi	r16, 0x9E	; 158
    fef6:	11 05       	cpc	r17, r1
    fef8:	a9 f7       	brne	.-22     	; 0xfee4 <__DATA_REGION_LENGTH__+0xe4>
    fefa:	80 ec       	ldi	r24, 0xC0	; 192
    fefc:	e8 2e       	mov	r14, r24
    fefe:	8c e0       	ldi	r24, 0x0C	; 12
    ff00:	f8 2e       	mov	r15, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    ff02:	c8 01       	movw	r24, r16
    ff04:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff08:	f7 01       	movw	r30, r14
    ff0a:	81 93       	st	Z+, r24
    ff0c:	7f 01       	movw	r14, r30
    ff0e:	0f 5f       	subi	r16, 0xFF	; 255
    ff10:	1f 4f       	sbci	r17, 0xFF	; 255
    ff12:	02 3b       	cpi	r16, 0xB2	; 178
    ff14:	11 05       	cpc	r17, r1
    ff16:	a9 f7       	brne	.-22     	; 0xff02 <__DATA_REGION_LENGTH__+0x102>
    ff18:	b4 ed       	ldi	r27, 0xD4	; 212
    ff1a:	eb 2e       	mov	r14, r27
    ff1c:	bc e0       	ldi	r27, 0x0C	; 12
    ff1e:	fb 2e       	mov	r15, r27
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    ff20:	c8 01       	movw	r24, r16
    ff22:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff26:	d7 01       	movw	r26, r14
    ff28:	8d 93       	st	X+, r24
    ff2a:	7d 01       	movw	r14, r26
    ff2c:	0f 5f       	subi	r16, 0xFF	; 255
    ff2e:	1f 4f       	sbci	r17, 0xFF	; 255
    ff30:	06 3b       	cpi	r16, 0xB6	; 182
    ff32:	11 05       	cpc	r17, r1
    ff34:	a9 f7       	brne	.-22     	; 0xff20 <__DATA_REGION_LENGTH__+0x120>
    ff36:	40 e8       	ldi	r20, 0x80	; 128
    ff38:	5a e0       	ldi	r21, 0x0A	; 10
    ff3a:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    ff3c:	60 e2       	ldi	r22, 0x20	; 32
    ff3e:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
    ff40:	90 e0       	ldi	r25, 0x00	; 0
    ff42:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
    ff44:	fc 01       	movw	r30, r24
    ff46:	ee 0f       	add	r30, r30
    ff48:	ff 1f       	adc	r31, r31
    ff4a:	e4 0f       	add	r30, r20
    ff4c:	f5 1f       	adc	r31, r21
    ff4e:	70 87       	std	Z+8, r23	; 0x08
    ff50:	67 83       	std	Z+7, r22	; 0x07
    ff52:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4887
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ff54:	8a 30       	cpi	r24, 0x0A	; 10
    ff56:	91 05       	cpc	r25, r1
    ff58:	a9 f7       	brne	.-22     	; 0xff44 <__DATA_REGION_LENGTH__+0x144>
    ff5a:	21 50       	subi	r18, 0x01	; 1
    ff5c:	42 5e       	subi	r20, 0xE2	; 226
    ff5e:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4886
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ff60:	21 11       	cpse	r18, r1
    ff62:	ee cf       	rjmp	.-36     	; 0xff40 <__DATA_REGION_LENGTH__+0x140>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4891
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    ff64:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <last_output_update>
    ff68:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <last_output_update+0x1>
    ff6c:	10 92 7d 0a 	sts	0x0A7D, r1	; 0x800a7d <last_output_update+0x2>
    ff70:	10 92 7e 0a 	sts	0x0A7E, r1	; 0x800a7e <last_output_update+0x3>
    ff74:	10 92 7f 0a 	sts	0x0A7F, r1	; 0x800a7f <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4685
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    ff78:	a3 94       	inc	r10
    ff7a:	c4 5c       	subi	r28, 0xC4	; 196
    ff7c:	de 4f       	sbci	r29, 0xFE	; 254
    ff7e:	e8 81       	ld	r30, Y
    ff80:	f9 81       	ldd	r31, Y+1	; 0x01
    ff82:	cc 53       	subi	r28, 0x3C	; 60
    ff84:	d1 40       	sbci	r29, 0x01	; 1
    ff86:	3f 96       	adiw	r30, 0x0f	; 15
    ff88:	c4 5c       	subi	r28, 0xC4	; 196
    ff8a:	de 4f       	sbci	r29, 0xFE	; 254
    ff8c:	f9 83       	std	Y+1, r31	; 0x01
    ff8e:	e8 83       	st	Y, r30
    ff90:	cc 53       	subi	r28, 0x3C	; 60
    ff92:	d1 40       	sbci	r29, 0x01	; 1
    ff94:	f0 e1       	ldi	r31, 0x10	; 16
    ff96:	af 12       	cpse	r10, r31
    ff98:	8f c9       	rjmp	.-3298   	; 0xf2b8 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5065
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    ff9a:	64 ef       	ldi	r22, 0xF4	; 244
    ff9c:	71 e0       	ldi	r23, 0x01	; 1
    ff9e:	80 e0       	ldi	r24, 0x00	; 0
    ffa0:	90 e0       	ldi	r25, 0x00	; 0
    ffa2:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5066
  MenuPrepareStyle();
    ffa6:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5067
  draw_menu(true);
    ffaa:	81 e0       	ldi	r24, 0x01	; 1
    ffac:	0e 94 ee 42 	call	0x85dc	; 0x85dc <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5068
  a2d_run_now = 1;
    ffb0:	81 e0       	ldi	r24, 0x01	; 1
    ffb2:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070

}
    ffb6:	c3 5b       	subi	r28, 0xB3	; 179
    ffb8:	de 4f       	sbci	r29, 0xFE	; 254
    ffba:	0f b6       	in	r0, 0x3f	; 63
    ffbc:	f8 94       	cli
    ffbe:	de bf       	out	0x3e, r29	; 62
    ffc0:	0f be       	out	0x3f, r0	; 63
    ffc2:	cd bf       	out	0x3d, r28	; 61
    ffc4:	df 91       	pop	r29
    ffc6:	cf 91       	pop	r28
    ffc8:	1f 91       	pop	r17
    ffca:	0f 91       	pop	r16
    ffcc:	ff 90       	pop	r15
    ffce:	ef 90       	pop	r14
    ffd0:	df 90       	pop	r13
    ffd2:	cf 90       	pop	r12
    ffd4:	bf 90       	pop	r11
    ffd6:	af 90       	pop	r10
    ffd8:	9f 90       	pop	r9
    ffda:	8f 90       	pop	r8
    ffdc:	7f 90       	pop	r7
    ffde:	6f 90       	pop	r6
    ffe0:	5f 90       	pop	r5
    ffe2:	4f 90       	pop	r4
    ffe4:	3f 90       	pop	r3
    ffe6:	2f 90       	pop	r2
    ffe8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4897
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    ffea:	6d e8       	ldi	r22, 0x8D	; 141
    ffec:	7b e3       	ldi	r23, 0x3B	; 59
    ffee:	c1 01       	movw	r24, r2
    fff0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fff4:	ee 24       	eor	r14, r14
    fff6:	ea 94       	dec	r14
    fff8:	fe 2c       	mov	r15, r14
    fffa:	00 ee       	ldi	r16, 0xE0	; 224
    fffc:	17 e0       	ldi	r17, 0x07	; 7
    fffe:	21 e0       	ldi	r18, 0x01	; 1
   10000:	4e e6       	ldi	r20, 0x6E	; 110
   10002:	50 e0       	ldi	r21, 0x00	; 0
   10004:	6e e1       	ldi	r22, 0x1E	; 30
   10006:	70 e0       	ldi	r23, 0x00	; 0
   10008:	c1 01       	movw	r24, r2
   1000a:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1000e:	20 91 35 0e 	lds	r18, 0x0E35	; 0x800e35 <my_lcd+0x14>
   10012:	30 91 36 0e 	lds	r19, 0x0E36	; 0x800e36 <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   10016:	40 91 33 0e 	lds	r20, 0x0E33	; 0x800e33 <my_lcd+0x12>
   1001a:	50 91 34 0e 	lds	r21, 0x0E34	; 0x800e34 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   1001e:	90 91 37 0e 	lds	r25, 0x0E37	; 0x800e37 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   10022:	e0 91 18 0e 	lds	r30, 0x0E18	; 0x800e18 <my_touch+0x15>
   10026:	f0 91 19 0e 	lds	r31, 0x0E19	; 0x800e19 <my_touch+0x16>
   1002a:	80 81       	ld	r24, Z
   1002c:	60 91 1f 0e 	lds	r22, 0x0E1F	; 0x800e1f <my_touch+0x1c>
   10030:	86 2b       	or	r24, r22
   10032:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
   10034:	e0 91 14 0e 	lds	r30, 0x0E14	; 0x800e14 <my_touch+0x11>
   10038:	f0 91 15 0e 	lds	r31, 0x0E15	; 0x800e15 <my_touch+0x12>
   1003c:	80 81       	ld	r24, Z
   1003e:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   10042:	86 2b       	or	r24, r22
   10044:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
   10046:	e0 91 12 0e 	lds	r30, 0x0E12	; 0x800e12 <my_touch+0xf>
   1004a:	f0 91 13 0e 	lds	r31, 0x0E13	; 0x800e13 <my_touch+0x10>
   1004e:	80 81       	ld	r24, Z
   10050:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <my_touch+0x19>
   10054:	86 2b       	or	r24, r22
   10056:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
   10058:	50 93 0c 0e 	sts	0x0E0C, r21	; 0x800e0c <my_touch+0x9>
   1005c:	40 93 0b 0e 	sts	0x0E0B, r20	; 0x800e0b <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
   10060:	30 93 0e 0e 	sts	0x0E0E, r19	; 0x800e0e <my_touch+0xb>
   10064:	20 93 0d 0e 	sts	0x0E0D, r18	; 0x800e0d <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   10068:	90 93 11 0e 	sts	0x0E11, r25	; 0x800e11 <my_touch+0xe>
   1006c:	85 cf       	rjmp	.-246    	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4924
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   1006e:	61 e4       	ldi	r22, 0x41	; 65
   10070:	7c e3       	ldi	r23, 0x3C	; 60
   10072:	8d 2d       	mov	r24, r13
   10074:	9b 2d       	mov	r25, r11
   10076:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4925
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1007a:	ee 24       	eor	r14, r14
   1007c:	ea 94       	dec	r14
   1007e:	fe 2c       	mov	r15, r14
   10080:	00 e0       	ldi	r16, 0x00	; 0
   10082:	18 ef       	ldi	r17, 0xF8	; 248
   10084:	21 e0       	ldi	r18, 0x01	; 1
   10086:	48 e7       	ldi	r20, 0x78	; 120
   10088:	50 e0       	ldi	r21, 0x00	; 0
   1008a:	60 ea       	ldi	r22, 0xA0	; 160
   1008c:	70 e0       	ldi	r23, 0x00	; 0
   1008e:	8d 2d       	mov	r24, r13
   10090:	9b 2d       	mov	r25, r11
   10092:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   10096:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
   1009a:	84 60       	ori	r24, 0x04	; 4
   1009c:	3d c3       	rjmp	.+1658   	; 0x10718 <__EEPROM_REGION_LENGTH__+0x718>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4931
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   1009e:	e8 e0       	ldi	r30, 0x08	; 8
   100a0:	ae 12       	cpse	r10, r30
   100a2:	9d c0       	rjmp	.+314    	; 0x101de <__EEPROM_REGION_LENGTH__+0x1de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
    {
      strcpy_P(str1, text_onewire_hledam);
   100a4:	61 e7       	ldi	r22, 0x71	; 113
   100a6:	7b e3       	ldi	r23, 0x3B	; 59
   100a8:	8d 2d       	mov	r24, r13
   100aa:	9b 2d       	mov	r25, r11
   100ac:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   100b0:	ee 24       	eor	r14, r14
   100b2:	ea 94       	dec	r14
   100b4:	fe 2c       	mov	r15, r14
   100b6:	00 ee       	ldi	r16, 0xE0	; 224
   100b8:	17 e0       	ldi	r17, 0x07	; 7
   100ba:	21 e0       	ldi	r18, 0x01	; 1
   100bc:	42 e8       	ldi	r20, 0x82	; 130
   100be:	50 e0       	ldi	r21, 0x00	; 0
   100c0:	6e e1       	ldi	r22, 0x1E	; 30
   100c2:	70 e0       	ldi	r23, 0x00	; 0
   100c4:	8d 2d       	mov	r24, r13
   100c6:	9b 2d       	mov	r25, r11
   100c8:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
      Global_HWwirenum = 0;
   100cc:	10 92 68 0a 	sts	0x0A68, r1	; 0x800a68 <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   100d0:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   100d4:	10 91 dc 09 	lds	r17, 0x09DC	; 0x8009dc <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   100d8:	81 2f       	mov	r24, r17
   100da:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   100de:	80 e6       	ldi	r24, 0x60	; 96
   100e0:	9e e0       	ldi	r25, 0x0E	; 14
   100e2:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   100e6:	81 11       	cpse	r24, r1
   100e8:	10 c0       	rjmp	.+32     	; 0x1010a <__EEPROM_REGION_LENGTH__+0x10a>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   100ea:	81 2f       	mov	r24, r17
   100ec:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   100f0:	82 ed       	ldi	r24, 0xD2	; 210
   100f2:	90 e0       	ldi	r25, 0x00	; 0
   100f4:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   100f8:	60 e0       	ldi	r22, 0x00	; 0
   100fa:	80 e6       	ldi	r24, 0x60	; 96
   100fc:	9e e0       	ldi	r25, 0x0E	; 14
   100fe:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   10102:	80 e6       	ldi	r24, 0x60	; 96
   10104:	9e e0       	ldi	r25, 0x0E	; 14
   10106:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   1010a:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <ds2482_address>
   1010e:	0e 94 30 98 	call	0x13060	; 0x13060 <ds2482reset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   10112:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <ds2482_address>
   10116:	0e 94 fa 98 	call	0x131f4	; 0x131f4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   1011a:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   1011e:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <lastDevice>
   10122:	10 92 c2 0b 	sts	0x0BC2, r1	; 0x800bc2 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   10126:	0e 94 30 99 	call	0x13260	; 0x13260 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   1012a:	81 11       	cpse	r24, r1
   1012c:	35 c0       	rjmp	.+106    	; 0x10198 <__EEPROM_REGION_LENGTH__+0x198>
   1012e:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   10130:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   10132:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <ds2482_address+0x1>
   10136:	86 30       	cpi	r24, 0x06	; 6
   10138:	78 f5       	brcc	.+94     	; 0x10198 <__EEPROM_REGION_LENGTH__+0x198>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   1013a:	20 91 68 0a 	lds	r18, 0x0A68	; 0x800a68 <Global_HWwirenum>
   1013e:	42 2f       	mov	r20, r18
   10140:	50 e0       	ldi	r21, 0x00	; 0
   10142:	a3 ec       	ldi	r26, 0xC3	; 195
   10144:	bb e0       	ldi	r27, 0x0B	; 11
   10146:	21 9f       	mul	r18, r17
   10148:	90 01       	movw	r18, r0
   1014a:	11 24       	eor	r1, r1
   1014c:	90 e0       	ldi	r25, 0x00	; 0
   1014e:	80 e0       	ldi	r24, 0x00	; 0
   10150:	6d 91       	ld	r22, X+
   10152:	fc 01       	movw	r30, r24
   10154:	e2 0f       	add	r30, r18
   10156:	f3 1f       	adc	r31, r19
   10158:	ea 5d       	subi	r30, 0xDA	; 218
   1015a:	f5 4f       	sbci	r31, 0xF5	; 245
   1015c:	60 83       	st	Z, r22
   1015e:	01 96       	adiw	r24, 0x01	; 1
   10160:	88 30       	cpi	r24, 0x08	; 8
   10162:	91 05       	cpc	r25, r1
   10164:	a9 f7       	brne	.-22     	; 0x10150 <__EEPROM_REGION_LENGTH__+0x150>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   10166:	14 9f       	mul	r17, r20
   10168:	f0 01       	movw	r30, r0
   1016a:	15 9f       	mul	r17, r21
   1016c:	f0 0d       	add	r31, r0
   1016e:	11 24       	eor	r1, r1
   10170:	ea 5d       	subi	r30, 0xDA	; 218
   10172:	f5 4f       	sbci	r31, 0xF5	; 245
   10174:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   10176:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   10178:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <ds2482_address>
   1017c:	0e 94 30 99 	call	0x13260	; 0x13260 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   10180:	90 91 dd 09 	lds	r25, 0x09DD	; 0x8009dd <ds2482_address+0x1>
   10184:	9f 5f       	subi	r25, 0xFF	; 255
   10186:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   1018a:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <Global_HWwirenum>
   1018e:	9f 5f       	subi	r25, 0xFF	; 255
   10190:	90 93 68 0a 	sts	0x0A68, r25	; 0x800a68 <Global_HWwirenum>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   10194:	85 30       	cpi	r24, 0x05	; 5
   10196:	69 f6       	brne	.-102    	; 0x10132 <__EEPROM_REGION_LENGTH__+0x132>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4937
      one_hw_search_device(0);
      tds_update_associate();
   10198:	0e 94 d3 5c 	call	0xb9a6	; 0xb9a6 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4938
      strcpy (str1, "Nalezeno: ");
   1019c:	64 ef       	ldi	r22, 0xF4	; 244
   1019e:	76 e0       	ldi	r23, 0x06	; 6
   101a0:	8d 2d       	mov	r24, r13
   101a2:	9b 2d       	mov	r25, r11
   101a4:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4939
      itoa(Global_HWwirenum, str2, 10);
   101a8:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   101ac:	4a e0       	ldi	r20, 0x0A	; 10
   101ae:	be 01       	movw	r22, r28
   101b0:	68 57       	subi	r22, 0x78	; 120
   101b2:	7f 4f       	sbci	r23, 0xFF	; 255
   101b4:	90 e0       	ldi	r25, 0x00	; 0
   101b6:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
      strcat(str1, str2);
   101ba:	be 01       	movw	r22, r28
   101bc:	68 57       	subi	r22, 0x78	; 120
   101be:	7f 4f       	sbci	r23, 0xFF	; 255
   101c0:	8d 2d       	mov	r24, r13
   101c2:	9b 2d       	mov	r25, r11
   101c4:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4941
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   101c8:	ee 24       	eor	r14, r14
   101ca:	ea 94       	dec	r14
   101cc:	fe 2c       	mov	r15, r14
   101ce:	00 ee       	ldi	r16, 0xE0	; 224
   101d0:	17 e0       	ldi	r17, 0x07	; 7
   101d2:	21 e0       	ldi	r18, 0x01	; 1
   101d4:	42 e8       	ldi	r20, 0x82	; 130
   101d6:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   101d8:	60 ea       	ldi	r22, 0xA0	; 160
   101da:	70 e0       	ldi	r23, 0x00	; 0
   101dc:	cc cd       	rjmp	.-1128   	; 0xfd76 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4945
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   101de:	f9 e0       	ldi	r31, 0x09	; 9
   101e0:	af 12       	cpse	r10, r31
   101e2:	9d c2       	rjmp	.+1338   	; 0x1071e <__EEPROM_REGION_LENGTH__+0x71e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4947
    {
      digitalWrite(ETH_RST, HIGH);
   101e4:	61 e0       	ldi	r22, 0x01	; 1
   101e6:	86 e0       	ldi	r24, 0x06	; 6
   101e8:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4948
      delay(10);
   101ec:	6a e0       	ldi	r22, 0x0A	; 10
   101ee:	70 e0       	ldi	r23, 0x00	; 0
   101f0:	80 e0       	ldi	r24, 0x00	; 0
   101f2:	90 e0       	ldi	r25, 0x00	; 0
   101f4:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4949
      digitalWrite(ETH_RST, LOW);
   101f8:	60 e0       	ldi	r22, 0x00	; 0
   101fa:	86 e0       	ldi	r24, 0x06	; 6
   101fc:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4950
      delay(10);
   10200:	6a e0       	ldi	r22, 0x0A	; 10
   10202:	70 e0       	ldi	r23, 0x00	; 0
   10204:	80 e0       	ldi	r24, 0x00	; 0
   10206:	90 e0       	ldi	r25, 0x00	; 0
   10208:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4951
      digitalWrite(ETH_RST, HIGH);
   1020c:	61 e0       	ldi	r22, 0x01	; 1
   1020e:	86 e0       	ldi	r24, 0x06	; 6
   10210:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4952
      delay(100);
   10214:	64 e6       	ldi	r22, 0x64	; 100
   10216:	70 e0       	ldi	r23, 0x00	; 0
   10218:	80 e0       	ldi	r24, 0x00	; 0
   1021a:	90 e0       	ldi	r25, 0x00	; 0
   1021c:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   10220:	8f e0       	ldi	r24, 0x0F	; 15
   10222:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   10226:	82 ee       	ldi	r24, 0xE2	; 226
   10228:	92 e0       	ldi	r25, 0x02	; 2
   1022a:	ce 5c       	subi	r28, 0xCE	; 206
   1022c:	de 4f       	sbci	r29, 0xFE	; 254
   1022e:	99 83       	std	Y+1, r25	; 0x01
   10230:	88 83       	st	Y, r24
   10232:	c2 53       	subi	r28, 0x32	; 50
   10234:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   10236:	24 e0       	ldi	r18, 0x04	; 4
   10238:	e0 e9       	ldi	r30, 0x90	; 144
   1023a:	fc e0       	ldi	r31, 0x0C	; 12
   1023c:	cc 5b       	subi	r28, 0xBC	; 188
   1023e:	de 4f       	sbci	r29, 0xFE	; 254
   10240:	a8 81       	ld	r26, Y
   10242:	b9 81       	ldd	r27, Y+1	; 0x01
   10244:	c4 54       	subi	r28, 0x44	; 68
   10246:	d1 40       	sbci	r29, 0x01	; 1
   10248:	01 90       	ld	r0, Z+
   1024a:	0d 92       	st	X+, r0
   1024c:	2a 95       	dec	r18
   1024e:	e1 f7       	brne	.-8      	; 0x10248 <__EEPROM_REGION_LENGTH__+0x248>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   10250:	c4 5d       	subi	r28, 0xD4	; 212
   10252:	de 4f       	sbci	r29, 0xFE	; 254
   10254:	99 83       	std	Y+1, r25	; 0x01
   10256:	88 83       	st	Y, r24
   10258:	cc 52       	subi	r28, 0x2C	; 44
   1025a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1025c:	24 e0       	ldi	r18, 0x04	; 4
   1025e:	e8 e9       	ldi	r30, 0x98	; 152
   10260:	fc e0       	ldi	r31, 0x0C	; 12
   10262:	ca 5b       	subi	r28, 0xBA	; 186
   10264:	de 4f       	sbci	r29, 0xFE	; 254
   10266:	a8 81       	ld	r26, Y
   10268:	b9 81       	ldd	r27, Y+1	; 0x01
   1026a:	c6 54       	subi	r28, 0x46	; 70
   1026c:	d1 40       	sbci	r29, 0x01	; 1
   1026e:	01 90       	ld	r0, Z+
   10270:	0d 92       	st	X+, r0
   10272:	2a 95       	dec	r18
   10274:	e1 f7       	brne	.-8      	; 0x1026e <__EEPROM_REGION_LENGTH__+0x26e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   10276:	ca 5d       	subi	r28, 0xDA	; 218
   10278:	de 4f       	sbci	r29, 0xFE	; 254
   1027a:	99 83       	std	Y+1, r25	; 0x01
   1027c:	88 83       	st	Y, r24
   1027e:	c6 52       	subi	r28, 0x26	; 38
   10280:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   10282:	24 e0       	ldi	r18, 0x04	; 4
   10284:	e4 e9       	ldi	r30, 0x94	; 148
   10286:	fc e0       	ldi	r31, 0x0C	; 12
   10288:	c8 5b       	subi	r28, 0xB8	; 184
   1028a:	de 4f       	sbci	r29, 0xFE	; 254
   1028c:	a8 81       	ld	r26, Y
   1028e:	b9 81       	ldd	r27, Y+1	; 0x01
   10290:	c8 54       	subi	r28, 0x48	; 72
   10292:	d1 40       	sbci	r29, 0x01	; 1
   10294:	01 90       	ld	r0, Z+
   10296:	0d 92       	st	X+, r0
   10298:	2a 95       	dec	r18
   1029a:	e1 f7       	brne	.-8      	; 0x10294 <__EEPROM_REGION_LENGTH__+0x294>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   1029c:	c2 52       	subi	r28, 0x22	; 34
   1029e:	df 4f       	sbci	r29, 0xFF	; 255
   102a0:	99 83       	std	Y+1, r25	; 0x01
   102a2:	88 83       	st	Y, r24
   102a4:	ce 5d       	subi	r28, 0xDE	; 222
   102a6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   102a8:	84 e0       	ldi	r24, 0x04	; 4
   102aa:	ec e8       	ldi	r30, 0x8C	; 140
   102ac:	fc e0       	ldi	r31, 0x0C	; 12
   102ae:	c6 5b       	subi	r28, 0xB6	; 182
   102b0:	de 4f       	sbci	r29, 0xFE	; 254
   102b2:	a8 81       	ld	r26, Y
   102b4:	b9 81       	ldd	r27, Y+1	; 0x01
   102b6:	ca 54       	subi	r28, 0x4A	; 74
   102b8:	d1 40       	sbci	r29, 0x01	; 1
   102ba:	01 90       	ld	r0, Z+
   102bc:	0d 92       	st	X+, r0
   102be:	8a 95       	dec	r24
   102c0:	e1 f7       	brne	.-8      	; 0x102ba <__EEPROM_REGION_LENGTH__+0x2ba>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   102c2:	9e 01       	movw	r18, r28
   102c4:	2e 5c       	subi	r18, 0xCE	; 206
   102c6:	3e 4f       	sbci	r19, 0xFE	; 254
   102c8:	ae 01       	movw	r20, r28
   102ca:	44 5d       	subi	r20, 0xD4	; 212
   102cc:	5e 4f       	sbci	r21, 0xFE	; 254
   102ce:	be 01       	movw	r22, r28
   102d0:	6a 5d       	subi	r22, 0xDA	; 218
   102d2:	7e 4f       	sbci	r23, 0xFE	; 254
   102d4:	ce 01       	movw	r24, r28
   102d6:	82 52       	subi	r24, 0x22	; 34
   102d8:	9f 4f       	sbci	r25, 0xFF	; 255
   102da:	0e 94 a8 9e 	call	0x13d50	; 0x13d50 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4955
      strcpy_P(str1, text_ethernet_rozhrani);
   102de:	6f e5       	ldi	r22, 0x5F	; 95
   102e0:	7b e3       	ldi	r23, 0x3B	; 59
   102e2:	8d 2d       	mov	r24, r13
   102e4:	9b 2d       	mov	r25, r11
   102e6:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4956
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   102ea:	ee 24       	eor	r14, r14
   102ec:	ea 94       	dec	r14
   102ee:	fe 2c       	mov	r15, r14
   102f0:	00 ee       	ldi	r16, 0xE0	; 224
   102f2:	17 e0       	ldi	r17, 0x07	; 7
   102f4:	21 e0       	ldi	r18, 0x01	; 1
   102f6:	4c e8       	ldi	r20, 0x8C	; 140
   102f8:	50 e0       	ldi	r21, 0x00	; 0
   102fa:	6e e1       	ldi	r22, 0x1E	; 30
   102fc:	70 e0       	ldi	r23, 0x00	; 0
   102fe:	8d 2d       	mov	r24, r13
   10300:	9b 2d       	mov	r25, r11
   10302:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
      delay(100);
   10306:	64 e6       	ldi	r22, 0x64	; 100
   10308:	70 e0       	ldi	r23, 0x00	; 0
   1030a:	80 e0       	ldi	r24, 0x00	; 0
   1030c:	90 e0       	ldi	r25, 0x00	; 0
   1030e:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
   10312:	32 ce       	rjmp	.-924    	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   10314:	90 62       	ori	r25, 0x20	; 32
   10316:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <selftest_data>
   1031a:	42 c2       	rjmp	.+1156   	; 0x107a0 <__EEPROM_REGION_LENGTH__+0x7a0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4988
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   1031c:	6b eb       	ldi	r22, 0xBB	; 187
   1031e:	7b e3       	ldi	r23, 0x3B	; 59
   10320:	8d 2d       	mov	r24, r13
   10322:	9b 2d       	mov	r25, r11
   10324:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10328:	ee 24       	eor	r14, r14
   1032a:	ea 94       	dec	r14
   1032c:	fe 2c       	mov	r15, r14
   1032e:	00 ee       	ldi	r16, 0xE0	; 224
   10330:	17 e0       	ldi	r17, 0x07	; 7
   10332:	5b c2       	rjmp	.+1206   	; 0x107ea <__EEPROM_REGION_LENGTH__+0x7ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4995
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   10334:	3b e0       	ldi	r19, 0x0B	; 11
   10336:	a3 12       	cpse	r10, r19
   10338:	0f c0       	rjmp	.+30     	; 0x10358 <__EEPROM_REGION_LENGTH__+0x358>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4997
    {
      strcpy_P(str1, text_rest_rozhrani);
   1033a:	60 e3       	ldi	r22, 0x30	; 48
   1033c:	7b e3       	ldi	r23, 0x3B	; 59
   1033e:	8d 2d       	mov	r24, r13
   10340:	9b 2d       	mov	r25, r11
   10342:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4998
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10346:	ee 24       	eor	r14, r14
   10348:	ea 94       	dec	r14
   1034a:	fe 2c       	mov	r15, r14
   1034c:	00 ee       	ldi	r16, 0xE0	; 224
   1034e:	17 e0       	ldi	r17, 0x07	; 7
   10350:	21 e0       	ldi	r18, 0x01	; 1
   10352:	40 ea       	ldi	r20, 0xA0	; 160
   10354:	50 e0       	ldi	r21, 0x00	; 0
   10356:	0d cd       	rjmp	.-1510   	; 0xfd72 <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5002
    }
    ///
    /// inicializace nrf
    if (init == 12)
   10358:	8c e0       	ldi	r24, 0x0C	; 12
   1035a:	a8 12       	cpse	r10, r24
   1035c:	4a c2       	rjmp	.+1172   	; 0x107f2 <__EEPROM_REGION_LENGTH__+0x7f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004
    {
      strcpy_P(str1, text_nrf_rozhrani);
   1035e:	63 e2       	ldi	r22, 0x23	; 35
   10360:	7b e3       	ldi	r23, 0x3B	; 59
   10362:	8d 2d       	mov	r24, r13
   10364:	9b 2d       	mov	r25, r11
   10366:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5005
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1036a:	ee 24       	eor	r14, r14
   1036c:	ea 94       	dec	r14
   1036e:	fe 2c       	mov	r15, r14
   10370:	00 ee       	ldi	r16, 0xE0	; 224
   10372:	17 e0       	ldi	r17, 0x07	; 7
   10374:	21 e0       	ldi	r18, 0x01	; 1
   10376:	4a ea       	ldi	r20, 0xAA	; 170
   10378:	50 e0       	ldi	r21, 0x00	; 0
   1037a:	fb cc       	rjmp	.-1546   	; 0xfd72 <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   1037c:	d8 01       	movw	r26, r16
   1037e:	d2 96       	adiw	r26, 0x32	; 50
   10380:	8d 91       	ld	r24, X+
   10382:	9d 91       	ld	r25, X+
   10384:	0d 90       	ld	r0, X+
   10386:	bc 91       	ld	r27, X
   10388:	a0 2d       	mov	r26, r0
   1038a:	c8 5c       	subi	r28, 0xC8	; 200
   1038c:	de 4f       	sbci	r29, 0xFE	; 254
   1038e:	88 83       	st	Y, r24
   10390:	99 83       	std	Y+1, r25	; 0x01
   10392:	aa 83       	std	Y+2, r26	; 0x02
   10394:	bb 83       	std	Y+3, r27	; 0x03
   10396:	c8 53       	subi	r28, 0x38	; 56
   10398:	d1 40       	sbci	r29, 0x01	; 1
   1039a:	9c 01       	movw	r18, r24
   1039c:	ad 01       	movw	r20, r26
   1039e:	c3 01       	movw	r24, r6
   103a0:	b2 01       	movw	r22, r4
   103a2:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
   103a6:	87 fd       	sbrc	r24, 7
   103a8:	13 c3       	rjmp	.+1574   	; 0x109d0 <__EEPROM_REGION_LENGTH__+0x9d0>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   103aa:	d8 01       	movw	r26, r16
   103ac:	da 96       	adiw	r26, 0x3a	; 58
   103ae:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   103b0:	f8 01       	movw	r30, r16
   103b2:	12 aa       	std	Z+50, r1	; 0x32
   103b4:	13 aa       	std	Z+51, r1	; 0x33
   103b6:	14 aa       	std	Z+52, r1	; 0x34
   103b8:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   103ba:	80 e0       	ldi	r24, 0x00	; 0
   103bc:	90 e0       	ldi	r25, 0x00	; 0
   103be:	af e7       	ldi	r26, 0x7F	; 127
   103c0:	b3 e4       	ldi	r27, 0x43	; 67
   103c2:	86 ab       	std	Z+54, r24	; 0x36
   103c4:	97 ab       	std	Z+55, r25	; 0x37
   103c6:	a0 af       	std	Z+56, r26	; 0x38
   103c8:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   103ca:	26 8d       	ldd	r18, Z+30	; 0x1e
   103cc:	37 8d       	ldd	r19, Z+31	; 0x1f
   103ce:	c8 5c       	subi	r28, 0xC8	; 200
   103d0:	de 4f       	sbci	r29, 0xFE	; 254
   103d2:	39 83       	std	Y+1, r19	; 0x01
   103d4:	28 83       	st	Y, r18
   103d6:	c8 53       	subi	r28, 0x38	; 56
   103d8:	d1 40       	sbci	r29, 0x01	; 1
   103da:	d9 01       	movw	r26, r18
   103dc:	4d 90       	ld	r4, X+
   103de:	5d 90       	ld	r5, X+
   103e0:	6d 90       	ld	r6, X+
   103e2:	7c 90       	ld	r7, X
   103e4:	20 e0       	ldi	r18, 0x00	; 0
   103e6:	30 e0       	ldi	r19, 0x00	; 0
   103e8:	4f e7       	ldi	r20, 0x7F	; 127
   103ea:	53 e4       	ldi	r21, 0x43	; 67
   103ec:	c3 01       	movw	r24, r6
   103ee:	b2 01       	movw	r22, r4
   103f0:	0e 94 a4 bc 	call	0x17948	; 0x17948 <__gesf2>
   103f4:	18 16       	cp	r1, r24
   103f6:	94 f5       	brge	.+100    	; 0x1045c <__EEPROM_REGION_LENGTH__+0x45c>
   103f8:	80 e0       	ldi	r24, 0x00	; 0
   103fa:	90 e0       	ldi	r25, 0x00	; 0
   103fc:	af e7       	ldi	r26, 0x7F	; 127
   103fe:	b3 e4       	ldi	r27, 0x43	; 67
   10400:	c8 5c       	subi	r28, 0xC8	; 200
   10402:	de 4f       	sbci	r29, 0xFE	; 254
   10404:	e8 81       	ld	r30, Y
   10406:	f9 81       	ldd	r31, Y+1	; 0x01
   10408:	c8 53       	subi	r28, 0x38	; 56
   1040a:	d1 40       	sbci	r29, 0x01	; 1
   1040c:	80 83       	st	Z, r24
   1040e:	91 83       	std	Z+1, r25	; 0x01
   10410:	a2 83       	std	Z+2, r26	; 0x02
   10412:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   10414:	d8 01       	movw	r26, r16
   10416:	96 96       	adiw	r26, 0x26	; 38
   10418:	8d 91       	ld	r24, X+
   1041a:	9d 91       	ld	r25, X+
   1041c:	0d 90       	ld	r0, X+
   1041e:	bc 91       	ld	r27, X
   10420:	a0 2d       	mov	r26, r0
   10422:	c8 5c       	subi	r28, 0xC8	; 200
   10424:	de 4f       	sbci	r29, 0xFE	; 254
   10426:	88 83       	st	Y, r24
   10428:	99 83       	std	Y+1, r25	; 0x01
   1042a:	aa 83       	std	Y+2, r26	; 0x02
   1042c:	bb 83       	std	Y+3, r27	; 0x03
   1042e:	c8 53       	subi	r28, 0x38	; 56
   10430:	d1 40       	sbci	r29, 0x01	; 1
   10432:	f8 01       	movw	r30, r16
   10434:	46 a8       	ldd	r4, Z+54	; 0x36
   10436:	57 a8       	ldd	r5, Z+55	; 0x37
   10438:	60 ac       	ldd	r6, Z+56	; 0x38
   1043a:	71 ac       	ldd	r7, Z+57	; 0x39
   1043c:	a3 01       	movw	r20, r6
   1043e:	92 01       	movw	r18, r4
   10440:	bc 01       	movw	r22, r24
   10442:	cd 01       	movw	r24, r26
   10444:	0e 94 a4 bc 	call	0x17948	; 0x17948 <__gesf2>
   10448:	18 16       	cp	r1, r24
   1044a:	ec f4       	brge	.+58     	; 0x10486 <__EEPROM_REGION_LENGTH__+0x486>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   1044c:	d8 01       	movw	r26, r16
   1044e:	96 96       	adiw	r26, 0x26	; 38
   10450:	4d 92       	st	X+, r4
   10452:	5d 92       	st	X+, r5
   10454:	6d 92       	st	X+, r6
   10456:	7c 92       	st	X, r7
   10458:	99 97       	sbiw	r26, 0x29	; 41
   1045a:	28 c0       	rjmp	.+80     	; 0x104ac <__EEPROM_REGION_LENGTH__+0x4ac>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   1045c:	20 e0       	ldi	r18, 0x00	; 0
   1045e:	30 e0       	ldi	r19, 0x00	; 0
   10460:	a9 01       	movw	r20, r18
   10462:	c3 01       	movw	r24, r6
   10464:	b2 01       	movw	r22, r4
   10466:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
   1046a:	87 ff       	sbrs	r24, 7
   1046c:	d3 cf       	rjmp	.-90     	; 0x10414 <__EEPROM_REGION_LENGTH__+0x414>
   1046e:	c8 5c       	subi	r28, 0xC8	; 200
   10470:	de 4f       	sbci	r29, 0xFE	; 254
   10472:	a8 81       	ld	r26, Y
   10474:	b9 81       	ldd	r27, Y+1	; 0x01
   10476:	c8 53       	subi	r28, 0x38	; 56
   10478:	d1 40       	sbci	r29, 0x01	; 1
   1047a:	1d 92       	st	X+, r1
   1047c:	1d 92       	st	X+, r1
   1047e:	1d 92       	st	X+, r1
   10480:	1c 92       	st	X, r1
   10482:	13 97       	sbiw	r26, 0x03	; 3
   10484:	c7 cf       	rjmp	.-114    	; 0x10414 <__EEPROM_REGION_LENGTH__+0x414>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   10486:	f8 01       	movw	r30, r16
   10488:	42 a8       	ldd	r4, Z+50	; 0x32
   1048a:	53 a8       	ldd	r5, Z+51	; 0x33
   1048c:	64 a8       	ldd	r6, Z+52	; 0x34
   1048e:	75 a8       	ldd	r7, Z+53	; 0x35
   10490:	a3 01       	movw	r20, r6
   10492:	92 01       	movw	r18, r4
   10494:	c8 5c       	subi	r28, 0xC8	; 200
   10496:	de 4f       	sbci	r29, 0xFE	; 254
   10498:	68 81       	ld	r22, Y
   1049a:	79 81       	ldd	r23, Y+1	; 0x01
   1049c:	8a 81       	ldd	r24, Y+2	; 0x02
   1049e:	9b 81       	ldd	r25, Y+3	; 0x03
   104a0:	c8 53       	subi	r28, 0x38	; 56
   104a2:	d1 40       	sbci	r29, 0x01	; 1
   104a4:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
   104a8:	87 fd       	sbrc	r24, 7
   104aa:	d0 cf       	rjmp	.-96     	; 0x1044c <__EEPROM_REGION_LENGTH__+0x44c>
   104ac:	c0 5c       	subi	r28, 0xC0	; 192
   104ae:	de 4f       	sbci	r29, 0xFE	; 254
   104b0:	e8 81       	ld	r30, Y
   104b2:	f9 81       	ldd	r31, Y+1	; 0x01
   104b4:	c0 54       	subi	r28, 0x40	; 64
   104b6:	d1 40       	sbci	r29, 0x01	; 1
   104b8:	34 96       	adiw	r30, 0x04	; 4
   104ba:	c0 5c       	subi	r28, 0xC0	; 192
   104bc:	de 4f       	sbci	r29, 0xFE	; 254
   104be:	f9 83       	std	Y+1, r31	; 0x01
   104c0:	e8 83       	st	Y, r30
   104c2:	c0 54       	subi	r28, 0x40	; 64
   104c4:	d1 40       	sbci	r29, 0x01	; 1
   104c6:	ce 5b       	subi	r28, 0xBE	; 190
   104c8:	de 4f       	sbci	r29, 0xFE	; 254
   104ca:	28 81       	ld	r18, Y
   104cc:	39 81       	ldd	r19, Y+1	; 0x01
   104ce:	c2 54       	subi	r28, 0x42	; 66
   104d0:	d1 40       	sbci	r29, 0x01	; 1
   104d2:	2c 5f       	subi	r18, 0xFC	; 252
   104d4:	3f 4f       	sbci	r19, 0xFF	; 255
   104d6:	ce 5b       	subi	r28, 0xBE	; 190
   104d8:	de 4f       	sbci	r29, 0xFE	; 254
   104da:	39 83       	std	Y+1, r19	; 0x01
   104dc:	28 83       	st	Y, r18
   104de:	c2 54       	subi	r28, 0x42	; 66
   104e0:	d1 40       	sbci	r29, 0x01	; 1
   104e2:	34 e0       	ldi	r19, 0x04	; 4
   104e4:	e3 0e       	add	r14, r19
   104e6:	f1 1c       	adc	r15, r1
   104e8:	82 e0       	ldi	r24, 0x02	; 2
   104ea:	88 0e       	add	r8, r24
   104ec:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   104ee:	9a e0       	ldi	r25, 0x0A	; 10
   104f0:	89 16       	cp	r8, r25
   104f2:	91 04       	cpc	r9, r1
   104f4:	09 f0       	breq	.+2      	; 0x104f8 <__EEPROM_REGION_LENGTH__+0x4f8>
   104f6:	ad c1       	rjmp	.+858    	; 0x10852 <__EEPROM_REGION_LENGTH__+0x852>
   104f8:	a6 e7       	ldi	r26, 0x76	; 118
   104fa:	ba e0       	ldi	r27, 0x0A	; 10
   104fc:	c8 5c       	subi	r28, 0xC8	; 200
   104fe:	de 4f       	sbci	r29, 0xFE	; 254
   10500:	b9 83       	std	Y+1, r27	; 0x01
   10502:	a8 83       	st	Y, r26
   10504:	c8 53       	subi	r28, 0x38	; 56
   10506:	d1 40       	sbci	r29, 0x01	; 1
   10508:	4e ed       	ldi	r20, 0xDE	; 222
   1050a:	44 2e       	mov	r4, r20
   1050c:	49 e0       	ldi	r20, 0x09	; 9
   1050e:	54 2e       	mov	r5, r20
   10510:	52 ef       	ldi	r21, 0xF2	; 242
   10512:	65 2e       	mov	r6, r21
   10514:	59 e0       	ldi	r21, 0x09	; 9
   10516:	75 2e       	mov	r7, r21
   10518:	66 e0       	ldi	r22, 0x06	; 6
   1051a:	86 2e       	mov	r8, r22
   1051c:	6a e0       	ldi	r22, 0x0A	; 10
   1051e:	96 2e       	mov	r9, r22
   10520:	7a e1       	ldi	r23, 0x1A	; 26
   10522:	e7 2e       	mov	r14, r23
   10524:	7a e0       	ldi	r23, 0x0A	; 10
   10526:	f7 2e       	mov	r15, r23
   10528:	00 e6       	ldi	r16, 0x60	; 96
   1052a:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5015
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1052c:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   1052e:	c8 5c       	subi	r28, 0xC8	; 200
   10530:	de 4f       	sbci	r29, 0xFE	; 254
   10532:	e8 81       	ld	r30, Y
   10534:	f9 81       	ldd	r31, Y+1	; 0x01
   10536:	c8 53       	subi	r28, 0x38	; 56
   10538:	d1 40       	sbci	r29, 0x01	; 1
   1053a:	11 92       	st	Z+, r1
   1053c:	c8 5c       	subi	r28, 0xC8	; 200
   1053e:	de 4f       	sbci	r29, 0xFE	; 254
   10540:	f9 83       	std	Y+1, r31	; 0x01
   10542:	e8 83       	st	Y, r30
   10544:	c8 53       	subi	r28, 0x38	; 56
   10546:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   10548:	c8 01       	movw	r24, r16
   1054a:	0e 94 25 9e 	call	0x13c4a	; 0x13c4a <EEPROMreadFloat(unsigned int)>
   1054e:	d2 01       	movw	r26, r4
   10550:	6d 93       	st	X+, r22
   10552:	7d 93       	st	X+, r23
   10554:	8d 93       	st	X+, r24
   10556:	9d 93       	st	X+, r25
   10558:	2d 01       	movw	r4, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   1055a:	c8 01       	movw	r24, r16
   1055c:	04 96       	adiw	r24, 0x04	; 4
   1055e:	0e 94 25 9e 	call	0x13c4a	; 0x13c4a <EEPROMreadFloat(unsigned int)>
   10562:	f3 01       	movw	r30, r6
   10564:	61 93       	st	Z+, r22
   10566:	71 93       	st	Z+, r23
   10568:	81 93       	st	Z+, r24
   1056a:	91 93       	st	Z+, r25
   1056c:	3f 01       	movw	r6, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   1056e:	c8 01       	movw	r24, r16
   10570:	08 96       	adiw	r24, 0x08	; 8
   10572:	0e 94 25 9e 	call	0x13c4a	; 0x13c4a <EEPROMreadFloat(unsigned int)>
   10576:	d4 01       	movw	r26, r8
   10578:	6d 93       	st	X+, r22
   1057a:	7d 93       	st	X+, r23
   1057c:	8d 93       	st	X+, r24
   1057e:	9d 93       	st	X+, r25
   10580:	4d 01       	movw	r8, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   10582:	c8 01       	movw	r24, r16
   10584:	0c 96       	adiw	r24, 0x0c	; 12
   10586:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   1058a:	f7 01       	movw	r30, r14
   1058c:	81 93       	st	Z+, r24
   1058e:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5020
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   10590:	8c 2d       	mov	r24, r12
   10592:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5015
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10596:	c3 94       	inc	r12
   10598:	0f 5d       	subi	r16, 0xDF	; 223
   1059a:	1f 4f       	sbci	r17, 0xFF	; 255
   1059c:	f5 e0       	ldi	r31, 0x05	; 5
   1059e:	cf 12       	cpse	r12, r31
   105a0:	c6 cf       	rjmp	.-116    	; 0x1052e <__EEPROM_REGION_LENGTH__+0x52e>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   105a2:	8c e5       	ldi	r24, 0x5C	; 92
   105a4:	90 e0       	ldi	r25, 0x00	; 0
   105a6:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   105aa:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3291
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   105ae:	8d e5       	ldi	r24, 0x5D	; 93
   105b0:	90 e0       	ldi	r25, 0x00	; 0
   105b2:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5023
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
   105b6:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <default_show_temp>
   105ba:	de cc       	rjmp	.-1604   	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5039
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   105bc:	6b eb       	ldi	r22, 0xBB	; 187
   105be:	7b e3       	ldi	r23, 0x3B	; 59
   105c0:	c1 01       	movw	r24, r2
   105c2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5040
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   105c6:	ee 24       	eor	r14, r14
   105c8:	ea 94       	dec	r14
   105ca:	fe 2c       	mov	r15, r14
   105cc:	00 ee       	ldi	r16, 0xE0	; 224
   105ce:	17 e0       	ldi	r17, 0x07	; 7
   105d0:	21 e0       	ldi	r18, 0x01	; 1
   105d2:	4e eb       	ldi	r20, 0xBE	; 190
   105d4:	50 e0       	ldi	r21, 0x00	; 0
   105d6:	60 ea       	ldi	r22, 0xA0	; 160
   105d8:	70 e0       	ldi	r23, 0x00	; 0
   105da:	c1 01       	movw	r24, r2
   105dc:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   105e0:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
   105e4:	8d 7f       	andi	r24, 0xFD	; 253
   105e6:	98 c0       	rjmp	.+304    	; 0x10718 <__EEPROM_REGION_LENGTH__+0x718>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5046
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   105e8:	bf e0       	ldi	r27, 0x0F	; 15
   105ea:	ab 12       	cpse	r10, r27
   105ec:	c5 cc       	rjmp	.-1654   	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5048
    {
      strcpy_P(str1, text_rtc_cas);
   105ee:	6e ee       	ldi	r22, 0xEE	; 238
   105f0:	7a e3       	ldi	r23, 0x3A	; 58
   105f2:	8d 2d       	mov	r24, r13
   105f4:	9b 2d       	mov	r25, r11
   105f6:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5049
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   105fa:	ee 24       	eor	r14, r14
   105fc:	ea 94       	dec	r14
   105fe:	fe 2c       	mov	r15, r14
   10600:	00 ee       	ldi	r16, 0xE0	; 224
   10602:	17 e0       	ldi	r17, 0x07	; 7
   10604:	21 e0       	ldi	r18, 0x01	; 1
   10606:	48 ec       	ldi	r20, 0xC8	; 200
   10608:	50 e0       	ldi	r21, 0x00	; 0
   1060a:	6e e1       	ldi	r22, 0x1E	; 30
   1060c:	70 e0       	ldi	r23, 0x00	; 0
   1060e:	8d 2d       	mov	r24, r13
   10610:	9b 2d       	mov	r25, r11
   10612:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5050
      if (rtc.isrunning())
   10616:	0e 94 19 98 	call	0x13032	; 0x13032 <RTC_DS1307::isrunning() [clone .constprop.127]>
   1061a:	88 23       	and	r24, r24
   1061c:	99 f0       	breq	.+38     	; 0x10644 <__EEPROM_REGION_LENGTH__+0x644>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5052
      {
        strcpy_P(str1, text_ok);
   1061e:	6b eb       	ldi	r22, 0xBB	; 187
   10620:	7b e3       	ldi	r23, 0x3B	; 59
   10622:	8d 2d       	mov	r24, r13
   10624:	9b 2d       	mov	r25, r11
   10626:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5053
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1062a:	21 e0       	ldi	r18, 0x01	; 1
   1062c:	48 ec       	ldi	r20, 0xC8	; 200
   1062e:	50 e0       	ldi	r21, 0x00	; 0
   10630:	60 ea       	ldi	r22, 0xA0	; 160
   10632:	70 e0       	ldi	r23, 0x00	; 0
   10634:	8d 2d       	mov	r24, r13
   10636:	9b 2d       	mov	r25, r11
   10638:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1063c:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
   10640:	8e 7f       	andi	r24, 0xFE	; 254
   10642:	6a c0       	rjmp	.+212    	; 0x10718 <__EEPROM_REGION_LENGTH__+0x718>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5058
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   10644:	61 e4       	ldi	r22, 0x41	; 65
   10646:	7c e3       	ldi	r23, 0x3C	; 60
   10648:	8d 2d       	mov	r24, r13
   1064a:	9b 2d       	mov	r25, r11
   1064c:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   10650:	ee 24       	eor	r14, r14
   10652:	ea 94       	dec	r14
   10654:	fe 2c       	mov	r15, r14
   10656:	00 e0       	ldi	r16, 0x00	; 0
   10658:	18 ef       	ldi	r17, 0xF8	; 248
   1065a:	21 e0       	ldi	r18, 0x01	; 1
   1065c:	48 ec       	ldi	r20, 0xC8	; 200
   1065e:	50 e0       	ldi	r21, 0x00	; 0
   10660:	60 ea       	ldi	r22, 0xA0	; 160
   10662:	70 e0       	ldi	r23, 0x00	; 0
   10664:	8d 2d       	mov	r24, r13
   10666:	9b 2d       	mov	r25, r11
   10668:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1066c:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
   10670:	81 60       	ori	r24, 0x01	; 1
   10672:	52 c0       	rjmp	.+164    	; 0x10718 <__EEPROM_REGION_LENGTH__+0x718>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4879
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
   10674:	25 e0       	ldi	r18, 0x05	; 5
   10676:	a2 16       	cp	r10, r18
   10678:	09 f4       	brne	.+2      	; 0x1067c <__EEPROM_REGION_LENGTH__+0x67c>
   1067a:	94 cb       	rjmp	.-2264   	; 0xfda4 <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   1067c:	36 e0       	ldi	r19, 0x06	; 6
   1067e:	a3 16       	cp	r10, r19
   10680:	09 f4       	brne	.+2      	; 0x10684 <__EEPROM_REGION_LENGTH__+0x684>
   10682:	b3 cc       	rjmp	.-1690   	; 0xffea <__DATA_REGION_LENGTH__+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4903
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   10684:	87 e0       	ldi	r24, 0x07	; 7
   10686:	a8 12       	cpse	r10, r24
   10688:	0a cd       	rjmp	.-1516   	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4905
    {
      strcpy_P(str1, text_onewire_rozhrani);
   1068a:	6e e7       	ldi	r22, 0x7E	; 126
   1068c:	7b e3       	ldi	r23, 0x3B	; 59
   1068e:	8d 2d       	mov	r24, r13
   10690:	9b 2d       	mov	r25, r11
   10692:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4906
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10696:	ee 24       	eor	r14, r14
   10698:	ea 94       	dec	r14
   1069a:	fe 2c       	mov	r15, r14
   1069c:	00 ee       	ldi	r16, 0xE0	; 224
   1069e:	17 e0       	ldi	r17, 0x07	; 7
   106a0:	21 e0       	ldi	r18, 0x01	; 1
   106a2:	48 e7       	ldi	r20, 0x78	; 120
   106a4:	50 e0       	ldi	r21, 0x00	; 0
   106a6:	6e e1       	ldi	r22, 0x1E	; 30
   106a8:	70 e0       	ldi	r23, 0x00	; 0
   106aa:	8d 2d       	mov	r24, r13
   106ac:	9b 2d       	mov	r25, r11
   106ae:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4907
      ds2482_address[0].i2c_addr = 0b0011000;
   106b2:	88 e1       	ldi	r24, 0x18	; 24
   106b4:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4908
      ds2482_address[0].HWwirenum = 0;
   106b8:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <ds2482_address+0x1>
   106bc:	e0 e8       	ldi	r30, 0x80	; 128
   106be:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   106c0:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4913
        status_tds18s20[idx].period_now = 0;
   106c2:	14 8e       	std	Z+28, r1	; 0x1c
   106c4:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   106c6:	bb e0       	ldi	r27, 0x0B	; 11
   106c8:	e4 33       	cpi	r30, 0x34	; 52
   106ca:	fb 07       	cpc	r31, r27
   106cc:	c9 f7       	brne	.-14     	; 0x106c0 <__EEPROM_REGION_LENGTH__+0x6c0>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   106ce:	4a e0       	ldi	r20, 0x0A	; 10
   106d0:	be 01       	movw	r22, r28
   106d2:	6e 50       	subi	r22, 0x0E	; 14
   106d4:	7f 4f       	sbci	r23, 0xFF	; 255
   106d6:	88 e1       	ldi	r24, 0x18	; 24
   106d8:	90 e0       	ldi	r25, 0x00	; 0
   106da:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4916
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   106de:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <ds2482_address>
   106e2:	0e 94 30 98 	call	0x13060	; 0x13060 <ds2482reset(unsigned char)>
   106e6:	81 11       	cpse	r24, r1
   106e8:	c2 cc       	rjmp	.-1660   	; 0x1006e <__EEPROM_REGION_LENGTH__+0x6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4918
      {
        strcpy_P(str1, text_ok);
   106ea:	6b eb       	ldi	r22, 0xBB	; 187
   106ec:	7b e3       	ldi	r23, 0x3B	; 59
   106ee:	8d 2d       	mov	r24, r13
   106f0:	9b 2d       	mov	r25, r11
   106f2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4919
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   106f6:	ee 24       	eor	r14, r14
   106f8:	ea 94       	dec	r14
   106fa:	fe 2c       	mov	r15, r14
   106fc:	00 ee       	ldi	r16, 0xE0	; 224
   106fe:	17 e0       	ldi	r17, 0x07	; 7
   10700:	21 e0       	ldi	r18, 0x01	; 1
   10702:	48 e7       	ldi	r20, 0x78	; 120
   10704:	50 e0       	ldi	r21, 0x00	; 0
   10706:	60 ea       	ldi	r22, 0xA0	; 160
   10708:	70 e0       	ldi	r23, 0x00	; 0
   1070a:	8d 2d       	mov	r24, r13
   1070c:	9b 2d       	mov	r25, r11
   1070e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   10712:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
   10716:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   10718:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <selftest_data>
   1071c:	2d cc       	rjmp	.-1958   	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4961
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   1071e:	9a e0       	ldi	r25, 0x0A	; 10
   10720:	a9 12       	cpse	r10, r25
   10722:	08 ce       	rjmp	.-1008   	; 0x10334 <__EEPROM_REGION_LENGTH__+0x334>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4963
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   10724:	61 e5       	ldi	r22, 0x51	; 81
   10726:	7b e3       	ldi	r23, 0x3B	; 59
   10728:	c1 01       	movw	r24, r2
   1072a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4964
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1072e:	ee 24       	eor	r14, r14
   10730:	ea 94       	dec	r14
   10732:	fe 2c       	mov	r15, r14
   10734:	00 ee       	ldi	r16, 0xE0	; 224
   10736:	17 e0       	ldi	r17, 0x07	; 7
   10738:	21 e0       	ldi	r18, 0x01	; 1
   1073a:	46 e9       	ldi	r20, 0x96	; 150
   1073c:	50 e0       	ldi	r21, 0x00	; 0
   1073e:	6e e1       	ldi	r22, 0x1E	; 30
   10740:	70 e0       	ldi	r23, 0x00	; 0
   10742:	c1 01       	movw	r24, r2
   10744:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4965
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   10748:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <device+0x24>
   1074c:	90 91 ab 0c 	lds	r25, 0x0CAB	; 0x800cab <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   10750:	20 91 a9 0c 	lds	r18, 0x0CA9	; 0x800ca9 <device+0x23>
   10754:	30 91 a8 0c 	lds	r19, 0x0CA8	; 0x800ca8 <device+0x22>
   10758:	40 91 a7 0c 	lds	r20, 0x0CA7	; 0x800ca7 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   1075c:	50 91 a6 0c 	lds	r21, 0x0CA6	; 0x800ca6 <device+0x20>
   10760:	50 93 8a 10 	sts	0x108A, r21	; 0x80108a <mqtt_client+0x211>
   10764:	40 93 8b 10 	sts	0x108B, r20	; 0x80108b <mqtt_client+0x212>
   10768:	30 93 8c 10 	sts	0x108C, r19	; 0x80108c <mqtt_client+0x213>
   1076c:	20 93 8d 10 	sts	0x108D, r18	; 0x80108d <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   10770:	90 93 91 10 	sts	0x1091, r25	; 0x801091 <mqtt_client+0x218>
   10774:	80 93 90 10 	sts	0x1090, r24	; 0x801090 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   10778:	10 92 8f 10 	sts	0x108F, r1	; 0x80108f <mqtt_client+0x216>
   1077c:	10 92 8e 10 	sts	0x108E, r1	; 0x80108e <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   10780:	85 e4       	ldi	r24, 0x45	; 69
   10782:	97 e6       	ldi	r25, 0x67	; 103
   10784:	90 93 87 10 	sts	0x1087, r25	; 0x801087 <mqtt_client+0x20e>
   10788:	80 93 86 10 	sts	0x1086, r24	; 0x801086 <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
   1078c:	82 e4       	ldi	r24, 0x42	; 66
   1078e:	9b e3       	ldi	r25, 0x3B	; 59
   10790:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <header_out+0x1>
   10794:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4968
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   10798:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1079c:	2b 01       	movw	r4, r22
   1079e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4969
      while ((millis() - milis) < 3000 )
   107a0:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   107a4:	64 19       	sub	r22, r4
   107a6:	75 09       	sbc	r23, r5
   107a8:	86 09       	sbc	r24, r6
   107aa:	97 09       	sbc	r25, r7
   107ac:	68 3b       	cpi	r22, 0xB8	; 184
   107ae:	7b 40       	sbci	r23, 0x0B	; 11
   107b0:	81 05       	cpc	r24, r1
   107b2:	91 05       	cpc	r25, r1
   107b4:	58 f4       	brcc	.+22     	; 0x107cc <__EEPROM_REGION_LENGTH__+0x7cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4971
      {
        mqtt_client.loop();
   107b6:	0e 94 75 9a 	call	0x134ea	; 0x134ea <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4972
        if (mqtt_reconnect() == 0)
   107ba:	0e 94 c4 75 	call	0xeb88	; 0xeb88 <mqtt_reconnect()>
   107be:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <selftest_data>
   107c2:	81 11       	cpse	r24, r1
   107c4:	a7 cd       	rjmp	.-1202   	; 0x10314 <__EEPROM_REGION_LENGTH__+0x314>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   107c6:	9f 7d       	andi	r25, 0xDF	; 223
   107c8:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   107cc:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4981
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   107d0:	85 ff       	sbrs	r24, 5
   107d2:	a4 cd       	rjmp	.-1208   	; 0x1031c <__EEPROM_REGION_LENGTH__+0x31c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
      {
        strcpy_P(str1, text_err);
   107d4:	61 e4       	ldi	r22, 0x41	; 65
   107d6:	7c e3       	ldi	r23, 0x3C	; 60
   107d8:	8d 2d       	mov	r24, r13
   107da:	9b 2d       	mov	r25, r11
   107dc:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   107e0:	ee 24       	eor	r14, r14
   107e2:	ea 94       	dec	r14
   107e4:	fe 2c       	mov	r15, r14
   107e6:	00 e0       	ldi	r16, 0x00	; 0
   107e8:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   107ea:	21 e0       	ldi	r18, 0x01	; 1
   107ec:	46 e9       	ldi	r20, 0x96	; 150
   107ee:	50 e0       	ldi	r21, 0x00	; 0
   107f0:	f3 cc       	rjmp	.-1562   	; 0x101d8 <__EEPROM_REGION_LENGTH__+0x1d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5009
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   107f2:	ad e0       	ldi	r26, 0x0D	; 13
   107f4:	aa 12       	cpse	r10, r26
   107f6:	0c 94 bc 7a 	jmp	0xf578	; 0xf578 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5011
    {
      strcpy_P(str1, text_pid_regulator);
   107fa:	65 e1       	ldi	r22, 0x15	; 21
   107fc:	7b e3       	ldi	r23, 0x3B	; 59
   107fe:	8d 2d       	mov	r24, r13
   10800:	9b 2d       	mov	r25, r11
   10802:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5012
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10806:	ee 24       	eor	r14, r14
   10808:	ea 94       	dec	r14
   1080a:	fe 2c       	mov	r15, r14
   1080c:	00 ee       	ldi	r16, 0xE0	; 224
   1080e:	17 e0       	ldi	r17, 0x07	; 7
   10810:	21 e0       	ldi	r18, 0x01	; 1
   10812:	44 eb       	ldi	r20, 0xB4	; 180
   10814:	50 e0       	ldi	r21, 0x00	; 0
   10816:	6e e1       	ldi	r22, 0x1E	; 30
   10818:	70 e0       	ldi	r23, 0x00	; 0
   1081a:	8d 2d       	mov	r24, r13
   1081c:	9b 2d       	mov	r25, r11
   1081e:	0e 94 62 8b 	call	0x116c4	; 0x116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
   10822:	a1 e8       	ldi	r26, 0x81	; 129
   10824:	b8 e0       	ldi	r27, 0x08	; 8
   10826:	c0 5c       	subi	r28, 0xC0	; 192
   10828:	de 4f       	sbci	r29, 0xFE	; 254
   1082a:	b9 83       	std	Y+1, r27	; 0x01
   1082c:	a8 83       	st	Y, r26
   1082e:	c0 54       	subi	r28, 0x40	; 64
   10830:	d1 40       	sbci	r29, 0x01	; 1
   10832:	ed e6       	ldi	r30, 0x6D	; 109
   10834:	f8 e0       	ldi	r31, 0x08	; 8
   10836:	ce 5b       	subi	r28, 0xBE	; 190
   10838:	de 4f       	sbci	r29, 0xFE	; 254
   1083a:	f9 83       	std	Y+1, r31	; 0x01
   1083c:	e8 83       	st	Y, r30
   1083e:	c2 54       	subi	r28, 0x42	; 66
   10840:	d1 40       	sbci	r29, 0x01	; 1
   10842:	f5 e9       	ldi	r31, 0x95	; 149
   10844:	ef 2e       	mov	r14, r31
   10846:	f8 e0       	ldi	r31, 0x08	; 8
   10848:	ff 2e       	mov	r15, r31
   1084a:	91 2c       	mov	r9, r1
   1084c:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
   1084e:	cc 24       	eor	r12, r12
   10850:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   10852:	8c e3       	ldi	r24, 0x3C	; 60
   10854:	90 e0       	ldi	r25, 0x00	; 0
   10856:	0e 94 91 b5 	call	0x16b22	; 0x16b22 <malloc>
   1085a:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   1085c:	c0 5c       	subi	r28, 0xC0	; 192
   1085e:	de 4f       	sbci	r29, 0xFE	; 254
   10860:	e8 81       	ld	r30, Y
   10862:	f9 81       	ldd	r31, Y+1	; 0x01
   10864:	c0 54       	subi	r28, 0x40	; 64
   10866:	d1 40       	sbci	r29, 0x01	; 1
   10868:	dc 01       	movw	r26, r24
   1086a:	5f 96       	adiw	r26, 0x1f	; 31
   1086c:	fc 93       	st	X, r31
   1086e:	ee 93       	st	-X, r30
   10870:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   10872:	ce 5b       	subi	r28, 0xBE	; 190
   10874:	de 4f       	sbci	r29, 0xFE	; 254
   10876:	28 81       	ld	r18, Y
   10878:	39 81       	ldd	r19, Y+1	; 0x01
   1087a:	c2 54       	subi	r28, 0x42	; 66
   1087c:	d1 40       	sbci	r29, 0x01	; 1
   1087e:	5d 96       	adiw	r26, 0x1d	; 29
   10880:	3c 93       	st	X, r19
   10882:	2e 93       	st	-X, r18
   10884:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   10886:	91 96       	adiw	r26, 0x21	; 33
   10888:	fc 92       	st	X, r15
   1088a:	ee 92       	st	-X, r14
   1088c:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   1088e:	da 96       	adiw	r26, 0x3a	; 58
   10890:	1c 92       	st	X, r1
   10892:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   10894:	d2 96       	adiw	r26, 0x32	; 50
   10896:	1d 92       	st	X+, r1
   10898:	1d 92       	st	X+, r1
   1089a:	1d 92       	st	X+, r1
   1089c:	1c 92       	st	X, r1
   1089e:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   108a0:	80 e0       	ldi	r24, 0x00	; 0
   108a2:	90 e0       	ldi	r25, 0x00	; 0
   108a4:	af e7       	ldi	r26, 0x7F	; 127
   108a6:	b3 e4       	ldi	r27, 0x43	; 67
   108a8:	f8 01       	movw	r30, r16
   108aa:	86 ab       	std	Z+54, r24	; 0x36
   108ac:	97 ab       	std	Z+55, r25	; 0x37
   108ae:	a0 af       	std	Z+56, r26	; 0x38
   108b0:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   108b2:	84 e6       	ldi	r24, 0x64	; 100
   108b4:	90 e0       	ldi	r25, 0x00	; 0
   108b6:	a0 e0       	ldi	r26, 0x00	; 0
   108b8:	b0 e0       	ldi	r27, 0x00	; 0
   108ba:	86 a7       	std	Z+46, r24	; 0x2e
   108bc:	97 a7       	std	Z+47, r25	; 0x2f
   108be:	a0 ab       	std	Z+48, r26	; 0x30
   108c0:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
   108c2:	11 8e       	std	Z+25, r1	; 0x19
   108c4:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   108c6:	21 e0       	ldi	r18, 0x01	; 1
   108c8:	30 e0       	ldi	r19, 0x00	; 0
   108ca:	33 8f       	std	Z+27, r19	; 0x1b
   108cc:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   108ce:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   108d0:	80 e0       	ldi	r24, 0x00	; 0
   108d2:	90 e0       	ldi	r25, 0x00	; 0
   108d4:	a0 e0       	ldi	r26, 0x00	; 0
   108d6:	b0 e4       	ldi	r27, 0x40	; 64
   108d8:	80 83       	st	Z, r24
   108da:	91 83       	std	Z+1, r25	; 0x01
   108dc:	a2 83       	std	Z+2, r26	; 0x02
   108de:	b3 83       	std	Z+3, r27	; 0x03
   108e0:	80 e0       	ldi	r24, 0x00	; 0
   108e2:	90 e0       	ldi	r25, 0x00	; 0
   108e4:	a0 ea       	ldi	r26, 0xA0	; 160
   108e6:	b0 e4       	ldi	r27, 0x40	; 64
   108e8:	84 83       	std	Z+4, r24	; 0x04
   108ea:	95 83       	std	Z+5, r25	; 0x05
   108ec:	a6 83       	std	Z+6, r26	; 0x06
   108ee:	b7 83       	std	Z+7, r27	; 0x07
   108f0:	80 e0       	ldi	r24, 0x00	; 0
   108f2:	90 e0       	ldi	r25, 0x00	; 0
   108f4:	a0 e8       	ldi	r26, 0x80	; 128
   108f6:	bf e3       	ldi	r27, 0x3F	; 63
   108f8:	80 87       	std	Z+8, r24	; 0x08
   108fa:	91 87       	std	Z+9, r25	; 0x09
   108fc:	a2 87       	std	Z+10, r26	; 0x0a
   108fe:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
   10900:	80 e0       	ldi	r24, 0x00	; 0
   10902:	90 e0       	ldi	r25, 0x00	; 0
   10904:	a0 e0       	ldi	r26, 0x00	; 0
   10906:	b0 e4       	ldi	r27, 0x40	; 64
   10908:	84 87       	std	Z+12, r24	; 0x0c
   1090a:	95 87       	std	Z+13, r25	; 0x0d
   1090c:	a6 87       	std	Z+14, r26	; 0x0e
   1090e:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   10910:	80 e0       	ldi	r24, 0x00	; 0
   10912:	90 e0       	ldi	r25, 0x00	; 0
   10914:	a0 e0       	ldi	r26, 0x00	; 0
   10916:	bf e3       	ldi	r27, 0x3F	; 63
   10918:	80 8b       	std	Z+16, r24	; 0x10
   1091a:	91 8b       	std	Z+17, r25	; 0x11
   1091c:	a2 8b       	std	Z+18, r26	; 0x12
   1091e:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   10920:	80 e0       	ldi	r24, 0x00	; 0
   10922:	90 e0       	ldi	r25, 0x00	; 0
   10924:	a0 e2       	ldi	r26, 0x20	; 32
   10926:	b1 e4       	ldi	r27, 0x41	; 65
   10928:	84 8b       	std	Z+20, r24	; 0x14
   1092a:	95 8b       	std	Z+21, r25	; 0x15
   1092c:	a6 8b       	std	Z+22, r26	; 0x16
   1092e:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   10930:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   10934:	28 ee       	ldi	r18, 0xE8	; 232
   10936:	33 e0       	ldi	r19, 0x03	; 3
   10938:	40 e0       	ldi	r20, 0x00	; 0
   1093a:	50 e0       	ldi	r21, 0x00	; 0
   1093c:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
   10940:	f8 01       	movw	r30, r16
   10942:	86 a5       	ldd	r24, Z+46	; 0x2e
   10944:	97 a5       	ldd	r25, Z+47	; 0x2f
   10946:	a0 a9       	ldd	r26, Z+48	; 0x30
   10948:	b1 a9       	ldd	r27, Z+49	; 0x31
   1094a:	28 1b       	sub	r18, r24
   1094c:	39 0b       	sbc	r19, r25
   1094e:	4a 0b       	sbc	r20, r26
   10950:	5b 0b       	sbc	r21, r27
   10952:	d8 01       	movw	r26, r16
   10954:	22 a3       	std	Z+34, r18	; 0x22
   10956:	33 a3       	std	Z+35, r19	; 0x23
   10958:	44 a3       	std	Z+36, r20	; 0x24
   1095a:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   1095c:	e0 91 84 0c 	lds	r30, 0x0C84	; 0x800c84 <array_pids>
   10960:	f0 91 85 0c 	lds	r31, 0x0C85	; 0x800c85 <array_pids+0x1>
   10964:	e8 0d       	add	r30, r8
   10966:	f9 1d       	adc	r31, r9
   10968:	11 83       	std	Z+1, r17	; 0x01
   1096a:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   1096c:	da 96       	adiw	r26, 0x3a	; 58
   1096e:	8c 91       	ld	r24, X
   10970:	da 97       	sbiw	r26, 0x3a	; 58
   10972:	81 11       	cpse	r24, r1
   10974:	1a cd       	rjmp	.-1484   	; 0x103aa <__EEPROM_REGION_LENGTH__+0x3aa>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   10976:	5e 96       	adiw	r26, 0x1e	; 30
   10978:	ed 91       	ld	r30, X+
   1097a:	fc 91       	ld	r31, X
   1097c:	40 80       	ld	r4, Z
   1097e:	51 80       	ldd	r5, Z+1	; 0x01
   10980:	62 80       	ldd	r6, Z+2	; 0x02
   10982:	73 80       	ldd	r7, Z+3	; 0x03
   10984:	f8 01       	movw	r30, r16
   10986:	46 a2       	std	Z+38, r4	; 0x26
   10988:	57 a2       	std	Z+39, r5	; 0x27
   1098a:	60 a6       	std	Z+40, r6	; 0x28
   1098c:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   1098e:	04 8c       	ldd	r0, Z+28	; 0x1c
   10990:	f5 8d       	ldd	r31, Z+29	; 0x1d
   10992:	e0 2d       	mov	r30, r0
   10994:	80 81       	ld	r24, Z
   10996:	91 81       	ldd	r25, Z+1	; 0x01
   10998:	a2 81       	ldd	r26, Z+2	; 0x02
   1099a:	b3 81       	ldd	r27, Z+3	; 0x03
   1099c:	f8 01       	movw	r30, r16
   1099e:	82 a7       	std	Z+42, r24	; 0x2a
   109a0:	93 a7       	std	Z+43, r25	; 0x2b
   109a2:	a4 a7       	std	Z+44, r26	; 0x2c
   109a4:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   109a6:	86 a9       	ldd	r24, Z+54	; 0x36
   109a8:	97 a9       	ldd	r25, Z+55	; 0x37
   109aa:	a0 ad       	ldd	r26, Z+56	; 0x38
   109ac:	b1 ad       	ldd	r27, Z+57	; 0x39
   109ae:	c8 5c       	subi	r28, 0xC8	; 200
   109b0:	de 4f       	sbci	r29, 0xFE	; 254
   109b2:	88 83       	st	Y, r24
   109b4:	99 83       	std	Y+1, r25	; 0x01
   109b6:	aa 83       	std	Y+2, r26	; 0x02
   109b8:	bb 83       	std	Y+3, r27	; 0x03
   109ba:	c8 53       	subi	r28, 0x38	; 56
   109bc:	d1 40       	sbci	r29, 0x01	; 1
   109be:	9c 01       	movw	r18, r24
   109c0:	ad 01       	movw	r20, r26
   109c2:	c3 01       	movw	r24, r6
   109c4:	b2 01       	movw	r22, r4
   109c6:	0e 94 a4 bc 	call	0x17948	; 0x17948 <__gesf2>
   109ca:	18 16       	cp	r1, r24
   109cc:	0c f0       	brlt	.+2      	; 0x109d0 <__EEPROM_REGION_LENGTH__+0x9d0>
   109ce:	d6 cc       	rjmp	.-1620   	; 0x1037c <__EEPROM_REGION_LENGTH__+0x37c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   109d0:	c8 5c       	subi	r28, 0xC8	; 200
   109d2:	de 4f       	sbci	r29, 0xFE	; 254
   109d4:	88 81       	ld	r24, Y
   109d6:	99 81       	ldd	r25, Y+1	; 0x01
   109d8:	aa 81       	ldd	r26, Y+2	; 0x02
   109da:	bb 81       	ldd	r27, Y+3	; 0x03
   109dc:	c8 53       	subi	r28, 0x38	; 56
   109de:	d1 40       	sbci	r29, 0x01	; 1
   109e0:	f8 01       	movw	r30, r16
   109e2:	86 a3       	std	Z+38, r24	; 0x26
   109e4:	97 a3       	std	Z+39, r25	; 0x27
   109e6:	a0 a7       	std	Z+40, r26	; 0x28
   109e8:	b1 a7       	std	Z+41, r27	; 0x29
   109ea:	df cc       	rjmp	.-1602   	; 0x103aa <__EEPROM_REGION_LENGTH__+0x3aa>

000109ec <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
   109ec:	1f 93       	push	r17
   109ee:	cf 93       	push	r28
   109f0:	df 93       	push	r29
   109f2:	cd b7       	in	r28, 0x3d	; 61
   109f4:	de b7       	in	r29, 0x3e	; 62
   109f6:	63 97       	sbiw	r28, 0x13	; 19
   109f8:	0f b6       	in	r0, 0x3f	; 63
   109fa:	f8 94       	cli
   109fc:	de bf       	out	0x3e, r29	; 62
   109fe:	0f be       	out	0x3f, r0	; 63
   10a00:	cd bf       	out	0x3d, r28	; 61
   10a02:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
   10a04:	ae 01       	movw	r20, r28
   10a06:	4f 5f       	subi	r20, 0xFF	; 255
   10a08:	5f 4f       	sbci	r21, 0xFF	; 255
   10a0a:	be 01       	movw	r22, r28
   10a0c:	6d 5e       	subi	r22, 0xED	; 237
   10a0e:	7f 4f       	sbci	r23, 0xFF	; 255
   10a10:	81 2f       	mov	r24, r17
   10a12:	0e 94 b9 62 	call	0xc572	; 0xc572 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
   10a16:	60 e0       	ldi	r22, 0x00	; 0
   10a18:	87 e6       	ldi	r24, 0x67	; 103
   10a1a:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
   10a1e:	be 01       	movw	r22, r28
   10a20:	6f 5f       	subi	r22, 0xFF	; 255
   10a22:	7f 4f       	sbci	r23, 0xFF	; 255
   10a24:	89 e3       	ldi	r24, 0x39	; 57
   10a26:	99 e0       	ldi	r25, 0x09	; 9
   10a28:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  dialog_set_string_max_length = max_length;
   10a2c:	82 e1       	ldi	r24, 0x12	; 18
   10a2e:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  dialog_set_string_args = idx;
   10a32:	10 93 37 09 	sts	0x0937, r17	; 0x800937 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  dialog_save_string_function = save_function;
   10a36:	87 ea       	ldi	r24, 0xA7	; 167
   10a38:	96 e6       	ldi	r25, 0x66	; 102
   10a3a:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <dialog_save_string_function+0x1>
   10a3e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_save_string_function>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name);
  //dialog_save_variable_function = ;
}
   10a42:	63 96       	adiw	r28, 0x13	; 19
   10a44:	0f b6       	in	r0, 0x3f	; 63
   10a46:	f8 94       	cli
   10a48:	de bf       	out	0x3e, r29	; 62
   10a4a:	0f be       	out	0x3f, r0	; 63
   10a4c:	cd bf       	out	0x3d, r28	; 61
   10a4e:	df 91       	pop	r29
   10a50:	cf 91       	pop	r28
   10a52:	1f 91       	pop	r17
   10a54:	08 95       	ret

00010a56 <twi_readFrom.part.0.constprop.169>:
twi_readFrom.part.0.constprop.169():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   10a56:	90 91 96 11 	lds	r25, 0x1196	; 0x801196 <twi_state>
   10a5a:	91 11       	cpse	r25, r1
   10a5c:	fc cf       	rjmp	.-8      	; 0x10a56 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   10a5e:	91 e0       	ldi	r25, 0x01	; 1
   10a60:	90 93 96 11 	sts	0x1196, r25	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   10a64:	90 93 95 11 	sts	0x1195, r25	; 0x801195 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   10a68:	2f ef       	ldi	r18, 0xFF	; 255
   10a6a:	20 93 94 11 	sts	0x1194, r18	; 0x801194 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   10a6e:	10 92 93 11 	sts	0x1193, r1	; 0x801193 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   10a72:	26 0f       	add	r18, r22
   10a74:	20 93 92 11 	sts	0x1192, r18	; 0x801192 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   10a78:	90 93 91 11 	sts	0x1191, r25	; 0x801191 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   10a7c:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <twi_slarw>
   10a80:	88 0f       	add	r24, r24
   10a82:	89 2b       	or	r24, r25
   10a84:	80 93 91 11 	sts	0x1191, r24	; 0x801191 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   10a88:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <twi_inRepStart>
   10a8c:	81 30       	cpi	r24, 0x01	; 1
   10a8e:	f9 f4       	brne	.+62     	; 0x10ace <twi_readFrom.part.0.constprop.169+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   10a90:	10 92 90 11 	sts	0x1190, r1	; 0x801190 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   10a94:	80 91 91 11 	lds	r24, 0x1191	; 0x801191 <twi_slarw>
   10a98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   10a9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   10aa0:	83 fd       	sbrc	r24, 3
   10aa2:	f8 cf       	rjmp	.-16     	; 0x10a94 <twi_readFrom.part.0.constprop.169+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   10aa4:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   10aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   10aaa:	80 91 96 11 	lds	r24, 0x1196	; 0x801196 <twi_state>
   10aae:	81 30       	cpi	r24, 0x01	; 1
   10ab0:	e1 f3       	breq	.-8      	; 0x10aaa <twi_readFrom.part.0.constprop.169+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   10ab2:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <twi_masterBufferIndex>
   10ab6:	86 17       	cp	r24, r22
   10ab8:	10 f4       	brcc	.+4      	; 0x10abe <twi_readFrom.part.0.constprop.169+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   10aba:	60 91 93 11 	lds	r22, 0x1193	; 0x801193 <twi_masterBufferIndex>
   10abe:	a0 e7       	ldi	r26, 0x70	; 112
   10ac0:	b1 e1       	ldi	r27, 0x11	; 17
   10ac2:	e0 e5       	ldi	r30, 0x50	; 80
   10ac4:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   10ac6:	80 e0       	ldi	r24, 0x00	; 0
   10ac8:	86 13       	cpse	r24, r22
   10aca:	03 c0       	rjmp	.+6      	; 0x10ad2 <twi_readFrom.part.0.constprop.169+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   10acc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   10ace:	85 ee       	ldi	r24, 0xE5	; 229
   10ad0:	ea cf       	rjmp	.-44     	; 0x10aa6 <twi_readFrom.part.0.constprop.169+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   10ad2:	9d 91       	ld	r25, X+
   10ad4:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   10ad6:	8f 5f       	subi	r24, 0xFF	; 255
   10ad8:	f7 cf       	rjmp	.-18     	; 0x10ac8 <twi_readFrom.part.0.constprop.169+0x72>

00010ada <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10ada:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   10ade:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   10ae2:	2f ef       	ldi	r18, 0xFF	; 255
   10ae4:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10ae6:	98 17       	cp	r25, r24
   10ae8:	48 f4       	brcc	.+18     	; 0x10afc <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   10aea:	e9 2f       	mov	r30, r25
   10aec:	f0 e0       	ldi	r31, 0x00	; 0
   10aee:	e0 5b       	subi	r30, 0xB0	; 176
   10af0:	fe 4e       	sbci	r31, 0xEE	; 238
   10af2:	20 81       	ld	r18, Z
   10af4:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   10af6:	9f 5f       	subi	r25, 0xFF	; 255
   10af8:	90 93 4b 11 	sts	0x114B, r25	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   10afc:	c9 01       	movw	r24, r18
   10afe:	08 95       	ret

00010b00 <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b00:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   10b04:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   10b08:	2f ef       	ldi	r18, 0xFF	; 255
   10b0a:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b0c:	98 17       	cp	r25, r24
   10b0e:	48 f4       	brcc	.+18     	; 0x10b22 <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   10b10:	e9 2f       	mov	r30, r25
   10b12:	f0 e0       	ldi	r31, 0x00	; 0
   10b14:	e0 5b       	subi	r30, 0xB0	; 176
   10b16:	fe 4e       	sbci	r31, 0xEE	; 238
   10b18:	20 81       	ld	r18, Z
   10b1a:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   10b1c:	9f 5f       	subi	r25, 0xFF	; 255
   10b1e:	90 93 4b 11 	sts	0x114B, r25	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   10b22:	c9 01       	movw	r24, r18
   10b24:	08 95       	ret

00010b26 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   10b26:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   10b2a:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
   10b2e:	89 1b       	sub	r24, r25
   10b30:	99 0b       	sbc	r25, r25
   10b32:	08 95       	ret

00010b34 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
   10b34:	08 95       	ret

00010b36 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
   10b36:	08 95       	ret

00010b38 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   10b38:	fc 01       	movw	r30, r24
   10b3a:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   10b3c:	44 8d       	ldd	r20, Z+28	; 0x1c
   10b3e:	25 2f       	mov	r18, r21
   10b40:	30 e0       	ldi	r19, 0x00	; 0
   10b42:	84 2f       	mov	r24, r20
   10b44:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   10b46:	82 1b       	sub	r24, r18
   10b48:	93 0b       	sbc	r25, r19
   10b4a:	54 17       	cp	r21, r20
   10b4c:	10 f0       	brcs	.+4      	; 0x10b52 <HardwareSerial::availableForWrite()+0x1a>
   10b4e:	cf 96       	adiw	r24, 0x3f	; 63
   10b50:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   10b52:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   10b54:	08 95       	ret

00010b56 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   10b56:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   10b58:	91 8d       	ldd	r25, Z+25	; 0x19
   10b5a:	82 8d       	ldd	r24, Z+26	; 0x1a
   10b5c:	98 17       	cp	r25, r24
   10b5e:	61 f0       	breq	.+24     	; 0x10b78 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   10b60:	a2 8d       	ldd	r26, Z+26	; 0x1a
   10b62:	ae 0f       	add	r26, r30
   10b64:	bf 2f       	mov	r27, r31
   10b66:	b1 1d       	adc	r27, r1
   10b68:	5d 96       	adiw	r26, 0x1d	; 29
   10b6a:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   10b6c:	92 8d       	ldd	r25, Z+26	; 0x1a
   10b6e:	9f 5f       	subi	r25, 0xFF	; 255
   10b70:	9f 73       	andi	r25, 0x3F	; 63
   10b72:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   10b74:	90 e0       	ldi	r25, 0x00	; 0
   10b76:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   10b78:	8f ef       	ldi	r24, 0xFF	; 255
   10b7a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   10b7c:	08 95       	ret

00010b7e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   10b7e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   10b80:	91 8d       	ldd	r25, Z+25	; 0x19
   10b82:	82 8d       	ldd	r24, Z+26	; 0x1a
   10b84:	98 17       	cp	r25, r24
   10b86:	31 f0       	breq	.+12     	; 0x10b94 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   10b88:	82 8d       	ldd	r24, Z+26	; 0x1a
   10b8a:	e8 0f       	add	r30, r24
   10b8c:	f1 1d       	adc	r31, r1
   10b8e:	85 8d       	ldd	r24, Z+29	; 0x1d
   10b90:	90 e0       	ldi	r25, 0x00	; 0
   10b92:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   10b94:	8f ef       	ldi	r24, 0xFF	; 255
   10b96:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   10b98:	08 95       	ret

00010b9a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   10b9a:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   10b9c:	91 8d       	ldd	r25, Z+25	; 0x19
   10b9e:	22 8d       	ldd	r18, Z+26	; 0x1a
   10ba0:	89 2f       	mov	r24, r25
   10ba2:	90 e0       	ldi	r25, 0x00	; 0
   10ba4:	80 5c       	subi	r24, 0xC0	; 192
   10ba6:	9f 4f       	sbci	r25, 0xFF	; 255
   10ba8:	82 1b       	sub	r24, r18
   10baa:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   10bac:	8f 73       	andi	r24, 0x3F	; 63
   10bae:	99 27       	eor	r25, r25
   10bb0:	08 95       	ret

00010bb2 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   10bb2:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   10bb4:	a4 8d       	ldd	r26, Z+28	; 0x1c
   10bb6:	a8 0f       	add	r26, r24
   10bb8:	b9 2f       	mov	r27, r25
   10bba:	b1 1d       	adc	r27, r1
   10bbc:	a3 5a       	subi	r26, 0xA3	; 163
   10bbe:	bf 4f       	sbci	r27, 0xFF	; 255
   10bc0:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   10bc2:	84 8d       	ldd	r24, Z+28	; 0x1c
   10bc4:	90 e0       	ldi	r25, 0x00	; 0
   10bc6:	01 96       	adiw	r24, 0x01	; 1
   10bc8:	8f 73       	andi	r24, 0x3F	; 63
   10bca:	99 27       	eor	r25, r25
   10bcc:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   10bce:	a6 89       	ldd	r26, Z+22	; 0x16
   10bd0:	b7 89       	ldd	r27, Z+23	; 0x17
   10bd2:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   10bd4:	a0 89       	ldd	r26, Z+16	; 0x10
   10bd6:	b1 89       	ldd	r27, Z+17	; 0x11
   10bd8:	8c 91       	ld	r24, X
   10bda:	80 64       	ori	r24, 0x40	; 64
   10bdc:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   10bde:	93 8d       	ldd	r25, Z+27	; 0x1b
   10be0:	84 8d       	ldd	r24, Z+28	; 0x1c
   10be2:	98 13       	cpse	r25, r24
   10be4:	06 c0       	rjmp	.+12     	; 0x10bf2 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   10be6:	02 88       	ldd	r0, Z+18	; 0x12
   10be8:	f3 89       	ldd	r31, Z+19	; 0x13
   10bea:	e0 2d       	mov	r30, r0
   10bec:	80 81       	ld	r24, Z
   10bee:	8f 7d       	andi	r24, 0xDF	; 223
   10bf0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   10bf2:	08 95       	ret

00010bf4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   10bf4:	ef 92       	push	r14
   10bf6:	ff 92       	push	r15
   10bf8:	0f 93       	push	r16
   10bfa:	1f 93       	push	r17
   10bfc:	cf 93       	push	r28
   10bfe:	df 93       	push	r29
   10c00:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   10c02:	81 e0       	ldi	r24, 0x01	; 1
   10c04:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   10c06:	9b 8d       	ldd	r25, Y+27	; 0x1b
   10c08:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10c0a:	98 13       	cpse	r25, r24
   10c0c:	16 c0       	rjmp	.+44     	; 0x10c3a <HardwareSerial::write(unsigned char)+0x46>
   10c0e:	e8 89       	ldd	r30, Y+16	; 0x10
   10c10:	f9 89       	ldd	r31, Y+17	; 0x11
   10c12:	80 81       	ld	r24, Z
   10c14:	85 ff       	sbrs	r24, 5
   10c16:	11 c0       	rjmp	.+34     	; 0x10c3a <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   10c18:	ee 89       	ldd	r30, Y+22	; 0x16
   10c1a:	ff 89       	ldd	r31, Y+23	; 0x17
   10c1c:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   10c1e:	e8 89       	ldd	r30, Y+16	; 0x10
   10c20:	f9 89       	ldd	r31, Y+17	; 0x11
   10c22:	80 81       	ld	r24, Z
   10c24:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   10c26:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   10c28:	81 e0       	ldi	r24, 0x01	; 1
   10c2a:	90 e0       	ldi	r25, 0x00	; 0
   10c2c:	df 91       	pop	r29
   10c2e:	cf 91       	pop	r28
   10c30:	1f 91       	pop	r17
   10c32:	0f 91       	pop	r16
   10c34:	ff 90       	pop	r15
   10c36:	ef 90       	pop	r14
   10c38:	08 95       	ret
   10c3a:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   10c3c:	0b 8d       	ldd	r16, Y+27	; 0x1b
   10c3e:	10 e0       	ldi	r17, 0x00	; 0
   10c40:	0f 5f       	subi	r16, 0xFF	; 255
   10c42:	1f 4f       	sbci	r17, 0xFF	; 255
   10c44:	0f 73       	andi	r16, 0x3F	; 63
   10c46:	11 27       	eor	r17, r17
   10c48:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   10c4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10c4c:	8e 11       	cpse	r24, r14
   10c4e:	0c c0       	rjmp	.+24     	; 0x10c68 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   10c50:	0f b6       	in	r0, 0x3f	; 63
   10c52:	07 fc       	sbrc	r0, 7
   10c54:	fa cf       	rjmp	.-12     	; 0x10c4a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   10c56:	e8 89       	ldd	r30, Y+16	; 0x10
   10c58:	f9 89       	ldd	r31, Y+17	; 0x11
   10c5a:	80 81       	ld	r24, Z
   10c5c:	85 ff       	sbrs	r24, 5
   10c5e:	f5 cf       	rjmp	.-22     	; 0x10c4a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   10c60:	ce 01       	movw	r24, r28
   10c62:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <HardwareSerial::_tx_udr_empty_irq()>
   10c66:	f1 cf       	rjmp	.-30     	; 0x10c4a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   10c68:	eb 8d       	ldd	r30, Y+27	; 0x1b
   10c6a:	ec 0f       	add	r30, r28
   10c6c:	fd 2f       	mov	r31, r29
   10c6e:	f1 1d       	adc	r31, r1
   10c70:	e3 5a       	subi	r30, 0xA3	; 163
   10c72:	ff 4f       	sbci	r31, 0xFF	; 255
   10c74:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   10c76:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   10c78:	ea 89       	ldd	r30, Y+18	; 0x12
   10c7a:	fb 89       	ldd	r31, Y+19	; 0x13
   10c7c:	80 81       	ld	r24, Z
   10c7e:	80 62       	ori	r24, 0x20	; 32
   10c80:	d2 cf       	rjmp	.-92     	; 0x10c26 <HardwareSerial::write(unsigned char)+0x32>

00010c82 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   10c82:	cf 93       	push	r28
   10c84:	df 93       	push	r29
   10c86:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   10c88:	88 8d       	ldd	r24, Y+24	; 0x18
   10c8a:	88 23       	and	r24, r24
   10c8c:	b9 f0       	breq	.+46     	; 0x10cbc <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   10c8e:	aa 89       	ldd	r26, Y+18	; 0x12
   10c90:	bb 89       	ldd	r27, Y+19	; 0x13
   10c92:	e8 89       	ldd	r30, Y+16	; 0x10
   10c94:	f9 89       	ldd	r31, Y+17	; 0x11
   10c96:	8c 91       	ld	r24, X
   10c98:	85 fd       	sbrc	r24, 5
   10c9a:	03 c0       	rjmp	.+6      	; 0x10ca2 <HardwareSerial::flush()+0x20>
   10c9c:	80 81       	ld	r24, Z
   10c9e:	86 fd       	sbrc	r24, 6
   10ca0:	0d c0       	rjmp	.+26     	; 0x10cbc <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   10ca2:	0f b6       	in	r0, 0x3f	; 63
   10ca4:	07 fc       	sbrc	r0, 7
   10ca6:	f7 cf       	rjmp	.-18     	; 0x10c96 <HardwareSerial::flush()+0x14>
   10ca8:	8c 91       	ld	r24, X
   10caa:	85 ff       	sbrs	r24, 5
   10cac:	f2 cf       	rjmp	.-28     	; 0x10c92 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   10cae:	80 81       	ld	r24, Z
   10cb0:	85 ff       	sbrs	r24, 5
   10cb2:	ed cf       	rjmp	.-38     	; 0x10c8e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   10cb4:	ce 01       	movw	r24, r28
   10cb6:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <HardwareSerial::_tx_udr_empty_irq()>
   10cba:	e9 cf       	rjmp	.-46     	; 0x10c8e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   10cbc:	df 91       	pop	r29
   10cbe:	cf 91       	pop	r28
   10cc0:	08 95       	ret

00010cc2 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   10cc2:	84 ed       	ldi	r24, 0xD4	; 212
   10cc4:	9b e0       	ldi	r25, 0x0B	; 11
   10cc6:	0e 94 cd 85 	call	0x10b9a	; 0x10b9a <HardwareSerial::available()>
   10cca:	21 e0       	ldi	r18, 0x01	; 1
   10ccc:	89 2b       	or	r24, r25
   10cce:	09 f4       	brne	.+2      	; 0x10cd2 <Serial0_available()+0x10>
   10cd0:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   10cd2:	82 2f       	mov	r24, r18
   10cd4:	08 95       	ret

00010cd6 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   10cd6:	80 e0       	ldi	r24, 0x00	; 0
   10cd8:	90 e0       	ldi	r25, 0x00	; 0
   10cda:	89 2b       	or	r24, r25
   10cdc:	29 f0       	breq	.+10     	; 0x10ce8 <serialEventRun()+0x12>
   10cde:	0e 94 61 86 	call	0x10cc2	; 0x10cc2 <Serial0_available()>
   10ce2:	81 11       	cpse	r24, r1
   10ce4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   10ce8:	80 e0       	ldi	r24, 0x00	; 0
   10cea:	90 e0       	ldi	r25, 0x00	; 0
   10cec:	89 2b       	or	r24, r25
   10cee:	49 f0       	breq	.+18     	; 0x10d02 <serialEventRun()+0x2c>
   10cf0:	80 e0       	ldi	r24, 0x00	; 0
   10cf2:	90 e0       	ldi	r25, 0x00	; 0
   10cf4:	89 2b       	or	r24, r25
   10cf6:	29 f0       	breq	.+10     	; 0x10d02 <serialEventRun()+0x2c>
   10cf8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   10cfc:	81 11       	cpse	r24, r1
   10cfe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   10d02:	08 95       	ret

00010d04 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
   10d04:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
   10d06:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
   10d08:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <timer0_overflow_count>
   10d0c:	90 91 40 11 	lds	r25, 0x1140	; 0x801140 <timer0_overflow_count+0x1>
   10d10:	a0 91 41 11 	lds	r26, 0x1141	; 0x801141 <timer0_overflow_count+0x2>
   10d14:	b0 91 42 11 	lds	r27, 0x1142	; 0x801142 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   10d18:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   10d1a:	a8 9b       	sbis	0x15, 0	; 21
   10d1c:	05 c0       	rjmp	.+10     	; 0x10d28 <micros+0x24>
   10d1e:	2f 3f       	cpi	r18, 0xFF	; 255
   10d20:	19 f0       	breq	.+6      	; 0x10d28 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
   10d22:	01 96       	adiw	r24, 0x01	; 1
   10d24:	a1 1d       	adc	r26, r1
   10d26:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
   10d28:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
   10d2a:	ba 2f       	mov	r27, r26
   10d2c:	a9 2f       	mov	r26, r25
   10d2e:	98 2f       	mov	r25, r24
   10d30:	88 27       	eor	r24, r24
   10d32:	bc 01       	movw	r22, r24
   10d34:	cd 01       	movw	r24, r26
   10d36:	62 0f       	add	r22, r18
   10d38:	71 1d       	adc	r23, r1
   10d3a:	81 1d       	adc	r24, r1
   10d3c:	91 1d       	adc	r25, r1
   10d3e:	42 e0       	ldi	r20, 0x02	; 2
   10d40:	66 0f       	add	r22, r22
   10d42:	77 1f       	adc	r23, r23
   10d44:	88 1f       	adc	r24, r24
   10d46:	99 1f       	adc	r25, r25
   10d48:	4a 95       	dec	r20
   10d4a:	d1 f7       	brne	.-12     	; 0x10d40 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
   10d4c:	08 95       	ret

00010d4e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   10d4e:	af 92       	push	r10
   10d50:	bf 92       	push	r11
   10d52:	cf 92       	push	r12
   10d54:	df 92       	push	r13
   10d56:	ef 92       	push	r14
   10d58:	ff 92       	push	r15
   10d5a:	0f 93       	push	r16
   10d5c:	1f 93       	push	r17
   10d5e:	cf 93       	push	r28
   10d60:	df 93       	push	r29
   10d62:	6c 01       	movw	r12, r24
   10d64:	7b 01       	movw	r14, r22
   10d66:	8b 01       	movw	r16, r22
   10d68:	04 0f       	add	r16, r20
   10d6a:	15 1f       	adc	r17, r21
   10d6c:	eb 01       	movw	r28, r22
   10d6e:	5e 01       	movw	r10, r28
   10d70:	ae 18       	sub	r10, r14
   10d72:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
   10d74:	c0 17       	cp	r28, r16
   10d76:	d1 07       	cpc	r29, r17
   10d78:	59 f0       	breq	.+22     	; 0x10d90 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
   10d7a:	69 91       	ld	r22, Y+
   10d7c:	d6 01       	movw	r26, r12
   10d7e:	ed 91       	ld	r30, X+
   10d80:	fc 91       	ld	r31, X
   10d82:	01 90       	ld	r0, Z+
   10d84:	f0 81       	ld	r31, Z
   10d86:	e0 2d       	mov	r30, r0
   10d88:	c6 01       	movw	r24, r12
   10d8a:	19 95       	eicall
   10d8c:	89 2b       	or	r24, r25
   10d8e:	79 f7       	brne	.-34     	; 0x10d6e <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
   10d90:	c5 01       	movw	r24, r10
   10d92:	df 91       	pop	r29
   10d94:	cf 91       	pop	r28
   10d96:	1f 91       	pop	r17
   10d98:	0f 91       	pop	r16
   10d9a:	ff 90       	pop	r15
   10d9c:	ef 90       	pop	r14
   10d9e:	df 90       	pop	r13
   10da0:	cf 90       	pop	r12
   10da2:	bf 90       	pop	r11
   10da4:	af 90       	pop	r10
   10da6:	08 95       	ret

00010da8 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   10da8:	85 ed       	ldi	r24, 0xD5	; 213
   10daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   10dae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   10db2:	84 fd       	sbrc	r24, 4
   10db4:	fc cf       	rjmp	.-8      	; 0x10dae <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   10db6:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
   10dba:	08 95       	ret

00010dbc <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
   10dbc:	20 91 ff 10 	lds	r18, 0x10FF	; 0x8010ff <twi_txBufferLength>
   10dc0:	26 0f       	add	r18, r22
   10dc2:	33 27       	eor	r19, r19
   10dc4:	33 1f       	adc	r19, r19
   10dc6:	21 32       	cpi	r18, 0x21	; 33
   10dc8:	31 05       	cpc	r19, r1
   10dca:	ec f4       	brge	.+58     	; 0x10e06 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
   10dcc:	20 91 96 11 	lds	r18, 0x1196	; 0x801196 <twi_state>
   10dd0:	fc 01       	movw	r30, r24
   10dd2:	90 e0       	ldi	r25, 0x00	; 0
   10dd4:	80 e0       	ldi	r24, 0x00	; 0
   10dd6:	24 30       	cpi	r18, 0x04	; 4
   10dd8:	69 f0       	breq	.+26     	; 0x10df4 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
   10dda:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
   10ddc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
   10dde:	a0 91 ff 10 	lds	r26, 0x10FF	; 0x8010ff <twi_txBufferLength>
   10de2:	21 91       	ld	r18, Z+
   10de4:	ac 01       	movw	r20, r24
   10de6:	41 52       	subi	r20, 0x21	; 33
   10de8:	5f 4e       	sbci	r21, 0xEF	; 239
   10dea:	a4 0f       	add	r26, r20
   10dec:	b5 2f       	mov	r27, r21
   10dee:	b1 1d       	adc	r27, r1
   10df0:	2c 93       	st	X, r18
   10df2:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
   10df4:	86 17       	cp	r24, r22
   10df6:	98 f3       	brcs	.-26     	; 0x10dde <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
   10df8:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <twi_txBufferLength>
   10dfc:	68 0f       	add	r22, r24
   10dfe:	60 93 ff 10 	sts	0x10FF, r22	; 0x8010ff <twi_txBufferLength>
   10e02:	80 e0       	ldi	r24, 0x00	; 0
   10e04:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
   10e06:	81 e0       	ldi	r24, 0x01	; 1
   10e08:	08 95       	ret

00010e0a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
   10e0a:	08 95       	ret

00010e0c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
   10e0c:	e0 91 4b 11 	lds	r30, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   10e10:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   10e14:	e8 17       	cp	r30, r24
   10e16:	30 f4       	brcc	.+12     	; 0x10e24 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
   10e18:	f0 e0       	ldi	r31, 0x00	; 0
   10e1a:	e0 5b       	subi	r30, 0xB0	; 176
   10e1c:	fe 4e       	sbci	r31, 0xEE	; 238
   10e1e:	80 81       	ld	r24, Z
   10e20:	90 e0       	ldi	r25, 0x00	; 0
   10e22:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
   10e24:	8f ef       	ldi	r24, 0xFF	; 255
   10e26:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
   10e28:	08 95       	ret

00010e2a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   10e2a:	cf 92       	push	r12
   10e2c:	df 92       	push	r13
   10e2e:	ef 92       	push	r14
   10e30:	ff 92       	push	r15
   10e32:	0f 93       	push	r16
   10e34:	1f 93       	push	r17
   10e36:	cf 93       	push	r28
   10e38:	df 93       	push	r29
   10e3a:	7c 01       	movw	r14, r24
   10e3c:	cb 01       	movw	r24, r22
   10e3e:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
   10e40:	20 91 4f 11 	lds	r18, 0x114F	; 0x80114f <TwoWire::transmitting>
   10e44:	22 23       	and	r18, r18
   10e46:	89 f0       	breq	.+34     	; 0x10e6a <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   10e48:	eb 01       	movw	r28, r22
   10e4a:	6b 01       	movw	r12, r22
   10e4c:	c4 0e       	add	r12, r20
   10e4e:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
   10e50:	cc 15       	cp	r28, r12
   10e52:	dd 05       	cpc	r29, r13
   10e54:	69 f0       	breq	.+26     	; 0x10e70 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
   10e56:	69 91       	ld	r22, Y+
   10e58:	d7 01       	movw	r26, r14
   10e5a:	ed 91       	ld	r30, X+
   10e5c:	fc 91       	ld	r31, X
   10e5e:	01 90       	ld	r0, Z+
   10e60:	f0 81       	ld	r31, Z
   10e62:	e0 2d       	mov	r30, r0
   10e64:	c7 01       	movw	r24, r14
   10e66:	19 95       	eicall
   10e68:	f3 cf       	rjmp	.-26     	; 0x10e50 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
   10e6a:	64 2f       	mov	r22, r20
   10e6c:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
   10e70:	c8 01       	movw	r24, r16
   10e72:	df 91       	pop	r29
   10e74:	cf 91       	pop	r28
   10e76:	1f 91       	pop	r17
   10e78:	0f 91       	pop	r16
   10e7a:	ff 90       	pop	r15
   10e7c:	ef 90       	pop	r14
   10e7e:	df 90       	pop	r13
   10e80:	cf 90       	pop	r12
   10e82:	08 95       	ret

00010e84 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
   10e84:	cf 93       	push	r28
   10e86:	df 93       	push	r29
   10e88:	1f 92       	push	r1
   10e8a:	cd b7       	in	r28, 0x3d	; 61
   10e8c:	de b7       	in	r29, 0x3e	; 62
   10e8e:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
   10e90:	20 91 4f 11 	lds	r18, 0x114F	; 0x80114f <TwoWire::transmitting>
   10e94:	22 23       	and	r18, r18
   10e96:	f9 f0       	breq	.+62     	; 0x10ed6 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
   10e98:	20 91 4c 11 	lds	r18, 0x114C	; 0x80114c <TwoWire::txBufferLength>
   10e9c:	20 32       	cpi	r18, 0x20	; 32
   10e9e:	58 f0       	brcs	.+22     	; 0x10eb6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   10ea0:	21 e0       	ldi	r18, 0x01	; 1
   10ea2:	30 e0       	ldi	r19, 0x00	; 0
   10ea4:	fc 01       	movw	r30, r24
   10ea6:	33 83       	std	Z+3, r19	; 0x03
   10ea8:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
   10eaa:	90 e0       	ldi	r25, 0x00	; 0
   10eac:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
   10eae:	0f 90       	pop	r0
   10eb0:	df 91       	pop	r29
   10eb2:	cf 91       	pop	r28
   10eb4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
   10eb6:	80 91 4d 11 	lds	r24, 0x114D	; 0x80114d <TwoWire::txBufferIndex>
   10eba:	e8 2f       	mov	r30, r24
   10ebc:	f0 e0       	ldi	r31, 0x00	; 0
   10ebe:	e1 54       	subi	r30, 0x41	; 65
   10ec0:	ff 4e       	sbci	r31, 0xEF	; 239
   10ec2:	99 81       	ldd	r25, Y+1	; 0x01
   10ec4:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
   10ec6:	8f 5f       	subi	r24, 0xFF	; 255
   10ec8:	80 93 4d 11 	sts	0x114D, r24	; 0x80114d <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
   10ecc:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
   10ed0:	81 e0       	ldi	r24, 0x01	; 1
   10ed2:	90 e0       	ldi	r25, 0x00	; 0
   10ed4:	ec cf       	rjmp	.-40     	; 0x10eae <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
   10ed6:	61 e0       	ldi	r22, 0x01	; 1
   10ed8:	ce 01       	movw	r24, r28
   10eda:	01 96       	adiw	r24, 0x01	; 1
   10edc:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <twi_transmit>
   10ee0:	f7 cf       	rjmp	.-18     	; 0x10ed0 <TwoWire::write(unsigned char)+0x4c>

00010ee2 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   10ee2:	08 95       	ret

00010ee4 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   10ee4:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   10ee6:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   10ee8:	0d b4       	in	r0, 0x2d	; 45
   10eea:	07 fe       	sbrs	r0, 7
   10eec:	fd cf       	rjmp	.-6      	; 0x10ee8 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
   10eee:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
   10ef0:	08 95       	ret

00010ef2 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   10ef2:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   10ef4:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
   10ef6:	08 95       	ret

00010ef8 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   10ef8:	cf 93       	push	r28
   10efa:	df 93       	push	r29
   10efc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   10efe:	89 8d       	ldd	r24, Y+25	; 0x19
   10f00:	9a 8d       	ldd	r25, Y+26	; 0x1a
   10f02:	89 2b       	or	r24, r25
   10f04:	41 f0       	breq	.+16     	; 0x10f16 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   10f06:	e8 81       	ld	r30, Y
   10f08:	f9 81       	ldd	r31, Y+1	; 0x01
   10f0a:	02 84       	ldd	r0, Z+10	; 0x0a
   10f0c:	f3 85       	ldd	r31, Z+11	; 0x0b
   10f0e:	e0 2d       	mov	r30, r0
   10f10:	ce 01       	movw	r24, r28
   10f12:	19 95       	eicall
   10f14:	f4 cf       	rjmp	.-24     	; 0x10efe <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
   10f16:	df 91       	pop	r29
   10f18:	cf 91       	pop	r28
   10f1a:	08 95       	ret

00010f1c <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   10f1c:	cf 93       	push	r28
   10f1e:	df 93       	push	r29
   10f20:	1f 92       	push	r1
   10f22:	cd b7       	in	r28, 0x3d	; 61
   10f24:	de b7       	in	r29, 0x3e	; 62
   10f26:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   10f28:	dc 01       	movw	r26, r24
   10f2a:	ed 91       	ld	r30, X+
   10f2c:	fc 91       	ld	r31, X
   10f2e:	02 80       	ldd	r0, Z+2	; 0x02
   10f30:	f3 81       	ldd	r31, Z+3	; 0x03
   10f32:	e0 2d       	mov	r30, r0
   10f34:	41 e0       	ldi	r20, 0x01	; 1
   10f36:	50 e0       	ldi	r21, 0x00	; 0
   10f38:	be 01       	movw	r22, r28
   10f3a:	6f 5f       	subi	r22, 0xFF	; 255
   10f3c:	7f 4f       	sbci	r23, 0xFF	; 255
   10f3e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   10f40:	0f 90       	pop	r0
   10f42:	df 91       	pop	r29
   10f44:	cf 91       	pop	r28
   10f46:	08 95       	ret

00010f48 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   10f48:	fc 01       	movw	r30, r24
   10f4a:	81 8d       	ldd	r24, Z+25	; 0x19
   10f4c:	92 8d       	ldd	r25, Z+26	; 0x1a
   10f4e:	08 95       	ret

00010f50 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   10f50:	fc 01       	movw	r30, r24
   10f52:	85 89       	ldd	r24, Z+21	; 0x15
   10f54:	96 89       	ldd	r25, Z+22	; 0x16
   10f56:	08 95       	ret

00010f58 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   10f58:	22 ee       	ldi	r18, 0xE2	; 226
   10f5a:	32 e0       	ldi	r19, 0x02	; 2
   10f5c:	fc 01       	movw	r30, r24
   10f5e:	31 83       	std	Z+1, r19	; 0x01
   10f60:	20 83       	st	Z, r18
   10f62:	fb 01       	movw	r30, r22
   10f64:	41 89       	ldd	r20, Z+17	; 0x11
   10f66:	52 89       	ldd	r21, Z+18	; 0x12
   10f68:	63 89       	ldd	r22, Z+19	; 0x13
   10f6a:	74 89       	ldd	r23, Z+20	; 0x14
   10f6c:	fc 01       	movw	r30, r24
   10f6e:	42 83       	std	Z+2, r20	; 0x02
   10f70:	53 83       	std	Z+3, r21	; 0x03
   10f72:	64 83       	std	Z+4, r22	; 0x04
   10f74:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   10f76:	08 95       	ret

00010f78 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   10f78:	80 e0       	ldi	r24, 0x00	; 0
   10f7a:	08 95       	ret

00010f7c <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   10f7c:	fc 01       	movw	r30, r24
   10f7e:	94 85       	ldd	r25, Z+12	; 0x0c
   10f80:	fb 01       	movw	r30, r22
   10f82:	84 85       	ldd	r24, Z+12	; 0x0c
   10f84:	98 13       	cpse	r25, r24
   10f86:	03 c0       	rjmp	.+6      	; 0x10f8e <EthernetClient::operator==(EthernetClient const&)+0x12>
   10f88:	81 e0       	ldi	r24, 0x01	; 1
   10f8a:	98 30       	cpi	r25, 0x08	; 8
   10f8c:	09 f4       	brne	.+2      	; 0x10f90 <EthernetClient::operator==(EthernetClient const&)+0x14>
   10f8e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   10f90:	08 95       	ret

00010f92 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   10f92:	21 e0       	ldi	r18, 0x01	; 1
   10f94:	fc 01       	movw	r30, r24
   10f96:	84 85       	ldd	r24, Z+12	; 0x0c
   10f98:	88 30       	cpi	r24, 0x08	; 8
   10f9a:	09 f4       	brne	.+2      	; 0x10f9e <EthernetClient::operator bool()+0xc>
   10f9c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   10f9e:	82 2f       	mov	r24, r18
   10fa0:	08 95       	ret

00010fa2 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
   10fa2:	08 95       	ret

00010fa4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   10fa4:	2f 92       	push	r2
   10fa6:	3f 92       	push	r3
   10fa8:	4f 92       	push	r4
   10faa:	5f 92       	push	r5
   10fac:	6f 92       	push	r6
   10fae:	7f 92       	push	r7
   10fb0:	8f 92       	push	r8
   10fb2:	9f 92       	push	r9
   10fb4:	af 92       	push	r10
   10fb6:	bf 92       	push	r11
   10fb8:	cf 92       	push	r12
   10fba:	df 92       	push	r13
   10fbc:	ef 92       	push	r14
   10fbe:	ff 92       	push	r15
   10fc0:	0f 93       	push	r16
   10fc2:	1f 93       	push	r17
   10fc4:	cf 93       	push	r28
   10fc6:	df 93       	push	r29
   10fc8:	cd b7       	in	r28, 0x3d	; 61
   10fca:	de b7       	in	r29, 0x3e	; 62
   10fcc:	2d 97       	sbiw	r28, 0x0d	; 13
   10fce:	0f b6       	in	r0, 0x3f	; 63
   10fd0:	f8 94       	cli
   10fd2:	de bf       	out	0x3e, r29	; 62
   10fd4:	0f be       	out	0x3f, r0	; 63
   10fd6:	cd bf       	out	0x3d, r28	; 61
   10fd8:	fc 01       	movw	r30, r24
   10fda:	a0 81       	ld	r26, Z
   10fdc:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   10fde:	cb 01       	movw	r24, r22
   10fe0:	8e 50       	subi	r24, 0x0E	; 14
   10fe2:	97 42       	sbci	r25, 0x27	; 39
   10fe4:	02 97       	sbiw	r24, 0x02	; 2
   10fe6:	20 f5       	brcc	.+72     	; 0x11030 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   10fe8:	fd 01       	movw	r30, r26
   10fea:	01 90       	ld	r0, Z+
   10fec:	00 20       	and	r0, r0
   10fee:	e9 f7       	brne	.-6      	; 0x10fea <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x46>
   10ff0:	31 97       	sbiw	r30, 0x01	; 1
   10ff2:	ea 1b       	sub	r30, r26
   10ff4:	fb 0b       	sbc	r31, r27
   10ff6:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_lcd+0xc>
   10ffa:	26 e0       	ldi	r18, 0x06	; 6
   10ffc:	82 9f       	mul	r24, r18
   10ffe:	c0 01       	movw	r24, r0
   11000:	11 24       	eor	r1, r1
   11002:	8e 9f       	mul	r24, r30
   11004:	90 01       	movw	r18, r0
   11006:	8f 9f       	mul	r24, r31
   11008:	30 0d       	add	r19, r0
   1100a:	9e 9f       	mul	r25, r30
   1100c:	30 0d       	add	r19, r0
   1100e:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   11010:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <my_lcd+0x12>
   11014:	90 91 34 0e 	lds	r25, 0x0E34	; 0x800e34 <my_lcd+0x13>
   11018:	82 1b       	sub	r24, r18
   1101a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   1101c:	6e 30       	cpi	r22, 0x0E	; 14
   1101e:	77 42       	sbci	r23, 0x27	; 39
   11020:	89 f5       	brne	.+98     	; 0x11084 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   11022:	bc 01       	movw	r22, r24
   11024:	97 ff       	sbrs	r25, 7
   11026:	02 c0       	rjmp	.+4      	; 0x1102c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x88>
   11028:	6f 5f       	subi	r22, 0xFF	; 255
   1102a:	7f 4f       	sbci	r23, 0xFF	; 255
   1102c:	75 95       	asr	r23
   1102e:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   11030:	70 93 24 0e 	sts	0x0E24, r23	; 0x800e24 <my_lcd+0x3>
   11034:	60 93 23 0e 	sts	0x0E23, r22	; 0x800e23 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   11038:	50 93 26 0e 	sts	0x0E26, r21	; 0x800e26 <my_lcd+0x5>
   1103c:	40 93 25 0e 	sts	0x0E25, r20	; 0x800e25 <my_lcd+0x4>
   11040:	be 83       	std	Y+6, r27	; 0x06
   11042:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   11044:	ed 81       	ldd	r30, Y+5	; 0x05
   11046:	fe 81       	ldd	r31, Y+6	; 0x06
   11048:	91 91       	ld	r25, Z+
   1104a:	fe 83       	std	Y+6, r31	; 0x06
   1104c:	ed 83       	std	Y+5, r30	; 0x05
   1104e:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   11050:	99 23       	and	r25, r25
   11052:	09 f4       	brne	.+2      	; 0x11056 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xb2>
   11054:	dd c0       	rjmp	.+442    	; 0x11210 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   11056:	9a 30       	cpi	r25, 0x0A	; 10
   11058:	c9 f4       	brne	.+50     	; 0x1108c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   1105a:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_lcd+0xc>
   1105e:	f8 e0       	ldi	r31, 0x08	; 8
   11060:	8f 9f       	mul	r24, r31
   11062:	c0 01       	movw	r24, r0
   11064:	11 24       	eor	r1, r1
   11066:	20 91 25 0e 	lds	r18, 0x0E25	; 0x800e25 <my_lcd+0x4>
   1106a:	30 91 26 0e 	lds	r19, 0x0E26	; 0x800e26 <my_lcd+0x5>
   1106e:	82 0f       	add	r24, r18
   11070:	93 1f       	adc	r25, r19
   11072:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <my_lcd+0x5>
   11076:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   1107a:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <my_lcd+0x3>
   1107e:	10 92 23 0e 	sts	0x0E23, r1	; 0x800e23 <my_lcd+0x2>
   11082:	e0 cf       	rjmp	.-64     	; 0x11044 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   11084:	bc 01       	movw	r22, r24
   11086:	61 50       	subi	r22, 0x01	; 1
   11088:	71 09       	sbc	r23, r1
   1108a:	d2 cf       	rjmp	.-92     	; 0x11030 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   1108c:	9d 30       	cpi	r25, 0x0D	; 13
   1108e:	d1 f2       	breq	.-76     	; 0x11044 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   11090:	20 91 23 0e 	lds	r18, 0x0E23	; 0x800e23 <my_lcd+0x2>
   11094:	30 91 24 0e 	lds	r19, 0x0E24	; 0x800e24 <my_lcd+0x3>
   11098:	39 87       	std	Y+9, r19	; 0x09
   1109a:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   1109c:	20 91 33 0e 	lds	r18, 0x0E33	; 0x800e33 <my_lcd+0x12>
   110a0:	30 91 34 0e 	lds	r19, 0x0E34	; 0x800e34 <my_lcd+0x13>
   110a4:	48 85       	ldd	r20, Y+8	; 0x08
   110a6:	59 85       	ldd	r21, Y+9	; 0x09
   110a8:	42 17       	cp	r20, r18
   110aa:	53 07       	cpc	r21, r19
   110ac:	0c f0       	brlt	.+2      	; 0x110b0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x10c>
   110ae:	88 c0       	rjmp	.+272    	; 0x111c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   110b0:	60 90 25 0e 	lds	r6, 0x0E25	; 0x800e25 <my_lcd+0x4>
   110b4:	70 90 26 0e 	lds	r7, 0x0E26	; 0x800e26 <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   110b8:	20 91 35 0e 	lds	r18, 0x0E35	; 0x800e35 <my_lcd+0x14>
   110bc:	30 91 36 0e 	lds	r19, 0x0E36	; 0x800e36 <my_lcd+0x15>
   110c0:	62 16       	cp	r6, r18
   110c2:	73 06       	cpc	r7, r19
   110c4:	0c f0       	brlt	.+2      	; 0x110c8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x124>
   110c6:	7c c0       	rjmp	.+248    	; 0x111c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   110c8:	50 91 2d 0e 	lds	r21, 0x0E2D	; 0x800e2d <my_lcd+0xc>
   110cc:	5a 83       	std	Y+2, r21	; 0x02
   110ce:	c5 2e       	mov	r12, r21
   110d0:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   110d2:	28 85       	ldd	r18, Y+8	; 0x08
   110d4:	39 85       	ldd	r19, Y+9	; 0x09
   110d6:	e6 e0       	ldi	r30, 0x06	; 6
   110d8:	5e 9f       	mul	r21, r30
   110da:	20 0d       	add	r18, r0
   110dc:	31 1d       	adc	r19, r1
   110de:	11 24       	eor	r1, r1
   110e0:	12 16       	cp	r1, r18
   110e2:	13 06       	cpc	r1, r19
   110e4:	0c f0       	brlt	.+2      	; 0x110e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x144>
   110e6:	6c c0       	rjmp	.+216    	; 0x111c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   110e8:	96 01       	movw	r18, r12
   110ea:	93 e0       	ldi	r25, 0x03	; 3
   110ec:	22 0f       	add	r18, r18
   110ee:	33 1f       	adc	r19, r19
   110f0:	9a 95       	dec	r25
   110f2:	e1 f7       	brne	.-8      	; 0x110ec <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x148>
   110f4:	26 0d       	add	r18, r6
   110f6:	37 1d       	adc	r19, r7
   110f8:	12 16       	cp	r1, r18
   110fa:	13 06       	cpc	r1, r19
   110fc:	0c f0       	brlt	.+2      	; 0x11100 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x15c>
   110fe:	60 c0       	rjmp	.+192    	; 0x111c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   11100:	80 3b       	cpi	r24, 0xB0	; 176
   11102:	08 f0       	brcs	.+2      	; 0x11106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   11104:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   11106:	f0 91 2e 0e 	lds	r31, 0x0E2E	; 0x800e2e <my_lcd+0xd>
   1110a:	ff 83       	std	Y+7, r31	; 0x07
   1110c:	20 90 29 0e 	lds	r2, 0x0E29	; 0x800e29 <my_lcd+0x8>
   11110:	30 90 2a 0e 	lds	r3, 0x0E2A	; 0x800e2a <my_lcd+0x9>
   11114:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <my_lcd+0x6>
   11118:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <my_lcd+0x7>
   1111c:	3c 83       	std	Y+4, r19	; 0x04
   1111e:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   11120:	48 85       	ldd	r20, Y+8	; 0x08
   11122:	59 85       	ldd	r21, Y+9	; 0x09
   11124:	5d 87       	std	Y+13, r21	; 0x0d
   11126:	4c 87       	std	Y+12, r20	; 0x0c
   11128:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   1112a:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1112c:	2b e6       	ldi	r18, 0x6B	; 107
   1112e:	3e e3       	ldi	r19, 0x3E	; 62
   11130:	24 1b       	sub	r18, r20
   11132:	35 0b       	sbc	r19, r21
   11134:	f9 01       	movw	r30, r18
   11136:	45 e0       	ldi	r20, 0x05	; 5
   11138:	84 9f       	mul	r24, r20
   1113a:	e0 0d       	add	r30, r0
   1113c:	f1 1d       	adc	r31, r1
   1113e:	11 24       	eor	r1, r1
   11140:	fb 87       	std	Y+11, r31	; 0x0b
   11142:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   11144:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   11146:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   11148:	55 30       	cpi	r21, 0x05	; 5
   1114a:	29 f0       	breq	.+10     	; 0x11156 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1114c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1114e:	fb 85       	ldd	r31, Y+11	; 0x0b
   11150:	ea 0d       	add	r30, r10
   11152:	fb 1d       	adc	r31, r11
   11154:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   11156:	23 01       	movw	r4, r6
   11158:	91 2c       	mov	r9, r1
   1115a:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   1115c:	8e 2f       	mov	r24, r30
   1115e:	90 e0       	ldi	r25, 0x00	; 0
   11160:	99 87       	std	Y+9, r25	; 0x09
   11162:	88 87       	std	Y+8, r24	; 0x08
   11164:	e0 ff       	sbrs	r30, 0
   11166:	3c c0       	rjmp	.+120    	; 0x111e0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   11168:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   1116a:	2b 81       	ldd	r18, Y+3	; 0x03
   1116c:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   1116e:	eb 80       	ldd	r14, Y+3	; 0x03
   11170:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   11172:	91 30       	cpi	r25, 0x01	; 1
   11174:	09 f0       	breq	.+2      	; 0x11178 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
   11176:	42 c0       	rjmp	.+132    	; 0x111fc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   11178:	a3 01       	movw	r20, r6
   1117a:	48 0d       	add	r20, r8
   1117c:	59 1d       	adc	r21, r9
   1117e:	b5 01       	movw	r22, r10
   11180:	81 e2       	ldi	r24, 0x21	; 33
   11182:	9e e0       	ldi	r25, 0x0E	; 14
   11184:	0e 94 18 24 	call	0x4830	; 0x4830 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   11188:	e8 85       	ldd	r30, Y+8	; 0x08
   1118a:	f9 85       	ldd	r31, Y+9	; 0x09
   1118c:	f5 95       	asr	r31
   1118e:	e7 95       	ror	r30
   11190:	3f ef       	ldi	r19, 0xFF	; 255
   11192:	83 1a       	sub	r8, r19
   11194:	93 0a       	sbc	r9, r19
   11196:	4c 0c       	add	r4, r12
   11198:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   1119a:	48 e0       	ldi	r20, 0x08	; 8
   1119c:	84 16       	cp	r8, r20
   1119e:	91 04       	cpc	r9, r1
   111a0:	e9 f6       	brne	.-70     	; 0x1115c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b8>
   111a2:	5f ef       	ldi	r21, 0xFF	; 255
   111a4:	a5 1a       	sub	r10, r21
   111a6:	b5 0a       	sbc	r11, r21
   111a8:	8c 85       	ldd	r24, Y+12	; 0x0c
   111aa:	9d 85       	ldd	r25, Y+13	; 0x0d
   111ac:	8c 0d       	add	r24, r12
   111ae:	9d 1d       	adc	r25, r13
   111b0:	9d 87       	std	Y+13, r25	; 0x0d
   111b2:	8c 87       	std	Y+12, r24	; 0x0c
   111b4:	99 81       	ldd	r25, Y+1	; 0x01
   111b6:	9f 5f       	subi	r25, 0xFF	; 255
   111b8:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   111ba:	96 30       	cpi	r25, 0x06	; 6
   111bc:	09 f0       	breq	.+2      	; 0x111c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   111be:	c2 cf       	rjmp	.-124    	; 0x11144 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   111c0:	20 91 2d 0e 	lds	r18, 0x0E2D	; 0x800e2d <my_lcd+0xc>
   111c4:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <my_lcd+0x2>
   111c8:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <my_lcd+0x3>
   111cc:	e6 e0       	ldi	r30, 0x06	; 6
   111ce:	2e 9f       	mul	r18, r30
   111d0:	80 0d       	add	r24, r0
   111d2:	91 1d       	adc	r25, r1
   111d4:	11 24       	eor	r1, r1
   111d6:	90 93 24 0e 	sts	0x0E24, r25	; 0x800e24 <my_lcd+0x3>
   111da:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <my_lcd+0x2>
   111de:	32 cf       	rjmp	.-412    	; 0x11044 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   111e0:	eb 81       	ldd	r30, Y+3	; 0x03
   111e2:	fc 81       	ldd	r31, Y+4	; 0x04
   111e4:	2e 16       	cp	r2, r30
   111e6:	3f 06       	cpc	r3, r31
   111e8:	79 f2       	breq	.-98     	; 0x11188 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   111ea:	ff 81       	ldd	r31, Y+7	; 0x07
   111ec:	f1 11       	cpse	r31, r1
   111ee:	cc cf       	rjmp	.-104    	; 0x11188 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   111f0:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   111f2:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   111f4:	21 30       	cpi	r18, 0x01	; 1
   111f6:	11 f4       	brne	.+4      	; 0x111fc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   111f8:	91 01       	movw	r18, r2
   111fa:	be cf       	rjmp	.-132    	; 0x11178 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   111fc:	86 01       	movw	r16, r12
   111fe:	96 01       	movw	r18, r12
   11200:	a2 01       	movw	r20, r4
   11202:	6c 85       	ldd	r22, Y+12	; 0x0c
   11204:	7d 85       	ldd	r23, Y+13	; 0x0d
   11206:	81 e2       	ldi	r24, 0x21	; 33
   11208:	9e e0       	ldi	r25, 0x0E	; 14
   1120a:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1120e:	bc cf       	rjmp	.-136    	; 0x11188 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   11210:	2d 96       	adiw	r28, 0x0d	; 13
   11212:	0f b6       	in	r0, 0x3f	; 63
   11214:	f8 94       	cli
   11216:	de bf       	out	0x3e, r29	; 62
   11218:	0f be       	out	0x3f, r0	; 63
   1121a:	cd bf       	out	0x3d, r28	; 61
   1121c:	df 91       	pop	r29
   1121e:	cf 91       	pop	r28
   11220:	1f 91       	pop	r17
   11222:	0f 91       	pop	r16
   11224:	ff 90       	pop	r15
   11226:	ef 90       	pop	r14
   11228:	df 90       	pop	r13
   1122a:	cf 90       	pop	r12
   1122c:	bf 90       	pop	r11
   1122e:	af 90       	pop	r10
   11230:	9f 90       	pop	r9
   11232:	8f 90       	pop	r8
   11234:	7f 90       	pop	r7
   11236:	6f 90       	pop	r6
   11238:	5f 90       	pop	r5
   1123a:	4f 90       	pop	r4
   1123c:	3f 90       	pop	r3
   1123e:	2f 90       	pop	r2
   11240:	08 95       	ret

00011242 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   11242:	8f 92       	push	r8
   11244:	9f 92       	push	r9
   11246:	af 92       	push	r10
   11248:	bf 92       	push	r11
   1124a:	ef 92       	push	r14
   1124c:	ff 92       	push	r15
   1124e:	0f 93       	push	r16
   11250:	1f 93       	push	r17
   11252:	cf 93       	push	r28
   11254:	df 93       	push	r29
   11256:	cd b7       	in	r28, 0x3d	; 61
   11258:	de b7       	in	r29, 0x3e	; 62
   1125a:	a1 97       	sbiw	r28, 0x21	; 33
   1125c:	0f b6       	in	r0, 0x3f	; 63
   1125e:	f8 94       	cli
   11260:	de bf       	out	0x3e, r29	; 62
   11262:	0f be       	out	0x3f, r0	; 63
   11264:	cd bf       	out	0x3d, r28	; 61
   11266:	7c 01       	movw	r14, r24
   11268:	fa 01       	movw	r30, r20
   1126a:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   1126c:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   1126e:	22 30       	cpi	r18, 0x02	; 2
   11270:	08 f4       	brcc	.+2      	; 0x11274 <Print::printNumber(unsigned long, unsigned char)+0x32>
   11272:	2a e0       	ldi	r18, 0x0A	; 10
   11274:	8e 01       	movw	r16, r28
   11276:	0f 5d       	subi	r16, 0xDF	; 223
   11278:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   1127a:	82 2e       	mov	r8, r18
   1127c:	91 2c       	mov	r9, r1
   1127e:	b1 2c       	mov	r11, r1
   11280:	a1 2c       	mov	r10, r1
   11282:	bf 01       	movw	r22, r30
   11284:	a5 01       	movw	r20, r10
   11286:	94 01       	movw	r18, r8
   11288:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   1128c:	f9 01       	movw	r30, r18
   1128e:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   11290:	6a 30       	cpi	r22, 0x0A	; 10
   11292:	74 f5       	brge	.+92     	; 0x112f0 <Print::printNumber(unsigned long, unsigned char)+0xae>
   11294:	60 5d       	subi	r22, 0xD0	; 208
   11296:	d8 01       	movw	r26, r16
   11298:	6e 93       	st	-X, r22
   1129a:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   1129c:	23 2b       	or	r18, r19
   1129e:	24 2b       	or	r18, r20
   112a0:	25 2b       	or	r18, r21
   112a2:	79 f7       	brne	.-34     	; 0x11282 <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   112a4:	90 e0       	ldi	r25, 0x00	; 0
   112a6:	80 e0       	ldi	r24, 0x00	; 0
write():
   112a8:	10 97       	sbiw	r26, 0x00	; 0
   112aa:	89 f0       	breq	.+34     	; 0x112ce <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   112ac:	fd 01       	movw	r30, r26
   112ae:	01 90       	ld	r0, Z+
   112b0:	00 20       	and	r0, r0
   112b2:	e9 f7       	brne	.-6      	; 0x112ae <Print::printNumber(unsigned long, unsigned char)+0x6c>
   112b4:	31 97       	sbiw	r30, 0x01	; 1
   112b6:	af 01       	movw	r20, r30
   112b8:	4a 1b       	sub	r20, r26
   112ba:	5b 0b       	sbc	r21, r27
   112bc:	d7 01       	movw	r26, r14
   112be:	ed 91       	ld	r30, X+
   112c0:	fc 91       	ld	r31, X
   112c2:	02 80       	ldd	r0, Z+2	; 0x02
   112c4:	f3 81       	ldd	r31, Z+3	; 0x03
   112c6:	e0 2d       	mov	r30, r0
   112c8:	b8 01       	movw	r22, r16
   112ca:	c7 01       	movw	r24, r14
   112cc:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   112ce:	a1 96       	adiw	r28, 0x21	; 33
   112d0:	0f b6       	in	r0, 0x3f	; 63
   112d2:	f8 94       	cli
   112d4:	de bf       	out	0x3e, r29	; 62
   112d6:	0f be       	out	0x3f, r0	; 63
   112d8:	cd bf       	out	0x3d, r28	; 61
   112da:	df 91       	pop	r29
   112dc:	cf 91       	pop	r28
   112de:	1f 91       	pop	r17
   112e0:	0f 91       	pop	r16
   112e2:	ff 90       	pop	r15
   112e4:	ef 90       	pop	r14
   112e6:	bf 90       	pop	r11
   112e8:	af 90       	pop	r10
   112ea:	9f 90       	pop	r9
   112ec:	8f 90       	pop	r8
   112ee:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   112f0:	69 5c       	subi	r22, 0xC9	; 201
   112f2:	d1 cf       	rjmp	.-94     	; 0x11296 <Print::printNumber(unsigned long, unsigned char)+0x54>

000112f4 <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   112f4:	68 2f       	mov	r22, r24
   112f6:	88 e6       	ldi	r24, 0x68	; 104
   112f8:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   112fc:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   11300:	80 93 4a 11 	sts	0x114A, r24	; 0x80114a <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   11304:	08 95       	ret

00011306 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   11306:	8f 92       	push	r8
   11308:	9f 92       	push	r9
   1130a:	af 92       	push	r10
   1130c:	bf 92       	push	r11
   1130e:	cf 92       	push	r12
   11310:	df 92       	push	r13
   11312:	ef 92       	push	r14
   11314:	ff 92       	push	r15
   11316:	0f 93       	push	r16
   11318:	1f 93       	push	r17
   1131a:	cf 93       	push	r28
   1131c:	df 93       	push	r29
   1131e:	7c 01       	movw	r14, r24
   11320:	eb 01       	movw	r28, r22
   11322:	6c 01       	movw	r12, r24
   11324:	82 e0       	ldi	r24, 0x02	; 2
   11326:	c8 0e       	add	r12, r24
   11328:	d1 1c       	adc	r13, r1
   1132a:	47 01       	movw	r8, r14
   1132c:	e5 e0       	ldi	r30, 0x05	; 5
   1132e:	8e 0e       	add	r8, r30
   11330:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   11332:	10 e0       	ldi	r17, 0x00	; 0
   11334:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   11336:	f6 01       	movw	r30, r12
   11338:	41 91       	ld	r20, Z+
   1133a:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   1133c:	50 e0       	ldi	r21, 0x00	; 0
   1133e:	70 e0       	ldi	r23, 0x00	; 0
   11340:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   11342:	2a e0       	ldi	r18, 0x0A	; 10
   11344:	ce 01       	movw	r24, r28
   11346:	0e 94 21 89 	call	0x11242	; 0x11242 <Print::printNumber(unsigned long, unsigned char)>
   1134a:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   1134c:	e8 81       	ld	r30, Y
   1134e:	f9 81       	ldd	r31, Y+1	; 0x01
   11350:	01 90       	ld	r0, Z+
   11352:	f0 81       	ld	r31, Z
   11354:	e0 2d       	mov	r30, r0
   11356:	6e e2       	ldi	r22, 0x2E	; 46
   11358:	ce 01       	movw	r24, r28
   1135a:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   1135c:	8a 0d       	add	r24, r10
   1135e:	9b 1d       	adc	r25, r11
   11360:	08 0f       	add	r16, r24
   11362:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   11364:	c8 14       	cp	r12, r8
   11366:	d9 04       	cpc	r13, r9
   11368:	31 f7       	brne	.-52     	; 0x11336 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   1136a:	f7 01       	movw	r30, r14
   1136c:	45 81       	ldd	r20, Z+5	; 0x05
   1136e:	50 e0       	ldi	r21, 0x00	; 0
   11370:	70 e0       	ldi	r23, 0x00	; 0
   11372:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   11374:	2a e0       	ldi	r18, 0x0A	; 10
   11376:	ce 01       	movw	r24, r28
   11378:	0e 94 21 89 	call	0x11242	; 0x11242 <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   1137c:	80 0f       	add	r24, r16
   1137e:	91 1f       	adc	r25, r17
   11380:	df 91       	pop	r29
   11382:	cf 91       	pop	r28
   11384:	1f 91       	pop	r17
   11386:	0f 91       	pop	r16
   11388:	ff 90       	pop	r15
   1138a:	ef 90       	pop	r14
   1138c:	df 90       	pop	r13
   1138e:	cf 90       	pop	r12
   11390:	bf 90       	pop	r11
   11392:	af 90       	pop	r10
   11394:	9f 90       	pop	r9
   11396:	8f 90       	pop	r8
   11398:	08 95       	ret

0001139a <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   1139a:	1f 93       	push	r17
   1139c:	cf 93       	push	r28
   1139e:	df 93       	push	r29
   113a0:	18 2f       	mov	r17, r24
   113a2:	66 e2       	ldi	r22, 0x26	; 38
   113a4:	70 e0       	ldi	r23, 0x00	; 0
   113a6:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   113aa:	c8 2f       	mov	r28, r24
   113ac:	d0 e0       	ldi	r29, 0x00	; 0
   113ae:	dc 2f       	mov	r29, r28
   113b0:	cc 27       	eor	r28, r28
   113b2:	67 e2       	ldi	r22, 0x27	; 39
   113b4:	70 e0       	ldi	r23, 0x00	; 0
   113b6:	81 2f       	mov	r24, r17
   113b8:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   113bc:	8c 0f       	add	r24, r28
   113be:	9d 2f       	mov	r25, r29
   113c0:	91 1d       	adc	r25, r1
   113c2:	df 91       	pop	r29
   113c4:	cf 91       	pop	r28
   113c6:	1f 91       	pop	r17
   113c8:	08 95       	ret

000113ca <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   113ca:	1f 93       	push	r17
   113cc:	cf 93       	push	r28
   113ce:	df 93       	push	r29
   113d0:	18 2f       	mov	r17, r24
   113d2:	60 e2       	ldi	r22, 0x20	; 32
   113d4:	70 e0       	ldi	r23, 0x00	; 0
   113d6:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   113da:	c8 2f       	mov	r28, r24
   113dc:	d0 e0       	ldi	r29, 0x00	; 0
   113de:	dc 2f       	mov	r29, r28
   113e0:	cc 27       	eor	r28, r28
   113e2:	61 e2       	ldi	r22, 0x21	; 33
   113e4:	70 e0       	ldi	r23, 0x00	; 0
   113e6:	81 2f       	mov	r24, r17
   113e8:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   113ec:	8c 0f       	add	r24, r28
   113ee:	9d 2f       	mov	r25, r29
   113f0:	91 1d       	adc	r25, r1
   113f2:	df 91       	pop	r29
   113f4:	cf 91       	pop	r28
   113f6:	1f 91       	pop	r17
   113f8:	08 95       	ret

000113fa <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   113fa:	0e 94 9e bd 	call	0x17b3c	; 0x17b3c <abort>

000113fe <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   113fe:	cf 92       	push	r12
   11400:	df 92       	push	r13
   11402:	ef 92       	push	r14
   11404:	ff 92       	push	r15
   11406:	0f 93       	push	r16
   11408:	1f 93       	push	r17
   1140a:	cf 93       	push	r28
   1140c:	df 93       	push	r29
   1140e:	cd b7       	in	r28, 0x3d	; 61
   11410:	de b7       	in	r29, 0x3e	; 62
   11412:	af 97       	sbiw	r28, 0x2f	; 47
   11414:	0f b6       	in	r0, 0x3f	; 63
   11416:	f8 94       	cli
   11418:	de bf       	out	0x3e, r29	; 62
   1141a:	0f be       	out	0x3f, r0	; 63
   1141c:	cd bf       	out	0x3d, r28	; 61
   1141e:	7c 01       	movw	r14, r24
   11420:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11422:	02 ee       	ldi	r16, 0xE2	; 226
   11424:	12 e0       	ldi	r17, 0x02	; 2
   11426:	1a 83       	std	Y+2, r17	; 0x02
   11428:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1142a:	1c 86       	std	Y+12, r1	; 0x0c
   1142c:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
   1142e:	88 ee       	ldi	r24, 0xE8	; 232
   11430:	93 e0       	ldi	r25, 0x03	; 3
   11432:	a0 e0       	ldi	r26, 0x00	; 0
   11434:	b0 e0       	ldi	r27, 0x00	; 0
   11436:	8d 87       	std	Y+13, r24	; 0x0d
   11438:	9e 87       	std	Y+14, r25	; 0x0e
   1143a:	af 87       	std	Y+15, r26	; 0x0f
   1143c:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   1143e:	88 e9       	ldi	r24, 0x98	; 152
   11440:	92 e0       	ldi	r25, 0x02	; 2
   11442:	9a 87       	std	Y+10, r25	; 0x0a
   11444:	89 87       	std	Y+9, r24	; 0x09
   11446:	88 e0       	ldi	r24, 0x08	; 8
   11448:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
   1144a:	19 8f       	std	Y+25, r17	; 0x19
   1144c:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   1144e:	1a 8e       	std	Y+26, r1	; 0x1a
   11450:	1b 8e       	std	Y+27, r1	; 0x1b
   11452:	1c 8e       	std	Y+28, r1	; 0x1c
   11454:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11456:	1b a7       	std	Y+43, r17	; 0x2b
   11458:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   1145a:	1c a6       	std	Y+44, r1	; 0x2c
   1145c:	1d a6       	std	Y+45, r1	; 0x2d
   1145e:	1e a6       	std	Y+46, r1	; 0x2e
   11460:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   11462:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <Ethernet+0x2>
   11466:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <Ethernet+0x3>
   1146a:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <Ethernet+0x4>
   1146e:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <Ethernet+0x5>
   11472:	8e a3       	std	Y+38, r24	; 0x26
   11474:	9f a3       	std	Y+39, r25	; 0x27
   11476:	a8 a7       	std	Y+40, r26	; 0x28
   11478:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   1147a:	8b 83       	std	Y+3, r24	; 0x03
   1147c:	9c 83       	std	Y+4, r25	; 0x04
   1147e:	ad 83       	std	Y+5, r26	; 0x05
   11480:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   11482:	18 86       	std	Y+8, r1	; 0x08
   11484:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   11486:	ae 01       	movw	r20, r28
   11488:	46 5d       	subi	r20, 0xD6	; 214
   1148a:	5f 4f       	sbci	r21, 0xFF	; 255
   1148c:	ce 01       	movw	r24, r28
   1148e:	01 96       	adiw	r24, 0x01	; 1
   11490:	0e 94 93 38 	call	0x7126	; 0x7126 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   11494:	81 30       	cpi	r24, 0x01	; 1
   11496:	91 05       	cpc	r25, r1
   11498:	b1 f4       	brne	.+44     	; 0x114c6 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   1149a:	d7 01       	movw	r26, r14
   1149c:	ed 91       	ld	r30, X+
   1149e:	fc 91       	ld	r31, X
   114a0:	04 88       	ldd	r0, Z+20	; 0x14
   114a2:	f5 89       	ldd	r31, Z+21	; 0x15
   114a4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   114a6:	1d a3       	std	Y+37, r17	; 0x25
   114a8:	0c a3       	std	Y+36, r16	; 0x24
   114aa:	8c a5       	ldd	r24, Y+44	; 0x2c
   114ac:	9d a5       	ldd	r25, Y+45	; 0x2d
   114ae:	ae a5       	ldd	r26, Y+46	; 0x2e
   114b0:	bf a5       	ldd	r27, Y+47	; 0x2f
   114b2:	8e a3       	std	Y+38, r24	; 0x26
   114b4:	9f a3       	std	Y+39, r25	; 0x27
   114b6:	a8 a7       	std	Y+40, r26	; 0x28
   114b8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   114ba:	a6 01       	movw	r20, r12
   114bc:	be 01       	movw	r22, r28
   114be:	6c 5d       	subi	r22, 0xDC	; 220
   114c0:	7f 4f       	sbci	r23, 0xFF	; 255
   114c2:	c7 01       	movw	r24, r14
   114c4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   114c6:	af 96       	adiw	r28, 0x2f	; 47
   114c8:	0f b6       	in	r0, 0x3f	; 63
   114ca:	f8 94       	cli
   114cc:	de bf       	out	0x3e, r29	; 62
   114ce:	0f be       	out	0x3f, r0	; 63
   114d0:	cd bf       	out	0x3d, r28	; 61
   114d2:	df 91       	pop	r29
   114d4:	cf 91       	pop	r28
   114d6:	1f 91       	pop	r17
   114d8:	0f 91       	pop	r16
   114da:	ff 90       	pop	r15
   114dc:	ef 90       	pop	r14
   114de:	df 90       	pop	r13
   114e0:	cf 90       	pop	r12
   114e2:	08 95       	ret

000114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.190():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   114e4:	ef 92       	push	r14
   114e6:	ff 92       	push	r15
   114e8:	0f 93       	push	r16
   114ea:	1f 93       	push	r17
   114ec:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   114ee:	e0 90 2b 0e 	lds	r14, 0x0E2B	; 0x800e2b <my_lcd+0xa>
   114f2:	f0 90 2c 0e 	lds	r15, 0x0E2C	; 0x800e2c <my_lcd+0xb>
   114f6:	01 e0       	ldi	r16, 0x01	; 1
   114f8:	10 e0       	ldi	r17, 0x00	; 0
   114fa:	ab 01       	movw	r20, r22
   114fc:	bc 01       	movw	r22, r24
   114fe:	81 e2       	ldi	r24, 0x21	; 33
   11500:	9e e0       	ldi	r25, 0x0E	; 14
   11502:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   11506:	1f 91       	pop	r17
   11508:	0f 91       	pop	r16
   1150a:	ff 90       	pop	r15
   1150c:	ef 90       	pop	r14
   1150e:	08 95       	ret

00011510 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   11510:	8f 92       	push	r8
   11512:	9f 92       	push	r9
   11514:	af 92       	push	r10
   11516:	bf 92       	push	r11
   11518:	cf 92       	push	r12
   1151a:	df 92       	push	r13
   1151c:	ef 92       	push	r14
   1151e:	ff 92       	push	r15
   11520:	0f 93       	push	r16
   11522:	1f 93       	push	r17
   11524:	cf 93       	push	r28
   11526:	df 93       	push	r29
   11528:	6c 01       	movw	r12, r24
   1152a:	eb 01       	movw	r28, r22
   1152c:	4a 01       	movw	r8, r20
   1152e:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   11530:	9a 01       	movw	r18, r20
   11532:	28 1b       	sub	r18, r24
   11534:	39 0b       	sbc	r19, r25
   11536:	89 01       	movw	r16, r18
   11538:	0f 5f       	subi	r16, 0xFF	; 255
   1153a:	1f 4f       	sbci	r17, 0xFF	; 255
   1153c:	c7 01       	movw	r24, r14
   1153e:	86 1b       	sub	r24, r22
   11540:	97 0b       	sbc	r25, r23
   11542:	5c 01       	movw	r10, r24
   11544:	4f ef       	ldi	r20, 0xFF	; 255
   11546:	a4 1a       	sub	r10, r20
   11548:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   1154a:	17 ff       	sbrs	r17, 7
   1154c:	04 c0       	rjmp	.+8      	; 0x11556 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   1154e:	89 01       	movw	r16, r18
   11550:	00 95       	com	r16
   11552:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   11554:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   11556:	b7 fe       	sbrs	r11, 7
   11558:	04 c0       	rjmp	.+8      	; 0x11562 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   1155a:	5c 01       	movw	r10, r24
   1155c:	a0 94       	com	r10
   1155e:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   11560:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   11562:	a8 01       	movw	r20, r16
   11564:	be 01       	movw	r22, r28
   11566:	c6 01       	movw	r24, r12
   11568:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   1156c:	a8 01       	movw	r20, r16
   1156e:	b7 01       	movw	r22, r14
   11570:	c6 01       	movw	r24, r12
   11572:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   11576:	e0 90 2b 0e 	lds	r14, 0x0E2B	; 0x800e2b <my_lcd+0xa>
   1157a:	f0 90 2c 0e 	lds	r15, 0x0E2C	; 0x800e2c <my_lcd+0xb>
   1157e:	85 01       	movw	r16, r10
   11580:	21 e0       	ldi	r18, 0x01	; 1
   11582:	30 e0       	ldi	r19, 0x00	; 0
   11584:	ae 01       	movw	r20, r28
   11586:	b6 01       	movw	r22, r12
   11588:	81 e2       	ldi	r24, 0x21	; 33
   1158a:	9e e0       	ldi	r25, 0x0E	; 14
   1158c:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   11590:	e0 90 2b 0e 	lds	r14, 0x0E2B	; 0x800e2b <my_lcd+0xa>
   11594:	f0 90 2c 0e 	lds	r15, 0x0E2C	; 0x800e2c <my_lcd+0xb>
   11598:	21 e0       	ldi	r18, 0x01	; 1
   1159a:	30 e0       	ldi	r19, 0x00	; 0
   1159c:	ae 01       	movw	r20, r28
   1159e:	b4 01       	movw	r22, r8
   115a0:	81 e2       	ldi	r24, 0x21	; 33
   115a2:	9e e0       	ldi	r25, 0x0E	; 14
   115a4:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   115a8:	df 91       	pop	r29
   115aa:	cf 91       	pop	r28
   115ac:	1f 91       	pop	r17
   115ae:	0f 91       	pop	r16
   115b0:	ff 90       	pop	r15
   115b2:	ef 90       	pop	r14
   115b4:	df 90       	pop	r13
   115b6:	cf 90       	pop	r12
   115b8:	bf 90       	pop	r11
   115ba:	af 90       	pop	r10
   115bc:	9f 90       	pop	r9
   115be:	8f 90       	pop	r8
   115c0:	08 95       	ret

000115c2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   115c2:	ef 92       	push	r14
   115c4:	ff 92       	push	r15
   115c6:	0f 93       	push	r16
   115c8:	1f 93       	push	r17
   115ca:	cf 93       	push	r28
   115cc:	df 93       	push	r29
   115ce:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   115d0:	ea 01       	movw	r28, r20
   115d2:	c8 1b       	sub	r28, r24
   115d4:	d9 0b       	sbc	r29, r25
   115d6:	9e 01       	movw	r18, r28
   115d8:	2f 5f       	subi	r18, 0xFF	; 255
   115da:	3f 4f       	sbci	r19, 0xFF	; 255
   115dc:	df 01       	movw	r26, r30
   115de:	a6 1b       	sub	r26, r22
   115e0:	b7 0b       	sbc	r27, r23
   115e2:	8d 01       	movw	r16, r26
   115e4:	0f 5f       	subi	r16, 0xFF	; 255
   115e6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   115e8:	37 ff       	sbrs	r19, 7
   115ea:	04 c0       	rjmp	.+8      	; 0x115f4 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   115ec:	9e 01       	movw	r18, r28
   115ee:	20 95       	com	r18
   115f0:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   115f2:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   115f4:	17 ff       	sbrs	r17, 7
   115f6:	04 c0       	rjmp	.+8      	; 0x11600 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   115f8:	8d 01       	movw	r16, r26
   115fa:	00 95       	com	r16
   115fc:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   115fe:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   11600:	e0 90 2b 0e 	lds	r14, 0x0E2B	; 0x800e2b <my_lcd+0xa>
   11604:	f0 90 2c 0e 	lds	r15, 0x0E2C	; 0x800e2c <my_lcd+0xb>
   11608:	ab 01       	movw	r20, r22
   1160a:	bc 01       	movw	r22, r24
   1160c:	81 e2       	ldi	r24, 0x21	; 33
   1160e:	9e e0       	ldi	r25, 0x0E	; 14
   11610:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   11614:	df 91       	pop	r29
   11616:	cf 91       	pop	r28
   11618:	1f 91       	pop	r17
   1161a:	0f 91       	pop	r16
   1161c:	ff 90       	pop	r15
   1161e:	ef 90       	pop	r14
   11620:	08 95       	ret

00011622 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   11622:	cf 92       	push	r12
   11624:	df 92       	push	r13
   11626:	ef 92       	push	r14
   11628:	ff 92       	push	r15
   1162a:	6b 01       	movw	r12, r22
   1162c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   1162e:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <SRAM+0x4>
   11632:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <SRAM+0x5>
   11636:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <SRAM+0x6>
   1163a:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <SRAM+0x7>
   1163e:	01 97       	sbiw	r24, 0x01	; 1
   11640:	a1 40       	sbci	r26, 0x01	; 1
   11642:	b1 05       	cpc	r27, r1
   11644:	48 f0       	brcs	.+18     	; 0x11658 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   11646:	b7 01       	movw	r22, r14
   11648:	88 27       	eor	r24, r24
   1164a:	99 27       	eor	r25, r25
   1164c:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   11650:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   11654:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   11658:	99 27       	eor	r25, r25
   1165a:	8f 2d       	mov	r24, r15
   1165c:	7e 2d       	mov	r23, r14
   1165e:	6d 2d       	mov	r22, r13
   11660:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   11664:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   11668:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   1166c:	6c 2d       	mov	r22, r12
   1166e:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   11672:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   11676:	ff 90       	pop	r15
   11678:	ef 90       	pop	r14
   1167a:	df 90       	pop	r13
   1167c:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   1167e:	0c 94 c5 3b 	jmp	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>

00011682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>:
_ZN7TwoWire17beginTransmissionEh.constprop.167():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   11682:	91 e0       	ldi	r25, 0x01	; 1
   11684:	90 93 4f 11 	sts	0x114F, r25	; 0x80114f <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   11688:	80 93 4e 11 	sts	0x114E, r24	; 0x80114e <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   1168c:	10 92 4d 11 	sts	0x114D, r1	; 0x80114d <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   11690:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
   11694:	08 95       	ret

00011696 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   11696:	ef 92       	push	r14
   11698:	ff 92       	push	r15
   1169a:	0f 93       	push	r16
   1169c:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1169e:	e1 e2       	ldi	r30, 0x21	; 33
   116a0:	fe e0       	ldi	r31, 0x0E	; 14
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   116a2:	04 89       	ldd	r16, Z+20	; 0x14
   116a4:	15 89       	ldd	r17, Z+21	; 0x15
   116a6:	22 89       	ldd	r18, Z+18	; 0x12
   116a8:	33 89       	ldd	r19, Z+19	; 0x13
   116aa:	7c 01       	movw	r14, r24
   116ac:	50 e0       	ldi	r21, 0x00	; 0
   116ae:	40 e0       	ldi	r20, 0x00	; 0
   116b0:	70 e0       	ldi	r23, 0x00	; 0
   116b2:	60 e0       	ldi	r22, 0x00	; 0
   116b4:	cf 01       	movw	r24, r30
   116b6:	0e 94 65 22 	call	0x44ca	; 0x44ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   116ba:	1f 91       	pop	r17
   116bc:	0f 91       	pop	r16
   116be:	ff 90       	pop	r15
   116c0:	ef 90       	pop	r14
   116c2:	08 95       	ret

000116c4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>:
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   116c4:	8f 92       	push	r8
   116c6:	9f 92       	push	r9
   116c8:	af 92       	push	r10
   116ca:	bf 92       	push	r11
   116cc:	cf 92       	push	r12
   116ce:	df 92       	push	r13
   116d0:	ef 92       	push	r14
   116d2:	ff 92       	push	r15
   116d4:	0f 93       	push	r16
   116d6:	1f 93       	push	r17
   116d8:	cf 93       	push	r28
   116da:	df 93       	push	r29
   116dc:	00 d0       	rcall	.+0      	; 0x116de <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1a>
   116de:	00 d0       	rcall	.+0      	; 0x116e0 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1c>
   116e0:	cd b7       	in	r28, 0x3d	; 61
   116e2:	de b7       	in	r29, 0x3e	; 62
   116e4:	6c 01       	movw	r12, r24
   116e6:	5b 01       	movw	r10, r22
   116e8:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   116ea:	10 92 2e 0e 	sts	0x0E2E, r1	; 0x800e2e <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   116ee:	20 93 2d 0e 	sts	0x0E2D, r18	; 0x800e2d <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   116f2:	10 93 28 0e 	sts	0x0E28, r17	; 0x800e28 <my_lcd+0x7>
   116f6:	00 93 27 0e 	sts	0x0E27, r16	; 0x800e27 <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   116fa:	f0 92 2a 0e 	sts	0x0E2A, r15	; 0x800e2a <my_lcd+0x9>
   116fe:	e0 92 29 0e 	sts	0x0E29, r14	; 0x800e29 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   11702:	1a 82       	std	Y+2, r1	; 0x02
   11704:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   11706:	1c 82       	std	Y+4, r1	; 0x04
   11708:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1170a:	1e 82       	std	Y+6, r1	; 0x06
   1170c:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1170e:	fc 01       	movw	r30, r24
   11710:	01 90       	ld	r0, Z+
   11712:	00 20       	and	r0, r0
   11714:	e9 f7       	brne	.-6      	; 0x11710 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x4c>
   11716:	31 97       	sbiw	r30, 0x01	; 1
   11718:	8f 01       	movw	r16, r30
   1171a:	08 1b       	sub	r16, r24
   1171c:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1171e:	b8 01       	movw	r22, r16
   11720:	6f 5f       	subi	r22, 0xFF	; 255
   11722:	7f 4f       	sbci	r23, 0xFF	; 255
   11724:	90 e0       	ldi	r25, 0x00	; 0
   11726:	80 e0       	ldi	r24, 0x00	; 0
   11728:	0e 94 bd bc 	call	0x1797a	; 0x1797a <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1172c:	00 97       	sbiw	r24, 0x00	; 0
   1172e:	81 f0       	breq	.+32     	; 0x11750 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   11730:	9a 83       	std	Y+2, r25	; 0x02
   11732:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   11734:	1c 83       	std	Y+4, r17	; 0x04
   11736:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   11738:	2d 81       	ldd	r18, Y+5	; 0x05
   1173a:	3e 81       	ldd	r19, Y+6	; 0x06
   1173c:	23 2b       	or	r18, r19
   1173e:	11 f4       	brne	.+4      	; 0x11744 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x80>
   11740:	fc 01       	movw	r30, r24
   11742:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   11744:	1e 83       	std	Y+6, r17	; 0x06
   11746:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   11748:	b6 01       	movw	r22, r12
   1174a:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
   1174e:	0c c0       	rjmp	.+24     	; 0x11768 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   11750:	89 81       	ldd	r24, Y+1	; 0x01
   11752:	9a 81       	ldd	r25, Y+2	; 0x02
   11754:	00 97       	sbiw	r24, 0x00	; 0
   11756:	11 f0       	breq	.+4      	; 0x1175c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x98>
   11758:	0e 94 2d b6 	call	0x16c5a	; 0x16c5a <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1175c:	1a 82       	std	Y+2, r1	; 0x02
   1175e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   11760:	1e 82       	std	Y+6, r1	; 0x06
   11762:	1d 82       	std	Y+5, r1	; 0x05
   11764:	1c 82       	std	Y+4, r1	; 0x04
   11766:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   11768:	a4 01       	movw	r20, r8
   1176a:	b5 01       	movw	r22, r10
   1176c:	ce 01       	movw	r24, r28
   1176e:	01 96       	adiw	r24, 0x01	; 1
   11770:	0e 94 d2 87 	call	0x10fa4	; 0x10fa4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   11774:	89 81       	ldd	r24, Y+1	; 0x01
   11776:	9a 81       	ldd	r25, Y+2	; 0x02
   11778:	0e 94 2d b6 	call	0x16c5a	; 0x16c5a <free>
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3027
}
   1177c:	26 96       	adiw	r28, 0x06	; 6
   1177e:	0f b6       	in	r0, 0x3f	; 63
   11780:	f8 94       	cli
   11782:	de bf       	out	0x3e, r29	; 62
   11784:	0f be       	out	0x3f, r0	; 63
   11786:	cd bf       	out	0x3d, r28	; 61
   11788:	df 91       	pop	r29
   1178a:	cf 91       	pop	r28
   1178c:	1f 91       	pop	r17
   1178e:	0f 91       	pop	r16
   11790:	ff 90       	pop	r15
   11792:	ef 90       	pop	r14
   11794:	df 90       	pop	r13
   11796:	cf 90       	pop	r12
   11798:	bf 90       	pop	r11
   1179a:	af 90       	pop	r10
   1179c:	9f 90       	pop	r9
   1179e:	8f 90       	pop	r8
   117a0:	08 95       	ret

000117a2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   117a2:	cf 93       	push	r28
   117a4:	df 93       	push	r29
   117a6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   117a8:	fa 01       	movw	r30, r20
   117aa:	32 96       	adiw	r30, 0x02	; 2
   117ac:	e6 0f       	add	r30, r22
   117ae:	f7 1f       	adc	r31, r23
   117b0:	dc 01       	movw	r26, r24
   117b2:	9d 01       	movw	r18, r26
   117b4:	2c 1b       	sub	r18, r28
   117b6:	3d 0b       	sbc	r19, r29
   117b8:	cf 01       	movw	r24, r30
   117ba:	86 1b       	sub	r24, r22
   117bc:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   117be:	4d 91       	ld	r20, X+
   117c0:	44 23       	and	r20, r20
   117c2:	11 f0       	breq	.+4      	; 0x117c8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   117c4:	41 93       	st	Z+, r20
   117c6:	f5 cf       	rjmp	.-22     	; 0x117b2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   117c8:	ac 01       	movw	r20, r24
   117ca:	42 1b       	sub	r20, r18
   117cc:	53 0b       	sbc	r21, r19
   117ce:	64 0f       	add	r22, r20
   117d0:	75 1f       	adc	r23, r21
   117d2:	fb 01       	movw	r30, r22
   117d4:	32 97       	sbiw	r30, 0x02	; 2
   117d6:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   117d8:	61 50       	subi	r22, 0x01	; 1
   117da:	71 09       	sbc	r23, r1
   117dc:	fb 01       	movw	r30, r22
   117de:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   117e0:	df 91       	pop	r29
   117e2:	cf 91       	pop	r28
   117e4:	08 95       	ret

000117e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   117e6:	ef 92       	push	r14
   117e8:	ff 92       	push	r15
   117ea:	0f 93       	push	r16
   117ec:	1f 93       	push	r17
   117ee:	cf 93       	push	r28
   117f0:	df 93       	push	r29
   117f2:	00 d0       	rcall	.+0      	; 0x117f4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0xe>
   117f4:	00 d0       	rcall	.+0      	; 0x117f6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x10>
   117f6:	00 d0       	rcall	.+0      	; 0x117f8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x12>
   117f8:	1f 92       	push	r1
   117fa:	cd b7       	in	r28, 0x3d	; 61
   117fc:	de b7       	in	r29, 0x3e	; 62
   117fe:	fe 01       	movw	r30, r28
   11800:	31 96       	adiw	r30, 0x01	; 1
   11802:	ae 01       	movw	r20, r28
   11804:	45 5f       	subi	r20, 0xF5	; 245
   11806:	5f 4f       	sbci	r21, 0xFF	; 255
   11808:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   1180a:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_touch+0xf>
   1180e:	30 91 13 0e 	lds	r19, 0x0E13	; 0x800e13 <my_touch+0x10>
   11812:	d9 01       	movw	r26, r18
   11814:	6c 91       	ld	r22, X
   11816:	90 91 1c 0e 	lds	r25, 0x0E1C	; 0x800e1c <my_touch+0x19>
   1181a:	90 95       	com	r25
   1181c:	96 23       	and	r25, r22
   1181e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   11820:	20 91 14 0e 	lds	r18, 0x0E14	; 0x800e14 <my_touch+0x11>
   11824:	30 91 15 0e 	lds	r19, 0x0E15	; 0x800e15 <my_touch+0x12>
   11828:	d9 01       	movw	r26, r18
   1182a:	6c 91       	ld	r22, X
   1182c:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   11830:	90 95       	com	r25
   11832:	96 23       	and	r25, r22
   11834:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   11836:	20 91 18 0e 	lds	r18, 0x0E18	; 0x800e18 <my_touch+0x15>
   1183a:	30 91 19 0e 	lds	r19, 0x0E19	; 0x800e19 <my_touch+0x16>
   1183e:	d9 01       	movw	r26, r18
   11840:	6c 91       	ld	r22, X
   11842:	90 91 1f 0e 	lds	r25, 0x0E1F	; 0x800e1f <my_touch+0x1c>
   11846:	90 95       	com	r25
   11848:	96 23       	and	r25, r22
   1184a:	9c 93       	st	X, r25
   1184c:	28 e0       	ldi	r18, 0x08	; 8
   1184e:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   11850:	10 e8       	ldi	r17, 0x80	; 128
   11852:	60 91 18 0e 	lds	r22, 0x0E18	; 0x800e18 <my_touch+0x15>
   11856:	70 91 19 0e 	lds	r23, 0x0E19	; 0x800e19 <my_touch+0x16>
   1185a:	90 91 1f 0e 	lds	r25, 0x0E1F	; 0x800e1f <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   1185e:	08 2f       	mov	r16, r24
   11860:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   11862:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   11864:	09 f4       	brne	.+2      	; 0x11868 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x82>
   11866:	b1 c0       	rjmp	.+354    	; 0x119ca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   11868:	0c 91       	ld	r16, X
   1186a:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   1186c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   1186e:	60 91 14 0e 	lds	r22, 0x0E14	; 0x800e14 <my_touch+0x11>
   11872:	70 91 15 0e 	lds	r23, 0x0E15	; 0x800e15 <my_touch+0x12>
   11876:	db 01       	movw	r26, r22
   11878:	0c 91       	ld	r16, X
   1187a:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   1187e:	90 95       	com	r25
   11880:	90 23       	and	r25, r16
   11882:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   11884:	60 91 14 0e 	lds	r22, 0x0E14	; 0x800e14 <my_touch+0x11>
   11888:	70 91 15 0e 	lds	r23, 0x0E15	; 0x800e15 <my_touch+0x12>
   1188c:	db 01       	movw	r26, r22
   1188e:	9c 91       	ld	r25, X
   11890:	00 91 1d 0e 	lds	r16, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   11894:	90 2b       	or	r25, r16
   11896:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   11898:	16 95       	lsr	r17
   1189a:	21 50       	subi	r18, 0x01	; 1
   1189c:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   1189e:	c9 f6       	brne	.-78     	; 0x11852 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   118a0:	20 91 14 0e 	lds	r18, 0x0E14	; 0x800e14 <my_touch+0x11>
   118a4:	30 91 15 0e 	lds	r19, 0x0E15	; 0x800e15 <my_touch+0x12>
   118a8:	d9 01       	movw	r26, r18
   118aa:	6c 91       	ld	r22, X
   118ac:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   118b0:	90 95       	com	r25
   118b2:	96 23       	and	r25, r22
   118b4:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   118b6:	20 91 14 0e 	lds	r18, 0x0E14	; 0x800e14 <my_touch+0x11>
   118ba:	30 91 15 0e 	lds	r19, 0x0E15	; 0x800e15 <my_touch+0x12>
   118be:	d9 01       	movw	r26, r18
   118c0:	9c 91       	ld	r25, X
   118c2:	60 91 1d 0e 	lds	r22, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   118c6:	96 2b       	or	r25, r22
   118c8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   118ca:	20 91 14 0e 	lds	r18, 0x0E14	; 0x800e14 <my_touch+0x11>
   118ce:	30 91 15 0e 	lds	r19, 0x0E15	; 0x800e15 <my_touch+0x12>
   118d2:	d9 01       	movw	r26, r18
   118d4:	6c 91       	ld	r22, X
   118d6:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   118da:	90 95       	com	r25
   118dc:	96 23       	and	r25, r22
   118de:	9c 93       	st	X, r25
   118e0:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   118e2:	30 e0       	ldi	r19, 0x00	; 0
   118e4:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   118e6:	22 0f       	add	r18, r18
   118e8:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   118ea:	00 91 14 0e 	lds	r16, 0x0E14	; 0x800e14 <my_touch+0x11>
   118ee:	10 91 15 0e 	lds	r17, 0x0E15	; 0x800e15 <my_touch+0x12>
   118f2:	d8 01       	movw	r26, r16
   118f4:	7c 91       	ld	r23, X
   118f6:	90 91 1d 0e 	lds	r25, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   118fa:	90 95       	com	r25
   118fc:	97 23       	and	r25, r23
   118fe:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   11900:	00 91 14 0e 	lds	r16, 0x0E14	; 0x800e14 <my_touch+0x11>
   11904:	10 91 15 0e 	lds	r17, 0x0E15	; 0x800e15 <my_touch+0x12>
   11908:	d8 01       	movw	r26, r16
   1190a:	9c 91       	ld	r25, X
   1190c:	70 91 1d 0e 	lds	r23, 0x0E1D	; 0x800e1d <my_touch+0x1a>
   11910:	97 2b       	or	r25, r23
   11912:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   11914:	00 91 16 0e 	lds	r16, 0x0E16	; 0x800e16 <my_touch+0x13>
   11918:	10 91 17 0e 	lds	r17, 0x0E17	; 0x800e17 <my_touch+0x14>
   1191c:	d8 01       	movw	r26, r16
   1191e:	9c 91       	ld	r25, X
   11920:	70 91 1e 0e 	lds	r23, 0x0E1E	; 0x800e1e <my_touch+0x1b>
   11924:	97 23       	and	r25, r23
   11926:	11 f0       	breq	.+4      	; 0x1192c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   11928:	2f 5f       	subi	r18, 0xFF	; 255
   1192a:	3f 4f       	sbci	r19, 0xFF	; 255
   1192c:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   1192e:	d9 f6       	brne	.-74     	; 0x118e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   11930:	60 91 12 0e 	lds	r22, 0x0E12	; 0x800e12 <my_touch+0xf>
   11934:	70 91 13 0e 	lds	r23, 0x0E13	; 0x800e13 <my_touch+0x10>
   11938:	db 01       	movw	r26, r22
   1193a:	9c 91       	ld	r25, X
   1193c:	10 91 1c 0e 	lds	r17, 0x0E1C	; 0x800e1c <my_touch+0x19>
   11940:	91 2b       	or	r25, r17
   11942:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   11944:	94 e0       	ldi	r25, 0x04	; 4
   11946:	36 95       	lsr	r19
   11948:	27 95       	ror	r18
   1194a:	9a 95       	dec	r25
   1194c:	e1 f7       	brne	.-8      	; 0x11946 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   1194e:	d7 01       	movw	r26, r14
   11950:	2d 93       	st	X+, r18
   11952:	3d 93       	st	X+, r19
   11954:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   11956:	a4 17       	cp	r26, r20
   11958:	b5 07       	cpc	r27, r21
   1195a:	09 f0       	breq	.+2      	; 0x1195e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x178>
   1195c:	56 cf       	rjmp	.-340    	; 0x1180a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x24>
   1195e:	cf 01       	movw	r24, r30
   11960:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   11962:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   11964:	20 81       	ld	r18, Z
   11966:	31 81       	ldd	r19, Z+1	; 0x01
   11968:	12 96       	adiw	r26, 0x02	; 2
   1196a:	4d 91       	ld	r20, X+
   1196c:	5c 91       	ld	r21, X
   1196e:	13 97       	sbiw	r26, 0x03	; 3
   11970:	42 17       	cp	r20, r18
   11972:	53 07       	cpc	r21, r19
   11974:	30 f4       	brcc	.+12     	; 0x11982 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   11976:	51 83       	std	Z+1, r21	; 0x01
   11978:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   1197a:	13 96       	adiw	r26, 0x03	; 3
   1197c:	3c 93       	st	X, r19
   1197e:	2e 93       	st	-X, r18
   11980:	12 97       	sbiw	r26, 0x02	; 2
   11982:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   11984:	8a 17       	cp	r24, r26
   11986:	9b 07       	cpc	r25, r27
   11988:	69 f7       	brne	.-38     	; 0x11964 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17e>
   1198a:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   1198c:	e8 17       	cp	r30, r24
   1198e:	f9 07       	cpc	r31, r25
   11990:	41 f7       	brne	.-48     	; 0x11962 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   11992:	8b 81       	ldd	r24, Y+3	; 0x03
   11994:	9c 81       	ldd	r25, Y+4	; 0x04
   11996:	2d 81       	ldd	r18, Y+5	; 0x05
   11998:	3e 81       	ldd	r19, Y+6	; 0x06
   1199a:	82 0f       	add	r24, r18
   1199c:	93 1f       	adc	r25, r19
   1199e:	2f 81       	ldd	r18, Y+7	; 0x07
   119a0:	38 85       	ldd	r19, Y+8	; 0x08
   119a2:	82 0f       	add	r24, r18
   119a4:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   119a6:	63 e0       	ldi	r22, 0x03	; 3
   119a8:	70 e0       	ldi	r23, 0x00	; 0
   119aa:	0e 94 0c bb 	call	0x17618	; 0x17618 <__udivmodhi4>
   119ae:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   119b0:	2a 96       	adiw	r28, 0x0a	; 10
   119b2:	0f b6       	in	r0, 0x3f	; 63
   119b4:	f8 94       	cli
   119b6:	de bf       	out	0x3e, r29	; 62
   119b8:	0f be       	out	0x3f, r0	; 63
   119ba:	cd bf       	out	0x3d, r28	; 61
   119bc:	df 91       	pop	r29
   119be:	cf 91       	pop	r28
   119c0:	1f 91       	pop	r17
   119c2:	0f 91       	pop	r16
   119c4:	ff 90       	pop	r15
   119c6:	ef 90       	pop	r14
   119c8:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   119ca:	0c 91       	ld	r16, X
   119cc:	90 95       	com	r25
   119ce:	90 23       	and	r25, r16
   119d0:	4d cf       	rjmp	.-358    	; 0x1186c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x86>

000119d2 <TwoWire::write(int) [clone .constprop.99]>:
_ZN7TwoWire5writeEi.constprop.99():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   119d2:	68 2f       	mov	r22, r24
   119d4:	80 e6       	ldi	r24, 0x60	; 96
   119d6:	9e e0       	ldi	r25, 0x0E	; 14
   119d8:	0c 94 42 87 	jmp	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>

000119dc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   119dc:	0f 93       	push	r16
   119de:	1f 93       	push	r17
   119e0:	cf 93       	push	r28
   119e2:	df 93       	push	r29
   119e4:	00 d0       	rcall	.+0      	; 0x119e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xa>
   119e6:	00 d0       	rcall	.+0      	; 0x119e8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xc>
   119e8:	cd b7       	in	r28, 0x3d	; 61
   119ea:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   119ec:	48 2f       	mov	r20, r24
   119ee:	43 70       	andi	r20, 0x03	; 3
   119f0:	50 e0       	ldi	r21, 0x00	; 0
   119f2:	50 93 38 0e 	sts	0x0E38, r21	; 0x800e38 <my_lcd+0x17>
   119f6:	40 93 37 0e 	sts	0x0E37, r20	; 0x800e37 <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   119fa:	28 2f       	mov	r18, r24
   119fc:	21 70       	andi	r18, 0x01	; 1
   119fe:	80 ff       	sbrs	r24, 0
   11a00:	3d c1       	rjmp	.+634    	; 0x11c7c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2a0>
   11a02:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_lcd+0x10>
   11a06:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <my_lcd+0x11>
   11a0a:	90 93 34 0e 	sts	0x0E34, r25	; 0x800e34 <my_lcd+0x13>
   11a0e:	80 93 33 0e 	sts	0x0E33, r24	; 0x800e33 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   11a12:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <my_lcd+0xe>
   11a16:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <my_lcd+0xf>
   11a1a:	21 11       	cpse	r18, r1
   11a1c:	04 c0       	rjmp	.+8      	; 0x11a26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4a>
   11a1e:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_lcd+0x10>
   11a22:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <my_lcd+0x11>
   11a26:	90 93 36 0e 	sts	0x0E36, r25	; 0x800e36 <my_lcd+0x15>
   11a2a:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   11a2e:	a0 91 4f 0e 	lds	r26, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   11a32:	b0 91 50 0e 	lds	r27, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   11a36:	8c 91       	ld	r24, X
   11a38:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <my_lcd+0x3a>
   11a3c:	89 23       	and	r24, r25
   11a3e:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   11a40:	40 91 39 0e 	lds	r20, 0x0E39	; 0x800e39 <my_lcd+0x18>
   11a44:	50 91 3a 0e 	lds	r21, 0x0E3A	; 0x800e3a <my_lcd+0x19>
   11a48:	80 91 37 0e 	lds	r24, 0x0E37	; 0x800e37 <my_lcd+0x16>
   11a4c:	90 91 38 0e 	lds	r25, 0x0E38	; 0x800e38 <my_lcd+0x17>
   11a50:	a0 91 51 0e 	lds	r26, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11a54:	b0 91 52 0e 	lds	r27, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11a58:	20 91 5c 0e 	lds	r18, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
   11a5c:	41 15       	cp	r20, r1
   11a5e:	51 05       	cpc	r21, r1
   11a60:	09 f0       	breq	.+2      	; 0x11a64 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x88>
   11a62:	13 c1       	rjmp	.+550    	; 0x11c8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2ae>
   11a64:	01 97       	sbiw	r24, 0x01	; 1
   11a66:	83 30       	cpi	r24, 0x03	; 3
   11a68:	91 05       	cpc	r25, r1
   11a6a:	08 f0       	brcs	.+2      	; 0x11a6e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x92>
   11a6c:	0c c1       	rjmp	.+536    	; 0x11c86 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2aa>
   11a6e:	88 0f       	add	r24, r24
   11a70:	99 1f       	adc	r25, r25
   11a72:	fc 01       	movw	r30, r24
   11a74:	e0 5b       	subi	r30, 0xB0	; 176
   11a76:	fd 4f       	sbci	r31, 0xFD	; 253
   11a78:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   11a7a:	30 91 49 0e 	lds	r19, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11a7e:	40 91 4a 0e 	lds	r20, 0x0E4A	; 0x800e4a <my_lcd+0x29>
   11a82:	8c 91       	ld	r24, X
   11a84:	28 23       	and	r18, r24
   11a86:	2c 93       	st	X, r18
   11a88:	42 b9       	out	0x02, r20	; 2
   11a8a:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11a8e:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11a92:	80 81       	ld	r24, Z
   11a94:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11a98:	82 23       	and	r24, r18
   11a9a:	80 83       	st	Z, r24
   11a9c:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11aa0:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11aa4:	80 81       	ld	r24, Z
   11aa6:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11aaa:	82 2b       	or	r24, r18
   11aac:	80 83       	st	Z, r24
   11aae:	32 b9       	out	0x02, r19	; 2
   11ab0:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11ab4:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11ab8:	80 81       	ld	r24, Z
   11aba:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11abe:	82 23       	and	r24, r18
   11ac0:	80 83       	st	Z, r24
   11ac2:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11ac6:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11aca:	80 81       	ld	r24, Z
   11acc:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11ad0:	82 2b       	or	r24, r18
   11ad2:	80 83       	st	Z, r24
   11ad4:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11ad8:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11adc:	80 81       	ld	r24, Z
   11ade:	20 91 58 0e 	lds	r18, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11ae2:	82 2b       	or	r24, r18
   11ae4:	80 83       	st	Z, r24
   11ae6:	80 e1       	ldi	r24, 0x10	; 16
   11ae8:	82 b9       	out	0x02, r24	; 2
   11aea:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11aee:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11af2:	80 81       	ld	r24, Z
   11af4:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11af8:	82 23       	and	r24, r18
   11afa:	80 83       	st	Z, r24
   11afc:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11b00:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11b04:	80 81       	ld	r24, Z
   11b06:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11b0a:	82 2b       	or	r24, r18
   11b0c:	80 83       	st	Z, r24
   11b0e:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11b10:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11b14:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11b18:	80 81       	ld	r24, Z
   11b1a:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11b1e:	89 23       	and	r24, r25
   11b20:	80 83       	st	Z, r24
   11b22:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11b26:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11b2a:	80 81       	ld	r24, Z
   11b2c:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11b30:	89 2b       	or	r24, r25
   11b32:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   11b34:	00 91 35 0e 	lds	r16, 0x0E35	; 0x800e35 <my_lcd+0x14>
   11b38:	10 91 36 0e 	lds	r17, 0x0E36	; 0x800e36 <my_lcd+0x15>
   11b3c:	01 50       	subi	r16, 0x01	; 1
   11b3e:	11 09       	sbc	r17, r1
   11b40:	20 91 33 0e 	lds	r18, 0x0E33	; 0x800e33 <my_lcd+0x12>
   11b44:	30 91 34 0e 	lds	r19, 0x0E34	; 0x800e34 <my_lcd+0x13>
   11b48:	21 50       	subi	r18, 0x01	; 1
   11b4a:	31 09       	sbc	r19, r1
   11b4c:	50 e0       	ldi	r21, 0x00	; 0
   11b4e:	40 e0       	ldi	r20, 0x00	; 0
   11b50:	70 e0       	ldi	r23, 0x00	; 0
   11b52:	60 e0       	ldi	r22, 0x00	; 0
   11b54:	81 e2       	ldi	r24, 0x21	; 33
   11b56:	9e e0       	ldi	r25, 0x0E	; 14
   11b58:	0e 94 0b 3d 	call	0x7a16	; 0x7a16 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   11b5c:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <my_lcd+0x18>
   11b60:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <my_lcd+0x19>
   11b64:	89 2b       	or	r24, r25
   11b66:	09 f0       	breq	.+2      	; 0x11b6a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x18e>
   11b68:	9e c1       	rjmp	.+828    	; 0x11ea6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   11b6a:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11b6e:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11b72:	80 81       	ld	r24, Z
   11b74:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
   11b78:	89 23       	and	r24, r25
   11b7a:	80 83       	st	Z, r24
   11b7c:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <my_lcd+0x24>
   11b80:	82 b9       	out	0x02, r24	; 2
   11b82:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11b86:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11b8a:	80 81       	ld	r24, Z
   11b8c:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11b90:	89 23       	and	r24, r25
   11b92:	80 83       	st	Z, r24
   11b94:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11b98:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11b9c:	80 81       	ld	r24, Z
   11b9e:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11ba2:	89 2b       	or	r24, r25
   11ba4:	80 83       	st	Z, r24
   11ba6:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11baa:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11bae:	80 81       	ld	r24, Z
   11bb0:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11bb4:	89 2b       	or	r24, r25
   11bb6:	80 83       	st	Z, r24
   11bb8:	83 e0       	ldi	r24, 0x03	; 3
   11bba:	82 b9       	out	0x02, r24	; 2
   11bbc:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11bc0:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11bc4:	80 81       	ld	r24, Z
   11bc6:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11bca:	89 23       	and	r24, r25
   11bcc:	80 83       	st	Z, r24
   11bce:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11bd2:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11bd6:	80 81       	ld	r24, Z
   11bd8:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11bdc:	89 2b       	or	r24, r25
   11bde:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   11be0:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11be4:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11be8:	80 81       	ld	r24, Z
   11bea:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
   11bee:	89 23       	and	r24, r25
   11bf0:	80 83       	st	Z, r24
   11bf2:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <my_lcd+0x26>
   11bf6:	82 b9       	out	0x02, r24	; 2
   11bf8:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11bfc:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11c00:	80 81       	ld	r24, Z
   11c02:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11c06:	89 23       	and	r24, r25
   11c08:	80 83       	st	Z, r24
   11c0a:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11c0e:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11c12:	80 81       	ld	r24, Z
   11c14:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11c18:	89 2b       	or	r24, r25
   11c1a:	80 83       	st	Z, r24
   11c1c:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11c20:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11c24:	80 81       	ld	r24, Z
   11c26:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11c2a:	89 2b       	or	r24, r25
   11c2c:	80 83       	st	Z, r24
   11c2e:	12 b8       	out	0x02, r1	; 2
   11c30:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11c34:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11c38:	80 81       	ld	r24, Z
   11c3a:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11c3e:	89 23       	and	r24, r25
   11c40:	80 83       	st	Z, r24
   11c42:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11c46:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11c4a:	80 81       	ld	r24, Z
   11c4c:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11c50:	89 2b       	or	r24, r25
   11c52:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   11c54:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   11c58:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   11c5c:	80 81       	ld	r24, Z
   11c5e:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <my_lcd+0x36>
   11c62:	89 2b       	or	r24, r25
   11c64:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   11c66:	26 96       	adiw	r28, 0x06	; 6
   11c68:	0f b6       	in	r0, 0x3f	; 63
   11c6a:	f8 94       	cli
   11c6c:	de bf       	out	0x3e, r29	; 62
   11c6e:	0f be       	out	0x3f, r0	; 63
   11c70:	cd bf       	out	0x3d, r28	; 61
   11c72:	df 91       	pop	r29
   11c74:	cf 91       	pop	r28
   11c76:	1f 91       	pop	r17
   11c78:	0f 91       	pop	r16
   11c7a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   11c7c:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <my_lcd+0xe>
   11c80:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <my_lcd+0xf>
   11c84:	c2 ce       	rjmp	.-636    	; 0x11a0a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   11c86:	90 e3       	ldi	r25, 0x30	; 48
   11c88:	f8 ce       	rjmp	.-528    	; 0x11a7a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   11c8a:	46 30       	cpi	r20, 0x06	; 6
   11c8c:	51 05       	cpc	r21, r1
   11c8e:	99 f5       	brne	.+102    	; 0x11cf6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   11c90:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11c92:	81 30       	cpi	r24, 0x01	; 1
   11c94:	91 05       	cpc	r25, r1
   11c96:	51 f0       	breq	.+20     	; 0x11cac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   11c98:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11c9a:	81 30       	cpi	r24, 0x01	; 1
   11c9c:	91 05       	cpc	r25, r1
   11c9e:	30 f0       	brcs	.+12     	; 0x11cac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   11ca0:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11ca2:	82 30       	cpi	r24, 0x02	; 2
   11ca4:	91 05       	cpc	r25, r1
   11ca6:	11 f0       	breq	.+4      	; 0x11cac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
   11ca8:	03 97       	sbiw	r24, 0x03	; 3
   11caa:	19 f1       	breq	.+70     	; 0x11cf2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   11cac:	8c 91       	ld	r24, X
   11cae:	28 23       	and	r18, r24
   11cb0:	2c 93       	st	X, r18
   11cb2:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11cb6:	82 b9       	out	0x02, r24	; 2
   11cb8:	a0 91 53 0e 	lds	r26, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11cbc:	b0 91 54 0e 	lds	r27, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11cc0:	8c 91       	ld	r24, X
   11cc2:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11cc6:	89 23       	and	r24, r25
   11cc8:	8c 93       	st	X, r24
   11cca:	a0 91 53 0e 	lds	r26, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11cce:	b0 91 54 0e 	lds	r27, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11cd2:	8c 91       	ld	r24, X
   11cd4:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11cd8:	89 2b       	or	r24, r25
   11cda:	8c 93       	st	X, r24
   11cdc:	a0 91 51 0e 	lds	r26, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11ce0:	b0 91 52 0e 	lds	r27, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11ce4:	8c 91       	ld	r24, X
   11ce6:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11cea:	89 2b       	or	r24, r25
   11cec:	8c 93       	st	X, r24
   11cee:	f2 b9       	out	0x02, r31	; 2
   11cf0:	0f cf       	rjmp	.-482    	; 0x11b10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   11cf2:	f0 e6       	ldi	r31, 0x60	; 96
   11cf4:	db cf       	rjmp	.-74     	; 0x11cac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   11cf6:	48 30       	cpi	r20, 0x08	; 8
   11cf8:	51 05       	cpc	r21, r1
   11cfa:	99 f5       	brne	.+102    	; 0x11d62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   11cfc:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11cfe:	81 30       	cpi	r24, 0x01	; 1
   11d00:	91 05       	cpc	r25, r1
   11d02:	51 f0       	breq	.+20     	; 0x11d18 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   11d04:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11d06:	81 30       	cpi	r24, 0x01	; 1
   11d08:	91 05       	cpc	r25, r1
   11d0a:	30 f0       	brcs	.+12     	; 0x11d18 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   11d0c:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11d0e:	82 30       	cpi	r24, 0x02	; 2
   11d10:	91 05       	cpc	r25, r1
   11d12:	11 f0       	breq	.+4      	; 0x11d18 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
   11d14:	03 97       	sbiw	r24, 0x03	; 3
   11d16:	19 f1       	breq	.+70     	; 0x11d5e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11d18:	8c 91       	ld	r24, X
   11d1a:	28 23       	and	r18, r24
   11d1c:	2c 93       	st	X, r18
   11d1e:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11d22:	82 b9       	out	0x02, r24	; 2
   11d24:	a0 91 53 0e 	lds	r26, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11d28:	b0 91 54 0e 	lds	r27, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11d2c:	8c 91       	ld	r24, X
   11d2e:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11d32:	89 23       	and	r24, r25
   11d34:	8c 93       	st	X, r24
   11d36:	a0 91 53 0e 	lds	r26, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11d3a:	b0 91 54 0e 	lds	r27, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11d3e:	8c 91       	ld	r24, X
   11d40:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11d44:	89 2b       	or	r24, r25
   11d46:	8c 93       	st	X, r24
   11d48:	a0 91 51 0e 	lds	r26, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11d4c:	b0 91 52 0e 	lds	r27, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11d50:	8c 91       	ld	r24, X
   11d52:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11d56:	89 2b       	or	r24, r25
   11d58:	8c 93       	st	X, r24
   11d5a:	e2 b9       	out	0x02, r30	; 2
   11d5c:	d9 ce       	rjmp	.-590    	; 0x11b10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   11d5e:	e8 e2       	ldi	r30, 0x28	; 40
   11d60:	db cf       	rjmp	.-74     	; 0x11d18 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   11d62:	45 30       	cpi	r20, 0x05	; 5
   11d64:	51 05       	cpc	r21, r1
   11d66:	a1 f5       	brne	.+104    	; 0x11dd0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   11d68:	81 30       	cpi	r24, 0x01	; 1
   11d6a:	91 05       	cpc	r25, r1
   11d6c:	49 f1       	breq	.+82     	; 0x11dc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e4>
   11d6e:	70 f1       	brcs	.+92     	; 0x11dcc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f0>
   11d70:	82 30       	cpi	r24, 0x02	; 2
   11d72:	91 05       	cpc	r25, r1
   11d74:	39 f1       	breq	.+78     	; 0x11dc4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e8>
   11d76:	03 97       	sbiw	r24, 0x03	; 3
   11d78:	39 f1       	breq	.+78     	; 0x11dc8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11d7a:	8c 91       	ld	r24, X
   11d7c:	28 23       	and	r18, r24
   11d7e:	2c 93       	st	X, r18
   11d80:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11d84:	82 b9       	out	0x02, r24	; 2
   11d86:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11d8a:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11d8e:	80 81       	ld	r24, Z
   11d90:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11d94:	89 23       	and	r24, r25
   11d96:	80 83       	st	Z, r24
   11d98:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11d9c:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11da0:	80 81       	ld	r24, Z
   11da2:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11da6:	89 2b       	or	r24, r25
   11da8:	80 83       	st	Z, r24
   11daa:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11dae:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11db2:	80 81       	ld	r24, Z
   11db4:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11db8:	89 2b       	or	r24, r25
   11dba:	80 83       	st	Z, r24
   11dbc:	72 b9       	out	0x02, r23	; 2
   11dbe:	a8 ce       	rjmp	.-688    	; 0x11b10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   11dc0:	78 e7       	ldi	r23, 0x78	; 120
   11dc2:	db cf       	rjmp	.-74     	; 0x11d7a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   11dc4:	78 ec       	ldi	r23, 0xC8	; 200
   11dc6:	d9 cf       	rjmp	.-78     	; 0x11d7a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11dc8:	78 ea       	ldi	r23, 0xA8	; 168
   11dca:	d7 cf       	rjmp	.-82     	; 0x11d7a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   11dcc:	78 e0       	ldi	r23, 0x08	; 8
   11dce:	d5 cf       	rjmp	.-86     	; 0x11d7a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   11dd0:	47 30       	cpi	r20, 0x07	; 7
   11dd2:	51 05       	cpc	r21, r1
   11dd4:	a1 f5       	brne	.+104    	; 0x11e3e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   11dd6:	81 30       	cpi	r24, 0x01	; 1
   11dd8:	91 05       	cpc	r25, r1
   11dda:	49 f1       	breq	.+82     	; 0x11e2e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x452>
   11ddc:	70 f1       	brcs	.+92     	; 0x11e3a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45e>
   11dde:	82 30       	cpi	r24, 0x02	; 2
   11de0:	91 05       	cpc	r25, r1
   11de2:	39 f1       	breq	.+78     	; 0x11e32 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x456>
   11de4:	03 97       	sbiw	r24, 0x03	; 3
   11de6:	39 f1       	breq	.+78     	; 0x11e36 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11de8:	8c 91       	ld	r24, X
   11dea:	28 23       	and	r18, r24
   11dec:	2c 93       	st	X, r18
   11dee:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11df2:	82 b9       	out	0x02, r24	; 2
   11df4:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11df8:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11dfc:	80 81       	ld	r24, Z
   11dfe:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11e02:	89 23       	and	r24, r25
   11e04:	80 83       	st	Z, r24
   11e06:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11e0a:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11e0e:	80 81       	ld	r24, Z
   11e10:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11e14:	89 2b       	or	r24, r25
   11e16:	80 83       	st	Z, r24
   11e18:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11e1c:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11e20:	80 81       	ld	r24, Z
   11e22:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11e26:	89 2b       	or	r24, r25
   11e28:	80 83       	st	Z, r24
   11e2a:	62 b9       	out	0x02, r22	; 2
   11e2c:	71 ce       	rjmp	.-798    	; 0x11b10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   11e2e:	68 ea       	ldi	r22, 0xA8	; 168
   11e30:	db cf       	rjmp	.-74     	; 0x11de8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   11e32:	68 e1       	ldi	r22, 0x18	; 24
   11e34:	d9 cf       	rjmp	.-78     	; 0x11de8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11e36:	68 e7       	ldi	r22, 0x78	; 120
   11e38:	d7 cf       	rjmp	.-82     	; 0x11de8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   11e3a:	68 ec       	ldi	r22, 0xC8	; 200
   11e3c:	d5 cf       	rjmp	.-86     	; 0x11de8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   11e3e:	81 30       	cpi	r24, 0x01	; 1
   11e40:	91 05       	cpc	r25, r1
   11e42:	49 f1       	breq	.+82     	; 0x11e96 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ba>
   11e44:	70 f1       	brcs	.+92     	; 0x11ea2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c6>
   11e46:	82 30       	cpi	r24, 0x02	; 2
   11e48:	91 05       	cpc	r25, r1
   11e4a:	39 f1       	breq	.+78     	; 0x11e9a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4be>
   11e4c:	03 97       	sbiw	r24, 0x03	; 3
   11e4e:	39 f1       	breq	.+78     	; 0x11e9e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11e50:	8c 91       	ld	r24, X
   11e52:	28 23       	and	r18, r24
   11e54:	2c 93       	st	X, r18
   11e56:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <my_lcd+0x28>
   11e5a:	82 b9       	out	0x02, r24	; 2
   11e5c:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11e60:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11e64:	80 81       	ld	r24, Z
   11e66:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   11e6a:	89 23       	and	r24, r25
   11e6c:	80 83       	st	Z, r24
   11e6e:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   11e72:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   11e76:	80 81       	ld	r24, Z
   11e78:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   11e7c:	89 2b       	or	r24, r25
   11e7e:	80 83       	st	Z, r24
   11e80:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   11e84:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   11e88:	80 81       	ld	r24, Z
   11e8a:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   11e8e:	89 2b       	or	r24, r25
   11e90:	80 83       	st	Z, r24
   11e92:	32 b9       	out	0x02, r19	; 2
   11e94:	3d ce       	rjmp	.-902    	; 0x11b10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   11e96:	38 e2       	ldi	r19, 0x28	; 40
   11e98:	db cf       	rjmp	.-74     	; 0x11e50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   11e9a:	38 e9       	ldi	r19, 0x98	; 152
   11e9c:	d9 cf       	rjmp	.-78     	; 0x11e50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11e9e:	38 ef       	ldi	r19, 0xF8	; 248
   11ea0:	d7 cf       	rjmp	.-82     	; 0x11e50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   11ea2:	38 e4       	ldi	r19, 0x48	; 72
   11ea4:	d5 cf       	rjmp	.-86     	; 0x11e50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   11ea6:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_lcd+0x10>
   11eaa:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   11eae:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   11eb0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   11eb2:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   11eb4:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   11eb6:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   11eb8:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   11eba:	60 91 45 0e 	lds	r22, 0x0E45	; 0x800e45 <my_lcd+0x24>
   11ebe:	70 91 46 0e 	lds	r23, 0x0E46	; 0x800e46 <my_lcd+0x25>
   11ec2:	26 e0       	ldi	r18, 0x06	; 6
   11ec4:	ae 01       	movw	r20, r28
   11ec6:	4f 5f       	subi	r20, 0xFF	; 255
   11ec8:	5f 4f       	sbci	r21, 0xFF	; 255
   11eca:	81 e2       	ldi	r24, 0x21	; 33
   11ecc:	9e e0       	ldi	r25, 0x0E	; 14
   11ece:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   11ed2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   11ed4:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   11ed6:	60 91 47 0e 	lds	r22, 0x0E47	; 0x800e47 <my_lcd+0x26>
   11eda:	70 91 48 0e 	lds	r23, 0x0E48	; 0x800e48 <my_lcd+0x27>
   11ede:	22 e0       	ldi	r18, 0x02	; 2
   11ee0:	ae 01       	movw	r20, r28
   11ee2:	4f 5f       	subi	r20, 0xFF	; 255
   11ee4:	5f 4f       	sbci	r21, 0xFF	; 255
   11ee6:	81 e2       	ldi	r24, 0x21	; 33
   11ee8:	9e e0       	ldi	r25, 0x0E	; 14
   11eea:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   11eee:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <my_lcd+0x18>
   11ef2:	90 91 3a 0e 	lds	r25, 0x0E3A	; 0x800e3a <my_lcd+0x19>
   11ef6:	01 97       	sbiw	r24, 0x01	; 1
   11ef8:	61 f4       	brne	.+24     	; 0x11f12 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   11efa:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   11efc:	21 e0       	ldi	r18, 0x01	; 1
   11efe:	ae 01       	movw	r20, r28
   11f00:	4f 5f       	subi	r20, 0xFF	; 255
   11f02:	5f 4f       	sbci	r21, 0xFF	; 255
   11f04:	61 e0       	ldi	r22, 0x01	; 1
   11f06:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   11f08:	81 e2       	ldi	r24, 0x21	; 33
   11f0a:	9e e0       	ldi	r25, 0x0E	; 14
   11f0c:	0e 94 8e 3c 	call	0x791c	; 0x791c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   11f10:	a1 ce       	rjmp	.-702    	; 0x11c54 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x278>
   11f12:	20 e0       	ldi	r18, 0x00	; 0
   11f14:	50 e0       	ldi	r21, 0x00	; 0
   11f16:	40 e0       	ldi	r20, 0x00	; 0
   11f18:	63 e1       	ldi	r22, 0x13	; 19
   11f1a:	70 e0       	ldi	r23, 0x00	; 0
   11f1c:	f5 cf       	rjmp	.-22     	; 0x11f08 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x52c>

00011f1e <log_error(PubSubClient*, char*) [clone .constprop.60]>:
_Z9log_errorP12PubSubClientPc.constprop.60():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   11f1e:	0f 93       	push	r16
   11f20:	1f 93       	push	r17
   11f22:	cf 93       	push	r28
   11f24:	df 93       	push	r29
   11f26:	cd b7       	in	r28, 0x3d	; 61
   11f28:	de b7       	in	r29, 0x3e	; 62
   11f2a:	60 97       	sbiw	r28, 0x10	; 16
   11f2c:	0f b6       	in	r0, 0x3f	; 63
   11f2e:	f8 94       	cli
   11f30:	de bf       	out	0x3e, r29	; 62
   11f32:	0f be       	out	0x3f, r0	; 63
   11f34:	cd bf       	out	0x3d, r28	; 61
   11f36:	8c 01       	movw	r16, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   11f38:	6f ef       	ldi	r22, 0xFF	; 255
   11f3a:	76 e0       	ldi	r23, 0x06	; 6
   11f3c:	ce 01       	movw	r24, r28
   11f3e:	01 96       	adiw	r24, 0x01	; 1
   11f40:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   11f44:	a8 01       	movw	r20, r16
   11f46:	be 01       	movw	r22, r28
   11f48:	6f 5f       	subi	r22, 0xFF	; 255
   11f4a:	7f 4f       	sbci	r23, 0xFF	; 255
   11f4c:	89 e7       	ldi	r24, 0x79	; 121
   11f4e:	9e e0       	ldi	r25, 0x0E	; 14
   11f50:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:455
}
   11f54:	60 96       	adiw	r28, 0x10	; 16
   11f56:	0f b6       	in	r0, 0x3f	; 63
   11f58:	f8 94       	cli
   11f5a:	de bf       	out	0x3e, r29	; 62
   11f5c:	0f be       	out	0x3f, r0	; 63
   11f5e:	cd bf       	out	0x3d, r28	; 61
   11f60:	df 91       	pop	r29
   11f62:	cf 91       	pop	r28
   11f64:	1f 91       	pop	r17
   11f66:	0f 91       	pop	r16
   11f68:	08 95       	ret

00011f6a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>:
_Z10parseBytesPKccPhii.constprop.59():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   11f6a:	cf 92       	push	r12
   11f6c:	df 92       	push	r13
   11f6e:	ef 92       	push	r14
   11f70:	ff 92       	push	r15
   11f72:	0f 93       	push	r16
   11f74:	1f 93       	push	r17
   11f76:	cf 93       	push	r28
   11f78:	df 93       	push	r29
   11f7a:	8b 01       	movw	r16, r22
   11f7c:	7b 01       	movw	r14, r22
   11f7e:	e4 0e       	add	r14, r20
   11f80:	f5 1e       	adc	r15, r21
   11f82:	c2 e4       	ldi	r28, 0x42	; 66
   11f84:	db e0       	ldi	r29, 0x0B	; 11
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   11f86:	c8 2e       	mov	r12, r24
   11f88:	88 0f       	add	r24, r24
   11f8a:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   11f8c:	4a e0       	ldi	r20, 0x0A	; 10
   11f8e:	50 e0       	ldi	r21, 0x00	; 0
   11f90:	70 e0       	ldi	r23, 0x00	; 0
   11f92:	60 e0       	ldi	r22, 0x00	; 0
   11f94:	ce 01       	movw	r24, r28
   11f96:	0e 94 0c b0 	call	0x16018	; 0x16018 <strtoul>
   11f9a:	f8 01       	movw	r30, r16
   11f9c:	61 93       	st	Z+, r22
   11f9e:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    str = strchr(str, sep);               // Find next separator
   11fa0:	b6 01       	movw	r22, r12
   11fa2:	ce 01       	movw	r24, r28
   11fa4:	0e 94 b7 bd 	call	0x17b6e	; 0x17b6e <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    if (str == NULL || *str == '\0') {
   11fa8:	00 97       	sbiw	r24, 0x00	; 0
   11faa:	49 f0       	breq	.+18     	; 0x11fbe <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
   11fac:	fc 01       	movw	r30, r24
   11fae:	20 81       	ld	r18, Z
   11fb0:	22 23       	and	r18, r18
   11fb2:	29 f0       	breq	.+10     	; 0x11fbe <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   11fb4:	ec 01       	movw	r28, r24
   11fb6:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   11fb8:	0e 15       	cp	r16, r14
   11fba:	1f 05       	cpc	r17, r15
   11fbc:	39 f7       	brne	.-50     	; 0x11f8c <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:113
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   11fbe:	df 91       	pop	r29
   11fc0:	cf 91       	pop	r28
   11fc2:	1f 91       	pop	r17
   11fc4:	0f 91       	pop	r16
   11fc6:	ff 90       	pop	r15
   11fc8:	ef 90       	pop	r14
   11fca:	df 90       	pop	r13
   11fcc:	cf 90       	pop	r12
   11fce:	08 95       	ret

00011fd0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   11fd0:	ff 92       	push	r15
   11fd2:	0f 93       	push	r16
   11fd4:	1f 93       	push	r17
   11fd6:	cf 93       	push	r28
   11fd8:	df 93       	push	r29
   11fda:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   11fdc:	10 e0       	ldi	r17, 0x00	; 0
   11fde:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   11fe0:	8f 2d       	mov	r24, r15
   11fe2:	0e 94 e5 89 	call	0x113ca	; 0x113ca <W5500Class::readSnTX_FSR(unsigned char)>
   11fe6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   11fe8:	89 2b       	or	r24, r25
   11fea:	21 f0       	breq	.+8      	; 0x11ff4 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   11fec:	8f 2d       	mov	r24, r15
   11fee:	0e 94 e5 89 	call	0x113ca	; 0x113ca <W5500Class::readSnTX_FSR(unsigned char)>
   11ff2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   11ff4:	c0 17       	cp	r28, r16
   11ff6:	d1 07       	cpc	r29, r17
   11ff8:	99 f7       	brne	.-26     	; 0x11fe0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   11ffa:	ce 01       	movw	r24, r28
   11ffc:	df 91       	pop	r29
   11ffe:	cf 91       	pop	r28
   12000:	1f 91       	pop	r17
   12002:	0f 91       	pop	r16
   12004:	ff 90       	pop	r15
   12006:	08 95       	ret

00012008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   12008:	ff 92       	push	r15
   1200a:	0f 93       	push	r16
   1200c:	1f 93       	push	r17
   1200e:	cf 93       	push	r28
   12010:	df 93       	push	r29
   12012:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   12014:	10 e0       	ldi	r17, 0x00	; 0
   12016:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   12018:	8f 2d       	mov	r24, r15
   1201a:	0e 94 cd 89 	call	0x1139a	; 0x1139a <W5500Class::readSnRX_RSR(unsigned char)>
   1201e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   12020:	89 2b       	or	r24, r25
   12022:	21 f0       	breq	.+8      	; 0x1202c <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   12024:	8f 2d       	mov	r24, r15
   12026:	0e 94 cd 89 	call	0x1139a	; 0x1139a <W5500Class::readSnRX_RSR(unsigned char)>
   1202a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   1202c:	c0 17       	cp	r28, r16
   1202e:	d1 07       	cpc	r29, r17
   12030:	99 f7       	brne	.-26     	; 0x12018 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   12032:	ce 01       	movw	r24, r28
   12034:	df 91       	pop	r29
   12036:	cf 91       	pop	r28
   12038:	1f 91       	pop	r17
   1203a:	0f 91       	pop	r16
   1203c:	ff 90       	pop	r15
   1203e:	08 95       	ret

00012040 <turnOffPWM.lto_priv.233>:
turnOffPWM.lto_priv.233():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   12040:	82 50       	subi	r24, 0x02	; 2
   12042:	82 31       	cpi	r24, 0x12	; 18
   12044:	08 f0       	brcs	.+2      	; 0x12048 <turnOffPWM.lto_priv.233+0x8>
   12046:	5f c0       	rjmp	.+190    	; 0x12106 <turnOffPWM.lto_priv.233+0xc6>
   12048:	e8 2f       	mov	r30, r24
   1204a:	f0 e0       	ldi	r31, 0x00	; 0
   1204c:	88 27       	eor	r24, r24
   1204e:	e4 5d       	subi	r30, 0xD4	; 212
   12050:	ff 46       	sbci	r31, 0x6F	; 111
   12052:	8f 4f       	sbci	r24, 0xFF	; 255
   12054:	0c 94 b5 bc 	jmp	0x1796a	; 0x1796a <__tablejump2__>
   12058:	80 90 84 90 	lds	r8, 0x9084	; 0x809084 <__bss_end+0x7cda>
   1205c:	3e 90       	ld	r3, -X
   1205e:	44 90       	lpm	r4, Z
   12060:	48 90       	.word	0x9048	; ????
   12062:	83 90       	.word	0x9083	; ????
   12064:	4c 90       	ld	r4, X
   12066:	52 90       	ld	r5, -Z
   12068:	56 90       	elpm	r5, Z
   1206a:	5c 90       	ld	r5, X
   1206c:	60 90 64 90 	lds	r6, 0x9064	; 0x809064 <__bss_end+0x7cba>
   12070:	6a 90       	ld	r6, -Y
   12072:	6e 90       	ld	r6, -X
   12074:	83 90       	.word	0x9083	; ????
   12076:	72 90       	ld	r7, -Z
   12078:	78 90       	.word	0x9078	; ????
   1207a:	7c 90       	ld	r7, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   1207c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   12080:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   12082:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   12086:	08 95       	ret
   12088:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1208c:	8f 7d       	andi	r24, 0xDF	; 223
   1208e:	f9 cf       	rjmp	.-14     	; 0x12082 <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   12090:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   12094:	87 7f       	andi	r24, 0xF7	; 247
   12096:	f5 cf       	rjmp	.-22     	; 0x12082 <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   12098:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1209c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1209e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   120a2:	08 95       	ret
   120a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   120a8:	8f 7d       	andi	r24, 0xDF	; 223
   120aa:	f9 cf       	rjmp	.-14     	; 0x1209e <turnOffPWM.lto_priv.233+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   120ac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   120b0:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   120b2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   120b6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   120b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   120bc:	8f 7d       	andi	r24, 0xDF	; 223
   120be:	f9 cf       	rjmp	.-14     	; 0x120b2 <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   120c0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   120c4:	87 7f       	andi	r24, 0xF7	; 247
   120c6:	f5 cf       	rjmp	.-22     	; 0x120b2 <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   120c8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   120cc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   120ce:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   120d2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   120d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   120d8:	8f 7d       	andi	r24, 0xDF	; 223
   120da:	f9 cf       	rjmp	.-14     	; 0x120ce <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   120dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   120e0:	87 7f       	andi	r24, 0xF7	; 247
   120e2:	f5 cf       	rjmp	.-22     	; 0x120ce <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   120e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   120e8:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   120ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   120ee:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   120f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   120f4:	8f 7d       	andi	r24, 0xDF	; 223
   120f6:	f9 cf       	rjmp	.-14     	; 0x120ea <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   120f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   120fc:	87 7f       	andi	r24, 0xF7	; 247
   120fe:	f5 cf       	rjmp	.-22     	; 0x120ea <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   12100:	84 b5       	in	r24, 0x24	; 36
   12102:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   12104:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   12106:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   12108:	84 b5       	in	r24, 0x24	; 36
   1210a:	8f 7d       	andi	r24, 0xDF	; 223
   1210c:	fb cf       	rjmp	.-10     	; 0x12104 <turnOffPWM.lto_priv.233+0xc4>

0001210e <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1210e:	1f 93       	push	r17
   12110:	cf 93       	push	r28
   12112:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   12114:	28 2f       	mov	r18, r24
   12116:	30 e0       	ldi	r19, 0x00	; 0
   12118:	f9 01       	movw	r30, r18
   1211a:	eb 5c       	subi	r30, 0xCB	; 203
   1211c:	f1 4c       	sbci	r31, 0xC1	; 193
   1211e:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   12120:	f9 01       	movw	r30, r18
   12122:	ea 58       	subi	r30, 0x8A	; 138
   12124:	fc 4b       	sbci	r31, 0xBC	; 188
   12126:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   12128:	f9 01       	movw	r30, r18
   1212a:	e4 54       	subi	r30, 0x44	; 68
   1212c:	fc 4b       	sbci	r31, 0xBC	; 188
   1212e:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   12130:	cc 23       	and	r28, r28
   12132:	a9 f0       	breq	.+42     	; 0x1215e <digitalWrite+0x50>
   12134:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   12136:	81 11       	cpse	r24, r1
   12138:	0e 94 20 90 	call	0x12040	; 0x12040 <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   1213c:	ec 2f       	mov	r30, r28
   1213e:	f0 e0       	ldi	r31, 0x00	; 0
   12140:	ee 0f       	add	r30, r30
   12142:	ff 1f       	adc	r31, r31
   12144:	e4 55       	subi	r30, 0x54	; 84
   12146:	fc 4b       	sbci	r31, 0xBC	; 188
   12148:	a5 91       	lpm	r26, Z+
   1214a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   1214c:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   1214e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   12150:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   12152:	11 11       	cpse	r17, r1
   12154:	08 c0       	rjmp	.+16     	; 0x12166 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   12156:	d0 95       	com	r29
   12158:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   1215a:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   1215c:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   1215e:	df 91       	pop	r29
   12160:	cf 91       	pop	r28
   12162:	1f 91       	pop	r17
   12164:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   12166:	de 2b       	or	r29, r30
   12168:	f8 cf       	rjmp	.-16     	; 0x1215a <digitalWrite+0x4c>

0001216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   1216a:	cf 92       	push	r12
   1216c:	df 92       	push	r13
   1216e:	ef 92       	push	r14
   12170:	ff 92       	push	r15
   12172:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   12174:	c0 90 eb 0c 	lds	r12, 0x0CEB	; 0x800ceb <SRAM+0x4>
   12178:	d0 90 ec 0c 	lds	r13, 0x0CEC	; 0x800cec <SRAM+0x5>
   1217c:	e0 90 ed 0c 	lds	r14, 0x0CED	; 0x800ced <SRAM+0x6>
   12180:	f0 90 ee 0c 	lds	r15, 0x0CEE	; 0x800cee <SRAM+0x7>
   12184:	6c 15       	cp	r22, r12
   12186:	7d 05       	cpc	r23, r13
   12188:	8e 05       	cpc	r24, r14
   1218a:	9f 05       	cpc	r25, r15
   1218c:	38 f5       	brcc	.+78     	; 0x121dc <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x72>
   1218e:	c4 2f       	mov	r28, r20
   12190:	6b 01       	movw	r12, r22
   12192:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   12194:	60 e0       	ldi	r22, 0x00	; 0
   12196:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
   1219a:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1219e:	62 e0       	ldi	r22, 0x02	; 2
   121a0:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   121a4:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   121a8:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   121ac:	c7 01       	movw	r24, r14
   121ae:	b6 01       	movw	r22, r12
   121b0:	0e 94 11 8b 	call	0x11622	; 0x11622 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   121b4:	6c 2f       	mov	r22, r28
   121b6:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   121ba:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   121be:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   121c2:	61 e0       	ldi	r22, 0x01	; 1
   121c4:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
   121c8:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
   121cc:	81 e0       	ldi	r24, 0x01	; 1
   121ce:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   121d0:	cf 91       	pop	r28
   121d2:	ff 90       	pop	r15
   121d4:	ef 90       	pop	r14
   121d6:	df 90       	pop	r13
   121d8:	cf 90       	pop	r12
   121da:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   121dc:	90 e0       	ldi	r25, 0x00	; 0
   121de:	80 e0       	ldi	r24, 0x00	; 0
   121e0:	f7 cf       	rjmp	.-18     	; 0x121d0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x66>

000121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>:
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   121e2:	cf 92       	push	r12
   121e4:	df 92       	push	r13
   121e6:	ef 92       	push	r14
   121e8:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   121ea:	c0 90 eb 0c 	lds	r12, 0x0CEB	; 0x800ceb <SRAM+0x4>
   121ee:	d0 90 ec 0c 	lds	r13, 0x0CEC	; 0x800cec <SRAM+0x5>
   121f2:	e0 90 ed 0c 	lds	r14, 0x0CED	; 0x800ced <SRAM+0x6>
   121f6:	f0 90 ee 0c 	lds	r15, 0x0CEE	; 0x800cee <SRAM+0x7>
   121fa:	6c 15       	cp	r22, r12
   121fc:	7d 05       	cpc	r23, r13
   121fe:	8e 05       	cpc	r24, r14
   12200:	9f 05       	cpc	r25, r15
   12202:	28 f5       	brcc	.+74     	; 0x1224e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x6c>
   12204:	6b 01       	movw	r12, r22
   12206:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   12208:	60 e0       	ldi	r22, 0x00	; 0
   1220a:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
   1220e:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   12212:	63 e0       	ldi	r22, 0x03	; 3
   12214:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   12218:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   1221c:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   12220:	c7 01       	movw	r24, r14
   12222:	b6 01       	movw	r22, r12
   12224:	0e 94 11 8b 	call	0x11622	; 0x11622 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   12228:	6f ef       	ldi	r22, 0xFF	; 255
   1222a:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <SRAM>
   1222e:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <SRAM+0x1>
   12232:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
   12236:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   12238:	61 e0       	ldi	r22, 0x01	; 1
   1223a:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <SRAM+0x8>
   1223e:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   12242:	8f 2d       	mov	r24, r15
   12244:	ff 90       	pop	r15
   12246:	ef 90       	pop	r14
   12248:	df 90       	pop	r13
   1224a:	cf 90       	pop	r12
   1224c:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   1224e:	f1 2c       	mov	r15, r1
   12250:	f8 cf       	rjmp	.-16     	; 0x12242 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x60>

00012252 <EEPROM_CAT25::endCommand() [clone .constprop.90]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.90():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   12252:	61 e0       	ldi	r22, 0x01	; 1
   12254:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <SROM+0xa>
   12258:	0c 94 87 90 	jmp	0x1210e	; 0x1210e <digitalWrite>

0001225c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   1225c:	cf 93       	push	r28
   1225e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   12260:	60 e0       	ldi	r22, 0x00	; 0
   12262:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <SROM+0xa>
   12266:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   1226a:	6c 2f       	mov	r22, r28
   1226c:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
   12270:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
   12274:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   12278:	c2 50       	subi	r28, 0x02	; 2
   1227a:	c2 30       	cpi	r28, 0x02	; 2
   1227c:	a8 f5       	brcc	.+106    	; 0x122e8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   1227e:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <SROM+0x4>
   12282:	90 91 dd 0c 	lds	r25, 0x0CDD	; 0x800cdd <SROM+0x5>
   12286:	a0 91 de 0c 	lds	r26, 0x0CDE	; 0x800cde <SROM+0x6>
   1228a:	b0 91 df 0c 	lds	r27, 0x0CDF	; 0x800cdf <SROM+0x7>
   1228e:	01 97       	sbiw	r24, 0x01	; 1
   12290:	a1 40       	sbci	r26, 0x01	; 1
   12292:	b1 05       	cpc	r27, r1
   12294:	38 f0       	brcs	.+14     	; 0x122a4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   12296:	60 e0       	ldi	r22, 0x00	; 0
   12298:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
   1229c:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
   122a0:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   122a4:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <SROM+0x4>
   122a8:	90 91 dd 0c 	lds	r25, 0x0CDD	; 0x800cdd <SROM+0x5>
   122ac:	a0 91 de 0c 	lds	r26, 0x0CDE	; 0x800cde <SROM+0x6>
   122b0:	b0 91 df 0c 	lds	r27, 0x0CDF	; 0x800cdf <SROM+0x7>
   122b4:	81 30       	cpi	r24, 0x01	; 1
   122b6:	91 40       	sbci	r25, 0x01	; 1
   122b8:	a1 05       	cpc	r26, r1
   122ba:	b1 05       	cpc	r27, r1
   122bc:	68 f0       	brcs	.+26     	; 0x122d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
   122be:	80 91 da 0c 	lds	r24, 0x0CDA	; 0x800cda <SROM+0x2>
   122c2:	90 91 db 0c 	lds	r25, 0x0CDB	; 0x800cdb <SROM+0x3>
   122c6:	0b 97       	sbiw	r24, 0x0b	; 11
   122c8:	39 f0       	breq	.+14     	; 0x122d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   122ca:	60 e0       	ldi	r22, 0x00	; 0
   122cc:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
   122d0:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
   122d4:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   122d8:	60 e0       	ldi	r22, 0x00	; 0
   122da:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
   122de:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   122e2:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   122e4:	0c 94 c5 3b 	jmp	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   122e8:	cf 91       	pop	r28
   122ea:	08 95       	ret

000122ec <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.87():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   122ec:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   122ee:	85 e0       	ldi	r24, 0x05	; 5
   122f0:	0e 94 2e 91 	call	0x1225c	; 0x1225c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   122f4:	6f ef       	ldi	r22, 0xFF	; 255
   122f6:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <SROM>
   122fa:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <SROM+0x1>
   122fe:	0e 94 c5 3b 	call	0x778a	; 0x778a <SoftSPIB::transfer(unsigned char)>
   12302:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   12304:	0e 94 29 91 	call	0x12252	; 0x12252 <EEPROM_CAT25::endCommand() [clone .constprop.90]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   12308:	8c 2f       	mov	r24, r28
   1230a:	cf 91       	pop	r28
   1230c:	08 95       	ret

0001230e <TwoWire::begin() [clone .constprop.63]>:
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   1230e:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   12312:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   12316:	10 92 4d 11 	sts	0x114D, r1	; 0x80114d <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   1231a:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   1231e:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   12322:	81 e0       	ldi	r24, 0x01	; 1
   12324:	80 93 95 11 	sts	0x1195, r24	; 0x801195 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   12328:	10 92 90 11 	sts	0x1190, r1	; 0x801190 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   1232c:	61 e0       	ldi	r22, 0x01	; 1
   1232e:	83 e1       	ldi	r24, 0x13	; 19
   12330:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   12334:	61 e0       	ldi	r22, 0x01	; 1
   12336:	82 e1       	ldi	r24, 0x12	; 18
   12338:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   1233c:	e9 eb       	ldi	r30, 0xB9	; 185
   1233e:	f0 e0       	ldi	r31, 0x00	; 0
   12340:	80 81       	ld	r24, Z
   12342:	8e 7f       	andi	r24, 0xFE	; 254
   12344:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   12346:	80 81       	ld	r24, Z
   12348:	8d 7f       	andi	r24, 0xFD	; 253
   1234a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   1234c:	88 e4       	ldi	r24, 0x48	; 72
   1234e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   12352:	85 e4       	ldi	r24, 0x45	; 69
   12354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   12358:	8a e9       	ldi	r24, 0x9A	; 154
   1235a:	95 e8       	ldi	r25, 0x85	; 133
   1235c:	90 93 48 11 	sts	0x1148, r25	; 0x801148 <twi_onSlaveTransmit+0x1>
   12360:	80 93 47 11 	sts	0x1147, r24	; 0x801147 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   12364:	8b e9       	ldi	r24, 0x9B	; 155
   12366:	95 e8       	ldi	r25, 0x85	; 133
   12368:	90 93 46 11 	sts	0x1146, r25	; 0x801146 <twi_onSlaveReceive+0x1>
   1236c:	80 93 45 11 	sts	0x1145, r24	; 0x801145 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   12370:	08 95       	ret

00012372 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   12372:	61 e0       	ldi	r22, 0x01	; 1
   12374:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <SPI_CS>
   12378:	0c 94 87 90 	jmp	0x1210e	; 0x1210e <digitalWrite>

0001237c <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   1237c:	60 e0       	ldi	r22, 0x00	; 0
   1237e:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <SPI_CS>
   12382:	0c 94 87 90 	jmp	0x1210e	; 0x1210e <digitalWrite>

00012386 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   12386:	1f 93       	push	r17
   12388:	cf 93       	push	r28
   1238a:	df 93       	push	r29
   1238c:	18 2f       	mov	r17, r24
   1238e:	d6 2f       	mov	r29, r22
   12390:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   12392:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <wiznet_SPI_settings>
   12396:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <wiznet_SPI_settings+0x1>
   1239a:	0e 94 79 87 	call	0x10ef2	; 0x10ef2 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   1239e:	0e 94 be 91 	call	0x1237c	; 0x1237c <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   123a2:	80 e0       	ldi	r24, 0x00	; 0
   123a4:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   123a8:	81 2f       	mov	r24, r17
   123aa:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   123ae:	8d 2f       	mov	r24, r29
   123b0:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   123b4:	8c 2f       	mov	r24, r28
   123b6:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   123ba:	0e 94 b9 91 	call	0x12372	; 0x12372 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   123be:	81 e0       	ldi	r24, 0x01	; 1
   123c0:	df 91       	pop	r29
   123c2:	cf 91       	pop	r28
   123c4:	1f 91       	pop	r17
   123c6:	08 95       	ret

000123c8 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   123c8:	cf 93       	push	r28
   123ca:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   123cc:	90 e0       	ldi	r25, 0x00	; 0
   123ce:	fc 01       	movw	r30, r24
   123d0:	ea 58       	subi	r30, 0x8A	; 138
   123d2:	fc 4b       	sbci	r31, 0xBC	; 188
   123d4:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   123d6:	84 54       	subi	r24, 0x44	; 68
   123d8:	9c 4b       	sbci	r25, 0xBC	; 188
   123da:	fc 01       	movw	r30, r24
   123dc:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   123de:	88 23       	and	r24, r24
   123e0:	c9 f0       	breq	.+50     	; 0x12414 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   123e2:	90 e0       	ldi	r25, 0x00	; 0
   123e4:	88 0f       	add	r24, r24
   123e6:	99 1f       	adc	r25, r25
   123e8:	fc 01       	movw	r30, r24
   123ea:	eb 5d       	subi	r30, 0xDB	; 219
   123ec:	f1 4c       	sbci	r31, 0xC1	; 193
   123ee:	a5 91       	lpm	r26, Z+
   123f0:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   123f2:	fc 01       	movw	r30, r24
   123f4:	e4 55       	subi	r30, 0x54	; 84
   123f6:	fc 4b       	sbci	r31, 0xBC	; 188
   123f8:	c5 91       	lpm	r28, Z+
   123fa:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   123fc:	61 11       	cpse	r22, r1
   123fe:	0d c0       	rjmp	.+26     	; 0x1241a <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   12400:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   12402:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   12404:	8c 91       	ld	r24, X
   12406:	20 95       	com	r18
   12408:	82 23       	and	r24, r18
   1240a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   1240c:	88 81       	ld	r24, Y
   1240e:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   12410:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   12412:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   12414:	df 91       	pop	r29
   12416:	cf 91       	pop	r28
   12418:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   1241a:	62 30       	cpi	r22, 0x02	; 2
   1241c:	51 f4       	brne	.+20     	; 0x12432 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   1241e:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   12420:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   12422:	3c 91       	ld	r19, X
   12424:	82 2f       	mov	r24, r18
   12426:	80 95       	com	r24
   12428:	83 23       	and	r24, r19
   1242a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   1242c:	e8 81       	ld	r30, Y
   1242e:	2e 2b       	or	r18, r30
   12430:	ef cf       	rjmp	.-34     	; 0x12410 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   12432:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   12434:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   12436:	ec 91       	ld	r30, X
   12438:	2e 2b       	or	r18, r30
   1243a:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   1243c:	8f bf       	out	0x3f, r24	; 63
   1243e:	ea cf       	rjmp	.-44     	; 0x12414 <pinMode+0x4c>

00012440 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   12440:	8f 92       	push	r8
   12442:	9f 92       	push	r9
   12444:	af 92       	push	r10
   12446:	bf 92       	push	r11
   12448:	cf 92       	push	r12
   1244a:	df 92       	push	r13
   1244c:	ef 92       	push	r14
   1244e:	ff 92       	push	r15
   12450:	6b 01       	movw	r12, r22
   12452:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   12454:	0e 94 82 86 	call	0x10d04	; 0x10d04 <micros>
   12458:	4b 01       	movw	r8, r22
   1245a:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   1245c:	c1 14       	cp	r12, r1
   1245e:	d1 04       	cpc	r13, r1
   12460:	e1 04       	cpc	r14, r1
   12462:	f1 04       	cpc	r15, r1
   12464:	b9 f0       	breq	.+46     	; 0x12494 <delay+0x54>
   12466:	0e 94 82 86 	call	0x10d04	; 0x10d04 <micros>
   1246a:	68 19       	sub	r22, r8
   1246c:	79 09       	sbc	r23, r9
   1246e:	8a 09       	sbc	r24, r10
   12470:	9b 09       	sbc	r25, r11
   12472:	68 3e       	cpi	r22, 0xE8	; 232
   12474:	73 40       	sbci	r23, 0x03	; 3
   12476:	81 05       	cpc	r24, r1
   12478:	91 05       	cpc	r25, r1
   1247a:	80 f3       	brcs	.-32     	; 0x1245c <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   1247c:	21 e0       	ldi	r18, 0x01	; 1
   1247e:	c2 1a       	sub	r12, r18
   12480:	d1 08       	sbc	r13, r1
   12482:	e1 08       	sbc	r14, r1
   12484:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   12486:	88 ee       	ldi	r24, 0xE8	; 232
   12488:	88 0e       	add	r8, r24
   1248a:	83 e0       	ldi	r24, 0x03	; 3
   1248c:	98 1e       	adc	r9, r24
   1248e:	a1 1c       	adc	r10, r1
   12490:	b1 1c       	adc	r11, r1
   12492:	e4 cf       	rjmp	.-56     	; 0x1245c <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   12494:	ff 90       	pop	r15
   12496:	ef 90       	pop	r14
   12498:	df 90       	pop	r13
   1249a:	cf 90       	pop	r12
   1249c:	bf 90       	pop	r11
   1249e:	af 90       	pop	r10
   124a0:	9f 90       	pop	r9
   124a2:	8f 90       	pop	r8
   124a4:	08 95       	ret

000124a6 <LCDWIKI_KBV::reset() [clone .constprop.71]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.71():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   124a6:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   124aa:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   124ae:	80 81       	ld	r24, Z
   124b0:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <my_lcd+0x36>
   124b4:	89 2b       	or	r24, r25
   124b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   124b8:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   124bc:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   124c0:	80 81       	ld	r24, Z
   124c2:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <my_lcd+0x39>
   124c6:	89 2b       	or	r24, r25
   124c8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   124ca:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   124ce:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   124d2:	80 81       	ld	r24, Z
   124d4:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   124d8:	89 2b       	or	r24, r25
   124da:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   124dc:	80 91 5f 0e 	lds	r24, 0x0E5F	; 0x800e5f <my_lcd+0x3e>
   124e0:	88 23       	and	r24, r24
   124e2:	71 f0       	breq	.+28     	; 0x12500 <LCDWIKI_KBV::reset() [clone .constprop.71]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   124e4:	60 e0       	ldi	r22, 0x00	; 0
   124e6:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   124ea:	62 e0       	ldi	r22, 0x02	; 2
   124ec:	70 e0       	ldi	r23, 0x00	; 0
   124ee:	80 e0       	ldi	r24, 0x00	; 0
   124f0:	90 e0       	ldi	r25, 0x00	; 0
   124f2:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   124f6:	61 e0       	ldi	r22, 0x01	; 1
   124f8:	80 91 5f 0e 	lds	r24, 0x0E5F	; 0x800e5f <my_lcd+0x3e>
   124fc:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   12500:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   12504:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   12508:	80 81       	ld	r24, Z
   1250a:	90 91 5b 0e 	lds	r25, 0x0E5B	; 0x800e5b <my_lcd+0x3a>
   1250e:	89 23       	and	r24, r25
   12510:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   12512:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   12516:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   1251a:	80 81       	ld	r24, Z
   1251c:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
   12520:	89 23       	and	r24, r25
   12522:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   12524:	12 b8       	out	0x02, r1	; 2
   12526:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   1252a:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   1252e:	80 81       	ld	r24, Z
   12530:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   12534:	89 23       	and	r24, r25
   12536:	80 83       	st	Z, r24
   12538:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   1253c:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   12540:	80 81       	ld	r24, Z
   12542:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   12546:	89 2b       	or	r24, r25
   12548:	80 83       	st	Z, r24
   1254a:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   1254c:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   12550:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   12554:	90 81       	ld	r25, Z
   12556:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   1255a:	92 23       	and	r25, r18
   1255c:	90 83       	st	Z, r25
   1255e:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   12562:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   12566:	90 81       	ld	r25, Z
   12568:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
   1256c:	92 2b       	or	r25, r18
   1256e:	90 83       	st	Z, r25
   12570:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   12572:	61 f7       	brne	.-40     	; 0x1254c <LCDWIKI_KBV::reset() [clone .constprop.71]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   12574:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   12578:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   1257c:	80 81       	ld	r24, Z
   1257e:	90 91 57 0e 	lds	r25, 0x0E57	; 0x800e57 <my_lcd+0x36>
   12582:	89 2b       	or	r24, r25
   12584:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   12586:	08 95       	ret

00012588 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   12588:	cf 93       	push	r28
   1258a:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   1258c:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   12590:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   12594:	90 81       	ld	r25, Z
   12596:	20 91 5b 0e 	lds	r18, 0x0E5B	; 0x800e5b <my_lcd+0x3a>
   1259a:	92 23       	and	r25, r18
   1259c:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   1259e:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   125a2:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   125a6:	90 81       	ld	r25, Z
   125a8:	20 91 5c 0e 	lds	r18, 0x0E5C	; 0x800e5c <my_lcd+0x3b>
   125ac:	92 23       	and	r25, r18
   125ae:	90 83       	st	Z, r25
   125b0:	12 b8       	out	0x02, r1	; 2
   125b2:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   125b6:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   125ba:	90 81       	ld	r25, Z
   125bc:	20 91 5d 0e 	lds	r18, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   125c0:	92 23       	and	r25, r18
   125c2:	90 83       	st	Z, r25
   125c4:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   125c8:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   125cc:	90 81       	ld	r25, Z
   125ce:	20 91 59 0e 	lds	r18, 0x0E59	; 0x800e59 <my_lcd+0x38>
   125d2:	92 2b       	or	r25, r18
   125d4:	90 83       	st	Z, r25
   125d6:	82 b9       	out	0x02, r24	; 2
   125d8:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   125dc:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   125e0:	80 81       	ld	r24, Z
   125e2:	90 91 5d 0e 	lds	r25, 0x0E5D	; 0x800e5d <my_lcd+0x3c>
   125e6:	89 23       	and	r24, r25
   125e8:	80 83       	st	Z, r24
   125ea:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   125ee:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   125f2:	80 81       	ld	r24, Z
   125f4:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   125f8:	89 2b       	or	r24, r25
   125fa:	80 83       	st	Z, r24
   125fc:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   12600:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   12604:	80 81       	ld	r24, Z
   12606:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   1260a:	89 2b       	or	r24, r25
   1260c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   1260e:	81 b1       	in	r24, 0x01	; 1
   12610:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   12612:	61 e0       	ldi	r22, 0x01	; 1
   12614:	70 e0       	ldi	r23, 0x00	; 0
   12616:	80 e0       	ldi	r24, 0x00	; 0
   12618:	90 e0       	ldi	r25, 0x00	; 0
   1261a:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   1261e:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   12622:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   12626:	80 81       	ld	r24, Z
   12628:	90 91 5e 0e 	lds	r25, 0x0E5E	; 0x800e5e <my_lcd+0x3d>
   1262c:	89 23       	and	r24, r25
   1262e:	80 83       	st	Z, r24
   12630:	20 b1       	in	r18, 0x00	; 0
   12632:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   12636:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   1263a:	90 81       	ld	r25, Z
   1263c:	80 91 5a 0e 	lds	r24, 0x0E5A	; 0x800e5a <my_lcd+0x39>
   12640:	98 2b       	or	r25, r24
   12642:	90 83       	st	Z, r25
   12644:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   12648:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   1264c:	90 81       	ld	r25, Z
   1264e:	80 91 5e 0e 	lds	r24, 0x0E5E	; 0x800e5e <my_lcd+0x3d>
   12652:	98 23       	and	r25, r24
   12654:	90 83       	st	Z, r25
   12656:	80 b1       	in	r24, 0x00	; 0
   12658:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   1265c:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   12660:	90 81       	ld	r25, Z
   12662:	30 91 5a 0e 	lds	r19, 0x0E5A	; 0x800e5a <my_lcd+0x39>
   12666:	93 2b       	or	r25, r19
   12668:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   1266a:	c1 30       	cpi	r28, 0x01	; 1
   1266c:	79 f0       	breq	.+30     	; 0x1268c <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   1266e:	e0 91 4f 0e 	lds	r30, 0x0E4F	; 0x800e4f <my_lcd+0x2e>
   12672:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0x2f>
   12676:	90 81       	ld	r25, Z
   12678:	30 91 57 0e 	lds	r19, 0x0E57	; 0x800e57 <my_lcd+0x36>
   1267c:	93 2b       	or	r25, r19
   1267e:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   12680:	91 b1       	in	r25, 0x01	; 1
   12682:	9f ef       	ldi	r25, 0xFF	; 255
   12684:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   12686:	92 2f       	mov	r25, r18
   12688:	cf 91       	pop	r28
   1268a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   1268c:	c0 e0       	ldi	r28, 0x00	; 0
   1268e:	c7 cf       	rjmp	.-114    	; 0x1261e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x96>

00012690 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   12690:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   12692:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   12694:	60 91 3b 11 	lds	r22, 0x113B	; 0x80113b <timer0_millis>
   12698:	70 91 3c 11 	lds	r23, 0x113C	; 0x80113c <timer0_millis+0x1>
   1269c:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <timer0_millis+0x2>
   126a0:	90 91 3e 11 	lds	r25, 0x113E	; 0x80113e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   126a4:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   126a6:	08 95       	ret

000126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient8readByteEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   126a8:	cf 92       	push	r12
   126aa:	df 92       	push	r13
   126ac:	ef 92       	push	r14
   126ae:	ff 92       	push	r15
   126b0:	cf 93       	push	r28
   126b2:	df 93       	push	r29
   126b4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   126b6:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   126ba:	6b 01       	movw	r12, r22
   126bc:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   126be:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   126c2:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
   126c6:	dc 01       	movw	r26, r24
   126c8:	ed 91       	ld	r30, X+
   126ca:	fc 91       	ld	r31, X
   126cc:	00 84       	ldd	r0, Z+8	; 0x08
   126ce:	f1 85       	ldd	r31, Z+9	; 0x09
   126d0:	e0 2d       	mov	r30, r0
   126d2:	19 95       	eicall
   126d4:	89 2b       	or	r24, r25
   126d6:	69 f4       	brne	.+26     	; 0x126f2 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   126d8:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   126dc:	6c 19       	sub	r22, r12
   126de:	7d 09       	sbc	r23, r13
   126e0:	8e 09       	sbc	r24, r14
   126e2:	9f 09       	sbc	r25, r15
   126e4:	64 36       	cpi	r22, 0x64	; 100
   126e6:	71 05       	cpc	r23, r1
   126e8:	81 05       	cpc	r24, r1
   126ea:	91 05       	cpc	r25, r1
   126ec:	40 f3       	brcs	.-48     	; 0x126be <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   126ee:	80 e0       	ldi	r24, 0x00	; 0
   126f0:	0d c0       	rjmp	.+26     	; 0x1270c <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   126f2:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   126f6:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
   126fa:	dc 01       	movw	r26, r24
   126fc:	ed 91       	ld	r30, X+
   126fe:	fc 91       	ld	r31, X
   12700:	02 84       	ldd	r0, Z+10	; 0x0a
   12702:	f3 85       	ldd	r31, Z+11	; 0x0b
   12704:	e0 2d       	mov	r30, r0
   12706:	19 95       	eicall
   12708:	88 83       	st	Y, r24
   1270a:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   1270c:	df 91       	pop	r29
   1270e:	cf 91       	pop	r28
   12710:	ff 90       	pop	r15
   12712:	ef 90       	pop	r14
   12714:	df 90       	pop	r13
   12716:	cf 90       	pop	r12
   12718:	08 95       	ret

0001271a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>:
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   1271a:	3f 92       	push	r3
   1271c:	4f 92       	push	r4
   1271e:	5f 92       	push	r5
   12720:	6f 92       	push	r6
   12722:	7f 92       	push	r7
   12724:	8f 92       	push	r8
   12726:	9f 92       	push	r9
   12728:	af 92       	push	r10
   1272a:	bf 92       	push	r11
   1272c:	cf 92       	push	r12
   1272e:	df 92       	push	r13
   12730:	ef 92       	push	r14
   12732:	ff 92       	push	r15
   12734:	0f 93       	push	r16
   12736:	1f 93       	push	r17
   12738:	cf 93       	push	r28
   1273a:	df 93       	push	r29
   1273c:	1f 92       	push	r1
   1273e:	cd b7       	in	r28, 0x3d	; 61
   12740:	de b7       	in	r29, 0x3e	; 62
   12742:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   12744:	8b e7       	ldi	r24, 0x7B	; 123
   12746:	9e e0       	ldi	r25, 0x0E	; 14
   12748:	0e 94 54 93 	call	0x126a8	; 0x126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   1274c:	81 11       	cpse	r24, r1
   1274e:	16 c0       	rjmp	.+44     	; 0x1277c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   12750:	10 e0       	ldi	r17, 0x00	; 0
   12752:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   12754:	c8 01       	movw	r24, r16
   12756:	0f 90       	pop	r0
   12758:	df 91       	pop	r29
   1275a:	cf 91       	pop	r28
   1275c:	1f 91       	pop	r17
   1275e:	0f 91       	pop	r16
   12760:	ff 90       	pop	r15
   12762:	ef 90       	pop	r14
   12764:	df 90       	pop	r13
   12766:	cf 90       	pop	r12
   12768:	bf 90       	pop	r11
   1276a:	af 90       	pop	r10
   1276c:	9f 90       	pop	r9
   1276e:	8f 90       	pop	r8
   12770:	7f 90       	pop	r7
   12772:	6f 90       	pop	r6
   12774:	5f 90       	pop	r5
   12776:	4f 90       	pop	r4
   12778:	3f 90       	pop	r3
   1277a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   1277c:	30 90 7b 0e 	lds	r3, 0x0E7B	; 0x800e7b <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   12780:	19 82       	std	Y+1, r1	; 0x01
   12782:	3c e7       	ldi	r19, 0x7C	; 124
   12784:	83 2e       	mov	r8, r19
   12786:	3e e0       	ldi	r19, 0x0E	; 14
   12788:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   1278a:	ee 24       	eor	r14, r14
   1278c:	e3 94       	inc	r14
   1278e:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   12790:	d1 2c       	mov	r13, r1
   12792:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   12794:	41 2c       	mov	r4, r1
   12796:	51 2c       	mov	r5, r1
   12798:	32 01       	movw	r6, r4
   1279a:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   1279c:	ce 01       	movw	r24, r28
   1279e:	01 96       	adiw	r24, 0x01	; 1
   127a0:	0e 94 54 93 	call	0x126a8	; 0x126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   127a4:	88 23       	and	r24, r24
   127a6:	a1 f2       	breq	.-88     	; 0x12750 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   127a8:	87 01       	movw	r16, r14
   127aa:	0f 5f       	subi	r16, 0xFF	; 255
   127ac:	1f 4f       	sbci	r17, 0xFF	; 255
   127ae:	89 81       	ldd	r24, Y+1	; 0x01
   127b0:	d4 01       	movw	r26, r8
   127b2:	8d 93       	st	X+, r24
   127b4:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   127b6:	28 2f       	mov	r18, r24
   127b8:	2f 77       	andi	r18, 0x7F	; 127
   127ba:	30 e0       	ldi	r19, 0x00	; 0
   127bc:	24 9d       	mul	r18, r4
   127be:	a0 01       	movw	r20, r0
   127c0:	25 9d       	mul	r18, r5
   127c2:	50 0d       	add	r21, r0
   127c4:	34 9d       	mul	r19, r4
   127c6:	50 0d       	add	r21, r0
   127c8:	11 24       	eor	r1, r1
   127ca:	c4 0e       	add	r12, r20
   127cc:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   127ce:	27 e0       	ldi	r18, 0x07	; 7
   127d0:	44 0c       	add	r4, r4
   127d2:	55 1c       	adc	r5, r5
   127d4:	66 1c       	adc	r6, r6
   127d6:	77 1c       	adc	r7, r7
   127d8:	2a 95       	dec	r18
   127da:	d1 f7       	brne	.-12     	; 0x127d0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   127dc:	87 fd       	sbrc	r24, 7
   127de:	31 c0       	rjmp	.+98     	; 0x12842 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x128>
   127e0:	b3 2d       	mov	r27, r3
   127e2:	b0 7f       	andi	r27, 0xF0	; 240
   127e4:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   127e6:	8f ef       	ldi	r24, 0xFF	; 255
   127e8:	80 0f       	add	r24, r16
   127ea:	f5 01       	movw	r30, r10
   127ec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   127ee:	f0 e3       	ldi	r31, 0x30	; 48
   127f0:	bf 13       	cpse	r27, r31
   127f2:	29 c0       	rjmp	.+82     	; 0x12846 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   127f4:	c8 01       	movw	r24, r16
   127f6:	85 58       	subi	r24, 0x85	; 133
   127f8:	91 4f       	sbci	r25, 0xF1	; 241
   127fa:	0e 94 54 93 	call	0x126a8	; 0x126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   127fe:	88 23       	and	r24, r24
   12800:	09 f4       	brne	.+2      	; 0x12804 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xea>
   12802:	a6 cf       	rjmp	.-180    	; 0x12750 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   12804:	c7 01       	movw	r24, r14
   12806:	83 58       	subi	r24, 0x83	; 131
   12808:	91 4f       	sbci	r25, 0xF1	; 241
   1280a:	0e 94 54 93 	call	0x126a8	; 0x126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   1280e:	88 23       	and	r24, r24
   12810:	09 f4       	brne	.+2      	; 0x12814 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xfa>
   12812:	9e cf       	rjmp	.-196    	; 0x12750 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   12814:	0e 5f       	subi	r16, 0xFE	; 254
   12816:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   12818:	d5 01       	movw	r26, r10
   1281a:	ec 91       	ld	r30, X
   1281c:	f0 e0       	ldi	r31, 0x00	; 0
   1281e:	e7 58       	subi	r30, 0x87	; 135
   12820:	f1 4f       	sbci	r31, 0xF1	; 241
   12822:	e3 80       	ldd	r14, Z+3	; 0x03
   12824:	f1 2c       	mov	r15, r1
   12826:	fe 2c       	mov	r15, r14
   12828:	ee 24       	eor	r14, r14
   1282a:	84 81       	ldd	r24, Z+4	; 0x04
   1282c:	e8 0e       	add	r14, r24
   1282e:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   12830:	80 91 7b 0e 	lds	r24, 0x0E7B	; 0x800e7b <mqtt_client+0x2>
   12834:	81 ff       	sbrs	r24, 1
   12836:	03 c0       	rjmp	.+6      	; 0x1283e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   12838:	b2 e0       	ldi	r27, 0x02	; 2
   1283a:	eb 0e       	add	r14, r27
   1283c:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   1283e:	92 e0       	ldi	r25, 0x02	; 2
   12840:	05 c0       	rjmp	.+10     	; 0x1284c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   12842:	78 01       	movw	r14, r16
   12844:	ab cf       	rjmp	.-170    	; 0x1279c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   12846:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   12848:	f1 2c       	mov	r15, r1
   1284a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   1284c:	69 2e       	mov	r6, r25
   1284e:	71 2c       	mov	r7, r1
   12850:	60 1a       	sub	r6, r16
   12852:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   12854:	8e ef       	ldi	r24, 0xFE	; 254
   12856:	88 2e       	mov	r8, r24
   12858:	99 24       	eor	r9, r9
   1285a:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   1285c:	c3 01       	movw	r24, r6
   1285e:	80 0f       	add	r24, r16
   12860:	91 1f       	adc	r25, r17
   12862:	8c 15       	cp	r24, r12
   12864:	9d 05       	cpc	r25, r13
   12866:	78 f5       	brcc	.+94     	; 0x128c6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   12868:	ce 01       	movw	r24, r28
   1286a:	01 96       	adiw	r24, 0x01	; 1
   1286c:	0e 94 54 93 	call	0x126a8	; 0x126a8 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   12870:	88 23       	and	r24, r24
   12872:	09 f4       	brne	.+2      	; 0x12876 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x15c>
   12874:	6d cf       	rjmp	.-294    	; 0x12750 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   12876:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <mqtt_client+0x219>
   1287a:	90 91 93 10 	lds	r25, 0x1093	; 0x801093 <mqtt_client+0x21a>
   1287e:	00 97       	sbiw	r24, 0x00	; 0
   12880:	b1 f0       	breq	.+44     	; 0x128ae <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   12882:	e0 e3       	ldi	r30, 0x30	; 48
   12884:	3e 12       	cpse	r3, r30
   12886:	13 c0       	rjmp	.+38     	; 0x128ae <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
   12888:	d5 01       	movw	r26, r10
   1288a:	2c 91       	ld	r18, X
   1288c:	f4 01       	movw	r30, r8
   1288e:	e2 1b       	sub	r30, r18
   12890:	f1 09       	sbc	r31, r1
   12892:	9f 01       	movw	r18, r30
   12894:	20 0f       	add	r18, r16
   12896:	31 1f       	adc	r19, r17
   12898:	e2 16       	cp	r14, r18
   1289a:	f3 06       	cpc	r15, r19
   1289c:	40 f4       	brcc	.+16     	; 0x128ae <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   1289e:	dc 01       	movw	r26, r24
   128a0:	ed 91       	ld	r30, X+
   128a2:	fc 91       	ld	r31, X
   128a4:	01 90       	ld	r0, Z+
   128a6:	f0 81       	ld	r31, Z
   128a8:	e0 2d       	mov	r30, r0
   128aa:	69 81       	ldd	r22, Y+1	; 0x01
   128ac:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   128ae:	01 15       	cp	r16, r1
   128b0:	b2 e0       	ldi	r27, 0x02	; 2
   128b2:	1b 07       	cpc	r17, r27
   128b4:	28 f4       	brcc	.+10     	; 0x128c0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   128b6:	89 81       	ldd	r24, Y+1	; 0x01
   128b8:	f8 01       	movw	r30, r16
   128ba:	e7 58       	subi	r30, 0x87	; 135
   128bc:	f1 4f       	sbci	r31, 0xF1	; 241
   128be:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   128c0:	0f 5f       	subi	r16, 0xFF	; 255
   128c2:	1f 4f       	sbci	r17, 0xFF	; 255
   128c4:	cb cf       	rjmp	.-106    	; 0x1285c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   128c6:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <mqtt_client+0x219>
   128ca:	90 91 93 10 	lds	r25, 0x1093	; 0x801093 <mqtt_client+0x21a>
   128ce:	89 2b       	or	r24, r25
   128d0:	09 f0       	breq	.+2      	; 0x128d4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ba>
   128d2:	40 cf       	rjmp	.-384    	; 0x12754 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>
   128d4:	01 30       	cpi	r16, 0x01	; 1
   128d6:	e2 e0       	ldi	r30, 0x02	; 2
   128d8:	1e 07       	cpc	r17, r30
   128da:	08 f0       	brcs	.+2      	; 0x128de <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1c4>
   128dc:	39 cf       	rjmp	.-398    	; 0x12750 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   128de:	3a cf       	rjmp	.-396    	; 0x12754 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>

000128e0 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   128e0:	1f 92       	push	r1
   128e2:	0f 92       	push	r0
   128e4:	0f b6       	in	r0, 0x3f	; 63
   128e6:	0f 92       	push	r0
   128e8:	11 24       	eor	r1, r1
   128ea:	2f 93       	push	r18
   128ec:	3f 93       	push	r19
   128ee:	8f 93       	push	r24
   128f0:	9f 93       	push	r25
   128f2:	af 93       	push	r26
   128f4:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   128f6:	80 91 3b 11 	lds	r24, 0x113B	; 0x80113b <timer0_millis>
   128fa:	90 91 3c 11 	lds	r25, 0x113C	; 0x80113c <timer0_millis+0x1>
   128fe:	a0 91 3d 11 	lds	r26, 0x113D	; 0x80113d <timer0_millis+0x2>
   12902:	b0 91 3e 11 	lds	r27, 0x113E	; 0x80113e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   12906:	30 91 3a 11 	lds	r19, 0x113A	; 0x80113a <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   1290a:	23 e0       	ldi	r18, 0x03	; 3
   1290c:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   1290e:	2d 37       	cpi	r18, 0x7D	; 125
   12910:	58 f5       	brcc	.+86     	; 0x12968 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   12912:	01 96       	adiw	r24, 0x01	; 1
   12914:	a1 1d       	adc	r26, r1
   12916:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   12918:	20 93 3a 11 	sts	0x113A, r18	; 0x80113a <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   1291c:	80 93 3b 11 	sts	0x113B, r24	; 0x80113b <timer0_millis>
   12920:	90 93 3c 11 	sts	0x113C, r25	; 0x80113c <timer0_millis+0x1>
   12924:	a0 93 3d 11 	sts	0x113D, r26	; 0x80113d <timer0_millis+0x2>
   12928:	b0 93 3e 11 	sts	0x113E, r27	; 0x80113e <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   1292c:	80 91 3f 11 	lds	r24, 0x113F	; 0x80113f <timer0_overflow_count>
   12930:	90 91 40 11 	lds	r25, 0x1140	; 0x801140 <timer0_overflow_count+0x1>
   12934:	a0 91 41 11 	lds	r26, 0x1141	; 0x801141 <timer0_overflow_count+0x2>
   12938:	b0 91 42 11 	lds	r27, 0x1142	; 0x801142 <timer0_overflow_count+0x3>
   1293c:	01 96       	adiw	r24, 0x01	; 1
   1293e:	a1 1d       	adc	r26, r1
   12940:	b1 1d       	adc	r27, r1
   12942:	80 93 3f 11 	sts	0x113F, r24	; 0x80113f <timer0_overflow_count>
   12946:	90 93 40 11 	sts	0x1140, r25	; 0x801140 <timer0_overflow_count+0x1>
   1294a:	a0 93 41 11 	sts	0x1141, r26	; 0x801141 <timer0_overflow_count+0x2>
   1294e:	b0 93 42 11 	sts	0x1142, r27	; 0x801142 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   12952:	bf 91       	pop	r27
   12954:	af 91       	pop	r26
   12956:	9f 91       	pop	r25
   12958:	8f 91       	pop	r24
   1295a:	3f 91       	pop	r19
   1295c:	2f 91       	pop	r18
   1295e:	0f 90       	pop	r0
   12960:	0f be       	out	0x3f, r0	; 63
   12962:	0f 90       	pop	r0
   12964:	1f 90       	pop	r1
   12966:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   12968:	26 e8       	ldi	r18, 0x86	; 134
   1296a:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   1296c:	02 96       	adiw	r24, 0x02	; 2
   1296e:	a1 1d       	adc	r26, r1
   12970:	b1 1d       	adc	r27, r1
   12972:	d2 cf       	rjmp	.-92     	; 0x12918 <__vector_23+0x38>

00012974 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   12974:	1f 92       	push	r1
   12976:	0f 92       	push	r0
   12978:	0f b6       	in	r0, 0x3f	; 63
   1297a:	0f 92       	push	r0
   1297c:	11 24       	eor	r1, r1
   1297e:	0b b6       	in	r0, 0x3b	; 59
   12980:	0f 92       	push	r0
   12982:	2f 93       	push	r18
   12984:	3f 93       	push	r19
   12986:	4f 93       	push	r20
   12988:	5f 93       	push	r21
   1298a:	6f 93       	push	r22
   1298c:	7f 93       	push	r23
   1298e:	8f 93       	push	r24
   12990:	9f 93       	push	r25
   12992:	af 93       	push	r26
   12994:	bf 93       	push	r27
   12996:	ef 93       	push	r30
   12998:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   1299a:	84 ed       	ldi	r24, 0xD4	; 212
   1299c:	9b e0       	ldi	r25, 0x0B	; 11
   1299e:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   129a2:	ff 91       	pop	r31
   129a4:	ef 91       	pop	r30
   129a6:	bf 91       	pop	r27
   129a8:	af 91       	pop	r26
   129aa:	9f 91       	pop	r25
   129ac:	8f 91       	pop	r24
   129ae:	7f 91       	pop	r23
   129b0:	6f 91       	pop	r22
   129b2:	5f 91       	pop	r21
   129b4:	4f 91       	pop	r20
   129b6:	3f 91       	pop	r19
   129b8:	2f 91       	pop	r18
   129ba:	0f 90       	pop	r0
   129bc:	0b be       	out	0x3b, r0	; 59
   129be:	0f 90       	pop	r0
   129c0:	0f be       	out	0x3f, r0	; 63
   129c2:	0f 90       	pop	r0
   129c4:	1f 90       	pop	r1
   129c6:	18 95       	reti

000129c8 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   129c8:	1f 92       	push	r1
   129ca:	0f 92       	push	r0
   129cc:	0f b6       	in	r0, 0x3f	; 63
   129ce:	0f 92       	push	r0
   129d0:	11 24       	eor	r1, r1
   129d2:	0b b6       	in	r0, 0x3b	; 59
   129d4:	0f 92       	push	r0
   129d6:	2f 93       	push	r18
   129d8:	8f 93       	push	r24
   129da:	9f 93       	push	r25
   129dc:	ef 93       	push	r30
   129de:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   129e0:	e0 91 e4 0b 	lds	r30, 0x0BE4	; 0x800be4 <Serial+0x10>
   129e4:	f0 91 e5 0b 	lds	r31, 0x0BE5	; 0x800be5 <Serial+0x11>
   129e8:	80 81       	ld	r24, Z
   129ea:	e0 91 ea 0b 	lds	r30, 0x0BEA	; 0x800bea <Serial+0x16>
   129ee:	f0 91 eb 0b 	lds	r31, 0x0BEB	; 0x800beb <Serial+0x17>
   129f2:	82 fd       	sbrc	r24, 2
   129f4:	1d c0       	rjmp	.+58     	; 0x12a30 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   129f6:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   129f8:	80 91 ed 0b 	lds	r24, 0x0BED	; 0x800bed <Serial+0x19>
   129fc:	8f 5f       	subi	r24, 0xFF	; 255
   129fe:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   12a00:	20 91 ee 0b 	lds	r18, 0x0BEE	; 0x800bee <Serial+0x1a>
   12a04:	82 17       	cp	r24, r18
   12a06:	41 f0       	breq	.+16     	; 0x12a18 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   12a08:	e0 91 ed 0b 	lds	r30, 0x0BED	; 0x800bed <Serial+0x19>
   12a0c:	f0 e0       	ldi	r31, 0x00	; 0
   12a0e:	ec 52       	subi	r30, 0x2C	; 44
   12a10:	f4 4f       	sbci	r31, 0xF4	; 244
   12a12:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   12a14:	80 93 ed 0b 	sts	0x0BED, r24	; 0x800bed <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   12a18:	ff 91       	pop	r31
   12a1a:	ef 91       	pop	r30
   12a1c:	9f 91       	pop	r25
   12a1e:	8f 91       	pop	r24
   12a20:	2f 91       	pop	r18
   12a22:	0f 90       	pop	r0
   12a24:	0b be       	out	0x3b, r0	; 59
   12a26:	0f 90       	pop	r0
   12a28:	0f be       	out	0x3f, r0	; 63
   12a2a:	0f 90       	pop	r0
   12a2c:	1f 90       	pop	r1
   12a2e:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   12a30:	80 81       	ld	r24, Z
   12a32:	f2 cf       	rjmp	.-28     	; 0x12a18 <__vector_25+0x50>

00012a34 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   12a34:	1f 92       	push	r1
   12a36:	0f 92       	push	r0
   12a38:	0f b6       	in	r0, 0x3f	; 63
   12a3a:	0f 92       	push	r0
   12a3c:	11 24       	eor	r1, r1
   12a3e:	0b b6       	in	r0, 0x3b	; 59
   12a40:	0f 92       	push	r0
   12a42:	2f 93       	push	r18
   12a44:	3f 93       	push	r19
   12a46:	4f 93       	push	r20
   12a48:	5f 93       	push	r21
   12a4a:	6f 93       	push	r22
   12a4c:	7f 93       	push	r23
   12a4e:	8f 93       	push	r24
   12a50:	9f 93       	push	r25
   12a52:	af 93       	push	r26
   12a54:	bf 93       	push	r27
   12a56:	cf 93       	push	r28
   12a58:	ef 93       	push	r30
   12a5a:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   12a5c:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   12a5e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   12a62:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   12a66:	e0 91 22 0a 	lds	r30, 0x0A22	; 0x800a22 <_ZL17a2d_interupt_func.lto_priv.228>
   12a6a:	f0 91 23 0a 	lds	r31, 0x0A23	; 0x800a23 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   12a6e:	68 2f       	mov	r22, r24
   12a70:	70 e0       	ldi	r23, 0x00	; 0
   12a72:	76 2f       	mov	r23, r22
   12a74:	66 27       	eor	r22, r22
   12a76:	69 0f       	add	r22, r25
   12a78:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   12a7a:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <a2d_input>
   12a7e:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   12a80:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   12a82:	ff 91       	pop	r31
   12a84:	ef 91       	pop	r30
   12a86:	cf 91       	pop	r28
   12a88:	bf 91       	pop	r27
   12a8a:	af 91       	pop	r26
   12a8c:	9f 91       	pop	r25
   12a8e:	8f 91       	pop	r24
   12a90:	7f 91       	pop	r23
   12a92:	6f 91       	pop	r22
   12a94:	5f 91       	pop	r21
   12a96:	4f 91       	pop	r20
   12a98:	3f 91       	pop	r19
   12a9a:	2f 91       	pop	r18
   12a9c:	0f 90       	pop	r0
   12a9e:	0b be       	out	0x3b, r0	; 59
   12aa0:	0f 90       	pop	r0
   12aa2:	0f be       	out	0x3f, r0	; 63
   12aa4:	0f 90       	pop	r0
   12aa6:	1f 90       	pop	r1
   12aa8:	18 95       	reti

00012aaa <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   12aaa:	20 91 20 0a 	lds	r18, 0x0A20	; 0x800a20 <a2d_reference>
   12aae:	90 e4       	ldi	r25, 0x40	; 64
   12ab0:	29 9f       	mul	r18, r25
   12ab2:	90 01       	movw	r18, r0
   12ab4:	11 24       	eor	r1, r1
   12ab6:	28 0f       	add	r18, r24
   12ab8:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   12abc:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   12ac0:	ea e7       	ldi	r30, 0x7A	; 122
   12ac2:	f0 e0       	ldi	r31, 0x00	; 0
   12ac4:	80 81       	ld	r24, Z
   12ac6:	80 64       	ori	r24, 0x40	; 64
   12ac8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   12aca:	08 95       	ret

00012acc <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   12acc:	cf 92       	push	r12
   12ace:	df 92       	push	r13
   12ad0:	ef 92       	push	r14
   12ad2:	ff 92       	push	r15
   12ad4:	0f 93       	push	r16
   12ad6:	1f 93       	push	r17
   12ad8:	cf 93       	push	r28
   12ada:	df 93       	push	r29
   12adc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   12ade:	cf 80       	ldd	r12, Y+7	; 0x07
   12ae0:	d8 84       	ldd	r13, Y+8	; 0x08
   12ae2:	e9 84       	ldd	r14, Y+9	; 0x09
   12ae4:	fa 84       	ldd	r15, Y+10	; 0x0a
   12ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
   12ae8:	98 89       	ldd	r25, Y+16	; 0x10
   12aea:	a9 89       	ldd	r26, Y+17	; 0x11
   12aec:	ba 89       	ldd	r27, Y+18	; 0x12
   12aee:	c8 0e       	add	r12, r24
   12af0:	d9 1e       	adc	r13, r25
   12af2:	ea 1e       	adc	r14, r26
   12af4:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   12af6:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   12afa:	0b 89       	ldd	r16, Y+19	; 0x13
   12afc:	1c 89       	ldd	r17, Y+20	; 0x14
   12afe:	2d 89       	ldd	r18, Y+21	; 0x15
   12b00:	3e 89       	ldd	r19, Y+22	; 0x16
   12b02:	60 1b       	sub	r22, r16
   12b04:	71 0b       	sbc	r23, r17
   12b06:	82 0b       	sbc	r24, r18
   12b08:	93 0b       	sbc	r25, r19
   12b0a:	28 ee       	ldi	r18, 0xE8	; 232
   12b0c:	33 e0       	ldi	r19, 0x03	; 3
   12b0e:	40 e0       	ldi	r20, 0x00	; 0
   12b10:	50 e0       	ldi	r21, 0x00	; 0
   12b12:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
   12b16:	ca 01       	movw	r24, r20
   12b18:	b9 01       	movw	r22, r18
   12b1a:	6c 0d       	add	r22, r12
   12b1c:	7d 1d       	adc	r23, r13
   12b1e:	8e 1d       	adc	r24, r14
   12b20:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   12b22:	df 91       	pop	r29
   12b24:	cf 91       	pop	r28
   12b26:	1f 91       	pop	r17
   12b28:	0f 91       	pop	r16
   12b2a:	ff 90       	pop	r15
   12b2c:	ef 90       	pop	r14
   12b2e:	df 90       	pop	r13
   12b30:	cf 90       	pop	r12
   12b32:	08 95       	ret

00012b34 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   12b34:	cf 93       	push	r28
   12b36:	df 93       	push	r29
   12b38:	00 d0       	rcall	.+0      	; 0x12b3a <NTPClient::getYear() const+0x6>
   12b3a:	1f 92       	push	r1
   12b3c:	cd b7       	in	r28, 0x3d	; 61
   12b3e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   12b40:	0e 94 66 95 	call	0x12acc	; 0x12acc <NTPClient::getEpochTime() const>
   12b44:	69 83       	std	Y+1, r22	; 0x01
   12b46:	7a 83       	std	Y+2, r23	; 0x02
   12b48:	8b 83       	std	Y+3, r24	; 0x03
   12b4a:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   12b4c:	ce 01       	movw	r24, r28
   12b4e:	01 96       	adiw	r24, 0x01	; 1
   12b50:	0e 94 58 a2 	call	0x144b0	; 0x144b0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   12b54:	fc 01       	movw	r30, r24
   12b56:	86 81       	ldd	r24, Z+6	; 0x06
   12b58:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   12b5a:	84 59       	subi	r24, 0x94	; 148
   12b5c:	98 4f       	sbci	r25, 0xF8	; 248
   12b5e:	0f 90       	pop	r0
   12b60:	0f 90       	pop	r0
   12b62:	0f 90       	pop	r0
   12b64:	0f 90       	pop	r0
   12b66:	df 91       	pop	r29
   12b68:	cf 91       	pop	r28
   12b6a:	08 95       	ret

00012b6c <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   12b6c:	cf 93       	push	r28
   12b6e:	df 93       	push	r29
   12b70:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   12b72:	89 e3       	ldi	r24, 0x39	; 57
   12b74:	95 e0       	ldi	r25, 0x05	; 5
   12b76:	9e 83       	std	Y+6, r25	; 0x06
   12b78:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   12b7a:	88 81       	ld	r24, Y
   12b7c:	99 81       	ldd	r25, Y+1	; 0x01
   12b7e:	dc 01       	movw	r26, r24
   12b80:	ed 91       	ld	r30, X+
   12b82:	fc 91       	ld	r31, X
   12b84:	06 84       	ldd	r0, Z+14	; 0x0e
   12b86:	f7 85       	ldd	r31, Z+15	; 0x0f
   12b88:	e0 2d       	mov	r30, r0
   12b8a:	69 e3       	ldi	r22, 0x39	; 57
   12b8c:	75 e0       	ldi	r23, 0x05	; 5
   12b8e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   12b90:	81 e0       	ldi	r24, 0x01	; 1
   12b92:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   12b94:	df 91       	pop	r29
   12b96:	cf 91       	pop	r28
   12b98:	08 95       	ret

00012b9a <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   12b9a:	cf 92       	push	r12
   12b9c:	df 92       	push	r13
   12b9e:	ef 92       	push	r14
   12ba0:	ff 92       	push	r15
   12ba2:	0f 93       	push	r16
   12ba4:	1f 93       	push	r17
   12ba6:	cf 93       	push	r28
   12ba8:	df 93       	push	r29
   12baa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   12bac:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   12bb0:	0b 89       	ldd	r16, Y+19	; 0x13
   12bb2:	1c 89       	ldd	r17, Y+20	; 0x14
   12bb4:	2d 89       	ldd	r18, Y+21	; 0x15
   12bb6:	3e 89       	ldd	r19, Y+22	; 0x16
   12bb8:	60 1b       	sub	r22, r16
   12bba:	71 0b       	sbc	r23, r17
   12bbc:	82 0b       	sbc	r24, r18
   12bbe:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   12bc0:	cb 84       	ldd	r12, Y+11	; 0x0b
   12bc2:	dc 84       	ldd	r13, Y+12	; 0x0c
   12bc4:	ed 84       	ldd	r14, Y+13	; 0x0d
   12bc6:	fe 84       	ldd	r15, Y+14	; 0x0e
   12bc8:	6c 15       	cp	r22, r12
   12bca:	7d 05       	cpc	r23, r13
   12bcc:	8e 05       	cpc	r24, r14
   12bce:	9f 05       	cpc	r25, r15
   12bd0:	28 f4       	brcc	.+10     	; 0x12bdc <NTPClient::update()+0x42>
   12bd2:	01 2b       	or	r16, r17
   12bd4:	02 2b       	or	r16, r18
   12bd6:	03 2b       	or	r16, r19
   12bd8:	09 f0       	breq	.+2      	; 0x12bdc <NTPClient::update()+0x42>
   12bda:	9e c0       	rjmp	.+316    	; 0x12d18 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   12bdc:	8a 81       	ldd	r24, Y+2	; 0x02
   12bde:	81 11       	cpse	r24, r1
   12be0:	03 c0       	rjmp	.+6      	; 0x12be8 <NTPClient::update()+0x4e>
   12be2:	ce 01       	movw	r24, r28
   12be4:	0e 94 b6 95 	call	0x12b6c	; 0x12b6c <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   12be8:	7e 01       	movw	r14, r28
   12bea:	87 e1       	ldi	r24, 0x17	; 23
   12bec:	e8 0e       	add	r14, r24
   12bee:	f1 1c       	adc	r15, r1
   12bf0:	8c e2       	ldi	r24, 0x2C	; 44
   12bf2:	fe 01       	movw	r30, r28
   12bf4:	7b 96       	adiw	r30, 0x1b	; 27
   12bf6:	df 01       	movw	r26, r30
   12bf8:	1d 92       	st	X+, r1
   12bfa:	8a 95       	dec	r24
   12bfc:	e9 f7       	brne	.-6      	; 0x12bf8 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   12bfe:	83 ee       	ldi	r24, 0xE3	; 227
   12c00:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   12c02:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   12c04:	86 e0       	ldi	r24, 0x06	; 6
   12c06:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   12c08:	8c ee       	ldi	r24, 0xEC	; 236
   12c0a:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   12c0c:	81 e3       	ldi	r24, 0x31	; 49
   12c0e:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   12c10:	9e e4       	ldi	r25, 0x4E	; 78
   12c12:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   12c14:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   12c16:	84 e3       	ldi	r24, 0x34	; 52
   12c18:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   12c1a:	88 81       	ld	r24, Y
   12c1c:	99 81       	ldd	r25, Y+1	; 0x01
   12c1e:	6b 81       	ldd	r22, Y+3	; 0x03
   12c20:	7c 81       	ldd	r23, Y+4	; 0x04
   12c22:	dc 01       	movw	r26, r24
   12c24:	ed 91       	ld	r30, X+
   12c26:	fc 91       	ld	r31, X
   12c28:	06 88       	ldd	r0, Z+22	; 0x16
   12c2a:	f7 89       	ldd	r31, Z+23	; 0x17
   12c2c:	e0 2d       	mov	r30, r0
   12c2e:	4b e7       	ldi	r20, 0x7B	; 123
   12c30:	50 e0       	ldi	r21, 0x00	; 0
   12c32:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   12c34:	88 81       	ld	r24, Y
   12c36:	99 81       	ldd	r25, Y+1	; 0x01
   12c38:	dc 01       	movw	r26, r24
   12c3a:	ed 91       	ld	r30, X+
   12c3c:	fc 91       	ld	r31, X
   12c3e:	02 80       	ldd	r0, Z+2	; 0x02
   12c40:	f3 81       	ldd	r31, Z+3	; 0x03
   12c42:	e0 2d       	mov	r30, r0
   12c44:	40 e3       	ldi	r20, 0x30	; 48
   12c46:	50 e0       	ldi	r21, 0x00	; 0
   12c48:	b7 01       	movw	r22, r14
   12c4a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   12c4c:	88 81       	ld	r24, Y
   12c4e:	99 81       	ldd	r25, Y+1	; 0x01
   12c50:	dc 01       	movw	r26, r24
   12c52:	ed 91       	ld	r30, X+
   12c54:	fc 91       	ld	r31, X
   12c56:	00 8c       	ldd	r0, Z+24	; 0x18
   12c58:	f1 8d       	ldd	r31, Z+25	; 0x19
   12c5a:	e0 2d       	mov	r30, r0
   12c5c:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   12c5e:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   12c60:	6a e0       	ldi	r22, 0x0A	; 10
   12c62:	70 e0       	ldi	r23, 0x00	; 0
   12c64:	80 e0       	ldi	r24, 0x00	; 0
   12c66:	90 e0       	ldi	r25, 0x00	; 0
   12c68:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   12c6c:	88 81       	ld	r24, Y
   12c6e:	99 81       	ldd	r25, Y+1	; 0x01
   12c70:	dc 01       	movw	r26, r24
   12c72:	ed 91       	ld	r30, X+
   12c74:	fc 91       	ld	r31, X
   12c76:	02 8c       	ldd	r0, Z+26	; 0x1a
   12c78:	f3 8d       	ldd	r31, Z+27	; 0x1b
   12c7a:	e0 2d       	mov	r30, r0
   12c7c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   12c7e:	15 36       	cpi	r17, 0x65	; 101
   12c80:	09 f4       	brne	.+2      	; 0x12c84 <NTPClient::update()+0xea>
   12c82:	54 c0       	rjmp	.+168    	; 0x12d2c <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   12c84:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   12c86:	89 2b       	or	r24, r25
   12c88:	59 f3       	breq	.-42     	; 0x12c60 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   12c8a:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   12c8e:	21 2f       	mov	r18, r17
   12c90:	30 e0       	ldi	r19, 0x00	; 0
   12c92:	a9 01       	movw	r20, r18
   12c94:	4f 5f       	subi	r20, 0xFF	; 255
   12c96:	5f 4f       	sbci	r21, 0xFF	; 255
   12c98:	ea e0       	ldi	r30, 0x0A	; 10
   12c9a:	e4 9f       	mul	r30, r20
   12c9c:	90 01       	movw	r18, r0
   12c9e:	e5 9f       	mul	r30, r21
   12ca0:	30 0d       	add	r19, r0
   12ca2:	11 24       	eor	r1, r1
   12ca4:	89 01       	movw	r16, r18
   12ca6:	33 0f       	add	r19, r19
   12ca8:	22 0b       	sbc	r18, r18
   12caa:	33 0b       	sbc	r19, r19
   12cac:	ab 01       	movw	r20, r22
   12cae:	bc 01       	movw	r22, r24
   12cb0:	40 1b       	sub	r20, r16
   12cb2:	51 0b       	sbc	r21, r17
   12cb4:	62 0b       	sbc	r22, r18
   12cb6:	73 0b       	sbc	r23, r19
   12cb8:	4b 8b       	std	Y+19, r20	; 0x13
   12cba:	5c 8b       	std	Y+20, r21	; 0x14
   12cbc:	6d 8b       	std	Y+21, r22	; 0x15
   12cbe:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   12cc0:	88 81       	ld	r24, Y
   12cc2:	99 81       	ldd	r25, Y+1	; 0x01
   12cc4:	dc 01       	movw	r26, r24
   12cc6:	ed 91       	ld	r30, X+
   12cc8:	fc 91       	ld	r31, X
   12cca:	04 8c       	ldd	r0, Z+28	; 0x1c
   12ccc:	f5 8d       	ldd	r31, Z+29	; 0x1d
   12cce:	e0 2d       	mov	r30, r0
   12cd0:	40 e3       	ldi	r20, 0x30	; 48
   12cd2:	50 e0       	ldi	r21, 0x00	; 0
   12cd4:	b7 01       	movw	r22, r14
   12cd6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   12cd8:	fe 01       	movw	r30, r28
   12cda:	ff 96       	adiw	r30, 0x3f	; 63
   12cdc:	80 81       	ld	r24, Z
   12cde:	91 81       	ldd	r25, Z+1	; 0x01
   12ce0:	98 27       	eor	r25, r24
   12ce2:	89 27       	eor	r24, r25
   12ce4:	98 27       	eor	r25, r24
   12ce6:	b0 e0       	ldi	r27, 0x00	; 0
   12ce8:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   12cea:	dc 01       	movw	r26, r24
   12cec:	99 27       	eor	r25, r25
   12cee:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   12cf0:	32 96       	adiw	r30, 0x02	; 2
   12cf2:	40 81       	ld	r20, Z
   12cf4:	51 81       	ldd	r21, Z+1	; 0x01
   12cf6:	54 27       	eor	r21, r20
   12cf8:	45 27       	eor	r20, r21
   12cfa:	54 27       	eor	r21, r20
   12cfc:	70 e0       	ldi	r23, 0x00	; 0
   12cfe:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   12d00:	84 2b       	or	r24, r20
   12d02:	95 2b       	or	r25, r21
   12d04:	a6 2b       	or	r26, r22
   12d06:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   12d08:	80 58       	subi	r24, 0x80	; 128
   12d0a:	9e 47       	sbci	r25, 0x7E	; 126
   12d0c:	aa 4a       	sbci	r26, 0xAA	; 170
   12d0e:	b3 48       	sbci	r27, 0x83	; 131
   12d10:	8f 87       	std	Y+15, r24	; 0x0f
   12d12:	98 8b       	std	Y+16, r25	; 0x10
   12d14:	a9 8b       	std	Y+17, r26	; 0x11
   12d16:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   12d18:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   12d1a:	df 91       	pop	r29
   12d1c:	cf 91       	pop	r28
   12d1e:	1f 91       	pop	r17
   12d20:	0f 91       	pop	r16
   12d22:	ff 90       	pop	r15
   12d24:	ef 90       	pop	r14
   12d26:	df 90       	pop	r13
   12d28:	cf 90       	pop	r12
   12d2a:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   12d2c:	80 e0       	ldi	r24, 0x00	; 0
   12d2e:	f5 cf       	rjmp	.-22     	; 0x12d1a <NTPClient::update()+0x180>

00012d30 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   12d30:	1f 92       	push	r1
   12d32:	0f 92       	push	r0
   12d34:	0f b6       	in	r0, 0x3f	; 63
   12d36:	0f 92       	push	r0
   12d38:	11 24       	eor	r1, r1
   12d3a:	0b b6       	in	r0, 0x3b	; 59
   12d3c:	0f 92       	push	r0
   12d3e:	2f 93       	push	r18
   12d40:	3f 93       	push	r19
   12d42:	4f 93       	push	r20
   12d44:	5f 93       	push	r21
   12d46:	6f 93       	push	r22
   12d48:	7f 93       	push	r23
   12d4a:	8f 93       	push	r24
   12d4c:	9f 93       	push	r25
   12d4e:	af 93       	push	r26
   12d50:	bf 93       	push	r27
   12d52:	ef 93       	push	r30
   12d54:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   12d56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   12d5a:	88 7f       	andi	r24, 0xF8	; 248
   12d5c:	80 36       	cpi	r24, 0x60	; 96
   12d5e:	09 f4       	brne	.+2      	; 0x12d62 <__vector_39+0x32>
   12d60:	4d c0       	rjmp	.+154    	; 0x12dfc <__vector_39+0xcc>
   12d62:	08 f0       	brcs	.+2      	; 0x12d66 <__vector_39+0x36>
   12d64:	40 c0       	rjmp	.+128    	; 0x12de6 <__vector_39+0xb6>
   12d66:	88 32       	cpi	r24, 0x28	; 40
   12d68:	09 f4       	brne	.+2      	; 0x12d6c <__vector_39+0x3c>
   12d6a:	a9 c0       	rjmp	.+338    	; 0x12ebe <__vector_39+0x18e>
   12d6c:	28 f5       	brcc	.+74     	; 0x12db8 <__vector_39+0x88>
   12d6e:	80 31       	cpi	r24, 0x10	; 16
   12d70:	09 f4       	brne	.+2      	; 0x12d74 <__vector_39+0x44>
   12d72:	9d c0       	rjmp	.+314    	; 0x12eae <__vector_39+0x17e>
   12d74:	c8 f4       	brcc	.+50     	; 0x12da8 <__vector_39+0x78>
   12d76:	88 23       	and	r24, r24
   12d78:	09 f4       	brne	.+2      	; 0x12d7c <__vector_39+0x4c>
   12d7a:	fb c0       	rjmp	.+502    	; 0x12f72 <__vector_39+0x242>
   12d7c:	88 30       	cpi	r24, 0x08	; 8
   12d7e:	09 f4       	brne	.+2      	; 0x12d82 <__vector_39+0x52>
   12d80:	96 c0       	rjmp	.+300    	; 0x12eae <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   12d82:	ff 91       	pop	r31
   12d84:	ef 91       	pop	r30
   12d86:	bf 91       	pop	r27
   12d88:	af 91       	pop	r26
   12d8a:	9f 91       	pop	r25
   12d8c:	8f 91       	pop	r24
   12d8e:	7f 91       	pop	r23
   12d90:	6f 91       	pop	r22
   12d92:	5f 91       	pop	r21
   12d94:	4f 91       	pop	r20
   12d96:	3f 91       	pop	r19
   12d98:	2f 91       	pop	r18
   12d9a:	0f 90       	pop	r0
   12d9c:	0b be       	out	0x3b, r0	; 59
   12d9e:	0f 90       	pop	r0
   12da0:	0f be       	out	0x3f, r0	; 63
   12da2:	0f 90       	pop	r0
   12da4:	1f 90       	pop	r1
   12da6:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12da8:	88 31       	cpi	r24, 0x18	; 24
   12daa:	09 f4       	brne	.+2      	; 0x12dae <__vector_39+0x7e>
   12dac:	88 c0       	rjmp	.+272    	; 0x12ebe <__vector_39+0x18e>
   12dae:	80 32       	cpi	r24, 0x20	; 32
   12db0:	41 f7       	brne	.-48     	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   12db2:	80 93 94 11 	sts	0x1194, r24	; 0x801194 <twi_error>
   12db6:	14 c0       	rjmp	.+40     	; 0x12de0 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12db8:	80 34       	cpi	r24, 0x40	; 64
   12dba:	09 f4       	brne	.+2      	; 0x12dbe <__vector_39+0x8e>
   12dbc:	9d c0       	rjmp	.+314    	; 0x12ef8 <__vector_39+0x1c8>
   12dbe:	40 f4       	brcc	.+16     	; 0x12dd0 <__vector_39+0xa0>
   12dc0:	80 33       	cpi	r24, 0x30	; 48
   12dc2:	b9 f3       	breq	.-18     	; 0x12db2 <__vector_39+0x82>
   12dc4:	88 33       	cpi	r24, 0x38	; 56
   12dc6:	e9 f6       	brne	.-70     	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   12dc8:	80 93 94 11 	sts	0x1194, r24	; 0x801194 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12dcc:	85 ec       	ldi	r24, 0xC5	; 197
   12dce:	b0 c0       	rjmp	.+352    	; 0x12f30 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12dd0:	80 35       	cpi	r24, 0x50	; 80
   12dd2:	09 f4       	brne	.+2      	; 0x12dd6 <__vector_39+0xa6>
   12dd4:	85 c0       	rjmp	.+266    	; 0x12ee0 <__vector_39+0x1b0>
   12dd6:	88 35       	cpi	r24, 0x58	; 88
   12dd8:	09 f4       	brne	.+2      	; 0x12ddc <__vector_39+0xac>
   12dda:	96 c0       	rjmp	.+300    	; 0x12f08 <__vector_39+0x1d8>
   12ddc:	88 34       	cpi	r24, 0x48	; 72
   12dde:	89 f6       	brne	.-94     	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   12de0:	0e 94 d4 86 	call	0x10da8	; 0x10da8 <twi_stop>
   12de4:	ce cf       	rjmp	.-100    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12de6:	88 39       	cpi	r24, 0x98	; 152
   12de8:	09 f4       	brne	.+2      	; 0x12dec <__vector_39+0xbc>
   12dea:	8c c0       	rjmp	.+280    	; 0x12f04 <__vector_39+0x1d4>
   12dec:	38 f5       	brcc	.+78     	; 0x12e3c <__vector_39+0x10c>
   12dee:	88 37       	cpi	r24, 0x78	; 120
   12df0:	29 f0       	breq	.+10     	; 0x12dfc <__vector_39+0xcc>
   12df2:	50 f4       	brcc	.+20     	; 0x12e08 <__vector_39+0xd8>
   12df4:	88 36       	cpi	r24, 0x68	; 104
   12df6:	11 f0       	breq	.+4      	; 0x12dfc <__vector_39+0xcc>
   12df8:	80 37       	cpi	r24, 0x70	; 112
   12dfa:	19 f6       	brne	.-122    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   12dfc:	83 e0       	ldi	r24, 0x03	; 3
   12dfe:	80 93 96 11 	sts	0x1196, r24	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   12e02:	10 92 21 11 	sts	0x1121, r1	; 0x801121 <twi_rxBufferIndex>
   12e06:	57 c0       	rjmp	.+174    	; 0x12eb6 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e08:	88 38       	cpi	r24, 0x88	; 136
   12e0a:	09 f4       	brne	.+2      	; 0x12e0e <__vector_39+0xde>
   12e0c:	7b c0       	rjmp	.+246    	; 0x12f04 <__vector_39+0x1d4>
   12e0e:	80 39       	cpi	r24, 0x90	; 144
   12e10:	19 f0       	breq	.+6      	; 0x12e18 <__vector_39+0xe8>
   12e12:	80 38       	cpi	r24, 0x80	; 128
   12e14:	09 f0       	breq	.+2      	; 0x12e18 <__vector_39+0xe8>
   12e16:	b5 cf       	rjmp	.-150    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   12e18:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <twi_rxBufferIndex>
   12e1c:	80 32       	cpi	r24, 0x20	; 32
   12e1e:	08 f0       	brcs	.+2      	; 0x12e22 <__vector_39+0xf2>
   12e20:	71 c0       	rjmp	.+226    	; 0x12f04 <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   12e22:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <twi_rxBufferIndex>
   12e26:	81 e0       	ldi	r24, 0x01	; 1
   12e28:	8e 0f       	add	r24, r30
   12e2a:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <twi_rxBufferIndex>
   12e2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12e32:	f0 e0       	ldi	r31, 0x00	; 0
   12e34:	ef 5f       	subi	r30, 0xFF	; 255
   12e36:	fe 4e       	sbci	r31, 0xEE	; 238
   12e38:	80 83       	st	Z, r24
   12e3a:	3d c0       	rjmp	.+122    	; 0x12eb6 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e3c:	80 3b       	cpi	r24, 0xB0	; 176
   12e3e:	39 f0       	breq	.+14     	; 0x12e4e <__vector_39+0x11e>
   12e40:	e0 f4       	brcc	.+56     	; 0x12e7a <__vector_39+0x14a>
   12e42:	80 3a       	cpi	r24, 0xA0	; 160
   12e44:	09 f4       	brne	.+2      	; 0x12e48 <__vector_39+0x118>
   12e46:	79 c0       	rjmp	.+242    	; 0x12f3a <__vector_39+0x20a>
   12e48:	88 3a       	cpi	r24, 0xA8	; 168
   12e4a:	09 f0       	breq	.+2      	; 0x12e4e <__vector_39+0x11e>
   12e4c:	9a cf       	rjmp	.-204    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   12e4e:	84 e0       	ldi	r24, 0x04	; 4
   12e50:	80 93 96 11 	sts	0x1196, r24	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   12e54:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   12e58:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   12e5c:	e0 91 47 11 	lds	r30, 0x1147	; 0x801147 <twi_onSlaveTransmit>
   12e60:	f0 91 48 11 	lds	r31, 0x1148	; 0x801148 <twi_onSlaveTransmit+0x1>
   12e64:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   12e66:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <twi_txBufferLength>
   12e6a:	81 11       	cpse	r24, r1
   12e6c:	0f c0       	rjmp	.+30     	; 0x12e8c <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   12e6e:	81 e0       	ldi	r24, 0x01	; 1
   12e70:	80 93 ff 10 	sts	0x10FF, r24	; 0x8010ff <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   12e74:	10 92 df 10 	sts	0x10DF, r1	; 0x8010df <twi_txBuffer>
   12e78:	09 c0       	rjmp	.+18     	; 0x12e8c <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e7a:	80 3c       	cpi	r24, 0xC0	; 192
   12e7c:	09 f4       	brne	.+2      	; 0x12e80 <__vector_39+0x150>
   12e7e:	a6 cf       	rjmp	.-180    	; 0x12dcc <__vector_39+0x9c>
   12e80:	88 3c       	cpi	r24, 0xC8	; 200
   12e82:	09 f4       	brne	.+2      	; 0x12e86 <__vector_39+0x156>
   12e84:	a3 cf       	rjmp	.-186    	; 0x12dcc <__vector_39+0x9c>
   12e86:	88 3b       	cpi	r24, 0xB8	; 184
   12e88:	09 f0       	breq	.+2      	; 0x12e8c <__vector_39+0x15c>
   12e8a:	7b cf       	rjmp	.-266    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   12e8c:	e0 91 00 11 	lds	r30, 0x1100	; 0x801100 <twi_txBufferIndex>
   12e90:	81 e0       	ldi	r24, 0x01	; 1
   12e92:	8e 0f       	add	r24, r30
   12e94:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <twi_txBufferIndex>
   12e98:	f0 e0       	ldi	r31, 0x00	; 0
   12e9a:	e1 52       	subi	r30, 0x21	; 33
   12e9c:	ff 4e       	sbci	r31, 0xEF	; 239
   12e9e:	80 81       	ld	r24, Z
   12ea0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   12ea4:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <twi_txBufferIndex>
   12ea8:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <twi_txBufferLength>
   12eac:	29 c0       	rjmp	.+82     	; 0x12f00 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   12eae:	80 91 91 11 	lds	r24, 0x1191	; 0x801191 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   12eb2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12eb6:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12ebc:	62 cf       	rjmp	.-316    	; 0x12d82 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12ebe:	90 91 93 11 	lds	r25, 0x1193	; 0x801193 <twi_masterBufferIndex>
   12ec2:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <twi_masterBufferLength>
   12ec6:	98 17       	cp	r25, r24
   12ec8:	58 f5       	brcc	.+86     	; 0x12f20 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   12eca:	e0 91 93 11 	lds	r30, 0x1193	; 0x801193 <twi_masterBufferIndex>
   12ece:	81 e0       	ldi	r24, 0x01	; 1
   12ed0:	8e 0f       	add	r24, r30
   12ed2:	80 93 93 11 	sts	0x1193, r24	; 0x801193 <twi_masterBufferIndex>
   12ed6:	f0 e0       	ldi	r31, 0x00	; 0
   12ed8:	e0 59       	subi	r30, 0x90	; 144
   12eda:	fe 4e       	sbci	r31, 0xEE	; 238
   12edc:	80 81       	ld	r24, Z
   12ede:	e9 cf       	rjmp	.-46     	; 0x12eb2 <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   12ee0:	e0 91 93 11 	lds	r30, 0x1193	; 0x801193 <twi_masterBufferIndex>
   12ee4:	81 e0       	ldi	r24, 0x01	; 1
   12ee6:	8e 0f       	add	r24, r30
   12ee8:	80 93 93 11 	sts	0x1193, r24	; 0x801193 <twi_masterBufferIndex>
   12eec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12ef0:	f0 e0       	ldi	r31, 0x00	; 0
   12ef2:	e0 59       	subi	r30, 0x90	; 144
   12ef4:	fe 4e       	sbci	r31, 0xEE	; 238
   12ef6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12ef8:	90 91 93 11 	lds	r25, 0x1193	; 0x801193 <twi_masterBufferIndex>
   12efc:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   12f00:	98 17       	cp	r25, r24
   12f02:	c8 f2       	brcs	.-78     	; 0x12eb6 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12f04:	85 e8       	ldi	r24, 0x85	; 133
   12f06:	d8 cf       	rjmp	.-80     	; 0x12eb8 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   12f08:	e0 91 93 11 	lds	r30, 0x1193	; 0x801193 <twi_masterBufferIndex>
   12f0c:	81 e0       	ldi	r24, 0x01	; 1
   12f0e:	8e 0f       	add	r24, r30
   12f10:	80 93 93 11 	sts	0x1193, r24	; 0x801193 <twi_masterBufferIndex>
   12f14:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12f18:	f0 e0       	ldi	r31, 0x00	; 0
   12f1a:	e0 59       	subi	r30, 0x90	; 144
   12f1c:	fe 4e       	sbci	r31, 0xEE	; 238
   12f1e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   12f20:	80 91 95 11 	lds	r24, 0x1195	; 0x801195 <twi_sendStop>
   12f24:	81 11       	cpse	r24, r1
   12f26:	5c cf       	rjmp	.-328    	; 0x12de0 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   12f28:	81 e0       	ldi	r24, 0x01	; 1
   12f2a:	80 93 90 11 	sts	0x1190, r24	; 0x801190 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   12f2e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12f30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   12f34:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <twi_state>
   12f38:	24 cf       	rjmp	.-440    	; 0x12d82 <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   12f3a:	85 ec       	ldi	r24, 0xC5	; 197
   12f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   12f40:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   12f44:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <twi_rxBufferIndex>
   12f48:	80 32       	cpi	r24, 0x20	; 32
   12f4a:	30 f4       	brcc	.+12     	; 0x12f58 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   12f4c:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <twi_rxBufferIndex>
   12f50:	f0 e0       	ldi	r31, 0x00	; 0
   12f52:	ef 5f       	subi	r30, 0xFF	; 255
   12f54:	fe 4e       	sbci	r31, 0xEE	; 238
   12f56:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   12f58:	60 91 21 11 	lds	r22, 0x1121	; 0x801121 <twi_rxBufferIndex>
   12f5c:	70 e0       	ldi	r23, 0x00	; 0
   12f5e:	e0 91 45 11 	lds	r30, 0x1145	; 0x801145 <twi_onSlaveReceive>
   12f62:	f0 91 46 11 	lds	r31, 0x1146	; 0x801146 <twi_onSlaveReceive+0x1>
   12f66:	81 e0       	ldi	r24, 0x01	; 1
   12f68:	91 e1       	ldi	r25, 0x11	; 17
   12f6a:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   12f6c:	10 92 21 11 	sts	0x1121, r1	; 0x801121 <twi_rxBufferIndex>
   12f70:	08 cf       	rjmp	.-496    	; 0x12d82 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   12f72:	10 92 94 11 	sts	0x1194, r1	; 0x801194 <twi_error>
   12f76:	34 cf       	rjmp	.-408    	; 0x12de0 <__vector_39+0xb0>

00012f78 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   12f78:	20 91 4c 11 	lds	r18, 0x114C	; 0x80114c <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   12f7c:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   12f7e:	21 32       	cpi	r18, 0x21	; 33
   12f80:	08 f0       	brcs	.+2      	; 0x12f84 <TwoWire::endTransmission()+0xc>
   12f82:	44 c0       	rjmp	.+136    	; 0x1300c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   12f84:	80 91 96 11 	lds	r24, 0x1196	; 0x801196 <twi_state>
   12f88:	81 11       	cpse	r24, r1
   12f8a:	fc cf       	rjmp	.-8      	; 0x12f84 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   12f8c:	80 91 4e 11 	lds	r24, 0x114E	; 0x80114e <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   12f90:	92 e0       	ldi	r25, 0x02	; 2
   12f92:	90 93 96 11 	sts	0x1196, r25	; 0x801196 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   12f96:	91 e0       	ldi	r25, 0x01	; 1
   12f98:	90 93 95 11 	sts	0x1195, r25	; 0x801195 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   12f9c:	9f ef       	ldi	r25, 0xFF	; 255
   12f9e:	90 93 94 11 	sts	0x1194, r25	; 0x801194 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   12fa2:	10 92 93 11 	sts	0x1193, r1	; 0x801193 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   12fa6:	20 93 92 11 	sts	0x1192, r18	; 0x801192 <twi_masterBufferLength>
   12faa:	af eb       	ldi	r26, 0xBF	; 191
   12fac:	b0 e1       	ldi	r27, 0x10	; 16
   12fae:	e0 e7       	ldi	r30, 0x70	; 112
   12fb0:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   12fb2:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   12fb4:	29 13       	cpse	r18, r25
   12fb6:	31 c0       	rjmp	.+98     	; 0x1301a <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   12fb8:	10 92 91 11 	sts	0x1191, r1	; 0x801191 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   12fbc:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <twi_slarw>
   12fc0:	88 0f       	add	r24, r24
   12fc2:	89 2b       	or	r24, r25
   12fc4:	80 93 91 11 	sts	0x1191, r24	; 0x801191 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   12fc8:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <twi_inRepStart>
   12fcc:	81 30       	cpi	r24, 0x01	; 1
   12fce:	49 f5       	brne	.+82     	; 0x13022 <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   12fd0:	10 92 90 11 	sts	0x1190, r1	; 0x801190 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   12fd4:	80 91 91 11 	lds	r24, 0x1191	; 0x801191 <twi_slarw>
   12fd8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   12fdc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12fe0:	83 fd       	sbrc	r24, 3
   12fe2:	f8 cf       	rjmp	.-16     	; 0x12fd4 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   12fe4:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   12fe6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   12fea:	80 91 96 11 	lds	r24, 0x1196	; 0x801196 <twi_state>
   12fee:	82 30       	cpi	r24, 0x02	; 2
   12ff0:	e1 f3       	breq	.-8      	; 0x12fea <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   12ff2:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <twi_error>
   12ff6:	8f 3f       	cpi	r24, 0xFF	; 255
   12ff8:	b1 f0       	breq	.+44     	; 0x13026 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   12ffa:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <twi_error>
   12ffe:	80 32       	cpi	r24, 0x20	; 32
   13000:	a1 f0       	breq	.+40     	; 0x1302a <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   13002:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <twi_error>
   13006:	80 33       	cpi	r24, 0x30	; 48
   13008:	91 f0       	breq	.+36     	; 0x1302e <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   1300a:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   1300c:	10 92 4d 11 	sts	0x114D, r1	; 0x80114d <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   13010:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   13014:	10 92 4f 11 	sts	0x114F, r1	; 0x80114f <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   13018:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   1301a:	3d 91       	ld	r19, X+
   1301c:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1301e:	9f 5f       	subi	r25, 0xFF	; 255
   13020:	c9 cf       	rjmp	.-110    	; 0x12fb4 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   13022:	85 ee       	ldi	r24, 0xE5	; 229
   13024:	e0 cf       	rjmp	.-64     	; 0x12fe6 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   13026:	80 e0       	ldi	r24, 0x00	; 0
   13028:	f1 cf       	rjmp	.-30     	; 0x1300c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   1302a:	82 e0       	ldi	r24, 0x02	; 2
   1302c:	ef cf       	rjmp	.-34     	; 0x1300c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   1302e:	83 e0       	ldi	r24, 0x03	; 3
   13030:	ed cf       	rjmp	.-38     	; 0x1300c <TwoWire::endTransmission()+0x94>

00013032 <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   13032:	88 e6       	ldi	r24, 0x68	; 104
   13034:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   13038:	60 e0       	ldi	r22, 0x00	; 0
   1303a:	80 e6       	ldi	r24, 0x60	; 96
   1303c:	9e e0       	ldi	r25, 0x0E	; 14
   1303e:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   13042:	80 e6       	ldi	r24, 0x60	; 96
   13044:	9e e0       	ldi	r25, 0x0E	; 14
   13046:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   1304a:	81 e0       	ldi	r24, 0x01	; 1
   1304c:	90 e0       	ldi	r25, 0x00	; 0
   1304e:	0e 94 7a 89 	call	0x112f4	; 0x112f4 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   13052:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   13056:	80 58       	subi	r24, 0x80	; 128
   13058:	87 fb       	bst	r24, 7
   1305a:	88 27       	eor	r24, r24
   1305c:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   1305e:	08 95       	ret

00013060 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   13060:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   13064:	80 ef       	ldi	r24, 0xF0	; 240
   13066:	90 e0       	ldi	r25, 0x00	; 0
   13068:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   1306c:	80 e6       	ldi	r24, 0x60	; 96
   1306e:	9e e0       	ldi	r25, 0x0E	; 14
   13070:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   13074:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   13076:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   13078:	08 95       	ret

0001307a <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   1307a:	86 2f       	mov	r24, r22
twi_readFrom():
   1307c:	64 2f       	mov	r22, r20
   1307e:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <twi_readFrom.part.0.constprop.169>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   13082:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   13086:	80 93 4a 11 	sts	0x114A, r24	; 0x80114a <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   1308a:	08 95       	ret

0001308c <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   1308c:	ff 92       	push	r15
   1308e:	0f 93       	push	r16
   13090:	1f 93       	push	r17
   13092:	cf 93       	push	r28
   13094:	df 93       	push	r29
   13096:	d8 2f       	mov	r29, r24
   13098:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   1309a:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   1309e:	86 e9       	ldi	r24, 0x96	; 150
   130a0:	90 e0       	ldi	r25, 0x00	; 0
   130a2:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   130a6:	80 e6       	ldi	r24, 0x60	; 96
   130a8:	9e e0       	ldi	r25, 0x0E	; 14
   130aa:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   130ae:	ce ef       	ldi	r28, 0xFE	; 254
   130b0:	88 23       	and	r24, r24
   130b2:	41 f0       	breq	.+16     	; 0x130c4 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   130b4:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   130b6:	8c 2f       	mov	r24, r28
   130b8:	df 91       	pop	r29
   130ba:	cf 91       	pop	r28
   130bc:	1f 91       	pop	r17
   130be:	0f 91       	pop	r16
   130c0:	ff 90       	pop	r15
   130c2:	08 95       	ret
   130c4:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   130c6:	e1 f1       	breq	.+120    	; 0x13140 <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   130c8:	41 e0       	ldi	r20, 0x01	; 1
   130ca:	6d 2f       	mov	r22, r29
   130cc:	80 e6       	ldi	r24, 0x60	; 96
   130ce:	9e e0       	ldi	r25, 0x0E	; 14
   130d0:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   130d4:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   130d8:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   130dc:	89 1b       	sub	r24, r25
   130de:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   130e0:	18 16       	cp	r1, r24
   130e2:	19 06       	cpc	r1, r25
   130e4:	1c f4       	brge	.+6      	; 0x130ec <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   130e6:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   130ea:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   130ec:	f0 fc       	sbrc	r15, 0
   130ee:	ea cf       	rjmp	.-44     	; 0x130c4 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   130f0:	8d 2f       	mov	r24, r29
   130f2:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   130f6:	81 ee       	ldi	r24, 0xE1	; 225
   130f8:	90 e0       	ldi	r25, 0x00	; 0
   130fa:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   130fe:	61 ee       	ldi	r22, 0xE1	; 225
   13100:	80 e6       	ldi	r24, 0x60	; 96
   13102:	9e e0       	ldi	r25, 0x0E	; 14
   13104:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   13108:	80 e6       	ldi	r24, 0x60	; 96
   1310a:	9e e0       	ldi	r25, 0x0E	; 14
   1310c:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   13110:	c8 2f       	mov	r28, r24
   13112:	81 11       	cpse	r24, r1
   13114:	cf cf       	rjmp	.-98     	; 0x130b4 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   13116:	41 e0       	ldi	r20, 0x01	; 1
   13118:	6d 2f       	mov	r22, r29
   1311a:	80 e6       	ldi	r24, 0x60	; 96
   1311c:	9e e0       	ldi	r25, 0x0E	; 14
   1311e:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   13122:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   13126:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   1312a:	89 1b       	sub	r24, r25
   1312c:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   1312e:	18 16       	cp	r1, r24
   13130:	19 06       	cpc	r1, r25
   13132:	0c f0       	brlt	.+2      	; 0x13136 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   13134:	c0 cf       	rjmp	.-128    	; 0x130b6 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   13136:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   1313a:	f8 01       	movw	r30, r16
   1313c:	80 83       	st	Z, r24
   1313e:	bb cf       	rjmp	.-138    	; 0x130b6 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   13140:	c4 e0       	ldi	r28, 0x04	; 4
   13142:	b9 cf       	rjmp	.-142    	; 0x130b6 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

00013144 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   13144:	0f 93       	push	r16
   13146:	1f 93       	push	r17
   13148:	cf 93       	push	r28
   1314a:	df 93       	push	r29
   1314c:	08 2f       	mov	r16, r24
   1314e:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   13150:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   13154:	85 ea       	ldi	r24, 0xA5	; 165
   13156:	90 e0       	ldi	r25, 0x00	; 0
   13158:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   1315c:	6d 2f       	mov	r22, r29
   1315e:	80 e6       	ldi	r24, 0x60	; 96
   13160:	9e e0       	ldi	r25, 0x0E	; 14
   13162:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   13166:	80 e6       	ldi	r24, 0x60	; 96
   13168:	9e e0       	ldi	r25, 0x0E	; 14
   1316a:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   1316e:	c8 2f       	mov	r28, r24
   13170:	81 11       	cpse	r24, r1
   13172:	1d c0       	rjmp	.+58     	; 0x131ae <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   13174:	1e ef       	ldi	r17, 0xFE	; 254
   13176:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   13178:	e1 f0       	breq	.+56     	; 0x131b2 <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1317a:	41 e0       	ldi	r20, 0x01	; 1
   1317c:	60 2f       	mov	r22, r16
   1317e:	80 e6       	ldi	r24, 0x60	; 96
   13180:	9e e0       	ldi	r25, 0x0E	; 14
   13182:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   13186:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   1318a:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   1318e:	89 1b       	sub	r24, r25
   13190:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   13192:	18 16       	cp	r1, r24
   13194:	19 06       	cpc	r1, r25
   13196:	1c f4       	brge	.+6      	; 0x1319e <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   13198:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   1319c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   1319e:	d0 fd       	sbrc	r29, 0
   131a0:	ea cf       	rjmp	.-44     	; 0x13176 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   131a2:	8c 2f       	mov	r24, r28
   131a4:	df 91       	pop	r29
   131a6:	cf 91       	pop	r28
   131a8:	1f 91       	pop	r17
   131aa:	0f 91       	pop	r16
   131ac:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   131ae:	c3 e0       	ldi	r28, 0x03	; 3
   131b0:	f8 cf       	rjmp	.-16     	; 0x131a2 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   131b2:	c4 e0       	ldi	r28, 0x04	; 4
   131b4:	f6 cf       	rjmp	.-20     	; 0x131a2 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

000131b6 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   131b6:	ef 92       	push	r14
   131b8:	ff 92       	push	r15
   131ba:	1f 93       	push	r17
   131bc:	cf 93       	push	r28
   131be:	df 93       	push	r29
   131c0:	18 2f       	mov	r17, r24
   131c2:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   131c4:	65 e5       	ldi	r22, 0x55	; 85
   131c6:	0e 94 a2 98 	call	0x13144	; 0x13144 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   131ca:	81 11       	cpse	r24, r1
   131cc:	0d c0       	rjmp	.+26     	; 0x131e8 <owMatchRom(unsigned char, unsigned char*)+0x32>
   131ce:	e7 01       	movw	r28, r14
   131d0:	88 e0       	ldi	r24, 0x08	; 8
   131d2:	e8 0e       	add	r14, r24
   131d4:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   131d6:	69 91       	ld	r22, Y+
   131d8:	81 2f       	mov	r24, r17
   131da:	0e 94 a2 98 	call	0x13144	; 0x13144 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   131de:	81 11       	cpse	r24, r1
   131e0:	03 c0       	rjmp	.+6      	; 0x131e8 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   131e2:	ec 16       	cp	r14, r28
   131e4:	fd 06       	cpc	r15, r29
   131e6:	b9 f7       	brne	.-18     	; 0x131d6 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   131e8:	df 91       	pop	r29
   131ea:	cf 91       	pop	r28
   131ec:	1f 91       	pop	r17
   131ee:	ff 90       	pop	r15
   131f0:	ef 90       	pop	r14
   131f2:	08 95       	ret

000131f4 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   131f4:	0f 93       	push	r16
   131f6:	1f 93       	push	r17
   131f8:	cf 93       	push	r28
   131fa:	df 93       	push	r29
   131fc:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   131fe:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   13202:	84 eb       	ldi	r24, 0xB4	; 180
   13204:	90 e0       	ldi	r25, 0x00	; 0
   13206:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1320a:	80 e6       	ldi	r24, 0x60	; 96
   1320c:	9e e0       	ldi	r25, 0x0E	; 14
   1320e:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   13212:	c8 2f       	mov	r28, r24
   13214:	81 11       	cpse	r24, r1
   13216:	1b c0       	rjmp	.+54     	; 0x1324e <ds2482owReset(unsigned char)+0x5a>
   13218:	de ef       	ldi	r29, 0xFE	; 254
   1321a:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   1321c:	f9 f0       	breq	.+62     	; 0x1325c <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   1321e:	41 e0       	ldi	r20, 0x01	; 1
   13220:	60 2f       	mov	r22, r16
   13222:	80 e6       	ldi	r24, 0x60	; 96
   13224:	9e e0       	ldi	r25, 0x0E	; 14
   13226:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1322a:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   1322e:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   13232:	89 1b       	sub	r24, r25
   13234:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   13236:	18 16       	cp	r1, r24
   13238:	19 06       	cpc	r1, r25
   1323a:	1c f4       	brge	.+6      	; 0x13242 <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   1323c:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   13240:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   13242:	10 fd       	sbrc	r17, 0
   13244:	ea cf       	rjmp	.-44     	; 0x1321a <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   13246:	11 fd       	sbrc	r17, 1
   13248:	03 c0       	rjmp	.+6      	; 0x13250 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   1324a:	c5 e0       	ldi	r28, 0x05	; 5
   1324c:	01 c0       	rjmp	.+2      	; 0x13250 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1324e:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   13250:	8c 2f       	mov	r24, r28
   13252:	df 91       	pop	r29
   13254:	cf 91       	pop	r28
   13256:	1f 91       	pop	r17
   13258:	0f 91       	pop	r16
   1325a:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   1325c:	c4 e0       	ldi	r28, 0x04	; 4
   1325e:	f8 cf       	rjmp	.-16     	; 0x13250 <ds2482owReset(unsigned char)+0x5c>

00013260 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>:
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   13260:	df 92       	push	r13
   13262:	ef 92       	push	r14
   13264:	ff 92       	push	r15
   13266:	0f 93       	push	r16
   13268:	1f 93       	push	r17
   1326a:	cf 93       	push	r28
   1326c:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1326e:	90 91 cb 0b 	lds	r25, 0x0BCB	; 0x800bcb <lastDevice>
   13272:	99 23       	and	r25, r25
   13274:	51 f0       	breq	.+20     	; 0x1328a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   13276:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   13278:	8d 2f       	mov	r24, r29
   1327a:	df 91       	pop	r29
   1327c:	cf 91       	pop	r28
   1327e:	1f 91       	pop	r17
   13280:	0f 91       	pop	r16
   13282:	ff 90       	pop	r15
   13284:	ef 90       	pop	r14
   13286:	df 90       	pop	r13
   13288:	08 95       	ret
   1328a:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   1328c:	0e 94 fa 98 	call	0x131f4	; 0x131f4 <ds2482owReset(unsigned char)>
   13290:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   13292:	81 11       	cpse	r24, r1
   13294:	f1 cf       	rjmp	.-30     	; 0x13278 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   13296:	60 ef       	ldi	r22, 0xF0	; 240
   13298:	8f 2d       	mov	r24, r15
   1329a:	0e 94 a2 98 	call	0x13144	; 0x13144 <ds2482owWriteByte(unsigned char, unsigned char)>
   1329e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   132a0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   132a2:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   132a4:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   132a6:	81 11       	cpse	r24, r1
   132a8:	e7 cf       	rjmp	.-50     	; 0x13278 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   132aa:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <lastDiscrepancy>
   132ae:	08 17       	cp	r16, r24
   132b0:	50 f4       	brcc	.+20     	; 0x132c6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   132b2:	ee 2d       	mov	r30, r14
   132b4:	f0 e0       	ldi	r31, 0x00	; 0
   132b6:	ed 53       	subi	r30, 0x3D	; 61
   132b8:	f4 4f       	sbci	r31, 0xF4	; 244
   132ba:	80 81       	ld	r24, Z
   132bc:	81 23       	and	r24, r17
   132be:	c1 e0       	ldi	r28, 0x01	; 1
   132c0:	29 f4       	brne	.+10     	; 0x132cc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   132c2:	c0 e0       	ldi	r28, 0x00	; 0
   132c4:	03 c0       	rjmp	.+6      	; 0x132cc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
   132c6:	c1 e0       	ldi	r28, 0x01	; 1
   132c8:	80 13       	cpse	r24, r16
   132ca:	fb cf       	rjmp	.-10     	; 0x132c2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   132cc:	8f 2d       	mov	r24, r15
   132ce:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   132d2:	88 e7       	ldi	r24, 0x78	; 120
   132d4:	90 e0       	ldi	r25, 0x00	; 0
   132d6:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   132da:	90 e0       	ldi	r25, 0x00	; 0
   132dc:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   132de:	cc 23       	and	r28, r28
   132e0:	11 f0       	breq	.+4      	; 0x132e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x86>
_Z11owMatchNexthPh.constprop.97():
   132e2:	80 e8       	ldi	r24, 0x80	; 128
   132e4:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   132e6:	0e 94 e9 8c 	call	0x119d2	; 0x119d2 <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   132ea:	80 e6       	ldi	r24, 0x60	; 96
   132ec:	9e e0       	ldi	r25, 0x0E	; 14
   132ee:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
   132f2:	81 11       	cpse	r24, r1
   132f4:	53 c0       	rjmp	.+166    	; 0x1339c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x13c>
   132f6:	6e ef       	ldi	r22, 0xFE	; 254
   132f8:	d6 2e       	mov	r13, r22
   132fa:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   132fc:	dd 20       	and	r13, r13
   132fe:	09 f4       	brne	.+2      	; 0x13302 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xa2>
   13300:	4f c0       	rjmp	.+158    	; 0x133a0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   13302:	41 e0       	ldi	r20, 0x01	; 1
   13304:	6f 2d       	mov	r22, r15
   13306:	80 e6       	ldi	r24, 0x60	; 96
   13308:	9e e0       	ldi	r25, 0x0E	; 14
   1330a:	0e 94 3d 98 	call	0x1307a	; 0x1307a <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1330e:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <TwoWire::rxBufferLength>
   13312:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <TwoWire::rxBufferIndex>
   13316:	89 1b       	sub	r24, r25
   13318:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   1331a:	18 16       	cp	r1, r24
   1331c:	19 06       	cpc	r1, r25
   1331e:	1c f4       	brge	.+6      	; 0x13326 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   13320:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   13324:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   13326:	c0 fd       	sbrc	r28, 0
   13328:	e8 cf       	rjmp	.-48     	; 0x132fa <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x9a>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   1332a:	2c 2f       	mov	r18, r28
   1332c:	30 e0       	ldi	r19, 0x00	; 0
   1332e:	c9 01       	movw	r24, r18
   13330:	45 e0       	ldi	r20, 0x05	; 5
   13332:	95 95       	asr	r25
   13334:	87 95       	ror	r24
   13336:	4a 95       	dec	r20
   13338:	e1 f7       	brne	.-8      	; 0x13332 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xd2>
   1333a:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   1333c:	22 0f       	add	r18, r18
   1333e:	23 2f       	mov	r18, r19
   13340:	22 1f       	adc	r18, r18
   13342:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   13344:	83 30       	cpi	r24, 0x03	; 3
   13346:	99 f0       	breq	.+38     	; 0x1336e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x10e>
   13348:	ee 2d       	mov	r30, r14
   1334a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   1334c:	81 11       	cpse	r24, r1
   1334e:	1b c0       	rjmp	.+54     	; 0x13386 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   13350:	22 23       	and	r18, r18
   13352:	11 f1       	breq	.+68     	; 0x13398 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   13354:	ed 53       	subi	r30, 0x3D	; 61
   13356:	f4 4f       	sbci	r31, 0xF4	; 244
   13358:	80 81       	ld	r24, Z
   1335a:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1335c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1335e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   13360:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   13362:	11 f4       	brne	.+4      	; 0x13368 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   13364:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   13366:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   13368:	88 e0       	ldi	r24, 0x08	; 8
   1336a:	e8 12       	cpse	r14, r24
   1336c:	9e cf       	rjmp	.-196    	; 0x132aa <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   1336e:	01 34       	cpi	r16, 0x41	; 65
   13370:	08 f4       	brcc	.+2      	; 0x13374 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x114>
   13372:	81 cf       	rjmp	.-254    	; 0x13276 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   13374:	d0 93 c2 0b 	sts	0x0BC2, r29	; 0x800bc2 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   13378:	81 e0       	ldi	r24, 0x01	; 1
   1337a:	d1 11       	cpse	r29, r1
   1337c:	80 e0       	ldi	r24, 0x00	; 0
   1337e:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   13382:	d0 e0       	ldi	r29, 0x00	; 0
   13384:	79 cf       	rjmp	.-270    	; 0x13278 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   13386:	21 11       	cpse	r18, r1
   13388:	e5 cf       	rjmp	.-54     	; 0x13354 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   1338a:	ed 53       	subi	r30, 0x3D	; 61
   1338c:	f4 4f       	sbci	r31, 0xF4	; 244
   1338e:	80 81       	ld	r24, Z
   13390:	91 2f       	mov	r25, r17
   13392:	90 95       	com	r25
   13394:	89 23       	and	r24, r25
   13396:	e2 cf       	rjmp	.-60     	; 0x1335c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   13398:	d0 2f       	mov	r29, r16
   1339a:	f7 cf       	rjmp	.-18     	; 0x1338a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1339c:	d3 e0       	ldi	r29, 0x03	; 3
   1339e:	6c cf       	rjmp	.-296    	; 0x13278 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   133a0:	d4 e0       	ldi	r29, 0x04	; 4
   133a2:	6a cf       	rjmp	.-300    	; 0x13278 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>

000133a4 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   133a4:	1f 93       	push	r17
   133a6:	cf 93       	push	r28
   133a8:	df 93       	push	r29
   133aa:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   133ac:	88 e6       	ldi	r24, 0x68	; 104
   133ae:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   133b2:	60 e0       	ldi	r22, 0x00	; 0
   133b4:	80 e6       	ldi	r24, 0x60	; 96
   133b6:	9e e0       	ldi	r25, 0x0E	; 14
   133b8:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   133bc:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   133be:	1a e0       	ldi	r17, 0x0A	; 10
   133c0:	82 2f       	mov	r24, r18
   133c2:	61 2f       	mov	r22, r17
   133c4:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   133c8:	68 2f       	mov	r22, r24
   133ca:	66 0f       	add	r22, r22
   133cc:	68 0f       	add	r22, r24
   133ce:	66 0f       	add	r22, r22
   133d0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   133d2:	80 e6       	ldi	r24, 0x60	; 96
   133d4:	9e e0       	ldi	r25, 0x0E	; 14
   133d6:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   133da:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   133dc:	82 2f       	mov	r24, r18
   133de:	61 2f       	mov	r22, r17
   133e0:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   133e4:	68 2f       	mov	r22, r24
   133e6:	66 0f       	add	r22, r22
   133e8:	68 0f       	add	r22, r24
   133ea:	66 0f       	add	r22, r22
   133ec:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   133ee:	80 e6       	ldi	r24, 0x60	; 96
   133f0:	9e e0       	ldi	r25, 0x0E	; 14
   133f2:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   133f6:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   133f8:	82 2f       	mov	r24, r18
   133fa:	61 2f       	mov	r22, r17
   133fc:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   13400:	68 2f       	mov	r22, r24
   13402:	66 0f       	add	r22, r22
   13404:	68 0f       	add	r22, r24
   13406:	66 0f       	add	r22, r22
   13408:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   1340a:	80 e6       	ldi	r24, 0x60	; 96
   1340c:	9e e0       	ldi	r25, 0x0E	; 14
   1340e:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   13412:	60 e0       	ldi	r22, 0x00	; 0
   13414:	80 e6       	ldi	r24, 0x60	; 96
   13416:	9e e0       	ldi	r25, 0x0E	; 14
   13418:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   1341c:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1341e:	82 2f       	mov	r24, r18
   13420:	61 2f       	mov	r22, r17
   13422:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   13426:	68 2f       	mov	r22, r24
   13428:	66 0f       	add	r22, r22
   1342a:	68 0f       	add	r22, r24
   1342c:	66 0f       	add	r22, r22
   1342e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   13430:	80 e6       	ldi	r24, 0x60	; 96
   13432:	9e e0       	ldi	r25, 0x0E	; 14
   13434:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   13438:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1343a:	82 2f       	mov	r24, r18
   1343c:	61 2f       	mov	r22, r17
   1343e:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   13442:	68 2f       	mov	r22, r24
   13444:	66 0f       	add	r22, r22
   13446:	68 0f       	add	r22, r24
   13448:	66 0f       	add	r22, r22
   1344a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   1344c:	80 e6       	ldi	r24, 0x60	; 96
   1344e:	9e e0       	ldi	r25, 0x0E	; 14
   13450:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
   13454:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   13456:	82 2f       	mov	r24, r18
   13458:	61 2f       	mov	r22, r17
   1345a:	0e 94 a9 bc 	call	0x17952	; 0x17952 <__udivmodqi4>
   1345e:	68 2f       	mov	r22, r24
   13460:	66 0f       	add	r22, r22
   13462:	68 0f       	add	r22, r24
   13464:	66 0f       	add	r22, r22
   13466:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   13468:	80 e6       	ldi	r24, 0x60	; 96
   1346a:	9e e0       	ldi	r25, 0x0E	; 14
   1346c:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   13470:	80 e6       	ldi	r24, 0x60	; 96
   13472:	9e e0       	ldi	r25, 0x0E	; 14
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   13474:	df 91       	pop	r29
   13476:	cf 91       	pop	r28
   13478:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   1347a:	0c 94 bc 97 	jmp	0x12f78	; 0x12f78 <TwoWire::endTransmission()>

0001347e <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   1347e:	cf 93       	push	r28
   13480:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   13482:	fc 01       	movw	r30, r24
   13484:	a0 81       	ld	r26, Z
   13486:	b1 81       	ldd	r27, Z+1	; 0x01
   13488:	10 97       	sbiw	r26, 0x00	; 0
   1348a:	21 f4       	brne	.+8      	; 0x13494 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   1348c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   1348e:	df 91       	pop	r29
   13490:	cf 91       	pop	r28
   13492:	08 95       	ret
   13494:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   13496:	ed 91       	ld	r30, X+
   13498:	fc 91       	ld	r31, X
   1349a:	11 97       	sbiw	r26, 0x01	; 1
   1349c:	06 88       	ldd	r0, Z+22	; 0x16
   1349e:	f7 89       	ldd	r31, Z+23	; 0x17
   134a0:	e0 2d       	mov	r30, r0
   134a2:	cd 01       	movw	r24, r26
   134a4:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   134a6:	81 11       	cpse	r24, r1
   134a8:	1e c0       	rjmp	.+60     	; 0x134e6 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   134aa:	fe 01       	movw	r30, r28
   134ac:	e5 5e       	subi	r30, 0xE5	; 229
   134ae:	fd 4f       	sbci	r31, 0xFD	; 253
   134b0:	80 81       	ld	r24, Z
   134b2:	91 81       	ldd	r25, Z+1	; 0x01
   134b4:	89 2b       	or	r24, r25
   134b6:	51 f7       	brne	.-44     	; 0x1348c <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   134b8:	8d ef       	ldi	r24, 0xFD	; 253
   134ba:	9f ef       	ldi	r25, 0xFF	; 255
   134bc:	91 83       	std	Z+1, r25	; 0x01
   134be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   134c0:	88 81       	ld	r24, Y
   134c2:	99 81       	ldd	r25, Y+1	; 0x01
   134c4:	dc 01       	movw	r26, r24
   134c6:	ed 91       	ld	r30, X+
   134c8:	fc 91       	ld	r31, X
   134ca:	06 80       	ldd	r0, Z+6	; 0x06
   134cc:	f7 81       	ldd	r31, Z+7	; 0x07
   134ce:	e0 2d       	mov	r30, r0
   134d0:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   134d2:	88 81       	ld	r24, Y
   134d4:	99 81       	ldd	r25, Y+1	; 0x01
   134d6:	dc 01       	movw	r26, r24
   134d8:	ed 91       	ld	r30, X+
   134da:	fc 91       	ld	r31, X
   134dc:	04 88       	ldd	r0, Z+20	; 0x14
   134de:	f5 89       	ldd	r31, Z+21	; 0x15
   134e0:	e0 2d       	mov	r30, r0
   134e2:	19 95       	eicall
   134e4:	d3 cf       	rjmp	.-90     	; 0x1348c <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   134e6:	81 e0       	ldi	r24, 0x01	; 1
   134e8:	d2 cf       	rjmp	.-92     	; 0x1348e <PubSubClient::connected()+0x10>

000134ea <PubSubClient::loop() [clone .constprop.106]>:
_ZN12PubSubClient4loopEv.constprop.106():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   134ea:	3f 92       	push	r3
   134ec:	4f 92       	push	r4
   134ee:	5f 92       	push	r5
   134f0:	6f 92       	push	r6
   134f2:	7f 92       	push	r7
   134f4:	8f 92       	push	r8
   134f6:	9f 92       	push	r9
   134f8:	af 92       	push	r10
   134fa:	bf 92       	push	r11
   134fc:	cf 92       	push	r12
   134fe:	df 92       	push	r13
   13500:	ef 92       	push	r14
   13502:	ff 92       	push	r15
   13504:	0f 93       	push	r16
   13506:	1f 93       	push	r17
   13508:	cf 93       	push	r28
   1350a:	df 93       	push	r29
   1350c:	1f 92       	push	r1
   1350e:	cd b7       	in	r28, 0x3d	; 61
   13510:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   13512:	4d b6       	in	r4, 0x3d	; 61
   13514:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   13516:	89 e7       	ldi	r24, 0x79	; 121
   13518:	9e e0       	ldi	r25, 0x0E	; 14
   1351a:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   1351e:	98 2e       	mov	r9, r24
   13520:	88 23       	and	r24, r24
   13522:	09 f4       	brne	.+2      	; 0x13526 <PubSubClient::loop() [clone .constprop.106]+0x3c>
   13524:	45 c0       	rjmp	.+138    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   13526:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1352a:	6b 01       	movw	r12, r22
   1352c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   1352e:	80 91 81 10 	lds	r24, 0x1081	; 0x801081 <mqtt_client+0x208>
   13532:	90 91 82 10 	lds	r25, 0x1082	; 0x801082 <mqtt_client+0x209>
   13536:	a0 91 83 10 	lds	r26, 0x1083	; 0x801083 <mqtt_client+0x20a>
   1353a:	b0 91 84 10 	lds	r27, 0x1084	; 0x801084 <mqtt_client+0x20b>
   1353e:	a7 01       	movw	r20, r14
   13540:	96 01       	movw	r18, r12
   13542:	28 1b       	sub	r18, r24
   13544:	39 0b       	sbc	r19, r25
   13546:	4a 0b       	sbc	r20, r26
   13548:	5b 0b       	sbc	r21, r27
   1354a:	da 01       	movw	r26, r20
   1354c:	c9 01       	movw	r24, r18
   1354e:	89 39       	cpi	r24, 0x99	; 153
   13550:	9a 43       	sbci	r25, 0x3A	; 58
   13552:	a1 05       	cpc	r26, r1
   13554:	b1 05       	cpc	r27, r1
   13556:	b0 f4       	brcc	.+44     	; 0x13584 <PubSubClient::loop() [clone .constprop.106]+0x9a>
   13558:	80 91 7d 10 	lds	r24, 0x107D	; 0x80107d <mqtt_client+0x204>
   1355c:	90 91 7e 10 	lds	r25, 0x107E	; 0x80107e <mqtt_client+0x205>
   13560:	a0 91 7f 10 	lds	r26, 0x107F	; 0x80107f <mqtt_client+0x206>
   13564:	b0 91 80 10 	lds	r27, 0x1080	; 0x801080 <mqtt_client+0x207>
   13568:	a7 01       	movw	r20, r14
   1356a:	96 01       	movw	r18, r12
   1356c:	28 1b       	sub	r18, r24
   1356e:	39 0b       	sbc	r19, r25
   13570:	4a 0b       	sbc	r20, r26
   13572:	5b 0b       	sbc	r21, r27
   13574:	da 01       	movw	r26, r20
   13576:	c9 01       	movw	r24, r18
   13578:	89 39       	cpi	r24, 0x99	; 153
   1357a:	9a 43       	sbci	r25, 0x3A	; 58
   1357c:	a1 05       	cpc	r26, r1
   1357e:	b1 05       	cpc	r27, r1
   13580:	08 f4       	brcc	.+2      	; 0x13584 <PubSubClient::loop() [clone .constprop.106]+0x9a>
   13582:	52 c0       	rjmp	.+164    	; 0x13628 <PubSubClient::loop() [clone .constprop.106]+0x13e>
   13584:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   13588:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   1358c:	20 91 85 10 	lds	r18, 0x1085	; 0x801085 <mqtt_client+0x20c>
   13590:	22 23       	and	r18, r18
   13592:	39 f1       	breq	.+78     	; 0x135e2 <PubSubClient::loop() [clone .constprop.106]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   13594:	2c ef       	ldi	r18, 0xFC	; 252
   13596:	3f ef       	ldi	r19, 0xFF	; 255
   13598:	30 93 95 10 	sts	0x1095, r19	; 0x801095 <mqtt_client+0x21c>
   1359c:	20 93 94 10 	sts	0x1094, r18	; 0x801094 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   135a0:	dc 01       	movw	r26, r24
   135a2:	ed 91       	ld	r30, X+
   135a4:	fc 91       	ld	r31, X
   135a6:	04 88       	ldd	r0, Z+20	; 0x14
   135a8:	f5 89       	ldd	r31, Z+21	; 0x15
   135aa:	e0 2d       	mov	r30, r0
   135ac:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   135ae:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   135b0:	89 2d       	mov	r24, r9
   135b2:	0f b6       	in	r0, 0x3f	; 63
   135b4:	f8 94       	cli
   135b6:	5e be       	out	0x3e, r5	; 62
   135b8:	0f be       	out	0x3f, r0	; 63
   135ba:	4d be       	out	0x3d, r4	; 61
   135bc:	0f 90       	pop	r0
   135be:	df 91       	pop	r29
   135c0:	cf 91       	pop	r28
   135c2:	1f 91       	pop	r17
   135c4:	0f 91       	pop	r16
   135c6:	ff 90       	pop	r15
   135c8:	ef 90       	pop	r14
   135ca:	df 90       	pop	r13
   135cc:	cf 90       	pop	r12
   135ce:	bf 90       	pop	r11
   135d0:	af 90       	pop	r10
   135d2:	9f 90       	pop	r9
   135d4:	8f 90       	pop	r8
   135d6:	7f 90       	pop	r7
   135d8:	6f 90       	pop	r6
   135da:	5f 90       	pop	r5
   135dc:	4f 90       	pop	r4
   135de:	3f 90       	pop	r3
   135e0:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   135e2:	20 ec       	ldi	r18, 0xC0	; 192
   135e4:	20 93 7b 0e 	sts	0x0E7B, r18	; 0x800e7b <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   135e8:	10 92 7c 0e 	sts	0x0E7C, r1	; 0x800e7c <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   135ec:	dc 01       	movw	r26, r24
   135ee:	ed 91       	ld	r30, X+
   135f0:	fc 91       	ld	r31, X
   135f2:	02 80       	ldd	r0, Z+2	; 0x02
   135f4:	f3 81       	ldd	r31, Z+3	; 0x03
   135f6:	e0 2d       	mov	r30, r0
   135f8:	42 e0       	ldi	r20, 0x02	; 2
   135fa:	50 e0       	ldi	r21, 0x00	; 0
   135fc:	6b e7       	ldi	r22, 0x7B	; 123
   135fe:	7e e0       	ldi	r23, 0x0E	; 14
   13600:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   13602:	c0 92 7d 10 	sts	0x107D, r12	; 0x80107d <mqtt_client+0x204>
   13606:	d0 92 7e 10 	sts	0x107E, r13	; 0x80107e <mqtt_client+0x205>
   1360a:	e0 92 7f 10 	sts	0x107F, r14	; 0x80107f <mqtt_client+0x206>
   1360e:	f0 92 80 10 	sts	0x1080, r15	; 0x801080 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   13612:	c0 92 81 10 	sts	0x1081, r12	; 0x801081 <mqtt_client+0x208>
   13616:	d0 92 82 10 	sts	0x1082, r13	; 0x801082 <mqtt_client+0x209>
   1361a:	e0 92 83 10 	sts	0x1083, r14	; 0x801083 <mqtt_client+0x20a>
   1361e:	f0 92 84 10 	sts	0x1084, r15	; 0x801084 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   13622:	81 e0       	ldi	r24, 0x01	; 1
   13624:	80 93 85 10 	sts	0x1085, r24	; 0x801085 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   13628:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   1362c:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
   13630:	dc 01       	movw	r26, r24
   13632:	ed 91       	ld	r30, X+
   13634:	fc 91       	ld	r31, X
   13636:	00 84       	ldd	r0, Z+8	; 0x08
   13638:	f1 85       	ldd	r31, Z+9	; 0x09
   1363a:	e0 2d       	mov	r30, r0
   1363c:	19 95       	eicall
   1363e:	89 2b       	or	r24, r25
   13640:	09 f4       	brne	.+2      	; 0x13644 <PubSubClient::loop() [clone .constprop.106]+0x15a>
   13642:	b6 cf       	rjmp	.-148    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   13644:	ce 01       	movw	r24, r28
   13646:	01 96       	adiw	r24, 0x01	; 1
   13648:	0e 94 8d 93 	call	0x1271a	; 0x1271a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
   1364c:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   1364e:	89 2b       	or	r24, r25
   13650:	09 f4       	brne	.+2      	; 0x13654 <PubSubClient::loop() [clone .constprop.106]+0x16a>
   13652:	ae cf       	rjmp	.-164    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   13654:	c0 92 81 10 	sts	0x1081, r12	; 0x801081 <mqtt_client+0x208>
   13658:	d0 92 82 10 	sts	0x1082, r13	; 0x801082 <mqtt_client+0x209>
   1365c:	e0 92 83 10 	sts	0x1083, r14	; 0x801083 <mqtt_client+0x20a>
   13660:	f0 92 84 10 	sts	0x1084, r15	; 0x801084 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   13664:	80 90 7b 0e 	lds	r8, 0x0E7B	; 0x800e7b <mqtt_client+0x2>
   13668:	88 2d       	mov	r24, r8
   1366a:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   1366c:	80 33       	cpi	r24, 0x30	; 48
   1366e:	09 f0       	breq	.+2      	; 0x13672 <PubSubClient::loop() [clone .constprop.106]+0x188>
   13670:	83 c0       	rjmp	.+262    	; 0x13778 <PubSubClient::loop() [clone .constprop.106]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   13672:	a0 90 86 10 	lds	r10, 0x1086	; 0x801086 <mqtt_client+0x20d>
   13676:	b0 90 87 10 	lds	r11, 0x1087	; 0x801087 <mqtt_client+0x20e>
   1367a:	a1 14       	cp	r10, r1
   1367c:	b1 04       	cpc	r11, r1
   1367e:	09 f4       	brne	.+2      	; 0x13682 <PubSubClient::loop() [clone .constprop.106]+0x198>
   13680:	97 cf       	rjmp	.-210    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   13682:	6d b6       	in	r6, 0x3d	; 61
   13684:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   13686:	69 81       	ldd	r22, Y+1	; 0x01
   13688:	70 e0       	ldi	r23, 0x00	; 0
   1368a:	fb 01       	movw	r30, r22
   1368c:	e7 58       	subi	r30, 0x87	; 135
   1368e:	f1 4f       	sbci	r31, 0xF1	; 241
   13690:	23 81       	ldd	r18, Z+3	; 0x03
   13692:	30 e0       	ldi	r19, 0x00	; 0
   13694:	32 2f       	mov	r19, r18
   13696:	22 27       	eor	r18, r18
   13698:	84 81       	ldd	r24, Z+4	; 0x04
   1369a:	28 0f       	add	r18, r24
   1369c:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   1369e:	c9 01       	movw	r24, r18
   136a0:	01 96       	adiw	r24, 0x01	; 1
   136a2:	ed b7       	in	r30, 0x3d	; 61
   136a4:	fe b7       	in	r31, 0x3e	; 62
   136a6:	e8 1b       	sub	r30, r24
   136a8:	f9 0b       	sbc	r31, r25
   136aa:	0f b6       	in	r0, 0x3f	; 63
   136ac:	f8 94       	cli
   136ae:	fe bf       	out	0x3e, r31	; 62
   136b0:	0f be       	out	0x3f, r0	; 63
   136b2:	ed bf       	out	0x3d, r30	; 61
   136b4:	8d b7       	in	r24, 0x3d	; 61
   136b6:	9e b7       	in	r25, 0x3e	; 62
   136b8:	01 96       	adiw	r24, 0x01	; 1
   136ba:	db 01       	movw	r26, r22
   136bc:	a2 58       	subi	r26, 0x82	; 130
   136be:	b1 4f       	sbci	r27, 0xF1	; 241
   136c0:	fc 01       	movw	r30, r24
   136c2:	8c 01       	movw	r16, r24
   136c4:	02 0f       	add	r16, r18
   136c6:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   136c8:	e0 17       	cp	r30, r16
   136ca:	f1 07       	cpc	r31, r17
   136cc:	19 f0       	breq	.+6      	; 0x136d4 <PubSubClient::loop() [clone .constprop.106]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   136ce:	3d 90       	ld	r3, X+
   136d0:	31 92       	st	Z+, r3
   136d2:	fa cf       	rjmp	.-12     	; 0x136c8 <PubSubClient::loop() [clone .constprop.106]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   136d4:	10 82       	st	Z, r1
   136d6:	da 01       	movw	r26, r20
   136d8:	a6 1b       	sub	r26, r22
   136da:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   136dc:	f8 2d       	mov	r31, r8
   136de:	f6 70       	andi	r31, 0x06	; 6
   136e0:	8f 2e       	mov	r8, r31
   136e2:	42 e0       	ldi	r20, 0x02	; 2
   136e4:	f4 13       	cpse	r31, r20
   136e6:	3c c0       	rjmp	.+120    	; 0x13760 <PubSubClient::loop() [clone .constprop.106]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   136e8:	62 0f       	add	r22, r18
   136ea:	73 1f       	adc	r23, r19
   136ec:	fb 01       	movw	r30, r22
   136ee:	e7 58       	subi	r30, 0x87	; 135
   136f0:	f1 4f       	sbci	r31, 0xF1	; 241
   136f2:	45 81       	ldd	r20, Z+5	; 0x05
   136f4:	50 e0       	ldi	r21, 0x00	; 0
   136f6:	54 2f       	mov	r21, r20
   136f8:	44 27       	eor	r20, r20
   136fa:	06 81       	ldd	r16, Z+6	; 0x06
   136fc:	04 0f       	add	r16, r20
   136fe:	15 2f       	mov	r17, r21
   13700:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   13702:	ad 01       	movw	r20, r26
   13704:	42 1b       	sub	r20, r18
   13706:	53 0b       	sbc	r21, r19
   13708:	45 50       	subi	r20, 0x05	; 5
   1370a:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   1370c:	60 58       	subi	r22, 0x80	; 128
   1370e:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   13710:	f5 01       	movw	r30, r10
   13712:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   13714:	80 e4       	ldi	r24, 0x40	; 64
   13716:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   1371a:	80 92 7c 0e 	sts	0x0E7C, r8	; 0x800e7c <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   1371e:	10 93 7d 0e 	sts	0x0E7D, r17	; 0x800e7d <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   13722:	00 93 7e 0e 	sts	0x0E7E, r16	; 0x800e7e <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   13726:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   1372a:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
   1372e:	dc 01       	movw	r26, r24
   13730:	ed 91       	ld	r30, X+
   13732:	fc 91       	ld	r31, X
   13734:	02 80       	ldd	r0, Z+2	; 0x02
   13736:	f3 81       	ldd	r31, Z+3	; 0x03
   13738:	e0 2d       	mov	r30, r0
   1373a:	44 e0       	ldi	r20, 0x04	; 4
   1373c:	50 e0       	ldi	r21, 0x00	; 0
   1373e:	6b e7       	ldi	r22, 0x7B	; 123
   13740:	7e e0       	ldi	r23, 0x0E	; 14
   13742:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   13744:	c0 92 7d 10 	sts	0x107D, r12	; 0x80107d <mqtt_client+0x204>
   13748:	d0 92 7e 10 	sts	0x107E, r13	; 0x80107e <mqtt_client+0x205>
   1374c:	e0 92 7f 10 	sts	0x107F, r14	; 0x80107f <mqtt_client+0x206>
   13750:	f0 92 80 10 	sts	0x1080, r15	; 0x801080 <mqtt_client+0x207>
   13754:	0f b6       	in	r0, 0x3f	; 63
   13756:	f8 94       	cli
   13758:	7e be       	out	0x3e, r7	; 62
   1375a:	0f be       	out	0x3f, r0	; 63
   1375c:	6d be       	out	0x3d, r6	; 61
   1375e:	28 cf       	rjmp	.-432    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   13760:	ad 01       	movw	r20, r26
   13762:	42 1b       	sub	r20, r18
   13764:	53 0b       	sbc	r21, r19
   13766:	43 50       	subi	r20, 0x03	; 3
   13768:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   1376a:	62 0f       	add	r22, r18
   1376c:	73 1f       	adc	r23, r19
   1376e:	62 58       	subi	r22, 0x82	; 130
   13770:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   13772:	f5 01       	movw	r30, r10
   13774:	19 95       	eicall
   13776:	ee cf       	rjmp	.-36     	; 0x13754 <PubSubClient::loop() [clone .constprop.106]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   13778:	80 3c       	cpi	r24, 0xC0	; 192
   1377a:	a9 f4       	brne	.+42     	; 0x137a6 <PubSubClient::loop() [clone .constprop.106]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   1377c:	80 ed       	ldi	r24, 0xD0	; 208
   1377e:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   13782:	10 92 7c 0e 	sts	0x0E7C, r1	; 0x800e7c <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   13786:	80 91 79 0e 	lds	r24, 0x0E79	; 0x800e79 <mqtt_client>
   1378a:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <mqtt_client+0x1>
   1378e:	dc 01       	movw	r26, r24
   13790:	ed 91       	ld	r30, X+
   13792:	fc 91       	ld	r31, X
   13794:	02 80       	ldd	r0, Z+2	; 0x02
   13796:	f3 81       	ldd	r31, Z+3	; 0x03
   13798:	e0 2d       	mov	r30, r0
   1379a:	42 e0       	ldi	r20, 0x02	; 2
   1379c:	50 e0       	ldi	r21, 0x00	; 0
   1379e:	6b e7       	ldi	r22, 0x7B	; 123
   137a0:	7e e0       	ldi	r23, 0x0E	; 14
   137a2:	19 95       	eicall
   137a4:	05 cf       	rjmp	.-502    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   137a6:	80 3d       	cpi	r24, 0xD0	; 208
   137a8:	09 f0       	breq	.+2      	; 0x137ac <PubSubClient::loop() [clone .constprop.106]+0x2c2>
   137aa:	02 cf       	rjmp	.-508    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   137ac:	10 92 85 10 	sts	0x1085, r1	; 0x801085 <mqtt_client+0x20c>
   137b0:	ff ce       	rjmp	.-514    	; 0x135b0 <PubSubClient::loop() [clone .constprop.106]+0xc6>

000137b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   137b2:	bf 92       	push	r11
   137b4:	cf 92       	push	r12
   137b6:	df 92       	push	r13
   137b8:	ef 92       	push	r14
   137ba:	ff 92       	push	r15
   137bc:	0f 93       	push	r16
   137be:	1f 93       	push	r17
   137c0:	cf 93       	push	r28
   137c2:	df 93       	push	r29
   137c4:	00 d0       	rcall	.+0      	; 0x137c6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   137c6:	1f 92       	push	r1
   137c8:	cd b7       	in	r28, 0x3d	; 61
   137ca:	de b7       	in	r29, 0x3e	; 62
   137cc:	7c 01       	movw	r14, r24
   137ce:	b6 2e       	mov	r11, r22
   137d0:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   137d2:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   137d4:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   137d6:	be 01       	movw	r22, r28
   137d8:	6f 5f       	subi	r22, 0xFF	; 255
   137da:	7f 4f       	sbci	r23, 0xFF	; 255
   137dc:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   137de:	28 2f       	mov	r18, r24
   137e0:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   137e2:	88 0f       	add	r24, r24
   137e4:	89 2f       	mov	r24, r25
   137e6:	88 1f       	adc	r24, r24
   137e8:	99 0b       	sbc	r25, r25
   137ea:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   137ec:	00 97       	sbiw	r24, 0x00	; 0
   137ee:	09 f0       	breq	.+2      	; 0x137f2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   137f0:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   137f2:	f6 01       	movw	r30, r12
   137f4:	e3 0f       	add	r30, r19
   137f6:	f1 1d       	adc	r31, r1
   137f8:	20 83       	st	Z, r18
   137fa:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   137fc:	00 97       	sbiw	r24, 0x00	; 0
   137fe:	79 f7       	brne	.-34     	; 0x137de <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   13800:	e3 2f       	mov	r30, r19
   13802:	f0 e0       	ldi	r31, 0x00	; 0
   13804:	ba 01       	movw	r22, r20
   13806:	6e 1b       	sub	r22, r30
   13808:	7f 0b       	sbc	r23, r31
   1380a:	6c 5f       	subi	r22, 0xFC	; 252
   1380c:	7f 4f       	sbci	r23, 0xFF	; 255
   1380e:	db 01       	movw	r26, r22
   13810:	bc 92       	st	X, r11
   13812:	4e 1b       	sub	r20, r30
   13814:	5f 0b       	sbc	r21, r31
   13816:	4b 5f       	subi	r20, 0xFB	; 251
   13818:	5f 4f       	sbci	r21, 0xFF	; 255
   1381a:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   1381c:	9c 01       	movw	r18, r24
   1381e:	2c 19       	sub	r18, r12
   13820:	3d 09       	sbc	r19, r13
   13822:	2e 17       	cp	r18, r30
   13824:	3f 07       	cpc	r19, r31
   13826:	3c f4       	brge	.+14     	; 0x13836 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   13828:	dc 01       	movw	r26, r24
   1382a:	2d 91       	ld	r18, X+
   1382c:	cd 01       	movw	r24, r26
   1382e:	da 01       	movw	r26, r20
   13830:	2d 93       	st	X+, r18
   13832:	ad 01       	movw	r20, r26
   13834:	f3 cf       	rjmp	.-26     	; 0x1381c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   13836:	d7 01       	movw	r26, r14
   13838:	8d 91       	ld	r24, X+
   1383a:	9c 91       	ld	r25, X
   1383c:	0f 5f       	subi	r16, 0xFF	; 255
   1383e:	1f 4f       	sbci	r17, 0xFF	; 255
   13840:	0e 0f       	add	r16, r30
   13842:	1f 1f       	adc	r17, r31
   13844:	dc 01       	movw	r26, r24
   13846:	ed 91       	ld	r30, X+
   13848:	fc 91       	ld	r31, X
   1384a:	02 80       	ldd	r0, Z+2	; 0x02
   1384c:	f3 81       	ldd	r31, Z+3	; 0x03
   1384e:	e0 2d       	mov	r30, r0
   13850:	a8 01       	movw	r20, r16
   13852:	19 95       	eicall
   13854:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   13856:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1385a:	f7 01       	movw	r30, r14
   1385c:	ec 5f       	subi	r30, 0xFC	; 252
   1385e:	fd 4f       	sbci	r31, 0xFD	; 253
   13860:	60 83       	st	Z, r22
   13862:	71 83       	std	Z+1, r23	; 0x01
   13864:	82 83       	std	Z+2, r24	; 0x02
   13866:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   13868:	81 e0       	ldi	r24, 0x01	; 1
   1386a:	0c 15       	cp	r16, r12
   1386c:	1d 05       	cpc	r17, r13
   1386e:	09 f0       	breq	.+2      	; 0x13872 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   13870:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   13872:	0f 90       	pop	r0
   13874:	0f 90       	pop	r0
   13876:	0f 90       	pop	r0
   13878:	0f 90       	pop	r0
   1387a:	df 91       	pop	r29
   1387c:	cf 91       	pop	r28
   1387e:	1f 91       	pop	r17
   13880:	0f 91       	pop	r16
   13882:	ff 90       	pop	r15
   13884:	ef 90       	pop	r14
   13886:	df 90       	pop	r13
   13888:	cf 90       	pop	r12
   1388a:	bf 90       	pop	r11
   1388c:	08 95       	ret

0001388e <PubSubClient::subscribe(char const*) [clone .constprop.145]>:
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   1388e:	cf 93       	push	r28
   13890:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   13892:	fc 01       	movw	r30, r24
   13894:	01 90       	ld	r0, Z+
   13896:	00 20       	and	r0, r0
   13898:	e9 f7       	brne	.-6      	; 0x13894 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x6>
   1389a:	9f 01       	movw	r18, r30
   1389c:	28 1b       	sub	r18, r24
   1389e:	39 0b       	sbc	r19, r25
   138a0:	28 5f       	subi	r18, 0xF8	; 248
   138a2:	3f 4f       	sbci	r19, 0xFF	; 255
   138a4:	21 30       	cpi	r18, 0x01	; 1
   138a6:	32 40       	sbci	r19, 0x02	; 2
   138a8:	98 f5       	brcc	.+102    	; 0x13910 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
   138aa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   138ac:	89 e7       	ldi	r24, 0x79	; 121
   138ae:	9e e0       	ldi	r25, 0x0E	; 14
   138b0:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   138b4:	88 23       	and	r24, r24
   138b6:	61 f1       	breq	.+88     	; 0x13910 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   138b8:	80 91 7b 10 	lds	r24, 0x107B	; 0x80107b <mqtt_client+0x202>
   138bc:	90 91 7c 10 	lds	r25, 0x107C	; 0x80107c <mqtt_client+0x203>
   138c0:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   138c2:	19 f1       	breq	.+70     	; 0x1390a <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   138c4:	90 93 7c 10 	sts	0x107C, r25	; 0x80107c <mqtt_client+0x203>
   138c8:	80 93 7b 10 	sts	0x107B, r24	; 0x80107b <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   138cc:	80 91 7b 10 	lds	r24, 0x107B	; 0x80107b <mqtt_client+0x202>
   138d0:	90 91 7c 10 	lds	r25, 0x107C	; 0x80107c <mqtt_client+0x203>
   138d4:	90 93 80 0e 	sts	0x0E80, r25	; 0x800e80 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   138d8:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   138dc:	47 e0       	ldi	r20, 0x07	; 7
   138de:	50 e0       	ldi	r21, 0x00	; 0
   138e0:	6b e7       	ldi	r22, 0x7B	; 123
   138e2:	7e e0       	ldi	r23, 0x0E	; 14
   138e4:	ce 01       	movw	r24, r28
   138e6:	0e 94 d1 8b 	call	0x117a2	; 0x117a2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   138ea:	fc 01       	movw	r30, r24
   138ec:	e7 58       	subi	r30, 0x87	; 135
   138ee:	f1 4f       	sbci	r31, 0xF1	; 241
   138f0:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   138f2:	9c 01       	movw	r18, r24
   138f4:	24 50       	subi	r18, 0x04	; 4
   138f6:	31 09       	sbc	r19, r1
   138f8:	4b e7       	ldi	r20, 0x7B	; 123
   138fa:	5e e0       	ldi	r21, 0x0E	; 14
   138fc:	62 e8       	ldi	r22, 0x82	; 130
   138fe:	89 e7       	ldi	r24, 0x79	; 121
   13900:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   13902:	df 91       	pop	r29
   13904:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   13906:	0c 94 d9 9b 	jmp	0x137b2	; 0x137b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   1390a:	81 e0       	ldi	r24, 0x01	; 1
   1390c:	90 e0       	ldi	r25, 0x00	; 0
   1390e:	da cf       	rjmp	.-76     	; 0x138c4 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   13910:	80 e0       	ldi	r24, 0x00	; 0
   13912:	df 91       	pop	r29
   13914:	cf 91       	pop	r28
   13916:	08 95       	ret

00013918 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   13918:	af 92       	push	r10
   1391a:	bf 92       	push	r11
   1391c:	cf 92       	push	r12
   1391e:	df 92       	push	r13
   13920:	ef 92       	push	r14
   13922:	ff 92       	push	r15
   13924:	0f 93       	push	r16
   13926:	1f 93       	push	r17
   13928:	cf 93       	push	r28
   1392a:	df 93       	push	r29
   1392c:	7c 01       	movw	r14, r24
   1392e:	5b 01       	movw	r10, r22
   13930:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   13932:	ea 01       	movw	r28, r20
   13934:	09 90       	ld	r0, Y+
   13936:	00 20       	and	r0, r0
   13938:	e9 f7       	brne	.-6      	; 0x13934 <PubSubClient::publish(char const*, char const*)+0x1c>
   1393a:	21 97       	sbiw	r28, 0x01	; 1
   1393c:	c4 1b       	sub	r28, r20
   1393e:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   13940:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   13944:	88 23       	and	r24, r24
   13946:	c9 f1       	breq	.+114    	; 0x139ba <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   13948:	f5 01       	movw	r30, r10
   1394a:	01 90       	ld	r0, Z+
   1394c:	00 20       	and	r0, r0
   1394e:	e9 f7       	brne	.-6      	; 0x1394a <PubSubClient::publish(char const*, char const*)+0x32>
   13950:	31 97       	sbiw	r30, 0x01	; 1
   13952:	ea 19       	sub	r30, r10
   13954:	fb 09       	sbc	r31, r11
   13956:	ce 01       	movw	r24, r28
   13958:	07 96       	adiw	r24, 0x07	; 7
   1395a:	e8 0f       	add	r30, r24
   1395c:	f9 1f       	adc	r31, r25
   1395e:	e1 30       	cpi	r30, 0x01	; 1
   13960:	f2 40       	sbci	r31, 0x02	; 2
   13962:	58 f5       	brcc	.+86     	; 0x139ba <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   13964:	67 01       	movw	r12, r14
   13966:	82 e0       	ldi	r24, 0x02	; 2
   13968:	c8 0e       	add	r12, r24
   1396a:	d1 1c       	adc	r13, r1
   1396c:	45 e0       	ldi	r20, 0x05	; 5
   1396e:	50 e0       	ldi	r21, 0x00	; 0
   13970:	b6 01       	movw	r22, r12
   13972:	c5 01       	movw	r24, r10
   13974:	0e 94 d1 8b 	call	0x117a2	; 0x117a2 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
   13978:	f8 01       	movw	r30, r16
   1397a:	dc 01       	movw	r26, r24
   1397c:	12 96       	adiw	r26, 0x02	; 2
   1397e:	ae 0d       	add	r26, r14
   13980:	bf 1d       	adc	r27, r15
   13982:	a8 01       	movw	r20, r16
   13984:	4c 0f       	add	r20, r28
   13986:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   13988:	e4 17       	cp	r30, r20
   1398a:	f5 07       	cpc	r31, r21
   1398c:	19 f0       	breq	.+6      	; 0x13994 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   1398e:	21 91       	ld	r18, Z+
   13990:	2d 93       	st	X+, r18
   13992:	fa cf       	rjmp	.-12     	; 0x13988 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   13994:	25 97       	sbiw	r28, 0x05	; 5
   13996:	9e 01       	movw	r18, r28
   13998:	28 0f       	add	r18, r24
   1399a:	39 1f       	adc	r19, r25
   1399c:	a6 01       	movw	r20, r12
   1399e:	60 e3       	ldi	r22, 0x30	; 48
   139a0:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   139a2:	df 91       	pop	r29
   139a4:	cf 91       	pop	r28
   139a6:	1f 91       	pop	r17
   139a8:	0f 91       	pop	r16
   139aa:	ff 90       	pop	r15
   139ac:	ef 90       	pop	r14
   139ae:	df 90       	pop	r13
   139b0:	cf 90       	pop	r12
   139b2:	bf 90       	pop	r11
   139b4:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   139b6:	0c 94 d9 9b 	jmp	0x137b2	; 0x137b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   139ba:	80 e0       	ldi	r24, 0x00	; 0
   139bc:	df 91       	pop	r29
   139be:	cf 91       	pop	r28
   139c0:	1f 91       	pop	r17
   139c2:	0f 91       	pop	r16
   139c4:	ff 90       	pop	r15
   139c6:	ef 90       	pop	r14
   139c8:	df 90       	pop	r13
   139ca:	cf 90       	pop	r12
   139cc:	bf 90       	pop	r11
   139ce:	af 90       	pop	r10
   139d0:	08 95       	ret

000139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   139d2:	af 92       	push	r10
   139d4:	bf 92       	push	r11
   139d6:	df 92       	push	r13
   139d8:	ef 92       	push	r14
   139da:	ff 92       	push	r15
   139dc:	0f 93       	push	r16
   139de:	1f 93       	push	r17
   139e0:	cf 93       	push	r28
   139e2:	df 93       	push	r29
   139e4:	cd b7       	in	r28, 0x3d	; 61
   139e6:	de b7       	in	r29, 0x3e	; 62
   139e8:	c6 55       	subi	r28, 0x56	; 86
   139ea:	d1 09       	sbc	r29, r1
   139ec:	0f b6       	in	r0, 0x3f	; 63
   139ee:	f8 94       	cli
   139f0:	de bf       	out	0x3e, r29	; 62
   139f2:	0f be       	out	0x3f, r0	; 63
   139f4:	cd bf       	out	0x3d, r28	; 61
   139f6:	5c 01       	movw	r10, r24
   139f8:	d6 2e       	mov	r13, r22
   139fa:	7a 01       	movw	r14, r20
   139fc:	89 01       	movw	r16, r18
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   139fe:	89 e7       	ldi	r24, 0x79	; 121
   13a00:	9e e0       	ldi	r25, 0x0E	; 14
   13a02:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   13a06:	88 23       	and	r24, r24
   13a08:	09 f4       	brne	.+2      	; 0x13a0c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0x3a>
   13a0a:	52 c0       	rjmp	.+164    	; 0x13ab0 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xde>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   13a0c:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <mqtt_send_message>
   13a10:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <mqtt_send_message+0x1>
   13a14:	01 96       	adiw	r24, 0x01	; 1
   13a16:	90 93 d1 0b 	sts	0x0BD1, r25	; 0x800bd1 <mqtt_send_message+0x1>
   13a1a:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   13a1e:	ce 01       	movw	r24, r28
   13a20:	83 5b       	subi	r24, 0xB3	; 179
   13a22:	9f 4f       	sbci	r25, 0xFF	; 255
   13a24:	0e 94 8d 61 	call	0xc31a	; 0xc31a <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   13a28:	60 91 ce 0b 	lds	r22, 0x0BCE	; 0x800bce <header_out>
   13a2c:	70 91 cf 0b 	lds	r23, 0x0BCF	; 0x800bcf <header_out+0x1>
   13a30:	ce 01       	movw	r24, r28
   13a32:	01 96       	adiw	r24, 0x01	; 1
   13a34:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   13a38:	be 01       	movw	r22, r28
   13a3a:	63 5b       	subi	r22, 0xB3	; 179
   13a3c:	7f 4f       	sbci	r23, 0xFF	; 255
   13a3e:	ce 01       	movw	r24, r28
   13a40:	01 96       	adiw	r24, 0x01	; 1
   13a42:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   13a46:	68 ee       	ldi	r22, 0xE8	; 232
   13a48:	73 e0       	ldi	r23, 0x03	; 3
   13a4a:	ce 01       	movw	r24, r28
   13a4c:	01 96       	adiw	r24, 0x01	; 1
   13a4e:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   13a52:	b5 01       	movw	r22, r10
   13a54:	ce 01       	movw	r24, r28
   13a56:	01 96       	adiw	r24, 0x01	; 1
   13a58:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   13a5c:	68 ee       	ldi	r22, 0xE8	; 232
   13a5e:	73 e0       	ldi	r23, 0x03	; 3
   13a60:	ce 01       	movw	r24, r28
   13a62:	01 96       	adiw	r24, 0x01	; 1
   13a64:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13a68:	4a e0       	ldi	r20, 0x0A	; 10
   13a6a:	be 01       	movw	r22, r28
   13a6c:	6f 5b       	subi	r22, 0xBF	; 191
   13a6e:	7f 4f       	sbci	r23, 0xFF	; 255
   13a70:	8d 2d       	mov	r24, r13
   13a72:	90 e0       	ldi	r25, 0x00	; 0
   13a74:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   13a78:	be 01       	movw	r22, r28
   13a7a:	6f 5b       	subi	r22, 0xBF	; 191
   13a7c:	7f 4f       	sbci	r23, 0xFF	; 255
   13a7e:	ce 01       	movw	r24, r28
   13a80:	01 96       	adiw	r24, 0x01	; 1
   13a82:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   13a86:	68 ee       	ldi	r22, 0xE8	; 232
   13a88:	73 e0       	ldi	r23, 0x03	; 3
   13a8a:	ce 01       	movw	r24, r28
   13a8c:	01 96       	adiw	r24, 0x01	; 1
   13a8e:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   13a92:	b7 01       	movw	r22, r14
   13a94:	ce 01       	movw	r24, r28
   13a96:	01 96       	adiw	r24, 0x01	; 1
   13a98:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   13a9c:	a8 01       	movw	r20, r16
   13a9e:	be 01       	movw	r22, r28
   13aa0:	6f 5f       	subi	r22, 0xFF	; 255
   13aa2:	7f 4f       	sbci	r23, 0xFF	; 255
   13aa4:	89 e7       	ldi	r24, 0x79	; 121
   13aa6:	9e e0       	ldi	r25, 0x0E	; 14
   13aa8:	0e 94 8c 9c 	call	0x13918	; 0x13918 <PubSubClient::publish(char const*, char const*)>
   13aac:	81 11       	cpse	r24, r1
   13aae:	09 c0       	rjmp	.+18     	; 0x13ac2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xf0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   13ab0:	80 91 d2 0b 	lds	r24, 0x0BD2	; 0x800bd2 <mqtt_error>
   13ab4:	90 91 d3 0b 	lds	r25, 0x0BD3	; 0x800bd3 <mqtt_error+0x1>
   13ab8:	01 96       	adiw	r24, 0x01	; 1
   13aba:	90 93 d3 0b 	sts	0x0BD3, r25	; 0x800bd3 <mqtt_error+0x1>
   13abe:	80 93 d2 0b 	sts	0x0BD2, r24	; 0x800bd2 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:187
}
   13ac2:	ca 5a       	subi	r28, 0xAA	; 170
   13ac4:	df 4f       	sbci	r29, 0xFF	; 255
   13ac6:	0f b6       	in	r0, 0x3f	; 63
   13ac8:	f8 94       	cli
   13aca:	de bf       	out	0x3e, r29	; 62
   13acc:	0f be       	out	0x3f, r0	; 63
   13ace:	cd bf       	out	0x3d, r28	; 61
   13ad0:	df 91       	pop	r29
   13ad2:	cf 91       	pop	r28
   13ad4:	1f 91       	pop	r17
   13ad6:	0f 91       	pop	r16
   13ad8:	ff 90       	pop	r15
   13ada:	ef 90       	pop	r14
   13adc:	df 90       	pop	r13
   13ade:	bf 90       	pop	r11
   13ae0:	af 90       	pop	r10
   13ae2:	08 95       	ret

00013ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.223():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   13ae4:	0c 94 ee ba 	jmp	0x175dc	; 0x175dc <eeprom_write_byte>

00013ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.227():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   13ae8:	0c 94 e6 ba 	jmp	0x175cc	; 0x175cc <eeprom_read_byte>

00013aec <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>:
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   13aec:	1f 93       	push	r17
   13aee:	cf 93       	push	r28
   13af0:	df 93       	push	r29
   13af2:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   13af4:	91 e2       	ldi	r25, 0x21	; 33
   13af6:	89 9f       	mul	r24, r25
   13af8:	e0 01       	movw	r28, r0
   13afa:	11 24       	eor	r1, r1
   13afc:	c8 5a       	subi	r28, 0xA8	; 168
   13afe:	de 4f       	sbci	r29, 0xFE	; 254
   13b00:	ce 01       	movw	r24, r28
   13b02:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   13b06:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   13b08:	11 11       	cpse	r17, r1
   13b0a:	07 c0       	rjmp	.+14     	; 0x13b1a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x2e>
   13b0c:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   13b0e:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   13b10:	df 91       	pop	r29
   13b12:	cf 91       	pop	r28
   13b14:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   13b16:	0c 94 72 9d 	jmp	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   13b1a:	61 60       	ori	r22, 0x01	; 1
   13b1c:	f8 cf       	rjmp	.-16     	; 0x13b0e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x22>

00013b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:118



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   13b1e:	4f 92       	push	r4
   13b20:	5f 92       	push	r5
   13b22:	6f 92       	push	r6
   13b24:	7f 92       	push	r7
   13b26:	8f 92       	push	r8
   13b28:	9f 92       	push	r9
   13b2a:	af 92       	push	r10
   13b2c:	bf 92       	push	r11
   13b2e:	cf 92       	push	r12
   13b30:	df 92       	push	r13
   13b32:	ef 92       	push	r14
   13b34:	ff 92       	push	r15
   13b36:	0f 93       	push	r16
   13b38:	1f 93       	push	r17
   13b3a:	cf 93       	push	r28
   13b3c:	df 93       	push	r29
   13b3e:	00 d0       	rcall	.+0      	; 0x13b40 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   13b40:	00 d0       	rcall	.+0      	; 0x13b42 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   13b42:	1f 92       	push	r1
   13b44:	1f 92       	push	r1
   13b46:	cd b7       	in	r28, 0x3d	; 61
   13b48:	de b7       	in	r29, 0x3e	; 62
   13b4a:	6c 01       	movw	r12, r24
   13b4c:	46 2e       	mov	r4, r22
   13b4e:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
  char tmp1[8];
  str[0] = 0;
   13b50:	fc 01       	movw	r30, r24
   13b52:	10 82       	st	Z, r1
   13b54:	3a 01       	movw	r6, r20
   13b56:	f1 2c       	mov	r15, r1
   13b58:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   13b5a:	a0 2e       	mov	r10, r16
   13b5c:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   13b5e:	8e 01       	movw	r16, r28
   13b60:	0f 5f       	subi	r16, 0xFF	; 255
   13b62:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   13b64:	82 2f       	mov	r24, r18
   13b66:	81 50       	subi	r24, 0x01	; 1
   13b68:	99 0b       	sbc	r25, r25
   13b6a:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   13b6c:	f3 01       	movw	r30, r6
   13b6e:	81 91       	ld	r24, Z+
   13b70:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   13b72:	a5 01       	movw	r20, r10
   13b74:	b8 01       	movw	r22, r16
   13b76:	90 e0       	ldi	r25, 0x00	; 0
   13b78:	0e 94 77 b1 	call	0x162ee	; 0x162ee <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    if (strlen(tmp1) < 2)
   13b7c:	f8 01       	movw	r30, r16
   13b7e:	01 90       	ld	r0, Z+
   13b80:	00 20       	and	r0, r0
   13b82:	e9 f7       	brne	.-6      	; 0x13b7e <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   13b84:	31 97       	sbiw	r30, 0x01	; 1
   13b86:	e0 1b       	sub	r30, r16
   13b88:	f1 0b       	sbc	r31, r17
   13b8a:	32 97       	sbiw	r30, 0x02	; 2
   13b8c:	28 f4       	brcc	.+10     	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
      strcat(str, "0");
   13b8e:	67 e0       	ldi	r22, 0x07	; 7
   13b90:	77 e0       	ldi	r23, 0x07	; 7
   13b92:	c6 01       	movw	r24, r12
   13b94:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
    strcat(str, tmp1); 
   13b98:	b8 01       	movw	r22, r16
   13b9a:	c6 01       	movw	r24, r12
   13b9c:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (a < maxBytes - 1)
   13ba0:	e8 14       	cp	r14, r8
   13ba2:	f9 04       	cpc	r15, r9
   13ba4:	34 f4       	brge	.+12     	; 0x13bb2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:129
    {
      tmp1[0] = sep;
   13ba6:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[1] = 0;
   13ba8:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      strcat(str, tmp1);
   13baa:	b8 01       	movw	r22, r16
   13bac:	c6 01       	movw	r24, r12
   13bae:	0e 94 ac bd 	call	0x17b58	; 0x17b58 <strcat>
   13bb2:	ff ef       	ldi	r31, 0xFF	; 255
   13bb4:	ef 1a       	sub	r14, r31
   13bb6:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   13bb8:	e5 14       	cp	r14, r5
   13bba:	c0 f2       	brcs	.-80     	; 0x13b6c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:134
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   13bbc:	28 96       	adiw	r28, 0x08	; 8
   13bbe:	0f b6       	in	r0, 0x3f	; 63
   13bc0:	f8 94       	cli
   13bc2:	de bf       	out	0x3e, r29	; 62
   13bc4:	0f be       	out	0x3f, r0	; 63
   13bc6:	cd bf       	out	0x3d, r28	; 61
   13bc8:	df 91       	pop	r29
   13bca:	cf 91       	pop	r28
   13bcc:	1f 91       	pop	r17
   13bce:	0f 91       	pop	r16
   13bd0:	ff 90       	pop	r15
   13bd2:	ef 90       	pop	r14
   13bd4:	df 90       	pop	r13
   13bd6:	cf 90       	pop	r12
   13bd8:	bf 90       	pop	r11
   13bda:	af 90       	pop	r10
   13bdc:	9f 90       	pop	r9
   13bde:	8f 90       	pop	r8
   13be0:	7f 90       	pop	r7
   13be2:	6f 90       	pop	r6
   13be4:	5f 90       	pop	r5
   13be6:	4f 90       	pop	r4
   13be8:	08 95       	ret

00013bea <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   13bea:	cf 92       	push	r12
   13bec:	df 92       	push	r13
   13bee:	ef 92       	push	r14
   13bf0:	ff 92       	push	r15
   13bf2:	0f 93       	push	r16
   13bf4:	1f 93       	push	r17
   13bf6:	cf 93       	push	r28
   13bf8:	df 93       	push	r29
   13bfa:	00 d0       	rcall	.+0      	; 0x13bfc <EEPROMwriteFloat(unsigned int, float)+0x12>
   13bfc:	1f 92       	push	r1
   13bfe:	cd b7       	in	r28, 0x3d	; 61
   13c00:	de b7       	in	r29, 0x3e	; 62
   13c02:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   13c04:	49 83       	std	Y+1, r20	; 0x01
   13c06:	5a 83       	std	Y+2, r21	; 0x02
   13c08:	6b 83       	std	Y+3, r22	; 0x03
   13c0a:	7c 83       	std	Y+4, r23	; 0x04
   13c0c:	ce 01       	movw	r24, r28
   13c0e:	01 96       	adiw	r24, 0x01	; 1
   13c10:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   13c12:	10 e0       	ldi	r17, 0x00	; 0
   13c14:	00 e0       	ldi	r16, 0x00	; 0
   13c16:	f7 01       	movw	r30, r14
   13c18:	61 91       	ld	r22, Z+
   13c1a:	7f 01       	movw	r14, r30
   13c1c:	c8 01       	movw	r24, r16
   13c1e:	8c 0d       	add	r24, r12
   13c20:	9d 1d       	adc	r25, r13
   13c22:	0e 94 72 9d 	call	0x13ae4	; 0x13ae4 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
   13c26:	0f 5f       	subi	r16, 0xFF	; 255
   13c28:	1f 4f       	sbci	r17, 0xFF	; 255
   13c2a:	04 30       	cpi	r16, 0x04	; 4
   13c2c:	11 05       	cpc	r17, r1
   13c2e:	99 f7       	brne	.-26     	; 0x13c16 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   13c30:	0f 90       	pop	r0
   13c32:	0f 90       	pop	r0
   13c34:	0f 90       	pop	r0
   13c36:	0f 90       	pop	r0
   13c38:	df 91       	pop	r29
   13c3a:	cf 91       	pop	r28
   13c3c:	1f 91       	pop	r17
   13c3e:	0f 91       	pop	r16
   13c40:	ff 90       	pop	r15
   13c42:	ef 90       	pop	r14
   13c44:	df 90       	pop	r13
   13c46:	cf 90       	pop	r12
   13c48:	08 95       	ret

00013c4a <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   13c4a:	cf 92       	push	r12
   13c4c:	df 92       	push	r13
   13c4e:	ef 92       	push	r14
   13c50:	ff 92       	push	r15
   13c52:	0f 93       	push	r16
   13c54:	1f 93       	push	r17
   13c56:	cf 93       	push	r28
   13c58:	df 93       	push	r29
   13c5a:	00 d0       	rcall	.+0      	; 0x13c5c <EEPROMreadFloat(unsigned int)+0x12>
   13c5c:	1f 92       	push	r1
   13c5e:	cd b7       	in	r28, 0x3d	; 61
   13c60:	de b7       	in	r29, 0x3e	; 62
   13c62:	7e 01       	movw	r14, r28
   13c64:	25 e0       	ldi	r18, 0x05	; 5
   13c66:	e2 0e       	add	r14, r18
   13c68:	f1 1c       	adc	r15, r1
   13c6a:	8e 01       	movw	r16, r28
   13c6c:	0f 5f       	subi	r16, 0xFF	; 255
   13c6e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   13c70:	6c 01       	movw	r12, r24
   13c72:	c0 1a       	sub	r12, r16
   13c74:	d1 0a       	sbc	r13, r17
   13c76:	c6 01       	movw	r24, r12
   13c78:	80 0f       	add	r24, r16
   13c7a:	91 1f       	adc	r25, r17
   13c7c:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   13c80:	f8 01       	movw	r30, r16
   13c82:	81 93       	st	Z+, r24
   13c84:	8f 01       	movw	r16, r30
   13c86:	ee 15       	cp	r30, r14
   13c88:	ff 05       	cpc	r31, r15
   13c8a:	a9 f7       	brne	.-22     	; 0x13c76 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   13c8c:	69 81       	ldd	r22, Y+1	; 0x01
   13c8e:	7a 81       	ldd	r23, Y+2	; 0x02
   13c90:	8b 81       	ldd	r24, Y+3	; 0x03
   13c92:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   13c94:	0f 90       	pop	r0
   13c96:	0f 90       	pop	r0
   13c98:	0f 90       	pop	r0
   13c9a:	0f 90       	pop	r0
   13c9c:	df 91       	pop	r29
   13c9e:	cf 91       	pop	r28
   13ca0:	1f 91       	pop	r17
   13ca2:	0f 91       	pop	r16
   13ca4:	ff 90       	pop	r15
   13ca6:	ef 90       	pop	r14
   13ca8:	df 90       	pop	r13
   13caa:	cf 90       	pop	r12
   13cac:	08 95       	ret

00013cae <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   13cae:	cf 93       	push	r28
   13cb0:	df 93       	push	r29
   13cb2:	d8 2f       	mov	r29, r24
   13cb4:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   13cb6:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <wiznet_SPI_settings>
   13cba:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <wiznet_SPI_settings+0x1>
   13cbe:	0e 94 79 87 	call	0x10ef2	; 0x10ef2 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   13cc2:	0e 94 be 91 	call	0x1237c	; 0x1237c <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   13cc6:	80 e0       	ldi	r24, 0x00	; 0
   13cc8:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   13ccc:	8d 2f       	mov	r24, r29
   13cce:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   13cd2:	8c 2f       	mov	r24, r28
   13cd4:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   13cd8:	80 e0       	ldi	r24, 0x00	; 0
   13cda:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
   13cde:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   13ce0:	0e 94 b9 91 	call	0x12372	; 0x12372 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   13ce4:	8c 2f       	mov	r24, r28
   13ce6:	df 91       	pop	r29
   13ce8:	cf 91       	pop	r28
   13cea:	08 95       	ret

00013cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   13cec:	df 92       	push	r13
   13cee:	ef 92       	push	r14
   13cf0:	ff 92       	push	r15
   13cf2:	0f 93       	push	r16
   13cf4:	1f 93       	push	r17
   13cf6:	cf 93       	push	r28
   13cf8:	df 93       	push	r29
   13cfa:	d8 2f       	mov	r29, r24
   13cfc:	d9 2e       	mov	r13, r25
   13cfe:	c6 2f       	mov	r28, r22
   13d00:	7a 01       	movw	r14, r20
   13d02:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   13d04:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <wiznet_SPI_settings>
   13d08:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <wiznet_SPI_settings+0x1>
   13d0c:	0e 94 79 87 	call	0x10ef2	; 0x10ef2 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   13d10:	0e 94 be 91 	call	0x1237c	; 0x1237c <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   13d14:	8d 2d       	mov	r24, r13
   13d16:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   13d1a:	8d 2f       	mov	r24, r29
   13d1c:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   13d20:	8c 2f       	mov	r24, r28
   13d22:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
   13d26:	e7 01       	movw	r28, r14
   13d28:	e0 0e       	add	r14, r16
   13d2a:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   13d2c:	ce 15       	cp	r28, r14
   13d2e:	df 05       	cpc	r29, r15
   13d30:	21 f0       	breq	.+8      	; 0x13d3a <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   13d32:	89 91       	ld	r24, Y+
   13d34:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
   13d38:	f9 cf       	rjmp	.-14     	; 0x13d2c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   13d3a:	0e 94 b9 91 	call	0x12372	; 0x12372 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   13d3e:	c8 01       	movw	r24, r16
   13d40:	df 91       	pop	r29
   13d42:	cf 91       	pop	r28
   13d44:	1f 91       	pop	r17
   13d46:	0f 91       	pop	r16
   13d48:	ff 90       	pop	r15
   13d4a:	ef 90       	pop	r14
   13d4c:	df 90       	pop	r13
   13d4e:	08 95       	ret

00013d50 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   13d50:	8f 92       	push	r8
   13d52:	9f 92       	push	r9
   13d54:	af 92       	push	r10
   13d56:	bf 92       	push	r11
   13d58:	cf 92       	push	r12
   13d5a:	df 92       	push	r13
   13d5c:	ef 92       	push	r14
   13d5e:	ff 92       	push	r15
   13d60:	0f 93       	push	r16
   13d62:	1f 93       	push	r17
   13d64:	cf 93       	push	r28
   13d66:	5c 01       	movw	r10, r24
   13d68:	6b 01       	movw	r12, r22
   13d6a:	7a 01       	movw	r14, r20
   13d6c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   13d6e:	c0 91 7d 0c 	lds	r28, 0x0C7D	; 0x800c7d <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   13d72:	c0 93 49 11 	sts	0x1149, r28	; 0x801149 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   13d76:	68 ee       	ldi	r22, 0xE8	; 232
   13d78:	73 e0       	ldi	r23, 0x03	; 3
   13d7a:	80 e0       	ldi	r24, 0x00	; 0
   13d7c:	90 e0       	ldi	r25, 0x00	; 0
   13d7e:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   13d82:	61 e0       	ldi	r22, 0x01	; 1
   13d84:	8c 2f       	mov	r24, r28
   13d86:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   13d8a:	0e 94 8f 3b 	call	0x771e	; 0x771e <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   13d8e:	60 e0       	ldi	r22, 0x00	; 0
   13d90:	90 e0       	ldi	r25, 0x00	; 0
   13d92:	80 e0       	ldi	r24, 0x00	; 0
   13d94:	0e 94 57 9e 	call	0x13cae	; 0x13cae <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   13d98:	48 2f       	mov	r20, r24
   13d9a:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   13d9c:	64 e0       	ldi	r22, 0x04	; 4
   13d9e:	90 e0       	ldi	r25, 0x00	; 0
   13da0:	80 e0       	ldi	r24, 0x00	; 0
   13da2:	0e 94 c3 91 	call	0x12386	; 0x12386 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13da6:	cc e0       	ldi	r28, 0x0C	; 12
   13da8:	88 e0       	ldi	r24, 0x08	; 8
   13daa:	88 2e       	mov	r8, r24
   13dac:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   13dae:	42 e0       	ldi	r20, 0x02	; 2
   13db0:	6c 2f       	mov	r22, r28
   13db2:	8e e1       	ldi	r24, 0x1E	; 30
   13db4:	90 e0       	ldi	r25, 0x00	; 0
   13db6:	0e 94 c3 91 	call	0x12386	; 0x12386 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   13dba:	42 e0       	ldi	r20, 0x02	; 2
   13dbc:	6c 2f       	mov	r22, r28
   13dbe:	8f e1       	ldi	r24, 0x1F	; 31
   13dc0:	90 e0       	ldi	r25, 0x00	; 0
   13dc2:	0e 94 c3 91 	call	0x12386	; 0x12386 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13dc6:	81 e0       	ldi	r24, 0x01	; 1
   13dc8:	88 1a       	sub	r8, r24
   13dca:	91 08       	sbc	r9, r1
   13dcc:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   13dce:	81 14       	cp	r8, r1
   13dd0:	91 04       	cpc	r9, r1
   13dd2:	69 f7       	brne	.-38     	; 0x13dae <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   13dd4:	26 e0       	ldi	r18, 0x06	; 6
   13dd6:	30 e0       	ldi	r19, 0x00	; 0
   13dd8:	46 e8       	ldi	r20, 0x86	; 134
   13dda:	5c e0       	ldi	r21, 0x0C	; 12
   13ddc:	64 e0       	ldi	r22, 0x04	; 4
   13dde:	89 e0       	ldi	r24, 0x09	; 9
   13de0:	90 e0       	ldi	r25, 0x00	; 0
   13de2:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13de6:	a5 01       	movw	r20, r10
   13de8:	4e 5f       	subi	r20, 0xFE	; 254
   13dea:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   13dec:	24 e0       	ldi	r18, 0x04	; 4
   13dee:	30 e0       	ldi	r19, 0x00	; 0
   13df0:	64 e0       	ldi	r22, 0x04	; 4
   13df2:	8f e0       	ldi	r24, 0x0F	; 15
   13df4:	90 e0       	ldi	r25, 0x00	; 0
   13df6:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   13dfa:	a7 01       	movw	r20, r14
   13dfc:	4e 5f       	subi	r20, 0xFE	; 254
   13dfe:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   13e00:	24 e0       	ldi	r18, 0x04	; 4
   13e02:	30 e0       	ldi	r19, 0x00	; 0
   13e04:	64 e0       	ldi	r22, 0x04	; 4
   13e06:	81 e0       	ldi	r24, 0x01	; 1
   13e08:	90 e0       	ldi	r25, 0x00	; 0
   13e0a:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   13e0e:	a8 01       	movw	r20, r16
   13e10:	4e 5f       	subi	r20, 0xFE	; 254
   13e12:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   13e14:	24 e0       	ldi	r18, 0x04	; 4
   13e16:	30 e0       	ldi	r19, 0x00	; 0
   13e18:	64 e0       	ldi	r22, 0x04	; 4
   13e1a:	85 e0       	ldi	r24, 0x05	; 5
   13e1c:	90 e0       	ldi	r25, 0x00	; 0
   13e1e:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   13e22:	f6 01       	movw	r30, r12
   13e24:	82 81       	ldd	r24, Z+2	; 0x02
   13e26:	93 81       	ldd	r25, Z+3	; 0x03
   13e28:	a4 81       	ldd	r26, Z+4	; 0x04
   13e2a:	b5 81       	ldd	r27, Z+5	; 0x05
   13e2c:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <Ethernet+0x2>
   13e30:	90 93 74 0c 	sts	0x0C74, r25	; 0x800c74 <Ethernet+0x3>
   13e34:	a0 93 75 0c 	sts	0x0C75, r26	; 0x800c75 <Ethernet+0x4>
   13e38:	b0 93 76 0c 	sts	0x0C76, r27	; 0x800c76 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   13e3c:	cf 91       	pop	r28
   13e3e:	1f 91       	pop	r17
   13e40:	0f 91       	pop	r16
   13e42:	ff 90       	pop	r15
   13e44:	ef 90       	pop	r14
   13e46:	df 90       	pop	r13
   13e48:	cf 90       	pop	r12
   13e4a:	bf 90       	pop	r11
   13e4c:	af 90       	pop	r10
   13e4e:	9f 90       	pop	r9
   13e50:	8f 90       	pop	r8
   13e52:	08 95       	ret

00013e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   13e54:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   13e56:	82 95       	swap	r24
   13e58:	88 0f       	add	r24, r24
   13e5a:	80 7e       	andi	r24, 0xE0	; 224
   13e5c:	6c e0       	ldi	r22, 0x0C	; 12
   13e5e:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   13e60:	c9 01       	movw	r24, r18
   13e62:	0c 94 c3 91 	jmp	0x12386	; 0x12386 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00013e66 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   13e66:	bf 92       	push	r11
   13e68:	cf 92       	push	r12
   13e6a:	df 92       	push	r13
   13e6c:	ef 92       	push	r14
   13e6e:	ff 92       	push	r15
   13e70:	0f 93       	push	r16
   13e72:	1f 93       	push	r17
   13e74:	cf 93       	push	r28
   13e76:	df 93       	push	r29
   13e78:	b8 2e       	mov	r11, r24
   13e7a:	6b 01       	movw	r12, r22
   13e7c:	7a 01       	movw	r14, r20
   13e7e:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   13e80:	64 e2       	ldi	r22, 0x24	; 36
   13e82:	70 e0       	ldi	r23, 0x00	; 0
   13e84:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   13e88:	c8 2f       	mov	r28, r24
   13e8a:	65 e2       	ldi	r22, 0x25	; 37
   13e8c:	70 e0       	ldi	r23, 0x00	; 0
   13e8e:	8b 2d       	mov	r24, r11
   13e90:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   13e94:	d0 e0       	ldi	r29, 0x00	; 0
   13e96:	dc 2f       	mov	r29, r28
   13e98:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   13e9a:	8c 0d       	add	r24, r12
   13e9c:	9d 2d       	mov	r25, r13
   13e9e:	91 1d       	adc	r25, r1
   13ea0:	c8 0f       	add	r28, r24
   13ea2:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   13ea4:	6b 2d       	mov	r22, r11
   13ea6:	62 95       	swap	r22
   13ea8:	66 0f       	add	r22, r22
   13eaa:	60 7e       	andi	r22, 0xE0	; 224
   13eac:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   13eae:	98 01       	movw	r18, r16
   13eb0:	a7 01       	movw	r20, r14
   13eb2:	ce 01       	movw	r24, r28
   13eb4:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   13eb8:	c0 0f       	add	r28, r16
   13eba:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13ebc:	4d 2f       	mov	r20, r29
   13ebe:	64 e2       	ldi	r22, 0x24	; 36
   13ec0:	70 e0       	ldi	r23, 0x00	; 0
   13ec2:	8b 2d       	mov	r24, r11
   13ec4:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   13ec8:	4c 2f       	mov	r20, r28
   13eca:	65 e2       	ldi	r22, 0x25	; 37
   13ecc:	70 e0       	ldi	r23, 0x00	; 0
   13ece:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   13ed0:	df 91       	pop	r29
   13ed2:	cf 91       	pop	r28
   13ed4:	1f 91       	pop	r17
   13ed6:	0f 91       	pop	r16
   13ed8:	ff 90       	pop	r15
   13eda:	ef 90       	pop	r14
   13edc:	df 90       	pop	r13
   13ede:	cf 90       	pop	r12
   13ee0:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13ee2:	0c 94 2a 9f 	jmp	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00013ee6 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   13ee6:	af 92       	push	r10
   13ee8:	bf 92       	push	r11
   13eea:	cf 92       	push	r12
   13eec:	df 92       	push	r13
   13eee:	ff 92       	push	r15
   13ef0:	0f 93       	push	r16
   13ef2:	1f 93       	push	r17
   13ef4:	cf 93       	push	r28
   13ef6:	df 93       	push	r29
   13ef8:	8c 01       	movw	r16, r24
   13efa:	5b 01       	movw	r10, r22
   13efc:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   13efe:	fc 01       	movw	r30, r24
   13f00:	c7 88       	ldd	r12, Z+23	; 0x17
   13f02:	d0 8c       	ldd	r13, Z+24	; 0x18
   13f04:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   13f06:	8f 2d       	mov	r24, r15
   13f08:	0e 94 e8 8f 	call	0x11fd0	; 0x11fd0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13f0c:	8c 17       	cp	r24, r28
   13f0e:	9d 07       	cpc	r25, r29
   13f10:	20 f4       	brcc	.+8      	; 0x13f1a <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   13f12:	8f 2d       	mov	r24, r15
   13f14:	0e 94 e8 8f 	call	0x11fd0	; 0x11fd0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13f18:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   13f1a:	9e 01       	movw	r18, r28
   13f1c:	a5 01       	movw	r20, r10
   13f1e:	b6 01       	movw	r22, r12
   13f20:	8f 2d       	mov	r24, r15
   13f22:	0e 94 33 9f 	call	0x13e66	; 0x13e66 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   13f26:	f8 01       	movw	r30, r16
   13f28:	87 89       	ldd	r24, Z+23	; 0x17
   13f2a:	90 8d       	ldd	r25, Z+24	; 0x18
   13f2c:	8c 0f       	add	r24, r28
   13f2e:	9d 1f       	adc	r25, r29
   13f30:	90 8f       	std	Z+24, r25	; 0x18
   13f32:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   13f34:	ce 01       	movw	r24, r28
   13f36:	df 91       	pop	r29
   13f38:	cf 91       	pop	r28
   13f3a:	1f 91       	pop	r17
   13f3c:	0f 91       	pop	r16
   13f3e:	ff 90       	pop	r15
   13f40:	df 90       	pop	r13
   13f42:	cf 90       	pop	r12
   13f44:	bf 90       	pop	r11
   13f46:	af 90       	pop	r10
   13f48:	08 95       	ret

00013f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   13f4a:	cf 93       	push	r28
   13f4c:	c8 2f       	mov	r28, r24
   13f4e:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   13f50:	61 e0       	ldi	r22, 0x01	; 1
   13f52:	70 e0       	ldi	r23, 0x00	; 0
   13f54:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   13f58:	61 e0       	ldi	r22, 0x01	; 1
   13f5a:	70 e0       	ldi	r23, 0x00	; 0
   13f5c:	8c 2f       	mov	r24, r28
   13f5e:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   13f62:	81 11       	cpse	r24, r1
   13f64:	f9 cf       	rjmp	.-14     	; 0x13f58 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   13f66:	cf 91       	pop	r28
   13f68:	08 95       	ret

00013f6a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   13f6a:	af 92       	push	r10
   13f6c:	bf 92       	push	r11
   13f6e:	cf 92       	push	r12
   13f70:	df 92       	push	r13
   13f72:	ef 92       	push	r14
   13f74:	ff 92       	push	r15
   13f76:	0f 93       	push	r16
   13f78:	1f 93       	push	r17
   13f7a:	cf 93       	push	r28
   13f7c:	df 93       	push	r29
   13f7e:	f8 2e       	mov	r15, r24
   13f80:	5b 01       	movw	r10, r22
   13f82:	6a 01       	movw	r12, r20
   13f84:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   13f86:	68 e2       	ldi	r22, 0x28	; 40
   13f88:	70 e0       	ldi	r23, 0x00	; 0
   13f8a:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   13f8e:	08 2f       	mov	r16, r24
   13f90:	10 e0       	ldi	r17, 0x00	; 0
   13f92:	10 2f       	mov	r17, r16
   13f94:	00 27       	eor	r16, r16
   13f96:	69 e2       	ldi	r22, 0x29	; 41
   13f98:	70 e0       	ldi	r23, 0x00	; 0
   13f9a:	8f 2d       	mov	r24, r15
   13f9c:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
   13fa0:	e8 01       	movw	r28, r16
   13fa2:	c8 0f       	add	r28, r24
   13fa4:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   13fa6:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <wiznet_SPI_settings>
   13faa:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <wiznet_SPI_settings+0x1>
   13fae:	0e 94 79 87 	call	0x10ef2	; 0x10ef2 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   13fb2:	0e 94 be 91 	call	0x1237c	; 0x1237c <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   13fb6:	8d 2f       	mov	r24, r29
   13fb8:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   13fbc:	8c 2f       	mov	r24, r28
   13fbe:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   13fc2:	8f 2d       	mov	r24, r15
   13fc4:	82 95       	swap	r24
   13fc6:	88 0f       	add	r24, r24
   13fc8:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   13fca:	88 5e       	subi	r24, 0xE8	; 232
   13fcc:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
   13fd0:	85 01       	movw	r16, r10
   13fd2:	ac 0c       	add	r10, r12
   13fd4:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   13fd6:	80 e0       	ldi	r24, 0x00	; 0
   13fd8:	0e 94 72 87 	call	0x10ee4	; 0x10ee4 <SPIClass::transfer(unsigned char)>
   13fdc:	f8 01       	movw	r30, r16
   13fde:	81 93       	st	Z+, r24
   13fe0:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   13fe2:	ea 15       	cp	r30, r10
   13fe4:	fb 05       	cpc	r31, r11
   13fe6:	b9 f7       	brne	.-18     	; 0x13fd6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   13fe8:	0e 94 b9 91 	call	0x12372	; 0x12372 <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   13fec:	e1 10       	cpse	r14, r1
   13fee:	18 c0       	rjmp	.+48     	; 0x14020 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   13ff0:	cc 0d       	add	r28, r12
   13ff2:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   13ff4:	4d 2f       	mov	r20, r29
   13ff6:	68 e2       	ldi	r22, 0x28	; 40
   13ff8:	70 e0       	ldi	r23, 0x00	; 0
   13ffa:	8f 2d       	mov	r24, r15
   13ffc:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   14000:	4c 2f       	mov	r20, r28
   14002:	69 e2       	ldi	r22, 0x29	; 41
   14004:	70 e0       	ldi	r23, 0x00	; 0
   14006:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   14008:	df 91       	pop	r29
   1400a:	cf 91       	pop	r28
   1400c:	1f 91       	pop	r17
   1400e:	0f 91       	pop	r16
   14010:	ff 90       	pop	r15
   14012:	ef 90       	pop	r14
   14014:	df 90       	pop	r13
   14016:	cf 90       	pop	r12
   14018:	bf 90       	pop	r11
   1401a:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1401c:	0c 94 2a 9f 	jmp	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   14020:	df 91       	pop	r29
   14022:	cf 91       	pop	r28
   14024:	1f 91       	pop	r17
   14026:	0f 91       	pop	r16
   14028:	ff 90       	pop	r15
   1402a:	ef 90       	pop	r14
   1402c:	df 90       	pop	r13
   1402e:	cf 90       	pop	r12
   14030:	bf 90       	pop	r11
   14032:	af 90       	pop	r10
   14034:	08 95       	ret

00014036 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   14036:	cf 92       	push	r12
   14038:	df 92       	push	r13
   1403a:	ef 92       	push	r14
   1403c:	ff 92       	push	r15
   1403e:	1f 93       	push	r17
   14040:	cf 93       	push	r28
   14042:	df 93       	push	r29
   14044:	18 2f       	mov	r17, r24
   14046:	6b 01       	movw	r12, r22
   14048:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   1404a:	0e 94 04 90 	call	0x12008	; 0x12008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   1404e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   14050:	00 97       	sbiw	r24, 0x00	; 0
   14052:	d9 f4       	brne	.+54     	; 0x1408a <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   14054:	63 e0       	ldi	r22, 0x03	; 3
   14056:	70 e0       	ldi	r23, 0x00	; 0
   14058:	81 2f       	mov	r24, r17
   1405a:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   1405e:	84 31       	cpi	r24, 0x14	; 20
   14060:	59 f0       	breq	.+22     	; 0x14078 <recv(unsigned char, unsigned char*, int)+0x42>
   14062:	88 23       	and	r24, r24
   14064:	49 f0       	breq	.+18     	; 0x14078 <recv(unsigned char, unsigned char*, int)+0x42>
   14066:	c1 e0       	ldi	r28, 0x01	; 1
   14068:	d0 e0       	ldi	r29, 0x00	; 0
   1406a:	8c 31       	cpi	r24, 0x1C	; 28
   1406c:	11 f4       	brne	.+4      	; 0x14072 <recv(unsigned char, unsigned char*, int)+0x3c>
   1406e:	d0 e0       	ldi	r29, 0x00	; 0
   14070:	c0 e0       	ldi	r28, 0x00	; 0
   14072:	d1 95       	neg	r29
   14074:	c1 95       	neg	r28
   14076:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   14078:	ce 01       	movw	r24, r28
   1407a:	df 91       	pop	r29
   1407c:	cf 91       	pop	r28
   1407e:	1f 91       	pop	r17
   14080:	ff 90       	pop	r15
   14082:	ef 90       	pop	r14
   14084:	df 90       	pop	r13
   14086:	cf 90       	pop	r12
   14088:	08 95       	ret
   1408a:	e8 16       	cp	r14, r24
   1408c:	f9 06       	cpc	r15, r25
   1408e:	0c f4       	brge	.+2      	; 0x14092 <recv(unsigned char, unsigned char*, int)+0x5c>
   14090:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   14092:	1c 16       	cp	r1, r28
   14094:	1d 06       	cpc	r1, r29
   14096:	84 f7       	brge	.-32     	; 0x14078 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   14098:	20 e0       	ldi	r18, 0x00	; 0
   1409a:	ae 01       	movw	r20, r28
   1409c:	b6 01       	movw	r22, r12
   1409e:	81 2f       	mov	r24, r17
   140a0:	0e 94 b5 9f 	call	0x13f6a	; 0x13f6a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   140a4:	60 e4       	ldi	r22, 0x40	; 64
   140a6:	70 e0       	ldi	r23, 0x00	; 0
   140a8:	81 2f       	mov	r24, r17
   140aa:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   140ae:	e4 cf       	rjmp	.-56     	; 0x14078 <recv(unsigned char, unsigned char*, int)+0x42>

000140b0 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   140b0:	cf 93       	push	r28
   140b2:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   140b4:	fc 01       	movw	r30, r24
   140b6:	21 8d       	ldd	r18, Z+25	; 0x19
   140b8:	32 8d       	ldd	r19, Z+26	; 0x1a
   140ba:	21 15       	cp	r18, r1
   140bc:	31 05       	cpc	r19, r1
   140be:	29 f4       	brne	.+10     	; 0x140ca <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   140c0:	8f ef       	ldi	r24, 0xFF	; 255
   140c2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   140c4:	df 91       	pop	r29
   140c6:	cf 91       	pop	r28
   140c8:	08 95       	ret
   140ca:	ec 01       	movw	r28, r24
   140cc:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   140ce:	42 17       	cp	r20, r18
   140d0:	53 07       	cpc	r21, r19
   140d2:	08 f0       	brcs	.+2      	; 0x140d6 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   140d4:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   140d6:	0e 94 1b a0 	call	0x14036	; 0x14036 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   140da:	18 16       	cp	r1, r24
   140dc:	19 06       	cpc	r1, r25
   140de:	84 f7       	brge	.-32     	; 0x140c0 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   140e0:	29 8d       	ldd	r18, Y+25	; 0x19
   140e2:	3a 8d       	ldd	r19, Y+26	; 0x1a
   140e4:	28 1b       	sub	r18, r24
   140e6:	39 0b       	sbc	r19, r25
   140e8:	3a 8f       	std	Y+26, r19	; 0x1a
   140ea:	29 8f       	std	Y+25, r18	; 0x19
   140ec:	eb cf       	rjmp	.-42     	; 0x140c4 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

000140ee <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   140ee:	0f 93       	push	r16
   140f0:	1f 93       	push	r17
   140f2:	cf 93       	push	r28
   140f4:	df 93       	push	r29
   140f6:	1f 92       	push	r1
   140f8:	cd b7       	in	r28, 0x3d	; 61
   140fa:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   140fc:	fc 01       	movw	r30, r24
   140fe:	21 8d       	ldd	r18, Z+25	; 0x19
   14100:	32 8d       	ldd	r19, Z+26	; 0x1a
   14102:	23 2b       	or	r18, r19
   14104:	41 f4       	brne	.+16     	; 0x14116 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   14106:	8f ef       	ldi	r24, 0xFF	; 255
   14108:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   1410a:	0f 90       	pop	r0
   1410c:	df 91       	pop	r29
   1410e:	cf 91       	pop	r28
   14110:	1f 91       	pop	r17
   14112:	0f 91       	pop	r16
   14114:	08 95       	ret
   14116:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   14118:	41 e0       	ldi	r20, 0x01	; 1
   1411a:	50 e0       	ldi	r21, 0x00	; 0
   1411c:	be 01       	movw	r22, r28
   1411e:	6f 5f       	subi	r22, 0xFF	; 255
   14120:	7f 4f       	sbci	r23, 0xFF	; 255
   14122:	fc 01       	movw	r30, r24
   14124:	84 85       	ldd	r24, Z+12	; 0x0c
   14126:	0e 94 1b a0 	call	0x14036	; 0x14036 <recv(unsigned char, unsigned char*, int)>
   1412a:	18 16       	cp	r1, r24
   1412c:	19 06       	cpc	r1, r25
   1412e:	5c f7       	brge	.-42     	; 0x14106 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   14130:	f8 01       	movw	r30, r16
   14132:	81 8d       	ldd	r24, Z+25	; 0x19
   14134:	92 8d       	ldd	r25, Z+26	; 0x1a
   14136:	01 97       	sbiw	r24, 0x01	; 1
   14138:	92 8f       	std	Z+26, r25	; 0x1a
   1413a:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   1413c:	89 81       	ldd	r24, Y+1	; 0x01
   1413e:	90 e0       	ldi	r25, 0x00	; 0
   14140:	e4 cf       	rjmp	.-56     	; 0x1410a <EthernetUDP::read()+0x1c>

00014142 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   14142:	0f 93       	push	r16
   14144:	1f 93       	push	r17
   14146:	cf 93       	push	r28
   14148:	df 93       	push	r29
   1414a:	00 d0       	rcall	.+0      	; 0x1414c <EthernetUDP::parsePacket()+0xa>
   1414c:	00 d0       	rcall	.+0      	; 0x1414e <EthernetUDP::parsePacket()+0xc>
   1414e:	1f 92       	push	r1
   14150:	1f 92       	push	r1
   14152:	cd b7       	in	r28, 0x3d	; 61
   14154:	de b7       	in	r29, 0x3e	; 62
   14156:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   14158:	dc 01       	movw	r26, r24
   1415a:	ed 91       	ld	r30, X+
   1415c:	fc 91       	ld	r31, X
   1415e:	06 80       	ldd	r0, Z+6	; 0x06
   14160:	f7 81       	ldd	r31, Z+7	; 0x07
   14162:	e0 2d       	mov	r30, r0
   14164:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   14166:	f8 01       	movw	r30, r16
   14168:	84 85       	ldd	r24, Z+12	; 0x0c
   1416a:	0e 94 04 90 	call	0x12008	; 0x12008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   1416e:	89 2b       	or	r24, r25
   14170:	b1 f1       	breq	.+108    	; 0x141de <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   14172:	48 e0       	ldi	r20, 0x08	; 8
   14174:	50 e0       	ldi	r21, 0x00	; 0
   14176:	be 01       	movw	r22, r28
   14178:	6f 5f       	subi	r22, 0xFF	; 255
   1417a:	7f 4f       	sbci	r23, 0xFF	; 255
   1417c:	d8 01       	movw	r26, r16
   1417e:	1c 96       	adiw	r26, 0x0c	; 12
   14180:	8c 91       	ld	r24, X
   14182:	0e 94 1b a0 	call	0x14036	; 0x14036 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   14186:	18 16       	cp	r1, r24
   14188:	19 06       	cpc	r1, r25
   1418a:	f4 f4       	brge	.+60     	; 0x141c8 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1418c:	d8 01       	movw	r26, r16
   1418e:	51 96       	adiw	r26, 0x11	; 17
   14190:	84 e0       	ldi	r24, 0x04	; 4
   14192:	fe 01       	movw	r30, r28
   14194:	31 96       	adiw	r30, 0x01	; 1
   14196:	01 90       	ld	r0, Z+
   14198:	0d 92       	st	X+, r0
   1419a:	8a 95       	dec	r24
   1419c:	e1 f7       	brne	.-8      	; 0x14196 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   1419e:	8d 81       	ldd	r24, Y+5	; 0x05
   141a0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   141a2:	98 2f       	mov	r25, r24
   141a4:	88 27       	eor	r24, r24
   141a6:	2e 81       	ldd	r18, Y+6	; 0x06
   141a8:	82 0f       	add	r24, r18
   141aa:	91 1d       	adc	r25, r1
   141ac:	f8 01       	movw	r30, r16
   141ae:	96 8b       	std	Z+22, r25	; 0x16
   141b0:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   141b2:	8f 81       	ldd	r24, Y+7	; 0x07
   141b4:	28 2f       	mov	r18, r24
   141b6:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   141b8:	32 2f       	mov	r19, r18
   141ba:	22 27       	eor	r18, r18
   141bc:	88 85       	ldd	r24, Y+8	; 0x08
   141be:	82 0f       	add	r24, r18
   141c0:	93 2f       	mov	r25, r19
   141c2:	91 1d       	adc	r25, r1
   141c4:	92 8f       	std	Z+26, r25	; 0x1a
   141c6:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   141c8:	28 96       	adiw	r28, 0x08	; 8
   141ca:	0f b6       	in	r0, 0x3f	; 63
   141cc:	f8 94       	cli
   141ce:	de bf       	out	0x3e, r29	; 62
   141d0:	0f be       	out	0x3f, r0	; 63
   141d2:	cd bf       	out	0x3d, r28	; 61
   141d4:	df 91       	pop	r29
   141d6:	cf 91       	pop	r28
   141d8:	1f 91       	pop	r17
   141da:	0f 91       	pop	r16
   141dc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   141de:	90 e0       	ldi	r25, 0x00	; 0
   141e0:	80 e0       	ldi	r24, 0x00	; 0
   141e2:	f2 cf       	rjmp	.-28     	; 0x141c8 <EthernetUDP::parsePacket()+0x86>

000141e4 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   141e4:	cf 93       	push	r28
   141e6:	df 93       	push	r29
   141e8:	1f 92       	push	r1
   141ea:	cd b7       	in	r28, 0x3d	; 61
   141ec:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   141ee:	fc 01       	movw	r30, r24
   141f0:	21 8d       	ldd	r18, Z+25	; 0x19
   141f2:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   141f4:	8f ef       	ldi	r24, 0xFF	; 255
   141f6:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   141f8:	23 2b       	or	r18, r19
   141fa:	59 f0       	breq	.+22     	; 0x14212 <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   141fc:	21 e0       	ldi	r18, 0x01	; 1
   141fe:	41 e0       	ldi	r20, 0x01	; 1
   14200:	50 e0       	ldi	r21, 0x00	; 0
   14202:	be 01       	movw	r22, r28
   14204:	6f 5f       	subi	r22, 0xFF	; 255
   14206:	7f 4f       	sbci	r23, 0xFF	; 255
   14208:	84 85       	ldd	r24, Z+12	; 0x0c
   1420a:	0e 94 b5 9f 	call	0x13f6a	; 0x13f6a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   1420e:	89 81       	ldd	r24, Y+1	; 0x01
   14210:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   14212:	0f 90       	pop	r0
   14214:	df 91       	pop	r29
   14216:	cf 91       	pop	r28
   14218:	08 95       	ret

0001421a <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   1421a:	cf 93       	push	r28
   1421c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   1421e:	60 e1       	ldi	r22, 0x10	; 16
   14220:	70 e0       	ldi	r23, 0x00	; 0
   14222:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   14226:	4f ef       	ldi	r20, 0xFF	; 255
   14228:	62 e0       	ldi	r22, 0x02	; 2
   1422a:	70 e0       	ldi	r23, 0x00	; 0
   1422c:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   1422e:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   14230:	0c 94 2a 9f 	jmp	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00014234 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   14234:	0f 93       	push	r16
   14236:	1f 93       	push	r17
   14238:	cf 93       	push	r28
   1423a:	df 93       	push	r29
   1423c:	c8 2f       	mov	r28, r24
   1423e:	d6 2f       	mov	r29, r22
   14240:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   14242:	0e 94 0d a1 	call	0x1421a	; 0x1421a <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   14246:	4d 2f       	mov	r20, r29
   14248:	70 e0       	ldi	r23, 0x00	; 0
   1424a:	60 e0       	ldi	r22, 0x00	; 0
   1424c:	8c 2f       	mov	r24, r28
   1424e:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   14252:	01 15       	cp	r16, r1
   14254:	11 05       	cpc	r17, r1
   14256:	b9 f0       	breq	.+46     	; 0x14286 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   14258:	41 2f       	mov	r20, r17
   1425a:	64 e0       	ldi	r22, 0x04	; 4
   1425c:	70 e0       	ldi	r23, 0x00	; 0
   1425e:	8c 2f       	mov	r24, r28
   14260:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   14264:	40 2f       	mov	r20, r16
   14266:	65 e0       	ldi	r22, 0x05	; 5
   14268:	70 e0       	ldi	r23, 0x00	; 0
   1426a:	8c 2f       	mov	r24, r28
   1426c:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   14270:	61 e0       	ldi	r22, 0x01	; 1
   14272:	70 e0       	ldi	r23, 0x00	; 0
   14274:	8c 2f       	mov	r24, r28
   14276:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   1427a:	81 e0       	ldi	r24, 0x01	; 1
   1427c:	df 91       	pop	r29
   1427e:	cf 91       	pop	r28
   14280:	1f 91       	pop	r17
   14282:	0f 91       	pop	r16
   14284:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   14286:	00 91 43 11 	lds	r16, 0x1143	; 0x801143 <local_port>
   1428a:	10 91 44 11 	lds	r17, 0x1144	; 0x801144 <local_port+0x1>
   1428e:	0f 5f       	subi	r16, 0xFF	; 255
   14290:	1f 4f       	sbci	r17, 0xFF	; 255
   14292:	10 93 44 11 	sts	0x1144, r17	; 0x801144 <local_port+0x1>
   14296:	00 93 43 11 	sts	0x1143, r16	; 0x801143 <local_port>
   1429a:	de cf       	rjmp	.-68     	; 0x14258 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

0001429c <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   1429c:	ef 92       	push	r14
   1429e:	ff 92       	push	r15
   142a0:	1f 93       	push	r17
   142a2:	cf 93       	push	r28
   142a4:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   142a6:	fc 01       	movw	r30, r24
   142a8:	24 85       	ldd	r18, Z+12	; 0x0c
   142aa:	28 30       	cpi	r18, 0x08	; 8
   142ac:	39 f0       	breq	.+14     	; 0x142bc <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   142ae:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   142b0:	df 91       	pop	r29
   142b2:	cf 91       	pop	r28
   142b4:	1f 91       	pop	r17
   142b6:	ff 90       	pop	r15
   142b8:	ef 90       	pop	r14
   142ba:	08 95       	ret
   142bc:	7b 01       	movw	r14, r22
   142be:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   142c0:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   142c2:	63 e0       	ldi	r22, 0x03	; 3
   142c4:	70 e0       	ldi	r23, 0x00	; 0
   142c6:	81 2f       	mov	r24, r17
   142c8:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   142cc:	81 11       	cpse	r24, r1
   142ce:	0e c0       	rjmp	.+28     	; 0x142ec <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   142d0:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   142d2:	8c 85       	ldd	r24, Y+12	; 0x0c
   142d4:	88 30       	cpi	r24, 0x08	; 8
   142d6:	59 f3       	breq	.-42     	; 0x142ae <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   142d8:	fe 86       	std	Y+14, r15	; 0x0e
   142da:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   142dc:	1a 8e       	std	Y+26, r1	; 0x1a
   142de:	19 8e       	std	Y+25, r1	; 0x19
socket():
   142e0:	a7 01       	movw	r20, r14
   142e2:	62 e0       	ldi	r22, 0x02	; 2
   142e4:	0e 94 1a a1 	call	0x14234	; 0x14234 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   142e8:	81 e0       	ldi	r24, 0x01	; 1
   142ea:	e2 cf       	rjmp	.-60     	; 0x142b0 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   142ec:	88 31       	cpi	r24, 0x18	; 24
   142ee:	81 f3       	breq	.-32     	; 0x142d0 <EthernetUDP::begin(unsigned int)+0x34>
   142f0:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   142f2:	18 30       	cpi	r17, 0x08	; 8
   142f4:	31 f7       	brne	.-52     	; 0x142c2 <EthernetUDP::begin(unsigned int)+0x26>
   142f6:	ed cf       	rjmp	.-38     	; 0x142d2 <EthernetUDP::begin(unsigned int)+0x36>

000142f8 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   142f8:	cf 93       	push	r28
   142fa:	df 93       	push	r29
   142fc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   142fe:	8c 85       	ldd	r24, Y+12	; 0x0c
   14300:	88 30       	cpi	r24, 0x08	; 8
   14302:	21 f0       	breq	.+8      	; 0x1430c <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   14304:	0e 94 0d a1 	call	0x1421a	; 0x1421a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   14308:	88 e0       	ldi	r24, 0x08	; 8
   1430a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   1430c:	df 91       	pop	r29
   1430e:	cf 91       	pop	r28
   14310:	08 95       	ret

00014312 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   14312:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   14314:	fc 01       	movw	r30, r24
   14316:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   14318:	60 e2       	ldi	r22, 0x20	; 32
   1431a:	70 e0       	ldi	r23, 0x00	; 0
   1431c:	8c 2f       	mov	r24, r28
   1431e:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   14322:	62 e0       	ldi	r22, 0x02	; 2
   14324:	70 e0       	ldi	r23, 0x00	; 0
   14326:	8c 2f       	mov	r24, r28
   14328:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   1432c:	84 fd       	sbrc	r24, 4
   1432e:	11 c0       	rjmp	.+34     	; 0x14352 <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   14330:	62 e0       	ldi	r22, 0x02	; 2
   14332:	70 e0       	ldi	r23, 0x00	; 0
   14334:	8c 2f       	mov	r24, r28
   14336:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   1433a:	83 ff       	sbrs	r24, 3
   1433c:	f2 cf       	rjmp	.-28     	; 0x14322 <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1433e:	48 e1       	ldi	r20, 0x18	; 24
   14340:	62 e0       	ldi	r22, 0x02	; 2
   14342:	70 e0       	ldi	r23, 0x00	; 0
   14344:	8c 2f       	mov	r24, r28
   14346:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   1434a:	90 e0       	ldi	r25, 0x00	; 0
   1434c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   1434e:	cf 91       	pop	r28
   14350:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   14352:	40 e1       	ldi	r20, 0x10	; 16
   14354:	62 e0       	ldi	r22, 0x02	; 2
   14356:	70 e0       	ldi	r23, 0x00	; 0
   14358:	8c 2f       	mov	r24, r28
   1435a:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   1435e:	81 e0       	ldi	r24, 0x01	; 1
   14360:	90 e0       	ldi	r25, 0x00	; 0
   14362:	f5 cf       	rjmp	.-22     	; 0x1434e <EthernetUDP::endPacket()+0x3c>

00014364 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   14364:	1f 93       	push	r17
   14366:	cf 93       	push	r28
   14368:	df 93       	push	r29
   1436a:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   1436c:	dc 01       	movw	r26, r24
   1436e:	58 96       	adiw	r26, 0x18	; 24
   14370:	1c 92       	st	X, r1
   14372:	1e 92       	st	-X, r1
   14374:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   14376:	22 81       	ldd	r18, Z+2	; 0x02
   14378:	21 11       	cpse	r18, r1
   1437a:	09 c0       	rjmp	.+18     	; 0x1438e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   1437c:	23 81       	ldd	r18, Z+3	; 0x03
   1437e:	21 11       	cpse	r18, r1
   14380:	06 c0       	rjmp	.+12     	; 0x1438e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   14382:	24 81       	ldd	r18, Z+4	; 0x04
   14384:	21 11       	cpse	r18, r1
   14386:	03 c0       	rjmp	.+6      	; 0x1438e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   14388:	25 81       	ldd	r18, Z+5	; 0x05
   1438a:	22 23       	and	r18, r18
   1438c:	39 f1       	breq	.+78     	; 0x143dc <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1438e:	41 15       	cp	r20, r1
   14390:	51 05       	cpc	r21, r1
   14392:	21 f1       	breq	.+72     	; 0x143dc <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   14394:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   14396:	dc 01       	movw	r26, r24
   14398:	1c 96       	adiw	r26, 0x0c	; 12
   1439a:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1439c:	af 01       	movw	r20, r30
   1439e:	4e 5f       	subi	r20, 0xFE	; 254
   143a0:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   143a2:	61 2f       	mov	r22, r17
   143a4:	62 95       	swap	r22
   143a6:	66 0f       	add	r22, r22
   143a8:	60 7e       	andi	r22, 0xE0	; 224
   143aa:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   143ac:	24 e0       	ldi	r18, 0x04	; 4
   143ae:	30 e0       	ldi	r19, 0x00	; 0
   143b0:	8c e0       	ldi	r24, 0x0C	; 12
   143b2:	90 e0       	ldi	r25, 0x00	; 0
   143b4:	0e 94 76 9e 	call	0x13cec	; 0x13cec <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   143b8:	4d 2f       	mov	r20, r29
   143ba:	60 e1       	ldi	r22, 0x10	; 16
   143bc:	70 e0       	ldi	r23, 0x00	; 0
   143be:	81 2f       	mov	r24, r17
   143c0:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   143c4:	4c 2f       	mov	r20, r28
   143c6:	61 e1       	ldi	r22, 0x11	; 17
   143c8:	70 e0       	ldi	r23, 0x00	; 0
   143ca:	81 2f       	mov	r24, r17
   143cc:	0e 94 2a 9f 	call	0x13e54	; 0x13e54 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   143d0:	81 e0       	ldi	r24, 0x01	; 1
   143d2:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   143d4:	df 91       	pop	r29
   143d6:	cf 91       	pop	r28
   143d8:	1f 91       	pop	r17
   143da:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   143dc:	90 e0       	ldi	r25, 0x00	; 0
   143de:	80 e0       	ldi	r24, 0x00	; 0
   143e0:	f9 cf       	rjmp	.-14     	; 0x143d4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

000143e2 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   143e2:	fc 01       	movw	r30, r24
   143e4:	84 85       	ldd	r24, Z+12	; 0x0c
   143e6:	88 30       	cpi	r24, 0x08	; 8
   143e8:	21 f0       	breq	.+8      	; 0x143f2 <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   143ea:	63 e0       	ldi	r22, 0x03	; 3
   143ec:	70 e0       	ldi	r23, 0x00	; 0
   143ee:	0c 94 8d 37 	jmp	0x6f1a	; 0x6f1a <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   143f2:	80 e0       	ldi	r24, 0x00	; 0
   143f4:	08 95       	ret

000143f6 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   143f6:	cf 93       	push	r28
   143f8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   143fa:	fc 01       	movw	r30, r24
   143fc:	24 85       	ldd	r18, Z+12	; 0x0c
   143fe:	28 30       	cpi	r18, 0x08	; 8
   14400:	d9 f0       	breq	.+54     	; 0x14438 <EthernetClient::connected()+0x42>
   14402:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   14404:	0e 94 f1 a1 	call	0x143e2	; 0x143e2 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   14408:	84 31       	cpi	r24, 0x14	; 20
   1440a:	89 f0       	breq	.+34     	; 0x1442e <EthernetClient::connected()+0x38>
   1440c:	88 23       	and	r24, r24
   1440e:	79 f0       	breq	.+30     	; 0x1442e <EthernetClient::connected()+0x38>
   14410:	88 31       	cpi	r24, 0x18	; 24
   14412:	69 f0       	breq	.+26     	; 0x1442e <EthernetClient::connected()+0x38>
   14414:	21 e0       	ldi	r18, 0x01	; 1
   14416:	8c 31       	cpi	r24, 0x1C	; 28
   14418:	59 f4       	brne	.+22     	; 0x14430 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1441a:	e8 81       	ld	r30, Y
   1441c:	f9 81       	ldd	r31, Y+1	; 0x01
   1441e:	00 84       	ldd	r0, Z+8	; 0x08
   14420:	f1 85       	ldd	r31, Z+9	; 0x09
   14422:	e0 2d       	mov	r30, r0
   14424:	ce 01       	movw	r24, r28
   14426:	19 95       	eicall
   14428:	21 e0       	ldi	r18, 0x01	; 1
   1442a:	89 2b       	or	r24, r25
   1442c:	09 f4       	brne	.+2      	; 0x14430 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1442e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   14430:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   14432:	df 91       	pop	r29
   14434:	cf 91       	pop	r28
   14436:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   14438:	80 e0       	ldi	r24, 0x00	; 0
   1443a:	fb cf       	rjmp	.-10     	; 0x14432 <EthernetClient::connected()+0x3c>

0001443c <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   1443c:	cf 92       	push	r12
   1443e:	df 92       	push	r13
   14440:	ef 92       	push	r14
   14442:	ff 92       	push	r15
   14444:	cf 93       	push	r28
   14446:	df 93       	push	r29
   14448:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   1444a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1444c:	88 30       	cpi	r24, 0x08	; 8
   1444e:	49 f1       	breq	.+82     	; 0x144a2 <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   14450:	68 e0       	ldi	r22, 0x08	; 8
   14452:	70 e0       	ldi	r23, 0x00	; 0
   14454:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   14458:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1445c:	6b 01       	movw	r12, r22
   1445e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   14460:	ce 01       	movw	r24, r28
   14462:	0e 94 f1 a1 	call	0x143e2	; 0x143e2 <EthernetClient::status()>
   14466:	88 23       	and	r24, r24
   14468:	91 f0       	breq	.+36     	; 0x1448e <EthernetClient::stop()+0x52>
   1446a:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1446e:	6c 19       	sub	r22, r12
   14470:	7d 09       	sbc	r23, r13
   14472:	8e 09       	sbc	r24, r14
   14474:	9f 09       	sbc	r25, r15
   14476:	68 3e       	cpi	r22, 0xE8	; 232
   14478:	73 40       	sbci	r23, 0x03	; 3
   1447a:	81 05       	cpc	r24, r1
   1447c:	91 05       	cpc	r25, r1
   1447e:	38 f4       	brcc	.+14     	; 0x1448e <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   14480:	61 e0       	ldi	r22, 0x01	; 1
   14482:	70 e0       	ldi	r23, 0x00	; 0
   14484:	80 e0       	ldi	r24, 0x00	; 0
   14486:	90 e0       	ldi	r25, 0x00	; 0
   14488:	0e 94 20 92 	call	0x12440	; 0x12440 <delay>
   1448c:	e9 cf       	rjmp	.-46     	; 0x14460 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   1448e:	ce 01       	movw	r24, r28
   14490:	0e 94 f1 a1 	call	0x143e2	; 0x143e2 <EthernetClient::status()>
   14494:	88 23       	and	r24, r24
   14496:	19 f0       	breq	.+6      	; 0x1449e <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   14498:	8c 85       	ldd	r24, Y+12	; 0x0c
   1449a:	0e 94 0d a1 	call	0x1421a	; 0x1421a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   1449e:	88 e0       	ldi	r24, 0x08	; 8
   144a0:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   144a2:	df 91       	pop	r29
   144a4:	cf 91       	pop	r28
   144a6:	ff 90       	pop	r15
   144a8:	ef 90       	pop	r14
   144aa:	df 90       	pop	r13
   144ac:	cf 90       	pop	r12
   144ae:	08 95       	ret

000144b0 <localtime>:
localtime():
   144b0:	62 e9       	ldi	r22, 0x92	; 146
   144b2:	73 e1       	ldi	r23, 0x13	; 19
   144b4:	0e 94 5f a2 	call	0x144be	; 0x144be <localtime_r>
   144b8:	82 e9       	ldi	r24, 0x92	; 146
   144ba:	93 e1       	ldi	r25, 0x13	; 19
   144bc:	08 95       	ret

000144be <localtime_r>:
localtime_r():
   144be:	cf 92       	push	r12
   144c0:	df 92       	push	r13
   144c2:	ef 92       	push	r14
   144c4:	ff 92       	push	r15
   144c6:	0f 93       	push	r16
   144c8:	1f 93       	push	r17
   144ca:	cf 93       	push	r28
   144cc:	df 93       	push	r29
   144ce:	00 d0       	rcall	.+0      	; 0x144d0 <localtime_r+0x12>
   144d0:	1f 92       	push	r1
   144d2:	cd b7       	in	r28, 0x3d	; 61
   144d4:	de b7       	in	r29, 0x3e	; 62
   144d6:	6c 01       	movw	r12, r24
   144d8:	7b 01       	movw	r14, r22
   144da:	e0 91 a8 13 	lds	r30, 0x13A8	; 0x8013a8 <__dst_ptr>
   144de:	f0 91 a9 13 	lds	r31, 0x13A9	; 0x8013a9 <__dst_ptr+0x1>
   144e2:	0f ef       	ldi	r16, 0xFF	; 255
   144e4:	1f ef       	ldi	r17, 0xFF	; 255
   144e6:	30 97       	sbiw	r30, 0x00	; 0
   144e8:	21 f0       	breq	.+8      	; 0x144f2 <localtime_r+0x34>
   144ea:	6e e9       	ldi	r22, 0x9E	; 158
   144ec:	73 e1       	ldi	r23, 0x13	; 19
   144ee:	19 95       	eicall
   144f0:	8c 01       	movw	r16, r24
   144f2:	f6 01       	movw	r30, r12
   144f4:	80 81       	ld	r24, Z
   144f6:	91 81       	ldd	r25, Z+1	; 0x01
   144f8:	a2 81       	ldd	r26, Z+2	; 0x02
   144fa:	b3 81       	ldd	r27, Z+3	; 0x03
   144fc:	40 91 9e 13 	lds	r20, 0x139E	; 0x80139e <__utc_offset>
   14500:	50 91 9f 13 	lds	r21, 0x139F	; 0x80139f <__utc_offset+0x1>
   14504:	60 91 a0 13 	lds	r22, 0x13A0	; 0x8013a0 <__utc_offset+0x2>
   14508:	70 91 a1 13 	lds	r23, 0x13A1	; 0x8013a1 <__utc_offset+0x3>
   1450c:	84 0f       	add	r24, r20
   1450e:	95 1f       	adc	r25, r21
   14510:	a6 1f       	adc	r26, r22
   14512:	b7 1f       	adc	r27, r23
   14514:	10 16       	cp	r1, r16
   14516:	11 06       	cpc	r1, r17
   14518:	cc f0       	brlt	.+50     	; 0x1454c <localtime_r+0x8e>
   1451a:	89 83       	std	Y+1, r24	; 0x01
   1451c:	9a 83       	std	Y+2, r25	; 0x02
   1451e:	ab 83       	std	Y+3, r26	; 0x03
   14520:	bc 83       	std	Y+4, r27	; 0x04
   14522:	b7 01       	movw	r22, r14
   14524:	ce 01       	movw	r24, r28
   14526:	01 96       	adiw	r24, 0x01	; 1
   14528:	0e 94 b0 a2 	call	0x14560	; 0x14560 <gmtime_r>
   1452c:	f7 01       	movw	r30, r14
   1452e:	13 87       	std	Z+11, r17	; 0x0b
   14530:	02 87       	std	Z+10, r16	; 0x0a
   14532:	0f 90       	pop	r0
   14534:	0f 90       	pop	r0
   14536:	0f 90       	pop	r0
   14538:	0f 90       	pop	r0
   1453a:	df 91       	pop	r29
   1453c:	cf 91       	pop	r28
   1453e:	1f 91       	pop	r17
   14540:	0f 91       	pop	r16
   14542:	ff 90       	pop	r15
   14544:	ef 90       	pop	r14
   14546:	df 90       	pop	r13
   14548:	cf 90       	pop	r12
   1454a:	08 95       	ret
   1454c:	a8 01       	movw	r20, r16
   1454e:	01 2e       	mov	r0, r17
   14550:	00 0c       	add	r0, r0
   14552:	66 0b       	sbc	r22, r22
   14554:	77 0b       	sbc	r23, r23
   14556:	84 0f       	add	r24, r20
   14558:	95 1f       	adc	r25, r21
   1455a:	a6 1f       	adc	r26, r22
   1455c:	b7 1f       	adc	r27, r23
   1455e:	dd cf       	rjmp	.-70     	; 0x1451a <localtime_r+0x5c>

00014560 <gmtime_r>:
gmtime_r():
   14560:	cf 92       	push	r12
   14562:	df 92       	push	r13
   14564:	ef 92       	push	r14
   14566:	ff 92       	push	r15
   14568:	0f 93       	push	r16
   1456a:	1f 93       	push	r17
   1456c:	cf 93       	push	r28
   1456e:	df 93       	push	r29
   14570:	00 d0       	rcall	.+0      	; 0x14572 <gmtime_r+0x12>
   14572:	00 d0       	rcall	.+0      	; 0x14574 <gmtime_r+0x14>
   14574:	1f 92       	push	r1
   14576:	1f 92       	push	r1
   14578:	cd b7       	in	r28, 0x3d	; 61
   1457a:	de b7       	in	r29, 0x3e	; 62
   1457c:	8b 01       	movw	r16, r22
   1457e:	fc 01       	movw	r30, r24
   14580:	60 81       	ld	r22, Z
   14582:	71 81       	ldd	r23, Z+1	; 0x01
   14584:	82 81       	ldd	r24, Z+2	; 0x02
   14586:	93 81       	ldd	r25, Z+3	; 0x03
   14588:	20 e8       	ldi	r18, 0x80	; 128
   1458a:	31 e5       	ldi	r19, 0x51	; 81
   1458c:	41 e0       	ldi	r20, 0x01	; 1
   1458e:	50 e0       	ldi	r21, 0x00	; 0
   14590:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
   14594:	69 01       	movw	r12, r18
   14596:	7a 01       	movw	r14, r20
   14598:	2c e3       	ldi	r18, 0x3C	; 60
   1459a:	30 e0       	ldi	r19, 0x00	; 0
   1459c:	40 e0       	ldi	r20, 0x00	; 0
   1459e:	50 e0       	ldi	r21, 0x00	; 0
   145a0:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
   145a4:	29 83       	std	Y+1, r18	; 0x01
   145a6:	3a 83       	std	Y+2, r19	; 0x02
   145a8:	4b 83       	std	Y+3, r20	; 0x03
   145aa:	5c 83       	std	Y+4, r21	; 0x04
   145ac:	89 81       	ldd	r24, Y+1	; 0x01
   145ae:	9a 81       	ldd	r25, Y+2	; 0x02
   145b0:	ab 81       	ldd	r26, Y+3	; 0x03
   145b2:	bc 81       	ldd	r27, Y+4	; 0x04
   145b4:	f8 01       	movw	r30, r16
   145b6:	60 83       	st	Z, r22
   145b8:	6c e3       	ldi	r22, 0x3C	; 60
   145ba:	70 e0       	ldi	r23, 0x00	; 0
   145bc:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   145c0:	dc 01       	movw	r26, r24
   145c2:	f8 01       	movw	r30, r16
   145c4:	a1 83       	std	Z+1, r26	; 0x01
   145c6:	62 83       	std	Z+2, r22	; 0x02
   145c8:	c6 01       	movw	r24, r12
   145ca:	06 96       	adiw	r24, 0x06	; 6
   145cc:	67 e0       	ldi	r22, 0x07	; 7
   145ce:	70 e0       	ldi	r23, 0x00	; 0
   145d0:	0e 94 0c bb 	call	0x17618	; 0x17618 <__udivmodhi4>
   145d4:	84 83       	std	Z+4, r24	; 0x04
   145d6:	2d ea       	ldi	r18, 0xAD	; 173
   145d8:	3e e8       	ldi	r19, 0x8E	; 142
   145da:	40 e0       	ldi	r20, 0x00	; 0
   145dc:	50 e0       	ldi	r21, 0x00	; 0
   145de:	c7 01       	movw	r24, r14
   145e0:	b6 01       	movw	r22, r12
   145e2:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
   145e6:	29 83       	std	Y+1, r18	; 0x01
   145e8:	3a 83       	std	Y+2, r19	; 0x02
   145ea:	6d 83       	std	Y+5, r22	; 0x05
   145ec:	7e 83       	std	Y+6, r23	; 0x06
   145ee:	8f 83       	std	Y+7, r24	; 0x07
   145f0:	98 87       	std	Y+8, r25	; 0x08
   145f2:	89 81       	ldd	r24, Y+1	; 0x01
   145f4:	9a 81       	ldd	r25, Y+2	; 0x02
   145f6:	24 e6       	ldi	r18, 0x64	; 100
   145f8:	28 9f       	mul	r18, r24
   145fa:	60 01       	movw	r12, r0
   145fc:	29 9f       	mul	r18, r25
   145fe:	d0 0c       	add	r13, r0
   14600:	11 24       	eor	r1, r1
   14602:	6d 81       	ldd	r22, Y+5	; 0x05
   14604:	7e 81       	ldd	r23, Y+6	; 0x06
   14606:	8f 81       	ldd	r24, Y+7	; 0x07
   14608:	98 85       	ldd	r25, Y+8	; 0x08
   1460a:	25 eb       	ldi	r18, 0xB5	; 181
   1460c:	35 e0       	ldi	r19, 0x05	; 5
   1460e:	40 e0       	ldi	r20, 0x00	; 0
   14610:	50 e0       	ldi	r21, 0x00	; 0
   14612:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
   14616:	29 83       	std	Y+1, r18	; 0x01
   14618:	3a 83       	std	Y+2, r19	; 0x02
   1461a:	6d 83       	std	Y+5, r22	; 0x05
   1461c:	7e 83       	std	Y+6, r23	; 0x06
   1461e:	e9 80       	ldd	r14, Y+1	; 0x01
   14620:	fa 80       	ldd	r15, Y+2	; 0x02
   14622:	ee 0c       	add	r14, r14
   14624:	ff 1c       	adc	r15, r15
   14626:	ee 0c       	add	r14, r14
   14628:	ff 1c       	adc	r15, r15
   1462a:	ec 0c       	add	r14, r12
   1462c:	fd 1c       	adc	r15, r13
   1462e:	8d 81       	ldd	r24, Y+5	; 0x05
   14630:	9e 81       	ldd	r25, Y+6	; 0x06
   14632:	f5 e6       	ldi	r31, 0x65	; 101
   14634:	ef 16       	cp	r14, r31
   14636:	f1 04       	cpc	r15, r1
   14638:	08 f4       	brcc	.+2      	; 0x1463c <gmtime_r+0xdc>
   1463a:	3f c0       	rjmp	.+126    	; 0x146ba <gmtime_r+0x15a>
   1463c:	01 96       	adiw	r24, 0x01	; 1
   1463e:	21 e0       	ldi	r18, 0x01	; 1
   14640:	30 e0       	ldi	r19, 0x00	; 0
   14642:	a9 01       	movw	r20, r18
   14644:	44 59       	subi	r20, 0x94	; 148
   14646:	5e 4f       	sbci	r21, 0xFE	; 254
   14648:	48 17       	cp	r20, r24
   1464a:	59 07       	cpc	r21, r25
   1464c:	60 f4       	brcc	.+24     	; 0x14666 <gmtime_r+0x106>
   1464e:	6d e6       	ldi	r22, 0x6D	; 109
   14650:	71 e0       	ldi	r23, 0x01	; 1
   14652:	82 1b       	sub	r24, r18
   14654:	93 0b       	sbc	r25, r19
   14656:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   1465a:	dc 01       	movw	r26, r24
   1465c:	e6 0e       	add	r14, r22
   1465e:	f7 1e       	adc	r15, r23
   14660:	cd 01       	movw	r24, r26
   14662:	30 e0       	ldi	r19, 0x00	; 0
   14664:	20 e0       	ldi	r18, 0x00	; 0
   14666:	44 e6       	ldi	r20, 0x64	; 100
   14668:	e4 0e       	add	r14, r20
   1466a:	f1 1c       	adc	r15, r1
   1466c:	f8 01       	movw	r30, r16
   1466e:	f7 82       	std	Z+7, r15	; 0x07
   14670:	e6 82       	std	Z+6, r14	; 0x06
   14672:	91 87       	std	Z+9, r25	; 0x09
   14674:	80 87       	std	Z+8, r24	; 0x08
   14676:	25 5c       	subi	r18, 0xC5	; 197
   14678:	3f 4f       	sbci	r19, 0xFF	; 255
   1467a:	82 17       	cp	r24, r18
   1467c:	93 07       	cpc	r25, r19
   1467e:	38 f5       	brcc	.+78     	; 0x146ce <gmtime_r+0x16e>
   14680:	6f e1       	ldi	r22, 0x1F	; 31
   14682:	70 e0       	ldi	r23, 0x00	; 0
   14684:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   14688:	dc 01       	movw	r26, r24
   1468a:	f8 01       	movw	r30, r16
   1468c:	65 83       	std	Z+5, r22	; 0x05
   1468e:	a3 83       	std	Z+3, r26	; 0x03
   14690:	f8 01       	movw	r30, r16
   14692:	13 86       	std	Z+11, r1	; 0x0b
   14694:	12 86       	std	Z+10, r1	; 0x0a
   14696:	83 81       	ldd	r24, Z+3	; 0x03
   14698:	8f 5f       	subi	r24, 0xFF	; 255
   1469a:	83 83       	std	Z+3, r24	; 0x03
   1469c:	28 96       	adiw	r28, 0x08	; 8
   1469e:	0f b6       	in	r0, 0x3f	; 63
   146a0:	f8 94       	cli
   146a2:	de bf       	out	0x3e, r29	; 62
   146a4:	0f be       	out	0x3f, r0	; 63
   146a6:	cd bf       	out	0x3d, r28	; 61
   146a8:	df 91       	pop	r29
   146aa:	cf 91       	pop	r28
   146ac:	1f 91       	pop	r17
   146ae:	0f 91       	pop	r16
   146b0:	ff 90       	pop	r15
   146b2:	ef 90       	pop	r14
   146b4:	df 90       	pop	r13
   146b6:	cf 90       	pop	r12
   146b8:	08 95       	ret
   146ba:	51 e0       	ldi	r21, 0x01	; 1
   146bc:	40 e0       	ldi	r20, 0x00	; 0
   146be:	24 e6       	ldi	r18, 0x64	; 100
   146c0:	e2 16       	cp	r14, r18
   146c2:	f1 04       	cpc	r15, r1
   146c4:	09 f4       	brne	.+2      	; 0x146c8 <gmtime_r+0x168>
   146c6:	50 e0       	ldi	r21, 0x00	; 0
   146c8:	25 2f       	mov	r18, r21
   146ca:	34 2f       	mov	r19, r20
   146cc:	ba cf       	rjmp	.-140    	; 0x14642 <gmtime_r+0xe2>
   146ce:	69 e9       	ldi	r22, 0x99	; 153
   146d0:	70 e0       	ldi	r23, 0x00	; 0
   146d2:	82 1b       	sub	r24, r18
   146d4:	93 0b       	sbc	r25, r19
   146d6:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   146da:	dc 01       	movw	r26, r24
   146dc:	26 2f       	mov	r18, r22
   146de:	22 0f       	add	r18, r18
   146e0:	22 0f       	add	r18, r18
   146e2:	f2 2e       	mov	r15, r18
   146e4:	f6 0e       	add	r15, r22
   146e6:	6d e3       	ldi	r22, 0x3D	; 61
   146e8:	70 e0       	ldi	r23, 0x00	; 0
   146ea:	cd 01       	movw	r24, r26
   146ec:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   146f0:	dc 01       	movw	r26, r24
   146f2:	e6 2e       	mov	r14, r22
   146f4:	ee 0c       	add	r14, r14
   146f6:	6f e1       	ldi	r22, 0x1F	; 31
   146f8:	70 e0       	ldi	r23, 0x00	; 0
   146fa:	cd 01       	movw	r24, r26
   146fc:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   14700:	dc 01       	movw	r26, r24
   14702:	22 e0       	ldi	r18, 0x02	; 2
   14704:	26 0f       	add	r18, r22
   14706:	2f 0d       	add	r18, r15
   14708:	2e 0d       	add	r18, r14
   1470a:	f8 01       	movw	r30, r16
   1470c:	25 83       	std	Z+5, r18	; 0x05
   1470e:	bf cf       	rjmp	.-130    	; 0x1468e <gmtime_r+0x12e>

00014710 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   14710:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   14712:	80 81       	ld	r24, Z
   14714:	91 81       	ldd	r25, Z+1	; 0x01
   14716:	87 30       	cpi	r24, 0x07	; 7
   14718:	91 05       	cpc	r25, r1
   1471a:	38 f4       	brcc	.+14     	; 0x1472a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   1471c:	85 30       	cpi	r24, 0x05	; 5
   1471e:	91 05       	cpc	r25, r1
   14720:	88 f4       	brcc	.+34     	; 0x14744 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   14722:	03 97       	sbiw	r24, 0x03	; 3
   14724:	a0 f4       	brcc	.+40     	; 0x1474e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   14726:	80 e0       	ldi	r24, 0x00	; 0
   14728:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1472a:	87 30       	cpi	r24, 0x07	; 7
   1472c:	91 05       	cpc	r25, r1
   1472e:	61 f0       	breq	.+24     	; 0x14748 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   14730:	0a 97       	sbiw	r24, 0x0a	; 10
   14732:	c9 f7       	brne	.-14     	; 0x14726 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   14734:	62 81       	ldd	r22, Z+2	; 0x02
   14736:	73 81       	ldd	r23, Z+3	; 0x03
   14738:	84 81       	ldd	r24, Z+4	; 0x04
   1473a:	95 81       	ldd	r25, Z+5	; 0x05
   1473c:	0e 94 75 bc 	call	0x178ea	; 0x178ea <__fixunssfsi>
   14740:	86 2f       	mov	r24, r22
   14742:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   14744:	82 81       	ldd	r24, Z+2	; 0x02
   14746:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   14748:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1474a:	81 95       	neg	r24
   1474c:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1474e:	02 80       	ldd	r0, Z+2	; 0x02
   14750:	f3 81       	ldd	r31, Z+3	; 0x03
   14752:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   14754:	30 97       	sbiw	r30, 0x00	; 0
   14756:	39 f3       	breq	.-50     	; 0x14726 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   14758:	80 81       	ld	r24, Z
   1475a:	84 37       	cpi	r24, 0x74	; 116
   1475c:	c9 f0       	breq	.+50     	; 0x14790 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1475e:	8b 32       	cpi	r24, 0x2B	; 43
   14760:	89 f0       	breq	.+34     	; 0x14784 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   14762:	8d 32       	cpi	r24, 0x2D	; 45
   14764:	81 f4       	brne	.+32     	; 0x14786 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   14766:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   14768:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   1476a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1476c:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1476e:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   14770:	30 ed       	ldi	r19, 0xD0	; 208
   14772:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   14774:	3a 30       	cpi	r19, 0x0A	; 10
   14776:	48 f4       	brcc	.+18     	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   14778:	82 9f       	mul	r24, r18
   1477a:	60 0d       	add	r22, r0
   1477c:	11 24       	eor	r1, r1
   1477e:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   14780:	80 53       	subi	r24, 0x30	; 48
   14782:	f5 cf       	rjmp	.-22     	; 0x1476e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   14784:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   14786:	90 e0       	ldi	r25, 0x00	; 0
   14788:	f0 cf       	rjmp	.-32     	; 0x1476a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1478a:	91 11       	cpse	r25, r1
   1478c:	de cf       	rjmp	.-68     	; 0x1474a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   1478e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   14790:	81 e0       	ldi	r24, 0x01	; 1
   14792:	fd cf       	rjmp	.-6      	; 0x1478e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

00014794 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7081():
   14794:	0f 93       	push	r16
   14796:	1f 93       	push	r17
   14798:	cf 93       	push	r28
   1479a:	df 93       	push	r29
   1479c:	10 92 d7 0b 	sts	0x0BD7, r1	; 0x800bd7 <Serial+0x3>
   147a0:	10 92 d6 0b 	sts	0x0BD6, r1	; 0x800bd6 <Serial+0x2>
   147a4:	88 ee       	ldi	r24, 0xE8	; 232
   147a6:	93 e0       	ldi	r25, 0x03	; 3
   147a8:	a0 e0       	ldi	r26, 0x00	; 0
   147aa:	b0 e0       	ldi	r27, 0x00	; 0
   147ac:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <Serial+0x4>
   147b0:	90 93 d9 0b 	sts	0x0BD9, r25	; 0x800bd9 <Serial+0x5>
   147b4:	a0 93 da 0b 	sts	0x0BDA, r26	; 0x800bda <Serial+0x6>
   147b8:	b0 93 db 0b 	sts	0x0BDB, r27	; 0x800bdb <Serial+0x7>
   147bc:	2a e5       	ldi	r18, 0x5A	; 90
   147be:	32 e0       	ldi	r19, 0x02	; 2
   147c0:	30 93 d5 0b 	sts	0x0BD5, r19	; 0x800bd5 <Serial+0x1>
   147c4:	20 93 d4 0b 	sts	0x0BD4, r18	; 0x800bd4 <Serial>
   147c8:	25 ec       	ldi	r18, 0xC5	; 197
   147ca:	30 e0       	ldi	r19, 0x00	; 0
   147cc:	30 93 e1 0b 	sts	0x0BE1, r19	; 0x800be1 <Serial+0xd>
   147d0:	20 93 e0 0b 	sts	0x0BE0, r18	; 0x800be0 <Serial+0xc>
   147d4:	24 ec       	ldi	r18, 0xC4	; 196
   147d6:	30 e0       	ldi	r19, 0x00	; 0
   147d8:	30 93 e3 0b 	sts	0x0BE3, r19	; 0x800be3 <Serial+0xf>
   147dc:	20 93 e2 0b 	sts	0x0BE2, r18	; 0x800be2 <Serial+0xe>
   147e0:	20 ec       	ldi	r18, 0xC0	; 192
   147e2:	30 e0       	ldi	r19, 0x00	; 0
   147e4:	30 93 e5 0b 	sts	0x0BE5, r19	; 0x800be5 <Serial+0x11>
   147e8:	20 93 e4 0b 	sts	0x0BE4, r18	; 0x800be4 <Serial+0x10>
   147ec:	21 ec       	ldi	r18, 0xC1	; 193
   147ee:	30 e0       	ldi	r19, 0x00	; 0
   147f0:	30 93 e7 0b 	sts	0x0BE7, r19	; 0x800be7 <Serial+0x13>
   147f4:	20 93 e6 0b 	sts	0x0BE6, r18	; 0x800be6 <Serial+0x12>
   147f8:	22 ec       	ldi	r18, 0xC2	; 194
   147fa:	30 e0       	ldi	r19, 0x00	; 0
   147fc:	30 93 e9 0b 	sts	0x0BE9, r19	; 0x800be9 <Serial+0x15>
   14800:	20 93 e8 0b 	sts	0x0BE8, r18	; 0x800be8 <Serial+0x14>
   14804:	26 ec       	ldi	r18, 0xC6	; 198
   14806:	30 e0       	ldi	r19, 0x00	; 0
   14808:	30 93 eb 0b 	sts	0x0BEB, r19	; 0x800beb <Serial+0x17>
   1480c:	20 93 ea 0b 	sts	0x0BEA, r18	; 0x800bea <Serial+0x16>
   14810:	10 92 ed 0b 	sts	0x0BED, r1	; 0x800bed <Serial+0x19>
   14814:	10 92 ee 0b 	sts	0x0BEE, r1	; 0x800bee <Serial+0x1a>
   14818:	10 92 ef 0b 	sts	0x0BEF, r1	; 0x800bef <Serial+0x1b>
   1481c:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <Serial+0x1c>
   14820:	c2 ee       	ldi	r28, 0xE2	; 226
   14822:	d2 e0       	ldi	r29, 0x02	; 2
   14824:	d0 93 98 11 	sts	0x1198, r29	; 0x801198 <_ZL11INADDR_NONE.lto_priv.203+0x1>
   14828:	c0 93 97 11 	sts	0x1197, r28	; 0x801197 <_ZL11INADDR_NONE.lto_priv.203>
   1482c:	10 92 99 11 	sts	0x1199, r1	; 0x801199 <_ZL11INADDR_NONE.lto_priv.203+0x2>
   14830:	10 92 9a 11 	sts	0x119A, r1	; 0x80119a <_ZL11INADDR_NONE.lto_priv.203+0x3>
   14834:	10 92 9b 11 	sts	0x119B, r1	; 0x80119b <_ZL11INADDR_NONE.lto_priv.203+0x4>
   14838:	10 92 9c 11 	sts	0x119C, r1	; 0x80119c <_ZL11INADDR_NONE.lto_priv.203+0x5>
   1483c:	10 92 63 0e 	sts	0x0E63, r1	; 0x800e63 <Wire+0x3>
   14840:	10 92 62 0e 	sts	0x0E62, r1	; 0x800e62 <Wire+0x2>
   14844:	80 93 64 0e 	sts	0x0E64, r24	; 0x800e64 <Wire+0x4>
   14848:	90 93 65 0e 	sts	0x0E65, r25	; 0x800e65 <Wire+0x5>
   1484c:	a0 93 66 0e 	sts	0x0E66, r26	; 0x800e66 <Wire+0x6>
   14850:	b0 93 67 0e 	sts	0x0E67, r27	; 0x800e67 <Wire+0x7>
   14854:	8c e6       	ldi	r24, 0x6C	; 108
   14856:	92 e0       	ldi	r25, 0x02	; 2
   14858:	90 93 61 0e 	sts	0x0E61, r25	; 0x800e61 <Wire+0x1>
   1485c:	80 93 60 0e 	sts	0x0E60, r24	; 0x800e60 <Wire>
   14860:	d0 93 9e 11 	sts	0x119E, r29	; 0x80119e <_ZL11INADDR_NONE.lto_priv.202+0x1>
   14864:	c0 93 9d 11 	sts	0x119D, r28	; 0x80119d <_ZL11INADDR_NONE.lto_priv.202>
   14868:	10 92 9f 11 	sts	0x119F, r1	; 0x80119f <_ZL11INADDR_NONE.lto_priv.202+0x2>
   1486c:	10 92 a0 11 	sts	0x11A0, r1	; 0x8011a0 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   14870:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   14874:	10 92 a2 11 	sts	0x11A2, r1	; 0x8011a2 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   14878:	80 e5       	ldi	r24, 0x50	; 80
   1487a:	80 93 a3 11 	sts	0x11A3, r24	; 0x8011a3 <wiznet_SPI_settings>
   1487e:	81 e0       	ldi	r24, 0x01	; 1
   14880:	80 93 a4 11 	sts	0x11A4, r24	; 0x8011a4 <wiznet_SPI_settings+0x1>
   14884:	d0 93 a6 11 	sts	0x11A6, r29	; 0x8011a6 <_ZL11INADDR_NONE.lto_priv.201+0x1>
   14888:	c0 93 a5 11 	sts	0x11A5, r28	; 0x8011a5 <_ZL11INADDR_NONE.lto_priv.201>
   1488c:	10 92 a7 11 	sts	0x11A7, r1	; 0x8011a7 <_ZL11INADDR_NONE.lto_priv.201+0x2>
   14890:	10 92 a8 11 	sts	0x11A8, r1	; 0x8011a8 <_ZL11INADDR_NONE.lto_priv.201+0x3>
   14894:	10 92 a9 11 	sts	0x11A9, r1	; 0x8011a9 <_ZL11INADDR_NONE.lto_priv.201+0x4>
   14898:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <_ZL11INADDR_NONE.lto_priv.201+0x5>
   1489c:	d0 93 ac 11 	sts	0x11AC, r29	; 0x8011ac <_ZL11INADDR_NONE.lto_priv.200+0x1>
   148a0:	c0 93 ab 11 	sts	0x11AB, r28	; 0x8011ab <_ZL11INADDR_NONE.lto_priv.200>
   148a4:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <_ZL11INADDR_NONE.lto_priv.200+0x2>
   148a8:	10 92 ae 11 	sts	0x11AE, r1	; 0x8011ae <_ZL11INADDR_NONE.lto_priv.200+0x3>
   148ac:	10 92 af 11 	sts	0x11AF, r1	; 0x8011af <_ZL11INADDR_NONE.lto_priv.200+0x4>
   148b0:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   148b4:	d0 93 b2 11 	sts	0x11B2, r29	; 0x8011b2 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   148b8:	c0 93 b1 11 	sts	0x11B1, r28	; 0x8011b1 <_ZL11INADDR_NONE.lto_priv.199>
   148bc:	10 92 b3 11 	sts	0x11B3, r1	; 0x8011b3 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   148c0:	10 92 b4 11 	sts	0x11B4, r1	; 0x8011b4 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   148c4:	10 92 b5 11 	sts	0x11B5, r1	; 0x8011b5 <_ZL11INADDR_NONE.lto_priv.199+0x4>
   148c8:	10 92 b6 11 	sts	0x11B6, r1	; 0x8011b6 <_ZL11INADDR_NONE.lto_priv.199+0x5>
   148cc:	d0 93 b8 11 	sts	0x11B8, r29	; 0x8011b8 <_ZL11INADDR_NONE.lto_priv.198+0x1>
   148d0:	c0 93 b7 11 	sts	0x11B7, r28	; 0x8011b7 <_ZL11INADDR_NONE.lto_priv.198>
   148d4:	10 92 b9 11 	sts	0x11B9, r1	; 0x8011b9 <_ZL11INADDR_NONE.lto_priv.198+0x2>
   148d8:	10 92 ba 11 	sts	0x11BA, r1	; 0x8011ba <_ZL11INADDR_NONE.lto_priv.198+0x3>
   148dc:	10 92 bb 11 	sts	0x11BB, r1	; 0x8011bb <_ZL11INADDR_NONE.lto_priv.198+0x4>
   148e0:	10 92 bc 11 	sts	0x11BC, r1	; 0x8011bc <_ZL11INADDR_NONE.lto_priv.198+0x5>
   148e4:	d0 93 be 11 	sts	0x11BE, r29	; 0x8011be <_ZL11INADDR_NONE.lto_priv.197+0x1>
   148e8:	c0 93 bd 11 	sts	0x11BD, r28	; 0x8011bd <_ZL11INADDR_NONE.lto_priv.197>
   148ec:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <_ZL11INADDR_NONE.lto_priv.197+0x2>
   148f0:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   148f4:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   148f8:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   148fc:	d0 93 72 0c 	sts	0x0C72, r29	; 0x800c72 <Ethernet+0x1>
   14900:	c0 93 71 0c 	sts	0x0C71, r28	; 0x800c71 <Ethernet>
   14904:	10 92 73 0c 	sts	0x0C73, r1	; 0x800c73 <Ethernet+0x2>
   14908:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <Ethernet+0x3>
   1490c:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <Ethernet+0x4>
   14910:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <Ethernet+0x5>
   14914:	10 92 7c 0c 	sts	0x0C7C, r1	; 0x800c7c <Ethernet+0xb>
   14918:	10 92 7b 0c 	sts	0x0C7B, r1	; 0x800c7b <Ethernet+0xa>
   1491c:	8a e0       	ldi	r24, 0x0A	; 10
   1491e:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <Ethernet+0xc>
   14922:	d0 93 7f 0c 	sts	0x0C7F, r29	; 0x800c7f <_ZL11INADDR_NONE.lto_priv.196+0x1>
   14926:	c0 93 7e 0c 	sts	0x0C7E, r28	; 0x800c7e <_ZL11INADDR_NONE.lto_priv.196>
   1492a:	10 92 80 0c 	sts	0x0C80, r1	; 0x800c80 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   1492e:	10 92 81 0c 	sts	0x0C81, r1	; 0x800c81 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   14932:	10 92 82 0c 	sts	0x0C82, r1	; 0x800c82 <_ZL11INADDR_NONE.lto_priv.196+0x4>
   14936:	10 92 83 0c 	sts	0x0C83, r1	; 0x800c83 <_ZL11INADDR_NONE.lto_priv.196+0x5>
   1493a:	d0 93 c4 11 	sts	0x11C4, r29	; 0x8011c4 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   1493e:	c0 93 c3 11 	sts	0x11C3, r28	; 0x8011c3 <_ZL11INADDR_NONE.lto_priv.195>
   14942:	10 92 c5 11 	sts	0x11C5, r1	; 0x8011c5 <_ZL11INADDR_NONE.lto_priv.195+0x2>
   14946:	10 92 c6 11 	sts	0x11C6, r1	; 0x8011c6 <_ZL11INADDR_NONE.lto_priv.195+0x3>
   1494a:	10 92 c7 11 	sts	0x11C7, r1	; 0x8011c7 <_ZL11INADDR_NONE.lto_priv.195+0x4>
   1494e:	10 92 c8 11 	sts	0x11C8, r1	; 0x8011c8 <_ZL11INADDR_NONE.lto_priv.195+0x5>
   14952:	8a e0       	ldi	r24, 0x0A	; 10
   14954:	90 e0       	ldi	r25, 0x00	; 0
   14956:	0e 94 91 b5 	call	0x16b22	; 0x16b22 <malloc>
   1495a:	90 93 85 0c 	sts	0x0C85, r25	; 0x800c85 <array_pids+0x1>
   1495e:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <array_pids>
   14962:	d0 93 ca 11 	sts	0x11CA, r29	; 0x8011ca <_ZL11INADDR_NONE.lto_priv.194+0x1>
   14966:	c0 93 c9 11 	sts	0x11C9, r28	; 0x8011c9 <_ZL11INADDR_NONE.lto_priv.194>
   1496a:	10 92 cb 11 	sts	0x11CB, r1	; 0x8011cb <_ZL11INADDR_NONE.lto_priv.194+0x2>
   1496e:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <_ZL11INADDR_NONE.lto_priv.194+0x3>
   14972:	10 92 cd 11 	sts	0x11CD, r1	; 0x8011cd <_ZL11INADDR_NONE.lto_priv.194+0x4>
   14976:	10 92 ce 11 	sts	0x11CE, r1	; 0x8011ce <_ZL11INADDR_NONE.lto_priv.194+0x5>
   1497a:	d0 93 d0 11 	sts	0x11D0, r29	; 0x8011d0 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   1497e:	c0 93 cf 11 	sts	0x11CF, r28	; 0x8011cf <_ZL11INADDR_NONE.lto_priv.193>
   14982:	10 92 d1 11 	sts	0x11D1, r1	; 0x8011d1 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   14986:	10 92 d2 11 	sts	0x11D2, r1	; 0x8011d2 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   1498a:	10 92 d3 11 	sts	0x11D3, r1	; 0x8011d3 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   1498e:	10 92 d4 11 	sts	0x11D4, r1	; 0x8011d4 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   14992:	8b e5       	ldi	r24, 0x5B	; 91
   14994:	97 e0       	ldi	r25, 0x07	; 7
   14996:	90 93 ab 0c 	sts	0x0CAB, r25	; 0x800cab <device+0x25>
   1499a:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <device+0x24>
   1499e:	d0 93 85 13 	sts	0x1385, r29	; 0x801385 <_ZL11INADDR_NONE.lto_priv.192+0x1>
   149a2:	c0 93 84 13 	sts	0x1384, r28	; 0x801384 <_ZL11INADDR_NONE.lto_priv.192>
   149a6:	10 92 86 13 	sts	0x1386, r1	; 0x801386 <_ZL11INADDR_NONE.lto_priv.192+0x2>
   149aa:	10 92 87 13 	sts	0x1387, r1	; 0x801387 <_ZL11INADDR_NONE.lto_priv.192+0x3>
   149ae:	10 92 88 13 	sts	0x1388, r1	; 0x801388 <_ZL11INADDR_NONE.lto_priv.192+0x4>
   149b2:	10 92 89 13 	sts	0x1389, r1	; 0x801389 <_ZL11INADDR_NONE.lto_priv.192+0x5>
   149b6:	88 e1       	ldi	r24, 0x18	; 24
   149b8:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <swSPI+0x4>
   149bc:	8a e1       	ldi	r24, 0x1A	; 26
   149be:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <swSPI+0x3>
   149c2:	89 e1       	ldi	r24, 0x19	; 25
   149c4:	80 93 bd 10 	sts	0x10BD, r24	; 0x8010bd <swSPI+0x5>
   149c8:	82 e0       	ldi	r24, 0x02	; 2
   149ca:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <swSPI+0x2>
   149ce:	10 92 b8 10 	sts	0x10B8, r1	; 0x8010b8 <swSPI>
   149d2:	10 92 b9 10 	sts	0x10B9, r1	; 0x8010b9 <swSPI+0x1>
   149d6:	10 92 be 10 	sts	0x10BE, r1	; 0x8010be <swSPI+0x6>
   149da:	60 e0       	ldi	r22, 0x00	; 0
   149dc:	89 e1       	ldi	r24, 0x19	; 25
   149de:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
   149e2:	80 e1       	ldi	r24, 0x10	; 16
   149e4:	80 93 b6 10 	sts	0x10B6, r24	; 0x8010b6 <now+0x5>
   149e8:	8c e1       	ldi	r24, 0x1C	; 28
   149ea:	80 93 b5 10 	sts	0x10B5, r24	; 0x8010b5 <now+0x4>
   149ee:	86 e0       	ldi	r24, 0x06	; 6
   149f0:	80 93 b4 10 	sts	0x10B4, r24	; 0x8010b4 <now+0x3>
   149f4:	40 e0       	ldi	r20, 0x00	; 0
   149f6:	81 e6       	ldi	r24, 0x61	; 97
   149f8:	97 e9       	ldi	r25, 0x97	; 151
   149fa:	e3 e9       	ldi	r30, 0x93	; 147
   149fc:	fe ef       	ldi	r31, 0xFE	; 254
   149fe:	54 2f       	mov	r21, r20
   14a00:	53 70       	andi	r21, 0x03	; 3
   14a02:	21 e0       	ldi	r18, 0x01	; 1
   14a04:	09 f0       	breq	.+2      	; 0x14a08 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x274>
   14a06:	20 e0       	ldi	r18, 0x00	; 0
   14a08:	61 e0       	ldi	r22, 0x01	; 1
   14a0a:	64 0f       	add	r22, r20
   14a0c:	30 e0       	ldi	r19, 0x00	; 0
   14a0e:	d9 01       	movw	r26, r18
   14a10:	a3 59       	subi	r26, 0x93	; 147
   14a12:	be 4f       	sbci	r27, 0xFE	; 254
   14a14:	8a 17       	cp	r24, r26
   14a16:	9b 07       	cpc	r25, r27
   14a18:	38 f0       	brcs	.+14     	; 0x14a28 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x294>
   14a1a:	af 01       	movw	r20, r30
   14a1c:	42 1b       	sub	r20, r18
   14a1e:	53 0b       	sbc	r21, r19
   14a20:	84 0f       	add	r24, r20
   14a22:	95 1f       	adc	r25, r21
   14a24:	46 2f       	mov	r20, r22
   14a26:	eb cf       	rjmp	.-42     	; 0x149fe <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x26a>
   14a28:	40 93 b1 10 	sts	0x10B1, r20	; 0x8010b1 <now>
   14a2c:	21 e0       	ldi	r18, 0x01	; 1
   14a2e:	62 2f       	mov	r22, r18
   14a30:	61 50       	subi	r22, 0x01	; 1
   14a32:	77 0b       	sbc	r23, r23
   14a34:	fb 01       	movw	r30, r22
   14a36:	ee 50       	subi	r30, 0x0E	; 14
   14a38:	fc 4b       	sbci	r31, 0xBC	; 188
   14a3a:	e4 91       	lpm	r30, Z
   14a3c:	51 11       	cpse	r21, r1
   14a3e:	03 c0       	rjmp	.+6      	; 0x14a46 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x2b2>
   14a40:	22 30       	cpi	r18, 0x02	; 2
   14a42:	09 f4       	brne	.+2      	; 0x14a46 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x2b2>
   14a44:	ef 5f       	subi	r30, 0xFF	; 255
   14a46:	f0 e0       	ldi	r31, 0x00	; 0
   14a48:	31 e0       	ldi	r19, 0x01	; 1
   14a4a:	32 0f       	add	r19, r18
   14a4c:	8e 17       	cp	r24, r30
   14a4e:	9f 07       	cpc	r25, r31
   14a50:	20 f0       	brcs	.+8      	; 0x14a5a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x2c6>
   14a52:	8e 1b       	sub	r24, r30
   14a54:	9f 0b       	sbc	r25, r31
   14a56:	23 2f       	mov	r18, r19
   14a58:	ea cf       	rjmp	.-44     	; 0x14a2e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x29a>
   14a5a:	20 93 b2 10 	sts	0x10B2, r18	; 0x8010b2 <now+0x1>
   14a5e:	8f 5f       	subi	r24, 0xFF	; 255
   14a60:	80 93 b3 10 	sts	0x10B3, r24	; 0x8010b3 <now+0x2>
   14a64:	10 92 7a 13 	sts	0x137A, r1	; 0x80137a <ethClient+0x3>
   14a68:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <ethClient+0x2>
   14a6c:	48 ee       	ldi	r20, 0xE8	; 232
   14a6e:	53 e0       	ldi	r21, 0x03	; 3
   14a70:	60 e0       	ldi	r22, 0x00	; 0
   14a72:	70 e0       	ldi	r23, 0x00	; 0
   14a74:	40 93 7b 13 	sts	0x137B, r20	; 0x80137b <ethClient+0x4>
   14a78:	50 93 7c 13 	sts	0x137C, r21	; 0x80137c <ethClient+0x5>
   14a7c:	60 93 7d 13 	sts	0x137D, r22	; 0x80137d <ethClient+0x6>
   14a80:	70 93 7e 13 	sts	0x137E, r23	; 0x80137e <ethClient+0x7>
   14a84:	80 ec       	ldi	r24, 0xC0	; 192
   14a86:	92 e0       	ldi	r25, 0x02	; 2
   14a88:	90 93 78 13 	sts	0x1378, r25	; 0x801378 <ethClient+0x1>
   14a8c:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <ethClient>
   14a90:	88 e0       	ldi	r24, 0x08	; 8
   14a92:	80 93 83 13 	sts	0x1383, r24	; 0x801383 <ethClient+0xc>
   14a96:	10 92 99 10 	sts	0x1099, r1	; 0x801099 <udpClient+0x3>
   14a9a:	10 92 98 10 	sts	0x1098, r1	; 0x801098 <udpClient+0x2>
   14a9e:	40 93 9a 10 	sts	0x109A, r20	; 0x80109a <udpClient+0x4>
   14aa2:	50 93 9b 10 	sts	0x109B, r21	; 0x80109b <udpClient+0x5>
   14aa6:	60 93 9c 10 	sts	0x109C, r22	; 0x80109c <udpClient+0x6>
   14aaa:	70 93 9d 10 	sts	0x109D, r23	; 0x80109d <udpClient+0x7>
   14aae:	28 e9       	ldi	r18, 0x98	; 152
   14ab0:	32 e0       	ldi	r19, 0x02	; 2
   14ab2:	30 93 97 10 	sts	0x1097, r19	; 0x801097 <udpClient+0x1>
   14ab6:	20 93 96 10 	sts	0x1096, r18	; 0x801096 <udpClient>
   14aba:	80 93 a2 10 	sts	0x10A2, r24	; 0x8010a2 <udpClient+0xc>
   14abe:	82 ee       	ldi	r24, 0xE2	; 226
   14ac0:	92 e0       	ldi	r25, 0x02	; 2
   14ac2:	90 93 a6 10 	sts	0x10A6, r25	; 0x8010a6 <udpClient+0x10>
   14ac6:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <udpClient+0xf>
   14aca:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <udpClient+0x11>
   14ace:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <udpClient+0x12>
   14ad2:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <udpClient+0x13>
   14ad6:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <udpClient+0x14>
   14ada:	90 93 89 10 	sts	0x1089, r25	; 0x801089 <mqtt_client+0x210>
   14ade:	80 93 88 10 	sts	0x1088, r24	; 0x801088 <mqtt_client+0x20f>
   14ae2:	10 92 8a 10 	sts	0x108A, r1	; 0x80108a <mqtt_client+0x211>
   14ae6:	10 92 8b 10 	sts	0x108B, r1	; 0x80108b <mqtt_client+0x212>
   14aea:	10 92 8c 10 	sts	0x108C, r1	; 0x80108c <mqtt_client+0x213>
   14aee:	10 92 8d 10 	sts	0x108D, r1	; 0x80108d <mqtt_client+0x214>
   14af2:	0f ef       	ldi	r16, 0xFF	; 255
   14af4:	1f ef       	ldi	r17, 0xFF	; 255
   14af6:	10 93 95 10 	sts	0x1095, r17	; 0x801095 <mqtt_client+0x21c>
   14afa:	00 93 94 10 	sts	0x1094, r16	; 0x801094 <mqtt_client+0x21b>
   14afe:	87 e7       	ldi	r24, 0x77	; 119
   14b00:	93 e1       	ldi	r25, 0x13	; 19
   14b02:	90 93 7a 0e 	sts	0x0E7A, r25	; 0x800e7a <mqtt_client+0x1>
   14b06:	80 93 79 0e 	sts	0x0E79, r24	; 0x800e79 <mqtt_client>
   14b0a:	10 92 93 10 	sts	0x1093, r1	; 0x801093 <mqtt_client+0x21a>
   14b0e:	10 92 92 10 	sts	0x1092, r1	; 0x801092 <mqtt_client+0x219>
   14b12:	8f e5       	ldi	r24, 0x5F	; 95
   14b14:	93 e1       	ldi	r25, 0x13	; 19
   14b16:	23 e0       	ldi	r18, 0x03	; 3
   14b18:	30 e0       	ldi	r19, 0x00	; 0
   14b1a:	30 93 60 13 	sts	0x1360, r19	; 0x801360 <radio+0x1>
   14b1e:	20 93 5f 13 	sts	0x135F, r18	; 0x80135f <radio>
   14b22:	22 e0       	ldi	r18, 0x02	; 2
   14b24:	30 e0       	ldi	r19, 0x00	; 0
   14b26:	30 93 62 13 	sts	0x1362, r19	; 0x801362 <radio+0x3>
   14b2a:	20 93 61 13 	sts	0x1361, r18	; 0x801361 <radio+0x2>
   14b2e:	10 92 65 13 	sts	0x1365, r1	; 0x801365 <radio+0x6>
   14b32:	20 e2       	ldi	r18, 0x20	; 32
   14b34:	20 93 66 13 	sts	0x1366, r18	; 0x801366 <radio+0x7>
   14b38:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <radio+0x8>
   14b3c:	25 e0       	ldi	r18, 0x05	; 5
   14b3e:	20 93 6d 13 	sts	0x136D, r18	; 0x80136d <radio+0xe>
   14b42:	45 e0       	ldi	r20, 0x05	; 5
   14b44:	50 e0       	ldi	r21, 0x00	; 0
   14b46:	60 e0       	ldi	r22, 0x00	; 0
   14b48:	70 e0       	ldi	r23, 0x00	; 0
   14b4a:	40 93 73 13 	sts	0x1373, r20	; 0x801373 <radio+0x14>
   14b4e:	50 93 74 13 	sts	0x1374, r21	; 0x801374 <radio+0x15>
   14b52:	60 93 75 13 	sts	0x1375, r22	; 0x801375 <radio+0x16>
   14b56:	70 93 76 13 	sts	0x1376, r23	; 0x801376 <radio+0x17>
   14b5a:	10 92 68 13 	sts	0x1368, r1	; 0x801368 <radio+0x9>
   14b5e:	90 93 1d 12 	sts	0x121D, r25	; 0x80121d <network+0x30>
   14b62:	80 93 1c 12 	sts	0x121C, r24	; 0x80121c <network+0x2f>
   14b66:	22 e2       	ldi	r18, 0x22	; 34
   14b68:	32 e1       	ldi	r19, 0x12	; 18
   14b6a:	30 93 bd 12 	sts	0x12BD, r19	; 0x8012bd <network+0xd0>
   14b6e:	20 93 bc 12 	sts	0x12BC, r18	; 0x8012bc <network+0xcf>
   14b72:	2a ec       	ldi	r18, 0xCA	; 202
   14b74:	32 e1       	ldi	r19, 0x12	; 18
   14b76:	30 93 c9 12 	sts	0x12C9, r19	; 0x8012c9 <network+0xdc>
   14b7a:	20 93 c8 12 	sts	0x12C8, r18	; 0x8012c8 <network+0xdb>
   14b7e:	2e eb       	ldi	r18, 0xBE	; 190
   14b80:	32 e1       	ldi	r19, 0x12	; 18
   14b82:	30 93 15 12 	sts	0x1215, r19	; 0x801215 <network+0x28>
   14b86:	20 93 14 12 	sts	0x1214, r18	; 0x801214 <network+0x27>
   14b8a:	10 92 18 12 	sts	0x1218, r1	; 0x801218 <network+0x2b>
   14b8e:	10 92 19 12 	sts	0x1219, r1	; 0x801219 <network+0x2c>
   14b92:	10 92 1a 12 	sts	0x121A, r1	; 0x80121a <network+0x2d>
   14b96:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <network+0x2e>
   14b9a:	10 92 17 12 	sts	0x1217, r1	; 0x801217 <network+0x2a>
   14b9e:	10 92 16 12 	sts	0x1216, r1	; 0x801216 <network+0x29>
   14ba2:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <network>
   14ba6:	90 93 dc 11 	sts	0x11DC, r25	; 0x8011dc <mesh+0x7>
   14baa:	80 93 db 11 	sts	0x11DB, r24	; 0x8011db <mesh+0x6>
   14bae:	8d ee       	ldi	r24, 0xED	; 237
   14bb0:	91 e1       	ldi	r25, 0x11	; 17
   14bb2:	90 93 de 11 	sts	0x11DE, r25	; 0x8011de <mesh+0x9>
   14bb6:	80 93 dd 11 	sts	0x11DD, r24	; 0x8011dd <mesh+0x8>
   14bba:	80 e6       	ldi	r24, 0x60	; 96
   14bbc:	9e e0       	ldi	r25, 0x0E	; 14
   14bbe:	90 93 6d 0e 	sts	0x0E6D, r25	; 0x800e6d <lm75_temp+0x1>
   14bc2:	80 93 6c 0e 	sts	0x0E6C, r24	; 0x800e6c <lm75_temp>
   14bc6:	88 e4       	ldi	r24, 0x48	; 72
   14bc8:	80 93 6e 0e 	sts	0x0E6E, r24	; 0x800e6e <lm75_temp+0x2>
   14bcc:	8a e0       	ldi	r24, 0x0A	; 10
   14bce:	92 e0       	ldi	r25, 0x02	; 2
   14bd0:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <lm75_temp+0xc>
   14bd4:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <lm75_temp+0xb>
   14bd8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   14bdc:	90 93 6f 0e 	sts	0x0E6F, r25	; 0x800e6f <lm75_temp+0x3>
   14be0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   14be4:	89 1b       	sub	r24, r25
   14be6:	99 0b       	sbc	r25, r25
   14be8:	c1 e0       	ldi	r28, 0x01	; 1
   14bea:	d0 e0       	ldi	r29, 0x00	; 0
   14bec:	9e 01       	movw	r18, r28
   14bee:	02 c0       	rjmp	.+4      	; 0x14bf4 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x460>
   14bf0:	22 0f       	add	r18, r18
   14bf2:	33 1f       	adc	r19, r19
   14bf4:	8a 95       	dec	r24
   14bf6:	e2 f7       	brpl	.-8      	; 0x14bf0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x45c>
   14bf8:	c9 01       	movw	r24, r18
   14bfa:	91 95       	neg	r25
   14bfc:	81 95       	neg	r24
   14bfe:	91 09       	sbc	r25, r1
   14c00:	90 93 71 0e 	sts	0x0E71, r25	; 0x800e71 <lm75_temp+0x5>
   14c04:	80 93 70 0e 	sts	0x0E70, r24	; 0x800e70 <lm75_temp+0x4>
   14c08:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   14c0c:	80 93 72 0e 	sts	0x0E72, r24	; 0x800e72 <lm75_temp+0x6>
   14c10:	be 01       	movw	r22, r28
   14c12:	02 c0       	rjmp	.+4      	; 0x14c18 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x484>
   14c14:	66 0f       	add	r22, r22
   14c16:	77 1f       	adc	r23, r23
   14c18:	8a 95       	dec	r24
   14c1a:	e2 f7       	brpl	.-8      	; 0x14c14 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7081+0x480>
   14c1c:	07 2e       	mov	r0, r23
   14c1e:	00 0c       	add	r0, r0
   14c20:	88 0b       	sbc	r24, r24
   14c22:	99 0b       	sbc	r25, r25
   14c24:	0e 94 c9 b9 	call	0x17392	; 0x17392 <__floatsisf>
   14c28:	9b 01       	movw	r18, r22
   14c2a:	ac 01       	movw	r20, r24
   14c2c:	60 e0       	ldi	r22, 0x00	; 0
   14c2e:	70 e0       	ldi	r23, 0x00	; 0
   14c30:	80 e8       	ldi	r24, 0x80	; 128
   14c32:	9f e3       	ldi	r25, 0x3F	; 63
   14c34:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
   14c38:	60 93 73 0e 	sts	0x0E73, r22	; 0x800e73 <lm75_temp+0x7>
   14c3c:	70 93 74 0e 	sts	0x0E74, r23	; 0x800e74 <lm75_temp+0x8>
   14c40:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <lm75_temp+0x9>
   14c44:	90 93 76 0e 	sts	0x0E76, r25	; 0x800e76 <lm75_temp+0xa>
   14c48:	80 e0       	ldi	r24, 0x00	; 0
   14c4a:	98 ef       	ldi	r25, 0xF8	; 248
   14c4c:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_lcd+0x9>
   14c50:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_lcd+0x8>
   14c54:	20 ee       	ldi	r18, 0xE0	; 224
   14c56:	37 e0       	ldi	r19, 0x07	; 7
   14c58:	30 93 28 0e 	sts	0x0E28, r19	; 0x800e28 <my_lcd+0x7>
   14c5c:	20 93 27 0e 	sts	0x0E27, r18	; 0x800e27 <my_lcd+0x6>
   14c60:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_lcd+0xb>
   14c64:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_lcd+0xa>
   14c68:	81 e0       	ldi	r24, 0x01	; 1
   14c6a:	80 93 2d 0e 	sts	0x0E2D, r24	; 0x800e2d <my_lcd+0xc>
   14c6e:	10 92 2e 0e 	sts	0x0E2E, r1	; 0x800e2e <my_lcd+0xd>
   14c72:	84 e8       	ldi	r24, 0x84	; 132
   14c74:	92 e0       	ldi	r25, 0x02	; 2
   14c76:	90 93 22 0e 	sts	0x0E22, r25	; 0x800e22 <my_lcd+0x1>
   14c7a:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <my_lcd>
   14c7e:	82 e2       	ldi	r24, 0x22	; 34
   14c80:	80 93 5f 0e 	sts	0x0E5F, r24	; 0x800e5f <my_lcd+0x3e>
   14c84:	ed ed       	ldi	r30, 0xDD	; 221
   14c86:	f3 e4       	ldi	r31, 0x43	; 67
   14c88:	e4 91       	lpm	r30, Z
   14c8a:	f0 e0       	ldi	r31, 0x00	; 0
   14c8c:	ee 0f       	add	r30, r30
   14c8e:	ff 1f       	adc	r31, r31
   14c90:	e4 55       	subi	r30, 0x54	; 84
   14c92:	fc 4b       	sbci	r31, 0xBC	; 188
   14c94:	a5 91       	lpm	r26, Z+
   14c96:	b4 91       	lpm	r27, Z
   14c98:	b0 93 50 0e 	sts	0x0E50, r27	; 0x800e50 <my_lcd+0x2f>
   14c9c:	a0 93 4f 0e 	sts	0x0E4F, r26	; 0x800e4f <my_lcd+0x2e>
   14ca0:	ef ed       	ldi	r30, 0xDF	; 223
   14ca2:	f3 e4       	ldi	r31, 0x43	; 67
   14ca4:	e4 91       	lpm	r30, Z
   14ca6:	f0 e0       	ldi	r31, 0x00	; 0
   14ca8:	ee 0f       	add	r30, r30
   14caa:	ff 1f       	adc	r31, r31
   14cac:	e4 55       	subi	r30, 0x54	; 84
   14cae:	fc 4b       	sbci	r31, 0xBC	; 188
   14cb0:	85 91       	lpm	r24, Z+
   14cb2:	94 91       	lpm	r25, Z
   14cb4:	90 93 52 0e 	sts	0x0E52, r25	; 0x800e52 <my_lcd+0x31>
   14cb8:	80 93 51 0e 	sts	0x0E51, r24	; 0x800e51 <my_lcd+0x30>
   14cbc:	e0 ee       	ldi	r30, 0xE0	; 224
   14cbe:	f3 e4       	ldi	r31, 0x43	; 67
   14cc0:	e4 91       	lpm	r30, Z
   14cc2:	f0 e0       	ldi	r31, 0x00	; 0
   14cc4:	ee 0f       	add	r30, r30
   14cc6:	ff 1f       	adc	r31, r31
   14cc8:	e4 55       	subi	r30, 0x54	; 84
   14cca:	fc 4b       	sbci	r31, 0xBC	; 188
   14ccc:	85 91       	lpm	r24, Z+
   14cce:	94 91       	lpm	r25, Z
   14cd0:	90 93 54 0e 	sts	0x0E54, r25	; 0x800e54 <my_lcd+0x33>
   14cd4:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <my_lcd+0x32>
   14cd8:	ec ed       	ldi	r30, 0xDC	; 220
   14cda:	f3 e4       	ldi	r31, 0x43	; 67
   14cdc:	e4 91       	lpm	r30, Z
   14cde:	f0 e0       	ldi	r31, 0x00	; 0
   14ce0:	ee 0f       	add	r30, r30
   14ce2:	ff 1f       	adc	r31, r31
   14ce4:	e4 55       	subi	r30, 0x54	; 84
   14ce6:	fc 4b       	sbci	r31, 0xBC	; 188
   14ce8:	85 91       	lpm	r24, Z+
   14cea:	94 91       	lpm	r25, Z
   14cec:	90 93 56 0e 	sts	0x0E56, r25	; 0x800e56 <my_lcd+0x35>
   14cf0:	80 93 55 0e 	sts	0x0E55, r24	; 0x800e55 <my_lcd+0x34>
   14cf4:	e7 e9       	ldi	r30, 0x97	; 151
   14cf6:	f3 e4       	ldi	r31, 0x43	; 67
   14cf8:	84 91       	lpm	r24, Z
   14cfa:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <my_lcd+0x36>
   14cfe:	e9 e9       	ldi	r30, 0x99	; 153
   14d00:	f3 e4       	ldi	r31, 0x43	; 67
   14d02:	24 91       	lpm	r18, Z
   14d04:	20 93 58 0e 	sts	0x0E58, r18	; 0x800e58 <my_lcd+0x37>
   14d08:	ea e9       	ldi	r30, 0x9A	; 154
   14d0a:	f3 e4       	ldi	r31, 0x43	; 67
   14d0c:	94 91       	lpm	r25, Z
   14d0e:	90 93 59 0e 	sts	0x0E59, r25	; 0x800e59 <my_lcd+0x38>
   14d12:	e6 e9       	ldi	r30, 0x96	; 150
   14d14:	f3 e4       	ldi	r31, 0x43	; 67
   14d16:	e4 91       	lpm	r30, Z
   14d18:	e0 93 5a 0e 	sts	0x0E5A, r30	; 0x800e5a <my_lcd+0x39>
   14d1c:	38 2f       	mov	r19, r24
   14d1e:	30 95       	com	r19
   14d20:	30 93 5b 0e 	sts	0x0E5B, r19	; 0x800e5b <my_lcd+0x3a>
   14d24:	20 95       	com	r18
   14d26:	20 93 5c 0e 	sts	0x0E5C, r18	; 0x800e5c <my_lcd+0x3b>
   14d2a:	90 95       	com	r25
   14d2c:	90 93 5d 0e 	sts	0x0E5D, r25	; 0x800e5d <my_lcd+0x3c>
   14d30:	e0 95       	com	r30
   14d32:	e0 93 5e 0e 	sts	0x0E5E, r30	; 0x800e5e <my_lcd+0x3d>
   14d36:	ec 91       	ld	r30, X
   14d38:	e8 2b       	or	r30, r24
   14d3a:	ec 93       	st	X, r30
   14d3c:	e0 91 51 0e 	lds	r30, 0x0E51	; 0x800e51 <my_lcd+0x30>
   14d40:	f0 91 52 0e 	lds	r31, 0x0E52	; 0x800e52 <my_lcd+0x31>
   14d44:	80 81       	ld	r24, Z
   14d46:	90 91 58 0e 	lds	r25, 0x0E58	; 0x800e58 <my_lcd+0x37>
   14d4a:	89 2b       	or	r24, r25
   14d4c:	80 83       	st	Z, r24
   14d4e:	e0 91 53 0e 	lds	r30, 0x0E53	; 0x800e53 <my_lcd+0x32>
   14d52:	f0 91 54 0e 	lds	r31, 0x0E54	; 0x800e54 <my_lcd+0x33>
   14d56:	80 81       	ld	r24, Z
   14d58:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x38>
   14d5c:	89 2b       	or	r24, r25
   14d5e:	80 83       	st	Z, r24
   14d60:	e0 91 55 0e 	lds	r30, 0x0E55	; 0x800e55 <my_lcd+0x34>
   14d64:	f0 91 56 0e 	lds	r31, 0x0E56	; 0x800e56 <my_lcd+0x35>
   14d68:	80 81       	ld	r24, Z
   14d6a:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <my_lcd+0x39>
   14d6e:	89 2b       	or	r24, r25
   14d70:	80 83       	st	Z, r24
   14d72:	61 e0       	ldi	r22, 0x01	; 1
   14d74:	81 e2       	ldi	r24, 0x21	; 33
   14d76:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14d7a:	61 e0       	ldi	r22, 0x01	; 1
   14d7c:	83 e2       	ldi	r24, 0x23	; 35
   14d7e:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14d82:	61 e0       	ldi	r22, 0x01	; 1
   14d84:	84 e2       	ldi	r24, 0x24	; 36
   14d86:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14d8a:	61 e0       	ldi	r22, 0x01	; 1
   14d8c:	80 e2       	ldi	r24, 0x20	; 32
   14d8e:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14d92:	61 e0       	ldi	r22, 0x01	; 1
   14d94:	82 e2       	ldi	r24, 0x22	; 34
   14d96:	0e 94 87 90 	call	0x1210e	; 0x1210e <digitalWrite>
   14d9a:	61 e0       	ldi	r22, 0x01	; 1
   14d9c:	82 e2       	ldi	r24, 0x22	; 34
   14d9e:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14da2:	10 92 38 0e 	sts	0x0E38, r1	; 0x800e38 <my_lcd+0x17>
   14da6:	10 92 37 0e 	sts	0x0E37, r1	; 0x800e37 <my_lcd+0x16>
   14daa:	86 e9       	ldi	r24, 0x96	; 150
   14dac:	97 e7       	ldi	r25, 0x77	; 119
   14dae:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <my_lcd+0x1b>
   14db2:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <my_lcd+0x1a>
   14db6:	20 e4       	ldi	r18, 0x40	; 64
   14db8:	31 e0       	ldi	r19, 0x01	; 1
   14dba:	30 93 30 0e 	sts	0x0E30, r19	; 0x800e30 <my_lcd+0xf>
   14dbe:	20 93 2f 0e 	sts	0x0E2F, r18	; 0x800e2f <my_lcd+0xe>
   14dc2:	80 ee       	ldi	r24, 0xE0	; 224
   14dc4:	91 e0       	ldi	r25, 0x01	; 1
   14dc6:	90 93 32 0e 	sts	0x0E32, r25	; 0x800e32 <my_lcd+0x11>
   14dca:	80 93 31 0e 	sts	0x0E31, r24	; 0x800e31 <my_lcd+0x10>
   14dce:	41 b1       	in	r20, 0x01	; 1
   14dd0:	4f ef       	ldi	r20, 0xFF	; 255
   14dd2:	41 b9       	out	0x01, r20	; 1
   14dd4:	30 93 34 0e 	sts	0x0E34, r19	; 0x800e34 <my_lcd+0x13>
   14dd8:	20 93 33 0e 	sts	0x0E33, r18	; 0x800e33 <my_lcd+0x12>
   14ddc:	90 93 36 0e 	sts	0x0E36, r25	; 0x800e36 <my_lcd+0x15>
   14de0:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <my_lcd+0x14>
   14de4:	e8 ed       	ldi	r30, 0xD8	; 216
   14de6:	f3 e4       	ldi	r31, 0x43	; 67
   14de8:	e4 91       	lpm	r30, Z
   14dea:	f0 e0       	ldi	r31, 0x00	; 0
   14dec:	ee 0f       	add	r30, r30
   14dee:	ff 1f       	adc	r31, r31
   14df0:	e4 55       	subi	r30, 0x54	; 84
   14df2:	fc 4b       	sbci	r31, 0xBC	; 188
   14df4:	85 91       	lpm	r24, Z+
   14df6:	94 91       	lpm	r25, Z
   14df8:	90 93 13 0e 	sts	0x0E13, r25	; 0x800e13 <my_touch+0x10>
   14dfc:	80 93 12 0e 	sts	0x0E12, r24	; 0x800e12 <my_touch+0xf>
   14e00:	e7 ed       	ldi	r30, 0xD7	; 215
   14e02:	f3 e4       	ldi	r31, 0x43	; 67
   14e04:	e4 91       	lpm	r30, Z
   14e06:	f0 e0       	ldi	r31, 0x00	; 0
   14e08:	ee 0f       	add	r30, r30
   14e0a:	ff 1f       	adc	r31, r31
   14e0c:	e4 55       	subi	r30, 0x54	; 84
   14e0e:	fc 4b       	sbci	r31, 0xBC	; 188
   14e10:	85 91       	lpm	r24, Z+
   14e12:	94 91       	lpm	r25, Z
   14e14:	90 93 15 0e 	sts	0x0E15, r25	; 0x800e15 <my_touch+0x12>
   14e18:	80 93 14 0e 	sts	0x0E14, r24	; 0x800e14 <my_touch+0x11>
   14e1c:	e9 ed       	ldi	r30, 0xD9	; 217
   14e1e:	f3 e4       	ldi	r31, 0x43	; 67
   14e20:	e4 91       	lpm	r30, Z
   14e22:	f0 e0       	ldi	r31, 0x00	; 0
   14e24:	ee 0f       	add	r30, r30
   14e26:	ff 1f       	adc	r31, r31
   14e28:	ea 59       	subi	r30, 0x9A	; 154
   14e2a:	fc 4b       	sbci	r31, 0xBC	; 188
   14e2c:	85 91       	lpm	r24, Z+
   14e2e:	94 91       	lpm	r25, Z
   14e30:	90 93 17 0e 	sts	0x0E17, r25	; 0x800e17 <my_touch+0x14>
   14e34:	80 93 16 0e 	sts	0x0E16, r24	; 0x800e16 <my_touch+0x13>
   14e38:	ea ed       	ldi	r30, 0xDA	; 218
   14e3a:	f3 e4       	ldi	r31, 0x43	; 67
   14e3c:	e4 91       	lpm	r30, Z
   14e3e:	f0 e0       	ldi	r31, 0x00	; 0
   14e40:	ee 0f       	add	r30, r30
   14e42:	ff 1f       	adc	r31, r31
   14e44:	e4 55       	subi	r30, 0x54	; 84
   14e46:	fc 4b       	sbci	r31, 0xBC	; 188
   14e48:	85 91       	lpm	r24, Z+
   14e4a:	94 91       	lpm	r25, Z
   14e4c:	90 93 19 0e 	sts	0x0E19, r25	; 0x800e19 <my_touch+0x16>
   14e50:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <my_touch+0x15>
   14e54:	e3 ec       	ldi	r30, 0xC3	; 195
   14e56:	f3 e4       	ldi	r31, 0x43	; 67
   14e58:	e4 91       	lpm	r30, Z
   14e5a:	f0 e0       	ldi	r31, 0x00	; 0
   14e5c:	ee 0f       	add	r30, r30
   14e5e:	ff 1f       	adc	r31, r31
   14e60:	ea 59       	subi	r30, 0x9A	; 154
   14e62:	fc 4b       	sbci	r31, 0xBC	; 188
   14e64:	85 91       	lpm	r24, Z+
   14e66:	94 91       	lpm	r25, Z
   14e68:	90 93 1b 0e 	sts	0x0E1B, r25	; 0x800e1b <my_touch+0x18>
   14e6c:	80 93 1a 0e 	sts	0x0E1A, r24	; 0x800e1a <my_touch+0x17>
   14e70:	e2 e9       	ldi	r30, 0x92	; 146
   14e72:	f3 e4       	ldi	r31, 0x43	; 67
   14e74:	e4 91       	lpm	r30, Z
   14e76:	e0 93 1c 0e 	sts	0x0E1C, r30	; 0x800e1c <my_touch+0x19>
   14e7a:	e1 e9       	ldi	r30, 0x91	; 145
   14e7c:	f3 e4       	ldi	r31, 0x43	; 67
   14e7e:	e4 91       	lpm	r30, Z
   14e80:	e0 93 1d 0e 	sts	0x0E1D, r30	; 0x800e1d <my_touch+0x1a>
   14e84:	e3 e9       	ldi	r30, 0x93	; 147
   14e86:	f3 e4       	ldi	r31, 0x43	; 67
   14e88:	e4 91       	lpm	r30, Z
   14e8a:	e0 93 1e 0e 	sts	0x0E1E, r30	; 0x800e1e <my_touch+0x1b>
   14e8e:	e4 e9       	ldi	r30, 0x94	; 148
   14e90:	f3 e4       	ldi	r31, 0x43	; 67
   14e92:	e4 91       	lpm	r30, Z
   14e94:	e0 93 1f 0e 	sts	0x0E1F, r30	; 0x800e1f <my_touch+0x1c>
   14e98:	ed e7       	ldi	r30, 0x7D	; 125
   14e9a:	f3 e4       	ldi	r31, 0x43	; 67
   14e9c:	e4 91       	lpm	r30, Z
   14e9e:	e0 93 20 0e 	sts	0x0E20, r30	; 0x800e20 <my_touch+0x1d>
   14ea2:	61 e0       	ldi	r22, 0x01	; 1
   14ea4:	8c e1       	ldi	r24, 0x1C	; 28
   14ea6:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14eaa:	61 e0       	ldi	r22, 0x01	; 1
   14eac:	8b e1       	ldi	r24, 0x1B	; 27
   14eae:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14eb2:	60 e0       	ldi	r22, 0x00	; 0
   14eb4:	8d e1       	ldi	r24, 0x1D	; 29
   14eb6:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14eba:	61 e0       	ldi	r22, 0x01	; 1
   14ebc:	8e e1       	ldi	r24, 0x1E	; 30
   14ebe:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14ec2:	60 e0       	ldi	r22, 0x00	; 0
   14ec4:	87 e0       	ldi	r24, 0x07	; 7
   14ec6:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <pinMode>
   14eca:	10 92 0f 0e 	sts	0x0E0F, r1	; 0x800e0f <my_touch+0xc>
   14ece:	10 92 10 0e 	sts	0x0E10, r1	; 0x800e10 <my_touch+0xd>
   14ed2:	10 92 11 0e 	sts	0x0E11, r1	; 0x800e11 <my_touch+0xe>
   14ed6:	10 92 0c 0e 	sts	0x0E0C, r1	; 0x800e0c <my_touch+0x9>
   14eda:	10 92 0b 0e 	sts	0x0E0B, r1	; 0x800e0b <my_touch+0x8>
   14ede:	10 92 0e 0e 	sts	0x0E0E, r1	; 0x800e0e <my_touch+0xb>
   14ee2:	10 92 0d 0e 	sts	0x0E0D, r1	; 0x800e0d <my_touch+0xa>
   14ee6:	10 92 04 0e 	sts	0x0E04, r1	; 0x800e04 <my_touch+0x1>
   14eea:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <my_touch>
   14eee:	10 92 06 0e 	sts	0x0E06, r1	; 0x800e06 <my_touch+0x3>
   14ef2:	10 92 05 0e 	sts	0x0E05, r1	; 0x800e05 <my_touch+0x2>
   14ef6:	10 93 08 0e 	sts	0x0E08, r17	; 0x800e08 <my_touch+0x5>
   14efa:	00 93 07 0e 	sts	0x0E07, r16	; 0x800e07 <my_touch+0x4>
   14efe:	10 93 0a 0e 	sts	0x0E0A, r17	; 0x800e0a <my_touch+0x7>
   14f02:	00 93 09 0e 	sts	0x0E09, r16	; 0x800e09 <my_touch+0x6>
   14f06:	8a e0       	ldi	r24, 0x0A	; 10
   14f08:	80 93 f4 0c 	sts	0x0CF4, r24	; 0x800cf4 <doc>
   14f0c:	8d ef       	ldi	r24, 0xFD	; 253
   14f0e:	9c e0       	ldi	r25, 0x0C	; 12
   14f10:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <doc+0x4>
   14f14:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <doc+0x3>
   14f18:	20 e0       	ldi	r18, 0x00	; 0
   14f1a:	31 e0       	ldi	r19, 0x01	; 1
   14f1c:	30 93 fa 0c 	sts	0x0CFA, r19	; 0x800cfa <doc+0x6>
   14f20:	20 93 f9 0c 	sts	0x0CF9, r18	; 0x800cf9 <doc+0x5>
   14f24:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <doc+0x8>
   14f28:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <doc+0x7>
   14f2c:	8e e7       	ldi	r24, 0x7E	; 126
   14f2e:	92 e0       	ldi	r25, 0x02	; 2
   14f30:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <doc+0x2>
   14f34:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <doc+0x1>
   14f38:	10 92 fe 0d 	sts	0x0DFE, r1	; 0x800dfe <doc+0x10a>
   14f3c:	10 92 fd 0d 	sts	0x0DFD, r1	; 0x800dfd <doc+0x109>
   14f40:	80 e0       	ldi	r24, 0x00	; 0
   14f42:	90 e0       	ldi	r25, 0x00	; 0
   14f44:	a2 e0       	ldi	r26, 0x02	; 2
   14f46:	b0 e0       	ldi	r27, 0x00	; 0
   14f48:	80 93 eb 0c 	sts	0x0CEB, r24	; 0x800ceb <SRAM+0x4>
   14f4c:	90 93 ec 0c 	sts	0x0CEC, r25	; 0x800cec <SRAM+0x5>
   14f50:	a0 93 ed 0c 	sts	0x0CED, r26	; 0x800ced <SRAM+0x6>
   14f54:	b0 93 ee 0c 	sts	0x0CEE, r27	; 0x800cee <SRAM+0x7>
   14f58:	d0 93 ea 0c 	sts	0x0CEA, r29	; 0x800cea <SRAM+0x3>
   14f5c:	c0 93 e9 0c 	sts	0x0CE9, r28	; 0x800ce9 <SRAM+0x2>
   14f60:	88 eb       	ldi	r24, 0xB8	; 184
   14f62:	90 e1       	ldi	r25, 0x10	; 16
   14f64:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <SRAM+0x1>
   14f68:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <SRAM>
   14f6c:	46 e1       	ldi	r20, 0x16	; 22
   14f6e:	40 93 ef 0c 	sts	0x0CEF, r20	; 0x800cef <SRAM+0x8>
   14f72:	40 e0       	ldi	r20, 0x00	; 0
   14f74:	50 e0       	ldi	r21, 0x00	; 0
   14f76:	64 e0       	ldi	r22, 0x04	; 4
   14f78:	70 e0       	ldi	r23, 0x00	; 0
   14f7a:	40 93 dc 0c 	sts	0x0CDC, r20	; 0x800cdc <SROM+0x4>
   14f7e:	50 93 dd 0c 	sts	0x0CDD, r21	; 0x800cdd <SROM+0x5>
   14f82:	60 93 de 0c 	sts	0x0CDE, r22	; 0x800cde <SROM+0x6>
   14f86:	70 93 df 0c 	sts	0x0CDF, r23	; 0x800cdf <SROM+0x7>
   14f8a:	30 93 e1 0c 	sts	0x0CE1, r19	; 0x800ce1 <SROM+0x9>
   14f8e:	20 93 e0 0c 	sts	0x0CE0, r18	; 0x800ce0 <SROM+0x8>
   14f92:	10 92 db 0c 	sts	0x0CDB, r1	; 0x800cdb <SROM+0x3>
   14f96:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <SROM+0x2>
   14f9a:	90 93 d9 0c 	sts	0x0CD9, r25	; 0x800cd9 <SROM+0x1>
   14f9e:	80 93 d8 0c 	sts	0x0CD8, r24	; 0x800cd8 <SROM>
   14fa2:	87 e1       	ldi	r24, 0x17	; 23
   14fa4:	80 93 e2 0c 	sts	0x0CE2, r24	; 0x800ce2 <SROM+0xa>
   14fa8:	df 91       	pop	r29
   14faa:	cf 91       	pop	r28
   14fac:	1f 91       	pop	r17
   14fae:	0f 91       	pop	r16
   14fb0:	08 95       	ret

00014fb2 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   14fb2:	cf 93       	push	r28
   14fb4:	df 93       	push	r29
   14fb6:	cd b7       	in	r28, 0x3d	; 61
   14fb8:	de b7       	in	r29, 0x3e	; 62
   14fba:	c7 58       	subi	r28, 0x87	; 135
   14fbc:	d1 09       	sbc	r29, r1
   14fbe:	0f b6       	in	r0, 0x3f	; 63
   14fc0:	f8 94       	cli
   14fc2:	de bf       	out	0x3e, r29	; 62
   14fc4:	0f be       	out	0x3f, r0	; 63
   14fc6:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   14fc8:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   14fca:	84 b5       	in	r24, 0x24	; 36
   14fcc:	83 60       	ori	r24, 0x03	; 3
   14fce:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   14fd0:	85 b5       	in	r24, 0x25	; 37
   14fd2:	83 60       	ori	r24, 0x03	; 3
   14fd4:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   14fd6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   14fda:	81 60       	ori	r24, 0x01	; 1
   14fdc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   14fe0:	82 e0       	ldi	r24, 0x02	; 2
   14fe2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   14fe6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   14fea:	81 60       	ori	r24, 0x01	; 1
   14fec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   14ff0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   14ff4:	81 60       	ori	r24, 0x01	; 1
   14ff6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   14ffa:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   14ffe:	84 60       	ori	r24, 0x04	; 4
   15000:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   15004:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   15008:	81 60       	ori	r24, 0x01	; 1
   1500a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1500e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   15012:	83 60       	ori	r24, 0x03	; 3
   15014:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   15018:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1501c:	81 60       	ori	r24, 0x01	; 1
   1501e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   15022:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   15026:	83 60       	ori	r24, 0x03	; 3
   15028:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1502c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   15030:	81 60       	ori	r24, 0x01	; 1
   15032:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   15036:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   1503a:	83 60       	ori	r24, 0x03	; 3
   1503c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   15040:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   15044:	81 60       	ori	r24, 0x01	; 1
   15046:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1504a:	87 e8       	ldi	r24, 0x87	; 135
   1504c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   15050:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   15054:	0e 94 14 77 	call	0xee28	; 0xee28 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   15058:	21 e4       	ldi	r18, 0x41	; 65
   1505a:	30 e0       	ldi	r19, 0x00	; 0
   1505c:	2c 0f       	add	r18, r28
   1505e:	3d 1f       	adc	r19, r29
   15060:	24 5f       	subi	r18, 0xF4	; 244
   15062:	3f 4f       	sbci	r19, 0xFF	; 255
   15064:	cc 57       	subi	r28, 0x7C	; 124
   15066:	df 4f       	sbci	r29, 0xFF	; 255
   15068:	39 83       	std	Y+1, r19	; 0x01
   1506a:	28 83       	st	Y, r18
   1506c:	c4 58       	subi	r28, 0x84	; 132
   1506e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   15070:	41 e4       	ldi	r20, 0x41	; 65
   15072:	50 e0       	ldi	r21, 0x00	; 0
   15074:	4c 0f       	add	r20, r28
   15076:	5d 1f       	adc	r21, r29
   15078:	4f 5f       	subi	r20, 0xFF	; 255
   1507a:	5f 4f       	sbci	r21, 0xFF	; 255
   1507c:	ca 57       	subi	r28, 0x7A	; 122
   1507e:	df 4f       	sbci	r29, 0xFF	; 255
   15080:	59 83       	std	Y+1, r21	; 0x01
   15082:	48 83       	st	Y, r20
   15084:	c6 58       	subi	r28, 0x86	; 134
   15086:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5084
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   15088:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   1508c:	6b 01       	movw	r12, r22
   1508e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5085
  if (mqtt_reconnect() == 0)
   15090:	0e 94 c4 75 	call	0xeb88	; 0xeb88 <mqtt_reconnect()>
   15094:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <selftest_data>
   15098:	81 11       	cpse	r24, r1
   1509a:	8a c0       	rjmp	.+276    	; 0x151b0 <main+0x1fe>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1509c:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1509e:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   150a2:	0e 94 75 9a 	call	0x134ea	; 0x134ea <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093


  if (draw_menu(false) == true)
   150a6:	80 e0       	ldi	r24, 0x00	; 0
   150a8:	0e 94 ee 42 	call	0x85dc	; 0x85dc <draw_menu(bool)>
   150ac:	88 23       	and	r24, r24
   150ae:	19 f0       	breq	.+6      	; 0x150b6 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5094
    draw_menu(true);
   150b0:	81 e0       	ldi	r24, 0x01	; 1
   150b2:	0e 94 ee 42 	call	0x85dc	; 0x85dc <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5098

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   150b6:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   150ba:	00 91 36 11 	lds	r16, 0x1136	; 0x801136 <milis_10s>
   150be:	10 91 37 11 	lds	r17, 0x1137	; 0x801137 <milis_10s+0x1>
   150c2:	20 91 38 11 	lds	r18, 0x1138	; 0x801138 <milis_10s+0x2>
   150c6:	30 91 39 11 	lds	r19, 0x1139	; 0x801139 <milis_10s+0x3>
   150ca:	60 1b       	sub	r22, r16
   150cc:	71 0b       	sbc	r23, r17
   150ce:	82 0b       	sbc	r24, r18
   150d0:	93 0b       	sbc	r25, r19
   150d2:	61 31       	cpi	r22, 0x11	; 17
   150d4:	77 42       	sbci	r23, 0x27	; 39
   150d6:	81 05       	cpc	r24, r1
   150d8:	91 05       	cpc	r25, r1
   150da:	08 f4       	brcc	.+2      	; 0x150de <main+0x12c>
   150dc:	99 c4       	rjmp	.+2354   	; 0x15a10 <main+0xa5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
  {
    milis_10s = millis();
   150de:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   150e2:	60 93 36 11 	sts	0x1136, r22	; 0x801136 <milis_10s>
   150e6:	70 93 37 11 	sts	0x1137, r23	; 0x801137 <milis_10s+0x1>
   150ea:	80 93 38 11 	sts	0x1138, r24	; 0x801138 <milis_10s+0x2>
   150ee:	90 93 39 11 	sts	0x1139, r25	; 0x801139 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5103


    menu_redraw10s = 1;
   150f2:	81 e0       	ldi	r24, 0x01	; 1
   150f4:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3998
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   150f8:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   150fc:	4a e0       	ldi	r20, 0x0A	; 10
   150fe:	be 01       	movw	r22, r28
   15100:	6f 5f       	subi	r22, 0xFF	; 255
   15102:	7f 4f       	sbci	r23, 0xFF	; 255
   15104:	90 e0       	ldi	r25, 0x00	; 0
   15106:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   1510a:	ae 01       	movw	r20, r28
   1510c:	4f 5f       	subi	r20, 0xFF	; 255
   1510e:	5f 4f       	sbci	r21, 0xFF	; 255
   15110:	69 e0       	ldi	r22, 0x09	; 9
   15112:	77 e0       	ldi	r23, 0x07	; 7
   15114:	89 e7       	ldi	r24, 0x79	; 121
   15116:	9e e0       	ldi	r25, 0x0E	; 14
   15118:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1511c:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1511e:	ab e0       	ldi	r26, 0x0B	; 11
   15120:	9a 2e       	mov	r9, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   15122:	80 91 68 0a 	lds	r24, 0x0A68	; 0x800a68 <Global_HWwirenum>
   15126:	18 17       	cp	r17, r24
   15128:	08 f0       	brcs	.+2      	; 0x1512c <main+0x17a>
   1512a:	44 c0       	rjmp	.+136    	; 0x151b4 <main+0x202>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1512c:	19 9d       	mul	r17, r9
   1512e:	c0 01       	movw	r24, r0
   15130:	11 24       	eor	r1, r1
   15132:	dc 01       	movw	r26, r24
   15134:	aa 5d       	subi	r26, 0xDA	; 218
   15136:	b5 4f       	sbci	r27, 0xF5	; 245
   15138:	5d 01       	movw	r10, r26
   1513a:	00 e1       	ldi	r16, 0x10	; 16
   1513c:	28 e0       	ldi	r18, 0x08	; 8
   1513e:	ad 01       	movw	r20, r26
   15140:	6a e3       	ldi	r22, 0x3A	; 58
   15142:	ce 01       	movw	r24, r28
   15144:	01 96       	adiw	r24, 0x01	; 1
   15146:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   1514a:	9e 01       	movw	r18, r28
   1514c:	2f 5f       	subi	r18, 0xFF	; 255
   1514e:	3f 4f       	sbci	r19, 0xFF	; 255
   15150:	45 e1       	ldi	r20, 0x15	; 21
   15152:	57 e0       	ldi	r21, 0x07	; 7
   15154:	61 2f       	mov	r22, r17
   15156:	89 e1       	ldi	r24, 0x19	; 25
   15158:	97 e0       	ldi	r25, 0x07	; 7
   1515a:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   1515e:	f5 01       	movw	r30, r10
   15160:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15162:	4a e0       	ldi	r20, 0x0A	; 10
   15164:	be 01       	movw	r22, r28
   15166:	6f 5f       	subi	r22, 0xFF	; 255
   15168:	7f 4f       	sbci	r23, 0xFF	; 255
   1516a:	90 e0       	ldi	r25, 0x00	; 0
   1516c:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4006
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   15170:	9e 01       	movw	r18, r28
   15172:	2f 5f       	subi	r18, 0xFF	; 255
   15174:	3f 4f       	sbci	r19, 0xFF	; 255
   15176:	4f e1       	ldi	r20, 0x1F	; 31
   15178:	57 e0       	ldi	r21, 0x07	; 7
   1517a:	61 2f       	mov	r22, r17
   1517c:	89 e1       	ldi	r24, 0x19	; 25
   1517e:	97 e0       	ldi	r25, 0x07	; 7
   15180:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4008
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   15184:	d5 01       	movw	r26, r10
   15186:	1a 96       	adiw	r26, 0x0a	; 10
   15188:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1518a:	4a e0       	ldi	r20, 0x0A	; 10
   1518c:	be 01       	movw	r22, r28
   1518e:	6f 5f       	subi	r22, 0xFF	; 255
   15190:	7f 4f       	sbci	r23, 0xFF	; 255
   15192:	90 e0       	ldi	r25, 0x00	; 0
   15194:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   15198:	9e 01       	movw	r18, r28
   1519a:	2f 5f       	subi	r18, 0xFF	; 255
   1519c:	3f 4f       	sbci	r19, 0xFF	; 255
   1519e:	48 e2       	ldi	r20, 0x28	; 40
   151a0:	57 e0       	ldi	r21, 0x07	; 7
   151a2:	61 2f       	mov	r22, r17
   151a4:	89 e1       	ldi	r24, 0x19	; 25
   151a6:	97 e0       	ldi	r25, 0x07	; 7
   151a8:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   151ac:	1f 5f       	subi	r17, 0xFF	; 255
   151ae:	b9 cf       	rjmp	.-142    	; 0x15122 <main+0x170>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   151b0:	90 62       	ori	r25, 0x20	; 32
   151b2:	75 cf       	rjmp	.-278    	; 0x1509e <main+0xec>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   151b4:	89 e7       	ldi	r24, 0x79	; 121
   151b6:	9e e0       	ldi	r25, 0x0E	; 14
   151b8:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   151bc:	88 23       	and	r24, r24
   151be:	09 f4       	brne	.+2      	; 0x151c2 <main+0x210>
   151c0:	ac c0       	rjmp	.+344    	; 0x1531a <main+0x368>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   151c2:	64 e1       	ldi	r22, 0x14	; 20
   151c4:	7e e3       	ldi	r23, 0x3E	; 62
   151c6:	ce 01       	movw	r24, r28
   151c8:	8f 5b       	subi	r24, 0xBF	; 191
   151ca:	9f 4f       	sbci	r25, 0xFF	; 255
   151cc:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   151d0:	4a e0       	ldi	r20, 0x0A	; 10
   151d2:	be 01       	movw	r22, r28
   151d4:	6f 5f       	subi	r22, 0xFF	; 255
   151d6:	7f 4f       	sbci	r23, 0xFF	; 255
   151d8:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <mqtt_send_message>
   151dc:	90 91 d1 0b 	lds	r25, 0x0BD1	; 0x800bd1 <mqtt_send_message+0x1>
   151e0:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   151e4:	10 92 d1 0b 	sts	0x0BD1, r1	; 0x800bd1 <mqtt_send_message+0x1>
   151e8:	10 92 d0 0b 	sts	0x0BD0, r1	; 0x800bd0 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   151ec:	ae 01       	movw	r20, r28
   151ee:	4f 5f       	subi	r20, 0xFF	; 255
   151f0:	5f 4f       	sbci	r21, 0xFF	; 255
   151f2:	be 01       	movw	r22, r28
   151f4:	6f 5b       	subi	r22, 0xBF	; 191
   151f6:	7f 4f       	sbci	r23, 0xFF	; 255
   151f8:	89 e7       	ldi	r24, 0x79	; 121
   151fa:	9e e0       	ldi	r25, 0x0E	; 14
   151fc:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   15200:	62 e0       	ldi	r22, 0x02	; 2
   15202:	7e e3       	ldi	r23, 0x3E	; 62
   15204:	ce 01       	movw	r24, r28
   15206:	8f 5b       	subi	r24, 0xBF	; 191
   15208:	9f 4f       	sbci	r25, 0xFF	; 255
   1520a:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1520e:	4a e0       	ldi	r20, 0x0A	; 10
   15210:	be 01       	movw	r22, r28
   15212:	6f 5f       	subi	r22, 0xFF	; 255
   15214:	7f 4f       	sbci	r23, 0xFF	; 255
   15216:	80 91 d2 0b 	lds	r24, 0x0BD2	; 0x800bd2 <mqtt_error>
   1521a:	90 91 d3 0b 	lds	r25, 0x0BD3	; 0x800bd3 <mqtt_error+0x1>
   1521e:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15222:	ae 01       	movw	r20, r28
   15224:	4f 5f       	subi	r20, 0xFF	; 255
   15226:	5f 4f       	sbci	r21, 0xFF	; 255
   15228:	be 01       	movw	r22, r28
   1522a:	6f 5b       	subi	r22, 0xBF	; 191
   1522c:	7f 4f       	sbci	r23, 0xFF	; 255
   1522e:	89 e7       	ldi	r24, 0x79	; 121
   15230:	9e e0       	ldi	r25, 0x0E	; 14
   15232:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   15236:	6e ee       	ldi	r22, 0xEE	; 238
   15238:	7d e3       	ldi	r23, 0x3D	; 61
   1523a:	ce 01       	movw	r24, r28
   1523c:	8f 5b       	subi	r24, 0xBF	; 191
   1523e:	9f 4f       	sbci	r25, 0xFF	; 255
   15240:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15244:	4a e0       	ldi	r20, 0x0A	; 10
   15246:	be 01       	movw	r22, r28
   15248:	6f 5f       	subi	r22, 0xFF	; 255
   1524a:	7f 4f       	sbci	r23, 0xFF	; 255
   1524c:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <mqtt_receive_message>
   15250:	90 91 6c 0a 	lds	r25, 0x0A6C	; 0x800a6c <mqtt_receive_message+0x1>
   15254:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   15258:	10 92 6c 0a 	sts	0x0A6C, r1	; 0x800a6c <mqtt_receive_message+0x1>
   1525c:	10 92 6b 0a 	sts	0x0A6B, r1	; 0x800a6b <mqtt_receive_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15260:	ae 01       	movw	r20, r28
   15262:	4f 5f       	subi	r20, 0xFF	; 255
   15264:	5f 4f       	sbci	r21, 0xFF	; 255
   15266:	be 01       	movw	r22, r28
   15268:	6f 5b       	subi	r22, 0xBF	; 191
   1526a:	7f 4f       	sbci	r23, 0xFF	; 255
   1526c:	89 e7       	ldi	r24, 0x79	; 121
   1526e:	9e e0       	ldi	r25, 0x0E	; 14
   15270:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   15274:	6a ed       	ldi	r22, 0xDA	; 218
   15276:	7d e3       	ldi	r23, 0x3D	; 61
   15278:	ce 01       	movw	r24, r28
   1527a:	8f 5b       	subi	r24, 0xBF	; 191
   1527c:	9f 4f       	sbci	r25, 0xFF	; 255
   1527e:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15282:	4a e0       	ldi	r20, 0x0A	; 10
   15284:	be 01       	movw	r22, r28
   15286:	6f 5f       	subi	r22, 0xFF	; 255
   15288:	7f 4f       	sbci	r23, 0xFF	; 255
   1528a:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <mqtt_process_message>
   1528e:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <mqtt_process_message+0x1>
   15292:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   15296:	10 92 6a 0a 	sts	0x0A6A, r1	; 0x800a6a <mqtt_process_message+0x1>
   1529a:	10 92 69 0a 	sts	0x0A69, r1	; 0x800a69 <mqtt_process_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1529e:	ae 01       	movw	r20, r28
   152a0:	4f 5f       	subi	r20, 0xFF	; 255
   152a2:	5f 4f       	sbci	r21, 0xFF	; 255
   152a4:	be 01       	movw	r22, r28
   152a6:	6f 5b       	subi	r22, 0xBF	; 191
   152a8:	7f 4f       	sbci	r23, 0xFF	; 255
   152aa:	89 e7       	ldi	r24, 0x79	; 121
   152ac:	9e e0       	ldi	r25, 0x0E	; 14
   152ae:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   152b2:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   152b4:	0a e0       	ldi	r16, 0x0A	; 10
   152b6:	24 e0       	ldi	r18, 0x04	; 4
   152b8:	4c e8       	ldi	r20, 0x8C	; 140
   152ba:	5c e0       	ldi	r21, 0x0C	; 12
   152bc:	6e e2       	ldi	r22, 0x2E	; 46
   152be:	ce 01       	movw	r24, r28
   152c0:	01 96       	adiw	r24, 0x01	; 1
   152c2:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   152c6:	6f ec       	ldi	r22, 0xCF	; 207
   152c8:	7d e3       	ldi	r23, 0x3D	; 61
   152ca:	ce 01       	movw	r24, r28
   152cc:	8f 5b       	subi	r24, 0xBF	; 191
   152ce:	9f 4f       	sbci	r25, 0xFF	; 255
   152d0:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   152d4:	ae 01       	movw	r20, r28
   152d6:	4f 5f       	subi	r20, 0xFF	; 255
   152d8:	5f 4f       	sbci	r21, 0xFF	; 255
   152da:	be 01       	movw	r22, r28
   152dc:	6f 5b       	subi	r22, 0xBF	; 191
   152de:	7f 4f       	sbci	r23, 0xFF	; 255
   152e0:	89 e7       	ldi	r24, 0x79	; 121
   152e2:	9e e0       	ldi	r25, 0x0E	; 14
   152e4:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   152e8:	6b eb       	ldi	r22, 0xBB	; 187
   152ea:	7d e3       	ldi	r23, 0x3D	; 61
   152ec:	ce 01       	movw	r24, r28
   152ee:	8f 5b       	subi	r24, 0xBF	; 191
   152f0:	9f 4f       	sbci	r25, 0xFF	; 255
   152f2:	0e 94 45 b1 	call	0x1628a	; 0x1628a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   152f6:	4a e0       	ldi	r20, 0x0A	; 10
   152f8:	be 01       	movw	r22, r28
   152fa:	6f 5f       	subi	r22, 0xFF	; 255
   152fc:	7f 4f       	sbci	r23, 0xFF	; 255
   152fe:	90 e0       	ldi	r25, 0x00	; 0
   15300:	80 e0       	ldi	r24, 0x00	; 0
   15302:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15306:	ae 01       	movw	r20, r28
   15308:	4f 5f       	subi	r20, 0xFF	; 255
   1530a:	5f 4f       	sbci	r21, 0xFF	; 255
   1530c:	be 01       	movw	r22, r28
   1530e:	6f 5b       	subi	r22, 0xBF	; 191
   15310:	7f 4f       	sbci	r23, 0xFF	; 255
   15312:	89 e7       	ldi	r24, 0x79	; 121
   15314:	9e e0       	ldi	r25, 0x0E	; 14
   15316:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   1531a:	10 92 d3 0b 	sts	0x0BD3, r1	; 0x800bd3 <mqtt_error+0x1>
   1531e:	10 92 d2 0b 	sts	0x0BD2, r1	; 0x800bd2 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   15322:	89 e7       	ldi	r24, 0x79	; 121
   15324:	9e e0       	ldi	r25, 0x0E	; 14
   15326:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <PubSubClient::connected()>
   1532a:	88 23       	and	r24, r24
   1532c:	09 f4       	brne	.+2      	; 0x15330 <main+0x37e>
   1532e:	6c c1       	rjmp	.+728    	; 0x15608 <main+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
  {
    strcpy(str_topic, "status/uptime");
   15330:	60 e3       	ldi	r22, 0x30	; 48
   15332:	77 e0       	ldi	r23, 0x07	; 7
   15334:	ce 01       	movw	r24, r28
   15336:	8f 5b       	subi	r24, 0xBF	; 191
   15338:	9f 4f       	sbci	r25, 0xFF	; 255
   1533a:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1533e:	4a e0       	ldi	r20, 0x0A	; 10
   15340:	be 01       	movw	r22, r28
   15342:	6f 5f       	subi	r22, 0xFF	; 255
   15344:	7f 4f       	sbci	r23, 0xFF	; 255
   15346:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <uptime>
   1534a:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <uptime+0x1>
   1534e:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15352:	ae 01       	movw	r20, r28
   15354:	4f 5f       	subi	r20, 0xFF	; 255
   15356:	5f 4f       	sbci	r21, 0xFF	; 255
   15358:	be 01       	movw	r22, r28
   1535a:	6f 5b       	subi	r22, 0xBF	; 191
   1535c:	7f 4f       	sbci	r23, 0xFF	; 255
   1535e:	89 e7       	ldi	r24, 0x79	; 121
   15360:	9e e0       	ldi	r25, 0x0E	; 14
   15362:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
    ///
    strcpy(str_topic, "status/brigthness");
   15366:	6e e3       	ldi	r22, 0x3E	; 62
   15368:	77 e0       	ldi	r23, 0x07	; 7
   1536a:	ce 01       	movw	r24, r28
   1536c:	8f 5b       	subi	r24, 0xBF	; 191
   1536e:	9f 4f       	sbci	r25, 0xFF	; 255
   15370:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15374:	4a e0       	ldi	r20, 0x0A	; 10
   15376:	be 01       	movw	r22, r28
   15378:	6f 5f       	subi	r22, 0xFF	; 255
   1537a:	7f 4f       	sbci	r23, 0xFF	; 255
   1537c:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <light_curr>
   15380:	90 91 38 0b 	lds	r25, 0x0B38	; 0x800b38 <light_curr+0x1>
   15384:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4026
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15388:	ae 01       	movw	r20, r28
   1538a:	4f 5f       	subi	r20, 0xFF	; 255
   1538c:	5f 4f       	sbci	r21, 0xFF	; 255
   1538e:	be 01       	movw	r22, r28
   15390:	6f 5b       	subi	r22, 0xBF	; 191
   15392:	7f 4f       	sbci	r23, 0xFF	; 255
   15394:	89 e7       	ldi	r24, 0x79	; 121
   15396:	9e e0       	ldi	r25, 0x0E	; 14
   15398:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   1539c:	60 e5       	ldi	r22, 0x50	; 80
   1539e:	77 e0       	ldi	r23, 0x07	; 7
   153a0:	ce 01       	movw	r24, r28
   153a2:	8f 5b       	subi	r24, 0xBF	; 191
   153a4:	9f 4f       	sbci	r25, 0xFF	; 255
   153a6:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   153aa:	4a e0       	ldi	r20, 0x0A	; 10
   153ac:	be 01       	movw	r22, r28
   153ae:	6f 5f       	subi	r22, 0xFF	; 255
   153b0:	7f 4f       	sbci	r23, 0xFF	; 255
   153b2:	90 e0       	ldi	r25, 0x00	; 0
   153b4:	80 e0       	ldi	r24, 0x00	; 0
   153b6:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   153ba:	ae 01       	movw	r20, r28
   153bc:	4f 5f       	subi	r20, 0xFF	; 255
   153be:	5f 4f       	sbci	r21, 0xFF	; 255
   153c0:	be 01       	movw	r22, r28
   153c2:	6f 5b       	subi	r22, 0xBF	; 191
   153c4:	7f 4f       	sbci	r23, 0xFF	; 255
   153c6:	89 e7       	ldi	r24, 0x79	; 121
   153c8:	9e e0       	ldi	r25, 0x0E	; 14
   153ca:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
    ///
    strcpy(str_topic, "status/load_min");
   153ce:	67 e6       	ldi	r22, 0x67	; 103
   153d0:	77 e0       	ldi	r23, 0x07	; 7
   153d2:	ce 01       	movw	r24, r28
   153d4:	8f 5b       	subi	r24, 0xBF	; 191
   153d6:	9f 4f       	sbci	r25, 0xFF	; 255
   153d8:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   153dc:	4a e0       	ldi	r20, 0x0A	; 10
   153de:	be 01       	movw	r22, r28
   153e0:	6f 5f       	subi	r22, 0xFF	; 255
   153e2:	7f 4f       	sbci	r23, 0xFF	; 255
   153e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   153e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   153ec:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   153f0:	ae 01       	movw	r20, r28
   153f2:	4f 5f       	subi	r20, 0xFF	; 255
   153f4:	5f 4f       	sbci	r21, 0xFF	; 255
   153f6:	be 01       	movw	r22, r28
   153f8:	6f 5b       	subi	r22, 0xBF	; 191
   153fa:	7f 4f       	sbci	r23, 0xFF	; 255
   153fc:	89 e7       	ldi	r24, 0x79	; 121
   153fe:	9e e0       	ldi	r25, 0x0E	; 14
   15400:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040
    ///
    strcpy(str_topic, "status/load_max");
   15404:	67 e7       	ldi	r22, 0x77	; 119
   15406:	77 e0       	ldi	r23, 0x07	; 7
   15408:	ce 01       	movw	r24, r28
   1540a:	8f 5b       	subi	r24, 0xBF	; 191
   1540c:	9f 4f       	sbci	r25, 0xFF	; 255
   1540e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15412:	4a e0       	ldi	r20, 0x0A	; 10
   15414:	be 01       	movw	r22, r28
   15416:	6f 5f       	subi	r22, 0xFF	; 255
   15418:	7f 4f       	sbci	r23, 0xFF	; 255
   1541a:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <load_max>
   1541e:	90 91 27 11 	lds	r25, 0x1127	; 0x801127 <load_max+0x1>
   15422:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4042
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15426:	ae 01       	movw	r20, r28
   15428:	4f 5f       	subi	r20, 0xFF	; 255
   1542a:	5f 4f       	sbci	r21, 0xFF	; 255
   1542c:	be 01       	movw	r22, r28
   1542e:	6f 5b       	subi	r22, 0xBF	; 191
   15430:	7f 4f       	sbci	r23, 0xFF	; 255
   15432:	89 e7       	ldi	r24, 0x79	; 121
   15434:	9e e0       	ldi	r25, 0x0E	; 14
   15436:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
    ///
    load_max = 0;
   1543a:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <load_max>
   1543e:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <load_max+0x1>
   15442:	10 92 28 11 	sts	0x1128, r1	; 0x801128 <load_max+0x2>
   15446:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
    load_min = 0xffffffff;
   1544a:	2f ef       	ldi	r18, 0xFF	; 255
   1544c:	3f ef       	ldi	r19, 0xFF	; 255
   1544e:	a9 01       	movw	r20, r18
   15450:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   15454:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   15458:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   1545c:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
    ///
    strcpy(str_topic, "status/default_ring");
   15460:	67 e8       	ldi	r22, 0x87	; 135
   15462:	77 e0       	ldi	r23, 0x07	; 7
   15464:	ce 01       	movw	r24, r28
   15466:	8f 5b       	subi	r24, 0xBF	; 191
   15468:	9f 4f       	sbci	r25, 0xFF	; 255
   1546a:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4048
    itoa(default_ring, payload, 10);
   1546e:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15472:	4a e0       	ldi	r20, 0x0A	; 10
   15474:	be 01       	movw	r22, r28
   15476:	6f 5f       	subi	r22, 0xFF	; 255
   15478:	7f 4f       	sbci	r23, 0xFF	; 255
   1547a:	90 e0       	ldi	r25, 0x00	; 0
   1547c:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15480:	ae 01       	movw	r20, r28
   15482:	4f 5f       	subi	r20, 0xFF	; 255
   15484:	5f 4f       	sbci	r21, 0xFF	; 255
   15486:	be 01       	movw	r22, r28
   15488:	6f 5b       	subi	r22, 0xBF	; 191
   1548a:	7f 4f       	sbci	r23, 0xFF	; 255
   1548c:	89 e7       	ldi	r24, 0x79	; 121
   1548e:	9e e0       	ldi	r25, 0x0E	; 14
   15490:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
    ///
    strcpy(str_topic, "status/selftest");
   15494:	6b e9       	ldi	r22, 0x9B	; 155
   15496:	77 e0       	ldi	r23, 0x07	; 7
   15498:	ce 01       	movw	r24, r28
   1549a:	8f 5b       	subi	r24, 0xBF	; 191
   1549c:	9f 4f       	sbci	r25, 0xFF	; 255
   1549e:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4052
    itoa(selftest_data, payload, 10);
   154a2:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   154a6:	4a e0       	ldi	r20, 0x0A	; 10
   154a8:	be 01       	movw	r22, r28
   154aa:	6f 5f       	subi	r22, 0xFF	; 255
   154ac:	7f 4f       	sbci	r23, 0xFF	; 255
   154ae:	90 e0       	ldi	r25, 0x00	; 0
   154b0:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   154b4:	ae 01       	movw	r20, r28
   154b6:	4f 5f       	subi	r20, 0xFF	; 255
   154b8:	5f 4f       	sbci	r21, 0xFF	; 255
   154ba:	be 01       	movw	r22, r28
   154bc:	6f 5b       	subi	r22, 0xBF	; 191
   154be:	7f 4f       	sbci	r23, 0xFF	; 255
   154c0:	89 e7       	ldi	r24, 0x79	; 121
   154c2:	9e e0       	ldi	r25, 0x0E	; 14
   154c4:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055

    strcpy(str_topic, "status/rtds/count");
   154c8:	6b ea       	ldi	r22, 0xAB	; 171
   154ca:	77 e0       	ldi	r23, 0x07	; 7
   154cc:	ce 01       	movw	r24, r28
   154ce:	8f 5b       	subi	r24, 0xBF	; 191
   154d0:	9f 4f       	sbci	r25, 0xFF	; 255
   154d2:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4056
    itoa(use_rtds, payload, 10);
   154d6:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   154da:	4a e0       	ldi	r20, 0x0A	; 10
   154dc:	be 01       	movw	r22, r28
   154de:	6f 5f       	subi	r22, 0xFF	; 255
   154e0:	7f 4f       	sbci	r23, 0xFF	; 255
   154e2:	90 e0       	ldi	r25, 0x00	; 0
   154e4:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   154e8:	ae 01       	movw	r20, r28
   154ea:	4f 5f       	subi	r20, 0xFF	; 255
   154ec:	5f 4f       	sbci	r21, 0xFF	; 255
   154ee:	be 01       	movw	r22, r28
   154f0:	6f 5b       	subi	r22, 0xBF	; 191
   154f2:	7f 4f       	sbci	r23, 0xFF	; 255
   154f4:	89 e7       	ldi	r24, 0x79	; 121
   154f6:	9e e0       	ldi	r25, 0x0E	; 14
   154f8:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   154fc:	81 e0       	ldi	r24, 0x01	; 1
   154fe:	90 e0       	ldi	r25, 0x00	; 0
   15500:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15504:	4a e0       	ldi	r20, 0x0A	; 10
   15506:	be 01       	movw	r22, r28
   15508:	6f 5f       	subi	r22, 0xFF	; 255
   1550a:	7f 4f       	sbci	r23, 0xFF	; 255
   1550c:	90 e0       	ldi	r25, 0x00	; 0
   1550e:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   15512:	ae 01       	movw	r20, r28
   15514:	4f 5f       	subi	r20, 0xFF	; 255
   15516:	5f 4f       	sbci	r21, 0xFF	; 255
   15518:	6d eb       	ldi	r22, 0xBD	; 189
   1551a:	77 e0       	ldi	r23, 0x07	; 7
   1551c:	89 e7       	ldi	r24, 0x79	; 121
   1551e:	9e e0       	ldi	r25, 0x0E	; 14
   15520:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   15524:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <tritri>
   15528:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <tritri+0x1>
   1552c:	25 e0       	ldi	r18, 0x05	; 5
   1552e:	28 9f       	mul	r18, r24
   15530:	b0 01       	movw	r22, r0
   15532:	29 9f       	mul	r18, r25
   15534:	70 0d       	add	r23, r0
   15536:	11 24       	eor	r1, r1
   15538:	90 e0       	ldi	r25, 0x00	; 0
   1553a:	80 e0       	ldi	r24, 0x00	; 0
   1553c:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
   15540:	20 e0       	ldi	r18, 0x00	; 0
   15542:	30 e0       	ldi	r19, 0x00	; 0
   15544:	4a e7       	ldi	r20, 0x7A	; 122
   15546:	54 e4       	ldi	r21, 0x44	; 68
   15548:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   1554c:	8e 01       	movw	r16, r28
   1554e:	0f 5f       	subi	r16, 0xFF	; 255
   15550:	1f 4f       	sbci	r17, 0xFF	; 255
   15552:	22 e0       	ldi	r18, 0x02	; 2
   15554:	44 e0       	ldi	r20, 0x04	; 4
   15556:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4067
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   1555a:	a8 01       	movw	r20, r16
   1555c:	6d ec       	ldi	r22, 0xCD	; 205
   1555e:	77 e0       	ldi	r23, 0x07	; 7
   15560:	89 e7       	ldi	r24, 0x79	; 121
   15562:	9e e0       	ldi	r25, 0x0E	; 14
   15564:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   15568:	60 91 71 0a 	lds	r22, 0x0A71	; 0x800a71 <petnula>
   1556c:	70 91 72 0a 	lds	r23, 0x0A72	; 0x800a72 <petnula+0x1>
   15570:	f3 e0       	ldi	r31, 0x03	; 3
   15572:	66 0f       	add	r22, r22
   15574:	77 1f       	adc	r23, r23
   15576:	fa 95       	dec	r31
   15578:	e1 f7       	brne	.-8      	; 0x15572 <main+0x5c0>
   1557a:	90 e0       	ldi	r25, 0x00	; 0
   1557c:	80 e0       	ldi	r24, 0x00	; 0
   1557e:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
   15582:	20 e0       	ldi	r18, 0x00	; 0
   15584:	30 e0       	ldi	r19, 0x00	; 0
   15586:	4a e7       	ldi	r20, 0x7A	; 122
   15588:	54 e4       	ldi	r21, 0x44	; 68
   1558a:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4069
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   1558e:	22 e0       	ldi	r18, 0x02	; 2
   15590:	44 e0       	ldi	r20, 0x04	; 4
   15592:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   15596:	a8 01       	movw	r20, r16
   15598:	60 ee       	ldi	r22, 0xE0	; 224
   1559a:	77 e0       	ldi	r23, 0x07	; 7
   1559c:	89 e7       	ldi	r24, 0x79	; 121
   1559e:	9e e0       	ldi	r25, 0x0E	; 14
   155a0:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   155a4:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <dvanact>
   155a8:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <dvanact+0x1>
   155ac:	29 e3       	ldi	r18, 0x39	; 57
   155ae:	28 9f       	mul	r18, r24
   155b0:	b0 01       	movw	r22, r0
   155b2:	29 9f       	mul	r18, r25
   155b4:	70 0d       	add	r23, r0
   155b6:	11 24       	eor	r1, r1
   155b8:	90 e0       	ldi	r25, 0x00	; 0
   155ba:	80 e0       	ldi	r24, 0x00	; 0
   155bc:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
   155c0:	20 e0       	ldi	r18, 0x00	; 0
   155c2:	30 e0       	ldi	r19, 0x00	; 0
   155c4:	4a e7       	ldi	r20, 0x7A	; 122
   155c6:	54 e4       	ldi	r21, 0x44	; 68
   155c8:	0e 94 fc bb 	call	0x177f8	; 0x177f8 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4072
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   155cc:	22 e0       	ldi	r18, 0x02	; 2
   155ce:	44 e0       	ldi	r20, 0x04	; 4
   155d0:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4073
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   155d4:	a8 01       	movw	r20, r16
   155d6:	63 ef       	ldi	r22, 0xF3	; 243
   155d8:	77 e0       	ldi	r23, 0x07	; 7
   155da:	89 e7       	ldi	r24, 0x79	; 121
   155dc:	9e e0       	ldi	r25, 0x0E	; 14
   155de:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   155e2:	60 91 6d 0a 	lds	r22, 0x0A6D	; 0x800a6d <proud>
   155e6:	70 91 6e 0a 	lds	r23, 0x0A6E	; 0x800a6e <proud+0x1>
   155ea:	90 e0       	ldi	r25, 0x00	; 0
   155ec:	80 e0       	ldi	r24, 0x00	; 0
   155ee:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   155f2:	22 e0       	ldi	r18, 0x02	; 2
   155f4:	44 e0       	ldi	r20, 0x04	; 4
   155f6:	0e 94 ee af 	call	0x15fdc	; 0x15fdc <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4076
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   155fa:	a8 01       	movw	r20, r16
   155fc:	66 e0       	ldi	r22, 0x06	; 6
   155fe:	78 e0       	ldi	r23, 0x08	; 8
   15600:	89 e7       	ldi	r24, 0x79	; 121
   15602:	9e e0       	ldi	r25, 0x0E	; 14
   15604:	0e 94 a6 61 	call	0xc34c	; 0xc34c <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   15608:	ec e5       	ldi	r30, 0x5C	; 92
   1560a:	ae 2e       	mov	r10, r30
   1560c:	bb 24       	eor	r11, r11
   1560e:	b3 94       	inc	r11
   15610:	10 e0       	ldi	r17, 0x00	; 0
   15612:	00 e0       	ldi	r16, 0x00	; 0
   15614:	90 2e       	mov	r9, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   15616:	80 2f       	mov	r24, r16
   15618:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
   1561c:	8f 3f       	cpi	r24, 0xFF	; 255
   1561e:	09 f4       	brne	.+2      	; 0x15622 <main+0x670>
   15620:	f1 c0       	rjmp	.+482    	; 0x15804 <main+0x852>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4098
    {
      thermostat_ring_get_name(idx, payload);
   15622:	be 01       	movw	r22, r28
   15624:	6f 5f       	subi	r22, 0xFF	; 255
   15626:	7f 4f       	sbci	r23, 0xFF	; 255
   15628:	80 2f       	mov	r24, r16
   1562a:	0e 94 05 5b 	call	0xb60a	; 0xb60a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4099
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   1562e:	9e 01       	movw	r18, r28
   15630:	2f 5f       	subi	r18, 0xFF	; 255
   15632:	3f 4f       	sbci	r19, 0xFF	; 255
   15634:	41 ec       	ldi	r20, 0xC1	; 193
   15636:	53 e0       	ldi	r21, 0x03	; 3
   15638:	60 2f       	mov	r22, r16
   1563a:	86 e9       	ldi	r24, 0x96	; 150
   1563c:	97 e0       	ldi	r25, 0x07	; 7
   1563e:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4100
      itoa(thermostat_ring_get_active(idx), payload, 10);
   15642:	80 2f       	mov	r24, r16
   15644:	0e 94 99 5a 	call	0xb532	; 0xb532 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15648:	4a e0       	ldi	r20, 0x0A	; 10
   1564a:	be 01       	movw	r22, r28
   1564c:	6f 5f       	subi	r22, 0xFF	; 255
   1564e:	7f 4f       	sbci	r23, 0xFF	; 255
   15650:	90 e0       	ldi	r25, 0x00	; 0
   15652:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   15656:	9e 01       	movw	r18, r28
   15658:	2f 5f       	subi	r18, 0xFF	; 255
   1565a:	3f 4f       	sbci	r19, 0xFF	; 255
   1565c:	4b ec       	ldi	r20, 0xCB	; 203
   1565e:	53 e0       	ldi	r21, 0x03	; 3
   15660:	60 2f       	mov	r22, r16
   15662:	86 e9       	ldi	r24, 0x96	; 150
   15664:	97 e0       	ldi	r25, 0x07	; 7
   15666:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1566a:	c5 01       	movw	r24, r10
   1566c:	01 97       	sbiw	r24, 0x01	; 1
   1566e:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15672:	4a e0       	ldi	r20, 0x0A	; 10
   15674:	be 01       	movw	r22, r28
   15676:	6f 5f       	subi	r22, 0xFF	; 255
   15678:	7f 4f       	sbci	r23, 0xFF	; 255
   1567a:	90 e0       	ldi	r25, 0x00	; 0
   1567c:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4103
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   15680:	9e 01       	movw	r18, r28
   15682:	2f 5f       	subi	r18, 0xFF	; 255
   15684:	3f 4f       	sbci	r19, 0xFF	; 255
   15686:	40 e6       	ldi	r20, 0x60	; 96
   15688:	56 e0       	ldi	r21, 0x06	; 6
   1568a:	60 2f       	mov	r22, r16
   1568c:	86 e9       	ldi	r24, 0x96	; 150
   1568e:	97 e0       	ldi	r25, 0x07	; 7
   15690:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4104
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   15694:	80 2f       	mov	r24, r16
   15696:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1569a:	4a e0       	ldi	r20, 0x0A	; 10
   1569c:	be 01       	movw	r22, r28
   1569e:	6f 5f       	subi	r22, 0xFF	; 255
   156a0:	7f 4f       	sbci	r23, 0xFF	; 255
   156a2:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   156a6:	9e 01       	movw	r18, r28
   156a8:	2f 5f       	subi	r18, 0xFF	; 255
   156aa:	3f 4f       	sbci	r19, 0xFF	; 255
   156ac:	46 e5       	ldi	r20, 0x56	; 86
   156ae:	56 e0       	ldi	r21, 0x06	; 6
   156b0:	60 2f       	mov	r22, r16
   156b2:	86 e9       	ldi	r24, 0x96	; 150
   156b4:	97 e0       	ldi	r25, 0x07	; 7
   156b6:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4106
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   156ba:	80 2f       	mov	r24, r16
   156bc:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   156c0:	4a e0       	ldi	r20, 0x0A	; 10
   156c2:	be 01       	movw	r22, r28
   156c4:	6f 5f       	subi	r22, 0xFF	; 255
   156c6:	7f 4f       	sbci	r23, 0xFF	; 255
   156c8:	90 e0       	ldi	r25, 0x00	; 0
   156ca:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   156ce:	9e 01       	movw	r18, r28
   156d0:	2f 5f       	subi	r18, 0xFF	; 255
   156d2:	3f 4f       	sbci	r19, 0xFF	; 255
   156d4:	49 e7       	ldi	r20, 0x79	; 121
   156d6:	56 e0       	ldi	r21, 0x06	; 6
   156d8:	60 2f       	mov	r22, r16
   156da:	86 e9       	ldi	r24, 0x96	; 150
   156dc:	97 e0       	ldi	r25, 0x07	; 7
   156de:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4108
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   156e2:	80 2f       	mov	r24, r16
   156e4:	0e 94 c7 59 	call	0xb38e	; 0xb38e <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   156e8:	6d e1       	ldi	r22, 0x1D	; 29
   156ea:	78 e0       	ldi	r23, 0x08	; 8
   156ec:	88 23       	and	r24, r24
   156ee:	a1 f0       	breq	.+40     	; 0x15718 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   156f0:	6c e5       	ldi	r22, 0x5C	; 92
   156f2:	75 e0       	ldi	r23, 0x05	; 5
   156f4:	81 30       	cpi	r24, 0x01	; 1
   156f6:	81 f0       	breq	.+32     	; 0x15718 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4467
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   156f8:	61 e6       	ldi	r22, 0x61	; 97
   156fa:	75 e0       	ldi	r23, 0x05	; 5
   156fc:	83 30       	cpi	r24, 0x03	; 3
   156fe:	61 f0       	breq	.+24     	; 0x15718 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   15700:	68 e6       	ldi	r22, 0x68	; 104
   15702:	75 e0       	ldi	r23, 0x05	; 5
   15704:	82 30       	cpi	r24, 0x02	; 2
   15706:	41 f0       	breq	.+16     	; 0x15718 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   15708:	6d e6       	ldi	r22, 0x6D	; 109
   1570a:	75 e0       	ldi	r23, 0x05	; 5
   1570c:	84 30       	cpi	r24, 0x04	; 4
   1570e:	21 f0       	breq	.+8      	; 0x15718 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   15710:	86 30       	cpi	r24, 0x06	; 6
   15712:	31 f4       	brne	.+12     	; 0x15720 <main+0x76e>
   15714:	62 e7       	ldi	r22, 0x72	; 114
   15716:	75 e0       	ldi	r23, 0x05	; 5
   15718:	ce 01       	movw	r24, r28
   1571a:	01 96       	adiw	r24, 0x01	; 1
   1571c:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   15720:	9e 01       	movw	r18, r28
   15722:	2f 5f       	subi	r18, 0xFF	; 255
   15724:	3f 4f       	sbci	r19, 0xFF	; 255
   15726:	44 e7       	ldi	r20, 0x74	; 116
   15728:	56 e0       	ldi	r21, 0x06	; 6
   1572a:	69 2d       	mov	r22, r9
   1572c:	86 e9       	ldi	r24, 0x96	; 150
   1572e:	97 e0       	ldi	r25, 0x07	; 7
   15730:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   15734:	f8 01       	movw	r30, r16
   15736:	ea 58       	subi	r30, 0x8A	; 138
   15738:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4110
      itoa(thermostat_ring_get_state(idx), payload, 10);
   1573a:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1573c:	4a e0       	ldi	r20, 0x0A	; 10
   1573e:	be 01       	movw	r22, r28
   15740:	6f 5f       	subi	r22, 0xFF	; 255
   15742:	7f 4f       	sbci	r23, 0xFF	; 255
   15744:	90 e0       	ldi	r25, 0x00	; 0
   15746:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4111
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   1574a:	9e 01       	movw	r18, r28
   1574c:	2f 5f       	subi	r18, 0xFF	; 255
   1574e:	3f 4f       	sbci	r19, 0xFF	; 255
   15750:	41 e2       	ldi	r20, 0x21	; 33
   15752:	58 e0       	ldi	r21, 0x08	; 8
   15754:	69 2d       	mov	r22, r9
   15756:	86 e9       	ldi	r24, 0x96	; 150
   15758:	97 e0       	ldi	r25, 0x07	; 7
   1575a:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1575e:	c5 01       	movw	r24, r10
   15760:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15764:	4a e0       	ldi	r20, 0x0A	; 10
   15766:	be 01       	movw	r22, r28
   15768:	6f 5f       	subi	r22, 0xFF	; 255
   1576a:	7f 4f       	sbci	r23, 0xFF	; 255
   1576c:	90 e0       	ldi	r25, 0x00	; 0
   1576e:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4113
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   15772:	9e 01       	movw	r18, r28
   15774:	2f 5f       	subi	r18, 0xFF	; 255
   15776:	3f 4f       	sbci	r19, 0xFF	; 255
   15778:	48 e2       	ldi	r20, 0x28	; 40
   1577a:	58 e0       	ldi	r21, 0x08	; 8
   1577c:	69 2d       	mov	r22, r9
   1577e:	86 e9       	ldi	r24, 0x96	; 150
   15780:	97 e0       	ldi	r25, 0x07	; 7
   15782:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   15786:	c5 01       	movw	r24, r10
   15788:	03 96       	adiw	r24, 0x03	; 3
   1578a:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1578e:	4a e0       	ldi	r20, 0x0A	; 10
   15790:	be 01       	movw	r22, r28
   15792:	6f 5f       	subi	r22, 0xFF	; 255
   15794:	7f 4f       	sbci	r23, 0xFF	; 255
   15796:	90 e0       	ldi	r25, 0x00	; 0
   15798:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4115
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   1579c:	9e 01       	movw	r18, r28
   1579e:	2f 5f       	subi	r18, 0xFF	; 255
   157a0:	3f 4f       	sbci	r19, 0xFF	; 255
   157a2:	4e e7       	ldi	r20, 0x7E	; 126
   157a4:	56 e0       	ldi	r21, 0x06	; 6
   157a6:	69 2d       	mov	r22, r9
   157a8:	86 e9       	ldi	r24, 0x96	; 150
   157aa:	97 e0       	ldi	r25, 0x07	; 7
   157ac:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   157b0:	c5 01       	movw	r24, r10
   157b2:	04 97       	sbiw	r24, 0x04	; 4
   157b4:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   157b8:	4a e0       	ldi	r20, 0x0A	; 10
   157ba:	be 01       	movw	r22, r28
   157bc:	6f 5f       	subi	r22, 0xFF	; 255
   157be:	7f 4f       	sbci	r23, 0xFF	; 255
   157c0:	90 e0       	ldi	r25, 0x00	; 0
   157c2:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4118

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   157c6:	9e 01       	movw	r18, r28
   157c8:	2f 5f       	subi	r18, 0xFF	; 255
   157ca:	3f 4f       	sbci	r19, 0xFF	; 255
   157cc:	4e e2       	ldi	r20, 0x2E	; 46
   157ce:	58 e0       	ldi	r21, 0x08	; 8
   157d0:	69 2d       	mov	r22, r9
   157d2:	86 e9       	ldi	r24, 0x96	; 150
   157d4:	97 e0       	ldi	r25, 0x07	; 7
   157d6:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120

      itoa(last_output_update[idx], payload, 10);
   157da:	f8 01       	movw	r30, r16
   157dc:	e5 58       	subi	r30, 0x85	; 133
   157de:	f5 4f       	sbci	r31, 0xF5	; 245
   157e0:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   157e2:	4a e0       	ldi	r20, 0x0A	; 10
   157e4:	be 01       	movw	r22, r28
   157e6:	6f 5f       	subi	r22, 0xFF	; 255
   157e8:	7f 4f       	sbci	r23, 0xFF	; 255
   157ea:	90 e0       	ldi	r25, 0x00	; 0
   157ec:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   157f0:	9e 01       	movw	r18, r28
   157f2:	2f 5f       	subi	r18, 0xFF	; 255
   157f4:	3f 4f       	sbci	r19, 0xFF	; 255
   157f6:	4b e3       	ldi	r20, 0x3B	; 59
   157f8:	58 e0       	ldi	r21, 0x08	; 8
   157fa:	69 2d       	mov	r22, r9
   157fc:	86 e9       	ldi	r24, 0x96	; 150
   157fe:	97 e0       	ldi	r25, 0x07	; 7
   15800:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   15804:	0f 5f       	subi	r16, 0xFF	; 255
   15806:	1f 4f       	sbci	r17, 0xFF	; 255
   15808:	31 e2       	ldi	r19, 0x21	; 33
   1580a:	a3 0e       	add	r10, r19
   1580c:	b1 1c       	adc	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1580e:	41 e0       	ldi	r20, 0x01	; 1
   15810:	a4 16       	cp	r10, r20
   15812:	42 e0       	ldi	r20, 0x02	; 2
   15814:	b4 06       	cpc	r11, r20
   15816:	09 f0       	breq	.+2      	; 0x1581a <main+0x868>
   15818:	fd ce       	rjmp	.-518    	; 0x15614 <main+0x662>
   1581a:	60 e8       	ldi	r22, 0x80	; 128
   1581c:	a6 2e       	mov	r10, r22
   1581e:	6a e0       	ldi	r22, 0x0A	; 10
   15820:	b6 2e       	mov	r11, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15822:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   15824:	7a e0       	ldi	r23, 0x0A	; 10
   15826:	87 2e       	mov	r8, r23
   15828:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4141
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   1582a:	be 01       	movw	r22, r28
   1582c:	6f 5b       	subi	r22, 0xBF	; 191
   1582e:	7f 4f       	sbci	r23, 0xFF	; 255
   15830:	81 2f       	mov	r24, r17
   15832:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
   15836:	81 30       	cpi	r24, 0x01	; 1
   15838:	09 f0       	breq	.+2      	; 0x1583c <main+0x88a>
   1583a:	d2 c0       	rjmp	.+420    	; 0x159e0 <main+0xa2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4142
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   1583c:	22 96       	adiw	r28, 0x02	; 2
   1583e:	8f ad       	ldd	r24, Y+63	; 0x3f
   15840:	22 97       	sbiw	r28, 0x02	; 2
   15842:	81 30       	cpi	r24, 0x01	; 1
   15844:	09 f0       	breq	.+2      	; 0x15848 <main+0x896>
   15846:	cc c0       	rjmp	.+408    	; 0x159e0 <main+0xa2e>
   15848:	d5 01       	movw	r26, r10
   1584a:	5b 96       	adiw	r26, 0x1b	; 27
   1584c:	8c 91       	ld	r24, X
   1584e:	5b 97       	sbiw	r26, 0x1b	; 27
   15850:	81 30       	cpi	r24, 0x01	; 1
   15852:	09 f0       	breq	.+2      	; 0x15856 <main+0x8a4>
   15854:	c5 c0       	rjmp	.+394    	; 0x159e0 <main+0xa2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
        {
          tt = status_tds18s20[id].temp / 10;
   15856:	15 96       	adiw	r26, 0x05	; 5
   15858:	8d 91       	ld	r24, X+
   1585a:	9c 91       	ld	r25, X
   1585c:	b4 01       	movw	r22, r8
   1585e:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   15862:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15864:	4a e0       	ldi	r20, 0x0A	; 10
   15866:	be 01       	movw	r22, r28
   15868:	6f 5f       	subi	r22, 0xFF	; 255
   1586a:	7f 4f       	sbci	r23, 0xFF	; 255
   1586c:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4146
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   15870:	9e 01       	movw	r18, r28
   15872:	2f 5f       	subi	r18, 0xFF	; 255
   15874:	3f 4f       	sbci	r19, 0xFF	; 255
   15876:	42 ed       	ldi	r20, 0xD2	; 210
   15878:	53 e0       	ldi	r21, 0x03	; 3
   1587a:	61 2f       	mov	r22, r17
   1587c:	87 ec       	ldi	r24, 0xC7	; 199
   1587e:	93 e0       	ldi	r25, 0x03	; 3
   15880:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   15884:	30 e0       	ldi	r19, 0x00	; 0
   15886:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
          avg = 0;
   15888:	60 e0       	ldi	r22, 0x00	; 0
   1588a:	70 e0       	ldi	r23, 0x00	; 0
   1588c:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4148
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   1588e:	f9 01       	movw	r30, r18
   15890:	ee 0f       	add	r30, r30
   15892:	ff 1f       	adc	r31, r31
   15894:	ea 0d       	add	r30, r10
   15896:	fb 1d       	adc	r31, r11
   15898:	47 80       	ldd	r4, Z+7	; 0x07
   1589a:	50 84       	ldd	r5, Z+8	; 0x08
   1589c:	05 2c       	mov	r0, r5
   1589e:	00 0c       	add	r0, r0
   158a0:	66 08       	sbc	r6, r6
   158a2:	77 08       	sbc	r7, r7
   158a4:	64 0d       	add	r22, r4
   158a6:	75 1d       	adc	r23, r5
   158a8:	86 1d       	adc	r24, r6
   158aa:	97 1d       	adc	r25, r7
   158ac:	2f 5f       	subi	r18, 0xFF	; 255
   158ae:	3f 4f       	sbci	r19, 0xFF	; 255
   158b0:	2a 30       	cpi	r18, 0x0A	; 10
   158b2:	31 05       	cpc	r19, r1
   158b4:	61 f7       	brne	.-40     	; 0x1588e <main+0x8dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   158b6:	24 e6       	ldi	r18, 0x64	; 100
   158b8:	30 e0       	ldi	r19, 0x00	; 0
   158ba:	40 e0       	ldi	r20, 0x00	; 0
   158bc:	50 e0       	ldi	r21, 0x00	; 0
   158be:	0e 94 56 bb 	call	0x176ac	; 0x176ac <__divmodsi4>
   158c2:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   158c4:	4a e0       	ldi	r20, 0x0A	; 10
   158c6:	be 01       	movw	r22, r28
   158c8:	6f 5f       	subi	r22, 0xFF	; 255
   158ca:	7f 4f       	sbci	r23, 0xFF	; 255
   158cc:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   158d0:	9e 01       	movw	r18, r28
   158d2:	2f 5f       	subi	r18, 0xFF	; 255
   158d4:	3f 4f       	sbci	r19, 0xFF	; 255
   158d6:	49 e4       	ldi	r20, 0x49	; 73
   158d8:	58 e0       	ldi	r21, 0x08	; 8
   158da:	61 2f       	mov	r22, r17
   158dc:	87 ec       	ldi	r24, 0xC7	; 199
   158de:	93 e0       	ldi	r25, 0x03	; 3
   158e0:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154

          strcpy(payload, tds.name);
   158e4:	cc 57       	subi	r28, 0x7C	; 124
   158e6:	df 4f       	sbci	r29, 0xFF	; 255
   158e8:	68 81       	ld	r22, Y
   158ea:	79 81       	ldd	r23, Y+1	; 0x01
   158ec:	c4 58       	subi	r28, 0x84	; 132
   158ee:	d0 40       	sbci	r29, 0x00	; 0
   158f0:	ce 01       	movw	r24, r28
   158f2:	01 96       	adiw	r24, 0x01	; 1
   158f4:	0e 94 cb bd 	call	0x17b96	; 0x17b96 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   158f8:	9e 01       	movw	r18, r28
   158fa:	2f 5f       	subi	r18, 0xFF	; 255
   158fc:	3f 4f       	sbci	r19, 0xFF	; 255
   158fe:	41 ec       	ldi	r20, 0xC1	; 193
   15900:	53 e0       	ldi	r21, 0x03	; 3
   15902:	61 2f       	mov	r22, r17
   15904:	87 ec       	ldi	r24, 0xC7	; 199
   15906:	93 e0       	ldi	r25, 0x03	; 3
   15908:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1590c:	4a e0       	ldi	r20, 0x0A	; 10
   1590e:	be 01       	movw	r22, r28
   15910:	6f 5f       	subi	r22, 0xFF	; 255
   15912:	7f 4f       	sbci	r23, 0xFF	; 255
   15914:	2d 96       	adiw	r28, 0x0d	; 13
   15916:	8e ad       	ldd	r24, Y+62	; 0x3e
   15918:	9f ad       	ldd	r25, Y+63	; 0x3f
   1591a:	2d 97       	sbiw	r28, 0x0d	; 13
   1591c:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   15920:	9e 01       	movw	r18, r28
   15922:	2f 5f       	subi	r18, 0xFF	; 255
   15924:	3f 4f       	sbci	r19, 0xFF	; 255
   15926:	46 ec       	ldi	r20, 0xC6	; 198
   15928:	57 e0       	ldi	r21, 0x07	; 7
   1592a:	61 2f       	mov	r22, r17
   1592c:	87 ec       	ldi	r24, 0xC7	; 199
   1592e:	93 e0       	ldi	r25, 0x03	; 3
   15930:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159
          tt = status_tds18s20[id].online;
   15934:	f5 01       	movw	r30, r10
   15936:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15938:	4a e0       	ldi	r20, 0x0A	; 10
   1593a:	be 01       	movw	r22, r28
   1593c:	6f 5f       	subi	r22, 0xFF	; 255
   1593e:	7f 4f       	sbci	r23, 0xFF	; 255
   15940:	90 e0       	ldi	r25, 0x00	; 0
   15942:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   15946:	9e 01       	movw	r18, r28
   15948:	2f 5f       	subi	r18, 0xFF	; 255
   1594a:	3f 4f       	sbci	r19, 0xFF	; 255
   1594c:	42 e5       	ldi	r20, 0x52	; 82
   1594e:	58 e0       	ldi	r21, 0x08	; 8
   15950:	61 2f       	mov	r22, r17
   15952:	87 ec       	ldi	r24, 0xC7	; 199
   15954:	93 e0       	ldi	r25, 0x03	; 3
   15956:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162
          payload[0] = 0;
   1595a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
          createString(payload, ':', tds.rom, 8, 16);
   1595c:	00 e1       	ldi	r16, 0x10	; 16
   1595e:	28 e0       	ldi	r18, 0x08	; 8
   15960:	ca 57       	subi	r28, 0x7A	; 122
   15962:	df 4f       	sbci	r29, 0xFF	; 255
   15964:	48 81       	ld	r20, Y
   15966:	59 81       	ldd	r21, Y+1	; 0x01
   15968:	c6 58       	subi	r28, 0x86	; 134
   1596a:	d0 40       	sbci	r29, 0x00	; 0
   1596c:	6a e3       	ldi	r22, 0x3A	; 58
   1596e:	ce 01       	movw	r24, r28
   15970:	01 96       	adiw	r24, 0x01	; 1
   15972:	0e 94 8f 9d 	call	0x13b1e	; 0x13b1e <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   15976:	9e 01       	movw	r18, r28
   15978:	2f 5f       	subi	r18, 0xFF	; 255
   1597a:	3f 4f       	sbci	r19, 0xFF	; 255
   1597c:	45 e1       	ldi	r20, 0x15	; 21
   1597e:	57 e0       	ldi	r21, 0x07	; 7
   15980:	61 2f       	mov	r22, r17
   15982:	87 ec       	ldi	r24, 0xC7	; 199
   15984:	93 e0       	ldi	r25, 0x03	; 3
   15986:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4165
          tt = tds.period;
   1598a:	66 96       	adiw	r28, 0x16	; 22
   1598c:	8f ad       	ldd	r24, Y+63	; 0x3f
   1598e:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15990:	4a e0       	ldi	r20, 0x0A	; 10
   15992:	be 01       	movw	r22, r28
   15994:	6f 5f       	subi	r22, 0xFF	; 255
   15996:	7f 4f       	sbci	r23, 0xFF	; 255
   15998:	90 e0       	ldi	r25, 0x00	; 0
   1599a:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   1599e:	9e 01       	movw	r18, r28
   159a0:	2f 5f       	subi	r18, 0xFF	; 255
   159a2:	3f 4f       	sbci	r19, 0xFF	; 255
   159a4:	4f e4       	ldi	r20, 0x4F	; 79
   159a6:	56 e0       	ldi	r21, 0x06	; 6
   159a8:	61 2f       	mov	r22, r17
   159aa:	87 ec       	ldi	r24, 0xC7	; 199
   159ac:	93 e0       	ldi	r25, 0x03	; 3
   159ae:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   159b2:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <uptime>
   159b6:	d5 01       	movw	r26, r10
   159b8:	5c 96       	adiw	r26, 0x1c	; 28
   159ba:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   159bc:	4a e0       	ldi	r20, 0x0A	; 10
   159be:	be 01       	movw	r22, r28
   159c0:	6f 5f       	subi	r22, 0xFF	; 255
   159c2:	7f 4f       	sbci	r23, 0xFF	; 255
   159c4:	89 1b       	sub	r24, r25
   159c6:	99 0b       	sbc	r25, r25
   159c8:	0e 94 82 b1 	call	0x16304	; 0x16304 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   159cc:	9e 01       	movw	r18, r28
   159ce:	2f 5f       	subi	r18, 0xFF	; 255
   159d0:	3f 4f       	sbci	r19, 0xFF	; 255
   159d2:	49 e5       	ldi	r20, 0x59	; 89
   159d4:	58 e0       	ldi	r21, 0x08	; 8
   159d6:	61 2f       	mov	r22, r17
   159d8:	87 ec       	ldi	r24, 0xC7	; 199
   159da:	93 e0       	ldi	r25, 0x03	; 3
   159dc:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   159e0:	1f 5f       	subi	r17, 0xFF	; 255
   159e2:	be e1       	ldi	r27, 0x1E	; 30
   159e4:	ab 0e       	add	r10, r27
   159e6:	b1 1c       	adc	r11, r1
   159e8:	16 30       	cpi	r17, 0x06	; 6
   159ea:	09 f0       	breq	.+2      	; 0x159ee <main+0xa3c>
   159ec:	1e cf       	rjmp	.-452    	; 0x1582a <main+0x878>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5116
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
      mqtt_send_pid_variable(idx);
   159ee:	80 e0       	ldi	r24, 0x00	; 0
   159f0:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
   159f4:	81 e0       	ldi	r24, 0x01	; 1
   159f6:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
   159fa:	82 e0       	ldi	r24, 0x02	; 2
   159fc:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
   15a00:	83 e0       	ldi	r24, 0x03	; 3
   15a02:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
   15a06:	84 e0       	ldi	r24, 0x04	; 4
   15a08:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5117
    send_mqtt_remote_tds_status();
   15a0c:	0e 94 f1 65 	call	0xcbe2	; 0xcbe2 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5126
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   15a10:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15a14:	00 91 32 11 	lds	r16, 0x1132	; 0x801132 <milis_1s>
   15a18:	10 91 33 11 	lds	r17, 0x1133	; 0x801133 <milis_1s+0x1>
   15a1c:	20 91 34 11 	lds	r18, 0x1134	; 0x801134 <milis_1s+0x2>
   15a20:	30 91 35 11 	lds	r19, 0x1135	; 0x801135 <milis_1s+0x3>
   15a24:	60 1b       	sub	r22, r16
   15a26:	71 0b       	sbc	r23, r17
   15a28:	82 0b       	sbc	r24, r18
   15a2a:	93 0b       	sbc	r25, r19
   15a2c:	69 3e       	cpi	r22, 0xE9	; 233
   15a2e:	73 40       	sbci	r23, 0x03	; 3
   15a30:	81 05       	cpc	r24, r1
   15a32:	91 05       	cpc	r25, r1
   15a34:	08 f4       	brcc	.+2      	; 0x15a38 <main+0xa86>
   15a36:	62 c1       	rjmp	.+708    	; 0x15cfc <main+0xd4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128
  {
    milis_1s = millis();
   15a38:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15a3c:	60 93 32 11 	sts	0x1132, r22	; 0x801132 <milis_1s>
   15a40:	70 93 33 11 	sts	0x1133, r23	; 0x801133 <milis_1s+0x1>
   15a44:	80 93 34 11 	sts	0x1134, r24	; 0x801134 <milis_1s+0x2>
   15a48:	90 93 35 11 	sts	0x1135, r25	; 0x801135 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5129
    uptime++;
   15a4c:	40 90 3d 0b 	lds	r4, 0x0B3D	; 0x800b3d <uptime>
   15a50:	50 90 3e 0b 	lds	r5, 0x0B3E	; 0x800b3e <uptime+0x1>
   15a54:	60 90 3f 0b 	lds	r6, 0x0B3F	; 0x800b3f <uptime+0x2>
   15a58:	70 90 40 0b 	lds	r7, 0x0B40	; 0x800b40 <uptime+0x3>
   15a5c:	ff ef       	ldi	r31, 0xFF	; 255
   15a5e:	4f 1a       	sub	r4, r31
   15a60:	5f 0a       	sbc	r5, r31
   15a62:	6f 0a       	sbc	r6, r31
   15a64:	7f 0a       	sbc	r7, r31
   15a66:	40 92 3d 0b 	sts	0x0B3D, r4	; 0x800b3d <uptime>
   15a6a:	50 92 3e 0b 	sts	0x0B3E, r5	; 0x800b3e <uptime+0x1>
   15a6e:	60 92 3f 0b 	sts	0x0B3F, r6	; 0x800b3f <uptime+0x2>
   15a72:	70 92 40 0b 	sts	0x0B40, r7	; 0x800b40 <uptime+0x3>
   15a76:	00 e8       	ldi	r16, 0x80	; 128
   15a78:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   15a7a:	b1 2c       	mov	r11, r1
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   15a7c:	92 01       	movw	r18, r4
   15a7e:	33 27       	eor	r19, r19
   15a80:	ce 57       	subi	r28, 0x7E	; 126
   15a82:	df 4f       	sbci	r29, 0xFF	; 255
   15a84:	39 83       	std	Y+1, r19	; 0x01
   15a86:	28 83       	st	Y, r18
   15a88:	c2 58       	subi	r28, 0x82	; 130
   15a8a:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   15a8c:	be 01       	movw	r22, r28
   15a8e:	6f 5f       	subi	r22, 0xFF	; 255
   15a90:	7f 4f       	sbci	r23, 0xFF	; 255
   15a92:	8b 2d       	mov	r24, r11
   15a94:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   15a98:	a9 80       	ldd	r10, Y+1	; 0x01
   15a9a:	31 e0       	ldi	r19, 0x01	; 1
   15a9c:	a3 12       	cpse	r10, r19
   15a9e:	f7 c0       	rjmp	.+494    	; 0x15c8e <main+0xcdc>
   15aa0:	d8 01       	movw	r26, r16
   15aa2:	5c 96       	adiw	r26, 0x1c	; 28
   15aa4:	8c 91       	ld	r24, X
   15aa6:	5c 97       	sbiw	r26, 0x1c	; 28
   15aa8:	ce 57       	subi	r28, 0x7E	; 126
   15aaa:	df 4f       	sbci	r29, 0xFF	; 255
   15aac:	e8 81       	ld	r30, Y
   15aae:	f9 81       	ldd	r31, Y+1	; 0x01
   15ab0:	c2 58       	subi	r28, 0x82	; 130
   15ab2:	d0 40       	sbci	r29, 0x00	; 0
   15ab4:	e8 1b       	sub	r30, r24
   15ab6:	f1 09       	sbc	r31, r1
   15ab8:	2d 89       	ldd	r18, Y+21	; 0x15
   15aba:	2e 17       	cp	r18, r30
   15abc:	1f 06       	cpc	r1, r31
   15abe:	08 f0       	brcs	.+2      	; 0x15ac2 <main+0xb10>
   15ac0:	e6 c0       	rjmp	.+460    	; 0x15c8e <main+0xcdc>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   15ac2:	5d 96       	adiw	r26, 0x1d	; 29
   15ac4:	8c 91       	ld	r24, X
   15ac6:	81 11       	cpse	r24, r1
   15ac8:	10 c0       	rjmp	.+32     	; 0x15aea <main+0xb38>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   15aca:	8a 85       	ldd	r24, Y+10	; 0x0a
   15acc:	0e 94 fa 98 	call	0x131f4	; 0x131f4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   15ad0:	be 01       	movw	r22, r28
   15ad2:	6e 5f       	subi	r22, 0xFE	; 254
   15ad4:	7f 4f       	sbci	r23, 0xFF	; 255
   15ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
   15ad8:	0e 94 db 98 	call	0x131b6	; 0x131b6 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   15adc:	64 e4       	ldi	r22, 0x44	; 68
   15ade:	8a 85       	ldd	r24, Y+10	; 0x0a
   15ae0:	0e 94 a2 98 	call	0x13144	; 0x13144 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   15ae4:	d8 01       	movw	r26, r16
   15ae6:	5d 96       	adiw	r26, 0x1d	; 29
   15ae8:	ac 92       	st	X, r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   15aea:	f8 01       	movw	r30, r16
   15aec:	a5 8c       	ldd	r10, Z+29	; 0x1d
   15aee:	f1 e0       	ldi	r31, 0x01	; 1
   15af0:	af 12       	cpse	r10, r31
   15af2:	cd c0       	rjmp	.+410    	; 0x15c8e <main+0xcdc>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   15af4:	8a 85       	ldd	r24, Y+10	; 0x0a
   15af6:	0e 94 fa 98 	call	0x131f4	; 0x131f4 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   15afa:	be 01       	movw	r22, r28
   15afc:	6e 5f       	subi	r22, 0xFE	; 254
   15afe:	7f 4f       	sbci	r23, 0xFF	; 255
   15b00:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b02:	0e 94 db 98 	call	0x131b6	; 0x131b6 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   15b06:	be 01       	movw	r22, r28
   15b08:	6f 57       	subi	r22, 0x7F	; 127
   15b0a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b0e:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:287
        if (t != 0)
   15b12:	cf 57       	subi	r28, 0x7F	; 127
   15b14:	df 4f       	sbci	r29, 0xFF	; 255
   15b16:	88 81       	ld	r24, Y
   15b18:	c1 58       	subi	r28, 0x81	; 129
   15b1a:	d0 40       	sbci	r29, 0x00	; 0
   15b1c:	88 23       	and	r24, r24
   15b1e:	09 f4       	brne	.+2      	; 0x15b22 <main+0xb70>
   15b20:	b6 c0       	rjmp	.+364    	; 0x15c8e <main+0xcdc>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   15b22:	d8 01       	movw	r26, r16
   15b24:	5d 96       	adiw	r26, 0x1d	; 29
   15b26:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   15b28:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b2a:	0e 94 fa 98 	call	0x131f4	; 0x131f4 <ds2482owReset(unsigned char)>
   15b2e:	38 2e       	mov	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   15b30:	be 01       	movw	r22, r28
   15b32:	6e 5f       	subi	r22, 0xFE	; 254
   15b34:	7f 4f       	sbci	r23, 0xFF	; 255
   15b36:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b38:	0e 94 db 98 	call	0x131b6	; 0x131b6 <owMatchRom(unsigned char, unsigned char*)>
   15b3c:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   15b3e:	6e eb       	ldi	r22, 0xBE	; 190
   15b40:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b42:	0e 94 a2 98 	call	0x13144	; 0x13144 <ds2482owWriteByte(unsigned char, unsigned char)>
   15b46:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   15b48:	be 01       	movw	r22, r28
   15b4a:	6f 5b       	subi	r22, 0xBF	; 191
   15b4c:	7f 4f       	sbci	r23, 0xFF	; 255
   15b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b50:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15b54:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   15b56:	22 96       	adiw	r28, 0x02	; 2
   15b58:	9f ac       	ldd	r9, Y+63	; 0x3f
   15b5a:	22 97       	sbiw	r28, 0x02	; 2
   15b5c:	f8 01       	movw	r30, r16
   15b5e:	90 82       	st	Z, r9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   15b60:	be 01       	movw	r22, r28
   15b62:	6f 5b       	subi	r22, 0xBF	; 191
   15b64:	7f 4f       	sbci	r23, 0xFF	; 255
   15b66:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b68:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15b6c:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   15b6e:	22 96       	adiw	r28, 0x02	; 2
   15b70:	8f ac       	ldd	r8, Y+63	; 0x3f
   15b72:	22 97       	sbiw	r28, 0x02	; 2
   15b74:	d8 01       	movw	r26, r16
   15b76:	11 96       	adiw	r26, 0x01	; 1
   15b78:	8c 92       	st	X, r8
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   15b7a:	be 01       	movw	r22, r28
   15b7c:	6f 5b       	subi	r22, 0xBF	; 191
   15b7e:	7f 4f       	sbci	r23, 0xFF	; 255
   15b80:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b82:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15b86:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   15b88:	be 01       	movw	r22, r28
   15b8a:	6f 5b       	subi	r22, 0xBF	; 191
   15b8c:	7f 4f       	sbci	r23, 0xFF	; 255
   15b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b90:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15b94:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   15b96:	be 01       	movw	r22, r28
   15b98:	6f 5b       	subi	r22, 0xBF	; 191
   15b9a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b9e:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15ba2:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   15ba4:	be 01       	movw	r22, r28
   15ba6:	6f 5b       	subi	r22, 0xBF	; 191
   15ba8:	7f 4f       	sbci	r23, 0xFF	; 255
   15baa:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bac:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15bb0:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   15bb2:	be 01       	movw	r22, r28
   15bb4:	6f 5b       	subi	r22, 0xBF	; 191
   15bb6:	7f 4f       	sbci	r23, 0xFF	; 255
   15bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bba:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15bbe:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   15bc0:	22 96       	adiw	r28, 0x02	; 2
   15bc2:	8f ad       	ldd	r24, Y+63	; 0x3f
   15bc4:	22 97       	sbiw	r28, 0x02	; 2
   15bc6:	f8 01       	movw	r30, r16
   15bc8:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   15bca:	be 01       	movw	r22, r28
   15bcc:	6f 5b       	subi	r22, 0xBF	; 191
   15bce:	7f 4f       	sbci	r23, 0xFF	; 255
   15bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bd2:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
   15bd6:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   15bd8:	22 96       	adiw	r28, 0x02	; 2
   15bda:	2f ac       	ldd	r2, Y+63	; 0x3f
   15bdc:	22 97       	sbiw	r28, 0x02	; 2
   15bde:	d8 01       	movw	r26, r16
   15be0:	13 96       	adiw	r26, 0x03	; 3
   15be2:	2c 92       	st	X, r2
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   15be4:	be 01       	movw	r22, r28
   15be6:	6f 5b       	subi	r22, 0xBF	; 191
   15be8:	7f 4f       	sbci	r23, 0xFF	; 255
   15bea:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bec:	0e 94 46 98 	call	0x1308c	; 0x1308c <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   15bf0:	22 96       	adiw	r28, 0x02	; 2
   15bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
   15bf4:	22 97       	sbiw	r28, 0x02	; 2
   15bf6:	f8 01       	movw	r30, r16
   15bf8:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   15bfa:	83 0d       	add	r24, r3
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   15bfc:	09 f0       	breq	.+2      	; 0x15c00 <main+0xc4e>
   15bfe:	e2 c1       	rjmp	.+964    	; 0x15fc4 <main+0x1012>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   15c00:	62 2d       	mov	r22, r2
   15c02:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   15c04:	28 2d       	mov	r18, r8
   15c06:	30 e0       	ldi	r19, 0x00	; 0
   15c08:	32 2f       	mov	r19, r18
   15c0a:	22 27       	eor	r18, r18
   15c0c:	33 0f       	add	r19, r19
   15c0e:	33 0f       	add	r19, r19
   15c10:	33 0f       	add	r19, r19
   15c12:	f8 e0       	ldi	r31, 0x08	; 8
   15c14:	9f 9e       	mul	r9, r31
   15c16:	c0 01       	movw	r24, r0
   15c18:	11 24       	eor	r1, r1
   15c1a:	28 2b       	or	r18, r24
   15c1c:	39 2b       	or	r19, r25
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   15c1e:	b3 e0       	ldi	r27, 0x03	; 3
   15c20:	22 0f       	add	r18, r18
   15c22:	33 1f       	adc	r19, r19
   15c24:	ba 95       	dec	r27
   15c26:	e1 f7       	brne	.-8      	; 0x15c20 <main+0xc6e>
   15c28:	20 78       	andi	r18, 0x80	; 128
   15c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
   15c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
   15c2e:	40 97       	sbiw	r24, 0x10	; 16
   15c30:	28 0f       	add	r18, r24
   15c32:	39 1f       	adc	r19, r25
   15c34:	cf 57       	subi	r28, 0x7F	; 127
   15c36:	df 4f       	sbci	r29, 0xFF	; 255
   15c38:	e8 81       	ld	r30, Y
   15c3a:	c1 58       	subi	r28, 0x81	; 129
   15c3c:	d0 40       	sbci	r29, 0x00	; 0
   15c3e:	4e e1       	ldi	r20, 0x1E	; 30
   15c40:	4e 9f       	mul	r20, r30
   15c42:	f0 01       	movw	r30, r0
   15c44:	11 24       	eor	r1, r1
   15c46:	e0 58       	subi	r30, 0x80	; 128
   15c48:	f5 4f       	sbci	r31, 0xF5	; 245
   15c4a:	82 81       	ldd	r24, Z+2	; 0x02
   15c4c:	db 01       	movw	r26, r22
   15c4e:	a8 1b       	sub	r26, r24
   15c50:	b1 09       	sbc	r27, r1
   15c52:	cd 01       	movw	r24, r26
   15c54:	96 95       	lsr	r25
   15c56:	98 2f       	mov	r25, r24
   15c58:	88 27       	eor	r24, r24
   15c5a:	97 95       	ror	r25
   15c5c:	87 95       	ror	r24
   15c5e:	0e 94 20 bb 	call	0x17640	; 0x17640 <__divmodhi4>
   15c62:	26 0f       	add	r18, r22
   15c64:	37 1f       	adc	r19, r23
   15c66:	f8 01       	movw	r30, r16
   15c68:	36 83       	std	Z+6, r19	; 0x06
   15c6a:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   15c6c:	a3 8e       	std	Z+27, r10	; 0x1b
   15c6e:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   15c70:	87 89       	ldd	r24, Z+23	; 0x17
   15c72:	90 8d       	ldd	r25, Z+24	; 0x18
   15c74:	92 8f       	std	Z+26, r25	; 0x1a
   15c76:	81 8f       	std	Z+25, r24	; 0x19
   15c78:	41 50       	subi	r20, 0x01	; 1
   15c7a:	32 97       	sbiw	r30, 0x02	; 2
   15c7c:	41 11       	cpse	r20, r1
   15c7e:	f8 cf       	rjmp	.-16     	; 0x15c70 <main+0xcbe>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   15c80:	d8 01       	movw	r26, r16
   15c82:	18 96       	adiw	r26, 0x08	; 8
   15c84:	3c 93       	st	X, r19
   15c86:	2e 93       	st	-X, r18
   15c88:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   15c8a:	5c 96       	adiw	r26, 0x1c	; 28
   15c8c:	4c 92       	st	X, r4
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   15c8e:	b3 94       	inc	r11
   15c90:	02 5e       	subi	r16, 0xE2	; 226
   15c92:	1f 4f       	sbci	r17, 0xFF	; 255
   15c94:	f6 e0       	ldi	r31, 0x06	; 6
   15c96:	bf 12       	cpse	r11, r31
   15c98:	f9 ce       	rjmp	.-526    	; 0x15a8c <main+0xada>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3305
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15c9a:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
    if (get_tds18s20(id, &tds) == 1)
   15c9c:	be 01       	movw	r22, r28
   15c9e:	6f 5f       	subi	r22, 0xFF	; 255
   15ca0:	7f 4f       	sbci	r23, 0xFF	; 255
   15ca2:	81 2f       	mov	r24, r17
   15ca4:	0e 94 6e 5c 	call	0xb8dc	; 0xb8dc <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3305
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15ca8:	1f 5f       	subi	r17, 0xFF	; 255
   15caa:	16 30       	cpi	r17, 0x06	; 6
   15cac:	b9 f7       	brne	.-18     	; 0x15c9c <main+0xcea>
   15cae:	f6 e6       	ldi	r31, 0x66	; 102
   15cb0:	8f 2e       	mov	r8, r31
   15cb2:	91 2c       	mov	r9, r1
   15cb4:	a1 2c       	mov	r10, r1
   15cb6:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3251
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15cb8:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3253
  {
    remote_tds_get_active(idx, &active);
   15cba:	be 01       	movw	r22, r28
   15cbc:	6f 5f       	subi	r22, 0xFF	; 255
   15cbe:	7f 4f       	sbci	r23, 0xFF	; 255
   15cc0:	81 2f       	mov	r24, r17
   15cc2:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3254
    if (active == 1)
   15cc6:	89 81       	ldd	r24, Y+1	; 0x01
   15cc8:	81 30       	cpi	r24, 0x01	; 1
   15cca:	61 f4       	brne	.+24     	; 0x15ce4 <main+0xd32>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3241
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   15ccc:	c5 01       	movw	r24, r10
   15cce:	b4 01       	movw	r22, r8
   15cd0:	0e 94 f1 90 	call	0x121e2	; 0x121e2 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
    if (last < 250)
   15cd4:	8a 3f       	cpi	r24, 0xFA	; 250
   15cd6:	08 f4       	brcc	.+2      	; 0x15cda <main+0xd28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
      last++;
   15cd8:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   15cda:	48 2f       	mov	r20, r24
   15cdc:	c5 01       	movw	r24, r10
   15cde:	b4 01       	movw	r22, r8
   15ce0:	0e 94 b5 90 	call	0x1216a	; 0x1216a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3251
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15ce4:	1f 5f       	subi	r17, 0xFF	; 255
   15ce6:	23 e0       	ldi	r18, 0x03	; 3
   15ce8:	82 0e       	add	r8, r18
   15cea:	91 1c       	adc	r9, r1
   15cec:	a1 1c       	adc	r10, r1
   15cee:	b1 1c       	adc	r11, r1
   15cf0:	34 e8       	ldi	r19, 0x84	; 132
   15cf2:	83 16       	cp	r8, r19
   15cf4:	91 04       	cpc	r9, r1
   15cf6:	a1 04       	cpc	r10, r1
   15cf8:	b1 04       	cpc	r11, r1
   15cfa:	f9 f6       	brne	.-66     	; 0x15cba <main+0xd08>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5136
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   15cfc:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15d00:	00 91 2e 11 	lds	r16, 0x112E	; 0x80112e <milis_05s>
   15d04:	10 91 2f 11 	lds	r17, 0x112F	; 0x80112f <milis_05s+0x1>
   15d08:	20 91 30 11 	lds	r18, 0x1130	; 0x801130 <milis_05s+0x2>
   15d0c:	30 91 31 11 	lds	r19, 0x1131	; 0x801131 <milis_05s+0x3>
   15d10:	60 1b       	sub	r22, r16
   15d12:	71 0b       	sbc	r23, r17
   15d14:	82 0b       	sbc	r24, r18
   15d16:	93 0b       	sbc	r25, r19
   15d18:	65 3f       	cpi	r22, 0xF5	; 245
   15d1a:	71 40       	sbci	r23, 0x01	; 1
   15d1c:	81 05       	cpc	r24, r1
   15d1e:	91 05       	cpc	r25, r1
   15d20:	08 f4       	brcc	.+2      	; 0x15d24 <main+0xd72>
   15d22:	bc c0       	rjmp	.+376    	; 0x15e9c <main+0xeea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5138
  {
    milis_05s = millis();
   15d24:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15d28:	60 93 2e 11 	sts	0x112E, r22	; 0x80112e <milis_05s>
   15d2c:	70 93 2f 11 	sts	0x112F, r23	; 0x80112f <milis_05s+0x1>
   15d30:	80 93 30 11 	sts	0x1130, r24	; 0x801130 <milis_05s+0x2>
   15d34:	90 93 31 11 	sts	0x1131, r25	; 0x801131 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   15d38:	88 e6       	ldi	r24, 0x68	; 104
   15d3a:	0e 94 41 8b 	call	0x11682	; 0x11682 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   15d3e:	60 e0       	ldi	r22, 0x00	; 0
   15d40:	80 e6       	ldi	r24, 0x60	; 96
   15d42:	9e e0       	ldi	r25, 0x0E	; 14
   15d44:	0e 94 42 87 	call	0x10e84	; 0x10e84 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   15d48:	80 e6       	ldi	r24, 0x60	; 96
   15d4a:	9e e0       	ldi	r25, 0x0E	; 14
   15d4c:	0e 94 bc 97 	call	0x12f78	; 0x12f78 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   15d50:	87 e0       	ldi	r24, 0x07	; 7
   15d52:	90 e0       	ldi	r25, 0x00	; 0
   15d54:	0e 94 7a 89 	call	0x112f4	; 0x112f4 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   15d58:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
   15d5c:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15d5e:	28 2f       	mov	r18, r24
   15d60:	30 e0       	ldi	r19, 0x00	; 0
   15d62:	94 e0       	ldi	r25, 0x04	; 4
   15d64:	35 95       	asr	r19
   15d66:	27 95       	ror	r18
   15d68:	9a 95       	dec	r25
   15d6a:	e1 f7       	brne	.-8      	; 0x15d64 <main+0xdb2>
   15d6c:	92 2f       	mov	r25, r18
   15d6e:	99 0f       	add	r25, r25
   15d70:	99 0f       	add	r25, r25
   15d72:	12 2f       	mov	r17, r18
   15d74:	19 1b       	sub	r17, r25
   15d76:	11 0f       	add	r17, r17
   15d78:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   15d7a:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15d7e:	9c 01       	movw	r18, r24
   15d80:	44 e0       	ldi	r20, 0x04	; 4
   15d82:	35 95       	asr	r19
   15d84:	27 95       	ror	r18
   15d86:	4a 95       	dec	r20
   15d88:	e1 f7       	brne	.-8      	; 0x15d82 <main+0xdd0>
   15d8a:	2f 70       	andi	r18, 0x0F	; 15
   15d8c:	33 27       	eor	r19, r19
   15d8e:	92 2f       	mov	r25, r18
   15d90:	99 0f       	add	r25, r25
   15d92:	99 0f       	add	r25, r25
   15d94:	02 2f       	mov	r16, r18
   15d96:	09 1b       	sub	r16, r25
   15d98:	00 0f       	add	r16, r16
   15d9a:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   15d9c:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15da0:	9c 01       	movw	r18, r24
   15da2:	54 e0       	ldi	r21, 0x04	; 4
   15da4:	35 95       	asr	r19
   15da6:	27 95       	ror	r18
   15da8:	5a 95       	dec	r21
   15daa:	e1 f7       	brne	.-8      	; 0x15da4 <main+0xdf2>
   15dac:	2f 70       	andi	r18, 0x0F	; 15
   15dae:	33 27       	eor	r19, r19
   15db0:	92 2f       	mov	r25, r18
   15db2:	99 0f       	add	r25, r25
   15db4:	99 0f       	add	r25, r25
   15db6:	b2 2e       	mov	r11, r18
   15db8:	b9 1a       	sub	r11, r25
   15dba:	bb 0c       	add	r11, r11
   15dbc:	b8 0e       	add	r11, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   15dbe:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   15dc2:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15dc6:	9c 01       	movw	r18, r24
   15dc8:	64 e0       	ldi	r22, 0x04	; 4
   15dca:	35 95       	asr	r19
   15dcc:	27 95       	ror	r18
   15dce:	6a 95       	dec	r22
   15dd0:	e1 f7       	brne	.-8      	; 0x15dca <main+0xe18>
   15dd2:	2f 70       	andi	r18, 0x0F	; 15
   15dd4:	33 27       	eor	r19, r19
   15dd6:	92 2f       	mov	r25, r18
   15dd8:	99 0f       	add	r25, r25
   15dda:	99 0f       	add	r25, r25
   15ddc:	a2 2e       	mov	r10, r18
   15dde:	a9 1a       	sub	r10, r25
   15de0:	aa 0c       	add	r10, r10
   15de2:	a8 0e       	add	r10, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   15de4:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15de8:	9c 01       	movw	r18, r24
   15dea:	74 e0       	ldi	r23, 0x04	; 4
   15dec:	35 95       	asr	r19
   15dee:	27 95       	ror	r18
   15df0:	7a 95       	dec	r23
   15df2:	e1 f7       	brne	.-8      	; 0x15dec <main+0xe3a>
   15df4:	2f 70       	andi	r18, 0x0F	; 15
   15df6:	33 27       	eor	r19, r19
   15df8:	92 2f       	mov	r25, r18
   15dfa:	99 0f       	add	r25, r25
   15dfc:	99 0f       	add	r25, r25
   15dfe:	92 2e       	mov	r9, r18
   15e00:	99 1a       	sub	r9, r25
   15e02:	99 0c       	add	r9, r9
   15e04:	98 0e       	add	r9, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   15e06:	0e 94 80 85 	call	0x10b00	; 0x10b00 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15e0a:	9c 01       	movw	r18, r24
   15e0c:	e4 e0       	ldi	r30, 0x04	; 4
   15e0e:	35 95       	asr	r19
   15e10:	27 95       	ror	r18
   15e12:	ea 95       	dec	r30
   15e14:	e1 f7       	brne	.-8      	; 0x15e0e <main+0xe5c>
   15e16:	2f 70       	andi	r18, 0x0F	; 15
   15e18:	33 27       	eor	r19, r19
   15e1a:	92 2f       	mov	r25, r18
   15e1c:	99 0f       	add	r25, r25
   15e1e:	99 0f       	add	r25, r25
   15e20:	29 1b       	sub	r18, r25
   15e22:	22 0f       	add	r18, r18
   15e24:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   15e26:	80 93 b1 10 	sts	0x10B1, r24	; 0x8010b1 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5139
    now = rtc.now();
   15e2a:	90 92 b2 10 	sts	0x10B2, r9	; 0x8010b2 <now+0x1>
   15e2e:	a0 92 b3 10 	sts	0x10B3, r10	; 0x8010b3 <now+0x2>
   15e32:	b0 92 b4 10 	sts	0x10B4, r11	; 0x8010b4 <now+0x3>
   15e36:	00 93 b5 10 	sts	0x10B5, r16	; 0x8010b5 <now+0x4>
   15e3a:	10 93 b6 10 	sts	0x10B6, r17	; 0x8010b6 <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   15e3e:	0e 94 19 98 	call	0x13032	; 0x13032 <RTC_DS1307::isrunning() [clone .constprop.127]>
   15e42:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <selftest_data>
   15e46:	81 11       	cpse	r24, r1
   15e48:	bf c0       	rjmp	.+382    	; 0x15fc8 <main+0x1016>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
    sbi(selftest_data, SELFTEST_ERR_RTC);
   15e4a:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   15e4c:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5141
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   15e50:	81 e0       	ldi	r24, 0x01	; 1
   15e52:	80 93 3c 0b 	sts	0x0B3C, r24	; 0x800b3c <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5744
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   15e56:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5743

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   15e58:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15e5a:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5747
  {
    remote_tds_get_active(idx, &active);
   15e5c:	be 01       	movw	r22, r28
   15e5e:	6f 5f       	subi	r22, 0xFF	; 255
   15e60:	7f 4f       	sbci	r23, 0xFF	; 255
   15e62:	81 2f       	mov	r24, r17
   15e64:	0e 94 3f 62 	call	0xc47e	; 0xc47e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5748
    if (active == 1) cnt++;
   15e68:	89 81       	ldd	r24, Y+1	; 0x01
   15e6a:	81 30       	cpi	r24, 0x01	; 1
   15e6c:	09 f4       	brne	.+2      	; 0x15e70 <main+0xebe>
   15e6e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15e70:	1f 5f       	subi	r17, 0xFF	; 255
   15e72:	1a 30       	cpi	r17, 0x0A	; 10
   15e74:	99 f7       	brne	.-26     	; 0x15e5c <main+0xeaa>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5144
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   15e76:	00 93 3b 0b 	sts	0x0B3B, r16	; 0x800b3b <use_rtds>
   15e7a:	08 ec       	ldi	r16, 0xC8	; 200
   15e7c:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   15e7e:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   15e80:	c8 01       	movw	r24, r16
   15e82:	0e 94 74 9d 	call	0x13ae8	; 0x13ae8 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   15e86:	81 30       	cpi	r24, 0x01	; 1
   15e88:	09 f4       	brne	.+2      	; 0x15e8c <main+0xeda>
   15e8a:	b3 94       	inc	r11
   15e8c:	0a 5e       	subi	r16, 0xEA	; 234
   15e8e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   15e90:	0c 34       	cpi	r16, 0x4C	; 76
   15e92:	51 e0       	ldi	r21, 0x01	; 1
   15e94:	15 07       	cpc	r17, r21
   15e96:	a1 f7       	brne	.-24     	; 0x15e80 <main+0xece>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5145
    use_tds = count_use_tds();
   15e98:	b0 92 3a 0b 	sts	0x0B3A, r11	; 0x800b3a <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   15e9c:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15ea0:	00 91 2a 11 	lds	r16, 0x112A	; 0x80112a <milis_005s>
   15ea4:	10 91 2b 11 	lds	r17, 0x112B	; 0x80112b <milis_005s+0x1>
   15ea8:	20 91 2c 11 	lds	r18, 0x112C	; 0x80112c <milis_005s+0x2>
   15eac:	30 91 2d 11 	lds	r19, 0x112D	; 0x80112d <milis_005s+0x3>
   15eb0:	60 1b       	sub	r22, r16
   15eb2:	71 0b       	sbc	r23, r17
   15eb4:	82 0b       	sbc	r24, r18
   15eb6:	93 0b       	sbc	r25, r19
   15eb8:	63 33       	cpi	r22, 0x33	; 51
   15eba:	71 05       	cpc	r23, r1
   15ebc:	81 05       	cpc	r24, r1
   15ebe:	91 05       	cpc	r25, r1
   15ec0:	90 f1       	brcs	.+100    	; 0x15f26 <main+0xf74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
  {
    milis_005s = millis();
   15ec2:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15ec6:	60 93 2a 11 	sts	0x112A, r22	; 0x80112a <milis_005s>
   15eca:	70 93 2b 11 	sts	0x112B, r23	; 0x80112b <milis_005s+0x1>
   15ece:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <milis_005s+0x2>
   15ed2:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5159

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   15ed6:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <a2d_run_now>
   15eda:	81 30       	cpi	r24, 0x01	; 1
   15edc:	21 f5       	brne	.+72     	; 0x15f26 <main+0xf74>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   15ede:	30 91 35 0b 	lds	r19, 0x0B35	; 0x800b35 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15ee2:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <a2d_index>
   15ee6:	90 e0       	ldi	r25, 0x00	; 0
   15ee8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   15eea:	61 e0       	ldi	r22, 0x01	; 1
   15eec:	70 e0       	ldi	r23, 0x00	; 0
   15eee:	ab 01       	movw	r20, r22
   15ef0:	08 2e       	mov	r0, r24
   15ef2:	01 c0       	rjmp	.+2      	; 0x15ef6 <main+0xf44>
   15ef4:	44 0f       	add	r20, r20
   15ef6:	0a 94       	dec	r0
   15ef8:	ea f7       	brpl	.-6      	; 0x15ef4 <main+0xf42>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   15efa:	e3 2f       	mov	r30, r19
   15efc:	e4 23       	and	r30, r20
   15efe:	09 f4       	brne	.+2      	; 0x15f02 <main+0xf50>
   15f00:	65 c0       	rjmp	.+202    	; 0x15fcc <main+0x101a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15f02:	e2 2f       	mov	r30, r18
   15f04:	e4 23       	and	r30, r20
   15f06:	09 f0       	breq	.+2      	; 0x15f0a <main+0xf58>
   15f08:	61 c0       	rjmp	.+194    	; 0x15fcc <main+0x101a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   15f0a:	24 2b       	or	r18, r20
   15f0c:	20 93 36 0b 	sts	0x0B36, r18	; 0x800b36 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   15f10:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5162
    {
      a2d_start_process();
      a2d_run_now = 0;
   15f14:	10 92 39 0b 	sts	0x0B39, r1	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5163
      if (a2d_done() == 0) a2d_run_now = 1;
   15f18:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <a2d_index>
   15f1c:	81 11       	cpse	r24, r1
   15f1e:	03 c0       	rjmp	.+6      	; 0x15f26 <main+0xf74>
   15f20:	81 e0       	ldi	r24, 0x01	; 1
   15f22:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5167
    }
  }

  load = millis() - load_now;
   15f26:	0e 94 48 93 	call	0x12690	; 0x12690 <millis>
   15f2a:	dc 01       	movw	r26, r24
   15f2c:	cb 01       	movw	r24, r22
   15f2e:	8c 19       	sub	r24, r12
   15f30:	9d 09       	sbc	r25, r13
   15f32:	ae 09       	sbc	r26, r14
   15f34:	bf 09       	sbc	r27, r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5168
  if (load < load_min) load_min = load;
   15f36:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   15f3a:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   15f3e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   15f42:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   15f46:	80 17       	cp	r24, r16
   15f48:	91 07       	cpc	r25, r17
   15f4a:	a2 07       	cpc	r26, r18
   15f4c:	b3 07       	cpc	r27, r19
   15f4e:	40 f4       	brcc	.+16     	; 0x15f60 <main+0xfae>
   15f50:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   15f54:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   15f58:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   15f5c:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5169
  if (load > load_max) load_max = load;
   15f60:	00 91 26 11 	lds	r16, 0x1126	; 0x801126 <load_max>
   15f64:	10 91 27 11 	lds	r17, 0x1127	; 0x801127 <load_max+0x1>
   15f68:	20 91 28 11 	lds	r18, 0x1128	; 0x801128 <load_max+0x2>
   15f6c:	30 91 29 11 	lds	r19, 0x1129	; 0x801129 <load_max+0x3>
   15f70:	08 17       	cp	r16, r24
   15f72:	19 07       	cpc	r17, r25
   15f74:	2a 07       	cpc	r18, r26
   15f76:	3b 07       	cpc	r19, r27
   15f78:	40 f4       	brcc	.+16     	; 0x15f8a <main+0xfd8>
   15f7a:	80 93 26 11 	sts	0x1126, r24	; 0x801126 <load_max>
   15f7e:	90 93 27 11 	sts	0x1127, r25	; 0x801127 <load_max+0x1>
   15f82:	a0 93 28 11 	sts	0x1128, r26	; 0x801128 <load_max+0x2>
   15f86:	b0 93 29 11 	sts	0x1129, r27	; 0x801129 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   15f8a:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <light_curr>
   15f8e:	90 91 38 0b 	lds	r25, 0x0B38	; 0x800b38 <light_curr+0x1>
   15f92:	20 91 24 11 	lds	r18, 0x1124	; 0x801124 <light_min>
   15f96:	30 91 25 11 	lds	r19, 0x1125	; 0x801125 <light_min+0x1>
   15f9a:	82 17       	cp	r24, r18
   15f9c:	93 07       	cpc	r25, r19
   15f9e:	20 f4       	brcc	.+8      	; 0x15fa8 <main+0xff6>
   15fa0:	90 93 25 11 	sts	0x1125, r25	; 0x801125 <light_min+0x1>
   15fa4:	80 93 24 11 	sts	0x1124, r24	; 0x801124 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
  if (light_curr > light_max) light_max = light_curr;
   15fa8:	20 91 22 11 	lds	r18, 0x1122	; 0x801122 <light_max>
   15fac:	30 91 23 11 	lds	r19, 0x1123	; 0x801123 <light_max+0x1>
   15fb0:	28 17       	cp	r18, r24
   15fb2:	39 07       	cpc	r19, r25
   15fb4:	20 f4       	brcc	.+8      	; 0x15fbe <main+0x100c>
   15fb6:	90 93 23 11 	sts	0x1123, r25	; 0x801123 <light_max+0x1>
   15fba:	80 93 22 11 	sts	0x1122, r24	; 0x801122 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   15fbe:	0e 94 6b 86 	call	0x10cd6	; 0x10cd6 <serialEventRun()>
   15fc2:	62 c8       	rjmp	.-3900   	; 0x15088 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   15fc4:	13 8e       	std	Z+27, r1	; 0x1b
   15fc6:	63 ce       	rjmp	.-826    	; 0x15c8e <main+0xcdc>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   15fc8:	9e 7f       	andi	r25, 0xFE	; 254
   15fca:	40 cf       	rjmp	.-384    	; 0x15e4c <main+0xe9a>
   15fcc:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   15fce:	88 30       	cpi	r24, 0x08	; 8
   15fd0:	91 05       	cpc	r25, r1
   15fd2:	09 f0       	breq	.+2      	; 0x15fd6 <main+0x1024>
   15fd4:	8c cf       	rjmp	.-232    	; 0x15eee <main+0xf3c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   15fd6:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <a2d_index>
   15fda:	9c cf       	rjmp	.-200    	; 0x15f14 <main+0xf62>

00015fdc <dtostrf>:
dtostrf():
   15fdc:	ef 92       	push	r14
   15fde:	0f 93       	push	r16
   15fe0:	1f 93       	push	r17
   15fe2:	cf 93       	push	r28
   15fe4:	df 93       	push	r29
   15fe6:	e8 01       	movw	r28, r16
   15fe8:	34 e0       	ldi	r19, 0x04	; 4
   15fea:	47 fd       	sbrc	r20, 7
   15fec:	34 e1       	ldi	r19, 0x14	; 20
   15fee:	04 2e       	mov	r0, r20
   15ff0:	00 0c       	add	r0, r0
   15ff2:	55 0b       	sbc	r21, r21
   15ff4:	57 ff       	sbrs	r21, 7
   15ff6:	03 c0       	rjmp	.+6      	; 0x15ffe <dtostrf+0x22>
   15ff8:	51 95       	neg	r21
   15ffa:	41 95       	neg	r20
   15ffc:	51 09       	sbc	r21, r1
   15ffe:	e3 2e       	mov	r14, r19
   16000:	02 2f       	mov	r16, r18
   16002:	24 2f       	mov	r18, r20
   16004:	ae 01       	movw	r20, r28
   16006:	0e 94 18 b4 	call	0x16830	; 0x16830 <dtoa_prf>
   1600a:	ce 01       	movw	r24, r28
   1600c:	df 91       	pop	r29
   1600e:	cf 91       	pop	r28
   16010:	1f 91       	pop	r17
   16012:	0f 91       	pop	r16
   16014:	ef 90       	pop	r14
   16016:	08 95       	ret

00016018 <strtoul>:
strtoul():
   16018:	3f 92       	push	r3
   1601a:	4f 92       	push	r4
   1601c:	5f 92       	push	r5
   1601e:	6f 92       	push	r6
   16020:	7f 92       	push	r7
   16022:	8f 92       	push	r8
   16024:	9f 92       	push	r9
   16026:	af 92       	push	r10
   16028:	bf 92       	push	r11
   1602a:	cf 92       	push	r12
   1602c:	df 92       	push	r13
   1602e:	ef 92       	push	r14
   16030:	ff 92       	push	r15
   16032:	0f 93       	push	r16
   16034:	1f 93       	push	r17
   16036:	cf 93       	push	r28
   16038:	df 93       	push	r29
   1603a:	5c 01       	movw	r10, r24
   1603c:	6b 01       	movw	r12, r22
   1603e:	7a 01       	movw	r14, r20
   16040:	61 15       	cp	r22, r1
   16042:	71 05       	cpc	r23, r1
   16044:	19 f0       	breq	.+6      	; 0x1604c <strtoul+0x34>
   16046:	fb 01       	movw	r30, r22
   16048:	91 83       	std	Z+1, r25	; 0x01
   1604a:	80 83       	st	Z, r24
   1604c:	e1 14       	cp	r14, r1
   1604e:	f1 04       	cpc	r15, r1
   16050:	49 f0       	breq	.+18     	; 0x16064 <strtoul+0x4c>
   16052:	c7 01       	movw	r24, r14
   16054:	02 97       	sbiw	r24, 0x02	; 2
   16056:	83 97       	sbiw	r24, 0x23	; 35
   16058:	28 f0       	brcs	.+10     	; 0x16064 <strtoul+0x4c>
   1605a:	60 e0       	ldi	r22, 0x00	; 0
   1605c:	70 e0       	ldi	r23, 0x00	; 0
   1605e:	cb 01       	movw	r24, r22
   16060:	9b c0       	rjmp	.+310    	; 0x16198 <strtoul+0x180>
   16062:	5e 01       	movw	r10, r28
   16064:	e5 01       	movw	r28, r10
   16066:	21 96       	adiw	r28, 0x01	; 1
   16068:	f5 01       	movw	r30, r10
   1606a:	10 81       	ld	r17, Z
   1606c:	81 2f       	mov	r24, r17
   1606e:	90 e0       	ldi	r25, 0x00	; 0
   16070:	0e 94 31 b1 	call	0x16262	; 0x16262 <isspace>
   16074:	89 2b       	or	r24, r25
   16076:	a9 f7       	brne	.-22     	; 0x16062 <strtoul+0x4a>
   16078:	1d 32       	cpi	r17, 0x2D	; 45
   1607a:	09 f0       	breq	.+2      	; 0x1607e <strtoul+0x66>
   1607c:	5c c0       	rjmp	.+184    	; 0x16136 <strtoul+0x11e>
   1607e:	21 96       	adiw	r28, 0x01	; 1
   16080:	f5 01       	movw	r30, r10
   16082:	11 81       	ldd	r17, Z+1	; 0x01
   16084:	01 e0       	ldi	r16, 0x01	; 1
   16086:	e1 14       	cp	r14, r1
   16088:	f1 04       	cpc	r15, r1
   1608a:	09 f4       	brne	.+2      	; 0x1608e <strtoul+0x76>
   1608c:	bb c0       	rjmp	.+374    	; 0x16204 <strtoul+0x1ec>
   1608e:	f0 e1       	ldi	r31, 0x10	; 16
   16090:	ef 16       	cp	r14, r31
   16092:	f1 04       	cpc	r15, r1
   16094:	09 f0       	breq	.+2      	; 0x16098 <strtoul+0x80>
   16096:	9b c0       	rjmp	.+310    	; 0x161ce <strtoul+0x1b6>
   16098:	10 33       	cpi	r17, 0x30	; 48
   1609a:	41 f4       	brne	.+16     	; 0x160ac <strtoul+0x94>
   1609c:	88 81       	ld	r24, Y
   1609e:	8f 7d       	andi	r24, 0xDF	; 223
   160a0:	88 35       	cpi	r24, 0x58	; 88
   160a2:	09 f0       	breq	.+2      	; 0x160a6 <strtoul+0x8e>
   160a4:	8f c0       	rjmp	.+286    	; 0x161c4 <strtoul+0x1ac>
   160a6:	19 81       	ldd	r17, Y+1	; 0x01
   160a8:	22 96       	adiw	r28, 0x02	; 2
   160aa:	02 60       	ori	r16, 0x02	; 2
   160ac:	e0 e1       	ldi	r30, 0x10	; 16
   160ae:	ee 2e       	mov	r14, r30
   160b0:	f1 2c       	mov	r15, r1
   160b2:	88 24       	eor	r8, r8
   160b4:	8a 94       	dec	r8
   160b6:	98 2c       	mov	r9, r8
   160b8:	a8 2c       	mov	r10, r8
   160ba:	ff e0       	ldi	r31, 0x0F	; 15
   160bc:	bf 2e       	mov	r11, r31
   160be:	20 e0       	ldi	r18, 0x00	; 0
   160c0:	60 e0       	ldi	r22, 0x00	; 0
   160c2:	70 e0       	ldi	r23, 0x00	; 0
   160c4:	cb 01       	movw	r24, r22
   160c6:	27 01       	movw	r4, r14
   160c8:	0f 2c       	mov	r0, r15
   160ca:	00 0c       	add	r0, r0
   160cc:	66 08       	sbc	r6, r6
   160ce:	77 08       	sbc	r7, r7
   160d0:	fe 01       	movw	r30, r28
   160d2:	50 ed       	ldi	r21, 0xD0	; 208
   160d4:	35 2e       	mov	r3, r21
   160d6:	31 0e       	add	r3, r17
   160d8:	39 e0       	ldi	r19, 0x09	; 9
   160da:	33 15       	cp	r19, r3
   160dc:	68 f4       	brcc	.+26     	; 0x160f8 <strtoul+0xe0>
   160de:	3f eb       	ldi	r19, 0xBF	; 191
   160e0:	31 0f       	add	r19, r17
   160e2:	49 ec       	ldi	r20, 0xC9	; 201
   160e4:	34 2e       	mov	r3, r20
   160e6:	3a 31       	cpi	r19, 0x1A	; 26
   160e8:	30 f0       	brcs	.+12     	; 0x160f6 <strtoul+0xde>
   160ea:	3f e9       	ldi	r19, 0x9F	; 159
   160ec:	31 0f       	add	r19, r17
   160ee:	3a 31       	cpi	r19, 0x1A	; 26
   160f0:	b0 f5       	brcc	.+108    	; 0x1615e <strtoul+0x146>
   160f2:	39 ea       	ldi	r19, 0xA9	; 169
   160f4:	33 2e       	mov	r3, r19
   160f6:	31 0e       	add	r3, r17
   160f8:	3e 14       	cp	r3, r14
   160fa:	1f 04       	cpc	r1, r15
   160fc:	84 f5       	brge	.+96     	; 0x1615e <strtoul+0x146>
   160fe:	2f 3f       	cpi	r18, 0xFF	; 255
   16100:	b9 f0       	breq	.+46     	; 0x16130 <strtoul+0x118>
   16102:	86 16       	cp	r8, r22
   16104:	97 06       	cpc	r9, r23
   16106:	a8 06       	cpc	r10, r24
   16108:	b9 06       	cpc	r11, r25
   1610a:	38 f1       	brcs	.+78     	; 0x1615a <strtoul+0x142>
   1610c:	a3 01       	movw	r20, r6
   1610e:	92 01       	movw	r18, r4
   16110:	0e 94 fc ba 	call	0x175f8	; 0x175f8 <__mulsi3>
   16114:	23 2d       	mov	r18, r3
   16116:	30 e0       	ldi	r19, 0x00	; 0
   16118:	50 e0       	ldi	r21, 0x00	; 0
   1611a:	40 e0       	ldi	r20, 0x00	; 0
   1611c:	62 0f       	add	r22, r18
   1611e:	73 1f       	adc	r23, r19
   16120:	84 1f       	adc	r24, r20
   16122:	95 1f       	adc	r25, r21
   16124:	62 17       	cp	r22, r18
   16126:	73 07       	cpc	r23, r19
   16128:	84 07       	cpc	r24, r20
   1612a:	95 07       	cpc	r25, r21
   1612c:	b0 f0       	brcs	.+44     	; 0x1615a <strtoul+0x142>
   1612e:	21 e0       	ldi	r18, 0x01	; 1
   16130:	21 96       	adiw	r28, 0x01	; 1
   16132:	10 81       	ld	r17, Z
   16134:	cd cf       	rjmp	.-102    	; 0x160d0 <strtoul+0xb8>
   16136:	1b 32       	cpi	r17, 0x2B	; 43
   16138:	21 f4       	brne	.+8      	; 0x16142 <strtoul+0x12a>
   1613a:	e5 01       	movw	r28, r10
   1613c:	22 96       	adiw	r28, 0x02	; 2
   1613e:	f5 01       	movw	r30, r10
   16140:	11 81       	ldd	r17, Z+1	; 0x01
   16142:	00 e0       	ldi	r16, 0x00	; 0
   16144:	a0 cf       	rjmp	.-192    	; 0x16086 <strtoul+0x6e>
   16146:	78 e0       	ldi	r23, 0x08	; 8
   16148:	e7 2e       	mov	r14, r23
   1614a:	f1 2c       	mov	r15, r1
   1614c:	88 24       	eor	r8, r8
   1614e:	8a 94       	dec	r8
   16150:	98 2c       	mov	r9, r8
   16152:	a8 2c       	mov	r10, r8
   16154:	6f e1       	ldi	r22, 0x1F	; 31
   16156:	b6 2e       	mov	r11, r22
   16158:	b2 cf       	rjmp	.-156    	; 0x160be <strtoul+0xa6>
   1615a:	2f ef       	ldi	r18, 0xFF	; 255
   1615c:	e9 cf       	rjmp	.-46     	; 0x16130 <strtoul+0x118>
   1615e:	c1 14       	cp	r12, r1
   16160:	d1 04       	cpc	r13, r1
   16162:	31 f0       	breq	.+12     	; 0x16170 <strtoul+0x158>
   16164:	22 23       	and	r18, r18
   16166:	51 f1       	breq	.+84     	; 0x161bc <strtoul+0x1a4>
   16168:	21 97       	sbiw	r28, 0x01	; 1
   1616a:	f6 01       	movw	r30, r12
   1616c:	d1 83       	std	Z+1, r29	; 0x01
   1616e:	c0 83       	st	Z, r28
   16170:	00 ff       	sbrs	r16, 0
   16172:	07 c0       	rjmp	.+14     	; 0x16182 <strtoul+0x16a>
   16174:	90 95       	com	r25
   16176:	80 95       	com	r24
   16178:	70 95       	com	r23
   1617a:	61 95       	neg	r22
   1617c:	7f 4f       	sbci	r23, 0xFF	; 255
   1617e:	8f 4f       	sbci	r24, 0xFF	; 255
   16180:	9f 4f       	sbci	r25, 0xFF	; 255
   16182:	2f 3f       	cpi	r18, 0xFF	; 255
   16184:	49 f4       	brne	.+18     	; 0x16198 <strtoul+0x180>
   16186:	82 e2       	ldi	r24, 0x22	; 34
   16188:	90 e0       	ldi	r25, 0x00	; 0
   1618a:	90 93 a3 13 	sts	0x13A3, r25	; 0x8013a3 <errno+0x1>
   1618e:	80 93 a2 13 	sts	0x13A2, r24	; 0x8013a2 <errno>
   16192:	6f ef       	ldi	r22, 0xFF	; 255
   16194:	7f ef       	ldi	r23, 0xFF	; 255
   16196:	cb 01       	movw	r24, r22
   16198:	df 91       	pop	r29
   1619a:	cf 91       	pop	r28
   1619c:	1f 91       	pop	r17
   1619e:	0f 91       	pop	r16
   161a0:	ff 90       	pop	r15
   161a2:	ef 90       	pop	r14
   161a4:	df 90       	pop	r13
   161a6:	cf 90       	pop	r12
   161a8:	bf 90       	pop	r11
   161aa:	af 90       	pop	r10
   161ac:	9f 90       	pop	r9
   161ae:	8f 90       	pop	r8
   161b0:	7f 90       	pop	r7
   161b2:	6f 90       	pop	r6
   161b4:	5f 90       	pop	r5
   161b6:	4f 90       	pop	r4
   161b8:	3f 90       	pop	r3
   161ba:	08 95       	ret
   161bc:	01 ff       	sbrs	r16, 1
   161be:	d8 cf       	rjmp	.-80     	; 0x16170 <strtoul+0x158>
   161c0:	22 97       	sbiw	r28, 0x02	; 2
   161c2:	d3 cf       	rjmp	.-90     	; 0x1616a <strtoul+0x152>
   161c4:	10 e3       	ldi	r17, 0x30	; 48
   161c6:	e1 14       	cp	r14, r1
   161c8:	f1 04       	cpc	r15, r1
   161ca:	09 f4       	brne	.+2      	; 0x161ce <strtoul+0x1b6>
   161cc:	bc cf       	rjmp	.-136    	; 0x16146 <strtoul+0x12e>
   161ce:	3a e0       	ldi	r19, 0x0A	; 10
   161d0:	e3 16       	cp	r14, r19
   161d2:	f1 04       	cpc	r15, r1
   161d4:	e9 f0       	breq	.+58     	; 0x16210 <strtoul+0x1f8>
   161d6:	80 e1       	ldi	r24, 0x10	; 16
   161d8:	e8 16       	cp	r14, r24
   161da:	f1 04       	cpc	r15, r1
   161dc:	09 f4       	brne	.+2      	; 0x161e0 <strtoul+0x1c8>
   161de:	66 cf       	rjmp	.-308    	; 0x160ac <strtoul+0x94>
   161e0:	e8 e0       	ldi	r30, 0x08	; 8
   161e2:	ee 16       	cp	r14, r30
   161e4:	f1 04       	cpc	r15, r1
   161e6:	09 f4       	brne	.+2      	; 0x161ea <strtoul+0x1d2>
   161e8:	b1 cf       	rjmp	.-158    	; 0x1614c <strtoul+0x134>
   161ea:	6f ef       	ldi	r22, 0xFF	; 255
   161ec:	7f ef       	ldi	r23, 0xFF	; 255
   161ee:	cb 01       	movw	r24, r22
   161f0:	97 01       	movw	r18, r14
   161f2:	0f 2c       	mov	r0, r15
   161f4:	00 0c       	add	r0, r0
   161f6:	44 0b       	sbc	r20, r20
   161f8:	55 0b       	sbc	r21, r21
   161fa:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
   161fe:	49 01       	movw	r8, r18
   16200:	5a 01       	movw	r10, r20
   16202:	5d cf       	rjmp	.-326    	; 0x160be <strtoul+0xa6>
   16204:	10 33       	cpi	r17, 0x30	; 48
   16206:	09 f4       	brne	.+2      	; 0x1620a <strtoul+0x1f2>
   16208:	49 cf       	rjmp	.-366    	; 0x1609c <strtoul+0x84>
   1620a:	9a e0       	ldi	r25, 0x0A	; 10
   1620c:	e9 2e       	mov	r14, r25
   1620e:	f1 2c       	mov	r15, r1
   16210:	89 e9       	ldi	r24, 0x99	; 153
   16212:	88 2e       	mov	r8, r24
   16214:	98 2c       	mov	r9, r8
   16216:	a8 2c       	mov	r10, r8
   16218:	89 e1       	ldi	r24, 0x19	; 25
   1621a:	b8 2e       	mov	r11, r24
   1621c:	50 cf       	rjmp	.-352    	; 0x160be <strtoul+0xa6>

0001621e <atof>:
atof():
   1621e:	66 27       	eor	r22, r22
   16220:	77 27       	eor	r23, r23
   16222:	0c 94 b6 b6 	jmp	0x16d6c	; 0x16d6c <strtod>

00016226 <atoi>:
atoi():
   16226:	fc 01       	movw	r30, r24
   16228:	88 27       	eor	r24, r24
   1622a:	99 27       	eor	r25, r25
   1622c:	e8 94       	clt
   1622e:	21 91       	ld	r18, Z+
   16230:	20 32       	cpi	r18, 0x20	; 32
   16232:	e9 f3       	breq	.-6      	; 0x1622e <atoi+0x8>
   16234:	29 30       	cpi	r18, 0x09	; 9
   16236:	10 f0       	brcs	.+4      	; 0x1623c <atoi+0x16>
   16238:	2e 30       	cpi	r18, 0x0E	; 14
   1623a:	c8 f3       	brcs	.-14     	; 0x1622e <atoi+0x8>
   1623c:	2b 32       	cpi	r18, 0x2B	; 43
   1623e:	41 f0       	breq	.+16     	; 0x16250 <atoi+0x2a>
   16240:	2d 32       	cpi	r18, 0x2D	; 45
   16242:	39 f4       	brne	.+14     	; 0x16252 <atoi+0x2c>
   16244:	68 94       	set
   16246:	04 c0       	rjmp	.+8      	; 0x16250 <atoi+0x2a>
   16248:	0e 94 8d b1 	call	0x1631a	; 0x1631a <__mulhi_const_10>
   1624c:	82 0f       	add	r24, r18
   1624e:	91 1d       	adc	r25, r1
   16250:	21 91       	ld	r18, Z+
   16252:	20 53       	subi	r18, 0x30	; 48
   16254:	2a 30       	cpi	r18, 0x0A	; 10
   16256:	c0 f3       	brcs	.-16     	; 0x16248 <atoi+0x22>
   16258:	1e f4       	brtc	.+6      	; 0x16260 <atoi+0x3a>
   1625a:	90 95       	com	r25
   1625c:	81 95       	neg	r24
   1625e:	9f 4f       	sbci	r25, 0xFF	; 255
   16260:	08 95       	ret

00016262 <isspace>:
isspace():
   16262:	91 11       	cpse	r25, r1
   16264:	0c 94 ec b8 	jmp	0x171d8	; 0x171d8 <__ctype_isfalse>
   16268:	80 32       	cpi	r24, 0x20	; 32
   1626a:	19 f0       	breq	.+6      	; 0x16272 <isspace+0x10>
   1626c:	89 50       	subi	r24, 0x09	; 9
   1626e:	85 50       	subi	r24, 0x05	; 5
   16270:	c8 f7       	brcc	.-14     	; 0x16264 <isspace+0x2>
   16272:	08 95       	ret

00016274 <strcat_P>:
strcat_P():
   16274:	fb 01       	movw	r30, r22
   16276:	dc 01       	movw	r26, r24
   16278:	0d 90       	ld	r0, X+
   1627a:	00 20       	and	r0, r0
   1627c:	e9 f7       	brne	.-6      	; 0x16278 <strcat_P+0x4>
   1627e:	11 97       	sbiw	r26, 0x01	; 1
   16280:	05 90       	lpm	r0, Z+
   16282:	0d 92       	st	X+, r0
   16284:	00 20       	and	r0, r0
   16286:	e1 f7       	brne	.-8      	; 0x16280 <strcat_P+0xc>
   16288:	08 95       	ret

0001628a <strcpy_P>:
strcpy_P():
   1628a:	fb 01       	movw	r30, r22
   1628c:	dc 01       	movw	r26, r24
   1628e:	05 90       	lpm	r0, Z+
   16290:	0d 92       	st	X+, r0
   16292:	00 20       	and	r0, r0
   16294:	e1 f7       	brne	.-8      	; 0x1628e <strcpy_P+0x4>
   16296:	08 95       	ret

00016298 <strtok>:
strtok():
   16298:	4a e8       	ldi	r20, 0x8A	; 138
   1629a:	53 e1       	ldi	r21, 0x13	; 19
   1629c:	0c 94 50 b1 	jmp	0x162a0	; 0x162a0 <strtok_r>

000162a0 <strtok_r>:
strtok_r():
   162a0:	fa 01       	movw	r30, r20
   162a2:	a1 91       	ld	r26, Z+
   162a4:	b0 81       	ld	r27, Z
   162a6:	00 97       	sbiw	r24, 0x00	; 0
   162a8:	19 f4       	brne	.+6      	; 0x162b0 <strtok_r+0x10>
   162aa:	10 97       	sbiw	r26, 0x00	; 0
   162ac:	e1 f0       	breq	.+56     	; 0x162e6 <strtok_r+0x46>
   162ae:	cd 01       	movw	r24, r26
   162b0:	dc 01       	movw	r26, r24
   162b2:	cd 01       	movw	r24, r26
   162b4:	0d 90       	ld	r0, X+
   162b6:	00 20       	and	r0, r0
   162b8:	11 f4       	brne	.+4      	; 0x162be <strtok_r+0x1e>
   162ba:	c0 01       	movw	r24, r0
   162bc:	13 c0       	rjmp	.+38     	; 0x162e4 <strtok_r+0x44>
   162be:	fb 01       	movw	r30, r22
   162c0:	21 91       	ld	r18, Z+
   162c2:	22 23       	and	r18, r18
   162c4:	19 f0       	breq	.+6      	; 0x162cc <strtok_r+0x2c>
   162c6:	20 15       	cp	r18, r0
   162c8:	d9 f7       	brne	.-10     	; 0x162c0 <strtok_r+0x20>
   162ca:	f3 cf       	rjmp	.-26     	; 0x162b2 <strtok_r+0x12>
   162cc:	fb 01       	movw	r30, r22
   162ce:	21 91       	ld	r18, Z+
   162d0:	20 15       	cp	r18, r0
   162d2:	19 f4       	brne	.+6      	; 0x162da <strtok_r+0x3a>
   162d4:	1e 92       	st	-X, r1
   162d6:	11 96       	adiw	r26, 0x01	; 1
   162d8:	06 c0       	rjmp	.+12     	; 0x162e6 <strtok_r+0x46>
   162da:	22 23       	and	r18, r18
   162dc:	c1 f7       	brne	.-16     	; 0x162ce <strtok_r+0x2e>
   162de:	0d 90       	ld	r0, X+
   162e0:	00 20       	and	r0, r0
   162e2:	a1 f7       	brne	.-24     	; 0x162cc <strtok_r+0x2c>
   162e4:	d0 01       	movw	r26, r0
   162e6:	fa 01       	movw	r30, r20
   162e8:	a1 93       	st	Z+, r26
   162ea:	b0 83       	st	Z, r27
   162ec:	08 95       	ret

000162ee <itoa>:
itoa():
   162ee:	45 32       	cpi	r20, 0x25	; 37
   162f0:	51 05       	cpc	r21, r1
   162f2:	20 f4       	brcc	.+8      	; 0x162fc <itoa+0xe>
   162f4:	42 30       	cpi	r20, 0x02	; 2
   162f6:	10 f0       	brcs	.+4      	; 0x162fc <itoa+0xe>
   162f8:	0c 94 82 b1 	jmp	0x16304	; 0x16304 <__itoa_ncheck>
   162fc:	fb 01       	movw	r30, r22
   162fe:	10 82       	st	Z, r1
   16300:	cb 01       	movw	r24, r22
   16302:	08 95       	ret

00016304 <__itoa_ncheck>:
__itoa_ncheck():
   16304:	bb 27       	eor	r27, r27
   16306:	4a 30       	cpi	r20, 0x0A	; 10
   16308:	31 f4       	brne	.+12     	; 0x16316 <__itoa_ncheck+0x12>
   1630a:	99 23       	and	r25, r25
   1630c:	22 f4       	brpl	.+8      	; 0x16316 <__itoa_ncheck+0x12>
   1630e:	bd e2       	ldi	r27, 0x2D	; 45
   16310:	90 95       	com	r25
   16312:	81 95       	neg	r24
   16314:	9f 4f       	sbci	r25, 0xFF	; 255
   16316:	0c 94 96 b1 	jmp	0x1632c	; 0x1632c <__utoa_common>

0001631a <__mulhi_const_10>:
__mulhi_const_10():
   1631a:	7a e0       	ldi	r23, 0x0A	; 10
   1631c:	97 9f       	mul	r25, r23
   1631e:	90 2d       	mov	r25, r0
   16320:	87 9f       	mul	r24, r23
   16322:	80 2d       	mov	r24, r0
   16324:	91 0d       	add	r25, r1
   16326:	11 24       	eor	r1, r1
   16328:	08 95       	ret

0001632a <__utoa_ncheck>:
__utoa_ncheck():
   1632a:	bb 27       	eor	r27, r27

0001632c <__utoa_common>:
   1632c:	fb 01       	movw	r30, r22
   1632e:	55 27       	eor	r21, r21
   16330:	aa 27       	eor	r26, r26
   16332:	88 0f       	add	r24, r24
   16334:	99 1f       	adc	r25, r25
   16336:	aa 1f       	adc	r26, r26
   16338:	a4 17       	cp	r26, r20
   1633a:	10 f0       	brcs	.+4      	; 0x16340 <__utoa_common+0x14>
   1633c:	a4 1b       	sub	r26, r20
   1633e:	83 95       	inc	r24
   16340:	50 51       	subi	r21, 0x10	; 16
   16342:	b9 f7       	brne	.-18     	; 0x16332 <__utoa_common+0x6>
   16344:	a0 5d       	subi	r26, 0xD0	; 208
   16346:	aa 33       	cpi	r26, 0x3A	; 58
   16348:	08 f0       	brcs	.+2      	; 0x1634c <__utoa_common+0x20>
   1634a:	a9 5d       	subi	r26, 0xD9	; 217
   1634c:	a1 93       	st	Z+, r26
   1634e:	00 97       	sbiw	r24, 0x00	; 0
   16350:	79 f7       	brne	.-34     	; 0x16330 <__utoa_common+0x4>
   16352:	b1 11       	cpse	r27, r1
   16354:	b1 93       	st	Z+, r27
   16356:	11 92       	st	Z+, r1
   16358:	cb 01       	movw	r24, r22
   1635a:	0c 94 24 b9 	jmp	0x17248	; 0x17248 <strrev>

0001635e <fdevopen>:
fdevopen():
   1635e:	0f 93       	push	r16
   16360:	1f 93       	push	r17
   16362:	cf 93       	push	r28
   16364:	df 93       	push	r29
   16366:	00 97       	sbiw	r24, 0x00	; 0
   16368:	59 f4       	brne	.+22     	; 0x16380 <fdevopen+0x22>
   1636a:	61 15       	cp	r22, r1
   1636c:	71 05       	cpc	r23, r1
   1636e:	41 f4       	brne	.+16     	; 0x16380 <fdevopen+0x22>
   16370:	f0 e0       	ldi	r31, 0x00	; 0
   16372:	e0 e0       	ldi	r30, 0x00	; 0
   16374:	cf 01       	movw	r24, r30
   16376:	df 91       	pop	r29
   16378:	cf 91       	pop	r28
   1637a:	1f 91       	pop	r17
   1637c:	0f 91       	pop	r16
   1637e:	08 95       	ret
   16380:	8b 01       	movw	r16, r22
   16382:	ec 01       	movw	r28, r24
   16384:	6e e0       	ldi	r22, 0x0E	; 14
   16386:	70 e0       	ldi	r23, 0x00	; 0
   16388:	81 e0       	ldi	r24, 0x01	; 1
   1638a:	90 e0       	ldi	r25, 0x00	; 0
   1638c:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <calloc>
   16390:	fc 01       	movw	r30, r24
   16392:	89 2b       	or	r24, r25
   16394:	69 f3       	breq	.-38     	; 0x16370 <fdevopen+0x12>
   16396:	80 e8       	ldi	r24, 0x80	; 128
   16398:	83 83       	std	Z+3, r24	; 0x03
   1639a:	01 15       	cp	r16, r1
   1639c:	11 05       	cpc	r17, r1
   1639e:	71 f0       	breq	.+28     	; 0x163bc <fdevopen+0x5e>
   163a0:	13 87       	std	Z+11, r17	; 0x0b
   163a2:	02 87       	std	Z+10, r16	; 0x0a
   163a4:	81 e8       	ldi	r24, 0x81	; 129
   163a6:	83 83       	std	Z+3, r24	; 0x03
   163a8:	80 91 8c 13 	lds	r24, 0x138C	; 0x80138c <__iob>
   163ac:	90 91 8d 13 	lds	r25, 0x138D	; 0x80138d <__iob+0x1>
   163b0:	89 2b       	or	r24, r25
   163b2:	21 f4       	brne	.+8      	; 0x163bc <fdevopen+0x5e>
   163b4:	f0 93 8d 13 	sts	0x138D, r31	; 0x80138d <__iob+0x1>
   163b8:	e0 93 8c 13 	sts	0x138C, r30	; 0x80138c <__iob>
   163bc:	20 97       	sbiw	r28, 0x00	; 0
   163be:	d1 f2       	breq	.-76     	; 0x16374 <fdevopen+0x16>
   163c0:	d1 87       	std	Z+9, r29	; 0x09
   163c2:	c0 87       	std	Z+8, r28	; 0x08
   163c4:	83 81       	ldd	r24, Z+3	; 0x03
   163c6:	82 60       	ori	r24, 0x02	; 2
   163c8:	83 83       	std	Z+3, r24	; 0x03
   163ca:	80 91 8e 13 	lds	r24, 0x138E	; 0x80138e <__iob+0x2>
   163ce:	90 91 8f 13 	lds	r25, 0x138F	; 0x80138f <__iob+0x3>
   163d2:	89 2b       	or	r24, r25
   163d4:	79 f6       	brne	.-98     	; 0x16374 <fdevopen+0x16>
   163d6:	f0 93 8f 13 	sts	0x138F, r31	; 0x80138f <__iob+0x3>
   163da:	e0 93 8e 13 	sts	0x138E, r30	; 0x80138e <__iob+0x2>
   163de:	80 91 90 13 	lds	r24, 0x1390	; 0x801390 <__iob+0x4>
   163e2:	90 91 91 13 	lds	r25, 0x1391	; 0x801391 <__iob+0x5>
   163e6:	89 2b       	or	r24, r25
   163e8:	29 f6       	brne	.-118    	; 0x16374 <fdevopen+0x16>
   163ea:	f0 93 91 13 	sts	0x1391, r31	; 0x801391 <__iob+0x5>
   163ee:	e0 93 90 13 	sts	0x1390, r30	; 0x801390 <__iob+0x4>
   163f2:	c0 cf       	rjmp	.-128    	; 0x16374 <fdevopen+0x16>

000163f4 <vfprintf>:
vfprintf():
   163f4:	2f 92       	push	r2
   163f6:	3f 92       	push	r3
   163f8:	4f 92       	push	r4
   163fa:	5f 92       	push	r5
   163fc:	6f 92       	push	r6
   163fe:	7f 92       	push	r7
   16400:	8f 92       	push	r8
   16402:	9f 92       	push	r9
   16404:	af 92       	push	r10
   16406:	bf 92       	push	r11
   16408:	cf 92       	push	r12
   1640a:	df 92       	push	r13
   1640c:	ef 92       	push	r14
   1640e:	ff 92       	push	r15
   16410:	0f 93       	push	r16
   16412:	1f 93       	push	r17
   16414:	cf 93       	push	r28
   16416:	df 93       	push	r29
   16418:	00 d0       	rcall	.+0      	; 0x1641a <vfprintf+0x26>
   1641a:	00 d0       	rcall	.+0      	; 0x1641c <vfprintf+0x28>
   1641c:	00 d0       	rcall	.+0      	; 0x1641e <vfprintf+0x2a>
   1641e:	1f 92       	push	r1
   16420:	1f 92       	push	r1
   16422:	cd b7       	in	r28, 0x3d	; 61
   16424:	de b7       	in	r29, 0x3e	; 62
   16426:	7c 01       	movw	r14, r24
   16428:	3b 01       	movw	r6, r22
   1642a:	8a 01       	movw	r16, r20
   1642c:	fc 01       	movw	r30, r24
   1642e:	17 82       	std	Z+7, r1	; 0x07
   16430:	16 82       	std	Z+6, r1	; 0x06
   16432:	83 81       	ldd	r24, Z+3	; 0x03
   16434:	81 ff       	sbrs	r24, 1
   16436:	dd c1       	rjmp	.+954    	; 0x167f2 <vfprintf+0x3fe>
   16438:	ce 01       	movw	r24, r28
   1643a:	01 96       	adiw	r24, 0x01	; 1
   1643c:	5c 01       	movw	r10, r24
   1643e:	f7 01       	movw	r30, r14
   16440:	93 81       	ldd	r25, Z+3	; 0x03
   16442:	f3 01       	movw	r30, r6
   16444:	93 fd       	sbrc	r25, 3
   16446:	85 91       	lpm	r24, Z+
   16448:	93 ff       	sbrs	r25, 3
   1644a:	81 91       	ld	r24, Z+
   1644c:	3f 01       	movw	r6, r30
   1644e:	88 23       	and	r24, r24
   16450:	09 f4       	brne	.+2      	; 0x16454 <vfprintf+0x60>
   16452:	53 c1       	rjmp	.+678    	; 0x166fa <vfprintf+0x306>
   16454:	85 32       	cpi	r24, 0x25	; 37
   16456:	39 f4       	brne	.+14     	; 0x16466 <vfprintf+0x72>
   16458:	93 fd       	sbrc	r25, 3
   1645a:	85 91       	lpm	r24, Z+
   1645c:	93 ff       	sbrs	r25, 3
   1645e:	81 91       	ld	r24, Z+
   16460:	3f 01       	movw	r6, r30
   16462:	85 32       	cpi	r24, 0x25	; 37
   16464:	29 f4       	brne	.+10     	; 0x16470 <vfprintf+0x7c>
   16466:	b7 01       	movw	r22, r14
   16468:	90 e0       	ldi	r25, 0x00	; 0
   1646a:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   1646e:	e7 cf       	rjmp	.-50     	; 0x1643e <vfprintf+0x4a>
   16470:	91 2c       	mov	r9, r1
   16472:	21 2c       	mov	r2, r1
   16474:	31 2c       	mov	r3, r1
   16476:	ff e1       	ldi	r31, 0x1F	; 31
   16478:	f3 15       	cp	r31, r3
   1647a:	38 f0       	brcs	.+14     	; 0x1648a <vfprintf+0x96>
   1647c:	8b 32       	cpi	r24, 0x2B	; 43
   1647e:	11 f1       	breq	.+68     	; 0x164c4 <vfprintf+0xd0>
   16480:	90 f4       	brcc	.+36     	; 0x164a6 <vfprintf+0xb2>
   16482:	80 32       	cpi	r24, 0x20	; 32
   16484:	09 f1       	breq	.+66     	; 0x164c8 <vfprintf+0xd4>
   16486:	83 32       	cpi	r24, 0x23	; 35
   16488:	29 f1       	breq	.+74     	; 0x164d4 <vfprintf+0xe0>
   1648a:	37 fc       	sbrc	r3, 7
   1648c:	3c c0       	rjmp	.+120    	; 0x16506 <vfprintf+0x112>
   1648e:	20 ed       	ldi	r18, 0xD0	; 208
   16490:	28 0f       	add	r18, r24
   16492:	2a 30       	cpi	r18, 0x0A	; 10
   16494:	50 f5       	brcc	.+84     	; 0x164ea <vfprintf+0xf6>
   16496:	36 fe       	sbrs	r3, 6
   16498:	20 c0       	rjmp	.+64     	; 0x164da <vfprintf+0xe6>
   1649a:	8a e0       	ldi	r24, 0x0A	; 10
   1649c:	98 9e       	mul	r9, r24
   1649e:	20 0d       	add	r18, r0
   164a0:	11 24       	eor	r1, r1
   164a2:	92 2e       	mov	r9, r18
   164a4:	06 c0       	rjmp	.+12     	; 0x164b2 <vfprintf+0xbe>
   164a6:	8d 32       	cpi	r24, 0x2D	; 45
   164a8:	91 f0       	breq	.+36     	; 0x164ce <vfprintf+0xda>
   164aa:	80 33       	cpi	r24, 0x30	; 48
   164ac:	71 f7       	brne	.-36     	; 0x1648a <vfprintf+0x96>
   164ae:	68 94       	set
   164b0:	30 f8       	bld	r3, 0
   164b2:	f3 01       	movw	r30, r6
   164b4:	93 fd       	sbrc	r25, 3
   164b6:	85 91       	lpm	r24, Z+
   164b8:	93 ff       	sbrs	r25, 3
   164ba:	81 91       	ld	r24, Z+
   164bc:	3f 01       	movw	r6, r30
   164be:	81 11       	cpse	r24, r1
   164c0:	da cf       	rjmp	.-76     	; 0x16476 <vfprintf+0x82>
   164c2:	21 c0       	rjmp	.+66     	; 0x16506 <vfprintf+0x112>
   164c4:	68 94       	set
   164c6:	31 f8       	bld	r3, 1
   164c8:	68 94       	set
   164ca:	32 f8       	bld	r3, 2
   164cc:	f2 cf       	rjmp	.-28     	; 0x164b2 <vfprintf+0xbe>
   164ce:	68 94       	set
   164d0:	33 f8       	bld	r3, 3
   164d2:	ef cf       	rjmp	.-34     	; 0x164b2 <vfprintf+0xbe>
   164d4:	68 94       	set
   164d6:	34 f8       	bld	r3, 4
   164d8:	ec cf       	rjmp	.-40     	; 0x164b2 <vfprintf+0xbe>
   164da:	ea e0       	ldi	r30, 0x0A	; 10
   164dc:	2e 9e       	mul	r2, r30
   164de:	20 0d       	add	r18, r0
   164e0:	11 24       	eor	r1, r1
   164e2:	22 2e       	mov	r2, r18
   164e4:	68 94       	set
   164e6:	35 f8       	bld	r3, 5
   164e8:	e4 cf       	rjmp	.-56     	; 0x164b2 <vfprintf+0xbe>
   164ea:	8e 32       	cpi	r24, 0x2E	; 46
   164ec:	29 f4       	brne	.+10     	; 0x164f8 <vfprintf+0x104>
   164ee:	36 fc       	sbrc	r3, 6
   164f0:	04 c1       	rjmp	.+520    	; 0x166fa <vfprintf+0x306>
   164f2:	68 94       	set
   164f4:	36 f8       	bld	r3, 6
   164f6:	dd cf       	rjmp	.-70     	; 0x164b2 <vfprintf+0xbe>
   164f8:	8c 36       	cpi	r24, 0x6C	; 108
   164fa:	19 f4       	brne	.+6      	; 0x16502 <vfprintf+0x10e>
   164fc:	68 94       	set
   164fe:	37 f8       	bld	r3, 7
   16500:	d8 cf       	rjmp	.-80     	; 0x164b2 <vfprintf+0xbe>
   16502:	88 36       	cpi	r24, 0x68	; 104
   16504:	b1 f2       	breq	.-84     	; 0x164b2 <vfprintf+0xbe>
   16506:	98 2f       	mov	r25, r24
   16508:	9f 7d       	andi	r25, 0xDF	; 223
   1650a:	95 54       	subi	r25, 0x45	; 69
   1650c:	93 30       	cpi	r25, 0x03	; 3
   1650e:	e0 f0       	brcs	.+56     	; 0x16548 <vfprintf+0x154>
   16510:	83 36       	cpi	r24, 0x63	; 99
   16512:	a1 f1       	breq	.+104    	; 0x1657c <vfprintf+0x188>
   16514:	83 37       	cpi	r24, 0x73	; 115
   16516:	c1 f1       	breq	.+112    	; 0x16588 <vfprintf+0x194>
   16518:	83 35       	cpi	r24, 0x53	; 83
   1651a:	09 f0       	breq	.+2      	; 0x1651e <vfprintf+0x12a>
   1651c:	63 c0       	rjmp	.+198    	; 0x165e4 <vfprintf+0x1f0>
   1651e:	28 01       	movw	r4, r16
   16520:	f2 e0       	ldi	r31, 0x02	; 2
   16522:	4f 0e       	add	r4, r31
   16524:	51 1c       	adc	r5, r1
   16526:	f8 01       	movw	r30, r16
   16528:	c0 80       	ld	r12, Z
   1652a:	d1 80       	ldd	r13, Z+1	; 0x01
   1652c:	69 2d       	mov	r22, r9
   1652e:	70 e0       	ldi	r23, 0x00	; 0
   16530:	36 fc       	sbrc	r3, 6
   16532:	02 c0       	rjmp	.+4      	; 0x16538 <vfprintf+0x144>
   16534:	6f ef       	ldi	r22, 0xFF	; 255
   16536:	7f ef       	ldi	r23, 0xFF	; 255
   16538:	c6 01       	movw	r24, r12
   1653a:	0e 94 07 b9 	call	0x1720e	; 0x1720e <strnlen_P>
   1653e:	4c 01       	movw	r8, r24
   16540:	68 94       	set
   16542:	37 f8       	bld	r3, 7
   16544:	82 01       	movw	r16, r4
   16546:	0a c0       	rjmp	.+20     	; 0x1655c <vfprintf+0x168>
   16548:	0c 5f       	subi	r16, 0xFC	; 252
   1654a:	1f 4f       	sbci	r17, 0xFF	; 255
   1654c:	ff e3       	ldi	r31, 0x3F	; 63
   1654e:	f9 83       	std	Y+1, r31	; 0x01
   16550:	88 24       	eor	r8, r8
   16552:	83 94       	inc	r8
   16554:	91 2c       	mov	r9, r1
   16556:	65 01       	movw	r12, r10
   16558:	e8 94       	clt
   1655a:	37 f8       	bld	r3, 7
   1655c:	33 fe       	sbrs	r3, 3
   1655e:	2d c0       	rjmp	.+90     	; 0x165ba <vfprintf+0x1c6>
   16560:	52 2c       	mov	r5, r2
   16562:	81 14       	cp	r8, r1
   16564:	91 04       	cpc	r9, r1
   16566:	71 f5       	brne	.+92     	; 0x165c4 <vfprintf+0x1d0>
   16568:	55 20       	and	r5, r5
   1656a:	09 f4       	brne	.+2      	; 0x1656e <vfprintf+0x17a>
   1656c:	68 cf       	rjmp	.-304    	; 0x1643e <vfprintf+0x4a>
   1656e:	b7 01       	movw	r22, r14
   16570:	80 e2       	ldi	r24, 0x20	; 32
   16572:	90 e0       	ldi	r25, 0x00	; 0
   16574:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   16578:	5a 94       	dec	r5
   1657a:	f6 cf       	rjmp	.-20     	; 0x16568 <vfprintf+0x174>
   1657c:	f8 01       	movw	r30, r16
   1657e:	80 81       	ld	r24, Z
   16580:	89 83       	std	Y+1, r24	; 0x01
   16582:	0e 5f       	subi	r16, 0xFE	; 254
   16584:	1f 4f       	sbci	r17, 0xFF	; 255
   16586:	e4 cf       	rjmp	.-56     	; 0x16550 <vfprintf+0x15c>
   16588:	28 01       	movw	r4, r16
   1658a:	f2 e0       	ldi	r31, 0x02	; 2
   1658c:	4f 0e       	add	r4, r31
   1658e:	51 1c       	adc	r5, r1
   16590:	f8 01       	movw	r30, r16
   16592:	c0 80       	ld	r12, Z
   16594:	d1 80       	ldd	r13, Z+1	; 0x01
   16596:	69 2d       	mov	r22, r9
   16598:	70 e0       	ldi	r23, 0x00	; 0
   1659a:	36 fc       	sbrc	r3, 6
   1659c:	02 c0       	rjmp	.+4      	; 0x165a2 <vfprintf+0x1ae>
   1659e:	6f ef       	ldi	r22, 0xFF	; 255
   165a0:	7f ef       	ldi	r23, 0xFF	; 255
   165a2:	c6 01       	movw	r24, r12
   165a4:	0e 94 19 b9 	call	0x17232	; 0x17232 <strnlen>
   165a8:	4c 01       	movw	r8, r24
   165aa:	82 01       	movw	r16, r4
   165ac:	d5 cf       	rjmp	.-86     	; 0x16558 <vfprintf+0x164>
   165ae:	b7 01       	movw	r22, r14
   165b0:	80 e2       	ldi	r24, 0x20	; 32
   165b2:	90 e0       	ldi	r25, 0x00	; 0
   165b4:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   165b8:	2a 94       	dec	r2
   165ba:	28 14       	cp	r2, r8
   165bc:	19 04       	cpc	r1, r9
   165be:	09 f0       	breq	.+2      	; 0x165c2 <vfprintf+0x1ce>
   165c0:	b0 f7       	brcc	.-20     	; 0x165ae <vfprintf+0x1ba>
   165c2:	ce cf       	rjmp	.-100    	; 0x16560 <vfprintf+0x16c>
   165c4:	f6 01       	movw	r30, r12
   165c6:	37 fc       	sbrc	r3, 7
   165c8:	85 91       	lpm	r24, Z+
   165ca:	37 fe       	sbrs	r3, 7
   165cc:	81 91       	ld	r24, Z+
   165ce:	6f 01       	movw	r12, r30
   165d0:	b7 01       	movw	r22, r14
   165d2:	90 e0       	ldi	r25, 0x00	; 0
   165d4:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   165d8:	51 10       	cpse	r5, r1
   165da:	5a 94       	dec	r5
   165dc:	f1 e0       	ldi	r31, 0x01	; 1
   165de:	8f 1a       	sub	r8, r31
   165e0:	91 08       	sbc	r9, r1
   165e2:	bf cf       	rjmp	.-130    	; 0x16562 <vfprintf+0x16e>
   165e4:	84 36       	cpi	r24, 0x64	; 100
   165e6:	19 f0       	breq	.+6      	; 0x165ee <vfprintf+0x1fa>
   165e8:	89 36       	cpi	r24, 0x69	; 105
   165ea:	09 f0       	breq	.+2      	; 0x165ee <vfprintf+0x1fa>
   165ec:	77 c0       	rjmp	.+238    	; 0x166dc <vfprintf+0x2e8>
   165ee:	f8 01       	movw	r30, r16
   165f0:	37 fe       	sbrs	r3, 7
   165f2:	6b c0       	rjmp	.+214    	; 0x166ca <vfprintf+0x2d6>
   165f4:	60 81       	ld	r22, Z
   165f6:	71 81       	ldd	r23, Z+1	; 0x01
   165f8:	82 81       	ldd	r24, Z+2	; 0x02
   165fa:	93 81       	ldd	r25, Z+3	; 0x03
   165fc:	0c 5f       	subi	r16, 0xFC	; 252
   165fe:	1f 4f       	sbci	r17, 0xFF	; 255
   16600:	f3 2d       	mov	r31, r3
   16602:	ff 76       	andi	r31, 0x6F	; 111
   16604:	3f 2e       	mov	r3, r31
   16606:	97 ff       	sbrs	r25, 7
   16608:	09 c0       	rjmp	.+18     	; 0x1661c <vfprintf+0x228>
   1660a:	90 95       	com	r25
   1660c:	80 95       	com	r24
   1660e:	70 95       	com	r23
   16610:	61 95       	neg	r22
   16612:	7f 4f       	sbci	r23, 0xFF	; 255
   16614:	8f 4f       	sbci	r24, 0xFF	; 255
   16616:	9f 4f       	sbci	r25, 0xFF	; 255
   16618:	68 94       	set
   1661a:	37 f8       	bld	r3, 7
   1661c:	2a e0       	ldi	r18, 0x0A	; 10
   1661e:	30 e0       	ldi	r19, 0x00	; 0
   16620:	a5 01       	movw	r20, r10
   16622:	0e 94 64 b9 	call	0x172c8	; 0x172c8 <__ultoa_invert>
   16626:	c8 2e       	mov	r12, r24
   16628:	ca 18       	sub	r12, r10
   1662a:	8c 2c       	mov	r8, r12
   1662c:	43 2c       	mov	r4, r3
   1662e:	36 fe       	sbrs	r3, 6
   16630:	0c c0       	rjmp	.+24     	; 0x1664a <vfprintf+0x256>
   16632:	e8 94       	clt
   16634:	40 f8       	bld	r4, 0
   16636:	c9 14       	cp	r12, r9
   16638:	40 f4       	brcc	.+16     	; 0x1664a <vfprintf+0x256>
   1663a:	34 fe       	sbrs	r3, 4
   1663c:	05 c0       	rjmp	.+10     	; 0x16648 <vfprintf+0x254>
   1663e:	32 fc       	sbrc	r3, 2
   16640:	03 c0       	rjmp	.+6      	; 0x16648 <vfprintf+0x254>
   16642:	f3 2d       	mov	r31, r3
   16644:	fe 7e       	andi	r31, 0xEE	; 238
   16646:	4f 2e       	mov	r4, r31
   16648:	89 2c       	mov	r8, r9
   1664a:	44 fe       	sbrs	r4, 4
   1664c:	aa c0       	rjmp	.+340    	; 0x167a2 <vfprintf+0x3ae>
   1664e:	fe 01       	movw	r30, r28
   16650:	ec 0d       	add	r30, r12
   16652:	f1 1d       	adc	r31, r1
   16654:	80 81       	ld	r24, Z
   16656:	80 33       	cpi	r24, 0x30	; 48
   16658:	09 f0       	breq	.+2      	; 0x1665c <vfprintf+0x268>
   1665a:	9c c0       	rjmp	.+312    	; 0x16794 <vfprintf+0x3a0>
   1665c:	24 2d       	mov	r18, r4
   1665e:	29 7e       	andi	r18, 0xE9	; 233
   16660:	42 2e       	mov	r4, r18
   16662:	84 2d       	mov	r24, r4
   16664:	88 70       	andi	r24, 0x08	; 8
   16666:	58 2e       	mov	r5, r24
   16668:	43 fc       	sbrc	r4, 3
   1666a:	aa c0       	rjmp	.+340    	; 0x167c0 <vfprintf+0x3cc>
   1666c:	40 fe       	sbrs	r4, 0
   1666e:	a4 c0       	rjmp	.+328    	; 0x167b8 <vfprintf+0x3c4>
   16670:	9c 2c       	mov	r9, r12
   16672:	82 14       	cp	r8, r2
   16674:	18 f4       	brcc	.+6      	; 0x1667c <vfprintf+0x288>
   16676:	2c 0c       	add	r2, r12
   16678:	92 2c       	mov	r9, r2
   1667a:	98 18       	sub	r9, r8
   1667c:	44 fe       	sbrs	r4, 4
   1667e:	a6 c0       	rjmp	.+332    	; 0x167cc <vfprintf+0x3d8>
   16680:	b7 01       	movw	r22, r14
   16682:	80 e3       	ldi	r24, 0x30	; 48
   16684:	90 e0       	ldi	r25, 0x00	; 0
   16686:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   1668a:	42 fe       	sbrs	r4, 2
   1668c:	09 c0       	rjmp	.+18     	; 0x166a0 <vfprintf+0x2ac>
   1668e:	88 e7       	ldi	r24, 0x78	; 120
   16690:	90 e0       	ldi	r25, 0x00	; 0
   16692:	41 fe       	sbrs	r4, 1
   16694:	02 c0       	rjmp	.+4      	; 0x1669a <vfprintf+0x2a6>
   16696:	88 e5       	ldi	r24, 0x58	; 88
   16698:	90 e0       	ldi	r25, 0x00	; 0
   1669a:	b7 01       	movw	r22, r14
   1669c:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   166a0:	c9 14       	cp	r12, r9
   166a2:	08 f4       	brcc	.+2      	; 0x166a6 <vfprintf+0x2b2>
   166a4:	9f c0       	rjmp	.+318    	; 0x167e4 <vfprintf+0x3f0>
   166a6:	ca 94       	dec	r12
   166a8:	d1 2c       	mov	r13, r1
   166aa:	9f ef       	ldi	r25, 0xFF	; 255
   166ac:	c9 1a       	sub	r12, r25
   166ae:	d9 0a       	sbc	r13, r25
   166b0:	ca 0c       	add	r12, r10
   166b2:	db 1c       	adc	r13, r11
   166b4:	f6 01       	movw	r30, r12
   166b6:	82 91       	ld	r24, -Z
   166b8:	6f 01       	movw	r12, r30
   166ba:	b7 01       	movw	r22, r14
   166bc:	90 e0       	ldi	r25, 0x00	; 0
   166be:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   166c2:	ac 14       	cp	r10, r12
   166c4:	bd 04       	cpc	r11, r13
   166c6:	b1 f7       	brne	.-20     	; 0x166b4 <vfprintf+0x2c0>
   166c8:	4f cf       	rjmp	.-354    	; 0x16568 <vfprintf+0x174>
   166ca:	60 81       	ld	r22, Z
   166cc:	71 81       	ldd	r23, Z+1	; 0x01
   166ce:	07 2e       	mov	r0, r23
   166d0:	00 0c       	add	r0, r0
   166d2:	88 0b       	sbc	r24, r24
   166d4:	99 0b       	sbc	r25, r25
   166d6:	0e 5f       	subi	r16, 0xFE	; 254
   166d8:	1f 4f       	sbci	r17, 0xFF	; 255
   166da:	92 cf       	rjmp	.-220    	; 0x16600 <vfprintf+0x20c>
   166dc:	d3 2c       	mov	r13, r3
   166de:	e8 94       	clt
   166e0:	d4 f8       	bld	r13, 4
   166e2:	2a e0       	ldi	r18, 0x0A	; 10
   166e4:	30 e0       	ldi	r19, 0x00	; 0
   166e6:	85 37       	cpi	r24, 0x75	; 117
   166e8:	e1 f1       	breq	.+120    	; 0x16762 <vfprintf+0x36e>
   166ea:	23 2d       	mov	r18, r3
   166ec:	29 7f       	andi	r18, 0xF9	; 249
   166ee:	d2 2e       	mov	r13, r18
   166f0:	8f 36       	cpi	r24, 0x6F	; 111
   166f2:	a9 f1       	breq	.+106    	; 0x1675e <vfprintf+0x36a>
   166f4:	f0 f4       	brcc	.+60     	; 0x16732 <vfprintf+0x33e>
   166f6:	88 35       	cpi	r24, 0x58	; 88
   166f8:	51 f1       	breq	.+84     	; 0x1674e <vfprintf+0x35a>
   166fa:	f7 01       	movw	r30, r14
   166fc:	86 81       	ldd	r24, Z+6	; 0x06
   166fe:	97 81       	ldd	r25, Z+7	; 0x07
   16700:	2b 96       	adiw	r28, 0x0b	; 11
   16702:	0f b6       	in	r0, 0x3f	; 63
   16704:	f8 94       	cli
   16706:	de bf       	out	0x3e, r29	; 62
   16708:	0f be       	out	0x3f, r0	; 63
   1670a:	cd bf       	out	0x3d, r28	; 61
   1670c:	df 91       	pop	r29
   1670e:	cf 91       	pop	r28
   16710:	1f 91       	pop	r17
   16712:	0f 91       	pop	r16
   16714:	ff 90       	pop	r15
   16716:	ef 90       	pop	r14
   16718:	df 90       	pop	r13
   1671a:	cf 90       	pop	r12
   1671c:	bf 90       	pop	r11
   1671e:	af 90       	pop	r10
   16720:	9f 90       	pop	r9
   16722:	8f 90       	pop	r8
   16724:	7f 90       	pop	r7
   16726:	6f 90       	pop	r6
   16728:	5f 90       	pop	r5
   1672a:	4f 90       	pop	r4
   1672c:	3f 90       	pop	r3
   1672e:	2f 90       	pop	r2
   16730:	08 95       	ret
   16732:	80 37       	cpi	r24, 0x70	; 112
   16734:	49 f0       	breq	.+18     	; 0x16748 <vfprintf+0x354>
   16736:	88 37       	cpi	r24, 0x78	; 120
   16738:	01 f7       	brne	.-64     	; 0x166fa <vfprintf+0x306>
   1673a:	d4 fe       	sbrs	r13, 4
   1673c:	02 c0       	rjmp	.+4      	; 0x16742 <vfprintf+0x34e>
   1673e:	68 94       	set
   16740:	d2 f8       	bld	r13, 2
   16742:	20 e1       	ldi	r18, 0x10	; 16
   16744:	30 e0       	ldi	r19, 0x00	; 0
   16746:	0d c0       	rjmp	.+26     	; 0x16762 <vfprintf+0x36e>
   16748:	68 94       	set
   1674a:	d4 f8       	bld	r13, 4
   1674c:	f6 cf       	rjmp	.-20     	; 0x1673a <vfprintf+0x346>
   1674e:	34 fe       	sbrs	r3, 4
   16750:	03 c0       	rjmp	.+6      	; 0x16758 <vfprintf+0x364>
   16752:	82 2f       	mov	r24, r18
   16754:	86 60       	ori	r24, 0x06	; 6
   16756:	d8 2e       	mov	r13, r24
   16758:	20 e1       	ldi	r18, 0x10	; 16
   1675a:	32 e0       	ldi	r19, 0x02	; 2
   1675c:	02 c0       	rjmp	.+4      	; 0x16762 <vfprintf+0x36e>
   1675e:	28 e0       	ldi	r18, 0x08	; 8
   16760:	30 e0       	ldi	r19, 0x00	; 0
   16762:	f8 01       	movw	r30, r16
   16764:	d7 fe       	sbrs	r13, 7
   16766:	0f c0       	rjmp	.+30     	; 0x16786 <vfprintf+0x392>
   16768:	60 81       	ld	r22, Z
   1676a:	71 81       	ldd	r23, Z+1	; 0x01
   1676c:	82 81       	ldd	r24, Z+2	; 0x02
   1676e:	93 81       	ldd	r25, Z+3	; 0x03
   16770:	0c 5f       	subi	r16, 0xFC	; 252
   16772:	1f 4f       	sbci	r17, 0xFF	; 255
   16774:	a5 01       	movw	r20, r10
   16776:	0e 94 64 b9 	call	0x172c8	; 0x172c8 <__ultoa_invert>
   1677a:	c8 2e       	mov	r12, r24
   1677c:	ca 18       	sub	r12, r10
   1677e:	3d 2c       	mov	r3, r13
   16780:	e8 94       	clt
   16782:	37 f8       	bld	r3, 7
   16784:	52 cf       	rjmp	.-348    	; 0x1662a <vfprintf+0x236>
   16786:	60 81       	ld	r22, Z
   16788:	71 81       	ldd	r23, Z+1	; 0x01
   1678a:	90 e0       	ldi	r25, 0x00	; 0
   1678c:	80 e0       	ldi	r24, 0x00	; 0
   1678e:	0e 5f       	subi	r16, 0xFE	; 254
   16790:	1f 4f       	sbci	r17, 0xFF	; 255
   16792:	f0 cf       	rjmp	.-32     	; 0x16774 <vfprintf+0x380>
   16794:	42 fc       	sbrc	r4, 2
   16796:	02 c0       	rjmp	.+4      	; 0x1679c <vfprintf+0x3a8>
   16798:	83 94       	inc	r8
   1679a:	63 cf       	rjmp	.-314    	; 0x16662 <vfprintf+0x26e>
   1679c:	83 94       	inc	r8
   1679e:	83 94       	inc	r8
   167a0:	60 cf       	rjmp	.-320    	; 0x16662 <vfprintf+0x26e>
   167a2:	84 2d       	mov	r24, r4
   167a4:	86 78       	andi	r24, 0x86	; 134
   167a6:	09 f4       	brne	.+2      	; 0x167aa <vfprintf+0x3b6>
   167a8:	5c cf       	rjmp	.-328    	; 0x16662 <vfprintf+0x26e>
   167aa:	f6 cf       	rjmp	.-20     	; 0x16798 <vfprintf+0x3a4>
   167ac:	b7 01       	movw	r22, r14
   167ae:	80 e2       	ldi	r24, 0x20	; 32
   167b0:	90 e0       	ldi	r25, 0x00	; 0
   167b2:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   167b6:	83 94       	inc	r8
   167b8:	82 14       	cp	r8, r2
   167ba:	c0 f3       	brcs	.-16     	; 0x167ac <vfprintf+0x3b8>
   167bc:	51 2c       	mov	r5, r1
   167be:	5e cf       	rjmp	.-324    	; 0x1667c <vfprintf+0x288>
   167c0:	52 2c       	mov	r5, r2
   167c2:	58 18       	sub	r5, r8
   167c4:	82 14       	cp	r8, r2
   167c6:	08 f4       	brcc	.+2      	; 0x167ca <vfprintf+0x3d6>
   167c8:	59 cf       	rjmp	.-334    	; 0x1667c <vfprintf+0x288>
   167ca:	f8 cf       	rjmp	.-16     	; 0x167bc <vfprintf+0x3c8>
   167cc:	84 2d       	mov	r24, r4
   167ce:	86 78       	andi	r24, 0x86	; 134
   167d0:	09 f4       	brne	.+2      	; 0x167d4 <vfprintf+0x3e0>
   167d2:	66 cf       	rjmp	.-308    	; 0x166a0 <vfprintf+0x2ac>
   167d4:	8b e2       	ldi	r24, 0x2B	; 43
   167d6:	41 fe       	sbrs	r4, 1
   167d8:	80 e2       	ldi	r24, 0x20	; 32
   167da:	47 fc       	sbrc	r4, 7
   167dc:	8d e2       	ldi	r24, 0x2D	; 45
   167de:	b7 01       	movw	r22, r14
   167e0:	90 e0       	ldi	r25, 0x00	; 0
   167e2:	5c cf       	rjmp	.-328    	; 0x1669c <vfprintf+0x2a8>
   167e4:	b7 01       	movw	r22, r14
   167e6:	80 e3       	ldi	r24, 0x30	; 48
   167e8:	90 e0       	ldi	r25, 0x00	; 0
   167ea:	0e 94 34 b9 	call	0x17268	; 0x17268 <fputc>
   167ee:	9a 94       	dec	r9
   167f0:	57 cf       	rjmp	.-338    	; 0x166a0 <vfprintf+0x2ac>
   167f2:	8f ef       	ldi	r24, 0xFF	; 255
   167f4:	9f ef       	ldi	r25, 0xFF	; 255
   167f6:	84 cf       	rjmp	.-248    	; 0x16700 <vfprintf+0x30c>

000167f8 <calloc>:
calloc():
   167f8:	0f 93       	push	r16
   167fa:	1f 93       	push	r17
   167fc:	cf 93       	push	r28
   167fe:	df 93       	push	r29
   16800:	86 9f       	mul	r24, r22
   16802:	80 01       	movw	r16, r0
   16804:	87 9f       	mul	r24, r23
   16806:	10 0d       	add	r17, r0
   16808:	96 9f       	mul	r25, r22
   1680a:	10 0d       	add	r17, r0
   1680c:	11 24       	eor	r1, r1
   1680e:	c8 01       	movw	r24, r16
   16810:	0e 94 91 b5 	call	0x16b22	; 0x16b22 <malloc>
   16814:	ec 01       	movw	r28, r24
   16816:	00 97       	sbiw	r24, 0x00	; 0
   16818:	29 f0       	breq	.+10     	; 0x16824 <calloc+0x2c>
   1681a:	a8 01       	movw	r20, r16
   1681c:	70 e0       	ldi	r23, 0x00	; 0
   1681e:	60 e0       	ldi	r22, 0x00	; 0
   16820:	0e 94 12 b9 	call	0x17224	; 0x17224 <memset>
   16824:	ce 01       	movw	r24, r28
   16826:	df 91       	pop	r29
   16828:	cf 91       	pop	r28
   1682a:	1f 91       	pop	r17
   1682c:	0f 91       	pop	r16
   1682e:	08 95       	ret

00016830 <dtoa_prf>:
dtoa_prf():
   16830:	8f 92       	push	r8
   16832:	9f 92       	push	r9
   16834:	af 92       	push	r10
   16836:	bf 92       	push	r11
   16838:	cf 92       	push	r12
   1683a:	df 92       	push	r13
   1683c:	ef 92       	push	r14
   1683e:	ff 92       	push	r15
   16840:	0f 93       	push	r16
   16842:	1f 93       	push	r17
   16844:	cf 93       	push	r28
   16846:	df 93       	push	r29
   16848:	00 d0       	rcall	.+0      	; 0x1684a <dtoa_prf+0x1a>
   1684a:	00 d0       	rcall	.+0      	; 0x1684c <dtoa_prf+0x1c>
   1684c:	00 d0       	rcall	.+0      	; 0x1684e <dtoa_prf+0x1e>
   1684e:	cd b7       	in	r28, 0x3d	; 61
   16850:	de b7       	in	r29, 0x3e	; 62
   16852:	6a 01       	movw	r12, r20
   16854:	f2 2e       	mov	r15, r18
   16856:	b0 2e       	mov	r11, r16
   16858:	10 2f       	mov	r17, r16
   1685a:	fb e3       	ldi	r31, 0x3B	; 59
   1685c:	af 2e       	mov	r10, r31
   1685e:	a0 16       	cp	r10, r16
   16860:	08 f4       	brcc	.+2      	; 0x16864 <dtoa_prf+0x34>
   16862:	1b e3       	ldi	r17, 0x3B	; 59
   16864:	1f 5f       	subi	r17, 0xFF	; 255
   16866:	01 2f       	mov	r16, r17
   16868:	27 e0       	ldi	r18, 0x07	; 7
   1686a:	ae 01       	movw	r20, r28
   1686c:	4f 5f       	subi	r20, 0xFF	; 255
   1686e:	5f 4f       	sbci	r21, 0xFF	; 255
   16870:	0e 94 14 b8 	call	0x17028	; 0x17028 <__ftoa_engine>
   16874:	bc 01       	movw	r22, r24
   16876:	89 81       	ldd	r24, Y+1	; 0x01
   16878:	98 2f       	mov	r25, r24
   1687a:	99 70       	andi	r25, 0x09	; 9
   1687c:	91 30       	cpi	r25, 0x01	; 1
   1687e:	09 f4       	brne	.+2      	; 0x16882 <dtoa_prf+0x52>
   16880:	4e c0       	rjmp	.+156    	; 0x1691e <dtoa_prf+0xee>
   16882:	9b e2       	ldi	r25, 0x2B	; 43
   16884:	e1 fc       	sbrc	r14, 1
   16886:	04 c0       	rjmp	.+8      	; 0x16890 <dtoa_prf+0x60>
   16888:	9e 2d       	mov	r25, r14
   1688a:	91 70       	andi	r25, 0x01	; 1
   1688c:	e0 fc       	sbrc	r14, 0
   1688e:	49 c0       	rjmp	.+146    	; 0x16922 <dtoa_prf+0xf2>
   16890:	5e 2d       	mov	r21, r14
   16892:	50 71       	andi	r21, 0x10	; 16
   16894:	e8 2f       	mov	r30, r24
   16896:	e8 70       	andi	r30, 0x08	; 8
   16898:	83 ff       	sbrs	r24, 3
   1689a:	55 c0       	rjmp	.+170    	; 0x16946 <dtoa_prf+0x116>
   1689c:	84 e0       	ldi	r24, 0x04	; 4
   1689e:	91 11       	cpse	r25, r1
   168a0:	01 c0       	rjmp	.+2      	; 0x168a4 <dtoa_prf+0x74>
   168a2:	83 e0       	ldi	r24, 0x03	; 3
   168a4:	ef 2d       	mov	r30, r15
   168a6:	e8 1b       	sub	r30, r24
   168a8:	8f 15       	cp	r24, r15
   168aa:	08 f0       	brcs	.+2      	; 0x168ae <dtoa_prf+0x7e>
   168ac:	e0 e0       	ldi	r30, 0x00	; 0
   168ae:	d6 01       	movw	r26, r12
   168b0:	8e 2f       	mov	r24, r30
   168b2:	20 e2       	ldi	r18, 0x20	; 32
   168b4:	55 23       	and	r21, r21
   168b6:	c9 f1       	breq	.+114    	; 0x1692a <dtoa_prf+0xfa>
   168b8:	99 23       	and	r25, r25
   168ba:	29 f0       	breq	.+10     	; 0x168c6 <dtoa_prf+0x96>
   168bc:	d6 01       	movw	r26, r12
   168be:	9c 93       	st	X, r25
   168c0:	c6 01       	movw	r24, r12
   168c2:	01 96       	adiw	r24, 0x01	; 1
   168c4:	6c 01       	movw	r12, r24
   168c6:	96 01       	movw	r18, r12
   168c8:	2d 5f       	subi	r18, 0xFD	; 253
   168ca:	3f 4f       	sbci	r19, 0xFF	; 255
   168cc:	e2 fe       	sbrs	r14, 2
   168ce:	33 c0       	rjmp	.+102    	; 0x16936 <dtoa_prf+0x106>
   168d0:	8e e4       	ldi	r24, 0x4E	; 78
   168d2:	d6 01       	movw	r26, r12
   168d4:	8c 93       	st	X, r24
   168d6:	91 e4       	ldi	r25, 0x41	; 65
   168d8:	11 96       	adiw	r26, 0x01	; 1
   168da:	9c 93       	st	X, r25
   168dc:	11 97       	sbiw	r26, 0x01	; 1
   168de:	12 96       	adiw	r26, 0x02	; 2
   168e0:	8c 93       	st	X, r24
   168e2:	d9 01       	movw	r26, r18
   168e4:	8e 2f       	mov	r24, r30
   168e6:	90 e2       	ldi	r25, 0x20	; 32
   168e8:	81 11       	cpse	r24, r1
   168ea:	2a c0       	rjmp	.+84     	; 0x16940 <dtoa_prf+0x110>
   168ec:	e2 0f       	add	r30, r18
   168ee:	f3 2f       	mov	r31, r19
   168f0:	f1 1d       	adc	r31, r1
   168f2:	10 82       	st	Z, r1
   168f4:	8e ef       	ldi	r24, 0xFE	; 254
   168f6:	9f ef       	ldi	r25, 0xFF	; 255
   168f8:	29 96       	adiw	r28, 0x09	; 9
   168fa:	0f b6       	in	r0, 0x3f	; 63
   168fc:	f8 94       	cli
   168fe:	de bf       	out	0x3e, r29	; 62
   16900:	0f be       	out	0x3f, r0	; 63
   16902:	cd bf       	out	0x3d, r28	; 61
   16904:	df 91       	pop	r29
   16906:	cf 91       	pop	r28
   16908:	1f 91       	pop	r17
   1690a:	0f 91       	pop	r16
   1690c:	ff 90       	pop	r15
   1690e:	ef 90       	pop	r14
   16910:	df 90       	pop	r13
   16912:	cf 90       	pop	r12
   16914:	bf 90       	pop	r11
   16916:	af 90       	pop	r10
   16918:	9f 90       	pop	r9
   1691a:	8f 90       	pop	r8
   1691c:	08 95       	ret
   1691e:	9d e2       	ldi	r25, 0x2D	; 45
   16920:	b7 cf       	rjmp	.-146    	; 0x16890 <dtoa_prf+0x60>
   16922:	90 e2       	ldi	r25, 0x20	; 32
   16924:	b5 cf       	rjmp	.-150    	; 0x16890 <dtoa_prf+0x60>
   16926:	2d 93       	st	X+, r18
   16928:	81 50       	subi	r24, 0x01	; 1
   1692a:	81 11       	cpse	r24, r1
   1692c:	fc cf       	rjmp	.-8      	; 0x16926 <dtoa_prf+0xf6>
   1692e:	ce 0e       	add	r12, r30
   16930:	d1 1c       	adc	r13, r1
   16932:	e0 e0       	ldi	r30, 0x00	; 0
   16934:	c1 cf       	rjmp	.-126    	; 0x168b8 <dtoa_prf+0x88>
   16936:	8e e6       	ldi	r24, 0x6E	; 110
   16938:	d6 01       	movw	r26, r12
   1693a:	8c 93       	st	X, r24
   1693c:	91 e6       	ldi	r25, 0x61	; 97
   1693e:	cc cf       	rjmp	.-104    	; 0x168d8 <dtoa_prf+0xa8>
   16940:	9d 93       	st	X+, r25
   16942:	81 50       	subi	r24, 0x01	; 1
   16944:	d1 cf       	rjmp	.-94     	; 0x168e8 <dtoa_prf+0xb8>
   16946:	48 2f       	mov	r20, r24
   16948:	44 70       	andi	r20, 0x04	; 4
   1694a:	82 ff       	sbrs	r24, 2
   1694c:	3d c0       	rjmp	.+122    	; 0x169c8 <dtoa_prf+0x198>
   1694e:	84 e0       	ldi	r24, 0x04	; 4
   16950:	91 11       	cpse	r25, r1
   16952:	01 c0       	rjmp	.+2      	; 0x16956 <dtoa_prf+0x126>
   16954:	83 e0       	ldi	r24, 0x03	; 3
   16956:	8f 15       	cp	r24, r15
   16958:	10 f4       	brcc	.+4      	; 0x1695e <dtoa_prf+0x12e>
   1695a:	ef 2d       	mov	r30, r15
   1695c:	e8 1b       	sub	r30, r24
   1695e:	d6 01       	movw	r26, r12
   16960:	8e 2f       	mov	r24, r30
   16962:	20 e2       	ldi	r18, 0x20	; 32
   16964:	55 23       	and	r21, r21
   16966:	09 f1       	breq	.+66     	; 0x169aa <dtoa_prf+0x17a>
   16968:	99 23       	and	r25, r25
   1696a:	29 f0       	breq	.+10     	; 0x16976 <dtoa_prf+0x146>
   1696c:	d6 01       	movw	r26, r12
   1696e:	9c 93       	st	X, r25
   16970:	c6 01       	movw	r24, r12
   16972:	01 96       	adiw	r24, 0x01	; 1
   16974:	6c 01       	movw	r12, r24
   16976:	96 01       	movw	r18, r12
   16978:	2d 5f       	subi	r18, 0xFD	; 253
   1697a:	3f 4f       	sbci	r19, 0xFF	; 255
   1697c:	e2 fe       	sbrs	r14, 2
   1697e:	1b c0       	rjmp	.+54     	; 0x169b6 <dtoa_prf+0x186>
   16980:	89 e4       	ldi	r24, 0x49	; 73
   16982:	d6 01       	movw	r26, r12
   16984:	8c 93       	st	X, r24
   16986:	8e e4       	ldi	r24, 0x4E	; 78
   16988:	11 96       	adiw	r26, 0x01	; 1
   1698a:	8c 93       	st	X, r24
   1698c:	11 97       	sbiw	r26, 0x01	; 1
   1698e:	86 e4       	ldi	r24, 0x46	; 70
   16990:	12 96       	adiw	r26, 0x02	; 2
   16992:	8c 93       	st	X, r24
   16994:	d9 01       	movw	r26, r18
   16996:	8e 2f       	mov	r24, r30
   16998:	90 e2       	ldi	r25, 0x20	; 32
   1699a:	88 23       	and	r24, r24
   1699c:	09 f4       	brne	.+2      	; 0x169a0 <dtoa_prf+0x170>
   1699e:	a6 cf       	rjmp	.-180    	; 0x168ec <dtoa_prf+0xbc>
   169a0:	9d 93       	st	X+, r25
   169a2:	81 50       	subi	r24, 0x01	; 1
   169a4:	fa cf       	rjmp	.-12     	; 0x1699a <dtoa_prf+0x16a>
   169a6:	2d 93       	st	X+, r18
   169a8:	81 50       	subi	r24, 0x01	; 1
   169aa:	81 11       	cpse	r24, r1
   169ac:	fc cf       	rjmp	.-8      	; 0x169a6 <dtoa_prf+0x176>
   169ae:	ce 0e       	add	r12, r30
   169b0:	d1 1c       	adc	r13, r1
   169b2:	e0 e0       	ldi	r30, 0x00	; 0
   169b4:	d9 cf       	rjmp	.-78     	; 0x16968 <dtoa_prf+0x138>
   169b6:	89 e6       	ldi	r24, 0x69	; 105
   169b8:	d6 01       	movw	r26, r12
   169ba:	8c 93       	st	X, r24
   169bc:	8e e6       	ldi	r24, 0x6E	; 110
   169be:	11 96       	adiw	r26, 0x01	; 1
   169c0:	8c 93       	st	X, r24
   169c2:	11 97       	sbiw	r26, 0x01	; 1
   169c4:	86 e6       	ldi	r24, 0x66	; 102
   169c6:	e4 cf       	rjmp	.-56     	; 0x16990 <dtoa_prf+0x160>
   169c8:	9b 01       	movw	r18, r22
   169ca:	77 ff       	sbrs	r23, 7
   169cc:	02 c0       	rjmp	.+4      	; 0x169d2 <dtoa_prf+0x1a2>
   169ce:	30 e0       	ldi	r19, 0x00	; 0
   169d0:	20 e0       	ldi	r18, 0x00	; 0
   169d2:	a1 e0       	ldi	r26, 0x01	; 1
   169d4:	b0 e0       	ldi	r27, 0x00	; 0
   169d6:	91 11       	cpse	r25, r1
   169d8:	02 c0       	rjmp	.+4      	; 0x169de <dtoa_prf+0x1ae>
   169da:	b0 e0       	ldi	r27, 0x00	; 0
   169dc:	a0 e0       	ldi	r26, 0x00	; 0
   169de:	f9 01       	movw	r30, r18
   169e0:	31 96       	adiw	r30, 0x01	; 1
   169e2:	ae 0f       	add	r26, r30
   169e4:	bf 1f       	adc	r27, r31
   169e6:	8b 2c       	mov	r8, r11
   169e8:	91 2c       	mov	r9, r1
   169ea:	bb 20       	and	r11, r11
   169ec:	09 f4       	brne	.+2      	; 0x169f0 <dtoa_prf+0x1c0>
   169ee:	61 c0       	rjmp	.+194    	; 0x16ab2 <dtoa_prf+0x282>
   169f0:	54 01       	movw	r10, r8
   169f2:	ef ef       	ldi	r30, 0xFF	; 255
   169f4:	ae 1a       	sub	r10, r30
   169f6:	be 0a       	sbc	r11, r30
   169f8:	aa 0d       	add	r26, r10
   169fa:	bb 1d       	adc	r27, r11
   169fc:	fa 16       	cp	r15, r26
   169fe:	1b 06       	cpc	r1, r27
   16a00:	19 f0       	breq	.+6      	; 0x16a08 <dtoa_prf+0x1d8>
   16a02:	14 f0       	brlt	.+4      	; 0x16a08 <dtoa_prf+0x1d8>
   16a04:	4f 2d       	mov	r20, r15
   16a06:	4a 1b       	sub	r20, r26
   16a08:	51 11       	cpse	r21, r1
   16a0a:	88 c0       	rjmp	.+272    	; 0x16b1c <dtoa_prf+0x2ec>
   16a0c:	e3 fc       	sbrc	r14, 3
   16a0e:	59 c0       	rjmp	.+178    	; 0x16ac2 <dtoa_prf+0x292>
   16a10:	76 01       	movw	r14, r12
   16a12:	a4 2f       	mov	r26, r20
   16a14:	b0 e2       	ldi	r27, 0x20	; 32
   16a16:	a1 11       	cpse	r26, r1
   16a18:	4f c0       	rjmp	.+158    	; 0x16ab8 <dtoa_prf+0x288>
   16a1a:	c4 0e       	add	r12, r20
   16a1c:	d1 1c       	adc	r13, r1
   16a1e:	99 23       	and	r25, r25
   16a20:	09 f4       	brne	.+2      	; 0x16a24 <dtoa_prf+0x1f4>
   16a22:	5b c0       	rjmp	.+182    	; 0x16ada <dtoa_prf+0x2aa>
   16a24:	40 e0       	ldi	r20, 0x00	; 0
   16a26:	d6 01       	movw	r26, r12
   16a28:	11 96       	adiw	r26, 0x01	; 1
   16a2a:	f6 01       	movw	r30, r12
   16a2c:	90 83       	st	Z, r25
   16a2e:	6d 01       	movw	r12, r26
   16a30:	55 23       	and	r21, r21
   16a32:	09 f4       	brne	.+2      	; 0x16a36 <dtoa_prf+0x206>
   16a34:	48 c0       	rjmp	.+144    	; 0x16ac6 <dtoa_prf+0x296>
   16a36:	01 2f       	mov	r16, r17
   16a38:	06 0f       	add	r16, r22
   16a3a:	9a 81       	ldd	r25, Y+2	; 0x02
   16a3c:	58 2f       	mov	r21, r24
   16a3e:	50 71       	andi	r21, 0x10	; 16
   16a40:	84 ff       	sbrs	r24, 4
   16a42:	03 c0       	rjmp	.+6      	; 0x16a4a <dtoa_prf+0x21a>
   16a44:	91 33       	cpi	r25, 0x31	; 49
   16a46:	09 f4       	brne	.+2      	; 0x16a4a <dtoa_prf+0x21a>
   16a48:	01 50       	subi	r16, 0x01	; 1
   16a4a:	10 16       	cp	r1, r16
   16a4c:	0c f0       	brlt	.+2      	; 0x16a50 <dtoa_prf+0x220>
   16a4e:	47 c0       	rjmp	.+142    	; 0x16ade <dtoa_prf+0x2ae>
   16a50:	09 30       	cpi	r16, 0x09	; 9
   16a52:	08 f0       	brcs	.+2      	; 0x16a56 <dtoa_prf+0x226>
   16a54:	08 e0       	ldi	r16, 0x08	; 8
   16a56:	ee e2       	ldi	r30, 0x2E	; 46
   16a58:	fe 2e       	mov	r15, r30
   16a5a:	5b 01       	movw	r10, r22
   16a5c:	a0 1a       	sub	r10, r16
   16a5e:	b1 08       	sbc	r11, r1
   16a60:	85 01       	movw	r16, r10
   16a62:	91 94       	neg	r9
   16a64:	81 94       	neg	r8
   16a66:	91 08       	sbc	r9, r1
   16a68:	2f 3f       	cpi	r18, 0xFF	; 255
   16a6a:	32 07       	cpc	r19, r18
   16a6c:	29 f4       	brne	.+10     	; 0x16a78 <dtoa_prf+0x248>
   16a6e:	d6 01       	movw	r26, r12
   16a70:	fc 92       	st	X, r15
   16a72:	f6 01       	movw	r30, r12
   16a74:	31 96       	adiw	r30, 0x01	; 1
   16a76:	6f 01       	movw	r12, r30
   16a78:	62 17       	cp	r22, r18
   16a7a:	73 07       	cpc	r23, r19
   16a7c:	94 f1       	brlt	.+100    	; 0x16ae2 <dtoa_prf+0x2b2>
   16a7e:	02 17       	cp	r16, r18
   16a80:	13 07       	cpc	r17, r19
   16a82:	7c f5       	brge	.+94     	; 0x16ae2 <dtoa_prf+0x2b2>
   16a84:	db 01       	movw	r26, r22
   16a86:	a2 1b       	sub	r26, r18
   16a88:	b3 0b       	sbc	r27, r19
   16a8a:	aa 24       	eor	r10, r10
   16a8c:	a3 94       	inc	r10
   16a8e:	b1 2c       	mov	r11, r1
   16a90:	ac 0e       	add	r10, r28
   16a92:	bd 1e       	adc	r11, r29
   16a94:	aa 0d       	add	r26, r10
   16a96:	bb 1d       	adc	r27, r11
   16a98:	11 96       	adiw	r26, 0x01	; 1
   16a9a:	8c 91       	ld	r24, X
   16a9c:	21 50       	subi	r18, 0x01	; 1
   16a9e:	31 09       	sbc	r19, r1
   16aa0:	d6 01       	movw	r26, r12
   16aa2:	11 96       	adiw	r26, 0x01	; 1
   16aa4:	28 15       	cp	r18, r8
   16aa6:	39 05       	cpc	r19, r9
   16aa8:	f4 f0       	brlt	.+60     	; 0x16ae6 <dtoa_prf+0x2b6>
   16aaa:	f6 01       	movw	r30, r12
   16aac:	80 83       	st	Z, r24
   16aae:	6d 01       	movw	r12, r26
   16ab0:	db cf       	rjmp	.-74     	; 0x16a68 <dtoa_prf+0x238>
   16ab2:	b1 2c       	mov	r11, r1
   16ab4:	a1 2c       	mov	r10, r1
   16ab6:	a0 cf       	rjmp	.-192    	; 0x169f8 <dtoa_prf+0x1c8>
   16ab8:	f7 01       	movw	r30, r14
   16aba:	b1 93       	st	Z+, r27
   16abc:	7f 01       	movw	r14, r30
   16abe:	a1 50       	subi	r26, 0x01	; 1
   16ac0:	aa cf       	rjmp	.-172    	; 0x16a16 <dtoa_prf+0x1e6>
   16ac2:	91 11       	cpse	r25, r1
   16ac4:	b0 cf       	rjmp	.-160    	; 0x16a26 <dtoa_prf+0x1f6>
   16ac6:	d6 01       	movw	r26, r12
   16ac8:	94 2f       	mov	r25, r20
   16aca:	50 e3       	ldi	r21, 0x30	; 48
   16acc:	02 c0       	rjmp	.+4      	; 0x16ad2 <dtoa_prf+0x2a2>
   16ace:	5d 93       	st	X+, r21
   16ad0:	91 50       	subi	r25, 0x01	; 1
   16ad2:	91 11       	cpse	r25, r1
   16ad4:	fc cf       	rjmp	.-8      	; 0x16ace <dtoa_prf+0x29e>
   16ad6:	c4 0e       	add	r12, r20
   16ad8:	d1 1c       	adc	r13, r1
   16ada:	40 e0       	ldi	r20, 0x00	; 0
   16adc:	ac cf       	rjmp	.-168    	; 0x16a36 <dtoa_prf+0x206>
   16ade:	01 e0       	ldi	r16, 0x01	; 1
   16ae0:	ba cf       	rjmp	.-140    	; 0x16a56 <dtoa_prf+0x226>
   16ae2:	80 e3       	ldi	r24, 0x30	; 48
   16ae4:	db cf       	rjmp	.-74     	; 0x16a9c <dtoa_prf+0x26c>
   16ae6:	62 17       	cp	r22, r18
   16ae8:	73 07       	cpc	r23, r19
   16aea:	31 f4       	brne	.+12     	; 0x16af8 <dtoa_prf+0x2c8>
   16aec:	96 33       	cpi	r25, 0x36	; 54
   16aee:	88 f4       	brcc	.+34     	; 0x16b12 <dtoa_prf+0x2e2>
   16af0:	95 33       	cpi	r25, 0x35	; 53
   16af2:	11 f4       	brne	.+4      	; 0x16af8 <dtoa_prf+0x2c8>
   16af4:	55 23       	and	r21, r21
   16af6:	69 f0       	breq	.+26     	; 0x16b12 <dtoa_prf+0x2e2>
   16af8:	f6 01       	movw	r30, r12
   16afa:	80 83       	st	Z, r24
   16afc:	fd 01       	movw	r30, r26
   16afe:	84 2f       	mov	r24, r20
   16b00:	90 e2       	ldi	r25, 0x20	; 32
   16b02:	81 11       	cpse	r24, r1
   16b04:	08 c0       	rjmp	.+16     	; 0x16b16 <dtoa_prf+0x2e6>
   16b06:	a4 0f       	add	r26, r20
   16b08:	b1 1d       	adc	r27, r1
   16b0a:	1c 92       	st	X, r1
   16b0c:	90 e0       	ldi	r25, 0x00	; 0
   16b0e:	80 e0       	ldi	r24, 0x00	; 0
   16b10:	f3 ce       	rjmp	.-538    	; 0x168f8 <dtoa_prf+0xc8>
   16b12:	81 e3       	ldi	r24, 0x31	; 49
   16b14:	f1 cf       	rjmp	.-30     	; 0x16af8 <dtoa_prf+0x2c8>
   16b16:	91 93       	st	Z+, r25
   16b18:	81 50       	subi	r24, 0x01	; 1
   16b1a:	f3 cf       	rjmp	.-26     	; 0x16b02 <dtoa_prf+0x2d2>
   16b1c:	91 11       	cpse	r25, r1
   16b1e:	83 cf       	rjmp	.-250    	; 0x16a26 <dtoa_prf+0x1f6>
   16b20:	8a cf       	rjmp	.-236    	; 0x16a36 <dtoa_prf+0x206>

00016b22 <malloc>:
malloc():
   16b22:	0f 93       	push	r16
   16b24:	1f 93       	push	r17
   16b26:	cf 93       	push	r28
   16b28:	df 93       	push	r29
   16b2a:	82 30       	cpi	r24, 0x02	; 2
   16b2c:	91 05       	cpc	r25, r1
   16b2e:	10 f4       	brcc	.+4      	; 0x16b34 <malloc+0x12>
   16b30:	82 e0       	ldi	r24, 0x02	; 2
   16b32:	90 e0       	ldi	r25, 0x00	; 0
   16b34:	e0 91 a6 13 	lds	r30, 0x13A6	; 0x8013a6 <__flp>
   16b38:	f0 91 a7 13 	lds	r31, 0x13A7	; 0x8013a7 <__flp+0x1>
   16b3c:	30 e0       	ldi	r19, 0x00	; 0
   16b3e:	20 e0       	ldi	r18, 0x00	; 0
   16b40:	b0 e0       	ldi	r27, 0x00	; 0
   16b42:	a0 e0       	ldi	r26, 0x00	; 0
   16b44:	30 97       	sbiw	r30, 0x00	; 0
   16b46:	99 f4       	brne	.+38     	; 0x16b6e <malloc+0x4c>
   16b48:	21 15       	cp	r18, r1
   16b4a:	31 05       	cpc	r19, r1
   16b4c:	09 f4       	brne	.+2      	; 0x16b50 <malloc+0x2e>
   16b4e:	4a c0       	rjmp	.+148    	; 0x16be4 <malloc+0xc2>
   16b50:	28 1b       	sub	r18, r24
   16b52:	39 0b       	sbc	r19, r25
   16b54:	24 30       	cpi	r18, 0x04	; 4
   16b56:	31 05       	cpc	r19, r1
   16b58:	d8 f5       	brcc	.+118    	; 0x16bd0 <malloc+0xae>
   16b5a:	8a 81       	ldd	r24, Y+2	; 0x02
   16b5c:	9b 81       	ldd	r25, Y+3	; 0x03
   16b5e:	61 15       	cp	r22, r1
   16b60:	71 05       	cpc	r23, r1
   16b62:	89 f1       	breq	.+98     	; 0x16bc6 <malloc+0xa4>
   16b64:	fb 01       	movw	r30, r22
   16b66:	93 83       	std	Z+3, r25	; 0x03
   16b68:	82 83       	std	Z+2, r24	; 0x02
   16b6a:	fe 01       	movw	r30, r28
   16b6c:	11 c0       	rjmp	.+34     	; 0x16b90 <malloc+0x6e>
   16b6e:	40 81       	ld	r20, Z
   16b70:	51 81       	ldd	r21, Z+1	; 0x01
   16b72:	02 81       	ldd	r16, Z+2	; 0x02
   16b74:	13 81       	ldd	r17, Z+3	; 0x03
   16b76:	48 17       	cp	r20, r24
   16b78:	59 07       	cpc	r21, r25
   16b7a:	e0 f0       	brcs	.+56     	; 0x16bb4 <malloc+0x92>
   16b7c:	48 17       	cp	r20, r24
   16b7e:	59 07       	cpc	r21, r25
   16b80:	99 f4       	brne	.+38     	; 0x16ba8 <malloc+0x86>
   16b82:	10 97       	sbiw	r26, 0x00	; 0
   16b84:	61 f0       	breq	.+24     	; 0x16b9e <malloc+0x7c>
   16b86:	12 96       	adiw	r26, 0x02	; 2
   16b88:	0c 93       	st	X, r16
   16b8a:	12 97       	sbiw	r26, 0x02	; 2
   16b8c:	13 96       	adiw	r26, 0x03	; 3
   16b8e:	1c 93       	st	X, r17
   16b90:	32 96       	adiw	r30, 0x02	; 2
   16b92:	cf 01       	movw	r24, r30
   16b94:	df 91       	pop	r29
   16b96:	cf 91       	pop	r28
   16b98:	1f 91       	pop	r17
   16b9a:	0f 91       	pop	r16
   16b9c:	08 95       	ret
   16b9e:	00 93 a6 13 	sts	0x13A6, r16	; 0x8013a6 <__flp>
   16ba2:	10 93 a7 13 	sts	0x13A7, r17	; 0x8013a7 <__flp+0x1>
   16ba6:	f4 cf       	rjmp	.-24     	; 0x16b90 <malloc+0x6e>
   16ba8:	21 15       	cp	r18, r1
   16baa:	31 05       	cpc	r19, r1
   16bac:	51 f0       	breq	.+20     	; 0x16bc2 <malloc+0xa0>
   16bae:	42 17       	cp	r20, r18
   16bb0:	53 07       	cpc	r21, r19
   16bb2:	38 f0       	brcs	.+14     	; 0x16bc2 <malloc+0xa0>
   16bb4:	a9 01       	movw	r20, r18
   16bb6:	db 01       	movw	r26, r22
   16bb8:	9a 01       	movw	r18, r20
   16bba:	bd 01       	movw	r22, r26
   16bbc:	df 01       	movw	r26, r30
   16bbe:	f8 01       	movw	r30, r16
   16bc0:	c1 cf       	rjmp	.-126    	; 0x16b44 <malloc+0x22>
   16bc2:	ef 01       	movw	r28, r30
   16bc4:	f9 cf       	rjmp	.-14     	; 0x16bb8 <malloc+0x96>
   16bc6:	90 93 a7 13 	sts	0x13A7, r25	; 0x8013a7 <__flp+0x1>
   16bca:	80 93 a6 13 	sts	0x13A6, r24	; 0x8013a6 <__flp>
   16bce:	cd cf       	rjmp	.-102    	; 0x16b6a <malloc+0x48>
   16bd0:	fe 01       	movw	r30, r28
   16bd2:	e2 0f       	add	r30, r18
   16bd4:	f3 1f       	adc	r31, r19
   16bd6:	81 93       	st	Z+, r24
   16bd8:	91 93       	st	Z+, r25
   16bda:	22 50       	subi	r18, 0x02	; 2
   16bdc:	31 09       	sbc	r19, r1
   16bde:	39 83       	std	Y+1, r19	; 0x01
   16be0:	28 83       	st	Y, r18
   16be2:	d7 cf       	rjmp	.-82     	; 0x16b92 <malloc+0x70>
   16be4:	20 91 a4 13 	lds	r18, 0x13A4	; 0x8013a4 <__brkval>
   16be8:	30 91 a5 13 	lds	r19, 0x13A5	; 0x8013a5 <__brkval+0x1>
   16bec:	23 2b       	or	r18, r19
   16bee:	41 f4       	brne	.+16     	; 0x16c00 <malloc+0xde>
   16bf0:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   16bf4:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   16bf8:	30 93 a5 13 	sts	0x13A5, r19	; 0x8013a5 <__brkval+0x1>
   16bfc:	20 93 a4 13 	sts	0x13A4, r18	; 0x8013a4 <__brkval>
   16c00:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   16c04:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   16c08:	21 15       	cp	r18, r1
   16c0a:	31 05       	cpc	r19, r1
   16c0c:	41 f4       	brne	.+16     	; 0x16c1e <malloc+0xfc>
   16c0e:	2d b7       	in	r18, 0x3d	; 61
   16c10:	3e b7       	in	r19, 0x3e	; 62
   16c12:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   16c16:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   16c1a:	24 1b       	sub	r18, r20
   16c1c:	35 0b       	sbc	r19, r21
   16c1e:	e0 91 a4 13 	lds	r30, 0x13A4	; 0x8013a4 <__brkval>
   16c22:	f0 91 a5 13 	lds	r31, 0x13A5	; 0x8013a5 <__brkval+0x1>
   16c26:	e2 17       	cp	r30, r18
   16c28:	f3 07       	cpc	r31, r19
   16c2a:	a0 f4       	brcc	.+40     	; 0x16c54 <malloc+0x132>
   16c2c:	2e 1b       	sub	r18, r30
   16c2e:	3f 0b       	sbc	r19, r31
   16c30:	28 17       	cp	r18, r24
   16c32:	39 07       	cpc	r19, r25
   16c34:	78 f0       	brcs	.+30     	; 0x16c54 <malloc+0x132>
   16c36:	ac 01       	movw	r20, r24
   16c38:	4e 5f       	subi	r20, 0xFE	; 254
   16c3a:	5f 4f       	sbci	r21, 0xFF	; 255
   16c3c:	24 17       	cp	r18, r20
   16c3e:	35 07       	cpc	r19, r21
   16c40:	48 f0       	brcs	.+18     	; 0x16c54 <malloc+0x132>
   16c42:	4e 0f       	add	r20, r30
   16c44:	5f 1f       	adc	r21, r31
   16c46:	50 93 a5 13 	sts	0x13A5, r21	; 0x8013a5 <__brkval+0x1>
   16c4a:	40 93 a4 13 	sts	0x13A4, r20	; 0x8013a4 <__brkval>
   16c4e:	81 93       	st	Z+, r24
   16c50:	91 93       	st	Z+, r25
   16c52:	9f cf       	rjmp	.-194    	; 0x16b92 <malloc+0x70>
   16c54:	f0 e0       	ldi	r31, 0x00	; 0
   16c56:	e0 e0       	ldi	r30, 0x00	; 0
   16c58:	9c cf       	rjmp	.-200    	; 0x16b92 <malloc+0x70>

00016c5a <free>:
free():
   16c5a:	cf 93       	push	r28
   16c5c:	df 93       	push	r29
   16c5e:	00 97       	sbiw	r24, 0x00	; 0
   16c60:	e9 f0       	breq	.+58     	; 0x16c9c <free+0x42>
   16c62:	fc 01       	movw	r30, r24
   16c64:	32 97       	sbiw	r30, 0x02	; 2
   16c66:	13 82       	std	Z+3, r1	; 0x03
   16c68:	12 82       	std	Z+2, r1	; 0x02
   16c6a:	a0 91 a6 13 	lds	r26, 0x13A6	; 0x8013a6 <__flp>
   16c6e:	b0 91 a7 13 	lds	r27, 0x13A7	; 0x8013a7 <__flp+0x1>
   16c72:	ed 01       	movw	r28, r26
   16c74:	30 e0       	ldi	r19, 0x00	; 0
   16c76:	20 e0       	ldi	r18, 0x00	; 0
   16c78:	10 97       	sbiw	r26, 0x00	; 0
   16c7a:	a1 f4       	brne	.+40     	; 0x16ca4 <free+0x4a>
   16c7c:	20 81       	ld	r18, Z
   16c7e:	31 81       	ldd	r19, Z+1	; 0x01
   16c80:	82 0f       	add	r24, r18
   16c82:	93 1f       	adc	r25, r19
   16c84:	20 91 a4 13 	lds	r18, 0x13A4	; 0x8013a4 <__brkval>
   16c88:	30 91 a5 13 	lds	r19, 0x13A5	; 0x8013a5 <__brkval+0x1>
   16c8c:	28 17       	cp	r18, r24
   16c8e:	39 07       	cpc	r19, r25
   16c90:	09 f0       	breq	.+2      	; 0x16c94 <free+0x3a>
   16c92:	61 c0       	rjmp	.+194    	; 0x16d56 <free+0xfc>
   16c94:	f0 93 a5 13 	sts	0x13A5, r31	; 0x8013a5 <__brkval+0x1>
   16c98:	e0 93 a4 13 	sts	0x13A4, r30	; 0x8013a4 <__brkval>
   16c9c:	df 91       	pop	r29
   16c9e:	cf 91       	pop	r28
   16ca0:	08 95       	ret
   16ca2:	ea 01       	movw	r28, r20
   16ca4:	ce 17       	cp	r28, r30
   16ca6:	df 07       	cpc	r29, r31
   16ca8:	e8 f5       	brcc	.+122    	; 0x16d24 <free+0xca>
   16caa:	4a 81       	ldd	r20, Y+2	; 0x02
   16cac:	5b 81       	ldd	r21, Y+3	; 0x03
   16cae:	9e 01       	movw	r18, r28
   16cb0:	41 15       	cp	r20, r1
   16cb2:	51 05       	cpc	r21, r1
   16cb4:	b1 f7       	brne	.-20     	; 0x16ca2 <free+0x48>
   16cb6:	e9 01       	movw	r28, r18
   16cb8:	fb 83       	std	Y+3, r31	; 0x03
   16cba:	ea 83       	std	Y+2, r30	; 0x02
   16cbc:	49 91       	ld	r20, Y+
   16cbe:	59 91       	ld	r21, Y+
   16cc0:	c4 0f       	add	r28, r20
   16cc2:	d5 1f       	adc	r29, r21
   16cc4:	ec 17       	cp	r30, r28
   16cc6:	fd 07       	cpc	r31, r29
   16cc8:	61 f4       	brne	.+24     	; 0x16ce2 <free+0x88>
   16cca:	80 81       	ld	r24, Z
   16ccc:	91 81       	ldd	r25, Z+1	; 0x01
   16cce:	02 96       	adiw	r24, 0x02	; 2
   16cd0:	84 0f       	add	r24, r20
   16cd2:	95 1f       	adc	r25, r21
   16cd4:	e9 01       	movw	r28, r18
   16cd6:	99 83       	std	Y+1, r25	; 0x01
   16cd8:	88 83       	st	Y, r24
   16cda:	82 81       	ldd	r24, Z+2	; 0x02
   16cdc:	93 81       	ldd	r25, Z+3	; 0x03
   16cde:	9b 83       	std	Y+3, r25	; 0x03
   16ce0:	8a 83       	std	Y+2, r24	; 0x02
   16ce2:	f0 e0       	ldi	r31, 0x00	; 0
   16ce4:	e0 e0       	ldi	r30, 0x00	; 0
   16ce6:	12 96       	adiw	r26, 0x02	; 2
   16ce8:	8d 91       	ld	r24, X+
   16cea:	9c 91       	ld	r25, X
   16cec:	13 97       	sbiw	r26, 0x03	; 3
   16cee:	00 97       	sbiw	r24, 0x00	; 0
   16cf0:	b9 f5       	brne	.+110    	; 0x16d60 <free+0x106>
   16cf2:	2d 91       	ld	r18, X+
   16cf4:	3c 91       	ld	r19, X
   16cf6:	11 97       	sbiw	r26, 0x01	; 1
   16cf8:	cd 01       	movw	r24, r26
   16cfa:	02 96       	adiw	r24, 0x02	; 2
   16cfc:	82 0f       	add	r24, r18
   16cfe:	93 1f       	adc	r25, r19
   16d00:	20 91 a4 13 	lds	r18, 0x13A4	; 0x8013a4 <__brkval>
   16d04:	30 91 a5 13 	lds	r19, 0x13A5	; 0x8013a5 <__brkval+0x1>
   16d08:	28 17       	cp	r18, r24
   16d0a:	39 07       	cpc	r19, r25
   16d0c:	39 f6       	brne	.-114    	; 0x16c9c <free+0x42>
   16d0e:	30 97       	sbiw	r30, 0x00	; 0
   16d10:	51 f5       	brne	.+84     	; 0x16d66 <free+0x10c>
   16d12:	10 92 a7 13 	sts	0x13A7, r1	; 0x8013a7 <__flp+0x1>
   16d16:	10 92 a6 13 	sts	0x13A6, r1	; 0x8013a6 <__flp>
   16d1a:	b0 93 a5 13 	sts	0x13A5, r27	; 0x8013a5 <__brkval+0x1>
   16d1e:	a0 93 a4 13 	sts	0x13A4, r26	; 0x8013a4 <__brkval>
   16d22:	bc cf       	rjmp	.-136    	; 0x16c9c <free+0x42>
   16d24:	d3 83       	std	Z+3, r29	; 0x03
   16d26:	c2 83       	std	Z+2, r28	; 0x02
   16d28:	40 81       	ld	r20, Z
   16d2a:	51 81       	ldd	r21, Z+1	; 0x01
   16d2c:	84 0f       	add	r24, r20
   16d2e:	95 1f       	adc	r25, r21
   16d30:	c8 17       	cp	r28, r24
   16d32:	d9 07       	cpc	r29, r25
   16d34:	61 f4       	brne	.+24     	; 0x16d4e <free+0xf4>
   16d36:	4e 5f       	subi	r20, 0xFE	; 254
   16d38:	5f 4f       	sbci	r21, 0xFF	; 255
   16d3a:	88 81       	ld	r24, Y
   16d3c:	99 81       	ldd	r25, Y+1	; 0x01
   16d3e:	48 0f       	add	r20, r24
   16d40:	59 1f       	adc	r21, r25
   16d42:	51 83       	std	Z+1, r21	; 0x01
   16d44:	40 83       	st	Z, r20
   16d46:	8a 81       	ldd	r24, Y+2	; 0x02
   16d48:	9b 81       	ldd	r25, Y+3	; 0x03
   16d4a:	93 83       	std	Z+3, r25	; 0x03
   16d4c:	82 83       	std	Z+2, r24	; 0x02
   16d4e:	21 15       	cp	r18, r1
   16d50:	31 05       	cpc	r19, r1
   16d52:	09 f0       	breq	.+2      	; 0x16d56 <free+0xfc>
   16d54:	b0 cf       	rjmp	.-160    	; 0x16cb6 <free+0x5c>
   16d56:	f0 93 a7 13 	sts	0x13A7, r31	; 0x8013a7 <__flp+0x1>
   16d5a:	e0 93 a6 13 	sts	0x13A6, r30	; 0x8013a6 <__flp>
   16d5e:	9e cf       	rjmp	.-196    	; 0x16c9c <free+0x42>
   16d60:	fd 01       	movw	r30, r26
   16d62:	dc 01       	movw	r26, r24
   16d64:	c0 cf       	rjmp	.-128    	; 0x16ce6 <free+0x8c>
   16d66:	13 82       	std	Z+3, r1	; 0x03
   16d68:	12 82       	std	Z+2, r1	; 0x02
   16d6a:	d7 cf       	rjmp	.-82     	; 0x16d1a <free+0xc0>

00016d6c <strtod>:
strtod():
   16d6c:	8f 92       	push	r8
   16d6e:	9f 92       	push	r9
   16d70:	af 92       	push	r10
   16d72:	bf 92       	push	r11
   16d74:	cf 92       	push	r12
   16d76:	df 92       	push	r13
   16d78:	ef 92       	push	r14
   16d7a:	ff 92       	push	r15
   16d7c:	0f 93       	push	r16
   16d7e:	1f 93       	push	r17
   16d80:	cf 93       	push	r28
   16d82:	df 93       	push	r29
   16d84:	5c 01       	movw	r10, r24
   16d86:	7b 01       	movw	r14, r22
   16d88:	61 15       	cp	r22, r1
   16d8a:	71 05       	cpc	r23, r1
   16d8c:	19 f0       	breq	.+6      	; 0x16d94 <strtod+0x28>
   16d8e:	db 01       	movw	r26, r22
   16d90:	8d 93       	st	X+, r24
   16d92:	9c 93       	st	X, r25
   16d94:	85 01       	movw	r16, r10
   16d96:	0f 5f       	subi	r16, 0xFF	; 255
   16d98:	1f 4f       	sbci	r17, 0xFF	; 255
   16d9a:	f5 01       	movw	r30, r10
   16d9c:	d0 81       	ld	r29, Z
   16d9e:	8d 2f       	mov	r24, r29
   16da0:	90 e0       	ldi	r25, 0x00	; 0
   16da2:	0e 94 31 b1 	call	0x16262	; 0x16262 <isspace>
   16da6:	6c 01       	movw	r12, r24
   16da8:	89 2b       	or	r24, r25
   16daa:	b9 f5       	brne	.+110    	; 0x16e1a <strtod+0xae>
   16dac:	dd 32       	cpi	r29, 0x2D	; 45
   16dae:	b9 f5       	brne	.+110    	; 0x16e1e <strtod+0xb2>
   16db0:	0f 5f       	subi	r16, 0xFF	; 255
   16db2:	1f 4f       	sbci	r17, 0xFF	; 255
   16db4:	d5 01       	movw	r26, r10
   16db6:	11 96       	adiw	r26, 0x01	; 1
   16db8:	dc 91       	ld	r29, X
   16dba:	c1 e0       	ldi	r28, 0x01	; 1
   16dbc:	58 01       	movw	r10, r16
   16dbe:	f1 e0       	ldi	r31, 0x01	; 1
   16dc0:	af 1a       	sub	r10, r31
   16dc2:	b1 08       	sbc	r11, r1
   16dc4:	43 e0       	ldi	r20, 0x03	; 3
   16dc6:	50 e0       	ldi	r21, 0x00	; 0
   16dc8:	68 e7       	ldi	r22, 0x78	; 120
   16dca:	73 e0       	ldi	r23, 0x03	; 3
   16dcc:	c5 01       	movw	r24, r10
   16dce:	0e 94 ef b8 	call	0x171de	; 0x171de <strncasecmp_P>
   16dd2:	89 2b       	or	r24, r25
   16dd4:	69 f5       	brne	.+90     	; 0x16e30 <strtod+0xc4>
   16dd6:	68 01       	movw	r12, r16
   16dd8:	82 e0       	ldi	r24, 0x02	; 2
   16dda:	c8 0e       	add	r12, r24
   16ddc:	d1 1c       	adc	r13, r1
   16dde:	45 e0       	ldi	r20, 0x05	; 5
   16de0:	50 e0       	ldi	r21, 0x00	; 0
   16de2:	63 e7       	ldi	r22, 0x73	; 115
   16de4:	73 e0       	ldi	r23, 0x03	; 3
   16de6:	c6 01       	movw	r24, r12
   16de8:	0e 94 ef b8 	call	0x171de	; 0x171de <strncasecmp_P>
   16dec:	89 2b       	or	r24, r25
   16dee:	21 f4       	brne	.+8      	; 0x16df8 <strtod+0x8c>
   16df0:	68 01       	movw	r12, r16
   16df2:	97 e0       	ldi	r25, 0x07	; 7
   16df4:	c9 0e       	add	r12, r25
   16df6:	d1 1c       	adc	r13, r1
   16df8:	e1 14       	cp	r14, r1
   16dfa:	f1 04       	cpc	r15, r1
   16dfc:	19 f0       	breq	.+6      	; 0x16e04 <strtod+0x98>
   16dfe:	d7 01       	movw	r26, r14
   16e00:	cd 92       	st	X+, r12
   16e02:	dc 92       	st	X, r13
   16e04:	60 e0       	ldi	r22, 0x00	; 0
   16e06:	70 e0       	ldi	r23, 0x00	; 0
   16e08:	80 e8       	ldi	r24, 0x80	; 128
   16e0a:	9f ef       	ldi	r25, 0xFF	; 255
   16e0c:	c1 11       	cpse	r28, r1
   16e0e:	ff c0       	rjmp	.+510    	; 0x1700e <strtod+0x2a2>
   16e10:	60 e0       	ldi	r22, 0x00	; 0
   16e12:	70 e0       	ldi	r23, 0x00	; 0
   16e14:	80 e8       	ldi	r24, 0x80	; 128
   16e16:	9f e7       	ldi	r25, 0x7F	; 127
   16e18:	fa c0       	rjmp	.+500    	; 0x1700e <strtod+0x2a2>
   16e1a:	58 01       	movw	r10, r16
   16e1c:	bb cf       	rjmp	.-138    	; 0x16d94 <strtod+0x28>
   16e1e:	db 32       	cpi	r29, 0x2B	; 43
   16e20:	29 f4       	brne	.+10     	; 0x16e2c <strtod+0xc0>
   16e22:	85 01       	movw	r16, r10
   16e24:	0e 5f       	subi	r16, 0xFE	; 254
   16e26:	1f 4f       	sbci	r17, 0xFF	; 255
   16e28:	f5 01       	movw	r30, r10
   16e2a:	d1 81       	ldd	r29, Z+1	; 0x01
   16e2c:	c0 e0       	ldi	r28, 0x00	; 0
   16e2e:	c6 cf       	rjmp	.-116    	; 0x16dbc <strtod+0x50>
   16e30:	43 e0       	ldi	r20, 0x03	; 3
   16e32:	50 e0       	ldi	r21, 0x00	; 0
   16e34:	60 e7       	ldi	r22, 0x70	; 112
   16e36:	73 e0       	ldi	r23, 0x03	; 3
   16e38:	c5 01       	movw	r24, r10
   16e3a:	0e 94 ef b8 	call	0x171de	; 0x171de <strncasecmp_P>
   16e3e:	89 2b       	or	r24, r25
   16e40:	e9 f0       	breq	.+58     	; 0x16e7c <strtod+0x110>
   16e42:	f8 01       	movw	r30, r16
   16e44:	10 e0       	ldi	r17, 0x00	; 0
   16e46:	00 e0       	ldi	r16, 0x00	; 0
   16e48:	20 e0       	ldi	r18, 0x00	; 0
   16e4a:	30 e0       	ldi	r19, 0x00	; 0
   16e4c:	a9 01       	movw	r20, r18
   16e4e:	5f 01       	movw	r10, r30
   16e50:	b0 ed       	ldi	r27, 0xD0	; 208
   16e52:	8b 2e       	mov	r8, r27
   16e54:	8d 0e       	add	r8, r29
   16e56:	89 e0       	ldi	r24, 0x09	; 9
   16e58:	88 15       	cp	r24, r8
   16e5a:	c8 f1       	brcs	.+114    	; 0x16ece <strtod+0x162>
   16e5c:	9c 2e       	mov	r9, r28
   16e5e:	68 94       	set
   16e60:	91 f8       	bld	r9, 1
   16e62:	8c 2f       	mov	r24, r28
   16e64:	88 70       	andi	r24, 0x08	; 8
   16e66:	c2 ff       	sbrs	r28, 2
   16e68:	16 c0       	rjmp	.+44     	; 0x16e96 <strtod+0x12a>
   16e6a:	81 11       	cpse	r24, r1
   16e6c:	02 c0       	rjmp	.+4      	; 0x16e72 <strtod+0x106>
   16e6e:	0f 5f       	subi	r16, 0xFF	; 255
   16e70:	1f 4f       	sbci	r17, 0xFF	; 255
   16e72:	31 96       	adiw	r30, 0x01	; 1
   16e74:	d5 01       	movw	r26, r10
   16e76:	dc 91       	ld	r29, X
   16e78:	c9 2d       	mov	r28, r9
   16e7a:	e9 cf       	rjmp	.-46     	; 0x16e4e <strtod+0xe2>
   16e7c:	e1 14       	cp	r14, r1
   16e7e:	f1 04       	cpc	r15, r1
   16e80:	29 f0       	breq	.+10     	; 0x16e8c <strtod+0x120>
   16e82:	0e 5f       	subi	r16, 0xFE	; 254
   16e84:	1f 4f       	sbci	r17, 0xFF	; 255
   16e86:	f7 01       	movw	r30, r14
   16e88:	11 83       	std	Z+1, r17	; 0x01
   16e8a:	00 83       	st	Z, r16
   16e8c:	60 e0       	ldi	r22, 0x00	; 0
   16e8e:	70 e0       	ldi	r23, 0x00	; 0
   16e90:	80 ec       	ldi	r24, 0xC0	; 192
   16e92:	9f e7       	ldi	r25, 0x7F	; 127
   16e94:	bc c0       	rjmp	.+376    	; 0x1700e <strtod+0x2a2>
   16e96:	88 23       	and	r24, r24
   16e98:	11 f0       	breq	.+4      	; 0x16e9e <strtod+0x132>
   16e9a:	01 50       	subi	r16, 0x01	; 1
   16e9c:	11 09       	sbc	r17, r1
   16e9e:	a5 e0       	ldi	r26, 0x05	; 5
   16ea0:	b0 e0       	ldi	r27, 0x00	; 0
   16ea2:	0e 94 75 bb 	call	0x176ea	; 0x176ea <__muluhisi3>
   16ea6:	9b 01       	movw	r18, r22
   16ea8:	ac 01       	movw	r20, r24
   16eaa:	22 0f       	add	r18, r18
   16eac:	33 1f       	adc	r19, r19
   16eae:	44 1f       	adc	r20, r20
   16eb0:	55 1f       	adc	r21, r21
   16eb2:	28 0d       	add	r18, r8
   16eb4:	31 1d       	adc	r19, r1
   16eb6:	41 1d       	adc	r20, r1
   16eb8:	51 1d       	adc	r21, r1
   16eba:	28 39       	cpi	r18, 0x98	; 152
   16ebc:	99 e9       	ldi	r25, 0x99	; 153
   16ebe:	39 07       	cpc	r19, r25
   16ec0:	49 07       	cpc	r20, r25
   16ec2:	99 e1       	ldi	r25, 0x19	; 25
   16ec4:	59 07       	cpc	r21, r25
   16ec6:	a8 f2       	brcs	.-86     	; 0x16e72 <strtod+0x106>
   16ec8:	c6 60       	ori	r28, 0x06	; 6
   16eca:	9c 2e       	mov	r9, r28
   16ecc:	d2 cf       	rjmp	.-92     	; 0x16e72 <strtod+0x106>
   16ece:	ae ef       	ldi	r26, 0xFE	; 254
   16ed0:	8a 12       	cpse	r8, r26
   16ed2:	06 c0       	rjmp	.+12     	; 0x16ee0 <strtod+0x174>
   16ed4:	c3 fd       	sbrc	r28, 3
   16ed6:	3c c0       	rjmp	.+120    	; 0x16f50 <strtod+0x1e4>
   16ed8:	9c 2e       	mov	r9, r28
   16eda:	68 94       	set
   16edc:	93 f8       	bld	r9, 3
   16ede:	c9 cf       	rjmp	.-110    	; 0x16e72 <strtod+0x106>
   16ee0:	df 7d       	andi	r29, 0xDF	; 223
   16ee2:	d5 34       	cpi	r29, 0x45	; 69
   16ee4:	a9 f5       	brne	.+106    	; 0x16f50 <strtod+0x1e4>
   16ee6:	80 81       	ld	r24, Z
   16ee8:	8d 32       	cpi	r24, 0x2D	; 45
   16eea:	39 f4       	brne	.+14     	; 0x16efa <strtod+0x18e>
   16eec:	c0 61       	ori	r28, 0x10	; 16
   16eee:	df 01       	movw	r26, r30
   16ef0:	12 96       	adiw	r26, 0x02	; 2
   16ef2:	81 81       	ldd	r24, Z+1	; 0x01
   16ef4:	62 e0       	ldi	r22, 0x02	; 2
   16ef6:	70 e0       	ldi	r23, 0x00	; 0
   16ef8:	06 c0       	rjmp	.+12     	; 0x16f06 <strtod+0x19a>
   16efa:	df 01       	movw	r26, r30
   16efc:	8b 32       	cpi	r24, 0x2B	; 43
   16efe:	c1 f3       	breq	.-16     	; 0x16ef0 <strtod+0x184>
   16f00:	11 96       	adiw	r26, 0x01	; 1
   16f02:	61 e0       	ldi	r22, 0x01	; 1
   16f04:	70 e0       	ldi	r23, 0x00	; 0
   16f06:	80 53       	subi	r24, 0x30	; 48
   16f08:	5d 01       	movw	r10, r26
   16f0a:	a6 1a       	sub	r10, r22
   16f0c:	b7 0a       	sbc	r11, r23
   16f0e:	8a 30       	cpi	r24, 0x0A	; 10
   16f10:	f8 f4       	brcc	.+62     	; 0x16f50 <strtod+0x1e4>
   16f12:	e0 e8       	ldi	r30, 0x80	; 128
   16f14:	ce 16       	cp	r12, r30
   16f16:	ec e0       	ldi	r30, 0x0C	; 12
   16f18:	de 06       	cpc	r13, r30
   16f1a:	5c f4       	brge	.+22     	; 0x16f32 <strtod+0x1c6>
   16f1c:	b6 01       	movw	r22, r12
   16f1e:	66 0f       	add	r22, r22
   16f20:	77 1f       	adc	r23, r23
   16f22:	66 0f       	add	r22, r22
   16f24:	77 1f       	adc	r23, r23
   16f26:	c6 0e       	add	r12, r22
   16f28:	d7 1e       	adc	r13, r23
   16f2a:	cc 0c       	add	r12, r12
   16f2c:	dd 1c       	adc	r13, r13
   16f2e:	c8 0e       	add	r12, r24
   16f30:	d1 1c       	adc	r13, r1
   16f32:	5d 01       	movw	r10, r26
   16f34:	ff ef       	ldi	r31, 0xFF	; 255
   16f36:	af 1a       	sub	r10, r31
   16f38:	bf 0a       	sbc	r11, r31
   16f3a:	8c 91       	ld	r24, X
   16f3c:	80 53       	subi	r24, 0x30	; 48
   16f3e:	8a 30       	cpi	r24, 0x0A	; 10
   16f40:	a8 f1       	brcs	.+106    	; 0x16fac <strtod+0x240>
   16f42:	c4 ff       	sbrs	r28, 4
   16f44:	03 c0       	rjmp	.+6      	; 0x16f4c <strtod+0x1e0>
   16f46:	d1 94       	neg	r13
   16f48:	c1 94       	neg	r12
   16f4a:	d1 08       	sbc	r13, r1
   16f4c:	0c 0d       	add	r16, r12
   16f4e:	1d 1d       	adc	r17, r13
   16f50:	c1 ff       	sbrs	r28, 1
   16f52:	09 c0       	rjmp	.+18     	; 0x16f66 <strtod+0x1fa>
   16f54:	e1 14       	cp	r14, r1
   16f56:	f1 04       	cpc	r15, r1
   16f58:	31 f0       	breq	.+12     	; 0x16f66 <strtod+0x1fa>
   16f5a:	81 e0       	ldi	r24, 0x01	; 1
   16f5c:	a8 1a       	sub	r10, r24
   16f5e:	b1 08       	sbc	r11, r1
   16f60:	d7 01       	movw	r26, r14
   16f62:	ad 92       	st	X+, r10
   16f64:	bc 92       	st	X, r11
   16f66:	ca 01       	movw	r24, r20
   16f68:	b9 01       	movw	r22, r18
   16f6a:	0e 94 c7 b9 	call	0x1738e	; 0x1738e <__floatunsisf>
   16f6e:	c3 70       	andi	r28, 0x03	; 3
   16f70:	c3 30       	cpi	r28, 0x03	; 3
   16f72:	09 f4       	brne	.+2      	; 0x16f76 <strtod+0x20a>
   16f74:	90 58       	subi	r25, 0x80	; 128
   16f76:	4b 01       	movw	r8, r22
   16f78:	5c 01       	movw	r10, r24
   16f7a:	20 e0       	ldi	r18, 0x00	; 0
   16f7c:	30 e0       	ldi	r19, 0x00	; 0
   16f7e:	a9 01       	movw	r20, r18
   16f80:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
   16f84:	88 23       	and	r24, r24
   16f86:	09 f4       	brne	.+2      	; 0x16f8a <strtod+0x21e>
   16f88:	40 c0       	rjmp	.+128    	; 0x1700a <strtod+0x29e>
   16f8a:	c7 ea       	ldi	r28, 0xA7	; 167
   16f8c:	d3 e0       	ldi	r29, 0x03	; 3
   16f8e:	17 ff       	sbrs	r17, 7
   16f90:	05 c0       	rjmp	.+10     	; 0x16f9c <strtod+0x230>
   16f92:	11 95       	neg	r17
   16f94:	01 95       	neg	r16
   16f96:	11 09       	sbc	r17, r1
   16f98:	cf e8       	ldi	r28, 0x8F	; 143
   16f9a:	d3 e0       	ldi	r29, 0x03	; 3
   16f9c:	6e 01       	movw	r12, r28
   16f9e:	b8 e1       	ldi	r27, 0x18	; 24
   16fa0:	cb 1a       	sub	r12, r27
   16fa2:	d1 08       	sbc	r13, r1
   16fa4:	80 e2       	ldi	r24, 0x20	; 32
   16fa6:	e8 2e       	mov	r14, r24
   16fa8:	f1 2c       	mov	r15, r1
   16faa:	0f c0       	rjmp	.+30     	; 0x16fca <strtod+0x25e>
   16fac:	d5 01       	movw	r26, r10
   16fae:	b1 cf       	rjmp	.-158    	; 0x16f12 <strtod+0x1a6>
   16fb0:	fe 01       	movw	r30, r28
   16fb2:	25 91       	lpm	r18, Z+
   16fb4:	35 91       	lpm	r19, Z+
   16fb6:	45 91       	lpm	r20, Z+
   16fb8:	54 91       	lpm	r21, Z
   16fba:	0e 19       	sub	r16, r14
   16fbc:	1f 09       	sbc	r17, r15
   16fbe:	c5 01       	movw	r24, r10
   16fc0:	b4 01       	movw	r22, r8
   16fc2:	0e 94 28 ba 	call	0x17450	; 0x17450 <__mulsf3>
   16fc6:	4b 01       	movw	r8, r22
   16fc8:	5c 01       	movw	r10, r24
   16fca:	d5 01       	movw	r26, r10
   16fcc:	c4 01       	movw	r24, r8
   16fce:	0e 15       	cp	r16, r14
   16fd0:	1f 05       	cpc	r17, r15
   16fd2:	74 f7       	brge	.-36     	; 0x16fb0 <strtod+0x244>
   16fd4:	24 97       	sbiw	r28, 0x04	; 4
   16fd6:	f5 94       	asr	r15
   16fd8:	e7 94       	ror	r14
   16fda:	cc 16       	cp	r12, r28
   16fdc:	dd 06       	cpc	r13, r29
   16fde:	a9 f7       	brne	.-22     	; 0x16fca <strtod+0x25e>
   16fe0:	8a 2f       	mov	r24, r26
   16fe2:	88 0f       	add	r24, r24
   16fe4:	8b 2f       	mov	r24, r27
   16fe6:	88 1f       	adc	r24, r24
   16fe8:	8f 3f       	cpi	r24, 0xFF	; 255
   16fea:	49 f0       	breq	.+18     	; 0x16ffe <strtod+0x292>
   16fec:	20 e0       	ldi	r18, 0x00	; 0
   16fee:	30 e0       	ldi	r19, 0x00	; 0
   16ff0:	a9 01       	movw	r20, r18
   16ff2:	c5 01       	movw	r24, r10
   16ff4:	b4 01       	movw	r22, r8
   16ff6:	0e 94 c2 b9 	call	0x17384	; 0x17384 <__cmpsf2>
   16ffa:	81 11       	cpse	r24, r1
   16ffc:	06 c0       	rjmp	.+12     	; 0x1700a <strtod+0x29e>
   16ffe:	82 e2       	ldi	r24, 0x22	; 34
   17000:	90 e0       	ldi	r25, 0x00	; 0
   17002:	90 93 a3 13 	sts	0x13A3, r25	; 0x8013a3 <errno+0x1>
   17006:	80 93 a2 13 	sts	0x13A2, r24	; 0x8013a2 <errno>
   1700a:	c5 01       	movw	r24, r10
   1700c:	b4 01       	movw	r22, r8
   1700e:	df 91       	pop	r29
   17010:	cf 91       	pop	r28
   17012:	1f 91       	pop	r17
   17014:	0f 91       	pop	r16
   17016:	ff 90       	pop	r15
   17018:	ef 90       	pop	r14
   1701a:	df 90       	pop	r13
   1701c:	cf 90       	pop	r12
   1701e:	bf 90       	pop	r11
   17020:	af 90       	pop	r10
   17022:	9f 90       	pop	r9
   17024:	8f 90       	pop	r8
   17026:	08 95       	ret

00017028 <__ftoa_engine>:
__ftoa_engine():
   17028:	28 30       	cpi	r18, 0x08	; 8
   1702a:	08 f0       	brcs	.+2      	; 0x1702e <__ftoa_engine+0x6>
   1702c:	27 e0       	ldi	r18, 0x07	; 7
   1702e:	33 27       	eor	r19, r19
   17030:	da 01       	movw	r26, r20
   17032:	99 0f       	add	r25, r25
   17034:	31 1d       	adc	r19, r1
   17036:	87 fd       	sbrc	r24, 7
   17038:	91 60       	ori	r25, 0x01	; 1
   1703a:	00 96       	adiw	r24, 0x00	; 0
   1703c:	61 05       	cpc	r22, r1
   1703e:	71 05       	cpc	r23, r1
   17040:	39 f4       	brne	.+14     	; 0x17050 <__ftoa_engine+0x28>
   17042:	32 60       	ori	r19, 0x02	; 2
   17044:	2e 5f       	subi	r18, 0xFE	; 254
   17046:	3d 93       	st	X+, r19
   17048:	30 e3       	ldi	r19, 0x30	; 48
   1704a:	2a 95       	dec	r18
   1704c:	e1 f7       	brne	.-8      	; 0x17046 <__ftoa_engine+0x1e>
   1704e:	08 95       	ret
   17050:	9f 3f       	cpi	r25, 0xFF	; 255
   17052:	30 f0       	brcs	.+12     	; 0x17060 <__ftoa_engine+0x38>
   17054:	80 38       	cpi	r24, 0x80	; 128
   17056:	71 05       	cpc	r23, r1
   17058:	61 05       	cpc	r22, r1
   1705a:	09 f0       	breq	.+2      	; 0x1705e <__ftoa_engine+0x36>
   1705c:	3c 5f       	subi	r19, 0xFC	; 252
   1705e:	3c 5f       	subi	r19, 0xFC	; 252
   17060:	3d 93       	st	X+, r19
   17062:	91 30       	cpi	r25, 0x01	; 1
   17064:	08 f0       	brcs	.+2      	; 0x17068 <__ftoa_engine+0x40>
   17066:	80 68       	ori	r24, 0x80	; 128
   17068:	91 1d       	adc	r25, r1
   1706a:	df 93       	push	r29
   1706c:	cf 93       	push	r28
   1706e:	1f 93       	push	r17
   17070:	0f 93       	push	r16
   17072:	ff 92       	push	r15
   17074:	ef 92       	push	r14
   17076:	19 2f       	mov	r17, r25
   17078:	98 7f       	andi	r25, 0xF8	; 248
   1707a:	96 95       	lsr	r25
   1707c:	e9 2f       	mov	r30, r25
   1707e:	96 95       	lsr	r25
   17080:	96 95       	lsr	r25
   17082:	e9 0f       	add	r30, r25
   17084:	ff 27       	eor	r31, r31
   17086:	eb 5f       	subi	r30, 0xFB	; 251
   17088:	fb 4f       	sbci	r31, 0xFB	; 251
   1708a:	99 27       	eor	r25, r25
   1708c:	33 27       	eor	r19, r19
   1708e:	ee 24       	eor	r14, r14
   17090:	ff 24       	eor	r15, r15
   17092:	a7 01       	movw	r20, r14
   17094:	e7 01       	movw	r28, r14
   17096:	05 90       	lpm	r0, Z+
   17098:	08 94       	sec
   1709a:	07 94       	ror	r0
   1709c:	28 f4       	brcc	.+10     	; 0x170a8 <__ftoa_engine+0x80>
   1709e:	36 0f       	add	r19, r22
   170a0:	e7 1e       	adc	r14, r23
   170a2:	f8 1e       	adc	r15, r24
   170a4:	49 1f       	adc	r20, r25
   170a6:	51 1d       	adc	r21, r1
   170a8:	66 0f       	add	r22, r22
   170aa:	77 1f       	adc	r23, r23
   170ac:	88 1f       	adc	r24, r24
   170ae:	99 1f       	adc	r25, r25
   170b0:	06 94       	lsr	r0
   170b2:	a1 f7       	brne	.-24     	; 0x1709c <__ftoa_engine+0x74>
   170b4:	05 90       	lpm	r0, Z+
   170b6:	07 94       	ror	r0
   170b8:	28 f4       	brcc	.+10     	; 0x170c4 <__ftoa_engine+0x9c>
   170ba:	e7 0e       	add	r14, r23
   170bc:	f8 1e       	adc	r15, r24
   170be:	49 1f       	adc	r20, r25
   170c0:	56 1f       	adc	r21, r22
   170c2:	c1 1d       	adc	r28, r1
   170c4:	77 0f       	add	r23, r23
   170c6:	88 1f       	adc	r24, r24
   170c8:	99 1f       	adc	r25, r25
   170ca:	66 1f       	adc	r22, r22
   170cc:	06 94       	lsr	r0
   170ce:	a1 f7       	brne	.-24     	; 0x170b8 <__ftoa_engine+0x90>
   170d0:	05 90       	lpm	r0, Z+
   170d2:	07 94       	ror	r0
   170d4:	28 f4       	brcc	.+10     	; 0x170e0 <__ftoa_engine+0xb8>
   170d6:	f8 0e       	add	r15, r24
   170d8:	49 1f       	adc	r20, r25
   170da:	56 1f       	adc	r21, r22
   170dc:	c7 1f       	adc	r28, r23
   170de:	d1 1d       	adc	r29, r1
   170e0:	88 0f       	add	r24, r24
   170e2:	99 1f       	adc	r25, r25
   170e4:	66 1f       	adc	r22, r22
   170e6:	77 1f       	adc	r23, r23
   170e8:	06 94       	lsr	r0
   170ea:	a1 f7       	brne	.-24     	; 0x170d4 <__ftoa_engine+0xac>
   170ec:	05 90       	lpm	r0, Z+
   170ee:	07 94       	ror	r0
   170f0:	20 f4       	brcc	.+8      	; 0x170fa <__ftoa_engine+0xd2>
   170f2:	49 0f       	add	r20, r25
   170f4:	56 1f       	adc	r21, r22
   170f6:	c7 1f       	adc	r28, r23
   170f8:	d8 1f       	adc	r29, r24
   170fa:	99 0f       	add	r25, r25
   170fc:	66 1f       	adc	r22, r22
   170fe:	77 1f       	adc	r23, r23
   17100:	88 1f       	adc	r24, r24
   17102:	06 94       	lsr	r0
   17104:	a9 f7       	brne	.-22     	; 0x170f0 <__ftoa_engine+0xc8>
   17106:	84 91       	lpm	r24, Z
   17108:	10 95       	com	r17
   1710a:	17 70       	andi	r17, 0x07	; 7
   1710c:	41 f0       	breq	.+16     	; 0x1711e <__ftoa_engine+0xf6>
   1710e:	d6 95       	lsr	r29
   17110:	c7 95       	ror	r28
   17112:	57 95       	ror	r21
   17114:	47 95       	ror	r20
   17116:	f7 94       	ror	r15
   17118:	e7 94       	ror	r14
   1711a:	1a 95       	dec	r17
   1711c:	c1 f7       	brne	.-16     	; 0x1710e <__ftoa_engine+0xe6>
   1711e:	eb ea       	ldi	r30, 0xAB	; 171
   17120:	f3 e0       	ldi	r31, 0x03	; 3
   17122:	68 94       	set
   17124:	15 90       	lpm	r1, Z+
   17126:	15 91       	lpm	r17, Z+
   17128:	35 91       	lpm	r19, Z+
   1712a:	65 91       	lpm	r22, Z+
   1712c:	95 91       	lpm	r25, Z+
   1712e:	05 90       	lpm	r0, Z+
   17130:	7f e2       	ldi	r23, 0x2F	; 47
   17132:	73 95       	inc	r23
   17134:	e1 18       	sub	r14, r1
   17136:	f1 0a       	sbc	r15, r17
   17138:	43 0b       	sbc	r20, r19
   1713a:	56 0b       	sbc	r21, r22
   1713c:	c9 0b       	sbc	r28, r25
   1713e:	d0 09       	sbc	r29, r0
   17140:	c0 f7       	brcc	.-16     	; 0x17132 <__ftoa_engine+0x10a>
   17142:	e1 0c       	add	r14, r1
   17144:	f1 1e       	adc	r15, r17
   17146:	43 1f       	adc	r20, r19
   17148:	56 1f       	adc	r21, r22
   1714a:	c9 1f       	adc	r28, r25
   1714c:	d0 1d       	adc	r29, r0
   1714e:	7e f4       	brtc	.+30     	; 0x1716e <__ftoa_engine+0x146>
   17150:	70 33       	cpi	r23, 0x30	; 48
   17152:	11 f4       	brne	.+4      	; 0x17158 <__ftoa_engine+0x130>
   17154:	8a 95       	dec	r24
   17156:	e6 cf       	rjmp	.-52     	; 0x17124 <__ftoa_engine+0xfc>
   17158:	e8 94       	clt
   1715a:	01 50       	subi	r16, 0x01	; 1
   1715c:	30 f0       	brcs	.+12     	; 0x1716a <__ftoa_engine+0x142>
   1715e:	08 0f       	add	r16, r24
   17160:	0a f4       	brpl	.+2      	; 0x17164 <__ftoa_engine+0x13c>
   17162:	00 27       	eor	r16, r16
   17164:	02 17       	cp	r16, r18
   17166:	08 f4       	brcc	.+2      	; 0x1716a <__ftoa_engine+0x142>
   17168:	20 2f       	mov	r18, r16
   1716a:	23 95       	inc	r18
   1716c:	02 2f       	mov	r16, r18
   1716e:	7a 33       	cpi	r23, 0x3A	; 58
   17170:	28 f0       	brcs	.+10     	; 0x1717c <__ftoa_engine+0x154>
   17172:	79 e3       	ldi	r23, 0x39	; 57
   17174:	7d 93       	st	X+, r23
   17176:	2a 95       	dec	r18
   17178:	e9 f7       	brne	.-6      	; 0x17174 <__ftoa_engine+0x14c>
   1717a:	10 c0       	rjmp	.+32     	; 0x1719c <__ftoa_engine+0x174>
   1717c:	7d 93       	st	X+, r23
   1717e:	2a 95       	dec	r18
   17180:	89 f6       	brne	.-94     	; 0x17124 <__ftoa_engine+0xfc>
   17182:	06 94       	lsr	r0
   17184:	97 95       	ror	r25
   17186:	67 95       	ror	r22
   17188:	37 95       	ror	r19
   1718a:	17 95       	ror	r17
   1718c:	17 94       	ror	r1
   1718e:	e1 18       	sub	r14, r1
   17190:	f1 0a       	sbc	r15, r17
   17192:	43 0b       	sbc	r20, r19
   17194:	56 0b       	sbc	r21, r22
   17196:	c9 0b       	sbc	r28, r25
   17198:	d0 09       	sbc	r29, r0
   1719a:	98 f0       	brcs	.+38     	; 0x171c2 <__ftoa_engine+0x19a>
   1719c:	23 95       	inc	r18
   1719e:	7e 91       	ld	r23, -X
   171a0:	73 95       	inc	r23
   171a2:	7a 33       	cpi	r23, 0x3A	; 58
   171a4:	08 f0       	brcs	.+2      	; 0x171a8 <__ftoa_engine+0x180>
   171a6:	70 e3       	ldi	r23, 0x30	; 48
   171a8:	7c 93       	st	X, r23
   171aa:	20 13       	cpse	r18, r16
   171ac:	b8 f7       	brcc	.-18     	; 0x1719c <__ftoa_engine+0x174>
   171ae:	7e 91       	ld	r23, -X
   171b0:	70 61       	ori	r23, 0x10	; 16
   171b2:	7d 93       	st	X+, r23
   171b4:	30 f0       	brcs	.+12     	; 0x171c2 <__ftoa_engine+0x19a>
   171b6:	83 95       	inc	r24
   171b8:	71 e3       	ldi	r23, 0x31	; 49
   171ba:	7d 93       	st	X+, r23
   171bc:	70 e3       	ldi	r23, 0x30	; 48
   171be:	2a 95       	dec	r18
   171c0:	e1 f7       	brne	.-8      	; 0x171ba <__ftoa_engine+0x192>
   171c2:	11 24       	eor	r1, r1
   171c4:	ef 90       	pop	r14
   171c6:	ff 90       	pop	r15
   171c8:	0f 91       	pop	r16
   171ca:	1f 91       	pop	r17
   171cc:	cf 91       	pop	r28
   171ce:	df 91       	pop	r29
   171d0:	99 27       	eor	r25, r25
   171d2:	87 fd       	sbrc	r24, 7
   171d4:	90 95       	com	r25
   171d6:	08 95       	ret

000171d8 <__ctype_isfalse>:
__ctype_isfalse():
   171d8:	99 27       	eor	r25, r25
   171da:	88 27       	eor	r24, r24

000171dc <__ctype_istrue>:
__ctype_istrue():
   171dc:	08 95       	ret

000171de <strncasecmp_P>:
strncasecmp_P():
   171de:	fb 01       	movw	r30, r22
   171e0:	dc 01       	movw	r26, r24
   171e2:	41 50       	subi	r20, 0x01	; 1
   171e4:	50 40       	sbci	r21, 0x00	; 0
   171e6:	88 f0       	brcs	.+34     	; 0x1720a <strncasecmp_P+0x2c>
   171e8:	8d 91       	ld	r24, X+
   171ea:	81 34       	cpi	r24, 0x41	; 65
   171ec:	1c f0       	brlt	.+6      	; 0x171f4 <strncasecmp_P+0x16>
   171ee:	8b 35       	cpi	r24, 0x5B	; 91
   171f0:	0c f4       	brge	.+2      	; 0x171f4 <strncasecmp_P+0x16>
   171f2:	80 5e       	subi	r24, 0xE0	; 224
   171f4:	65 91       	lpm	r22, Z+
   171f6:	61 34       	cpi	r22, 0x41	; 65
   171f8:	1c f0       	brlt	.+6      	; 0x17200 <strncasecmp_P+0x22>
   171fa:	6b 35       	cpi	r22, 0x5B	; 91
   171fc:	0c f4       	brge	.+2      	; 0x17200 <strncasecmp_P+0x22>
   171fe:	60 5e       	subi	r22, 0xE0	; 224
   17200:	86 1b       	sub	r24, r22
   17202:	61 11       	cpse	r22, r1
   17204:	71 f3       	breq	.-36     	; 0x171e2 <strncasecmp_P+0x4>
   17206:	99 0b       	sbc	r25, r25
   17208:	08 95       	ret
   1720a:	88 1b       	sub	r24, r24
   1720c:	fc cf       	rjmp	.-8      	; 0x17206 <strncasecmp_P+0x28>

0001720e <strnlen_P>:
strnlen_P():
   1720e:	fc 01       	movw	r30, r24
   17210:	05 90       	lpm	r0, Z+
   17212:	61 50       	subi	r22, 0x01	; 1
   17214:	70 40       	sbci	r23, 0x00	; 0
   17216:	01 10       	cpse	r0, r1
   17218:	d8 f7       	brcc	.-10     	; 0x17210 <strnlen_P+0x2>
   1721a:	80 95       	com	r24
   1721c:	90 95       	com	r25
   1721e:	8e 0f       	add	r24, r30
   17220:	9f 1f       	adc	r25, r31
   17222:	08 95       	ret

00017224 <memset>:
memset():
   17224:	dc 01       	movw	r26, r24
   17226:	01 c0       	rjmp	.+2      	; 0x1722a <memset+0x6>
   17228:	6d 93       	st	X+, r22
   1722a:	41 50       	subi	r20, 0x01	; 1
   1722c:	50 40       	sbci	r21, 0x00	; 0
   1722e:	e0 f7       	brcc	.-8      	; 0x17228 <memset+0x4>
   17230:	08 95       	ret

00017232 <strnlen>:
strnlen():
   17232:	fc 01       	movw	r30, r24
   17234:	61 50       	subi	r22, 0x01	; 1
   17236:	70 40       	sbci	r23, 0x00	; 0
   17238:	01 90       	ld	r0, Z+
   1723a:	01 10       	cpse	r0, r1
   1723c:	d8 f7       	brcc	.-10     	; 0x17234 <strnlen+0x2>
   1723e:	80 95       	com	r24
   17240:	90 95       	com	r25
   17242:	8e 0f       	add	r24, r30
   17244:	9f 1f       	adc	r25, r31
   17246:	08 95       	ret

00017248 <strrev>:
strrev():
   17248:	dc 01       	movw	r26, r24
   1724a:	fc 01       	movw	r30, r24
   1724c:	67 2f       	mov	r22, r23
   1724e:	71 91       	ld	r23, Z+
   17250:	77 23       	and	r23, r23
   17252:	e1 f7       	brne	.-8      	; 0x1724c <strrev+0x4>
   17254:	32 97       	sbiw	r30, 0x02	; 2
   17256:	04 c0       	rjmp	.+8      	; 0x17260 <strrev+0x18>
   17258:	7c 91       	ld	r23, X
   1725a:	6d 93       	st	X+, r22
   1725c:	70 83       	st	Z, r23
   1725e:	62 91       	ld	r22, -Z
   17260:	ae 17       	cp	r26, r30
   17262:	bf 07       	cpc	r27, r31
   17264:	c8 f3       	brcs	.-14     	; 0x17258 <strrev+0x10>
   17266:	08 95       	ret

00017268 <fputc>:
fputc():
   17268:	0f 93       	push	r16
   1726a:	1f 93       	push	r17
   1726c:	cf 93       	push	r28
   1726e:	df 93       	push	r29
   17270:	18 2f       	mov	r17, r24
   17272:	09 2f       	mov	r16, r25
   17274:	eb 01       	movw	r28, r22
   17276:	8b 81       	ldd	r24, Y+3	; 0x03
   17278:	81 fd       	sbrc	r24, 1
   1727a:	09 c0       	rjmp	.+18     	; 0x1728e <fputc+0x26>
   1727c:	1f ef       	ldi	r17, 0xFF	; 255
   1727e:	0f ef       	ldi	r16, 0xFF	; 255
   17280:	81 2f       	mov	r24, r17
   17282:	90 2f       	mov	r25, r16
   17284:	df 91       	pop	r29
   17286:	cf 91       	pop	r28
   17288:	1f 91       	pop	r17
   1728a:	0f 91       	pop	r16
   1728c:	08 95       	ret
   1728e:	82 ff       	sbrs	r24, 2
   17290:	14 c0       	rjmp	.+40     	; 0x172ba <fputc+0x52>
   17292:	2e 81       	ldd	r18, Y+6	; 0x06
   17294:	3f 81       	ldd	r19, Y+7	; 0x07
   17296:	8c 81       	ldd	r24, Y+4	; 0x04
   17298:	9d 81       	ldd	r25, Y+5	; 0x05
   1729a:	28 17       	cp	r18, r24
   1729c:	39 07       	cpc	r19, r25
   1729e:	3c f4       	brge	.+14     	; 0x172ae <fputc+0x46>
   172a0:	e8 81       	ld	r30, Y
   172a2:	f9 81       	ldd	r31, Y+1	; 0x01
   172a4:	cf 01       	movw	r24, r30
   172a6:	01 96       	adiw	r24, 0x01	; 1
   172a8:	99 83       	std	Y+1, r25	; 0x01
   172aa:	88 83       	st	Y, r24
   172ac:	10 83       	st	Z, r17
   172ae:	8e 81       	ldd	r24, Y+6	; 0x06
   172b0:	9f 81       	ldd	r25, Y+7	; 0x07
   172b2:	01 96       	adiw	r24, 0x01	; 1
   172b4:	9f 83       	std	Y+7, r25	; 0x07
   172b6:	8e 83       	std	Y+6, r24	; 0x06
   172b8:	e3 cf       	rjmp	.-58     	; 0x17280 <fputc+0x18>
   172ba:	e8 85       	ldd	r30, Y+8	; 0x08
   172bc:	f9 85       	ldd	r31, Y+9	; 0x09
   172be:	81 2f       	mov	r24, r17
   172c0:	19 95       	eicall
   172c2:	89 2b       	or	r24, r25
   172c4:	a1 f3       	breq	.-24     	; 0x172ae <fputc+0x46>
   172c6:	da cf       	rjmp	.-76     	; 0x1727c <fputc+0x14>

000172c8 <__ultoa_invert>:
__ultoa_invert():
   172c8:	fa 01       	movw	r30, r20
   172ca:	aa 27       	eor	r26, r26
   172cc:	28 30       	cpi	r18, 0x08	; 8
   172ce:	51 f1       	breq	.+84     	; 0x17324 <__ultoa_invert+0x5c>
   172d0:	20 31       	cpi	r18, 0x10	; 16
   172d2:	81 f1       	breq	.+96     	; 0x17334 <__ultoa_invert+0x6c>
   172d4:	e8 94       	clt
   172d6:	6f 93       	push	r22
   172d8:	6e 7f       	andi	r22, 0xFE	; 254
   172da:	6e 5f       	subi	r22, 0xFE	; 254
   172dc:	7f 4f       	sbci	r23, 0xFF	; 255
   172de:	8f 4f       	sbci	r24, 0xFF	; 255
   172e0:	9f 4f       	sbci	r25, 0xFF	; 255
   172e2:	af 4f       	sbci	r26, 0xFF	; 255
   172e4:	b1 e0       	ldi	r27, 0x01	; 1
   172e6:	3e d0       	rcall	.+124    	; 0x17364 <__ultoa_invert+0x9c>
   172e8:	b4 e0       	ldi	r27, 0x04	; 4
   172ea:	3c d0       	rcall	.+120    	; 0x17364 <__ultoa_invert+0x9c>
   172ec:	67 0f       	add	r22, r23
   172ee:	78 1f       	adc	r23, r24
   172f0:	89 1f       	adc	r24, r25
   172f2:	9a 1f       	adc	r25, r26
   172f4:	a1 1d       	adc	r26, r1
   172f6:	68 0f       	add	r22, r24
   172f8:	79 1f       	adc	r23, r25
   172fa:	8a 1f       	adc	r24, r26
   172fc:	91 1d       	adc	r25, r1
   172fe:	a1 1d       	adc	r26, r1
   17300:	6a 0f       	add	r22, r26
   17302:	71 1d       	adc	r23, r1
   17304:	81 1d       	adc	r24, r1
   17306:	91 1d       	adc	r25, r1
   17308:	a1 1d       	adc	r26, r1
   1730a:	20 d0       	rcall	.+64     	; 0x1734c <__ultoa_invert+0x84>
   1730c:	09 f4       	brne	.+2      	; 0x17310 <__ultoa_invert+0x48>
   1730e:	68 94       	set
   17310:	3f 91       	pop	r19
   17312:	2a e0       	ldi	r18, 0x0A	; 10
   17314:	26 9f       	mul	r18, r22
   17316:	11 24       	eor	r1, r1
   17318:	30 19       	sub	r19, r0
   1731a:	30 5d       	subi	r19, 0xD0	; 208
   1731c:	31 93       	st	Z+, r19
   1731e:	de f6       	brtc	.-74     	; 0x172d6 <__ultoa_invert+0xe>
   17320:	cf 01       	movw	r24, r30
   17322:	08 95       	ret
   17324:	46 2f       	mov	r20, r22
   17326:	47 70       	andi	r20, 0x07	; 7
   17328:	40 5d       	subi	r20, 0xD0	; 208
   1732a:	41 93       	st	Z+, r20
   1732c:	b3 e0       	ldi	r27, 0x03	; 3
   1732e:	0f d0       	rcall	.+30     	; 0x1734e <__ultoa_invert+0x86>
   17330:	c9 f7       	brne	.-14     	; 0x17324 <__ultoa_invert+0x5c>
   17332:	f6 cf       	rjmp	.-20     	; 0x17320 <__ultoa_invert+0x58>
   17334:	46 2f       	mov	r20, r22
   17336:	4f 70       	andi	r20, 0x0F	; 15
   17338:	40 5d       	subi	r20, 0xD0	; 208
   1733a:	4a 33       	cpi	r20, 0x3A	; 58
   1733c:	18 f0       	brcs	.+6      	; 0x17344 <__ultoa_invert+0x7c>
   1733e:	49 5d       	subi	r20, 0xD9	; 217
   17340:	31 fd       	sbrc	r19, 1
   17342:	40 52       	subi	r20, 0x20	; 32
   17344:	41 93       	st	Z+, r20
   17346:	02 d0       	rcall	.+4      	; 0x1734c <__ultoa_invert+0x84>
   17348:	a9 f7       	brne	.-22     	; 0x17334 <__ultoa_invert+0x6c>
   1734a:	ea cf       	rjmp	.-44     	; 0x17320 <__ultoa_invert+0x58>
   1734c:	b4 e0       	ldi	r27, 0x04	; 4
   1734e:	a6 95       	lsr	r26
   17350:	97 95       	ror	r25
   17352:	87 95       	ror	r24
   17354:	77 95       	ror	r23
   17356:	67 95       	ror	r22
   17358:	ba 95       	dec	r27
   1735a:	c9 f7       	brne	.-14     	; 0x1734e <__ultoa_invert+0x86>
   1735c:	00 97       	sbiw	r24, 0x00	; 0
   1735e:	61 05       	cpc	r22, r1
   17360:	71 05       	cpc	r23, r1
   17362:	08 95       	ret
   17364:	9b 01       	movw	r18, r22
   17366:	ac 01       	movw	r20, r24
   17368:	0a 2e       	mov	r0, r26
   1736a:	06 94       	lsr	r0
   1736c:	57 95       	ror	r21
   1736e:	47 95       	ror	r20
   17370:	37 95       	ror	r19
   17372:	27 95       	ror	r18
   17374:	ba 95       	dec	r27
   17376:	c9 f7       	brne	.-14     	; 0x1736a <__ultoa_invert+0xa2>
   17378:	62 0f       	add	r22, r18
   1737a:	73 1f       	adc	r23, r19
   1737c:	84 1f       	adc	r24, r20
   1737e:	95 1f       	adc	r25, r21
   17380:	a0 1d       	adc	r26, r0
   17382:	08 95       	ret

00017384 <__cmpsf2>:
__cmpsf2():
   17384:	0e 94 04 ba 	call	0x17408	; 0x17408 <__fp_cmp>
   17388:	08 f4       	brcc	.+2      	; 0x1738c <__cmpsf2+0x8>
   1738a:	81 e0       	ldi	r24, 0x01	; 1
   1738c:	08 95       	ret

0001738e <__floatunsisf>:
__floatunsisf():
   1738e:	e8 94       	clt
   17390:	09 c0       	rjmp	.+18     	; 0x173a4 <__floatsisf+0x12>

00017392 <__floatsisf>:
   17392:	97 fb       	bst	r25, 7
   17394:	3e f4       	brtc	.+14     	; 0x173a4 <__floatsisf+0x12>
   17396:	90 95       	com	r25
   17398:	80 95       	com	r24
   1739a:	70 95       	com	r23
   1739c:	61 95       	neg	r22
   1739e:	7f 4f       	sbci	r23, 0xFF	; 255
   173a0:	8f 4f       	sbci	r24, 0xFF	; 255
   173a2:	9f 4f       	sbci	r25, 0xFF	; 255
   173a4:	99 23       	and	r25, r25
   173a6:	a9 f0       	breq	.+42     	; 0x173d2 <__floatsisf+0x40>
   173a8:	f9 2f       	mov	r31, r25
   173aa:	96 e9       	ldi	r25, 0x96	; 150
   173ac:	bb 27       	eor	r27, r27
   173ae:	93 95       	inc	r25
   173b0:	f6 95       	lsr	r31
   173b2:	87 95       	ror	r24
   173b4:	77 95       	ror	r23
   173b6:	67 95       	ror	r22
   173b8:	b7 95       	ror	r27
   173ba:	f1 11       	cpse	r31, r1
   173bc:	f8 cf       	rjmp	.-16     	; 0x173ae <__floatsisf+0x1c>
   173be:	fa f4       	brpl	.+62     	; 0x173fe <__floatsisf+0x6c>
   173c0:	bb 0f       	add	r27, r27
   173c2:	11 f4       	brne	.+4      	; 0x173c8 <__floatsisf+0x36>
   173c4:	60 ff       	sbrs	r22, 0
   173c6:	1b c0       	rjmp	.+54     	; 0x173fe <__floatsisf+0x6c>
   173c8:	6f 5f       	subi	r22, 0xFF	; 255
   173ca:	7f 4f       	sbci	r23, 0xFF	; 255
   173cc:	8f 4f       	sbci	r24, 0xFF	; 255
   173ce:	9f 4f       	sbci	r25, 0xFF	; 255
   173d0:	16 c0       	rjmp	.+44     	; 0x173fe <__floatsisf+0x6c>
   173d2:	88 23       	and	r24, r24
   173d4:	11 f0       	breq	.+4      	; 0x173da <__floatsisf+0x48>
   173d6:	96 e9       	ldi	r25, 0x96	; 150
   173d8:	11 c0       	rjmp	.+34     	; 0x173fc <__floatsisf+0x6a>
   173da:	77 23       	and	r23, r23
   173dc:	21 f0       	breq	.+8      	; 0x173e6 <__floatsisf+0x54>
   173de:	9e e8       	ldi	r25, 0x8E	; 142
   173e0:	87 2f       	mov	r24, r23
   173e2:	76 2f       	mov	r23, r22
   173e4:	05 c0       	rjmp	.+10     	; 0x173f0 <__floatsisf+0x5e>
   173e6:	66 23       	and	r22, r22
   173e8:	71 f0       	breq	.+28     	; 0x17406 <__floatsisf+0x74>
   173ea:	96 e8       	ldi	r25, 0x86	; 134
   173ec:	86 2f       	mov	r24, r22
   173ee:	70 e0       	ldi	r23, 0x00	; 0
   173f0:	60 e0       	ldi	r22, 0x00	; 0
   173f2:	2a f0       	brmi	.+10     	; 0x173fe <__floatsisf+0x6c>
   173f4:	9a 95       	dec	r25
   173f6:	66 0f       	add	r22, r22
   173f8:	77 1f       	adc	r23, r23
   173fa:	88 1f       	adc	r24, r24
   173fc:	da f7       	brpl	.-10     	; 0x173f4 <__floatsisf+0x62>
   173fe:	88 0f       	add	r24, r24
   17400:	96 95       	lsr	r25
   17402:	87 95       	ror	r24
   17404:	97 f9       	bld	r25, 7
   17406:	08 95       	ret

00017408 <__fp_cmp>:
__fp_cmp():
   17408:	99 0f       	add	r25, r25
   1740a:	00 08       	sbc	r0, r0
   1740c:	55 0f       	add	r21, r21
   1740e:	aa 0b       	sbc	r26, r26
   17410:	e0 e8       	ldi	r30, 0x80	; 128
   17412:	fe ef       	ldi	r31, 0xFE	; 254
   17414:	16 16       	cp	r1, r22
   17416:	17 06       	cpc	r1, r23
   17418:	e8 07       	cpc	r30, r24
   1741a:	f9 07       	cpc	r31, r25
   1741c:	c0 f0       	brcs	.+48     	; 0x1744e <__fp_cmp+0x46>
   1741e:	12 16       	cp	r1, r18
   17420:	13 06       	cpc	r1, r19
   17422:	e4 07       	cpc	r30, r20
   17424:	f5 07       	cpc	r31, r21
   17426:	98 f0       	brcs	.+38     	; 0x1744e <__fp_cmp+0x46>
   17428:	62 1b       	sub	r22, r18
   1742a:	73 0b       	sbc	r23, r19
   1742c:	84 0b       	sbc	r24, r20
   1742e:	95 0b       	sbc	r25, r21
   17430:	39 f4       	brne	.+14     	; 0x17440 <__fp_cmp+0x38>
   17432:	0a 26       	eor	r0, r26
   17434:	61 f0       	breq	.+24     	; 0x1744e <__fp_cmp+0x46>
   17436:	23 2b       	or	r18, r19
   17438:	24 2b       	or	r18, r20
   1743a:	25 2b       	or	r18, r21
   1743c:	21 f4       	brne	.+8      	; 0x17446 <__fp_cmp+0x3e>
   1743e:	08 95       	ret
   17440:	0a 26       	eor	r0, r26
   17442:	09 f4       	brne	.+2      	; 0x17446 <__fp_cmp+0x3e>
   17444:	a1 40       	sbci	r26, 0x01	; 1
   17446:	a6 95       	lsr	r26
   17448:	8f ef       	ldi	r24, 0xFF	; 255
   1744a:	81 1d       	adc	r24, r1
   1744c:	81 1d       	adc	r24, r1
   1744e:	08 95       	ret

00017450 <__mulsf3>:
__mulsf3():
   17450:	0e 94 3b ba 	call	0x17476	; 0x17476 <__mulsf3x>
   17454:	0c 94 ac ba 	jmp	0x17558	; 0x17558 <__fp_round>
   17458:	0e 94 9e ba 	call	0x1753c	; 0x1753c <__fp_pscA>
   1745c:	38 f0       	brcs	.+14     	; 0x1746c <__mulsf3+0x1c>
   1745e:	0e 94 a5 ba 	call	0x1754a	; 0x1754a <__fp_pscB>
   17462:	20 f0       	brcs	.+8      	; 0x1746c <__mulsf3+0x1c>
   17464:	95 23       	and	r25, r21
   17466:	11 f0       	breq	.+4      	; 0x1746c <__mulsf3+0x1c>
   17468:	0c 94 95 ba 	jmp	0x1752a	; 0x1752a <__fp_inf>
   1746c:	0c 94 9b ba 	jmp	0x17536	; 0x17536 <__fp_nan>
   17470:	11 24       	eor	r1, r1
   17472:	0c 94 e0 ba 	jmp	0x175c0	; 0x175c0 <__fp_szero>

00017476 <__mulsf3x>:
__mulsf3x():
   17476:	0e 94 bd ba 	call	0x1757a	; 0x1757a <__fp_split3>
   1747a:	70 f3       	brcs	.-36     	; 0x17458 <__mulsf3+0x8>

0001747c <__mulsf3_pse>:
   1747c:	95 9f       	mul	r25, r21
   1747e:	c1 f3       	breq	.-16     	; 0x17470 <__mulsf3+0x20>
   17480:	95 0f       	add	r25, r21
   17482:	50 e0       	ldi	r21, 0x00	; 0
   17484:	55 1f       	adc	r21, r21
   17486:	62 9f       	mul	r22, r18
   17488:	f0 01       	movw	r30, r0
   1748a:	72 9f       	mul	r23, r18
   1748c:	bb 27       	eor	r27, r27
   1748e:	f0 0d       	add	r31, r0
   17490:	b1 1d       	adc	r27, r1
   17492:	63 9f       	mul	r22, r19
   17494:	aa 27       	eor	r26, r26
   17496:	f0 0d       	add	r31, r0
   17498:	b1 1d       	adc	r27, r1
   1749a:	aa 1f       	adc	r26, r26
   1749c:	64 9f       	mul	r22, r20
   1749e:	66 27       	eor	r22, r22
   174a0:	b0 0d       	add	r27, r0
   174a2:	a1 1d       	adc	r26, r1
   174a4:	66 1f       	adc	r22, r22
   174a6:	82 9f       	mul	r24, r18
   174a8:	22 27       	eor	r18, r18
   174aa:	b0 0d       	add	r27, r0
   174ac:	a1 1d       	adc	r26, r1
   174ae:	62 1f       	adc	r22, r18
   174b0:	73 9f       	mul	r23, r19
   174b2:	b0 0d       	add	r27, r0
   174b4:	a1 1d       	adc	r26, r1
   174b6:	62 1f       	adc	r22, r18
   174b8:	83 9f       	mul	r24, r19
   174ba:	a0 0d       	add	r26, r0
   174bc:	61 1d       	adc	r22, r1
   174be:	22 1f       	adc	r18, r18
   174c0:	74 9f       	mul	r23, r20
   174c2:	33 27       	eor	r19, r19
   174c4:	a0 0d       	add	r26, r0
   174c6:	61 1d       	adc	r22, r1
   174c8:	23 1f       	adc	r18, r19
   174ca:	84 9f       	mul	r24, r20
   174cc:	60 0d       	add	r22, r0
   174ce:	21 1d       	adc	r18, r1
   174d0:	82 2f       	mov	r24, r18
   174d2:	76 2f       	mov	r23, r22
   174d4:	6a 2f       	mov	r22, r26
   174d6:	11 24       	eor	r1, r1
   174d8:	9f 57       	subi	r25, 0x7F	; 127
   174da:	50 40       	sbci	r21, 0x00	; 0
   174dc:	9a f0       	brmi	.+38     	; 0x17504 <__mulsf3_pse+0x88>
   174de:	f1 f0       	breq	.+60     	; 0x1751c <__mulsf3_pse+0xa0>
   174e0:	88 23       	and	r24, r24
   174e2:	4a f0       	brmi	.+18     	; 0x174f6 <__mulsf3_pse+0x7a>
   174e4:	ee 0f       	add	r30, r30
   174e6:	ff 1f       	adc	r31, r31
   174e8:	bb 1f       	adc	r27, r27
   174ea:	66 1f       	adc	r22, r22
   174ec:	77 1f       	adc	r23, r23
   174ee:	88 1f       	adc	r24, r24
   174f0:	91 50       	subi	r25, 0x01	; 1
   174f2:	50 40       	sbci	r21, 0x00	; 0
   174f4:	a9 f7       	brne	.-22     	; 0x174e0 <__mulsf3_pse+0x64>
   174f6:	9e 3f       	cpi	r25, 0xFE	; 254
   174f8:	51 05       	cpc	r21, r1
   174fa:	80 f0       	brcs	.+32     	; 0x1751c <__mulsf3_pse+0xa0>
   174fc:	0c 94 95 ba 	jmp	0x1752a	; 0x1752a <__fp_inf>
   17500:	0c 94 e0 ba 	jmp	0x175c0	; 0x175c0 <__fp_szero>
   17504:	5f 3f       	cpi	r21, 0xFF	; 255
   17506:	e4 f3       	brlt	.-8      	; 0x17500 <__mulsf3_pse+0x84>
   17508:	98 3e       	cpi	r25, 0xE8	; 232
   1750a:	d4 f3       	brlt	.-12     	; 0x17500 <__mulsf3_pse+0x84>
   1750c:	86 95       	lsr	r24
   1750e:	77 95       	ror	r23
   17510:	67 95       	ror	r22
   17512:	b7 95       	ror	r27
   17514:	f7 95       	ror	r31
   17516:	e7 95       	ror	r30
   17518:	9f 5f       	subi	r25, 0xFF	; 255
   1751a:	c1 f7       	brne	.-16     	; 0x1750c <__mulsf3_pse+0x90>
   1751c:	fe 2b       	or	r31, r30
   1751e:	88 0f       	add	r24, r24
   17520:	91 1d       	adc	r25, r1
   17522:	96 95       	lsr	r25
   17524:	87 95       	ror	r24
   17526:	97 f9       	bld	r25, 7
   17528:	08 95       	ret

0001752a <__fp_inf>:
   1752a:	97 f9       	bld	r25, 7
   1752c:	9f 67       	ori	r25, 0x7F	; 127
   1752e:	80 e8       	ldi	r24, 0x80	; 128
   17530:	70 e0       	ldi	r23, 0x00	; 0
   17532:	60 e0       	ldi	r22, 0x00	; 0
   17534:	08 95       	ret

00017536 <__fp_nan>:
   17536:	9f ef       	ldi	r25, 0xFF	; 255
   17538:	80 ec       	ldi	r24, 0xC0	; 192
   1753a:	08 95       	ret

0001753c <__fp_pscA>:
   1753c:	00 24       	eor	r0, r0
   1753e:	0a 94       	dec	r0
   17540:	16 16       	cp	r1, r22
   17542:	17 06       	cpc	r1, r23
   17544:	18 06       	cpc	r1, r24
   17546:	09 06       	cpc	r0, r25
__fp_pscA():
   17548:	08 95       	ret

0001754a <__fp_pscB>:
__fp_pscB():
   1754a:	00 24       	eor	r0, r0
   1754c:	0a 94       	dec	r0
   1754e:	12 16       	cp	r1, r18
   17550:	13 06       	cpc	r1, r19
   17552:	14 06       	cpc	r1, r20
   17554:	05 06       	cpc	r0, r21
   17556:	08 95       	ret

00017558 <__fp_round>:
__fp_round():
   17558:	09 2e       	mov	r0, r25
   1755a:	03 94       	inc	r0
   1755c:	00 0c       	add	r0, r0
   1755e:	11 f4       	brne	.+4      	; 0x17564 <__fp_round+0xc>
   17560:	88 23       	and	r24, r24
   17562:	52 f0       	brmi	.+20     	; 0x17578 <__fp_round+0x20>
   17564:	bb 0f       	add	r27, r27
   17566:	40 f4       	brcc	.+16     	; 0x17578 <__fp_round+0x20>
   17568:	bf 2b       	or	r27, r31
   1756a:	11 f4       	brne	.+4      	; 0x17570 <__fp_round+0x18>
   1756c:	60 ff       	sbrs	r22, 0
   1756e:	04 c0       	rjmp	.+8      	; 0x17578 <__fp_round+0x20>
   17570:	6f 5f       	subi	r22, 0xFF	; 255
   17572:	7f 4f       	sbci	r23, 0xFF	; 255
   17574:	8f 4f       	sbci	r24, 0xFF	; 255
   17576:	9f 4f       	sbci	r25, 0xFF	; 255
   17578:	08 95       	ret

0001757a <__fp_split3>:
__fp_split3():
   1757a:	57 fd       	sbrc	r21, 7
   1757c:	90 58       	subi	r25, 0x80	; 128
   1757e:	44 0f       	add	r20, r20
   17580:	55 1f       	adc	r21, r21
   17582:	59 f0       	breq	.+22     	; 0x1759a <__fp_splitA+0x10>
   17584:	5f 3f       	cpi	r21, 0xFF	; 255
   17586:	71 f0       	breq	.+28     	; 0x175a4 <__fp_splitA+0x1a>
   17588:	47 95       	ror	r20

0001758a <__fp_splitA>:
   1758a:	88 0f       	add	r24, r24
   1758c:	97 fb       	bst	r25, 7
   1758e:	99 1f       	adc	r25, r25
   17590:	61 f0       	breq	.+24     	; 0x175aa <__fp_splitA+0x20>
   17592:	9f 3f       	cpi	r25, 0xFF	; 255
   17594:	79 f0       	breq	.+30     	; 0x175b4 <__fp_splitA+0x2a>
   17596:	87 95       	ror	r24
   17598:	08 95       	ret
   1759a:	12 16       	cp	r1, r18
   1759c:	13 06       	cpc	r1, r19
   1759e:	14 06       	cpc	r1, r20
   175a0:	55 1f       	adc	r21, r21
   175a2:	f2 cf       	rjmp	.-28     	; 0x17588 <__fp_split3+0xe>
   175a4:	46 95       	lsr	r20
   175a6:	f1 df       	rcall	.-30     	; 0x1758a <__fp_splitA>
   175a8:	08 c0       	rjmp	.+16     	; 0x175ba <__fp_splitA+0x30>
   175aa:	16 16       	cp	r1, r22
   175ac:	17 06       	cpc	r1, r23
   175ae:	18 06       	cpc	r1, r24
   175b0:	99 1f       	adc	r25, r25
   175b2:	f1 cf       	rjmp	.-30     	; 0x17596 <__fp_splitA+0xc>
   175b4:	86 95       	lsr	r24
   175b6:	71 05       	cpc	r23, r1
   175b8:	61 05       	cpc	r22, r1
   175ba:	08 94       	sec
   175bc:	08 95       	ret

000175be <__fp_zero>:
__fp_zero():
   175be:	e8 94       	clt

000175c0 <__fp_szero>:
   175c0:	bb 27       	eor	r27, r27
   175c2:	66 27       	eor	r22, r22
   175c4:	77 27       	eor	r23, r23
   175c6:	cb 01       	movw	r24, r22
   175c8:	97 f9       	bld	r25, 7
   175ca:	08 95       	ret

000175cc <eeprom_read_byte>:
eeprom_read_byte():
   175cc:	f9 99       	sbic	0x1f, 1	; 31
   175ce:	fe cf       	rjmp	.-4      	; 0x175cc <eeprom_read_byte>
   175d0:	92 bd       	out	0x22, r25	; 34
   175d2:	81 bd       	out	0x21, r24	; 33
   175d4:	f8 9a       	sbi	0x1f, 0	; 31
   175d6:	99 27       	eor	r25, r25
   175d8:	80 b5       	in	r24, 0x20	; 32
   175da:	08 95       	ret

000175dc <eeprom_write_byte>:
eeprom_write_byte():
   175dc:	26 2f       	mov	r18, r22

000175de <eeprom_write_r18>:
   175de:	f9 99       	sbic	0x1f, 1	; 31
   175e0:	fe cf       	rjmp	.-4      	; 0x175de <eeprom_write_r18>
   175e2:	1f ba       	out	0x1f, r1	; 31
   175e4:	92 bd       	out	0x22, r25	; 34
   175e6:	81 bd       	out	0x21, r24	; 33
   175e8:	20 bd       	out	0x20, r18	; 32
   175ea:	0f b6       	in	r0, 0x3f	; 63
   175ec:	f8 94       	cli
   175ee:	fa 9a       	sbi	0x1f, 2	; 31
   175f0:	f9 9a       	sbi	0x1f, 1	; 31
   175f2:	0f be       	out	0x3f, r0	; 63
   175f4:	01 96       	adiw	r24, 0x01	; 1
   175f6:	08 95       	ret

000175f8 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   175f8:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   175fa:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   175fc:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   175fe:	0e 94 75 bb 	call	0x176ea	; 0x176ea <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   17602:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   17604:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   17606:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   17608:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1760a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1760c:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1760e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   17610:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   17612:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   17614:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   17616:	08 95       	ret

00017618 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   17618:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1761a:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1761c:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1761e:	07 c0       	rjmp	.+14     	; 0x1762e <__udivmodhi4_ep>

00017620 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   17620:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   17622:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   17624:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   17626:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   17628:	10 f0       	brcs	.+4      	; 0x1762e <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1762a:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1762c:	b7 0b       	sbc	r27, r23

0001762e <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1762e:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   17630:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   17632:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   17634:	a9 f7       	brne	.-22     	; 0x17620 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   17636:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   17638:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1763a:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1763c:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1763e:	08 95       	ret

00017640 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   17640:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   17642:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   17644:	16 f4       	brtc	.+4      	; 0x1764a <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   17646:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   17648:	07 d0       	rcall	.+14     	; 0x17658 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1764a:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1764c:	09 d0       	rcall	.+18     	; 0x17660 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1764e:	0e 94 0c bb 	call	0x17618	; 0x17618 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   17652:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   17654:	05 d0       	rcall	.+10     	; 0x17660 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   17656:	3e f4       	brtc	.+14     	; 0x17666 <__divmodhi4_exit>

00017658 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   17658:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1765a:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1765c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1765e:	08 95       	ret

00017660 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   17660:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   17662:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   17664:	7f 4f       	sbci	r23, 0xFF	; 255

00017666 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   17666:	08 95       	ret

00017668 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   17668:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1766a:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1766c:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1766e:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   17670:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   17672:	0d c0       	rjmp	.+26     	; 0x1768e <__udivmodsi4_ep>

00017674 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   17674:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   17676:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   17678:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1767a:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1767c:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1767e:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   17680:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   17682:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   17684:	20 f0       	brcs	.+8      	; 0x1768e <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   17686:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   17688:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1768a:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1768c:	f5 0b       	sbc	r31, r21

0001768e <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1768e:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   17690:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   17692:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   17694:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   17696:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   17698:	69 f7       	brne	.-38     	; 0x17674 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1769a:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1769c:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1769e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   176a0:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   176a2:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   176a4:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   176a6:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   176a8:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   176aa:	08 95       	ret

000176ac <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   176ac:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   176ae:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   176b0:	1e f4       	brtc	.+6      	; 0x176b8 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   176b2:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   176b4:	0e 94 6d bb 	call	0x176da	; 0x176da <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   176b8:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   176ba:	07 d0       	rcall	.+14     	; 0x176ca <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   176bc:	0e 94 34 bb 	call	0x17668	; 0x17668 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   176c0:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   176c2:	03 d0       	rcall	.+6      	; 0x176ca <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   176c4:	4e f4       	brtc	.+18     	; 0x176d8 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   176c6:	0c 94 6d bb 	jmp	0x176da	; 0x176da <__negsi2>

000176ca <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   176ca:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   176cc:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   176ce:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   176d0:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   176d2:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   176d4:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   176d6:	5f 4f       	sbci	r21, 0xFF	; 255

000176d8 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   176d8:	08 95       	ret

000176da <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   176da:	90 95       	com	r25
   176dc:	80 95       	com	r24
   176de:	70 95       	com	r23
   176e0:	61 95       	neg	r22
   176e2:	7f 4f       	sbci	r23, 0xFF	; 255
   176e4:	8f 4f       	sbci	r24, 0xFF	; 255
   176e6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   176e8:	08 95       	ret

000176ea <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   176ea:	0e 94 80 bb 	call	0x17700	; 0x17700 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   176ee:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   176f0:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   176f2:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   176f4:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   176f6:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   176f8:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   176fa:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   176fc:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   176fe:	08 95       	ret

00017700 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   17700:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   17702:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   17704:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   17706:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   17708:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1770a:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1770c:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1770e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   17710:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   17712:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   17714:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   17716:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   17718:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1771a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1771c:	08 95       	ret

0001771e <__subsf3>:
__subsf3():
   1771e:	50 58       	subi	r21, 0x80	; 128

00017720 <__addsf3>:
   17720:	bb 27       	eor	r27, r27
   17722:	aa 27       	eor	r26, r26
   17724:	0e 94 a7 bb 	call	0x1774e	; 0x1774e <__addsf3x>
   17728:	0c 94 ac ba 	jmp	0x17558	; 0x17558 <__fp_round>
__addsf3():
   1772c:	0e 94 9e ba 	call	0x1753c	; 0x1753c <__fp_pscA>
   17730:	38 f0       	brcs	.+14     	; 0x17740 <__addsf3+0x20>
   17732:	0e 94 a5 ba 	call	0x1754a	; 0x1754a <__fp_pscB>
   17736:	20 f0       	brcs	.+8      	; 0x17740 <__addsf3+0x20>
   17738:	39 f4       	brne	.+14     	; 0x17748 <__addsf3+0x28>
   1773a:	9f 3f       	cpi	r25, 0xFF	; 255
   1773c:	19 f4       	brne	.+6      	; 0x17744 <__addsf3+0x24>
   1773e:	26 f4       	brtc	.+8      	; 0x17748 <__addsf3+0x28>
   17740:	0c 94 9b ba 	jmp	0x17536	; 0x17536 <__fp_nan>
   17744:	0e f4       	brtc	.+2      	; 0x17748 <__addsf3+0x28>
   17746:	e0 95       	com	r30
   17748:	e7 fb       	bst	r30, 7
   1774a:	0c 94 95 ba 	jmp	0x1752a	; 0x1752a <__fp_inf>

0001774e <__addsf3x>:
__addsf3x():
   1774e:	e9 2f       	mov	r30, r25
   17750:	0e 94 bd ba 	call	0x1757a	; 0x1757a <__fp_split3>
   17754:	58 f3       	brcs	.-42     	; 0x1772c <__addsf3+0xc>
   17756:	ba 17       	cp	r27, r26
   17758:	62 07       	cpc	r22, r18
   1775a:	73 07       	cpc	r23, r19
   1775c:	84 07       	cpc	r24, r20
   1775e:	95 07       	cpc	r25, r21
   17760:	20 f0       	brcs	.+8      	; 0x1776a <__addsf3x+0x1c>
   17762:	79 f4       	brne	.+30     	; 0x17782 <__addsf3x+0x34>
   17764:	a6 f5       	brtc	.+104    	; 0x177ce <__addsf3x+0x80>
   17766:	0c 94 df ba 	jmp	0x175be	; 0x175be <__fp_zero>
   1776a:	0e f4       	brtc	.+2      	; 0x1776e <__addsf3x+0x20>
   1776c:	e0 95       	com	r30
   1776e:	0b 2e       	mov	r0, r27
   17770:	ba 2f       	mov	r27, r26
   17772:	a0 2d       	mov	r26, r0
   17774:	0b 01       	movw	r0, r22
   17776:	b9 01       	movw	r22, r18
   17778:	90 01       	movw	r18, r0
   1777a:	0c 01       	movw	r0, r24
   1777c:	ca 01       	movw	r24, r20
   1777e:	a0 01       	movw	r20, r0
   17780:	11 24       	eor	r1, r1
   17782:	ff 27       	eor	r31, r31
   17784:	59 1b       	sub	r21, r25
   17786:	99 f0       	breq	.+38     	; 0x177ae <__addsf3x+0x60>
   17788:	59 3f       	cpi	r21, 0xF9	; 249
   1778a:	50 f4       	brcc	.+20     	; 0x177a0 <__addsf3x+0x52>
   1778c:	50 3e       	cpi	r21, 0xE0	; 224
   1778e:	68 f1       	brcs	.+90     	; 0x177ea <__addsf3x+0x9c>
   17790:	1a 16       	cp	r1, r26
   17792:	f0 40       	sbci	r31, 0x00	; 0
   17794:	a2 2f       	mov	r26, r18
   17796:	23 2f       	mov	r18, r19
   17798:	34 2f       	mov	r19, r20
   1779a:	44 27       	eor	r20, r20
   1779c:	58 5f       	subi	r21, 0xF8	; 248
   1779e:	f3 cf       	rjmp	.-26     	; 0x17786 <__addsf3x+0x38>
   177a0:	46 95       	lsr	r20
   177a2:	37 95       	ror	r19
   177a4:	27 95       	ror	r18
   177a6:	a7 95       	ror	r26
   177a8:	f0 40       	sbci	r31, 0x00	; 0
   177aa:	53 95       	inc	r21
   177ac:	c9 f7       	brne	.-14     	; 0x177a0 <__addsf3x+0x52>
   177ae:	7e f4       	brtc	.+30     	; 0x177ce <__addsf3x+0x80>
   177b0:	1f 16       	cp	r1, r31
   177b2:	ba 0b       	sbc	r27, r26
   177b4:	62 0b       	sbc	r22, r18
   177b6:	73 0b       	sbc	r23, r19
   177b8:	84 0b       	sbc	r24, r20
   177ba:	ba f0       	brmi	.+46     	; 0x177ea <__addsf3x+0x9c>
   177bc:	91 50       	subi	r25, 0x01	; 1
   177be:	a1 f0       	breq	.+40     	; 0x177e8 <__addsf3x+0x9a>
   177c0:	ff 0f       	add	r31, r31
   177c2:	bb 1f       	adc	r27, r27
   177c4:	66 1f       	adc	r22, r22
   177c6:	77 1f       	adc	r23, r23
   177c8:	88 1f       	adc	r24, r24
   177ca:	c2 f7       	brpl	.-16     	; 0x177bc <__addsf3x+0x6e>
   177cc:	0e c0       	rjmp	.+28     	; 0x177ea <__addsf3x+0x9c>
   177ce:	ba 0f       	add	r27, r26
   177d0:	62 1f       	adc	r22, r18
   177d2:	73 1f       	adc	r23, r19
   177d4:	84 1f       	adc	r24, r20
   177d6:	48 f4       	brcc	.+18     	; 0x177ea <__addsf3x+0x9c>
   177d8:	87 95       	ror	r24
   177da:	77 95       	ror	r23
   177dc:	67 95       	ror	r22
   177de:	b7 95       	ror	r27
   177e0:	f7 95       	ror	r31
   177e2:	9e 3f       	cpi	r25, 0xFE	; 254
   177e4:	08 f0       	brcs	.+2      	; 0x177e8 <__addsf3x+0x9a>
   177e6:	b0 cf       	rjmp	.-160    	; 0x17748 <__addsf3+0x28>
   177e8:	93 95       	inc	r25
   177ea:	88 0f       	add	r24, r24
   177ec:	08 f0       	brcs	.+2      	; 0x177f0 <__addsf3x+0xa2>
   177ee:	99 27       	eor	r25, r25
   177f0:	ee 0f       	add	r30, r30
   177f2:	97 95       	ror	r25
   177f4:	87 95       	ror	r24
   177f6:	08 95       	ret

000177f8 <__divsf3>:
   177f8:	0e 94 10 bc 	call	0x17820	; 0x17820 <__divsf3x>
   177fc:	0c 94 ac ba 	jmp	0x17558	; 0x17558 <__fp_round>
   17800:	0e 94 a5 ba 	call	0x1754a	; 0x1754a <__fp_pscB>
   17804:	58 f0       	brcs	.+22     	; 0x1781c <__divsf3+0x24>
   17806:	0e 94 9e ba 	call	0x1753c	; 0x1753c <__fp_pscA>
   1780a:	40 f0       	brcs	.+16     	; 0x1781c <__divsf3+0x24>
   1780c:	29 f4       	brne	.+10     	; 0x17818 <__divsf3+0x20>
   1780e:	5f 3f       	cpi	r21, 0xFF	; 255
   17810:	29 f0       	breq	.+10     	; 0x1781c <__divsf3+0x24>
   17812:	0c 94 95 ba 	jmp	0x1752a	; 0x1752a <__fp_inf>
   17816:	51 11       	cpse	r21, r1
   17818:	0c 94 e0 ba 	jmp	0x175c0	; 0x175c0 <__fp_szero>
__divsf3():
   1781c:	0c 94 9b ba 	jmp	0x17536	; 0x17536 <__fp_nan>

00017820 <__divsf3x>:
__divsf3x():
   17820:	0e 94 bd ba 	call	0x1757a	; 0x1757a <__fp_split3>
   17824:	68 f3       	brcs	.-38     	; 0x17800 <__divsf3+0x8>

00017826 <__divsf3_pse>:
   17826:	99 23       	and	r25, r25
   17828:	b1 f3       	breq	.-20     	; 0x17816 <__divsf3+0x1e>
   1782a:	55 23       	and	r21, r21
   1782c:	91 f3       	breq	.-28     	; 0x17812 <__divsf3+0x1a>
   1782e:	95 1b       	sub	r25, r21
   17830:	55 0b       	sbc	r21, r21
   17832:	bb 27       	eor	r27, r27
   17834:	aa 27       	eor	r26, r26
   17836:	62 17       	cp	r22, r18
   17838:	73 07       	cpc	r23, r19
   1783a:	84 07       	cpc	r24, r20
   1783c:	38 f0       	brcs	.+14     	; 0x1784c <__divsf3_pse+0x26>
   1783e:	9f 5f       	subi	r25, 0xFF	; 255
   17840:	5f 4f       	sbci	r21, 0xFF	; 255
   17842:	22 0f       	add	r18, r18
   17844:	33 1f       	adc	r19, r19
   17846:	44 1f       	adc	r20, r20
   17848:	aa 1f       	adc	r26, r26
   1784a:	a9 f3       	breq	.-22     	; 0x17836 <__divsf3_pse+0x10>
   1784c:	35 d0       	rcall	.+106    	; 0x178b8 <__divsf3_pse+0x92>
   1784e:	0e 2e       	mov	r0, r30
   17850:	3a f0       	brmi	.+14     	; 0x17860 <__divsf3_pse+0x3a>
   17852:	e0 e8       	ldi	r30, 0x80	; 128
   17854:	32 d0       	rcall	.+100    	; 0x178ba <__divsf3_pse+0x94>
   17856:	91 50       	subi	r25, 0x01	; 1
   17858:	50 40       	sbci	r21, 0x00	; 0
   1785a:	e6 95       	lsr	r30
   1785c:	00 1c       	adc	r0, r0
   1785e:	ca f7       	brpl	.-14     	; 0x17852 <__divsf3_pse+0x2c>
   17860:	2b d0       	rcall	.+86     	; 0x178b8 <__divsf3_pse+0x92>
   17862:	fe 2f       	mov	r31, r30
   17864:	29 d0       	rcall	.+82     	; 0x178b8 <__divsf3_pse+0x92>
   17866:	66 0f       	add	r22, r22
   17868:	77 1f       	adc	r23, r23
   1786a:	88 1f       	adc	r24, r24
   1786c:	bb 1f       	adc	r27, r27
   1786e:	26 17       	cp	r18, r22
   17870:	37 07       	cpc	r19, r23
   17872:	48 07       	cpc	r20, r24
   17874:	ab 07       	cpc	r26, r27
   17876:	b0 e8       	ldi	r27, 0x80	; 128
   17878:	09 f0       	breq	.+2      	; 0x1787c <__divsf3_pse+0x56>
   1787a:	bb 0b       	sbc	r27, r27
   1787c:	80 2d       	mov	r24, r0
   1787e:	bf 01       	movw	r22, r30
   17880:	ff 27       	eor	r31, r31
   17882:	93 58       	subi	r25, 0x83	; 131
   17884:	5f 4f       	sbci	r21, 0xFF	; 255
   17886:	3a f0       	brmi	.+14     	; 0x17896 <__divsf3_pse+0x70>
   17888:	9e 3f       	cpi	r25, 0xFE	; 254
   1788a:	51 05       	cpc	r21, r1
   1788c:	78 f0       	brcs	.+30     	; 0x178ac <__divsf3_pse+0x86>
   1788e:	0c 94 95 ba 	jmp	0x1752a	; 0x1752a <__fp_inf>
   17892:	0c 94 e0 ba 	jmp	0x175c0	; 0x175c0 <__fp_szero>
   17896:	5f 3f       	cpi	r21, 0xFF	; 255
   17898:	e4 f3       	brlt	.-8      	; 0x17892 <__divsf3_pse+0x6c>
   1789a:	98 3e       	cpi	r25, 0xE8	; 232
   1789c:	d4 f3       	brlt	.-12     	; 0x17892 <__divsf3_pse+0x6c>
   1789e:	86 95       	lsr	r24
   178a0:	77 95       	ror	r23
   178a2:	67 95       	ror	r22
   178a4:	b7 95       	ror	r27
   178a6:	f7 95       	ror	r31
   178a8:	9f 5f       	subi	r25, 0xFF	; 255
   178aa:	c9 f7       	brne	.-14     	; 0x1789e <__divsf3_pse+0x78>
   178ac:	88 0f       	add	r24, r24
   178ae:	91 1d       	adc	r25, r1
   178b0:	96 95       	lsr	r25
   178b2:	87 95       	ror	r24
   178b4:	97 f9       	bld	r25, 7
   178b6:	08 95       	ret
   178b8:	e1 e0       	ldi	r30, 0x01	; 1
   178ba:	66 0f       	add	r22, r22
   178bc:	77 1f       	adc	r23, r23
   178be:	88 1f       	adc	r24, r24
   178c0:	bb 1f       	adc	r27, r27
   178c2:	62 17       	cp	r22, r18
   178c4:	73 07       	cpc	r23, r19
   178c6:	84 07       	cpc	r24, r20
   178c8:	ba 07       	cpc	r27, r26
   178ca:	20 f0       	brcs	.+8      	; 0x178d4 <__divsf3_pse+0xae>
   178cc:	62 1b       	sub	r22, r18
   178ce:	73 0b       	sbc	r23, r19
   178d0:	84 0b       	sbc	r24, r20
   178d2:	ba 0b       	sbc	r27, r26
   178d4:	ee 1f       	adc	r30, r30
   178d6:	88 f7       	brcc	.-30     	; 0x178ba <__divsf3_pse+0x94>
   178d8:	e0 95       	com	r30
   178da:	08 95       	ret

000178dc <__fixsfsi>:
   178dc:	0e 94 75 bc 	call	0x178ea	; 0x178ea <__fixunssfsi>
   178e0:	68 94       	set
   178e2:	b1 11       	cpse	r27, r1
   178e4:	0c 94 e0 ba 	jmp	0x175c0	; 0x175c0 <__fp_szero>
   178e8:	08 95       	ret

000178ea <__fixunssfsi>:
   178ea:	0e 94 c5 ba 	call	0x1758a	; 0x1758a <__fp_splitA>
   178ee:	88 f0       	brcs	.+34     	; 0x17912 <__fixunssfsi+0x28>
   178f0:	9f 57       	subi	r25, 0x7F	; 127
   178f2:	98 f0       	brcs	.+38     	; 0x1791a <__fixunssfsi+0x30>
   178f4:	b9 2f       	mov	r27, r25
   178f6:	99 27       	eor	r25, r25
   178f8:	b7 51       	subi	r27, 0x17	; 23
   178fa:	b0 f0       	brcs	.+44     	; 0x17928 <__fixunssfsi+0x3e>
__fixunssfsi():
   178fc:	e1 f0       	breq	.+56     	; 0x17936 <__fixunssfsi+0x4c>
   178fe:	66 0f       	add	r22, r22
   17900:	77 1f       	adc	r23, r23
   17902:	88 1f       	adc	r24, r24
   17904:	99 1f       	adc	r25, r25
   17906:	1a f0       	brmi	.+6      	; 0x1790e <__fixunssfsi+0x24>
   17908:	ba 95       	dec	r27
   1790a:	c9 f7       	brne	.-14     	; 0x178fe <__fixunssfsi+0x14>
   1790c:	14 c0       	rjmp	.+40     	; 0x17936 <__fixunssfsi+0x4c>
   1790e:	b1 30       	cpi	r27, 0x01	; 1
   17910:	91 f0       	breq	.+36     	; 0x17936 <__fixunssfsi+0x4c>
   17912:	0e 94 df ba 	call	0x175be	; 0x175be <__fp_zero>
   17916:	b1 e0       	ldi	r27, 0x01	; 1
   17918:	08 95       	ret
   1791a:	0c 94 df ba 	jmp	0x175be	; 0x175be <__fp_zero>
   1791e:	67 2f       	mov	r22, r23
   17920:	78 2f       	mov	r23, r24
   17922:	88 27       	eor	r24, r24
   17924:	b8 5f       	subi	r27, 0xF8	; 248
   17926:	39 f0       	breq	.+14     	; 0x17936 <__fixunssfsi+0x4c>
   17928:	b9 3f       	cpi	r27, 0xF9	; 249
   1792a:	cc f3       	brlt	.-14     	; 0x1791e <__fixunssfsi+0x34>
   1792c:	86 95       	lsr	r24
   1792e:	77 95       	ror	r23
   17930:	67 95       	ror	r22
   17932:	b3 95       	inc	r27
   17934:	d9 f7       	brne	.-10     	; 0x1792c <__fixunssfsi+0x42>
   17936:	3e f4       	brtc	.+14     	; 0x17946 <__fixunssfsi+0x5c>
   17938:	90 95       	com	r25
   1793a:	80 95       	com	r24
   1793c:	70 95       	com	r23
   1793e:	61 95       	neg	r22
   17940:	7f 4f       	sbci	r23, 0xFF	; 255
   17942:	8f 4f       	sbci	r24, 0xFF	; 255
   17944:	9f 4f       	sbci	r25, 0xFF	; 255
   17946:	08 95       	ret

00017948 <__gesf2>:
__gesf2():
   17948:	0e 94 04 ba 	call	0x17408	; 0x17408 <__fp_cmp>
   1794c:	08 f4       	brcc	.+2      	; 0x17950 <__gesf2+0x8>
   1794e:	8f ef       	ldi	r24, 0xFF	; 255
   17950:	08 95       	ret

00017952 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   17952:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   17954:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   17956:	04 c0       	rjmp	.+8      	; 0x17960 <__udivmodqi4_ep>

00017958 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   17958:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1795a:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1795c:	08 f0       	brcs	.+2      	; 0x17960 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1795e:	96 1b       	sub	r25, r22

00017960 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   17960:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   17962:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   17964:	c9 f7       	brne	.-14     	; 0x17958 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   17966:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   17968:	08 95       	ret

0001796a <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1796a:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1796c:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1796e:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   17970:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   17972:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   17974:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   17976:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   17978:	19 94       	eijmp

0001797a <realloc>:
realloc():
   1797a:	4f 92       	push	r4
   1797c:	5f 92       	push	r5
   1797e:	6f 92       	push	r6
   17980:	7f 92       	push	r7
   17982:	8f 92       	push	r8
   17984:	9f 92       	push	r9
   17986:	af 92       	push	r10
   17988:	bf 92       	push	r11
   1798a:	cf 92       	push	r12
   1798c:	df 92       	push	r13
   1798e:	ef 92       	push	r14
   17990:	ff 92       	push	r15
   17992:	0f 93       	push	r16
   17994:	1f 93       	push	r17
   17996:	cf 93       	push	r28
   17998:	df 93       	push	r29
   1799a:	8c 01       	movw	r16, r24
   1799c:	00 97       	sbiw	r24, 0x00	; 0
   1799e:	99 f4       	brne	.+38     	; 0x179c6 <realloc+0x4c>
   179a0:	cb 01       	movw	r24, r22
   179a2:	df 91       	pop	r29
   179a4:	cf 91       	pop	r28
   179a6:	1f 91       	pop	r17
   179a8:	0f 91       	pop	r16
   179aa:	ff 90       	pop	r15
   179ac:	ef 90       	pop	r14
   179ae:	df 90       	pop	r13
   179b0:	cf 90       	pop	r12
   179b2:	bf 90       	pop	r11
   179b4:	af 90       	pop	r10
   179b6:	9f 90       	pop	r9
   179b8:	8f 90       	pop	r8
   179ba:	7f 90       	pop	r7
   179bc:	6f 90       	pop	r6
   179be:	5f 90       	pop	r5
   179c0:	4f 90       	pop	r4
   179c2:	0c 94 91 b5 	jmp	0x16b22	; 0x16b22 <malloc>
   179c6:	fc 01       	movw	r30, r24
   179c8:	e6 0f       	add	r30, r22
   179ca:	f7 1f       	adc	r31, r23
   179cc:	9c 01       	movw	r18, r24
   179ce:	22 50       	subi	r18, 0x02	; 2
   179d0:	31 09       	sbc	r19, r1
   179d2:	e2 17       	cp	r30, r18
   179d4:	f3 07       	cpc	r31, r19
   179d6:	08 f4       	brcc	.+2      	; 0x179da <realloc+0x60>
   179d8:	ae c0       	rjmp	.+348    	; 0x17b36 <realloc+0x1bc>
   179da:	d9 01       	movw	r26, r18
   179dc:	cd 91       	ld	r28, X+
   179de:	dc 91       	ld	r29, X
   179e0:	11 97       	sbiw	r26, 0x01	; 1
   179e2:	c6 17       	cp	r28, r22
   179e4:	d7 07       	cpc	r29, r23
   179e6:	20 f1       	brcs	.+72     	; 0x17a30 <realloc+0xb6>
   179e8:	c5 30       	cpi	r28, 0x05	; 5
   179ea:	d1 05       	cpc	r29, r1
   179ec:	78 f0       	brcs	.+30     	; 0x17a0c <realloc+0x92>
   179ee:	ce 01       	movw	r24, r28
   179f0:	04 97       	sbiw	r24, 0x04	; 4
   179f2:	86 17       	cp	r24, r22
   179f4:	97 07       	cpc	r25, r23
   179f6:	50 f0       	brcs	.+20     	; 0x17a0c <realloc+0x92>
   179f8:	c6 1b       	sub	r28, r22
   179fa:	d7 0b       	sbc	r29, r23
   179fc:	22 97       	sbiw	r28, 0x02	; 2
   179fe:	c1 93       	st	Z+, r28
   17a00:	d1 93       	st	Z+, r29
   17a02:	6d 93       	st	X+, r22
   17a04:	7c 93       	st	X, r23
   17a06:	cf 01       	movw	r24, r30
   17a08:	0e 94 2d b6 	call	0x16c5a	; 0x16c5a <free>
   17a0c:	c8 01       	movw	r24, r16
   17a0e:	df 91       	pop	r29
   17a10:	cf 91       	pop	r28
   17a12:	1f 91       	pop	r17
   17a14:	0f 91       	pop	r16
   17a16:	ff 90       	pop	r15
   17a18:	ef 90       	pop	r14
   17a1a:	df 90       	pop	r13
   17a1c:	cf 90       	pop	r12
   17a1e:	bf 90       	pop	r11
   17a20:	af 90       	pop	r10
   17a22:	9f 90       	pop	r9
   17a24:	8f 90       	pop	r8
   17a26:	7f 90       	pop	r7
   17a28:	6f 90       	pop	r6
   17a2a:	5f 90       	pop	r5
   17a2c:	4f 90       	pop	r4
   17a2e:	08 95       	ret
   17a30:	5b 01       	movw	r10, r22
   17a32:	ac 1a       	sub	r10, r28
   17a34:	bd 0a       	sbc	r11, r29
   17a36:	4c 01       	movw	r8, r24
   17a38:	8c 0e       	add	r8, r28
   17a3a:	9d 1e       	adc	r9, r29
   17a3c:	a0 91 a6 13 	lds	r26, 0x13A6	; 0x8013a6 <__flp>
   17a40:	b0 91 a7 13 	lds	r27, 0x13A7	; 0x8013a7 <__flp+0x1>
   17a44:	51 2c       	mov	r5, r1
   17a46:	41 2c       	mov	r4, r1
   17a48:	f1 2c       	mov	r15, r1
   17a4a:	e1 2c       	mov	r14, r1
   17a4c:	10 97       	sbiw	r26, 0x00	; 0
   17a4e:	31 f5       	brne	.+76     	; 0x17a9c <realloc+0x122>
   17a50:	80 91 a4 13 	lds	r24, 0x13A4	; 0x8013a4 <__brkval>
   17a54:	90 91 a5 13 	lds	r25, 0x13A5	; 0x8013a5 <__brkval+0x1>
   17a58:	88 15       	cp	r24, r8
   17a5a:	99 05       	cpc	r25, r9
   17a5c:	09 f0       	breq	.+2      	; 0x17a60 <realloc+0xe6>
   17a5e:	5c c0       	rjmp	.+184    	; 0x17b18 <realloc+0x19e>
   17a60:	46 16       	cp	r4, r22
   17a62:	57 06       	cpc	r5, r23
   17a64:	08 f0       	brcs	.+2      	; 0x17a68 <realloc+0xee>
   17a66:	58 c0       	rjmp	.+176    	; 0x17b18 <realloc+0x19e>
   17a68:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   17a6c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   17a70:	00 97       	sbiw	r24, 0x00	; 0
   17a72:	41 f4       	brne	.+16     	; 0x17a84 <realloc+0x10a>
   17a74:	8d b7       	in	r24, 0x3d	; 61
   17a76:	9e b7       	in	r25, 0x3e	; 62
   17a78:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   17a7c:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   17a80:	84 1b       	sub	r24, r20
   17a82:	95 0b       	sbc	r25, r21
   17a84:	e8 17       	cp	r30, r24
   17a86:	f9 07       	cpc	r31, r25
   17a88:	08 f0       	brcs	.+2      	; 0x17a8c <realloc+0x112>
   17a8a:	55 c0       	rjmp	.+170    	; 0x17b36 <realloc+0x1bc>
   17a8c:	f0 93 a5 13 	sts	0x13A5, r31	; 0x8013a5 <__brkval+0x1>
   17a90:	e0 93 a4 13 	sts	0x13A4, r30	; 0x8013a4 <__brkval>
   17a94:	f9 01       	movw	r30, r18
   17a96:	71 83       	std	Z+1, r23	; 0x01
   17a98:	60 83       	st	Z, r22
   17a9a:	b8 cf       	rjmp	.-144    	; 0x17a0c <realloc+0x92>
   17a9c:	8d 91       	ld	r24, X+
   17a9e:	9c 91       	ld	r25, X
   17aa0:	11 97       	sbiw	r26, 0x01	; 1
   17aa2:	12 96       	adiw	r26, 0x02	; 2
   17aa4:	6c 90       	ld	r6, X
   17aa6:	12 97       	sbiw	r26, 0x02	; 2
   17aa8:	13 96       	adiw	r26, 0x03	; 3
   17aaa:	7c 90       	ld	r7, X
   17aac:	13 97       	sbiw	r26, 0x03	; 3
   17aae:	a8 15       	cp	r26, r8
   17ab0:	b9 05       	cpc	r27, r9
   17ab2:	59 f5       	brne	.+86     	; 0x17b0a <realloc+0x190>
   17ab4:	6c 01       	movw	r12, r24
   17ab6:	42 e0       	ldi	r20, 0x02	; 2
   17ab8:	c4 0e       	add	r12, r20
   17aba:	d1 1c       	adc	r13, r1
   17abc:	ca 14       	cp	r12, r10
   17abe:	db 04       	cpc	r13, r11
   17ac0:	20 f1       	brcs	.+72     	; 0x17b0a <realloc+0x190>
   17ac2:	ac 01       	movw	r20, r24
   17ac4:	4a 19       	sub	r20, r10
   17ac6:	5b 09       	sbc	r21, r11
   17ac8:	da 01       	movw	r26, r20
   17aca:	12 96       	adiw	r26, 0x02	; 2
   17acc:	15 97       	sbiw	r26, 0x05	; 5
   17ace:	80 f0       	brcs	.+32     	; 0x17af0 <realloc+0x176>
   17ad0:	62 82       	std	Z+2, r6	; 0x02
   17ad2:	73 82       	std	Z+3, r7	; 0x03
   17ad4:	51 83       	std	Z+1, r21	; 0x01
   17ad6:	40 83       	st	Z, r20
   17ad8:	d9 01       	movw	r26, r18
   17ada:	6d 93       	st	X+, r22
   17adc:	7c 93       	st	X, r23
   17ade:	e1 14       	cp	r14, r1
   17ae0:	f1 04       	cpc	r15, r1
   17ae2:	71 f0       	breq	.+28     	; 0x17b00 <realloc+0x186>
   17ae4:	d7 01       	movw	r26, r14
   17ae6:	13 96       	adiw	r26, 0x03	; 3
   17ae8:	fc 93       	st	X, r31
   17aea:	ee 93       	st	-X, r30
   17aec:	12 97       	sbiw	r26, 0x02	; 2
   17aee:	8e cf       	rjmp	.-228    	; 0x17a0c <realloc+0x92>
   17af0:	22 96       	adiw	r28, 0x02	; 2
   17af2:	8c 0f       	add	r24, r28
   17af4:	9d 1f       	adc	r25, r29
   17af6:	f9 01       	movw	r30, r18
   17af8:	91 83       	std	Z+1, r25	; 0x01
   17afa:	80 83       	st	Z, r24
   17afc:	f3 01       	movw	r30, r6
   17afe:	ef cf       	rjmp	.-34     	; 0x17ade <realloc+0x164>
   17b00:	f0 93 a7 13 	sts	0x13A7, r31	; 0x8013a7 <__flp+0x1>
   17b04:	e0 93 a6 13 	sts	0x13A6, r30	; 0x8013a6 <__flp>
   17b08:	81 cf       	rjmp	.-254    	; 0x17a0c <realloc+0x92>
   17b0a:	48 16       	cp	r4, r24
   17b0c:	59 06       	cpc	r5, r25
   17b0e:	08 f4       	brcc	.+2      	; 0x17b12 <realloc+0x198>
   17b10:	2c 01       	movw	r4, r24
   17b12:	7d 01       	movw	r14, r26
   17b14:	d3 01       	movw	r26, r6
   17b16:	9a cf       	rjmp	.-204    	; 0x17a4c <realloc+0xd2>
   17b18:	cb 01       	movw	r24, r22
   17b1a:	0e 94 91 b5 	call	0x16b22	; 0x16b22 <malloc>
   17b1e:	7c 01       	movw	r14, r24
   17b20:	00 97       	sbiw	r24, 0x00	; 0
   17b22:	49 f0       	breq	.+18     	; 0x17b36 <realloc+0x1bc>
   17b24:	ae 01       	movw	r20, r28
   17b26:	b8 01       	movw	r22, r16
   17b28:	0e 94 a3 bd 	call	0x17b46	; 0x17b46 <memcpy>
   17b2c:	c8 01       	movw	r24, r16
   17b2e:	0e 94 2d b6 	call	0x16c5a	; 0x16c5a <free>
   17b32:	87 01       	movw	r16, r14
   17b34:	6b cf       	rjmp	.-298    	; 0x17a0c <realloc+0x92>
   17b36:	10 e0       	ldi	r17, 0x00	; 0
   17b38:	00 e0       	ldi	r16, 0x00	; 0
   17b3a:	68 cf       	rjmp	.-304    	; 0x17a0c <realloc+0x92>

00017b3c <abort>:
abort():
   17b3c:	81 e0       	ldi	r24, 0x01	; 1
   17b3e:	90 e0       	ldi	r25, 0x00	; 0
   17b40:	f8 94       	cli
   17b42:	0c 94 5e be 	jmp	0x17cbc	; 0x17cbc <_exit>

00017b46 <memcpy>:
memcpy():
   17b46:	fb 01       	movw	r30, r22
   17b48:	dc 01       	movw	r26, r24
   17b4a:	02 c0       	rjmp	.+4      	; 0x17b50 <memcpy+0xa>
   17b4c:	01 90       	ld	r0, Z+
   17b4e:	0d 92       	st	X+, r0
   17b50:	41 50       	subi	r20, 0x01	; 1
   17b52:	50 40       	sbci	r21, 0x00	; 0
   17b54:	d8 f7       	brcc	.-10     	; 0x17b4c <memcpy+0x6>
   17b56:	08 95       	ret

00017b58 <strcat>:
strcat():
   17b58:	fb 01       	movw	r30, r22
   17b5a:	dc 01       	movw	r26, r24
   17b5c:	0d 90       	ld	r0, X+
   17b5e:	00 20       	and	r0, r0
   17b60:	e9 f7       	brne	.-6      	; 0x17b5c <strcat+0x4>
   17b62:	11 97       	sbiw	r26, 0x01	; 1
   17b64:	01 90       	ld	r0, Z+
   17b66:	0d 92       	st	X+, r0
   17b68:	00 20       	and	r0, r0
   17b6a:	e1 f7       	brne	.-8      	; 0x17b64 <strcat+0xc>
   17b6c:	08 95       	ret

00017b6e <strchr>:
strchr():
   17b6e:	fc 01       	movw	r30, r24
   17b70:	81 91       	ld	r24, Z+
   17b72:	86 17       	cp	r24, r22
   17b74:	21 f0       	breq	.+8      	; 0x17b7e <strchr+0x10>
   17b76:	88 23       	and	r24, r24
   17b78:	d9 f7       	brne	.-10     	; 0x17b70 <strchr+0x2>
   17b7a:	99 27       	eor	r25, r25
   17b7c:	08 95       	ret
   17b7e:	31 97       	sbiw	r30, 0x01	; 1
   17b80:	cf 01       	movw	r24, r30
   17b82:	08 95       	ret

00017b84 <strcmp>:
strcmp():
   17b84:	fb 01       	movw	r30, r22
   17b86:	dc 01       	movw	r26, r24
   17b88:	8d 91       	ld	r24, X+
   17b8a:	01 90       	ld	r0, Z+
   17b8c:	80 19       	sub	r24, r0
   17b8e:	01 10       	cpse	r0, r1
   17b90:	d9 f3       	breq	.-10     	; 0x17b88 <strcmp+0x4>
   17b92:	99 0b       	sbc	r25, r25
   17b94:	08 95       	ret

00017b96 <strcpy>:
strcpy():
   17b96:	fb 01       	movw	r30, r22
   17b98:	dc 01       	movw	r26, r24
   17b9a:	01 90       	ld	r0, Z+
   17b9c:	0d 92       	st	X+, r0
   17b9e:	00 20       	and	r0, r0
   17ba0:	e1 f7       	brne	.-8      	; 0x17b9a <strcpy+0x4>
   17ba2:	08 95       	ret

00017ba4 <strncmp>:
strncmp():
   17ba4:	fb 01       	movw	r30, r22
   17ba6:	dc 01       	movw	r26, r24
   17ba8:	41 50       	subi	r20, 0x01	; 1
   17baa:	50 40       	sbci	r21, 0x00	; 0
   17bac:	30 f0       	brcs	.+12     	; 0x17bba <strncmp+0x16>
   17bae:	8d 91       	ld	r24, X+
   17bb0:	01 90       	ld	r0, Z+
   17bb2:	80 19       	sub	r24, r0
   17bb4:	19 f4       	brne	.+6      	; 0x17bbc <strncmp+0x18>
   17bb6:	00 20       	and	r0, r0
   17bb8:	b9 f7       	brne	.-18     	; 0x17ba8 <strncmp+0x4>
   17bba:	88 1b       	sub	r24, r24
   17bbc:	99 0b       	sbc	r25, r25
   17bbe:	08 95       	ret

00017bc0 <strncpy>:
strncpy():
   17bc0:	fb 01       	movw	r30, r22
   17bc2:	dc 01       	movw	r26, r24
   17bc4:	41 50       	subi	r20, 0x01	; 1
   17bc6:	50 40       	sbci	r21, 0x00	; 0
   17bc8:	48 f0       	brcs	.+18     	; 0x17bdc <strncpy+0x1c>
   17bca:	01 90       	ld	r0, Z+
   17bcc:	0d 92       	st	X+, r0
   17bce:	00 20       	and	r0, r0
   17bd0:	c9 f7       	brne	.-14     	; 0x17bc4 <strncpy+0x4>
   17bd2:	01 c0       	rjmp	.+2      	; 0x17bd6 <strncpy+0x16>
   17bd4:	1d 92       	st	X+, r1
   17bd6:	41 50       	subi	r20, 0x01	; 1
   17bd8:	50 40       	sbci	r21, 0x00	; 0
   17bda:	e0 f7       	brcc	.-8      	; 0x17bd4 <strncpy+0x14>
   17bdc:	08 95       	ret

00017bde <printf>:
printf():
   17bde:	cf 93       	push	r28
   17be0:	df 93       	push	r29
   17be2:	cd b7       	in	r28, 0x3d	; 61
   17be4:	de b7       	in	r29, 0x3e	; 62
   17be6:	ae 01       	movw	r20, r28
   17be8:	4a 5f       	subi	r20, 0xFA	; 250
   17bea:	5f 4f       	sbci	r21, 0xFF	; 255
   17bec:	fa 01       	movw	r30, r20
   17bee:	61 91       	ld	r22, Z+
   17bf0:	71 91       	ld	r23, Z+
   17bf2:	af 01       	movw	r20, r30
   17bf4:	80 91 8e 13 	lds	r24, 0x138E	; 0x80138e <__iob+0x2>
   17bf8:	90 91 8f 13 	lds	r25, 0x138F	; 0x80138f <__iob+0x3>
   17bfc:	0e 94 fa b1 	call	0x163f4	; 0x163f4 <vfprintf>
   17c00:	df 91       	pop	r29
   17c02:	cf 91       	pop	r28
   17c04:	08 95       	ret

00017c06 <puts>:
puts():
   17c06:	0f 93       	push	r16
   17c08:	1f 93       	push	r17
   17c0a:	cf 93       	push	r28
   17c0c:	df 93       	push	r29
   17c0e:	e0 91 8e 13 	lds	r30, 0x138E	; 0x80138e <__iob+0x2>
   17c12:	f0 91 8f 13 	lds	r31, 0x138F	; 0x80138f <__iob+0x3>
   17c16:	23 81       	ldd	r18, Z+3	; 0x03
   17c18:	ec 01       	movw	r28, r24
   17c1a:	10 e0       	ldi	r17, 0x00	; 0
   17c1c:	00 e0       	ldi	r16, 0x00	; 0
   17c1e:	21 fd       	sbrc	r18, 1
   17c20:	08 c0       	rjmp	.+16     	; 0x17c32 <puts+0x2c>
   17c22:	0f ef       	ldi	r16, 0xFF	; 255
   17c24:	1f ef       	ldi	r17, 0xFF	; 255
   17c26:	14 c0       	rjmp	.+40     	; 0x17c50 <puts+0x4a>
   17c28:	19 95       	eicall
   17c2a:	89 2b       	or	r24, r25
   17c2c:	11 f0       	breq	.+4      	; 0x17c32 <puts+0x2c>
   17c2e:	0f ef       	ldi	r16, 0xFF	; 255
   17c30:	1f ef       	ldi	r17, 0xFF	; 255
   17c32:	89 91       	ld	r24, Y+
   17c34:	60 91 8e 13 	lds	r22, 0x138E	; 0x80138e <__iob+0x2>
   17c38:	70 91 8f 13 	lds	r23, 0x138F	; 0x80138f <__iob+0x3>
   17c3c:	db 01       	movw	r26, r22
   17c3e:	18 96       	adiw	r26, 0x08	; 8
   17c40:	ed 91       	ld	r30, X+
   17c42:	fc 91       	ld	r31, X
   17c44:	81 11       	cpse	r24, r1
   17c46:	f0 cf       	rjmp	.-32     	; 0x17c28 <puts+0x22>
   17c48:	8a e0       	ldi	r24, 0x0A	; 10
   17c4a:	19 95       	eicall
   17c4c:	89 2b       	or	r24, r25
   17c4e:	49 f7       	brne	.-46     	; 0x17c22 <puts+0x1c>
   17c50:	c8 01       	movw	r24, r16
   17c52:	df 91       	pop	r29
   17c54:	cf 91       	pop	r28
   17c56:	1f 91       	pop	r17
   17c58:	0f 91       	pop	r16
   17c5a:	08 95       	ret

00017c5c <sprintf>:
sprintf():
   17c5c:	0f 93       	push	r16
   17c5e:	1f 93       	push	r17
   17c60:	cf 93       	push	r28
   17c62:	df 93       	push	r29
   17c64:	cd b7       	in	r28, 0x3d	; 61
   17c66:	de b7       	in	r29, 0x3e	; 62
   17c68:	2e 97       	sbiw	r28, 0x0e	; 14
   17c6a:	0f b6       	in	r0, 0x3f	; 63
   17c6c:	f8 94       	cli
   17c6e:	de bf       	out	0x3e, r29	; 62
   17c70:	0f be       	out	0x3f, r0	; 63
   17c72:	cd bf       	out	0x3d, r28	; 61
   17c74:	0e 89       	ldd	r16, Y+22	; 0x16
   17c76:	1f 89       	ldd	r17, Y+23	; 0x17
   17c78:	86 e0       	ldi	r24, 0x06	; 6
   17c7a:	8c 83       	std	Y+4, r24	; 0x04
   17c7c:	1a 83       	std	Y+2, r17	; 0x02
   17c7e:	09 83       	std	Y+1, r16	; 0x01
   17c80:	8f ef       	ldi	r24, 0xFF	; 255
   17c82:	9f e7       	ldi	r25, 0x7F	; 127
   17c84:	9e 83       	std	Y+6, r25	; 0x06
   17c86:	8d 83       	std	Y+5, r24	; 0x05
   17c88:	ae 01       	movw	r20, r28
   17c8a:	46 5e       	subi	r20, 0xE6	; 230
   17c8c:	5f 4f       	sbci	r21, 0xFF	; 255
   17c8e:	68 8d       	ldd	r22, Y+24	; 0x18
   17c90:	79 8d       	ldd	r23, Y+25	; 0x19
   17c92:	ce 01       	movw	r24, r28
   17c94:	01 96       	adiw	r24, 0x01	; 1
   17c96:	0e 94 fa b1 	call	0x163f4	; 0x163f4 <vfprintf>
   17c9a:	2f 81       	ldd	r18, Y+7	; 0x07
   17c9c:	38 85       	ldd	r19, Y+8	; 0x08
   17c9e:	02 0f       	add	r16, r18
   17ca0:	13 1f       	adc	r17, r19
   17ca2:	f8 01       	movw	r30, r16
   17ca4:	10 82       	st	Z, r1
   17ca6:	2e 96       	adiw	r28, 0x0e	; 14
   17ca8:	0f b6       	in	r0, 0x3f	; 63
   17caa:	f8 94       	cli
   17cac:	de bf       	out	0x3e, r29	; 62
   17cae:	0f be       	out	0x3f, r0	; 63
   17cb0:	cd bf       	out	0x3d, r28	; 61
   17cb2:	df 91       	pop	r29
   17cb4:	cf 91       	pop	r28
   17cb6:	1f 91       	pop	r17
   17cb8:	0f 91       	pop	r16
   17cba:	08 95       	ret

00017cbc <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   17cbc:	f8 94       	cli

00017cbe <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   17cbe:	ff cf       	rjmp	.-2      	; 0x17cbe <__stop_program>
